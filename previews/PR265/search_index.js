var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21437779382919836 ± 0.0018573856948260919\n   G2(1) = 0.9160601494976883 ± 0.0008011537239901027\n   G2(2) = 0.9824200480878474 ± 0.0005533259889808921\n   G2(3) = 0.9886618109997298 ± 0.0009934060700729536\n   G2(4) = 0.9824200480878474 ± 0.0005533259889808921\n   G2(5) = 0.9160601494976883 ± 0.0008011537239901027\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.021284803591157 ± 0.1255882171411172\n   Replica 2: -4.078744722460053 ± 0.12476515840815645\n   Replica 3: -3.9906511399918703 ± 0.12794110437588818\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip890\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip890)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip891\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip890)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip892\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip890)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.95 2211.02,1002.95 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.049 2211.02,745.049 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.151 2211.02,487.151 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.253 2211.02,229.253 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.95 423.181,1002.95 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.049 423.181,745.049 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.151 423.181,487.151 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.253 423.181,229.253 \"/>\n<path clip-path=\"url(#clip890)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.99 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.99 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.55 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.61 365.205 1274.21 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.21 Q344.395 1269.61 344.395 1260.88 Q344.395 1252.13 347.45 1247.55 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M290.043 1016.29 L306.363 1016.29 L306.363 1020.23 L284.418 1020.23 L284.418 1016.29 Q287.08 1013.54 291.664 1008.91 Q296.27 1004.25 297.451 1002.91 Q299.696 1000.39 300.576 998.653 Q301.478 996.893 301.478 995.203 Q301.478 992.449 299.534 990.713 Q297.613 988.977 294.511 988.977 Q292.312 988.977 289.858 989.741 Q287.427 990.504 284.65 992.055 L284.65 987.333 Q287.474 986.199 289.927 985.62 Q292.381 985.042 294.418 985.042 Q299.789 985.042 302.983 987.727 Q306.177 990.412 306.177 994.903 Q306.177 997.032 305.367 998.953 Q304.58 1000.85 302.474 1003.44 Q301.895 1004.12 298.793 1007.33 Q295.691 1010.53 290.043 1016.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M316.224 985.667 L334.58 985.667 L334.58 989.602 L320.506 989.602 L320.506 998.074 Q321.524 997.727 322.543 997.565 Q323.562 997.379 324.58 997.379 Q330.367 997.379 333.747 1000.55 Q337.126 1003.72 337.126 1009.14 Q337.126 1014.72 333.654 1017.82 Q330.182 1020.9 323.862 1020.9 Q321.687 1020.9 319.418 1020.53 Q317.173 1020.16 314.765 1019.42 L314.765 1014.72 Q316.849 1015.85 319.071 1016.41 Q321.293 1016.96 323.77 1016.96 Q327.774 1016.96 330.112 1014.86 Q332.45 1012.75 332.45 1009.14 Q332.45 1005.53 330.112 1003.42 Q327.774 1001.31 323.77 1001.31 Q321.895 1001.31 320.02 1001.73 Q318.168 1002.15 316.224 1003.03 L316.224 985.667 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M356.339 988.745 Q352.728 988.745 350.899 992.31 Q349.094 995.852 349.094 1002.98 Q349.094 1010.09 350.899 1013.65 Q352.728 1017.19 356.339 1017.19 Q359.973 1017.19 361.779 1013.65 Q363.608 1010.09 363.608 1002.98 Q363.608 995.852 361.779 992.31 Q359.973 988.745 356.339 988.745 M356.339 985.042 Q362.149 985.042 365.205 989.648 Q368.284 994.231 368.284 1002.98 Q368.284 1011.71 365.205 1016.31 Q362.149 1020.9 356.339 1020.9 Q350.529 1020.9 347.45 1016.31 Q344.395 1011.71 344.395 1002.98 Q344.395 994.231 347.45 989.648 Q350.529 985.042 356.339 985.042 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M286.062 727.769 L304.418 727.769 L304.418 731.704 L290.344 731.704 L290.344 740.176 Q291.363 739.829 292.381 739.667 Q293.4 739.481 294.418 739.481 Q300.205 739.481 303.585 742.653 Q306.964 745.824 306.964 751.241 Q306.964 756.819 303.492 759.921 Q300.02 763 293.701 763 Q291.525 763 289.256 762.629 Q287.011 762.259 284.603 761.518 L284.603 756.819 Q286.687 757.954 288.909 758.509 Q291.131 759.065 293.608 759.065 Q297.613 759.065 299.951 756.958 Q302.288 754.852 302.288 751.241 Q302.288 747.63 299.951 745.523 Q297.613 743.417 293.608 743.417 Q291.733 743.417 289.858 743.833 Q288.006 744.25 286.062 745.13 L286.062 727.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M326.177 730.847 Q322.566 730.847 320.737 734.412 Q318.932 737.954 318.932 745.083 Q318.932 752.19 320.737 755.754 Q322.566 759.296 326.177 759.296 Q329.811 759.296 331.617 755.754 Q333.446 752.19 333.446 745.083 Q333.446 737.954 331.617 734.412 Q329.811 730.847 326.177 730.847 M326.177 727.144 Q331.987 727.144 335.043 731.75 Q338.122 736.333 338.122 745.083 Q338.122 753.81 335.043 758.417 Q331.987 763 326.177 763 Q320.367 763 317.288 758.417 Q314.233 753.81 314.233 745.083 Q314.233 736.333 317.288 731.75 Q320.367 727.144 326.177 727.144 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M356.339 730.847 Q352.728 730.847 350.899 734.412 Q349.094 737.954 349.094 745.083 Q349.094 752.19 350.899 755.754 Q352.728 759.296 356.339 759.296 Q359.973 759.296 361.779 755.754 Q363.608 752.19 363.608 745.083 Q363.608 737.954 361.779 734.412 Q359.973 730.847 356.339 730.847 M356.339 727.144 Q362.149 727.144 365.205 731.75 Q368.284 736.333 368.284 745.083 Q368.284 753.81 365.205 758.417 Q362.149 763 356.339 763 Q350.529 763 347.45 758.417 Q344.395 753.81 344.395 745.083 Q344.395 736.333 347.45 731.75 Q350.529 727.144 356.339 727.144 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M284.835 469.871 L307.057 469.871 L307.057 471.861 L294.511 504.431 L289.627 504.431 L301.432 473.806 L284.835 473.806 L284.835 469.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M316.224 469.871 L334.58 469.871 L334.58 473.806 L320.506 473.806 L320.506 482.278 Q321.524 481.931 322.543 481.769 Q323.562 481.583 324.58 481.583 Q330.367 481.583 333.747 484.755 Q337.126 487.926 337.126 493.343 Q337.126 498.921 333.654 502.023 Q330.182 505.102 323.862 505.102 Q321.687 505.102 319.418 504.731 Q317.173 504.361 314.765 503.62 L314.765 498.921 Q316.849 500.056 319.071 500.611 Q321.293 501.167 323.77 501.167 Q327.774 501.167 330.112 499.06 Q332.45 496.954 332.45 493.343 Q332.45 489.732 330.112 487.625 Q327.774 485.519 323.77 485.519 Q321.895 485.519 320.02 485.935 Q318.168 486.352 316.224 487.232 L316.224 469.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M356.339 472.949 Q352.728 472.949 350.899 476.514 Q349.094 480.056 349.094 487.185 Q349.094 494.292 350.899 497.857 Q352.728 501.398 356.339 501.398 Q359.973 501.398 361.779 497.857 Q363.608 494.292 363.608 487.185 Q363.608 480.056 361.779 476.514 Q359.973 472.949 356.339 472.949 M356.339 469.246 Q362.149 469.246 365.205 473.852 Q368.284 478.435 368.284 487.185 Q368.284 495.912 365.205 500.519 Q362.149 505.102 356.339 505.102 Q350.529 505.102 347.45 500.519 Q344.395 495.912 344.395 487.185 Q344.395 478.435 347.45 473.852 Q350.529 469.246 356.339 469.246 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M256.664 242.597 L264.303 242.597 L264.303 216.232 L255.992 217.898 L255.992 213.639 L264.256 211.973 L268.932 211.973 L268.932 242.597 L276.571 242.597 L276.571 246.533 L256.664 246.533 L256.664 242.597 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M296.015 215.051 Q292.404 215.051 290.576 218.616 Q288.77 222.158 288.77 229.287 Q288.77 236.394 290.576 239.959 Q292.404 243.5 296.015 243.5 Q299.65 243.5 301.455 239.959 Q303.284 236.394 303.284 229.287 Q303.284 222.158 301.455 218.616 Q299.65 215.051 296.015 215.051 M296.015 211.348 Q301.826 211.348 304.881 215.954 Q307.96 220.537 307.96 229.287 Q307.96 238.014 304.881 242.621 Q301.826 247.204 296.015 247.204 Q290.205 247.204 287.127 242.621 Q284.071 238.014 284.071 229.287 Q284.071 220.537 287.127 215.954 Q290.205 211.348 296.015 211.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M326.177 215.051 Q322.566 215.051 320.737 218.616 Q318.932 222.158 318.932 229.287 Q318.932 236.394 320.737 239.959 Q322.566 243.5 326.177 243.5 Q329.811 243.5 331.617 239.959 Q333.446 236.394 333.446 229.287 Q333.446 222.158 331.617 218.616 Q329.811 215.051 326.177 215.051 M326.177 211.348 Q331.987 211.348 335.043 215.954 Q338.122 220.537 338.122 229.287 Q338.122 238.014 335.043 242.621 Q331.987 247.204 326.177 247.204 Q320.367 247.204 317.288 242.621 Q314.233 238.014 314.233 229.287 Q314.233 220.537 317.288 215.954 Q320.367 211.348 326.177 211.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M356.339 215.051 Q352.728 215.051 350.899 218.616 Q349.094 222.158 349.094 229.287 Q349.094 236.394 350.899 239.959 Q352.728 243.5 356.339 243.5 Q359.973 243.5 361.779 239.959 Q363.608 236.394 363.608 229.287 Q363.608 222.158 361.779 218.616 Q359.973 215.051 356.339 215.051 M356.339 211.348 Q362.149 211.348 365.205 215.954 Q368.284 220.537 368.284 229.287 Q368.284 238.014 365.205 242.621 Q362.149 247.204 356.339 247.204 Q350.529 247.204 347.45 242.621 Q344.395 238.014 344.395 229.287 Q344.395 220.537 347.45 215.954 Q350.529 211.348 356.339 211.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip892)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.253 4017.76,229.253 \"/>\n<polyline clip-path=\"url(#clip892)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.53 458.828,1248.15 459.396,1247.7 459.964,1246.15 460.533,1245.6 461.101,1244.96 461.669,1244.25 462.238,1243.46 462.806,1242.56 463.375,1241.57 463.943,1239.48 464.511,1237.3 465.08,1236.06 465.648,1234.71 466.216,1233.22 466.785,1231.61 467.353,1229.88 467.921,1228.01 468.49,1224.98 469.058,1222.84 469.626,1220.56 470.195,1216.04 470.763,1213.36 471.331,1210.55 471.9,1207.55 472.468,1204.38 473.036,1200 473.605,1196.44 474.173,1192.68 474.741,1187.76 475.31,1182.66 475.878,1177.37 476.446,1171.87 477.015,1166.08 477.583,1160.99 478.152,1155.78 478.72,1149.26 479.288,1143.51 479.857,1136.54 480.425,1130.38 480.993,1124 481.562,1114.29 482.13,1104.52 482.698,1096.69 483.267,1089.67 483.835,1081.44 484.403,1072.95 484.972,1064.45 485.54,1055.81 486.108,1044.99 486.677,1034.91 487.245,1026.86 487.813,1018.68 488.382,1010.43 488.95,998.931 489.518,987.385 490.087,974.569 490.655,963.658 491.224,953.908 491.792,944.178 492.36,935.395 492.929,924.394 493.497,913.28 494.065,904.314 494.634,895.169 495.202,884.92 495.77,874.814 496.339,864.487 496.907,852.251 497.475,842.125 498.044,832.927 498.612,822.763 499.18,812.623 499.749,802.325 500.317,792.241 500.885,782.224 501.454,773.045 502.022,763.965 502.59,753.784 503.159,743.725 503.727,731.69 504.295,721.865 504.864,713.069 505.432,698.178 506.001,687.704 506.569,676.331 507.137,668.059 507.706,655.93 508.274,646.009 508.842,638.157 509.411,630.29 509.979,620.561 510.547,611.908 511.116,602.34 511.684,594.864 512.252,586.434 512.821,576.424 513.389,562.354 513.957,555.989 514.526,544.546 515.094,537.404 515.662,528.54 516.231,520.933 516.799,513.368 517.367,506.961 517.936,500.722 518.504,494.527 519.072,488.344 519.641,482.446 520.209,477.739 520.778,471.751 521.346,467.952 521.914,462.15 522.483,456.6 523.051,453.186 523.619,446.605 524.188,443.219 524.756,436.942 525.324,432.736 525.893,429.698 526.461,425.506 527.029,419.459 527.598,415.542 528.166,407.549 528.734,404.136 529.303,399.477 529.871,395.003 530.439,391.635 531.008,386.488 531.576,382.554 532.144,377.682 532.713,373.781 533.281,370.272 533.85,367.761 534.418,365.18 534.986,361.537 535.555,356.892 536.123,352.611 536.691,348.446 537.26,346.606 537.828,342.555 538.396,338.478 538.965,331.496 539.533,330.183 540.101,327.716 540.67,325.408 541.238,324.271 541.806,326.169 542.375,324.544 542.943,322.017 543.511,322.593 544.08,321.991 544.648,319.059 545.216,315.395 545.785,312.709 546.353,309.274 546.921,306.107 547.49,303.751 548.058,301.857 548.627,300.886 549.195,299.005 549.763,296.984 550.332,297.221 550.9,294.145 551.468,294.504 552.037,296.752 552.605,293.603 553.173,291.743 553.742,287.559 554.31,285.803 554.878,285.217 555.447,284.616 556.015,281.728 556.583,280.009 557.152,276.454 557.72,275.158 558.288,274.06 558.857,272.848 559.425,273.843 559.993,274.814 560.562,274.455 561.13,274.188 561.698,271.671 562.267,271.302 562.835,271.142 563.404,273.797 563.972,272.308 564.54,270.873 565.109,271.299 565.677,271.815 566.245,268.11 566.814,265.685 567.382,264.489 567.95,265.251 568.519,263.973 569.087,261.725 569.655,261.698 570.224,260.682 570.792,261.645 571.36,259.614 571.929,260.524 572.497,259.218 573.065,260.059 573.634,261.825 574.202,260.336 574.77,259.828 575.339,257.306 575.907,257.934 576.476,258.659 577.044,257.325 577.612,256.885 578.181,256.619 578.749,254.155 579.317,253.98 579.886,255.033 580.454,255.02 581.022,254.638 581.591,255.46 582.159,255.309 582.727,252.193 583.296,251.947 583.864,251.874 584.432,252.656 585.001,251.328 585.569,251.245 586.137,251.08 586.706,246.748 587.274,250.113 587.842,250.103 588.411,250.781 588.979,250.657 589.547,251.371 590.116,249.92 590.684,250.524 591.253,249.211 591.821,248.12 592.389,246.834 592.958,245.675 593.526,245.739 594.094,242.519 594.663,242.667 595.231,241.904 595.799,242.139 596.368,241.338 596.936,241.592 597.504,242.524 598.073,244.851 598.641,243.777 599.209,243.956 599.778,244.665 600.346,241.548 600.914,242.477 601.483,244.608 602.051,242.489 602.619,242.289 603.188,240.153 603.756,239.47 604.325,239.492 604.893,238.595 605.461,240.089 606.03,239.397 606.598,239.668 607.166,238.716 607.735,236.875 608.303,236.122 608.871,233.617 609.44,235.209 610.008,233.491 610.576,235.249 611.145,234.724 611.713,235.132 612.281,236.414 612.85,236.973 613.418,237.127 613.986,238.68 614.555,238.886 615.123,237.926 615.691,236.073 616.26,236.621 616.828,236.936 617.396,237.228 617.965,238.443 618.533,237.948 619.102,241.338 619.67,240.404 620.238,239.463 620.807,236.589 621.375,238.16 621.943,237.356 622.512,236.692 623.08,236.232 623.648,237.454 624.217,235.704 624.785,236.181 625.353,236.385 625.922,238.57 626.49,239.751 627.058,239.717 627.627,238.928 628.195,240.047 628.763,237.95 629.332,237.053 629.9,238.341 630.468,237.158 631.037,237.193 631.605,235.036 632.173,235.394 632.742,235.594 633.31,235.876 633.879,233.84 634.447,234.425 635.015,234.611 635.584,235.956 636.152,236.178 636.72,236.37 637.289,234.68 637.857,234.727 638.425,236.078 638.994,238.305 639.562,238.566 640.13,236.379 640.699,233.421 641.267,235.905 641.835,237.033 642.404,237.066 642.972,237.121 643.54,237.318 644.109,236.553 644.677,239.865 645.245,239.675 645.814,240.491 646.382,239.046 646.951,238.004 647.519,237.031 648.087,238.247 648.656,237.302 649.224,237.548 649.792,236.615 650.361,240.741 650.929,240.422 651.497,240.105 652.066,239.958 652.634,240.811 653.202,239.423 653.771,237.124 654.339,239.257 654.907,236.752 655.476,236.603 656.044,236.751 656.612,235.581 657.181,234.528 657.749,232.451 658.317,234.736 658.886,232.724 659.454,233.952 660.022,233.872 660.591,232.86 661.159,232.911 661.728,234.941 662.296,235.161 662.864,235.13 663.433,236.086 664.001,234.965 664.569,233.968 665.138,236.023 665.706,234.899 666.274,238.984 666.843,238.788 667.411,237.66 667.979,235.343 668.548,235.069 669.116,233.024 669.684,233.961 670.253,232.756 670.821,231.745 671.389,232.975 671.958,233.133 672.526,233.361 673.094,233.252 673.663,233.236 674.231,230.293 674.799,230.499 675.368,229.874 675.936,232.351 676.505,232.52 677.073,232.787 677.641,234.085 678.21,233.975 678.778,233.901 679.346,233.874 679.915,233.78 680.483,234.018 681.051,234.084 681.62,235.051 682.188,233.826 682.756,233.733 683.325,233.775 683.893,236.761 684.461,236.453 685.03,235.151 685.598,234.886 686.166,233.86 686.735,231.634 687.303,230.76 687.871,231.104 688.44,232.078 689.008,231.324 689.577,230.505 690.145,232.806 690.713,234.764 691.282,233.835 691.85,232.833 692.418,230.697 692.987,230.899 693.555,231.06 694.123,230.184 694.692,229.278 695.26,232.605 695.828,229.581 696.397,230.051 696.965,229.079 697.533,231.32 698.102,231.16 698.67,232.434 699.238,232.448 699.807,230.46 700.375,229.656 700.943,231.989 701.512,232.166 702.08,232.453 702.648,231.798 703.217,231.055 703.785,231.297 704.354,232.281 704.922,234.373 705.49,233.432 706.059,232.333 706.627,231.219 707.195,231.484 707.764,230.47 708.332,231.529 708.9,231.581 709.469,232.718 710.037,234.484 710.605,233.183 711.174,229.845 711.742,232.3 712.31,230.277 712.879,231.493 713.447,231.691 714.015,230.573 714.584,230.858 715.152,233.028 715.72,233.001 716.289,235.091 716.857,235.94 717.425,235.73 717.994,232.492 718.562,230.432 719.131,226.328 719.699,225.661 720.267,227.073 720.836,226.381 721.404,227.845 721.972,227.243 722.541,225.647 723.109,225.123 723.677,228.033 724.246,225.205 724.814,226.825 725.382,228.147 725.951,228.574 726.519,226.151 727.087,225.608 727.656,227.225 728.224,227.54 728.792,230.02 729.361,229.124 729.929,231.433 730.497,229.569 731.066,230.985 731.634,229.058 732.203,229.543 732.771,228.755 733.339,230.054 733.908,227.385 734.476,226.874 735.044,225.991 735.613,227.68 736.181,228.3 736.749,227.519 737.318,228.18 737.886,229.6 738.454,231.122 739.023,231.294 739.591,229.416 740.159,227.431 740.728,229.905 741.296,231.206 741.864,229.444 742.433,230.802 743.001,232.021 743.569,234.335 744.138,235.604 744.706,236.672 745.274,235.434 745.843,236.616 746.411,236.487 746.98,236.012 747.548,234.794 748.116,234.604 748.685,234.319 749.253,231.101 749.821,231.293 750.39,232.597 750.958,230.569 751.526,232.839 752.095,232.522 752.663,231.469 753.231,233.542 753.8,233.644 754.368,232.431 754.936,232.42 755.505,232.345 756.073,232.297 756.641,233.292 757.21,233.232 757.778,231.111 758.346,232.169 758.915,233.165 759.483,233.064 760.052,230.863 760.62,232.895 761.188,232.958 761.757,231.875 762.325,230.851 762.893,230.042 763.462,229.262 764.03,229.657 764.598,227.554 765.167,229.916 765.735,231.138 766.303,232.481 766.872,231.265 767.44,230.195 768.008,231.063 768.577,230.094 769.145,230.119 769.713,231.302 770.282,229.106 770.85,230.286 771.418,230.479 771.987,231.493 772.555,229.421 773.123,229.734 773.692,231.037 774.26,234.185 774.829,233.018 775.397,230.921 775.965,232.064 776.534,230.936 777.102,234.08 777.67,233.765 778.239,233.511 778.807,233.523 779.375,233.496 779.944,234.251 780.512,232.049 781.08,232.816 781.649,230.715 782.217,229.71 782.785,229.972 783.354,230.046 783.922,230.046 784.49,231.254 785.059,232.313 785.627,232.293 786.195,231.442 786.764,230.541 787.332,229.785 787.9,233.056 788.469,231.041 789.037,234.137 789.606,233.697 790.174,232.547 790.742,233.517 791.311,233.364 791.879,233.159 792.447,232.064 793.016,231.999 793.584,231.896 794.152,233.989 794.721,233.807 795.289,233.409 795.857,233.92 796.426,234.911 796.994,234.677 797.562,234.633 798.131,234.276 798.699,236.116 799.267,238.752 799.836,234.059 800.404,234.824 800.972,235.478 801.541,233.148 802.109,231.869 802.678,230.644 803.246,231.669 803.814,231.672 804.383,232.574 804.951,232.378 805.519,233.209 806.088,232.81 806.656,231.478 807.224,231.324 807.793,231.193 808.361,230.941 808.929,231.86 809.498,230.925 810.066,227.652 810.634,228.92 811.203,234.028 811.771,236.852 812.339,235.298 812.908,232.764 813.476,234.425 814.044,233.036 814.613,232.981 815.181,233.546 815.749,234.152 816.318,232.589 816.886,233.412 817.455,231.912 818.023,232.826 818.591,232.43 819.16,233.336 819.728,234.066 820.296,234.525 820.865,233.958 821.433,230.357 822.001,230.295 822.57,229.961 823.138,228.625 823.706,227.601 824.275,226.74 824.843,227.711 825.411,229.81 825.98,230.676 826.548,230.467 827.116,232.353 827.685,233.238 828.253,231.775 828.821,230.483 829.39,229.3 829.958,231.038 830.526,228.798 831.095,229.632 831.663,228.589 832.232,229.243 832.8,227.228 833.368,226.217 833.937,224.407 834.505,225.8 835.073,225.757 835.642,224.881 836.21,224.13 836.778,224.577 837.347,221.869 837.915,222.513 838.483,222.955 839.052,223.48 839.62,221.937 840.188,226.577 840.757,227.836 841.325,227.856 841.893,228.192 842.462,228.217 843.03,228.233 843.598,227.369 844.167,228.387 844.735,229.345 845.304,228.407 845.872,229.428 846.44,231.538 847.009,230.51 847.577,228.454 848.145,226.622 848.714,224.653 849.282,223.845 849.85,224.137 850.419,222.447 850.987,221.994 851.555,223.292 852.124,224.008 852.692,226.464 853.26,228.932 853.829,229.236 854.397,229.194 854.965,229.144 855.534,229.121 856.102,229.038 856.67,229.174 857.239,228.047 857.807,228.433 858.375,228.604 858.944,229.85 859.512,230.079 860.081,231.926 860.649,231.649 861.217,230.358 861.786,229.513 862.354,230.794 862.922,229.73 863.491,229.833 864.059,227.804 864.627,228.794 865.196,230.837 865.764,231.833 866.332,232.617 866.901,230.37 867.469,229.255 868.037,227.459 868.606,230.795 869.174,230.995 869.742,231.737 870.311,231.471 870.879,232.52 871.447,234.39 872.016,232.839 872.584,232.288 873.152,232.061 873.721,229.069 874.289,230.265 874.858,230.131 875.426,229.057 875.994,229.029 876.563,228.148 877.131,228.156 877.699,228.38 878.268,227.574 878.836,227.658 879.404,225.751 879.973,226.061 880.541,226.196 881.109,228.503 881.678,228.498 882.246,229.774 882.814,229.927 883.383,231.13 883.951,232.028 884.519,230.855 885.088,231.8 885.656,229.828 886.224,228.726 886.793,228.06 887.361,229.43 887.93,228.358 888.498,228.321 889.066,228.389 889.635,228.615 890.203,228.621 890.771,228.794 891.34,229.965 891.908,229.915 892.476,230.213 893.045,230.266 893.613,231.363 894.181,231.154 894.75,232.044 895.318,231.749 895.886,230.499 896.455,228.496 897.023,227.735 897.591,224.842 898.16,224.109 898.728,224.717 899.296,226.319 899.865,225.659 900.433,225.882 901.001,226.214 901.57,226.662 902.138,227.795 902.707,229.162 903.275,228.344 903.843,229.502 904.412,228.569 904.98,226.599 905.548,226.07 906.117,226.392 906.685,226.633 907.253,227.027 907.822,229.487 908.39,229.521 908.958,229.391 909.527,228.436 910.095,227.571 910.663,225.724 911.232,227.052 911.8,233.452 912.368,233.247 912.937,232.201 913.505,232.092 914.073,232.122 914.642,231.855 915.21,231.865 915.779,230.809 916.347,231.697 916.915,232.619 917.484,233.406 918.052,233.495 918.62,230.146 919.189,229.114 919.757,228.25 920.325,228.349 920.894,229.551 921.462,230.679 922.03,231.645 922.599,229.65 923.167,227.678 923.735,225.727 924.304,225.052 924.872,225.252 925.44,227.76 926.009,228.982 926.577,230.039 927.145,231.163 927.714,231.094 928.282,231.109 928.85,231.002 929.419,230.829 929.987,230.793 930.556,228.603 931.124,229.894 931.692,226.935 932.261,226.27 932.829,225.503 933.397,227.052 933.966,227.317 934.534,228.664 935.102,228.971 935.671,229.016 936.239,230.215 936.807,232.363 937.376,235.141 937.944,234.8 938.512,235.558 939.081,236.045 939.649,235.816 940.217,237.482 940.786,240.093 941.354,239.177 941.922,238.422 942.491,236.778 943.059,237.429 943.627,236.72 944.196,235.164 944.764,233.932 945.333,232.513 945.901,231.231 946.469,232.123 947.038,228.715 947.606,230.7 948.174,231.472 948.743,231.345 949.311,231.159 949.879,228.672 950.448,226.564 951.016,226.73 951.584,225.944 952.153,227.333 952.721,227.413 953.289,225.484 953.858,227.82 954.426,227.743 954.994,228.871 955.563,230.007 956.131,231.993 956.699,233.014 957.268,230.862 957.836,229.798 958.405,229.871 958.973,228.842 959.541,228.999 960.11,230.21 960.678,229.003 961.246,227.932 961.815,228.137 962.383,228.103 962.951,228.055 963.52,228.084 964.088,227.027 964.656,227.211 965.225,227.251 965.793,226.425 966.361,227.617 966.93,228.113 967.498,229.403 968.066,229.491 968.635,228.4 969.203,228.506 969.771,228.394 970.34,228.576 970.908,226.426 971.476,226.482 972.045,226.849 972.613,226.197 973.182,226.587 973.75,227.137 974.318,229.409 974.887,228.37 975.455,228.371 976.023,228.361 976.592,229.342 977.16,231.485 977.728,229.26 978.297,228.225 978.865,228.31 979.433,229.371 980.002,231.588 980.57,228.636 981.138,228.699 981.707,229.843 982.275,226.807 982.843,227.064 983.412,227.427 983.98,227.743 984.548,228.02 985.117,227.055 985.685,227.232 986.253,227.398 986.822,228.728 987.39,229.674 987.959,229.775 988.527,231.941 989.095,232.75 989.664,232.549 990.232,231.314 990.8,231.211 991.369,231.052 991.937,232.068 992.505,229.124 993.074,230.149 993.642,230.348 994.21,231.351 994.779,230.156 995.347,230.237 995.915,233.412 996.484,228.945 997.052,227.935 997.62,229.403 998.189,229.31 998.757,232.662 999.325,234.776 999.894,233.487 1000.46,234.495 1001.03,236.402 1001.6,236.082 1002.17,236.492 1002.74,238.088 1003.3,238.242 1003.87,235.462 1004.44,236.4 1005.01,234.831 1005.58,235.55 1006.15,235.044 1006.71,234.802 1007.28,234.493 1007.85,233.091 1008.42,231.708 1008.99,229.367 1009.56,229.205 1010.12,229.039 1010.69,229.856 1011.26,232.969 1011.83,232.704 1012.4,232.495 1012.97,233.121 1013.53,231.79 1014.1,231.623 1014.67,229.256 1015.24,228.989 1015.81,228.844 1016.38,229.726 1016.94,228.309 1017.51,225.27 1018.08,224.472 1018.65,224.543 1019.22,227.002 1019.79,226.072 1020.35,226.086 1020.92,225.181 1021.49,223.253 1022.06,224.513 1022.63,223.874 1023.2,225.288 1023.76,226.385 1024.33,226.659 1024.9,224.875 1025.47,226.235 1026.04,224.304 1026.61,224.512 1027.17,225.782 1027.74,225.919 1028.31,226.26 1028.88,223.422 1029.45,223.843 1030.02,223.309 1030.58,225.818 1031.15,229.163 1031.72,228.28 1032.29,229.413 1032.86,231.418 1033.43,229.182 1033.99,230.185 1034.56,230.134 1035.13,228.866 1035.7,231.141 1036.27,231.029 1036.84,231.139 1037.4,232.018 1037.97,230.863 1038.54,228.834 1039.11,225.958 1039.68,226.202 1040.25,227.326 1040.81,226.427 1041.38,226.698 1041.95,225.99 1042.52,226.286 1043.09,225.423 1043.66,227.744 1044.22,227.761 1044.79,226.719 1045.36,226.063 1045.93,226.413 1046.5,225.692 1047.07,224.79 1047.63,224.301 1048.2,226.876 1048.77,227.943 1049.34,232.309 1049.91,229.18 1050.48,229.381 1051.05,227.457 1051.61,225.739 1052.18,228.132 1052.75,227.021 1053.32,229.587 1053.89,230.648 1054.46,227.578 1055.02,227.815 1055.59,229.176 1056.16,230.248 1056.73,231.231 1057.3,229.994 1057.87,231.16 1058.43,231.27 1059,230.062 1059.57,230.219 1060.14,233.138 1060.71,234.996 1061.28,235.577 1061.84,234.118 1062.41,232.893 1062.98,231.781 1063.55,230.79 1064.12,231.831 1064.69,230.641 1065.25,231.526 1065.82,231.329 1066.39,233.16 1066.96,233.022 1067.53,232.914 1068.1,235.848 1068.66,235.291 1069.23,234.838 1069.8,230.113 1070.37,227.857 1070.94,227.208 1071.51,225.326 1072.07,226.837 1072.64,226.174 1073.21,228.351 1073.78,228.581 1074.35,228.765 1074.92,229.599 1075.48,229.612 1076.05,229.743 1076.62,229.851 1077.19,230.883 1077.76,230.989 1078.33,230.894 1078.89,230.767 1079.46,229.682 1080.03,228.687 1080.6,227.783 1081.17,228.113 1081.74,227.37 1082.3,227.594 1082.87,227.674 1083.44,227.993 1084.01,229.104 1084.58,227.933 1085.15,227.837 1085.71,230.199 1086.28,229.163 1086.85,225.042 1087.42,223.445 1087.99,220.909 1088.56,221.374 1089.12,227.032 1089.69,224.152 1090.26,221.584 1090.83,223.138 1091.4,223.831 1091.97,224.52 1092.53,222.804 1093.1,224.43 1093.67,224.892 1094.24,226.366 1094.81,229.765 1095.38,228.727 1095.94,226.947 1096.51,227.129 1097.08,226.212 1097.65,227.468 1098.22,226.636 1098.79,226.948 1099.35,229.372 1099.92,230.768 1100.49,230.742 1101.06,228.417 1101.63,230.586 1102.2,228.752 1102.76,228.807 1103.33,231.035 1103.9,230.948 1104.47,233.147 1105.04,233.017 1105.61,234.905 1106.17,236.485 1106.74,234.925 1107.31,236.639 1107.88,234.865 1108.45,233.723 1109.02,231.442 1109.58,231.481 1110.15,231.544 1110.72,232.313 1111.29,234.227 1111.86,233.011 1112.43,234.657 1112.99,231.29 1113.56,230.165 1114.13,230.252 1114.7,229.061 1115.27,228.247 1115.84,227.373 1116.4,227.377 1116.97,227.688 1117.54,228.796 1118.11,230.995 1118.68,232.797 1119.25,233.567 1119.81,232.166 1120.38,231.115 1120.95,229.974 1121.52,230.863 1122.09,233.971 1122.66,233.772 1123.23,233.537 1123.79,233.279 1124.36,234.071 1124.93,232.728 1125.5,234.554 1126.07,235.169 1126.64,236.787 1127.2,234.155 1127.77,234.735 1128.34,233.29 1128.91,231.949 1129.48,229.782 1130.05,229.737 1130.61,227.643 1131.18,227.613 1131.75,228.823 1132.32,228.577 1132.89,226.752 1133.46,226.994 1134.02,229.309 1134.59,228.483 1135.16,231.879 1135.73,231.826 1136.3,231.641 1136.87,234.423 1137.43,233.105 1138,230.484 1138.57,227.865 1139.14,226.922 1139.71,227.031 1140.28,226.4 1140.84,226.759 1141.41,224.846 1141.98,226.046 1142.55,227.327 1143.12,227.378 1143.69,225.555 1144.25,225.904 1144.82,225.182 1145.39,222.364 1145.96,224.807 1146.53,224.081 1147.1,221.353 1147.66,224.052 1148.23,223.317 1148.8,223.629 1149.37,224.092 1149.94,222.31 1150.51,222.727 1151.07,226.364 1151.64,225.473 1152.21,226.943 1152.78,228.166 1153.35,228.188 1153.92,228.399 1154.48,228.597 1155.05,230.683 1155.62,228.465 1156.19,226.453 1156.76,225.648 1157.33,226.087 1157.89,226.414 1158.46,229.668 1159.03,228.935 1159.6,228.942 1160.17,226.836 1160.74,228.181 1161.3,228.481 1161.87,228.721 1162.44,228.769 1163.01,227.747 1163.58,226.805 1164.15,230.322 1164.71,231.3 1165.28,231.44 1165.85,229.439 1166.42,231.477 1166.99,232.301 1167.56,232.207 1168.12,231.112 1168.69,231.077 1169.26,231.823 1169.83,233.877 1170.4,231.443 1170.97,231.314 1171.53,233.401 1172.1,233.192 1172.67,230.676 1173.24,230.404 1173.81,232.376 1174.38,232.207 1174.94,233.178 1175.51,232.987 1176.08,233.789 1176.65,232.434 1177.22,230.192 1177.79,229.102 1178.35,228.056 1178.92,229.225 1179.49,230.287 1180.06,229.336 1180.63,227.449 1181.2,227.722 1181.76,232.097 1182.33,231.878 1182.9,233.675 1183.47,234.204 1184.04,235.015 1184.61,234.521 1185.17,235 1185.74,237.601 1186.31,234.959 1186.88,232.468 1187.45,232.044 1188.02,232.782 1188.58,231.193 1189.15,231.221 1189.72,230.991 1190.29,230.823 1190.86,233.008 1191.43,233.679 1192,233.536 1192.56,232.06 1193.13,232.753 1193.7,230.407 1194.27,230.284 1194.84,230.304 1195.41,231.258 1195.97,231.144 1196.54,232.14 1197.11,231.875 1197.68,228.583 1198.25,229.385 1198.82,228.131 1199.38,231.236 1199.95,231.033 1200.52,229.809 1201.09,230.629 1201.66,228.33 1202.23,227.348 1202.79,227.324 1203.36,228.538 1203.93,229.342 1204.5,227.151 1205.07,226.35 1205.64,226.594 1206.2,225.876 1206.77,229.102 1207.34,231.219 1207.91,231.98 1208.48,231.981 1209.05,231.954 1209.61,232.518 1210.18,232.189 1210.75,233.105 1211.32,234.875 1211.89,231.319 1212.46,232.213 1213.02,230.906 1213.59,232.82 1214.16,231.516 1214.73,232.397 1215.3,233.019 1215.87,231.57 1216.43,232.244 1217,231.778 1217.57,231.437 1218.14,232.173 1218.71,230.845 1219.28,233.781 1219.84,230.055 1220.41,228.757 1220.98,227.523 1221.55,228.478 1222.12,227.342 1222.69,227.507 1223.25,226.71 1223.82,227.871 1224.39,226.841 1224.96,226.84 1225.53,227.018 1226.1,225.845 1226.66,226.174 1227.23,226.255 1227.8,225.171 1228.37,224.459 1228.94,223.604 1229.51,222.995 1230.07,222.378 1230.64,222.687 1231.21,219.919 1231.78,220.539 1232.35,222.994 1232.92,222.199 1233.48,222.826 1234.05,223.298 1234.62,223.786 1235.19,224.948 1235.76,224.21 1236.33,225.609 1236.89,225.782 1237.46,226.115 1238.03,227.5 1238.6,228.671 1239.17,229.62 1239.74,230.545 1240.3,227.201 1240.87,227.037 1241.44,228.521 1242.01,231.501 1242.58,233.382 1243.15,234.2 1243.71,230.93 1244.28,230.755 1244.85,232.601 1245.42,232.399 1245.99,230.176 1246.56,234.209 1247.12,235.017 1247.69,232.496 1248.26,232.194 1248.83,229.782 1249.4,230.667 1249.97,230.456 1250.53,230.032 1251.1,226.955 1251.67,227.942 1252.24,228.198 1252.81,229.374 1253.38,230.106 1253.94,227.856 1254.51,228.85 1255.08,229.907 1255.65,229.729 1256.22,230.598 1256.79,229.541 1257.35,230.281 1257.92,231.066 1258.49,230.989 1259.06,230.715 1259.63,231.681 1260.2,230.206 1260.76,230.126 1261.33,229.064 1261.9,230.066 1262.47,226.97 1263.04,226.243 1263.61,226.519 1264.18,226.781 1264.74,227.036 1265.31,229.342 1265.88,229.253 1266.45,231.298 1267.02,229.302 1267.59,227.012 1268.15,227.029 1268.72,227.237 1269.29,227.4 1269.86,227.402 1270.43,227.329 1271,227.552 1271.56,228.641 1272.13,227.549 1272.7,228.751 1273.27,228.665 1273.84,229.78 1274.41,228.745 1274.97,227.461 1275.54,227.36 1276.11,230.606 1276.68,229.598 1277.25,230.692 1277.82,229.564 1278.38,229.764 1278.95,229.839 1279.52,230.671 1280.09,226.322 1280.66,226.722 1281.23,227.034 1281.79,230.362 1282.36,229.387 1282.93,227.594 1283.5,228.574 1284.07,230.882 1284.64,230.959 1285.2,232.886 1285.77,231.593 1286.34,232.323 1286.91,230.128 1287.48,231.148 1288.05,231.196 1288.61,231.866 1289.18,231.572 1289.75,230.418 1290.32,229.237 1290.89,229.208 1291.46,227.991 1292.02,227.205 1292.59,226.417 1293.16,226.413 1293.73,225.438 1294.3,227.975 1294.87,228.079 1295.43,229.423 1296,228.366 1296.57,230.6 1297.14,230.287 1297.71,227.267 1298.28,229.64 1298.84,230.582 1299.41,230.39 1299.98,230.455 1300.55,230.258 1301.12,230.337 1301.69,230.287 1302.25,230.199 1302.82,230.271 1303.39,229.11 1303.96,227.156 1304.53,228.474 1305.1,226.565 1305.66,224.839 1306.23,225.224 1306.8,225.715 1307.37,227.159 1307.94,227.168 1308.51,225.222 1309.07,226.478 1309.64,226.538 1310.21,226.675 1310.78,228.761 1311.35,230.869 1311.92,231.685 1312.48,233.657 1313.05,231.424 1313.62,232.386 1314.19,231.303 1314.76,233.28 1315.33,232.95 1315.89,232.638 1316.46,232.315 1317.03,230.917 1317.6,229.989 1318.17,228.703 1318.74,228.721 1319.3,225.632 1319.87,223.613 1320.44,224.033 1321.01,223.387 1321.58,222.792 1322.15,224.202 1322.71,223.473 1323.28,225.946 1323.85,225.153 1324.42,223.441 1324.99,224.961 1325.56,225.088 1326.12,227.612 1326.69,227.888 1327.26,228.217 1327.83,228.482 1328.4,229.635 1328.97,230.799 1329.53,229.765 1330.1,227.826 1330.67,228.221 1331.24,228.253 1331.81,230.797 1332.38,230.849 1332.94,231.876 1333.51,229.894 1334.08,231.909 1334.65,232.715 1335.22,232.225 1335.79,235.177 1336.36,235.822 1336.92,237.256 1337.49,238.677 1338.06,236.745 1338.63,236.259 1339.2,231.472 1339.77,230.228 1340.33,229.111 1340.9,228.075 1341.47,226.132 1342.04,226.113 1342.61,225.436 1343.18,224.561 1343.74,224.934 1344.31,226.511 1344.88,226.73 1345.45,229.196 1346.02,227.972 1346.59,229.163 1347.15,226.101 1347.72,225.383 1348.29,223.854 1348.86,224.232 1349.43,224.729 1350,227.2 1350.56,227.274 1351.13,226.033 1351.7,225.431 1352.27,223.6 1352.84,226.061 1353.41,227.5 1353.97,228.726 1354.54,230.901 1355.11,229.802 1355.68,228.988 1356.25,230.241 1356.82,227.17 1357.38,226.346 1357.95,226.611 1358.52,225.842 1359.09,227.149 1359.66,227.245 1360.23,227.635 1360.79,228.874 1361.36,230.241 1361.93,230.291 1362.5,230.222 1363.07,230.484 1363.64,230.489 1364.2,230.503 1364.77,230.776 1365.34,229.742 1365.91,227.774 1366.48,230.141 1367.05,227.835 1367.61,225.003 1368.18,225.277 1368.75,224.68 1369.32,225.253 1369.89,229.708 1370.46,229.879 1371.02,231.867 1371.59,231.761 1372.16,231.76 1372.73,230.786 1373.3,230.725 1373.87,229.412 1374.43,229.308 1375,230.573 1375.57,230.339 1376.14,229.398 1376.71,230.428 1377.28,229.307 1377.84,228.29 1378.41,228.656 1378.98,225.618 1379.55,229.056 1380.12,231.017 1380.69,232.041 1381.25,233.87 1381.82,234.811 1382.39,236.419 1382.96,235.897 1383.53,236.372 1384.1,235.859 1384.66,235.314 1385.23,233.778 1385.8,233.251 1386.37,235.274 1386.94,236.917 1387.51,236.65 1388.07,235.972 1388.64,235.63 1389.21,234.294 1389.78,232.981 1390.35,234.649 1390.92,234.284 1391.48,233.959 1392.05,231.425 1392.62,232.372 1393.19,234.091 1393.76,233.835 1394.33,233.407 1394.89,235.099 1395.46,232.667 1396.03,231.148 1396.6,231.175 1397.17,227.987 1397.74,225.946 1398.3,226.161 1398.87,229.276 1399.44,229.177 1400.01,228.165 1400.58,229.198 1401.15,230.247 1401.71,231.018 1402.28,231.962 1402.85,231.692 1403.42,230.487 1403.99,229.238 1404.56,229.195 1405.13,231.237 1405.69,233.055 1406.26,233.793 1406.83,234.332 1407.4,232.861 1407.97,231.627 1408.54,230.405 1409.1,232.333 1409.67,232.035 1410.24,231.715 1410.81,230.745 1411.38,227.596 1411.95,228.536 1412.51,228.288 1413.08,226.874 1413.65,227.841 1414.22,229.687 1414.79,229.437 1415.36,229.437 1415.92,228.19 1416.49,228.184 1417.06,229.233 1417.63,229.12 1418.2,229.099 1418.77,227.936 1419.33,227.245 1419.9,228.202 1420.47,227.026 1421.04,226.237 1421.61,224.504 1422.18,224.792 1422.74,224.086 1423.31,224.396 1423.88,225.731 1424.45,225.738 1425.02,226.984 1425.59,228.952 1426.15,230.107 1426.72,228.937 1427.29,226.033 1427.86,225.242 1428.43,225.507 1429,225.914 1429.56,225.158 1430.13,224.598 1430.7,222.891 1431.27,224.353 1431.84,226.851 1432.41,225.945 1432.97,228.356 1433.54,227.374 1434.11,229.402 1434.68,229.407 1435.25,228.238 1435.82,229.385 1436.38,228.449 1436.95,227.471 1437.52,228.534 1438.09,226.562 1438.66,224.927 1439.23,224.18 1439.79,224.375 1440.36,227.942 1440.93,228.044 1441.5,229.078 1442.07,230.112 1442.64,229.186 1443.2,227.284 1443.77,225.337 1444.34,223.535 1444.91,225.006 1445.48,225.162 1446.05,225.718 1446.61,226.162 1447.18,229.889 1447.75,228.752 1448.32,229.982 1448.89,229.247 1449.46,229.275 1450.02,230.699 1450.59,231.388 1451.16,232.451 1451.73,232.247 1452.3,236.158 1452.87,237.732 1453.43,235.028 1454,236.602 1454.57,236.263 1455.14,235.717 1455.71,235.155 1456.28,234.749 1456.84,235.615 1457.41,235.064 1457.98,234.5 1458.55,234.036 1459.12,235.696 1459.69,234.112 1460.25,232.451 1460.82,230.126 1461.39,230.023 1461.96,230.106 1462.53,229.872 1463.1,231.867 1463.66,232.625 1464.23,234.349 1464.8,233.011 1465.37,233.82 1465.94,233.372 1466.51,232.868 1467.07,232.562 1467.64,234.209 1468.21,231.607 1468.78,231.251 1469.35,231.031 1469.92,232.79 1470.48,231.37 1471.05,230.035 1471.62,229.844 1472.19,227.597 1472.76,228.614 1473.33,229.614 1473.89,229.309 1474.46,229.315 1475.03,231.158 1475.6,232.925 1476.17,231.381 1476.74,231.244 1477.31,232.226 1477.87,232.948 1478.44,230.748 1479.01,231.422 1479.58,231.984 1480.15,230.879 1480.72,229.65 1481.28,228.658 1481.85,228.629 1482.42,227.692 1482.99,227.465 1483.56,223.838 1484.13,225.765 1484.69,226.752 1485.26,225.859 1485.83,226.927 1486.4,226.982 1486.97,227.024 1487.54,227.778 1488.1,228.74 1488.67,227.604 1489.24,227.521 1489.81,227.481 1490.38,225.444 1490.95,225.66 1491.51,228.892 1492.08,227.527 1492.65,226.537 1493.22,224.522 1493.79,223.637 1494.36,220.927 1494.92,221.505 1495.49,224.108 1496.06,225.552 1496.63,225.591 1497.2,224.831 1497.77,225.033 1498.33,225.4 1498.9,227.692 1499.47,228.849 1500.04,228.945 1500.61,227.786 1501.18,227.858 1501.74,226.717 1502.31,227.795 1502.88,227.927 1503.45,230.309 1504.02,228.985 1504.59,230.122 1505.15,231.864 1505.72,232.723 1506.29,233.222 1506.86,231.787 1507.43,231.364 1508,231.247 1508.56,229.138 1509.13,229.011 1509.7,231.082 1510.27,229.966 1510.84,227.558 1511.41,227.535 1511.97,227.79 1512.54,225.887 1513.11,226.075 1513.68,226.318 1514.25,227.498 1514.82,225.664 1515.38,224.93 1515.95,223.279 1516.52,223.693 1517.09,224.207 1517.66,224.604 1518.23,224.934 1518.79,224.286 1519.36,223.767 1519.93,224.325 1520.5,224.851 1521.07,228.214 1521.64,230.389 1522.2,229.306 1522.77,231.514 1523.34,230.588 1523.91,230.498 1524.48,230.519 1525.05,227.262 1525.61,224.311 1526.18,223.656 1526.75,222.93 1527.32,223.499 1527.89,224.043 1528.46,227.507 1529.02,225.519 1529.59,226.011 1530.16,226.395 1530.73,226.534 1531.3,224.758 1531.87,226.301 1532.43,225.609 1533,226.174 1533.57,224.596 1534.14,226.372 1534.71,226.719 1535.28,226.012 1535.84,226.318 1536.41,226.916 1536.98,230.184 1537.55,230.021 1538.12,230.253 1538.69,232.52 1539.25,232.442 1539.82,232.205 1540.39,232.944 1540.96,230.626 1541.53,228.783 1542.1,230.917 1542.66,230.816 1543.23,229.702 1543.8,227.679 1544.37,228.859 1544.94,228.978 1545.51,229.952 1546.08,232.068 1546.64,231.071 1547.21,228.853 1547.78,229.855 1548.35,231.727 1548.92,233.579 1549.49,233.487 1550.05,235.267 1550.62,234.861 1551.19,234.419 1551.76,233.026 1552.33,230.79 1552.9,230.72 1553.46,229.404 1554.03,231.537 1554.6,230.228 1555.17,230.244 1555.74,230.154 1556.31,231.119 1556.87,230.854 1557.44,230.832 1558.01,231.928 1558.58,232.765 1559.15,231.514 1559.72,232.462 1560.28,231.313 1560.85,230.203 1561.42,230.29 1561.99,230.487 1562.56,230.386 1563.13,227.299 1563.69,230.577 1564.26,231.387 1564.83,230.243 1565.4,231.243 1565.97,231.142 1566.54,231.85 1567.1,232.039 1567.67,230.809 1568.24,229.766 1568.81,229.725 1569.38,230.69 1569.95,229.482 1570.51,229.598 1571.08,230.582 1571.65,230.615 1572.22,231.522 1572.79,231.542 1573.36,229.247 1573.92,228.003 1574.49,228.954 1575.06,229.149 1575.63,228.21 1576.2,229.379 1576.77,230.591 1577.33,228.481 1577.9,229.366 1578.47,229.292 1579.04,230.263 1579.61,231.011 1580.18,230.984 1580.74,231.066 1581.31,230.935 1581.88,231.58 1582.45,230.529 1583.02,230.649 1583.59,229.494 1584.15,227.266 1584.72,229.393 1585.29,231.579 1585.86,231.517 1586.43,231.233 1587,230.837 1587.56,229.73 1588.13,228.425 1588.7,229.546 1589.27,228.432 1589.84,228.186 1590.41,229.255 1590.97,228.343 1591.54,227.406 1592.11,226.471 1592.68,228.77 1593.25,230.886 1593.82,228.636 1594.38,228.463 1594.95,228.371 1595.52,228.511 1596.09,228.322 1596.66,229.358 1597.23,230.368 1597.79,231.177 1598.36,228.113 1598.93,229.16 1599.5,229.069 1600.07,230.169 1600.64,230.894 1601.2,228.715 1601.77,226.723 1602.34,227.691 1602.91,229.706 1603.48,229.443 1604.05,230.398 1604.61,231.414 1605.18,231.163 1605.75,230.161 1606.32,228.988 1606.89,227.828 1607.46,227.909 1608.02,230.976 1608.59,231.648 1609.16,230.32 1609.73,230.05 1610.3,232.072 1610.87,228.476 1611.43,228.523 1612,227.494 1612.57,228.538 1613.14,228.583 1613.71,227.69 1614.28,225.764 1614.84,226.994 1615.41,228.132 1615.98,229.216 1616.55,227.065 1617.12,227.278 1617.69,226.513 1618.26,225.828 1618.82,225.99 1619.39,226.28 1619.96,227.539 1620.53,227.57 1621.1,228.777 1621.67,228.657 1622.23,228.525 1622.8,227.66 1623.37,227.692 1623.94,227.814 1624.51,226.885 1625.08,227.923 1625.64,228.002 1626.21,228.084 1626.78,227.97 1627.35,227.834 1627.92,226.92 1628.49,225.912 1629.05,224.224 1629.62,224.707 1630.19,226.898 1630.76,227.89 1631.33,228.084 1631.9,225.215 1632.46,228.606 1633.03,227.657 1633.6,227.841 1634.17,228.124 1634.74,227.326 1635.31,227.372 1635.87,227.468 1636.44,229.632 1637.01,228.46 1637.58,228.574 1638.15,229.766 1638.72,229.834 1639.28,228.001 1639.85,229.193 1640.42,231.293 1640.99,231.409 1641.56,232.063 1642.13,230.789 1642.69,230.804 1643.26,227.743 1643.83,228.023 1644.4,229.303 1644.97,229.497 1645.54,228.652 1646.1,230.801 1646.67,230.624 1647.24,232.721 1647.81,235.431 1648.38,234.151 1648.95,233.585 1649.51,233.459 1650.08,234.251 1650.65,233.793 1651.22,233.392 1651.79,231.093 1652.36,230.131 1652.92,229.14 1653.49,229.975 1654.06,229.922 1654.63,231.87 1655.2,231.565 1655.77,231.233 1656.33,230.131 1656.9,228.957 1657.47,229 1658.04,230.131 1658.61,230.341 1659.18,230.242 1659.74,230.291 1660.31,230.177 1660.88,228.975 1661.45,229.085 1662.02,229.073 1662.59,229.282 1663.15,229.138 1663.72,231.226 1664.29,231.254 1664.86,231.257 1665.43,230.05 1666,228.948 1666.56,229.12 1667.13,228.908 1667.7,229.057 1668.27,228.077 1668.84,228.041 1669.41,230.335 1669.97,229.421 1670.54,230.358 1671.11,231.266 1671.68,229.984 1672.25,226.616 1672.82,225.759 1673.38,226.982 1673.95,228.046 1674.52,230.054 1675.09,233.14 1675.66,233.084 1676.23,228.649 1676.79,229.847 1677.36,228.704 1677.93,227.724 1678.5,226.738 1679.07,227.763 1679.64,229.855 1680.2,230.889 1680.77,227.734 1681.34,224.905 1681.91,226.399 1682.48,224.672 1683.05,225.153 1683.61,224.469 1684.18,221.525 1684.75,221.076 1685.32,224.77 1685.89,225.192 1686.46,223.647 1687.02,227.154 1687.59,227.284 1688.16,227.472 1688.73,227.473 1689.3,228.64 1689.87,228.687 1690.44,229.739 1691,232.781 1691.57,232.773 1692.14,232.582 1692.71,234.354 1693.28,233.979 1693.85,232.529 1694.41,231.078 1694.98,230.004 1695.55,231.938 1696.12,231.808 1696.69,231.698 1697.26,232.365 1697.82,233.216 1698.39,234.029 1698.96,234.605 1699.53,234.154 1700.1,235.909 1700.67,235.358 1701.23,236.854 1701.8,236.279 1702.37,235.846 1702.94,234.302 1703.51,232.921 1704.08,233.545 1704.64,235.252 1705.21,234.636 1705.78,233.124 1706.35,231.636 1706.92,232.117 1707.49,231.535 1708.05,230.226 1708.62,228.973 1709.19,228.775 1709.76,231.745 1710.33,230.557 1710.9,230.358 1711.46,230.263 1712.03,230.099 1712.6,229.029 1713.17,228.836 1713.74,228.986 1714.31,227.891 1714.87,228.953 1715.44,226.751 1716.01,227.148 1716.58,228.134 1717.15,227.989 1717.72,226.787 1718.28,226.83 1718.85,226.867 1719.42,226.832 1719.99,227.8 1720.56,227.927 1721.13,227.921 1721.69,227.868 1722.26,227.985 1722.83,227.364 1723.4,227.342 1723.97,228.355 1724.54,226.429 1725.1,226.61 1725.67,226.834 1726.24,228.179 1726.81,227.137 1727.38,225.057 1727.95,225.426 1728.51,226.876 1729.08,226.939 1729.65,224.897 1730.22,224.404 1730.79,223.572 1731.36,226.89 1731.92,225.995 1732.49,229.223 1733.06,231.207 1733.63,231.338 1734.2,230.073 1734.77,230.159 1735.33,228.941 1735.9,228.734 1736.47,229.688 1737.04,229.68 1737.61,227.568 1738.18,225.496 1738.74,221.687 1739.31,221.315 1739.88,219.895 1740.45,220.516 1741.02,224.408 1741.59,225.532 1742.15,227.812 1742.72,226.913 1743.29,226.294 1743.86,224.503 1744.43,224.818 1745,225.122 1745.56,225.273 1746.13,225.509 1746.7,224.937 1747.27,225.285 1747.84,225.729 1748.41,226.116 1748.97,226.333 1749.54,226.585 1750.11,230.149 1750.68,229.228 1751.25,229.394 1751.82,231.369 1752.38,230.333 1752.95,231.251 1753.52,230.071 1754.09,229.239 1754.66,227.991 1755.23,229.248 1755.79,228.248 1756.36,230.266 1756.93,231.177 1757.5,229.015 1758.07,229.842 1758.64,229.98 1759.21,225.951 1759.77,229.165 1760.34,227.956 1760.91,228.216 1761.48,228.209 1762.05,228.538 1762.62,228.907 1763.18,227.119 1763.75,228.544 1764.32,226.771 1764.89,227.167 1765.46,228.242 1766.03,226.601 1766.59,225.894 1767.16,229.078 1767.73,227.285 1768.3,226.407 1768.87,227.559 1769.44,228.728 1770,229.87 1770.57,229.95 1771.14,227.999 1771.71,228.278 1772.28,227.473 1772.85,227.711 1773.41,224.842 1773.98,223.24 1774.55,222.786 1775.12,224.39 1775.69,227.952 1776.26,228.281 1776.82,226.564 1777.39,225.995 1777.96,225.543 1778.53,227.996 1779.1,229.254 1779.67,230.421 1780.23,229.563 1780.8,231.774 1781.37,232.953 1781.94,232.852 1782.51,232.842 1783.08,233.7 1783.64,233.461 1784.21,233.511 1784.78,234.183 1785.35,235.943 1785.92,234.632 1786.49,235.376 1787.05,235.043 1787.62,235.695 1788.19,236.423 1788.76,233.95 1789.33,232.756 1789.9,232.649 1790.46,232.537 1791.03,233.375 1791.6,234.312 1792.17,235.171 1792.74,235.977 1793.31,236.541 1793.87,235.931 1794.44,235.119 1795.01,235.672 1795.58,233.158 1796.15,231.95 1796.72,233.072 1797.28,233.748 1797.85,232.63 1798.42,230.297 1798.99,231.222 1799.56,229.894 1800.13,230.919 1800.69,231.937 1801.26,232.632 1801.83,231.285 1802.4,232.081 1802.97,230.942 1803.54,229.577 1804.1,229.418 1804.67,229.361 1805.24,228.223 1805.81,226.441 1806.38,225.72 1806.95,224.878 1807.51,227.24 1808.08,226.391 1808.65,224.428 1809.22,224.853 1809.79,222.909 1810.36,223.463 1810.92,224.154 1811.49,224.828 1812.06,223.156 1812.63,223.639 1813.2,221.976 1813.77,222.463 1814.33,222.906 1814.9,224.413 1815.47,225.858 1816.04,228.48 1816.61,226.755 1817.18,225.951 1817.74,227.373 1818.31,228.527 1818.88,229.676 1819.45,230.694 1820.02,231.714 1820.59,231.744 1821.15,231.603 1821.72,230.388 1822.29,230.063 1822.86,230.23 1823.43,228.059 1824,228.093 1824.56,227.306 1825.13,225.439 1825.7,224.69 1826.27,226.239 1826.84,226.258 1827.41,227.611 1827.97,226.783 1828.54,228.24 1829.11,231.557 1829.68,229.43 1830.25,229.791 1830.82,229.9 1831.39,231.085 1831.95,228.917 1832.52,230.129 1833.09,233.103 1833.66,231.982 1834.23,232.764 1834.8,233.594 1835.36,232.365 1835.93,234.281 1836.5,237.173 1837.07,235.798 1837.64,235.233 1838.21,234.788 1838.77,234.384 1839.34,235.019 1839.91,234.514 1840.48,234.276 1841.05,232.792 1841.62,231.54 1842.18,234.388 1842.75,236.2 1843.32,235.767 1843.89,234.243 1844.46,234.957 1845.03,236.558 1845.59,234.881 1846.16,235.534 1846.73,235.894 1847.3,234.25 1847.87,233.772 1848.44,233.347 1849,233.866 1849.57,233.267 1850.14,231.968 1850.71,232.775 1851.28,231.415 1851.85,231.209 1852.41,233.024 1852.98,233.678 1853.55,230.856 1854.12,230.651 1854.69,230.235 1855.26,230.027 1855.82,229.708 1856.39,228.603 1856.96,229.441 1857.53,230.15 1858.1,230.071 1858.67,230.888 1859.23,228.682 1859.8,227.501 1860.37,228.576 1860.94,228.321 1861.51,224.03 1862.08,223.131 1862.64,223.499 1863.21,223.678 1863.78,221.795 1864.35,223.3 1864.92,223.441 1865.49,222.67 1866.05,226.157 1866.62,226.358 1867.19,224.491 1867.76,224.584 1868.33,227.988 1868.9,228.99 1869.46,228.888 1870.03,225.78 1870.6,226.871 1871.17,226.076 1871.74,225.458 1872.31,226.924 1872.87,226.084 1873.44,227.151 1874.01,227.206 1874.58,228.42 1875.15,228.521 1875.72,229.605 1876.28,231.585 1876.85,231.358 1877.42,229.332 1877.99,228.218 1878.56,227.996 1879.13,227.233 1879.69,228.639 1880.26,229.662 1880.83,229.745 1881.4,230.707 1881.97,230.413 1882.54,230.481 1883.1,232.681 1883.67,233.464 1884.24,233.224 1884.81,233.897 1885.38,229.351 1885.95,231.516 1886.51,231.44 1887.08,232.293 1887.65,234.013 1888.22,233.63 1888.79,233.315 1889.36,230.02 1889.92,229.983 1890.49,227.892 1891.06,228.909 1891.63,225.773 1892.2,223.938 1892.77,225.176 1893.33,226.491 1893.9,227.488 1894.47,226.231 1895.04,227.221 1895.61,227.394 1896.18,226.524 1896.74,227.68 1897.31,227.581 1897.88,228.576 1898.45,229.633 1899.02,225.521 1899.59,224.736 1900.16,225.024 1900.72,223.253 1901.29,223.555 1901.86,226.012 1902.43,228.521 1903,227.398 1903.57,230.451 1904.13,230.389 1904.7,230.335 1905.27,228.204 1905.84,228.154 1906.41,230.385 1906.98,228.327 1907.54,228.549 1908.11,230.811 1908.68,230.552 1909.25,229.396 1909.82,229.358 1910.39,229.261 1910.95,230.153 1911.52,231.218 1912.09,230.068 1912.66,230.046 1913.23,229.781 1913.8,229.585 1914.36,228.532 1914.93,229.808 1915.5,229.631 1916.07,229.541 1916.64,229.634 1917.21,230.688 1917.77,232.631 1918.34,233.36 1918.91,234.011 1919.48,234.733 1920.05,235.505 1920.62,234.159 1921.18,233.95 1921.75,233.539 1922.32,231.153 1922.89,232.951 1923.46,231.721 1924.03,231.528 1924.59,229.272 1925.16,226.065 1925.73,225.265 1926.3,223.412 1926.87,223.809 1927.44,224.196 1928,224.236 1928.57,223.58 1929.14,225.246 1929.71,222.456 1930.28,223.001 1930.85,224.412 1931.41,223.956 1931.98,223.256 1932.55,224.72 1933.12,223.859 1933.69,224.177 1934.26,227.619 1934.82,228.804 1935.39,230.076 1935.96,229.839 1936.53,230.544 1937.1,231.488 1937.67,230.286 1938.23,229.251 1938.8,230.422 1939.37,230.288 1939.94,228.416 1940.51,228.396 1941.08,226.576 1941.64,229.041 1942.21,231.074 1942.78,228.889 1943.35,230.546 1943.92,230.486 1944.49,230.296 1945.05,228.995 1945.62,228.913 1946.19,227.859 1946.76,228.913 1947.33,227.059 1947.9,227.038 1948.46,225.164 1949.03,229.424 1949.6,228.593 1950.17,229.756 1950.74,231.724 1951.31,231.621 1951.87,234.596 1952.44,234.035 1953.01,232.582 1953.58,232.03 1954.15,230.921 1954.72,233.995 1955.28,235.823 1955.85,233.438 1956.42,232.047 1956.99,231.95 1957.56,231.555 1958.13,230.524 1958.69,230.579 1959.26,228.58 1959.83,229.594 1960.4,226.326 1960.97,226.405 1961.54,226.397 1962.1,226.647 1962.67,227.819 1963.24,228.068 1963.81,230.072 1964.38,228.766 1964.95,228.795 1965.51,228.659 1966.08,228.586 1966.65,228.415 1967.22,228.382 1967.79,228.551 1968.36,229 1968.92,228.88 1969.49,226.571 1970.06,226.612 1970.63,227.787 1971.2,228.915 1971.77,229.784 1972.34,228.65 1972.9,227.57 1973.47,228.676 1974.04,228.842 1974.61,229.857 1975.18,230.794 1975.75,229.811 1976.31,229.806 1976.88,229.977 1977.45,228.79 1978.02,228.68 1978.59,228.577 1979.16,228.506 1979.72,228.451 1980.29,227.679 1980.86,228.8 1981.43,227.746 1982,228.991 1982.57,229.11 1983.13,229.173 1983.7,229.155 1984.27,229.229 1984.84,229.295 1985.41,229.029 1985.98,228.912 1986.54,227.967 1987.11,228.968 1987.68,228.826 1988.25,227.899 1988.82,227.976 1989.39,226.863 1989.95,227.034 1990.52,228.278 1991.09,228.47 1991.66,228.492 1992.23,228.752 1992.8,230.763 1993.36,233.954 1993.93,234.603 1994.5,232.89 1995.07,231.465 1995.64,230.248 1996.21,232.227 1996.77,232.028 1997.34,231.981 1997.91,230.725 1998.48,229.666 1999.05,229.53 1999.62,229.49 2000.18,230.588 2000.75,231.454 2001.32,231.236 2001.89,233.216 2002.46,232.012 2003.03,231.873 2003.59,232.8 2004.16,232.657 2004.73,232.398 2005.3,234.254 2005.87,234.773 2006.44,234.208 2007,233.943 2007.57,234.372 2008.14,231.949 2008.71,231.777 2009.28,230.182 2009.85,229.999 2010.41,228.009 2010.98,227.135 2011.55,227.344 2012.12,227.688 2012.69,227.813 2013.26,229.009 2013.82,228.803 2014.39,227.513 2014.96,226.521 2015.53,224.608 2016.1,226.013 2016.67,226.377 2017.23,227.371 2017.8,227.584 2018.37,227.787 2018.94,227.671 2019.51,227.753 2020.08,228.719 2020.64,226.713 2021.21,226.952 2021.78,227.191 2022.35,226.071 2022.92,228.204 2023.49,229.331 2024.05,229.26 2024.62,225.997 2025.19,228.283 2025.76,229.36 2026.33,231.433 2026.9,231.283 2027.46,231.153 2028.03,231.184 2028.6,229.957 2029.17,230.87 2029.74,228.504 2030.31,229.767 2030.87,229.652 2031.44,230.614 2032.01,228.561 2032.58,228.469 2033.15,229.651 2033.72,228.549 2034.28,226.471 2034.85,226.703 2035.42,225.835 2035.99,223.887 2036.56,224.332 2037.13,223.438 2037.69,221.829 2038.26,222.179 2038.83,222.665 2039.4,224.035 2039.97,223.475 2040.54,226.102 2041.11,228.486 2041.67,226.568 2042.24,224.707 2042.81,225.049 2043.38,225.369 2043.95,223.739 2044.52,223.185 2045.08,221.696 2045.65,221.456 2046.22,222.023 2046.79,223.651 2047.36,223.161 2047.93,223.817 2048.49,223.252 2049.06,224.936 2049.63,227.425 2050.2,226.679 2050.77,227.915 2051.34,229.445 2051.9,229.638 2052.47,227.775 2053.04,229.114 2053.61,228.389 2054.18,228.679 2054.75,228.845 2055.31,232.11 2055.88,231.116 2056.45,233.249 2057.02,233.056 2057.59,229.952 2058.16,231.145 2058.72,235.179 2059.29,236.852 2059.86,237.582 2060.43,237.074 2061,238.635 2061.57,235.853 2062.13,235.199 2062.7,234.11 2063.27,233.761 2063.84,228.222 2064.41,228.325 2064.98,230.62 2065.54,232.622 2066.11,232.467 2066.68,232.295 2067.25,233.1 2067.82,230.656 2068.39,230.43 2068.95,230.405 2069.52,231.22 2070.09,230.947 2070.66,231.709 2071.23,230.55 2071.8,231.634 2072.36,231.381 2072.93,231.229 2073.5,232.217 2074.07,232.043 2074.64,231.7 2075.21,231.542 2075.77,233.493 2076.34,232.211 2076.91,231.082 2077.48,234.061 2078.05,233.835 2078.62,234.763 2079.18,237.2 2079.75,240.719 2080.32,238.661 2080.89,240.131 2081.46,240.15 2082.03,240.477 2082.59,240.588 2083.16,238.658 2083.73,235.696 2084.3,237.313 2084.87,234.784 2085.44,233.23 2086,232.471 2086.57,233.254 2087.14,232.771 2087.71,231.276 2088.28,232.125 2088.85,230.872 2089.41,229.335 2089.98,230.193 2090.55,231.208 2091.12,230.967 2091.69,230.579 2092.26,230.25 2092.82,228.797 2093.39,229.004 2093.96,228.008 2094.53,223.73 2095.1,223.016 2095.67,221.275 2096.23,220.634 2096.8,221.049 2097.37,221.657 2097.94,224.085 2098.51,222.239 2099.08,222.831 2099.64,223.112 2100.21,223.402 2100.78,222.74 2101.35,223.106 2101.92,222.487 2102.49,220.871 2103.05,223.649 2103.62,224.117 2104.19,226.394 2104.76,226.162 2105.33,225.478 2105.9,224.65 2106.46,226.05 2107.03,226.265 2107.6,224.178 2108.17,224.735 2108.74,225.018 2109.31,223.176 2109.87,223.677 2110.44,224.033 2111.01,224.302 2111.58,223.552 2112.15,223.998 2112.72,225.467 2113.29,224.664 2113.85,223.975 2114.42,225.384 2114.99,227.698 2115.56,227.759 2116.13,229.907 2116.7,228.917 2117.26,230.238 2117.83,229.295 2118.4,227.303 2118.97,226.142 2119.54,227.527 2120.11,227.959 2120.67,227.918 2121.24,226.077 2121.81,226.291 2122.38,226.75 2122.95,230.029 2123.52,230.225 2124.08,230.159 2124.65,233.136 2125.22,231.816 2125.79,231.729 2126.36,232.542 2126.93,233.226 2127.49,232.728 2128.06,232.602 2128.63,230.3 2129.2,231.466 2129.77,231.507 2130.34,233.497 2130.9,233.275 2131.47,233.225 2132.04,231.733 2132.61,233.517 2133.18,233.234 2133.75,234.081 2134.31,233.738 2134.88,232.478 2135.45,231.972 2136.02,229.829 2136.59,228.671 2137.16,228.471 2137.72,227.25 2138.29,226.342 2138.86,223.533 2139.43,226.015 2140,226.349 2140.57,224.344 2141.13,224.626 2141.7,225.929 2142.27,226.338 2142.84,227.629 2143.41,226.735 2143.98,226.799 2144.54,222.813 2145.11,224.325 2145.68,223.83 2146.25,226.272 2146.82,229.685 2147.39,231.818 2147.95,231.77 2148.52,231.731 2149.09,231.522 2149.66,233.519 2150.23,232.16 2150.8,231.968 2151.36,231.838 2151.93,231.899 2152.5,230.514 2153.07,230.321 2153.64,228.212 2154.21,227.316 2154.77,228.427 2155.34,227.606 2155.91,230.139 2156.48,230.121 2157.05,232.046 2157.62,232.779 2158.18,230.449 2158.75,228.075 2159.32,228.01 2159.89,226.161 \"/>\n<path clip-path=\"url(#clip890)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip890)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip890)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip890)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip890)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip890)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.023\n  with uncertainty of ± 0.0020544583858768404\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01439 ± (0.00235998, 0.0024141) (MC)\n  95% confidence interval: [-4.01912, -4.00949]) (MC)\n  linear error propagation: -4.01451 ± 0.00243247\n  |δ_y| = |0.00129582| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01438707281031, val_l = 0.00473182619160184, val_u = 0.004898521709011838)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip920\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip920)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip921\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip920)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip922\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.73 2211.02,1148.73 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,987.827 2211.02,987.827 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,826.923 2211.02,826.923 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,666.019 2211.02,666.019 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,505.115 2211.02,505.115 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,344.211 2211.02,344.211 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.73 365.751,1148.73 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,987.827 365.751,987.827 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,826.923 365.751,826.923 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,666.019 365.751,666.019 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,505.115 365.751,505.115 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,344.211 365.751,344.211 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M298.909 1134.53 Q295.298 1134.53 293.469 1138.09 Q291.664 1141.64 291.664 1148.77 Q291.664 1155.87 293.469 1159.44 Q295.298 1162.98 298.909 1162.98 Q302.543 1162.98 304.349 1159.44 Q306.177 1155.87 306.177 1148.77 Q306.177 1141.64 304.349 1138.09 Q302.543 1134.53 298.909 1134.53 M298.909 1130.83 Q304.719 1130.83 307.775 1135.43 Q310.853 1140.02 310.853 1148.77 Q310.853 1157.49 307.775 1162.1 Q304.719 1166.68 298.909 1166.68 Q293.099 1166.68 290.02 1162.1 Q286.964 1157.49 286.964 1148.77 Q286.964 1140.02 290.02 1135.43 Q293.099 1130.83 298.909 1130.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M259.557 1001.17 L267.196 1001.17 L267.196 974.806 L258.886 976.473 L258.886 972.214 L267.15 970.547 L271.826 970.547 L271.826 1001.17 L279.465 1001.17 L279.465 1005.11 L259.557 1005.11 L259.557 1001.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M298.909 973.626 Q295.298 973.626 293.469 977.19 Q291.664 980.732 291.664 987.862 Q291.664 994.968 293.469 998.533 Q295.298 1002.07 298.909 1002.07 Q302.543 1002.07 304.349 998.533 Q306.177 994.968 306.177 987.862 Q306.177 980.732 304.349 977.19 Q302.543 973.626 298.909 973.626 M298.909 969.922 Q304.719 969.922 307.775 974.528 Q310.853 979.112 310.853 987.862 Q310.853 996.588 307.775 1001.19 Q304.719 1005.78 298.909 1005.78 Q293.099 1005.78 290.02 1001.19 Q286.964 996.588 286.964 987.862 Q286.964 979.112 290.02 974.528 Q293.099 969.922 298.909 969.922 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M262.775 840.268 L279.094 840.268 L279.094 844.203 L257.15 844.203 L257.15 840.268 Q259.812 837.513 264.395 832.884 Q269.002 828.231 270.182 826.888 Q272.428 824.365 273.307 822.629 Q274.21 820.87 274.21 819.18 Q274.21 816.425 272.266 814.689 Q270.344 812.953 267.242 812.953 Q265.043 812.953 262.59 813.717 Q260.159 814.481 257.381 816.032 L257.381 811.31 Q260.205 810.175 262.659 809.597 Q265.113 809.018 267.15 809.018 Q272.52 809.018 275.715 811.703 Q278.909 814.388 278.909 818.879 Q278.909 821.009 278.099 822.93 Q277.312 824.828 275.205 827.421 Q274.627 828.092 271.525 831.309 Q268.423 834.504 262.775 840.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M298.909 812.722 Q295.298 812.722 293.469 816.286 Q291.664 819.828 291.664 826.958 Q291.664 834.064 293.469 837.629 Q295.298 841.171 298.909 841.171 Q302.543 841.171 304.349 837.629 Q306.177 834.064 306.177 826.958 Q306.177 819.828 304.349 816.286 Q302.543 812.722 298.909 812.722 M298.909 809.018 Q304.719 809.018 307.775 813.624 Q310.853 818.208 310.853 826.958 Q310.853 835.684 307.775 840.291 Q304.719 844.874 298.909 844.874 Q293.099 844.874 290.02 840.291 Q286.964 835.684 286.964 826.958 Q286.964 818.208 290.02 813.624 Q293.099 809.018 298.909 809.018 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M272.914 664.665 Q276.27 665.382 278.145 667.651 Q280.043 669.919 280.043 673.253 Q280.043 678.368 276.525 681.169 Q273.006 683.97 266.525 683.97 Q264.349 683.97 262.034 683.53 Q259.742 683.114 257.289 682.257 L257.289 677.743 Q259.233 678.878 261.548 679.456 Q263.863 680.035 266.386 680.035 Q270.784 680.035 273.076 678.299 Q275.39 676.563 275.39 673.253 Q275.39 670.197 273.238 668.484 Q271.108 666.748 267.289 666.748 L263.261 666.748 L263.261 662.906 L267.474 662.906 Q270.923 662.906 272.752 661.54 Q274.58 660.151 274.58 657.558 Q274.58 654.896 272.682 653.484 Q270.807 652.049 267.289 652.049 Q265.367 652.049 263.168 652.466 Q260.969 652.882 258.33 653.762 L258.33 649.595 Q260.992 648.855 263.307 648.484 Q265.645 648.114 267.705 648.114 Q273.029 648.114 276.131 650.544 Q279.233 652.952 279.233 657.072 Q279.233 659.943 277.59 661.933 Q275.946 663.901 272.914 664.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M298.909 651.818 Q295.298 651.818 293.469 655.382 Q291.664 658.924 291.664 666.054 Q291.664 673.16 293.469 676.725 Q295.298 680.267 298.909 680.267 Q302.543 680.267 304.349 676.725 Q306.177 673.16 306.177 666.054 Q306.177 658.924 304.349 655.382 Q302.543 651.818 298.909 651.818 M298.909 648.114 Q304.719 648.114 307.775 652.72 Q310.853 657.304 310.853 666.054 Q310.853 674.78 307.775 679.387 Q304.719 683.97 298.909 683.97 Q293.099 683.97 290.02 679.387 Q286.964 674.78 286.964 666.054 Q286.964 657.304 290.02 652.72 Q293.099 648.114 298.909 648.114 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M271.594 491.909 L259.789 510.358 L271.594 510.358 L271.594 491.909 M270.367 487.835 L276.247 487.835 L276.247 510.358 L281.177 510.358 L281.177 514.247 L276.247 514.247 L276.247 522.395 L271.594 522.395 L271.594 514.247 L255.992 514.247 L255.992 509.733 L270.367 487.835 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M298.909 490.914 Q295.298 490.914 293.469 494.478 Q291.664 498.02 291.664 505.15 Q291.664 512.256 293.469 515.821 Q295.298 519.363 298.909 519.363 Q302.543 519.363 304.349 515.821 Q306.177 512.256 306.177 505.15 Q306.177 498.02 304.349 494.478 Q302.543 490.914 298.909 490.914 M298.909 487.21 Q304.719 487.21 307.775 491.816 Q310.853 496.4 310.853 505.15 Q310.853 513.876 307.775 518.483 Q304.719 523.066 298.909 523.066 Q293.099 523.066 290.02 518.483 Q286.964 513.876 286.964 505.15 Q286.964 496.4 290.02 491.816 Q293.099 487.21 298.909 487.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M258.793 326.931 L277.15 326.931 L277.15 330.866 L263.076 330.866 L263.076 339.338 Q264.094 338.991 265.113 338.829 Q266.131 338.644 267.15 338.644 Q272.937 338.644 276.316 341.815 Q279.696 344.986 279.696 350.403 Q279.696 355.982 276.224 359.084 Q272.752 362.162 266.432 362.162 Q264.256 362.162 261.988 361.792 Q259.742 361.422 257.335 360.681 L257.335 355.982 Q259.418 357.116 261.641 357.672 Q263.863 358.227 266.34 358.227 Q270.344 358.227 272.682 356.121 Q275.02 354.014 275.02 350.403 Q275.02 346.792 272.682 344.685 Q270.344 342.579 266.34 342.579 Q264.465 342.579 262.59 342.996 Q260.738 343.412 258.793 344.292 L258.793 326.931 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M298.909 330.01 Q295.298 330.01 293.469 333.574 Q291.664 337.116 291.664 344.246 Q291.664 351.352 293.469 354.917 Q295.298 358.459 298.909 358.459 Q302.543 358.459 304.349 354.917 Q306.177 351.352 306.177 344.246 Q306.177 337.116 304.349 333.574 Q302.543 330.01 298.909 330.01 M298.909 326.306 Q304.719 326.306 307.775 330.912 Q310.853 335.496 310.853 344.246 Q310.853 352.972 307.775 357.579 Q304.719 362.162 298.909 362.162 Q293.099 362.162 290.02 357.579 Q286.964 352.972 286.964 344.246 Q286.964 335.496 290.02 330.912 Q293.099 326.306 298.909 326.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip922)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1030.17 400.199,921.253 400.786,821.316 401.372,850.033 401.958,760.37 402.545,678.355 403.131,603.482 403.718,536.886 404.304,570.12 404.891,508.893 405.477,454.934 406.063,404.727 406.65,359.546 407.236,320.607 407.823,285.979 408.409,318.809 408.995,346.545 409.582,316.686 410.168,290.432 410.755,268.339 411.341,249.407 411.927,233.375 412.514,219.895 413.1,247.252 413.687,236.672 414.273,228.357 414.86,284.513 415.446,279.921 416.032,276.175 416.619,274.57 417.205,274.006 417.792,297.44 418.378,299.047 418.964,302.193 419.551,323.715 420.137,344.203 420.724,363.792 421.31,382.848 421.896,402.461 422.483,409.725 423.069,416.378 423.656,436.678 424.242,445.294 424.829,465.107 425.415,474.171 426.001,483.626 426.588,521.64 427.174,556.136 427.761,571.743 428.347,579.351 428.933,594.824 429.52,610.435 430.106,624.715 430.693,638.561 431.279,664.459 431.865,684.102 432.452,691.006 433.038,697.914 433.625,704.593 434.211,727.09 434.798,748.437 435.384,774.389 435.97,790.502 436.557,800.846 437.143,810.615 437.73,816.13 438.316,830.077 438.902,843.904 439.489,849.338 440.075,855.239 440.662,864.832 441.248,873.673 441.835,883.032 442.421,898.324 443.007,906.623 443.594,911.94 444.18,920.111 444.767,928.105 445.353,936.47 445.939,944.158 446.526,951.613 447.112,956.783 447.699,961.718 448.285,969.541 448.871,977.049 449.458,989.476 450.044,996.446 450.631,1000.99 451.217,1019.91 451.804,1028.52 452.39,1039.18 452.976,1043.01 453.563,1055.34 454.149,1062.96 454.736,1066.3 455.322,1069.78 455.908,1077.22 456.495,1082.56 457.081,1089.85 457.668,1093.11 458.254,1098.36 458.84,1106.76 459.427,1122.92 460.013,1124.79 460.6,1136.13 461.186,1139.77 461.773,1146.62 462.359,1151.37 462.945,1156.17 463.532,1159.08 464.118,1161.83 464.705,1164.62 465.291,1167.52 465.877,1170.06 466.464,1170.73 467.05,1173.63 467.637,1173.04 468.223,1175.84 468.809,1178.34 469.396,1177.49 469.982,1181.85 470.569,1181.21 471.155,1185.26 471.742,1186.16 472.328,1185.31 472.914,1186.36 473.501,1190.39 474.087,1191.25 474.674,1198.48 475.26,1198.83 475.846,1201.17 476.433,1203.33 477.019,1203.92 477.606,1207.26 478.192,1208.9 478.778,1212.02 479.365,1213.81 479.951,1215.1 480.538,1215.02 481.124,1215.09 481.711,1216.78 482.297,1220.02 482.883,1222.82 483.47,1225.55 484.056,1225.03 484.643,1227.73 485.229,1230.55 485.815,1237.57 486.402,1236.74 486.988,1237.56 487.575,1238.22 488.161,1237.3 488.748,1232.15 489.334,1231.89 489.92,1232.93 490.507,1229.7 491.093,1228.1 491.68,1229.77 492.266,1232.52 492.852,1234 493.439,1236.58 494.025,1238.86 494.612,1240.1 495.198,1240.77 495.784,1240.22 496.371,1240.94 496.957,1241.89 497.544,1239.82 498.13,1242.25 498.717,1240.09 499.303,1235.35 499.889,1237.89 500.476,1238.75 501.062,1242.8 501.649,1243.67 502.235,1243.01 502.821,1242.38 503.408,1244.84 503.994,1245.8 504.581,1249.25 505.167,1249.77 505.753,1250.06 506.34,1250.53 506.926,1248.09 507.513,1245.66 508.099,1244.98 508.686,1244.18 509.272,1246.38 509.858,1245.79 510.445,1244.93 511.031,1240.33 511.618,1241.18 512.204,1241.99 512.79,1240.36 513.377,1238.6 513.963,1242.43 514.55,1244.64 515.136,1245.29 515.722,1243.4 516.309,1244.17 516.895,1246.24 517.482,1245.45 518.068,1245.97 518.655,1243.9 519.241,1245.75 519.827,1243.79 520.414,1244.71 521,1242.84 521.587,1239.74 522.173,1240.87 522.759,1240.75 523.346,1243.28 523.932,1241.75 524.519,1240.07 525.105,1241.08 525.691,1240.94 526.278,1240.59 526.864,1243.12 527.451,1242.72 528.037,1240.72 528.624,1240.08 529.21,1239.93 529.796,1238.22 530.383,1237.75 530.969,1241.15 531.556,1240.9 532.142,1240.42 532.728,1238.83 533.315,1239.97 533.901,1239.52 534.488,1239.18 535.074,1244.25 535.661,1239.44 536.247,1238.93 536.833,1237.52 537.42,1237.14 538.006,1235.67 538.593,1237 539.179,1235.7 539.765,1236.86 540.352,1237.78 540.938,1238.97 541.525,1240.02 542.111,1239.53 542.697,1243.27 543.284,1242.75 543.87,1243.4 544.457,1242.77 545.043,1243.48 545.63,1242.85 546.216,1241.34 546.802,1238 547.389,1239 547.975,1238.4 548.562,1237.12 549.148,1240.75 549.734,1239.25 550.321,1236.16 550.907,1238.51 551.494,1238.44 552.08,1240.86 552.666,1241.47 553.253,1241.18 553.839,1242.08 554.426,1239.92 555.012,1240.54 555.599,1239.94 556.185,1240.9 556.771,1243.02 557.358,1243.8 557.944,1246.83 558.531,1244.69 559.117,1246.74 559.703,1244.38 560.29,1244.9 560.876,1244.24 561.463,1242.45 562.049,1241.56 562.635,1241.17 563.222,1238.98 563.808,1238.48 564.395,1239.47 564.981,1241.63 565.568,1240.75 566.154,1240.16 566.74,1239.6 567.327,1237.84 567.913,1238.24 568.5,1233.67 569.086,1234.57 569.672,1235.5 570.259,1238.93 570.845,1236.73 571.432,1237.54 572.018,1238.19 572.605,1238.59 573.191,1236.85 573.777,1238.89 574.364,1238.11 574.95,1237.68 575.537,1234.7 576.123,1232.95 576.709,1232.73 577.296,1233.48 577.882,1231.8 578.469,1234.22 579.055,1235.15 579.641,1233.3 580.228,1234.6 580.814,1234.35 581.401,1236.92 581.987,1236.31 582.574,1235.9 583.16,1235.38 583.746,1237.82 584.333,1236.96 584.919,1236.59 585.506,1234.74 586.092,1234.29 586.678,1233.87 587.265,1235.85 587.851,1235.66 588.438,1233.79 589.024,1230.76 589.61,1230.2 590.197,1232.77 590.783,1236.38 591.37,1233.1 591.956,1231.49 592.543,1231.25 593.129,1230.98 593.715,1230.53 594.302,1231.31 594.888,1226.88 595.475,1226.85 596.061,1225.54 596.647,1227.12 597.234,1228.21 597.82,1229.24 598.407,1227.48 598.993,1228.47 599.579,1227.96 600.166,1228.94 600.752,1223.46 601.339,1223.58 601.925,1223.71 602.512,1223.63 603.098,1222.26 603.684,1223.76 604.271,1226.45 604.857,1223.52 605.444,1226.48 606.03,1226.48 606.616,1226.11 607.203,1227.42 607.789,1228.61 608.376,1231.13 608.962,1228.13 609.548,1230.57 610.135,1228.91 610.721,1228.9 611.308,1230.07 611.894,1229.92 612.481,1227.23 613.067,1226.81 613.653,1226.7 614.24,1225.33 614.826,1226.59 615.413,1227.73 615.999,1224.98 616.585,1226.25 617.172,1220.87 617.758,1220.87 618.345,1222.08 618.931,1224.84 619.518,1225.04 620.104,1227.51 620.69,1226.22 621.277,1227.64 621.863,1228.84 622.45,1227.21 623.036,1226.92 623.622,1226.53 624.209,1226.57 624.795,1226.49 625.382,1230.14 625.968,1229.85 626.554,1230.62 627.141,1227.44 627.727,1227.15 628.314,1226.73 628.9,1224.98 629.487,1225 630.073,1224.98 630.659,1224.89 631.246,1224.9 631.832,1224.48 632.419,1224.28 633.005,1222.92 633.591,1224.34 634.178,1224.35 634.764,1224.18 635.351,1220.24 635.937,1220.45 636.523,1221.94 637.11,1222.13 637.696,1223.3 638.283,1226.03 638.869,1227.09 639.456,1226.61 640.042,1225.32 640.628,1226.21 641.215,1227.2 641.801,1224.24 642.388,1221.64 642.974,1222.7 643.56,1223.86 644.147,1226.5 644.733,1226.2 645.32,1225.96 645.906,1227.03 646.492,1228.16 647.079,1223.92 647.665,1227.69 648.252,1227.08 648.838,1228.3 649.425,1225.45 650.011,1225.6 650.597,1223.93 651.184,1223.83 651.77,1226.29 652.357,1227.28 652.943,1224.3 653.529,1224 654.116,1223.56 654.702,1224.32 655.289,1225.2 655.875,1224.85 656.462,1223.54 657.048,1220.79 657.634,1221.87 658.221,1223.17 658.807,1224.51 659.394,1224.13 659.98,1225.36 660.566,1223.98 661.153,1223.86 661.739,1222.35 662.326,1220.01 662.912,1221.54 663.498,1225.7 664.085,1222.55 664.671,1225.06 665.258,1223.48 665.844,1223.17 666.431,1224.54 667.017,1224.14 667.603,1221.33 668.19,1221.27 668.776,1218.5 669.363,1217.27 669.949,1217.37 670.535,1221.35 671.122,1223.9 671.708,1229.09 672.295,1230.01 672.881,1228.3 673.467,1229.24 674.054,1227.45 674.64,1228.25 675.227,1230.33 675.813,1231.08 676.4,1227.49 676.986,1231.11 677.572,1229.15 678.159,1227.54 678.745,1227.02 679.332,1230.11 679.918,1230.88 680.504,1228.92 681.091,1228.57 681.677,1225.46 682.264,1226.58 682.85,1223.64 683.436,1225.96 684.023,1224.15 684.609,1226.56 685.196,1225.95 685.782,1226.94 686.369,1225.3 686.955,1228.68 687.541,1229.37 688.128,1230.55 688.714,1228.49 689.301,1227.74 689.887,1228.76 690.473,1227.96 691.06,1226.18 691.646,1224.23 692.233,1223.97 692.819,1226.31 693.405,1228.83 693.992,1225.73 694.578,1224.05 695.165,1226.25 695.751,1224.52 696.338,1222.92 696.924,1219.9 697.51,1218.14 698.097,1216.62 698.683,1218.02 699.27,1216.35 699.856,1216.33 700.442,1216.76 701.029,1218.15 701.615,1218.25 702.202,1218.48 702.788,1222.47 703.375,1222.17 703.961,1220.46 704.547,1222.96 705.134,1220.03 705.72,1220.35 706.307,1221.61 706.893,1218.91 707.479,1218.67 708.066,1220.11 708.652,1220.04 709.239,1220.06 709.825,1220.05 710.411,1218.7 710.998,1218.67 711.584,1221.28 712.171,1219.89 712.757,1218.54 713.344,1218.57 713.93,1221.29 714.516,1218.65 715.103,1218.48 715.689,1219.77 716.276,1221.01 716.862,1222 717.448,1222.98 718.035,1222.47 718.621,1225.14 719.208,1222.18 719.794,1220.6 720.38,1218.84 720.967,1220.31 721.553,1221.63 722.14,1220.5 722.726,1221.69 723.313,1221.63 723.899,1220.1 724.485,1222.85 725.072,1221.35 725.658,1221.08 726.245,1219.76 726.831,1222.34 727.417,1221.94 728.004,1220.27 728.59,1216.2 729.177,1217.57 729.763,1220.15 730.349,1218.65 730.936,1220.02 731.522,1215.96 732.109,1216.25 732.695,1216.46 733.282,1216.34 733.868,1216.26 734.454,1215.19 735.041,1217.88 735.627,1216.83 736.214,1219.42 736.8,1220.67 737.386,1220.32 737.973,1220.21 738.559,1220.19 739.146,1218.63 739.732,1217.23 740.318,1217.18 740.905,1218.19 741.491,1219.28 742.078,1220.21 742.664,1216.03 743.251,1218.5 743.837,1214.51 744.423,1214.95 745.01,1216.3 745.596,1214.98 746.183,1215.07 746.769,1215.23 747.355,1216.53 747.942,1216.54 748.528,1216.61 749.115,1213.87 749.701,1213.98 750.288,1214.38 750.874,1213.62 751.46,1212.23 752.047,1212.39 752.633,1212.31 753.22,1212.63 753.806,1210.15 754.392,1206.6 754.979,1212.38 755.565,1211.28 756.152,1210.3 756.738,1213.13 757.324,1214.66 757.911,1216.16 758.497,1214.82 759.084,1214.75 759.67,1213.54 760.257,1213.71 760.843,1212.57 761.429,1212.98 762.016,1214.59 762.602,1214.73 763.189,1214.85 763.775,1215.12 764.361,1213.91 764.948,1215.03 765.534,1219.16 766.121,1217.58 766.707,1211.08 767.293,1207.34 767.88,1209.14 768.466,1212.23 769.053,1210.02 769.639,1211.67 770.226,1211.64 770.812,1210.83 771.398,1209.95 771.985,1211.82 772.571,1210.68 773.158,1212.5 773.744,1211.26 774.33,1211.68 774.917,1210.44 775.503,1209.41 776.09,1208.7 776.676,1209.29 777.262,1213.77 777.849,1213.82 778.435,1214.22 779.022,1215.91 779.608,1217.22 780.195,1218.36 780.781,1217.19 781.367,1214.56 781.954,1213.44 782.54,1213.67 783.127,1211.23 783.713,1210.02 784.299,1211.79 784.886,1213.38 785.472,1214.85 786.059,1212.64 786.645,1215.45 787.232,1214.4 787.818,1215.71 788.404,1214.9 788.991,1217.46 789.577,1218.79 790.164,1221.17 790.75,1219.52 791.336,1219.66 791.923,1220.86 792.509,1221.92 793.096,1221.48 793.682,1225.02 794.268,1224.39 794.855,1224 795.441,1223.49 796.028,1225.59 796.614,1219.89 797.201,1218.36 797.787,1218.37 798.373,1217.98 798.96,1217.97 799.546,1217.98 800.133,1219.1 800.719,1217.86 801.305,1216.66 801.892,1217.85 802.478,1216.57 803.065,1213.88 803.651,1215.13 804.237,1217.72 804.824,1220.07 805.41,1222.63 805.997,1223.77 806.583,1223.53 807.17,1225.8 807.756,1226.54 808.342,1225.08 808.929,1224.32 809.515,1221.34 810.102,1218.27 810.688,1217.89 811.274,1217.95 811.861,1218.01 812.447,1218.04 813.034,1218.15 813.62,1217.98 814.206,1219.42 814.793,1218.96 815.379,1218.76 815.966,1217.19 816.552,1216.89 817.139,1214.51 817.725,1214.8 818.311,1216.38 818.898,1217.43 819.484,1215.79 820.071,1217.11 820.657,1216.97 821.243,1219.53 821.83,1218.31 822.416,1215.72 823.003,1214.41 823.589,1213.35 824.175,1216.13 824.762,1217.52 825.348,1219.8 825.935,1215.6 826.521,1215.31 827.108,1214.32 827.694,1214.6 828.28,1213.2 828.867,1210.73 829.453,1212.59 830.04,1213.2 830.626,1213.41 831.212,1217.16 831.799,1215.64 832.385,1215.78 832.972,1217.13 833.558,1217.17 834.145,1218.29 834.731,1218.31 835.317,1218.05 835.904,1219.1 836.49,1219.04 837.077,1221.5 837.663,1221.19 838.249,1221.1 838.836,1218.24 839.422,1218.27 840.009,1216.66 840.595,1216.46 841.181,1214.91 841.768,1213.71 842.354,1215.14 842.941,1213.9 843.527,1216.35 844.114,1217.73 844.7,1218.59 845.286,1216.88 845.873,1218.24 846.459,1218.31 847.046,1218.25 847.632,1217.98 848.218,1217.99 848.805,1217.79 849.391,1216.31 849.978,1216.35 850.564,1215.95 851.15,1215.86 851.737,1214.44 852.323,1214.65 852.91,1213.47 853.496,1213.78 854.083,1215.31 854.669,1217.83 855.255,1218.82 855.842,1222.52 856.428,1223.56 857.015,1222.92 857.601,1221 858.187,1221.91 858.774,1221.72 859.36,1221.38 859.947,1220.89 860.533,1219.51 861.119,1217.81 861.706,1218.85 862.292,1217.4 862.879,1218.58 863.465,1221.11 864.052,1221.84 864.638,1221.51 865.224,1221.28 865.811,1220.84 866.397,1217.77 866.984,1217.72 867.57,1217.88 868.156,1219.09 868.743,1220.21 869.329,1222.6 869.916,1221 870.502,1212.9 871.089,1213.06 871.675,1214.3 872.261,1214.36 872.848,1214.25 873.434,1214.52 874.021,1214.44 874.607,1215.72 875.193,1214.55 875.78,1213.32 876.366,1212.23 876.953,1212.01 877.539,1216.18 878.125,1217.47 878.712,1218.57 879.298,1218.47 879.885,1216.96 880.471,1215.52 881.058,1214.25 881.644,1216.73 882.23,1219.23 882.817,1221.75 883.403,1222.69 883.99,1222.54 884.576,1219.46 885.162,1217.94 885.749,1216.6 886.335,1215.15 886.922,1215.19 887.508,1215.13 888.094,1215.22 888.681,1215.39 889.267,1215.4 889.854,1218.15 890.44,1216.52 891.027,1220.27 891.613,1221.17 892.199,1222.22 892.786,1220.35 893.372,1220.06 893.959,1218.4 894.545,1218.02 895.131,1217.97 895.718,1216.45 896.304,1213.69 896.891,1210.06 897.477,1210.35 898.063,1209.24 898.65,1208.46 899.236,1208.58 899.823,1206.28 900.409,1202.72 900.996,1203.63 901.582,1204.35 902.168,1206.23 902.755,1205.21 903.341,1205.91 903.928,1207.72 904.514,1209.15 905.1,1210.84 905.687,1212.4 906.273,1211.21 906.86,1215.48 907.446,1212.96 908.032,1211.94 908.619,1212.05 909.205,1212.23 909.792,1215.36 910.378,1218.05 910.965,1217.9 911.551,1218.96 912.137,1217.28 912.724,1217.23 913.31,1219.72 913.897,1216.85 914.483,1216.99 915.069,1215.59 915.656,1214.15 916.242,1211.6 916.829,1210.23 917.415,1212.88 918.002,1214.2 918.588,1214.09 919.174,1215.39 919.761,1215.2 920.347,1213.66 920.934,1215.17 921.52,1216.54 922.106,1216.31 922.693,1216.38 923.279,1216.48 923.866,1216.47 924.452,1217.84 925.038,1217.66 925.625,1217.66 926.211,1218.76 926.798,1217.32 927.384,1216.73 927.971,1215.12 928.557,1215 929.143,1216.38 929.73,1216.27 930.316,1216.43 930.903,1216.22 931.489,1218.97 932.075,1218.97 932.662,1218.57 933.248,1219.46 933.835,1219.04 934.421,1218.41 935.007,1215.57 935.594,1216.89 936.18,1216.91 936.767,1216.94 937.353,1215.72 937.94,1212.99 938.526,1215.76 939.112,1217.08 939.699,1217 940.285,1215.67 940.872,1212.84 941.458,1216.55 942.044,1216.48 942.631,1215.04 943.217,1218.89 943.804,1218.62 944.39,1218.21 944.976,1217.86 945.563,1217.54 946.149,1218.8 946.736,1218.63 947.322,1218.47 947.909,1216.82 948.495,1215.63 949.081,1215.49 949.668,1212.72 950.254,1211.62 950.841,1211.79 951.427,1213.28 952.013,1213.36 952.6,1213.52 953.186,1212.18 953.773,1215.86 954.359,1214.56 954.945,1214.28 955.532,1212.97 956.118,1214.44 956.705,1214.32 957.291,1210.24 957.878,1215.84 958.464,1217.13 959.05,1215.29 959.637,1215.41 960.223,1211.13 960.81,1208.35 961.396,1209.86 961.982,1208.46 962.569,1205.89 963.155,1206.12 963.742,1205.42 964.328,1203.19 964.915,1202.77 965.501,1206.11 966.087,1204.76 966.674,1206.59 967.26,1205.53 967.847,1206.02 968.433,1206.18 969.019,1206.44 969.606,1208.1 970.192,1209.77 970.779,1212.69 971.365,1212.89 971.951,1213.11 972.538,1212.07 973.124,1208.09 973.711,1208.33 974.297,1208.51 974.884,1207.63 975.47,1209.23 976.056,1209.38 976.643,1212.34 977.229,1212.68 977.816,1212.87 978.402,1211.76 978.988,1213.55 979.575,1217.43 980.161,1218.54 980.748,1218.57 981.334,1215.57 981.92,1216.81 982.507,1216.87 983.093,1218.1 983.68,1220.64 984.266,1219.19 984.853,1220.12 985.439,1218.46 986.025,1217.17 986.612,1216.89 987.198,1219.22 987.785,1217.61 988.371,1220.13 988.957,1219.99 989.544,1218.5 990.13,1218.41 990.717,1218.06 991.303,1221.73 991.889,1221.34 992.476,1222.15 993.062,1219.12 993.649,1214.96 994.235,1216.08 994.822,1214.67 995.408,1212.11 995.994,1214.9 996.581,1213.63 997.167,1213.67 997.754,1215.26 998.34,1212.37 998.926,1212.47 999.513,1212.28 1000.1,1211.11 1000.69,1212.52 1001.27,1215.06 1001.86,1218.73 1002.44,1218.5 1003.03,1217.15 1003.62,1218.34 1004.2,1218.06 1004.79,1219.03 1005.38,1218.73 1005.96,1219.9 1006.55,1217.05 1007.14,1217.07 1007.72,1218.43 1008.31,1219.32 1008.9,1218.96 1009.48,1219.94 1010.07,1221.18 1010.65,1221.91 1011.24,1218.76 1011.83,1217.47 1012.41,1211.94 1013,1215.85 1013.59,1215.6 1014.17,1218.04 1014.76,1220.27 1015.35,1217.31 1015.93,1218.75 1016.52,1215.55 1017.11,1214.19 1017.69,1218.06 1018.28,1217.8 1018.86,1216.1 1019.45,1214.74 1020.04,1213.46 1020.62,1214.99 1021.21,1213.49 1021.8,1213.3 1022.38,1214.79 1022.97,1214.57 1023.56,1210.82 1024.14,1208.35 1024.73,1207.46 1025.32,1209.17 1025.9,1210.61 1026.49,1211.94 1027.07,1213.14 1027.66,1211.77 1028.25,1213.23 1028.83,1212.07 1029.42,1212.26 1030.01,1209.87 1030.59,1209.95 1031.18,1209.99 1031.77,1206.15 1032.35,1206.7 1032.94,1207.13 1033.52,1213.02 1034.11,1215.87 1034.7,1216.73 1035.28,1219.17 1035.87,1217.35 1036.46,1218.25 1037.04,1215.56 1037.63,1215.29 1038.22,1215.07 1038.8,1214.02 1039.39,1214 1039.98,1213.82 1040.56,1213.67 1041.15,1212.34 1041.73,1212.17 1042.32,1212.24 1042.91,1212.37 1043.49,1213.71 1044.08,1214.96 1044.67,1216.13 1045.25,1215.75 1045.84,1216.72 1046.43,1216.48 1047.01,1216.42 1047.6,1216.05 1048.19,1214.67 1048.77,1216.17 1049.36,1216.32 1049.94,1213.35 1050.53,1214.65 1051.12,1219.88 1051.7,1222.01 1052.29,1225.36 1052.88,1224.98 1053.46,1218.01 1054.05,1221.72 1054.64,1225.09 1055.22,1223.32 1055.81,1222.59 1056.39,1221.86 1056.98,1224.15 1057.57,1222.25 1058.15,1221.78 1058.74,1220.02 1059.33,1215.77 1059.91,1217.08 1060.5,1219.36 1061.09,1219.18 1061.67,1220.4 1062.26,1218.88 1062.85,1219.98 1063.43,1219.65 1064.02,1216.63 1064.6,1214.85 1065.19,1214.84 1065.78,1217.77 1066.36,1215.02 1066.95,1217.33 1067.54,1217.27 1068.12,1214.44 1068.71,1214.51 1069.3,1211.66 1069.88,1211.73 1070.47,1209.22 1071.06,1207.05 1071.64,1208.87 1072.23,1206.54 1072.81,1208.62 1073.4,1209.94 1073.99,1212.74 1074.57,1212.64 1075.16,1212.5 1075.75,1211.46 1076.33,1208.94 1076.92,1210.37 1077.51,1208.17 1078.09,1212.34 1078.68,1213.72 1079.26,1213.59 1079.85,1215.08 1080.44,1216.12 1081.02,1217.26 1081.61,1217.3 1082.2,1216.95 1082.78,1215.58 1083.37,1212.79 1083.96,1210.45 1084.54,1209.38 1085.13,1211.06 1085.72,1212.32 1086.3,1213.73 1086.89,1212.58 1087.47,1208.57 1088.06,1208.71 1088.65,1208.9 1089.23,1209.12 1089.82,1208.01 1090.41,1209.6 1090.99,1207.18 1091.58,1206.26 1092.17,1204.04 1092.75,1207.22 1093.34,1206.36 1093.93,1208.07 1094.51,1209.68 1095.1,1212.37 1095.68,1212.42 1096.27,1215.07 1096.86,1215.15 1097.44,1213.65 1098.03,1213.97 1098.62,1216.31 1099.2,1216.07 1099.79,1213.18 1100.38,1214.23 1100.96,1209.92 1101.55,1209.92 1102.14,1210.1 1102.72,1206.48 1103.31,1208.04 1103.89,1211.28 1104.48,1214.59 1105.07,1215.82 1105.65,1215.74 1106.24,1216.6 1106.83,1216.21 1107.41,1218.7 1108,1217.29 1108.59,1215.74 1109.17,1215.72 1109.76,1218.09 1110.34,1217.74 1110.93,1218.73 1111.52,1222.4 1112.1,1219.48 1112.69,1220.51 1113.28,1224.09 1113.86,1220.87 1114.45,1221.93 1115.04,1221.69 1115.62,1221.24 1116.21,1223.62 1116.8,1223.27 1117.38,1218.82 1117.97,1220.03 1118.55,1218.26 1119.14,1216.76 1119.73,1216.76 1120.31,1216.52 1120.9,1216.29 1121.49,1213.65 1122.07,1216.43 1122.66,1219.01 1123.25,1220.1 1123.83,1219.63 1124.42,1219.3 1125.01,1215.23 1125.59,1216.15 1126.18,1216.15 1126.76,1218.84 1127.35,1217.19 1127.94,1216.84 1128.52,1216.55 1129.11,1216.5 1129.7,1217.81 1130.28,1219.05 1130.87,1214.63 1131.46,1213.36 1132.04,1213.13 1132.63,1215.63 1133.21,1213.03 1133.8,1211.92 1134.39,1211.96 1134.97,1213.29 1135.56,1213.28 1136.15,1212.29 1136.73,1209.6 1137.32,1212.59 1137.91,1212.7 1138.49,1209.99 1139.08,1210.15 1139.67,1213.26 1140.25,1213.57 1140.84,1211.03 1141.42,1211.17 1142.01,1209.85 1142.6,1210 1143.18,1208.88 1143.77,1210.5 1144.36,1213.28 1144.94,1214.64 1145.53,1215.97 1146.12,1214.52 1146.7,1213.17 1147.29,1214.35 1147.88,1216.75 1148.46,1216.45 1149.05,1210.91 1149.63,1211.12 1150.22,1208.76 1150.81,1207.97 1151.39,1206.81 1151.98,1207.3 1152.57,1206.56 1153.15,1203.08 1153.74,1206.26 1154.33,1209.3 1154.91,1209.76 1155.5,1208.75 1156.09,1210.69 1156.67,1210.6 1157.26,1210.84 1157.84,1211.02 1158.43,1208.19 1159.02,1207.24 1159.6,1207.31 1160.19,1209.09 1160.78,1208.13 1161.36,1211.04 1161.95,1211.17 1162.54,1211.11 1163.12,1209.87 1163.71,1209.97 1164.29,1208.65 1164.88,1208.91 1165.47,1213.04 1166.05,1212.04 1166.64,1213.63 1167.23,1209.71 1167.81,1209.92 1168.4,1211.43 1168.99,1210.37 1169.57,1213.26 1170.16,1214.54 1170.75,1214.61 1171.33,1213.12 1171.92,1212.11 1172.5,1214.9 1173.09,1215.97 1173.68,1215.73 1174.26,1216.71 1174.85,1212.69 1175.44,1210 1176.02,1208.98 1176.61,1208.91 1177.2,1208.88 1177.78,1208.09 1178.37,1208.43 1178.96,1207.18 1179.54,1204.82 1180.13,1209.23 1180.71,1208.03 1181.3,1209.63 1181.89,1207.14 1182.47,1208.72 1183.06,1207.54 1183.65,1206.67 1184.23,1208.42 1184.82,1207.5 1185.41,1208.02 1185.99,1208.39 1186.58,1207.4 1187.16,1209.02 1187.75,1205.23 1188.34,1209.88 1188.92,1211.51 1189.51,1213.09 1190.1,1211.92 1190.68,1213.38 1191.27,1213.22 1191.86,1214.27 1192.44,1212.86 1193.03,1214.21 1193.62,1214.27 1194.2,1214.1 1194.79,1215.65 1195.37,1215.31 1195.96,1215.29 1196.55,1216.74 1197.13,1217.74 1197.72,1218.94 1198.31,1219.86 1198.89,1220.79 1199.48,1220.57 1200.07,1224.23 1200.65,1223.68 1201.24,1220.79 1201.83,1221.96 1202.41,1221.34 1203,1220.9 1203.58,1220.43 1204.17,1219.1 1204.76,1220.14 1205.34,1218.49 1205.93,1218.36 1206.52,1218.03 1207.1,1216.34 1207.69,1214.9 1208.28,1213.71 1208.86,1212.52 1209.45,1216.74 1210.03,1217 1210.62,1215.17 1211.21,1211.39 1211.79,1208.94 1212.38,1207.79 1212.97,1211.84 1213.55,1212.02 1214.14,1209.63 1214.73,1209.8 1215.31,1212.56 1215.9,1207.39 1216.49,1206.23 1217.07,1209.31 1217.66,1209.61 1218.24,1212.61 1218.83,1211.47 1219.42,1211.71 1220,1212.22 1220.59,1216.11 1221.18,1214.91 1221.76,1214.62 1222.35,1213.15 1222.94,1212.22 1223.52,1215.06 1224.11,1213.83 1224.7,1212.49 1225.28,1212.7 1225.87,1211.58 1226.45,1212.9 1227.04,1211.95 1227.63,1210.92 1228.21,1210.97 1228.8,1211.28 1229.39,1210.01 1229.97,1211.83 1230.56,1211.91 1231.15,1213.24 1231.73,1211.97 1232.32,1215.89 1232.91,1216.87 1233.49,1216.59 1234.08,1216.33 1234.66,1216.06 1235.25,1213.19 1235.84,1213.3 1236.42,1210.69 1237.01,1213.18 1237.6,1216.09 1238.18,1216.13 1238.77,1215.92 1239.36,1215.76 1239.94,1215.81 1240.53,1215.95 1241.11,1215.71 1241.7,1214.37 1242.29,1215.77 1242.87,1214.29 1243.46,1214.41 1244.05,1213 1244.63,1214.31 1245.22,1215.95 1245.81,1216.13 1246.39,1212.04 1246.98,1213.29 1247.57,1211.89 1248.15,1213.29 1248.74,1213.03 1249.32,1212.92 1249.91,1211.85 1250.5,1217.34 1251.08,1216.91 1251.67,1216.57 1252.26,1212.4 1252.84,1213.61 1253.43,1215.89 1254.02,1214.68 1254.6,1211.76 1255.19,1211.62 1255.78,1209.12 1256.36,1210.68 1256.95,1209.69 1257.53,1212.41 1258.12,1211.09 1258.71,1210.98 1259.29,1210.08 1259.88,1210.39 1260.47,1211.8 1261.05,1213.28 1261.64,1213.31 1262.23,1214.86 1262.81,1215.89 1263.4,1216.95 1263.98,1217.02 1264.57,1218.33 1265.16,1215.2 1265.74,1215.1 1266.33,1213.42 1266.92,1214.76 1267.5,1211.94 1268.09,1212.31 1268.68,1216.12 1269.26,1213.15 1269.85,1211.94 1270.44,1212.16 1271.02,1212.04 1271.61,1212.26 1272.19,1212.14 1272.78,1212.18 1273.37,1212.26 1273.95,1212.15 1274.54,1213.6 1275.13,1216.09 1275.71,1214.47 1276.3,1216.91 1276.89,1219.17 1277.47,1218.79 1278.06,1218.27 1278.65,1216.52 1279.23,1216.56 1279.82,1219.08 1280.4,1217.59 1280.99,1217.58 1281.58,1217.48 1282.16,1214.89 1282.75,1212.22 1283.34,1211.14 1283.92,1208.56 1284.51,1211.3 1285.1,1210.02 1285.68,1211.32 1286.27,1208.75 1286.86,1209.07 1287.44,1209.37 1288.03,1209.7 1288.61,1211.41 1289.2,1212.55 1289.79,1214.17 1290.37,1214.16 1290.96,1218.1 1291.55,1220.74 1292.13,1220.35 1292.72,1221.3 1293.31,1222.2 1293.89,1220.57 1294.48,1221.62 1295.06,1218.63 1295.65,1219.72 1296.24,1221.99 1296.82,1220.21 1297.41,1220.16 1298,1217.06 1298.58,1216.75 1299.17,1216.36 1299.76,1216.05 1300.34,1214.6 1300.93,1213.11 1301.52,1214.39 1302.1,1216.84 1302.69,1216.38 1303.27,1216.36 1303.86,1213.15 1304.45,1213.04 1305.03,1211.69 1305.62,1214.16 1306.21,1211.57 1306.79,1210.48 1307.38,1211.01 1307.97,1207.17 1308.55,1206.19 1309.14,1204.19 1309.73,1202.17 1310.31,1204.41 1310.9,1204.84 1311.48,1210.79 1312.07,1212.32 1312.66,1213.72 1313.24,1215.04 1313.83,1217.53 1314.42,1217.64 1315,1218.57 1315.59,1219.78 1316.18,1219.42 1316.76,1217.53 1317.35,1217.32 1317.93,1214.25 1318.52,1215.81 1319.11,1214.32 1319.69,1218.22 1320.28,1219.21 1320.87,1221.24 1321.45,1220.9 1322.04,1220.39 1322.63,1217.37 1323.21,1217.33 1323.8,1218.95 1324.39,1219.79 1324.97,1222.21 1325.56,1219.23 1326.14,1217.48 1326.73,1215.97 1327.32,1213.21 1327.9,1214.57 1328.49,1215.59 1329.08,1214 1329.66,1217.89 1330.25,1218.99 1330.84,1218.72 1331.42,1219.76 1332.01,1218.19 1332.6,1218.12 1333.18,1217.67 1333.77,1216.14 1334.35,1214.41 1334.94,1214.32 1335.53,1214.38 1336.11,1214.02 1336.7,1213.99 1337.29,1213.94 1337.87,1213.56 1338.46,1214.84 1339.05,1217.33 1339.63,1214.35 1340.22,1217.27 1340.8,1220.9 1341.39,1220.65 1341.98,1221.51 1342.56,1220.9 1343.15,1215.34 1343.74,1215.11 1344.32,1212.56 1344.91,1212.63 1345.5,1212.57 1346.08,1213.75 1346.67,1213.78 1347.26,1215.42 1347.84,1215.55 1348.43,1213.94 1349.01,1214.2 1349.6,1215.37 1350.19,1214.06 1350.77,1215.46 1351.36,1216.75 1351.95,1216.31 1352.53,1220.18 1353.12,1215.9 1353.71,1213.41 1354.29,1212.06 1354.88,1209.65 1355.47,1208.34 1356.05,1206.14 1356.64,1206.63 1357.22,1205.85 1357.81,1206.33 1358.4,1206.86 1358.98,1208.68 1359.57,1209.24 1360.16,1206.55 1360.74,1204.29 1361.33,1204.44 1361.92,1205.13 1362.5,1205.4 1363.09,1206.95 1363.68,1208.5 1364.26,1206.27 1364.85,1206.61 1365.43,1206.9 1366.02,1210.01 1366.61,1208.75 1367.19,1206.48 1367.78,1206.68 1368.37,1207.12 1368.95,1204.85 1369.54,1207.81 1370.13,1209.66 1370.71,1209.58 1371.3,1213.59 1371.88,1216.22 1372.47,1216.03 1373.06,1212.14 1373.64,1212.27 1374.23,1213.56 1374.82,1212.27 1375.4,1210.94 1375.99,1209.93 1376.58,1208.68 1377.16,1208.96 1377.75,1210.43 1378.34,1211.99 1378.92,1212.05 1379.51,1209.45 1380.09,1207.08 1380.68,1206.04 1381.27,1205.24 1381.85,1206.99 1382.44,1208.48 1383.03,1209.98 1383.61,1207.49 1384.2,1207.79 1384.79,1208.13 1385.37,1209.3 1385.96,1213.27 1386.55,1212.12 1387.13,1212.45 1387.72,1214.28 1388.3,1213.11 1388.89,1210.79 1389.48,1211.1 1390.06,1211.1 1390.65,1212.68 1391.24,1212.71 1391.82,1211.4 1392.41,1211.55 1393,1211.58 1393.58,1213.06 1394.17,1213.97 1394.75,1212.81 1395.34,1214.33 1395.93,1215.38 1396.51,1217.66 1397.1,1217.41 1397.69,1218.42 1398.27,1218.15 1398.86,1216.58 1399.45,1216.66 1400.03,1215.16 1400.62,1212.72 1401.21,1211.26 1401.79,1212.72 1402.38,1216.42 1402.96,1217.51 1403.55,1217.27 1404.14,1216.85 1404.72,1217.89 1405.31,1218.7 1405.9,1220.98 1406.48,1219.28 1407.07,1216.24 1407.66,1217.45 1408.24,1214.47 1408.83,1215.74 1409.42,1213.21 1410,1213.2 1410.59,1214.68 1411.17,1213.25 1411.76,1214.43 1412.35,1215.7 1412.93,1214.39 1413.52,1216.91 1414.11,1219.06 1414.69,1220.11 1415.28,1219.99 1415.87,1215.58 1416.45,1215.49 1417.04,1214.2 1417.63,1212.89 1418.21,1214.05 1418.8,1216.47 1419.38,1218.99 1419.97,1221.37 1420.56,1219.65 1421.14,1219.56 1421.73,1218.95 1422.32,1218.48 1422.9,1213.82 1423.49,1215.25 1424.08,1213.69 1424.66,1214.61 1425.25,1214.58 1425.83,1212.76 1426.42,1211.85 1427.01,1210.44 1427.59,1210.62 1428.18,1205.54 1428.77,1203.35 1429.35,1206.6 1429.94,1204.44 1430.53,1204.69 1431.11,1205.22 1431.7,1205.77 1432.29,1206.15 1432.87,1204.9 1433.46,1205.45 1434.04,1206.02 1434.63,1206.49 1435.22,1204.24 1435.8,1206.11 1436.39,1208.11 1436.98,1210.99 1437.56,1211.1 1438.15,1210.98 1438.74,1211.25 1439.32,1208.69 1439.91,1207.66 1440.5,1205.37 1441.08,1206.96 1441.67,1205.83 1442.25,1206.29 1442.84,1206.83 1443.43,1207.13 1444.01,1204.94 1444.6,1208.14 1445.19,1208.54 1445.77,1208.77 1446.36,1206.48 1446.95,1208.2 1447.53,1209.85 1448.12,1210.07 1448.7,1212.92 1449.29,1211.67 1449.88,1210.41 1450.46,1210.79 1451.05,1210.78 1451.64,1208.43 1452.22,1206.13 1452.81,1208.01 1453.4,1208.13 1453.98,1206.83 1454.57,1205.83 1455.16,1208.54 1455.74,1207.65 1456.33,1206.88 1456.91,1208.22 1457.5,1209.74 1458.09,1211 1458.67,1211.05 1459.26,1212.25 1459.85,1212.58 1460.43,1217.23 1461.02,1214.92 1461.61,1213.75 1462.19,1214.95 1462.78,1213.68 1463.37,1213.67 1463.95,1213.67 1464.54,1212.77 1465.12,1211.58 1465.71,1213.04 1466.3,1213.18 1466.88,1213.28 1467.47,1215.91 1468.06,1215.73 1468.64,1211.71 1469.23,1213.46 1469.82,1214.76 1470.4,1217.38 1470.99,1218.62 1471.57,1222.18 1472.16,1221.66 1472.75,1218.56 1473.33,1216.86 1473.92,1216.9 1474.51,1217.96 1475.09,1217.81 1475.68,1217.45 1476.27,1214.64 1476.85,1213.21 1477.44,1213.09 1478.03,1214.58 1478.61,1214.52 1479.2,1216 1479.78,1214.7 1480.37,1214.57 1480.96,1211.57 1481.54,1213.23 1482.13,1211.79 1482.72,1209.54 1483.3,1208.38 1483.89,1207.66 1484.48,1209.39 1485.06,1209.87 1485.65,1209.96 1486.24,1212.6 1486.82,1212.77 1487.41,1210.13 1487.99,1211.51 1488.58,1214.55 1489.17,1214.63 1489.75,1214.35 1490.34,1216.8 1490.93,1216.64 1491.51,1216.41 1492.1,1214.99 1492.69,1217.36 1493.27,1218.38 1493.86,1220.58 1494.45,1220.21 1495.03,1219.69 1495.62,1219.31 1496.2,1219.01 1496.79,1219.94 1497.38,1220.72 1497.96,1220.15 1498.55,1219.61 1499.14,1215.45 1499.72,1212.71 1500.31,1214.06 1500.9,1211.24 1501.48,1212.37 1502.07,1212.45 1502.65,1212.39 1503.24,1216.5 1503.83,1220.29 1504.41,1221.25 1505,1222.31 1505.59,1221.74 1506.17,1221.2 1506.76,1216.93 1507.35,1219.5 1507.93,1218.97 1508.52,1218.56 1509.11,1218.46 1509.69,1220.78 1510.28,1218.93 1510.86,1219.88 1511.45,1219.26 1512.04,1221.34 1512.62,1219.2 1513.21,1218.83 1513.8,1219.79 1514.38,1219.48 1514.97,1218.8 1515.56,1214.7 1516.14,1214.88 1516.73,1214.57 1517.32,1211.65 1517.9,1211.67 1518.49,1211.89 1519.07,1210.88 1519.66,1213.74 1520.25,1216.05 1520.83,1213.35 1521.42,1213.44 1522.01,1214.81 1522.59,1217.38 1523.18,1215.92 1523.77,1215.77 1524.35,1214.54 1524.94,1211.83 1525.52,1213.03 1526.11,1215.81 1526.7,1214.54 1527.28,1212.14 1527.87,1209.71 1528.46,1209.72 1529.04,1207.34 1529.63,1207.71 1530.22,1208.13 1530.8,1209.79 1531.39,1212.54 1531.98,1212.6 1532.56,1214.23 1533.15,1211.51 1533.73,1213.13 1534.32,1213.08 1534.91,1213.17 1535.49,1211.92 1536.08,1212.21 1536.67,1212.2 1537.25,1210.76 1537.84,1209.63 1538.43,1211.13 1539.01,1209.87 1539.6,1211.25 1540.19,1212.62 1540.77,1212.48 1541.36,1212.2 1541.94,1212.3 1542.53,1216.2 1543.12,1212.08 1543.7,1211.01 1544.29,1212.42 1544.88,1211.12 1545.46,1211.2 1546.05,1210.25 1546.64,1209.94 1547.22,1211.44 1547.81,1212.73 1548.4,1212.77 1548.98,1211.53 1549.57,1213.03 1550.15,1212.88 1550.74,1211.62 1551.33,1211.54 1551.91,1210.35 1552.5,1210.27 1553.09,1213.14 1553.67,1214.72 1554.26,1213.54 1554.85,1213.3 1555.43,1214.5 1556.02,1213.04 1556.6,1211.49 1557.19,1214.14 1557.78,1213.03 1558.36,1213.13 1558.95,1211.89 1559.54,1210.91 1560.12,1210.9 1560.71,1210.75 1561.3,1210.87 1561.88,1210.01 1562.47,1211.29 1563.06,1211.11 1563.64,1212.54 1564.23,1215.37 1564.81,1212.72 1565.4,1209.93 1565.99,1209.95 1566.57,1210.25 1567.16,1210.71 1567.75,1212.08 1568.33,1213.73 1568.92,1212.32 1569.51,1213.73 1570.09,1214.07 1570.68,1212.73 1571.27,1213.89 1571.85,1215.11 1572.44,1216.34 1573.02,1213.49 1573.61,1210.81 1574.2,1213.63 1574.78,1213.86 1575.37,1214 1575.96,1213.85 1576.54,1214.1 1577.13,1212.81 1577.72,1211.52 1578.3,1210.46 1578.89,1214.31 1579.47,1213.01 1580.06,1213.13 1580.65,1211.73 1581.23,1210.79 1581.82,1213.52 1582.41,1216.07 1582.99,1214.9 1583.58,1212.38 1584.17,1212.7 1584.75,1211.48 1585.34,1210.15 1585.93,1210.42 1586.51,1211.65 1587.1,1213.12 1587.68,1214.6 1588.27,1214.53 1588.86,1210.66 1589.44,1209.76 1590.03,1211.4 1590.62,1211.71 1591.2,1209.12 1591.79,1213.63 1592.38,1213.59 1592.96,1214.91 1593.55,1213.63 1594.14,1213.59 1594.72,1214.74 1595.31,1217.23 1595.89,1215.75 1596.48,1214.36 1597.07,1213.01 1597.65,1215.75 1598.24,1215.53 1598.83,1216.55 1599.41,1217.49 1600,1217.37 1600.59,1217.08 1601.17,1215.56 1601.76,1215.56 1602.34,1214.07 1602.93,1214.23 1603.52,1214.42 1604.1,1215.53 1604.69,1215.53 1605.28,1215.42 1605.86,1216.63 1606.45,1215.37 1607.04,1215.31 1607.62,1215.23 1608.21,1215.41 1608.8,1215.61 1609.38,1216.81 1609.97,1218.15 1610.55,1220.37 1611.14,1219.88 1611.73,1217.22 1612.31,1216.01 1612.9,1215.8 1613.49,1219.47 1614.07,1215.27 1614.66,1216.49 1615.25,1216.3 1615.83,1215.97 1616.42,1217.01 1617.01,1217 1617.59,1216.93 1618.18,1214.22 1618.76,1215.7 1619.35,1215.58 1619.94,1214.08 1620.52,1213.98 1621.11,1216.3 1621.7,1214.81 1622.28,1212.14 1622.87,1211.94 1623.46,1211.05 1624.04,1212.6 1624.63,1212.55 1625.22,1216.4 1625.8,1216.08 1626.39,1214.49 1626.97,1214.24 1627.56,1215.31 1628.15,1212.59 1628.73,1212.77 1629.32,1210.06 1629.91,1206.51 1630.49,1208 1631.08,1208.6 1631.67,1208.65 1632.25,1207.53 1632.84,1207.99 1633.42,1208.39 1634.01,1211.22 1634.6,1212.4 1635.18,1213.64 1635.77,1212.58 1636.36,1212.63 1636.94,1210.13 1637.53,1210.45 1638.12,1210.82 1638.7,1212.18 1639.29,1213.65 1639.88,1213.6 1640.46,1212.17 1641.05,1211.88 1641.63,1211.98 1642.22,1211.89 1642.81,1212.01 1643.39,1213.52 1643.98,1213.38 1644.57,1213.4 1645.15,1213.14 1645.74,1213.32 1646.33,1210.67 1646.91,1210.58 1647.5,1210.53 1648.09,1212.02 1648.67,1213.4 1649.26,1213.19 1649.84,1213.46 1650.43,1213.28 1651.02,1214.53 1651.6,1214.61 1652.19,1211.72 1652.78,1212.85 1653.36,1211.66 1653.95,1210.47 1654.54,1212.06 1655.12,1216.32 1655.71,1217.47 1656.29,1216.01 1656.88,1214.71 1657.47,1212.19 1658.05,1208.23 1658.64,1208.21 1659.23,1213.76 1659.81,1212.25 1660.4,1213.69 1660.99,1214.95 1661.57,1216.24 1662.16,1215 1662.75,1212.38 1663.33,1211.05 1663.92,1215.02 1664.5,1218.65 1665.09,1216.86 1665.68,1219.13 1666.26,1218.63 1666.85,1219.6 1667.44,1223.44 1668.02,1224.2 1668.61,1219.73 1669.2,1219.31 1669.78,1221.37 1670.37,1217.06 1670.96,1216.95 1671.54,1216.76 1672.13,1216.8 1672.71,1215.36 1673.3,1215.32 1673.89,1213.99 1674.47,1210.1 1675.06,1210.02 1675.65,1210.18 1676.23,1207.83 1676.82,1208.18 1677.41,1209.92 1677.99,1211.69 1678.58,1213.01 1679.17,1210.52 1679.75,1210.62 1680.34,1210.7 1680.92,1209.79 1681.51,1208.62 1682.1,1207.49 1682.68,1206.63 1683.27,1207.07 1683.86,1204.7 1684.44,1205.24 1685.03,1203.17 1685.62,1203.72 1686.2,1204.1 1686.79,1205.91 1687.37,1207.55 1687.96,1206.66 1688.55,1204.37 1689.13,1205.01 1689.72,1206.8 1690.31,1208.61 1690.89,1207.93 1691.48,1208.6 1692.07,1210.22 1692.65,1211.79 1693.24,1212.05 1693.83,1208.27 1694.41,1209.73 1695,1209.95 1695.58,1210.04 1696.17,1210.22 1696.76,1211.57 1697.34,1211.82 1697.93,1211.64 1698.52,1213.04 1699.1,1211.72 1699.69,1214.53 1700.28,1214.08 1700.86,1212.88 1701.45,1213.1 1702.04,1214.65 1702.62,1214.66 1703.21,1214.68 1703.79,1214.78 1704.38,1213.61 1704.97,1213.48 1705.55,1213.52 1706.14,1213.63 1706.73,1213.51 1707.31,1214.33 1707.9,1214.41 1708.49,1213.17 1709.07,1215.64 1709.66,1215.48 1710.24,1215.26 1710.83,1213.61 1711.42,1214.96 1712,1217.65 1712.59,1217.29 1713.18,1215.54 1713.76,1215.52 1714.35,1218.17 1714.94,1218.91 1715.52,1220.08 1716.11,1216.01 1716.7,1217.21 1717.28,1213.19 1717.87,1210.66 1718.45,1210.45 1719.04,1212.01 1719.63,1211.88 1720.21,1213.4 1720.8,1213.68 1721.39,1212.47 1721.97,1212.47 1722.56,1215.15 1723.15,1217.82 1723.73,1222.74 1724.32,1223.39 1724.91,1225.38 1725.49,1224.83 1726.08,1220.13 1726.66,1218.82 1727.25,1216.02 1727.84,1217.2 1728.42,1218.05 1729.01,1220.39 1729.6,1220.11 1730.18,1219.83 1730.77,1219.75 1731.36,1219.54 1731.94,1220.36 1732.53,1220.03 1733.11,1219.57 1733.7,1219.16 1734.29,1218.96 1734.87,1218.72 1735.46,1214.25 1736.05,1215.4 1736.63,1215.19 1737.22,1212.67 1737.81,1213.94 1738.39,1212.74 1738.98,1214.2 1739.57,1215.24 1740.15,1216.82 1740.74,1215.26 1741.32,1216.53 1741.91,1213.98 1742.5,1212.8 1743.08,1215.5 1743.67,1214.46 1744.26,1214.27 1744.84,1219.37 1745.43,1215.37 1746.02,1216.91 1746.6,1216.61 1747.19,1216.65 1747.78,1216.25 1748.36,1215.8 1748.95,1218.08 1749.53,1216.32 1750.12,1218.6 1750.71,1218.15 1751.29,1216.84 1751.88,1218.95 1752.47,1219.91 1753.05,1215.95 1753.64,1218.24 1754.23,1219.4 1754.81,1218.01 1755.4,1216.56 1755.99,1215.12 1756.57,1215.01 1757.16,1217.47 1757.74,1217.15 1758.33,1218.19 1758.92,1217.94 1759.5,1221.62 1760.09,1223.75 1760.68,1224.48 1761.26,1222.61 1761.85,1218.21 1762.44,1217.83 1763.02,1220.03 1763.61,1220.82 1764.19,1221.47 1764.78,1218.45 1765.37,1216.88 1765.95,1215.4 1766.54,1216.46 1767.13,1213.63 1767.71,1212.07 1768.3,1212.1 1768.89,1212.03 1769.47,1210.84 1770.06,1211.03 1770.65,1210.87 1771.23,1209.9 1771.82,1207.52 1772.4,1209.03 1772.99,1207.95 1773.58,1208.22 1774.16,1207.24 1774.75,1206.15 1775.34,1209.13 1775.92,1210.54 1776.51,1210.59 1777.1,1210.65 1777.68,1209.5 1778.27,1208.19 1778.86,1206.97 1779.44,1205.79 1780.03,1204.9 1780.61,1205.5 1781.2,1206.37 1781.79,1205.51 1782.37,1208.57 1782.96,1210.01 1783.55,1208.51 1784.13,1207.55 1784.72,1208.87 1785.31,1211.76 1785.89,1210.56 1786.48,1212.2 1787.06,1210.88 1787.65,1209.54 1788.24,1208.58 1788.82,1210.22 1789.41,1209.15 1790,1210.53 1790.58,1212.23 1791.17,1212.43 1791.76,1212.49 1792.34,1213.94 1792.93,1216.23 1793.52,1217.21 1794.1,1218.37 1794.69,1215.48 1795.27,1216.61 1795.86,1219.17 1796.45,1218.75 1797.03,1221.32 1797.62,1220.78 1798.21,1220.05 1798.79,1219.32 1799.38,1221.55 1799.97,1221.09 1800.55,1223.33 1801.14,1222.9 1801.73,1222.51 1802.31,1220.76 1802.9,1219.05 1803.48,1215.8 1804.07,1218.01 1804.66,1219.09 1805.24,1217.37 1805.83,1215.95 1806.42,1214.51 1807,1213.2 1807.59,1211.86 1808.18,1211.76 1808.76,1211.88 1809.35,1213.37 1809.94,1213.76 1810.52,1213.52 1811.11,1216.26 1811.69,1216.25 1812.28,1217.28 1812.87,1219.69 1813.45,1220.74 1814.04,1218.89 1814.63,1218.94 1815.21,1217.3 1815.8,1218.39 1816.39,1216.6 1816.97,1212.4 1817.56,1215.05 1818.14,1214.59 1818.73,1214.44 1819.32,1212.91 1819.9,1215.63 1820.49,1214.09 1821.08,1210.28 1821.66,1211.61 1822.25,1210.54 1822.84,1209.4 1823.42,1210.86 1824.01,1208.33 1824.6,1204.5 1825.18,1206.07 1825.77,1206.63 1826.35,1207.05 1826.94,1207.42 1827.53,1206.48 1828.11,1206.98 1828.7,1207.16 1829.29,1208.93 1829.87,1210.44 1830.46,1206.74 1831.05,1204.29 1831.63,1204.67 1832.22,1206.46 1832.81,1205.42 1833.39,1203.23 1833.98,1205.2 1834.56,1204.22 1835.15,1203.6 1835.74,1205.54 1836.32,1206.02 1836.91,1206.45 1837.5,1205.69 1838.08,1206.34 1838.67,1207.9 1839.26,1206.8 1839.84,1208.45 1840.43,1208.66 1841.01,1206.29 1841.6,1205.36 1842.19,1208.85 1842.77,1209.07 1843.36,1209.57 1843.95,1209.81 1844.53,1210.2 1845.12,1211.59 1845.71,1210.54 1846.29,1209.63 1846.88,1209.71 1847.47,1208.65 1848.05,1211.42 1848.64,1212.93 1849.22,1211.61 1849.81,1211.95 1850.4,1217.42 1850.98,1218.69 1851.57,1218.38 1852.16,1218.29 1852.74,1220.81 1853.33,1219.09 1853.92,1219.06 1854.5,1220.18 1855.09,1215.93 1855.68,1215.75 1856.26,1218.19 1856.85,1218.19 1857.43,1213.99 1858.02,1212.75 1858.61,1212.88 1859.19,1216.84 1859.78,1215.54 1860.37,1216.61 1860.95,1217.47 1861.54,1215.71 1862.13,1216.83 1862.71,1215.56 1863.3,1215.54 1863.88,1214.05 1864.47,1213.94 1865.06,1212.58 1865.64,1210.05 1866.23,1210.28 1866.82,1212.81 1867.4,1214.22 1867.99,1214.53 1868.58,1215.53 1869.16,1213.79 1869.75,1212.51 1870.34,1212.39 1870.92,1211.15 1871.51,1211.49 1872.09,1211.38 1872.68,1208.54 1873.27,1207.45 1873.85,1207.65 1874.44,1206.69 1875.03,1212.38 1875.61,1209.62 1876.2,1209.66 1876.79,1208.51 1877.37,1206.24 1877.96,1206.61 1878.55,1206.9 1879.13,1211.01 1879.72,1211.03 1880.3,1213.68 1880.89,1212.42 1881.48,1216.41 1882.06,1218.82 1882.65,1217.39 1883.24,1215.82 1883.82,1214.62 1884.41,1216.26 1885,1215.08 1885.58,1214.91 1886.17,1216.06 1886.76,1214.66 1887.34,1214.83 1887.93,1213.6 1888.51,1212.28 1889.1,1217.49 1889.69,1218.58 1890.27,1218.33 1890.86,1220.67 1891.45,1220.44 1892.03,1217.47 1892.62,1214.36 1893.21,1215.81 1893.79,1211.97 1894.38,1212.02 1894.96,1212.06 1895.55,1214.75 1896.14,1214.84 1896.72,1212.02 1897.31,1214.61 1897.9,1214.36 1898.48,1211.49 1899.07,1211.78 1899.66,1213.22 1900.24,1213.27 1900.83,1213.39 1901.42,1212.25 1902,1210.87 1902.59,1212.29 1903.17,1212.3 1903.76,1212.62 1904.35,1212.85 1904.93,1214.18 1905.52,1212.58 1906.11,1212.79 1906.69,1212.89 1907.28,1212.77 1907.87,1211.42 1908.45,1208.9 1909.04,1207.89 1909.63,1206.95 1910.21,1205.91 1910.8,1204.78 1911.38,1206.35 1911.97,1206.49 1912.56,1206.9 1913.14,1209.84 1913.73,1207.5 1914.32,1208.98 1914.9,1209.16 1915.49,1211.98 1916.08,1216.05 1916.66,1217.15 1917.25,1219.59 1917.83,1219.24 1918.42,1218.88 1919.01,1218.96 1919.59,1219.91 1920.18,1217.94 1920.77,1221.58 1921.35,1221.06 1921.94,1219.43 1922.53,1220.12 1923.11,1221.14 1923.7,1219.44 1924.29,1220.64 1924.87,1220.37 1925.46,1216.13 1926.04,1214.66 1926.63,1213.06 1927.22,1213.34 1927.8,1212.43 1928.39,1211.19 1928.98,1212.67 1929.56,1213.96 1930.15,1212.47 1930.74,1212.61 1931.32,1214.97 1931.91,1215.01 1932.5,1217.35 1933.08,1214.28 1933.67,1211.7 1934.25,1214.43 1934.84,1212.33 1935.43,1212.38 1936.01,1212.59 1936.6,1214.22 1937.19,1214.33 1937.77,1215.68 1938.36,1214.37 1938.95,1216.74 1939.53,1216.82 1940.12,1219.25 1940.71,1213.94 1941.29,1215 1941.88,1213.53 1942.46,1211.01 1943.05,1211.08 1943.64,1207.22 1944.22,1207.8 1944.81,1209.54 1945.4,1210.16 1945.98,1211.51 1946.57,1207.54 1947.16,1205.08 1947.74,1207.97 1948.33,1209.64 1948.91,1209.7 1949.5,1210.13 1950.09,1211.39 1950.67,1211.29 1951.26,1213.8 1951.85,1212.53 1952.43,1216.67 1953.02,1216.64 1953.61,1216.73 1954.19,1216.48 1954.78,1215.05 1955.37,1214.77 1955.95,1212.25 1956.54,1213.9 1957.12,1213.87 1957.71,1214.06 1958.3,1214.16 1958.88,1214.4 1959.47,1214.46 1960.06,1214.27 1960.64,1213.71 1961.23,1213.87 1961.82,1216.82 1962.4,1216.83 1962.99,1215.4 1963.58,1214.01 1964.16,1212.91 1964.75,1214.34 1965.33,1215.73 1965.92,1214.36 1966.51,1214.17 1967.09,1212.88 1967.68,1211.67 1968.27,1212.89 1968.85,1212.88 1969.44,1212.65 1970.03,1214.14 1970.61,1214.29 1971.2,1214.44 1971.78,1214.55 1972.37,1214.64 1972.96,1215.64 1973.54,1214.25 1974.13,1215.6 1974.72,1214.06 1975.3,1213.91 1975.89,1213.84 1976.48,1213.86 1977.06,1213.77 1977.65,1213.68 1978.24,1214.02 1978.82,1214.18 1979.41,1215.39 1979.99,1214.15 1980.58,1214.33 1981.17,1215.52 1981.75,1215.46 1982.34,1216.91 1982.93,1216.75 1983.51,1215.22 1984.1,1215 1984.69,1214.99 1985.27,1214.68 1985.86,1212.13 1986.45,1208.02 1987.03,1207.07 1987.62,1209.13 1988.2,1210.86 1988.79,1212.35 1989.38,1209.81 1989.96,1209.99 1990.55,1209.98 1991.14,1211.51 1991.72,1212.82 1992.31,1212.98 1992.9,1213.03 1993.48,1211.62 1994.07,1210.49 1994.65,1210.71 1995.24,1208.13 1995.83,1209.57 1996.41,1209.68 1997,1208.43 1997.59,1208.53 1998.17,1208.77 1998.76,1206.32 1999.35,1205.53 1999.93,1206.12 2000.52,1206.33 2001.11,1205.67 2001.69,1208.63 2002.28,1208.78 2002.86,1210.75 2003.45,1210.96 2004.04,1213.48 2004.62,1214.62 2005.21,1214.41 2005.8,1214.02 2006.38,1213.9 2006.97,1212.41 2007.56,1212.68 2008.14,1214.33 2008.73,1215.64 2009.32,1218.13 2009.9,1216.46 2010.49,1216.08 2011.07,1214.89 2011.66,1214.67 2012.25,1214.45 2012.83,1214.64 2013.42,1214.57 2014.01,1213.38 2014.59,1215.94 2015.18,1215.7 2015.77,1215.46 2016.35,1216.93 2016.94,1214.3 2017.53,1212.89 2018.11,1212.98 2018.7,1217.13 2019.28,1214.31 2019.87,1212.96 2020.46,1210.31 2021.04,1210.45 2021.63,1210.57 2022.22,1210.48 2022.8,1212 2023.39,1210.81 2023.98,1213.79 2024.56,1212.2 2025.15,1212.33 2025.73,1211.1 2026.32,1213.68 2026.91,1213.81 2027.49,1212.33 2028.08,1213.72 2028.67,1216.38 2029.25,1216.15 2029.84,1217.32 2030.43,1219.87 2031.01,1219.44 2031.6,1220.69 2032.19,1222.87 2032.77,1222.62 2033.36,1222.18 2033.94,1220.61 2034.53,1221.45 2035.12,1218.26 2035.7,1215.31 2036.29,1217.77 2036.88,1220.19 2037.46,1219.87 2038.05,1219.57 2038.64,1221.73 2039.22,1222.57 2039.81,1224.61 2040.4,1225.1 2040.98,1224.58 2041.57,1222.7 2042.15,1223.46 2042.74,1222.78 2043.33,1223.63 2043.91,1221.64 2044.5,1218.59 2045.09,1219.59 2045.67,1218.08 2046.26,1216.17 2046.85,1215.92 2047.43,1218.28 2048.02,1216.61 2048.6,1217.54 2049.19,1217.19 2049.78,1216.99 2050.36,1212.84 2050.95,1214.04 2051.54,1211.27 2052.12,1211.42 2052.71,1215.28 2053.3,1213.74 2053.88,1208.54 2054.47,1206.25 2055.06,1205.12 2055.64,1205.57 2056.23,1203.37 2056.81,1206.7 2057.4,1207.37 2057.99,1208.62 2058.57,1208.94 2059.16,1215.89 2059.75,1215.78 2060.33,1212.89 2060.92,1210.3 2061.51,1210.41 2062.09,1210.55 2062.68,1209.45 2063.27,1212.47 2063.85,1212.72 2064.44,1212.73 2065.02,1211.66 2065.61,1211.96 2066.2,1210.94 2066.78,1212.36 2067.37,1210.94 2067.96,1211.21 2068.54,1211.35 2069.13,1210.04 2069.72,1210.19 2070.3,1210.55 2070.89,1210.69 2071.48,1208.15 2072.06,1209.68 2072.65,1211.04 2073.23,1207.19 2073.82,1207.36 2074.41,1206.06 2074.99,1202.8 2075.58,1198.08 2076.17,1200.44 2076.75,1198.31 2077.34,1198.02 2077.93,1197.32 2078.51,1196.9 2079.1,1199.09 2079.68,1202.66 2080.27,1200.42 2080.86,1203.46 2081.44,1205.31 2082.03,1206.18 2082.62,1205.1 2083.2,1205.62 2083.79,1207.44 2084.38,1206.3 2084.96,1207.83 2085.55,1209.75 2086.14,1208.65 2086.72,1207.34 2087.31,1207.6 2087.89,1208.05 2088.48,1208.43 2089.07,1210.26 2089.65,1210.01 2090.24,1211.28 2090.83,1216.74 2091.41,1217.78 2092,1220.13 2092.59,1221.14 2093.17,1220.83 2093.76,1220.27 2094.35,1217.38 2094.93,1219.85 2095.52,1219.27 2096.1,1219.08 2096.69,1218.87 2097.28,1219.85 2097.86,1219.55 2098.45,1220.48 2099.04,1222.69 2099.62,1219.39 2100.21,1218.94 2100.8,1216.18 2101.38,1216.54 2101.97,1217.49 2102.55,1218.63 2103.14,1216.97 2103.73,1216.78 2104.31,1219.5 2104.9,1218.92 2105.49,1218.67 2106.07,1221.11 2106.66,1220.63 2107.25,1220.32 2107.83,1220.11 2108.42,1221.18 2109.01,1220.76 2109.59,1219.02 2110.18,1220.14 2110.76,1221.12 2111.35,1219.47 2111.94,1216.63 2112.52,1216.59 2113.11,1213.89 2113.7,1215.14 2114.28,1213.47 2114.87,1214.64 2115.46,1217.17 2116.04,1218.7 2116.63,1217.02 2117.22,1216.51 2117.8,1216.59 2118.39,1218.96 2118.97,1218.77 2119.56,1218.26 2120.15,1214.16 2120.73,1213.89 2121.32,1213.95 2121.91,1210.13 2122.49,1211.71 2123.08,1211.76 2123.67,1210.66 2124.25,1209.71 2124.84,1210.24 2125.42,1210.32 2126.01,1213.17 2126.6,1211.66 2127.18,1211.55 2127.77,1208.95 2128.36,1209.13 2128.94,1209.09 2129.53,1210.9 2130.12,1208.56 2130.7,1208.81 2131.29,1207.63 2131.88,1207.95 2132.46,1209.45 2133.05,1210.01 2133.63,1212.68 2134.22,1214.13 2134.81,1214.4 2135.39,1215.98 2135.98,1217.18 2136.57,1220.81 2137.15,1217.81 2137.74,1217.46 2138.33,1220.08 2138.91,1219.84 2139.5,1218.31 2140.09,1217.87 2140.67,1216.3 2141.26,1217.48 2141.84,1217.46 2142.43,1222.57 2143.02,1220.82 2143.6,1221.57 2144.19,1218.61 2144.78,1214.35 2145.36,1211.62 2145.95,1211.61 2146.54,1211.6 2147.12,1211.81 2147.71,1209.2 2148.3,1210.83 2148.88,1211 2149.47,1211.1 2150.05,1210.95 2150.64,1212.66 2151.23,1212.87 2151.81,1215.53 2152.4,1216.69 2152.99,1215.33 2153.57,1216.39 2154.16,1213.21 2154.75,1213.21 2155.33,1210.74 2155.92,1209.73 2156.5,1212.61 2157.09,1215.61 2157.68,1215.72 2158.26,1218.1 \"/>\n<path clip-path=\"url(#clip922)\" d=\"M986.025 1214.02 L986.612 1214.02 L987.198 1214.02 L987.785 1214.02 L988.371 1214.02 L988.957 1214.02 L989.544 1214.02 L990.13 1214.02 L990.717 1214.02 L991.303 1214.02 L991.889 1214.02 L992.476 1214.02 L993.062 1214.02 L993.649 1214.02 L994.235 1214.02 L994.822 1214.02 L995.408 1214.02 L995.994 1214.02 L996.581 1214.02 L997.167 1214.02 L997.754 1214.02 L998.34 1214.02 L998.926 1214.02 L999.513 1214.02 L1000.1 1214.02 L1000.69 1214.02 L1001.27 1214.02 L1001.86 1214.02 L1002.44 1214.02 L1003.03 1214.02 L1003.62 1214.02 L1004.2 1214.02 L1004.79 1214.02 L1005.38 1214.02 L1005.96 1214.02 L1006.55 1214.02 L1007.14 1214.02 L1007.72 1214.02 L1008.31 1214.02 L1008.9 1214.02 L1009.48 1214.02 L1010.07 1214.02 L1010.65 1214.02 L1011.24 1214.02 L1011.83 1214.02 L1012.41 1214.02 L1013 1214.02 L1013.59 1214.02 L1014.17 1214.02 L1014.76 1214.02 L1015.35 1214.02 L1015.93 1214.02 L1016.52 1214.02 L1017.11 1214.02 L1017.69 1214.02 L1018.28 1214.02 L1018.86 1214.02 L1019.45 1214.02 L1020.04 1214.02 L1020.62 1214.02 L1021.21 1214.02 L1021.8 1214.02 L1022.38 1214.02 L1022.97 1214.02 L1023.56 1214.02 L1024.14 1214.02 L1024.73 1214.02 L1025.32 1214.02 L1025.9 1214.02 L1026.49 1214.02 L1027.07 1214.02 L1027.66 1214.02 L1028.25 1214.02 L1028.83 1214.02 L1029.42 1214.02 L1030.01 1214.02 L1030.59 1214.02 L1031.18 1214.02 L1031.77 1214.02 L1032.35 1214.02 L1032.94 1214.02 L1033.52 1214.02 L1034.11 1214.02 L1034.7 1214.02 L1035.28 1214.02 L1035.87 1214.02 L1036.46 1214.02 L1037.04 1214.02 L1037.63 1214.02 L1038.22 1214.02 L1038.8 1214.02 L1039.39 1214.02 L1039.98 1214.02 L1040.56 1214.02 L1041.15 1214.02 L1041.73 1214.02 L1042.32 1214.02 L1042.91 1214.02 L1043.49 1214.02 L1044.08 1214.02 L1044.67 1214.02 L1045.25 1214.02 L1045.84 1214.02 L1046.43 1214.02 L1047.01 1214.02 L1047.6 1214.02 L1048.19 1214.02 L1048.77 1214.02 L1049.36 1214.02 L1049.94 1214.02 L1050.53 1214.02 L1051.12 1214.02 L1051.7 1214.02 L1052.29 1214.02 L1052.88 1214.02 L1053.46 1214.02 L1054.05 1214.02 L1054.64 1214.02 L1055.22 1214.02 L1055.81 1214.02 L1056.39 1214.02 L1056.98 1214.02 L1057.57 1214.02 L1058.15 1214.02 L1058.74 1214.02 L1059.33 1214.02 L1059.91 1214.02 L1060.5 1214.02 L1061.09 1214.02 L1061.67 1214.02 L1062.26 1214.02 L1062.85 1214.02 L1063.43 1214.02 L1064.02 1214.02 L1064.6 1214.02 L1065.19 1214.02 L1065.78 1214.02 L1066.36 1214.02 L1066.95 1214.02 L1067.54 1214.02 L1068.12 1214.02 L1068.71 1214.02 L1069.3 1214.02 L1069.88 1214.02 L1070.47 1214.02 L1071.06 1214.02 L1071.64 1214.02 L1072.23 1214.02 L1072.81 1214.02 L1073.4 1214.02 L1073.99 1214.02 L1074.57 1214.02 L1075.16 1214.02 L1075.75 1214.02 L1076.33 1214.02 L1076.92 1214.02 L1077.51 1214.02 L1078.09 1214.02 L1078.68 1214.02 L1079.26 1214.02 L1079.85 1214.02 L1080.44 1214.02 L1081.02 1214.02 L1081.61 1214.02 L1082.2 1214.02 L1082.78 1214.02 L1083.37 1214.02 L1083.96 1214.02 L1084.54 1214.02 L1085.13 1214.02 L1085.72 1214.02 L1086.3 1214.02 L1086.89 1214.02 L1087.47 1214.02 L1088.06 1214.02 L1088.65 1214.02 L1089.23 1214.02 L1089.82 1214.02 L1090.41 1214.02 L1090.99 1214.02 L1091.58 1214.02 L1092.17 1214.02 L1092.75 1214.02 L1093.34 1214.02 L1093.93 1214.02 L1094.51 1214.02 L1095.1 1214.02 L1095.68 1214.02 L1096.27 1214.02 L1096.86 1214.02 L1097.44 1214.02 L1098.03 1214.02 L1098.62 1214.02 L1099.2 1214.02 L1099.79 1214.02 L1100.38 1214.02 L1100.96 1214.02 L1101.55 1214.02 L1102.14 1214.02 L1102.72 1214.02 L1103.31 1214.02 L1103.89 1214.02 L1104.48 1214.02 L1105.07 1214.02 L1105.65 1214.02 L1106.24 1214.02 L1106.83 1214.02 L1107.41 1214.02 L1108 1214.02 L1108.59 1214.02 L1109.17 1214.02 L1109.76 1214.02 L1110.34 1214.02 L1110.93 1214.02 L1111.52 1214.02 L1112.1 1214.02 L1112.69 1214.02 L1113.28 1214.02 L1113.86 1214.02 L1114.45 1214.02 L1115.04 1214.02 L1115.62 1214.02 L1116.21 1214.02 L1116.8 1214.02 L1117.38 1214.02 L1117.97 1214.02 L1118.55 1214.02 L1119.14 1214.02 L1119.73 1214.02 L1120.31 1214.02 L1120.9 1214.02 L1121.49 1214.02 L1122.07 1214.02 L1122.66 1214.02 L1123.25 1214.02 L1123.83 1214.02 L1124.42 1214.02 L1125.01 1214.02 L1125.59 1214.02 L1126.18 1214.02 L1126.76 1214.02 L1127.35 1214.02 L1127.94 1214.02 L1128.52 1214.02 L1129.11 1214.02 L1129.7 1214.02 L1130.28 1214.02 L1130.87 1214.02 L1131.46 1214.02 L1132.04 1214.02 L1132.63 1214.02 L1133.21 1214.02 L1133.8 1214.02 L1134.39 1214.02 L1134.97 1214.02 L1135.56 1214.02 L1136.15 1214.02 L1136.73 1214.02 L1137.32 1214.02 L1137.91 1214.02 L1138.49 1214.02 L1139.08 1214.02 L1139.67 1214.02 L1140.25 1214.02 L1140.84 1214.02 L1141.42 1214.02 L1142.01 1214.02 L1142.6 1214.02 L1143.18 1214.02 L1143.77 1214.02 L1144.36 1214.02 L1144.94 1214.02 L1145.53 1214.02 L1146.12 1214.02 L1146.7 1214.02 L1147.29 1214.02 L1147.88 1214.02 L1148.46 1214.02 L1149.05 1214.02 L1149.63 1214.02 L1150.22 1214.02 L1150.81 1214.02 L1151.39 1214.02 L1151.98 1214.02 L1152.57 1214.02 L1153.15 1214.02 L1153.74 1214.02 L1154.33 1214.02 L1154.91 1214.02 L1155.5 1214.02 L1156.09 1214.02 L1156.67 1214.02 L1157.26 1214.02 L1157.84 1214.02 L1158.43 1214.02 L1159.02 1214.02 L1159.6 1214.02 L1160.19 1214.02 L1160.78 1214.02 L1161.36 1214.02 L1161.95 1214.02 L1162.54 1214.02 L1163.12 1214.02 L1163.71 1214.02 L1164.29 1214.02 L1164.88 1214.02 L1165.47 1214.02 L1166.05 1214.02 L1166.64 1214.02 L1167.23 1214.02 L1167.81 1214.02 L1168.4 1214.02 L1168.99 1214.02 L1169.57 1214.02 L1170.16 1214.02 L1170.75 1214.02 L1171.33 1214.02 L1171.92 1214.02 L1172.5 1214.02 L1173.09 1214.02 L1173.68 1214.02 L1174.26 1214.02 L1174.85 1214.02 L1175.44 1214.02 L1176.02 1214.02 L1176.61 1214.02 L1177.2 1214.02 L1177.78 1214.02 L1178.37 1214.02 L1178.96 1214.02 L1179.54 1214.02 L1180.13 1214.02 L1180.71 1214.02 L1181.3 1214.02 L1181.89 1214.02 L1182.47 1214.02 L1183.06 1214.02 L1183.65 1214.02 L1184.23 1214.02 L1184.82 1214.02 L1185.41 1214.02 L1185.99 1214.02 L1186.58 1214.02 L1187.16 1214.02 L1187.75 1214.02 L1188.34 1214.02 L1188.92 1214.02 L1189.51 1214.02 L1190.1 1214.02 L1190.68 1214.02 L1191.27 1214.02 L1191.86 1214.02 L1192.44 1214.02 L1193.03 1214.02 L1193.62 1214.02 L1194.2 1214.02 L1194.79 1214.02 L1195.37 1214.02 L1195.96 1214.02 L1196.55 1214.02 L1197.13 1214.02 L1197.72 1214.02 L1198.31 1214.02 L1198.89 1214.02 L1199.48 1214.02 L1200.07 1214.02 L1200.65 1214.02 L1201.24 1214.02 L1201.83 1214.02 L1202.41 1214.02 L1203 1214.02 L1203.58 1214.02 L1204.17 1214.02 L1204.76 1214.02 L1205.34 1214.02 L1205.93 1214.02 L1206.52 1214.02 L1207.1 1214.02 L1207.69 1214.02 L1208.28 1214.02 L1208.86 1214.02 L1209.45 1214.02 L1210.03 1214.02 L1210.62 1214.02 L1211.21 1214.02 L1211.79 1214.02 L1212.38 1214.02 L1212.97 1214.02 L1213.55 1214.02 L1214.14 1214.02 L1214.73 1214.02 L1215.31 1214.02 L1215.9 1214.02 L1216.49 1214.02 L1217.07 1214.02 L1217.66 1214.02 L1218.24 1214.02 L1218.83 1214.02 L1219.42 1214.02 L1220 1214.02 L1220.59 1214.02 L1221.18 1214.02 L1221.76 1214.02 L1222.35 1214.02 L1222.94 1214.02 L1223.52 1214.02 L1224.11 1214.02 L1224.7 1214.02 L1225.28 1214.02 L1225.87 1214.02 L1226.45 1214.02 L1227.04 1214.02 L1227.63 1214.02 L1228.21 1214.02 L1228.8 1214.02 L1229.39 1214.02 L1229.97 1214.02 L1230.56 1214.02 L1231.15 1214.02 L1231.73 1214.02 L1232.32 1214.02 L1232.91 1214.02 L1233.49 1214.02 L1234.08 1214.02 L1234.66 1214.02 L1235.25 1214.02 L1235.84 1214.02 L1236.42 1214.02 L1237.01 1214.02 L1237.6 1214.02 L1238.18 1214.02 L1238.77 1214.02 L1239.36 1214.02 L1239.94 1214.02 L1240.53 1214.02 L1241.11 1214.02 L1241.7 1214.02 L1242.29 1214.02 L1242.87 1214.02 L1243.46 1214.02 L1244.05 1214.02 L1244.63 1214.02 L1245.22 1214.02 L1245.81 1214.02 L1246.39 1214.02 L1246.98 1214.02 L1247.57 1214.02 L1248.15 1214.02 L1248.74 1214.02 L1249.32 1214.02 L1249.91 1214.02 L1250.5 1214.02 L1251.08 1214.02 L1251.67 1214.02 L1252.26 1214.02 L1252.84 1214.02 L1253.43 1214.02 L1254.02 1214.02 L1254.6 1214.02 L1255.19 1214.02 L1255.78 1214.02 L1256.36 1214.02 L1256.95 1214.02 L1257.53 1214.02 L1258.12 1214.02 L1258.71 1214.02 L1259.29 1214.02 L1259.88 1214.02 L1260.47 1214.02 L1261.05 1214.02 L1261.64 1214.02 L1262.23 1214.02 L1262.81 1214.02 L1263.4 1214.02 L1263.98 1214.02 L1264.57 1214.02 L1265.16 1214.02 L1265.74 1214.02 L1266.33 1214.02 L1266.92 1214.02 L1267.5 1214.02 L1268.09 1214.02 L1268.68 1214.02 L1269.26 1214.02 L1269.85 1214.02 L1270.44 1214.02 L1271.02 1214.02 L1271.61 1214.02 L1272.19 1214.02 L1272.78 1214.02 L1273.37 1214.02 L1273.95 1214.02 L1274.54 1214.02 L1275.13 1214.02 L1275.71 1214.02 L1276.3 1214.02 L1276.89 1214.02 L1277.47 1214.02 L1278.06 1214.02 L1278.65 1214.02 L1279.23 1214.02 L1279.82 1214.02 L1280.4 1214.02 L1280.99 1214.02 L1281.58 1214.02 L1282.16 1214.02 L1282.75 1214.02 L1283.34 1214.02 L1283.92 1214.02 L1284.51 1214.02 L1285.1 1214.02 L1285.68 1214.02 L1286.27 1214.02 L1286.86 1214.02 L1287.44 1214.02 L1288.03 1214.02 L1288.61 1214.02 L1289.2 1214.02 L1289.79 1214.02 L1290.37 1214.02 L1290.96 1214.02 L1291.55 1214.02 L1292.13 1214.02 L1292.72 1214.02 L1293.31 1214.02 L1293.89 1214.02 L1294.48 1214.02 L1295.06 1214.02 L1295.65 1214.02 L1296.24 1214.02 L1296.82 1214.02 L1297.41 1214.02 L1298 1214.02 L1298.58 1214.02 L1299.17 1214.02 L1299.76 1214.02 L1300.34 1214.02 L1300.93 1214.02 L1301.52 1214.02 L1302.1 1214.02 L1302.69 1214.02 L1303.27 1214.02 L1303.86 1214.02 L1304.45 1214.02 L1305.03 1214.02 L1305.62 1214.02 L1306.21 1214.02 L1306.79 1214.02 L1307.38 1214.02 L1307.97 1214.02 L1308.55 1214.02 L1309.14 1214.02 L1309.73 1214.02 L1310.31 1214.02 L1310.9 1214.02 L1311.48 1214.02 L1312.07 1214.02 L1312.66 1214.02 L1313.24 1214.02 L1313.83 1214.02 L1314.42 1214.02 L1315 1214.02 L1315.59 1214.02 L1316.18 1214.02 L1316.76 1214.02 L1317.35 1214.02 L1317.93 1214.02 L1318.52 1214.02 L1319.11 1214.02 L1319.69 1214.02 L1320.28 1214.02 L1320.87 1214.02 L1321.45 1214.02 L1322.04 1214.02 L1322.63 1214.02 L1323.21 1214.02 L1323.8 1214.02 L1324.39 1214.02 L1324.97 1214.02 L1325.56 1214.02 L1326.14 1214.02 L1326.73 1214.02 L1327.32 1214.02 L1327.9 1214.02 L1328.49 1214.02 L1329.08 1214.02 L1329.66 1214.02 L1330.25 1214.02 L1330.84 1214.02 L1331.42 1214.02 L1332.01 1214.02 L1332.6 1214.02 L1333.18 1214.02 L1333.77 1214.02 L1334.35 1214.02 L1334.94 1214.02 L1335.53 1214.02 L1336.11 1214.02 L1336.7 1214.02 L1337.29 1214.02 L1337.87 1214.02 L1338.46 1214.02 L1339.05 1214.02 L1339.63 1214.02 L1340.22 1214.02 L1340.8 1214.02 L1341.39 1214.02 L1341.98 1214.02 L1342.56 1214.02 L1343.15 1214.02 L1343.74 1214.02 L1344.32 1214.02 L1344.91 1214.02 L1345.5 1214.02 L1346.08 1214.02 L1346.67 1214.02 L1347.26 1214.02 L1347.84 1214.02 L1348.43 1214.02 L1349.01 1214.02 L1349.6 1214.02 L1350.19 1214.02 L1350.77 1214.02 L1351.36 1214.02 L1351.95 1214.02 L1352.53 1214.02 L1353.12 1214.02 L1353.71 1214.02 L1354.29 1214.02 L1354.88 1214.02 L1355.47 1214.02 L1356.05 1214.02 L1356.64 1214.02 L1357.22 1214.02 L1357.81 1214.02 L1358.4 1214.02 L1358.98 1214.02 L1359.57 1214.02 L1360.16 1214.02 L1360.74 1214.02 L1361.33 1214.02 L1361.92 1214.02 L1362.5 1214.02 L1363.09 1214.02 L1363.68 1214.02 L1364.26 1214.02 L1364.85 1214.02 L1365.43 1214.02 L1366.02 1214.02 L1366.61 1214.02 L1367.19 1214.02 L1367.78 1214.02 L1368.37 1214.02 L1368.95 1214.02 L1369.54 1214.02 L1370.13 1214.02 L1370.71 1214.02 L1371.3 1214.02 L1371.88 1214.02 L1372.47 1214.02 L1373.06 1214.02 L1373.64 1214.02 L1374.23 1214.02 L1374.82 1214.02 L1375.4 1214.02 L1375.99 1214.02 L1376.58 1214.02 L1377.16 1214.02 L1377.75 1214.02 L1378.34 1214.02 L1378.92 1214.02 L1379.51 1214.02 L1380.09 1214.02 L1380.68 1214.02 L1381.27 1214.02 L1381.85 1214.02 L1382.44 1214.02 L1383.03 1214.02 L1383.61 1214.02 L1384.2 1214.02 L1384.79 1214.02 L1385.37 1214.02 L1385.96 1214.02 L1386.55 1214.02 L1387.13 1214.02 L1387.72 1214.02 L1388.3 1214.02 L1388.89 1214.02 L1389.48 1214.02 L1390.06 1214.02 L1390.65 1214.02 L1391.24 1214.02 L1391.82 1214.02 L1392.41 1214.02 L1393 1214.02 L1393.58 1214.02 L1394.17 1214.02 L1394.75 1214.02 L1395.34 1214.02 L1395.93 1214.02 L1396.51 1214.02 L1397.1 1214.02 L1397.69 1214.02 L1398.27 1214.02 L1398.86 1214.02 L1399.45 1214.02 L1400.03 1214.02 L1400.62 1214.02 L1401.21 1214.02 L1401.79 1214.02 L1402.38 1214.02 L1402.96 1214.02 L1403.55 1214.02 L1404.14 1214.02 L1404.72 1214.02 L1405.31 1214.02 L1405.9 1214.02 L1406.48 1214.02 L1407.07 1214.02 L1407.66 1214.02 L1408.24 1214.02 L1408.83 1214.02 L1409.42 1214.02 L1410 1214.02 L1410.59 1214.02 L1411.17 1214.02 L1411.76 1214.02 L1412.35 1214.02 L1412.93 1214.02 L1413.52 1214.02 L1414.11 1214.02 L1414.69 1214.02 L1415.28 1214.02 L1415.87 1214.02 L1416.45 1214.02 L1417.04 1214.02 L1417.63 1214.02 L1418.21 1214.02 L1418.8 1214.02 L1419.38 1214.02 L1419.97 1214.02 L1420.56 1214.02 L1421.14 1214.02 L1421.73 1214.02 L1422.32 1214.02 L1422.9 1214.02 L1423.49 1214.02 L1424.08 1214.02 L1424.66 1214.02 L1425.25 1214.02 L1425.83 1214.02 L1426.42 1214.02 L1427.01 1214.02 L1427.59 1214.02 L1428.18 1214.02 L1428.77 1214.02 L1429.35 1214.02 L1429.94 1214.02 L1430.53 1214.02 L1431.11 1214.02 L1431.7 1214.02 L1432.29 1214.02 L1432.87 1214.02 L1433.46 1214.02 L1434.04 1214.02 L1434.63 1214.02 L1435.22 1214.02 L1435.8 1214.02 L1436.39 1214.02 L1436.98 1214.02 L1437.56 1214.02 L1438.15 1214.02 L1438.74 1214.02 L1439.32 1214.02 L1439.91 1214.02 L1440.5 1214.02 L1441.08 1214.02 L1441.67 1214.02 L1442.25 1214.02 L1442.84 1214.02 L1443.43 1214.02 L1444.01 1214.02 L1444.6 1214.02 L1445.19 1214.02 L1445.77 1214.02 L1446.36 1214.02 L1446.95 1214.02 L1447.53 1214.02 L1448.12 1214.02 L1448.7 1214.02 L1449.29 1214.02 L1449.88 1214.02 L1450.46 1214.02 L1451.05 1214.02 L1451.64 1214.02 L1452.22 1214.02 L1452.81 1214.02 L1453.4 1214.02 L1453.98 1214.02 L1454.57 1214.02 L1455.16 1214.02 L1455.74 1214.02 L1456.33 1214.02 L1456.91 1214.02 L1457.5 1214.02 L1458.09 1214.02 L1458.67 1214.02 L1459.26 1214.02 L1459.85 1214.02 L1460.43 1214.02 L1461.02 1214.02 L1461.61 1214.02 L1462.19 1214.02 L1462.78 1214.02 L1463.37 1214.02 L1463.95 1214.02 L1464.54 1214.02 L1465.12 1214.02 L1465.71 1214.02 L1466.3 1214.02 L1466.88 1214.02 L1467.47 1214.02 L1468.06 1214.02 L1468.64 1214.02 L1469.23 1214.02 L1469.82 1214.02 L1470.4 1214.02 L1470.99 1214.02 L1471.57 1214.02 L1472.16 1214.02 L1472.75 1214.02 L1473.33 1214.02 L1473.92 1214.02 L1474.51 1214.02 L1475.09 1214.02 L1475.68 1214.02 L1476.27 1214.02 L1476.85 1214.02 L1477.44 1214.02 L1478.03 1214.02 L1478.61 1214.02 L1479.2 1214.02 L1479.78 1214.02 L1480.37 1214.02 L1480.96 1214.02 L1481.54 1214.02 L1482.13 1214.02 L1482.72 1214.02 L1483.3 1214.02 L1483.89 1214.02 L1484.48 1214.02 L1485.06 1214.02 L1485.65 1214.02 L1486.24 1214.02 L1486.82 1214.02 L1487.41 1214.02 L1487.99 1214.02 L1488.58 1214.02 L1489.17 1214.02 L1489.75 1214.02 L1490.34 1214.02 L1490.93 1214.02 L1491.51 1214.02 L1492.1 1214.02 L1492.69 1214.02 L1493.27 1214.02 L1493.86 1214.02 L1494.45 1214.02 L1495.03 1214.02 L1495.62 1214.02 L1496.2 1214.02 L1496.79 1214.02 L1497.38 1214.02 L1497.96 1214.02 L1498.55 1214.02 L1499.14 1214.02 L1499.72 1214.02 L1500.31 1214.02 L1500.9 1214.02 L1501.48 1214.02 L1502.07 1214.02 L1502.65 1214.02 L1503.24 1214.02 L1503.83 1214.02 L1504.41 1214.02 L1505 1214.02 L1505.59 1214.02 L1506.17 1214.02 L1506.76 1214.02 L1507.35 1214.02 L1507.93 1214.02 L1508.52 1214.02 L1509.11 1214.02 L1509.69 1214.02 L1510.28 1214.02 L1510.86 1214.02 L1511.45 1214.02 L1512.04 1214.02 L1512.62 1214.02 L1513.21 1214.02 L1513.8 1214.02 L1514.38 1214.02 L1514.97 1214.02 L1515.56 1214.02 L1516.14 1214.02 L1516.73 1214.02 L1517.32 1214.02 L1517.9 1214.02 L1518.49 1214.02 L1519.07 1214.02 L1519.66 1214.02 L1520.25 1214.02 L1520.83 1214.02 L1521.42 1214.02 L1522.01 1214.02 L1522.59 1214.02 L1523.18 1214.02 L1523.77 1214.02 L1524.35 1214.02 L1524.94 1214.02 L1525.52 1214.02 L1526.11 1214.02 L1526.7 1214.02 L1527.28 1214.02 L1527.87 1214.02 L1528.46 1214.02 L1529.04 1214.02 L1529.63 1214.02 L1530.22 1214.02 L1530.8 1214.02 L1531.39 1214.02 L1531.98 1214.02 L1532.56 1214.02 L1533.15 1214.02 L1533.73 1214.02 L1534.32 1214.02 L1534.91 1214.02 L1535.49 1214.02 L1536.08 1214.02 L1536.67 1214.02 L1537.25 1214.02 L1537.84 1214.02 L1538.43 1214.02 L1539.01 1214.02 L1539.6 1214.02 L1540.19 1214.02 L1540.77 1214.02 L1541.36 1214.02 L1541.94 1214.02 L1542.53 1214.02 L1543.12 1214.02 L1543.7 1214.02 L1544.29 1214.02 L1544.88 1214.02 L1545.46 1214.02 L1546.05 1214.02 L1546.64 1214.02 L1547.22 1214.02 L1547.81 1214.02 L1548.4 1214.02 L1548.98 1214.02 L1549.57 1214.02 L1550.15 1214.02 L1550.74 1214.02 L1551.33 1214.02 L1551.91 1214.02 L1552.5 1214.02 L1553.09 1214.02 L1553.67 1214.02 L1554.26 1214.02 L1554.85 1214.02 L1555.43 1214.02 L1556.02 1214.02 L1556.6 1214.02 L1557.19 1214.02 L1557.78 1214.02 L1558.36 1214.02 L1558.95 1214.02 L1559.54 1214.02 L1560.12 1214.02 L1560.71 1214.02 L1561.3 1214.02 L1561.88 1214.02 L1562.47 1214.02 L1563.06 1214.02 L1563.64 1214.02 L1564.23 1214.02 L1564.81 1214.02 L1565.4 1214.02 L1565.99 1214.02 L1566.57 1214.02 L1567.16 1214.02 L1567.75 1214.02 L1568.33 1214.02 L1568.92 1214.02 L1569.51 1214.02 L1570.09 1214.02 L1570.68 1214.02 L1571.27 1214.02 L1571.85 1214.02 L1572.44 1214.02 L1573.02 1214.02 L1573.61 1214.02 L1574.2 1214.02 L1574.78 1214.02 L1575.37 1214.02 L1575.96 1214.02 L1576.54 1214.02 L1577.13 1214.02 L1577.72 1214.02 L1578.3 1214.02 L1578.89 1214.02 L1579.47 1214.02 L1580.06 1214.02 L1580.65 1214.02 L1581.23 1214.02 L1581.82 1214.02 L1582.41 1214.02 L1582.99 1214.02 L1583.58 1214.02 L1584.17 1214.02 L1584.75 1214.02 L1585.34 1214.02 L1585.93 1214.02 L1586.51 1214.02 L1587.1 1214.02 L1587.68 1214.02 L1588.27 1214.02 L1588.86 1214.02 L1589.44 1214.02 L1590.03 1214.02 L1590.62 1214.02 L1591.2 1214.02 L1591.79 1214.02 L1592.38 1214.02 L1592.96 1214.02 L1593.55 1214.02 L1594.14 1214.02 L1594.72 1214.02 L1595.31 1214.02 L1595.89 1214.02 L1596.48 1214.02 L1597.07 1214.02 L1597.65 1214.02 L1598.24 1214.02 L1598.83 1214.02 L1599.41 1214.02 L1600 1214.02 L1600.59 1214.02 L1601.17 1214.02 L1601.76 1214.02 L1602.34 1214.02 L1602.93 1214.02 L1603.52 1214.02 L1604.1 1214.02 L1604.69 1214.02 L1605.28 1214.02 L1605.86 1214.02 L1606.45 1214.02 L1607.04 1214.02 L1607.62 1214.02 L1608.21 1214.02 L1608.8 1214.02 L1609.38 1214.02 L1609.97 1214.02 L1610.55 1214.02 L1611.14 1214.02 L1611.73 1214.02 L1612.31 1214.02 L1612.9 1214.02 L1613.49 1214.02 L1614.07 1214.02 L1614.66 1214.02 L1615.25 1214.02 L1615.83 1214.02 L1616.42 1214.02 L1617.01 1214.02 L1617.59 1214.02 L1618.18 1214.02 L1618.76 1214.02 L1619.35 1214.02 L1619.94 1214.02 L1620.52 1214.02 L1621.11 1214.02 L1621.7 1214.02 L1622.28 1214.02 L1622.87 1214.02 L1623.46 1214.02 L1624.04 1214.02 L1624.63 1214.02 L1625.22 1214.02 L1625.8 1214.02 L1626.39 1214.02 L1626.97 1214.02 L1627.56 1214.02 L1628.15 1214.02 L1628.73 1214.02 L1629.32 1214.02 L1629.91 1214.02 L1630.49 1214.02 L1631.08 1214.02 L1631.67 1214.02 L1632.25 1214.02 L1632.84 1214.02 L1633.42 1214.02 L1634.01 1214.02 L1634.6 1214.02 L1635.18 1214.02 L1635.77 1214.02 L1636.36 1214.02 L1636.94 1214.02 L1637.53 1214.02 L1638.12 1214.02 L1638.7 1214.02 L1639.29 1214.02 L1639.88 1214.02 L1640.46 1214.02 L1641.05 1214.02 L1641.63 1214.02 L1642.22 1214.02 L1642.81 1214.02 L1643.39 1214.02 L1643.98 1214.02 L1644.57 1214.02 L1645.15 1214.02 L1645.74 1214.02 L1646.33 1214.02 L1646.91 1214.02 L1647.5 1214.02 L1648.09 1214.02 L1648.67 1214.02 L1649.26 1214.02 L1649.84 1214.02 L1650.43 1214.02 L1651.02 1214.02 L1651.6 1214.02 L1652.19 1214.02 L1652.78 1214.02 L1653.36 1214.02 L1653.95 1214.02 L1654.54 1214.02 L1655.12 1214.02 L1655.71 1214.02 L1656.29 1214.02 L1656.88 1214.02 L1657.47 1214.02 L1658.05 1214.02 L1658.64 1214.02 L1659.23 1214.02 L1659.81 1214.02 L1660.4 1214.02 L1660.99 1214.02 L1661.57 1214.02 L1662.16 1214.02 L1662.75 1214.02 L1663.33 1214.02 L1663.92 1214.02 L1664.5 1214.02 L1665.09 1214.02 L1665.68 1214.02 L1666.26 1214.02 L1666.85 1214.02 L1667.44 1214.02 L1668.02 1214.02 L1668.61 1214.02 L1669.2 1214.02 L1669.78 1214.02 L1670.37 1214.02 L1670.96 1214.02 L1671.54 1214.02 L1672.13 1214.02 L1672.71 1214.02 L1673.3 1214.02 L1673.89 1214.02 L1674.47 1214.02 L1675.06 1214.02 L1675.65 1214.02 L1676.23 1214.02 L1676.82 1214.02 L1677.41 1214.02 L1677.99 1214.02 L1678.58 1214.02 L1679.17 1214.02 L1679.75 1214.02 L1680.34 1214.02 L1680.92 1214.02 L1681.51 1214.02 L1682.1 1214.02 L1682.68 1214.02 L1683.27 1214.02 L1683.86 1214.02 L1684.44 1214.02 L1685.03 1214.02 L1685.62 1214.02 L1686.2 1214.02 L1686.79 1214.02 L1687.37 1214.02 L1687.96 1214.02 L1688.55 1214.02 L1689.13 1214.02 L1689.72 1214.02 L1690.31 1214.02 L1690.89 1214.02 L1691.48 1214.02 L1692.07 1214.02 L1692.65 1214.02 L1693.24 1214.02 L1693.83 1214.02 L1694.41 1214.02 L1695 1214.02 L1695.58 1214.02 L1696.17 1214.02 L1696.76 1214.02 L1697.34 1214.02 L1697.93 1214.02 L1698.52 1214.02 L1699.1 1214.02 L1699.69 1214.02 L1700.28 1214.02 L1700.86 1214.02 L1701.45 1214.02 L1702.04 1214.02 L1702.62 1214.02 L1703.21 1214.02 L1703.79 1214.02 L1704.38 1214.02 L1704.97 1214.02 L1705.55 1214.02 L1706.14 1214.02 L1706.73 1214.02 L1707.31 1214.02 L1707.9 1214.02 L1708.49 1214.02 L1709.07 1214.02 L1709.66 1214.02 L1710.24 1214.02 L1710.83 1214.02 L1711.42 1214.02 L1712 1214.02 L1712.59 1214.02 L1713.18 1214.02 L1713.76 1214.02 L1714.35 1214.02 L1714.94 1214.02 L1715.52 1214.02 L1716.11 1214.02 L1716.7 1214.02 L1717.28 1214.02 L1717.87 1214.02 L1718.45 1214.02 L1719.04 1214.02 L1719.63 1214.02 L1720.21 1214.02 L1720.8 1214.02 L1721.39 1214.02 L1721.97 1214.02 L1722.56 1214.02 L1723.15 1214.02 L1723.73 1214.02 L1724.32 1214.02 L1724.91 1214.02 L1725.49 1214.02 L1726.08 1214.02 L1726.66 1214.02 L1727.25 1214.02 L1727.84 1214.02 L1728.42 1214.02 L1729.01 1214.02 L1729.6 1214.02 L1730.18 1214.02 L1730.77 1214.02 L1731.36 1214.02 L1731.94 1214.02 L1732.53 1214.02 L1733.11 1214.02 L1733.7 1214.02 L1734.29 1214.02 L1734.87 1214.02 L1735.46 1214.02 L1736.05 1214.02 L1736.63 1214.02 L1737.22 1214.02 L1737.81 1214.02 L1738.39 1214.02 L1738.98 1214.02 L1739.57 1214.02 L1740.15 1214.02 L1740.74 1214.02 L1741.32 1214.02 L1741.91 1214.02 L1742.5 1214.02 L1743.08 1214.02 L1743.67 1214.02 L1744.26 1214.02 L1744.84 1214.02 L1745.43 1214.02 L1746.02 1214.02 L1746.6 1214.02 L1747.19 1214.02 L1747.78 1214.02 L1748.36 1214.02 L1748.95 1214.02 L1749.53 1214.02 L1750.12 1214.02 L1750.71 1214.02 L1751.29 1214.02 L1751.88 1214.02 L1752.47 1214.02 L1753.05 1214.02 L1753.64 1214.02 L1754.23 1214.02 L1754.81 1214.02 L1755.4 1214.02 L1755.99 1214.02 L1756.57 1214.02 L1757.16 1214.02 L1757.74 1214.02 L1758.33 1214.02 L1758.92 1214.02 L1759.5 1214.02 L1760.09 1214.02 L1760.68 1214.02 L1761.26 1214.02 L1761.85 1214.02 L1762.44 1214.02 L1763.02 1214.02 L1763.61 1214.02 L1764.19 1214.02 L1764.78 1214.02 L1765.37 1214.02 L1765.95 1214.02 L1766.54 1214.02 L1767.13 1214.02 L1767.71 1214.02 L1768.3 1214.02 L1768.89 1214.02 L1769.47 1214.02 L1770.06 1214.02 L1770.65 1214.02 L1771.23 1214.02 L1771.82 1214.02 L1772.4 1214.02 L1772.99 1214.02 L1773.58 1214.02 L1774.16 1214.02 L1774.75 1214.02 L1775.34 1214.02 L1775.92 1214.02 L1776.51 1214.02 L1777.1 1214.02 L1777.68 1214.02 L1778.27 1214.02 L1778.86 1214.02 L1779.44 1214.02 L1780.03 1214.02 L1780.61 1214.02 L1781.2 1214.02 L1781.79 1214.02 L1782.37 1214.02 L1782.96 1214.02 L1783.55 1214.02 L1784.13 1214.02 L1784.72 1214.02 L1785.31 1214.02 L1785.89 1214.02 L1786.48 1214.02 L1787.06 1214.02 L1787.65 1214.02 L1788.24 1214.02 L1788.82 1214.02 L1789.41 1214.02 L1790 1214.02 L1790.58 1214.02 L1791.17 1214.02 L1791.76 1214.02 L1792.34 1214.02 L1792.93 1214.02 L1793.52 1214.02 L1794.1 1214.02 L1794.69 1214.02 L1795.27 1214.02 L1795.86 1214.02 L1796.45 1214.02 L1797.03 1214.02 L1797.62 1214.02 L1798.21 1214.02 L1798.79 1214.02 L1799.38 1214.02 L1799.97 1214.02 L1800.55 1214.02 L1801.14 1214.02 L1801.73 1214.02 L1802.31 1214.02 L1802.9 1214.02 L1803.48 1214.02 L1804.07 1214.02 L1804.66 1214.02 L1805.24 1214.02 L1805.83 1214.02 L1806.42 1214.02 L1807 1214.02 L1807.59 1214.02 L1808.18 1214.02 L1808.76 1214.02 L1809.35 1214.02 L1809.94 1214.02 L1810.52 1214.02 L1811.11 1214.02 L1811.69 1214.02 L1812.28 1214.02 L1812.87 1214.02 L1813.45 1214.02 L1814.04 1214.02 L1814.63 1214.02 L1815.21 1214.02 L1815.8 1214.02 L1816.39 1214.02 L1816.97 1214.02 L1817.56 1214.02 L1818.14 1214.02 L1818.73 1214.02 L1819.32 1214.02 L1819.9 1214.02 L1820.49 1214.02 L1821.08 1214.02 L1821.66 1214.02 L1822.25 1214.02 L1822.84 1214.02 L1823.42 1214.02 L1824.01 1214.02 L1824.6 1214.02 L1825.18 1214.02 L1825.77 1214.02 L1826.35 1214.02 L1826.94 1214.02 L1827.53 1214.02 L1828.11 1214.02 L1828.7 1214.02 L1829.29 1214.02 L1829.87 1214.02 L1830.46 1214.02 L1831.05 1214.02 L1831.63 1214.02 L1832.22 1214.02 L1832.81 1214.02 L1833.39 1214.02 L1833.98 1214.02 L1834.56 1214.02 L1835.15 1214.02 L1835.74 1214.02 L1836.32 1214.02 L1836.91 1214.02 L1837.5 1214.02 L1838.08 1214.02 L1838.67 1214.02 L1839.26 1214.02 L1839.84 1214.02 L1840.43 1214.02 L1841.01 1214.02 L1841.6 1214.02 L1842.19 1214.02 L1842.77 1214.02 L1843.36 1214.02 L1843.95 1214.02 L1844.53 1214.02 L1845.12 1214.02 L1845.71 1214.02 L1846.29 1214.02 L1846.88 1214.02 L1847.47 1214.02 L1848.05 1214.02 L1848.64 1214.02 L1849.22 1214.02 L1849.81 1214.02 L1850.4 1214.02 L1850.98 1214.02 L1851.57 1214.02 L1852.16 1214.02 L1852.74 1214.02 L1853.33 1214.02 L1853.92 1214.02 L1854.5 1214.02 L1855.09 1214.02 L1855.68 1214.02 L1856.26 1214.02 L1856.85 1214.02 L1857.43 1214.02 L1858.02 1214.02 L1858.61 1214.02 L1859.19 1214.02 L1859.78 1214.02 L1860.37 1214.02 L1860.95 1214.02 L1861.54 1214.02 L1862.13 1214.02 L1862.71 1214.02 L1863.3 1214.02 L1863.88 1214.02 L1864.47 1214.02 L1865.06 1214.02 L1865.64 1214.02 L1866.23 1214.02 L1866.82 1214.02 L1867.4 1214.02 L1867.99 1214.02 L1868.58 1214.02 L1869.16 1214.02 L1869.75 1214.02 L1870.34 1214.02 L1870.92 1214.02 L1871.51 1214.02 L1872.09 1214.02 L1872.68 1214.02 L1873.27 1214.02 L1873.85 1214.02 L1874.44 1214.02 L1875.03 1214.02 L1875.61 1214.02 L1876.2 1214.02 L1876.79 1214.02 L1877.37 1214.02 L1877.96 1214.02 L1878.55 1214.02 L1879.13 1214.02 L1879.72 1214.02 L1880.3 1214.02 L1880.89 1214.02 L1881.48 1214.02 L1882.06 1214.02 L1882.65 1214.02 L1883.24 1214.02 L1883.82 1214.02 L1884.41 1214.02 L1885 1214.02 L1885.58 1214.02 L1886.17 1214.02 L1886.76 1214.02 L1887.34 1214.02 L1887.93 1214.02 L1888.51 1214.02 L1889.1 1214.02 L1889.69 1214.02 L1890.27 1214.02 L1890.86 1214.02 L1891.45 1214.02 L1892.03 1214.02 L1892.62 1214.02 L1893.21 1214.02 L1893.79 1214.02 L1894.38 1214.02 L1894.96 1214.02 L1895.55 1214.02 L1896.14 1214.02 L1896.72 1214.02 L1897.31 1214.02 L1897.9 1214.02 L1898.48 1214.02 L1899.07 1214.02 L1899.66 1214.02 L1900.24 1214.02 L1900.83 1214.02 L1901.42 1214.02 L1902 1214.02 L1902.59 1214.02 L1903.17 1214.02 L1903.76 1214.02 L1904.35 1214.02 L1904.93 1214.02 L1905.52 1214.02 L1906.11 1214.02 L1906.69 1214.02 L1907.28 1214.02 L1907.87 1214.02 L1908.45 1214.02 L1909.04 1214.02 L1909.63 1214.02 L1910.21 1214.02 L1910.8 1214.02 L1911.38 1214.02 L1911.97 1214.02 L1912.56 1214.02 L1913.14 1214.02 L1913.73 1214.02 L1914.32 1214.02 L1914.9 1214.02 L1915.49 1214.02 L1916.08 1214.02 L1916.66 1214.02 L1917.25 1214.02 L1917.83 1214.02 L1918.42 1214.02 L1919.01 1214.02 L1919.59 1214.02 L1920.18 1214.02 L1920.77 1214.02 L1921.35 1214.02 L1921.94 1214.02 L1922.53 1214.02 L1923.11 1214.02 L1923.7 1214.02 L1924.29 1214.02 L1924.87 1214.02 L1925.46 1214.02 L1926.04 1214.02 L1926.63 1214.02 L1927.22 1214.02 L1927.8 1214.02 L1928.39 1214.02 L1928.98 1214.02 L1929.56 1214.02 L1930.15 1214.02 L1930.74 1214.02 L1931.32 1214.02 L1931.91 1214.02 L1932.5 1214.02 L1933.08 1214.02 L1933.67 1214.02 L1934.25 1214.02 L1934.84 1214.02 L1935.43 1214.02 L1936.01 1214.02 L1936.6 1214.02 L1937.19 1214.02 L1937.77 1214.02 L1938.36 1214.02 L1938.95 1214.02 L1939.53 1214.02 L1940.12 1214.02 L1940.71 1214.02 L1941.29 1214.02 L1941.88 1214.02 L1942.46 1214.02 L1943.05 1214.02 L1943.64 1214.02 L1944.22 1214.02 L1944.81 1214.02 L1945.4 1214.02 L1945.98 1214.02 L1946.57 1214.02 L1947.16 1214.02 L1947.74 1214.02 L1948.33 1214.02 L1948.91 1214.02 L1949.5 1214.02 L1950.09 1214.02 L1950.67 1214.02 L1951.26 1214.02 L1951.85 1214.02 L1952.43 1214.02 L1953.02 1214.02 L1953.61 1214.02 L1954.19 1214.02 L1954.78 1214.02 L1955.37 1214.02 L1955.95 1214.02 L1956.54 1214.02 L1957.12 1214.02 L1957.71 1214.02 L1958.3 1214.02 L1958.88 1214.02 L1959.47 1214.02 L1960.06 1214.02 L1960.64 1214.02 L1961.23 1214.02 L1961.82 1214.02 L1962.4 1214.02 L1962.99 1214.02 L1963.58 1214.02 L1964.16 1214.02 L1964.75 1214.02 L1965.33 1214.02 L1965.92 1214.02 L1966.51 1214.02 L1967.09 1214.02 L1967.68 1214.02 L1968.27 1214.02 L1968.85 1214.02 L1969.44 1214.02 L1970.03 1214.02 L1970.61 1214.02 L1971.2 1214.02 L1971.78 1214.02 L1972.37 1214.02 L1972.96 1214.02 L1973.54 1214.02 L1974.13 1214.02 L1974.72 1214.02 L1975.3 1214.02 L1975.89 1214.02 L1976.48 1214.02 L1977.06 1214.02 L1977.65 1214.02 L1978.24 1214.02 L1978.82 1214.02 L1979.41 1214.02 L1979.99 1214.02 L1980.58 1214.02 L1981.17 1214.02 L1981.75 1214.02 L1982.34 1214.02 L1982.93 1214.02 L1983.51 1214.02 L1984.1 1214.02 L1984.69 1214.02 L1985.27 1214.02 L1985.86 1214.02 L1986.45 1214.02 L1987.03 1214.02 L1987.62 1214.02 L1988.2 1214.02 L1988.79 1214.02 L1989.38 1214.02 L1989.96 1214.02 L1990.55 1214.02 L1991.14 1214.02 L1991.72 1214.02 L1992.31 1214.02 L1992.9 1214.02 L1993.48 1214.02 L1994.07 1214.02 L1994.65 1214.02 L1995.24 1214.02 L1995.83 1214.02 L1996.41 1214.02 L1997 1214.02 L1997.59 1214.02 L1998.17 1214.02 L1998.76 1214.02 L1999.35 1214.02 L1999.93 1214.02 L2000.52 1214.02 L2001.11 1214.02 L2001.69 1214.02 L2002.28 1214.02 L2002.86 1214.02 L2003.45 1214.02 L2004.04 1214.02 L2004.62 1214.02 L2005.21 1214.02 L2005.8 1214.02 L2006.38 1214.02 L2006.97 1214.02 L2007.56 1214.02 L2008.14 1214.02 L2008.73 1214.02 L2009.32 1214.02 L2009.9 1214.02 L2010.49 1214.02 L2011.07 1214.02 L2011.66 1214.02 L2012.25 1214.02 L2012.83 1214.02 L2013.42 1214.02 L2014.01 1214.02 L2014.59 1214.02 L2015.18 1214.02 L2015.77 1214.02 L2016.35 1214.02 L2016.94 1214.02 L2017.53 1214.02 L2018.11 1214.02 L2018.7 1214.02 L2019.28 1214.02 L2019.87 1214.02 L2020.46 1214.02 L2021.04 1214.02 L2021.63 1214.02 L2022.22 1214.02 L2022.8 1214.02 L2023.39 1214.02 L2023.98 1214.02 L2024.56 1214.02 L2025.15 1214.02 L2025.73 1214.02 L2026.32 1214.02 L2026.91 1214.02 L2027.49 1214.02 L2028.08 1214.02 L2028.67 1214.02 L2029.25 1214.02 L2029.84 1214.02 L2030.43 1214.02 L2031.01 1214.02 L2031.6 1214.02 L2032.19 1214.02 L2032.77 1214.02 L2033.36 1214.02 L2033.94 1214.02 L2034.53 1214.02 L2035.12 1214.02 L2035.7 1214.02 L2036.29 1214.02 L2036.88 1214.02 L2037.46 1214.02 L2038.05 1214.02 L2038.64 1214.02 L2039.22 1214.02 L2039.81 1214.02 L2040.4 1214.02 L2040.98 1214.02 L2041.57 1214.02 L2042.15 1214.02 L2042.74 1214.02 L2043.33 1214.02 L2043.91 1214.02 L2044.5 1214.02 L2045.09 1214.02 L2045.67 1214.02 L2046.26 1214.02 L2046.85 1214.02 L2047.43 1214.02 L2048.02 1214.02 L2048.6 1214.02 L2049.19 1214.02 L2049.78 1214.02 L2050.36 1214.02 L2050.95 1214.02 L2051.54 1214.02 L2052.12 1214.02 L2052.71 1214.02 L2053.3 1214.02 L2053.88 1214.02 L2054.47 1214.02 L2055.06 1214.02 L2055.64 1214.02 L2056.23 1214.02 L2056.81 1214.02 L2057.4 1214.02 L2057.99 1214.02 L2058.57 1214.02 L2059.16 1214.02 L2059.75 1214.02 L2060.33 1214.02 L2060.92 1214.02 L2061.51 1214.02 L2062.09 1214.02 L2062.68 1214.02 L2063.27 1214.02 L2063.85 1214.02 L2064.44 1214.02 L2065.02 1214.02 L2065.61 1214.02 L2066.2 1214.02 L2066.78 1214.02 L2067.37 1214.02 L2067.96 1214.02 L2068.54 1214.02 L2069.13 1214.02 L2069.72 1214.02 L2070.3 1214.02 L2070.89 1214.02 L2071.48 1214.02 L2072.06 1214.02 L2072.65 1214.02 L2073.23 1214.02 L2073.82 1214.02 L2074.41 1214.02 L2074.99 1214.02 L2075.58 1214.02 L2076.17 1214.02 L2076.75 1214.02 L2077.34 1214.02 L2077.93 1214.02 L2078.51 1214.02 L2079.1 1214.02 L2079.68 1214.02 L2080.27 1214.02 L2080.86 1214.02 L2081.44 1214.02 L2082.03 1214.02 L2082.62 1214.02 L2083.2 1214.02 L2083.79 1214.02 L2084.38 1214.02 L2084.96 1214.02 L2085.55 1214.02 L2086.14 1214.02 L2086.72 1214.02 L2087.31 1214.02 L2087.89 1214.02 L2088.48 1214.02 L2089.07 1214.02 L2089.65 1214.02 L2090.24 1214.02 L2090.83 1214.02 L2091.41 1214.02 L2092 1214.02 L2092.59 1214.02 L2093.17 1214.02 L2093.76 1214.02 L2094.35 1214.02 L2094.93 1214.02 L2095.52 1214.02 L2096.1 1214.02 L2096.69 1214.02 L2097.28 1214.02 L2097.86 1214.02 L2098.45 1214.02 L2099.04 1214.02 L2099.62 1214.02 L2100.21 1214.02 L2100.8 1214.02 L2101.38 1214.02 L2101.97 1214.02 L2102.55 1214.02 L2103.14 1214.02 L2103.73 1214.02 L2104.31 1214.02 L2104.9 1214.02 L2105.49 1214.02 L2106.07 1214.02 L2106.66 1214.02 L2107.25 1214.02 L2107.83 1214.02 L2108.42 1214.02 L2109.01 1214.02 L2109.59 1214.02 L2110.18 1214.02 L2110.76 1214.02 L2111.35 1214.02 L2111.94 1214.02 L2112.52 1214.02 L2113.11 1214.02 L2113.7 1214.02 L2114.28 1214.02 L2114.87 1214.02 L2115.46 1214.02 L2116.04 1214.02 L2116.63 1214.02 L2117.22 1214.02 L2117.8 1214.02 L2118.39 1214.02 L2118.97 1214.02 L2119.56 1214.02 L2120.15 1214.02 L2120.73 1214.02 L2121.32 1214.02 L2121.91 1214.02 L2122.49 1214.02 L2123.08 1214.02 L2123.67 1214.02 L2124.25 1214.02 L2124.84 1214.02 L2125.42 1214.02 L2126.01 1214.02 L2126.6 1214.02 L2127.18 1214.02 L2127.77 1214.02 L2128.36 1214.02 L2128.94 1214.02 L2129.53 1214.02 L2130.12 1214.02 L2130.7 1214.02 L2131.29 1214.02 L2131.88 1214.02 L2132.46 1214.02 L2133.05 1214.02 L2133.63 1214.02 L2134.22 1214.02 L2134.81 1214.02 L2135.39 1214.02 L2135.98 1214.02 L2136.57 1214.02 L2137.15 1214.02 L2137.74 1214.02 L2138.33 1214.02 L2138.91 1214.02 L2139.5 1214.02 L2140.09 1214.02 L2140.67 1214.02 L2141.26 1214.02 L2141.84 1214.02 L2142.43 1214.02 L2143.02 1214.02 L2143.6 1214.02 L2144.19 1214.02 L2144.78 1214.02 L2145.36 1214.02 L2145.95 1214.02 L2146.54 1214.02 L2147.12 1214.02 L2147.71 1214.02 L2148.3 1214.02 L2148.88 1214.02 L2149.47 1214.02 L2150.05 1214.02 L2150.64 1214.02 L2151.23 1214.02 L2151.81 1214.02 L2152.4 1214.02 L2152.99 1214.02 L2153.57 1214.02 L2154.16 1214.02 L2154.75 1214.02 L2155.33 1214.02 L2155.92 1214.02 L2156.5 1214.02 L2157.09 1214.02 L2157.68 1214.02 L2158.26 1214.02 L2158.26 1213.29 L2157.68 1213.29 L2157.09 1213.29 L2156.5 1213.29 L2155.92 1213.29 L2155.33 1213.29 L2154.75 1213.29 L2154.16 1213.29 L2153.57 1213.29 L2152.99 1213.29 L2152.4 1213.29 L2151.81 1213.29 L2151.23 1213.29 L2150.64 1213.29 L2150.05 1213.29 L2149.47 1213.29 L2148.88 1213.29 L2148.3 1213.29 L2147.71 1213.29 L2147.12 1213.29 L2146.54 1213.29 L2145.95 1213.29 L2145.36 1213.29 L2144.78 1213.29 L2144.19 1213.29 L2143.6 1213.29 L2143.02 1213.29 L2142.43 1213.29 L2141.84 1213.29 L2141.26 1213.29 L2140.67 1213.29 L2140.09 1213.29 L2139.5 1213.29 L2138.91 1213.29 L2138.33 1213.29 L2137.74 1213.29 L2137.15 1213.29 L2136.57 1213.29 L2135.98 1213.29 L2135.39 1213.29 L2134.81 1213.29 L2134.22 1213.29 L2133.63 1213.29 L2133.05 1213.29 L2132.46 1213.29 L2131.88 1213.29 L2131.29 1213.29 L2130.7 1213.29 L2130.12 1213.29 L2129.53 1213.29 L2128.94 1213.29 L2128.36 1213.29 L2127.77 1213.29 L2127.18 1213.29 L2126.6 1213.29 L2126.01 1213.29 L2125.42 1213.29 L2124.84 1213.29 L2124.25 1213.29 L2123.67 1213.29 L2123.08 1213.29 L2122.49 1213.29 L2121.91 1213.29 L2121.32 1213.29 L2120.73 1213.29 L2120.15 1213.29 L2119.56 1213.29 L2118.97 1213.29 L2118.39 1213.29 L2117.8 1213.29 L2117.22 1213.29 L2116.63 1213.29 L2116.04 1213.29 L2115.46 1213.29 L2114.87 1213.29 L2114.28 1213.29 L2113.7 1213.29 L2113.11 1213.29 L2112.52 1213.29 L2111.94 1213.29 L2111.35 1213.29 L2110.76 1213.29 L2110.18 1213.29 L2109.59 1213.29 L2109.01 1213.29 L2108.42 1213.29 L2107.83 1213.29 L2107.25 1213.29 L2106.66 1213.29 L2106.07 1213.29 L2105.49 1213.29 L2104.9 1213.29 L2104.31 1213.29 L2103.73 1213.29 L2103.14 1213.29 L2102.55 1213.29 L2101.97 1213.29 L2101.38 1213.29 L2100.8 1213.29 L2100.21 1213.29 L2099.62 1213.29 L2099.04 1213.29 L2098.45 1213.29 L2097.86 1213.29 L2097.28 1213.29 L2096.69 1213.29 L2096.1 1213.29 L2095.52 1213.29 L2094.93 1213.29 L2094.35 1213.29 L2093.76 1213.29 L2093.17 1213.29 L2092.59 1213.29 L2092 1213.29 L2091.41 1213.29 L2090.83 1213.29 L2090.24 1213.29 L2089.65 1213.29 L2089.07 1213.29 L2088.48 1213.29 L2087.89 1213.29 L2087.31 1213.29 L2086.72 1213.29 L2086.14 1213.29 L2085.55 1213.29 L2084.96 1213.29 L2084.38 1213.29 L2083.79 1213.29 L2083.2 1213.29 L2082.62 1213.29 L2082.03 1213.29 L2081.44 1213.29 L2080.86 1213.29 L2080.27 1213.29 L2079.68 1213.29 L2079.1 1213.29 L2078.51 1213.29 L2077.93 1213.29 L2077.34 1213.29 L2076.75 1213.29 L2076.17 1213.29 L2075.58 1213.29 L2074.99 1213.29 L2074.41 1213.29 L2073.82 1213.29 L2073.23 1213.29 L2072.65 1213.29 L2072.06 1213.29 L2071.48 1213.29 L2070.89 1213.29 L2070.3 1213.29 L2069.72 1213.29 L2069.13 1213.29 L2068.54 1213.29 L2067.96 1213.29 L2067.37 1213.29 L2066.78 1213.29 L2066.2 1213.29 L2065.61 1213.29 L2065.02 1213.29 L2064.44 1213.29 L2063.85 1213.29 L2063.27 1213.29 L2062.68 1213.29 L2062.09 1213.29 L2061.51 1213.29 L2060.92 1213.29 L2060.33 1213.29 L2059.75 1213.29 L2059.16 1213.29 L2058.57 1213.29 L2057.99 1213.29 L2057.4 1213.29 L2056.81 1213.29 L2056.23 1213.29 L2055.64 1213.29 L2055.06 1213.29 L2054.47 1213.29 L2053.88 1213.29 L2053.3 1213.29 L2052.71 1213.29 L2052.12 1213.29 L2051.54 1213.29 L2050.95 1213.29 L2050.36 1213.29 L2049.78 1213.29 L2049.19 1213.29 L2048.6 1213.29 L2048.02 1213.29 L2047.43 1213.29 L2046.85 1213.29 L2046.26 1213.29 L2045.67 1213.29 L2045.09 1213.29 L2044.5 1213.29 L2043.91 1213.29 L2043.33 1213.29 L2042.74 1213.29 L2042.15 1213.29 L2041.57 1213.29 L2040.98 1213.29 L2040.4 1213.29 L2039.81 1213.29 L2039.22 1213.29 L2038.64 1213.29 L2038.05 1213.29 L2037.46 1213.29 L2036.88 1213.29 L2036.29 1213.29 L2035.7 1213.29 L2035.12 1213.29 L2034.53 1213.29 L2033.94 1213.29 L2033.36 1213.29 L2032.77 1213.29 L2032.19 1213.29 L2031.6 1213.29 L2031.01 1213.29 L2030.43 1213.29 L2029.84 1213.29 L2029.25 1213.29 L2028.67 1213.29 L2028.08 1213.29 L2027.49 1213.29 L2026.91 1213.29 L2026.32 1213.29 L2025.73 1213.29 L2025.15 1213.29 L2024.56 1213.29 L2023.98 1213.29 L2023.39 1213.29 L2022.8 1213.29 L2022.22 1213.29 L2021.63 1213.29 L2021.04 1213.29 L2020.46 1213.29 L2019.87 1213.29 L2019.28 1213.29 L2018.7 1213.29 L2018.11 1213.29 L2017.53 1213.29 L2016.94 1213.29 L2016.35 1213.29 L2015.77 1213.29 L2015.18 1213.29 L2014.59 1213.29 L2014.01 1213.29 L2013.42 1213.29 L2012.83 1213.29 L2012.25 1213.29 L2011.66 1213.29 L2011.07 1213.29 L2010.49 1213.29 L2009.9 1213.29 L2009.32 1213.29 L2008.73 1213.29 L2008.14 1213.29 L2007.56 1213.29 L2006.97 1213.29 L2006.38 1213.29 L2005.8 1213.29 L2005.21 1213.29 L2004.62 1213.29 L2004.04 1213.29 L2003.45 1213.29 L2002.86 1213.29 L2002.28 1213.29 L2001.69 1213.29 L2001.11 1213.29 L2000.52 1213.29 L1999.93 1213.29 L1999.35 1213.29 L1998.76 1213.29 L1998.17 1213.29 L1997.59 1213.29 L1997 1213.29 L1996.41 1213.29 L1995.83 1213.29 L1995.24 1213.29 L1994.65 1213.29 L1994.07 1213.29 L1993.48 1213.29 L1992.9 1213.29 L1992.31 1213.29 L1991.72 1213.29 L1991.14 1213.29 L1990.55 1213.29 L1989.96 1213.29 L1989.38 1213.29 L1988.79 1213.29 L1988.2 1213.29 L1987.62 1213.29 L1987.03 1213.29 L1986.45 1213.29 L1985.86 1213.29 L1985.27 1213.29 L1984.69 1213.29 L1984.1 1213.29 L1983.51 1213.29 L1982.93 1213.29 L1982.34 1213.29 L1981.75 1213.29 L1981.17 1213.29 L1980.58 1213.29 L1979.99 1213.29 L1979.41 1213.29 L1978.82 1213.29 L1978.24 1213.29 L1977.65 1213.29 L1977.06 1213.29 L1976.48 1213.29 L1975.89 1213.29 L1975.3 1213.29 L1974.72 1213.29 L1974.13 1213.29 L1973.54 1213.29 L1972.96 1213.29 L1972.37 1213.29 L1971.78 1213.29 L1971.2 1213.29 L1970.61 1213.29 L1970.03 1213.29 L1969.44 1213.29 L1968.85 1213.29 L1968.27 1213.29 L1967.68 1213.29 L1967.09 1213.29 L1966.51 1213.29 L1965.92 1213.29 L1965.33 1213.29 L1964.75 1213.29 L1964.16 1213.29 L1963.58 1213.29 L1962.99 1213.29 L1962.4 1213.29 L1961.82 1213.29 L1961.23 1213.29 L1960.64 1213.29 L1960.06 1213.29 L1959.47 1213.29 L1958.88 1213.29 L1958.3 1213.29 L1957.71 1213.29 L1957.12 1213.29 L1956.54 1213.29 L1955.95 1213.29 L1955.37 1213.29 L1954.78 1213.29 L1954.19 1213.29 L1953.61 1213.29 L1953.02 1213.29 L1952.43 1213.29 L1951.85 1213.29 L1951.26 1213.29 L1950.67 1213.29 L1950.09 1213.29 L1949.5 1213.29 L1948.91 1213.29 L1948.33 1213.29 L1947.74 1213.29 L1947.16 1213.29 L1946.57 1213.29 L1945.98 1213.29 L1945.4 1213.29 L1944.81 1213.29 L1944.22 1213.29 L1943.64 1213.29 L1943.05 1213.29 L1942.46 1213.29 L1941.88 1213.29 L1941.29 1213.29 L1940.71 1213.29 L1940.12 1213.29 L1939.53 1213.29 L1938.95 1213.29 L1938.36 1213.29 L1937.77 1213.29 L1937.19 1213.29 L1936.6 1213.29 L1936.01 1213.29 L1935.43 1213.29 L1934.84 1213.29 L1934.25 1213.29 L1933.67 1213.29 L1933.08 1213.29 L1932.5 1213.29 L1931.91 1213.29 L1931.32 1213.29 L1930.74 1213.29 L1930.15 1213.29 L1929.56 1213.29 L1928.98 1213.29 L1928.39 1213.29 L1927.8 1213.29 L1927.22 1213.29 L1926.63 1213.29 L1926.04 1213.29 L1925.46 1213.29 L1924.87 1213.29 L1924.29 1213.29 L1923.7 1213.29 L1923.11 1213.29 L1922.53 1213.29 L1921.94 1213.29 L1921.35 1213.29 L1920.77 1213.29 L1920.18 1213.29 L1919.59 1213.29 L1919.01 1213.29 L1918.42 1213.29 L1917.83 1213.29 L1917.25 1213.29 L1916.66 1213.29 L1916.08 1213.29 L1915.49 1213.29 L1914.9 1213.29 L1914.32 1213.29 L1913.73 1213.29 L1913.14 1213.29 L1912.56 1213.29 L1911.97 1213.29 L1911.38 1213.29 L1910.8 1213.29 L1910.21 1213.29 L1909.63 1213.29 L1909.04 1213.29 L1908.45 1213.29 L1907.87 1213.29 L1907.28 1213.29 L1906.69 1213.29 L1906.11 1213.29 L1905.52 1213.29 L1904.93 1213.29 L1904.35 1213.29 L1903.76 1213.29 L1903.17 1213.29 L1902.59 1213.29 L1902 1213.29 L1901.42 1213.29 L1900.83 1213.29 L1900.24 1213.29 L1899.66 1213.29 L1899.07 1213.29 L1898.48 1213.29 L1897.9 1213.29 L1897.31 1213.29 L1896.72 1213.29 L1896.14 1213.29 L1895.55 1213.29 L1894.96 1213.29 L1894.38 1213.29 L1893.79 1213.29 L1893.21 1213.29 L1892.62 1213.29 L1892.03 1213.29 L1891.45 1213.29 L1890.86 1213.29 L1890.27 1213.29 L1889.69 1213.29 L1889.1 1213.29 L1888.51 1213.29 L1887.93 1213.29 L1887.34 1213.29 L1886.76 1213.29 L1886.17 1213.29 L1885.58 1213.29 L1885 1213.29 L1884.41 1213.29 L1883.82 1213.29 L1883.24 1213.29 L1882.65 1213.29 L1882.06 1213.29 L1881.48 1213.29 L1880.89 1213.29 L1880.3 1213.29 L1879.72 1213.29 L1879.13 1213.29 L1878.55 1213.29 L1877.96 1213.29 L1877.37 1213.29 L1876.79 1213.29 L1876.2 1213.29 L1875.61 1213.29 L1875.03 1213.29 L1874.44 1213.29 L1873.85 1213.29 L1873.27 1213.29 L1872.68 1213.29 L1872.09 1213.29 L1871.51 1213.29 L1870.92 1213.29 L1870.34 1213.29 L1869.75 1213.29 L1869.16 1213.29 L1868.58 1213.29 L1867.99 1213.29 L1867.4 1213.29 L1866.82 1213.29 L1866.23 1213.29 L1865.64 1213.29 L1865.06 1213.29 L1864.47 1213.29 L1863.88 1213.29 L1863.3 1213.29 L1862.71 1213.29 L1862.13 1213.29 L1861.54 1213.29 L1860.95 1213.29 L1860.37 1213.29 L1859.78 1213.29 L1859.19 1213.29 L1858.61 1213.29 L1858.02 1213.29 L1857.43 1213.29 L1856.85 1213.29 L1856.26 1213.29 L1855.68 1213.29 L1855.09 1213.29 L1854.5 1213.29 L1853.92 1213.29 L1853.33 1213.29 L1852.74 1213.29 L1852.16 1213.29 L1851.57 1213.29 L1850.98 1213.29 L1850.4 1213.29 L1849.81 1213.29 L1849.22 1213.29 L1848.64 1213.29 L1848.05 1213.29 L1847.47 1213.29 L1846.88 1213.29 L1846.29 1213.29 L1845.71 1213.29 L1845.12 1213.29 L1844.53 1213.29 L1843.95 1213.29 L1843.36 1213.29 L1842.77 1213.29 L1842.19 1213.29 L1841.6 1213.29 L1841.01 1213.29 L1840.43 1213.29 L1839.84 1213.29 L1839.26 1213.29 L1838.67 1213.29 L1838.08 1213.29 L1837.5 1213.29 L1836.91 1213.29 L1836.32 1213.29 L1835.74 1213.29 L1835.15 1213.29 L1834.56 1213.29 L1833.98 1213.29 L1833.39 1213.29 L1832.81 1213.29 L1832.22 1213.29 L1831.63 1213.29 L1831.05 1213.29 L1830.46 1213.29 L1829.87 1213.29 L1829.29 1213.29 L1828.7 1213.29 L1828.11 1213.29 L1827.53 1213.29 L1826.94 1213.29 L1826.35 1213.29 L1825.77 1213.29 L1825.18 1213.29 L1824.6 1213.29 L1824.01 1213.29 L1823.42 1213.29 L1822.84 1213.29 L1822.25 1213.29 L1821.66 1213.29 L1821.08 1213.29 L1820.49 1213.29 L1819.9 1213.29 L1819.32 1213.29 L1818.73 1213.29 L1818.14 1213.29 L1817.56 1213.29 L1816.97 1213.29 L1816.39 1213.29 L1815.8 1213.29 L1815.21 1213.29 L1814.63 1213.29 L1814.04 1213.29 L1813.45 1213.29 L1812.87 1213.29 L1812.28 1213.29 L1811.69 1213.29 L1811.11 1213.29 L1810.52 1213.29 L1809.94 1213.29 L1809.35 1213.29 L1808.76 1213.29 L1808.18 1213.29 L1807.59 1213.29 L1807 1213.29 L1806.42 1213.29 L1805.83 1213.29 L1805.24 1213.29 L1804.66 1213.29 L1804.07 1213.29 L1803.48 1213.29 L1802.9 1213.29 L1802.31 1213.29 L1801.73 1213.29 L1801.14 1213.29 L1800.55 1213.29 L1799.97 1213.29 L1799.38 1213.29 L1798.79 1213.29 L1798.21 1213.29 L1797.62 1213.29 L1797.03 1213.29 L1796.45 1213.29 L1795.86 1213.29 L1795.27 1213.29 L1794.69 1213.29 L1794.1 1213.29 L1793.52 1213.29 L1792.93 1213.29 L1792.34 1213.29 L1791.76 1213.29 L1791.17 1213.29 L1790.58 1213.29 L1790 1213.29 L1789.41 1213.29 L1788.82 1213.29 L1788.24 1213.29 L1787.65 1213.29 L1787.06 1213.29 L1786.48 1213.29 L1785.89 1213.29 L1785.31 1213.29 L1784.72 1213.29 L1784.13 1213.29 L1783.55 1213.29 L1782.96 1213.29 L1782.37 1213.29 L1781.79 1213.29 L1781.2 1213.29 L1780.61 1213.29 L1780.03 1213.29 L1779.44 1213.29 L1778.86 1213.29 L1778.27 1213.29 L1777.68 1213.29 L1777.1 1213.29 L1776.51 1213.29 L1775.92 1213.29 L1775.34 1213.29 L1774.75 1213.29 L1774.16 1213.29 L1773.58 1213.29 L1772.99 1213.29 L1772.4 1213.29 L1771.82 1213.29 L1771.23 1213.29 L1770.65 1213.29 L1770.06 1213.29 L1769.47 1213.29 L1768.89 1213.29 L1768.3 1213.29 L1767.71 1213.29 L1767.13 1213.29 L1766.54 1213.29 L1765.95 1213.29 L1765.37 1213.29 L1764.78 1213.29 L1764.19 1213.29 L1763.61 1213.29 L1763.02 1213.29 L1762.44 1213.29 L1761.85 1213.29 L1761.26 1213.29 L1760.68 1213.29 L1760.09 1213.29 L1759.5 1213.29 L1758.92 1213.29 L1758.33 1213.29 L1757.74 1213.29 L1757.16 1213.29 L1756.57 1213.29 L1755.99 1213.29 L1755.4 1213.29 L1754.81 1213.29 L1754.23 1213.29 L1753.64 1213.29 L1753.05 1213.29 L1752.47 1213.29 L1751.88 1213.29 L1751.29 1213.29 L1750.71 1213.29 L1750.12 1213.29 L1749.53 1213.29 L1748.95 1213.29 L1748.36 1213.29 L1747.78 1213.29 L1747.19 1213.29 L1746.6 1213.29 L1746.02 1213.29 L1745.43 1213.29 L1744.84 1213.29 L1744.26 1213.29 L1743.67 1213.29 L1743.08 1213.29 L1742.5 1213.29 L1741.91 1213.29 L1741.32 1213.29 L1740.74 1213.29 L1740.15 1213.29 L1739.57 1213.29 L1738.98 1213.29 L1738.39 1213.29 L1737.81 1213.29 L1737.22 1213.29 L1736.63 1213.29 L1736.05 1213.29 L1735.46 1213.29 L1734.87 1213.29 L1734.29 1213.29 L1733.7 1213.29 L1733.11 1213.29 L1732.53 1213.29 L1731.94 1213.29 L1731.36 1213.29 L1730.77 1213.29 L1730.18 1213.29 L1729.6 1213.29 L1729.01 1213.29 L1728.42 1213.29 L1727.84 1213.29 L1727.25 1213.29 L1726.66 1213.29 L1726.08 1213.29 L1725.49 1213.29 L1724.91 1213.29 L1724.32 1213.29 L1723.73 1213.29 L1723.15 1213.29 L1722.56 1213.29 L1721.97 1213.29 L1721.39 1213.29 L1720.8 1213.29 L1720.21 1213.29 L1719.63 1213.29 L1719.04 1213.29 L1718.45 1213.29 L1717.87 1213.29 L1717.28 1213.29 L1716.7 1213.29 L1716.11 1213.29 L1715.52 1213.29 L1714.94 1213.29 L1714.35 1213.29 L1713.76 1213.29 L1713.18 1213.29 L1712.59 1213.29 L1712 1213.29 L1711.42 1213.29 L1710.83 1213.29 L1710.24 1213.29 L1709.66 1213.29 L1709.07 1213.29 L1708.49 1213.29 L1707.9 1213.29 L1707.31 1213.29 L1706.73 1213.29 L1706.14 1213.29 L1705.55 1213.29 L1704.97 1213.29 L1704.38 1213.29 L1703.79 1213.29 L1703.21 1213.29 L1702.62 1213.29 L1702.04 1213.29 L1701.45 1213.29 L1700.86 1213.29 L1700.28 1213.29 L1699.69 1213.29 L1699.1 1213.29 L1698.52 1213.29 L1697.93 1213.29 L1697.34 1213.29 L1696.76 1213.29 L1696.17 1213.29 L1695.58 1213.29 L1695 1213.29 L1694.41 1213.29 L1693.83 1213.29 L1693.24 1213.29 L1692.65 1213.29 L1692.07 1213.29 L1691.48 1213.29 L1690.89 1213.29 L1690.31 1213.29 L1689.72 1213.29 L1689.13 1213.29 L1688.55 1213.29 L1687.96 1213.29 L1687.37 1213.29 L1686.79 1213.29 L1686.2 1213.29 L1685.62 1213.29 L1685.03 1213.29 L1684.44 1213.29 L1683.86 1213.29 L1683.27 1213.29 L1682.68 1213.29 L1682.1 1213.29 L1681.51 1213.29 L1680.92 1213.29 L1680.34 1213.29 L1679.75 1213.29 L1679.17 1213.29 L1678.58 1213.29 L1677.99 1213.29 L1677.41 1213.29 L1676.82 1213.29 L1676.23 1213.29 L1675.65 1213.29 L1675.06 1213.29 L1674.47 1213.29 L1673.89 1213.29 L1673.3 1213.29 L1672.71 1213.29 L1672.13 1213.29 L1671.54 1213.29 L1670.96 1213.29 L1670.37 1213.29 L1669.78 1213.29 L1669.2 1213.29 L1668.61 1213.29 L1668.02 1213.29 L1667.44 1213.29 L1666.85 1213.29 L1666.26 1213.29 L1665.68 1213.29 L1665.09 1213.29 L1664.5 1213.29 L1663.92 1213.29 L1663.33 1213.29 L1662.75 1213.29 L1662.16 1213.29 L1661.57 1213.29 L1660.99 1213.29 L1660.4 1213.29 L1659.81 1213.29 L1659.23 1213.29 L1658.64 1213.29 L1658.05 1213.29 L1657.47 1213.29 L1656.88 1213.29 L1656.29 1213.29 L1655.71 1213.29 L1655.12 1213.29 L1654.54 1213.29 L1653.95 1213.29 L1653.36 1213.29 L1652.78 1213.29 L1652.19 1213.29 L1651.6 1213.29 L1651.02 1213.29 L1650.43 1213.29 L1649.84 1213.29 L1649.26 1213.29 L1648.67 1213.29 L1648.09 1213.29 L1647.5 1213.29 L1646.91 1213.29 L1646.33 1213.29 L1645.74 1213.29 L1645.15 1213.29 L1644.57 1213.29 L1643.98 1213.29 L1643.39 1213.29 L1642.81 1213.29 L1642.22 1213.29 L1641.63 1213.29 L1641.05 1213.29 L1640.46 1213.29 L1639.88 1213.29 L1639.29 1213.29 L1638.7 1213.29 L1638.12 1213.29 L1637.53 1213.29 L1636.94 1213.29 L1636.36 1213.29 L1635.77 1213.29 L1635.18 1213.29 L1634.6 1213.29 L1634.01 1213.29 L1633.42 1213.29 L1632.84 1213.29 L1632.25 1213.29 L1631.67 1213.29 L1631.08 1213.29 L1630.49 1213.29 L1629.91 1213.29 L1629.32 1213.29 L1628.73 1213.29 L1628.15 1213.29 L1627.56 1213.29 L1626.97 1213.29 L1626.39 1213.29 L1625.8 1213.29 L1625.22 1213.29 L1624.63 1213.29 L1624.04 1213.29 L1623.46 1213.29 L1622.87 1213.29 L1622.28 1213.29 L1621.7 1213.29 L1621.11 1213.29 L1620.52 1213.29 L1619.94 1213.29 L1619.35 1213.29 L1618.76 1213.29 L1618.18 1213.29 L1617.59 1213.29 L1617.01 1213.29 L1616.42 1213.29 L1615.83 1213.29 L1615.25 1213.29 L1614.66 1213.29 L1614.07 1213.29 L1613.49 1213.29 L1612.9 1213.29 L1612.31 1213.29 L1611.73 1213.29 L1611.14 1213.29 L1610.55 1213.29 L1609.97 1213.29 L1609.38 1213.29 L1608.8 1213.29 L1608.21 1213.29 L1607.62 1213.29 L1607.04 1213.29 L1606.45 1213.29 L1605.86 1213.29 L1605.28 1213.29 L1604.69 1213.29 L1604.1 1213.29 L1603.52 1213.29 L1602.93 1213.29 L1602.34 1213.29 L1601.76 1213.29 L1601.17 1213.29 L1600.59 1213.29 L1600 1213.29 L1599.41 1213.29 L1598.83 1213.29 L1598.24 1213.29 L1597.65 1213.29 L1597.07 1213.29 L1596.48 1213.29 L1595.89 1213.29 L1595.31 1213.29 L1594.72 1213.29 L1594.14 1213.29 L1593.55 1213.29 L1592.96 1213.29 L1592.38 1213.29 L1591.79 1213.29 L1591.2 1213.29 L1590.62 1213.29 L1590.03 1213.29 L1589.44 1213.29 L1588.86 1213.29 L1588.27 1213.29 L1587.68 1213.29 L1587.1 1213.29 L1586.51 1213.29 L1585.93 1213.29 L1585.34 1213.29 L1584.75 1213.29 L1584.17 1213.29 L1583.58 1213.29 L1582.99 1213.29 L1582.41 1213.29 L1581.82 1213.29 L1581.23 1213.29 L1580.65 1213.29 L1580.06 1213.29 L1579.47 1213.29 L1578.89 1213.29 L1578.3 1213.29 L1577.72 1213.29 L1577.13 1213.29 L1576.54 1213.29 L1575.96 1213.29 L1575.37 1213.29 L1574.78 1213.29 L1574.2 1213.29 L1573.61 1213.29 L1573.02 1213.29 L1572.44 1213.29 L1571.85 1213.29 L1571.27 1213.29 L1570.68 1213.29 L1570.09 1213.29 L1569.51 1213.29 L1568.92 1213.29 L1568.33 1213.29 L1567.75 1213.29 L1567.16 1213.29 L1566.57 1213.29 L1565.99 1213.29 L1565.4 1213.29 L1564.81 1213.29 L1564.23 1213.29 L1563.64 1213.29 L1563.06 1213.29 L1562.47 1213.29 L1561.88 1213.29 L1561.3 1213.29 L1560.71 1213.29 L1560.12 1213.29 L1559.54 1213.29 L1558.95 1213.29 L1558.36 1213.29 L1557.78 1213.29 L1557.19 1213.29 L1556.6 1213.29 L1556.02 1213.29 L1555.43 1213.29 L1554.85 1213.29 L1554.26 1213.29 L1553.67 1213.29 L1553.09 1213.29 L1552.5 1213.29 L1551.91 1213.29 L1551.33 1213.29 L1550.74 1213.29 L1550.15 1213.29 L1549.57 1213.29 L1548.98 1213.29 L1548.4 1213.29 L1547.81 1213.29 L1547.22 1213.29 L1546.64 1213.29 L1546.05 1213.29 L1545.46 1213.29 L1544.88 1213.29 L1544.29 1213.29 L1543.7 1213.29 L1543.12 1213.29 L1542.53 1213.29 L1541.94 1213.29 L1541.36 1213.29 L1540.77 1213.29 L1540.19 1213.29 L1539.6 1213.29 L1539.01 1213.29 L1538.43 1213.29 L1537.84 1213.29 L1537.25 1213.29 L1536.67 1213.29 L1536.08 1213.29 L1535.49 1213.29 L1534.91 1213.29 L1534.32 1213.29 L1533.73 1213.29 L1533.15 1213.29 L1532.56 1213.29 L1531.98 1213.29 L1531.39 1213.29 L1530.8 1213.29 L1530.22 1213.29 L1529.63 1213.29 L1529.04 1213.29 L1528.46 1213.29 L1527.87 1213.29 L1527.28 1213.29 L1526.7 1213.29 L1526.11 1213.29 L1525.52 1213.29 L1524.94 1213.29 L1524.35 1213.29 L1523.77 1213.29 L1523.18 1213.29 L1522.59 1213.29 L1522.01 1213.29 L1521.42 1213.29 L1520.83 1213.29 L1520.25 1213.29 L1519.66 1213.29 L1519.07 1213.29 L1518.49 1213.29 L1517.9 1213.29 L1517.32 1213.29 L1516.73 1213.29 L1516.14 1213.29 L1515.56 1213.29 L1514.97 1213.29 L1514.38 1213.29 L1513.8 1213.29 L1513.21 1213.29 L1512.62 1213.29 L1512.04 1213.29 L1511.45 1213.29 L1510.86 1213.29 L1510.28 1213.29 L1509.69 1213.29 L1509.11 1213.29 L1508.52 1213.29 L1507.93 1213.29 L1507.35 1213.29 L1506.76 1213.29 L1506.17 1213.29 L1505.59 1213.29 L1505 1213.29 L1504.41 1213.29 L1503.83 1213.29 L1503.24 1213.29 L1502.65 1213.29 L1502.07 1213.29 L1501.48 1213.29 L1500.9 1213.29 L1500.31 1213.29 L1499.72 1213.29 L1499.14 1213.29 L1498.55 1213.29 L1497.96 1213.29 L1497.38 1213.29 L1496.79 1213.29 L1496.2 1213.29 L1495.62 1213.29 L1495.03 1213.29 L1494.45 1213.29 L1493.86 1213.29 L1493.27 1213.29 L1492.69 1213.29 L1492.1 1213.29 L1491.51 1213.29 L1490.93 1213.29 L1490.34 1213.29 L1489.75 1213.29 L1489.17 1213.29 L1488.58 1213.29 L1487.99 1213.29 L1487.41 1213.29 L1486.82 1213.29 L1486.24 1213.29 L1485.65 1213.29 L1485.06 1213.29 L1484.48 1213.29 L1483.89 1213.29 L1483.3 1213.29 L1482.72 1213.29 L1482.13 1213.29 L1481.54 1213.29 L1480.96 1213.29 L1480.37 1213.29 L1479.78 1213.29 L1479.2 1213.29 L1478.61 1213.29 L1478.03 1213.29 L1477.44 1213.29 L1476.85 1213.29 L1476.27 1213.29 L1475.68 1213.29 L1475.09 1213.29 L1474.51 1213.29 L1473.92 1213.29 L1473.33 1213.29 L1472.75 1213.29 L1472.16 1213.29 L1471.57 1213.29 L1470.99 1213.29 L1470.4 1213.29 L1469.82 1213.29 L1469.23 1213.29 L1468.64 1213.29 L1468.06 1213.29 L1467.47 1213.29 L1466.88 1213.29 L1466.3 1213.29 L1465.71 1213.29 L1465.12 1213.29 L1464.54 1213.29 L1463.95 1213.29 L1463.37 1213.29 L1462.78 1213.29 L1462.19 1213.29 L1461.61 1213.29 L1461.02 1213.29 L1460.43 1213.29 L1459.85 1213.29 L1459.26 1213.29 L1458.67 1213.29 L1458.09 1213.29 L1457.5 1213.29 L1456.91 1213.29 L1456.33 1213.29 L1455.74 1213.29 L1455.16 1213.29 L1454.57 1213.29 L1453.98 1213.29 L1453.4 1213.29 L1452.81 1213.29 L1452.22 1213.29 L1451.64 1213.29 L1451.05 1213.29 L1450.46 1213.29 L1449.88 1213.29 L1449.29 1213.29 L1448.7 1213.29 L1448.12 1213.29 L1447.53 1213.29 L1446.95 1213.29 L1446.36 1213.29 L1445.77 1213.29 L1445.19 1213.29 L1444.6 1213.29 L1444.01 1213.29 L1443.43 1213.29 L1442.84 1213.29 L1442.25 1213.29 L1441.67 1213.29 L1441.08 1213.29 L1440.5 1213.29 L1439.91 1213.29 L1439.32 1213.29 L1438.74 1213.29 L1438.15 1213.29 L1437.56 1213.29 L1436.98 1213.29 L1436.39 1213.29 L1435.8 1213.29 L1435.22 1213.29 L1434.63 1213.29 L1434.04 1213.29 L1433.46 1213.29 L1432.87 1213.29 L1432.29 1213.29 L1431.7 1213.29 L1431.11 1213.29 L1430.53 1213.29 L1429.94 1213.29 L1429.35 1213.29 L1428.77 1213.29 L1428.18 1213.29 L1427.59 1213.29 L1427.01 1213.29 L1426.42 1213.29 L1425.83 1213.29 L1425.25 1213.29 L1424.66 1213.29 L1424.08 1213.29 L1423.49 1213.29 L1422.9 1213.29 L1422.32 1213.29 L1421.73 1213.29 L1421.14 1213.29 L1420.56 1213.29 L1419.97 1213.29 L1419.38 1213.29 L1418.8 1213.29 L1418.21 1213.29 L1417.63 1213.29 L1417.04 1213.29 L1416.45 1213.29 L1415.87 1213.29 L1415.28 1213.29 L1414.69 1213.29 L1414.11 1213.29 L1413.52 1213.29 L1412.93 1213.29 L1412.35 1213.29 L1411.76 1213.29 L1411.17 1213.29 L1410.59 1213.29 L1410 1213.29 L1409.42 1213.29 L1408.83 1213.29 L1408.24 1213.29 L1407.66 1213.29 L1407.07 1213.29 L1406.48 1213.29 L1405.9 1213.29 L1405.31 1213.29 L1404.72 1213.29 L1404.14 1213.29 L1403.55 1213.29 L1402.96 1213.29 L1402.38 1213.29 L1401.79 1213.29 L1401.21 1213.29 L1400.62 1213.29 L1400.03 1213.29 L1399.45 1213.29 L1398.86 1213.29 L1398.27 1213.29 L1397.69 1213.29 L1397.1 1213.29 L1396.51 1213.29 L1395.93 1213.29 L1395.34 1213.29 L1394.75 1213.29 L1394.17 1213.29 L1393.58 1213.29 L1393 1213.29 L1392.41 1213.29 L1391.82 1213.29 L1391.24 1213.29 L1390.65 1213.29 L1390.06 1213.29 L1389.48 1213.29 L1388.89 1213.29 L1388.3 1213.29 L1387.72 1213.29 L1387.13 1213.29 L1386.55 1213.29 L1385.96 1213.29 L1385.37 1213.29 L1384.79 1213.29 L1384.2 1213.29 L1383.61 1213.29 L1383.03 1213.29 L1382.44 1213.29 L1381.85 1213.29 L1381.27 1213.29 L1380.68 1213.29 L1380.09 1213.29 L1379.51 1213.29 L1378.92 1213.29 L1378.34 1213.29 L1377.75 1213.29 L1377.16 1213.29 L1376.58 1213.29 L1375.99 1213.29 L1375.4 1213.29 L1374.82 1213.29 L1374.23 1213.29 L1373.64 1213.29 L1373.06 1213.29 L1372.47 1213.29 L1371.88 1213.29 L1371.3 1213.29 L1370.71 1213.29 L1370.13 1213.29 L1369.54 1213.29 L1368.95 1213.29 L1368.37 1213.29 L1367.78 1213.29 L1367.19 1213.29 L1366.61 1213.29 L1366.02 1213.29 L1365.43 1213.29 L1364.85 1213.29 L1364.26 1213.29 L1363.68 1213.29 L1363.09 1213.29 L1362.5 1213.29 L1361.92 1213.29 L1361.33 1213.29 L1360.74 1213.29 L1360.16 1213.29 L1359.57 1213.29 L1358.98 1213.29 L1358.4 1213.29 L1357.81 1213.29 L1357.22 1213.29 L1356.64 1213.29 L1356.05 1213.29 L1355.47 1213.29 L1354.88 1213.29 L1354.29 1213.29 L1353.71 1213.29 L1353.12 1213.29 L1352.53 1213.29 L1351.95 1213.29 L1351.36 1213.29 L1350.77 1213.29 L1350.19 1213.29 L1349.6 1213.29 L1349.01 1213.29 L1348.43 1213.29 L1347.84 1213.29 L1347.26 1213.29 L1346.67 1213.29 L1346.08 1213.29 L1345.5 1213.29 L1344.91 1213.29 L1344.32 1213.29 L1343.74 1213.29 L1343.15 1213.29 L1342.56 1213.29 L1341.98 1213.29 L1341.39 1213.29 L1340.8 1213.29 L1340.22 1213.29 L1339.63 1213.29 L1339.05 1213.29 L1338.46 1213.29 L1337.87 1213.29 L1337.29 1213.29 L1336.7 1213.29 L1336.11 1213.29 L1335.53 1213.29 L1334.94 1213.29 L1334.35 1213.29 L1333.77 1213.29 L1333.18 1213.29 L1332.6 1213.29 L1332.01 1213.29 L1331.42 1213.29 L1330.84 1213.29 L1330.25 1213.29 L1329.66 1213.29 L1329.08 1213.29 L1328.49 1213.29 L1327.9 1213.29 L1327.32 1213.29 L1326.73 1213.29 L1326.14 1213.29 L1325.56 1213.29 L1324.97 1213.29 L1324.39 1213.29 L1323.8 1213.29 L1323.21 1213.29 L1322.63 1213.29 L1322.04 1213.29 L1321.45 1213.29 L1320.87 1213.29 L1320.28 1213.29 L1319.69 1213.29 L1319.11 1213.29 L1318.52 1213.29 L1317.93 1213.29 L1317.35 1213.29 L1316.76 1213.29 L1316.18 1213.29 L1315.59 1213.29 L1315 1213.29 L1314.42 1213.29 L1313.83 1213.29 L1313.24 1213.29 L1312.66 1213.29 L1312.07 1213.29 L1311.48 1213.29 L1310.9 1213.29 L1310.31 1213.29 L1309.73 1213.29 L1309.14 1213.29 L1308.55 1213.29 L1307.97 1213.29 L1307.38 1213.29 L1306.79 1213.29 L1306.21 1213.29 L1305.62 1213.29 L1305.03 1213.29 L1304.45 1213.29 L1303.86 1213.29 L1303.27 1213.29 L1302.69 1213.29 L1302.1 1213.29 L1301.52 1213.29 L1300.93 1213.29 L1300.34 1213.29 L1299.76 1213.29 L1299.17 1213.29 L1298.58 1213.29 L1298 1213.29 L1297.41 1213.29 L1296.82 1213.29 L1296.24 1213.29 L1295.65 1213.29 L1295.06 1213.29 L1294.48 1213.29 L1293.89 1213.29 L1293.31 1213.29 L1292.72 1213.29 L1292.13 1213.29 L1291.55 1213.29 L1290.96 1213.29 L1290.37 1213.29 L1289.79 1213.29 L1289.2 1213.29 L1288.61 1213.29 L1288.03 1213.29 L1287.44 1213.29 L1286.86 1213.29 L1286.27 1213.29 L1285.68 1213.29 L1285.1 1213.29 L1284.51 1213.29 L1283.92 1213.29 L1283.34 1213.29 L1282.75 1213.29 L1282.16 1213.29 L1281.58 1213.29 L1280.99 1213.29 L1280.4 1213.29 L1279.82 1213.29 L1279.23 1213.29 L1278.65 1213.29 L1278.06 1213.29 L1277.47 1213.29 L1276.89 1213.29 L1276.3 1213.29 L1275.71 1213.29 L1275.13 1213.29 L1274.54 1213.29 L1273.95 1213.29 L1273.37 1213.29 L1272.78 1213.29 L1272.19 1213.29 L1271.61 1213.29 L1271.02 1213.29 L1270.44 1213.29 L1269.85 1213.29 L1269.26 1213.29 L1268.68 1213.29 L1268.09 1213.29 L1267.5 1213.29 L1266.92 1213.29 L1266.33 1213.29 L1265.74 1213.29 L1265.16 1213.29 L1264.57 1213.29 L1263.98 1213.29 L1263.4 1213.29 L1262.81 1213.29 L1262.23 1213.29 L1261.64 1213.29 L1261.05 1213.29 L1260.47 1213.29 L1259.88 1213.29 L1259.29 1213.29 L1258.71 1213.29 L1258.12 1213.29 L1257.53 1213.29 L1256.95 1213.29 L1256.36 1213.29 L1255.78 1213.29 L1255.19 1213.29 L1254.6 1213.29 L1254.02 1213.29 L1253.43 1213.29 L1252.84 1213.29 L1252.26 1213.29 L1251.67 1213.29 L1251.08 1213.29 L1250.5 1213.29 L1249.91 1213.29 L1249.32 1213.29 L1248.74 1213.29 L1248.15 1213.29 L1247.57 1213.29 L1246.98 1213.29 L1246.39 1213.29 L1245.81 1213.29 L1245.22 1213.29 L1244.63 1213.29 L1244.05 1213.29 L1243.46 1213.29 L1242.87 1213.29 L1242.29 1213.29 L1241.7 1213.29 L1241.11 1213.29 L1240.53 1213.29 L1239.94 1213.29 L1239.36 1213.29 L1238.77 1213.29 L1238.18 1213.29 L1237.6 1213.29 L1237.01 1213.29 L1236.42 1213.29 L1235.84 1213.29 L1235.25 1213.29 L1234.66 1213.29 L1234.08 1213.29 L1233.49 1213.29 L1232.91 1213.29 L1232.32 1213.29 L1231.73 1213.29 L1231.15 1213.29 L1230.56 1213.29 L1229.97 1213.29 L1229.39 1213.29 L1228.8 1213.29 L1228.21 1213.29 L1227.63 1213.29 L1227.04 1213.29 L1226.45 1213.29 L1225.87 1213.29 L1225.28 1213.29 L1224.7 1213.29 L1224.11 1213.29 L1223.52 1213.29 L1222.94 1213.29 L1222.35 1213.29 L1221.76 1213.29 L1221.18 1213.29 L1220.59 1213.29 L1220 1213.29 L1219.42 1213.29 L1218.83 1213.29 L1218.24 1213.29 L1217.66 1213.29 L1217.07 1213.29 L1216.49 1213.29 L1215.9 1213.29 L1215.31 1213.29 L1214.73 1213.29 L1214.14 1213.29 L1213.55 1213.29 L1212.97 1213.29 L1212.38 1213.29 L1211.79 1213.29 L1211.21 1213.29 L1210.62 1213.29 L1210.03 1213.29 L1209.45 1213.29 L1208.86 1213.29 L1208.28 1213.29 L1207.69 1213.29 L1207.1 1213.29 L1206.52 1213.29 L1205.93 1213.29 L1205.34 1213.29 L1204.76 1213.29 L1204.17 1213.29 L1203.58 1213.29 L1203 1213.29 L1202.41 1213.29 L1201.83 1213.29 L1201.24 1213.29 L1200.65 1213.29 L1200.07 1213.29 L1199.48 1213.29 L1198.89 1213.29 L1198.31 1213.29 L1197.72 1213.29 L1197.13 1213.29 L1196.55 1213.29 L1195.96 1213.29 L1195.37 1213.29 L1194.79 1213.29 L1194.2 1213.29 L1193.62 1213.29 L1193.03 1213.29 L1192.44 1213.29 L1191.86 1213.29 L1191.27 1213.29 L1190.68 1213.29 L1190.1 1213.29 L1189.51 1213.29 L1188.92 1213.29 L1188.34 1213.29 L1187.75 1213.29 L1187.16 1213.29 L1186.58 1213.29 L1185.99 1213.29 L1185.41 1213.29 L1184.82 1213.29 L1184.23 1213.29 L1183.65 1213.29 L1183.06 1213.29 L1182.47 1213.29 L1181.89 1213.29 L1181.3 1213.29 L1180.71 1213.29 L1180.13 1213.29 L1179.54 1213.29 L1178.96 1213.29 L1178.37 1213.29 L1177.78 1213.29 L1177.2 1213.29 L1176.61 1213.29 L1176.02 1213.29 L1175.44 1213.29 L1174.85 1213.29 L1174.26 1213.29 L1173.68 1213.29 L1173.09 1213.29 L1172.5 1213.29 L1171.92 1213.29 L1171.33 1213.29 L1170.75 1213.29 L1170.16 1213.29 L1169.57 1213.29 L1168.99 1213.29 L1168.4 1213.29 L1167.81 1213.29 L1167.23 1213.29 L1166.64 1213.29 L1166.05 1213.29 L1165.47 1213.29 L1164.88 1213.29 L1164.29 1213.29 L1163.71 1213.29 L1163.12 1213.29 L1162.54 1213.29 L1161.95 1213.29 L1161.36 1213.29 L1160.78 1213.29 L1160.19 1213.29 L1159.6 1213.29 L1159.02 1213.29 L1158.43 1213.29 L1157.84 1213.29 L1157.26 1213.29 L1156.67 1213.29 L1156.09 1213.29 L1155.5 1213.29 L1154.91 1213.29 L1154.33 1213.29 L1153.74 1213.29 L1153.15 1213.29 L1152.57 1213.29 L1151.98 1213.29 L1151.39 1213.29 L1150.81 1213.29 L1150.22 1213.29 L1149.63 1213.29 L1149.05 1213.29 L1148.46 1213.29 L1147.88 1213.29 L1147.29 1213.29 L1146.7 1213.29 L1146.12 1213.29 L1145.53 1213.29 L1144.94 1213.29 L1144.36 1213.29 L1143.77 1213.29 L1143.18 1213.29 L1142.6 1213.29 L1142.01 1213.29 L1141.42 1213.29 L1140.84 1213.29 L1140.25 1213.29 L1139.67 1213.29 L1139.08 1213.29 L1138.49 1213.29 L1137.91 1213.29 L1137.32 1213.29 L1136.73 1213.29 L1136.15 1213.29 L1135.56 1213.29 L1134.97 1213.29 L1134.39 1213.29 L1133.8 1213.29 L1133.21 1213.29 L1132.63 1213.29 L1132.04 1213.29 L1131.46 1213.29 L1130.87 1213.29 L1130.28 1213.29 L1129.7 1213.29 L1129.11 1213.29 L1128.52 1213.29 L1127.94 1213.29 L1127.35 1213.29 L1126.76 1213.29 L1126.18 1213.29 L1125.59 1213.29 L1125.01 1213.29 L1124.42 1213.29 L1123.83 1213.29 L1123.25 1213.29 L1122.66 1213.29 L1122.07 1213.29 L1121.49 1213.29 L1120.9 1213.29 L1120.31 1213.29 L1119.73 1213.29 L1119.14 1213.29 L1118.55 1213.29 L1117.97 1213.29 L1117.38 1213.29 L1116.8 1213.29 L1116.21 1213.29 L1115.62 1213.29 L1115.04 1213.29 L1114.45 1213.29 L1113.86 1213.29 L1113.28 1213.29 L1112.69 1213.29 L1112.1 1213.29 L1111.52 1213.29 L1110.93 1213.29 L1110.34 1213.29 L1109.76 1213.29 L1109.17 1213.29 L1108.59 1213.29 L1108 1213.29 L1107.41 1213.29 L1106.83 1213.29 L1106.24 1213.29 L1105.65 1213.29 L1105.07 1213.29 L1104.48 1213.29 L1103.89 1213.29 L1103.31 1213.29 L1102.72 1213.29 L1102.14 1213.29 L1101.55 1213.29 L1100.96 1213.29 L1100.38 1213.29 L1099.79 1213.29 L1099.2 1213.29 L1098.62 1213.29 L1098.03 1213.29 L1097.44 1213.29 L1096.86 1213.29 L1096.27 1213.29 L1095.68 1213.29 L1095.1 1213.29 L1094.51 1213.29 L1093.93 1213.29 L1093.34 1213.29 L1092.75 1213.29 L1092.17 1213.29 L1091.58 1213.29 L1090.99 1213.29 L1090.41 1213.29 L1089.82 1213.29 L1089.23 1213.29 L1088.65 1213.29 L1088.06 1213.29 L1087.47 1213.29 L1086.89 1213.29 L1086.3 1213.29 L1085.72 1213.29 L1085.13 1213.29 L1084.54 1213.29 L1083.96 1213.29 L1083.37 1213.29 L1082.78 1213.29 L1082.2 1213.29 L1081.61 1213.29 L1081.02 1213.29 L1080.44 1213.29 L1079.85 1213.29 L1079.26 1213.29 L1078.68 1213.29 L1078.09 1213.29 L1077.51 1213.29 L1076.92 1213.29 L1076.33 1213.29 L1075.75 1213.29 L1075.16 1213.29 L1074.57 1213.29 L1073.99 1213.29 L1073.4 1213.29 L1072.81 1213.29 L1072.23 1213.29 L1071.64 1213.29 L1071.06 1213.29 L1070.47 1213.29 L1069.88 1213.29 L1069.3 1213.29 L1068.71 1213.29 L1068.12 1213.29 L1067.54 1213.29 L1066.95 1213.29 L1066.36 1213.29 L1065.78 1213.29 L1065.19 1213.29 L1064.6 1213.29 L1064.02 1213.29 L1063.43 1213.29 L1062.85 1213.29 L1062.26 1213.29 L1061.67 1213.29 L1061.09 1213.29 L1060.5 1213.29 L1059.91 1213.29 L1059.33 1213.29 L1058.74 1213.29 L1058.15 1213.29 L1057.57 1213.29 L1056.98 1213.29 L1056.39 1213.29 L1055.81 1213.29 L1055.22 1213.29 L1054.64 1213.29 L1054.05 1213.29 L1053.46 1213.29 L1052.88 1213.29 L1052.29 1213.29 L1051.7 1213.29 L1051.12 1213.29 L1050.53 1213.29 L1049.94 1213.29 L1049.36 1213.29 L1048.77 1213.29 L1048.19 1213.29 L1047.6 1213.29 L1047.01 1213.29 L1046.43 1213.29 L1045.84 1213.29 L1045.25 1213.29 L1044.67 1213.29 L1044.08 1213.29 L1043.49 1213.29 L1042.91 1213.29 L1042.32 1213.29 L1041.73 1213.29 L1041.15 1213.29 L1040.56 1213.29 L1039.98 1213.29 L1039.39 1213.29 L1038.8 1213.29 L1038.22 1213.29 L1037.63 1213.29 L1037.04 1213.29 L1036.46 1213.29 L1035.87 1213.29 L1035.28 1213.29 L1034.7 1213.29 L1034.11 1213.29 L1033.52 1213.29 L1032.94 1213.29 L1032.35 1213.29 L1031.77 1213.29 L1031.18 1213.29 L1030.59 1213.29 L1030.01 1213.29 L1029.42 1213.29 L1028.83 1213.29 L1028.25 1213.29 L1027.66 1213.29 L1027.07 1213.29 L1026.49 1213.29 L1025.9 1213.29 L1025.32 1213.29 L1024.73 1213.29 L1024.14 1213.29 L1023.56 1213.29 L1022.97 1213.29 L1022.38 1213.29 L1021.8 1213.29 L1021.21 1213.29 L1020.62 1213.29 L1020.04 1213.29 L1019.45 1213.29 L1018.86 1213.29 L1018.28 1213.29 L1017.69 1213.29 L1017.11 1213.29 L1016.52 1213.29 L1015.93 1213.29 L1015.35 1213.29 L1014.76 1213.29 L1014.17 1213.29 L1013.59 1213.29 L1013 1213.29 L1012.41 1213.29 L1011.83 1213.29 L1011.24 1213.29 L1010.65 1213.29 L1010.07 1213.29 L1009.48 1213.29 L1008.9 1213.29 L1008.31 1213.29 L1007.72 1213.29 L1007.14 1213.29 L1006.55 1213.29 L1005.96 1213.29 L1005.38 1213.29 L1004.79 1213.29 L1004.2 1213.29 L1003.62 1213.29 L1003.03 1213.29 L1002.44 1213.29 L1001.86 1213.29 L1001.27 1213.29 L1000.69 1213.29 L1000.1 1213.29 L999.513 1213.29 L998.926 1213.29 L998.34 1213.29 L997.754 1213.29 L997.167 1213.29 L996.581 1213.29 L995.994 1213.29 L995.408 1213.29 L994.822 1213.29 L994.235 1213.29 L993.649 1213.29 L993.062 1213.29 L992.476 1213.29 L991.889 1213.29 L991.303 1213.29 L990.717 1213.29 L990.13 1213.29 L989.544 1213.29 L988.957 1213.29 L988.371 1213.29 L987.785 1213.29 L987.198 1213.29 L986.612 1213.29 L986.025 1213.29  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.65 986.612,1213.65 987.198,1213.65 987.785,1213.65 988.371,1213.65 988.957,1213.65 989.544,1213.65 990.13,1213.65 990.717,1213.65 991.303,1213.65 991.889,1213.65 992.476,1213.65 993.062,1213.65 993.649,1213.65 994.235,1213.65 994.822,1213.65 995.408,1213.65 995.994,1213.65 996.581,1213.65 997.167,1213.65 997.754,1213.65 998.34,1213.65 998.926,1213.65 999.513,1213.65 1000.1,1213.65 1000.69,1213.65 1001.27,1213.65 1001.86,1213.65 1002.44,1213.65 1003.03,1213.65 1003.62,1213.65 1004.2,1213.65 1004.79,1213.65 1005.38,1213.65 1005.96,1213.65 1006.55,1213.65 1007.14,1213.65 1007.72,1213.65 1008.31,1213.65 1008.9,1213.65 1009.48,1213.65 1010.07,1213.65 1010.65,1213.65 1011.24,1213.65 1011.83,1213.65 1012.41,1213.65 1013,1213.65 1013.59,1213.65 1014.17,1213.65 1014.76,1213.65 1015.35,1213.65 1015.93,1213.65 1016.52,1213.65 1017.11,1213.65 1017.69,1213.65 1018.28,1213.65 1018.86,1213.65 1019.45,1213.65 1020.04,1213.65 1020.62,1213.65 1021.21,1213.65 1021.8,1213.65 1022.38,1213.65 1022.97,1213.65 1023.56,1213.65 1024.14,1213.65 1024.73,1213.65 1025.32,1213.65 1025.9,1213.65 1026.49,1213.65 1027.07,1213.65 1027.66,1213.65 1028.25,1213.65 1028.83,1213.65 1029.42,1213.65 1030.01,1213.65 1030.59,1213.65 1031.18,1213.65 1031.77,1213.65 1032.35,1213.65 1032.94,1213.65 1033.52,1213.65 1034.11,1213.65 1034.7,1213.65 1035.28,1213.65 1035.87,1213.65 1036.46,1213.65 1037.04,1213.65 1037.63,1213.65 1038.22,1213.65 1038.8,1213.65 1039.39,1213.65 1039.98,1213.65 1040.56,1213.65 1041.15,1213.65 1041.73,1213.65 1042.32,1213.65 1042.91,1213.65 1043.49,1213.65 1044.08,1213.65 1044.67,1213.65 1045.25,1213.65 1045.84,1213.65 1046.43,1213.65 1047.01,1213.65 1047.6,1213.65 1048.19,1213.65 1048.77,1213.65 1049.36,1213.65 1049.94,1213.65 1050.53,1213.65 1051.12,1213.65 1051.7,1213.65 1052.29,1213.65 1052.88,1213.65 1053.46,1213.65 1054.05,1213.65 1054.64,1213.65 1055.22,1213.65 1055.81,1213.65 1056.39,1213.65 1056.98,1213.65 1057.57,1213.65 1058.15,1213.65 1058.74,1213.65 1059.33,1213.65 1059.91,1213.65 1060.5,1213.65 1061.09,1213.65 1061.67,1213.65 1062.26,1213.65 1062.85,1213.65 1063.43,1213.65 1064.02,1213.65 1064.6,1213.65 1065.19,1213.65 1065.78,1213.65 1066.36,1213.65 1066.95,1213.65 1067.54,1213.65 1068.12,1213.65 1068.71,1213.65 1069.3,1213.65 1069.88,1213.65 1070.47,1213.65 1071.06,1213.65 1071.64,1213.65 1072.23,1213.65 1072.81,1213.65 1073.4,1213.65 1073.99,1213.65 1074.57,1213.65 1075.16,1213.65 1075.75,1213.65 1076.33,1213.65 1076.92,1213.65 1077.51,1213.65 1078.09,1213.65 1078.68,1213.65 1079.26,1213.65 1079.85,1213.65 1080.44,1213.65 1081.02,1213.65 1081.61,1213.65 1082.2,1213.65 1082.78,1213.65 1083.37,1213.65 1083.96,1213.65 1084.54,1213.65 1085.13,1213.65 1085.72,1213.65 1086.3,1213.65 1086.89,1213.65 1087.47,1213.65 1088.06,1213.65 1088.65,1213.65 1089.23,1213.65 1089.82,1213.65 1090.41,1213.65 1090.99,1213.65 1091.58,1213.65 1092.17,1213.65 1092.75,1213.65 1093.34,1213.65 1093.93,1213.65 1094.51,1213.65 1095.1,1213.65 1095.68,1213.65 1096.27,1213.65 1096.86,1213.65 1097.44,1213.65 1098.03,1213.65 1098.62,1213.65 1099.2,1213.65 1099.79,1213.65 1100.38,1213.65 1100.96,1213.65 1101.55,1213.65 1102.14,1213.65 1102.72,1213.65 1103.31,1213.65 1103.89,1213.65 1104.48,1213.65 1105.07,1213.65 1105.65,1213.65 1106.24,1213.65 1106.83,1213.65 1107.41,1213.65 1108,1213.65 1108.59,1213.65 1109.17,1213.65 1109.76,1213.65 1110.34,1213.65 1110.93,1213.65 1111.52,1213.65 1112.1,1213.65 1112.69,1213.65 1113.28,1213.65 1113.86,1213.65 1114.45,1213.65 1115.04,1213.65 1115.62,1213.65 1116.21,1213.65 1116.8,1213.65 1117.38,1213.65 1117.97,1213.65 1118.55,1213.65 1119.14,1213.65 1119.73,1213.65 1120.31,1213.65 1120.9,1213.65 1121.49,1213.65 1122.07,1213.65 1122.66,1213.65 1123.25,1213.65 1123.83,1213.65 1124.42,1213.65 1125.01,1213.65 1125.59,1213.65 1126.18,1213.65 1126.76,1213.65 1127.35,1213.65 1127.94,1213.65 1128.52,1213.65 1129.11,1213.65 1129.7,1213.65 1130.28,1213.65 1130.87,1213.65 1131.46,1213.65 1132.04,1213.65 1132.63,1213.65 1133.21,1213.65 1133.8,1213.65 1134.39,1213.65 1134.97,1213.65 1135.56,1213.65 1136.15,1213.65 1136.73,1213.65 1137.32,1213.65 1137.91,1213.65 1138.49,1213.65 1139.08,1213.65 1139.67,1213.65 1140.25,1213.65 1140.84,1213.65 1141.42,1213.65 1142.01,1213.65 1142.6,1213.65 1143.18,1213.65 1143.77,1213.65 1144.36,1213.65 1144.94,1213.65 1145.53,1213.65 1146.12,1213.65 1146.7,1213.65 1147.29,1213.65 1147.88,1213.65 1148.46,1213.65 1149.05,1213.65 1149.63,1213.65 1150.22,1213.65 1150.81,1213.65 1151.39,1213.65 1151.98,1213.65 1152.57,1213.65 1153.15,1213.65 1153.74,1213.65 1154.33,1213.65 1154.91,1213.65 1155.5,1213.65 1156.09,1213.65 1156.67,1213.65 1157.26,1213.65 1157.84,1213.65 1158.43,1213.65 1159.02,1213.65 1159.6,1213.65 1160.19,1213.65 1160.78,1213.65 1161.36,1213.65 1161.95,1213.65 1162.54,1213.65 1163.12,1213.65 1163.71,1213.65 1164.29,1213.65 1164.88,1213.65 1165.47,1213.65 1166.05,1213.65 1166.64,1213.65 1167.23,1213.65 1167.81,1213.65 1168.4,1213.65 1168.99,1213.65 1169.57,1213.65 1170.16,1213.65 1170.75,1213.65 1171.33,1213.65 1171.92,1213.65 1172.5,1213.65 1173.09,1213.65 1173.68,1213.65 1174.26,1213.65 1174.85,1213.65 1175.44,1213.65 1176.02,1213.65 1176.61,1213.65 1177.2,1213.65 1177.78,1213.65 1178.37,1213.65 1178.96,1213.65 1179.54,1213.65 1180.13,1213.65 1180.71,1213.65 1181.3,1213.65 1181.89,1213.65 1182.47,1213.65 1183.06,1213.65 1183.65,1213.65 1184.23,1213.65 1184.82,1213.65 1185.41,1213.65 1185.99,1213.65 1186.58,1213.65 1187.16,1213.65 1187.75,1213.65 1188.34,1213.65 1188.92,1213.65 1189.51,1213.65 1190.1,1213.65 1190.68,1213.65 1191.27,1213.65 1191.86,1213.65 1192.44,1213.65 1193.03,1213.65 1193.62,1213.65 1194.2,1213.65 1194.79,1213.65 1195.37,1213.65 1195.96,1213.65 1196.55,1213.65 1197.13,1213.65 1197.72,1213.65 1198.31,1213.65 1198.89,1213.65 1199.48,1213.65 1200.07,1213.65 1200.65,1213.65 1201.24,1213.65 1201.83,1213.65 1202.41,1213.65 1203,1213.65 1203.58,1213.65 1204.17,1213.65 1204.76,1213.65 1205.34,1213.65 1205.93,1213.65 1206.52,1213.65 1207.1,1213.65 1207.69,1213.65 1208.28,1213.65 1208.86,1213.65 1209.45,1213.65 1210.03,1213.65 1210.62,1213.65 1211.21,1213.65 1211.79,1213.65 1212.38,1213.65 1212.97,1213.65 1213.55,1213.65 1214.14,1213.65 1214.73,1213.65 1215.31,1213.65 1215.9,1213.65 1216.49,1213.65 1217.07,1213.65 1217.66,1213.65 1218.24,1213.65 1218.83,1213.65 1219.42,1213.65 1220,1213.65 1220.59,1213.65 1221.18,1213.65 1221.76,1213.65 1222.35,1213.65 1222.94,1213.65 1223.52,1213.65 1224.11,1213.65 1224.7,1213.65 1225.28,1213.65 1225.87,1213.65 1226.45,1213.65 1227.04,1213.65 1227.63,1213.65 1228.21,1213.65 1228.8,1213.65 1229.39,1213.65 1229.97,1213.65 1230.56,1213.65 1231.15,1213.65 1231.73,1213.65 1232.32,1213.65 1232.91,1213.65 1233.49,1213.65 1234.08,1213.65 1234.66,1213.65 1235.25,1213.65 1235.84,1213.65 1236.42,1213.65 1237.01,1213.65 1237.6,1213.65 1238.18,1213.65 1238.77,1213.65 1239.36,1213.65 1239.94,1213.65 1240.53,1213.65 1241.11,1213.65 1241.7,1213.65 1242.29,1213.65 1242.87,1213.65 1243.46,1213.65 1244.05,1213.65 1244.63,1213.65 1245.22,1213.65 1245.81,1213.65 1246.39,1213.65 1246.98,1213.65 1247.57,1213.65 1248.15,1213.65 1248.74,1213.65 1249.32,1213.65 1249.91,1213.65 1250.5,1213.65 1251.08,1213.65 1251.67,1213.65 1252.26,1213.65 1252.84,1213.65 1253.43,1213.65 1254.02,1213.65 1254.6,1213.65 1255.19,1213.65 1255.78,1213.65 1256.36,1213.65 1256.95,1213.65 1257.53,1213.65 1258.12,1213.65 1258.71,1213.65 1259.29,1213.65 1259.88,1213.65 1260.47,1213.65 1261.05,1213.65 1261.64,1213.65 1262.23,1213.65 1262.81,1213.65 1263.4,1213.65 1263.98,1213.65 1264.57,1213.65 1265.16,1213.65 1265.74,1213.65 1266.33,1213.65 1266.92,1213.65 1267.5,1213.65 1268.09,1213.65 1268.68,1213.65 1269.26,1213.65 1269.85,1213.65 1270.44,1213.65 1271.02,1213.65 1271.61,1213.65 1272.19,1213.65 1272.78,1213.65 1273.37,1213.65 1273.95,1213.65 1274.54,1213.65 1275.13,1213.65 1275.71,1213.65 1276.3,1213.65 1276.89,1213.65 1277.47,1213.65 1278.06,1213.65 1278.65,1213.65 1279.23,1213.65 1279.82,1213.65 1280.4,1213.65 1280.99,1213.65 1281.58,1213.65 1282.16,1213.65 1282.75,1213.65 1283.34,1213.65 1283.92,1213.65 1284.51,1213.65 1285.1,1213.65 1285.68,1213.65 1286.27,1213.65 1286.86,1213.65 1287.44,1213.65 1288.03,1213.65 1288.61,1213.65 1289.2,1213.65 1289.79,1213.65 1290.37,1213.65 1290.96,1213.65 1291.55,1213.65 1292.13,1213.65 1292.72,1213.65 1293.31,1213.65 1293.89,1213.65 1294.48,1213.65 1295.06,1213.65 1295.65,1213.65 1296.24,1213.65 1296.82,1213.65 1297.41,1213.65 1298,1213.65 1298.58,1213.65 1299.17,1213.65 1299.76,1213.65 1300.34,1213.65 1300.93,1213.65 1301.52,1213.65 1302.1,1213.65 1302.69,1213.65 1303.27,1213.65 1303.86,1213.65 1304.45,1213.65 1305.03,1213.65 1305.62,1213.65 1306.21,1213.65 1306.79,1213.65 1307.38,1213.65 1307.97,1213.65 1308.55,1213.65 1309.14,1213.65 1309.73,1213.65 1310.31,1213.65 1310.9,1213.65 1311.48,1213.65 1312.07,1213.65 1312.66,1213.65 1313.24,1213.65 1313.83,1213.65 1314.42,1213.65 1315,1213.65 1315.59,1213.65 1316.18,1213.65 1316.76,1213.65 1317.35,1213.65 1317.93,1213.65 1318.52,1213.65 1319.11,1213.65 1319.69,1213.65 1320.28,1213.65 1320.87,1213.65 1321.45,1213.65 1322.04,1213.65 1322.63,1213.65 1323.21,1213.65 1323.8,1213.65 1324.39,1213.65 1324.97,1213.65 1325.56,1213.65 1326.14,1213.65 1326.73,1213.65 1327.32,1213.65 1327.9,1213.65 1328.49,1213.65 1329.08,1213.65 1329.66,1213.65 1330.25,1213.65 1330.84,1213.65 1331.42,1213.65 1332.01,1213.65 1332.6,1213.65 1333.18,1213.65 1333.77,1213.65 1334.35,1213.65 1334.94,1213.65 1335.53,1213.65 1336.11,1213.65 1336.7,1213.65 1337.29,1213.65 1337.87,1213.65 1338.46,1213.65 1339.05,1213.65 1339.63,1213.65 1340.22,1213.65 1340.8,1213.65 1341.39,1213.65 1341.98,1213.65 1342.56,1213.65 1343.15,1213.65 1343.74,1213.65 1344.32,1213.65 1344.91,1213.65 1345.5,1213.65 1346.08,1213.65 1346.67,1213.65 1347.26,1213.65 1347.84,1213.65 1348.43,1213.65 1349.01,1213.65 1349.6,1213.65 1350.19,1213.65 1350.77,1213.65 1351.36,1213.65 1351.95,1213.65 1352.53,1213.65 1353.12,1213.65 1353.71,1213.65 1354.29,1213.65 1354.88,1213.65 1355.47,1213.65 1356.05,1213.65 1356.64,1213.65 1357.22,1213.65 1357.81,1213.65 1358.4,1213.65 1358.98,1213.65 1359.57,1213.65 1360.16,1213.65 1360.74,1213.65 1361.33,1213.65 1361.92,1213.65 1362.5,1213.65 1363.09,1213.65 1363.68,1213.65 1364.26,1213.65 1364.85,1213.65 1365.43,1213.65 1366.02,1213.65 1366.61,1213.65 1367.19,1213.65 1367.78,1213.65 1368.37,1213.65 1368.95,1213.65 1369.54,1213.65 1370.13,1213.65 1370.71,1213.65 1371.3,1213.65 1371.88,1213.65 1372.47,1213.65 1373.06,1213.65 1373.64,1213.65 1374.23,1213.65 1374.82,1213.65 1375.4,1213.65 1375.99,1213.65 1376.58,1213.65 1377.16,1213.65 1377.75,1213.65 1378.34,1213.65 1378.92,1213.65 1379.51,1213.65 1380.09,1213.65 1380.68,1213.65 1381.27,1213.65 1381.85,1213.65 1382.44,1213.65 1383.03,1213.65 1383.61,1213.65 1384.2,1213.65 1384.79,1213.65 1385.37,1213.65 1385.96,1213.65 1386.55,1213.65 1387.13,1213.65 1387.72,1213.65 1388.3,1213.65 1388.89,1213.65 1389.48,1213.65 1390.06,1213.65 1390.65,1213.65 1391.24,1213.65 1391.82,1213.65 1392.41,1213.65 1393,1213.65 1393.58,1213.65 1394.17,1213.65 1394.75,1213.65 1395.34,1213.65 1395.93,1213.65 1396.51,1213.65 1397.1,1213.65 1397.69,1213.65 1398.27,1213.65 1398.86,1213.65 1399.45,1213.65 1400.03,1213.65 1400.62,1213.65 1401.21,1213.65 1401.79,1213.65 1402.38,1213.65 1402.96,1213.65 1403.55,1213.65 1404.14,1213.65 1404.72,1213.65 1405.31,1213.65 1405.9,1213.65 1406.48,1213.65 1407.07,1213.65 1407.66,1213.65 1408.24,1213.65 1408.83,1213.65 1409.42,1213.65 1410,1213.65 1410.59,1213.65 1411.17,1213.65 1411.76,1213.65 1412.35,1213.65 1412.93,1213.65 1413.52,1213.65 1414.11,1213.65 1414.69,1213.65 1415.28,1213.65 1415.87,1213.65 1416.45,1213.65 1417.04,1213.65 1417.63,1213.65 1418.21,1213.65 1418.8,1213.65 1419.38,1213.65 1419.97,1213.65 1420.56,1213.65 1421.14,1213.65 1421.73,1213.65 1422.32,1213.65 1422.9,1213.65 1423.49,1213.65 1424.08,1213.65 1424.66,1213.65 1425.25,1213.65 1425.83,1213.65 1426.42,1213.65 1427.01,1213.65 1427.59,1213.65 1428.18,1213.65 1428.77,1213.65 1429.35,1213.65 1429.94,1213.65 1430.53,1213.65 1431.11,1213.65 1431.7,1213.65 1432.29,1213.65 1432.87,1213.65 1433.46,1213.65 1434.04,1213.65 1434.63,1213.65 1435.22,1213.65 1435.8,1213.65 1436.39,1213.65 1436.98,1213.65 1437.56,1213.65 1438.15,1213.65 1438.74,1213.65 1439.32,1213.65 1439.91,1213.65 1440.5,1213.65 1441.08,1213.65 1441.67,1213.65 1442.25,1213.65 1442.84,1213.65 1443.43,1213.65 1444.01,1213.65 1444.6,1213.65 1445.19,1213.65 1445.77,1213.65 1446.36,1213.65 1446.95,1213.65 1447.53,1213.65 1448.12,1213.65 1448.7,1213.65 1449.29,1213.65 1449.88,1213.65 1450.46,1213.65 1451.05,1213.65 1451.64,1213.65 1452.22,1213.65 1452.81,1213.65 1453.4,1213.65 1453.98,1213.65 1454.57,1213.65 1455.16,1213.65 1455.74,1213.65 1456.33,1213.65 1456.91,1213.65 1457.5,1213.65 1458.09,1213.65 1458.67,1213.65 1459.26,1213.65 1459.85,1213.65 1460.43,1213.65 1461.02,1213.65 1461.61,1213.65 1462.19,1213.65 1462.78,1213.65 1463.37,1213.65 1463.95,1213.65 1464.54,1213.65 1465.12,1213.65 1465.71,1213.65 1466.3,1213.65 1466.88,1213.65 1467.47,1213.65 1468.06,1213.65 1468.64,1213.65 1469.23,1213.65 1469.82,1213.65 1470.4,1213.65 1470.99,1213.65 1471.57,1213.65 1472.16,1213.65 1472.75,1213.65 1473.33,1213.65 1473.92,1213.65 1474.51,1213.65 1475.09,1213.65 1475.68,1213.65 1476.27,1213.65 1476.85,1213.65 1477.44,1213.65 1478.03,1213.65 1478.61,1213.65 1479.2,1213.65 1479.78,1213.65 1480.37,1213.65 1480.96,1213.65 1481.54,1213.65 1482.13,1213.65 1482.72,1213.65 1483.3,1213.65 1483.89,1213.65 1484.48,1213.65 1485.06,1213.65 1485.65,1213.65 1486.24,1213.65 1486.82,1213.65 1487.41,1213.65 1487.99,1213.65 1488.58,1213.65 1489.17,1213.65 1489.75,1213.65 1490.34,1213.65 1490.93,1213.65 1491.51,1213.65 1492.1,1213.65 1492.69,1213.65 1493.27,1213.65 1493.86,1213.65 1494.45,1213.65 1495.03,1213.65 1495.62,1213.65 1496.2,1213.65 1496.79,1213.65 1497.38,1213.65 1497.96,1213.65 1498.55,1213.65 1499.14,1213.65 1499.72,1213.65 1500.31,1213.65 1500.9,1213.65 1501.48,1213.65 1502.07,1213.65 1502.65,1213.65 1503.24,1213.65 1503.83,1213.65 1504.41,1213.65 1505,1213.65 1505.59,1213.65 1506.17,1213.65 1506.76,1213.65 1507.35,1213.65 1507.93,1213.65 1508.52,1213.65 1509.11,1213.65 1509.69,1213.65 1510.28,1213.65 1510.86,1213.65 1511.45,1213.65 1512.04,1213.65 1512.62,1213.65 1513.21,1213.65 1513.8,1213.65 1514.38,1213.65 1514.97,1213.65 1515.56,1213.65 1516.14,1213.65 1516.73,1213.65 1517.32,1213.65 1517.9,1213.65 1518.49,1213.65 1519.07,1213.65 1519.66,1213.65 1520.25,1213.65 1520.83,1213.65 1521.42,1213.65 1522.01,1213.65 1522.59,1213.65 1523.18,1213.65 1523.77,1213.65 1524.35,1213.65 1524.94,1213.65 1525.52,1213.65 1526.11,1213.65 1526.7,1213.65 1527.28,1213.65 1527.87,1213.65 1528.46,1213.65 1529.04,1213.65 1529.63,1213.65 1530.22,1213.65 1530.8,1213.65 1531.39,1213.65 1531.98,1213.65 1532.56,1213.65 1533.15,1213.65 1533.73,1213.65 1534.32,1213.65 1534.91,1213.65 1535.49,1213.65 1536.08,1213.65 1536.67,1213.65 1537.25,1213.65 1537.84,1213.65 1538.43,1213.65 1539.01,1213.65 1539.6,1213.65 1540.19,1213.65 1540.77,1213.65 1541.36,1213.65 1541.94,1213.65 1542.53,1213.65 1543.12,1213.65 1543.7,1213.65 1544.29,1213.65 1544.88,1213.65 1545.46,1213.65 1546.05,1213.65 1546.64,1213.65 1547.22,1213.65 1547.81,1213.65 1548.4,1213.65 1548.98,1213.65 1549.57,1213.65 1550.15,1213.65 1550.74,1213.65 1551.33,1213.65 1551.91,1213.65 1552.5,1213.65 1553.09,1213.65 1553.67,1213.65 1554.26,1213.65 1554.85,1213.65 1555.43,1213.65 1556.02,1213.65 1556.6,1213.65 1557.19,1213.65 1557.78,1213.65 1558.36,1213.65 1558.95,1213.65 1559.54,1213.65 1560.12,1213.65 1560.71,1213.65 1561.3,1213.65 1561.88,1213.65 1562.47,1213.65 1563.06,1213.65 1563.64,1213.65 1564.23,1213.65 1564.81,1213.65 1565.4,1213.65 1565.99,1213.65 1566.57,1213.65 1567.16,1213.65 1567.75,1213.65 1568.33,1213.65 1568.92,1213.65 1569.51,1213.65 1570.09,1213.65 1570.68,1213.65 1571.27,1213.65 1571.85,1213.65 1572.44,1213.65 1573.02,1213.65 1573.61,1213.65 1574.2,1213.65 1574.78,1213.65 1575.37,1213.65 1575.96,1213.65 1576.54,1213.65 1577.13,1213.65 1577.72,1213.65 1578.3,1213.65 1578.89,1213.65 1579.47,1213.65 1580.06,1213.65 1580.65,1213.65 1581.23,1213.65 1581.82,1213.65 1582.41,1213.65 1582.99,1213.65 1583.58,1213.65 1584.17,1213.65 1584.75,1213.65 1585.34,1213.65 1585.93,1213.65 1586.51,1213.65 1587.1,1213.65 1587.68,1213.65 1588.27,1213.65 1588.86,1213.65 1589.44,1213.65 1590.03,1213.65 1590.62,1213.65 1591.2,1213.65 1591.79,1213.65 1592.38,1213.65 1592.96,1213.65 1593.55,1213.65 1594.14,1213.65 1594.72,1213.65 1595.31,1213.65 1595.89,1213.65 1596.48,1213.65 1597.07,1213.65 1597.65,1213.65 1598.24,1213.65 1598.83,1213.65 1599.41,1213.65 1600,1213.65 1600.59,1213.65 1601.17,1213.65 1601.76,1213.65 1602.34,1213.65 1602.93,1213.65 1603.52,1213.65 1604.1,1213.65 1604.69,1213.65 1605.28,1213.65 1605.86,1213.65 1606.45,1213.65 1607.04,1213.65 1607.62,1213.65 1608.21,1213.65 1608.8,1213.65 1609.38,1213.65 1609.97,1213.65 1610.55,1213.65 1611.14,1213.65 1611.73,1213.65 1612.31,1213.65 1612.9,1213.65 1613.49,1213.65 1614.07,1213.65 1614.66,1213.65 1615.25,1213.65 1615.83,1213.65 1616.42,1213.65 1617.01,1213.65 1617.59,1213.65 1618.18,1213.65 1618.76,1213.65 1619.35,1213.65 1619.94,1213.65 1620.52,1213.65 1621.11,1213.65 1621.7,1213.65 1622.28,1213.65 1622.87,1213.65 1623.46,1213.65 1624.04,1213.65 1624.63,1213.65 1625.22,1213.65 1625.8,1213.65 1626.39,1213.65 1626.97,1213.65 1627.56,1213.65 1628.15,1213.65 1628.73,1213.65 1629.32,1213.65 1629.91,1213.65 1630.49,1213.65 1631.08,1213.65 1631.67,1213.65 1632.25,1213.65 1632.84,1213.65 1633.42,1213.65 1634.01,1213.65 1634.6,1213.65 1635.18,1213.65 1635.77,1213.65 1636.36,1213.65 1636.94,1213.65 1637.53,1213.65 1638.12,1213.65 1638.7,1213.65 1639.29,1213.65 1639.88,1213.65 1640.46,1213.65 1641.05,1213.65 1641.63,1213.65 1642.22,1213.65 1642.81,1213.65 1643.39,1213.65 1643.98,1213.65 1644.57,1213.65 1645.15,1213.65 1645.74,1213.65 1646.33,1213.65 1646.91,1213.65 1647.5,1213.65 1648.09,1213.65 1648.67,1213.65 1649.26,1213.65 1649.84,1213.65 1650.43,1213.65 1651.02,1213.65 1651.6,1213.65 1652.19,1213.65 1652.78,1213.65 1653.36,1213.65 1653.95,1213.65 1654.54,1213.65 1655.12,1213.65 1655.71,1213.65 1656.29,1213.65 1656.88,1213.65 1657.47,1213.65 1658.05,1213.65 1658.64,1213.65 1659.23,1213.65 1659.81,1213.65 1660.4,1213.65 1660.99,1213.65 1661.57,1213.65 1662.16,1213.65 1662.75,1213.65 1663.33,1213.65 1663.92,1213.65 1664.5,1213.65 1665.09,1213.65 1665.68,1213.65 1666.26,1213.65 1666.85,1213.65 1667.44,1213.65 1668.02,1213.65 1668.61,1213.65 1669.2,1213.65 1669.78,1213.65 1670.37,1213.65 1670.96,1213.65 1671.54,1213.65 1672.13,1213.65 1672.71,1213.65 1673.3,1213.65 1673.89,1213.65 1674.47,1213.65 1675.06,1213.65 1675.65,1213.65 1676.23,1213.65 1676.82,1213.65 1677.41,1213.65 1677.99,1213.65 1678.58,1213.65 1679.17,1213.65 1679.75,1213.65 1680.34,1213.65 1680.92,1213.65 1681.51,1213.65 1682.1,1213.65 1682.68,1213.65 1683.27,1213.65 1683.86,1213.65 1684.44,1213.65 1685.03,1213.65 1685.62,1213.65 1686.2,1213.65 1686.79,1213.65 1687.37,1213.65 1687.96,1213.65 1688.55,1213.65 1689.13,1213.65 1689.72,1213.65 1690.31,1213.65 1690.89,1213.65 1691.48,1213.65 1692.07,1213.65 1692.65,1213.65 1693.24,1213.65 1693.83,1213.65 1694.41,1213.65 1695,1213.65 1695.58,1213.65 1696.17,1213.65 1696.76,1213.65 1697.34,1213.65 1697.93,1213.65 1698.52,1213.65 1699.1,1213.65 1699.69,1213.65 1700.28,1213.65 1700.86,1213.65 1701.45,1213.65 1702.04,1213.65 1702.62,1213.65 1703.21,1213.65 1703.79,1213.65 1704.38,1213.65 1704.97,1213.65 1705.55,1213.65 1706.14,1213.65 1706.73,1213.65 1707.31,1213.65 1707.9,1213.65 1708.49,1213.65 1709.07,1213.65 1709.66,1213.65 1710.24,1213.65 1710.83,1213.65 1711.42,1213.65 1712,1213.65 1712.59,1213.65 1713.18,1213.65 1713.76,1213.65 1714.35,1213.65 1714.94,1213.65 1715.52,1213.65 1716.11,1213.65 1716.7,1213.65 1717.28,1213.65 1717.87,1213.65 1718.45,1213.65 1719.04,1213.65 1719.63,1213.65 1720.21,1213.65 1720.8,1213.65 1721.39,1213.65 1721.97,1213.65 1722.56,1213.65 1723.15,1213.65 1723.73,1213.65 1724.32,1213.65 1724.91,1213.65 1725.49,1213.65 1726.08,1213.65 1726.66,1213.65 1727.25,1213.65 1727.84,1213.65 1728.42,1213.65 1729.01,1213.65 1729.6,1213.65 1730.18,1213.65 1730.77,1213.65 1731.36,1213.65 1731.94,1213.65 1732.53,1213.65 1733.11,1213.65 1733.7,1213.65 1734.29,1213.65 1734.87,1213.65 1735.46,1213.65 1736.05,1213.65 1736.63,1213.65 1737.22,1213.65 1737.81,1213.65 1738.39,1213.65 1738.98,1213.65 1739.57,1213.65 1740.15,1213.65 1740.74,1213.65 1741.32,1213.65 1741.91,1213.65 1742.5,1213.65 1743.08,1213.65 1743.67,1213.65 1744.26,1213.65 1744.84,1213.65 1745.43,1213.65 1746.02,1213.65 1746.6,1213.65 1747.19,1213.65 1747.78,1213.65 1748.36,1213.65 1748.95,1213.65 1749.53,1213.65 1750.12,1213.65 1750.71,1213.65 1751.29,1213.65 1751.88,1213.65 1752.47,1213.65 1753.05,1213.65 1753.64,1213.65 1754.23,1213.65 1754.81,1213.65 1755.4,1213.65 1755.99,1213.65 1756.57,1213.65 1757.16,1213.65 1757.74,1213.65 1758.33,1213.65 1758.92,1213.65 1759.5,1213.65 1760.09,1213.65 1760.68,1213.65 1761.26,1213.65 1761.85,1213.65 1762.44,1213.65 1763.02,1213.65 1763.61,1213.65 1764.19,1213.65 1764.78,1213.65 1765.37,1213.65 1765.95,1213.65 1766.54,1213.65 1767.13,1213.65 1767.71,1213.65 1768.3,1213.65 1768.89,1213.65 1769.47,1213.65 1770.06,1213.65 1770.65,1213.65 1771.23,1213.65 1771.82,1213.65 1772.4,1213.65 1772.99,1213.65 1773.58,1213.65 1774.16,1213.65 1774.75,1213.65 1775.34,1213.65 1775.92,1213.65 1776.51,1213.65 1777.1,1213.65 1777.68,1213.65 1778.27,1213.65 1778.86,1213.65 1779.44,1213.65 1780.03,1213.65 1780.61,1213.65 1781.2,1213.65 1781.79,1213.65 1782.37,1213.65 1782.96,1213.65 1783.55,1213.65 1784.13,1213.65 1784.72,1213.65 1785.31,1213.65 1785.89,1213.65 1786.48,1213.65 1787.06,1213.65 1787.65,1213.65 1788.24,1213.65 1788.82,1213.65 1789.41,1213.65 1790,1213.65 1790.58,1213.65 1791.17,1213.65 1791.76,1213.65 1792.34,1213.65 1792.93,1213.65 1793.52,1213.65 1794.1,1213.65 1794.69,1213.65 1795.27,1213.65 1795.86,1213.65 1796.45,1213.65 1797.03,1213.65 1797.62,1213.65 1798.21,1213.65 1798.79,1213.65 1799.38,1213.65 1799.97,1213.65 1800.55,1213.65 1801.14,1213.65 1801.73,1213.65 1802.31,1213.65 1802.9,1213.65 1803.48,1213.65 1804.07,1213.65 1804.66,1213.65 1805.24,1213.65 1805.83,1213.65 1806.42,1213.65 1807,1213.65 1807.59,1213.65 1808.18,1213.65 1808.76,1213.65 1809.35,1213.65 1809.94,1213.65 1810.52,1213.65 1811.11,1213.65 1811.69,1213.65 1812.28,1213.65 1812.87,1213.65 1813.45,1213.65 1814.04,1213.65 1814.63,1213.65 1815.21,1213.65 1815.8,1213.65 1816.39,1213.65 1816.97,1213.65 1817.56,1213.65 1818.14,1213.65 1818.73,1213.65 1819.32,1213.65 1819.9,1213.65 1820.49,1213.65 1821.08,1213.65 1821.66,1213.65 1822.25,1213.65 1822.84,1213.65 1823.42,1213.65 1824.01,1213.65 1824.6,1213.65 1825.18,1213.65 1825.77,1213.65 1826.35,1213.65 1826.94,1213.65 1827.53,1213.65 1828.11,1213.65 1828.7,1213.65 1829.29,1213.65 1829.87,1213.65 1830.46,1213.65 1831.05,1213.65 1831.63,1213.65 1832.22,1213.65 1832.81,1213.65 1833.39,1213.65 1833.98,1213.65 1834.56,1213.65 1835.15,1213.65 1835.74,1213.65 1836.32,1213.65 1836.91,1213.65 1837.5,1213.65 1838.08,1213.65 1838.67,1213.65 1839.26,1213.65 1839.84,1213.65 1840.43,1213.65 1841.01,1213.65 1841.6,1213.65 1842.19,1213.65 1842.77,1213.65 1843.36,1213.65 1843.95,1213.65 1844.53,1213.65 1845.12,1213.65 1845.71,1213.65 1846.29,1213.65 1846.88,1213.65 1847.47,1213.65 1848.05,1213.65 1848.64,1213.65 1849.22,1213.65 1849.81,1213.65 1850.4,1213.65 1850.98,1213.65 1851.57,1213.65 1852.16,1213.65 1852.74,1213.65 1853.33,1213.65 1853.92,1213.65 1854.5,1213.65 1855.09,1213.65 1855.68,1213.65 1856.26,1213.65 1856.85,1213.65 1857.43,1213.65 1858.02,1213.65 1858.61,1213.65 1859.19,1213.65 1859.78,1213.65 1860.37,1213.65 1860.95,1213.65 1861.54,1213.65 1862.13,1213.65 1862.71,1213.65 1863.3,1213.65 1863.88,1213.65 1864.47,1213.65 1865.06,1213.65 1865.64,1213.65 1866.23,1213.65 1866.82,1213.65 1867.4,1213.65 1867.99,1213.65 1868.58,1213.65 1869.16,1213.65 1869.75,1213.65 1870.34,1213.65 1870.92,1213.65 1871.51,1213.65 1872.09,1213.65 1872.68,1213.65 1873.27,1213.65 1873.85,1213.65 1874.44,1213.65 1875.03,1213.65 1875.61,1213.65 1876.2,1213.65 1876.79,1213.65 1877.37,1213.65 1877.96,1213.65 1878.55,1213.65 1879.13,1213.65 1879.72,1213.65 1880.3,1213.65 1880.89,1213.65 1881.48,1213.65 1882.06,1213.65 1882.65,1213.65 1883.24,1213.65 1883.82,1213.65 1884.41,1213.65 1885,1213.65 1885.58,1213.65 1886.17,1213.65 1886.76,1213.65 1887.34,1213.65 1887.93,1213.65 1888.51,1213.65 1889.1,1213.65 1889.69,1213.65 1890.27,1213.65 1890.86,1213.65 1891.45,1213.65 1892.03,1213.65 1892.62,1213.65 1893.21,1213.65 1893.79,1213.65 1894.38,1213.65 1894.96,1213.65 1895.55,1213.65 1896.14,1213.65 1896.72,1213.65 1897.31,1213.65 1897.9,1213.65 1898.48,1213.65 1899.07,1213.65 1899.66,1213.65 1900.24,1213.65 1900.83,1213.65 1901.42,1213.65 1902,1213.65 1902.59,1213.65 1903.17,1213.65 1903.76,1213.65 1904.35,1213.65 1904.93,1213.65 1905.52,1213.65 1906.11,1213.65 1906.69,1213.65 1907.28,1213.65 1907.87,1213.65 1908.45,1213.65 1909.04,1213.65 1909.63,1213.65 1910.21,1213.65 1910.8,1213.65 1911.38,1213.65 1911.97,1213.65 1912.56,1213.65 1913.14,1213.65 1913.73,1213.65 1914.32,1213.65 1914.9,1213.65 1915.49,1213.65 1916.08,1213.65 1916.66,1213.65 1917.25,1213.65 1917.83,1213.65 1918.42,1213.65 1919.01,1213.65 1919.59,1213.65 1920.18,1213.65 1920.77,1213.65 1921.35,1213.65 1921.94,1213.65 1922.53,1213.65 1923.11,1213.65 1923.7,1213.65 1924.29,1213.65 1924.87,1213.65 1925.46,1213.65 1926.04,1213.65 1926.63,1213.65 1927.22,1213.65 1927.8,1213.65 1928.39,1213.65 1928.98,1213.65 1929.56,1213.65 1930.15,1213.65 1930.74,1213.65 1931.32,1213.65 1931.91,1213.65 1932.5,1213.65 1933.08,1213.65 1933.67,1213.65 1934.25,1213.65 1934.84,1213.65 1935.43,1213.65 1936.01,1213.65 1936.6,1213.65 1937.19,1213.65 1937.77,1213.65 1938.36,1213.65 1938.95,1213.65 1939.53,1213.65 1940.12,1213.65 1940.71,1213.65 1941.29,1213.65 1941.88,1213.65 1942.46,1213.65 1943.05,1213.65 1943.64,1213.65 1944.22,1213.65 1944.81,1213.65 1945.4,1213.65 1945.98,1213.65 1946.57,1213.65 1947.16,1213.65 1947.74,1213.65 1948.33,1213.65 1948.91,1213.65 1949.5,1213.65 1950.09,1213.65 1950.67,1213.65 1951.26,1213.65 1951.85,1213.65 1952.43,1213.65 1953.02,1213.65 1953.61,1213.65 1954.19,1213.65 1954.78,1213.65 1955.37,1213.65 1955.95,1213.65 1956.54,1213.65 1957.12,1213.65 1957.71,1213.65 1958.3,1213.65 1958.88,1213.65 1959.47,1213.65 1960.06,1213.65 1960.64,1213.65 1961.23,1213.65 1961.82,1213.65 1962.4,1213.65 1962.99,1213.65 1963.58,1213.65 1964.16,1213.65 1964.75,1213.65 1965.33,1213.65 1965.92,1213.65 1966.51,1213.65 1967.09,1213.65 1967.68,1213.65 1968.27,1213.65 1968.85,1213.65 1969.44,1213.65 1970.03,1213.65 1970.61,1213.65 1971.2,1213.65 1971.78,1213.65 1972.37,1213.65 1972.96,1213.65 1973.54,1213.65 1974.13,1213.65 1974.72,1213.65 1975.3,1213.65 1975.89,1213.65 1976.48,1213.65 1977.06,1213.65 1977.65,1213.65 1978.24,1213.65 1978.82,1213.65 1979.41,1213.65 1979.99,1213.65 1980.58,1213.65 1981.17,1213.65 1981.75,1213.65 1982.34,1213.65 1982.93,1213.65 1983.51,1213.65 1984.1,1213.65 1984.69,1213.65 1985.27,1213.65 1985.86,1213.65 1986.45,1213.65 1987.03,1213.65 1987.62,1213.65 1988.2,1213.65 1988.79,1213.65 1989.38,1213.65 1989.96,1213.65 1990.55,1213.65 1991.14,1213.65 1991.72,1213.65 1992.31,1213.65 1992.9,1213.65 1993.48,1213.65 1994.07,1213.65 1994.65,1213.65 1995.24,1213.65 1995.83,1213.65 1996.41,1213.65 1997,1213.65 1997.59,1213.65 1998.17,1213.65 1998.76,1213.65 1999.35,1213.65 1999.93,1213.65 2000.52,1213.65 2001.11,1213.65 2001.69,1213.65 2002.28,1213.65 2002.86,1213.65 2003.45,1213.65 2004.04,1213.65 2004.62,1213.65 2005.21,1213.65 2005.8,1213.65 2006.38,1213.65 2006.97,1213.65 2007.56,1213.65 2008.14,1213.65 2008.73,1213.65 2009.32,1213.65 2009.9,1213.65 2010.49,1213.65 2011.07,1213.65 2011.66,1213.65 2012.25,1213.65 2012.83,1213.65 2013.42,1213.65 2014.01,1213.65 2014.59,1213.65 2015.18,1213.65 2015.77,1213.65 2016.35,1213.65 2016.94,1213.65 2017.53,1213.65 2018.11,1213.65 2018.7,1213.65 2019.28,1213.65 2019.87,1213.65 2020.46,1213.65 2021.04,1213.65 2021.63,1213.65 2022.22,1213.65 2022.8,1213.65 2023.39,1213.65 2023.98,1213.65 2024.56,1213.65 2025.15,1213.65 2025.73,1213.65 2026.32,1213.65 2026.91,1213.65 2027.49,1213.65 2028.08,1213.65 2028.67,1213.65 2029.25,1213.65 2029.84,1213.65 2030.43,1213.65 2031.01,1213.65 2031.6,1213.65 2032.19,1213.65 2032.77,1213.65 2033.36,1213.65 2033.94,1213.65 2034.53,1213.65 2035.12,1213.65 2035.7,1213.65 2036.29,1213.65 2036.88,1213.65 2037.46,1213.65 2038.05,1213.65 2038.64,1213.65 2039.22,1213.65 2039.81,1213.65 2040.4,1213.65 2040.98,1213.65 2041.57,1213.65 2042.15,1213.65 2042.74,1213.65 2043.33,1213.65 2043.91,1213.65 2044.5,1213.65 2045.09,1213.65 2045.67,1213.65 2046.26,1213.65 2046.85,1213.65 2047.43,1213.65 2048.02,1213.65 2048.6,1213.65 2049.19,1213.65 2049.78,1213.65 2050.36,1213.65 2050.95,1213.65 2051.54,1213.65 2052.12,1213.65 2052.71,1213.65 2053.3,1213.65 2053.88,1213.65 2054.47,1213.65 2055.06,1213.65 2055.64,1213.65 2056.23,1213.65 2056.81,1213.65 2057.4,1213.65 2057.99,1213.65 2058.57,1213.65 2059.16,1213.65 2059.75,1213.65 2060.33,1213.65 2060.92,1213.65 2061.51,1213.65 2062.09,1213.65 2062.68,1213.65 2063.27,1213.65 2063.85,1213.65 2064.44,1213.65 2065.02,1213.65 2065.61,1213.65 2066.2,1213.65 2066.78,1213.65 2067.37,1213.65 2067.96,1213.65 2068.54,1213.65 2069.13,1213.65 2069.72,1213.65 2070.3,1213.65 2070.89,1213.65 2071.48,1213.65 2072.06,1213.65 2072.65,1213.65 2073.23,1213.65 2073.82,1213.65 2074.41,1213.65 2074.99,1213.65 2075.58,1213.65 2076.17,1213.65 2076.75,1213.65 2077.34,1213.65 2077.93,1213.65 2078.51,1213.65 2079.1,1213.65 2079.68,1213.65 2080.27,1213.65 2080.86,1213.65 2081.44,1213.65 2082.03,1213.65 2082.62,1213.65 2083.2,1213.65 2083.79,1213.65 2084.38,1213.65 2084.96,1213.65 2085.55,1213.65 2086.14,1213.65 2086.72,1213.65 2087.31,1213.65 2087.89,1213.65 2088.48,1213.65 2089.07,1213.65 2089.65,1213.65 2090.24,1213.65 2090.83,1213.65 2091.41,1213.65 2092,1213.65 2092.59,1213.65 2093.17,1213.65 2093.76,1213.65 2094.35,1213.65 2094.93,1213.65 2095.52,1213.65 2096.1,1213.65 2096.69,1213.65 2097.28,1213.65 2097.86,1213.65 2098.45,1213.65 2099.04,1213.65 2099.62,1213.65 2100.21,1213.65 2100.8,1213.65 2101.38,1213.65 2101.97,1213.65 2102.55,1213.65 2103.14,1213.65 2103.73,1213.65 2104.31,1213.65 2104.9,1213.65 2105.49,1213.65 2106.07,1213.65 2106.66,1213.65 2107.25,1213.65 2107.83,1213.65 2108.42,1213.65 2109.01,1213.65 2109.59,1213.65 2110.18,1213.65 2110.76,1213.65 2111.35,1213.65 2111.94,1213.65 2112.52,1213.65 2113.11,1213.65 2113.7,1213.65 2114.28,1213.65 2114.87,1213.65 2115.46,1213.65 2116.04,1213.65 2116.63,1213.65 2117.22,1213.65 2117.8,1213.65 2118.39,1213.65 2118.97,1213.65 2119.56,1213.65 2120.15,1213.65 2120.73,1213.65 2121.32,1213.65 2121.91,1213.65 2122.49,1213.65 2123.08,1213.65 2123.67,1213.65 2124.25,1213.65 2124.84,1213.65 2125.42,1213.65 2126.01,1213.65 2126.6,1213.65 2127.18,1213.65 2127.77,1213.65 2128.36,1213.65 2128.94,1213.65 2129.53,1213.65 2130.12,1213.65 2130.7,1213.65 2131.29,1213.65 2131.88,1213.65 2132.46,1213.65 2133.05,1213.65 2133.63,1213.65 2134.22,1213.65 2134.81,1213.65 2135.39,1213.65 2135.98,1213.65 2136.57,1213.65 2137.15,1213.65 2137.74,1213.65 2138.33,1213.65 2138.91,1213.65 2139.5,1213.65 2140.09,1213.65 2140.67,1213.65 2141.26,1213.65 2141.84,1213.65 2142.43,1213.65 2143.02,1213.65 2143.6,1213.65 2144.19,1213.65 2144.78,1213.65 2145.36,1213.65 2145.95,1213.65 2146.54,1213.65 2147.12,1213.65 2147.71,1213.65 2148.3,1213.65 2148.88,1213.65 2149.47,1213.65 2150.05,1213.65 2150.64,1213.65 2151.23,1213.65 2151.81,1213.65 2152.4,1213.65 2152.99,1213.65 2153.57,1213.65 2154.16,1213.65 2154.75,1213.65 2155.33,1213.65 2155.92,1213.65 2156.5,1213.65 2157.09,1213.65 2157.68,1213.65 2158.26,1213.65 \"/>\n<path clip-path=\"url(#clip922)\" d=\"M986.025 1213.4 L986.612 1213.4 L987.198 1213.4 L987.785 1213.4 L988.371 1213.4 L988.957 1213.4 L989.544 1213.4 L990.13 1213.4 L990.717 1213.4 L991.303 1213.4 L991.889 1213.4 L992.476 1213.4 L993.062 1213.4 L993.649 1213.4 L994.235 1213.4 L994.822 1213.4 L995.408 1213.4 L995.994 1213.4 L996.581 1213.4 L997.167 1213.4 L997.754 1213.4 L998.34 1213.4 L998.926 1213.4 L999.513 1213.4 L1000.1 1213.4 L1000.69 1213.4 L1001.27 1213.4 L1001.86 1213.4 L1002.44 1213.4 L1003.03 1213.4 L1003.62 1213.4 L1004.2 1213.4 L1004.79 1213.4 L1005.38 1213.4 L1005.96 1213.4 L1006.55 1213.4 L1007.14 1213.4 L1007.72 1213.4 L1008.31 1213.4 L1008.9 1213.4 L1009.48 1213.4 L1010.07 1213.4 L1010.65 1213.4 L1011.24 1213.4 L1011.83 1213.4 L1012.41 1213.4 L1013 1213.4 L1013.59 1213.4 L1014.17 1213.4 L1014.76 1213.4 L1015.35 1213.4 L1015.93 1213.4 L1016.52 1213.4 L1017.11 1213.4 L1017.69 1213.4 L1018.28 1213.4 L1018.86 1213.4 L1019.45 1213.4 L1020.04 1213.4 L1020.62 1213.4 L1021.21 1213.4 L1021.8 1213.4 L1022.38 1213.4 L1022.97 1213.4 L1023.56 1213.4 L1024.14 1213.4 L1024.73 1213.4 L1025.32 1213.4 L1025.9 1213.4 L1026.49 1213.4 L1027.07 1213.4 L1027.66 1213.4 L1028.25 1213.4 L1028.83 1213.4 L1029.42 1213.4 L1030.01 1213.4 L1030.59 1213.4 L1031.18 1213.4 L1031.77 1213.4 L1032.35 1213.4 L1032.94 1213.4 L1033.52 1213.4 L1034.11 1213.4 L1034.7 1213.4 L1035.28 1213.4 L1035.87 1213.4 L1036.46 1213.4 L1037.04 1213.4 L1037.63 1213.4 L1038.22 1213.4 L1038.8 1213.4 L1039.39 1213.4 L1039.98 1213.4 L1040.56 1213.4 L1041.15 1213.4 L1041.73 1213.4 L1042.32 1213.4 L1042.91 1213.4 L1043.49 1213.4 L1044.08 1213.4 L1044.67 1213.4 L1045.25 1213.4 L1045.84 1213.4 L1046.43 1213.4 L1047.01 1213.4 L1047.6 1213.4 L1048.19 1213.4 L1048.77 1213.4 L1049.36 1213.4 L1049.94 1213.4 L1050.53 1213.4 L1051.12 1213.4 L1051.7 1213.4 L1052.29 1213.4 L1052.88 1213.4 L1053.46 1213.4 L1054.05 1213.4 L1054.64 1213.4 L1055.22 1213.4 L1055.81 1213.4 L1056.39 1213.4 L1056.98 1213.4 L1057.57 1213.4 L1058.15 1213.4 L1058.74 1213.4 L1059.33 1213.4 L1059.91 1213.4 L1060.5 1213.4 L1061.09 1213.4 L1061.67 1213.4 L1062.26 1213.4 L1062.85 1213.4 L1063.43 1213.4 L1064.02 1213.4 L1064.6 1213.4 L1065.19 1213.4 L1065.78 1213.4 L1066.36 1213.4 L1066.95 1213.4 L1067.54 1213.4 L1068.12 1213.4 L1068.71 1213.4 L1069.3 1213.4 L1069.88 1213.4 L1070.47 1213.4 L1071.06 1213.4 L1071.64 1213.4 L1072.23 1213.4 L1072.81 1213.4 L1073.4 1213.4 L1073.99 1213.4 L1074.57 1213.4 L1075.16 1213.4 L1075.75 1213.4 L1076.33 1213.4 L1076.92 1213.4 L1077.51 1213.4 L1078.09 1213.4 L1078.68 1213.4 L1079.26 1213.4 L1079.85 1213.4 L1080.44 1213.4 L1081.02 1213.4 L1081.61 1213.4 L1082.2 1213.4 L1082.78 1213.4 L1083.37 1213.4 L1083.96 1213.4 L1084.54 1213.4 L1085.13 1213.4 L1085.72 1213.4 L1086.3 1213.4 L1086.89 1213.4 L1087.47 1213.4 L1088.06 1213.4 L1088.65 1213.4 L1089.23 1213.4 L1089.82 1213.4 L1090.41 1213.4 L1090.99 1213.4 L1091.58 1213.4 L1092.17 1213.4 L1092.75 1213.4 L1093.34 1213.4 L1093.93 1213.4 L1094.51 1213.4 L1095.1 1213.4 L1095.68 1213.4 L1096.27 1213.4 L1096.86 1213.4 L1097.44 1213.4 L1098.03 1213.4 L1098.62 1213.4 L1099.2 1213.4 L1099.79 1213.4 L1100.38 1213.4 L1100.96 1213.4 L1101.55 1213.4 L1102.14 1213.4 L1102.72 1213.4 L1103.31 1213.4 L1103.89 1213.4 L1104.48 1213.4 L1105.07 1213.4 L1105.65 1213.4 L1106.24 1213.4 L1106.83 1213.4 L1107.41 1213.4 L1108 1213.4 L1108.59 1213.4 L1109.17 1213.4 L1109.76 1213.4 L1110.34 1213.4 L1110.93 1213.4 L1111.52 1213.4 L1112.1 1213.4 L1112.69 1213.4 L1113.28 1213.4 L1113.86 1213.4 L1114.45 1213.4 L1115.04 1213.4 L1115.62 1213.4 L1116.21 1213.4 L1116.8 1213.4 L1117.38 1213.4 L1117.97 1213.4 L1118.55 1213.4 L1119.14 1213.4 L1119.73 1213.4 L1120.31 1213.4 L1120.9 1213.4 L1121.49 1213.4 L1122.07 1213.4 L1122.66 1213.4 L1123.25 1213.4 L1123.83 1213.4 L1124.42 1213.4 L1125.01 1213.4 L1125.59 1213.4 L1126.18 1213.4 L1126.76 1213.4 L1127.35 1213.4 L1127.94 1213.4 L1128.52 1213.4 L1129.11 1213.4 L1129.7 1213.4 L1130.28 1213.4 L1130.87 1213.4 L1131.46 1213.4 L1132.04 1213.4 L1132.63 1213.4 L1133.21 1213.4 L1133.8 1213.4 L1134.39 1213.4 L1134.97 1213.4 L1135.56 1213.4 L1136.15 1213.4 L1136.73 1213.4 L1137.32 1213.4 L1137.91 1213.4 L1138.49 1213.4 L1139.08 1213.4 L1139.67 1213.4 L1140.25 1213.4 L1140.84 1213.4 L1141.42 1213.4 L1142.01 1213.4 L1142.6 1213.4 L1143.18 1213.4 L1143.77 1213.4 L1144.36 1213.4 L1144.94 1213.4 L1145.53 1213.4 L1146.12 1213.4 L1146.7 1213.4 L1147.29 1213.4 L1147.88 1213.4 L1148.46 1213.4 L1149.05 1213.4 L1149.63 1213.4 L1150.22 1213.4 L1150.81 1213.4 L1151.39 1213.4 L1151.98 1213.4 L1152.57 1213.4 L1153.15 1213.4 L1153.74 1213.4 L1154.33 1213.4 L1154.91 1213.4 L1155.5 1213.4 L1156.09 1213.4 L1156.67 1213.4 L1157.26 1213.4 L1157.84 1213.4 L1158.43 1213.4 L1159.02 1213.4 L1159.6 1213.4 L1160.19 1213.4 L1160.78 1213.4 L1161.36 1213.4 L1161.95 1213.4 L1162.54 1213.4 L1163.12 1213.4 L1163.71 1213.4 L1164.29 1213.4 L1164.88 1213.4 L1165.47 1213.4 L1166.05 1213.4 L1166.64 1213.4 L1167.23 1213.4 L1167.81 1213.4 L1168.4 1213.4 L1168.99 1213.4 L1169.57 1213.4 L1170.16 1213.4 L1170.75 1213.4 L1171.33 1213.4 L1171.92 1213.4 L1172.5 1213.4 L1173.09 1213.4 L1173.68 1213.4 L1174.26 1213.4 L1174.85 1213.4 L1175.44 1213.4 L1176.02 1213.4 L1176.61 1213.4 L1177.2 1213.4 L1177.78 1213.4 L1178.37 1213.4 L1178.96 1213.4 L1179.54 1213.4 L1180.13 1213.4 L1180.71 1213.4 L1181.3 1213.4 L1181.89 1213.4 L1182.47 1213.4 L1183.06 1213.4 L1183.65 1213.4 L1184.23 1213.4 L1184.82 1213.4 L1185.41 1213.4 L1185.99 1213.4 L1186.58 1213.4 L1187.16 1213.4 L1187.75 1213.4 L1188.34 1213.4 L1188.92 1213.4 L1189.51 1213.4 L1190.1 1213.4 L1190.68 1213.4 L1191.27 1213.4 L1191.86 1213.4 L1192.44 1213.4 L1193.03 1213.4 L1193.62 1213.4 L1194.2 1213.4 L1194.79 1213.4 L1195.37 1213.4 L1195.96 1213.4 L1196.55 1213.4 L1197.13 1213.4 L1197.72 1213.4 L1198.31 1213.4 L1198.89 1213.4 L1199.48 1213.4 L1200.07 1213.4 L1200.65 1213.4 L1201.24 1213.4 L1201.83 1213.4 L1202.41 1213.4 L1203 1213.4 L1203.58 1213.4 L1204.17 1213.4 L1204.76 1213.4 L1205.34 1213.4 L1205.93 1213.4 L1206.52 1213.4 L1207.1 1213.4 L1207.69 1213.4 L1208.28 1213.4 L1208.86 1213.4 L1209.45 1213.4 L1210.03 1213.4 L1210.62 1213.4 L1211.21 1213.4 L1211.79 1213.4 L1212.38 1213.4 L1212.97 1213.4 L1213.55 1213.4 L1214.14 1213.4 L1214.73 1213.4 L1215.31 1213.4 L1215.9 1213.4 L1216.49 1213.4 L1217.07 1213.4 L1217.66 1213.4 L1218.24 1213.4 L1218.83 1213.4 L1219.42 1213.4 L1220 1213.4 L1220.59 1213.4 L1221.18 1213.4 L1221.76 1213.4 L1222.35 1213.4 L1222.94 1213.4 L1223.52 1213.4 L1224.11 1213.4 L1224.7 1213.4 L1225.28 1213.4 L1225.87 1213.4 L1226.45 1213.4 L1227.04 1213.4 L1227.63 1213.4 L1228.21 1213.4 L1228.8 1213.4 L1229.39 1213.4 L1229.97 1213.4 L1230.56 1213.4 L1231.15 1213.4 L1231.73 1213.4 L1232.32 1213.4 L1232.91 1213.4 L1233.49 1213.4 L1234.08 1213.4 L1234.66 1213.4 L1235.25 1213.4 L1235.84 1213.4 L1236.42 1213.4 L1237.01 1213.4 L1237.6 1213.4 L1238.18 1213.4 L1238.77 1213.4 L1239.36 1213.4 L1239.94 1213.4 L1240.53 1213.4 L1241.11 1213.4 L1241.7 1213.4 L1242.29 1213.4 L1242.87 1213.4 L1243.46 1213.4 L1244.05 1213.4 L1244.63 1213.4 L1245.22 1213.4 L1245.81 1213.4 L1246.39 1213.4 L1246.98 1213.4 L1247.57 1213.4 L1248.15 1213.4 L1248.74 1213.4 L1249.32 1213.4 L1249.91 1213.4 L1250.5 1213.4 L1251.08 1213.4 L1251.67 1213.4 L1252.26 1213.4 L1252.84 1213.4 L1253.43 1213.4 L1254.02 1213.4 L1254.6 1213.4 L1255.19 1213.4 L1255.78 1213.4 L1256.36 1213.4 L1256.95 1213.4 L1257.53 1213.4 L1258.12 1213.4 L1258.71 1213.4 L1259.29 1213.4 L1259.88 1213.4 L1260.47 1213.4 L1261.05 1213.4 L1261.64 1213.4 L1262.23 1213.4 L1262.81 1213.4 L1263.4 1213.4 L1263.98 1213.4 L1264.57 1213.4 L1265.16 1213.4 L1265.74 1213.4 L1266.33 1213.4 L1266.92 1213.4 L1267.5 1213.4 L1268.09 1213.4 L1268.68 1213.4 L1269.26 1213.4 L1269.85 1213.4 L1270.44 1213.4 L1271.02 1213.4 L1271.61 1213.4 L1272.19 1213.4 L1272.78 1213.4 L1273.37 1213.4 L1273.95 1213.4 L1274.54 1213.4 L1275.13 1213.4 L1275.71 1213.4 L1276.3 1213.4 L1276.89 1213.4 L1277.47 1213.4 L1278.06 1213.4 L1278.65 1213.4 L1279.23 1213.4 L1279.82 1213.4 L1280.4 1213.4 L1280.99 1213.4 L1281.58 1213.4 L1282.16 1213.4 L1282.75 1213.4 L1283.34 1213.4 L1283.92 1213.4 L1284.51 1213.4 L1285.1 1213.4 L1285.68 1213.4 L1286.27 1213.4 L1286.86 1213.4 L1287.44 1213.4 L1288.03 1213.4 L1288.61 1213.4 L1289.2 1213.4 L1289.79 1213.4 L1290.37 1213.4 L1290.96 1213.4 L1291.55 1213.4 L1292.13 1213.4 L1292.72 1213.4 L1293.31 1213.4 L1293.89 1213.4 L1294.48 1213.4 L1295.06 1213.4 L1295.65 1213.4 L1296.24 1213.4 L1296.82 1213.4 L1297.41 1213.4 L1298 1213.4 L1298.58 1213.4 L1299.17 1213.4 L1299.76 1213.4 L1300.34 1213.4 L1300.93 1213.4 L1301.52 1213.4 L1302.1 1213.4 L1302.69 1213.4 L1303.27 1213.4 L1303.86 1213.4 L1304.45 1213.4 L1305.03 1213.4 L1305.62 1213.4 L1306.21 1213.4 L1306.79 1213.4 L1307.38 1213.4 L1307.97 1213.4 L1308.55 1213.4 L1309.14 1213.4 L1309.73 1213.4 L1310.31 1213.4 L1310.9 1213.4 L1311.48 1213.4 L1312.07 1213.4 L1312.66 1213.4 L1313.24 1213.4 L1313.83 1213.4 L1314.42 1213.4 L1315 1213.4 L1315.59 1213.4 L1316.18 1213.4 L1316.76 1213.4 L1317.35 1213.4 L1317.93 1213.4 L1318.52 1213.4 L1319.11 1213.4 L1319.69 1213.4 L1320.28 1213.4 L1320.87 1213.4 L1321.45 1213.4 L1322.04 1213.4 L1322.63 1213.4 L1323.21 1213.4 L1323.8 1213.4 L1324.39 1213.4 L1324.97 1213.4 L1325.56 1213.4 L1326.14 1213.4 L1326.73 1213.4 L1327.32 1213.4 L1327.9 1213.4 L1328.49 1213.4 L1329.08 1213.4 L1329.66 1213.4 L1330.25 1213.4 L1330.84 1213.4 L1331.42 1213.4 L1332.01 1213.4 L1332.6 1213.4 L1333.18 1213.4 L1333.77 1213.4 L1334.35 1213.4 L1334.94 1213.4 L1335.53 1213.4 L1336.11 1213.4 L1336.7 1213.4 L1337.29 1213.4 L1337.87 1213.4 L1338.46 1213.4 L1339.05 1213.4 L1339.63 1213.4 L1340.22 1213.4 L1340.8 1213.4 L1341.39 1213.4 L1341.98 1213.4 L1342.56 1213.4 L1343.15 1213.4 L1343.74 1213.4 L1344.32 1213.4 L1344.91 1213.4 L1345.5 1213.4 L1346.08 1213.4 L1346.67 1213.4 L1347.26 1213.4 L1347.84 1213.4 L1348.43 1213.4 L1349.01 1213.4 L1349.6 1213.4 L1350.19 1213.4 L1350.77 1213.4 L1351.36 1213.4 L1351.95 1213.4 L1352.53 1213.4 L1353.12 1213.4 L1353.71 1213.4 L1354.29 1213.4 L1354.88 1213.4 L1355.47 1213.4 L1356.05 1213.4 L1356.64 1213.4 L1357.22 1213.4 L1357.81 1213.4 L1358.4 1213.4 L1358.98 1213.4 L1359.57 1213.4 L1360.16 1213.4 L1360.74 1213.4 L1361.33 1213.4 L1361.92 1213.4 L1362.5 1213.4 L1363.09 1213.4 L1363.68 1213.4 L1364.26 1213.4 L1364.85 1213.4 L1365.43 1213.4 L1366.02 1213.4 L1366.61 1213.4 L1367.19 1213.4 L1367.78 1213.4 L1368.37 1213.4 L1368.95 1213.4 L1369.54 1213.4 L1370.13 1213.4 L1370.71 1213.4 L1371.3 1213.4 L1371.88 1213.4 L1372.47 1213.4 L1373.06 1213.4 L1373.64 1213.4 L1374.23 1213.4 L1374.82 1213.4 L1375.4 1213.4 L1375.99 1213.4 L1376.58 1213.4 L1377.16 1213.4 L1377.75 1213.4 L1378.34 1213.4 L1378.92 1213.4 L1379.51 1213.4 L1380.09 1213.4 L1380.68 1213.4 L1381.27 1213.4 L1381.85 1213.4 L1382.44 1213.4 L1383.03 1213.4 L1383.61 1213.4 L1384.2 1213.4 L1384.79 1213.4 L1385.37 1213.4 L1385.96 1213.4 L1386.55 1213.4 L1387.13 1213.4 L1387.72 1213.4 L1388.3 1213.4 L1388.89 1213.4 L1389.48 1213.4 L1390.06 1213.4 L1390.65 1213.4 L1391.24 1213.4 L1391.82 1213.4 L1392.41 1213.4 L1393 1213.4 L1393.58 1213.4 L1394.17 1213.4 L1394.75 1213.4 L1395.34 1213.4 L1395.93 1213.4 L1396.51 1213.4 L1397.1 1213.4 L1397.69 1213.4 L1398.27 1213.4 L1398.86 1213.4 L1399.45 1213.4 L1400.03 1213.4 L1400.62 1213.4 L1401.21 1213.4 L1401.79 1213.4 L1402.38 1213.4 L1402.96 1213.4 L1403.55 1213.4 L1404.14 1213.4 L1404.72 1213.4 L1405.31 1213.4 L1405.9 1213.4 L1406.48 1213.4 L1407.07 1213.4 L1407.66 1213.4 L1408.24 1213.4 L1408.83 1213.4 L1409.42 1213.4 L1410 1213.4 L1410.59 1213.4 L1411.17 1213.4 L1411.76 1213.4 L1412.35 1213.4 L1412.93 1213.4 L1413.52 1213.4 L1414.11 1213.4 L1414.69 1213.4 L1415.28 1213.4 L1415.87 1213.4 L1416.45 1213.4 L1417.04 1213.4 L1417.63 1213.4 L1418.21 1213.4 L1418.8 1213.4 L1419.38 1213.4 L1419.97 1213.4 L1420.56 1213.4 L1421.14 1213.4 L1421.73 1213.4 L1422.32 1213.4 L1422.9 1213.4 L1423.49 1213.4 L1424.08 1213.4 L1424.66 1213.4 L1425.25 1213.4 L1425.83 1213.4 L1426.42 1213.4 L1427.01 1213.4 L1427.59 1213.4 L1428.18 1213.4 L1428.77 1213.4 L1429.35 1213.4 L1429.94 1213.4 L1430.53 1213.4 L1431.11 1213.4 L1431.7 1213.4 L1432.29 1213.4 L1432.87 1213.4 L1433.46 1213.4 L1434.04 1213.4 L1434.63 1213.4 L1435.22 1213.4 L1435.8 1213.4 L1436.39 1213.4 L1436.98 1213.4 L1437.56 1213.4 L1438.15 1213.4 L1438.74 1213.4 L1439.32 1213.4 L1439.91 1213.4 L1440.5 1213.4 L1441.08 1213.4 L1441.67 1213.4 L1442.25 1213.4 L1442.84 1213.4 L1443.43 1213.4 L1444.01 1213.4 L1444.6 1213.4 L1445.19 1213.4 L1445.77 1213.4 L1446.36 1213.4 L1446.95 1213.4 L1447.53 1213.4 L1448.12 1213.4 L1448.7 1213.4 L1449.29 1213.4 L1449.88 1213.4 L1450.46 1213.4 L1451.05 1213.4 L1451.64 1213.4 L1452.22 1213.4 L1452.81 1213.4 L1453.4 1213.4 L1453.98 1213.4 L1454.57 1213.4 L1455.16 1213.4 L1455.74 1213.4 L1456.33 1213.4 L1456.91 1213.4 L1457.5 1213.4 L1458.09 1213.4 L1458.67 1213.4 L1459.26 1213.4 L1459.85 1213.4 L1460.43 1213.4 L1461.02 1213.4 L1461.61 1213.4 L1462.19 1213.4 L1462.78 1213.4 L1463.37 1213.4 L1463.95 1213.4 L1464.54 1213.4 L1465.12 1213.4 L1465.71 1213.4 L1466.3 1213.4 L1466.88 1213.4 L1467.47 1213.4 L1468.06 1213.4 L1468.64 1213.4 L1469.23 1213.4 L1469.82 1213.4 L1470.4 1213.4 L1470.99 1213.4 L1471.57 1213.4 L1472.16 1213.4 L1472.75 1213.4 L1473.33 1213.4 L1473.92 1213.4 L1474.51 1213.4 L1475.09 1213.4 L1475.68 1213.4 L1476.27 1213.4 L1476.85 1213.4 L1477.44 1213.4 L1478.03 1213.4 L1478.61 1213.4 L1479.2 1213.4 L1479.78 1213.4 L1480.37 1213.4 L1480.96 1213.4 L1481.54 1213.4 L1482.13 1213.4 L1482.72 1213.4 L1483.3 1213.4 L1483.89 1213.4 L1484.48 1213.4 L1485.06 1213.4 L1485.65 1213.4 L1486.24 1213.4 L1486.82 1213.4 L1487.41 1213.4 L1487.99 1213.4 L1488.58 1213.4 L1489.17 1213.4 L1489.75 1213.4 L1490.34 1213.4 L1490.93 1213.4 L1491.51 1213.4 L1492.1 1213.4 L1492.69 1213.4 L1493.27 1213.4 L1493.86 1213.4 L1494.45 1213.4 L1495.03 1213.4 L1495.62 1213.4 L1496.2 1213.4 L1496.79 1213.4 L1497.38 1213.4 L1497.96 1213.4 L1498.55 1213.4 L1499.14 1213.4 L1499.72 1213.4 L1500.31 1213.4 L1500.9 1213.4 L1501.48 1213.4 L1502.07 1213.4 L1502.65 1213.4 L1503.24 1213.4 L1503.83 1213.4 L1504.41 1213.4 L1505 1213.4 L1505.59 1213.4 L1506.17 1213.4 L1506.76 1213.4 L1507.35 1213.4 L1507.93 1213.4 L1508.52 1213.4 L1509.11 1213.4 L1509.69 1213.4 L1510.28 1213.4 L1510.86 1213.4 L1511.45 1213.4 L1512.04 1213.4 L1512.62 1213.4 L1513.21 1213.4 L1513.8 1213.4 L1514.38 1213.4 L1514.97 1213.4 L1515.56 1213.4 L1516.14 1213.4 L1516.73 1213.4 L1517.32 1213.4 L1517.9 1213.4 L1518.49 1213.4 L1519.07 1213.4 L1519.66 1213.4 L1520.25 1213.4 L1520.83 1213.4 L1521.42 1213.4 L1522.01 1213.4 L1522.59 1213.4 L1523.18 1213.4 L1523.77 1213.4 L1524.35 1213.4 L1524.94 1213.4 L1525.52 1213.4 L1526.11 1213.4 L1526.7 1213.4 L1527.28 1213.4 L1527.87 1213.4 L1528.46 1213.4 L1529.04 1213.4 L1529.63 1213.4 L1530.22 1213.4 L1530.8 1213.4 L1531.39 1213.4 L1531.98 1213.4 L1532.56 1213.4 L1533.15 1213.4 L1533.73 1213.4 L1534.32 1213.4 L1534.91 1213.4 L1535.49 1213.4 L1536.08 1213.4 L1536.67 1213.4 L1537.25 1213.4 L1537.84 1213.4 L1538.43 1213.4 L1539.01 1213.4 L1539.6 1213.4 L1540.19 1213.4 L1540.77 1213.4 L1541.36 1213.4 L1541.94 1213.4 L1542.53 1213.4 L1543.12 1213.4 L1543.7 1213.4 L1544.29 1213.4 L1544.88 1213.4 L1545.46 1213.4 L1546.05 1213.4 L1546.64 1213.4 L1547.22 1213.4 L1547.81 1213.4 L1548.4 1213.4 L1548.98 1213.4 L1549.57 1213.4 L1550.15 1213.4 L1550.74 1213.4 L1551.33 1213.4 L1551.91 1213.4 L1552.5 1213.4 L1553.09 1213.4 L1553.67 1213.4 L1554.26 1213.4 L1554.85 1213.4 L1555.43 1213.4 L1556.02 1213.4 L1556.6 1213.4 L1557.19 1213.4 L1557.78 1213.4 L1558.36 1213.4 L1558.95 1213.4 L1559.54 1213.4 L1560.12 1213.4 L1560.71 1213.4 L1561.3 1213.4 L1561.88 1213.4 L1562.47 1213.4 L1563.06 1213.4 L1563.64 1213.4 L1564.23 1213.4 L1564.81 1213.4 L1565.4 1213.4 L1565.99 1213.4 L1566.57 1213.4 L1567.16 1213.4 L1567.75 1213.4 L1568.33 1213.4 L1568.92 1213.4 L1569.51 1213.4 L1570.09 1213.4 L1570.68 1213.4 L1571.27 1213.4 L1571.85 1213.4 L1572.44 1213.4 L1573.02 1213.4 L1573.61 1213.4 L1574.2 1213.4 L1574.78 1213.4 L1575.37 1213.4 L1575.96 1213.4 L1576.54 1213.4 L1577.13 1213.4 L1577.72 1213.4 L1578.3 1213.4 L1578.89 1213.4 L1579.47 1213.4 L1580.06 1213.4 L1580.65 1213.4 L1581.23 1213.4 L1581.82 1213.4 L1582.41 1213.4 L1582.99 1213.4 L1583.58 1213.4 L1584.17 1213.4 L1584.75 1213.4 L1585.34 1213.4 L1585.93 1213.4 L1586.51 1213.4 L1587.1 1213.4 L1587.68 1213.4 L1588.27 1213.4 L1588.86 1213.4 L1589.44 1213.4 L1590.03 1213.4 L1590.62 1213.4 L1591.2 1213.4 L1591.79 1213.4 L1592.38 1213.4 L1592.96 1213.4 L1593.55 1213.4 L1594.14 1213.4 L1594.72 1213.4 L1595.31 1213.4 L1595.89 1213.4 L1596.48 1213.4 L1597.07 1213.4 L1597.65 1213.4 L1598.24 1213.4 L1598.83 1213.4 L1599.41 1213.4 L1600 1213.4 L1600.59 1213.4 L1601.17 1213.4 L1601.76 1213.4 L1602.34 1213.4 L1602.93 1213.4 L1603.52 1213.4 L1604.1 1213.4 L1604.69 1213.4 L1605.28 1213.4 L1605.86 1213.4 L1606.45 1213.4 L1607.04 1213.4 L1607.62 1213.4 L1608.21 1213.4 L1608.8 1213.4 L1609.38 1213.4 L1609.97 1213.4 L1610.55 1213.4 L1611.14 1213.4 L1611.73 1213.4 L1612.31 1213.4 L1612.9 1213.4 L1613.49 1213.4 L1614.07 1213.4 L1614.66 1213.4 L1615.25 1213.4 L1615.83 1213.4 L1616.42 1213.4 L1617.01 1213.4 L1617.59 1213.4 L1618.18 1213.4 L1618.76 1213.4 L1619.35 1213.4 L1619.94 1213.4 L1620.52 1213.4 L1621.11 1213.4 L1621.7 1213.4 L1622.28 1213.4 L1622.87 1213.4 L1623.46 1213.4 L1624.04 1213.4 L1624.63 1213.4 L1625.22 1213.4 L1625.8 1213.4 L1626.39 1213.4 L1626.97 1213.4 L1627.56 1213.4 L1628.15 1213.4 L1628.73 1213.4 L1629.32 1213.4 L1629.91 1213.4 L1630.49 1213.4 L1631.08 1213.4 L1631.67 1213.4 L1632.25 1213.4 L1632.84 1213.4 L1633.42 1213.4 L1634.01 1213.4 L1634.6 1213.4 L1635.18 1213.4 L1635.77 1213.4 L1636.36 1213.4 L1636.94 1213.4 L1637.53 1213.4 L1638.12 1213.4 L1638.7 1213.4 L1639.29 1213.4 L1639.88 1213.4 L1640.46 1213.4 L1641.05 1213.4 L1641.63 1213.4 L1642.22 1213.4 L1642.81 1213.4 L1643.39 1213.4 L1643.98 1213.4 L1644.57 1213.4 L1645.15 1213.4 L1645.74 1213.4 L1646.33 1213.4 L1646.91 1213.4 L1647.5 1213.4 L1648.09 1213.4 L1648.67 1213.4 L1649.26 1213.4 L1649.84 1213.4 L1650.43 1213.4 L1651.02 1213.4 L1651.6 1213.4 L1652.19 1213.4 L1652.78 1213.4 L1653.36 1213.4 L1653.95 1213.4 L1654.54 1213.4 L1655.12 1213.4 L1655.71 1213.4 L1656.29 1213.4 L1656.88 1213.4 L1657.47 1213.4 L1658.05 1213.4 L1658.64 1213.4 L1659.23 1213.4 L1659.81 1213.4 L1660.4 1213.4 L1660.99 1213.4 L1661.57 1213.4 L1662.16 1213.4 L1662.75 1213.4 L1663.33 1213.4 L1663.92 1213.4 L1664.5 1213.4 L1665.09 1213.4 L1665.68 1213.4 L1666.26 1213.4 L1666.85 1213.4 L1667.44 1213.4 L1668.02 1213.4 L1668.61 1213.4 L1669.2 1213.4 L1669.78 1213.4 L1670.37 1213.4 L1670.96 1213.4 L1671.54 1213.4 L1672.13 1213.4 L1672.71 1213.4 L1673.3 1213.4 L1673.89 1213.4 L1674.47 1213.4 L1675.06 1213.4 L1675.65 1213.4 L1676.23 1213.4 L1676.82 1213.4 L1677.41 1213.4 L1677.99 1213.4 L1678.58 1213.4 L1679.17 1213.4 L1679.75 1213.4 L1680.34 1213.4 L1680.92 1213.4 L1681.51 1213.4 L1682.1 1213.4 L1682.68 1213.4 L1683.27 1213.4 L1683.86 1213.4 L1684.44 1213.4 L1685.03 1213.4 L1685.62 1213.4 L1686.2 1213.4 L1686.79 1213.4 L1687.37 1213.4 L1687.96 1213.4 L1688.55 1213.4 L1689.13 1213.4 L1689.72 1213.4 L1690.31 1213.4 L1690.89 1213.4 L1691.48 1213.4 L1692.07 1213.4 L1692.65 1213.4 L1693.24 1213.4 L1693.83 1213.4 L1694.41 1213.4 L1695 1213.4 L1695.58 1213.4 L1696.17 1213.4 L1696.76 1213.4 L1697.34 1213.4 L1697.93 1213.4 L1698.52 1213.4 L1699.1 1213.4 L1699.69 1213.4 L1700.28 1213.4 L1700.86 1213.4 L1701.45 1213.4 L1702.04 1213.4 L1702.62 1213.4 L1703.21 1213.4 L1703.79 1213.4 L1704.38 1213.4 L1704.97 1213.4 L1705.55 1213.4 L1706.14 1213.4 L1706.73 1213.4 L1707.31 1213.4 L1707.9 1213.4 L1708.49 1213.4 L1709.07 1213.4 L1709.66 1213.4 L1710.24 1213.4 L1710.83 1213.4 L1711.42 1213.4 L1712 1213.4 L1712.59 1213.4 L1713.18 1213.4 L1713.76 1213.4 L1714.35 1213.4 L1714.94 1213.4 L1715.52 1213.4 L1716.11 1213.4 L1716.7 1213.4 L1717.28 1213.4 L1717.87 1213.4 L1718.45 1213.4 L1719.04 1213.4 L1719.63 1213.4 L1720.21 1213.4 L1720.8 1213.4 L1721.39 1213.4 L1721.97 1213.4 L1722.56 1213.4 L1723.15 1213.4 L1723.73 1213.4 L1724.32 1213.4 L1724.91 1213.4 L1725.49 1213.4 L1726.08 1213.4 L1726.66 1213.4 L1727.25 1213.4 L1727.84 1213.4 L1728.42 1213.4 L1729.01 1213.4 L1729.6 1213.4 L1730.18 1213.4 L1730.77 1213.4 L1731.36 1213.4 L1731.94 1213.4 L1732.53 1213.4 L1733.11 1213.4 L1733.7 1213.4 L1734.29 1213.4 L1734.87 1213.4 L1735.46 1213.4 L1736.05 1213.4 L1736.63 1213.4 L1737.22 1213.4 L1737.81 1213.4 L1738.39 1213.4 L1738.98 1213.4 L1739.57 1213.4 L1740.15 1213.4 L1740.74 1213.4 L1741.32 1213.4 L1741.91 1213.4 L1742.5 1213.4 L1743.08 1213.4 L1743.67 1213.4 L1744.26 1213.4 L1744.84 1213.4 L1745.43 1213.4 L1746.02 1213.4 L1746.6 1213.4 L1747.19 1213.4 L1747.78 1213.4 L1748.36 1213.4 L1748.95 1213.4 L1749.53 1213.4 L1750.12 1213.4 L1750.71 1213.4 L1751.29 1213.4 L1751.88 1213.4 L1752.47 1213.4 L1753.05 1213.4 L1753.64 1213.4 L1754.23 1213.4 L1754.81 1213.4 L1755.4 1213.4 L1755.99 1213.4 L1756.57 1213.4 L1757.16 1213.4 L1757.74 1213.4 L1758.33 1213.4 L1758.92 1213.4 L1759.5 1213.4 L1760.09 1213.4 L1760.68 1213.4 L1761.26 1213.4 L1761.85 1213.4 L1762.44 1213.4 L1763.02 1213.4 L1763.61 1213.4 L1764.19 1213.4 L1764.78 1213.4 L1765.37 1213.4 L1765.95 1213.4 L1766.54 1213.4 L1767.13 1213.4 L1767.71 1213.4 L1768.3 1213.4 L1768.89 1213.4 L1769.47 1213.4 L1770.06 1213.4 L1770.65 1213.4 L1771.23 1213.4 L1771.82 1213.4 L1772.4 1213.4 L1772.99 1213.4 L1773.58 1213.4 L1774.16 1213.4 L1774.75 1213.4 L1775.34 1213.4 L1775.92 1213.4 L1776.51 1213.4 L1777.1 1213.4 L1777.68 1213.4 L1778.27 1213.4 L1778.86 1213.4 L1779.44 1213.4 L1780.03 1213.4 L1780.61 1213.4 L1781.2 1213.4 L1781.79 1213.4 L1782.37 1213.4 L1782.96 1213.4 L1783.55 1213.4 L1784.13 1213.4 L1784.72 1213.4 L1785.31 1213.4 L1785.89 1213.4 L1786.48 1213.4 L1787.06 1213.4 L1787.65 1213.4 L1788.24 1213.4 L1788.82 1213.4 L1789.41 1213.4 L1790 1213.4 L1790.58 1213.4 L1791.17 1213.4 L1791.76 1213.4 L1792.34 1213.4 L1792.93 1213.4 L1793.52 1213.4 L1794.1 1213.4 L1794.69 1213.4 L1795.27 1213.4 L1795.86 1213.4 L1796.45 1213.4 L1797.03 1213.4 L1797.62 1213.4 L1798.21 1213.4 L1798.79 1213.4 L1799.38 1213.4 L1799.97 1213.4 L1800.55 1213.4 L1801.14 1213.4 L1801.73 1213.4 L1802.31 1213.4 L1802.9 1213.4 L1803.48 1213.4 L1804.07 1213.4 L1804.66 1213.4 L1805.24 1213.4 L1805.83 1213.4 L1806.42 1213.4 L1807 1213.4 L1807.59 1213.4 L1808.18 1213.4 L1808.76 1213.4 L1809.35 1213.4 L1809.94 1213.4 L1810.52 1213.4 L1811.11 1213.4 L1811.69 1213.4 L1812.28 1213.4 L1812.87 1213.4 L1813.45 1213.4 L1814.04 1213.4 L1814.63 1213.4 L1815.21 1213.4 L1815.8 1213.4 L1816.39 1213.4 L1816.97 1213.4 L1817.56 1213.4 L1818.14 1213.4 L1818.73 1213.4 L1819.32 1213.4 L1819.9 1213.4 L1820.49 1213.4 L1821.08 1213.4 L1821.66 1213.4 L1822.25 1213.4 L1822.84 1213.4 L1823.42 1213.4 L1824.01 1213.4 L1824.6 1213.4 L1825.18 1213.4 L1825.77 1213.4 L1826.35 1213.4 L1826.94 1213.4 L1827.53 1213.4 L1828.11 1213.4 L1828.7 1213.4 L1829.29 1213.4 L1829.87 1213.4 L1830.46 1213.4 L1831.05 1213.4 L1831.63 1213.4 L1832.22 1213.4 L1832.81 1213.4 L1833.39 1213.4 L1833.98 1213.4 L1834.56 1213.4 L1835.15 1213.4 L1835.74 1213.4 L1836.32 1213.4 L1836.91 1213.4 L1837.5 1213.4 L1838.08 1213.4 L1838.67 1213.4 L1839.26 1213.4 L1839.84 1213.4 L1840.43 1213.4 L1841.01 1213.4 L1841.6 1213.4 L1842.19 1213.4 L1842.77 1213.4 L1843.36 1213.4 L1843.95 1213.4 L1844.53 1213.4 L1845.12 1213.4 L1845.71 1213.4 L1846.29 1213.4 L1846.88 1213.4 L1847.47 1213.4 L1848.05 1213.4 L1848.64 1213.4 L1849.22 1213.4 L1849.81 1213.4 L1850.4 1213.4 L1850.98 1213.4 L1851.57 1213.4 L1852.16 1213.4 L1852.74 1213.4 L1853.33 1213.4 L1853.92 1213.4 L1854.5 1213.4 L1855.09 1213.4 L1855.68 1213.4 L1856.26 1213.4 L1856.85 1213.4 L1857.43 1213.4 L1858.02 1213.4 L1858.61 1213.4 L1859.19 1213.4 L1859.78 1213.4 L1860.37 1213.4 L1860.95 1213.4 L1861.54 1213.4 L1862.13 1213.4 L1862.71 1213.4 L1863.3 1213.4 L1863.88 1213.4 L1864.47 1213.4 L1865.06 1213.4 L1865.64 1213.4 L1866.23 1213.4 L1866.82 1213.4 L1867.4 1213.4 L1867.99 1213.4 L1868.58 1213.4 L1869.16 1213.4 L1869.75 1213.4 L1870.34 1213.4 L1870.92 1213.4 L1871.51 1213.4 L1872.09 1213.4 L1872.68 1213.4 L1873.27 1213.4 L1873.85 1213.4 L1874.44 1213.4 L1875.03 1213.4 L1875.61 1213.4 L1876.2 1213.4 L1876.79 1213.4 L1877.37 1213.4 L1877.96 1213.4 L1878.55 1213.4 L1879.13 1213.4 L1879.72 1213.4 L1880.3 1213.4 L1880.89 1213.4 L1881.48 1213.4 L1882.06 1213.4 L1882.65 1213.4 L1883.24 1213.4 L1883.82 1213.4 L1884.41 1213.4 L1885 1213.4 L1885.58 1213.4 L1886.17 1213.4 L1886.76 1213.4 L1887.34 1213.4 L1887.93 1213.4 L1888.51 1213.4 L1889.1 1213.4 L1889.69 1213.4 L1890.27 1213.4 L1890.86 1213.4 L1891.45 1213.4 L1892.03 1213.4 L1892.62 1213.4 L1893.21 1213.4 L1893.79 1213.4 L1894.38 1213.4 L1894.96 1213.4 L1895.55 1213.4 L1896.14 1213.4 L1896.72 1213.4 L1897.31 1213.4 L1897.9 1213.4 L1898.48 1213.4 L1899.07 1213.4 L1899.66 1213.4 L1900.24 1213.4 L1900.83 1213.4 L1901.42 1213.4 L1902 1213.4 L1902.59 1213.4 L1903.17 1213.4 L1903.76 1213.4 L1904.35 1213.4 L1904.93 1213.4 L1905.52 1213.4 L1906.11 1213.4 L1906.69 1213.4 L1907.28 1213.4 L1907.87 1213.4 L1908.45 1213.4 L1909.04 1213.4 L1909.63 1213.4 L1910.21 1213.4 L1910.8 1213.4 L1911.38 1213.4 L1911.97 1213.4 L1912.56 1213.4 L1913.14 1213.4 L1913.73 1213.4 L1914.32 1213.4 L1914.9 1213.4 L1915.49 1213.4 L1916.08 1213.4 L1916.66 1213.4 L1917.25 1213.4 L1917.83 1213.4 L1918.42 1213.4 L1919.01 1213.4 L1919.59 1213.4 L1920.18 1213.4 L1920.77 1213.4 L1921.35 1213.4 L1921.94 1213.4 L1922.53 1213.4 L1923.11 1213.4 L1923.7 1213.4 L1924.29 1213.4 L1924.87 1213.4 L1925.46 1213.4 L1926.04 1213.4 L1926.63 1213.4 L1927.22 1213.4 L1927.8 1213.4 L1928.39 1213.4 L1928.98 1213.4 L1929.56 1213.4 L1930.15 1213.4 L1930.74 1213.4 L1931.32 1213.4 L1931.91 1213.4 L1932.5 1213.4 L1933.08 1213.4 L1933.67 1213.4 L1934.25 1213.4 L1934.84 1213.4 L1935.43 1213.4 L1936.01 1213.4 L1936.6 1213.4 L1937.19 1213.4 L1937.77 1213.4 L1938.36 1213.4 L1938.95 1213.4 L1939.53 1213.4 L1940.12 1213.4 L1940.71 1213.4 L1941.29 1213.4 L1941.88 1213.4 L1942.46 1213.4 L1943.05 1213.4 L1943.64 1213.4 L1944.22 1213.4 L1944.81 1213.4 L1945.4 1213.4 L1945.98 1213.4 L1946.57 1213.4 L1947.16 1213.4 L1947.74 1213.4 L1948.33 1213.4 L1948.91 1213.4 L1949.5 1213.4 L1950.09 1213.4 L1950.67 1213.4 L1951.26 1213.4 L1951.85 1213.4 L1952.43 1213.4 L1953.02 1213.4 L1953.61 1213.4 L1954.19 1213.4 L1954.78 1213.4 L1955.37 1213.4 L1955.95 1213.4 L1956.54 1213.4 L1957.12 1213.4 L1957.71 1213.4 L1958.3 1213.4 L1958.88 1213.4 L1959.47 1213.4 L1960.06 1213.4 L1960.64 1213.4 L1961.23 1213.4 L1961.82 1213.4 L1962.4 1213.4 L1962.99 1213.4 L1963.58 1213.4 L1964.16 1213.4 L1964.75 1213.4 L1965.33 1213.4 L1965.92 1213.4 L1966.51 1213.4 L1967.09 1213.4 L1967.68 1213.4 L1968.27 1213.4 L1968.85 1213.4 L1969.44 1213.4 L1970.03 1213.4 L1970.61 1213.4 L1971.2 1213.4 L1971.78 1213.4 L1972.37 1213.4 L1972.96 1213.4 L1973.54 1213.4 L1974.13 1213.4 L1974.72 1213.4 L1975.3 1213.4 L1975.89 1213.4 L1976.48 1213.4 L1977.06 1213.4 L1977.65 1213.4 L1978.24 1213.4 L1978.82 1213.4 L1979.41 1213.4 L1979.99 1213.4 L1980.58 1213.4 L1981.17 1213.4 L1981.75 1213.4 L1982.34 1213.4 L1982.93 1213.4 L1983.51 1213.4 L1984.1 1213.4 L1984.69 1213.4 L1985.27 1213.4 L1985.86 1213.4 L1986.45 1213.4 L1987.03 1213.4 L1987.62 1213.4 L1988.2 1213.4 L1988.79 1213.4 L1989.38 1213.4 L1989.96 1213.4 L1990.55 1213.4 L1991.14 1213.4 L1991.72 1213.4 L1992.31 1213.4 L1992.9 1213.4 L1993.48 1213.4 L1994.07 1213.4 L1994.65 1213.4 L1995.24 1213.4 L1995.83 1213.4 L1996.41 1213.4 L1997 1213.4 L1997.59 1213.4 L1998.17 1213.4 L1998.76 1213.4 L1999.35 1213.4 L1999.93 1213.4 L2000.52 1213.4 L2001.11 1213.4 L2001.69 1213.4 L2002.28 1213.4 L2002.86 1213.4 L2003.45 1213.4 L2004.04 1213.4 L2004.62 1213.4 L2005.21 1213.4 L2005.8 1213.4 L2006.38 1213.4 L2006.97 1213.4 L2007.56 1213.4 L2008.14 1213.4 L2008.73 1213.4 L2009.32 1213.4 L2009.9 1213.4 L2010.49 1213.4 L2011.07 1213.4 L2011.66 1213.4 L2012.25 1213.4 L2012.83 1213.4 L2013.42 1213.4 L2014.01 1213.4 L2014.59 1213.4 L2015.18 1213.4 L2015.77 1213.4 L2016.35 1213.4 L2016.94 1213.4 L2017.53 1213.4 L2018.11 1213.4 L2018.7 1213.4 L2019.28 1213.4 L2019.87 1213.4 L2020.46 1213.4 L2021.04 1213.4 L2021.63 1213.4 L2022.22 1213.4 L2022.8 1213.4 L2023.39 1213.4 L2023.98 1213.4 L2024.56 1213.4 L2025.15 1213.4 L2025.73 1213.4 L2026.32 1213.4 L2026.91 1213.4 L2027.49 1213.4 L2028.08 1213.4 L2028.67 1213.4 L2029.25 1213.4 L2029.84 1213.4 L2030.43 1213.4 L2031.01 1213.4 L2031.6 1213.4 L2032.19 1213.4 L2032.77 1213.4 L2033.36 1213.4 L2033.94 1213.4 L2034.53 1213.4 L2035.12 1213.4 L2035.7 1213.4 L2036.29 1213.4 L2036.88 1213.4 L2037.46 1213.4 L2038.05 1213.4 L2038.64 1213.4 L2039.22 1213.4 L2039.81 1213.4 L2040.4 1213.4 L2040.98 1213.4 L2041.57 1213.4 L2042.15 1213.4 L2042.74 1213.4 L2043.33 1213.4 L2043.91 1213.4 L2044.5 1213.4 L2045.09 1213.4 L2045.67 1213.4 L2046.26 1213.4 L2046.85 1213.4 L2047.43 1213.4 L2048.02 1213.4 L2048.6 1213.4 L2049.19 1213.4 L2049.78 1213.4 L2050.36 1213.4 L2050.95 1213.4 L2051.54 1213.4 L2052.12 1213.4 L2052.71 1213.4 L2053.3 1213.4 L2053.88 1213.4 L2054.47 1213.4 L2055.06 1213.4 L2055.64 1213.4 L2056.23 1213.4 L2056.81 1213.4 L2057.4 1213.4 L2057.99 1213.4 L2058.57 1213.4 L2059.16 1213.4 L2059.75 1213.4 L2060.33 1213.4 L2060.92 1213.4 L2061.51 1213.4 L2062.09 1213.4 L2062.68 1213.4 L2063.27 1213.4 L2063.85 1213.4 L2064.44 1213.4 L2065.02 1213.4 L2065.61 1213.4 L2066.2 1213.4 L2066.78 1213.4 L2067.37 1213.4 L2067.96 1213.4 L2068.54 1213.4 L2069.13 1213.4 L2069.72 1213.4 L2070.3 1213.4 L2070.89 1213.4 L2071.48 1213.4 L2072.06 1213.4 L2072.65 1213.4 L2073.23 1213.4 L2073.82 1213.4 L2074.41 1213.4 L2074.99 1213.4 L2075.58 1213.4 L2076.17 1213.4 L2076.75 1213.4 L2077.34 1213.4 L2077.93 1213.4 L2078.51 1213.4 L2079.1 1213.4 L2079.68 1213.4 L2080.27 1213.4 L2080.86 1213.4 L2081.44 1213.4 L2082.03 1213.4 L2082.62 1213.4 L2083.2 1213.4 L2083.79 1213.4 L2084.38 1213.4 L2084.96 1213.4 L2085.55 1213.4 L2086.14 1213.4 L2086.72 1213.4 L2087.31 1213.4 L2087.89 1213.4 L2088.48 1213.4 L2089.07 1213.4 L2089.65 1213.4 L2090.24 1213.4 L2090.83 1213.4 L2091.41 1213.4 L2092 1213.4 L2092.59 1213.4 L2093.17 1213.4 L2093.76 1213.4 L2094.35 1213.4 L2094.93 1213.4 L2095.52 1213.4 L2096.1 1213.4 L2096.69 1213.4 L2097.28 1213.4 L2097.86 1213.4 L2098.45 1213.4 L2099.04 1213.4 L2099.62 1213.4 L2100.21 1213.4 L2100.8 1213.4 L2101.38 1213.4 L2101.97 1213.4 L2102.55 1213.4 L2103.14 1213.4 L2103.73 1213.4 L2104.31 1213.4 L2104.9 1213.4 L2105.49 1213.4 L2106.07 1213.4 L2106.66 1213.4 L2107.25 1213.4 L2107.83 1213.4 L2108.42 1213.4 L2109.01 1213.4 L2109.59 1213.4 L2110.18 1213.4 L2110.76 1213.4 L2111.35 1213.4 L2111.94 1213.4 L2112.52 1213.4 L2113.11 1213.4 L2113.7 1213.4 L2114.28 1213.4 L2114.87 1213.4 L2115.46 1213.4 L2116.04 1213.4 L2116.63 1213.4 L2117.22 1213.4 L2117.8 1213.4 L2118.39 1213.4 L2118.97 1213.4 L2119.56 1213.4 L2120.15 1213.4 L2120.73 1213.4 L2121.32 1213.4 L2121.91 1213.4 L2122.49 1213.4 L2123.08 1213.4 L2123.67 1213.4 L2124.25 1213.4 L2124.84 1213.4 L2125.42 1213.4 L2126.01 1213.4 L2126.6 1213.4 L2127.18 1213.4 L2127.77 1213.4 L2128.36 1213.4 L2128.94 1213.4 L2129.53 1213.4 L2130.12 1213.4 L2130.7 1213.4 L2131.29 1213.4 L2131.88 1213.4 L2132.46 1213.4 L2133.05 1213.4 L2133.63 1213.4 L2134.22 1213.4 L2134.81 1213.4 L2135.39 1213.4 L2135.98 1213.4 L2136.57 1213.4 L2137.15 1213.4 L2137.74 1213.4 L2138.33 1213.4 L2138.91 1213.4 L2139.5 1213.4 L2140.09 1213.4 L2140.67 1213.4 L2141.26 1213.4 L2141.84 1213.4 L2142.43 1213.4 L2143.02 1213.4 L2143.6 1213.4 L2144.19 1213.4 L2144.78 1213.4 L2145.36 1213.4 L2145.95 1213.4 L2146.54 1213.4 L2147.12 1213.4 L2147.71 1213.4 L2148.3 1213.4 L2148.88 1213.4 L2149.47 1213.4 L2150.05 1213.4 L2150.64 1213.4 L2151.23 1213.4 L2151.81 1213.4 L2152.4 1213.4 L2152.99 1213.4 L2153.57 1213.4 L2154.16 1213.4 L2154.75 1213.4 L2155.33 1213.4 L2155.92 1213.4 L2156.5 1213.4 L2157.09 1213.4 L2157.68 1213.4 L2158.26 1213.4 L2158.26 1213.25 L2157.68 1213.25 L2157.09 1213.25 L2156.5 1213.25 L2155.92 1213.25 L2155.33 1213.25 L2154.75 1213.25 L2154.16 1213.25 L2153.57 1213.25 L2152.99 1213.25 L2152.4 1213.25 L2151.81 1213.25 L2151.23 1213.25 L2150.64 1213.25 L2150.05 1213.25 L2149.47 1213.25 L2148.88 1213.25 L2148.3 1213.25 L2147.71 1213.25 L2147.12 1213.25 L2146.54 1213.25 L2145.95 1213.25 L2145.36 1213.25 L2144.78 1213.25 L2144.19 1213.25 L2143.6 1213.25 L2143.02 1213.25 L2142.43 1213.25 L2141.84 1213.25 L2141.26 1213.25 L2140.67 1213.25 L2140.09 1213.25 L2139.5 1213.25 L2138.91 1213.25 L2138.33 1213.25 L2137.74 1213.25 L2137.15 1213.25 L2136.57 1213.25 L2135.98 1213.25 L2135.39 1213.25 L2134.81 1213.25 L2134.22 1213.25 L2133.63 1213.25 L2133.05 1213.25 L2132.46 1213.25 L2131.88 1213.25 L2131.29 1213.25 L2130.7 1213.25 L2130.12 1213.25 L2129.53 1213.25 L2128.94 1213.25 L2128.36 1213.25 L2127.77 1213.25 L2127.18 1213.25 L2126.6 1213.25 L2126.01 1213.25 L2125.42 1213.25 L2124.84 1213.25 L2124.25 1213.25 L2123.67 1213.25 L2123.08 1213.25 L2122.49 1213.25 L2121.91 1213.25 L2121.32 1213.25 L2120.73 1213.25 L2120.15 1213.25 L2119.56 1213.25 L2118.97 1213.25 L2118.39 1213.25 L2117.8 1213.25 L2117.22 1213.25 L2116.63 1213.25 L2116.04 1213.25 L2115.46 1213.25 L2114.87 1213.25 L2114.28 1213.25 L2113.7 1213.25 L2113.11 1213.25 L2112.52 1213.25 L2111.94 1213.25 L2111.35 1213.25 L2110.76 1213.25 L2110.18 1213.25 L2109.59 1213.25 L2109.01 1213.25 L2108.42 1213.25 L2107.83 1213.25 L2107.25 1213.25 L2106.66 1213.25 L2106.07 1213.25 L2105.49 1213.25 L2104.9 1213.25 L2104.31 1213.25 L2103.73 1213.25 L2103.14 1213.25 L2102.55 1213.25 L2101.97 1213.25 L2101.38 1213.25 L2100.8 1213.25 L2100.21 1213.25 L2099.62 1213.25 L2099.04 1213.25 L2098.45 1213.25 L2097.86 1213.25 L2097.28 1213.25 L2096.69 1213.25 L2096.1 1213.25 L2095.52 1213.25 L2094.93 1213.25 L2094.35 1213.25 L2093.76 1213.25 L2093.17 1213.25 L2092.59 1213.25 L2092 1213.25 L2091.41 1213.25 L2090.83 1213.25 L2090.24 1213.25 L2089.65 1213.25 L2089.07 1213.25 L2088.48 1213.25 L2087.89 1213.25 L2087.31 1213.25 L2086.72 1213.25 L2086.14 1213.25 L2085.55 1213.25 L2084.96 1213.25 L2084.38 1213.25 L2083.79 1213.25 L2083.2 1213.25 L2082.62 1213.25 L2082.03 1213.25 L2081.44 1213.25 L2080.86 1213.25 L2080.27 1213.25 L2079.68 1213.25 L2079.1 1213.25 L2078.51 1213.25 L2077.93 1213.25 L2077.34 1213.25 L2076.75 1213.25 L2076.17 1213.25 L2075.58 1213.25 L2074.99 1213.25 L2074.41 1213.25 L2073.82 1213.25 L2073.23 1213.25 L2072.65 1213.25 L2072.06 1213.25 L2071.48 1213.25 L2070.89 1213.25 L2070.3 1213.25 L2069.72 1213.25 L2069.13 1213.25 L2068.54 1213.25 L2067.96 1213.25 L2067.37 1213.25 L2066.78 1213.25 L2066.2 1213.25 L2065.61 1213.25 L2065.02 1213.25 L2064.44 1213.25 L2063.85 1213.25 L2063.27 1213.25 L2062.68 1213.25 L2062.09 1213.25 L2061.51 1213.25 L2060.92 1213.25 L2060.33 1213.25 L2059.75 1213.25 L2059.16 1213.25 L2058.57 1213.25 L2057.99 1213.25 L2057.4 1213.25 L2056.81 1213.25 L2056.23 1213.25 L2055.64 1213.25 L2055.06 1213.25 L2054.47 1213.25 L2053.88 1213.25 L2053.3 1213.25 L2052.71 1213.25 L2052.12 1213.25 L2051.54 1213.25 L2050.95 1213.25 L2050.36 1213.25 L2049.78 1213.25 L2049.19 1213.25 L2048.6 1213.25 L2048.02 1213.25 L2047.43 1213.25 L2046.85 1213.25 L2046.26 1213.25 L2045.67 1213.25 L2045.09 1213.25 L2044.5 1213.25 L2043.91 1213.25 L2043.33 1213.25 L2042.74 1213.25 L2042.15 1213.25 L2041.57 1213.25 L2040.98 1213.25 L2040.4 1213.25 L2039.81 1213.25 L2039.22 1213.25 L2038.64 1213.25 L2038.05 1213.25 L2037.46 1213.25 L2036.88 1213.25 L2036.29 1213.25 L2035.7 1213.25 L2035.12 1213.25 L2034.53 1213.25 L2033.94 1213.25 L2033.36 1213.25 L2032.77 1213.25 L2032.19 1213.25 L2031.6 1213.25 L2031.01 1213.25 L2030.43 1213.25 L2029.84 1213.25 L2029.25 1213.25 L2028.67 1213.25 L2028.08 1213.25 L2027.49 1213.25 L2026.91 1213.25 L2026.32 1213.25 L2025.73 1213.25 L2025.15 1213.25 L2024.56 1213.25 L2023.98 1213.25 L2023.39 1213.25 L2022.8 1213.25 L2022.22 1213.25 L2021.63 1213.25 L2021.04 1213.25 L2020.46 1213.25 L2019.87 1213.25 L2019.28 1213.25 L2018.7 1213.25 L2018.11 1213.25 L2017.53 1213.25 L2016.94 1213.25 L2016.35 1213.25 L2015.77 1213.25 L2015.18 1213.25 L2014.59 1213.25 L2014.01 1213.25 L2013.42 1213.25 L2012.83 1213.25 L2012.25 1213.25 L2011.66 1213.25 L2011.07 1213.25 L2010.49 1213.25 L2009.9 1213.25 L2009.32 1213.25 L2008.73 1213.25 L2008.14 1213.25 L2007.56 1213.25 L2006.97 1213.25 L2006.38 1213.25 L2005.8 1213.25 L2005.21 1213.25 L2004.62 1213.25 L2004.04 1213.25 L2003.45 1213.25 L2002.86 1213.25 L2002.28 1213.25 L2001.69 1213.25 L2001.11 1213.25 L2000.52 1213.25 L1999.93 1213.25 L1999.35 1213.25 L1998.76 1213.25 L1998.17 1213.25 L1997.59 1213.25 L1997 1213.25 L1996.41 1213.25 L1995.83 1213.25 L1995.24 1213.25 L1994.65 1213.25 L1994.07 1213.25 L1993.48 1213.25 L1992.9 1213.25 L1992.31 1213.25 L1991.72 1213.25 L1991.14 1213.25 L1990.55 1213.25 L1989.96 1213.25 L1989.38 1213.25 L1988.79 1213.25 L1988.2 1213.25 L1987.62 1213.25 L1987.03 1213.25 L1986.45 1213.25 L1985.86 1213.25 L1985.27 1213.25 L1984.69 1213.25 L1984.1 1213.25 L1983.51 1213.25 L1982.93 1213.25 L1982.34 1213.25 L1981.75 1213.25 L1981.17 1213.25 L1980.58 1213.25 L1979.99 1213.25 L1979.41 1213.25 L1978.82 1213.25 L1978.24 1213.25 L1977.65 1213.25 L1977.06 1213.25 L1976.48 1213.25 L1975.89 1213.25 L1975.3 1213.25 L1974.72 1213.25 L1974.13 1213.25 L1973.54 1213.25 L1972.96 1213.25 L1972.37 1213.25 L1971.78 1213.25 L1971.2 1213.25 L1970.61 1213.25 L1970.03 1213.25 L1969.44 1213.25 L1968.85 1213.25 L1968.27 1213.25 L1967.68 1213.25 L1967.09 1213.25 L1966.51 1213.25 L1965.92 1213.25 L1965.33 1213.25 L1964.75 1213.25 L1964.16 1213.25 L1963.58 1213.25 L1962.99 1213.25 L1962.4 1213.25 L1961.82 1213.25 L1961.23 1213.25 L1960.64 1213.25 L1960.06 1213.25 L1959.47 1213.25 L1958.88 1213.25 L1958.3 1213.25 L1957.71 1213.25 L1957.12 1213.25 L1956.54 1213.25 L1955.95 1213.25 L1955.37 1213.25 L1954.78 1213.25 L1954.19 1213.25 L1953.61 1213.25 L1953.02 1213.25 L1952.43 1213.25 L1951.85 1213.25 L1951.26 1213.25 L1950.67 1213.25 L1950.09 1213.25 L1949.5 1213.25 L1948.91 1213.25 L1948.33 1213.25 L1947.74 1213.25 L1947.16 1213.25 L1946.57 1213.25 L1945.98 1213.25 L1945.4 1213.25 L1944.81 1213.25 L1944.22 1213.25 L1943.64 1213.25 L1943.05 1213.25 L1942.46 1213.25 L1941.88 1213.25 L1941.29 1213.25 L1940.71 1213.25 L1940.12 1213.25 L1939.53 1213.25 L1938.95 1213.25 L1938.36 1213.25 L1937.77 1213.25 L1937.19 1213.25 L1936.6 1213.25 L1936.01 1213.25 L1935.43 1213.25 L1934.84 1213.25 L1934.25 1213.25 L1933.67 1213.25 L1933.08 1213.25 L1932.5 1213.25 L1931.91 1213.25 L1931.32 1213.25 L1930.74 1213.25 L1930.15 1213.25 L1929.56 1213.25 L1928.98 1213.25 L1928.39 1213.25 L1927.8 1213.25 L1927.22 1213.25 L1926.63 1213.25 L1926.04 1213.25 L1925.46 1213.25 L1924.87 1213.25 L1924.29 1213.25 L1923.7 1213.25 L1923.11 1213.25 L1922.53 1213.25 L1921.94 1213.25 L1921.35 1213.25 L1920.77 1213.25 L1920.18 1213.25 L1919.59 1213.25 L1919.01 1213.25 L1918.42 1213.25 L1917.83 1213.25 L1917.25 1213.25 L1916.66 1213.25 L1916.08 1213.25 L1915.49 1213.25 L1914.9 1213.25 L1914.32 1213.25 L1913.73 1213.25 L1913.14 1213.25 L1912.56 1213.25 L1911.97 1213.25 L1911.38 1213.25 L1910.8 1213.25 L1910.21 1213.25 L1909.63 1213.25 L1909.04 1213.25 L1908.45 1213.25 L1907.87 1213.25 L1907.28 1213.25 L1906.69 1213.25 L1906.11 1213.25 L1905.52 1213.25 L1904.93 1213.25 L1904.35 1213.25 L1903.76 1213.25 L1903.17 1213.25 L1902.59 1213.25 L1902 1213.25 L1901.42 1213.25 L1900.83 1213.25 L1900.24 1213.25 L1899.66 1213.25 L1899.07 1213.25 L1898.48 1213.25 L1897.9 1213.25 L1897.31 1213.25 L1896.72 1213.25 L1896.14 1213.25 L1895.55 1213.25 L1894.96 1213.25 L1894.38 1213.25 L1893.79 1213.25 L1893.21 1213.25 L1892.62 1213.25 L1892.03 1213.25 L1891.45 1213.25 L1890.86 1213.25 L1890.27 1213.25 L1889.69 1213.25 L1889.1 1213.25 L1888.51 1213.25 L1887.93 1213.25 L1887.34 1213.25 L1886.76 1213.25 L1886.17 1213.25 L1885.58 1213.25 L1885 1213.25 L1884.41 1213.25 L1883.82 1213.25 L1883.24 1213.25 L1882.65 1213.25 L1882.06 1213.25 L1881.48 1213.25 L1880.89 1213.25 L1880.3 1213.25 L1879.72 1213.25 L1879.13 1213.25 L1878.55 1213.25 L1877.96 1213.25 L1877.37 1213.25 L1876.79 1213.25 L1876.2 1213.25 L1875.61 1213.25 L1875.03 1213.25 L1874.44 1213.25 L1873.85 1213.25 L1873.27 1213.25 L1872.68 1213.25 L1872.09 1213.25 L1871.51 1213.25 L1870.92 1213.25 L1870.34 1213.25 L1869.75 1213.25 L1869.16 1213.25 L1868.58 1213.25 L1867.99 1213.25 L1867.4 1213.25 L1866.82 1213.25 L1866.23 1213.25 L1865.64 1213.25 L1865.06 1213.25 L1864.47 1213.25 L1863.88 1213.25 L1863.3 1213.25 L1862.71 1213.25 L1862.13 1213.25 L1861.54 1213.25 L1860.95 1213.25 L1860.37 1213.25 L1859.78 1213.25 L1859.19 1213.25 L1858.61 1213.25 L1858.02 1213.25 L1857.43 1213.25 L1856.85 1213.25 L1856.26 1213.25 L1855.68 1213.25 L1855.09 1213.25 L1854.5 1213.25 L1853.92 1213.25 L1853.33 1213.25 L1852.74 1213.25 L1852.16 1213.25 L1851.57 1213.25 L1850.98 1213.25 L1850.4 1213.25 L1849.81 1213.25 L1849.22 1213.25 L1848.64 1213.25 L1848.05 1213.25 L1847.47 1213.25 L1846.88 1213.25 L1846.29 1213.25 L1845.71 1213.25 L1845.12 1213.25 L1844.53 1213.25 L1843.95 1213.25 L1843.36 1213.25 L1842.77 1213.25 L1842.19 1213.25 L1841.6 1213.25 L1841.01 1213.25 L1840.43 1213.25 L1839.84 1213.25 L1839.26 1213.25 L1838.67 1213.25 L1838.08 1213.25 L1837.5 1213.25 L1836.91 1213.25 L1836.32 1213.25 L1835.74 1213.25 L1835.15 1213.25 L1834.56 1213.25 L1833.98 1213.25 L1833.39 1213.25 L1832.81 1213.25 L1832.22 1213.25 L1831.63 1213.25 L1831.05 1213.25 L1830.46 1213.25 L1829.87 1213.25 L1829.29 1213.25 L1828.7 1213.25 L1828.11 1213.25 L1827.53 1213.25 L1826.94 1213.25 L1826.35 1213.25 L1825.77 1213.25 L1825.18 1213.25 L1824.6 1213.25 L1824.01 1213.25 L1823.42 1213.25 L1822.84 1213.25 L1822.25 1213.25 L1821.66 1213.25 L1821.08 1213.25 L1820.49 1213.25 L1819.9 1213.25 L1819.32 1213.25 L1818.73 1213.25 L1818.14 1213.25 L1817.56 1213.25 L1816.97 1213.25 L1816.39 1213.25 L1815.8 1213.25 L1815.21 1213.25 L1814.63 1213.25 L1814.04 1213.25 L1813.45 1213.25 L1812.87 1213.25 L1812.28 1213.25 L1811.69 1213.25 L1811.11 1213.25 L1810.52 1213.25 L1809.94 1213.25 L1809.35 1213.25 L1808.76 1213.25 L1808.18 1213.25 L1807.59 1213.25 L1807 1213.25 L1806.42 1213.25 L1805.83 1213.25 L1805.24 1213.25 L1804.66 1213.25 L1804.07 1213.25 L1803.48 1213.25 L1802.9 1213.25 L1802.31 1213.25 L1801.73 1213.25 L1801.14 1213.25 L1800.55 1213.25 L1799.97 1213.25 L1799.38 1213.25 L1798.79 1213.25 L1798.21 1213.25 L1797.62 1213.25 L1797.03 1213.25 L1796.45 1213.25 L1795.86 1213.25 L1795.27 1213.25 L1794.69 1213.25 L1794.1 1213.25 L1793.52 1213.25 L1792.93 1213.25 L1792.34 1213.25 L1791.76 1213.25 L1791.17 1213.25 L1790.58 1213.25 L1790 1213.25 L1789.41 1213.25 L1788.82 1213.25 L1788.24 1213.25 L1787.65 1213.25 L1787.06 1213.25 L1786.48 1213.25 L1785.89 1213.25 L1785.31 1213.25 L1784.72 1213.25 L1784.13 1213.25 L1783.55 1213.25 L1782.96 1213.25 L1782.37 1213.25 L1781.79 1213.25 L1781.2 1213.25 L1780.61 1213.25 L1780.03 1213.25 L1779.44 1213.25 L1778.86 1213.25 L1778.27 1213.25 L1777.68 1213.25 L1777.1 1213.25 L1776.51 1213.25 L1775.92 1213.25 L1775.34 1213.25 L1774.75 1213.25 L1774.16 1213.25 L1773.58 1213.25 L1772.99 1213.25 L1772.4 1213.25 L1771.82 1213.25 L1771.23 1213.25 L1770.65 1213.25 L1770.06 1213.25 L1769.47 1213.25 L1768.89 1213.25 L1768.3 1213.25 L1767.71 1213.25 L1767.13 1213.25 L1766.54 1213.25 L1765.95 1213.25 L1765.37 1213.25 L1764.78 1213.25 L1764.19 1213.25 L1763.61 1213.25 L1763.02 1213.25 L1762.44 1213.25 L1761.85 1213.25 L1761.26 1213.25 L1760.68 1213.25 L1760.09 1213.25 L1759.5 1213.25 L1758.92 1213.25 L1758.33 1213.25 L1757.74 1213.25 L1757.16 1213.25 L1756.57 1213.25 L1755.99 1213.25 L1755.4 1213.25 L1754.81 1213.25 L1754.23 1213.25 L1753.64 1213.25 L1753.05 1213.25 L1752.47 1213.25 L1751.88 1213.25 L1751.29 1213.25 L1750.71 1213.25 L1750.12 1213.25 L1749.53 1213.25 L1748.95 1213.25 L1748.36 1213.25 L1747.78 1213.25 L1747.19 1213.25 L1746.6 1213.25 L1746.02 1213.25 L1745.43 1213.25 L1744.84 1213.25 L1744.26 1213.25 L1743.67 1213.25 L1743.08 1213.25 L1742.5 1213.25 L1741.91 1213.25 L1741.32 1213.25 L1740.74 1213.25 L1740.15 1213.25 L1739.57 1213.25 L1738.98 1213.25 L1738.39 1213.25 L1737.81 1213.25 L1737.22 1213.25 L1736.63 1213.25 L1736.05 1213.25 L1735.46 1213.25 L1734.87 1213.25 L1734.29 1213.25 L1733.7 1213.25 L1733.11 1213.25 L1732.53 1213.25 L1731.94 1213.25 L1731.36 1213.25 L1730.77 1213.25 L1730.18 1213.25 L1729.6 1213.25 L1729.01 1213.25 L1728.42 1213.25 L1727.84 1213.25 L1727.25 1213.25 L1726.66 1213.25 L1726.08 1213.25 L1725.49 1213.25 L1724.91 1213.25 L1724.32 1213.25 L1723.73 1213.25 L1723.15 1213.25 L1722.56 1213.25 L1721.97 1213.25 L1721.39 1213.25 L1720.8 1213.25 L1720.21 1213.25 L1719.63 1213.25 L1719.04 1213.25 L1718.45 1213.25 L1717.87 1213.25 L1717.28 1213.25 L1716.7 1213.25 L1716.11 1213.25 L1715.52 1213.25 L1714.94 1213.25 L1714.35 1213.25 L1713.76 1213.25 L1713.18 1213.25 L1712.59 1213.25 L1712 1213.25 L1711.42 1213.25 L1710.83 1213.25 L1710.24 1213.25 L1709.66 1213.25 L1709.07 1213.25 L1708.49 1213.25 L1707.9 1213.25 L1707.31 1213.25 L1706.73 1213.25 L1706.14 1213.25 L1705.55 1213.25 L1704.97 1213.25 L1704.38 1213.25 L1703.79 1213.25 L1703.21 1213.25 L1702.62 1213.25 L1702.04 1213.25 L1701.45 1213.25 L1700.86 1213.25 L1700.28 1213.25 L1699.69 1213.25 L1699.1 1213.25 L1698.52 1213.25 L1697.93 1213.25 L1697.34 1213.25 L1696.76 1213.25 L1696.17 1213.25 L1695.58 1213.25 L1695 1213.25 L1694.41 1213.25 L1693.83 1213.25 L1693.24 1213.25 L1692.65 1213.25 L1692.07 1213.25 L1691.48 1213.25 L1690.89 1213.25 L1690.31 1213.25 L1689.72 1213.25 L1689.13 1213.25 L1688.55 1213.25 L1687.96 1213.25 L1687.37 1213.25 L1686.79 1213.25 L1686.2 1213.25 L1685.62 1213.25 L1685.03 1213.25 L1684.44 1213.25 L1683.86 1213.25 L1683.27 1213.25 L1682.68 1213.25 L1682.1 1213.25 L1681.51 1213.25 L1680.92 1213.25 L1680.34 1213.25 L1679.75 1213.25 L1679.17 1213.25 L1678.58 1213.25 L1677.99 1213.25 L1677.41 1213.25 L1676.82 1213.25 L1676.23 1213.25 L1675.65 1213.25 L1675.06 1213.25 L1674.47 1213.25 L1673.89 1213.25 L1673.3 1213.25 L1672.71 1213.25 L1672.13 1213.25 L1671.54 1213.25 L1670.96 1213.25 L1670.37 1213.25 L1669.78 1213.25 L1669.2 1213.25 L1668.61 1213.25 L1668.02 1213.25 L1667.44 1213.25 L1666.85 1213.25 L1666.26 1213.25 L1665.68 1213.25 L1665.09 1213.25 L1664.5 1213.25 L1663.92 1213.25 L1663.33 1213.25 L1662.75 1213.25 L1662.16 1213.25 L1661.57 1213.25 L1660.99 1213.25 L1660.4 1213.25 L1659.81 1213.25 L1659.23 1213.25 L1658.64 1213.25 L1658.05 1213.25 L1657.47 1213.25 L1656.88 1213.25 L1656.29 1213.25 L1655.71 1213.25 L1655.12 1213.25 L1654.54 1213.25 L1653.95 1213.25 L1653.36 1213.25 L1652.78 1213.25 L1652.19 1213.25 L1651.6 1213.25 L1651.02 1213.25 L1650.43 1213.25 L1649.84 1213.25 L1649.26 1213.25 L1648.67 1213.25 L1648.09 1213.25 L1647.5 1213.25 L1646.91 1213.25 L1646.33 1213.25 L1645.74 1213.25 L1645.15 1213.25 L1644.57 1213.25 L1643.98 1213.25 L1643.39 1213.25 L1642.81 1213.25 L1642.22 1213.25 L1641.63 1213.25 L1641.05 1213.25 L1640.46 1213.25 L1639.88 1213.25 L1639.29 1213.25 L1638.7 1213.25 L1638.12 1213.25 L1637.53 1213.25 L1636.94 1213.25 L1636.36 1213.25 L1635.77 1213.25 L1635.18 1213.25 L1634.6 1213.25 L1634.01 1213.25 L1633.42 1213.25 L1632.84 1213.25 L1632.25 1213.25 L1631.67 1213.25 L1631.08 1213.25 L1630.49 1213.25 L1629.91 1213.25 L1629.32 1213.25 L1628.73 1213.25 L1628.15 1213.25 L1627.56 1213.25 L1626.97 1213.25 L1626.39 1213.25 L1625.8 1213.25 L1625.22 1213.25 L1624.63 1213.25 L1624.04 1213.25 L1623.46 1213.25 L1622.87 1213.25 L1622.28 1213.25 L1621.7 1213.25 L1621.11 1213.25 L1620.52 1213.25 L1619.94 1213.25 L1619.35 1213.25 L1618.76 1213.25 L1618.18 1213.25 L1617.59 1213.25 L1617.01 1213.25 L1616.42 1213.25 L1615.83 1213.25 L1615.25 1213.25 L1614.66 1213.25 L1614.07 1213.25 L1613.49 1213.25 L1612.9 1213.25 L1612.31 1213.25 L1611.73 1213.25 L1611.14 1213.25 L1610.55 1213.25 L1609.97 1213.25 L1609.38 1213.25 L1608.8 1213.25 L1608.21 1213.25 L1607.62 1213.25 L1607.04 1213.25 L1606.45 1213.25 L1605.86 1213.25 L1605.28 1213.25 L1604.69 1213.25 L1604.1 1213.25 L1603.52 1213.25 L1602.93 1213.25 L1602.34 1213.25 L1601.76 1213.25 L1601.17 1213.25 L1600.59 1213.25 L1600 1213.25 L1599.41 1213.25 L1598.83 1213.25 L1598.24 1213.25 L1597.65 1213.25 L1597.07 1213.25 L1596.48 1213.25 L1595.89 1213.25 L1595.31 1213.25 L1594.72 1213.25 L1594.14 1213.25 L1593.55 1213.25 L1592.96 1213.25 L1592.38 1213.25 L1591.79 1213.25 L1591.2 1213.25 L1590.62 1213.25 L1590.03 1213.25 L1589.44 1213.25 L1588.86 1213.25 L1588.27 1213.25 L1587.68 1213.25 L1587.1 1213.25 L1586.51 1213.25 L1585.93 1213.25 L1585.34 1213.25 L1584.75 1213.25 L1584.17 1213.25 L1583.58 1213.25 L1582.99 1213.25 L1582.41 1213.25 L1581.82 1213.25 L1581.23 1213.25 L1580.65 1213.25 L1580.06 1213.25 L1579.47 1213.25 L1578.89 1213.25 L1578.3 1213.25 L1577.72 1213.25 L1577.13 1213.25 L1576.54 1213.25 L1575.96 1213.25 L1575.37 1213.25 L1574.78 1213.25 L1574.2 1213.25 L1573.61 1213.25 L1573.02 1213.25 L1572.44 1213.25 L1571.85 1213.25 L1571.27 1213.25 L1570.68 1213.25 L1570.09 1213.25 L1569.51 1213.25 L1568.92 1213.25 L1568.33 1213.25 L1567.75 1213.25 L1567.16 1213.25 L1566.57 1213.25 L1565.99 1213.25 L1565.4 1213.25 L1564.81 1213.25 L1564.23 1213.25 L1563.64 1213.25 L1563.06 1213.25 L1562.47 1213.25 L1561.88 1213.25 L1561.3 1213.25 L1560.71 1213.25 L1560.12 1213.25 L1559.54 1213.25 L1558.95 1213.25 L1558.36 1213.25 L1557.78 1213.25 L1557.19 1213.25 L1556.6 1213.25 L1556.02 1213.25 L1555.43 1213.25 L1554.85 1213.25 L1554.26 1213.25 L1553.67 1213.25 L1553.09 1213.25 L1552.5 1213.25 L1551.91 1213.25 L1551.33 1213.25 L1550.74 1213.25 L1550.15 1213.25 L1549.57 1213.25 L1548.98 1213.25 L1548.4 1213.25 L1547.81 1213.25 L1547.22 1213.25 L1546.64 1213.25 L1546.05 1213.25 L1545.46 1213.25 L1544.88 1213.25 L1544.29 1213.25 L1543.7 1213.25 L1543.12 1213.25 L1542.53 1213.25 L1541.94 1213.25 L1541.36 1213.25 L1540.77 1213.25 L1540.19 1213.25 L1539.6 1213.25 L1539.01 1213.25 L1538.43 1213.25 L1537.84 1213.25 L1537.25 1213.25 L1536.67 1213.25 L1536.08 1213.25 L1535.49 1213.25 L1534.91 1213.25 L1534.32 1213.25 L1533.73 1213.25 L1533.15 1213.25 L1532.56 1213.25 L1531.98 1213.25 L1531.39 1213.25 L1530.8 1213.25 L1530.22 1213.25 L1529.63 1213.25 L1529.04 1213.25 L1528.46 1213.25 L1527.87 1213.25 L1527.28 1213.25 L1526.7 1213.25 L1526.11 1213.25 L1525.52 1213.25 L1524.94 1213.25 L1524.35 1213.25 L1523.77 1213.25 L1523.18 1213.25 L1522.59 1213.25 L1522.01 1213.25 L1521.42 1213.25 L1520.83 1213.25 L1520.25 1213.25 L1519.66 1213.25 L1519.07 1213.25 L1518.49 1213.25 L1517.9 1213.25 L1517.32 1213.25 L1516.73 1213.25 L1516.14 1213.25 L1515.56 1213.25 L1514.97 1213.25 L1514.38 1213.25 L1513.8 1213.25 L1513.21 1213.25 L1512.62 1213.25 L1512.04 1213.25 L1511.45 1213.25 L1510.86 1213.25 L1510.28 1213.25 L1509.69 1213.25 L1509.11 1213.25 L1508.52 1213.25 L1507.93 1213.25 L1507.35 1213.25 L1506.76 1213.25 L1506.17 1213.25 L1505.59 1213.25 L1505 1213.25 L1504.41 1213.25 L1503.83 1213.25 L1503.24 1213.25 L1502.65 1213.25 L1502.07 1213.25 L1501.48 1213.25 L1500.9 1213.25 L1500.31 1213.25 L1499.72 1213.25 L1499.14 1213.25 L1498.55 1213.25 L1497.96 1213.25 L1497.38 1213.25 L1496.79 1213.25 L1496.2 1213.25 L1495.62 1213.25 L1495.03 1213.25 L1494.45 1213.25 L1493.86 1213.25 L1493.27 1213.25 L1492.69 1213.25 L1492.1 1213.25 L1491.51 1213.25 L1490.93 1213.25 L1490.34 1213.25 L1489.75 1213.25 L1489.17 1213.25 L1488.58 1213.25 L1487.99 1213.25 L1487.41 1213.25 L1486.82 1213.25 L1486.24 1213.25 L1485.65 1213.25 L1485.06 1213.25 L1484.48 1213.25 L1483.89 1213.25 L1483.3 1213.25 L1482.72 1213.25 L1482.13 1213.25 L1481.54 1213.25 L1480.96 1213.25 L1480.37 1213.25 L1479.78 1213.25 L1479.2 1213.25 L1478.61 1213.25 L1478.03 1213.25 L1477.44 1213.25 L1476.85 1213.25 L1476.27 1213.25 L1475.68 1213.25 L1475.09 1213.25 L1474.51 1213.25 L1473.92 1213.25 L1473.33 1213.25 L1472.75 1213.25 L1472.16 1213.25 L1471.57 1213.25 L1470.99 1213.25 L1470.4 1213.25 L1469.82 1213.25 L1469.23 1213.25 L1468.64 1213.25 L1468.06 1213.25 L1467.47 1213.25 L1466.88 1213.25 L1466.3 1213.25 L1465.71 1213.25 L1465.12 1213.25 L1464.54 1213.25 L1463.95 1213.25 L1463.37 1213.25 L1462.78 1213.25 L1462.19 1213.25 L1461.61 1213.25 L1461.02 1213.25 L1460.43 1213.25 L1459.85 1213.25 L1459.26 1213.25 L1458.67 1213.25 L1458.09 1213.25 L1457.5 1213.25 L1456.91 1213.25 L1456.33 1213.25 L1455.74 1213.25 L1455.16 1213.25 L1454.57 1213.25 L1453.98 1213.25 L1453.4 1213.25 L1452.81 1213.25 L1452.22 1213.25 L1451.64 1213.25 L1451.05 1213.25 L1450.46 1213.25 L1449.88 1213.25 L1449.29 1213.25 L1448.7 1213.25 L1448.12 1213.25 L1447.53 1213.25 L1446.95 1213.25 L1446.36 1213.25 L1445.77 1213.25 L1445.19 1213.25 L1444.6 1213.25 L1444.01 1213.25 L1443.43 1213.25 L1442.84 1213.25 L1442.25 1213.25 L1441.67 1213.25 L1441.08 1213.25 L1440.5 1213.25 L1439.91 1213.25 L1439.32 1213.25 L1438.74 1213.25 L1438.15 1213.25 L1437.56 1213.25 L1436.98 1213.25 L1436.39 1213.25 L1435.8 1213.25 L1435.22 1213.25 L1434.63 1213.25 L1434.04 1213.25 L1433.46 1213.25 L1432.87 1213.25 L1432.29 1213.25 L1431.7 1213.25 L1431.11 1213.25 L1430.53 1213.25 L1429.94 1213.25 L1429.35 1213.25 L1428.77 1213.25 L1428.18 1213.25 L1427.59 1213.25 L1427.01 1213.25 L1426.42 1213.25 L1425.83 1213.25 L1425.25 1213.25 L1424.66 1213.25 L1424.08 1213.25 L1423.49 1213.25 L1422.9 1213.25 L1422.32 1213.25 L1421.73 1213.25 L1421.14 1213.25 L1420.56 1213.25 L1419.97 1213.25 L1419.38 1213.25 L1418.8 1213.25 L1418.21 1213.25 L1417.63 1213.25 L1417.04 1213.25 L1416.45 1213.25 L1415.87 1213.25 L1415.28 1213.25 L1414.69 1213.25 L1414.11 1213.25 L1413.52 1213.25 L1412.93 1213.25 L1412.35 1213.25 L1411.76 1213.25 L1411.17 1213.25 L1410.59 1213.25 L1410 1213.25 L1409.42 1213.25 L1408.83 1213.25 L1408.24 1213.25 L1407.66 1213.25 L1407.07 1213.25 L1406.48 1213.25 L1405.9 1213.25 L1405.31 1213.25 L1404.72 1213.25 L1404.14 1213.25 L1403.55 1213.25 L1402.96 1213.25 L1402.38 1213.25 L1401.79 1213.25 L1401.21 1213.25 L1400.62 1213.25 L1400.03 1213.25 L1399.45 1213.25 L1398.86 1213.25 L1398.27 1213.25 L1397.69 1213.25 L1397.1 1213.25 L1396.51 1213.25 L1395.93 1213.25 L1395.34 1213.25 L1394.75 1213.25 L1394.17 1213.25 L1393.58 1213.25 L1393 1213.25 L1392.41 1213.25 L1391.82 1213.25 L1391.24 1213.25 L1390.65 1213.25 L1390.06 1213.25 L1389.48 1213.25 L1388.89 1213.25 L1388.3 1213.25 L1387.72 1213.25 L1387.13 1213.25 L1386.55 1213.25 L1385.96 1213.25 L1385.37 1213.25 L1384.79 1213.25 L1384.2 1213.25 L1383.61 1213.25 L1383.03 1213.25 L1382.44 1213.25 L1381.85 1213.25 L1381.27 1213.25 L1380.68 1213.25 L1380.09 1213.25 L1379.51 1213.25 L1378.92 1213.25 L1378.34 1213.25 L1377.75 1213.25 L1377.16 1213.25 L1376.58 1213.25 L1375.99 1213.25 L1375.4 1213.25 L1374.82 1213.25 L1374.23 1213.25 L1373.64 1213.25 L1373.06 1213.25 L1372.47 1213.25 L1371.88 1213.25 L1371.3 1213.25 L1370.71 1213.25 L1370.13 1213.25 L1369.54 1213.25 L1368.95 1213.25 L1368.37 1213.25 L1367.78 1213.25 L1367.19 1213.25 L1366.61 1213.25 L1366.02 1213.25 L1365.43 1213.25 L1364.85 1213.25 L1364.26 1213.25 L1363.68 1213.25 L1363.09 1213.25 L1362.5 1213.25 L1361.92 1213.25 L1361.33 1213.25 L1360.74 1213.25 L1360.16 1213.25 L1359.57 1213.25 L1358.98 1213.25 L1358.4 1213.25 L1357.81 1213.25 L1357.22 1213.25 L1356.64 1213.25 L1356.05 1213.25 L1355.47 1213.25 L1354.88 1213.25 L1354.29 1213.25 L1353.71 1213.25 L1353.12 1213.25 L1352.53 1213.25 L1351.95 1213.25 L1351.36 1213.25 L1350.77 1213.25 L1350.19 1213.25 L1349.6 1213.25 L1349.01 1213.25 L1348.43 1213.25 L1347.84 1213.25 L1347.26 1213.25 L1346.67 1213.25 L1346.08 1213.25 L1345.5 1213.25 L1344.91 1213.25 L1344.32 1213.25 L1343.74 1213.25 L1343.15 1213.25 L1342.56 1213.25 L1341.98 1213.25 L1341.39 1213.25 L1340.8 1213.25 L1340.22 1213.25 L1339.63 1213.25 L1339.05 1213.25 L1338.46 1213.25 L1337.87 1213.25 L1337.29 1213.25 L1336.7 1213.25 L1336.11 1213.25 L1335.53 1213.25 L1334.94 1213.25 L1334.35 1213.25 L1333.77 1213.25 L1333.18 1213.25 L1332.6 1213.25 L1332.01 1213.25 L1331.42 1213.25 L1330.84 1213.25 L1330.25 1213.25 L1329.66 1213.25 L1329.08 1213.25 L1328.49 1213.25 L1327.9 1213.25 L1327.32 1213.25 L1326.73 1213.25 L1326.14 1213.25 L1325.56 1213.25 L1324.97 1213.25 L1324.39 1213.25 L1323.8 1213.25 L1323.21 1213.25 L1322.63 1213.25 L1322.04 1213.25 L1321.45 1213.25 L1320.87 1213.25 L1320.28 1213.25 L1319.69 1213.25 L1319.11 1213.25 L1318.52 1213.25 L1317.93 1213.25 L1317.35 1213.25 L1316.76 1213.25 L1316.18 1213.25 L1315.59 1213.25 L1315 1213.25 L1314.42 1213.25 L1313.83 1213.25 L1313.24 1213.25 L1312.66 1213.25 L1312.07 1213.25 L1311.48 1213.25 L1310.9 1213.25 L1310.31 1213.25 L1309.73 1213.25 L1309.14 1213.25 L1308.55 1213.25 L1307.97 1213.25 L1307.38 1213.25 L1306.79 1213.25 L1306.21 1213.25 L1305.62 1213.25 L1305.03 1213.25 L1304.45 1213.25 L1303.86 1213.25 L1303.27 1213.25 L1302.69 1213.25 L1302.1 1213.25 L1301.52 1213.25 L1300.93 1213.25 L1300.34 1213.25 L1299.76 1213.25 L1299.17 1213.25 L1298.58 1213.25 L1298 1213.25 L1297.41 1213.25 L1296.82 1213.25 L1296.24 1213.25 L1295.65 1213.25 L1295.06 1213.25 L1294.48 1213.25 L1293.89 1213.25 L1293.31 1213.25 L1292.72 1213.25 L1292.13 1213.25 L1291.55 1213.25 L1290.96 1213.25 L1290.37 1213.25 L1289.79 1213.25 L1289.2 1213.25 L1288.61 1213.25 L1288.03 1213.25 L1287.44 1213.25 L1286.86 1213.25 L1286.27 1213.25 L1285.68 1213.25 L1285.1 1213.25 L1284.51 1213.25 L1283.92 1213.25 L1283.34 1213.25 L1282.75 1213.25 L1282.16 1213.25 L1281.58 1213.25 L1280.99 1213.25 L1280.4 1213.25 L1279.82 1213.25 L1279.23 1213.25 L1278.65 1213.25 L1278.06 1213.25 L1277.47 1213.25 L1276.89 1213.25 L1276.3 1213.25 L1275.71 1213.25 L1275.13 1213.25 L1274.54 1213.25 L1273.95 1213.25 L1273.37 1213.25 L1272.78 1213.25 L1272.19 1213.25 L1271.61 1213.25 L1271.02 1213.25 L1270.44 1213.25 L1269.85 1213.25 L1269.26 1213.25 L1268.68 1213.25 L1268.09 1213.25 L1267.5 1213.25 L1266.92 1213.25 L1266.33 1213.25 L1265.74 1213.25 L1265.16 1213.25 L1264.57 1213.25 L1263.98 1213.25 L1263.4 1213.25 L1262.81 1213.25 L1262.23 1213.25 L1261.64 1213.25 L1261.05 1213.25 L1260.47 1213.25 L1259.88 1213.25 L1259.29 1213.25 L1258.71 1213.25 L1258.12 1213.25 L1257.53 1213.25 L1256.95 1213.25 L1256.36 1213.25 L1255.78 1213.25 L1255.19 1213.25 L1254.6 1213.25 L1254.02 1213.25 L1253.43 1213.25 L1252.84 1213.25 L1252.26 1213.25 L1251.67 1213.25 L1251.08 1213.25 L1250.5 1213.25 L1249.91 1213.25 L1249.32 1213.25 L1248.74 1213.25 L1248.15 1213.25 L1247.57 1213.25 L1246.98 1213.25 L1246.39 1213.25 L1245.81 1213.25 L1245.22 1213.25 L1244.63 1213.25 L1244.05 1213.25 L1243.46 1213.25 L1242.87 1213.25 L1242.29 1213.25 L1241.7 1213.25 L1241.11 1213.25 L1240.53 1213.25 L1239.94 1213.25 L1239.36 1213.25 L1238.77 1213.25 L1238.18 1213.25 L1237.6 1213.25 L1237.01 1213.25 L1236.42 1213.25 L1235.84 1213.25 L1235.25 1213.25 L1234.66 1213.25 L1234.08 1213.25 L1233.49 1213.25 L1232.91 1213.25 L1232.32 1213.25 L1231.73 1213.25 L1231.15 1213.25 L1230.56 1213.25 L1229.97 1213.25 L1229.39 1213.25 L1228.8 1213.25 L1228.21 1213.25 L1227.63 1213.25 L1227.04 1213.25 L1226.45 1213.25 L1225.87 1213.25 L1225.28 1213.25 L1224.7 1213.25 L1224.11 1213.25 L1223.52 1213.25 L1222.94 1213.25 L1222.35 1213.25 L1221.76 1213.25 L1221.18 1213.25 L1220.59 1213.25 L1220 1213.25 L1219.42 1213.25 L1218.83 1213.25 L1218.24 1213.25 L1217.66 1213.25 L1217.07 1213.25 L1216.49 1213.25 L1215.9 1213.25 L1215.31 1213.25 L1214.73 1213.25 L1214.14 1213.25 L1213.55 1213.25 L1212.97 1213.25 L1212.38 1213.25 L1211.79 1213.25 L1211.21 1213.25 L1210.62 1213.25 L1210.03 1213.25 L1209.45 1213.25 L1208.86 1213.25 L1208.28 1213.25 L1207.69 1213.25 L1207.1 1213.25 L1206.52 1213.25 L1205.93 1213.25 L1205.34 1213.25 L1204.76 1213.25 L1204.17 1213.25 L1203.58 1213.25 L1203 1213.25 L1202.41 1213.25 L1201.83 1213.25 L1201.24 1213.25 L1200.65 1213.25 L1200.07 1213.25 L1199.48 1213.25 L1198.89 1213.25 L1198.31 1213.25 L1197.72 1213.25 L1197.13 1213.25 L1196.55 1213.25 L1195.96 1213.25 L1195.37 1213.25 L1194.79 1213.25 L1194.2 1213.25 L1193.62 1213.25 L1193.03 1213.25 L1192.44 1213.25 L1191.86 1213.25 L1191.27 1213.25 L1190.68 1213.25 L1190.1 1213.25 L1189.51 1213.25 L1188.92 1213.25 L1188.34 1213.25 L1187.75 1213.25 L1187.16 1213.25 L1186.58 1213.25 L1185.99 1213.25 L1185.41 1213.25 L1184.82 1213.25 L1184.23 1213.25 L1183.65 1213.25 L1183.06 1213.25 L1182.47 1213.25 L1181.89 1213.25 L1181.3 1213.25 L1180.71 1213.25 L1180.13 1213.25 L1179.54 1213.25 L1178.96 1213.25 L1178.37 1213.25 L1177.78 1213.25 L1177.2 1213.25 L1176.61 1213.25 L1176.02 1213.25 L1175.44 1213.25 L1174.85 1213.25 L1174.26 1213.25 L1173.68 1213.25 L1173.09 1213.25 L1172.5 1213.25 L1171.92 1213.25 L1171.33 1213.25 L1170.75 1213.25 L1170.16 1213.25 L1169.57 1213.25 L1168.99 1213.25 L1168.4 1213.25 L1167.81 1213.25 L1167.23 1213.25 L1166.64 1213.25 L1166.05 1213.25 L1165.47 1213.25 L1164.88 1213.25 L1164.29 1213.25 L1163.71 1213.25 L1163.12 1213.25 L1162.54 1213.25 L1161.95 1213.25 L1161.36 1213.25 L1160.78 1213.25 L1160.19 1213.25 L1159.6 1213.25 L1159.02 1213.25 L1158.43 1213.25 L1157.84 1213.25 L1157.26 1213.25 L1156.67 1213.25 L1156.09 1213.25 L1155.5 1213.25 L1154.91 1213.25 L1154.33 1213.25 L1153.74 1213.25 L1153.15 1213.25 L1152.57 1213.25 L1151.98 1213.25 L1151.39 1213.25 L1150.81 1213.25 L1150.22 1213.25 L1149.63 1213.25 L1149.05 1213.25 L1148.46 1213.25 L1147.88 1213.25 L1147.29 1213.25 L1146.7 1213.25 L1146.12 1213.25 L1145.53 1213.25 L1144.94 1213.25 L1144.36 1213.25 L1143.77 1213.25 L1143.18 1213.25 L1142.6 1213.25 L1142.01 1213.25 L1141.42 1213.25 L1140.84 1213.25 L1140.25 1213.25 L1139.67 1213.25 L1139.08 1213.25 L1138.49 1213.25 L1137.91 1213.25 L1137.32 1213.25 L1136.73 1213.25 L1136.15 1213.25 L1135.56 1213.25 L1134.97 1213.25 L1134.39 1213.25 L1133.8 1213.25 L1133.21 1213.25 L1132.63 1213.25 L1132.04 1213.25 L1131.46 1213.25 L1130.87 1213.25 L1130.28 1213.25 L1129.7 1213.25 L1129.11 1213.25 L1128.52 1213.25 L1127.94 1213.25 L1127.35 1213.25 L1126.76 1213.25 L1126.18 1213.25 L1125.59 1213.25 L1125.01 1213.25 L1124.42 1213.25 L1123.83 1213.25 L1123.25 1213.25 L1122.66 1213.25 L1122.07 1213.25 L1121.49 1213.25 L1120.9 1213.25 L1120.31 1213.25 L1119.73 1213.25 L1119.14 1213.25 L1118.55 1213.25 L1117.97 1213.25 L1117.38 1213.25 L1116.8 1213.25 L1116.21 1213.25 L1115.62 1213.25 L1115.04 1213.25 L1114.45 1213.25 L1113.86 1213.25 L1113.28 1213.25 L1112.69 1213.25 L1112.1 1213.25 L1111.52 1213.25 L1110.93 1213.25 L1110.34 1213.25 L1109.76 1213.25 L1109.17 1213.25 L1108.59 1213.25 L1108 1213.25 L1107.41 1213.25 L1106.83 1213.25 L1106.24 1213.25 L1105.65 1213.25 L1105.07 1213.25 L1104.48 1213.25 L1103.89 1213.25 L1103.31 1213.25 L1102.72 1213.25 L1102.14 1213.25 L1101.55 1213.25 L1100.96 1213.25 L1100.38 1213.25 L1099.79 1213.25 L1099.2 1213.25 L1098.62 1213.25 L1098.03 1213.25 L1097.44 1213.25 L1096.86 1213.25 L1096.27 1213.25 L1095.68 1213.25 L1095.1 1213.25 L1094.51 1213.25 L1093.93 1213.25 L1093.34 1213.25 L1092.75 1213.25 L1092.17 1213.25 L1091.58 1213.25 L1090.99 1213.25 L1090.41 1213.25 L1089.82 1213.25 L1089.23 1213.25 L1088.65 1213.25 L1088.06 1213.25 L1087.47 1213.25 L1086.89 1213.25 L1086.3 1213.25 L1085.72 1213.25 L1085.13 1213.25 L1084.54 1213.25 L1083.96 1213.25 L1083.37 1213.25 L1082.78 1213.25 L1082.2 1213.25 L1081.61 1213.25 L1081.02 1213.25 L1080.44 1213.25 L1079.85 1213.25 L1079.26 1213.25 L1078.68 1213.25 L1078.09 1213.25 L1077.51 1213.25 L1076.92 1213.25 L1076.33 1213.25 L1075.75 1213.25 L1075.16 1213.25 L1074.57 1213.25 L1073.99 1213.25 L1073.4 1213.25 L1072.81 1213.25 L1072.23 1213.25 L1071.64 1213.25 L1071.06 1213.25 L1070.47 1213.25 L1069.88 1213.25 L1069.3 1213.25 L1068.71 1213.25 L1068.12 1213.25 L1067.54 1213.25 L1066.95 1213.25 L1066.36 1213.25 L1065.78 1213.25 L1065.19 1213.25 L1064.6 1213.25 L1064.02 1213.25 L1063.43 1213.25 L1062.85 1213.25 L1062.26 1213.25 L1061.67 1213.25 L1061.09 1213.25 L1060.5 1213.25 L1059.91 1213.25 L1059.33 1213.25 L1058.74 1213.25 L1058.15 1213.25 L1057.57 1213.25 L1056.98 1213.25 L1056.39 1213.25 L1055.81 1213.25 L1055.22 1213.25 L1054.64 1213.25 L1054.05 1213.25 L1053.46 1213.25 L1052.88 1213.25 L1052.29 1213.25 L1051.7 1213.25 L1051.12 1213.25 L1050.53 1213.25 L1049.94 1213.25 L1049.36 1213.25 L1048.77 1213.25 L1048.19 1213.25 L1047.6 1213.25 L1047.01 1213.25 L1046.43 1213.25 L1045.84 1213.25 L1045.25 1213.25 L1044.67 1213.25 L1044.08 1213.25 L1043.49 1213.25 L1042.91 1213.25 L1042.32 1213.25 L1041.73 1213.25 L1041.15 1213.25 L1040.56 1213.25 L1039.98 1213.25 L1039.39 1213.25 L1038.8 1213.25 L1038.22 1213.25 L1037.63 1213.25 L1037.04 1213.25 L1036.46 1213.25 L1035.87 1213.25 L1035.28 1213.25 L1034.7 1213.25 L1034.11 1213.25 L1033.52 1213.25 L1032.94 1213.25 L1032.35 1213.25 L1031.77 1213.25 L1031.18 1213.25 L1030.59 1213.25 L1030.01 1213.25 L1029.42 1213.25 L1028.83 1213.25 L1028.25 1213.25 L1027.66 1213.25 L1027.07 1213.25 L1026.49 1213.25 L1025.9 1213.25 L1025.32 1213.25 L1024.73 1213.25 L1024.14 1213.25 L1023.56 1213.25 L1022.97 1213.25 L1022.38 1213.25 L1021.8 1213.25 L1021.21 1213.25 L1020.62 1213.25 L1020.04 1213.25 L1019.45 1213.25 L1018.86 1213.25 L1018.28 1213.25 L1017.69 1213.25 L1017.11 1213.25 L1016.52 1213.25 L1015.93 1213.25 L1015.35 1213.25 L1014.76 1213.25 L1014.17 1213.25 L1013.59 1213.25 L1013 1213.25 L1012.41 1213.25 L1011.83 1213.25 L1011.24 1213.25 L1010.65 1213.25 L1010.07 1213.25 L1009.48 1213.25 L1008.9 1213.25 L1008.31 1213.25 L1007.72 1213.25 L1007.14 1213.25 L1006.55 1213.25 L1005.96 1213.25 L1005.38 1213.25 L1004.79 1213.25 L1004.2 1213.25 L1003.62 1213.25 L1003.03 1213.25 L1002.44 1213.25 L1001.86 1213.25 L1001.27 1213.25 L1000.69 1213.25 L1000.1 1213.25 L999.513 1213.25 L998.926 1213.25 L998.34 1213.25 L997.754 1213.25 L997.167 1213.25 L996.581 1213.25 L995.994 1213.25 L995.408 1213.25 L994.822 1213.25 L994.235 1213.25 L993.649 1213.25 L993.062 1213.25 L992.476 1213.25 L991.889 1213.25 L991.303 1213.25 L990.717 1213.25 L990.13 1213.25 L989.544 1213.25 L988.957 1213.25 L988.371 1213.25 L987.785 1213.25 L987.198 1213.25 L986.612 1213.25 L986.025 1213.25  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.32 986.612,1213.32 987.198,1213.32 987.785,1213.32 988.371,1213.32 988.957,1213.32 989.544,1213.32 990.13,1213.32 990.717,1213.32 991.303,1213.32 991.889,1213.32 992.476,1213.32 993.062,1213.32 993.649,1213.32 994.235,1213.32 994.822,1213.32 995.408,1213.32 995.994,1213.32 996.581,1213.32 997.167,1213.32 997.754,1213.32 998.34,1213.32 998.926,1213.32 999.513,1213.32 1000.1,1213.32 1000.69,1213.32 1001.27,1213.32 1001.86,1213.32 1002.44,1213.32 1003.03,1213.32 1003.62,1213.32 1004.2,1213.32 1004.79,1213.32 1005.38,1213.32 1005.96,1213.32 1006.55,1213.32 1007.14,1213.32 1007.72,1213.32 1008.31,1213.32 1008.9,1213.32 1009.48,1213.32 1010.07,1213.32 1010.65,1213.32 1011.24,1213.32 1011.83,1213.32 1012.41,1213.32 1013,1213.32 1013.59,1213.32 1014.17,1213.32 1014.76,1213.32 1015.35,1213.32 1015.93,1213.32 1016.52,1213.32 1017.11,1213.32 1017.69,1213.32 1018.28,1213.32 1018.86,1213.32 1019.45,1213.32 1020.04,1213.32 1020.62,1213.32 1021.21,1213.32 1021.8,1213.32 1022.38,1213.32 1022.97,1213.32 1023.56,1213.32 1024.14,1213.32 1024.73,1213.32 1025.32,1213.32 1025.9,1213.32 1026.49,1213.32 1027.07,1213.32 1027.66,1213.32 1028.25,1213.32 1028.83,1213.32 1029.42,1213.32 1030.01,1213.32 1030.59,1213.32 1031.18,1213.32 1031.77,1213.32 1032.35,1213.32 1032.94,1213.32 1033.52,1213.32 1034.11,1213.32 1034.7,1213.32 1035.28,1213.32 1035.87,1213.32 1036.46,1213.32 1037.04,1213.32 1037.63,1213.32 1038.22,1213.32 1038.8,1213.32 1039.39,1213.32 1039.98,1213.32 1040.56,1213.32 1041.15,1213.32 1041.73,1213.32 1042.32,1213.32 1042.91,1213.32 1043.49,1213.32 1044.08,1213.32 1044.67,1213.32 1045.25,1213.32 1045.84,1213.32 1046.43,1213.32 1047.01,1213.32 1047.6,1213.32 1048.19,1213.32 1048.77,1213.32 1049.36,1213.32 1049.94,1213.32 1050.53,1213.32 1051.12,1213.32 1051.7,1213.32 1052.29,1213.32 1052.88,1213.32 1053.46,1213.32 1054.05,1213.32 1054.64,1213.32 1055.22,1213.32 1055.81,1213.32 1056.39,1213.32 1056.98,1213.32 1057.57,1213.32 1058.15,1213.32 1058.74,1213.32 1059.33,1213.32 1059.91,1213.32 1060.5,1213.32 1061.09,1213.32 1061.67,1213.32 1062.26,1213.32 1062.85,1213.32 1063.43,1213.32 1064.02,1213.32 1064.6,1213.32 1065.19,1213.32 1065.78,1213.32 1066.36,1213.32 1066.95,1213.32 1067.54,1213.32 1068.12,1213.32 1068.71,1213.32 1069.3,1213.32 1069.88,1213.32 1070.47,1213.32 1071.06,1213.32 1071.64,1213.32 1072.23,1213.32 1072.81,1213.32 1073.4,1213.32 1073.99,1213.32 1074.57,1213.32 1075.16,1213.32 1075.75,1213.32 1076.33,1213.32 1076.92,1213.32 1077.51,1213.32 1078.09,1213.32 1078.68,1213.32 1079.26,1213.32 1079.85,1213.32 1080.44,1213.32 1081.02,1213.32 1081.61,1213.32 1082.2,1213.32 1082.78,1213.32 1083.37,1213.32 1083.96,1213.32 1084.54,1213.32 1085.13,1213.32 1085.72,1213.32 1086.3,1213.32 1086.89,1213.32 1087.47,1213.32 1088.06,1213.32 1088.65,1213.32 1089.23,1213.32 1089.82,1213.32 1090.41,1213.32 1090.99,1213.32 1091.58,1213.32 1092.17,1213.32 1092.75,1213.32 1093.34,1213.32 1093.93,1213.32 1094.51,1213.32 1095.1,1213.32 1095.68,1213.32 1096.27,1213.32 1096.86,1213.32 1097.44,1213.32 1098.03,1213.32 1098.62,1213.32 1099.2,1213.32 1099.79,1213.32 1100.38,1213.32 1100.96,1213.32 1101.55,1213.32 1102.14,1213.32 1102.72,1213.32 1103.31,1213.32 1103.89,1213.32 1104.48,1213.32 1105.07,1213.32 1105.65,1213.32 1106.24,1213.32 1106.83,1213.32 1107.41,1213.32 1108,1213.32 1108.59,1213.32 1109.17,1213.32 1109.76,1213.32 1110.34,1213.32 1110.93,1213.32 1111.52,1213.32 1112.1,1213.32 1112.69,1213.32 1113.28,1213.32 1113.86,1213.32 1114.45,1213.32 1115.04,1213.32 1115.62,1213.32 1116.21,1213.32 1116.8,1213.32 1117.38,1213.32 1117.97,1213.32 1118.55,1213.32 1119.14,1213.32 1119.73,1213.32 1120.31,1213.32 1120.9,1213.32 1121.49,1213.32 1122.07,1213.32 1122.66,1213.32 1123.25,1213.32 1123.83,1213.32 1124.42,1213.32 1125.01,1213.32 1125.59,1213.32 1126.18,1213.32 1126.76,1213.32 1127.35,1213.32 1127.94,1213.32 1128.52,1213.32 1129.11,1213.32 1129.7,1213.32 1130.28,1213.32 1130.87,1213.32 1131.46,1213.32 1132.04,1213.32 1132.63,1213.32 1133.21,1213.32 1133.8,1213.32 1134.39,1213.32 1134.97,1213.32 1135.56,1213.32 1136.15,1213.32 1136.73,1213.32 1137.32,1213.32 1137.91,1213.32 1138.49,1213.32 1139.08,1213.32 1139.67,1213.32 1140.25,1213.32 1140.84,1213.32 1141.42,1213.32 1142.01,1213.32 1142.6,1213.32 1143.18,1213.32 1143.77,1213.32 1144.36,1213.32 1144.94,1213.32 1145.53,1213.32 1146.12,1213.32 1146.7,1213.32 1147.29,1213.32 1147.88,1213.32 1148.46,1213.32 1149.05,1213.32 1149.63,1213.32 1150.22,1213.32 1150.81,1213.32 1151.39,1213.32 1151.98,1213.32 1152.57,1213.32 1153.15,1213.32 1153.74,1213.32 1154.33,1213.32 1154.91,1213.32 1155.5,1213.32 1156.09,1213.32 1156.67,1213.32 1157.26,1213.32 1157.84,1213.32 1158.43,1213.32 1159.02,1213.32 1159.6,1213.32 1160.19,1213.32 1160.78,1213.32 1161.36,1213.32 1161.95,1213.32 1162.54,1213.32 1163.12,1213.32 1163.71,1213.32 1164.29,1213.32 1164.88,1213.32 1165.47,1213.32 1166.05,1213.32 1166.64,1213.32 1167.23,1213.32 1167.81,1213.32 1168.4,1213.32 1168.99,1213.32 1169.57,1213.32 1170.16,1213.32 1170.75,1213.32 1171.33,1213.32 1171.92,1213.32 1172.5,1213.32 1173.09,1213.32 1173.68,1213.32 1174.26,1213.32 1174.85,1213.32 1175.44,1213.32 1176.02,1213.32 1176.61,1213.32 1177.2,1213.32 1177.78,1213.32 1178.37,1213.32 1178.96,1213.32 1179.54,1213.32 1180.13,1213.32 1180.71,1213.32 1181.3,1213.32 1181.89,1213.32 1182.47,1213.32 1183.06,1213.32 1183.65,1213.32 1184.23,1213.32 1184.82,1213.32 1185.41,1213.32 1185.99,1213.32 1186.58,1213.32 1187.16,1213.32 1187.75,1213.32 1188.34,1213.32 1188.92,1213.32 1189.51,1213.32 1190.1,1213.32 1190.68,1213.32 1191.27,1213.32 1191.86,1213.32 1192.44,1213.32 1193.03,1213.32 1193.62,1213.32 1194.2,1213.32 1194.79,1213.32 1195.37,1213.32 1195.96,1213.32 1196.55,1213.32 1197.13,1213.32 1197.72,1213.32 1198.31,1213.32 1198.89,1213.32 1199.48,1213.32 1200.07,1213.32 1200.65,1213.32 1201.24,1213.32 1201.83,1213.32 1202.41,1213.32 1203,1213.32 1203.58,1213.32 1204.17,1213.32 1204.76,1213.32 1205.34,1213.32 1205.93,1213.32 1206.52,1213.32 1207.1,1213.32 1207.69,1213.32 1208.28,1213.32 1208.86,1213.32 1209.45,1213.32 1210.03,1213.32 1210.62,1213.32 1211.21,1213.32 1211.79,1213.32 1212.38,1213.32 1212.97,1213.32 1213.55,1213.32 1214.14,1213.32 1214.73,1213.32 1215.31,1213.32 1215.9,1213.32 1216.49,1213.32 1217.07,1213.32 1217.66,1213.32 1218.24,1213.32 1218.83,1213.32 1219.42,1213.32 1220,1213.32 1220.59,1213.32 1221.18,1213.32 1221.76,1213.32 1222.35,1213.32 1222.94,1213.32 1223.52,1213.32 1224.11,1213.32 1224.7,1213.32 1225.28,1213.32 1225.87,1213.32 1226.45,1213.32 1227.04,1213.32 1227.63,1213.32 1228.21,1213.32 1228.8,1213.32 1229.39,1213.32 1229.97,1213.32 1230.56,1213.32 1231.15,1213.32 1231.73,1213.32 1232.32,1213.32 1232.91,1213.32 1233.49,1213.32 1234.08,1213.32 1234.66,1213.32 1235.25,1213.32 1235.84,1213.32 1236.42,1213.32 1237.01,1213.32 1237.6,1213.32 1238.18,1213.32 1238.77,1213.32 1239.36,1213.32 1239.94,1213.32 1240.53,1213.32 1241.11,1213.32 1241.7,1213.32 1242.29,1213.32 1242.87,1213.32 1243.46,1213.32 1244.05,1213.32 1244.63,1213.32 1245.22,1213.32 1245.81,1213.32 1246.39,1213.32 1246.98,1213.32 1247.57,1213.32 1248.15,1213.32 1248.74,1213.32 1249.32,1213.32 1249.91,1213.32 1250.5,1213.32 1251.08,1213.32 1251.67,1213.32 1252.26,1213.32 1252.84,1213.32 1253.43,1213.32 1254.02,1213.32 1254.6,1213.32 1255.19,1213.32 1255.78,1213.32 1256.36,1213.32 1256.95,1213.32 1257.53,1213.32 1258.12,1213.32 1258.71,1213.32 1259.29,1213.32 1259.88,1213.32 1260.47,1213.32 1261.05,1213.32 1261.64,1213.32 1262.23,1213.32 1262.81,1213.32 1263.4,1213.32 1263.98,1213.32 1264.57,1213.32 1265.16,1213.32 1265.74,1213.32 1266.33,1213.32 1266.92,1213.32 1267.5,1213.32 1268.09,1213.32 1268.68,1213.32 1269.26,1213.32 1269.85,1213.32 1270.44,1213.32 1271.02,1213.32 1271.61,1213.32 1272.19,1213.32 1272.78,1213.32 1273.37,1213.32 1273.95,1213.32 1274.54,1213.32 1275.13,1213.32 1275.71,1213.32 1276.3,1213.32 1276.89,1213.32 1277.47,1213.32 1278.06,1213.32 1278.65,1213.32 1279.23,1213.32 1279.82,1213.32 1280.4,1213.32 1280.99,1213.32 1281.58,1213.32 1282.16,1213.32 1282.75,1213.32 1283.34,1213.32 1283.92,1213.32 1284.51,1213.32 1285.1,1213.32 1285.68,1213.32 1286.27,1213.32 1286.86,1213.32 1287.44,1213.32 1288.03,1213.32 1288.61,1213.32 1289.2,1213.32 1289.79,1213.32 1290.37,1213.32 1290.96,1213.32 1291.55,1213.32 1292.13,1213.32 1292.72,1213.32 1293.31,1213.32 1293.89,1213.32 1294.48,1213.32 1295.06,1213.32 1295.65,1213.32 1296.24,1213.32 1296.82,1213.32 1297.41,1213.32 1298,1213.32 1298.58,1213.32 1299.17,1213.32 1299.76,1213.32 1300.34,1213.32 1300.93,1213.32 1301.52,1213.32 1302.1,1213.32 1302.69,1213.32 1303.27,1213.32 1303.86,1213.32 1304.45,1213.32 1305.03,1213.32 1305.62,1213.32 1306.21,1213.32 1306.79,1213.32 1307.38,1213.32 1307.97,1213.32 1308.55,1213.32 1309.14,1213.32 1309.73,1213.32 1310.31,1213.32 1310.9,1213.32 1311.48,1213.32 1312.07,1213.32 1312.66,1213.32 1313.24,1213.32 1313.83,1213.32 1314.42,1213.32 1315,1213.32 1315.59,1213.32 1316.18,1213.32 1316.76,1213.32 1317.35,1213.32 1317.93,1213.32 1318.52,1213.32 1319.11,1213.32 1319.69,1213.32 1320.28,1213.32 1320.87,1213.32 1321.45,1213.32 1322.04,1213.32 1322.63,1213.32 1323.21,1213.32 1323.8,1213.32 1324.39,1213.32 1324.97,1213.32 1325.56,1213.32 1326.14,1213.32 1326.73,1213.32 1327.32,1213.32 1327.9,1213.32 1328.49,1213.32 1329.08,1213.32 1329.66,1213.32 1330.25,1213.32 1330.84,1213.32 1331.42,1213.32 1332.01,1213.32 1332.6,1213.32 1333.18,1213.32 1333.77,1213.32 1334.35,1213.32 1334.94,1213.32 1335.53,1213.32 1336.11,1213.32 1336.7,1213.32 1337.29,1213.32 1337.87,1213.32 1338.46,1213.32 1339.05,1213.32 1339.63,1213.32 1340.22,1213.32 1340.8,1213.32 1341.39,1213.32 1341.98,1213.32 1342.56,1213.32 1343.15,1213.32 1343.74,1213.32 1344.32,1213.32 1344.91,1213.32 1345.5,1213.32 1346.08,1213.32 1346.67,1213.32 1347.26,1213.32 1347.84,1213.32 1348.43,1213.32 1349.01,1213.32 1349.6,1213.32 1350.19,1213.32 1350.77,1213.32 1351.36,1213.32 1351.95,1213.32 1352.53,1213.32 1353.12,1213.32 1353.71,1213.32 1354.29,1213.32 1354.88,1213.32 1355.47,1213.32 1356.05,1213.32 1356.64,1213.32 1357.22,1213.32 1357.81,1213.32 1358.4,1213.32 1358.98,1213.32 1359.57,1213.32 1360.16,1213.32 1360.74,1213.32 1361.33,1213.32 1361.92,1213.32 1362.5,1213.32 1363.09,1213.32 1363.68,1213.32 1364.26,1213.32 1364.85,1213.32 1365.43,1213.32 1366.02,1213.32 1366.61,1213.32 1367.19,1213.32 1367.78,1213.32 1368.37,1213.32 1368.95,1213.32 1369.54,1213.32 1370.13,1213.32 1370.71,1213.32 1371.3,1213.32 1371.88,1213.32 1372.47,1213.32 1373.06,1213.32 1373.64,1213.32 1374.23,1213.32 1374.82,1213.32 1375.4,1213.32 1375.99,1213.32 1376.58,1213.32 1377.16,1213.32 1377.75,1213.32 1378.34,1213.32 1378.92,1213.32 1379.51,1213.32 1380.09,1213.32 1380.68,1213.32 1381.27,1213.32 1381.85,1213.32 1382.44,1213.32 1383.03,1213.32 1383.61,1213.32 1384.2,1213.32 1384.79,1213.32 1385.37,1213.32 1385.96,1213.32 1386.55,1213.32 1387.13,1213.32 1387.72,1213.32 1388.3,1213.32 1388.89,1213.32 1389.48,1213.32 1390.06,1213.32 1390.65,1213.32 1391.24,1213.32 1391.82,1213.32 1392.41,1213.32 1393,1213.32 1393.58,1213.32 1394.17,1213.32 1394.75,1213.32 1395.34,1213.32 1395.93,1213.32 1396.51,1213.32 1397.1,1213.32 1397.69,1213.32 1398.27,1213.32 1398.86,1213.32 1399.45,1213.32 1400.03,1213.32 1400.62,1213.32 1401.21,1213.32 1401.79,1213.32 1402.38,1213.32 1402.96,1213.32 1403.55,1213.32 1404.14,1213.32 1404.72,1213.32 1405.31,1213.32 1405.9,1213.32 1406.48,1213.32 1407.07,1213.32 1407.66,1213.32 1408.24,1213.32 1408.83,1213.32 1409.42,1213.32 1410,1213.32 1410.59,1213.32 1411.17,1213.32 1411.76,1213.32 1412.35,1213.32 1412.93,1213.32 1413.52,1213.32 1414.11,1213.32 1414.69,1213.32 1415.28,1213.32 1415.87,1213.32 1416.45,1213.32 1417.04,1213.32 1417.63,1213.32 1418.21,1213.32 1418.8,1213.32 1419.38,1213.32 1419.97,1213.32 1420.56,1213.32 1421.14,1213.32 1421.73,1213.32 1422.32,1213.32 1422.9,1213.32 1423.49,1213.32 1424.08,1213.32 1424.66,1213.32 1425.25,1213.32 1425.83,1213.32 1426.42,1213.32 1427.01,1213.32 1427.59,1213.32 1428.18,1213.32 1428.77,1213.32 1429.35,1213.32 1429.94,1213.32 1430.53,1213.32 1431.11,1213.32 1431.7,1213.32 1432.29,1213.32 1432.87,1213.32 1433.46,1213.32 1434.04,1213.32 1434.63,1213.32 1435.22,1213.32 1435.8,1213.32 1436.39,1213.32 1436.98,1213.32 1437.56,1213.32 1438.15,1213.32 1438.74,1213.32 1439.32,1213.32 1439.91,1213.32 1440.5,1213.32 1441.08,1213.32 1441.67,1213.32 1442.25,1213.32 1442.84,1213.32 1443.43,1213.32 1444.01,1213.32 1444.6,1213.32 1445.19,1213.32 1445.77,1213.32 1446.36,1213.32 1446.95,1213.32 1447.53,1213.32 1448.12,1213.32 1448.7,1213.32 1449.29,1213.32 1449.88,1213.32 1450.46,1213.32 1451.05,1213.32 1451.64,1213.32 1452.22,1213.32 1452.81,1213.32 1453.4,1213.32 1453.98,1213.32 1454.57,1213.32 1455.16,1213.32 1455.74,1213.32 1456.33,1213.32 1456.91,1213.32 1457.5,1213.32 1458.09,1213.32 1458.67,1213.32 1459.26,1213.32 1459.85,1213.32 1460.43,1213.32 1461.02,1213.32 1461.61,1213.32 1462.19,1213.32 1462.78,1213.32 1463.37,1213.32 1463.95,1213.32 1464.54,1213.32 1465.12,1213.32 1465.71,1213.32 1466.3,1213.32 1466.88,1213.32 1467.47,1213.32 1468.06,1213.32 1468.64,1213.32 1469.23,1213.32 1469.82,1213.32 1470.4,1213.32 1470.99,1213.32 1471.57,1213.32 1472.16,1213.32 1472.75,1213.32 1473.33,1213.32 1473.92,1213.32 1474.51,1213.32 1475.09,1213.32 1475.68,1213.32 1476.27,1213.32 1476.85,1213.32 1477.44,1213.32 1478.03,1213.32 1478.61,1213.32 1479.2,1213.32 1479.78,1213.32 1480.37,1213.32 1480.96,1213.32 1481.54,1213.32 1482.13,1213.32 1482.72,1213.32 1483.3,1213.32 1483.89,1213.32 1484.48,1213.32 1485.06,1213.32 1485.65,1213.32 1486.24,1213.32 1486.82,1213.32 1487.41,1213.32 1487.99,1213.32 1488.58,1213.32 1489.17,1213.32 1489.75,1213.32 1490.34,1213.32 1490.93,1213.32 1491.51,1213.32 1492.1,1213.32 1492.69,1213.32 1493.27,1213.32 1493.86,1213.32 1494.45,1213.32 1495.03,1213.32 1495.62,1213.32 1496.2,1213.32 1496.79,1213.32 1497.38,1213.32 1497.96,1213.32 1498.55,1213.32 1499.14,1213.32 1499.72,1213.32 1500.31,1213.32 1500.9,1213.32 1501.48,1213.32 1502.07,1213.32 1502.65,1213.32 1503.24,1213.32 1503.83,1213.32 1504.41,1213.32 1505,1213.32 1505.59,1213.32 1506.17,1213.32 1506.76,1213.32 1507.35,1213.32 1507.93,1213.32 1508.52,1213.32 1509.11,1213.32 1509.69,1213.32 1510.28,1213.32 1510.86,1213.32 1511.45,1213.32 1512.04,1213.32 1512.62,1213.32 1513.21,1213.32 1513.8,1213.32 1514.38,1213.32 1514.97,1213.32 1515.56,1213.32 1516.14,1213.32 1516.73,1213.32 1517.32,1213.32 1517.9,1213.32 1518.49,1213.32 1519.07,1213.32 1519.66,1213.32 1520.25,1213.32 1520.83,1213.32 1521.42,1213.32 1522.01,1213.32 1522.59,1213.32 1523.18,1213.32 1523.77,1213.32 1524.35,1213.32 1524.94,1213.32 1525.52,1213.32 1526.11,1213.32 1526.7,1213.32 1527.28,1213.32 1527.87,1213.32 1528.46,1213.32 1529.04,1213.32 1529.63,1213.32 1530.22,1213.32 1530.8,1213.32 1531.39,1213.32 1531.98,1213.32 1532.56,1213.32 1533.15,1213.32 1533.73,1213.32 1534.32,1213.32 1534.91,1213.32 1535.49,1213.32 1536.08,1213.32 1536.67,1213.32 1537.25,1213.32 1537.84,1213.32 1538.43,1213.32 1539.01,1213.32 1539.6,1213.32 1540.19,1213.32 1540.77,1213.32 1541.36,1213.32 1541.94,1213.32 1542.53,1213.32 1543.12,1213.32 1543.7,1213.32 1544.29,1213.32 1544.88,1213.32 1545.46,1213.32 1546.05,1213.32 1546.64,1213.32 1547.22,1213.32 1547.81,1213.32 1548.4,1213.32 1548.98,1213.32 1549.57,1213.32 1550.15,1213.32 1550.74,1213.32 1551.33,1213.32 1551.91,1213.32 1552.5,1213.32 1553.09,1213.32 1553.67,1213.32 1554.26,1213.32 1554.85,1213.32 1555.43,1213.32 1556.02,1213.32 1556.6,1213.32 1557.19,1213.32 1557.78,1213.32 1558.36,1213.32 1558.95,1213.32 1559.54,1213.32 1560.12,1213.32 1560.71,1213.32 1561.3,1213.32 1561.88,1213.32 1562.47,1213.32 1563.06,1213.32 1563.64,1213.32 1564.23,1213.32 1564.81,1213.32 1565.4,1213.32 1565.99,1213.32 1566.57,1213.32 1567.16,1213.32 1567.75,1213.32 1568.33,1213.32 1568.92,1213.32 1569.51,1213.32 1570.09,1213.32 1570.68,1213.32 1571.27,1213.32 1571.85,1213.32 1572.44,1213.32 1573.02,1213.32 1573.61,1213.32 1574.2,1213.32 1574.78,1213.32 1575.37,1213.32 1575.96,1213.32 1576.54,1213.32 1577.13,1213.32 1577.72,1213.32 1578.3,1213.32 1578.89,1213.32 1579.47,1213.32 1580.06,1213.32 1580.65,1213.32 1581.23,1213.32 1581.82,1213.32 1582.41,1213.32 1582.99,1213.32 1583.58,1213.32 1584.17,1213.32 1584.75,1213.32 1585.34,1213.32 1585.93,1213.32 1586.51,1213.32 1587.1,1213.32 1587.68,1213.32 1588.27,1213.32 1588.86,1213.32 1589.44,1213.32 1590.03,1213.32 1590.62,1213.32 1591.2,1213.32 1591.79,1213.32 1592.38,1213.32 1592.96,1213.32 1593.55,1213.32 1594.14,1213.32 1594.72,1213.32 1595.31,1213.32 1595.89,1213.32 1596.48,1213.32 1597.07,1213.32 1597.65,1213.32 1598.24,1213.32 1598.83,1213.32 1599.41,1213.32 1600,1213.32 1600.59,1213.32 1601.17,1213.32 1601.76,1213.32 1602.34,1213.32 1602.93,1213.32 1603.52,1213.32 1604.1,1213.32 1604.69,1213.32 1605.28,1213.32 1605.86,1213.32 1606.45,1213.32 1607.04,1213.32 1607.62,1213.32 1608.21,1213.32 1608.8,1213.32 1609.38,1213.32 1609.97,1213.32 1610.55,1213.32 1611.14,1213.32 1611.73,1213.32 1612.31,1213.32 1612.9,1213.32 1613.49,1213.32 1614.07,1213.32 1614.66,1213.32 1615.25,1213.32 1615.83,1213.32 1616.42,1213.32 1617.01,1213.32 1617.59,1213.32 1618.18,1213.32 1618.76,1213.32 1619.35,1213.32 1619.94,1213.32 1620.52,1213.32 1621.11,1213.32 1621.7,1213.32 1622.28,1213.32 1622.87,1213.32 1623.46,1213.32 1624.04,1213.32 1624.63,1213.32 1625.22,1213.32 1625.8,1213.32 1626.39,1213.32 1626.97,1213.32 1627.56,1213.32 1628.15,1213.32 1628.73,1213.32 1629.32,1213.32 1629.91,1213.32 1630.49,1213.32 1631.08,1213.32 1631.67,1213.32 1632.25,1213.32 1632.84,1213.32 1633.42,1213.32 1634.01,1213.32 1634.6,1213.32 1635.18,1213.32 1635.77,1213.32 1636.36,1213.32 1636.94,1213.32 1637.53,1213.32 1638.12,1213.32 1638.7,1213.32 1639.29,1213.32 1639.88,1213.32 1640.46,1213.32 1641.05,1213.32 1641.63,1213.32 1642.22,1213.32 1642.81,1213.32 1643.39,1213.32 1643.98,1213.32 1644.57,1213.32 1645.15,1213.32 1645.74,1213.32 1646.33,1213.32 1646.91,1213.32 1647.5,1213.32 1648.09,1213.32 1648.67,1213.32 1649.26,1213.32 1649.84,1213.32 1650.43,1213.32 1651.02,1213.32 1651.6,1213.32 1652.19,1213.32 1652.78,1213.32 1653.36,1213.32 1653.95,1213.32 1654.54,1213.32 1655.12,1213.32 1655.71,1213.32 1656.29,1213.32 1656.88,1213.32 1657.47,1213.32 1658.05,1213.32 1658.64,1213.32 1659.23,1213.32 1659.81,1213.32 1660.4,1213.32 1660.99,1213.32 1661.57,1213.32 1662.16,1213.32 1662.75,1213.32 1663.33,1213.32 1663.92,1213.32 1664.5,1213.32 1665.09,1213.32 1665.68,1213.32 1666.26,1213.32 1666.85,1213.32 1667.44,1213.32 1668.02,1213.32 1668.61,1213.32 1669.2,1213.32 1669.78,1213.32 1670.37,1213.32 1670.96,1213.32 1671.54,1213.32 1672.13,1213.32 1672.71,1213.32 1673.3,1213.32 1673.89,1213.32 1674.47,1213.32 1675.06,1213.32 1675.65,1213.32 1676.23,1213.32 1676.82,1213.32 1677.41,1213.32 1677.99,1213.32 1678.58,1213.32 1679.17,1213.32 1679.75,1213.32 1680.34,1213.32 1680.92,1213.32 1681.51,1213.32 1682.1,1213.32 1682.68,1213.32 1683.27,1213.32 1683.86,1213.32 1684.44,1213.32 1685.03,1213.32 1685.62,1213.32 1686.2,1213.32 1686.79,1213.32 1687.37,1213.32 1687.96,1213.32 1688.55,1213.32 1689.13,1213.32 1689.72,1213.32 1690.31,1213.32 1690.89,1213.32 1691.48,1213.32 1692.07,1213.32 1692.65,1213.32 1693.24,1213.32 1693.83,1213.32 1694.41,1213.32 1695,1213.32 1695.58,1213.32 1696.17,1213.32 1696.76,1213.32 1697.34,1213.32 1697.93,1213.32 1698.52,1213.32 1699.1,1213.32 1699.69,1213.32 1700.28,1213.32 1700.86,1213.32 1701.45,1213.32 1702.04,1213.32 1702.62,1213.32 1703.21,1213.32 1703.79,1213.32 1704.38,1213.32 1704.97,1213.32 1705.55,1213.32 1706.14,1213.32 1706.73,1213.32 1707.31,1213.32 1707.9,1213.32 1708.49,1213.32 1709.07,1213.32 1709.66,1213.32 1710.24,1213.32 1710.83,1213.32 1711.42,1213.32 1712,1213.32 1712.59,1213.32 1713.18,1213.32 1713.76,1213.32 1714.35,1213.32 1714.94,1213.32 1715.52,1213.32 1716.11,1213.32 1716.7,1213.32 1717.28,1213.32 1717.87,1213.32 1718.45,1213.32 1719.04,1213.32 1719.63,1213.32 1720.21,1213.32 1720.8,1213.32 1721.39,1213.32 1721.97,1213.32 1722.56,1213.32 1723.15,1213.32 1723.73,1213.32 1724.32,1213.32 1724.91,1213.32 1725.49,1213.32 1726.08,1213.32 1726.66,1213.32 1727.25,1213.32 1727.84,1213.32 1728.42,1213.32 1729.01,1213.32 1729.6,1213.32 1730.18,1213.32 1730.77,1213.32 1731.36,1213.32 1731.94,1213.32 1732.53,1213.32 1733.11,1213.32 1733.7,1213.32 1734.29,1213.32 1734.87,1213.32 1735.46,1213.32 1736.05,1213.32 1736.63,1213.32 1737.22,1213.32 1737.81,1213.32 1738.39,1213.32 1738.98,1213.32 1739.57,1213.32 1740.15,1213.32 1740.74,1213.32 1741.32,1213.32 1741.91,1213.32 1742.5,1213.32 1743.08,1213.32 1743.67,1213.32 1744.26,1213.32 1744.84,1213.32 1745.43,1213.32 1746.02,1213.32 1746.6,1213.32 1747.19,1213.32 1747.78,1213.32 1748.36,1213.32 1748.95,1213.32 1749.53,1213.32 1750.12,1213.32 1750.71,1213.32 1751.29,1213.32 1751.88,1213.32 1752.47,1213.32 1753.05,1213.32 1753.64,1213.32 1754.23,1213.32 1754.81,1213.32 1755.4,1213.32 1755.99,1213.32 1756.57,1213.32 1757.16,1213.32 1757.74,1213.32 1758.33,1213.32 1758.92,1213.32 1759.5,1213.32 1760.09,1213.32 1760.68,1213.32 1761.26,1213.32 1761.85,1213.32 1762.44,1213.32 1763.02,1213.32 1763.61,1213.32 1764.19,1213.32 1764.78,1213.32 1765.37,1213.32 1765.95,1213.32 1766.54,1213.32 1767.13,1213.32 1767.71,1213.32 1768.3,1213.32 1768.89,1213.32 1769.47,1213.32 1770.06,1213.32 1770.65,1213.32 1771.23,1213.32 1771.82,1213.32 1772.4,1213.32 1772.99,1213.32 1773.58,1213.32 1774.16,1213.32 1774.75,1213.32 1775.34,1213.32 1775.92,1213.32 1776.51,1213.32 1777.1,1213.32 1777.68,1213.32 1778.27,1213.32 1778.86,1213.32 1779.44,1213.32 1780.03,1213.32 1780.61,1213.32 1781.2,1213.32 1781.79,1213.32 1782.37,1213.32 1782.96,1213.32 1783.55,1213.32 1784.13,1213.32 1784.72,1213.32 1785.31,1213.32 1785.89,1213.32 1786.48,1213.32 1787.06,1213.32 1787.65,1213.32 1788.24,1213.32 1788.82,1213.32 1789.41,1213.32 1790,1213.32 1790.58,1213.32 1791.17,1213.32 1791.76,1213.32 1792.34,1213.32 1792.93,1213.32 1793.52,1213.32 1794.1,1213.32 1794.69,1213.32 1795.27,1213.32 1795.86,1213.32 1796.45,1213.32 1797.03,1213.32 1797.62,1213.32 1798.21,1213.32 1798.79,1213.32 1799.38,1213.32 1799.97,1213.32 1800.55,1213.32 1801.14,1213.32 1801.73,1213.32 1802.31,1213.32 1802.9,1213.32 1803.48,1213.32 1804.07,1213.32 1804.66,1213.32 1805.24,1213.32 1805.83,1213.32 1806.42,1213.32 1807,1213.32 1807.59,1213.32 1808.18,1213.32 1808.76,1213.32 1809.35,1213.32 1809.94,1213.32 1810.52,1213.32 1811.11,1213.32 1811.69,1213.32 1812.28,1213.32 1812.87,1213.32 1813.45,1213.32 1814.04,1213.32 1814.63,1213.32 1815.21,1213.32 1815.8,1213.32 1816.39,1213.32 1816.97,1213.32 1817.56,1213.32 1818.14,1213.32 1818.73,1213.32 1819.32,1213.32 1819.9,1213.32 1820.49,1213.32 1821.08,1213.32 1821.66,1213.32 1822.25,1213.32 1822.84,1213.32 1823.42,1213.32 1824.01,1213.32 1824.6,1213.32 1825.18,1213.32 1825.77,1213.32 1826.35,1213.32 1826.94,1213.32 1827.53,1213.32 1828.11,1213.32 1828.7,1213.32 1829.29,1213.32 1829.87,1213.32 1830.46,1213.32 1831.05,1213.32 1831.63,1213.32 1832.22,1213.32 1832.81,1213.32 1833.39,1213.32 1833.98,1213.32 1834.56,1213.32 1835.15,1213.32 1835.74,1213.32 1836.32,1213.32 1836.91,1213.32 1837.5,1213.32 1838.08,1213.32 1838.67,1213.32 1839.26,1213.32 1839.84,1213.32 1840.43,1213.32 1841.01,1213.32 1841.6,1213.32 1842.19,1213.32 1842.77,1213.32 1843.36,1213.32 1843.95,1213.32 1844.53,1213.32 1845.12,1213.32 1845.71,1213.32 1846.29,1213.32 1846.88,1213.32 1847.47,1213.32 1848.05,1213.32 1848.64,1213.32 1849.22,1213.32 1849.81,1213.32 1850.4,1213.32 1850.98,1213.32 1851.57,1213.32 1852.16,1213.32 1852.74,1213.32 1853.33,1213.32 1853.92,1213.32 1854.5,1213.32 1855.09,1213.32 1855.68,1213.32 1856.26,1213.32 1856.85,1213.32 1857.43,1213.32 1858.02,1213.32 1858.61,1213.32 1859.19,1213.32 1859.78,1213.32 1860.37,1213.32 1860.95,1213.32 1861.54,1213.32 1862.13,1213.32 1862.71,1213.32 1863.3,1213.32 1863.88,1213.32 1864.47,1213.32 1865.06,1213.32 1865.64,1213.32 1866.23,1213.32 1866.82,1213.32 1867.4,1213.32 1867.99,1213.32 1868.58,1213.32 1869.16,1213.32 1869.75,1213.32 1870.34,1213.32 1870.92,1213.32 1871.51,1213.32 1872.09,1213.32 1872.68,1213.32 1873.27,1213.32 1873.85,1213.32 1874.44,1213.32 1875.03,1213.32 1875.61,1213.32 1876.2,1213.32 1876.79,1213.32 1877.37,1213.32 1877.96,1213.32 1878.55,1213.32 1879.13,1213.32 1879.72,1213.32 1880.3,1213.32 1880.89,1213.32 1881.48,1213.32 1882.06,1213.32 1882.65,1213.32 1883.24,1213.32 1883.82,1213.32 1884.41,1213.32 1885,1213.32 1885.58,1213.32 1886.17,1213.32 1886.76,1213.32 1887.34,1213.32 1887.93,1213.32 1888.51,1213.32 1889.1,1213.32 1889.69,1213.32 1890.27,1213.32 1890.86,1213.32 1891.45,1213.32 1892.03,1213.32 1892.62,1213.32 1893.21,1213.32 1893.79,1213.32 1894.38,1213.32 1894.96,1213.32 1895.55,1213.32 1896.14,1213.32 1896.72,1213.32 1897.31,1213.32 1897.9,1213.32 1898.48,1213.32 1899.07,1213.32 1899.66,1213.32 1900.24,1213.32 1900.83,1213.32 1901.42,1213.32 1902,1213.32 1902.59,1213.32 1903.17,1213.32 1903.76,1213.32 1904.35,1213.32 1904.93,1213.32 1905.52,1213.32 1906.11,1213.32 1906.69,1213.32 1907.28,1213.32 1907.87,1213.32 1908.45,1213.32 1909.04,1213.32 1909.63,1213.32 1910.21,1213.32 1910.8,1213.32 1911.38,1213.32 1911.97,1213.32 1912.56,1213.32 1913.14,1213.32 1913.73,1213.32 1914.32,1213.32 1914.9,1213.32 1915.49,1213.32 1916.08,1213.32 1916.66,1213.32 1917.25,1213.32 1917.83,1213.32 1918.42,1213.32 1919.01,1213.32 1919.59,1213.32 1920.18,1213.32 1920.77,1213.32 1921.35,1213.32 1921.94,1213.32 1922.53,1213.32 1923.11,1213.32 1923.7,1213.32 1924.29,1213.32 1924.87,1213.32 1925.46,1213.32 1926.04,1213.32 1926.63,1213.32 1927.22,1213.32 1927.8,1213.32 1928.39,1213.32 1928.98,1213.32 1929.56,1213.32 1930.15,1213.32 1930.74,1213.32 1931.32,1213.32 1931.91,1213.32 1932.5,1213.32 1933.08,1213.32 1933.67,1213.32 1934.25,1213.32 1934.84,1213.32 1935.43,1213.32 1936.01,1213.32 1936.6,1213.32 1937.19,1213.32 1937.77,1213.32 1938.36,1213.32 1938.95,1213.32 1939.53,1213.32 1940.12,1213.32 1940.71,1213.32 1941.29,1213.32 1941.88,1213.32 1942.46,1213.32 1943.05,1213.32 1943.64,1213.32 1944.22,1213.32 1944.81,1213.32 1945.4,1213.32 1945.98,1213.32 1946.57,1213.32 1947.16,1213.32 1947.74,1213.32 1948.33,1213.32 1948.91,1213.32 1949.5,1213.32 1950.09,1213.32 1950.67,1213.32 1951.26,1213.32 1951.85,1213.32 1952.43,1213.32 1953.02,1213.32 1953.61,1213.32 1954.19,1213.32 1954.78,1213.32 1955.37,1213.32 1955.95,1213.32 1956.54,1213.32 1957.12,1213.32 1957.71,1213.32 1958.3,1213.32 1958.88,1213.32 1959.47,1213.32 1960.06,1213.32 1960.64,1213.32 1961.23,1213.32 1961.82,1213.32 1962.4,1213.32 1962.99,1213.32 1963.58,1213.32 1964.16,1213.32 1964.75,1213.32 1965.33,1213.32 1965.92,1213.32 1966.51,1213.32 1967.09,1213.32 1967.68,1213.32 1968.27,1213.32 1968.85,1213.32 1969.44,1213.32 1970.03,1213.32 1970.61,1213.32 1971.2,1213.32 1971.78,1213.32 1972.37,1213.32 1972.96,1213.32 1973.54,1213.32 1974.13,1213.32 1974.72,1213.32 1975.3,1213.32 1975.89,1213.32 1976.48,1213.32 1977.06,1213.32 1977.65,1213.32 1978.24,1213.32 1978.82,1213.32 1979.41,1213.32 1979.99,1213.32 1980.58,1213.32 1981.17,1213.32 1981.75,1213.32 1982.34,1213.32 1982.93,1213.32 1983.51,1213.32 1984.1,1213.32 1984.69,1213.32 1985.27,1213.32 1985.86,1213.32 1986.45,1213.32 1987.03,1213.32 1987.62,1213.32 1988.2,1213.32 1988.79,1213.32 1989.38,1213.32 1989.96,1213.32 1990.55,1213.32 1991.14,1213.32 1991.72,1213.32 1992.31,1213.32 1992.9,1213.32 1993.48,1213.32 1994.07,1213.32 1994.65,1213.32 1995.24,1213.32 1995.83,1213.32 1996.41,1213.32 1997,1213.32 1997.59,1213.32 1998.17,1213.32 1998.76,1213.32 1999.35,1213.32 1999.93,1213.32 2000.52,1213.32 2001.11,1213.32 2001.69,1213.32 2002.28,1213.32 2002.86,1213.32 2003.45,1213.32 2004.04,1213.32 2004.62,1213.32 2005.21,1213.32 2005.8,1213.32 2006.38,1213.32 2006.97,1213.32 2007.56,1213.32 2008.14,1213.32 2008.73,1213.32 2009.32,1213.32 2009.9,1213.32 2010.49,1213.32 2011.07,1213.32 2011.66,1213.32 2012.25,1213.32 2012.83,1213.32 2013.42,1213.32 2014.01,1213.32 2014.59,1213.32 2015.18,1213.32 2015.77,1213.32 2016.35,1213.32 2016.94,1213.32 2017.53,1213.32 2018.11,1213.32 2018.7,1213.32 2019.28,1213.32 2019.87,1213.32 2020.46,1213.32 2021.04,1213.32 2021.63,1213.32 2022.22,1213.32 2022.8,1213.32 2023.39,1213.32 2023.98,1213.32 2024.56,1213.32 2025.15,1213.32 2025.73,1213.32 2026.32,1213.32 2026.91,1213.32 2027.49,1213.32 2028.08,1213.32 2028.67,1213.32 2029.25,1213.32 2029.84,1213.32 2030.43,1213.32 2031.01,1213.32 2031.6,1213.32 2032.19,1213.32 2032.77,1213.32 2033.36,1213.32 2033.94,1213.32 2034.53,1213.32 2035.12,1213.32 2035.7,1213.32 2036.29,1213.32 2036.88,1213.32 2037.46,1213.32 2038.05,1213.32 2038.64,1213.32 2039.22,1213.32 2039.81,1213.32 2040.4,1213.32 2040.98,1213.32 2041.57,1213.32 2042.15,1213.32 2042.74,1213.32 2043.33,1213.32 2043.91,1213.32 2044.5,1213.32 2045.09,1213.32 2045.67,1213.32 2046.26,1213.32 2046.85,1213.32 2047.43,1213.32 2048.02,1213.32 2048.6,1213.32 2049.19,1213.32 2049.78,1213.32 2050.36,1213.32 2050.95,1213.32 2051.54,1213.32 2052.12,1213.32 2052.71,1213.32 2053.3,1213.32 2053.88,1213.32 2054.47,1213.32 2055.06,1213.32 2055.64,1213.32 2056.23,1213.32 2056.81,1213.32 2057.4,1213.32 2057.99,1213.32 2058.57,1213.32 2059.16,1213.32 2059.75,1213.32 2060.33,1213.32 2060.92,1213.32 2061.51,1213.32 2062.09,1213.32 2062.68,1213.32 2063.27,1213.32 2063.85,1213.32 2064.44,1213.32 2065.02,1213.32 2065.61,1213.32 2066.2,1213.32 2066.78,1213.32 2067.37,1213.32 2067.96,1213.32 2068.54,1213.32 2069.13,1213.32 2069.72,1213.32 2070.3,1213.32 2070.89,1213.32 2071.48,1213.32 2072.06,1213.32 2072.65,1213.32 2073.23,1213.32 2073.82,1213.32 2074.41,1213.32 2074.99,1213.32 2075.58,1213.32 2076.17,1213.32 2076.75,1213.32 2077.34,1213.32 2077.93,1213.32 2078.51,1213.32 2079.1,1213.32 2079.68,1213.32 2080.27,1213.32 2080.86,1213.32 2081.44,1213.32 2082.03,1213.32 2082.62,1213.32 2083.2,1213.32 2083.79,1213.32 2084.38,1213.32 2084.96,1213.32 2085.55,1213.32 2086.14,1213.32 2086.72,1213.32 2087.31,1213.32 2087.89,1213.32 2088.48,1213.32 2089.07,1213.32 2089.65,1213.32 2090.24,1213.32 2090.83,1213.32 2091.41,1213.32 2092,1213.32 2092.59,1213.32 2093.17,1213.32 2093.76,1213.32 2094.35,1213.32 2094.93,1213.32 2095.52,1213.32 2096.1,1213.32 2096.69,1213.32 2097.28,1213.32 2097.86,1213.32 2098.45,1213.32 2099.04,1213.32 2099.62,1213.32 2100.21,1213.32 2100.8,1213.32 2101.38,1213.32 2101.97,1213.32 2102.55,1213.32 2103.14,1213.32 2103.73,1213.32 2104.31,1213.32 2104.9,1213.32 2105.49,1213.32 2106.07,1213.32 2106.66,1213.32 2107.25,1213.32 2107.83,1213.32 2108.42,1213.32 2109.01,1213.32 2109.59,1213.32 2110.18,1213.32 2110.76,1213.32 2111.35,1213.32 2111.94,1213.32 2112.52,1213.32 2113.11,1213.32 2113.7,1213.32 2114.28,1213.32 2114.87,1213.32 2115.46,1213.32 2116.04,1213.32 2116.63,1213.32 2117.22,1213.32 2117.8,1213.32 2118.39,1213.32 2118.97,1213.32 2119.56,1213.32 2120.15,1213.32 2120.73,1213.32 2121.32,1213.32 2121.91,1213.32 2122.49,1213.32 2123.08,1213.32 2123.67,1213.32 2124.25,1213.32 2124.84,1213.32 2125.42,1213.32 2126.01,1213.32 2126.6,1213.32 2127.18,1213.32 2127.77,1213.32 2128.36,1213.32 2128.94,1213.32 2129.53,1213.32 2130.12,1213.32 2130.7,1213.32 2131.29,1213.32 2131.88,1213.32 2132.46,1213.32 2133.05,1213.32 2133.63,1213.32 2134.22,1213.32 2134.81,1213.32 2135.39,1213.32 2135.98,1213.32 2136.57,1213.32 2137.15,1213.32 2137.74,1213.32 2138.33,1213.32 2138.91,1213.32 2139.5,1213.32 2140.09,1213.32 2140.67,1213.32 2141.26,1213.32 2141.84,1213.32 2142.43,1213.32 2143.02,1213.32 2143.6,1213.32 2144.19,1213.32 2144.78,1213.32 2145.36,1213.32 2145.95,1213.32 2146.54,1213.32 2147.12,1213.32 2147.71,1213.32 2148.3,1213.32 2148.88,1213.32 2149.47,1213.32 2150.05,1213.32 2150.64,1213.32 2151.23,1213.32 2151.81,1213.32 2152.4,1213.32 2152.99,1213.32 2153.57,1213.32 2154.16,1213.32 2154.75,1213.32 2155.33,1213.32 2155.92,1213.32 2156.5,1213.32 2157.09,1213.32 2157.68,1213.32 2158.26,1213.32 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.12,1195.39 1399.12,899.083 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.79 985.439,1195.39 2158.26,1195.39 2158.26,1230.79 985.439,1230.79 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip920)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip920)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip923\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip923)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4908.13 163.792,-5920.59 164.351,-6844.87 164.91,-7666.98 165.469,-7256.71 166.029,-8012.54 166.588,-8678.65 167.147,-9298.44 167.706,-9856.18 168.266,-10336.9 168.825,-10764.3 169.384,-10359.1 169.943,-10016.7 170.503,-10385.3 171.062,-10709.4 171.621,-10982.1 172.18,-11215.8 172.74,-11413.7 173.299,-11580.1 173.858,-11242.4 174.417,-11373 174.977,-11475.7 175.536,-10782.4 176.095,-10839.1 176.655,-10885.4 177.214,-10905.2 177.773,-10912.2 178.332,-10622.9 178.892,-10603 179.451,-10564.2 180.01,-10298.5 180.569,-10045.6 181.129,-9803.77 181.688,-9568.53 182.247,-9326.41 182.806,-9236.74 183.366,-9154.61 183.925,-8904.02 184.484,-8797.65 185.043,-8553.07 185.603,-8441.18 186.162,-8324.46 186.721,-7855.19 187.28,-7429.34 187.84,-7236.68 188.399,-7142.76 188.958,-6951.76 189.517,-6759.03 190.077,-6582.75 190.636,-6411.83 191.195,-6092.12 191.754,-5849.65 192.314,-5764.42 192.873,-5679.13 193.432,-5596.68 193.991,-5318.97 194.551,-5055.44 195.11,-4735.07 195.669,-4536.16 196.228,-4408.47 196.788,-4287.87 197.347,-4219.8 197.906,-4047.62 198.465,-3876.93 199.025,-3809.85 199.584,-3737.01 200.143,-3618.58 200.702,-3509.45 201.262,-3393.91 201.821,-3205.13 202.38,-3102.68 202.939,-3037.05 203.499,-2936.18 204.058,-2837.5 204.617,-2734.24 205.176,-2639.33 205.736,-2547.3 206.295,-2483.47 206.854,-2422.55 207.413,-2325.99 207.973,-2233.29 208.532,-2079.88 209.091,-1993.85 209.65,-1937.79 210.21,-1704.24 210.769,-1597.93 211.328,-1466.25 211.887,-1419.03 212.447,-1266.81 213.006,-1172.78 213.565,-1131.55 214.124,-1088.5 214.684,-996.773 215.243,-930.765 215.802,-840.852 216.361,-800.54 216.921,-735.72 217.48,-631.997 218.039,-432.558 218.598,-409.465 219.158,-269.496 219.717,-224.606 220.276,-139.98 220.835,-81.3887 221.395,-22.1316 221.954,13.8327 222.513,47.7307 223.072,82.2465 223.632,118.015 224.191,149.382 224.75,157.603 225.309,193.476 225.869,186.168 226.428,220.705 226.987,251.62 227.546,241.145 228.106,294.91 228.665,286.985 229.224,337.053 229.783,348.147 230.343,337.664 230.902,350.552 231.461,400.394 232.02,410.912 232.58,500.159 233.139,504.552 233.698,533.412 234.257,560.063 234.817,567.333 235.376,608.597 235.935,628.806 236.494,667.323 237.054,689.395 237.613,705.422 238.172,704.329 238.731,705.292 239.291,726.168 239.85,766.062 240.409,800.662 240.968,834.347 241.528,827.976 242.087,861.259 242.646,896.08 243.205,982.743 243.765,972.454 244.324,982.643 244.883,990.8 245.442,979.401 246.002,915.804 246.561,912.612 247.12,925.489 247.679,885.591 248.239,865.848 248.798,886.454 249.357,920.433 249.916,938.712 250.476,970.522 251.035,998.712 251.594,1014.04 252.153,1022.27 252.713,1015.48 253.272,1024.33 253.831,1036.1 254.39,1010.54 254.95,1040.54 255.509,1013.87 256.068,955.341 256.627,986.702 257.187,997.365 257.746,1047.33 258.305,1058.06 258.864,1049.88 259.424,1042.14 259.983,1072.48 260.542,1084.32 261.101,1126.93 261.661,1133.36 262.22,1136.95 262.779,1142.73 263.338,1112.68 263.898,1082.68 264.457,1074.22 265.016,1064.36 265.575,1091.5 266.135,1084.21 266.694,1073.6 267.253,1016.89 267.812,1027.3 268.372,1037.26 268.931,1017.2 269.49,995.52 270.049,1042.73 270.609,1070.06 271.168,1078.11 271.727,1054.67 272.286,1064.17 272.846,1089.8 273.405,1080.07 273.964,1086.39 274.523,1060.93 275.083,1083.72 275.642,1059.49 276.201,1070.85 276.76,1047.87 277.32,1009.6 277.879,1023.54 278.438,1022.05 278.997,1053.27 279.557,1034.36 280.116,1013.68 280.675,1026.05 281.234,1024.38 281.794,1020.05 282.353,1051.23 282.912,1046.29 283.471,1021.61 284.031,1013.78 284.59,1011.89 285.149,990.728 285.708,984.98 286.268,1027 286.827,1023.81 287.386,1017.91 287.945,998.287 288.505,1012.33 289.064,1006.79 289.623,1002.6 290.182,1065.19 290.742,1005.88 291.301,999.542 291.86,982.183 292.419,977.458 292.979,959.345 293.538,975.739 294.097,959.624 294.656,974.042 295.216,985.308 295.775,1000.02 296.334,1013.06 296.893,1006.93 297.453,1053.15 298.012,1046.68 298.571,1054.67 299.13,1047.01 299.69,1055.74 300.249,1047.97 300.808,1029.31 301.368,988.11 301.927,1000.4 302.486,993.044 303.045,977.174 303.605,1022.03 304.164,1003.44 304.723,965.38 305.282,994.375 305.842,993.457 306.401,1023.37 306.96,1030.84 307.519,1027.32 308.079,1038.38 308.638,1011.79 309.197,1019.41 309.756,1011.98 310.316,1023.85 310.875,1050.09 311.434,1059.64 311.993,1097.09 312.553,1070.61 313.112,1095.9 313.671,1066.83 314.23,1073.27 314.79,1065.14 315.349,1043.04 315.908,1031.99 316.467,1027.16 317.027,1000.13 317.586,993.937 318.145,1006.17 318.704,1032.83 319.264,1022.05 319.823,1014.79 320.382,1007.78 320.941,986.074 321.501,991.077 322.06,934.567 322.619,945.678 323.178,957.154 323.738,999.533 324.297,972.39 324.856,982.377 325.415,990.381 325.975,995.356 326.534,973.859 327.093,999.007 327.652,989.467 328.212,984.098 328.771,947.286 329.33,925.674 329.889,922.966 330.449,932.248 331.008,911.483 331.567,941.405 332.126,952.921 332.686,930.103 333.245,946.041 333.804,943.035 334.363,974.692 334.923,967.253 335.482,962.193 336.041,955.772 336.6,985.896 337.16,975.247 337.719,970.706 338.278,947.793 338.837,942.211 339.397,937.036 339.956,961.554 340.515,959.129 341.074,936.086 341.634,898.72 342.193,891.778 342.752,923.537 343.311,968.053 343.871,927.541 344.43,907.64 344.989,904.707 345.548,901.425 346.108,895.867 346.667,905.487 347.226,850.737 347.785,850.467 348.345,834.281 348.904,853.74 349.463,867.215 350.022,879.921 350.582,858.253 351.141,870.448 351.7,864.063 352.259,876.263 352.819,808.558 353.378,810.075 353.937,811.648 354.496,810.614 355.056,793.757 355.615,812.218 356.174,845.502 356.733,809.271 357.293,845.861 357.852,845.907 358.411,841.288 358.97,857.479 359.53,872.156 360.089,903.305 360.648,866.252 361.207,896.31 361.767,875.878 362.326,875.684 362.885,890.215 363.444,888.309 364.004,855.142 364.563,849.895 365.122,848.572 365.681,831.632 366.241,847.24 366.8,861.223 367.359,827.294 367.918,842.968 368.478,776.569 369.037,776.653 369.596,791.586 370.155,825.652 370.715,828.097 371.274,858.581 371.833,842.628 372.392,860.193 372.952,875.033 373.511,854.882 374.07,851.246 374.629,846.458 375.189,846.905 375.748,845.923 376.307,891.052 376.866,887.484 377.426,896.926 377.985,857.741 378.544,854.132 379.103,848.914 379.663,827.349 380.222,827.593 380.781,827.302 381.34,826.286 381.9,826.339 382.459,821.184 383.018,818.681 383.577,801.909 384.137,819.463 384.696,819.524 385.255,817.47 385.814,768.882 386.374,771.442 386.933,789.802 387.492,792.173 388.051,806.62 388.611,840.298 389.17,853.324 389.729,847.439 390.288,831.527 390.848,842.54 391.407,854.79 391.966,818.17 392.525,786.161 393.085,799.14 393.644,813.525 394.203,846.065 394.762,842.433 395.322,839.402 395.881,852.619 396.44,866.579 396.999,814.21 397.559,860.768 398.118,853.285 398.677,868.317 399.236,833.124 399.796,835.008 400.355,814.349 400.914,813.153 401.473,843.457 402.033,855.742 402.592,818.892 403.151,815.267 403.71,809.846 404.27,819.175 404.829,830.096 405.388,825.721 405.947,809.596 406.507,775.664 407.066,788.933 407.625,804.973 408.184,821.563 408.744,816.789 409.303,832.058 409.862,815.019 410.421,813.492 410.981,794.863 411.54,765.921 412.099,784.839 412.658,836.193 413.218,797.369 413.777,828.279 414.336,808.818 414.895,805.016 415.455,821.861 416.014,816.97 416.573,782.287 417.132,781.546 417.692,747.399 418.251,732.176 418.81,733.437 419.369,782.554 419.929,813.98 420.488,878.046 421.047,889.391 421.606,868.376 422.166,879.886 422.725,857.813 423.284,867.699 423.843,893.323 424.403,902.633 424.962,858.306 425.521,902.993 426.08,878.871 426.64,858.883 427.199,852.521 427.758,890.718 428.318,900.176 428.877,875.967 429.436,871.655 429.995,833.224 430.555,847.082 431.114,810.799 431.673,839.447 432.232,817.087 432.792,846.856 433.351,839.292 433.91,851.572 434.469,831.325 435.029,872.98 435.588,881.573 436.147,896.142 436.706,870.662 437.266,861.427 437.825,873.969 438.384,864.126 438.943,842.154 439.503,818.12 440.062,814.833 440.621,843.733 441.18,874.854 441.74,836.567 442.299,815.9 442.858,843.001 443.417,821.598 443.977,801.926 444.536,764.574 445.095,742.952 445.654,724.091 446.214,741.376 446.773,720.78 447.332,720.548 447.891,725.822 448.451,742.99 449.01,744.275 449.569,747.116 450.128,796.291 450.688,792.698 451.247,771.53 451.806,802.433 452.365,766.267 452.925,770.166 453.484,785.742 454.043,752.391 454.602,749.45 455.162,767.23 455.721,766.414 456.28,766.618 456.839,766.42 457.399,749.796 457.958,749.5 458.517,781.684 459.076,764.452 459.636,747.85 460.195,748.24 460.754,781.73 461.313,749.225 461.873,747.109 462.432,763.035 462.991,778.349 463.55,790.58 464.11,802.598 464.669,796.384 465.228,829.289 465.787,792.721 466.347,773.284 466.906,751.548 467.465,769.702 468.024,785.929 468.584,771.973 469.143,786.661 469.702,786.018 470.261,767.127 470.821,801.038 471.38,782.527 471.939,779.17 472.498,762.843 473.058,794.736 473.617,789.779 474.176,769.131 474.735,718.959 475.295,735.838 475.854,767.717 476.413,749.202 476.972,766.095 477.532,716.021 478.091,719.509 478.65,722.126 479.209,720.618 479.769,719.723 480.328,706.496 480.887,739.686 481.446,726.732 482.006,758.721 482.565,774.077 483.124,769.82 483.683,768.442 484.243,768.194 484.802,748.948 485.361,731.647 485.92,731.016 486.48,743.479 487.039,756.992 487.598,768.474 488.157,716.817 488.717,747.386 489.276,698.03 489.835,703.464 490.394,720.239 490.954,703.922 491.513,705.022 492.072,706.976 492.631,723.038 493.191,723.189 493.75,723.973 494.309,690.147 494.868,691.562 495.428,696.439 495.987,687.078 496.546,669.998 497.105,671.94 497.665,670.959 498.224,674.935 498.783,644.315 499.342,600.444 499.902,671.754 500.461,658.188 501.02,646.139 501.579,680.999 502.139,699.958 502.698,718.438 503.257,701.862 503.816,701.069 504.376,686.123 504.935,688.182 505.494,674.108 506.053,679.191 506.613,699.069 507.172,700.821 507.731,702.234 508.29,705.607 508.85,690.621 509.409,704.528 509.968,755.445 510.527,736.032 511.087,655.705 511.646,609.59 512.205,631.818 512.764,669.951 513.324,642.654 513.883,662.985 514.442,662.687 515.001,652.624 515.561,641.736 516.12,664.874 516.679,650.866 517.238,673.222 517.798,657.997 518.357,663.141 518.916,647.87 519.475,635.101 520.035,626.371 520.594,633.679 521.153,688.975 521.712,689.604 522.272,694.544 522.831,715.314 523.39,731.574 523.949,745.58 524.509,731.129 525.068,698.643 525.627,684.854 526.186,687.701 526.746,657.636 527.305,642.72 527.864,664.545 528.423,684.111 528.983,702.33 529.542,674.986 530.101,709.645 530.66,696.683 531.22,712.958 531.779,702.88 532.338,734.518 532.897,750.98 533.457,780.247 534.016,759.946 534.575,761.674 535.134,776.47 535.694,789.546 536.253,784.137 536.812,827.871 537.371,820.098 537.931,815.268 538.49,808.989 539.049,834.857 539.608,764.546 540.168,745.625 540.727,745.751 541.286,740.919 541.845,740.845 542.405,740.92 542.964,754.785 543.523,739.39 544.082,724.617 544.642,739.312 545.201,723.532 545.76,690.298 546.319,705.763 546.879,737.687 547.438,766.676 547.997,798.309 548.556,812.352 549.116,809.461 549.675,837.429 550.234,846.592 550.793,828.554 551.353,819.189 551.912,782.364 552.471,744.505 553.031,739.828 553.59,740.494 554.149,741.292 554.708,741.687 555.268,743.033 555.827,740.964 556.386,758.684 556.945,753.004 557.505,750.56 558.064,731.194 558.623,727.408 559.182,698.075 559.742,701.617 560.301,721.193 560.86,734.144 561.419,713.919 561.979,730.176 562.538,728.412 563.097,760.092 563.656,744.999 564.216,713.032 564.775,696.86 565.334,683.716 565.893,718.048 566.453,735.239 567.012,763.422 567.571,711.571 568.13,707.957 568.69,695.728 569.249,699.161 569.808,681.937 570.367,651.433 570.927,674.326 571.486,681.904 572.045,684.543 572.604,730.748 573.164,712.007 573.723,713.793 574.282,730.397 574.841,730.908 575.401,744.809 575.96,745.025 576.519,741.846 577.078,754.753 577.638,753.962 578.197,784.344 578.756,780.555 579.315,779.43 579.875,744.192 580.434,744.492 580.993,724.678 581.552,722.124 582.112,702.984 582.671,688.261 583.23,705.874 583.789,690.51 584.349,720.748 584.908,737.888 585.467,748.509 586.026,727.358 586.586,744.141 587.145,744.99 587.704,744.21 588.263,740.939 588.823,741.029 589.382,738.519 589.941,720.247 590.5,720.822 591.06,715.924 591.619,714.805 592.178,697.222 592.737,699.864 593.297,685.259 593.856,689.051 594.415,707.963 594.974,739.056 595.534,751.233 596.093,797.015 596.652,809.838 597.211,801.911 597.771,778.228 598.33,789.462 598.889,787.072 599.448,782.915 600.008,776.834 600.567,759.867 601.126,738.848 601.685,751.713 602.245,733.809 602.804,748.389 603.363,779.508 603.922,788.607 604.482,784.536 605.041,781.642 605.6,776.274 606.159,738.346 606.719,737.733 607.278,739.698 607.837,754.665 608.396,768.478 608.956,797.941 609.515,778.223 610.074,678.249 610.633,680.179 611.193,695.44 611.752,696.256 612.311,694.896 612.87,698.217 613.43,697.266 613.989,713.075 614.548,698.624 615.107,683.34 615.667,669.899 616.226,667.213 616.785,718.648 617.344,734.589 617.904,748.197 618.463,746.95 619.022,728.362 619.581,710.532 620.141,694.874 620.7,725.526 621.259,756.373 621.818,787.437 622.378,799.093 622.937,797.246 623.496,759.17 624.055,740.458 624.615,723.922 625.174,706 625.733,706.492 626.292,705.69 626.852,706.799 627.411,708.99 627.97,709.073 628.529,743.012 629.089,722.94 629.648,769.192 630.207,780.322 630.766,793.252 631.326,770.138 631.885,766.659 632.444,746.124 633.003,741.474 633.563,740.852 634.122,722.083 634.681,687.967 635.24,643.168 635.8,646.743 636.359,633.047 636.918,623.393 637.477,624.918 638.037,596.526 638.596,552.581 639.155,563.757 639.714,572.652 640.274,595.857 640.833,583.232 641.392,591.919 641.951,614.217 642.511,631.861 643.07,652.791 643.629,671.985 644.188,657.318 644.748,710.042 645.307,679.009 645.866,666.405 646.425,667.716 646.985,669.999 647.544,708.525 648.103,741.768 648.662,739.989 649.222,753.079 649.781,732.335 650.34,731.66 650.899,762.464 651.459,727.006 652.018,728.656 652.577,711.412 653.136,693.687 653.696,662.194 654.255,645.252 654.814,677.991 655.373,694.239 655.933,692.921 656.492,708.897 657.051,706.558 657.61,687.599 658.17,706.27 658.729,723.173 659.288,720.35 659.847,721.232 660.407,722.346 660.966,722.262 661.525,739.191 662.084,736.99 662.644,736.994 663.203,750.561 663.762,732.747 664.321,725.465 664.881,705.558 665.44,704.126 665.999,721.189 666.558,719.786 667.118,721.768 667.677,719.185 668.236,753.109 668.795,753.107 669.355,748.207 669.914,759.167 670.473,753.999 671.032,746.192 671.592,711.174 672.151,727.453 672.71,727.705 673.269,728.141 673.829,712.999 674.388,679.27 674.947,713.572 675.506,729.821 676.066,728.812 676.625,712.434 677.184,677.529 677.743,723.225 678.303,722.428 678.862,704.626 679.421,752.1 679.981,748.816 680.54,743.804 681.099,739.406 681.658,735.517 682.218,751.046 682.777,748.948 683.336,746.96 683.895,726.654 684.455,711.951 685.014,710.235 685.573,675.997 686.132,662.412 686.692,664.504 687.251,682.934 687.81,683.925 688.369,685.832 688.929,669.276 689.488,714.721 690.047,698.646 690.606,695.248 691.166,679.12 691.725,697.282 692.284,695.726 692.843,645.414 693.403,714.445 693.962,730.397 694.521,707.749 695.08,709.165 695.64,656.386 696.199,621.986 696.758,640.63 697.317,623.407 697.877,591.65 698.436,594.49 698.995,585.897 699.554,558.39 700.114,553.208 700.673,594.437 701.232,577.678 701.791,600.277 702.351,587.197 702.91,593.247 703.469,595.268 704.028,598.445 704.588,618.947 705.147,639.555 705.706,675.635 706.265,678.141 706.825,680.765 707.384,667.994 707.943,618.79 708.502,621.817 709.062,624.048 709.621,613.184 710.18,632.956 710.739,634.814 711.299,671.31 711.858,675.509 712.417,677.864 712.976,664.136 713.536,686.242 714.095,734.169 714.654,747.877 715.213,748.246 715.773,711.187 716.332,726.45 716.891,727.208 717.45,742.345 718.01,773.754 718.569,755.897 719.128,767.343 719.687,746.887 720.247,730.927 720.806,727.516 721.365,756.236 721.924,736.301 722.484,767.455 723.043,765.724 723.602,747.3 724.161,746.214 724.721,741.91 725.28,787.221 725.839,782.434 726.398,792.452 726.958,755.026 727.517,703.614 728.076,717.519 728.635,700.015 729.195,668.428 729.754,702.927 730.313,687.181 730.872,687.703 731.432,707.363 731.991,671.697 732.55,672.885 733.109,670.599 733.669,656.176 734.228,673.507 734.787,704.915 735.346,750.146 735.906,747.34 736.465,730.663 737.024,745.353 737.583,741.971 738.143,753.857 738.702,750.208 739.261,764.645 739.82,729.451 740.38,729.65 740.939,746.45 741.498,757.508 742.057,753.008 742.617,765.161 743.176,780.38 743.735,789.398 744.294,750.606 744.854,734.6 745.413,666.351 745.972,714.645 746.531,711.501 747.091,741.668 747.65,769.144 748.209,732.709 748.768,750.48 749.328,710.893 749.887,694.112 750.446,741.899 751.005,738.701 751.565,717.769 752.124,700.951 752.683,685.177 753.242,704.021 753.802,685.45 754.361,683.14 754.92,701.515 755.479,698.802 756.039,652.524 756.598,622.003 757.157,611.046 757.716,632.141 758.276,649.965 758.835,666.358 759.394,681.183 759.953,664.323 760.513,682.266 761.072,667.91 761.631,670.307 762.19,640.812 762.75,641.781 763.309,642.325 763.868,594.864 764.427,601.625 764.987,606.928 765.546,679.669 766.105,714.842 766.664,725.449 767.224,755.559 767.783,733.101 768.342,744.236 768.901,711.049 769.461,707.708 770.02,705.025 770.579,692.073 771.138,691.763 771.698,689.591 772.257,687.739 772.816,671.332 773.375,669.157 773.935,670.111 774.494,671.611 775.053,688.213 775.612,703.698 776.172,718.07 776.731,713.341 777.29,725.355 777.849,722.413 778.409,721.666 778.968,717.153 779.527,700.098 780.086,718.534 780.646,720.442 781.205,683.771 781.764,699.773 782.323,764.405 782.883,790.68 783.442,832.025 784.001,827.345 784.56,741.298 785.12,787.066 785.679,828.735 786.238,806.833 786.797,797.889 787.357,788.783 787.916,817.046 788.475,793.62 789.034,787.875 789.594,766.135 790.153,713.681 790.712,729.829 791.271,757.925 791.831,755.78 792.39,770.814 792.949,752.052 793.508,765.653 794.068,761.562 794.627,724.234 795.186,702.24 795.745,702.189 796.305,738.271 796.864,704.427 797.423,732.853 797.982,732.136 798.542,697.247 799.101,698.068 799.66,662.905 800.219,663.749 800.779,632.787 801.338,606.056 801.897,628.491 802.456,599.64 803.016,625.406 803.575,641.704 804.134,676.273 804.693,674.985 805.253,673.303 805.812,660.481 806.371,629.356 806.931,646.994 807.49,619.859 808.049,671.29 808.608,688.368 809.168,686.712 809.727,705.13 810.286,717.957 810.845,731.984 811.405,732.501 811.964,728.208 812.523,711.299 813.082,676.859 813.642,647.937 814.201,634.699 814.76,655.455 815.319,671.107 815.879,688.493 816.438,674.282 816.997,624.798 817.556,626.487 818.116,628.793 818.675,631.537 819.234,617.811 819.793,637.496 820.353,607.616 820.912,596.266 821.471,568.851 822.03,608.124 822.59,597.453 823.149,618.566 823.708,638.459 824.267,671.73 824.827,672.272 825.386,705.008 825.945,705.968 826.504,687.49 827.064,691.471 827.623,720.318 828.182,717.292 828.741,681.656 829.301,694.609 829.86,641.448 830.419,641.462 830.978,643.587 831.538,598.973 832.097,618.185 832.656,658.274 833.215,699.037 833.775,714.26 834.334,713.261 834.893,723.836 835.452,719.085 836.012,749.815 836.571,732.385 837.13,713.29 837.689,713.086 838.249,742.225 838.808,737.905 839.367,750.233 839.926,795.532 840.486,759.464 841.045,772.189 841.604,816.375 842.163,776.658 842.723,789.745 843.282,786.69 843.841,781.176 844.4,810.606 844.96,806.221 845.519,751.344 846.078,766.18 846.637,744.319 847.197,725.851 847.756,725.835 848.315,722.845 848.874,720.009 849.434,687.419 849.993,721.846 850.552,753.635 851.111,767.112 851.671,761.337 852.23,757.199 852.789,707.001 853.348,718.386 853.908,718.384 854.467,751.522 855.026,731.169 855.585,726.79 856.145,723.259 856.704,722.668 857.263,738.863 857.822,754.098 858.382,699.622 858.941,683.909 859.5,681.069 860.059,711.868 860.619,679.759 861.178,666.094 861.737,666.626 862.296,682.965 862.856,682.946 863.415,670.624 863.974,637.447 864.533,674.398 865.093,675.758 865.652,642.231 866.211,644.235 866.77,682.668 867.33,686.5 867.889,655.104 868.448,656.8 869.007,640.581 869.567,642.371 870.126,628.58 870.685,648.549 871.244,682.854 871.804,699.697 872.363,716.168 872.922,698.182 873.481,681.498 874.041,696.127 874.6,725.723 875.159,721.997 875.718,653.681 876.278,656.265 876.837,627.114 877.396,617.408 877.955,603.064 878.515,609.084 879.074,599.896 879.633,556.975 880.192,596.189 880.752,633.724 881.311,639.418 881.87,626.931 882.429,650.87 882.989,649.824 883.548,652.84 884.107,654.949 884.666,620.051 885.226,608.31 885.785,609.196 886.344,631.136 886.903,619.358 887.463,655.217 888.022,656.802 888.581,656.159 889.14,640.826 889.7,641.999 890.259,625.731 890.818,629.015 891.377,679.98 891.937,667.585 892.496,687.247 893.055,638.782 893.614,641.368 894.174,660.074 894.733,647.008 895.292,682.715 895.851,698.396 896.411,699.373 896.97,680.912 897.529,668.494 898.088,702.861 898.648,716.073 899.207,713.135 899.766,725.202 900.325,675.639 900.885,642.39 901.444,629.805 902.003,628.952 902.562,628.538 903.122,618.814 903.681,622.98 904.24,607.647 904.799,578.517 905.359,632.858 905.918,618.137 906.477,637.804 907.036,607.149 907.596,626.593 908.155,612.021 908.714,601.245 909.273,622.92 909.833,611.576 910.392,618.004 910.951,622.597 911.51,610.326 912.07,630.332 912.629,583.57 913.188,640.869 913.747,661.025 914.307,680.543 914.866,666.094 915.425,684.157 915.984,682.153 916.544,695.183 917.103,677.763 917.662,694.346 918.221,695.097 918.781,693.052 919.34,712.122 919.899,708.01 920.458,707.699 921.018,725.588 921.577,737.976 922.136,752.82 922.695,764.07 923.255,775.626 923.814,772.916 924.373,818.094 924.932,811.286 925.492,775.665 926.051,789.998 926.61,782.381 927.169,776.985 927.729,771.185 928.288,754.702 928.847,767.57 929.406,747.22 929.966,745.632 930.525,741.486 931.084,720.739 931.644,702.912 932.203,688.169 932.762,673.51 933.321,725.635 933.881,728.838 934.44,706.246 934.999,659.605 935.558,629.275 936.118,615.09 936.677,665.102 937.236,667.334 937.795,637.799 938.355,639.955 938.914,673.978 939.473,610.144 940.032,595.857 940.592,633.851 941.151,637.613 941.71,674.668 942.269,660.582 942.829,663.465 943.388,669.763 943.947,717.832 944.506,703.071 945.066,699.444 945.625,681.309 946.184,669.767 946.743,704.841 947.303,689.663 947.862,673.175 948.421,675.778 948.98,661.97 949.54,678.174 950.099,666.449 950.658,653.788 951.217,654.44 951.777,658.21 952.336,642.556 952.895,665.01 953.454,665.974 954.014,682.397 954.573,666.715 955.132,715.077 955.691,727.161 956.251,723.773 956.81,720.507 957.369,717.272 957.928,681.762 958.488,683.134 959.047,650.959 959.606,681.721 960.165,717.652 960.725,718.074 961.284,715.501 961.843,713.558 962.402,714.105 962.962,715.81 963.521,712.915 964.08,696.341 964.639,713.664 965.199,695.329 965.758,696.826 966.317,679.503 966.876,695.602 967.436,715.909 967.995,718.04 968.554,667.63 969.113,683.069 969.673,665.764 970.232,683.055 970.791,679.808 971.35,678.478 971.91,665.208 972.469,733.061 973.028,727.692 973.587,723.575 974.147,671.997 974.706,686.977 975.265,715.086 975.824,700.219 976.384,664.159 976.943,662.432 977.502,631.562 978.061,650.817 978.621,638.591 979.18,672.191 979.739,655.869 980.298,654.535 980.858,643.393 981.417,647.213 981.976,664.657 982.535,682.867 983.095,683.33 983.654,702.455 984.213,715.16 984.772,728.151 985.332,729.091 985.891,745.226 986.45,706.644 987.009,705.401 987.569,684.646 988.128,701.206 988.687,666.362 989.246,670.868 989.806,717.991 990.365,681.339 990.924,666.403 991.483,669.023 992.043,667.643 992.602,670.373 993.161,668.825 993.72,669.274 994.28,670.337 994.839,668.912 995.398,686.845 995.957,717.569 996.517,697.532 997.076,727.708 997.635,755.566 998.194,750.896 998.754,744.456 999.313,722.913 999.872,723.419 1000.43,754.539 1000.99,736.109 1001.55,736.024 1002.11,734.708 1002.67,702.773 1003.23,669.785 1003.79,656.447 1004.35,624.611 1004.91,658.446 1005.46,642.615 1006.02,658.711 1006.58,626.93 1007.14,630.893 1007.7,634.672 1008.26,638.707 1008.82,659.785 1009.38,673.863 1009.94,693.855 1010.5,693.741 1011.06,742.343 1011.62,775.031 1012.18,770.201 1012.73,781.893 1013.29,792.991 1013.85,772.946 1014.41,785.887 1014.97,748.985 1015.53,762.421 1016.09,790.439 1016.65,768.461 1017.21,767.795 1017.77,729.534 1018.33,725.707 1018.89,720.967 1019.45,717.129 1020.01,699.247 1020.56,680.829 1021.12,696.611 1021.68,726.912 1022.24,721.145 1022.8,720.965 1023.36,681.291 1023.92,679.993 1024.48,663.326 1025.04,693.707 1025.6,661.796 1026.16,648.29 1026.72,654.933 1027.28,607.442 1027.83,595.417 1028.39,570.693 1028.95,545.692 1029.51,573.392 1030.07,578.765 1030.63,652.145 1031.19,671.038 1031.75,688.291 1032.31,704.61 1032.87,735.429 1033.43,736.687 1033.99,748.251 1034.55,763.129 1035.1,758.736 1035.66,735.367 1036.22,732.781 1036.78,694.86 1037.34,714.091 1037.9,695.784 1038.46,743.841 1039.02,756.053 1039.58,781.159 1040.14,776.914 1040.7,770.69 1041.26,733.38 1041.82,732.848 1042.38,752.91 1042.93,763.316 1043.49,793.134 1044.05,756.373 1044.61,734.787 1045.17,716.087 1045.73,682.059 1046.29,698.841 1046.85,711.468 1047.41,691.852 1047.97,739.764 1048.53,753.331 1049.09,750.07 1049.65,762.927 1050.2,743.497 1050.76,742.639 1051.32,737.137 1051.88,718.188 1052.44,696.813 1053,695.733 1053.56,696.489 1054.12,692.077 1054.68,691.611 1055.24,691.009 1055.8,686.328 1056.36,702.134 1056.92,732.875 1057.48,696.158 1058.03,732.114 1058.59,776.925 1059.15,773.943 1059.71,784.498 1060.27,776.943 1060.83,708.293 1061.39,705.468 1061.95,673.986 1062.51,674.844 1063.07,674.091 1063.63,688.654 1064.19,689.136 1064.75,709.336 1065.3,710.912 1065.86,691.015 1066.42,694.279 1066.98,708.741 1067.54,692.51 1068.1,709.773 1068.66,725.721 1069.22,720.266 1069.78,768.094 1070.34,715.291 1070.9,684.51 1071.46,667.846 1072.02,638.146 1072.57,621.862 1073.13,594.719 1073.69,600.772 1074.25,591.205 1074.81,597.119 1075.37,603.686 1075.93,626.073 1076.49,632.984 1077.05,599.813 1077.61,571.966 1078.17,573.826 1078.73,582.255 1079.29,585.596 1079.85,604.725 1080.4,623.894 1080.96,596.417 1081.52,600.505 1082.08,604.096 1082.64,642.59 1083.2,626.988 1083.76,598.92 1084.32,601.468 1084.88,606.806 1085.44,578.801 1086,615.39 1086.56,638.257 1087.12,637.243 1087.67,686.769 1088.23,719.149 1088.79,716.799 1089.35,668.876 1089.91,670.429 1090.47,686.339 1091.03,670.451 1091.59,653.985 1092.15,641.542 1092.71,626.14 1093.27,629.551 1093.83,647.771 1094.39,667.026 1094.94,667.699 1095.5,635.605 1096.06,606.36 1096.62,593.541 1097.18,583.63 1097.74,605.274 1098.3,623.602 1098.86,642.105 1099.42,611.391 1099.98,615.129 1100.54,619.316 1101.1,633.82 1101.66,682.835 1102.22,668.604 1102.77,672.705 1103.33,695.193 1103.89,680.754 1104.45,652.199 1105.01,655.998 1105.57,655.941 1106.13,675.472 1106.69,675.882 1107.25,659.751 1107.81,661.522 1108.37,661.894 1108.93,680.197 1109.49,691.454 1110.04,677.048 1110.6,695.825 1111.16,708.869 1111.72,736.929 1112.28,733.878 1112.84,746.301 1113.4,743.028 1113.96,723.635 1114.52,724.611 1115.08,706.172 1115.64,675.989 1116.2,657.918 1116.76,676.052 1117.31,721.695 1117.87,735.072 1118.43,732.159 1118.99,726.934 1119.55,739.799 1120.11,749.813 1120.67,777.933 1121.23,757.031 1121.79,719.434 1122.35,734.363 1122.91,697.579 1123.47,713.265 1124.03,681.998 1124.59,681.882 1125.14,700.184 1125.7,682.495 1126.26,697.144 1126.82,712.745 1127.38,696.616 1127.94,727.771 1128.5,754.198 1129.06,767.212 1129.62,765.715 1130.18,711.347 1130.74,710.141 1131.3,694.28 1131.86,678.089 1132.41,692.379 1132.97,722.245 1133.53,753.358 1134.09,782.745 1134.65,761.506 1135.21,760.368 1135.77,752.922 1136.33,747.058 1136.89,689.512 1137.45,707.181 1138.01,688.007 1138.57,699.336 1139.13,698.899 1139.68,676.508 1140.24,665.216 1140.8,647.809 1141.36,650.043 1141.92,587.37 1142.48,560.316 1143.04,600.477 1143.6,573.804 1144.16,576.888 1144.72,583.365 1145.28,590.243 1145.84,594.831 1146.4,579.448 1146.96,586.2 1147.51,593.313 1148.07,599.021 1148.63,571.315 1149.19,594.341 1149.75,619.052 1150.31,654.659 1150.87,656.012 1151.43,654.464 1151.99,657.887 1152.55,626.295 1153.11,613.554 1153.67,585.315 1154.23,604.849 1154.78,590.929 1155.34,596.589 1155.9,603.263 1156.46,606.969 1157.02,579.974 1157.58,619.461 1158.14,624.35 1158.7,627.193 1159.26,598.939 1159.82,620.216 1160.38,640.573 1160.94,643.334 1161.5,678.43 1162.05,662.981 1162.61,647.462 1163.17,652.148 1163.73,652.033 1164.29,623.028 1164.85,594.603 1165.41,617.803 1165.97,619.308 1166.53,603.222 1167.09,590.919 1167.65,624.43 1168.21,613.372 1168.77,603.854 1169.33,620.402 1169.88,639.235 1170.44,654.696 1171,655.335 1171.56,670.235 1172.12,674.278 1172.68,731.609 1173.24,703.134 1173.8,688.73 1174.36,703.502 1174.92,687.814 1175.48,687.663 1176.04,687.694 1176.6,676.557 1177.15,661.913 1177.71,679.895 1178.27,681.709 1178.83,682.869 1179.39,715.342 1179.95,713.125 1180.51,663.554 1181.07,685.08 1181.63,701.135 1182.19,733.52 1182.75,748.813 1183.31,792.829 1183.87,786.367 1184.43,748.104 1184.98,727.088 1185.54,727.619 1186.1,740.643 1186.66,738.834 1187.22,734.396 1187.78,699.663 1188.34,681.98 1188.9,680.597 1189.46,698.89 1190.02,698.211 1190.58,716.537 1191.14,700.406 1191.7,698.777 1192.25,661.77 1192.81,682.249 1193.37,664.471 1193.93,636.783 1194.49,622.444 1195.05,613.498 1195.61,634.889 1196.17,640.772 1196.73,641.96 1197.29,674.523 1197.85,676.549 1198.41,644.062 1198.97,661.046 1199.52,698.641 1200.08,699.532 1200.64,696.063 1201.2,726.343 1201.76,724.434 1202.32,721.602 1202.88,704.006 1203.44,733.284 1204,745.882 1204.56,773.015 1205.12,768.39 1205.68,762.049 1206.24,757.399 1206.8,753.67 1207.35,765.13 1207.91,774.768 1208.47,767.737 1209.03,761.021 1209.59,709.669 1210.15,675.81 1210.71,692.493 1211.27,657.742 1211.83,671.62 1212.39,672.619 1212.95,671.915 1213.51,722.678 1214.07,769.497 1214.62,781.26 1215.18,794.318 1215.74,787.369 1216.3,780.641 1216.86,727.997 1217.42,759.688 1217.98,753.131 1218.54,748.105 1219.1,746.806 1219.66,775.462 1220.22,752.687 1220.78,764.426 1221.34,756.706 1221.89,782.353 1222.45,755.97 1223.01,751.424 1223.57,763.274 1224.13,759.491 1224.69,751.017 1225.25,700.428 1225.81,702.704 1226.37,698.819 1226.93,662.808 1227.49,663.026 1228.05,665.791 1228.61,653.223 1229.17,688.589 1229.72,717.135 1230.28,683.738 1230.84,684.82 1231.4,701.848 1231.96,733.476 1232.52,715.444 1233.08,713.692 1233.64,698.469 1234.2,664.956 1234.76,679.78 1235.32,714.094 1235.88,698.472 1236.44,668.841 1236.99,638.877 1237.55,638.992 1238.11,609.571 1238.67,614.138 1239.23,619.379 1239.79,639.763 1240.35,673.821 1240.91,674.453 1241.47,694.689 1242.03,661.102 1242.59,680.992 1243.15,680.444 1243.71,681.551 1244.26,666.096 1244.82,669.686 1245.38,669.536 1245.94,651.8 1246.5,637.784 1247.06,656.398 1247.62,640.778 1248.18,657.875 1248.74,674.704 1249.3,673.054 1249.86,669.627 1250.42,670.832 1250.98,718.97 1251.54,668.08 1252.09,654.925 1252.65,672.276 1253.21,656.238 1253.77,657.209 1254.33,645.479 1254.89,641.709 1255.45,660.203 1256.01,676.139 1256.57,676.614 1257.13,661.298 1257.69,679.848 1258.25,677.96 1258.81,662.369 1259.36,661.44 1259.92,646.755 1260.48,645.743 1261.04,681.13 1261.6,700.66 1262.16,686.113 1262.72,683.141 1263.28,697.931 1263.84,679.884 1264.4,660.793 1264.96,693.544 1265.52,679.873 1266.08,680.997 1266.63,665.732 1267.19,653.644 1267.75,653.525 1268.31,651.702 1268.87,653.209 1269.43,642.529 1269.99,658.362 1270.55,656.074 1271.11,673.804 1271.67,708.72 1272.23,675.937 1272.79,641.501 1273.35,641.755 1273.91,645.54 1274.46,651.164 1275.02,668.08 1275.58,688.439 1276.14,671.075 1276.7,688.492 1277.26,692.598 1277.82,676.145 1278.38,690.473 1278.94,705.454 1279.5,720.679 1280.06,685.467 1280.62,652.351 1281.18,687.211 1281.73,690.119 1282.29,691.804 1282.85,689.884 1283.41,693.075 1283.97,677.085 1284.53,661.185 1285.09,648.101 1285.65,695.671 1286.21,679.589 1286.77,681.038 1287.33,663.811 1287.89,652.122 1288.45,685.868 1289,717.294 1289.56,702.892 1290.12,671.732 1290.68,675.717 1291.24,660.646 1291.8,644.312 1292.36,647.587 1292.92,662.764 1293.48,680.917 1294.04,699.209 1294.6,698.376 1295.16,650.595 1295.72,639.482 1296.28,659.652 1296.83,663.562 1297.39,631.5 1297.95,687.178 1298.51,686.684 1299.07,703.054 1299.63,687.211 1300.19,686.724 1300.75,700.947 1301.31,731.609 1301.87,713.422 1302.43,696.264 1302.99,679.577 1303.55,713.358 1304.1,710.686 1304.66,723.292 1305.22,734.867 1305.78,733.383 1306.34,729.844 1306.9,711.01 1307.46,711.052 1308.02,692.628 1308.58,694.656 1309.14,696.919 1309.7,710.725 1310.26,710.708 1310.82,709.265 1311.38,724.283 1311.93,708.733 1312.49,707.909 1313.05,707.008 1313.61,709.143 1314.17,711.682 1314.73,726.457 1315.29,742.968 1315.85,770.409 1316.41,764.396 1316.97,731.484 1317.53,716.648 1318.09,714.026 1318.65,759.355 1319.2,707.44 1319.76,722.529 1320.32,720.136 1320.88,716.131 1321.44,728.99 1322,728.863 1322.56,727.934 1323.12,694.515 1323.68,712.796 1324.24,711.263 1324.8,692.739 1325.36,691.516 1325.92,720.123 1326.47,701.788 1327.03,668.788 1327.59,666.33 1328.15,655.368 1328.71,674.56 1329.27,673.851 1329.83,721.459 1330.39,717.53 1330.95,697.809 1331.51,694.75 1332.07,707.939 1332.63,674.349 1333.19,676.661 1333.75,643.205 1334.3,599.362 1334.86,617.677 1335.42,625.094 1335.98,625.738 1336.54,611.938 1337.1,617.634 1337.66,622.562 1338.22,657.51 1338.78,672.072 1339.34,687.372 1339.9,674.286 1340.46,674.891 1341.02,644.036 1341.57,648.027 1342.13,652.55 1342.69,669.267 1343.25,687.462 1343.81,686.876 1344.37,669.167 1344.93,665.598 1345.49,666.819 1346.05,665.738 1346.61,667.214 1347.17,685.823 1347.73,684.189 1348.29,684.417 1348.84,681.193 1349.4,683.446 1349.96,650.639 1350.52,649.6 1351.08,648.939 1351.64,667.298 1352.2,684.383 1352.76,681.774 1353.32,685.147 1353.88,682.9 1354.44,698.353 1355,699.284 1355.56,663.612 1356.12,677.649 1356.67,662.864 1357.23,648.239 1357.79,667.786 1358.35,720.422 1358.91,734.662 1359.47,716.578 1360.03,700.588 1360.59,669.42 1361.15,620.573 1361.71,620.26 1362.27,688.87 1362.83,670.221 1363.39,688.007 1363.94,703.547 1364.5,719.493 1365.06,704.185 1365.62,671.788 1366.18,655.339 1366.74,704.407 1367.3,749.194 1367.86,727.144 1368.42,755.06 1368.98,748.942 1369.54,760.91 1370.1,808.348 1370.66,817.717 1371.21,762.549 1371.77,757.318 1372.33,782.729 1372.89,729.563 1373.45,728.171 1374.01,725.824 1374.57,726.359 1375.13,708.586 1375.69,708.039 1376.25,691.684 1376.81,643.651 1377.37,642.678 1377.93,644.61 1378.49,615.625 1379.04,619.968 1379.6,641.376 1380.16,663.227 1380.72,679.56 1381.28,648.882 1381.84,650.101 1382.4,651.048 1382.96,639.791 1383.52,625.404 1384.08,611.367 1384.64,600.79 1385.2,606.259 1385.76,577.019 1386.31,583.662 1386.87,558.119 1387.43,564.862 1387.99,569.542 1388.55,591.897 1389.11,612.141 1389.67,601.153 1390.23,572.881 1390.79,580.752 1391.35,602.962 1391.91,625.218 1392.47,616.908 1393.03,625.182 1393.58,645.082 1394.14,664.478 1394.7,667.671 1395.26,621.116 1395.82,639.036 1396.38,641.762 1396.94,642.917 1397.5,645.187 1398.06,661.739 1398.62,664.841 1399.18,662.621 1399.74,679.893 1400.3,663.64 1400.86,698.274 1401.41,692.831 1401.97,678.006 1402.53,680.622 1403.09,699.872 1403.65,699.957 1404.21,700.124 1404.77,701.401 1405.33,686.969 1405.89,685.42 1406.45,685.918 1407.01,687.167 1407.57,685.753 1408.13,695.883 1408.68,696.808 1409.24,681.5 1409.8,711.993 1410.36,710.023 1410.92,707.325 1411.48,686.974 1412.04,703.654 1412.6,736.878 1413.16,732.387 1413.72,710.855 1414.28,710.601 1414.84,743.287 1415.4,752.342 1415.95,766.847 1416.51,716.655 1417.07,731.41 1417.63,681.772 1418.19,650.576 1418.75,647.907 1419.31,667.169 1419.87,665.566 1420.43,684.438 1420.99,687.782 1421.55,672.949 1422.11,672.941 1422.67,705.973 1423.23,738.955 1423.78,799.636 1424.34,807.756 1424.9,832.316 1425.46,825.512 1426.02,767.441 1426.58,751.354 1427.14,716.761 1427.7,731.298 1428.26,741.729 1428.82,770.673 1429.38,767.201 1429.94,763.816 1430.5,762.72 1431.05,760.238 1431.61,770.341 1432.17,766.225 1432.73,760.499 1433.29,755.528 1433.85,753.081 1434.41,750.029 1434.97,694.905 1435.53,709.101 1436.09,706.501 1436.65,675.397 1437.21,691.052 1437.77,676.274 1438.33,694.216 1438.88,707.042 1439.44,726.646 1440,707.303 1440.56,723.009 1441.12,691.6 1441.68,676.954 1442.24,710.358 1442.8,697.436 1443.36,695.088 1443.92,758.085 1444.48,708.688 1445.04,727.694 1445.6,724.016 1446.15,724.447 1446.71,719.608 1447.27,714.032 1447.83,742.185 1448.39,720.483 1448.95,748.523 1449.51,743.072 1450.07,726.862 1450.63,752.899 1451.19,764.79 1451.75,715.88 1452.31,744.09 1452.87,758.455 1453.42,741.274 1453.98,723.444 1454.54,705.653 1455.1,704.216 1455.66,734.643 1456.22,730.643 1456.78,743.574 1457.34,740.399 1457.9,785.816 1458.46,812.213 1459.02,821.15 1459.58,798.08 1460.14,743.778 1460.7,739.013 1461.25,766.237 1461.81,775.982 1462.37,784.051 1462.93,746.743 1463.49,727.379 1464.05,709.032 1464.61,722.163 1465.17,687.283 1465.73,667.92 1466.29,668.374 1466.85,667.427 1467.41,652.784 1467.97,655.177 1468.52,653.1 1469.08,641.169 1469.64,611.843 1470.2,630.493 1470.76,617.073 1471.32,620.451 1471.88,608.352 1472.44,594.845 1473,631.706 1473.56,649.093 1474.12,649.699 1474.68,650.417 1475.24,636.194 1475.79,620.128 1476.35,604.991 1476.91,590.42 1477.47,579.423 1478.03,586.817 1478.59,597.587 1479.15,587.044 1479.71,624.761 1480.27,642.588 1480.83,624.079 1481.39,612.224 1481.95,628.47 1482.51,664.164 1483.07,649.287 1483.62,669.573 1484.18,653.258 1484.74,636.707 1485.3,624.93 1485.86,645.117 1486.42,631.948 1486.98,649.005 1487.54,669.962 1488.1,672.362 1488.66,673.207 1489.22,691.042 1489.78,719.297 1490.34,731.46 1490.89,745.722 1491.45,710.069 1492.01,724.007 1492.57,755.607 1493.13,750.442 1493.69,782.186 1494.25,775.479 1494.81,766.462 1495.37,757.489 1495.93,784.982 1496.49,779.305 1497.05,806.992 1497.61,801.627 1498.16,796.806 1498.72,775.195 1499.28,754.078 1499.84,714.01 1500.4,741.31 1500.96,754.661 1501.52,733.394 1502.08,715.868 1502.64,698.046 1503.2,681.904 1503.76,665.394 1504.32,664.163 1504.88,665.614 1505.44,684.013 1505.99,688.78 1506.55,685.899 1507.11,719.709 1507.67,719.545 1508.23,732.242 1508.79,762.093 1509.35,774.995 1509.91,752.142 1510.47,752.78 1511.03,732.477 1511.59,745.978 1512.15,723.879 1512.71,672.042 1513.26,704.784 1513.82,699.055 1514.38,697.187 1514.94,678.349 1515.5,711.861 1516.06,692.922 1516.62,645.813 1517.18,662.301 1517.74,649.13 1518.3,634.956 1518.86,653.001 1519.42,621.818 1519.98,574.536 1520.53,593.845 1521.09,600.757 1521.65,605.935 1522.21,610.609 1522.77,598.991 1523.33,605.188 1523.89,607.323 1524.45,629.18 1525.01,647.817 1525.57,602.196 1526.13,571.984 1526.69,576.676 1527.25,598.739 1527.81,585.923 1528.36,558.854 1528.92,583.106 1529.48,571.048 1530.04,563.419 1530.6,587.333 1531.16,593.333 1531.72,598.643 1532.28,589.196 1532.84,597.216 1533.4,616.454 1533.96,602.91 1534.52,623.251 1535.08,625.818 1535.63,596.619 1536.19,585.135 1536.75,628.237 1537.31,630.976 1537.87,637.081 1538.43,640.059 1538.99,644.825 1539.55,662.053 1540.11,649.088 1540.67,637.884 1541.23,638.848 1541.79,625.749 1542.35,659.92 1542.9,678.633 1543.46,662.303 1544.02,666.51 1544.58,734.022 1545.14,749.673 1545.7,745.806 1546.26,744.778 1546.82,775.878 1547.38,754.676 1547.94,754.305 1548.5,768.138 1549.06,715.622 1549.62,713.429 1550.18,743.546 1550.73,743.555 1551.29,691.663 1551.85,676.319 1552.41,678.001 1552.97,726.847 1553.53,710.823 1554.09,724.015 1554.65,734.679 1555.21,712.865 1555.77,726.749 1556.33,711.004 1556.89,710.791 1557.45,692.371 1558,691.035 1558.56,674.245 1559.12,642.975 1559.68,645.842 1560.24,677.047 1560.8,694.518 1561.36,698.322 1561.92,710.687 1562.48,689.237 1563.04,673.364 1563.6,671.928 1564.16,656.65 1564.72,660.819 1565.28,659.401 1565.83,624.38 1566.39,610.96 1566.95,613.455 1567.51,601.605 1568.07,671.761 1568.63,637.686 1569.19,638.181 1569.75,624.066 1570.31,595.996 1570.87,600.57 1571.43,604.198 1571.99,654.838 1572.55,655.184 1573.1,687.799 1573.66,672.246 1574.22,721.543 1574.78,751.319 1575.34,733.593 1575.9,714.247 1576.46,699.462 1577.02,719.706 1577.58,705.124 1578.14,703.034 1578.7,717.254 1579.26,699.961 1579.82,701.999 1580.37,686.905 1580.93,670.501 1581.49,734.886 1582.05,748.32 1582.61,745.205 1583.17,774.187 1583.73,771.319 1584.29,734.634 1584.85,696.28 1585.41,714.132 1585.97,666.747 1586.53,667.359 1587.09,667.844 1587.65,700.996 1588.2,702.108 1588.76,667.395 1589.32,699.381 1589.88,696.182 1590.44,660.845 1591,664.438 1591.56,682.205 1592.12,682.761 1592.68,684.251 1593.24,670.232 1593.8,653.192 1594.36,670.681 1594.92,670.783 1595.47,674.705 1596.03,677.621 1596.59,694.055 1597.15,674.24 1597.71,676.848 1598.27,678.146 1598.83,676.595 1599.39,659.896 1599.95,628.858 1600.51,616.315 1601.07,604.786 1601.63,591.902 1602.19,578.024 1602.74,597.356 1603.3,599.131 1603.86,604.163 1604.42,640.446 1604.98,611.53 1605.54,629.768 1606.1,632.052 1606.66,666.844 1607.22,717.148 1607.78,730.643 1608.34,760.857 1608.9,756.436 1609.46,752.062 1610.02,752.998 1610.57,764.792 1611.13,740.478 1611.69,785.315 1612.25,778.898 1612.81,758.768 1613.37,767.374 1613.93,779.944 1614.49,758.909 1615.05,773.758 1615.61,770.449 1616.17,718.101 1616.73,699.999 1617.29,680.16 1617.84,683.628 1618.4,672.358 1618.96,657.103 1619.52,675.331 1620.08,691.286 1620.64,672.867 1621.2,674.616 1621.76,703.717 1622.32,704.284 1622.88,733.104 1623.44,695.25 1624,663.348 1624.56,697.138 1625.11,671.201 1625.67,671.74 1626.23,674.351 1626.79,694.49 1627.35,695.857 1627.91,712.499 1628.47,696.392 1629.03,725.578 1629.59,726.588 1630.15,756.62 1630.71,691.069 1631.27,704.078 1631.83,686.004 1632.39,654.888 1632.94,655.745 1633.5,608.091 1634.06,615.305 1634.62,636.751 1635.18,644.412 1635.74,661.021 1636.3,612.056 1636.86,581.719 1637.42,617.36 1637.98,637.999 1638.54,638.651 1639.1,644.041 1639.66,659.561 1640.21,658.302 1640.77,689.323 1641.33,673.591 1641.89,724.767 1642.45,724.436 1643.01,725.431 1643.57,722.4 1644.13,704.814 1644.69,701.353 1645.25,670.244 1645.81,690.504 1646.37,690.21 1646.93,692.482 1647.48,693.801 1648.04,696.692 1648.6,697.478 1649.16,695.086 1649.72,688.256 1650.28,690.216 1650.84,726.554 1651.4,726.742 1651.96,709.126 1652.52,691.863 1653.08,678.317 1653.64,695.965 1654.2,713.112 1654.76,696.266 1655.31,693.834 1655.87,678.017 1656.43,663.089 1656.99,678.071 1657.55,677.983 1658.11,675.118 1658.67,693.549 1659.23,695.425 1659.79,697.209 1660.35,698.532 1660.91,699.638 1661.47,711.995 1662.03,694.884 1662.58,711.566 1663.14,692.486 1663.7,690.695 1664.26,689.755 1664.82,690.061 1665.38,688.93 1665.94,687.9 1666.5,692.059 1667.06,693.971 1667.62,708.916 1668.18,693.594 1668.74,695.911 1669.3,710.596 1669.85,709.805 1670.41,727.654 1670.97,725.707 1671.53,706.878 1672.09,704.155 1672.65,704.052 1673.21,700.208 1673.77,668.745 1674.33,618.001 1674.89,606.292 1675.45,631.681 1676.01,653.004 1676.57,671.473 1677.13,640.016 1677.68,642.232 1678.24,642.115 1678.8,661.043 1679.36,677.255 1679.92,679.252 1680.48,679.802 1681.04,662.459 1681.6,648.43 1682.16,651.171 1682.72,619.358 1683.28,637.116 1683.84,638.462 1684.4,623.034 1684.95,624.206 1685.51,627.231 1686.07,596.983 1686.63,587.25 1687.19,594.462 1687.75,597.116 1688.31,588.901 1688.87,625.523 1689.43,627.402 1689.99,651.731 1690.55,654.316 1691.11,685.356 1691.67,699.44 1692.23,696.819 1692.78,692.006 1693.34,690.523 1693.9,672.199 1694.46,675.505 1695.02,695.895 1695.58,711.985 1696.14,742.77 1696.7,722.205 1697.26,717.501 1697.82,702.809 1698.38,700.047 1698.94,697.373 1699.5,699.644 1700.05,698.836 1700.61,684.138 1701.17,715.778 1701.73,712.818 1702.29,709.768 1702.85,727.963 1703.41,695.495 1703.97,678.118 1704.53,679.204 1705.09,730.387 1705.65,695.556 1706.21,678.933 1706.77,646.297 1707.32,647.983 1707.88,649.403 1708.44,648.334 1709,667.042 1709.56,652.458 1710.12,689.154 1710.68,669.535 1711.24,671.185 1711.8,655.945 1712.36,687.791 1712.92,689.446 1713.48,671.121 1714.04,688.302 1714.6,721.119 1715.15,718.331 1715.71,732.719 1716.27,764.248 1716.83,758.947 1717.39,774.423 1717.95,801.336 1718.51,798.158 1719.07,792.744 1719.63,773.358 1720.19,783.711 1720.75,744.391 1721.31,707.968 1721.87,738.301 1722.42,768.263 1722.98,764.304 1723.54,760.592 1724.1,787.273 1724.66,797.63 1725.22,822.727 1725.78,828.799 1726.34,822.346 1726.9,799.136 1727.46,808.516 1728.02,800.14 1728.58,810.643 1729.14,786.157 1729.69,748.492 1730.25,760.745 1730.81,742.163 1731.37,718.536 1731.93,715.454 1732.49,744.582 1733.05,724.013 1733.61,735.442 1734.17,731.156 1734.73,728.727 1735.29,677.503 1735.85,692.275 1736.41,658.08 1736.97,659.899 1737.52,707.59 1738.08,688.612 1738.64,624.41 1739.2,596.123 1739.76,582.206 1740.32,587.673 1740.88,560.525 1741.44,601.672 1742,609.969 1742.56,625.329 1743.12,629.336 1743.68,715.126 1744.24,713.821 1744.79,678.049 1745.35,646.097 1745.91,647.504 1746.47,649.226 1747.03,635.596 1747.59,672.906 1748.15,676.019 1748.71,676.06 1749.27,662.877 1749.83,666.572 1750.39,654.052 1750.95,671.528 1751.51,654.063 1752.06,657.314 1752.62,659.05 1753.18,642.883 1753.74,644.716 1754.3,649.253 1754.86,650.983 1755.42,619.535 1755.98,638.433 1756.54,655.303 1757.1,607.782 1757.66,609.868 1758.22,593.8 1758.78,553.553 1759.34,495.273 1759.89,524.387 1760.45,498.149 1761.01,494.477 1761.57,485.907 1762.13,480.674 1762.69,507.787 1763.25,551.789 1763.81,524.197 1764.37,561.703 1764.93,584.537 1765.49,595.264 1766.05,581.939 1766.61,588.311 1767.16,610.786 1767.72,596.785 1768.28,615.629 1768.84,639.299 1769.4,625.789 1769.96,609.527 1770.52,612.724 1771.08,618.3 1771.64,623.054 1772.2,645.586 1772.76,642.476 1773.32,658.195 1773.88,725.562 1774.43,738.427 1774.99,767.504 1775.55,779.946 1776.11,776.117 1776.67,769.155 1777.23,733.571 1777.79,763.992 1778.35,756.909 1778.91,754.486 1779.47,751.852 1780.03,763.982 1780.59,760.263 1781.15,771.826 1781.71,799.108 1782.26,758.328 1782.82,752.725 1783.38,718.663 1783.94,723.178 1784.5,734.852 1785.06,748.963 1785.62,728.466 1786.18,726.08 1786.74,759.665 1787.3,752.511 1787.86,749.471 1788.42,779.569 1788.98,773.606 1789.53,769.763 1790.09,767.167 1790.65,780.401 1791.21,775.19 1791.77,753.815 1792.33,767.55 1792.89,779.733 1793.45,759.321 1794.01,724.24 1794.57,723.761 1795.13,690.483 1795.69,705.845 1796.25,685.193 1796.8,699.712 1797.36,730.959 1797.92,749.765 1798.48,729.011 1799.04,722.758 1799.6,723.796 1800.16,753.081 1800.72,750.706 1801.28,744.423 1801.84,693.717 1802.4,690.387 1802.96,691.133 1803.52,643.971 1804.08,663.573 1804.63,664.148 1805.19,650.574 1805.75,638.773 1806.31,645.403 1806.87,646.323 1807.43,681.533 1807.99,662.86 1808.55,661.536 1809.11,629.466 1809.67,631.668 1810.23,631.215 1810.79,653.503 1811.35,624.615 1811.9,627.757 1812.46,613.167 1813.02,617.087 1813.58,635.58 1814.14,642.56 1814.7,675.445 1815.26,693.452 1815.82,696.778 1816.38,716.172 1816.94,731.03 1817.5,775.865 1818.06,738.799 1818.62,734.561 1819.18,766.832 1819.73,763.939 1820.29,744.963 1820.85,739.581 1821.41,720.231 1821.97,734.759 1822.53,734.52 1823.09,797.645 1823.65,775.999 1824.21,785.253 1824.77,748.7 1825.33,696.057 1825.89,662.367 1826.45,662.329 1827,662.162 1827.56,664.699 1828.12,632.51 1828.68,652.632 1829.24,654.749 1829.8,655.96 1830.36,654.197 1830.92,675.188 1831.48,677.844 1832.04,710.647 1832.6,725.03 1833.16,708.193 1833.72,721.321 1834.27,682.044 1834.83,682.064 1835.39,651.493 1835.95,639.072 1836.51,674.68 1837.07,711.606 1837.63,713.002 1838.19,742.367 \"/>\n<path clip-path=\"url(#clip923)\" d=\"M720.247 691.988 L720.806 691.988 L721.365 691.988 L721.924 691.988 L722.484 691.988 L723.043 691.988 L723.602 691.988 L724.161 691.988 L724.721 691.988 L725.28 691.988 L725.839 691.988 L726.398 691.988 L726.958 691.988 L727.517 691.988 L728.076 691.988 L728.635 691.988 L729.195 691.988 L729.754 691.988 L730.313 691.988 L730.872 691.988 L731.432 691.988 L731.991 691.988 L732.55 691.988 L733.109 691.988 L733.669 691.988 L734.228 691.988 L734.787 691.988 L735.346 691.988 L735.906 691.988 L736.465 691.988 L737.024 691.988 L737.583 691.988 L738.143 691.988 L738.702 691.988 L739.261 691.988 L739.82 691.988 L740.38 691.988 L740.939 691.988 L741.498 691.988 L742.057 691.988 L742.617 691.988 L743.176 691.988 L743.735 691.988 L744.294 691.988 L744.854 691.988 L745.413 691.988 L745.972 691.988 L746.531 691.988 L747.091 691.988 L747.65 691.988 L748.209 691.988 L748.768 691.988 L749.328 691.988 L749.887 691.988 L750.446 691.988 L751.005 691.988 L751.565 691.988 L752.124 691.988 L752.683 691.988 L753.242 691.988 L753.802 691.988 L754.361 691.988 L754.92 691.988 L755.479 691.988 L756.039 691.988 L756.598 691.988 L757.157 691.988 L757.716 691.988 L758.276 691.988 L758.835 691.988 L759.394 691.988 L759.953 691.988 L760.513 691.988 L761.072 691.988 L761.631 691.988 L762.19 691.988 L762.75 691.988 L763.309 691.988 L763.868 691.988 L764.427 691.988 L764.987 691.988 L765.546 691.988 L766.105 691.988 L766.664 691.988 L767.224 691.988 L767.783 691.988 L768.342 691.988 L768.901 691.988 L769.461 691.988 L770.02 691.988 L770.579 691.988 L771.138 691.988 L771.698 691.988 L772.257 691.988 L772.816 691.988 L773.375 691.988 L773.935 691.988 L774.494 691.988 L775.053 691.988 L775.612 691.988 L776.172 691.988 L776.731 691.988 L777.29 691.988 L777.849 691.988 L778.409 691.988 L778.968 691.988 L779.527 691.988 L780.086 691.988 L780.646 691.988 L781.205 691.988 L781.764 691.988 L782.323 691.988 L782.883 691.988 L783.442 691.988 L784.001 691.988 L784.56 691.988 L785.12 691.988 L785.679 691.988 L786.238 691.988 L786.797 691.988 L787.357 691.988 L787.916 691.988 L788.475 691.988 L789.034 691.988 L789.594 691.988 L790.153 691.988 L790.712 691.988 L791.271 691.988 L791.831 691.988 L792.39 691.988 L792.949 691.988 L793.508 691.988 L794.068 691.988 L794.627 691.988 L795.186 691.988 L795.745 691.988 L796.305 691.988 L796.864 691.988 L797.423 691.988 L797.982 691.988 L798.542 691.988 L799.101 691.988 L799.66 691.988 L800.219 691.988 L800.779 691.988 L801.338 691.988 L801.897 691.988 L802.456 691.988 L803.016 691.988 L803.575 691.988 L804.134 691.988 L804.693 691.988 L805.253 691.988 L805.812 691.988 L806.371 691.988 L806.931 691.988 L807.49 691.988 L808.049 691.988 L808.608 691.988 L809.168 691.988 L809.727 691.988 L810.286 691.988 L810.845 691.988 L811.405 691.988 L811.964 691.988 L812.523 691.988 L813.082 691.988 L813.642 691.988 L814.201 691.988 L814.76 691.988 L815.319 691.988 L815.879 691.988 L816.438 691.988 L816.997 691.988 L817.556 691.988 L818.116 691.988 L818.675 691.988 L819.234 691.988 L819.793 691.988 L820.353 691.988 L820.912 691.988 L821.471 691.988 L822.03 691.988 L822.59 691.988 L823.149 691.988 L823.708 691.988 L824.267 691.988 L824.827 691.988 L825.386 691.988 L825.945 691.988 L826.504 691.988 L827.064 691.988 L827.623 691.988 L828.182 691.988 L828.741 691.988 L829.301 691.988 L829.86 691.988 L830.419 691.988 L830.978 691.988 L831.538 691.988 L832.097 691.988 L832.656 691.988 L833.215 691.988 L833.775 691.988 L834.334 691.988 L834.893 691.988 L835.452 691.988 L836.012 691.988 L836.571 691.988 L837.13 691.988 L837.689 691.988 L838.249 691.988 L838.808 691.988 L839.367 691.988 L839.926 691.988 L840.486 691.988 L841.045 691.988 L841.604 691.988 L842.163 691.988 L842.723 691.988 L843.282 691.988 L843.841 691.988 L844.4 691.988 L844.96 691.988 L845.519 691.988 L846.078 691.988 L846.637 691.988 L847.197 691.988 L847.756 691.988 L848.315 691.988 L848.874 691.988 L849.434 691.988 L849.993 691.988 L850.552 691.988 L851.111 691.988 L851.671 691.988 L852.23 691.988 L852.789 691.988 L853.348 691.988 L853.908 691.988 L854.467 691.988 L855.026 691.988 L855.585 691.988 L856.145 691.988 L856.704 691.988 L857.263 691.988 L857.822 691.988 L858.382 691.988 L858.941 691.988 L859.5 691.988 L860.059 691.988 L860.619 691.988 L861.178 691.988 L861.737 691.988 L862.296 691.988 L862.856 691.988 L863.415 691.988 L863.974 691.988 L864.533 691.988 L865.093 691.988 L865.652 691.988 L866.211 691.988 L866.77 691.988 L867.33 691.988 L867.889 691.988 L868.448 691.988 L869.007 691.988 L869.567 691.988 L870.126 691.988 L870.685 691.988 L871.244 691.988 L871.804 691.988 L872.363 691.988 L872.922 691.988 L873.481 691.988 L874.041 691.988 L874.6 691.988 L875.159 691.988 L875.718 691.988 L876.278 691.988 L876.837 691.988 L877.396 691.988 L877.955 691.988 L878.515 691.988 L879.074 691.988 L879.633 691.988 L880.192 691.988 L880.752 691.988 L881.311 691.988 L881.87 691.988 L882.429 691.988 L882.989 691.988 L883.548 691.988 L884.107 691.988 L884.666 691.988 L885.226 691.988 L885.785 691.988 L886.344 691.988 L886.903 691.988 L887.463 691.988 L888.022 691.988 L888.581 691.988 L889.14 691.988 L889.7 691.988 L890.259 691.988 L890.818 691.988 L891.377 691.988 L891.937 691.988 L892.496 691.988 L893.055 691.988 L893.614 691.988 L894.174 691.988 L894.733 691.988 L895.292 691.988 L895.851 691.988 L896.411 691.988 L896.97 691.988 L897.529 691.988 L898.088 691.988 L898.648 691.988 L899.207 691.988 L899.766 691.988 L900.325 691.988 L900.885 691.988 L901.444 691.988 L902.003 691.988 L902.562 691.988 L903.122 691.988 L903.681 691.988 L904.24 691.988 L904.799 691.988 L905.359 691.988 L905.918 691.988 L906.477 691.988 L907.036 691.988 L907.596 691.988 L908.155 691.988 L908.714 691.988 L909.273 691.988 L909.833 691.988 L910.392 691.988 L910.951 691.988 L911.51 691.988 L912.07 691.988 L912.629 691.988 L913.188 691.988 L913.747 691.988 L914.307 691.988 L914.866 691.988 L915.425 691.988 L915.984 691.988 L916.544 691.988 L917.103 691.988 L917.662 691.988 L918.221 691.988 L918.781 691.988 L919.34 691.988 L919.899 691.988 L920.458 691.988 L921.018 691.988 L921.577 691.988 L922.136 691.988 L922.695 691.988 L923.255 691.988 L923.814 691.988 L924.373 691.988 L924.932 691.988 L925.492 691.988 L926.051 691.988 L926.61 691.988 L927.169 691.988 L927.729 691.988 L928.288 691.988 L928.847 691.988 L929.406 691.988 L929.966 691.988 L930.525 691.988 L931.084 691.988 L931.644 691.988 L932.203 691.988 L932.762 691.988 L933.321 691.988 L933.881 691.988 L934.44 691.988 L934.999 691.988 L935.558 691.988 L936.118 691.988 L936.677 691.988 L937.236 691.988 L937.795 691.988 L938.355 691.988 L938.914 691.988 L939.473 691.988 L940.032 691.988 L940.592 691.988 L941.151 691.988 L941.71 691.988 L942.269 691.988 L942.829 691.988 L943.388 691.988 L943.947 691.988 L944.506 691.988 L945.066 691.988 L945.625 691.988 L946.184 691.988 L946.743 691.988 L947.303 691.988 L947.862 691.988 L948.421 691.988 L948.98 691.988 L949.54 691.988 L950.099 691.988 L950.658 691.988 L951.217 691.988 L951.777 691.988 L952.336 691.988 L952.895 691.988 L953.454 691.988 L954.014 691.988 L954.573 691.988 L955.132 691.988 L955.691 691.988 L956.251 691.988 L956.81 691.988 L957.369 691.988 L957.928 691.988 L958.488 691.988 L959.047 691.988 L959.606 691.988 L960.165 691.988 L960.725 691.988 L961.284 691.988 L961.843 691.988 L962.402 691.988 L962.962 691.988 L963.521 691.988 L964.08 691.988 L964.639 691.988 L965.199 691.988 L965.758 691.988 L966.317 691.988 L966.876 691.988 L967.436 691.988 L967.995 691.988 L968.554 691.988 L969.113 691.988 L969.673 691.988 L970.232 691.988 L970.791 691.988 L971.35 691.988 L971.91 691.988 L972.469 691.988 L973.028 691.988 L973.587 691.988 L974.147 691.988 L974.706 691.988 L975.265 691.988 L975.824 691.988 L976.384 691.988 L976.943 691.988 L977.502 691.988 L978.061 691.988 L978.621 691.988 L979.18 691.988 L979.739 691.988 L980.298 691.988 L980.858 691.988 L981.417 691.988 L981.976 691.988 L982.535 691.988 L983.095 691.988 L983.654 691.988 L984.213 691.988 L984.772 691.988 L985.332 691.988 L985.891 691.988 L986.45 691.988 L987.009 691.988 L987.569 691.988 L988.128 691.988 L988.687 691.988 L989.246 691.988 L989.806 691.988 L990.365 691.988 L990.924 691.988 L991.483 691.988 L992.043 691.988 L992.602 691.988 L993.161 691.988 L993.72 691.988 L994.28 691.988 L994.839 691.988 L995.398 691.988 L995.957 691.988 L996.517 691.988 L997.076 691.988 L997.635 691.988 L998.194 691.988 L998.754 691.988 L999.313 691.988 L999.872 691.988 L1000.43 691.988 L1000.99 691.988 L1001.55 691.988 L1002.11 691.988 L1002.67 691.988 L1003.23 691.988 L1003.79 691.988 L1004.35 691.988 L1004.91 691.988 L1005.46 691.988 L1006.02 691.988 L1006.58 691.988 L1007.14 691.988 L1007.7 691.988 L1008.26 691.988 L1008.82 691.988 L1009.38 691.988 L1009.94 691.988 L1010.5 691.988 L1011.06 691.988 L1011.62 691.988 L1012.18 691.988 L1012.73 691.988 L1013.29 691.988 L1013.85 691.988 L1014.41 691.988 L1014.97 691.988 L1015.53 691.988 L1016.09 691.988 L1016.65 691.988 L1017.21 691.988 L1017.77 691.988 L1018.33 691.988 L1018.89 691.988 L1019.45 691.988 L1020.01 691.988 L1020.56 691.988 L1021.12 691.988 L1021.68 691.988 L1022.24 691.988 L1022.8 691.988 L1023.36 691.988 L1023.92 691.988 L1024.48 691.988 L1025.04 691.988 L1025.6 691.988 L1026.16 691.988 L1026.72 691.988 L1027.28 691.988 L1027.83 691.988 L1028.39 691.988 L1028.95 691.988 L1029.51 691.988 L1030.07 691.988 L1030.63 691.988 L1031.19 691.988 L1031.75 691.988 L1032.31 691.988 L1032.87 691.988 L1033.43 691.988 L1033.99 691.988 L1034.55 691.988 L1035.1 691.988 L1035.66 691.988 L1036.22 691.988 L1036.78 691.988 L1037.34 691.988 L1037.9 691.988 L1038.46 691.988 L1039.02 691.988 L1039.58 691.988 L1040.14 691.988 L1040.7 691.988 L1041.26 691.988 L1041.82 691.988 L1042.38 691.988 L1042.93 691.988 L1043.49 691.988 L1044.05 691.988 L1044.61 691.988 L1045.17 691.988 L1045.73 691.988 L1046.29 691.988 L1046.85 691.988 L1047.41 691.988 L1047.97 691.988 L1048.53 691.988 L1049.09 691.988 L1049.65 691.988 L1050.2 691.988 L1050.76 691.988 L1051.32 691.988 L1051.88 691.988 L1052.44 691.988 L1053 691.988 L1053.56 691.988 L1054.12 691.988 L1054.68 691.988 L1055.24 691.988 L1055.8 691.988 L1056.36 691.988 L1056.92 691.988 L1057.48 691.988 L1058.03 691.988 L1058.59 691.988 L1059.15 691.988 L1059.71 691.988 L1060.27 691.988 L1060.83 691.988 L1061.39 691.988 L1061.95 691.988 L1062.51 691.988 L1063.07 691.988 L1063.63 691.988 L1064.19 691.988 L1064.75 691.988 L1065.3 691.988 L1065.86 691.988 L1066.42 691.988 L1066.98 691.988 L1067.54 691.988 L1068.1 691.988 L1068.66 691.988 L1069.22 691.988 L1069.78 691.988 L1070.34 691.988 L1070.9 691.988 L1071.46 691.988 L1072.02 691.988 L1072.57 691.988 L1073.13 691.988 L1073.69 691.988 L1074.25 691.988 L1074.81 691.988 L1075.37 691.988 L1075.93 691.988 L1076.49 691.988 L1077.05 691.988 L1077.61 691.988 L1078.17 691.988 L1078.73 691.988 L1079.29 691.988 L1079.85 691.988 L1080.4 691.988 L1080.96 691.988 L1081.52 691.988 L1082.08 691.988 L1082.64 691.988 L1083.2 691.988 L1083.76 691.988 L1084.32 691.988 L1084.88 691.988 L1085.44 691.988 L1086 691.988 L1086.56 691.988 L1087.12 691.988 L1087.67 691.988 L1088.23 691.988 L1088.79 691.988 L1089.35 691.988 L1089.91 691.988 L1090.47 691.988 L1091.03 691.988 L1091.59 691.988 L1092.15 691.988 L1092.71 691.988 L1093.27 691.988 L1093.83 691.988 L1094.39 691.988 L1094.94 691.988 L1095.5 691.988 L1096.06 691.988 L1096.62 691.988 L1097.18 691.988 L1097.74 691.988 L1098.3 691.988 L1098.86 691.988 L1099.42 691.988 L1099.98 691.988 L1100.54 691.988 L1101.1 691.988 L1101.66 691.988 L1102.22 691.988 L1102.77 691.988 L1103.33 691.988 L1103.89 691.988 L1104.45 691.988 L1105.01 691.988 L1105.57 691.988 L1106.13 691.988 L1106.69 691.988 L1107.25 691.988 L1107.81 691.988 L1108.37 691.988 L1108.93 691.988 L1109.49 691.988 L1110.04 691.988 L1110.6 691.988 L1111.16 691.988 L1111.72 691.988 L1112.28 691.988 L1112.84 691.988 L1113.4 691.988 L1113.96 691.988 L1114.52 691.988 L1115.08 691.988 L1115.64 691.988 L1116.2 691.988 L1116.76 691.988 L1117.31 691.988 L1117.87 691.988 L1118.43 691.988 L1118.99 691.988 L1119.55 691.988 L1120.11 691.988 L1120.67 691.988 L1121.23 691.988 L1121.79 691.988 L1122.35 691.988 L1122.91 691.988 L1123.47 691.988 L1124.03 691.988 L1124.59 691.988 L1125.14 691.988 L1125.7 691.988 L1126.26 691.988 L1126.82 691.988 L1127.38 691.988 L1127.94 691.988 L1128.5 691.988 L1129.06 691.988 L1129.62 691.988 L1130.18 691.988 L1130.74 691.988 L1131.3 691.988 L1131.86 691.988 L1132.41 691.988 L1132.97 691.988 L1133.53 691.988 L1134.09 691.988 L1134.65 691.988 L1135.21 691.988 L1135.77 691.988 L1136.33 691.988 L1136.89 691.988 L1137.45 691.988 L1138.01 691.988 L1138.57 691.988 L1139.13 691.988 L1139.68 691.988 L1140.24 691.988 L1140.8 691.988 L1141.36 691.988 L1141.92 691.988 L1142.48 691.988 L1143.04 691.988 L1143.6 691.988 L1144.16 691.988 L1144.72 691.988 L1145.28 691.988 L1145.84 691.988 L1146.4 691.988 L1146.96 691.988 L1147.51 691.988 L1148.07 691.988 L1148.63 691.988 L1149.19 691.988 L1149.75 691.988 L1150.31 691.988 L1150.87 691.988 L1151.43 691.988 L1151.99 691.988 L1152.55 691.988 L1153.11 691.988 L1153.67 691.988 L1154.23 691.988 L1154.78 691.988 L1155.34 691.988 L1155.9 691.988 L1156.46 691.988 L1157.02 691.988 L1157.58 691.988 L1158.14 691.988 L1158.7 691.988 L1159.26 691.988 L1159.82 691.988 L1160.38 691.988 L1160.94 691.988 L1161.5 691.988 L1162.05 691.988 L1162.61 691.988 L1163.17 691.988 L1163.73 691.988 L1164.29 691.988 L1164.85 691.988 L1165.41 691.988 L1165.97 691.988 L1166.53 691.988 L1167.09 691.988 L1167.65 691.988 L1168.21 691.988 L1168.77 691.988 L1169.33 691.988 L1169.88 691.988 L1170.44 691.988 L1171 691.988 L1171.56 691.988 L1172.12 691.988 L1172.68 691.988 L1173.24 691.988 L1173.8 691.988 L1174.36 691.988 L1174.92 691.988 L1175.48 691.988 L1176.04 691.988 L1176.6 691.988 L1177.15 691.988 L1177.71 691.988 L1178.27 691.988 L1178.83 691.988 L1179.39 691.988 L1179.95 691.988 L1180.51 691.988 L1181.07 691.988 L1181.63 691.988 L1182.19 691.988 L1182.75 691.988 L1183.31 691.988 L1183.87 691.988 L1184.43 691.988 L1184.98 691.988 L1185.54 691.988 L1186.1 691.988 L1186.66 691.988 L1187.22 691.988 L1187.78 691.988 L1188.34 691.988 L1188.9 691.988 L1189.46 691.988 L1190.02 691.988 L1190.58 691.988 L1191.14 691.988 L1191.7 691.988 L1192.25 691.988 L1192.81 691.988 L1193.37 691.988 L1193.93 691.988 L1194.49 691.988 L1195.05 691.988 L1195.61 691.988 L1196.17 691.988 L1196.73 691.988 L1197.29 691.988 L1197.85 691.988 L1198.41 691.988 L1198.97 691.988 L1199.52 691.988 L1200.08 691.988 L1200.64 691.988 L1201.2 691.988 L1201.76 691.988 L1202.32 691.988 L1202.88 691.988 L1203.44 691.988 L1204 691.988 L1204.56 691.988 L1205.12 691.988 L1205.68 691.988 L1206.24 691.988 L1206.8 691.988 L1207.35 691.988 L1207.91 691.988 L1208.47 691.988 L1209.03 691.988 L1209.59 691.988 L1210.15 691.988 L1210.71 691.988 L1211.27 691.988 L1211.83 691.988 L1212.39 691.988 L1212.95 691.988 L1213.51 691.988 L1214.07 691.988 L1214.62 691.988 L1215.18 691.988 L1215.74 691.988 L1216.3 691.988 L1216.86 691.988 L1217.42 691.988 L1217.98 691.988 L1218.54 691.988 L1219.1 691.988 L1219.66 691.988 L1220.22 691.988 L1220.78 691.988 L1221.34 691.988 L1221.89 691.988 L1222.45 691.988 L1223.01 691.988 L1223.57 691.988 L1224.13 691.988 L1224.69 691.988 L1225.25 691.988 L1225.81 691.988 L1226.37 691.988 L1226.93 691.988 L1227.49 691.988 L1228.05 691.988 L1228.61 691.988 L1229.17 691.988 L1229.72 691.988 L1230.28 691.988 L1230.84 691.988 L1231.4 691.988 L1231.96 691.988 L1232.52 691.988 L1233.08 691.988 L1233.64 691.988 L1234.2 691.988 L1234.76 691.988 L1235.32 691.988 L1235.88 691.988 L1236.44 691.988 L1236.99 691.988 L1237.55 691.988 L1238.11 691.988 L1238.67 691.988 L1239.23 691.988 L1239.79 691.988 L1240.35 691.988 L1240.91 691.988 L1241.47 691.988 L1242.03 691.988 L1242.59 691.988 L1243.15 691.988 L1243.71 691.988 L1244.26 691.988 L1244.82 691.988 L1245.38 691.988 L1245.94 691.988 L1246.5 691.988 L1247.06 691.988 L1247.62 691.988 L1248.18 691.988 L1248.74 691.988 L1249.3 691.988 L1249.86 691.988 L1250.42 691.988 L1250.98 691.988 L1251.54 691.988 L1252.09 691.988 L1252.65 691.988 L1253.21 691.988 L1253.77 691.988 L1254.33 691.988 L1254.89 691.988 L1255.45 691.988 L1256.01 691.988 L1256.57 691.988 L1257.13 691.988 L1257.69 691.988 L1258.25 691.988 L1258.81 691.988 L1259.36 691.988 L1259.92 691.988 L1260.48 691.988 L1261.04 691.988 L1261.6 691.988 L1262.16 691.988 L1262.72 691.988 L1263.28 691.988 L1263.84 691.988 L1264.4 691.988 L1264.96 691.988 L1265.52 691.988 L1266.08 691.988 L1266.63 691.988 L1267.19 691.988 L1267.75 691.988 L1268.31 691.988 L1268.87 691.988 L1269.43 691.988 L1269.99 691.988 L1270.55 691.988 L1271.11 691.988 L1271.67 691.988 L1272.23 691.988 L1272.79 691.988 L1273.35 691.988 L1273.91 691.988 L1274.46 691.988 L1275.02 691.988 L1275.58 691.988 L1276.14 691.988 L1276.7 691.988 L1277.26 691.988 L1277.82 691.988 L1278.38 691.988 L1278.94 691.988 L1279.5 691.988 L1280.06 691.988 L1280.62 691.988 L1281.18 691.988 L1281.73 691.988 L1282.29 691.988 L1282.85 691.988 L1283.41 691.988 L1283.97 691.988 L1284.53 691.988 L1285.09 691.988 L1285.65 691.988 L1286.21 691.988 L1286.77 691.988 L1287.33 691.988 L1287.89 691.988 L1288.45 691.988 L1289 691.988 L1289.56 691.988 L1290.12 691.988 L1290.68 691.988 L1291.24 691.988 L1291.8 691.988 L1292.36 691.988 L1292.92 691.988 L1293.48 691.988 L1294.04 691.988 L1294.6 691.988 L1295.16 691.988 L1295.72 691.988 L1296.28 691.988 L1296.83 691.988 L1297.39 691.988 L1297.95 691.988 L1298.51 691.988 L1299.07 691.988 L1299.63 691.988 L1300.19 691.988 L1300.75 691.988 L1301.31 691.988 L1301.87 691.988 L1302.43 691.988 L1302.99 691.988 L1303.55 691.988 L1304.1 691.988 L1304.66 691.988 L1305.22 691.988 L1305.78 691.988 L1306.34 691.988 L1306.9 691.988 L1307.46 691.988 L1308.02 691.988 L1308.58 691.988 L1309.14 691.988 L1309.7 691.988 L1310.26 691.988 L1310.82 691.988 L1311.38 691.988 L1311.93 691.988 L1312.49 691.988 L1313.05 691.988 L1313.61 691.988 L1314.17 691.988 L1314.73 691.988 L1315.29 691.988 L1315.85 691.988 L1316.41 691.988 L1316.97 691.988 L1317.53 691.988 L1318.09 691.988 L1318.65 691.988 L1319.2 691.988 L1319.76 691.988 L1320.32 691.988 L1320.88 691.988 L1321.44 691.988 L1322 691.988 L1322.56 691.988 L1323.12 691.988 L1323.68 691.988 L1324.24 691.988 L1324.8 691.988 L1325.36 691.988 L1325.92 691.988 L1326.47 691.988 L1327.03 691.988 L1327.59 691.988 L1328.15 691.988 L1328.71 691.988 L1329.27 691.988 L1329.83 691.988 L1330.39 691.988 L1330.95 691.988 L1331.51 691.988 L1332.07 691.988 L1332.63 691.988 L1333.19 691.988 L1333.75 691.988 L1334.3 691.988 L1334.86 691.988 L1335.42 691.988 L1335.98 691.988 L1336.54 691.988 L1337.1 691.988 L1337.66 691.988 L1338.22 691.988 L1338.78 691.988 L1339.34 691.988 L1339.9 691.988 L1340.46 691.988 L1341.02 691.988 L1341.57 691.988 L1342.13 691.988 L1342.69 691.988 L1343.25 691.988 L1343.81 691.988 L1344.37 691.988 L1344.93 691.988 L1345.49 691.988 L1346.05 691.988 L1346.61 691.988 L1347.17 691.988 L1347.73 691.988 L1348.29 691.988 L1348.84 691.988 L1349.4 691.988 L1349.96 691.988 L1350.52 691.988 L1351.08 691.988 L1351.64 691.988 L1352.2 691.988 L1352.76 691.988 L1353.32 691.988 L1353.88 691.988 L1354.44 691.988 L1355 691.988 L1355.56 691.988 L1356.12 691.988 L1356.67 691.988 L1357.23 691.988 L1357.79 691.988 L1358.35 691.988 L1358.91 691.988 L1359.47 691.988 L1360.03 691.988 L1360.59 691.988 L1361.15 691.988 L1361.71 691.988 L1362.27 691.988 L1362.83 691.988 L1363.39 691.988 L1363.94 691.988 L1364.5 691.988 L1365.06 691.988 L1365.62 691.988 L1366.18 691.988 L1366.74 691.988 L1367.3 691.988 L1367.86 691.988 L1368.42 691.988 L1368.98 691.988 L1369.54 691.988 L1370.1 691.988 L1370.66 691.988 L1371.21 691.988 L1371.77 691.988 L1372.33 691.988 L1372.89 691.988 L1373.45 691.988 L1374.01 691.988 L1374.57 691.988 L1375.13 691.988 L1375.69 691.988 L1376.25 691.988 L1376.81 691.988 L1377.37 691.988 L1377.93 691.988 L1378.49 691.988 L1379.04 691.988 L1379.6 691.988 L1380.16 691.988 L1380.72 691.988 L1381.28 691.988 L1381.84 691.988 L1382.4 691.988 L1382.96 691.988 L1383.52 691.988 L1384.08 691.988 L1384.64 691.988 L1385.2 691.988 L1385.76 691.988 L1386.31 691.988 L1386.87 691.988 L1387.43 691.988 L1387.99 691.988 L1388.55 691.988 L1389.11 691.988 L1389.67 691.988 L1390.23 691.988 L1390.79 691.988 L1391.35 691.988 L1391.91 691.988 L1392.47 691.988 L1393.03 691.988 L1393.58 691.988 L1394.14 691.988 L1394.7 691.988 L1395.26 691.988 L1395.82 691.988 L1396.38 691.988 L1396.94 691.988 L1397.5 691.988 L1398.06 691.988 L1398.62 691.988 L1399.18 691.988 L1399.74 691.988 L1400.3 691.988 L1400.86 691.988 L1401.41 691.988 L1401.97 691.988 L1402.53 691.988 L1403.09 691.988 L1403.65 691.988 L1404.21 691.988 L1404.77 691.988 L1405.33 691.988 L1405.89 691.988 L1406.45 691.988 L1407.01 691.988 L1407.57 691.988 L1408.13 691.988 L1408.68 691.988 L1409.24 691.988 L1409.8 691.988 L1410.36 691.988 L1410.92 691.988 L1411.48 691.988 L1412.04 691.988 L1412.6 691.988 L1413.16 691.988 L1413.72 691.988 L1414.28 691.988 L1414.84 691.988 L1415.4 691.988 L1415.95 691.988 L1416.51 691.988 L1417.07 691.988 L1417.63 691.988 L1418.19 691.988 L1418.75 691.988 L1419.31 691.988 L1419.87 691.988 L1420.43 691.988 L1420.99 691.988 L1421.55 691.988 L1422.11 691.988 L1422.67 691.988 L1423.23 691.988 L1423.78 691.988 L1424.34 691.988 L1424.9 691.988 L1425.46 691.988 L1426.02 691.988 L1426.58 691.988 L1427.14 691.988 L1427.7 691.988 L1428.26 691.988 L1428.82 691.988 L1429.38 691.988 L1429.94 691.988 L1430.5 691.988 L1431.05 691.988 L1431.61 691.988 L1432.17 691.988 L1432.73 691.988 L1433.29 691.988 L1433.85 691.988 L1434.41 691.988 L1434.97 691.988 L1435.53 691.988 L1436.09 691.988 L1436.65 691.988 L1437.21 691.988 L1437.77 691.988 L1438.33 691.988 L1438.88 691.988 L1439.44 691.988 L1440 691.988 L1440.56 691.988 L1441.12 691.988 L1441.68 691.988 L1442.24 691.988 L1442.8 691.988 L1443.36 691.988 L1443.92 691.988 L1444.48 691.988 L1445.04 691.988 L1445.6 691.988 L1446.15 691.988 L1446.71 691.988 L1447.27 691.988 L1447.83 691.988 L1448.39 691.988 L1448.95 691.988 L1449.51 691.988 L1450.07 691.988 L1450.63 691.988 L1451.19 691.988 L1451.75 691.988 L1452.31 691.988 L1452.87 691.988 L1453.42 691.988 L1453.98 691.988 L1454.54 691.988 L1455.1 691.988 L1455.66 691.988 L1456.22 691.988 L1456.78 691.988 L1457.34 691.988 L1457.9 691.988 L1458.46 691.988 L1459.02 691.988 L1459.58 691.988 L1460.14 691.988 L1460.7 691.988 L1461.25 691.988 L1461.81 691.988 L1462.37 691.988 L1462.93 691.988 L1463.49 691.988 L1464.05 691.988 L1464.61 691.988 L1465.17 691.988 L1465.73 691.988 L1466.29 691.988 L1466.85 691.988 L1467.41 691.988 L1467.97 691.988 L1468.52 691.988 L1469.08 691.988 L1469.64 691.988 L1470.2 691.988 L1470.76 691.988 L1471.32 691.988 L1471.88 691.988 L1472.44 691.988 L1473 691.988 L1473.56 691.988 L1474.12 691.988 L1474.68 691.988 L1475.24 691.988 L1475.79 691.988 L1476.35 691.988 L1476.91 691.988 L1477.47 691.988 L1478.03 691.988 L1478.59 691.988 L1479.15 691.988 L1479.71 691.988 L1480.27 691.988 L1480.83 691.988 L1481.39 691.988 L1481.95 691.988 L1482.51 691.988 L1483.07 691.988 L1483.62 691.988 L1484.18 691.988 L1484.74 691.988 L1485.3 691.988 L1485.86 691.988 L1486.42 691.988 L1486.98 691.988 L1487.54 691.988 L1488.1 691.988 L1488.66 691.988 L1489.22 691.988 L1489.78 691.988 L1490.34 691.988 L1490.89 691.988 L1491.45 691.988 L1492.01 691.988 L1492.57 691.988 L1493.13 691.988 L1493.69 691.988 L1494.25 691.988 L1494.81 691.988 L1495.37 691.988 L1495.93 691.988 L1496.49 691.988 L1497.05 691.988 L1497.61 691.988 L1498.16 691.988 L1498.72 691.988 L1499.28 691.988 L1499.84 691.988 L1500.4 691.988 L1500.96 691.988 L1501.52 691.988 L1502.08 691.988 L1502.64 691.988 L1503.2 691.988 L1503.76 691.988 L1504.32 691.988 L1504.88 691.988 L1505.44 691.988 L1505.99 691.988 L1506.55 691.988 L1507.11 691.988 L1507.67 691.988 L1508.23 691.988 L1508.79 691.988 L1509.35 691.988 L1509.91 691.988 L1510.47 691.988 L1511.03 691.988 L1511.59 691.988 L1512.15 691.988 L1512.71 691.988 L1513.26 691.988 L1513.82 691.988 L1514.38 691.988 L1514.94 691.988 L1515.5 691.988 L1516.06 691.988 L1516.62 691.988 L1517.18 691.988 L1517.74 691.988 L1518.3 691.988 L1518.86 691.988 L1519.42 691.988 L1519.98 691.988 L1520.53 691.988 L1521.09 691.988 L1521.65 691.988 L1522.21 691.988 L1522.77 691.988 L1523.33 691.988 L1523.89 691.988 L1524.45 691.988 L1525.01 691.988 L1525.57 691.988 L1526.13 691.988 L1526.69 691.988 L1527.25 691.988 L1527.81 691.988 L1528.36 691.988 L1528.92 691.988 L1529.48 691.988 L1530.04 691.988 L1530.6 691.988 L1531.16 691.988 L1531.72 691.988 L1532.28 691.988 L1532.84 691.988 L1533.4 691.988 L1533.96 691.988 L1534.52 691.988 L1535.08 691.988 L1535.63 691.988 L1536.19 691.988 L1536.75 691.988 L1537.31 691.988 L1537.87 691.988 L1538.43 691.988 L1538.99 691.988 L1539.55 691.988 L1540.11 691.988 L1540.67 691.988 L1541.23 691.988 L1541.79 691.988 L1542.35 691.988 L1542.9 691.988 L1543.46 691.988 L1544.02 691.988 L1544.58 691.988 L1545.14 691.988 L1545.7 691.988 L1546.26 691.988 L1546.82 691.988 L1547.38 691.988 L1547.94 691.988 L1548.5 691.988 L1549.06 691.988 L1549.62 691.988 L1550.18 691.988 L1550.73 691.988 L1551.29 691.988 L1551.85 691.988 L1552.41 691.988 L1552.97 691.988 L1553.53 691.988 L1554.09 691.988 L1554.65 691.988 L1555.21 691.988 L1555.77 691.988 L1556.33 691.988 L1556.89 691.988 L1557.45 691.988 L1558 691.988 L1558.56 691.988 L1559.12 691.988 L1559.68 691.988 L1560.24 691.988 L1560.8 691.988 L1561.36 691.988 L1561.92 691.988 L1562.48 691.988 L1563.04 691.988 L1563.6 691.988 L1564.16 691.988 L1564.72 691.988 L1565.28 691.988 L1565.83 691.988 L1566.39 691.988 L1566.95 691.988 L1567.51 691.988 L1568.07 691.988 L1568.63 691.988 L1569.19 691.988 L1569.75 691.988 L1570.31 691.988 L1570.87 691.988 L1571.43 691.988 L1571.99 691.988 L1572.55 691.988 L1573.1 691.988 L1573.66 691.988 L1574.22 691.988 L1574.78 691.988 L1575.34 691.988 L1575.9 691.988 L1576.46 691.988 L1577.02 691.988 L1577.58 691.988 L1578.14 691.988 L1578.7 691.988 L1579.26 691.988 L1579.82 691.988 L1580.37 691.988 L1580.93 691.988 L1581.49 691.988 L1582.05 691.988 L1582.61 691.988 L1583.17 691.988 L1583.73 691.988 L1584.29 691.988 L1584.85 691.988 L1585.41 691.988 L1585.97 691.988 L1586.53 691.988 L1587.09 691.988 L1587.65 691.988 L1588.2 691.988 L1588.76 691.988 L1589.32 691.988 L1589.88 691.988 L1590.44 691.988 L1591 691.988 L1591.56 691.988 L1592.12 691.988 L1592.68 691.988 L1593.24 691.988 L1593.8 691.988 L1594.36 691.988 L1594.92 691.988 L1595.47 691.988 L1596.03 691.988 L1596.59 691.988 L1597.15 691.988 L1597.71 691.988 L1598.27 691.988 L1598.83 691.988 L1599.39 691.988 L1599.95 691.988 L1600.51 691.988 L1601.07 691.988 L1601.63 691.988 L1602.19 691.988 L1602.74 691.988 L1603.3 691.988 L1603.86 691.988 L1604.42 691.988 L1604.98 691.988 L1605.54 691.988 L1606.1 691.988 L1606.66 691.988 L1607.22 691.988 L1607.78 691.988 L1608.34 691.988 L1608.9 691.988 L1609.46 691.988 L1610.02 691.988 L1610.57 691.988 L1611.13 691.988 L1611.69 691.988 L1612.25 691.988 L1612.81 691.988 L1613.37 691.988 L1613.93 691.988 L1614.49 691.988 L1615.05 691.988 L1615.61 691.988 L1616.17 691.988 L1616.73 691.988 L1617.29 691.988 L1617.84 691.988 L1618.4 691.988 L1618.96 691.988 L1619.52 691.988 L1620.08 691.988 L1620.64 691.988 L1621.2 691.988 L1621.76 691.988 L1622.32 691.988 L1622.88 691.988 L1623.44 691.988 L1624 691.988 L1624.56 691.988 L1625.11 691.988 L1625.67 691.988 L1626.23 691.988 L1626.79 691.988 L1627.35 691.988 L1627.91 691.988 L1628.47 691.988 L1629.03 691.988 L1629.59 691.988 L1630.15 691.988 L1630.71 691.988 L1631.27 691.988 L1631.83 691.988 L1632.39 691.988 L1632.94 691.988 L1633.5 691.988 L1634.06 691.988 L1634.62 691.988 L1635.18 691.988 L1635.74 691.988 L1636.3 691.988 L1636.86 691.988 L1637.42 691.988 L1637.98 691.988 L1638.54 691.988 L1639.1 691.988 L1639.66 691.988 L1640.21 691.988 L1640.77 691.988 L1641.33 691.988 L1641.89 691.988 L1642.45 691.988 L1643.01 691.988 L1643.57 691.988 L1644.13 691.988 L1644.69 691.988 L1645.25 691.988 L1645.81 691.988 L1646.37 691.988 L1646.93 691.988 L1647.48 691.988 L1648.04 691.988 L1648.6 691.988 L1649.16 691.988 L1649.72 691.988 L1650.28 691.988 L1650.84 691.988 L1651.4 691.988 L1651.96 691.988 L1652.52 691.988 L1653.08 691.988 L1653.64 691.988 L1654.2 691.988 L1654.76 691.988 L1655.31 691.988 L1655.87 691.988 L1656.43 691.988 L1656.99 691.988 L1657.55 691.988 L1658.11 691.988 L1658.67 691.988 L1659.23 691.988 L1659.79 691.988 L1660.35 691.988 L1660.91 691.988 L1661.47 691.988 L1662.03 691.988 L1662.58 691.988 L1663.14 691.988 L1663.7 691.988 L1664.26 691.988 L1664.82 691.988 L1665.38 691.988 L1665.94 691.988 L1666.5 691.988 L1667.06 691.988 L1667.62 691.988 L1668.18 691.988 L1668.74 691.988 L1669.3 691.988 L1669.85 691.988 L1670.41 691.988 L1670.97 691.988 L1671.53 691.988 L1672.09 691.988 L1672.65 691.988 L1673.21 691.988 L1673.77 691.988 L1674.33 691.988 L1674.89 691.988 L1675.45 691.988 L1676.01 691.988 L1676.57 691.988 L1677.13 691.988 L1677.68 691.988 L1678.24 691.988 L1678.8 691.988 L1679.36 691.988 L1679.92 691.988 L1680.48 691.988 L1681.04 691.988 L1681.6 691.988 L1682.16 691.988 L1682.72 691.988 L1683.28 691.988 L1683.84 691.988 L1684.4 691.988 L1684.95 691.988 L1685.51 691.988 L1686.07 691.988 L1686.63 691.988 L1687.19 691.988 L1687.75 691.988 L1688.31 691.988 L1688.87 691.988 L1689.43 691.988 L1689.99 691.988 L1690.55 691.988 L1691.11 691.988 L1691.67 691.988 L1692.23 691.988 L1692.78 691.988 L1693.34 691.988 L1693.9 691.988 L1694.46 691.988 L1695.02 691.988 L1695.58 691.988 L1696.14 691.988 L1696.7 691.988 L1697.26 691.988 L1697.82 691.988 L1698.38 691.988 L1698.94 691.988 L1699.5 691.988 L1700.05 691.988 L1700.61 691.988 L1701.17 691.988 L1701.73 691.988 L1702.29 691.988 L1702.85 691.988 L1703.41 691.988 L1703.97 691.988 L1704.53 691.988 L1705.09 691.988 L1705.65 691.988 L1706.21 691.988 L1706.77 691.988 L1707.32 691.988 L1707.88 691.988 L1708.44 691.988 L1709 691.988 L1709.56 691.988 L1710.12 691.988 L1710.68 691.988 L1711.24 691.988 L1711.8 691.988 L1712.36 691.988 L1712.92 691.988 L1713.48 691.988 L1714.04 691.988 L1714.6 691.988 L1715.15 691.988 L1715.71 691.988 L1716.27 691.988 L1716.83 691.988 L1717.39 691.988 L1717.95 691.988 L1718.51 691.988 L1719.07 691.988 L1719.63 691.988 L1720.19 691.988 L1720.75 691.988 L1721.31 691.988 L1721.87 691.988 L1722.42 691.988 L1722.98 691.988 L1723.54 691.988 L1724.1 691.988 L1724.66 691.988 L1725.22 691.988 L1725.78 691.988 L1726.34 691.988 L1726.9 691.988 L1727.46 691.988 L1728.02 691.988 L1728.58 691.988 L1729.14 691.988 L1729.69 691.988 L1730.25 691.988 L1730.81 691.988 L1731.37 691.988 L1731.93 691.988 L1732.49 691.988 L1733.05 691.988 L1733.61 691.988 L1734.17 691.988 L1734.73 691.988 L1735.29 691.988 L1735.85 691.988 L1736.41 691.988 L1736.97 691.988 L1737.52 691.988 L1738.08 691.988 L1738.64 691.988 L1739.2 691.988 L1739.76 691.988 L1740.32 691.988 L1740.88 691.988 L1741.44 691.988 L1742 691.988 L1742.56 691.988 L1743.12 691.988 L1743.68 691.988 L1744.24 691.988 L1744.79 691.988 L1745.35 691.988 L1745.91 691.988 L1746.47 691.988 L1747.03 691.988 L1747.59 691.988 L1748.15 691.988 L1748.71 691.988 L1749.27 691.988 L1749.83 691.988 L1750.39 691.988 L1750.95 691.988 L1751.51 691.988 L1752.06 691.988 L1752.62 691.988 L1753.18 691.988 L1753.74 691.988 L1754.3 691.988 L1754.86 691.988 L1755.42 691.988 L1755.98 691.988 L1756.54 691.988 L1757.1 691.988 L1757.66 691.988 L1758.22 691.988 L1758.78 691.988 L1759.34 691.988 L1759.89 691.988 L1760.45 691.988 L1761.01 691.988 L1761.57 691.988 L1762.13 691.988 L1762.69 691.988 L1763.25 691.988 L1763.81 691.988 L1764.37 691.988 L1764.93 691.988 L1765.49 691.988 L1766.05 691.988 L1766.61 691.988 L1767.16 691.988 L1767.72 691.988 L1768.28 691.988 L1768.84 691.988 L1769.4 691.988 L1769.96 691.988 L1770.52 691.988 L1771.08 691.988 L1771.64 691.988 L1772.2 691.988 L1772.76 691.988 L1773.32 691.988 L1773.88 691.988 L1774.43 691.988 L1774.99 691.988 L1775.55 691.988 L1776.11 691.988 L1776.67 691.988 L1777.23 691.988 L1777.79 691.988 L1778.35 691.988 L1778.91 691.988 L1779.47 691.988 L1780.03 691.988 L1780.59 691.988 L1781.15 691.988 L1781.71 691.988 L1782.26 691.988 L1782.82 691.988 L1783.38 691.988 L1783.94 691.988 L1784.5 691.988 L1785.06 691.988 L1785.62 691.988 L1786.18 691.988 L1786.74 691.988 L1787.3 691.988 L1787.86 691.988 L1788.42 691.988 L1788.98 691.988 L1789.53 691.988 L1790.09 691.988 L1790.65 691.988 L1791.21 691.988 L1791.77 691.988 L1792.33 691.988 L1792.89 691.988 L1793.45 691.988 L1794.01 691.988 L1794.57 691.988 L1795.13 691.988 L1795.69 691.988 L1796.25 691.988 L1796.8 691.988 L1797.36 691.988 L1797.92 691.988 L1798.48 691.988 L1799.04 691.988 L1799.6 691.988 L1800.16 691.988 L1800.72 691.988 L1801.28 691.988 L1801.84 691.988 L1802.4 691.988 L1802.96 691.988 L1803.52 691.988 L1804.08 691.988 L1804.63 691.988 L1805.19 691.988 L1805.75 691.988 L1806.31 691.988 L1806.87 691.988 L1807.43 691.988 L1807.99 691.988 L1808.55 691.988 L1809.11 691.988 L1809.67 691.988 L1810.23 691.988 L1810.79 691.988 L1811.35 691.988 L1811.9 691.988 L1812.46 691.988 L1813.02 691.988 L1813.58 691.988 L1814.14 691.988 L1814.7 691.988 L1815.26 691.988 L1815.82 691.988 L1816.38 691.988 L1816.94 691.988 L1817.5 691.988 L1818.06 691.988 L1818.62 691.988 L1819.18 691.988 L1819.73 691.988 L1820.29 691.988 L1820.85 691.988 L1821.41 691.988 L1821.97 691.988 L1822.53 691.988 L1823.09 691.988 L1823.65 691.988 L1824.21 691.988 L1824.77 691.988 L1825.33 691.988 L1825.89 691.988 L1826.45 691.988 L1827 691.988 L1827.56 691.988 L1828.12 691.988 L1828.68 691.988 L1829.24 691.988 L1829.8 691.988 L1830.36 691.988 L1830.92 691.988 L1831.48 691.988 L1832.04 691.988 L1832.6 691.988 L1833.16 691.988 L1833.72 691.988 L1834.27 691.988 L1834.83 691.988 L1835.39 691.988 L1835.95 691.988 L1836.51 691.988 L1837.07 691.988 L1837.63 691.988 L1838.19 691.988 L1838.19 682.973 L1837.63 682.973 L1837.07 682.973 L1836.51 682.973 L1835.95 682.973 L1835.39 682.973 L1834.83 682.973 L1834.27 682.973 L1833.72 682.973 L1833.16 682.973 L1832.6 682.973 L1832.04 682.973 L1831.48 682.973 L1830.92 682.973 L1830.36 682.973 L1829.8 682.973 L1829.24 682.973 L1828.68 682.973 L1828.12 682.973 L1827.56 682.973 L1827 682.973 L1826.45 682.973 L1825.89 682.973 L1825.33 682.973 L1824.77 682.973 L1824.21 682.973 L1823.65 682.973 L1823.09 682.973 L1822.53 682.973 L1821.97 682.973 L1821.41 682.973 L1820.85 682.973 L1820.29 682.973 L1819.73 682.973 L1819.18 682.973 L1818.62 682.973 L1818.06 682.973 L1817.5 682.973 L1816.94 682.973 L1816.38 682.973 L1815.82 682.973 L1815.26 682.973 L1814.7 682.973 L1814.14 682.973 L1813.58 682.973 L1813.02 682.973 L1812.46 682.973 L1811.9 682.973 L1811.35 682.973 L1810.79 682.973 L1810.23 682.973 L1809.67 682.973 L1809.11 682.973 L1808.55 682.973 L1807.99 682.973 L1807.43 682.973 L1806.87 682.973 L1806.31 682.973 L1805.75 682.973 L1805.19 682.973 L1804.63 682.973 L1804.08 682.973 L1803.52 682.973 L1802.96 682.973 L1802.4 682.973 L1801.84 682.973 L1801.28 682.973 L1800.72 682.973 L1800.16 682.973 L1799.6 682.973 L1799.04 682.973 L1798.48 682.973 L1797.92 682.973 L1797.36 682.973 L1796.8 682.973 L1796.25 682.973 L1795.69 682.973 L1795.13 682.973 L1794.57 682.973 L1794.01 682.973 L1793.45 682.973 L1792.89 682.973 L1792.33 682.973 L1791.77 682.973 L1791.21 682.973 L1790.65 682.973 L1790.09 682.973 L1789.53 682.973 L1788.98 682.973 L1788.42 682.973 L1787.86 682.973 L1787.3 682.973 L1786.74 682.973 L1786.18 682.973 L1785.62 682.973 L1785.06 682.973 L1784.5 682.973 L1783.94 682.973 L1783.38 682.973 L1782.82 682.973 L1782.26 682.973 L1781.71 682.973 L1781.15 682.973 L1780.59 682.973 L1780.03 682.973 L1779.47 682.973 L1778.91 682.973 L1778.35 682.973 L1777.79 682.973 L1777.23 682.973 L1776.67 682.973 L1776.11 682.973 L1775.55 682.973 L1774.99 682.973 L1774.43 682.973 L1773.88 682.973 L1773.32 682.973 L1772.76 682.973 L1772.2 682.973 L1771.64 682.973 L1771.08 682.973 L1770.52 682.973 L1769.96 682.973 L1769.4 682.973 L1768.84 682.973 L1768.28 682.973 L1767.72 682.973 L1767.16 682.973 L1766.61 682.973 L1766.05 682.973 L1765.49 682.973 L1764.93 682.973 L1764.37 682.973 L1763.81 682.973 L1763.25 682.973 L1762.69 682.973 L1762.13 682.973 L1761.57 682.973 L1761.01 682.973 L1760.45 682.973 L1759.89 682.973 L1759.34 682.973 L1758.78 682.973 L1758.22 682.973 L1757.66 682.973 L1757.1 682.973 L1756.54 682.973 L1755.98 682.973 L1755.42 682.973 L1754.86 682.973 L1754.3 682.973 L1753.74 682.973 L1753.18 682.973 L1752.62 682.973 L1752.06 682.973 L1751.51 682.973 L1750.95 682.973 L1750.39 682.973 L1749.83 682.973 L1749.27 682.973 L1748.71 682.973 L1748.15 682.973 L1747.59 682.973 L1747.03 682.973 L1746.47 682.973 L1745.91 682.973 L1745.35 682.973 L1744.79 682.973 L1744.24 682.973 L1743.68 682.973 L1743.12 682.973 L1742.56 682.973 L1742 682.973 L1741.44 682.973 L1740.88 682.973 L1740.32 682.973 L1739.76 682.973 L1739.2 682.973 L1738.64 682.973 L1738.08 682.973 L1737.52 682.973 L1736.97 682.973 L1736.41 682.973 L1735.85 682.973 L1735.29 682.973 L1734.73 682.973 L1734.17 682.973 L1733.61 682.973 L1733.05 682.973 L1732.49 682.973 L1731.93 682.973 L1731.37 682.973 L1730.81 682.973 L1730.25 682.973 L1729.69 682.973 L1729.14 682.973 L1728.58 682.973 L1728.02 682.973 L1727.46 682.973 L1726.9 682.973 L1726.34 682.973 L1725.78 682.973 L1725.22 682.973 L1724.66 682.973 L1724.1 682.973 L1723.54 682.973 L1722.98 682.973 L1722.42 682.973 L1721.87 682.973 L1721.31 682.973 L1720.75 682.973 L1720.19 682.973 L1719.63 682.973 L1719.07 682.973 L1718.51 682.973 L1717.95 682.973 L1717.39 682.973 L1716.83 682.973 L1716.27 682.973 L1715.71 682.973 L1715.15 682.973 L1714.6 682.973 L1714.04 682.973 L1713.48 682.973 L1712.92 682.973 L1712.36 682.973 L1711.8 682.973 L1711.24 682.973 L1710.68 682.973 L1710.12 682.973 L1709.56 682.973 L1709 682.973 L1708.44 682.973 L1707.88 682.973 L1707.32 682.973 L1706.77 682.973 L1706.21 682.973 L1705.65 682.973 L1705.09 682.973 L1704.53 682.973 L1703.97 682.973 L1703.41 682.973 L1702.85 682.973 L1702.29 682.973 L1701.73 682.973 L1701.17 682.973 L1700.61 682.973 L1700.05 682.973 L1699.5 682.973 L1698.94 682.973 L1698.38 682.973 L1697.82 682.973 L1697.26 682.973 L1696.7 682.973 L1696.14 682.973 L1695.58 682.973 L1695.02 682.973 L1694.46 682.973 L1693.9 682.973 L1693.34 682.973 L1692.78 682.973 L1692.23 682.973 L1691.67 682.973 L1691.11 682.973 L1690.55 682.973 L1689.99 682.973 L1689.43 682.973 L1688.87 682.973 L1688.31 682.973 L1687.75 682.973 L1687.19 682.973 L1686.63 682.973 L1686.07 682.973 L1685.51 682.973 L1684.95 682.973 L1684.4 682.973 L1683.84 682.973 L1683.28 682.973 L1682.72 682.973 L1682.16 682.973 L1681.6 682.973 L1681.04 682.973 L1680.48 682.973 L1679.92 682.973 L1679.36 682.973 L1678.8 682.973 L1678.24 682.973 L1677.68 682.973 L1677.13 682.973 L1676.57 682.973 L1676.01 682.973 L1675.45 682.973 L1674.89 682.973 L1674.33 682.973 L1673.77 682.973 L1673.21 682.973 L1672.65 682.973 L1672.09 682.973 L1671.53 682.973 L1670.97 682.973 L1670.41 682.973 L1669.85 682.973 L1669.3 682.973 L1668.74 682.973 L1668.18 682.973 L1667.62 682.973 L1667.06 682.973 L1666.5 682.973 L1665.94 682.973 L1665.38 682.973 L1664.82 682.973 L1664.26 682.973 L1663.7 682.973 L1663.14 682.973 L1662.58 682.973 L1662.03 682.973 L1661.47 682.973 L1660.91 682.973 L1660.35 682.973 L1659.79 682.973 L1659.23 682.973 L1658.67 682.973 L1658.11 682.973 L1657.55 682.973 L1656.99 682.973 L1656.43 682.973 L1655.87 682.973 L1655.31 682.973 L1654.76 682.973 L1654.2 682.973 L1653.64 682.973 L1653.08 682.973 L1652.52 682.973 L1651.96 682.973 L1651.4 682.973 L1650.84 682.973 L1650.28 682.973 L1649.72 682.973 L1649.16 682.973 L1648.6 682.973 L1648.04 682.973 L1647.48 682.973 L1646.93 682.973 L1646.37 682.973 L1645.81 682.973 L1645.25 682.973 L1644.69 682.973 L1644.13 682.973 L1643.57 682.973 L1643.01 682.973 L1642.45 682.973 L1641.89 682.973 L1641.33 682.973 L1640.77 682.973 L1640.21 682.973 L1639.66 682.973 L1639.1 682.973 L1638.54 682.973 L1637.98 682.973 L1637.42 682.973 L1636.86 682.973 L1636.3 682.973 L1635.74 682.973 L1635.18 682.973 L1634.62 682.973 L1634.06 682.973 L1633.5 682.973 L1632.94 682.973 L1632.39 682.973 L1631.83 682.973 L1631.27 682.973 L1630.71 682.973 L1630.15 682.973 L1629.59 682.973 L1629.03 682.973 L1628.47 682.973 L1627.91 682.973 L1627.35 682.973 L1626.79 682.973 L1626.23 682.973 L1625.67 682.973 L1625.11 682.973 L1624.56 682.973 L1624 682.973 L1623.44 682.973 L1622.88 682.973 L1622.32 682.973 L1621.76 682.973 L1621.2 682.973 L1620.64 682.973 L1620.08 682.973 L1619.52 682.973 L1618.96 682.973 L1618.4 682.973 L1617.84 682.973 L1617.29 682.973 L1616.73 682.973 L1616.17 682.973 L1615.61 682.973 L1615.05 682.973 L1614.49 682.973 L1613.93 682.973 L1613.37 682.973 L1612.81 682.973 L1612.25 682.973 L1611.69 682.973 L1611.13 682.973 L1610.57 682.973 L1610.02 682.973 L1609.46 682.973 L1608.9 682.973 L1608.34 682.973 L1607.78 682.973 L1607.22 682.973 L1606.66 682.973 L1606.1 682.973 L1605.54 682.973 L1604.98 682.973 L1604.42 682.973 L1603.86 682.973 L1603.3 682.973 L1602.74 682.973 L1602.19 682.973 L1601.63 682.973 L1601.07 682.973 L1600.51 682.973 L1599.95 682.973 L1599.39 682.973 L1598.83 682.973 L1598.27 682.973 L1597.71 682.973 L1597.15 682.973 L1596.59 682.973 L1596.03 682.973 L1595.47 682.973 L1594.92 682.973 L1594.36 682.973 L1593.8 682.973 L1593.24 682.973 L1592.68 682.973 L1592.12 682.973 L1591.56 682.973 L1591 682.973 L1590.44 682.973 L1589.88 682.973 L1589.32 682.973 L1588.76 682.973 L1588.2 682.973 L1587.65 682.973 L1587.09 682.973 L1586.53 682.973 L1585.97 682.973 L1585.41 682.973 L1584.85 682.973 L1584.29 682.973 L1583.73 682.973 L1583.17 682.973 L1582.61 682.973 L1582.05 682.973 L1581.49 682.973 L1580.93 682.973 L1580.37 682.973 L1579.82 682.973 L1579.26 682.973 L1578.7 682.973 L1578.14 682.973 L1577.58 682.973 L1577.02 682.973 L1576.46 682.973 L1575.9 682.973 L1575.34 682.973 L1574.78 682.973 L1574.22 682.973 L1573.66 682.973 L1573.1 682.973 L1572.55 682.973 L1571.99 682.973 L1571.43 682.973 L1570.87 682.973 L1570.31 682.973 L1569.75 682.973 L1569.19 682.973 L1568.63 682.973 L1568.07 682.973 L1567.51 682.973 L1566.95 682.973 L1566.39 682.973 L1565.83 682.973 L1565.28 682.973 L1564.72 682.973 L1564.16 682.973 L1563.6 682.973 L1563.04 682.973 L1562.48 682.973 L1561.92 682.973 L1561.36 682.973 L1560.8 682.973 L1560.24 682.973 L1559.68 682.973 L1559.12 682.973 L1558.56 682.973 L1558 682.973 L1557.45 682.973 L1556.89 682.973 L1556.33 682.973 L1555.77 682.973 L1555.21 682.973 L1554.65 682.973 L1554.09 682.973 L1553.53 682.973 L1552.97 682.973 L1552.41 682.973 L1551.85 682.973 L1551.29 682.973 L1550.73 682.973 L1550.18 682.973 L1549.62 682.973 L1549.06 682.973 L1548.5 682.973 L1547.94 682.973 L1547.38 682.973 L1546.82 682.973 L1546.26 682.973 L1545.7 682.973 L1545.14 682.973 L1544.58 682.973 L1544.02 682.973 L1543.46 682.973 L1542.9 682.973 L1542.35 682.973 L1541.79 682.973 L1541.23 682.973 L1540.67 682.973 L1540.11 682.973 L1539.55 682.973 L1538.99 682.973 L1538.43 682.973 L1537.87 682.973 L1537.31 682.973 L1536.75 682.973 L1536.19 682.973 L1535.63 682.973 L1535.08 682.973 L1534.52 682.973 L1533.96 682.973 L1533.4 682.973 L1532.84 682.973 L1532.28 682.973 L1531.72 682.973 L1531.16 682.973 L1530.6 682.973 L1530.04 682.973 L1529.48 682.973 L1528.92 682.973 L1528.36 682.973 L1527.81 682.973 L1527.25 682.973 L1526.69 682.973 L1526.13 682.973 L1525.57 682.973 L1525.01 682.973 L1524.45 682.973 L1523.89 682.973 L1523.33 682.973 L1522.77 682.973 L1522.21 682.973 L1521.65 682.973 L1521.09 682.973 L1520.53 682.973 L1519.98 682.973 L1519.42 682.973 L1518.86 682.973 L1518.3 682.973 L1517.74 682.973 L1517.18 682.973 L1516.62 682.973 L1516.06 682.973 L1515.5 682.973 L1514.94 682.973 L1514.38 682.973 L1513.82 682.973 L1513.26 682.973 L1512.71 682.973 L1512.15 682.973 L1511.59 682.973 L1511.03 682.973 L1510.47 682.973 L1509.91 682.973 L1509.35 682.973 L1508.79 682.973 L1508.23 682.973 L1507.67 682.973 L1507.11 682.973 L1506.55 682.973 L1505.99 682.973 L1505.44 682.973 L1504.88 682.973 L1504.32 682.973 L1503.76 682.973 L1503.2 682.973 L1502.64 682.973 L1502.08 682.973 L1501.52 682.973 L1500.96 682.973 L1500.4 682.973 L1499.84 682.973 L1499.28 682.973 L1498.72 682.973 L1498.16 682.973 L1497.61 682.973 L1497.05 682.973 L1496.49 682.973 L1495.93 682.973 L1495.37 682.973 L1494.81 682.973 L1494.25 682.973 L1493.69 682.973 L1493.13 682.973 L1492.57 682.973 L1492.01 682.973 L1491.45 682.973 L1490.89 682.973 L1490.34 682.973 L1489.78 682.973 L1489.22 682.973 L1488.66 682.973 L1488.1 682.973 L1487.54 682.973 L1486.98 682.973 L1486.42 682.973 L1485.86 682.973 L1485.3 682.973 L1484.74 682.973 L1484.18 682.973 L1483.62 682.973 L1483.07 682.973 L1482.51 682.973 L1481.95 682.973 L1481.39 682.973 L1480.83 682.973 L1480.27 682.973 L1479.71 682.973 L1479.15 682.973 L1478.59 682.973 L1478.03 682.973 L1477.47 682.973 L1476.91 682.973 L1476.35 682.973 L1475.79 682.973 L1475.24 682.973 L1474.68 682.973 L1474.12 682.973 L1473.56 682.973 L1473 682.973 L1472.44 682.973 L1471.88 682.973 L1471.32 682.973 L1470.76 682.973 L1470.2 682.973 L1469.64 682.973 L1469.08 682.973 L1468.52 682.973 L1467.97 682.973 L1467.41 682.973 L1466.85 682.973 L1466.29 682.973 L1465.73 682.973 L1465.17 682.973 L1464.61 682.973 L1464.05 682.973 L1463.49 682.973 L1462.93 682.973 L1462.37 682.973 L1461.81 682.973 L1461.25 682.973 L1460.7 682.973 L1460.14 682.973 L1459.58 682.973 L1459.02 682.973 L1458.46 682.973 L1457.9 682.973 L1457.34 682.973 L1456.78 682.973 L1456.22 682.973 L1455.66 682.973 L1455.1 682.973 L1454.54 682.973 L1453.98 682.973 L1453.42 682.973 L1452.87 682.973 L1452.31 682.973 L1451.75 682.973 L1451.19 682.973 L1450.63 682.973 L1450.07 682.973 L1449.51 682.973 L1448.95 682.973 L1448.39 682.973 L1447.83 682.973 L1447.27 682.973 L1446.71 682.973 L1446.15 682.973 L1445.6 682.973 L1445.04 682.973 L1444.48 682.973 L1443.92 682.973 L1443.36 682.973 L1442.8 682.973 L1442.24 682.973 L1441.68 682.973 L1441.12 682.973 L1440.56 682.973 L1440 682.973 L1439.44 682.973 L1438.88 682.973 L1438.33 682.973 L1437.77 682.973 L1437.21 682.973 L1436.65 682.973 L1436.09 682.973 L1435.53 682.973 L1434.97 682.973 L1434.41 682.973 L1433.85 682.973 L1433.29 682.973 L1432.73 682.973 L1432.17 682.973 L1431.61 682.973 L1431.05 682.973 L1430.5 682.973 L1429.94 682.973 L1429.38 682.973 L1428.82 682.973 L1428.26 682.973 L1427.7 682.973 L1427.14 682.973 L1426.58 682.973 L1426.02 682.973 L1425.46 682.973 L1424.9 682.973 L1424.34 682.973 L1423.78 682.973 L1423.23 682.973 L1422.67 682.973 L1422.11 682.973 L1421.55 682.973 L1420.99 682.973 L1420.43 682.973 L1419.87 682.973 L1419.31 682.973 L1418.75 682.973 L1418.19 682.973 L1417.63 682.973 L1417.07 682.973 L1416.51 682.973 L1415.95 682.973 L1415.4 682.973 L1414.84 682.973 L1414.28 682.973 L1413.72 682.973 L1413.16 682.973 L1412.6 682.973 L1412.04 682.973 L1411.48 682.973 L1410.92 682.973 L1410.36 682.973 L1409.8 682.973 L1409.24 682.973 L1408.68 682.973 L1408.13 682.973 L1407.57 682.973 L1407.01 682.973 L1406.45 682.973 L1405.89 682.973 L1405.33 682.973 L1404.77 682.973 L1404.21 682.973 L1403.65 682.973 L1403.09 682.973 L1402.53 682.973 L1401.97 682.973 L1401.41 682.973 L1400.86 682.973 L1400.3 682.973 L1399.74 682.973 L1399.18 682.973 L1398.62 682.973 L1398.06 682.973 L1397.5 682.973 L1396.94 682.973 L1396.38 682.973 L1395.82 682.973 L1395.26 682.973 L1394.7 682.973 L1394.14 682.973 L1393.58 682.973 L1393.03 682.973 L1392.47 682.973 L1391.91 682.973 L1391.35 682.973 L1390.79 682.973 L1390.23 682.973 L1389.67 682.973 L1389.11 682.973 L1388.55 682.973 L1387.99 682.973 L1387.43 682.973 L1386.87 682.973 L1386.31 682.973 L1385.76 682.973 L1385.2 682.973 L1384.64 682.973 L1384.08 682.973 L1383.52 682.973 L1382.96 682.973 L1382.4 682.973 L1381.84 682.973 L1381.28 682.973 L1380.72 682.973 L1380.16 682.973 L1379.6 682.973 L1379.04 682.973 L1378.49 682.973 L1377.93 682.973 L1377.37 682.973 L1376.81 682.973 L1376.25 682.973 L1375.69 682.973 L1375.13 682.973 L1374.57 682.973 L1374.01 682.973 L1373.45 682.973 L1372.89 682.973 L1372.33 682.973 L1371.77 682.973 L1371.21 682.973 L1370.66 682.973 L1370.1 682.973 L1369.54 682.973 L1368.98 682.973 L1368.42 682.973 L1367.86 682.973 L1367.3 682.973 L1366.74 682.973 L1366.18 682.973 L1365.62 682.973 L1365.06 682.973 L1364.5 682.973 L1363.94 682.973 L1363.39 682.973 L1362.83 682.973 L1362.27 682.973 L1361.71 682.973 L1361.15 682.973 L1360.59 682.973 L1360.03 682.973 L1359.47 682.973 L1358.91 682.973 L1358.35 682.973 L1357.79 682.973 L1357.23 682.973 L1356.67 682.973 L1356.12 682.973 L1355.56 682.973 L1355 682.973 L1354.44 682.973 L1353.88 682.973 L1353.32 682.973 L1352.76 682.973 L1352.2 682.973 L1351.64 682.973 L1351.08 682.973 L1350.52 682.973 L1349.96 682.973 L1349.4 682.973 L1348.84 682.973 L1348.29 682.973 L1347.73 682.973 L1347.17 682.973 L1346.61 682.973 L1346.05 682.973 L1345.49 682.973 L1344.93 682.973 L1344.37 682.973 L1343.81 682.973 L1343.25 682.973 L1342.69 682.973 L1342.13 682.973 L1341.57 682.973 L1341.02 682.973 L1340.46 682.973 L1339.9 682.973 L1339.34 682.973 L1338.78 682.973 L1338.22 682.973 L1337.66 682.973 L1337.1 682.973 L1336.54 682.973 L1335.98 682.973 L1335.42 682.973 L1334.86 682.973 L1334.3 682.973 L1333.75 682.973 L1333.19 682.973 L1332.63 682.973 L1332.07 682.973 L1331.51 682.973 L1330.95 682.973 L1330.39 682.973 L1329.83 682.973 L1329.27 682.973 L1328.71 682.973 L1328.15 682.973 L1327.59 682.973 L1327.03 682.973 L1326.47 682.973 L1325.92 682.973 L1325.36 682.973 L1324.8 682.973 L1324.24 682.973 L1323.68 682.973 L1323.12 682.973 L1322.56 682.973 L1322 682.973 L1321.44 682.973 L1320.88 682.973 L1320.32 682.973 L1319.76 682.973 L1319.2 682.973 L1318.65 682.973 L1318.09 682.973 L1317.53 682.973 L1316.97 682.973 L1316.41 682.973 L1315.85 682.973 L1315.29 682.973 L1314.73 682.973 L1314.17 682.973 L1313.61 682.973 L1313.05 682.973 L1312.49 682.973 L1311.93 682.973 L1311.38 682.973 L1310.82 682.973 L1310.26 682.973 L1309.7 682.973 L1309.14 682.973 L1308.58 682.973 L1308.02 682.973 L1307.46 682.973 L1306.9 682.973 L1306.34 682.973 L1305.78 682.973 L1305.22 682.973 L1304.66 682.973 L1304.1 682.973 L1303.55 682.973 L1302.99 682.973 L1302.43 682.973 L1301.87 682.973 L1301.31 682.973 L1300.75 682.973 L1300.19 682.973 L1299.63 682.973 L1299.07 682.973 L1298.51 682.973 L1297.95 682.973 L1297.39 682.973 L1296.83 682.973 L1296.28 682.973 L1295.72 682.973 L1295.16 682.973 L1294.6 682.973 L1294.04 682.973 L1293.48 682.973 L1292.92 682.973 L1292.36 682.973 L1291.8 682.973 L1291.24 682.973 L1290.68 682.973 L1290.12 682.973 L1289.56 682.973 L1289 682.973 L1288.45 682.973 L1287.89 682.973 L1287.33 682.973 L1286.77 682.973 L1286.21 682.973 L1285.65 682.973 L1285.09 682.973 L1284.53 682.973 L1283.97 682.973 L1283.41 682.973 L1282.85 682.973 L1282.29 682.973 L1281.73 682.973 L1281.18 682.973 L1280.62 682.973 L1280.06 682.973 L1279.5 682.973 L1278.94 682.973 L1278.38 682.973 L1277.82 682.973 L1277.26 682.973 L1276.7 682.973 L1276.14 682.973 L1275.58 682.973 L1275.02 682.973 L1274.46 682.973 L1273.91 682.973 L1273.35 682.973 L1272.79 682.973 L1272.23 682.973 L1271.67 682.973 L1271.11 682.973 L1270.55 682.973 L1269.99 682.973 L1269.43 682.973 L1268.87 682.973 L1268.31 682.973 L1267.75 682.973 L1267.19 682.973 L1266.63 682.973 L1266.08 682.973 L1265.52 682.973 L1264.96 682.973 L1264.4 682.973 L1263.84 682.973 L1263.28 682.973 L1262.72 682.973 L1262.16 682.973 L1261.6 682.973 L1261.04 682.973 L1260.48 682.973 L1259.92 682.973 L1259.36 682.973 L1258.81 682.973 L1258.25 682.973 L1257.69 682.973 L1257.13 682.973 L1256.57 682.973 L1256.01 682.973 L1255.45 682.973 L1254.89 682.973 L1254.33 682.973 L1253.77 682.973 L1253.21 682.973 L1252.65 682.973 L1252.09 682.973 L1251.54 682.973 L1250.98 682.973 L1250.42 682.973 L1249.86 682.973 L1249.3 682.973 L1248.74 682.973 L1248.18 682.973 L1247.62 682.973 L1247.06 682.973 L1246.5 682.973 L1245.94 682.973 L1245.38 682.973 L1244.82 682.973 L1244.26 682.973 L1243.71 682.973 L1243.15 682.973 L1242.59 682.973 L1242.03 682.973 L1241.47 682.973 L1240.91 682.973 L1240.35 682.973 L1239.79 682.973 L1239.23 682.973 L1238.67 682.973 L1238.11 682.973 L1237.55 682.973 L1236.99 682.973 L1236.44 682.973 L1235.88 682.973 L1235.32 682.973 L1234.76 682.973 L1234.2 682.973 L1233.64 682.973 L1233.08 682.973 L1232.52 682.973 L1231.96 682.973 L1231.4 682.973 L1230.84 682.973 L1230.28 682.973 L1229.72 682.973 L1229.17 682.973 L1228.61 682.973 L1228.05 682.973 L1227.49 682.973 L1226.93 682.973 L1226.37 682.973 L1225.81 682.973 L1225.25 682.973 L1224.69 682.973 L1224.13 682.973 L1223.57 682.973 L1223.01 682.973 L1222.45 682.973 L1221.89 682.973 L1221.34 682.973 L1220.78 682.973 L1220.22 682.973 L1219.66 682.973 L1219.1 682.973 L1218.54 682.973 L1217.98 682.973 L1217.42 682.973 L1216.86 682.973 L1216.3 682.973 L1215.74 682.973 L1215.18 682.973 L1214.62 682.973 L1214.07 682.973 L1213.51 682.973 L1212.95 682.973 L1212.39 682.973 L1211.83 682.973 L1211.27 682.973 L1210.71 682.973 L1210.15 682.973 L1209.59 682.973 L1209.03 682.973 L1208.47 682.973 L1207.91 682.973 L1207.35 682.973 L1206.8 682.973 L1206.24 682.973 L1205.68 682.973 L1205.12 682.973 L1204.56 682.973 L1204 682.973 L1203.44 682.973 L1202.88 682.973 L1202.32 682.973 L1201.76 682.973 L1201.2 682.973 L1200.64 682.973 L1200.08 682.973 L1199.52 682.973 L1198.97 682.973 L1198.41 682.973 L1197.85 682.973 L1197.29 682.973 L1196.73 682.973 L1196.17 682.973 L1195.61 682.973 L1195.05 682.973 L1194.49 682.973 L1193.93 682.973 L1193.37 682.973 L1192.81 682.973 L1192.25 682.973 L1191.7 682.973 L1191.14 682.973 L1190.58 682.973 L1190.02 682.973 L1189.46 682.973 L1188.9 682.973 L1188.34 682.973 L1187.78 682.973 L1187.22 682.973 L1186.66 682.973 L1186.1 682.973 L1185.54 682.973 L1184.98 682.973 L1184.43 682.973 L1183.87 682.973 L1183.31 682.973 L1182.75 682.973 L1182.19 682.973 L1181.63 682.973 L1181.07 682.973 L1180.51 682.973 L1179.95 682.973 L1179.39 682.973 L1178.83 682.973 L1178.27 682.973 L1177.71 682.973 L1177.15 682.973 L1176.6 682.973 L1176.04 682.973 L1175.48 682.973 L1174.92 682.973 L1174.36 682.973 L1173.8 682.973 L1173.24 682.973 L1172.68 682.973 L1172.12 682.973 L1171.56 682.973 L1171 682.973 L1170.44 682.973 L1169.88 682.973 L1169.33 682.973 L1168.77 682.973 L1168.21 682.973 L1167.65 682.973 L1167.09 682.973 L1166.53 682.973 L1165.97 682.973 L1165.41 682.973 L1164.85 682.973 L1164.29 682.973 L1163.73 682.973 L1163.17 682.973 L1162.61 682.973 L1162.05 682.973 L1161.5 682.973 L1160.94 682.973 L1160.38 682.973 L1159.82 682.973 L1159.26 682.973 L1158.7 682.973 L1158.14 682.973 L1157.58 682.973 L1157.02 682.973 L1156.46 682.973 L1155.9 682.973 L1155.34 682.973 L1154.78 682.973 L1154.23 682.973 L1153.67 682.973 L1153.11 682.973 L1152.55 682.973 L1151.99 682.973 L1151.43 682.973 L1150.87 682.973 L1150.31 682.973 L1149.75 682.973 L1149.19 682.973 L1148.63 682.973 L1148.07 682.973 L1147.51 682.973 L1146.96 682.973 L1146.4 682.973 L1145.84 682.973 L1145.28 682.973 L1144.72 682.973 L1144.16 682.973 L1143.6 682.973 L1143.04 682.973 L1142.48 682.973 L1141.92 682.973 L1141.36 682.973 L1140.8 682.973 L1140.24 682.973 L1139.68 682.973 L1139.13 682.973 L1138.57 682.973 L1138.01 682.973 L1137.45 682.973 L1136.89 682.973 L1136.33 682.973 L1135.77 682.973 L1135.21 682.973 L1134.65 682.973 L1134.09 682.973 L1133.53 682.973 L1132.97 682.973 L1132.41 682.973 L1131.86 682.973 L1131.3 682.973 L1130.74 682.973 L1130.18 682.973 L1129.62 682.973 L1129.06 682.973 L1128.5 682.973 L1127.94 682.973 L1127.38 682.973 L1126.82 682.973 L1126.26 682.973 L1125.7 682.973 L1125.14 682.973 L1124.59 682.973 L1124.03 682.973 L1123.47 682.973 L1122.91 682.973 L1122.35 682.973 L1121.79 682.973 L1121.23 682.973 L1120.67 682.973 L1120.11 682.973 L1119.55 682.973 L1118.99 682.973 L1118.43 682.973 L1117.87 682.973 L1117.31 682.973 L1116.76 682.973 L1116.2 682.973 L1115.64 682.973 L1115.08 682.973 L1114.52 682.973 L1113.96 682.973 L1113.4 682.973 L1112.84 682.973 L1112.28 682.973 L1111.72 682.973 L1111.16 682.973 L1110.6 682.973 L1110.04 682.973 L1109.49 682.973 L1108.93 682.973 L1108.37 682.973 L1107.81 682.973 L1107.25 682.973 L1106.69 682.973 L1106.13 682.973 L1105.57 682.973 L1105.01 682.973 L1104.45 682.973 L1103.89 682.973 L1103.33 682.973 L1102.77 682.973 L1102.22 682.973 L1101.66 682.973 L1101.1 682.973 L1100.54 682.973 L1099.98 682.973 L1099.42 682.973 L1098.86 682.973 L1098.3 682.973 L1097.74 682.973 L1097.18 682.973 L1096.62 682.973 L1096.06 682.973 L1095.5 682.973 L1094.94 682.973 L1094.39 682.973 L1093.83 682.973 L1093.27 682.973 L1092.71 682.973 L1092.15 682.973 L1091.59 682.973 L1091.03 682.973 L1090.47 682.973 L1089.91 682.973 L1089.35 682.973 L1088.79 682.973 L1088.23 682.973 L1087.67 682.973 L1087.12 682.973 L1086.56 682.973 L1086 682.973 L1085.44 682.973 L1084.88 682.973 L1084.32 682.973 L1083.76 682.973 L1083.2 682.973 L1082.64 682.973 L1082.08 682.973 L1081.52 682.973 L1080.96 682.973 L1080.4 682.973 L1079.85 682.973 L1079.29 682.973 L1078.73 682.973 L1078.17 682.973 L1077.61 682.973 L1077.05 682.973 L1076.49 682.973 L1075.93 682.973 L1075.37 682.973 L1074.81 682.973 L1074.25 682.973 L1073.69 682.973 L1073.13 682.973 L1072.57 682.973 L1072.02 682.973 L1071.46 682.973 L1070.9 682.973 L1070.34 682.973 L1069.78 682.973 L1069.22 682.973 L1068.66 682.973 L1068.1 682.973 L1067.54 682.973 L1066.98 682.973 L1066.42 682.973 L1065.86 682.973 L1065.3 682.973 L1064.75 682.973 L1064.19 682.973 L1063.63 682.973 L1063.07 682.973 L1062.51 682.973 L1061.95 682.973 L1061.39 682.973 L1060.83 682.973 L1060.27 682.973 L1059.71 682.973 L1059.15 682.973 L1058.59 682.973 L1058.03 682.973 L1057.48 682.973 L1056.92 682.973 L1056.36 682.973 L1055.8 682.973 L1055.24 682.973 L1054.68 682.973 L1054.12 682.973 L1053.56 682.973 L1053 682.973 L1052.44 682.973 L1051.88 682.973 L1051.32 682.973 L1050.76 682.973 L1050.2 682.973 L1049.65 682.973 L1049.09 682.973 L1048.53 682.973 L1047.97 682.973 L1047.41 682.973 L1046.85 682.973 L1046.29 682.973 L1045.73 682.973 L1045.17 682.973 L1044.61 682.973 L1044.05 682.973 L1043.49 682.973 L1042.93 682.973 L1042.38 682.973 L1041.82 682.973 L1041.26 682.973 L1040.7 682.973 L1040.14 682.973 L1039.58 682.973 L1039.02 682.973 L1038.46 682.973 L1037.9 682.973 L1037.34 682.973 L1036.78 682.973 L1036.22 682.973 L1035.66 682.973 L1035.1 682.973 L1034.55 682.973 L1033.99 682.973 L1033.43 682.973 L1032.87 682.973 L1032.31 682.973 L1031.75 682.973 L1031.19 682.973 L1030.63 682.973 L1030.07 682.973 L1029.51 682.973 L1028.95 682.973 L1028.39 682.973 L1027.83 682.973 L1027.28 682.973 L1026.72 682.973 L1026.16 682.973 L1025.6 682.973 L1025.04 682.973 L1024.48 682.973 L1023.92 682.973 L1023.36 682.973 L1022.8 682.973 L1022.24 682.973 L1021.68 682.973 L1021.12 682.973 L1020.56 682.973 L1020.01 682.973 L1019.45 682.973 L1018.89 682.973 L1018.33 682.973 L1017.77 682.973 L1017.21 682.973 L1016.65 682.973 L1016.09 682.973 L1015.53 682.973 L1014.97 682.973 L1014.41 682.973 L1013.85 682.973 L1013.29 682.973 L1012.73 682.973 L1012.18 682.973 L1011.62 682.973 L1011.06 682.973 L1010.5 682.973 L1009.94 682.973 L1009.38 682.973 L1008.82 682.973 L1008.26 682.973 L1007.7 682.973 L1007.14 682.973 L1006.58 682.973 L1006.02 682.973 L1005.46 682.973 L1004.91 682.973 L1004.35 682.973 L1003.79 682.973 L1003.23 682.973 L1002.67 682.973 L1002.11 682.973 L1001.55 682.973 L1000.99 682.973 L1000.43 682.973 L999.872 682.973 L999.313 682.973 L998.754 682.973 L998.194 682.973 L997.635 682.973 L997.076 682.973 L996.517 682.973 L995.957 682.973 L995.398 682.973 L994.839 682.973 L994.28 682.973 L993.72 682.973 L993.161 682.973 L992.602 682.973 L992.043 682.973 L991.483 682.973 L990.924 682.973 L990.365 682.973 L989.806 682.973 L989.246 682.973 L988.687 682.973 L988.128 682.973 L987.569 682.973 L987.009 682.973 L986.45 682.973 L985.891 682.973 L985.332 682.973 L984.772 682.973 L984.213 682.973 L983.654 682.973 L983.095 682.973 L982.535 682.973 L981.976 682.973 L981.417 682.973 L980.858 682.973 L980.298 682.973 L979.739 682.973 L979.18 682.973 L978.621 682.973 L978.061 682.973 L977.502 682.973 L976.943 682.973 L976.384 682.973 L975.824 682.973 L975.265 682.973 L974.706 682.973 L974.147 682.973 L973.587 682.973 L973.028 682.973 L972.469 682.973 L971.91 682.973 L971.35 682.973 L970.791 682.973 L970.232 682.973 L969.673 682.973 L969.113 682.973 L968.554 682.973 L967.995 682.973 L967.436 682.973 L966.876 682.973 L966.317 682.973 L965.758 682.973 L965.199 682.973 L964.639 682.973 L964.08 682.973 L963.521 682.973 L962.962 682.973 L962.402 682.973 L961.843 682.973 L961.284 682.973 L960.725 682.973 L960.165 682.973 L959.606 682.973 L959.047 682.973 L958.488 682.973 L957.928 682.973 L957.369 682.973 L956.81 682.973 L956.251 682.973 L955.691 682.973 L955.132 682.973 L954.573 682.973 L954.014 682.973 L953.454 682.973 L952.895 682.973 L952.336 682.973 L951.777 682.973 L951.217 682.973 L950.658 682.973 L950.099 682.973 L949.54 682.973 L948.98 682.973 L948.421 682.973 L947.862 682.973 L947.303 682.973 L946.743 682.973 L946.184 682.973 L945.625 682.973 L945.066 682.973 L944.506 682.973 L943.947 682.973 L943.388 682.973 L942.829 682.973 L942.269 682.973 L941.71 682.973 L941.151 682.973 L940.592 682.973 L940.032 682.973 L939.473 682.973 L938.914 682.973 L938.355 682.973 L937.795 682.973 L937.236 682.973 L936.677 682.973 L936.118 682.973 L935.558 682.973 L934.999 682.973 L934.44 682.973 L933.881 682.973 L933.321 682.973 L932.762 682.973 L932.203 682.973 L931.644 682.973 L931.084 682.973 L930.525 682.973 L929.966 682.973 L929.406 682.973 L928.847 682.973 L928.288 682.973 L927.729 682.973 L927.169 682.973 L926.61 682.973 L926.051 682.973 L925.492 682.973 L924.932 682.973 L924.373 682.973 L923.814 682.973 L923.255 682.973 L922.695 682.973 L922.136 682.973 L921.577 682.973 L921.018 682.973 L920.458 682.973 L919.899 682.973 L919.34 682.973 L918.781 682.973 L918.221 682.973 L917.662 682.973 L917.103 682.973 L916.544 682.973 L915.984 682.973 L915.425 682.973 L914.866 682.973 L914.307 682.973 L913.747 682.973 L913.188 682.973 L912.629 682.973 L912.07 682.973 L911.51 682.973 L910.951 682.973 L910.392 682.973 L909.833 682.973 L909.273 682.973 L908.714 682.973 L908.155 682.973 L907.596 682.973 L907.036 682.973 L906.477 682.973 L905.918 682.973 L905.359 682.973 L904.799 682.973 L904.24 682.973 L903.681 682.973 L903.122 682.973 L902.562 682.973 L902.003 682.973 L901.444 682.973 L900.885 682.973 L900.325 682.973 L899.766 682.973 L899.207 682.973 L898.648 682.973 L898.088 682.973 L897.529 682.973 L896.97 682.973 L896.411 682.973 L895.851 682.973 L895.292 682.973 L894.733 682.973 L894.174 682.973 L893.614 682.973 L893.055 682.973 L892.496 682.973 L891.937 682.973 L891.377 682.973 L890.818 682.973 L890.259 682.973 L889.7 682.973 L889.14 682.973 L888.581 682.973 L888.022 682.973 L887.463 682.973 L886.903 682.973 L886.344 682.973 L885.785 682.973 L885.226 682.973 L884.666 682.973 L884.107 682.973 L883.548 682.973 L882.989 682.973 L882.429 682.973 L881.87 682.973 L881.311 682.973 L880.752 682.973 L880.192 682.973 L879.633 682.973 L879.074 682.973 L878.515 682.973 L877.955 682.973 L877.396 682.973 L876.837 682.973 L876.278 682.973 L875.718 682.973 L875.159 682.973 L874.6 682.973 L874.041 682.973 L873.481 682.973 L872.922 682.973 L872.363 682.973 L871.804 682.973 L871.244 682.973 L870.685 682.973 L870.126 682.973 L869.567 682.973 L869.007 682.973 L868.448 682.973 L867.889 682.973 L867.33 682.973 L866.77 682.973 L866.211 682.973 L865.652 682.973 L865.093 682.973 L864.533 682.973 L863.974 682.973 L863.415 682.973 L862.856 682.973 L862.296 682.973 L861.737 682.973 L861.178 682.973 L860.619 682.973 L860.059 682.973 L859.5 682.973 L858.941 682.973 L858.382 682.973 L857.822 682.973 L857.263 682.973 L856.704 682.973 L856.145 682.973 L855.585 682.973 L855.026 682.973 L854.467 682.973 L853.908 682.973 L853.348 682.973 L852.789 682.973 L852.23 682.973 L851.671 682.973 L851.111 682.973 L850.552 682.973 L849.993 682.973 L849.434 682.973 L848.874 682.973 L848.315 682.973 L847.756 682.973 L847.197 682.973 L846.637 682.973 L846.078 682.973 L845.519 682.973 L844.96 682.973 L844.4 682.973 L843.841 682.973 L843.282 682.973 L842.723 682.973 L842.163 682.973 L841.604 682.973 L841.045 682.973 L840.486 682.973 L839.926 682.973 L839.367 682.973 L838.808 682.973 L838.249 682.973 L837.689 682.973 L837.13 682.973 L836.571 682.973 L836.012 682.973 L835.452 682.973 L834.893 682.973 L834.334 682.973 L833.775 682.973 L833.215 682.973 L832.656 682.973 L832.097 682.973 L831.538 682.973 L830.978 682.973 L830.419 682.973 L829.86 682.973 L829.301 682.973 L828.741 682.973 L828.182 682.973 L827.623 682.973 L827.064 682.973 L826.504 682.973 L825.945 682.973 L825.386 682.973 L824.827 682.973 L824.267 682.973 L823.708 682.973 L823.149 682.973 L822.59 682.973 L822.03 682.973 L821.471 682.973 L820.912 682.973 L820.353 682.973 L819.793 682.973 L819.234 682.973 L818.675 682.973 L818.116 682.973 L817.556 682.973 L816.997 682.973 L816.438 682.973 L815.879 682.973 L815.319 682.973 L814.76 682.973 L814.201 682.973 L813.642 682.973 L813.082 682.973 L812.523 682.973 L811.964 682.973 L811.405 682.973 L810.845 682.973 L810.286 682.973 L809.727 682.973 L809.168 682.973 L808.608 682.973 L808.049 682.973 L807.49 682.973 L806.931 682.973 L806.371 682.973 L805.812 682.973 L805.253 682.973 L804.693 682.973 L804.134 682.973 L803.575 682.973 L803.016 682.973 L802.456 682.973 L801.897 682.973 L801.338 682.973 L800.779 682.973 L800.219 682.973 L799.66 682.973 L799.101 682.973 L798.542 682.973 L797.982 682.973 L797.423 682.973 L796.864 682.973 L796.305 682.973 L795.745 682.973 L795.186 682.973 L794.627 682.973 L794.068 682.973 L793.508 682.973 L792.949 682.973 L792.39 682.973 L791.831 682.973 L791.271 682.973 L790.712 682.973 L790.153 682.973 L789.594 682.973 L789.034 682.973 L788.475 682.973 L787.916 682.973 L787.357 682.973 L786.797 682.973 L786.238 682.973 L785.679 682.973 L785.12 682.973 L784.56 682.973 L784.001 682.973 L783.442 682.973 L782.883 682.973 L782.323 682.973 L781.764 682.973 L781.205 682.973 L780.646 682.973 L780.086 682.973 L779.527 682.973 L778.968 682.973 L778.409 682.973 L777.849 682.973 L777.29 682.973 L776.731 682.973 L776.172 682.973 L775.612 682.973 L775.053 682.973 L774.494 682.973 L773.935 682.973 L773.375 682.973 L772.816 682.973 L772.257 682.973 L771.698 682.973 L771.138 682.973 L770.579 682.973 L770.02 682.973 L769.461 682.973 L768.901 682.973 L768.342 682.973 L767.783 682.973 L767.224 682.973 L766.664 682.973 L766.105 682.973 L765.546 682.973 L764.987 682.973 L764.427 682.973 L763.868 682.973 L763.309 682.973 L762.75 682.973 L762.19 682.973 L761.631 682.973 L761.072 682.973 L760.513 682.973 L759.953 682.973 L759.394 682.973 L758.835 682.973 L758.276 682.973 L757.716 682.973 L757.157 682.973 L756.598 682.973 L756.039 682.973 L755.479 682.973 L754.92 682.973 L754.361 682.973 L753.802 682.973 L753.242 682.973 L752.683 682.973 L752.124 682.973 L751.565 682.973 L751.005 682.973 L750.446 682.973 L749.887 682.973 L749.328 682.973 L748.768 682.973 L748.209 682.973 L747.65 682.973 L747.091 682.973 L746.531 682.973 L745.972 682.973 L745.413 682.973 L744.854 682.973 L744.294 682.973 L743.735 682.973 L743.176 682.973 L742.617 682.973 L742.057 682.973 L741.498 682.973 L740.939 682.973 L740.38 682.973 L739.82 682.973 L739.261 682.973 L738.702 682.973 L738.143 682.973 L737.583 682.973 L737.024 682.973 L736.465 682.973 L735.906 682.973 L735.346 682.973 L734.787 682.973 L734.228 682.973 L733.669 682.973 L733.109 682.973 L732.55 682.973 L731.991 682.973 L731.432 682.973 L730.872 682.973 L730.313 682.973 L729.754 682.973 L729.195 682.973 L728.635 682.973 L728.076 682.973 L727.517 682.973 L726.958 682.973 L726.398 682.973 L725.839 682.973 L725.28 682.973 L724.721 682.973 L724.161 682.973 L723.602 682.973 L723.043 682.973 L722.484 682.973 L721.924 682.973 L721.365 682.973 L720.806 682.973 L720.247 682.973  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.48 720.806,687.48 721.365,687.48 721.924,687.48 722.484,687.48 723.043,687.48 723.602,687.48 724.161,687.48 724.721,687.48 725.28,687.48 725.839,687.48 726.398,687.48 726.958,687.48 727.517,687.48 728.076,687.48 728.635,687.48 729.195,687.48 729.754,687.48 730.313,687.48 730.872,687.48 731.432,687.48 731.991,687.48 732.55,687.48 733.109,687.48 733.669,687.48 734.228,687.48 734.787,687.48 735.346,687.48 735.906,687.48 736.465,687.48 737.024,687.48 737.583,687.48 738.143,687.48 738.702,687.48 739.261,687.48 739.82,687.48 740.38,687.48 740.939,687.48 741.498,687.48 742.057,687.48 742.617,687.48 743.176,687.48 743.735,687.48 744.294,687.48 744.854,687.48 745.413,687.48 745.972,687.48 746.531,687.48 747.091,687.48 747.65,687.48 748.209,687.48 748.768,687.48 749.328,687.48 749.887,687.48 750.446,687.48 751.005,687.48 751.565,687.48 752.124,687.48 752.683,687.48 753.242,687.48 753.802,687.48 754.361,687.48 754.92,687.48 755.479,687.48 756.039,687.48 756.598,687.48 757.157,687.48 757.716,687.48 758.276,687.48 758.835,687.48 759.394,687.48 759.953,687.48 760.513,687.48 761.072,687.48 761.631,687.48 762.19,687.48 762.75,687.48 763.309,687.48 763.868,687.48 764.427,687.48 764.987,687.48 765.546,687.48 766.105,687.48 766.664,687.48 767.224,687.48 767.783,687.48 768.342,687.48 768.901,687.48 769.461,687.48 770.02,687.48 770.579,687.48 771.138,687.48 771.698,687.48 772.257,687.48 772.816,687.48 773.375,687.48 773.935,687.48 774.494,687.48 775.053,687.48 775.612,687.48 776.172,687.48 776.731,687.48 777.29,687.48 777.849,687.48 778.409,687.48 778.968,687.48 779.527,687.48 780.086,687.48 780.646,687.48 781.205,687.48 781.764,687.48 782.323,687.48 782.883,687.48 783.442,687.48 784.001,687.48 784.56,687.48 785.12,687.48 785.679,687.48 786.238,687.48 786.797,687.48 787.357,687.48 787.916,687.48 788.475,687.48 789.034,687.48 789.594,687.48 790.153,687.48 790.712,687.48 791.271,687.48 791.831,687.48 792.39,687.48 792.949,687.48 793.508,687.48 794.068,687.48 794.627,687.48 795.186,687.48 795.745,687.48 796.305,687.48 796.864,687.48 797.423,687.48 797.982,687.48 798.542,687.48 799.101,687.48 799.66,687.48 800.219,687.48 800.779,687.48 801.338,687.48 801.897,687.48 802.456,687.48 803.016,687.48 803.575,687.48 804.134,687.48 804.693,687.48 805.253,687.48 805.812,687.48 806.371,687.48 806.931,687.48 807.49,687.48 808.049,687.48 808.608,687.48 809.168,687.48 809.727,687.48 810.286,687.48 810.845,687.48 811.405,687.48 811.964,687.48 812.523,687.48 813.082,687.48 813.642,687.48 814.201,687.48 814.76,687.48 815.319,687.48 815.879,687.48 816.438,687.48 816.997,687.48 817.556,687.48 818.116,687.48 818.675,687.48 819.234,687.48 819.793,687.48 820.353,687.48 820.912,687.48 821.471,687.48 822.03,687.48 822.59,687.48 823.149,687.48 823.708,687.48 824.267,687.48 824.827,687.48 825.386,687.48 825.945,687.48 826.504,687.48 827.064,687.48 827.623,687.48 828.182,687.48 828.741,687.48 829.301,687.48 829.86,687.48 830.419,687.48 830.978,687.48 831.538,687.48 832.097,687.48 832.656,687.48 833.215,687.48 833.775,687.48 834.334,687.48 834.893,687.48 835.452,687.48 836.012,687.48 836.571,687.48 837.13,687.48 837.689,687.48 838.249,687.48 838.808,687.48 839.367,687.48 839.926,687.48 840.486,687.48 841.045,687.48 841.604,687.48 842.163,687.48 842.723,687.48 843.282,687.48 843.841,687.48 844.4,687.48 844.96,687.48 845.519,687.48 846.078,687.48 846.637,687.48 847.197,687.48 847.756,687.48 848.315,687.48 848.874,687.48 849.434,687.48 849.993,687.48 850.552,687.48 851.111,687.48 851.671,687.48 852.23,687.48 852.789,687.48 853.348,687.48 853.908,687.48 854.467,687.48 855.026,687.48 855.585,687.48 856.145,687.48 856.704,687.48 857.263,687.48 857.822,687.48 858.382,687.48 858.941,687.48 859.5,687.48 860.059,687.48 860.619,687.48 861.178,687.48 861.737,687.48 862.296,687.48 862.856,687.48 863.415,687.48 863.974,687.48 864.533,687.48 865.093,687.48 865.652,687.48 866.211,687.48 866.77,687.48 867.33,687.48 867.889,687.48 868.448,687.48 869.007,687.48 869.567,687.48 870.126,687.48 870.685,687.48 871.244,687.48 871.804,687.48 872.363,687.48 872.922,687.48 873.481,687.48 874.041,687.48 874.6,687.48 875.159,687.48 875.718,687.48 876.278,687.48 876.837,687.48 877.396,687.48 877.955,687.48 878.515,687.48 879.074,687.48 879.633,687.48 880.192,687.48 880.752,687.48 881.311,687.48 881.87,687.48 882.429,687.48 882.989,687.48 883.548,687.48 884.107,687.48 884.666,687.48 885.226,687.48 885.785,687.48 886.344,687.48 886.903,687.48 887.463,687.48 888.022,687.48 888.581,687.48 889.14,687.48 889.7,687.48 890.259,687.48 890.818,687.48 891.377,687.48 891.937,687.48 892.496,687.48 893.055,687.48 893.614,687.48 894.174,687.48 894.733,687.48 895.292,687.48 895.851,687.48 896.411,687.48 896.97,687.48 897.529,687.48 898.088,687.48 898.648,687.48 899.207,687.48 899.766,687.48 900.325,687.48 900.885,687.48 901.444,687.48 902.003,687.48 902.562,687.48 903.122,687.48 903.681,687.48 904.24,687.48 904.799,687.48 905.359,687.48 905.918,687.48 906.477,687.48 907.036,687.48 907.596,687.48 908.155,687.48 908.714,687.48 909.273,687.48 909.833,687.48 910.392,687.48 910.951,687.48 911.51,687.48 912.07,687.48 912.629,687.48 913.188,687.48 913.747,687.48 914.307,687.48 914.866,687.48 915.425,687.48 915.984,687.48 916.544,687.48 917.103,687.48 917.662,687.48 918.221,687.48 918.781,687.48 919.34,687.48 919.899,687.48 920.458,687.48 921.018,687.48 921.577,687.48 922.136,687.48 922.695,687.48 923.255,687.48 923.814,687.48 924.373,687.48 924.932,687.48 925.492,687.48 926.051,687.48 926.61,687.48 927.169,687.48 927.729,687.48 928.288,687.48 928.847,687.48 929.406,687.48 929.966,687.48 930.525,687.48 931.084,687.48 931.644,687.48 932.203,687.48 932.762,687.48 933.321,687.48 933.881,687.48 934.44,687.48 934.999,687.48 935.558,687.48 936.118,687.48 936.677,687.48 937.236,687.48 937.795,687.48 938.355,687.48 938.914,687.48 939.473,687.48 940.032,687.48 940.592,687.48 941.151,687.48 941.71,687.48 942.269,687.48 942.829,687.48 943.388,687.48 943.947,687.48 944.506,687.48 945.066,687.48 945.625,687.48 946.184,687.48 946.743,687.48 947.303,687.48 947.862,687.48 948.421,687.48 948.98,687.48 949.54,687.48 950.099,687.48 950.658,687.48 951.217,687.48 951.777,687.48 952.336,687.48 952.895,687.48 953.454,687.48 954.014,687.48 954.573,687.48 955.132,687.48 955.691,687.48 956.251,687.48 956.81,687.48 957.369,687.48 957.928,687.48 958.488,687.48 959.047,687.48 959.606,687.48 960.165,687.48 960.725,687.48 961.284,687.48 961.843,687.48 962.402,687.48 962.962,687.48 963.521,687.48 964.08,687.48 964.639,687.48 965.199,687.48 965.758,687.48 966.317,687.48 966.876,687.48 967.436,687.48 967.995,687.48 968.554,687.48 969.113,687.48 969.673,687.48 970.232,687.48 970.791,687.48 971.35,687.48 971.91,687.48 972.469,687.48 973.028,687.48 973.587,687.48 974.147,687.48 974.706,687.48 975.265,687.48 975.824,687.48 976.384,687.48 976.943,687.48 977.502,687.48 978.061,687.48 978.621,687.48 979.18,687.48 979.739,687.48 980.298,687.48 980.858,687.48 981.417,687.48 981.976,687.48 982.535,687.48 983.095,687.48 983.654,687.48 984.213,687.48 984.772,687.48 985.332,687.48 985.891,687.48 986.45,687.48 987.009,687.48 987.569,687.48 988.128,687.48 988.687,687.48 989.246,687.48 989.806,687.48 990.365,687.48 990.924,687.48 991.483,687.48 992.043,687.48 992.602,687.48 993.161,687.48 993.72,687.48 994.28,687.48 994.839,687.48 995.398,687.48 995.957,687.48 996.517,687.48 997.076,687.48 997.635,687.48 998.194,687.48 998.754,687.48 999.313,687.48 999.872,687.48 1000.43,687.48 1000.99,687.48 1001.55,687.48 1002.11,687.48 1002.67,687.48 1003.23,687.48 1003.79,687.48 1004.35,687.48 1004.91,687.48 1005.46,687.48 1006.02,687.48 1006.58,687.48 1007.14,687.48 1007.7,687.48 1008.26,687.48 1008.82,687.48 1009.38,687.48 1009.94,687.48 1010.5,687.48 1011.06,687.48 1011.62,687.48 1012.18,687.48 1012.73,687.48 1013.29,687.48 1013.85,687.48 1014.41,687.48 1014.97,687.48 1015.53,687.48 1016.09,687.48 1016.65,687.48 1017.21,687.48 1017.77,687.48 1018.33,687.48 1018.89,687.48 1019.45,687.48 1020.01,687.48 1020.56,687.48 1021.12,687.48 1021.68,687.48 1022.24,687.48 1022.8,687.48 1023.36,687.48 1023.92,687.48 1024.48,687.48 1025.04,687.48 1025.6,687.48 1026.16,687.48 1026.72,687.48 1027.28,687.48 1027.83,687.48 1028.39,687.48 1028.95,687.48 1029.51,687.48 1030.07,687.48 1030.63,687.48 1031.19,687.48 1031.75,687.48 1032.31,687.48 1032.87,687.48 1033.43,687.48 1033.99,687.48 1034.55,687.48 1035.1,687.48 1035.66,687.48 1036.22,687.48 1036.78,687.48 1037.34,687.48 1037.9,687.48 1038.46,687.48 1039.02,687.48 1039.58,687.48 1040.14,687.48 1040.7,687.48 1041.26,687.48 1041.82,687.48 1042.38,687.48 1042.93,687.48 1043.49,687.48 1044.05,687.48 1044.61,687.48 1045.17,687.48 1045.73,687.48 1046.29,687.48 1046.85,687.48 1047.41,687.48 1047.97,687.48 1048.53,687.48 1049.09,687.48 1049.65,687.48 1050.2,687.48 1050.76,687.48 1051.32,687.48 1051.88,687.48 1052.44,687.48 1053,687.48 1053.56,687.48 1054.12,687.48 1054.68,687.48 1055.24,687.48 1055.8,687.48 1056.36,687.48 1056.92,687.48 1057.48,687.48 1058.03,687.48 1058.59,687.48 1059.15,687.48 1059.71,687.48 1060.27,687.48 1060.83,687.48 1061.39,687.48 1061.95,687.48 1062.51,687.48 1063.07,687.48 1063.63,687.48 1064.19,687.48 1064.75,687.48 1065.3,687.48 1065.86,687.48 1066.42,687.48 1066.98,687.48 1067.54,687.48 1068.1,687.48 1068.66,687.48 1069.22,687.48 1069.78,687.48 1070.34,687.48 1070.9,687.48 1071.46,687.48 1072.02,687.48 1072.57,687.48 1073.13,687.48 1073.69,687.48 1074.25,687.48 1074.81,687.48 1075.37,687.48 1075.93,687.48 1076.49,687.48 1077.05,687.48 1077.61,687.48 1078.17,687.48 1078.73,687.48 1079.29,687.48 1079.85,687.48 1080.4,687.48 1080.96,687.48 1081.52,687.48 1082.08,687.48 1082.64,687.48 1083.2,687.48 1083.76,687.48 1084.32,687.48 1084.88,687.48 1085.44,687.48 1086,687.48 1086.56,687.48 1087.12,687.48 1087.67,687.48 1088.23,687.48 1088.79,687.48 1089.35,687.48 1089.91,687.48 1090.47,687.48 1091.03,687.48 1091.59,687.48 1092.15,687.48 1092.71,687.48 1093.27,687.48 1093.83,687.48 1094.39,687.48 1094.94,687.48 1095.5,687.48 1096.06,687.48 1096.62,687.48 1097.18,687.48 1097.74,687.48 1098.3,687.48 1098.86,687.48 1099.42,687.48 1099.98,687.48 1100.54,687.48 1101.1,687.48 1101.66,687.48 1102.22,687.48 1102.77,687.48 1103.33,687.48 1103.89,687.48 1104.45,687.48 1105.01,687.48 1105.57,687.48 1106.13,687.48 1106.69,687.48 1107.25,687.48 1107.81,687.48 1108.37,687.48 1108.93,687.48 1109.49,687.48 1110.04,687.48 1110.6,687.48 1111.16,687.48 1111.72,687.48 1112.28,687.48 1112.84,687.48 1113.4,687.48 1113.96,687.48 1114.52,687.48 1115.08,687.48 1115.64,687.48 1116.2,687.48 1116.76,687.48 1117.31,687.48 1117.87,687.48 1118.43,687.48 1118.99,687.48 1119.55,687.48 1120.11,687.48 1120.67,687.48 1121.23,687.48 1121.79,687.48 1122.35,687.48 1122.91,687.48 1123.47,687.48 1124.03,687.48 1124.59,687.48 1125.14,687.48 1125.7,687.48 1126.26,687.48 1126.82,687.48 1127.38,687.48 1127.94,687.48 1128.5,687.48 1129.06,687.48 1129.62,687.48 1130.18,687.48 1130.74,687.48 1131.3,687.48 1131.86,687.48 1132.41,687.48 1132.97,687.48 1133.53,687.48 1134.09,687.48 1134.65,687.48 1135.21,687.48 1135.77,687.48 1136.33,687.48 1136.89,687.48 1137.45,687.48 1138.01,687.48 1138.57,687.48 1139.13,687.48 1139.68,687.48 1140.24,687.48 1140.8,687.48 1141.36,687.48 1141.92,687.48 1142.48,687.48 1143.04,687.48 1143.6,687.48 1144.16,687.48 1144.72,687.48 1145.28,687.48 1145.84,687.48 1146.4,687.48 1146.96,687.48 1147.51,687.48 1148.07,687.48 1148.63,687.48 1149.19,687.48 1149.75,687.48 1150.31,687.48 1150.87,687.48 1151.43,687.48 1151.99,687.48 1152.55,687.48 1153.11,687.48 1153.67,687.48 1154.23,687.48 1154.78,687.48 1155.34,687.48 1155.9,687.48 1156.46,687.48 1157.02,687.48 1157.58,687.48 1158.14,687.48 1158.7,687.48 1159.26,687.48 1159.82,687.48 1160.38,687.48 1160.94,687.48 1161.5,687.48 1162.05,687.48 1162.61,687.48 1163.17,687.48 1163.73,687.48 1164.29,687.48 1164.85,687.48 1165.41,687.48 1165.97,687.48 1166.53,687.48 1167.09,687.48 1167.65,687.48 1168.21,687.48 1168.77,687.48 1169.33,687.48 1169.88,687.48 1170.44,687.48 1171,687.48 1171.56,687.48 1172.12,687.48 1172.68,687.48 1173.24,687.48 1173.8,687.48 1174.36,687.48 1174.92,687.48 1175.48,687.48 1176.04,687.48 1176.6,687.48 1177.15,687.48 1177.71,687.48 1178.27,687.48 1178.83,687.48 1179.39,687.48 1179.95,687.48 1180.51,687.48 1181.07,687.48 1181.63,687.48 1182.19,687.48 1182.75,687.48 1183.31,687.48 1183.87,687.48 1184.43,687.48 1184.98,687.48 1185.54,687.48 1186.1,687.48 1186.66,687.48 1187.22,687.48 1187.78,687.48 1188.34,687.48 1188.9,687.48 1189.46,687.48 1190.02,687.48 1190.58,687.48 1191.14,687.48 1191.7,687.48 1192.25,687.48 1192.81,687.48 1193.37,687.48 1193.93,687.48 1194.49,687.48 1195.05,687.48 1195.61,687.48 1196.17,687.48 1196.73,687.48 1197.29,687.48 1197.85,687.48 1198.41,687.48 1198.97,687.48 1199.52,687.48 1200.08,687.48 1200.64,687.48 1201.2,687.48 1201.76,687.48 1202.32,687.48 1202.88,687.48 1203.44,687.48 1204,687.48 1204.56,687.48 1205.12,687.48 1205.68,687.48 1206.24,687.48 1206.8,687.48 1207.35,687.48 1207.91,687.48 1208.47,687.48 1209.03,687.48 1209.59,687.48 1210.15,687.48 1210.71,687.48 1211.27,687.48 1211.83,687.48 1212.39,687.48 1212.95,687.48 1213.51,687.48 1214.07,687.48 1214.62,687.48 1215.18,687.48 1215.74,687.48 1216.3,687.48 1216.86,687.48 1217.42,687.48 1217.98,687.48 1218.54,687.48 1219.1,687.48 1219.66,687.48 1220.22,687.48 1220.78,687.48 1221.34,687.48 1221.89,687.48 1222.45,687.48 1223.01,687.48 1223.57,687.48 1224.13,687.48 1224.69,687.48 1225.25,687.48 1225.81,687.48 1226.37,687.48 1226.93,687.48 1227.49,687.48 1228.05,687.48 1228.61,687.48 1229.17,687.48 1229.72,687.48 1230.28,687.48 1230.84,687.48 1231.4,687.48 1231.96,687.48 1232.52,687.48 1233.08,687.48 1233.64,687.48 1234.2,687.48 1234.76,687.48 1235.32,687.48 1235.88,687.48 1236.44,687.48 1236.99,687.48 1237.55,687.48 1238.11,687.48 1238.67,687.48 1239.23,687.48 1239.79,687.48 1240.35,687.48 1240.91,687.48 1241.47,687.48 1242.03,687.48 1242.59,687.48 1243.15,687.48 1243.71,687.48 1244.26,687.48 1244.82,687.48 1245.38,687.48 1245.94,687.48 1246.5,687.48 1247.06,687.48 1247.62,687.48 1248.18,687.48 1248.74,687.48 1249.3,687.48 1249.86,687.48 1250.42,687.48 1250.98,687.48 1251.54,687.48 1252.09,687.48 1252.65,687.48 1253.21,687.48 1253.77,687.48 1254.33,687.48 1254.89,687.48 1255.45,687.48 1256.01,687.48 1256.57,687.48 1257.13,687.48 1257.69,687.48 1258.25,687.48 1258.81,687.48 1259.36,687.48 1259.92,687.48 1260.48,687.48 1261.04,687.48 1261.6,687.48 1262.16,687.48 1262.72,687.48 1263.28,687.48 1263.84,687.48 1264.4,687.48 1264.96,687.48 1265.52,687.48 1266.08,687.48 1266.63,687.48 1267.19,687.48 1267.75,687.48 1268.31,687.48 1268.87,687.48 1269.43,687.48 1269.99,687.48 1270.55,687.48 1271.11,687.48 1271.67,687.48 1272.23,687.48 1272.79,687.48 1273.35,687.48 1273.91,687.48 1274.46,687.48 1275.02,687.48 1275.58,687.48 1276.14,687.48 1276.7,687.48 1277.26,687.48 1277.82,687.48 1278.38,687.48 1278.94,687.48 1279.5,687.48 1280.06,687.48 1280.62,687.48 1281.18,687.48 1281.73,687.48 1282.29,687.48 1282.85,687.48 1283.41,687.48 1283.97,687.48 1284.53,687.48 1285.09,687.48 1285.65,687.48 1286.21,687.48 1286.77,687.48 1287.33,687.48 1287.89,687.48 1288.45,687.48 1289,687.48 1289.56,687.48 1290.12,687.48 1290.68,687.48 1291.24,687.48 1291.8,687.48 1292.36,687.48 1292.92,687.48 1293.48,687.48 1294.04,687.48 1294.6,687.48 1295.16,687.48 1295.72,687.48 1296.28,687.48 1296.83,687.48 1297.39,687.48 1297.95,687.48 1298.51,687.48 1299.07,687.48 1299.63,687.48 1300.19,687.48 1300.75,687.48 1301.31,687.48 1301.87,687.48 1302.43,687.48 1302.99,687.48 1303.55,687.48 1304.1,687.48 1304.66,687.48 1305.22,687.48 1305.78,687.48 1306.34,687.48 1306.9,687.48 1307.46,687.48 1308.02,687.48 1308.58,687.48 1309.14,687.48 1309.7,687.48 1310.26,687.48 1310.82,687.48 1311.38,687.48 1311.93,687.48 1312.49,687.48 1313.05,687.48 1313.61,687.48 1314.17,687.48 1314.73,687.48 1315.29,687.48 1315.85,687.48 1316.41,687.48 1316.97,687.48 1317.53,687.48 1318.09,687.48 1318.65,687.48 1319.2,687.48 1319.76,687.48 1320.32,687.48 1320.88,687.48 1321.44,687.48 1322,687.48 1322.56,687.48 1323.12,687.48 1323.68,687.48 1324.24,687.48 1324.8,687.48 1325.36,687.48 1325.92,687.48 1326.47,687.48 1327.03,687.48 1327.59,687.48 1328.15,687.48 1328.71,687.48 1329.27,687.48 1329.83,687.48 1330.39,687.48 1330.95,687.48 1331.51,687.48 1332.07,687.48 1332.63,687.48 1333.19,687.48 1333.75,687.48 1334.3,687.48 1334.86,687.48 1335.42,687.48 1335.98,687.48 1336.54,687.48 1337.1,687.48 1337.66,687.48 1338.22,687.48 1338.78,687.48 1339.34,687.48 1339.9,687.48 1340.46,687.48 1341.02,687.48 1341.57,687.48 1342.13,687.48 1342.69,687.48 1343.25,687.48 1343.81,687.48 1344.37,687.48 1344.93,687.48 1345.49,687.48 1346.05,687.48 1346.61,687.48 1347.17,687.48 1347.73,687.48 1348.29,687.48 1348.84,687.48 1349.4,687.48 1349.96,687.48 1350.52,687.48 1351.08,687.48 1351.64,687.48 1352.2,687.48 1352.76,687.48 1353.32,687.48 1353.88,687.48 1354.44,687.48 1355,687.48 1355.56,687.48 1356.12,687.48 1356.67,687.48 1357.23,687.48 1357.79,687.48 1358.35,687.48 1358.91,687.48 1359.47,687.48 1360.03,687.48 1360.59,687.48 1361.15,687.48 1361.71,687.48 1362.27,687.48 1362.83,687.48 1363.39,687.48 1363.94,687.48 1364.5,687.48 1365.06,687.48 1365.62,687.48 1366.18,687.48 1366.74,687.48 1367.3,687.48 1367.86,687.48 1368.42,687.48 1368.98,687.48 1369.54,687.48 1370.1,687.48 1370.66,687.48 1371.21,687.48 1371.77,687.48 1372.33,687.48 1372.89,687.48 1373.45,687.48 1374.01,687.48 1374.57,687.48 1375.13,687.48 1375.69,687.48 1376.25,687.48 1376.81,687.48 1377.37,687.48 1377.93,687.48 1378.49,687.48 1379.04,687.48 1379.6,687.48 1380.16,687.48 1380.72,687.48 1381.28,687.48 1381.84,687.48 1382.4,687.48 1382.96,687.48 1383.52,687.48 1384.08,687.48 1384.64,687.48 1385.2,687.48 1385.76,687.48 1386.31,687.48 1386.87,687.48 1387.43,687.48 1387.99,687.48 1388.55,687.48 1389.11,687.48 1389.67,687.48 1390.23,687.48 1390.79,687.48 1391.35,687.48 1391.91,687.48 1392.47,687.48 1393.03,687.48 1393.58,687.48 1394.14,687.48 1394.7,687.48 1395.26,687.48 1395.82,687.48 1396.38,687.48 1396.94,687.48 1397.5,687.48 1398.06,687.48 1398.62,687.48 1399.18,687.48 1399.74,687.48 1400.3,687.48 1400.86,687.48 1401.41,687.48 1401.97,687.48 1402.53,687.48 1403.09,687.48 1403.65,687.48 1404.21,687.48 1404.77,687.48 1405.33,687.48 1405.89,687.48 1406.45,687.48 1407.01,687.48 1407.57,687.48 1408.13,687.48 1408.68,687.48 1409.24,687.48 1409.8,687.48 1410.36,687.48 1410.92,687.48 1411.48,687.48 1412.04,687.48 1412.6,687.48 1413.16,687.48 1413.72,687.48 1414.28,687.48 1414.84,687.48 1415.4,687.48 1415.95,687.48 1416.51,687.48 1417.07,687.48 1417.63,687.48 1418.19,687.48 1418.75,687.48 1419.31,687.48 1419.87,687.48 1420.43,687.48 1420.99,687.48 1421.55,687.48 1422.11,687.48 1422.67,687.48 1423.23,687.48 1423.78,687.48 1424.34,687.48 1424.9,687.48 1425.46,687.48 1426.02,687.48 1426.58,687.48 1427.14,687.48 1427.7,687.48 1428.26,687.48 1428.82,687.48 1429.38,687.48 1429.94,687.48 1430.5,687.48 1431.05,687.48 1431.61,687.48 1432.17,687.48 1432.73,687.48 1433.29,687.48 1433.85,687.48 1434.41,687.48 1434.97,687.48 1435.53,687.48 1436.09,687.48 1436.65,687.48 1437.21,687.48 1437.77,687.48 1438.33,687.48 1438.88,687.48 1439.44,687.48 1440,687.48 1440.56,687.48 1441.12,687.48 1441.68,687.48 1442.24,687.48 1442.8,687.48 1443.36,687.48 1443.92,687.48 1444.48,687.48 1445.04,687.48 1445.6,687.48 1446.15,687.48 1446.71,687.48 1447.27,687.48 1447.83,687.48 1448.39,687.48 1448.95,687.48 1449.51,687.48 1450.07,687.48 1450.63,687.48 1451.19,687.48 1451.75,687.48 1452.31,687.48 1452.87,687.48 1453.42,687.48 1453.98,687.48 1454.54,687.48 1455.1,687.48 1455.66,687.48 1456.22,687.48 1456.78,687.48 1457.34,687.48 1457.9,687.48 1458.46,687.48 1459.02,687.48 1459.58,687.48 1460.14,687.48 1460.7,687.48 1461.25,687.48 1461.81,687.48 1462.37,687.48 1462.93,687.48 1463.49,687.48 1464.05,687.48 1464.61,687.48 1465.17,687.48 1465.73,687.48 1466.29,687.48 1466.85,687.48 1467.41,687.48 1467.97,687.48 1468.52,687.48 1469.08,687.48 1469.64,687.48 1470.2,687.48 1470.76,687.48 1471.32,687.48 1471.88,687.48 1472.44,687.48 1473,687.48 1473.56,687.48 1474.12,687.48 1474.68,687.48 1475.24,687.48 1475.79,687.48 1476.35,687.48 1476.91,687.48 1477.47,687.48 1478.03,687.48 1478.59,687.48 1479.15,687.48 1479.71,687.48 1480.27,687.48 1480.83,687.48 1481.39,687.48 1481.95,687.48 1482.51,687.48 1483.07,687.48 1483.62,687.48 1484.18,687.48 1484.74,687.48 1485.3,687.48 1485.86,687.48 1486.42,687.48 1486.98,687.48 1487.54,687.48 1488.1,687.48 1488.66,687.48 1489.22,687.48 1489.78,687.48 1490.34,687.48 1490.89,687.48 1491.45,687.48 1492.01,687.48 1492.57,687.48 1493.13,687.48 1493.69,687.48 1494.25,687.48 1494.81,687.48 1495.37,687.48 1495.93,687.48 1496.49,687.48 1497.05,687.48 1497.61,687.48 1498.16,687.48 1498.72,687.48 1499.28,687.48 1499.84,687.48 1500.4,687.48 1500.96,687.48 1501.52,687.48 1502.08,687.48 1502.64,687.48 1503.2,687.48 1503.76,687.48 1504.32,687.48 1504.88,687.48 1505.44,687.48 1505.99,687.48 1506.55,687.48 1507.11,687.48 1507.67,687.48 1508.23,687.48 1508.79,687.48 1509.35,687.48 1509.91,687.48 1510.47,687.48 1511.03,687.48 1511.59,687.48 1512.15,687.48 1512.71,687.48 1513.26,687.48 1513.82,687.48 1514.38,687.48 1514.94,687.48 1515.5,687.48 1516.06,687.48 1516.62,687.48 1517.18,687.48 1517.74,687.48 1518.3,687.48 1518.86,687.48 1519.42,687.48 1519.98,687.48 1520.53,687.48 1521.09,687.48 1521.65,687.48 1522.21,687.48 1522.77,687.48 1523.33,687.48 1523.89,687.48 1524.45,687.48 1525.01,687.48 1525.57,687.48 1526.13,687.48 1526.69,687.48 1527.25,687.48 1527.81,687.48 1528.36,687.48 1528.92,687.48 1529.48,687.48 1530.04,687.48 1530.6,687.48 1531.16,687.48 1531.72,687.48 1532.28,687.48 1532.84,687.48 1533.4,687.48 1533.96,687.48 1534.52,687.48 1535.08,687.48 1535.63,687.48 1536.19,687.48 1536.75,687.48 1537.31,687.48 1537.87,687.48 1538.43,687.48 1538.99,687.48 1539.55,687.48 1540.11,687.48 1540.67,687.48 1541.23,687.48 1541.79,687.48 1542.35,687.48 1542.9,687.48 1543.46,687.48 1544.02,687.48 1544.58,687.48 1545.14,687.48 1545.7,687.48 1546.26,687.48 1546.82,687.48 1547.38,687.48 1547.94,687.48 1548.5,687.48 1549.06,687.48 1549.62,687.48 1550.18,687.48 1550.73,687.48 1551.29,687.48 1551.85,687.48 1552.41,687.48 1552.97,687.48 1553.53,687.48 1554.09,687.48 1554.65,687.48 1555.21,687.48 1555.77,687.48 1556.33,687.48 1556.89,687.48 1557.45,687.48 1558,687.48 1558.56,687.48 1559.12,687.48 1559.68,687.48 1560.24,687.48 1560.8,687.48 1561.36,687.48 1561.92,687.48 1562.48,687.48 1563.04,687.48 1563.6,687.48 1564.16,687.48 1564.72,687.48 1565.28,687.48 1565.83,687.48 1566.39,687.48 1566.95,687.48 1567.51,687.48 1568.07,687.48 1568.63,687.48 1569.19,687.48 1569.75,687.48 1570.31,687.48 1570.87,687.48 1571.43,687.48 1571.99,687.48 1572.55,687.48 1573.1,687.48 1573.66,687.48 1574.22,687.48 1574.78,687.48 1575.34,687.48 1575.9,687.48 1576.46,687.48 1577.02,687.48 1577.58,687.48 1578.14,687.48 1578.7,687.48 1579.26,687.48 1579.82,687.48 1580.37,687.48 1580.93,687.48 1581.49,687.48 1582.05,687.48 1582.61,687.48 1583.17,687.48 1583.73,687.48 1584.29,687.48 1584.85,687.48 1585.41,687.48 1585.97,687.48 1586.53,687.48 1587.09,687.48 1587.65,687.48 1588.2,687.48 1588.76,687.48 1589.32,687.48 1589.88,687.48 1590.44,687.48 1591,687.48 1591.56,687.48 1592.12,687.48 1592.68,687.48 1593.24,687.48 1593.8,687.48 1594.36,687.48 1594.92,687.48 1595.47,687.48 1596.03,687.48 1596.59,687.48 1597.15,687.48 1597.71,687.48 1598.27,687.48 1598.83,687.48 1599.39,687.48 1599.95,687.48 1600.51,687.48 1601.07,687.48 1601.63,687.48 1602.19,687.48 1602.74,687.48 1603.3,687.48 1603.86,687.48 1604.42,687.48 1604.98,687.48 1605.54,687.48 1606.1,687.48 1606.66,687.48 1607.22,687.48 1607.78,687.48 1608.34,687.48 1608.9,687.48 1609.46,687.48 1610.02,687.48 1610.57,687.48 1611.13,687.48 1611.69,687.48 1612.25,687.48 1612.81,687.48 1613.37,687.48 1613.93,687.48 1614.49,687.48 1615.05,687.48 1615.61,687.48 1616.17,687.48 1616.73,687.48 1617.29,687.48 1617.84,687.48 1618.4,687.48 1618.96,687.48 1619.52,687.48 1620.08,687.48 1620.64,687.48 1621.2,687.48 1621.76,687.48 1622.32,687.48 1622.88,687.48 1623.44,687.48 1624,687.48 1624.56,687.48 1625.11,687.48 1625.67,687.48 1626.23,687.48 1626.79,687.48 1627.35,687.48 1627.91,687.48 1628.47,687.48 1629.03,687.48 1629.59,687.48 1630.15,687.48 1630.71,687.48 1631.27,687.48 1631.83,687.48 1632.39,687.48 1632.94,687.48 1633.5,687.48 1634.06,687.48 1634.62,687.48 1635.18,687.48 1635.74,687.48 1636.3,687.48 1636.86,687.48 1637.42,687.48 1637.98,687.48 1638.54,687.48 1639.1,687.48 1639.66,687.48 1640.21,687.48 1640.77,687.48 1641.33,687.48 1641.89,687.48 1642.45,687.48 1643.01,687.48 1643.57,687.48 1644.13,687.48 1644.69,687.48 1645.25,687.48 1645.81,687.48 1646.37,687.48 1646.93,687.48 1647.48,687.48 1648.04,687.48 1648.6,687.48 1649.16,687.48 1649.72,687.48 1650.28,687.48 1650.84,687.48 1651.4,687.48 1651.96,687.48 1652.52,687.48 1653.08,687.48 1653.64,687.48 1654.2,687.48 1654.76,687.48 1655.31,687.48 1655.87,687.48 1656.43,687.48 1656.99,687.48 1657.55,687.48 1658.11,687.48 1658.67,687.48 1659.23,687.48 1659.79,687.48 1660.35,687.48 1660.91,687.48 1661.47,687.48 1662.03,687.48 1662.58,687.48 1663.14,687.48 1663.7,687.48 1664.26,687.48 1664.82,687.48 1665.38,687.48 1665.94,687.48 1666.5,687.48 1667.06,687.48 1667.62,687.48 1668.18,687.48 1668.74,687.48 1669.3,687.48 1669.85,687.48 1670.41,687.48 1670.97,687.48 1671.53,687.48 1672.09,687.48 1672.65,687.48 1673.21,687.48 1673.77,687.48 1674.33,687.48 1674.89,687.48 1675.45,687.48 1676.01,687.48 1676.57,687.48 1677.13,687.48 1677.68,687.48 1678.24,687.48 1678.8,687.48 1679.36,687.48 1679.92,687.48 1680.48,687.48 1681.04,687.48 1681.6,687.48 1682.16,687.48 1682.72,687.48 1683.28,687.48 1683.84,687.48 1684.4,687.48 1684.95,687.48 1685.51,687.48 1686.07,687.48 1686.63,687.48 1687.19,687.48 1687.75,687.48 1688.31,687.48 1688.87,687.48 1689.43,687.48 1689.99,687.48 1690.55,687.48 1691.11,687.48 1691.67,687.48 1692.23,687.48 1692.78,687.48 1693.34,687.48 1693.9,687.48 1694.46,687.48 1695.02,687.48 1695.58,687.48 1696.14,687.48 1696.7,687.48 1697.26,687.48 1697.82,687.48 1698.38,687.48 1698.94,687.48 1699.5,687.48 1700.05,687.48 1700.61,687.48 1701.17,687.48 1701.73,687.48 1702.29,687.48 1702.85,687.48 1703.41,687.48 1703.97,687.48 1704.53,687.48 1705.09,687.48 1705.65,687.48 1706.21,687.48 1706.77,687.48 1707.32,687.48 1707.88,687.48 1708.44,687.48 1709,687.48 1709.56,687.48 1710.12,687.48 1710.68,687.48 1711.24,687.48 1711.8,687.48 1712.36,687.48 1712.92,687.48 1713.48,687.48 1714.04,687.48 1714.6,687.48 1715.15,687.48 1715.71,687.48 1716.27,687.48 1716.83,687.48 1717.39,687.48 1717.95,687.48 1718.51,687.48 1719.07,687.48 1719.63,687.48 1720.19,687.48 1720.75,687.48 1721.31,687.48 1721.87,687.48 1722.42,687.48 1722.98,687.48 1723.54,687.48 1724.1,687.48 1724.66,687.48 1725.22,687.48 1725.78,687.48 1726.34,687.48 1726.9,687.48 1727.46,687.48 1728.02,687.48 1728.58,687.48 1729.14,687.48 1729.69,687.48 1730.25,687.48 1730.81,687.48 1731.37,687.48 1731.93,687.48 1732.49,687.48 1733.05,687.48 1733.61,687.48 1734.17,687.48 1734.73,687.48 1735.29,687.48 1735.85,687.48 1736.41,687.48 1736.97,687.48 1737.52,687.48 1738.08,687.48 1738.64,687.48 1739.2,687.48 1739.76,687.48 1740.32,687.48 1740.88,687.48 1741.44,687.48 1742,687.48 1742.56,687.48 1743.12,687.48 1743.68,687.48 1744.24,687.48 1744.79,687.48 1745.35,687.48 1745.91,687.48 1746.47,687.48 1747.03,687.48 1747.59,687.48 1748.15,687.48 1748.71,687.48 1749.27,687.48 1749.83,687.48 1750.39,687.48 1750.95,687.48 1751.51,687.48 1752.06,687.48 1752.62,687.48 1753.18,687.48 1753.74,687.48 1754.3,687.48 1754.86,687.48 1755.42,687.48 1755.98,687.48 1756.54,687.48 1757.1,687.48 1757.66,687.48 1758.22,687.48 1758.78,687.48 1759.34,687.48 1759.89,687.48 1760.45,687.48 1761.01,687.48 1761.57,687.48 1762.13,687.48 1762.69,687.48 1763.25,687.48 1763.81,687.48 1764.37,687.48 1764.93,687.48 1765.49,687.48 1766.05,687.48 1766.61,687.48 1767.16,687.48 1767.72,687.48 1768.28,687.48 1768.84,687.48 1769.4,687.48 1769.96,687.48 1770.52,687.48 1771.08,687.48 1771.64,687.48 1772.2,687.48 1772.76,687.48 1773.32,687.48 1773.88,687.48 1774.43,687.48 1774.99,687.48 1775.55,687.48 1776.11,687.48 1776.67,687.48 1777.23,687.48 1777.79,687.48 1778.35,687.48 1778.91,687.48 1779.47,687.48 1780.03,687.48 1780.59,687.48 1781.15,687.48 1781.71,687.48 1782.26,687.48 1782.82,687.48 1783.38,687.48 1783.94,687.48 1784.5,687.48 1785.06,687.48 1785.62,687.48 1786.18,687.48 1786.74,687.48 1787.3,687.48 1787.86,687.48 1788.42,687.48 1788.98,687.48 1789.53,687.48 1790.09,687.48 1790.65,687.48 1791.21,687.48 1791.77,687.48 1792.33,687.48 1792.89,687.48 1793.45,687.48 1794.01,687.48 1794.57,687.48 1795.13,687.48 1795.69,687.48 1796.25,687.48 1796.8,687.48 1797.36,687.48 1797.92,687.48 1798.48,687.48 1799.04,687.48 1799.6,687.48 1800.16,687.48 1800.72,687.48 1801.28,687.48 1801.84,687.48 1802.4,687.48 1802.96,687.48 1803.52,687.48 1804.08,687.48 1804.63,687.48 1805.19,687.48 1805.75,687.48 1806.31,687.48 1806.87,687.48 1807.43,687.48 1807.99,687.48 1808.55,687.48 1809.11,687.48 1809.67,687.48 1810.23,687.48 1810.79,687.48 1811.35,687.48 1811.9,687.48 1812.46,687.48 1813.02,687.48 1813.58,687.48 1814.14,687.48 1814.7,687.48 1815.26,687.48 1815.82,687.48 1816.38,687.48 1816.94,687.48 1817.5,687.48 1818.06,687.48 1818.62,687.48 1819.18,687.48 1819.73,687.48 1820.29,687.48 1820.85,687.48 1821.41,687.48 1821.97,687.48 1822.53,687.48 1823.09,687.48 1823.65,687.48 1824.21,687.48 1824.77,687.48 1825.33,687.48 1825.89,687.48 1826.45,687.48 1827,687.48 1827.56,687.48 1828.12,687.48 1828.68,687.48 1829.24,687.48 1829.8,687.48 1830.36,687.48 1830.92,687.48 1831.48,687.48 1832.04,687.48 1832.6,687.48 1833.16,687.48 1833.72,687.48 1834.27,687.48 1834.83,687.48 1835.39,687.48 1835.95,687.48 1836.51,687.48 1837.07,687.48 1837.63,687.48 1838.19,687.48 \"/>\n<path clip-path=\"url(#clip923)\" d=\"M720.247 684.386 L720.806 684.386 L721.365 684.386 L721.924 684.386 L722.484 684.386 L723.043 684.386 L723.602 684.386 L724.161 684.386 L724.721 684.386 L725.28 684.386 L725.839 684.386 L726.398 684.386 L726.958 684.386 L727.517 684.386 L728.076 684.386 L728.635 684.386 L729.195 684.386 L729.754 684.386 L730.313 684.386 L730.872 684.386 L731.432 684.386 L731.991 684.386 L732.55 684.386 L733.109 684.386 L733.669 684.386 L734.228 684.386 L734.787 684.386 L735.346 684.386 L735.906 684.386 L736.465 684.386 L737.024 684.386 L737.583 684.386 L738.143 684.386 L738.702 684.386 L739.261 684.386 L739.82 684.386 L740.38 684.386 L740.939 684.386 L741.498 684.386 L742.057 684.386 L742.617 684.386 L743.176 684.386 L743.735 684.386 L744.294 684.386 L744.854 684.386 L745.413 684.386 L745.972 684.386 L746.531 684.386 L747.091 684.386 L747.65 684.386 L748.209 684.386 L748.768 684.386 L749.328 684.386 L749.887 684.386 L750.446 684.386 L751.005 684.386 L751.565 684.386 L752.124 684.386 L752.683 684.386 L753.242 684.386 L753.802 684.386 L754.361 684.386 L754.92 684.386 L755.479 684.386 L756.039 684.386 L756.598 684.386 L757.157 684.386 L757.716 684.386 L758.276 684.386 L758.835 684.386 L759.394 684.386 L759.953 684.386 L760.513 684.386 L761.072 684.386 L761.631 684.386 L762.19 684.386 L762.75 684.386 L763.309 684.386 L763.868 684.386 L764.427 684.386 L764.987 684.386 L765.546 684.386 L766.105 684.386 L766.664 684.386 L767.224 684.386 L767.783 684.386 L768.342 684.386 L768.901 684.386 L769.461 684.386 L770.02 684.386 L770.579 684.386 L771.138 684.386 L771.698 684.386 L772.257 684.386 L772.816 684.386 L773.375 684.386 L773.935 684.386 L774.494 684.386 L775.053 684.386 L775.612 684.386 L776.172 684.386 L776.731 684.386 L777.29 684.386 L777.849 684.386 L778.409 684.386 L778.968 684.386 L779.527 684.386 L780.086 684.386 L780.646 684.386 L781.205 684.386 L781.764 684.386 L782.323 684.386 L782.883 684.386 L783.442 684.386 L784.001 684.386 L784.56 684.386 L785.12 684.386 L785.679 684.386 L786.238 684.386 L786.797 684.386 L787.357 684.386 L787.916 684.386 L788.475 684.386 L789.034 684.386 L789.594 684.386 L790.153 684.386 L790.712 684.386 L791.271 684.386 L791.831 684.386 L792.39 684.386 L792.949 684.386 L793.508 684.386 L794.068 684.386 L794.627 684.386 L795.186 684.386 L795.745 684.386 L796.305 684.386 L796.864 684.386 L797.423 684.386 L797.982 684.386 L798.542 684.386 L799.101 684.386 L799.66 684.386 L800.219 684.386 L800.779 684.386 L801.338 684.386 L801.897 684.386 L802.456 684.386 L803.016 684.386 L803.575 684.386 L804.134 684.386 L804.693 684.386 L805.253 684.386 L805.812 684.386 L806.371 684.386 L806.931 684.386 L807.49 684.386 L808.049 684.386 L808.608 684.386 L809.168 684.386 L809.727 684.386 L810.286 684.386 L810.845 684.386 L811.405 684.386 L811.964 684.386 L812.523 684.386 L813.082 684.386 L813.642 684.386 L814.201 684.386 L814.76 684.386 L815.319 684.386 L815.879 684.386 L816.438 684.386 L816.997 684.386 L817.556 684.386 L818.116 684.386 L818.675 684.386 L819.234 684.386 L819.793 684.386 L820.353 684.386 L820.912 684.386 L821.471 684.386 L822.03 684.386 L822.59 684.386 L823.149 684.386 L823.708 684.386 L824.267 684.386 L824.827 684.386 L825.386 684.386 L825.945 684.386 L826.504 684.386 L827.064 684.386 L827.623 684.386 L828.182 684.386 L828.741 684.386 L829.301 684.386 L829.86 684.386 L830.419 684.386 L830.978 684.386 L831.538 684.386 L832.097 684.386 L832.656 684.386 L833.215 684.386 L833.775 684.386 L834.334 684.386 L834.893 684.386 L835.452 684.386 L836.012 684.386 L836.571 684.386 L837.13 684.386 L837.689 684.386 L838.249 684.386 L838.808 684.386 L839.367 684.386 L839.926 684.386 L840.486 684.386 L841.045 684.386 L841.604 684.386 L842.163 684.386 L842.723 684.386 L843.282 684.386 L843.841 684.386 L844.4 684.386 L844.96 684.386 L845.519 684.386 L846.078 684.386 L846.637 684.386 L847.197 684.386 L847.756 684.386 L848.315 684.386 L848.874 684.386 L849.434 684.386 L849.993 684.386 L850.552 684.386 L851.111 684.386 L851.671 684.386 L852.23 684.386 L852.789 684.386 L853.348 684.386 L853.908 684.386 L854.467 684.386 L855.026 684.386 L855.585 684.386 L856.145 684.386 L856.704 684.386 L857.263 684.386 L857.822 684.386 L858.382 684.386 L858.941 684.386 L859.5 684.386 L860.059 684.386 L860.619 684.386 L861.178 684.386 L861.737 684.386 L862.296 684.386 L862.856 684.386 L863.415 684.386 L863.974 684.386 L864.533 684.386 L865.093 684.386 L865.652 684.386 L866.211 684.386 L866.77 684.386 L867.33 684.386 L867.889 684.386 L868.448 684.386 L869.007 684.386 L869.567 684.386 L870.126 684.386 L870.685 684.386 L871.244 684.386 L871.804 684.386 L872.363 684.386 L872.922 684.386 L873.481 684.386 L874.041 684.386 L874.6 684.386 L875.159 684.386 L875.718 684.386 L876.278 684.386 L876.837 684.386 L877.396 684.386 L877.955 684.386 L878.515 684.386 L879.074 684.386 L879.633 684.386 L880.192 684.386 L880.752 684.386 L881.311 684.386 L881.87 684.386 L882.429 684.386 L882.989 684.386 L883.548 684.386 L884.107 684.386 L884.666 684.386 L885.226 684.386 L885.785 684.386 L886.344 684.386 L886.903 684.386 L887.463 684.386 L888.022 684.386 L888.581 684.386 L889.14 684.386 L889.7 684.386 L890.259 684.386 L890.818 684.386 L891.377 684.386 L891.937 684.386 L892.496 684.386 L893.055 684.386 L893.614 684.386 L894.174 684.386 L894.733 684.386 L895.292 684.386 L895.851 684.386 L896.411 684.386 L896.97 684.386 L897.529 684.386 L898.088 684.386 L898.648 684.386 L899.207 684.386 L899.766 684.386 L900.325 684.386 L900.885 684.386 L901.444 684.386 L902.003 684.386 L902.562 684.386 L903.122 684.386 L903.681 684.386 L904.24 684.386 L904.799 684.386 L905.359 684.386 L905.918 684.386 L906.477 684.386 L907.036 684.386 L907.596 684.386 L908.155 684.386 L908.714 684.386 L909.273 684.386 L909.833 684.386 L910.392 684.386 L910.951 684.386 L911.51 684.386 L912.07 684.386 L912.629 684.386 L913.188 684.386 L913.747 684.386 L914.307 684.386 L914.866 684.386 L915.425 684.386 L915.984 684.386 L916.544 684.386 L917.103 684.386 L917.662 684.386 L918.221 684.386 L918.781 684.386 L919.34 684.386 L919.899 684.386 L920.458 684.386 L921.018 684.386 L921.577 684.386 L922.136 684.386 L922.695 684.386 L923.255 684.386 L923.814 684.386 L924.373 684.386 L924.932 684.386 L925.492 684.386 L926.051 684.386 L926.61 684.386 L927.169 684.386 L927.729 684.386 L928.288 684.386 L928.847 684.386 L929.406 684.386 L929.966 684.386 L930.525 684.386 L931.084 684.386 L931.644 684.386 L932.203 684.386 L932.762 684.386 L933.321 684.386 L933.881 684.386 L934.44 684.386 L934.999 684.386 L935.558 684.386 L936.118 684.386 L936.677 684.386 L937.236 684.386 L937.795 684.386 L938.355 684.386 L938.914 684.386 L939.473 684.386 L940.032 684.386 L940.592 684.386 L941.151 684.386 L941.71 684.386 L942.269 684.386 L942.829 684.386 L943.388 684.386 L943.947 684.386 L944.506 684.386 L945.066 684.386 L945.625 684.386 L946.184 684.386 L946.743 684.386 L947.303 684.386 L947.862 684.386 L948.421 684.386 L948.98 684.386 L949.54 684.386 L950.099 684.386 L950.658 684.386 L951.217 684.386 L951.777 684.386 L952.336 684.386 L952.895 684.386 L953.454 684.386 L954.014 684.386 L954.573 684.386 L955.132 684.386 L955.691 684.386 L956.251 684.386 L956.81 684.386 L957.369 684.386 L957.928 684.386 L958.488 684.386 L959.047 684.386 L959.606 684.386 L960.165 684.386 L960.725 684.386 L961.284 684.386 L961.843 684.386 L962.402 684.386 L962.962 684.386 L963.521 684.386 L964.08 684.386 L964.639 684.386 L965.199 684.386 L965.758 684.386 L966.317 684.386 L966.876 684.386 L967.436 684.386 L967.995 684.386 L968.554 684.386 L969.113 684.386 L969.673 684.386 L970.232 684.386 L970.791 684.386 L971.35 684.386 L971.91 684.386 L972.469 684.386 L973.028 684.386 L973.587 684.386 L974.147 684.386 L974.706 684.386 L975.265 684.386 L975.824 684.386 L976.384 684.386 L976.943 684.386 L977.502 684.386 L978.061 684.386 L978.621 684.386 L979.18 684.386 L979.739 684.386 L980.298 684.386 L980.858 684.386 L981.417 684.386 L981.976 684.386 L982.535 684.386 L983.095 684.386 L983.654 684.386 L984.213 684.386 L984.772 684.386 L985.332 684.386 L985.891 684.386 L986.45 684.386 L987.009 684.386 L987.569 684.386 L988.128 684.386 L988.687 684.386 L989.246 684.386 L989.806 684.386 L990.365 684.386 L990.924 684.386 L991.483 684.386 L992.043 684.386 L992.602 684.386 L993.161 684.386 L993.72 684.386 L994.28 684.386 L994.839 684.386 L995.398 684.386 L995.957 684.386 L996.517 684.386 L997.076 684.386 L997.635 684.386 L998.194 684.386 L998.754 684.386 L999.313 684.386 L999.872 684.386 L1000.43 684.386 L1000.99 684.386 L1001.55 684.386 L1002.11 684.386 L1002.67 684.386 L1003.23 684.386 L1003.79 684.386 L1004.35 684.386 L1004.91 684.386 L1005.46 684.386 L1006.02 684.386 L1006.58 684.386 L1007.14 684.386 L1007.7 684.386 L1008.26 684.386 L1008.82 684.386 L1009.38 684.386 L1009.94 684.386 L1010.5 684.386 L1011.06 684.386 L1011.62 684.386 L1012.18 684.386 L1012.73 684.386 L1013.29 684.386 L1013.85 684.386 L1014.41 684.386 L1014.97 684.386 L1015.53 684.386 L1016.09 684.386 L1016.65 684.386 L1017.21 684.386 L1017.77 684.386 L1018.33 684.386 L1018.89 684.386 L1019.45 684.386 L1020.01 684.386 L1020.56 684.386 L1021.12 684.386 L1021.68 684.386 L1022.24 684.386 L1022.8 684.386 L1023.36 684.386 L1023.92 684.386 L1024.48 684.386 L1025.04 684.386 L1025.6 684.386 L1026.16 684.386 L1026.72 684.386 L1027.28 684.386 L1027.83 684.386 L1028.39 684.386 L1028.95 684.386 L1029.51 684.386 L1030.07 684.386 L1030.63 684.386 L1031.19 684.386 L1031.75 684.386 L1032.31 684.386 L1032.87 684.386 L1033.43 684.386 L1033.99 684.386 L1034.55 684.386 L1035.1 684.386 L1035.66 684.386 L1036.22 684.386 L1036.78 684.386 L1037.34 684.386 L1037.9 684.386 L1038.46 684.386 L1039.02 684.386 L1039.58 684.386 L1040.14 684.386 L1040.7 684.386 L1041.26 684.386 L1041.82 684.386 L1042.38 684.386 L1042.93 684.386 L1043.49 684.386 L1044.05 684.386 L1044.61 684.386 L1045.17 684.386 L1045.73 684.386 L1046.29 684.386 L1046.85 684.386 L1047.41 684.386 L1047.97 684.386 L1048.53 684.386 L1049.09 684.386 L1049.65 684.386 L1050.2 684.386 L1050.76 684.386 L1051.32 684.386 L1051.88 684.386 L1052.44 684.386 L1053 684.386 L1053.56 684.386 L1054.12 684.386 L1054.68 684.386 L1055.24 684.386 L1055.8 684.386 L1056.36 684.386 L1056.92 684.386 L1057.48 684.386 L1058.03 684.386 L1058.59 684.386 L1059.15 684.386 L1059.71 684.386 L1060.27 684.386 L1060.83 684.386 L1061.39 684.386 L1061.95 684.386 L1062.51 684.386 L1063.07 684.386 L1063.63 684.386 L1064.19 684.386 L1064.75 684.386 L1065.3 684.386 L1065.86 684.386 L1066.42 684.386 L1066.98 684.386 L1067.54 684.386 L1068.1 684.386 L1068.66 684.386 L1069.22 684.386 L1069.78 684.386 L1070.34 684.386 L1070.9 684.386 L1071.46 684.386 L1072.02 684.386 L1072.57 684.386 L1073.13 684.386 L1073.69 684.386 L1074.25 684.386 L1074.81 684.386 L1075.37 684.386 L1075.93 684.386 L1076.49 684.386 L1077.05 684.386 L1077.61 684.386 L1078.17 684.386 L1078.73 684.386 L1079.29 684.386 L1079.85 684.386 L1080.4 684.386 L1080.96 684.386 L1081.52 684.386 L1082.08 684.386 L1082.64 684.386 L1083.2 684.386 L1083.76 684.386 L1084.32 684.386 L1084.88 684.386 L1085.44 684.386 L1086 684.386 L1086.56 684.386 L1087.12 684.386 L1087.67 684.386 L1088.23 684.386 L1088.79 684.386 L1089.35 684.386 L1089.91 684.386 L1090.47 684.386 L1091.03 684.386 L1091.59 684.386 L1092.15 684.386 L1092.71 684.386 L1093.27 684.386 L1093.83 684.386 L1094.39 684.386 L1094.94 684.386 L1095.5 684.386 L1096.06 684.386 L1096.62 684.386 L1097.18 684.386 L1097.74 684.386 L1098.3 684.386 L1098.86 684.386 L1099.42 684.386 L1099.98 684.386 L1100.54 684.386 L1101.1 684.386 L1101.66 684.386 L1102.22 684.386 L1102.77 684.386 L1103.33 684.386 L1103.89 684.386 L1104.45 684.386 L1105.01 684.386 L1105.57 684.386 L1106.13 684.386 L1106.69 684.386 L1107.25 684.386 L1107.81 684.386 L1108.37 684.386 L1108.93 684.386 L1109.49 684.386 L1110.04 684.386 L1110.6 684.386 L1111.16 684.386 L1111.72 684.386 L1112.28 684.386 L1112.84 684.386 L1113.4 684.386 L1113.96 684.386 L1114.52 684.386 L1115.08 684.386 L1115.64 684.386 L1116.2 684.386 L1116.76 684.386 L1117.31 684.386 L1117.87 684.386 L1118.43 684.386 L1118.99 684.386 L1119.55 684.386 L1120.11 684.386 L1120.67 684.386 L1121.23 684.386 L1121.79 684.386 L1122.35 684.386 L1122.91 684.386 L1123.47 684.386 L1124.03 684.386 L1124.59 684.386 L1125.14 684.386 L1125.7 684.386 L1126.26 684.386 L1126.82 684.386 L1127.38 684.386 L1127.94 684.386 L1128.5 684.386 L1129.06 684.386 L1129.62 684.386 L1130.18 684.386 L1130.74 684.386 L1131.3 684.386 L1131.86 684.386 L1132.41 684.386 L1132.97 684.386 L1133.53 684.386 L1134.09 684.386 L1134.65 684.386 L1135.21 684.386 L1135.77 684.386 L1136.33 684.386 L1136.89 684.386 L1137.45 684.386 L1138.01 684.386 L1138.57 684.386 L1139.13 684.386 L1139.68 684.386 L1140.24 684.386 L1140.8 684.386 L1141.36 684.386 L1141.92 684.386 L1142.48 684.386 L1143.04 684.386 L1143.6 684.386 L1144.16 684.386 L1144.72 684.386 L1145.28 684.386 L1145.84 684.386 L1146.4 684.386 L1146.96 684.386 L1147.51 684.386 L1148.07 684.386 L1148.63 684.386 L1149.19 684.386 L1149.75 684.386 L1150.31 684.386 L1150.87 684.386 L1151.43 684.386 L1151.99 684.386 L1152.55 684.386 L1153.11 684.386 L1153.67 684.386 L1154.23 684.386 L1154.78 684.386 L1155.34 684.386 L1155.9 684.386 L1156.46 684.386 L1157.02 684.386 L1157.58 684.386 L1158.14 684.386 L1158.7 684.386 L1159.26 684.386 L1159.82 684.386 L1160.38 684.386 L1160.94 684.386 L1161.5 684.386 L1162.05 684.386 L1162.61 684.386 L1163.17 684.386 L1163.73 684.386 L1164.29 684.386 L1164.85 684.386 L1165.41 684.386 L1165.97 684.386 L1166.53 684.386 L1167.09 684.386 L1167.65 684.386 L1168.21 684.386 L1168.77 684.386 L1169.33 684.386 L1169.88 684.386 L1170.44 684.386 L1171 684.386 L1171.56 684.386 L1172.12 684.386 L1172.68 684.386 L1173.24 684.386 L1173.8 684.386 L1174.36 684.386 L1174.92 684.386 L1175.48 684.386 L1176.04 684.386 L1176.6 684.386 L1177.15 684.386 L1177.71 684.386 L1178.27 684.386 L1178.83 684.386 L1179.39 684.386 L1179.95 684.386 L1180.51 684.386 L1181.07 684.386 L1181.63 684.386 L1182.19 684.386 L1182.75 684.386 L1183.31 684.386 L1183.87 684.386 L1184.43 684.386 L1184.98 684.386 L1185.54 684.386 L1186.1 684.386 L1186.66 684.386 L1187.22 684.386 L1187.78 684.386 L1188.34 684.386 L1188.9 684.386 L1189.46 684.386 L1190.02 684.386 L1190.58 684.386 L1191.14 684.386 L1191.7 684.386 L1192.25 684.386 L1192.81 684.386 L1193.37 684.386 L1193.93 684.386 L1194.49 684.386 L1195.05 684.386 L1195.61 684.386 L1196.17 684.386 L1196.73 684.386 L1197.29 684.386 L1197.85 684.386 L1198.41 684.386 L1198.97 684.386 L1199.52 684.386 L1200.08 684.386 L1200.64 684.386 L1201.2 684.386 L1201.76 684.386 L1202.32 684.386 L1202.88 684.386 L1203.44 684.386 L1204 684.386 L1204.56 684.386 L1205.12 684.386 L1205.68 684.386 L1206.24 684.386 L1206.8 684.386 L1207.35 684.386 L1207.91 684.386 L1208.47 684.386 L1209.03 684.386 L1209.59 684.386 L1210.15 684.386 L1210.71 684.386 L1211.27 684.386 L1211.83 684.386 L1212.39 684.386 L1212.95 684.386 L1213.51 684.386 L1214.07 684.386 L1214.62 684.386 L1215.18 684.386 L1215.74 684.386 L1216.3 684.386 L1216.86 684.386 L1217.42 684.386 L1217.98 684.386 L1218.54 684.386 L1219.1 684.386 L1219.66 684.386 L1220.22 684.386 L1220.78 684.386 L1221.34 684.386 L1221.89 684.386 L1222.45 684.386 L1223.01 684.386 L1223.57 684.386 L1224.13 684.386 L1224.69 684.386 L1225.25 684.386 L1225.81 684.386 L1226.37 684.386 L1226.93 684.386 L1227.49 684.386 L1228.05 684.386 L1228.61 684.386 L1229.17 684.386 L1229.72 684.386 L1230.28 684.386 L1230.84 684.386 L1231.4 684.386 L1231.96 684.386 L1232.52 684.386 L1233.08 684.386 L1233.64 684.386 L1234.2 684.386 L1234.76 684.386 L1235.32 684.386 L1235.88 684.386 L1236.44 684.386 L1236.99 684.386 L1237.55 684.386 L1238.11 684.386 L1238.67 684.386 L1239.23 684.386 L1239.79 684.386 L1240.35 684.386 L1240.91 684.386 L1241.47 684.386 L1242.03 684.386 L1242.59 684.386 L1243.15 684.386 L1243.71 684.386 L1244.26 684.386 L1244.82 684.386 L1245.38 684.386 L1245.94 684.386 L1246.5 684.386 L1247.06 684.386 L1247.62 684.386 L1248.18 684.386 L1248.74 684.386 L1249.3 684.386 L1249.86 684.386 L1250.42 684.386 L1250.98 684.386 L1251.54 684.386 L1252.09 684.386 L1252.65 684.386 L1253.21 684.386 L1253.77 684.386 L1254.33 684.386 L1254.89 684.386 L1255.45 684.386 L1256.01 684.386 L1256.57 684.386 L1257.13 684.386 L1257.69 684.386 L1258.25 684.386 L1258.81 684.386 L1259.36 684.386 L1259.92 684.386 L1260.48 684.386 L1261.04 684.386 L1261.6 684.386 L1262.16 684.386 L1262.72 684.386 L1263.28 684.386 L1263.84 684.386 L1264.4 684.386 L1264.96 684.386 L1265.52 684.386 L1266.08 684.386 L1266.63 684.386 L1267.19 684.386 L1267.75 684.386 L1268.31 684.386 L1268.87 684.386 L1269.43 684.386 L1269.99 684.386 L1270.55 684.386 L1271.11 684.386 L1271.67 684.386 L1272.23 684.386 L1272.79 684.386 L1273.35 684.386 L1273.91 684.386 L1274.46 684.386 L1275.02 684.386 L1275.58 684.386 L1276.14 684.386 L1276.7 684.386 L1277.26 684.386 L1277.82 684.386 L1278.38 684.386 L1278.94 684.386 L1279.5 684.386 L1280.06 684.386 L1280.62 684.386 L1281.18 684.386 L1281.73 684.386 L1282.29 684.386 L1282.85 684.386 L1283.41 684.386 L1283.97 684.386 L1284.53 684.386 L1285.09 684.386 L1285.65 684.386 L1286.21 684.386 L1286.77 684.386 L1287.33 684.386 L1287.89 684.386 L1288.45 684.386 L1289 684.386 L1289.56 684.386 L1290.12 684.386 L1290.68 684.386 L1291.24 684.386 L1291.8 684.386 L1292.36 684.386 L1292.92 684.386 L1293.48 684.386 L1294.04 684.386 L1294.6 684.386 L1295.16 684.386 L1295.72 684.386 L1296.28 684.386 L1296.83 684.386 L1297.39 684.386 L1297.95 684.386 L1298.51 684.386 L1299.07 684.386 L1299.63 684.386 L1300.19 684.386 L1300.75 684.386 L1301.31 684.386 L1301.87 684.386 L1302.43 684.386 L1302.99 684.386 L1303.55 684.386 L1304.1 684.386 L1304.66 684.386 L1305.22 684.386 L1305.78 684.386 L1306.34 684.386 L1306.9 684.386 L1307.46 684.386 L1308.02 684.386 L1308.58 684.386 L1309.14 684.386 L1309.7 684.386 L1310.26 684.386 L1310.82 684.386 L1311.38 684.386 L1311.93 684.386 L1312.49 684.386 L1313.05 684.386 L1313.61 684.386 L1314.17 684.386 L1314.73 684.386 L1315.29 684.386 L1315.85 684.386 L1316.41 684.386 L1316.97 684.386 L1317.53 684.386 L1318.09 684.386 L1318.65 684.386 L1319.2 684.386 L1319.76 684.386 L1320.32 684.386 L1320.88 684.386 L1321.44 684.386 L1322 684.386 L1322.56 684.386 L1323.12 684.386 L1323.68 684.386 L1324.24 684.386 L1324.8 684.386 L1325.36 684.386 L1325.92 684.386 L1326.47 684.386 L1327.03 684.386 L1327.59 684.386 L1328.15 684.386 L1328.71 684.386 L1329.27 684.386 L1329.83 684.386 L1330.39 684.386 L1330.95 684.386 L1331.51 684.386 L1332.07 684.386 L1332.63 684.386 L1333.19 684.386 L1333.75 684.386 L1334.3 684.386 L1334.86 684.386 L1335.42 684.386 L1335.98 684.386 L1336.54 684.386 L1337.1 684.386 L1337.66 684.386 L1338.22 684.386 L1338.78 684.386 L1339.34 684.386 L1339.9 684.386 L1340.46 684.386 L1341.02 684.386 L1341.57 684.386 L1342.13 684.386 L1342.69 684.386 L1343.25 684.386 L1343.81 684.386 L1344.37 684.386 L1344.93 684.386 L1345.49 684.386 L1346.05 684.386 L1346.61 684.386 L1347.17 684.386 L1347.73 684.386 L1348.29 684.386 L1348.84 684.386 L1349.4 684.386 L1349.96 684.386 L1350.52 684.386 L1351.08 684.386 L1351.64 684.386 L1352.2 684.386 L1352.76 684.386 L1353.32 684.386 L1353.88 684.386 L1354.44 684.386 L1355 684.386 L1355.56 684.386 L1356.12 684.386 L1356.67 684.386 L1357.23 684.386 L1357.79 684.386 L1358.35 684.386 L1358.91 684.386 L1359.47 684.386 L1360.03 684.386 L1360.59 684.386 L1361.15 684.386 L1361.71 684.386 L1362.27 684.386 L1362.83 684.386 L1363.39 684.386 L1363.94 684.386 L1364.5 684.386 L1365.06 684.386 L1365.62 684.386 L1366.18 684.386 L1366.74 684.386 L1367.3 684.386 L1367.86 684.386 L1368.42 684.386 L1368.98 684.386 L1369.54 684.386 L1370.1 684.386 L1370.66 684.386 L1371.21 684.386 L1371.77 684.386 L1372.33 684.386 L1372.89 684.386 L1373.45 684.386 L1374.01 684.386 L1374.57 684.386 L1375.13 684.386 L1375.69 684.386 L1376.25 684.386 L1376.81 684.386 L1377.37 684.386 L1377.93 684.386 L1378.49 684.386 L1379.04 684.386 L1379.6 684.386 L1380.16 684.386 L1380.72 684.386 L1381.28 684.386 L1381.84 684.386 L1382.4 684.386 L1382.96 684.386 L1383.52 684.386 L1384.08 684.386 L1384.64 684.386 L1385.2 684.386 L1385.76 684.386 L1386.31 684.386 L1386.87 684.386 L1387.43 684.386 L1387.99 684.386 L1388.55 684.386 L1389.11 684.386 L1389.67 684.386 L1390.23 684.386 L1390.79 684.386 L1391.35 684.386 L1391.91 684.386 L1392.47 684.386 L1393.03 684.386 L1393.58 684.386 L1394.14 684.386 L1394.7 684.386 L1395.26 684.386 L1395.82 684.386 L1396.38 684.386 L1396.94 684.386 L1397.5 684.386 L1398.06 684.386 L1398.62 684.386 L1399.18 684.386 L1399.74 684.386 L1400.3 684.386 L1400.86 684.386 L1401.41 684.386 L1401.97 684.386 L1402.53 684.386 L1403.09 684.386 L1403.65 684.386 L1404.21 684.386 L1404.77 684.386 L1405.33 684.386 L1405.89 684.386 L1406.45 684.386 L1407.01 684.386 L1407.57 684.386 L1408.13 684.386 L1408.68 684.386 L1409.24 684.386 L1409.8 684.386 L1410.36 684.386 L1410.92 684.386 L1411.48 684.386 L1412.04 684.386 L1412.6 684.386 L1413.16 684.386 L1413.72 684.386 L1414.28 684.386 L1414.84 684.386 L1415.4 684.386 L1415.95 684.386 L1416.51 684.386 L1417.07 684.386 L1417.63 684.386 L1418.19 684.386 L1418.75 684.386 L1419.31 684.386 L1419.87 684.386 L1420.43 684.386 L1420.99 684.386 L1421.55 684.386 L1422.11 684.386 L1422.67 684.386 L1423.23 684.386 L1423.78 684.386 L1424.34 684.386 L1424.9 684.386 L1425.46 684.386 L1426.02 684.386 L1426.58 684.386 L1427.14 684.386 L1427.7 684.386 L1428.26 684.386 L1428.82 684.386 L1429.38 684.386 L1429.94 684.386 L1430.5 684.386 L1431.05 684.386 L1431.61 684.386 L1432.17 684.386 L1432.73 684.386 L1433.29 684.386 L1433.85 684.386 L1434.41 684.386 L1434.97 684.386 L1435.53 684.386 L1436.09 684.386 L1436.65 684.386 L1437.21 684.386 L1437.77 684.386 L1438.33 684.386 L1438.88 684.386 L1439.44 684.386 L1440 684.386 L1440.56 684.386 L1441.12 684.386 L1441.68 684.386 L1442.24 684.386 L1442.8 684.386 L1443.36 684.386 L1443.92 684.386 L1444.48 684.386 L1445.04 684.386 L1445.6 684.386 L1446.15 684.386 L1446.71 684.386 L1447.27 684.386 L1447.83 684.386 L1448.39 684.386 L1448.95 684.386 L1449.51 684.386 L1450.07 684.386 L1450.63 684.386 L1451.19 684.386 L1451.75 684.386 L1452.31 684.386 L1452.87 684.386 L1453.42 684.386 L1453.98 684.386 L1454.54 684.386 L1455.1 684.386 L1455.66 684.386 L1456.22 684.386 L1456.78 684.386 L1457.34 684.386 L1457.9 684.386 L1458.46 684.386 L1459.02 684.386 L1459.58 684.386 L1460.14 684.386 L1460.7 684.386 L1461.25 684.386 L1461.81 684.386 L1462.37 684.386 L1462.93 684.386 L1463.49 684.386 L1464.05 684.386 L1464.61 684.386 L1465.17 684.386 L1465.73 684.386 L1466.29 684.386 L1466.85 684.386 L1467.41 684.386 L1467.97 684.386 L1468.52 684.386 L1469.08 684.386 L1469.64 684.386 L1470.2 684.386 L1470.76 684.386 L1471.32 684.386 L1471.88 684.386 L1472.44 684.386 L1473 684.386 L1473.56 684.386 L1474.12 684.386 L1474.68 684.386 L1475.24 684.386 L1475.79 684.386 L1476.35 684.386 L1476.91 684.386 L1477.47 684.386 L1478.03 684.386 L1478.59 684.386 L1479.15 684.386 L1479.71 684.386 L1480.27 684.386 L1480.83 684.386 L1481.39 684.386 L1481.95 684.386 L1482.51 684.386 L1483.07 684.386 L1483.62 684.386 L1484.18 684.386 L1484.74 684.386 L1485.3 684.386 L1485.86 684.386 L1486.42 684.386 L1486.98 684.386 L1487.54 684.386 L1488.1 684.386 L1488.66 684.386 L1489.22 684.386 L1489.78 684.386 L1490.34 684.386 L1490.89 684.386 L1491.45 684.386 L1492.01 684.386 L1492.57 684.386 L1493.13 684.386 L1493.69 684.386 L1494.25 684.386 L1494.81 684.386 L1495.37 684.386 L1495.93 684.386 L1496.49 684.386 L1497.05 684.386 L1497.61 684.386 L1498.16 684.386 L1498.72 684.386 L1499.28 684.386 L1499.84 684.386 L1500.4 684.386 L1500.96 684.386 L1501.52 684.386 L1502.08 684.386 L1502.64 684.386 L1503.2 684.386 L1503.76 684.386 L1504.32 684.386 L1504.88 684.386 L1505.44 684.386 L1505.99 684.386 L1506.55 684.386 L1507.11 684.386 L1507.67 684.386 L1508.23 684.386 L1508.79 684.386 L1509.35 684.386 L1509.91 684.386 L1510.47 684.386 L1511.03 684.386 L1511.59 684.386 L1512.15 684.386 L1512.71 684.386 L1513.26 684.386 L1513.82 684.386 L1514.38 684.386 L1514.94 684.386 L1515.5 684.386 L1516.06 684.386 L1516.62 684.386 L1517.18 684.386 L1517.74 684.386 L1518.3 684.386 L1518.86 684.386 L1519.42 684.386 L1519.98 684.386 L1520.53 684.386 L1521.09 684.386 L1521.65 684.386 L1522.21 684.386 L1522.77 684.386 L1523.33 684.386 L1523.89 684.386 L1524.45 684.386 L1525.01 684.386 L1525.57 684.386 L1526.13 684.386 L1526.69 684.386 L1527.25 684.386 L1527.81 684.386 L1528.36 684.386 L1528.92 684.386 L1529.48 684.386 L1530.04 684.386 L1530.6 684.386 L1531.16 684.386 L1531.72 684.386 L1532.28 684.386 L1532.84 684.386 L1533.4 684.386 L1533.96 684.386 L1534.52 684.386 L1535.08 684.386 L1535.63 684.386 L1536.19 684.386 L1536.75 684.386 L1537.31 684.386 L1537.87 684.386 L1538.43 684.386 L1538.99 684.386 L1539.55 684.386 L1540.11 684.386 L1540.67 684.386 L1541.23 684.386 L1541.79 684.386 L1542.35 684.386 L1542.9 684.386 L1543.46 684.386 L1544.02 684.386 L1544.58 684.386 L1545.14 684.386 L1545.7 684.386 L1546.26 684.386 L1546.82 684.386 L1547.38 684.386 L1547.94 684.386 L1548.5 684.386 L1549.06 684.386 L1549.62 684.386 L1550.18 684.386 L1550.73 684.386 L1551.29 684.386 L1551.85 684.386 L1552.41 684.386 L1552.97 684.386 L1553.53 684.386 L1554.09 684.386 L1554.65 684.386 L1555.21 684.386 L1555.77 684.386 L1556.33 684.386 L1556.89 684.386 L1557.45 684.386 L1558 684.386 L1558.56 684.386 L1559.12 684.386 L1559.68 684.386 L1560.24 684.386 L1560.8 684.386 L1561.36 684.386 L1561.92 684.386 L1562.48 684.386 L1563.04 684.386 L1563.6 684.386 L1564.16 684.386 L1564.72 684.386 L1565.28 684.386 L1565.83 684.386 L1566.39 684.386 L1566.95 684.386 L1567.51 684.386 L1568.07 684.386 L1568.63 684.386 L1569.19 684.386 L1569.75 684.386 L1570.31 684.386 L1570.87 684.386 L1571.43 684.386 L1571.99 684.386 L1572.55 684.386 L1573.1 684.386 L1573.66 684.386 L1574.22 684.386 L1574.78 684.386 L1575.34 684.386 L1575.9 684.386 L1576.46 684.386 L1577.02 684.386 L1577.58 684.386 L1578.14 684.386 L1578.7 684.386 L1579.26 684.386 L1579.82 684.386 L1580.37 684.386 L1580.93 684.386 L1581.49 684.386 L1582.05 684.386 L1582.61 684.386 L1583.17 684.386 L1583.73 684.386 L1584.29 684.386 L1584.85 684.386 L1585.41 684.386 L1585.97 684.386 L1586.53 684.386 L1587.09 684.386 L1587.65 684.386 L1588.2 684.386 L1588.76 684.386 L1589.32 684.386 L1589.88 684.386 L1590.44 684.386 L1591 684.386 L1591.56 684.386 L1592.12 684.386 L1592.68 684.386 L1593.24 684.386 L1593.8 684.386 L1594.36 684.386 L1594.92 684.386 L1595.47 684.386 L1596.03 684.386 L1596.59 684.386 L1597.15 684.386 L1597.71 684.386 L1598.27 684.386 L1598.83 684.386 L1599.39 684.386 L1599.95 684.386 L1600.51 684.386 L1601.07 684.386 L1601.63 684.386 L1602.19 684.386 L1602.74 684.386 L1603.3 684.386 L1603.86 684.386 L1604.42 684.386 L1604.98 684.386 L1605.54 684.386 L1606.1 684.386 L1606.66 684.386 L1607.22 684.386 L1607.78 684.386 L1608.34 684.386 L1608.9 684.386 L1609.46 684.386 L1610.02 684.386 L1610.57 684.386 L1611.13 684.386 L1611.69 684.386 L1612.25 684.386 L1612.81 684.386 L1613.37 684.386 L1613.93 684.386 L1614.49 684.386 L1615.05 684.386 L1615.61 684.386 L1616.17 684.386 L1616.73 684.386 L1617.29 684.386 L1617.84 684.386 L1618.4 684.386 L1618.96 684.386 L1619.52 684.386 L1620.08 684.386 L1620.64 684.386 L1621.2 684.386 L1621.76 684.386 L1622.32 684.386 L1622.88 684.386 L1623.44 684.386 L1624 684.386 L1624.56 684.386 L1625.11 684.386 L1625.67 684.386 L1626.23 684.386 L1626.79 684.386 L1627.35 684.386 L1627.91 684.386 L1628.47 684.386 L1629.03 684.386 L1629.59 684.386 L1630.15 684.386 L1630.71 684.386 L1631.27 684.386 L1631.83 684.386 L1632.39 684.386 L1632.94 684.386 L1633.5 684.386 L1634.06 684.386 L1634.62 684.386 L1635.18 684.386 L1635.74 684.386 L1636.3 684.386 L1636.86 684.386 L1637.42 684.386 L1637.98 684.386 L1638.54 684.386 L1639.1 684.386 L1639.66 684.386 L1640.21 684.386 L1640.77 684.386 L1641.33 684.386 L1641.89 684.386 L1642.45 684.386 L1643.01 684.386 L1643.57 684.386 L1644.13 684.386 L1644.69 684.386 L1645.25 684.386 L1645.81 684.386 L1646.37 684.386 L1646.93 684.386 L1647.48 684.386 L1648.04 684.386 L1648.6 684.386 L1649.16 684.386 L1649.72 684.386 L1650.28 684.386 L1650.84 684.386 L1651.4 684.386 L1651.96 684.386 L1652.52 684.386 L1653.08 684.386 L1653.64 684.386 L1654.2 684.386 L1654.76 684.386 L1655.31 684.386 L1655.87 684.386 L1656.43 684.386 L1656.99 684.386 L1657.55 684.386 L1658.11 684.386 L1658.67 684.386 L1659.23 684.386 L1659.79 684.386 L1660.35 684.386 L1660.91 684.386 L1661.47 684.386 L1662.03 684.386 L1662.58 684.386 L1663.14 684.386 L1663.7 684.386 L1664.26 684.386 L1664.82 684.386 L1665.38 684.386 L1665.94 684.386 L1666.5 684.386 L1667.06 684.386 L1667.62 684.386 L1668.18 684.386 L1668.74 684.386 L1669.3 684.386 L1669.85 684.386 L1670.41 684.386 L1670.97 684.386 L1671.53 684.386 L1672.09 684.386 L1672.65 684.386 L1673.21 684.386 L1673.77 684.386 L1674.33 684.386 L1674.89 684.386 L1675.45 684.386 L1676.01 684.386 L1676.57 684.386 L1677.13 684.386 L1677.68 684.386 L1678.24 684.386 L1678.8 684.386 L1679.36 684.386 L1679.92 684.386 L1680.48 684.386 L1681.04 684.386 L1681.6 684.386 L1682.16 684.386 L1682.72 684.386 L1683.28 684.386 L1683.84 684.386 L1684.4 684.386 L1684.95 684.386 L1685.51 684.386 L1686.07 684.386 L1686.63 684.386 L1687.19 684.386 L1687.75 684.386 L1688.31 684.386 L1688.87 684.386 L1689.43 684.386 L1689.99 684.386 L1690.55 684.386 L1691.11 684.386 L1691.67 684.386 L1692.23 684.386 L1692.78 684.386 L1693.34 684.386 L1693.9 684.386 L1694.46 684.386 L1695.02 684.386 L1695.58 684.386 L1696.14 684.386 L1696.7 684.386 L1697.26 684.386 L1697.82 684.386 L1698.38 684.386 L1698.94 684.386 L1699.5 684.386 L1700.05 684.386 L1700.61 684.386 L1701.17 684.386 L1701.73 684.386 L1702.29 684.386 L1702.85 684.386 L1703.41 684.386 L1703.97 684.386 L1704.53 684.386 L1705.09 684.386 L1705.65 684.386 L1706.21 684.386 L1706.77 684.386 L1707.32 684.386 L1707.88 684.386 L1708.44 684.386 L1709 684.386 L1709.56 684.386 L1710.12 684.386 L1710.68 684.386 L1711.24 684.386 L1711.8 684.386 L1712.36 684.386 L1712.92 684.386 L1713.48 684.386 L1714.04 684.386 L1714.6 684.386 L1715.15 684.386 L1715.71 684.386 L1716.27 684.386 L1716.83 684.386 L1717.39 684.386 L1717.95 684.386 L1718.51 684.386 L1719.07 684.386 L1719.63 684.386 L1720.19 684.386 L1720.75 684.386 L1721.31 684.386 L1721.87 684.386 L1722.42 684.386 L1722.98 684.386 L1723.54 684.386 L1724.1 684.386 L1724.66 684.386 L1725.22 684.386 L1725.78 684.386 L1726.34 684.386 L1726.9 684.386 L1727.46 684.386 L1728.02 684.386 L1728.58 684.386 L1729.14 684.386 L1729.69 684.386 L1730.25 684.386 L1730.81 684.386 L1731.37 684.386 L1731.93 684.386 L1732.49 684.386 L1733.05 684.386 L1733.61 684.386 L1734.17 684.386 L1734.73 684.386 L1735.29 684.386 L1735.85 684.386 L1736.41 684.386 L1736.97 684.386 L1737.52 684.386 L1738.08 684.386 L1738.64 684.386 L1739.2 684.386 L1739.76 684.386 L1740.32 684.386 L1740.88 684.386 L1741.44 684.386 L1742 684.386 L1742.56 684.386 L1743.12 684.386 L1743.68 684.386 L1744.24 684.386 L1744.79 684.386 L1745.35 684.386 L1745.91 684.386 L1746.47 684.386 L1747.03 684.386 L1747.59 684.386 L1748.15 684.386 L1748.71 684.386 L1749.27 684.386 L1749.83 684.386 L1750.39 684.386 L1750.95 684.386 L1751.51 684.386 L1752.06 684.386 L1752.62 684.386 L1753.18 684.386 L1753.74 684.386 L1754.3 684.386 L1754.86 684.386 L1755.42 684.386 L1755.98 684.386 L1756.54 684.386 L1757.1 684.386 L1757.66 684.386 L1758.22 684.386 L1758.78 684.386 L1759.34 684.386 L1759.89 684.386 L1760.45 684.386 L1761.01 684.386 L1761.57 684.386 L1762.13 684.386 L1762.69 684.386 L1763.25 684.386 L1763.81 684.386 L1764.37 684.386 L1764.93 684.386 L1765.49 684.386 L1766.05 684.386 L1766.61 684.386 L1767.16 684.386 L1767.72 684.386 L1768.28 684.386 L1768.84 684.386 L1769.4 684.386 L1769.96 684.386 L1770.52 684.386 L1771.08 684.386 L1771.64 684.386 L1772.2 684.386 L1772.76 684.386 L1773.32 684.386 L1773.88 684.386 L1774.43 684.386 L1774.99 684.386 L1775.55 684.386 L1776.11 684.386 L1776.67 684.386 L1777.23 684.386 L1777.79 684.386 L1778.35 684.386 L1778.91 684.386 L1779.47 684.386 L1780.03 684.386 L1780.59 684.386 L1781.15 684.386 L1781.71 684.386 L1782.26 684.386 L1782.82 684.386 L1783.38 684.386 L1783.94 684.386 L1784.5 684.386 L1785.06 684.386 L1785.62 684.386 L1786.18 684.386 L1786.74 684.386 L1787.3 684.386 L1787.86 684.386 L1788.42 684.386 L1788.98 684.386 L1789.53 684.386 L1790.09 684.386 L1790.65 684.386 L1791.21 684.386 L1791.77 684.386 L1792.33 684.386 L1792.89 684.386 L1793.45 684.386 L1794.01 684.386 L1794.57 684.386 L1795.13 684.386 L1795.69 684.386 L1796.25 684.386 L1796.8 684.386 L1797.36 684.386 L1797.92 684.386 L1798.48 684.386 L1799.04 684.386 L1799.6 684.386 L1800.16 684.386 L1800.72 684.386 L1801.28 684.386 L1801.84 684.386 L1802.4 684.386 L1802.96 684.386 L1803.52 684.386 L1804.08 684.386 L1804.63 684.386 L1805.19 684.386 L1805.75 684.386 L1806.31 684.386 L1806.87 684.386 L1807.43 684.386 L1807.99 684.386 L1808.55 684.386 L1809.11 684.386 L1809.67 684.386 L1810.23 684.386 L1810.79 684.386 L1811.35 684.386 L1811.9 684.386 L1812.46 684.386 L1813.02 684.386 L1813.58 684.386 L1814.14 684.386 L1814.7 684.386 L1815.26 684.386 L1815.82 684.386 L1816.38 684.386 L1816.94 684.386 L1817.5 684.386 L1818.06 684.386 L1818.62 684.386 L1819.18 684.386 L1819.73 684.386 L1820.29 684.386 L1820.85 684.386 L1821.41 684.386 L1821.97 684.386 L1822.53 684.386 L1823.09 684.386 L1823.65 684.386 L1824.21 684.386 L1824.77 684.386 L1825.33 684.386 L1825.89 684.386 L1826.45 684.386 L1827 684.386 L1827.56 684.386 L1828.12 684.386 L1828.68 684.386 L1829.24 684.386 L1829.8 684.386 L1830.36 684.386 L1830.92 684.386 L1831.48 684.386 L1832.04 684.386 L1832.6 684.386 L1833.16 684.386 L1833.72 684.386 L1834.27 684.386 L1834.83 684.386 L1835.39 684.386 L1835.95 684.386 L1836.51 684.386 L1837.07 684.386 L1837.63 684.386 L1838.19 684.386 L1838.19 682.473 L1837.63 682.473 L1837.07 682.473 L1836.51 682.473 L1835.95 682.473 L1835.39 682.473 L1834.83 682.473 L1834.27 682.473 L1833.72 682.473 L1833.16 682.473 L1832.6 682.473 L1832.04 682.473 L1831.48 682.473 L1830.92 682.473 L1830.36 682.473 L1829.8 682.473 L1829.24 682.473 L1828.68 682.473 L1828.12 682.473 L1827.56 682.473 L1827 682.473 L1826.45 682.473 L1825.89 682.473 L1825.33 682.473 L1824.77 682.473 L1824.21 682.473 L1823.65 682.473 L1823.09 682.473 L1822.53 682.473 L1821.97 682.473 L1821.41 682.473 L1820.85 682.473 L1820.29 682.473 L1819.73 682.473 L1819.18 682.473 L1818.62 682.473 L1818.06 682.473 L1817.5 682.473 L1816.94 682.473 L1816.38 682.473 L1815.82 682.473 L1815.26 682.473 L1814.7 682.473 L1814.14 682.473 L1813.58 682.473 L1813.02 682.473 L1812.46 682.473 L1811.9 682.473 L1811.35 682.473 L1810.79 682.473 L1810.23 682.473 L1809.67 682.473 L1809.11 682.473 L1808.55 682.473 L1807.99 682.473 L1807.43 682.473 L1806.87 682.473 L1806.31 682.473 L1805.75 682.473 L1805.19 682.473 L1804.63 682.473 L1804.08 682.473 L1803.52 682.473 L1802.96 682.473 L1802.4 682.473 L1801.84 682.473 L1801.28 682.473 L1800.72 682.473 L1800.16 682.473 L1799.6 682.473 L1799.04 682.473 L1798.48 682.473 L1797.92 682.473 L1797.36 682.473 L1796.8 682.473 L1796.25 682.473 L1795.69 682.473 L1795.13 682.473 L1794.57 682.473 L1794.01 682.473 L1793.45 682.473 L1792.89 682.473 L1792.33 682.473 L1791.77 682.473 L1791.21 682.473 L1790.65 682.473 L1790.09 682.473 L1789.53 682.473 L1788.98 682.473 L1788.42 682.473 L1787.86 682.473 L1787.3 682.473 L1786.74 682.473 L1786.18 682.473 L1785.62 682.473 L1785.06 682.473 L1784.5 682.473 L1783.94 682.473 L1783.38 682.473 L1782.82 682.473 L1782.26 682.473 L1781.71 682.473 L1781.15 682.473 L1780.59 682.473 L1780.03 682.473 L1779.47 682.473 L1778.91 682.473 L1778.35 682.473 L1777.79 682.473 L1777.23 682.473 L1776.67 682.473 L1776.11 682.473 L1775.55 682.473 L1774.99 682.473 L1774.43 682.473 L1773.88 682.473 L1773.32 682.473 L1772.76 682.473 L1772.2 682.473 L1771.64 682.473 L1771.08 682.473 L1770.52 682.473 L1769.96 682.473 L1769.4 682.473 L1768.84 682.473 L1768.28 682.473 L1767.72 682.473 L1767.16 682.473 L1766.61 682.473 L1766.05 682.473 L1765.49 682.473 L1764.93 682.473 L1764.37 682.473 L1763.81 682.473 L1763.25 682.473 L1762.69 682.473 L1762.13 682.473 L1761.57 682.473 L1761.01 682.473 L1760.45 682.473 L1759.89 682.473 L1759.34 682.473 L1758.78 682.473 L1758.22 682.473 L1757.66 682.473 L1757.1 682.473 L1756.54 682.473 L1755.98 682.473 L1755.42 682.473 L1754.86 682.473 L1754.3 682.473 L1753.74 682.473 L1753.18 682.473 L1752.62 682.473 L1752.06 682.473 L1751.51 682.473 L1750.95 682.473 L1750.39 682.473 L1749.83 682.473 L1749.27 682.473 L1748.71 682.473 L1748.15 682.473 L1747.59 682.473 L1747.03 682.473 L1746.47 682.473 L1745.91 682.473 L1745.35 682.473 L1744.79 682.473 L1744.24 682.473 L1743.68 682.473 L1743.12 682.473 L1742.56 682.473 L1742 682.473 L1741.44 682.473 L1740.88 682.473 L1740.32 682.473 L1739.76 682.473 L1739.2 682.473 L1738.64 682.473 L1738.08 682.473 L1737.52 682.473 L1736.97 682.473 L1736.41 682.473 L1735.85 682.473 L1735.29 682.473 L1734.73 682.473 L1734.17 682.473 L1733.61 682.473 L1733.05 682.473 L1732.49 682.473 L1731.93 682.473 L1731.37 682.473 L1730.81 682.473 L1730.25 682.473 L1729.69 682.473 L1729.14 682.473 L1728.58 682.473 L1728.02 682.473 L1727.46 682.473 L1726.9 682.473 L1726.34 682.473 L1725.78 682.473 L1725.22 682.473 L1724.66 682.473 L1724.1 682.473 L1723.54 682.473 L1722.98 682.473 L1722.42 682.473 L1721.87 682.473 L1721.31 682.473 L1720.75 682.473 L1720.19 682.473 L1719.63 682.473 L1719.07 682.473 L1718.51 682.473 L1717.95 682.473 L1717.39 682.473 L1716.83 682.473 L1716.27 682.473 L1715.71 682.473 L1715.15 682.473 L1714.6 682.473 L1714.04 682.473 L1713.48 682.473 L1712.92 682.473 L1712.36 682.473 L1711.8 682.473 L1711.24 682.473 L1710.68 682.473 L1710.12 682.473 L1709.56 682.473 L1709 682.473 L1708.44 682.473 L1707.88 682.473 L1707.32 682.473 L1706.77 682.473 L1706.21 682.473 L1705.65 682.473 L1705.09 682.473 L1704.53 682.473 L1703.97 682.473 L1703.41 682.473 L1702.85 682.473 L1702.29 682.473 L1701.73 682.473 L1701.17 682.473 L1700.61 682.473 L1700.05 682.473 L1699.5 682.473 L1698.94 682.473 L1698.38 682.473 L1697.82 682.473 L1697.26 682.473 L1696.7 682.473 L1696.14 682.473 L1695.58 682.473 L1695.02 682.473 L1694.46 682.473 L1693.9 682.473 L1693.34 682.473 L1692.78 682.473 L1692.23 682.473 L1691.67 682.473 L1691.11 682.473 L1690.55 682.473 L1689.99 682.473 L1689.43 682.473 L1688.87 682.473 L1688.31 682.473 L1687.75 682.473 L1687.19 682.473 L1686.63 682.473 L1686.07 682.473 L1685.51 682.473 L1684.95 682.473 L1684.4 682.473 L1683.84 682.473 L1683.28 682.473 L1682.72 682.473 L1682.16 682.473 L1681.6 682.473 L1681.04 682.473 L1680.48 682.473 L1679.92 682.473 L1679.36 682.473 L1678.8 682.473 L1678.24 682.473 L1677.68 682.473 L1677.13 682.473 L1676.57 682.473 L1676.01 682.473 L1675.45 682.473 L1674.89 682.473 L1674.33 682.473 L1673.77 682.473 L1673.21 682.473 L1672.65 682.473 L1672.09 682.473 L1671.53 682.473 L1670.97 682.473 L1670.41 682.473 L1669.85 682.473 L1669.3 682.473 L1668.74 682.473 L1668.18 682.473 L1667.62 682.473 L1667.06 682.473 L1666.5 682.473 L1665.94 682.473 L1665.38 682.473 L1664.82 682.473 L1664.26 682.473 L1663.7 682.473 L1663.14 682.473 L1662.58 682.473 L1662.03 682.473 L1661.47 682.473 L1660.91 682.473 L1660.35 682.473 L1659.79 682.473 L1659.23 682.473 L1658.67 682.473 L1658.11 682.473 L1657.55 682.473 L1656.99 682.473 L1656.43 682.473 L1655.87 682.473 L1655.31 682.473 L1654.76 682.473 L1654.2 682.473 L1653.64 682.473 L1653.08 682.473 L1652.52 682.473 L1651.96 682.473 L1651.4 682.473 L1650.84 682.473 L1650.28 682.473 L1649.72 682.473 L1649.16 682.473 L1648.6 682.473 L1648.04 682.473 L1647.48 682.473 L1646.93 682.473 L1646.37 682.473 L1645.81 682.473 L1645.25 682.473 L1644.69 682.473 L1644.13 682.473 L1643.57 682.473 L1643.01 682.473 L1642.45 682.473 L1641.89 682.473 L1641.33 682.473 L1640.77 682.473 L1640.21 682.473 L1639.66 682.473 L1639.1 682.473 L1638.54 682.473 L1637.98 682.473 L1637.42 682.473 L1636.86 682.473 L1636.3 682.473 L1635.74 682.473 L1635.18 682.473 L1634.62 682.473 L1634.06 682.473 L1633.5 682.473 L1632.94 682.473 L1632.39 682.473 L1631.83 682.473 L1631.27 682.473 L1630.71 682.473 L1630.15 682.473 L1629.59 682.473 L1629.03 682.473 L1628.47 682.473 L1627.91 682.473 L1627.35 682.473 L1626.79 682.473 L1626.23 682.473 L1625.67 682.473 L1625.11 682.473 L1624.56 682.473 L1624 682.473 L1623.44 682.473 L1622.88 682.473 L1622.32 682.473 L1621.76 682.473 L1621.2 682.473 L1620.64 682.473 L1620.08 682.473 L1619.52 682.473 L1618.96 682.473 L1618.4 682.473 L1617.84 682.473 L1617.29 682.473 L1616.73 682.473 L1616.17 682.473 L1615.61 682.473 L1615.05 682.473 L1614.49 682.473 L1613.93 682.473 L1613.37 682.473 L1612.81 682.473 L1612.25 682.473 L1611.69 682.473 L1611.13 682.473 L1610.57 682.473 L1610.02 682.473 L1609.46 682.473 L1608.9 682.473 L1608.34 682.473 L1607.78 682.473 L1607.22 682.473 L1606.66 682.473 L1606.1 682.473 L1605.54 682.473 L1604.98 682.473 L1604.42 682.473 L1603.86 682.473 L1603.3 682.473 L1602.74 682.473 L1602.19 682.473 L1601.63 682.473 L1601.07 682.473 L1600.51 682.473 L1599.95 682.473 L1599.39 682.473 L1598.83 682.473 L1598.27 682.473 L1597.71 682.473 L1597.15 682.473 L1596.59 682.473 L1596.03 682.473 L1595.47 682.473 L1594.92 682.473 L1594.36 682.473 L1593.8 682.473 L1593.24 682.473 L1592.68 682.473 L1592.12 682.473 L1591.56 682.473 L1591 682.473 L1590.44 682.473 L1589.88 682.473 L1589.32 682.473 L1588.76 682.473 L1588.2 682.473 L1587.65 682.473 L1587.09 682.473 L1586.53 682.473 L1585.97 682.473 L1585.41 682.473 L1584.85 682.473 L1584.29 682.473 L1583.73 682.473 L1583.17 682.473 L1582.61 682.473 L1582.05 682.473 L1581.49 682.473 L1580.93 682.473 L1580.37 682.473 L1579.82 682.473 L1579.26 682.473 L1578.7 682.473 L1578.14 682.473 L1577.58 682.473 L1577.02 682.473 L1576.46 682.473 L1575.9 682.473 L1575.34 682.473 L1574.78 682.473 L1574.22 682.473 L1573.66 682.473 L1573.1 682.473 L1572.55 682.473 L1571.99 682.473 L1571.43 682.473 L1570.87 682.473 L1570.31 682.473 L1569.75 682.473 L1569.19 682.473 L1568.63 682.473 L1568.07 682.473 L1567.51 682.473 L1566.95 682.473 L1566.39 682.473 L1565.83 682.473 L1565.28 682.473 L1564.72 682.473 L1564.16 682.473 L1563.6 682.473 L1563.04 682.473 L1562.48 682.473 L1561.92 682.473 L1561.36 682.473 L1560.8 682.473 L1560.24 682.473 L1559.68 682.473 L1559.12 682.473 L1558.56 682.473 L1558 682.473 L1557.45 682.473 L1556.89 682.473 L1556.33 682.473 L1555.77 682.473 L1555.21 682.473 L1554.65 682.473 L1554.09 682.473 L1553.53 682.473 L1552.97 682.473 L1552.41 682.473 L1551.85 682.473 L1551.29 682.473 L1550.73 682.473 L1550.18 682.473 L1549.62 682.473 L1549.06 682.473 L1548.5 682.473 L1547.94 682.473 L1547.38 682.473 L1546.82 682.473 L1546.26 682.473 L1545.7 682.473 L1545.14 682.473 L1544.58 682.473 L1544.02 682.473 L1543.46 682.473 L1542.9 682.473 L1542.35 682.473 L1541.79 682.473 L1541.23 682.473 L1540.67 682.473 L1540.11 682.473 L1539.55 682.473 L1538.99 682.473 L1538.43 682.473 L1537.87 682.473 L1537.31 682.473 L1536.75 682.473 L1536.19 682.473 L1535.63 682.473 L1535.08 682.473 L1534.52 682.473 L1533.96 682.473 L1533.4 682.473 L1532.84 682.473 L1532.28 682.473 L1531.72 682.473 L1531.16 682.473 L1530.6 682.473 L1530.04 682.473 L1529.48 682.473 L1528.92 682.473 L1528.36 682.473 L1527.81 682.473 L1527.25 682.473 L1526.69 682.473 L1526.13 682.473 L1525.57 682.473 L1525.01 682.473 L1524.45 682.473 L1523.89 682.473 L1523.33 682.473 L1522.77 682.473 L1522.21 682.473 L1521.65 682.473 L1521.09 682.473 L1520.53 682.473 L1519.98 682.473 L1519.42 682.473 L1518.86 682.473 L1518.3 682.473 L1517.74 682.473 L1517.18 682.473 L1516.62 682.473 L1516.06 682.473 L1515.5 682.473 L1514.94 682.473 L1514.38 682.473 L1513.82 682.473 L1513.26 682.473 L1512.71 682.473 L1512.15 682.473 L1511.59 682.473 L1511.03 682.473 L1510.47 682.473 L1509.91 682.473 L1509.35 682.473 L1508.79 682.473 L1508.23 682.473 L1507.67 682.473 L1507.11 682.473 L1506.55 682.473 L1505.99 682.473 L1505.44 682.473 L1504.88 682.473 L1504.32 682.473 L1503.76 682.473 L1503.2 682.473 L1502.64 682.473 L1502.08 682.473 L1501.52 682.473 L1500.96 682.473 L1500.4 682.473 L1499.84 682.473 L1499.28 682.473 L1498.72 682.473 L1498.16 682.473 L1497.61 682.473 L1497.05 682.473 L1496.49 682.473 L1495.93 682.473 L1495.37 682.473 L1494.81 682.473 L1494.25 682.473 L1493.69 682.473 L1493.13 682.473 L1492.57 682.473 L1492.01 682.473 L1491.45 682.473 L1490.89 682.473 L1490.34 682.473 L1489.78 682.473 L1489.22 682.473 L1488.66 682.473 L1488.1 682.473 L1487.54 682.473 L1486.98 682.473 L1486.42 682.473 L1485.86 682.473 L1485.3 682.473 L1484.74 682.473 L1484.18 682.473 L1483.62 682.473 L1483.07 682.473 L1482.51 682.473 L1481.95 682.473 L1481.39 682.473 L1480.83 682.473 L1480.27 682.473 L1479.71 682.473 L1479.15 682.473 L1478.59 682.473 L1478.03 682.473 L1477.47 682.473 L1476.91 682.473 L1476.35 682.473 L1475.79 682.473 L1475.24 682.473 L1474.68 682.473 L1474.12 682.473 L1473.56 682.473 L1473 682.473 L1472.44 682.473 L1471.88 682.473 L1471.32 682.473 L1470.76 682.473 L1470.2 682.473 L1469.64 682.473 L1469.08 682.473 L1468.52 682.473 L1467.97 682.473 L1467.41 682.473 L1466.85 682.473 L1466.29 682.473 L1465.73 682.473 L1465.17 682.473 L1464.61 682.473 L1464.05 682.473 L1463.49 682.473 L1462.93 682.473 L1462.37 682.473 L1461.81 682.473 L1461.25 682.473 L1460.7 682.473 L1460.14 682.473 L1459.58 682.473 L1459.02 682.473 L1458.46 682.473 L1457.9 682.473 L1457.34 682.473 L1456.78 682.473 L1456.22 682.473 L1455.66 682.473 L1455.1 682.473 L1454.54 682.473 L1453.98 682.473 L1453.42 682.473 L1452.87 682.473 L1452.31 682.473 L1451.75 682.473 L1451.19 682.473 L1450.63 682.473 L1450.07 682.473 L1449.51 682.473 L1448.95 682.473 L1448.39 682.473 L1447.83 682.473 L1447.27 682.473 L1446.71 682.473 L1446.15 682.473 L1445.6 682.473 L1445.04 682.473 L1444.48 682.473 L1443.92 682.473 L1443.36 682.473 L1442.8 682.473 L1442.24 682.473 L1441.68 682.473 L1441.12 682.473 L1440.56 682.473 L1440 682.473 L1439.44 682.473 L1438.88 682.473 L1438.33 682.473 L1437.77 682.473 L1437.21 682.473 L1436.65 682.473 L1436.09 682.473 L1435.53 682.473 L1434.97 682.473 L1434.41 682.473 L1433.85 682.473 L1433.29 682.473 L1432.73 682.473 L1432.17 682.473 L1431.61 682.473 L1431.05 682.473 L1430.5 682.473 L1429.94 682.473 L1429.38 682.473 L1428.82 682.473 L1428.26 682.473 L1427.7 682.473 L1427.14 682.473 L1426.58 682.473 L1426.02 682.473 L1425.46 682.473 L1424.9 682.473 L1424.34 682.473 L1423.78 682.473 L1423.23 682.473 L1422.67 682.473 L1422.11 682.473 L1421.55 682.473 L1420.99 682.473 L1420.43 682.473 L1419.87 682.473 L1419.31 682.473 L1418.75 682.473 L1418.19 682.473 L1417.63 682.473 L1417.07 682.473 L1416.51 682.473 L1415.95 682.473 L1415.4 682.473 L1414.84 682.473 L1414.28 682.473 L1413.72 682.473 L1413.16 682.473 L1412.6 682.473 L1412.04 682.473 L1411.48 682.473 L1410.92 682.473 L1410.36 682.473 L1409.8 682.473 L1409.24 682.473 L1408.68 682.473 L1408.13 682.473 L1407.57 682.473 L1407.01 682.473 L1406.45 682.473 L1405.89 682.473 L1405.33 682.473 L1404.77 682.473 L1404.21 682.473 L1403.65 682.473 L1403.09 682.473 L1402.53 682.473 L1401.97 682.473 L1401.41 682.473 L1400.86 682.473 L1400.3 682.473 L1399.74 682.473 L1399.18 682.473 L1398.62 682.473 L1398.06 682.473 L1397.5 682.473 L1396.94 682.473 L1396.38 682.473 L1395.82 682.473 L1395.26 682.473 L1394.7 682.473 L1394.14 682.473 L1393.58 682.473 L1393.03 682.473 L1392.47 682.473 L1391.91 682.473 L1391.35 682.473 L1390.79 682.473 L1390.23 682.473 L1389.67 682.473 L1389.11 682.473 L1388.55 682.473 L1387.99 682.473 L1387.43 682.473 L1386.87 682.473 L1386.31 682.473 L1385.76 682.473 L1385.2 682.473 L1384.64 682.473 L1384.08 682.473 L1383.52 682.473 L1382.96 682.473 L1382.4 682.473 L1381.84 682.473 L1381.28 682.473 L1380.72 682.473 L1380.16 682.473 L1379.6 682.473 L1379.04 682.473 L1378.49 682.473 L1377.93 682.473 L1377.37 682.473 L1376.81 682.473 L1376.25 682.473 L1375.69 682.473 L1375.13 682.473 L1374.57 682.473 L1374.01 682.473 L1373.45 682.473 L1372.89 682.473 L1372.33 682.473 L1371.77 682.473 L1371.21 682.473 L1370.66 682.473 L1370.1 682.473 L1369.54 682.473 L1368.98 682.473 L1368.42 682.473 L1367.86 682.473 L1367.3 682.473 L1366.74 682.473 L1366.18 682.473 L1365.62 682.473 L1365.06 682.473 L1364.5 682.473 L1363.94 682.473 L1363.39 682.473 L1362.83 682.473 L1362.27 682.473 L1361.71 682.473 L1361.15 682.473 L1360.59 682.473 L1360.03 682.473 L1359.47 682.473 L1358.91 682.473 L1358.35 682.473 L1357.79 682.473 L1357.23 682.473 L1356.67 682.473 L1356.12 682.473 L1355.56 682.473 L1355 682.473 L1354.44 682.473 L1353.88 682.473 L1353.32 682.473 L1352.76 682.473 L1352.2 682.473 L1351.64 682.473 L1351.08 682.473 L1350.52 682.473 L1349.96 682.473 L1349.4 682.473 L1348.84 682.473 L1348.29 682.473 L1347.73 682.473 L1347.17 682.473 L1346.61 682.473 L1346.05 682.473 L1345.49 682.473 L1344.93 682.473 L1344.37 682.473 L1343.81 682.473 L1343.25 682.473 L1342.69 682.473 L1342.13 682.473 L1341.57 682.473 L1341.02 682.473 L1340.46 682.473 L1339.9 682.473 L1339.34 682.473 L1338.78 682.473 L1338.22 682.473 L1337.66 682.473 L1337.1 682.473 L1336.54 682.473 L1335.98 682.473 L1335.42 682.473 L1334.86 682.473 L1334.3 682.473 L1333.75 682.473 L1333.19 682.473 L1332.63 682.473 L1332.07 682.473 L1331.51 682.473 L1330.95 682.473 L1330.39 682.473 L1329.83 682.473 L1329.27 682.473 L1328.71 682.473 L1328.15 682.473 L1327.59 682.473 L1327.03 682.473 L1326.47 682.473 L1325.92 682.473 L1325.36 682.473 L1324.8 682.473 L1324.24 682.473 L1323.68 682.473 L1323.12 682.473 L1322.56 682.473 L1322 682.473 L1321.44 682.473 L1320.88 682.473 L1320.32 682.473 L1319.76 682.473 L1319.2 682.473 L1318.65 682.473 L1318.09 682.473 L1317.53 682.473 L1316.97 682.473 L1316.41 682.473 L1315.85 682.473 L1315.29 682.473 L1314.73 682.473 L1314.17 682.473 L1313.61 682.473 L1313.05 682.473 L1312.49 682.473 L1311.93 682.473 L1311.38 682.473 L1310.82 682.473 L1310.26 682.473 L1309.7 682.473 L1309.14 682.473 L1308.58 682.473 L1308.02 682.473 L1307.46 682.473 L1306.9 682.473 L1306.34 682.473 L1305.78 682.473 L1305.22 682.473 L1304.66 682.473 L1304.1 682.473 L1303.55 682.473 L1302.99 682.473 L1302.43 682.473 L1301.87 682.473 L1301.31 682.473 L1300.75 682.473 L1300.19 682.473 L1299.63 682.473 L1299.07 682.473 L1298.51 682.473 L1297.95 682.473 L1297.39 682.473 L1296.83 682.473 L1296.28 682.473 L1295.72 682.473 L1295.16 682.473 L1294.6 682.473 L1294.04 682.473 L1293.48 682.473 L1292.92 682.473 L1292.36 682.473 L1291.8 682.473 L1291.24 682.473 L1290.68 682.473 L1290.12 682.473 L1289.56 682.473 L1289 682.473 L1288.45 682.473 L1287.89 682.473 L1287.33 682.473 L1286.77 682.473 L1286.21 682.473 L1285.65 682.473 L1285.09 682.473 L1284.53 682.473 L1283.97 682.473 L1283.41 682.473 L1282.85 682.473 L1282.29 682.473 L1281.73 682.473 L1281.18 682.473 L1280.62 682.473 L1280.06 682.473 L1279.5 682.473 L1278.94 682.473 L1278.38 682.473 L1277.82 682.473 L1277.26 682.473 L1276.7 682.473 L1276.14 682.473 L1275.58 682.473 L1275.02 682.473 L1274.46 682.473 L1273.91 682.473 L1273.35 682.473 L1272.79 682.473 L1272.23 682.473 L1271.67 682.473 L1271.11 682.473 L1270.55 682.473 L1269.99 682.473 L1269.43 682.473 L1268.87 682.473 L1268.31 682.473 L1267.75 682.473 L1267.19 682.473 L1266.63 682.473 L1266.08 682.473 L1265.52 682.473 L1264.96 682.473 L1264.4 682.473 L1263.84 682.473 L1263.28 682.473 L1262.72 682.473 L1262.16 682.473 L1261.6 682.473 L1261.04 682.473 L1260.48 682.473 L1259.92 682.473 L1259.36 682.473 L1258.81 682.473 L1258.25 682.473 L1257.69 682.473 L1257.13 682.473 L1256.57 682.473 L1256.01 682.473 L1255.45 682.473 L1254.89 682.473 L1254.33 682.473 L1253.77 682.473 L1253.21 682.473 L1252.65 682.473 L1252.09 682.473 L1251.54 682.473 L1250.98 682.473 L1250.42 682.473 L1249.86 682.473 L1249.3 682.473 L1248.74 682.473 L1248.18 682.473 L1247.62 682.473 L1247.06 682.473 L1246.5 682.473 L1245.94 682.473 L1245.38 682.473 L1244.82 682.473 L1244.26 682.473 L1243.71 682.473 L1243.15 682.473 L1242.59 682.473 L1242.03 682.473 L1241.47 682.473 L1240.91 682.473 L1240.35 682.473 L1239.79 682.473 L1239.23 682.473 L1238.67 682.473 L1238.11 682.473 L1237.55 682.473 L1236.99 682.473 L1236.44 682.473 L1235.88 682.473 L1235.32 682.473 L1234.76 682.473 L1234.2 682.473 L1233.64 682.473 L1233.08 682.473 L1232.52 682.473 L1231.96 682.473 L1231.4 682.473 L1230.84 682.473 L1230.28 682.473 L1229.72 682.473 L1229.17 682.473 L1228.61 682.473 L1228.05 682.473 L1227.49 682.473 L1226.93 682.473 L1226.37 682.473 L1225.81 682.473 L1225.25 682.473 L1224.69 682.473 L1224.13 682.473 L1223.57 682.473 L1223.01 682.473 L1222.45 682.473 L1221.89 682.473 L1221.34 682.473 L1220.78 682.473 L1220.22 682.473 L1219.66 682.473 L1219.1 682.473 L1218.54 682.473 L1217.98 682.473 L1217.42 682.473 L1216.86 682.473 L1216.3 682.473 L1215.74 682.473 L1215.18 682.473 L1214.62 682.473 L1214.07 682.473 L1213.51 682.473 L1212.95 682.473 L1212.39 682.473 L1211.83 682.473 L1211.27 682.473 L1210.71 682.473 L1210.15 682.473 L1209.59 682.473 L1209.03 682.473 L1208.47 682.473 L1207.91 682.473 L1207.35 682.473 L1206.8 682.473 L1206.24 682.473 L1205.68 682.473 L1205.12 682.473 L1204.56 682.473 L1204 682.473 L1203.44 682.473 L1202.88 682.473 L1202.32 682.473 L1201.76 682.473 L1201.2 682.473 L1200.64 682.473 L1200.08 682.473 L1199.52 682.473 L1198.97 682.473 L1198.41 682.473 L1197.85 682.473 L1197.29 682.473 L1196.73 682.473 L1196.17 682.473 L1195.61 682.473 L1195.05 682.473 L1194.49 682.473 L1193.93 682.473 L1193.37 682.473 L1192.81 682.473 L1192.25 682.473 L1191.7 682.473 L1191.14 682.473 L1190.58 682.473 L1190.02 682.473 L1189.46 682.473 L1188.9 682.473 L1188.34 682.473 L1187.78 682.473 L1187.22 682.473 L1186.66 682.473 L1186.1 682.473 L1185.54 682.473 L1184.98 682.473 L1184.43 682.473 L1183.87 682.473 L1183.31 682.473 L1182.75 682.473 L1182.19 682.473 L1181.63 682.473 L1181.07 682.473 L1180.51 682.473 L1179.95 682.473 L1179.39 682.473 L1178.83 682.473 L1178.27 682.473 L1177.71 682.473 L1177.15 682.473 L1176.6 682.473 L1176.04 682.473 L1175.48 682.473 L1174.92 682.473 L1174.36 682.473 L1173.8 682.473 L1173.24 682.473 L1172.68 682.473 L1172.12 682.473 L1171.56 682.473 L1171 682.473 L1170.44 682.473 L1169.88 682.473 L1169.33 682.473 L1168.77 682.473 L1168.21 682.473 L1167.65 682.473 L1167.09 682.473 L1166.53 682.473 L1165.97 682.473 L1165.41 682.473 L1164.85 682.473 L1164.29 682.473 L1163.73 682.473 L1163.17 682.473 L1162.61 682.473 L1162.05 682.473 L1161.5 682.473 L1160.94 682.473 L1160.38 682.473 L1159.82 682.473 L1159.26 682.473 L1158.7 682.473 L1158.14 682.473 L1157.58 682.473 L1157.02 682.473 L1156.46 682.473 L1155.9 682.473 L1155.34 682.473 L1154.78 682.473 L1154.23 682.473 L1153.67 682.473 L1153.11 682.473 L1152.55 682.473 L1151.99 682.473 L1151.43 682.473 L1150.87 682.473 L1150.31 682.473 L1149.75 682.473 L1149.19 682.473 L1148.63 682.473 L1148.07 682.473 L1147.51 682.473 L1146.96 682.473 L1146.4 682.473 L1145.84 682.473 L1145.28 682.473 L1144.72 682.473 L1144.16 682.473 L1143.6 682.473 L1143.04 682.473 L1142.48 682.473 L1141.92 682.473 L1141.36 682.473 L1140.8 682.473 L1140.24 682.473 L1139.68 682.473 L1139.13 682.473 L1138.57 682.473 L1138.01 682.473 L1137.45 682.473 L1136.89 682.473 L1136.33 682.473 L1135.77 682.473 L1135.21 682.473 L1134.65 682.473 L1134.09 682.473 L1133.53 682.473 L1132.97 682.473 L1132.41 682.473 L1131.86 682.473 L1131.3 682.473 L1130.74 682.473 L1130.18 682.473 L1129.62 682.473 L1129.06 682.473 L1128.5 682.473 L1127.94 682.473 L1127.38 682.473 L1126.82 682.473 L1126.26 682.473 L1125.7 682.473 L1125.14 682.473 L1124.59 682.473 L1124.03 682.473 L1123.47 682.473 L1122.91 682.473 L1122.35 682.473 L1121.79 682.473 L1121.23 682.473 L1120.67 682.473 L1120.11 682.473 L1119.55 682.473 L1118.99 682.473 L1118.43 682.473 L1117.87 682.473 L1117.31 682.473 L1116.76 682.473 L1116.2 682.473 L1115.64 682.473 L1115.08 682.473 L1114.52 682.473 L1113.96 682.473 L1113.4 682.473 L1112.84 682.473 L1112.28 682.473 L1111.72 682.473 L1111.16 682.473 L1110.6 682.473 L1110.04 682.473 L1109.49 682.473 L1108.93 682.473 L1108.37 682.473 L1107.81 682.473 L1107.25 682.473 L1106.69 682.473 L1106.13 682.473 L1105.57 682.473 L1105.01 682.473 L1104.45 682.473 L1103.89 682.473 L1103.33 682.473 L1102.77 682.473 L1102.22 682.473 L1101.66 682.473 L1101.1 682.473 L1100.54 682.473 L1099.98 682.473 L1099.42 682.473 L1098.86 682.473 L1098.3 682.473 L1097.74 682.473 L1097.18 682.473 L1096.62 682.473 L1096.06 682.473 L1095.5 682.473 L1094.94 682.473 L1094.39 682.473 L1093.83 682.473 L1093.27 682.473 L1092.71 682.473 L1092.15 682.473 L1091.59 682.473 L1091.03 682.473 L1090.47 682.473 L1089.91 682.473 L1089.35 682.473 L1088.79 682.473 L1088.23 682.473 L1087.67 682.473 L1087.12 682.473 L1086.56 682.473 L1086 682.473 L1085.44 682.473 L1084.88 682.473 L1084.32 682.473 L1083.76 682.473 L1083.2 682.473 L1082.64 682.473 L1082.08 682.473 L1081.52 682.473 L1080.96 682.473 L1080.4 682.473 L1079.85 682.473 L1079.29 682.473 L1078.73 682.473 L1078.17 682.473 L1077.61 682.473 L1077.05 682.473 L1076.49 682.473 L1075.93 682.473 L1075.37 682.473 L1074.81 682.473 L1074.25 682.473 L1073.69 682.473 L1073.13 682.473 L1072.57 682.473 L1072.02 682.473 L1071.46 682.473 L1070.9 682.473 L1070.34 682.473 L1069.78 682.473 L1069.22 682.473 L1068.66 682.473 L1068.1 682.473 L1067.54 682.473 L1066.98 682.473 L1066.42 682.473 L1065.86 682.473 L1065.3 682.473 L1064.75 682.473 L1064.19 682.473 L1063.63 682.473 L1063.07 682.473 L1062.51 682.473 L1061.95 682.473 L1061.39 682.473 L1060.83 682.473 L1060.27 682.473 L1059.71 682.473 L1059.15 682.473 L1058.59 682.473 L1058.03 682.473 L1057.48 682.473 L1056.92 682.473 L1056.36 682.473 L1055.8 682.473 L1055.24 682.473 L1054.68 682.473 L1054.12 682.473 L1053.56 682.473 L1053 682.473 L1052.44 682.473 L1051.88 682.473 L1051.32 682.473 L1050.76 682.473 L1050.2 682.473 L1049.65 682.473 L1049.09 682.473 L1048.53 682.473 L1047.97 682.473 L1047.41 682.473 L1046.85 682.473 L1046.29 682.473 L1045.73 682.473 L1045.17 682.473 L1044.61 682.473 L1044.05 682.473 L1043.49 682.473 L1042.93 682.473 L1042.38 682.473 L1041.82 682.473 L1041.26 682.473 L1040.7 682.473 L1040.14 682.473 L1039.58 682.473 L1039.02 682.473 L1038.46 682.473 L1037.9 682.473 L1037.34 682.473 L1036.78 682.473 L1036.22 682.473 L1035.66 682.473 L1035.1 682.473 L1034.55 682.473 L1033.99 682.473 L1033.43 682.473 L1032.87 682.473 L1032.31 682.473 L1031.75 682.473 L1031.19 682.473 L1030.63 682.473 L1030.07 682.473 L1029.51 682.473 L1028.95 682.473 L1028.39 682.473 L1027.83 682.473 L1027.28 682.473 L1026.72 682.473 L1026.16 682.473 L1025.6 682.473 L1025.04 682.473 L1024.48 682.473 L1023.92 682.473 L1023.36 682.473 L1022.8 682.473 L1022.24 682.473 L1021.68 682.473 L1021.12 682.473 L1020.56 682.473 L1020.01 682.473 L1019.45 682.473 L1018.89 682.473 L1018.33 682.473 L1017.77 682.473 L1017.21 682.473 L1016.65 682.473 L1016.09 682.473 L1015.53 682.473 L1014.97 682.473 L1014.41 682.473 L1013.85 682.473 L1013.29 682.473 L1012.73 682.473 L1012.18 682.473 L1011.62 682.473 L1011.06 682.473 L1010.5 682.473 L1009.94 682.473 L1009.38 682.473 L1008.82 682.473 L1008.26 682.473 L1007.7 682.473 L1007.14 682.473 L1006.58 682.473 L1006.02 682.473 L1005.46 682.473 L1004.91 682.473 L1004.35 682.473 L1003.79 682.473 L1003.23 682.473 L1002.67 682.473 L1002.11 682.473 L1001.55 682.473 L1000.99 682.473 L1000.43 682.473 L999.872 682.473 L999.313 682.473 L998.754 682.473 L998.194 682.473 L997.635 682.473 L997.076 682.473 L996.517 682.473 L995.957 682.473 L995.398 682.473 L994.839 682.473 L994.28 682.473 L993.72 682.473 L993.161 682.473 L992.602 682.473 L992.043 682.473 L991.483 682.473 L990.924 682.473 L990.365 682.473 L989.806 682.473 L989.246 682.473 L988.687 682.473 L988.128 682.473 L987.569 682.473 L987.009 682.473 L986.45 682.473 L985.891 682.473 L985.332 682.473 L984.772 682.473 L984.213 682.473 L983.654 682.473 L983.095 682.473 L982.535 682.473 L981.976 682.473 L981.417 682.473 L980.858 682.473 L980.298 682.473 L979.739 682.473 L979.18 682.473 L978.621 682.473 L978.061 682.473 L977.502 682.473 L976.943 682.473 L976.384 682.473 L975.824 682.473 L975.265 682.473 L974.706 682.473 L974.147 682.473 L973.587 682.473 L973.028 682.473 L972.469 682.473 L971.91 682.473 L971.35 682.473 L970.791 682.473 L970.232 682.473 L969.673 682.473 L969.113 682.473 L968.554 682.473 L967.995 682.473 L967.436 682.473 L966.876 682.473 L966.317 682.473 L965.758 682.473 L965.199 682.473 L964.639 682.473 L964.08 682.473 L963.521 682.473 L962.962 682.473 L962.402 682.473 L961.843 682.473 L961.284 682.473 L960.725 682.473 L960.165 682.473 L959.606 682.473 L959.047 682.473 L958.488 682.473 L957.928 682.473 L957.369 682.473 L956.81 682.473 L956.251 682.473 L955.691 682.473 L955.132 682.473 L954.573 682.473 L954.014 682.473 L953.454 682.473 L952.895 682.473 L952.336 682.473 L951.777 682.473 L951.217 682.473 L950.658 682.473 L950.099 682.473 L949.54 682.473 L948.98 682.473 L948.421 682.473 L947.862 682.473 L947.303 682.473 L946.743 682.473 L946.184 682.473 L945.625 682.473 L945.066 682.473 L944.506 682.473 L943.947 682.473 L943.388 682.473 L942.829 682.473 L942.269 682.473 L941.71 682.473 L941.151 682.473 L940.592 682.473 L940.032 682.473 L939.473 682.473 L938.914 682.473 L938.355 682.473 L937.795 682.473 L937.236 682.473 L936.677 682.473 L936.118 682.473 L935.558 682.473 L934.999 682.473 L934.44 682.473 L933.881 682.473 L933.321 682.473 L932.762 682.473 L932.203 682.473 L931.644 682.473 L931.084 682.473 L930.525 682.473 L929.966 682.473 L929.406 682.473 L928.847 682.473 L928.288 682.473 L927.729 682.473 L927.169 682.473 L926.61 682.473 L926.051 682.473 L925.492 682.473 L924.932 682.473 L924.373 682.473 L923.814 682.473 L923.255 682.473 L922.695 682.473 L922.136 682.473 L921.577 682.473 L921.018 682.473 L920.458 682.473 L919.899 682.473 L919.34 682.473 L918.781 682.473 L918.221 682.473 L917.662 682.473 L917.103 682.473 L916.544 682.473 L915.984 682.473 L915.425 682.473 L914.866 682.473 L914.307 682.473 L913.747 682.473 L913.188 682.473 L912.629 682.473 L912.07 682.473 L911.51 682.473 L910.951 682.473 L910.392 682.473 L909.833 682.473 L909.273 682.473 L908.714 682.473 L908.155 682.473 L907.596 682.473 L907.036 682.473 L906.477 682.473 L905.918 682.473 L905.359 682.473 L904.799 682.473 L904.24 682.473 L903.681 682.473 L903.122 682.473 L902.562 682.473 L902.003 682.473 L901.444 682.473 L900.885 682.473 L900.325 682.473 L899.766 682.473 L899.207 682.473 L898.648 682.473 L898.088 682.473 L897.529 682.473 L896.97 682.473 L896.411 682.473 L895.851 682.473 L895.292 682.473 L894.733 682.473 L894.174 682.473 L893.614 682.473 L893.055 682.473 L892.496 682.473 L891.937 682.473 L891.377 682.473 L890.818 682.473 L890.259 682.473 L889.7 682.473 L889.14 682.473 L888.581 682.473 L888.022 682.473 L887.463 682.473 L886.903 682.473 L886.344 682.473 L885.785 682.473 L885.226 682.473 L884.666 682.473 L884.107 682.473 L883.548 682.473 L882.989 682.473 L882.429 682.473 L881.87 682.473 L881.311 682.473 L880.752 682.473 L880.192 682.473 L879.633 682.473 L879.074 682.473 L878.515 682.473 L877.955 682.473 L877.396 682.473 L876.837 682.473 L876.278 682.473 L875.718 682.473 L875.159 682.473 L874.6 682.473 L874.041 682.473 L873.481 682.473 L872.922 682.473 L872.363 682.473 L871.804 682.473 L871.244 682.473 L870.685 682.473 L870.126 682.473 L869.567 682.473 L869.007 682.473 L868.448 682.473 L867.889 682.473 L867.33 682.473 L866.77 682.473 L866.211 682.473 L865.652 682.473 L865.093 682.473 L864.533 682.473 L863.974 682.473 L863.415 682.473 L862.856 682.473 L862.296 682.473 L861.737 682.473 L861.178 682.473 L860.619 682.473 L860.059 682.473 L859.5 682.473 L858.941 682.473 L858.382 682.473 L857.822 682.473 L857.263 682.473 L856.704 682.473 L856.145 682.473 L855.585 682.473 L855.026 682.473 L854.467 682.473 L853.908 682.473 L853.348 682.473 L852.789 682.473 L852.23 682.473 L851.671 682.473 L851.111 682.473 L850.552 682.473 L849.993 682.473 L849.434 682.473 L848.874 682.473 L848.315 682.473 L847.756 682.473 L847.197 682.473 L846.637 682.473 L846.078 682.473 L845.519 682.473 L844.96 682.473 L844.4 682.473 L843.841 682.473 L843.282 682.473 L842.723 682.473 L842.163 682.473 L841.604 682.473 L841.045 682.473 L840.486 682.473 L839.926 682.473 L839.367 682.473 L838.808 682.473 L838.249 682.473 L837.689 682.473 L837.13 682.473 L836.571 682.473 L836.012 682.473 L835.452 682.473 L834.893 682.473 L834.334 682.473 L833.775 682.473 L833.215 682.473 L832.656 682.473 L832.097 682.473 L831.538 682.473 L830.978 682.473 L830.419 682.473 L829.86 682.473 L829.301 682.473 L828.741 682.473 L828.182 682.473 L827.623 682.473 L827.064 682.473 L826.504 682.473 L825.945 682.473 L825.386 682.473 L824.827 682.473 L824.267 682.473 L823.708 682.473 L823.149 682.473 L822.59 682.473 L822.03 682.473 L821.471 682.473 L820.912 682.473 L820.353 682.473 L819.793 682.473 L819.234 682.473 L818.675 682.473 L818.116 682.473 L817.556 682.473 L816.997 682.473 L816.438 682.473 L815.879 682.473 L815.319 682.473 L814.76 682.473 L814.201 682.473 L813.642 682.473 L813.082 682.473 L812.523 682.473 L811.964 682.473 L811.405 682.473 L810.845 682.473 L810.286 682.473 L809.727 682.473 L809.168 682.473 L808.608 682.473 L808.049 682.473 L807.49 682.473 L806.931 682.473 L806.371 682.473 L805.812 682.473 L805.253 682.473 L804.693 682.473 L804.134 682.473 L803.575 682.473 L803.016 682.473 L802.456 682.473 L801.897 682.473 L801.338 682.473 L800.779 682.473 L800.219 682.473 L799.66 682.473 L799.101 682.473 L798.542 682.473 L797.982 682.473 L797.423 682.473 L796.864 682.473 L796.305 682.473 L795.745 682.473 L795.186 682.473 L794.627 682.473 L794.068 682.473 L793.508 682.473 L792.949 682.473 L792.39 682.473 L791.831 682.473 L791.271 682.473 L790.712 682.473 L790.153 682.473 L789.594 682.473 L789.034 682.473 L788.475 682.473 L787.916 682.473 L787.357 682.473 L786.797 682.473 L786.238 682.473 L785.679 682.473 L785.12 682.473 L784.56 682.473 L784.001 682.473 L783.442 682.473 L782.883 682.473 L782.323 682.473 L781.764 682.473 L781.205 682.473 L780.646 682.473 L780.086 682.473 L779.527 682.473 L778.968 682.473 L778.409 682.473 L777.849 682.473 L777.29 682.473 L776.731 682.473 L776.172 682.473 L775.612 682.473 L775.053 682.473 L774.494 682.473 L773.935 682.473 L773.375 682.473 L772.816 682.473 L772.257 682.473 L771.698 682.473 L771.138 682.473 L770.579 682.473 L770.02 682.473 L769.461 682.473 L768.901 682.473 L768.342 682.473 L767.783 682.473 L767.224 682.473 L766.664 682.473 L766.105 682.473 L765.546 682.473 L764.987 682.473 L764.427 682.473 L763.868 682.473 L763.309 682.473 L762.75 682.473 L762.19 682.473 L761.631 682.473 L761.072 682.473 L760.513 682.473 L759.953 682.473 L759.394 682.473 L758.835 682.473 L758.276 682.473 L757.716 682.473 L757.157 682.473 L756.598 682.473 L756.039 682.473 L755.479 682.473 L754.92 682.473 L754.361 682.473 L753.802 682.473 L753.242 682.473 L752.683 682.473 L752.124 682.473 L751.565 682.473 L751.005 682.473 L750.446 682.473 L749.887 682.473 L749.328 682.473 L748.768 682.473 L748.209 682.473 L747.65 682.473 L747.091 682.473 L746.531 682.473 L745.972 682.473 L745.413 682.473 L744.854 682.473 L744.294 682.473 L743.735 682.473 L743.176 682.473 L742.617 682.473 L742.057 682.473 L741.498 682.473 L740.939 682.473 L740.38 682.473 L739.82 682.473 L739.261 682.473 L738.702 682.473 L738.143 682.473 L737.583 682.473 L737.024 682.473 L736.465 682.473 L735.906 682.473 L735.346 682.473 L734.787 682.473 L734.228 682.473 L733.669 682.473 L733.109 682.473 L732.55 682.473 L731.991 682.473 L731.432 682.473 L730.872 682.473 L730.313 682.473 L729.754 682.473 L729.195 682.473 L728.635 682.473 L728.076 682.473 L727.517 682.473 L726.958 682.473 L726.398 682.473 L725.839 682.473 L725.28 682.473 L724.721 682.473 L724.161 682.473 L723.602 682.473 L723.043 682.473 L722.484 682.473 L721.924 682.473 L721.365 682.473 L720.806 682.473 L720.247 682.473  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip923)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.446 720.806,683.446 721.365,683.446 721.924,683.446 722.484,683.446 723.043,683.446 723.602,683.446 724.161,683.446 724.721,683.446 725.28,683.446 725.839,683.446 726.398,683.446 726.958,683.446 727.517,683.446 728.076,683.446 728.635,683.446 729.195,683.446 729.754,683.446 730.313,683.446 730.872,683.446 731.432,683.446 731.991,683.446 732.55,683.446 733.109,683.446 733.669,683.446 734.228,683.446 734.787,683.446 735.346,683.446 735.906,683.446 736.465,683.446 737.024,683.446 737.583,683.446 738.143,683.446 738.702,683.446 739.261,683.446 739.82,683.446 740.38,683.446 740.939,683.446 741.498,683.446 742.057,683.446 742.617,683.446 743.176,683.446 743.735,683.446 744.294,683.446 744.854,683.446 745.413,683.446 745.972,683.446 746.531,683.446 747.091,683.446 747.65,683.446 748.209,683.446 748.768,683.446 749.328,683.446 749.887,683.446 750.446,683.446 751.005,683.446 751.565,683.446 752.124,683.446 752.683,683.446 753.242,683.446 753.802,683.446 754.361,683.446 754.92,683.446 755.479,683.446 756.039,683.446 756.598,683.446 757.157,683.446 757.716,683.446 758.276,683.446 758.835,683.446 759.394,683.446 759.953,683.446 760.513,683.446 761.072,683.446 761.631,683.446 762.19,683.446 762.75,683.446 763.309,683.446 763.868,683.446 764.427,683.446 764.987,683.446 765.546,683.446 766.105,683.446 766.664,683.446 767.224,683.446 767.783,683.446 768.342,683.446 768.901,683.446 769.461,683.446 770.02,683.446 770.579,683.446 771.138,683.446 771.698,683.446 772.257,683.446 772.816,683.446 773.375,683.446 773.935,683.446 774.494,683.446 775.053,683.446 775.612,683.446 776.172,683.446 776.731,683.446 777.29,683.446 777.849,683.446 778.409,683.446 778.968,683.446 779.527,683.446 780.086,683.446 780.646,683.446 781.205,683.446 781.764,683.446 782.323,683.446 782.883,683.446 783.442,683.446 784.001,683.446 784.56,683.446 785.12,683.446 785.679,683.446 786.238,683.446 786.797,683.446 787.357,683.446 787.916,683.446 788.475,683.446 789.034,683.446 789.594,683.446 790.153,683.446 790.712,683.446 791.271,683.446 791.831,683.446 792.39,683.446 792.949,683.446 793.508,683.446 794.068,683.446 794.627,683.446 795.186,683.446 795.745,683.446 796.305,683.446 796.864,683.446 797.423,683.446 797.982,683.446 798.542,683.446 799.101,683.446 799.66,683.446 800.219,683.446 800.779,683.446 801.338,683.446 801.897,683.446 802.456,683.446 803.016,683.446 803.575,683.446 804.134,683.446 804.693,683.446 805.253,683.446 805.812,683.446 806.371,683.446 806.931,683.446 807.49,683.446 808.049,683.446 808.608,683.446 809.168,683.446 809.727,683.446 810.286,683.446 810.845,683.446 811.405,683.446 811.964,683.446 812.523,683.446 813.082,683.446 813.642,683.446 814.201,683.446 814.76,683.446 815.319,683.446 815.879,683.446 816.438,683.446 816.997,683.446 817.556,683.446 818.116,683.446 818.675,683.446 819.234,683.446 819.793,683.446 820.353,683.446 820.912,683.446 821.471,683.446 822.03,683.446 822.59,683.446 823.149,683.446 823.708,683.446 824.267,683.446 824.827,683.446 825.386,683.446 825.945,683.446 826.504,683.446 827.064,683.446 827.623,683.446 828.182,683.446 828.741,683.446 829.301,683.446 829.86,683.446 830.419,683.446 830.978,683.446 831.538,683.446 832.097,683.446 832.656,683.446 833.215,683.446 833.775,683.446 834.334,683.446 834.893,683.446 835.452,683.446 836.012,683.446 836.571,683.446 837.13,683.446 837.689,683.446 838.249,683.446 838.808,683.446 839.367,683.446 839.926,683.446 840.486,683.446 841.045,683.446 841.604,683.446 842.163,683.446 842.723,683.446 843.282,683.446 843.841,683.446 844.4,683.446 844.96,683.446 845.519,683.446 846.078,683.446 846.637,683.446 847.197,683.446 847.756,683.446 848.315,683.446 848.874,683.446 849.434,683.446 849.993,683.446 850.552,683.446 851.111,683.446 851.671,683.446 852.23,683.446 852.789,683.446 853.348,683.446 853.908,683.446 854.467,683.446 855.026,683.446 855.585,683.446 856.145,683.446 856.704,683.446 857.263,683.446 857.822,683.446 858.382,683.446 858.941,683.446 859.5,683.446 860.059,683.446 860.619,683.446 861.178,683.446 861.737,683.446 862.296,683.446 862.856,683.446 863.415,683.446 863.974,683.446 864.533,683.446 865.093,683.446 865.652,683.446 866.211,683.446 866.77,683.446 867.33,683.446 867.889,683.446 868.448,683.446 869.007,683.446 869.567,683.446 870.126,683.446 870.685,683.446 871.244,683.446 871.804,683.446 872.363,683.446 872.922,683.446 873.481,683.446 874.041,683.446 874.6,683.446 875.159,683.446 875.718,683.446 876.278,683.446 876.837,683.446 877.396,683.446 877.955,683.446 878.515,683.446 879.074,683.446 879.633,683.446 880.192,683.446 880.752,683.446 881.311,683.446 881.87,683.446 882.429,683.446 882.989,683.446 883.548,683.446 884.107,683.446 884.666,683.446 885.226,683.446 885.785,683.446 886.344,683.446 886.903,683.446 887.463,683.446 888.022,683.446 888.581,683.446 889.14,683.446 889.7,683.446 890.259,683.446 890.818,683.446 891.377,683.446 891.937,683.446 892.496,683.446 893.055,683.446 893.614,683.446 894.174,683.446 894.733,683.446 895.292,683.446 895.851,683.446 896.411,683.446 896.97,683.446 897.529,683.446 898.088,683.446 898.648,683.446 899.207,683.446 899.766,683.446 900.325,683.446 900.885,683.446 901.444,683.446 902.003,683.446 902.562,683.446 903.122,683.446 903.681,683.446 904.24,683.446 904.799,683.446 905.359,683.446 905.918,683.446 906.477,683.446 907.036,683.446 907.596,683.446 908.155,683.446 908.714,683.446 909.273,683.446 909.833,683.446 910.392,683.446 910.951,683.446 911.51,683.446 912.07,683.446 912.629,683.446 913.188,683.446 913.747,683.446 914.307,683.446 914.866,683.446 915.425,683.446 915.984,683.446 916.544,683.446 917.103,683.446 917.662,683.446 918.221,683.446 918.781,683.446 919.34,683.446 919.899,683.446 920.458,683.446 921.018,683.446 921.577,683.446 922.136,683.446 922.695,683.446 923.255,683.446 923.814,683.446 924.373,683.446 924.932,683.446 925.492,683.446 926.051,683.446 926.61,683.446 927.169,683.446 927.729,683.446 928.288,683.446 928.847,683.446 929.406,683.446 929.966,683.446 930.525,683.446 931.084,683.446 931.644,683.446 932.203,683.446 932.762,683.446 933.321,683.446 933.881,683.446 934.44,683.446 934.999,683.446 935.558,683.446 936.118,683.446 936.677,683.446 937.236,683.446 937.795,683.446 938.355,683.446 938.914,683.446 939.473,683.446 940.032,683.446 940.592,683.446 941.151,683.446 941.71,683.446 942.269,683.446 942.829,683.446 943.388,683.446 943.947,683.446 944.506,683.446 945.066,683.446 945.625,683.446 946.184,683.446 946.743,683.446 947.303,683.446 947.862,683.446 948.421,683.446 948.98,683.446 949.54,683.446 950.099,683.446 950.658,683.446 951.217,683.446 951.777,683.446 952.336,683.446 952.895,683.446 953.454,683.446 954.014,683.446 954.573,683.446 955.132,683.446 955.691,683.446 956.251,683.446 956.81,683.446 957.369,683.446 957.928,683.446 958.488,683.446 959.047,683.446 959.606,683.446 960.165,683.446 960.725,683.446 961.284,683.446 961.843,683.446 962.402,683.446 962.962,683.446 963.521,683.446 964.08,683.446 964.639,683.446 965.199,683.446 965.758,683.446 966.317,683.446 966.876,683.446 967.436,683.446 967.995,683.446 968.554,683.446 969.113,683.446 969.673,683.446 970.232,683.446 970.791,683.446 971.35,683.446 971.91,683.446 972.469,683.446 973.028,683.446 973.587,683.446 974.147,683.446 974.706,683.446 975.265,683.446 975.824,683.446 976.384,683.446 976.943,683.446 977.502,683.446 978.061,683.446 978.621,683.446 979.18,683.446 979.739,683.446 980.298,683.446 980.858,683.446 981.417,683.446 981.976,683.446 982.535,683.446 983.095,683.446 983.654,683.446 984.213,683.446 984.772,683.446 985.332,683.446 985.891,683.446 986.45,683.446 987.009,683.446 987.569,683.446 988.128,683.446 988.687,683.446 989.246,683.446 989.806,683.446 990.365,683.446 990.924,683.446 991.483,683.446 992.043,683.446 992.602,683.446 993.161,683.446 993.72,683.446 994.28,683.446 994.839,683.446 995.398,683.446 995.957,683.446 996.517,683.446 997.076,683.446 997.635,683.446 998.194,683.446 998.754,683.446 999.313,683.446 999.872,683.446 1000.43,683.446 1000.99,683.446 1001.55,683.446 1002.11,683.446 1002.67,683.446 1003.23,683.446 1003.79,683.446 1004.35,683.446 1004.91,683.446 1005.46,683.446 1006.02,683.446 1006.58,683.446 1007.14,683.446 1007.7,683.446 1008.26,683.446 1008.82,683.446 1009.38,683.446 1009.94,683.446 1010.5,683.446 1011.06,683.446 1011.62,683.446 1012.18,683.446 1012.73,683.446 1013.29,683.446 1013.85,683.446 1014.41,683.446 1014.97,683.446 1015.53,683.446 1016.09,683.446 1016.65,683.446 1017.21,683.446 1017.77,683.446 1018.33,683.446 1018.89,683.446 1019.45,683.446 1020.01,683.446 1020.56,683.446 1021.12,683.446 1021.68,683.446 1022.24,683.446 1022.8,683.446 1023.36,683.446 1023.92,683.446 1024.48,683.446 1025.04,683.446 1025.6,683.446 1026.16,683.446 1026.72,683.446 1027.28,683.446 1027.83,683.446 1028.39,683.446 1028.95,683.446 1029.51,683.446 1030.07,683.446 1030.63,683.446 1031.19,683.446 1031.75,683.446 1032.31,683.446 1032.87,683.446 1033.43,683.446 1033.99,683.446 1034.55,683.446 1035.1,683.446 1035.66,683.446 1036.22,683.446 1036.78,683.446 1037.34,683.446 1037.9,683.446 1038.46,683.446 1039.02,683.446 1039.58,683.446 1040.14,683.446 1040.7,683.446 1041.26,683.446 1041.82,683.446 1042.38,683.446 1042.93,683.446 1043.49,683.446 1044.05,683.446 1044.61,683.446 1045.17,683.446 1045.73,683.446 1046.29,683.446 1046.85,683.446 1047.41,683.446 1047.97,683.446 1048.53,683.446 1049.09,683.446 1049.65,683.446 1050.2,683.446 1050.76,683.446 1051.32,683.446 1051.88,683.446 1052.44,683.446 1053,683.446 1053.56,683.446 1054.12,683.446 1054.68,683.446 1055.24,683.446 1055.8,683.446 1056.36,683.446 1056.92,683.446 1057.48,683.446 1058.03,683.446 1058.59,683.446 1059.15,683.446 1059.71,683.446 1060.27,683.446 1060.83,683.446 1061.39,683.446 1061.95,683.446 1062.51,683.446 1063.07,683.446 1063.63,683.446 1064.19,683.446 1064.75,683.446 1065.3,683.446 1065.86,683.446 1066.42,683.446 1066.98,683.446 1067.54,683.446 1068.1,683.446 1068.66,683.446 1069.22,683.446 1069.78,683.446 1070.34,683.446 1070.9,683.446 1071.46,683.446 1072.02,683.446 1072.57,683.446 1073.13,683.446 1073.69,683.446 1074.25,683.446 1074.81,683.446 1075.37,683.446 1075.93,683.446 1076.49,683.446 1077.05,683.446 1077.61,683.446 1078.17,683.446 1078.73,683.446 1079.29,683.446 1079.85,683.446 1080.4,683.446 1080.96,683.446 1081.52,683.446 1082.08,683.446 1082.64,683.446 1083.2,683.446 1083.76,683.446 1084.32,683.446 1084.88,683.446 1085.44,683.446 1086,683.446 1086.56,683.446 1087.12,683.446 1087.67,683.446 1088.23,683.446 1088.79,683.446 1089.35,683.446 1089.91,683.446 1090.47,683.446 1091.03,683.446 1091.59,683.446 1092.15,683.446 1092.71,683.446 1093.27,683.446 1093.83,683.446 1094.39,683.446 1094.94,683.446 1095.5,683.446 1096.06,683.446 1096.62,683.446 1097.18,683.446 1097.74,683.446 1098.3,683.446 1098.86,683.446 1099.42,683.446 1099.98,683.446 1100.54,683.446 1101.1,683.446 1101.66,683.446 1102.22,683.446 1102.77,683.446 1103.33,683.446 1103.89,683.446 1104.45,683.446 1105.01,683.446 1105.57,683.446 1106.13,683.446 1106.69,683.446 1107.25,683.446 1107.81,683.446 1108.37,683.446 1108.93,683.446 1109.49,683.446 1110.04,683.446 1110.6,683.446 1111.16,683.446 1111.72,683.446 1112.28,683.446 1112.84,683.446 1113.4,683.446 1113.96,683.446 1114.52,683.446 1115.08,683.446 1115.64,683.446 1116.2,683.446 1116.76,683.446 1117.31,683.446 1117.87,683.446 1118.43,683.446 1118.99,683.446 1119.55,683.446 1120.11,683.446 1120.67,683.446 1121.23,683.446 1121.79,683.446 1122.35,683.446 1122.91,683.446 1123.47,683.446 1124.03,683.446 1124.59,683.446 1125.14,683.446 1125.7,683.446 1126.26,683.446 1126.82,683.446 1127.38,683.446 1127.94,683.446 1128.5,683.446 1129.06,683.446 1129.62,683.446 1130.18,683.446 1130.74,683.446 1131.3,683.446 1131.86,683.446 1132.41,683.446 1132.97,683.446 1133.53,683.446 1134.09,683.446 1134.65,683.446 1135.21,683.446 1135.77,683.446 1136.33,683.446 1136.89,683.446 1137.45,683.446 1138.01,683.446 1138.57,683.446 1139.13,683.446 1139.68,683.446 1140.24,683.446 1140.8,683.446 1141.36,683.446 1141.92,683.446 1142.48,683.446 1143.04,683.446 1143.6,683.446 1144.16,683.446 1144.72,683.446 1145.28,683.446 1145.84,683.446 1146.4,683.446 1146.96,683.446 1147.51,683.446 1148.07,683.446 1148.63,683.446 1149.19,683.446 1149.75,683.446 1150.31,683.446 1150.87,683.446 1151.43,683.446 1151.99,683.446 1152.55,683.446 1153.11,683.446 1153.67,683.446 1154.23,683.446 1154.78,683.446 1155.34,683.446 1155.9,683.446 1156.46,683.446 1157.02,683.446 1157.58,683.446 1158.14,683.446 1158.7,683.446 1159.26,683.446 1159.82,683.446 1160.38,683.446 1160.94,683.446 1161.5,683.446 1162.05,683.446 1162.61,683.446 1163.17,683.446 1163.73,683.446 1164.29,683.446 1164.85,683.446 1165.41,683.446 1165.97,683.446 1166.53,683.446 1167.09,683.446 1167.65,683.446 1168.21,683.446 1168.77,683.446 1169.33,683.446 1169.88,683.446 1170.44,683.446 1171,683.446 1171.56,683.446 1172.12,683.446 1172.68,683.446 1173.24,683.446 1173.8,683.446 1174.36,683.446 1174.92,683.446 1175.48,683.446 1176.04,683.446 1176.6,683.446 1177.15,683.446 1177.71,683.446 1178.27,683.446 1178.83,683.446 1179.39,683.446 1179.95,683.446 1180.51,683.446 1181.07,683.446 1181.63,683.446 1182.19,683.446 1182.75,683.446 1183.31,683.446 1183.87,683.446 1184.43,683.446 1184.98,683.446 1185.54,683.446 1186.1,683.446 1186.66,683.446 1187.22,683.446 1187.78,683.446 1188.34,683.446 1188.9,683.446 1189.46,683.446 1190.02,683.446 1190.58,683.446 1191.14,683.446 1191.7,683.446 1192.25,683.446 1192.81,683.446 1193.37,683.446 1193.93,683.446 1194.49,683.446 1195.05,683.446 1195.61,683.446 1196.17,683.446 1196.73,683.446 1197.29,683.446 1197.85,683.446 1198.41,683.446 1198.97,683.446 1199.52,683.446 1200.08,683.446 1200.64,683.446 1201.2,683.446 1201.76,683.446 1202.32,683.446 1202.88,683.446 1203.44,683.446 1204,683.446 1204.56,683.446 1205.12,683.446 1205.68,683.446 1206.24,683.446 1206.8,683.446 1207.35,683.446 1207.91,683.446 1208.47,683.446 1209.03,683.446 1209.59,683.446 1210.15,683.446 1210.71,683.446 1211.27,683.446 1211.83,683.446 1212.39,683.446 1212.95,683.446 1213.51,683.446 1214.07,683.446 1214.62,683.446 1215.18,683.446 1215.74,683.446 1216.3,683.446 1216.86,683.446 1217.42,683.446 1217.98,683.446 1218.54,683.446 1219.1,683.446 1219.66,683.446 1220.22,683.446 1220.78,683.446 1221.34,683.446 1221.89,683.446 1222.45,683.446 1223.01,683.446 1223.57,683.446 1224.13,683.446 1224.69,683.446 1225.25,683.446 1225.81,683.446 1226.37,683.446 1226.93,683.446 1227.49,683.446 1228.05,683.446 1228.61,683.446 1229.17,683.446 1229.72,683.446 1230.28,683.446 1230.84,683.446 1231.4,683.446 1231.96,683.446 1232.52,683.446 1233.08,683.446 1233.64,683.446 1234.2,683.446 1234.76,683.446 1235.32,683.446 1235.88,683.446 1236.44,683.446 1236.99,683.446 1237.55,683.446 1238.11,683.446 1238.67,683.446 1239.23,683.446 1239.79,683.446 1240.35,683.446 1240.91,683.446 1241.47,683.446 1242.03,683.446 1242.59,683.446 1243.15,683.446 1243.71,683.446 1244.26,683.446 1244.82,683.446 1245.38,683.446 1245.94,683.446 1246.5,683.446 1247.06,683.446 1247.62,683.446 1248.18,683.446 1248.74,683.446 1249.3,683.446 1249.86,683.446 1250.42,683.446 1250.98,683.446 1251.54,683.446 1252.09,683.446 1252.65,683.446 1253.21,683.446 1253.77,683.446 1254.33,683.446 1254.89,683.446 1255.45,683.446 1256.01,683.446 1256.57,683.446 1257.13,683.446 1257.69,683.446 1258.25,683.446 1258.81,683.446 1259.36,683.446 1259.92,683.446 1260.48,683.446 1261.04,683.446 1261.6,683.446 1262.16,683.446 1262.72,683.446 1263.28,683.446 1263.84,683.446 1264.4,683.446 1264.96,683.446 1265.52,683.446 1266.08,683.446 1266.63,683.446 1267.19,683.446 1267.75,683.446 1268.31,683.446 1268.87,683.446 1269.43,683.446 1269.99,683.446 1270.55,683.446 1271.11,683.446 1271.67,683.446 1272.23,683.446 1272.79,683.446 1273.35,683.446 1273.91,683.446 1274.46,683.446 1275.02,683.446 1275.58,683.446 1276.14,683.446 1276.7,683.446 1277.26,683.446 1277.82,683.446 1278.38,683.446 1278.94,683.446 1279.5,683.446 1280.06,683.446 1280.62,683.446 1281.18,683.446 1281.73,683.446 1282.29,683.446 1282.85,683.446 1283.41,683.446 1283.97,683.446 1284.53,683.446 1285.09,683.446 1285.65,683.446 1286.21,683.446 1286.77,683.446 1287.33,683.446 1287.89,683.446 1288.45,683.446 1289,683.446 1289.56,683.446 1290.12,683.446 1290.68,683.446 1291.24,683.446 1291.8,683.446 1292.36,683.446 1292.92,683.446 1293.48,683.446 1294.04,683.446 1294.6,683.446 1295.16,683.446 1295.72,683.446 1296.28,683.446 1296.83,683.446 1297.39,683.446 1297.95,683.446 1298.51,683.446 1299.07,683.446 1299.63,683.446 1300.19,683.446 1300.75,683.446 1301.31,683.446 1301.87,683.446 1302.43,683.446 1302.99,683.446 1303.55,683.446 1304.1,683.446 1304.66,683.446 1305.22,683.446 1305.78,683.446 1306.34,683.446 1306.9,683.446 1307.46,683.446 1308.02,683.446 1308.58,683.446 1309.14,683.446 1309.7,683.446 1310.26,683.446 1310.82,683.446 1311.38,683.446 1311.93,683.446 1312.49,683.446 1313.05,683.446 1313.61,683.446 1314.17,683.446 1314.73,683.446 1315.29,683.446 1315.85,683.446 1316.41,683.446 1316.97,683.446 1317.53,683.446 1318.09,683.446 1318.65,683.446 1319.2,683.446 1319.76,683.446 1320.32,683.446 1320.88,683.446 1321.44,683.446 1322,683.446 1322.56,683.446 1323.12,683.446 1323.68,683.446 1324.24,683.446 1324.8,683.446 1325.36,683.446 1325.92,683.446 1326.47,683.446 1327.03,683.446 1327.59,683.446 1328.15,683.446 1328.71,683.446 1329.27,683.446 1329.83,683.446 1330.39,683.446 1330.95,683.446 1331.51,683.446 1332.07,683.446 1332.63,683.446 1333.19,683.446 1333.75,683.446 1334.3,683.446 1334.86,683.446 1335.42,683.446 1335.98,683.446 1336.54,683.446 1337.1,683.446 1337.66,683.446 1338.22,683.446 1338.78,683.446 1339.34,683.446 1339.9,683.446 1340.46,683.446 1341.02,683.446 1341.57,683.446 1342.13,683.446 1342.69,683.446 1343.25,683.446 1343.81,683.446 1344.37,683.446 1344.93,683.446 1345.49,683.446 1346.05,683.446 1346.61,683.446 1347.17,683.446 1347.73,683.446 1348.29,683.446 1348.84,683.446 1349.4,683.446 1349.96,683.446 1350.52,683.446 1351.08,683.446 1351.64,683.446 1352.2,683.446 1352.76,683.446 1353.32,683.446 1353.88,683.446 1354.44,683.446 1355,683.446 1355.56,683.446 1356.12,683.446 1356.67,683.446 1357.23,683.446 1357.79,683.446 1358.35,683.446 1358.91,683.446 1359.47,683.446 1360.03,683.446 1360.59,683.446 1361.15,683.446 1361.71,683.446 1362.27,683.446 1362.83,683.446 1363.39,683.446 1363.94,683.446 1364.5,683.446 1365.06,683.446 1365.62,683.446 1366.18,683.446 1366.74,683.446 1367.3,683.446 1367.86,683.446 1368.42,683.446 1368.98,683.446 1369.54,683.446 1370.1,683.446 1370.66,683.446 1371.21,683.446 1371.77,683.446 1372.33,683.446 1372.89,683.446 1373.45,683.446 1374.01,683.446 1374.57,683.446 1375.13,683.446 1375.69,683.446 1376.25,683.446 1376.81,683.446 1377.37,683.446 1377.93,683.446 1378.49,683.446 1379.04,683.446 1379.6,683.446 1380.16,683.446 1380.72,683.446 1381.28,683.446 1381.84,683.446 1382.4,683.446 1382.96,683.446 1383.52,683.446 1384.08,683.446 1384.64,683.446 1385.2,683.446 1385.76,683.446 1386.31,683.446 1386.87,683.446 1387.43,683.446 1387.99,683.446 1388.55,683.446 1389.11,683.446 1389.67,683.446 1390.23,683.446 1390.79,683.446 1391.35,683.446 1391.91,683.446 1392.47,683.446 1393.03,683.446 1393.58,683.446 1394.14,683.446 1394.7,683.446 1395.26,683.446 1395.82,683.446 1396.38,683.446 1396.94,683.446 1397.5,683.446 1398.06,683.446 1398.62,683.446 1399.18,683.446 1399.74,683.446 1400.3,683.446 1400.86,683.446 1401.41,683.446 1401.97,683.446 1402.53,683.446 1403.09,683.446 1403.65,683.446 1404.21,683.446 1404.77,683.446 1405.33,683.446 1405.89,683.446 1406.45,683.446 1407.01,683.446 1407.57,683.446 1408.13,683.446 1408.68,683.446 1409.24,683.446 1409.8,683.446 1410.36,683.446 1410.92,683.446 1411.48,683.446 1412.04,683.446 1412.6,683.446 1413.16,683.446 1413.72,683.446 1414.28,683.446 1414.84,683.446 1415.4,683.446 1415.95,683.446 1416.51,683.446 1417.07,683.446 1417.63,683.446 1418.19,683.446 1418.75,683.446 1419.31,683.446 1419.87,683.446 1420.43,683.446 1420.99,683.446 1421.55,683.446 1422.11,683.446 1422.67,683.446 1423.23,683.446 1423.78,683.446 1424.34,683.446 1424.9,683.446 1425.46,683.446 1426.02,683.446 1426.58,683.446 1427.14,683.446 1427.7,683.446 1428.26,683.446 1428.82,683.446 1429.38,683.446 1429.94,683.446 1430.5,683.446 1431.05,683.446 1431.61,683.446 1432.17,683.446 1432.73,683.446 1433.29,683.446 1433.85,683.446 1434.41,683.446 1434.97,683.446 1435.53,683.446 1436.09,683.446 1436.65,683.446 1437.21,683.446 1437.77,683.446 1438.33,683.446 1438.88,683.446 1439.44,683.446 1440,683.446 1440.56,683.446 1441.12,683.446 1441.68,683.446 1442.24,683.446 1442.8,683.446 1443.36,683.446 1443.92,683.446 1444.48,683.446 1445.04,683.446 1445.6,683.446 1446.15,683.446 1446.71,683.446 1447.27,683.446 1447.83,683.446 1448.39,683.446 1448.95,683.446 1449.51,683.446 1450.07,683.446 1450.63,683.446 1451.19,683.446 1451.75,683.446 1452.31,683.446 1452.87,683.446 1453.42,683.446 1453.98,683.446 1454.54,683.446 1455.1,683.446 1455.66,683.446 1456.22,683.446 1456.78,683.446 1457.34,683.446 1457.9,683.446 1458.46,683.446 1459.02,683.446 1459.58,683.446 1460.14,683.446 1460.7,683.446 1461.25,683.446 1461.81,683.446 1462.37,683.446 1462.93,683.446 1463.49,683.446 1464.05,683.446 1464.61,683.446 1465.17,683.446 1465.73,683.446 1466.29,683.446 1466.85,683.446 1467.41,683.446 1467.97,683.446 1468.52,683.446 1469.08,683.446 1469.64,683.446 1470.2,683.446 1470.76,683.446 1471.32,683.446 1471.88,683.446 1472.44,683.446 1473,683.446 1473.56,683.446 1474.12,683.446 1474.68,683.446 1475.24,683.446 1475.79,683.446 1476.35,683.446 1476.91,683.446 1477.47,683.446 1478.03,683.446 1478.59,683.446 1479.15,683.446 1479.71,683.446 1480.27,683.446 1480.83,683.446 1481.39,683.446 1481.95,683.446 1482.51,683.446 1483.07,683.446 1483.62,683.446 1484.18,683.446 1484.74,683.446 1485.3,683.446 1485.86,683.446 1486.42,683.446 1486.98,683.446 1487.54,683.446 1488.1,683.446 1488.66,683.446 1489.22,683.446 1489.78,683.446 1490.34,683.446 1490.89,683.446 1491.45,683.446 1492.01,683.446 1492.57,683.446 1493.13,683.446 1493.69,683.446 1494.25,683.446 1494.81,683.446 1495.37,683.446 1495.93,683.446 1496.49,683.446 1497.05,683.446 1497.61,683.446 1498.16,683.446 1498.72,683.446 1499.28,683.446 1499.84,683.446 1500.4,683.446 1500.96,683.446 1501.52,683.446 1502.08,683.446 1502.64,683.446 1503.2,683.446 1503.76,683.446 1504.32,683.446 1504.88,683.446 1505.44,683.446 1505.99,683.446 1506.55,683.446 1507.11,683.446 1507.67,683.446 1508.23,683.446 1508.79,683.446 1509.35,683.446 1509.91,683.446 1510.47,683.446 1511.03,683.446 1511.59,683.446 1512.15,683.446 1512.71,683.446 1513.26,683.446 1513.82,683.446 1514.38,683.446 1514.94,683.446 1515.5,683.446 1516.06,683.446 1516.62,683.446 1517.18,683.446 1517.74,683.446 1518.3,683.446 1518.86,683.446 1519.42,683.446 1519.98,683.446 1520.53,683.446 1521.09,683.446 1521.65,683.446 1522.21,683.446 1522.77,683.446 1523.33,683.446 1523.89,683.446 1524.45,683.446 1525.01,683.446 1525.57,683.446 1526.13,683.446 1526.69,683.446 1527.25,683.446 1527.81,683.446 1528.36,683.446 1528.92,683.446 1529.48,683.446 1530.04,683.446 1530.6,683.446 1531.16,683.446 1531.72,683.446 1532.28,683.446 1532.84,683.446 1533.4,683.446 1533.96,683.446 1534.52,683.446 1535.08,683.446 1535.63,683.446 1536.19,683.446 1536.75,683.446 1537.31,683.446 1537.87,683.446 1538.43,683.446 1538.99,683.446 1539.55,683.446 1540.11,683.446 1540.67,683.446 1541.23,683.446 1541.79,683.446 1542.35,683.446 1542.9,683.446 1543.46,683.446 1544.02,683.446 1544.58,683.446 1545.14,683.446 1545.7,683.446 1546.26,683.446 1546.82,683.446 1547.38,683.446 1547.94,683.446 1548.5,683.446 1549.06,683.446 1549.62,683.446 1550.18,683.446 1550.73,683.446 1551.29,683.446 1551.85,683.446 1552.41,683.446 1552.97,683.446 1553.53,683.446 1554.09,683.446 1554.65,683.446 1555.21,683.446 1555.77,683.446 1556.33,683.446 1556.89,683.446 1557.45,683.446 1558,683.446 1558.56,683.446 1559.12,683.446 1559.68,683.446 1560.24,683.446 1560.8,683.446 1561.36,683.446 1561.92,683.446 1562.48,683.446 1563.04,683.446 1563.6,683.446 1564.16,683.446 1564.72,683.446 1565.28,683.446 1565.83,683.446 1566.39,683.446 1566.95,683.446 1567.51,683.446 1568.07,683.446 1568.63,683.446 1569.19,683.446 1569.75,683.446 1570.31,683.446 1570.87,683.446 1571.43,683.446 1571.99,683.446 1572.55,683.446 1573.1,683.446 1573.66,683.446 1574.22,683.446 1574.78,683.446 1575.34,683.446 1575.9,683.446 1576.46,683.446 1577.02,683.446 1577.58,683.446 1578.14,683.446 1578.7,683.446 1579.26,683.446 1579.82,683.446 1580.37,683.446 1580.93,683.446 1581.49,683.446 1582.05,683.446 1582.61,683.446 1583.17,683.446 1583.73,683.446 1584.29,683.446 1584.85,683.446 1585.41,683.446 1585.97,683.446 1586.53,683.446 1587.09,683.446 1587.65,683.446 1588.2,683.446 1588.76,683.446 1589.32,683.446 1589.88,683.446 1590.44,683.446 1591,683.446 1591.56,683.446 1592.12,683.446 1592.68,683.446 1593.24,683.446 1593.8,683.446 1594.36,683.446 1594.92,683.446 1595.47,683.446 1596.03,683.446 1596.59,683.446 1597.15,683.446 1597.71,683.446 1598.27,683.446 1598.83,683.446 1599.39,683.446 1599.95,683.446 1600.51,683.446 1601.07,683.446 1601.63,683.446 1602.19,683.446 1602.74,683.446 1603.3,683.446 1603.86,683.446 1604.42,683.446 1604.98,683.446 1605.54,683.446 1606.1,683.446 1606.66,683.446 1607.22,683.446 1607.78,683.446 1608.34,683.446 1608.9,683.446 1609.46,683.446 1610.02,683.446 1610.57,683.446 1611.13,683.446 1611.69,683.446 1612.25,683.446 1612.81,683.446 1613.37,683.446 1613.93,683.446 1614.49,683.446 1615.05,683.446 1615.61,683.446 1616.17,683.446 1616.73,683.446 1617.29,683.446 1617.84,683.446 1618.4,683.446 1618.96,683.446 1619.52,683.446 1620.08,683.446 1620.64,683.446 1621.2,683.446 1621.76,683.446 1622.32,683.446 1622.88,683.446 1623.44,683.446 1624,683.446 1624.56,683.446 1625.11,683.446 1625.67,683.446 1626.23,683.446 1626.79,683.446 1627.35,683.446 1627.91,683.446 1628.47,683.446 1629.03,683.446 1629.59,683.446 1630.15,683.446 1630.71,683.446 1631.27,683.446 1631.83,683.446 1632.39,683.446 1632.94,683.446 1633.5,683.446 1634.06,683.446 1634.62,683.446 1635.18,683.446 1635.74,683.446 1636.3,683.446 1636.86,683.446 1637.42,683.446 1637.98,683.446 1638.54,683.446 1639.1,683.446 1639.66,683.446 1640.21,683.446 1640.77,683.446 1641.33,683.446 1641.89,683.446 1642.45,683.446 1643.01,683.446 1643.57,683.446 1644.13,683.446 1644.69,683.446 1645.25,683.446 1645.81,683.446 1646.37,683.446 1646.93,683.446 1647.48,683.446 1648.04,683.446 1648.6,683.446 1649.16,683.446 1649.72,683.446 1650.28,683.446 1650.84,683.446 1651.4,683.446 1651.96,683.446 1652.52,683.446 1653.08,683.446 1653.64,683.446 1654.2,683.446 1654.76,683.446 1655.31,683.446 1655.87,683.446 1656.43,683.446 1656.99,683.446 1657.55,683.446 1658.11,683.446 1658.67,683.446 1659.23,683.446 1659.79,683.446 1660.35,683.446 1660.91,683.446 1661.47,683.446 1662.03,683.446 1662.58,683.446 1663.14,683.446 1663.7,683.446 1664.26,683.446 1664.82,683.446 1665.38,683.446 1665.94,683.446 1666.5,683.446 1667.06,683.446 1667.62,683.446 1668.18,683.446 1668.74,683.446 1669.3,683.446 1669.85,683.446 1670.41,683.446 1670.97,683.446 1671.53,683.446 1672.09,683.446 1672.65,683.446 1673.21,683.446 1673.77,683.446 1674.33,683.446 1674.89,683.446 1675.45,683.446 1676.01,683.446 1676.57,683.446 1677.13,683.446 1677.68,683.446 1678.24,683.446 1678.8,683.446 1679.36,683.446 1679.92,683.446 1680.48,683.446 1681.04,683.446 1681.6,683.446 1682.16,683.446 1682.72,683.446 1683.28,683.446 1683.84,683.446 1684.4,683.446 1684.95,683.446 1685.51,683.446 1686.07,683.446 1686.63,683.446 1687.19,683.446 1687.75,683.446 1688.31,683.446 1688.87,683.446 1689.43,683.446 1689.99,683.446 1690.55,683.446 1691.11,683.446 1691.67,683.446 1692.23,683.446 1692.78,683.446 1693.34,683.446 1693.9,683.446 1694.46,683.446 1695.02,683.446 1695.58,683.446 1696.14,683.446 1696.7,683.446 1697.26,683.446 1697.82,683.446 1698.38,683.446 1698.94,683.446 1699.5,683.446 1700.05,683.446 1700.61,683.446 1701.17,683.446 1701.73,683.446 1702.29,683.446 1702.85,683.446 1703.41,683.446 1703.97,683.446 1704.53,683.446 1705.09,683.446 1705.65,683.446 1706.21,683.446 1706.77,683.446 1707.32,683.446 1707.88,683.446 1708.44,683.446 1709,683.446 1709.56,683.446 1710.12,683.446 1710.68,683.446 1711.24,683.446 1711.8,683.446 1712.36,683.446 1712.92,683.446 1713.48,683.446 1714.04,683.446 1714.6,683.446 1715.15,683.446 1715.71,683.446 1716.27,683.446 1716.83,683.446 1717.39,683.446 1717.95,683.446 1718.51,683.446 1719.07,683.446 1719.63,683.446 1720.19,683.446 1720.75,683.446 1721.31,683.446 1721.87,683.446 1722.42,683.446 1722.98,683.446 1723.54,683.446 1724.1,683.446 1724.66,683.446 1725.22,683.446 1725.78,683.446 1726.34,683.446 1726.9,683.446 1727.46,683.446 1728.02,683.446 1728.58,683.446 1729.14,683.446 1729.69,683.446 1730.25,683.446 1730.81,683.446 1731.37,683.446 1731.93,683.446 1732.49,683.446 1733.05,683.446 1733.61,683.446 1734.17,683.446 1734.73,683.446 1735.29,683.446 1735.85,683.446 1736.41,683.446 1736.97,683.446 1737.52,683.446 1738.08,683.446 1738.64,683.446 1739.2,683.446 1739.76,683.446 1740.32,683.446 1740.88,683.446 1741.44,683.446 1742,683.446 1742.56,683.446 1743.12,683.446 1743.68,683.446 1744.24,683.446 1744.79,683.446 1745.35,683.446 1745.91,683.446 1746.47,683.446 1747.03,683.446 1747.59,683.446 1748.15,683.446 1748.71,683.446 1749.27,683.446 1749.83,683.446 1750.39,683.446 1750.95,683.446 1751.51,683.446 1752.06,683.446 1752.62,683.446 1753.18,683.446 1753.74,683.446 1754.3,683.446 1754.86,683.446 1755.42,683.446 1755.98,683.446 1756.54,683.446 1757.1,683.446 1757.66,683.446 1758.22,683.446 1758.78,683.446 1759.34,683.446 1759.89,683.446 1760.45,683.446 1761.01,683.446 1761.57,683.446 1762.13,683.446 1762.69,683.446 1763.25,683.446 1763.81,683.446 1764.37,683.446 1764.93,683.446 1765.49,683.446 1766.05,683.446 1766.61,683.446 1767.16,683.446 1767.72,683.446 1768.28,683.446 1768.84,683.446 1769.4,683.446 1769.96,683.446 1770.52,683.446 1771.08,683.446 1771.64,683.446 1772.2,683.446 1772.76,683.446 1773.32,683.446 1773.88,683.446 1774.43,683.446 1774.99,683.446 1775.55,683.446 1776.11,683.446 1776.67,683.446 1777.23,683.446 1777.79,683.446 1778.35,683.446 1778.91,683.446 1779.47,683.446 1780.03,683.446 1780.59,683.446 1781.15,683.446 1781.71,683.446 1782.26,683.446 1782.82,683.446 1783.38,683.446 1783.94,683.446 1784.5,683.446 1785.06,683.446 1785.62,683.446 1786.18,683.446 1786.74,683.446 1787.3,683.446 1787.86,683.446 1788.42,683.446 1788.98,683.446 1789.53,683.446 1790.09,683.446 1790.65,683.446 1791.21,683.446 1791.77,683.446 1792.33,683.446 1792.89,683.446 1793.45,683.446 1794.01,683.446 1794.57,683.446 1795.13,683.446 1795.69,683.446 1796.25,683.446 1796.8,683.446 1797.36,683.446 1797.92,683.446 1798.48,683.446 1799.04,683.446 1799.6,683.446 1800.16,683.446 1800.72,683.446 1801.28,683.446 1801.84,683.446 1802.4,683.446 1802.96,683.446 1803.52,683.446 1804.08,683.446 1804.63,683.446 1805.19,683.446 1805.75,683.446 1806.31,683.446 1806.87,683.446 1807.43,683.446 1807.99,683.446 1808.55,683.446 1809.11,683.446 1809.67,683.446 1810.23,683.446 1810.79,683.446 1811.35,683.446 1811.9,683.446 1812.46,683.446 1813.02,683.446 1813.58,683.446 1814.14,683.446 1814.7,683.446 1815.26,683.446 1815.82,683.446 1816.38,683.446 1816.94,683.446 1817.5,683.446 1818.06,683.446 1818.62,683.446 1819.18,683.446 1819.73,683.446 1820.29,683.446 1820.85,683.446 1821.41,683.446 1821.97,683.446 1822.53,683.446 1823.09,683.446 1823.65,683.446 1824.21,683.446 1824.77,683.446 1825.33,683.446 1825.89,683.446 1826.45,683.446 1827,683.446 1827.56,683.446 1828.12,683.446 1828.68,683.446 1829.24,683.446 1829.8,683.446 1830.36,683.446 1830.92,683.446 1831.48,683.446 1832.04,683.446 1832.6,683.446 1833.16,683.446 1833.72,683.446 1834.27,683.446 1834.83,683.446 1835.39,683.446 1835.95,683.446 1836.51,683.446 1837.07,683.446 1837.63,683.446 1838.19,683.446 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.03469675089637 ± 0.022692234566797517\nProjected Energy: -4.01438707281031 ± (0.00473182619160184, 0.004898521709011838)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.473505</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4197e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4727e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.257e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.102e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.584e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.736e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.36312429161336\n -0.7590191922770781\n  0.1358418221962161\n  0.1578999869460862\n  0.8767114411781254\n  1.5305929970973322\n  1.5835732611867437\n  3.072870330325868\n  3.1256726539518356\n  4.862107221562171\n  6.260694850380595\n  6.402671211183113\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor \nexp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the  Hamiltonian will have a complex eltype whereas otherwise the eltype is deterimed by the  type of the parameters t, u, and v.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
