var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip440\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip441\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip442\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.53 2211.02,1003.53 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.237 2211.02,746.237 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.945 2211.02,488.945 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.654 2211.02,231.654 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.53 423.181,1003.53 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.237 423.181,746.237 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.945 423.181,488.945 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.654 423.181,231.654 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.73 349.094 1260.85 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.73 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M290.043 1016.87 L306.363 1016.87 L306.363 1020.81 L284.418 1020.81 L284.418 1016.87 Q287.08 1014.12 291.664 1009.49 Q296.27 1004.84 297.451 1003.49 Q299.696 1000.97 300.576 999.235 Q301.478 997.475 301.478 995.786 Q301.478 993.031 299.534 991.295 Q297.613 989.559 294.511 989.559 Q292.312 989.559 289.858 990.323 Q287.427 991.087 284.65 992.637 L284.65 987.915 Q287.474 986.781 289.927 986.202 Q292.381 985.624 294.418 985.624 Q299.789 985.624 302.983 988.309 Q306.177 990.994 306.177 995.485 Q306.177 997.614 305.367 999.536 Q304.58 1001.43 302.474 1004.03 Q301.895 1004.7 298.793 1007.92 Q295.691 1011.11 290.043 1016.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M316.224 986.249 L334.58 986.249 L334.58 990.184 L320.506 990.184 L320.506 998.656 Q321.524 998.309 322.543 998.147 Q323.562 997.962 324.58 997.962 Q330.367 997.962 333.747 1001.13 Q337.126 1004.3 337.126 1009.72 Q337.126 1015.3 333.654 1018.4 Q330.182 1021.48 323.862 1021.48 Q321.687 1021.48 319.418 1021.11 Q317.173 1020.74 314.765 1020 L314.765 1015.3 Q316.849 1016.43 319.071 1016.99 Q321.293 1017.54 323.77 1017.54 Q327.774 1017.54 330.112 1015.44 Q332.45 1013.33 332.45 1009.72 Q332.45 1006.11 330.112 1004 Q327.774 1001.9 323.77 1001.9 Q321.895 1001.9 320.02 1002.31 Q318.168 1002.73 316.224 1003.61 L316.224 986.249 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 989.327 Q352.728 989.327 350.899 992.892 Q349.094 996.434 349.094 1003.56 Q349.094 1010.67 350.899 1014.23 Q352.728 1017.78 356.339 1017.78 Q359.973 1017.78 361.779 1014.23 Q363.608 1010.67 363.608 1003.56 Q363.608 996.434 361.779 992.892 Q359.973 989.327 356.339 989.327 M356.339 985.624 Q362.149 985.624 365.205 990.23 Q368.284 994.813 368.284 1003.56 Q368.284 1012.29 365.205 1016.9 Q362.149 1021.48 356.339 1021.48 Q350.529 1021.48 347.45 1016.9 Q344.395 1012.29 344.395 1003.56 Q344.395 994.813 347.45 990.23 Q350.529 985.624 356.339 985.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M286.062 728.957 L304.418 728.957 L304.418 732.892 L290.344 732.892 L290.344 741.364 Q291.363 741.017 292.381 740.855 Q293.4 740.67 294.418 740.67 Q300.205 740.67 303.585 743.841 Q306.964 747.012 306.964 752.429 Q306.964 758.008 303.492 761.11 Q300.02 764.188 293.701 764.188 Q291.525 764.188 289.256 763.818 Q287.011 763.448 284.603 762.707 L284.603 758.008 Q286.687 759.142 288.909 759.698 Q291.131 760.253 293.608 760.253 Q297.613 760.253 299.951 758.147 Q302.288 756.04 302.288 752.429 Q302.288 748.818 299.951 746.712 Q297.613 744.605 293.608 744.605 Q291.733 744.605 289.858 745.022 Q288.006 745.438 286.062 746.318 L286.062 728.957 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M326.177 732.036 Q322.566 732.036 320.737 735.6 Q318.932 739.142 318.932 746.272 Q318.932 753.378 320.737 756.943 Q322.566 760.485 326.177 760.485 Q329.811 760.485 331.617 756.943 Q333.446 753.378 333.446 746.272 Q333.446 739.142 331.617 735.6 Q329.811 732.036 326.177 732.036 M326.177 728.332 Q331.987 728.332 335.043 732.938 Q338.122 737.522 338.122 746.272 Q338.122 754.999 335.043 759.605 Q331.987 764.188 326.177 764.188 Q320.367 764.188 317.288 759.605 Q314.233 754.999 314.233 746.272 Q314.233 737.522 317.288 732.938 Q320.367 728.332 326.177 728.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 732.036 Q352.728 732.036 350.899 735.6 Q349.094 739.142 349.094 746.272 Q349.094 753.378 350.899 756.943 Q352.728 760.485 356.339 760.485 Q359.973 760.485 361.779 756.943 Q363.608 753.378 363.608 746.272 Q363.608 739.142 361.779 735.6 Q359.973 732.036 356.339 732.036 M356.339 728.332 Q362.149 728.332 365.205 732.938 Q368.284 737.522 368.284 746.272 Q368.284 754.999 365.205 759.605 Q362.149 764.188 356.339 764.188 Q350.529 764.188 347.45 759.605 Q344.395 754.999 344.395 746.272 Q344.395 737.522 347.45 732.938 Q350.529 728.332 356.339 728.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M284.835 471.665 L307.057 471.665 L307.057 473.656 L294.511 506.225 L289.627 506.225 L301.432 475.601 L284.835 475.601 L284.835 471.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M316.224 471.665 L334.58 471.665 L334.58 475.601 L320.506 475.601 L320.506 484.073 Q321.524 483.725 322.543 483.563 Q323.562 483.378 324.58 483.378 Q330.367 483.378 333.747 486.55 Q337.126 489.721 337.126 495.137 Q337.126 500.716 333.654 503.818 Q330.182 506.897 323.862 506.897 Q321.687 506.897 319.418 506.526 Q317.173 506.156 314.765 505.415 L314.765 500.716 Q316.849 501.85 319.071 502.406 Q321.293 502.961 323.77 502.961 Q327.774 502.961 330.112 500.855 Q332.45 498.749 332.45 495.137 Q332.45 491.526 330.112 489.42 Q327.774 487.313 323.77 487.313 Q321.895 487.313 320.02 487.73 Q318.168 488.147 316.224 489.026 L316.224 471.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 474.744 Q352.728 474.744 350.899 478.309 Q349.094 481.85 349.094 488.98 Q349.094 496.087 350.899 499.651 Q352.728 503.193 356.339 503.193 Q359.973 503.193 361.779 499.651 Q363.608 496.087 363.608 488.98 Q363.608 481.85 361.779 478.309 Q359.973 474.744 356.339 474.744 M356.339 471.04 Q362.149 471.04 365.205 475.647 Q368.284 480.23 368.284 488.98 Q368.284 497.707 365.205 502.313 Q362.149 506.897 356.339 506.897 Q350.529 506.897 347.45 502.313 Q344.395 497.707 344.395 488.98 Q344.395 480.23 347.45 475.647 Q350.529 471.04 356.339 471.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M256.664 244.999 L264.303 244.999 L264.303 218.633 L255.992 220.3 L255.992 216.04 L264.256 214.374 L268.932 214.374 L268.932 244.999 L276.571 244.999 L276.571 248.934 L256.664 248.934 L256.664 244.999 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M296.015 217.452 Q292.404 217.452 290.576 221.017 Q288.77 224.559 288.77 231.688 Q288.77 238.795 290.576 242.36 Q292.404 245.901 296.015 245.901 Q299.65 245.901 301.455 242.36 Q303.284 238.795 303.284 231.688 Q303.284 224.559 301.455 221.017 Q299.65 217.452 296.015 217.452 M296.015 213.749 Q301.826 213.749 304.881 218.355 Q307.96 222.938 307.96 231.688 Q307.96 240.415 304.881 245.022 Q301.826 249.605 296.015 249.605 Q290.205 249.605 287.127 245.022 Q284.071 240.415 284.071 231.688 Q284.071 222.938 287.127 218.355 Q290.205 213.749 296.015 213.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M326.177 217.452 Q322.566 217.452 320.737 221.017 Q318.932 224.559 318.932 231.688 Q318.932 238.795 320.737 242.36 Q322.566 245.901 326.177 245.901 Q329.811 245.901 331.617 242.36 Q333.446 238.795 333.446 231.688 Q333.446 224.559 331.617 221.017 Q329.811 217.452 326.177 217.452 M326.177 213.749 Q331.987 213.749 335.043 218.355 Q338.122 222.938 338.122 231.688 Q338.122 240.415 335.043 245.022 Q331.987 249.605 326.177 249.605 Q320.367 249.605 317.288 245.022 Q314.233 240.415 314.233 231.688 Q314.233 222.938 317.288 218.355 Q320.367 213.749 326.177 213.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 217.452 Q352.728 217.452 350.899 221.017 Q349.094 224.559 349.094 231.688 Q349.094 238.795 350.899 242.36 Q352.728 245.901 356.339 245.901 Q359.973 245.901 361.779 242.36 Q363.608 238.795 363.608 231.688 Q363.608 224.559 361.779 221.017 Q359.973 217.452 356.339 217.452 M356.339 213.749 Q362.149 213.749 365.205 218.355 Q368.284 222.938 368.284 231.688 Q368.284 240.415 365.205 245.022 Q362.149 249.605 356.339 249.605 Q350.529 249.605 347.45 245.022 Q344.395 240.415 344.395 231.688 Q344.395 222.938 347.45 218.355 Q350.529 213.749 356.339 213.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.654 4017.76,231.654 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.32 457.123,1249.18 457.691,1248.95 458.259,1248.66 458.828,1248.31 459.396,1247.88 459.964,1247.35 460.533,1245.75 461.101,1245.12 461.669,1244.41 462.238,1243.6 462.806,1242.72 463.375,1241.73 463.943,1240.66 464.511,1239.5 465.08,1238.24 465.648,1236.84 466.216,1234.31 466.785,1231.68 467.353,1229.94 467.921,1228.03 468.49,1226.03 469.058,1223.88 469.626,1221.55 470.195,1218.04 470.763,1215.38 471.331,1212.55 471.9,1208.53 472.468,1204.29 473.036,1200.87 473.605,1196.19 474.173,1191.38 474.741,1187.32 475.31,1180.98 475.878,1176.55 476.446,1170.78 477.015,1165.98 477.583,1159.89 478.152,1153.56 478.72,1148.18 479.288,1142.49 479.857,1136.57 480.425,1130.48 480.993,1124.12 481.562,1115.44 482.13,1106.53 482.698,1099.43 483.267,1091.05 483.835,1082.57 484.403,1072.92 484.972,1065.03 485.54,1055.89 486.108,1047.72 486.677,1038.3 487.245,1028.68 487.813,1017.91 488.382,1008.19 488.95,998.305 489.518,989.297 490.087,979.148 490.655,965.816 491.224,956.672 491.792,944.384 492.36,933.135 492.929,924.028 493.497,914.68 494.065,903.203 494.634,893.823 495.202,883.437 495.77,873.957 496.339,864.475 496.907,853.854 497.475,842.195 498.044,830.682 498.612,821.289 499.18,810.777 499.749,801.333 500.317,790.789 500.885,778.218 501.454,764.62 502.022,754.41 502.59,744.237 503.159,733.19 503.727,723.135 504.295,713.236 504.864,704.412 505.432,695.696 506.001,684.992 506.569,673.359 507.137,665.163 507.706,654.886 508.274,646.715 508.842,637.539 509.411,627.342 509.979,617.481 510.547,608.701 511.116,598.951 511.684,591.462 512.252,583.971 512.821,575.611 513.389,567.433 513.957,559.234 514.526,551.328 515.094,542.382 515.662,534.752 516.231,527.356 516.799,521.241 517.367,513.959 517.936,507.08 518.504,498.138 519.072,489.43 519.641,481.913 520.209,472.795 520.778,467.959 521.346,463.164 521.914,457.376 522.483,452.798 523.051,447.279 523.619,442.903 524.188,434.576 524.756,430.517 525.324,429.778 525.893,423.529 526.461,418.576 527.029,415.769 527.598,409.868 528.166,405.494 528.734,401.854 529.303,397.245 529.871,393.014 530.439,391.753 531.008,386.237 531.576,383.169 532.144,379.027 532.713,375.024 533.281,369.912 533.85,367.062 534.418,364.291 534.986,361.445 535.555,358.861 536.123,356.187 536.691,351.456 537.26,344.974 537.828,341.977 538.396,340.07 538.965,336.045 539.533,332.182 540.101,330.411 540.67,328.12 541.238,325.349 541.806,323.971 542.375,321.46 542.943,318.987 543.511,317.7 544.08,317.437 544.648,315.055 545.216,313.631 545.785,312.246 546.353,308.899 546.921,306.729 547.49,302.477 548.058,301.751 548.627,300.949 549.195,299.894 549.763,295.907 550.332,294.145 550.9,293.422 551.468,291.6 552.037,289.866 552.605,289.301 553.173,288.603 553.742,283.825 554.31,283.238 554.878,282.093 555.447,281.918 556.015,279.566 556.583,278.328 557.152,274.979 557.72,274.993 558.288,272.755 558.857,271.916 559.425,272.991 559.993,271.057 560.562,268.82 561.13,267.063 561.698,266.293 562.267,263.457 562.835,262.989 563.404,261.442 563.972,263.065 564.54,261.343 565.109,261.803 565.677,261.026 566.245,261.773 566.814,261.456 567.382,262.951 567.95,261.208 568.519,262.415 569.087,262.645 569.655,262.906 570.224,263.212 570.792,260.344 571.36,261.502 571.929,261.481 572.497,261.481 573.065,262.778 573.634,260.646 574.202,262.739 574.77,262.585 575.339,262.473 575.907,261.5 576.476,261.296 577.044,263.388 577.612,262.101 578.181,261.919 578.749,260.792 579.317,261.592 579.886,261.106 580.454,260.75 581.022,259.388 581.591,260.258 582.159,258.868 582.727,256.534 583.296,257.65 583.864,257.326 584.432,257.164 585.001,254.776 585.569,252.608 586.137,251.697 586.706,251.818 587.274,250.851 587.842,249.003 588.411,245.974 588.979,248.461 589.547,249.798 590.116,252.996 590.684,253.039 591.253,251.685 591.821,253.712 592.389,253.539 592.958,252.235 593.526,249.776 594.094,250.7 594.663,249.807 595.231,252.847 595.799,252.585 596.368,248.334 596.936,247.503 597.504,247.583 598.073,247.371 598.641,246.305 599.209,245.256 599.778,245.619 600.346,241.813 600.914,242.296 601.483,242.395 602.051,242.645 602.619,242.945 603.188,243.075 603.756,243.153 604.325,243.25 604.893,243.55 605.461,242.873 606.03,242.945 606.598,242.411 607.166,240.502 607.735,237.836 608.303,241.654 608.871,241.994 609.44,237.002 610.008,236.65 610.576,236.118 611.145,234.788 611.713,233.346 612.281,234.167 612.85,234.867 613.418,236.604 613.986,237.41 614.555,237.066 615.123,237.748 615.691,238.061 616.26,238.642 616.828,239.008 617.396,239.541 617.965,242.84 618.533,243.132 619.102,246.353 619.67,245.313 620.238,245.512 620.807,247.593 621.375,244.326 621.943,243.086 622.512,243.129 623.08,242.995 623.648,241.944 624.217,242.904 624.785,241.805 625.353,242.249 625.922,242.328 626.49,243.597 627.058,244.512 627.627,242.448 628.195,238.495 628.763,238.812 629.332,238.081 629.9,238.353 630.468,238.598 631.037,238.68 631.605,240.093 632.173,238.144 632.742,239.607 633.31,239.852 633.879,238.851 634.447,241.448 635.015,242.431 635.584,242.44 636.152,242.664 636.72,242.837 637.289,241.618 637.857,241.813 638.425,241.855 638.994,244.014 639.562,241.939 640.13,241.766 640.699,241.626 641.267,242.809 641.835,241.845 642.404,242.821 642.972,242.727 643.54,240.518 644.109,239.459 644.677,239.254 645.245,238.461 645.814,238.586 646.382,238.874 646.951,238.945 647.519,238.085 648.087,235.093 648.656,235.464 649.224,237.961 649.792,238.208 650.361,235.367 650.929,235.616 651.497,238.001 652.066,237.051 652.634,238.217 653.202,237.229 653.771,237.498 654.339,236.59 654.907,236.836 655.476,236.178 656.044,236.315 656.612,239.674 657.181,236.571 657.749,236.594 658.317,235.667 658.886,238.031 659.454,239.089 660.022,239.124 660.591,239.364 661.159,239.311 661.728,239.179 662.296,238.284 662.864,239.326 663.433,240.275 664.001,242.026 664.569,241.557 665.138,239.157 665.706,238.206 666.274,238.387 666.843,237.507 667.411,237.633 667.979,234.484 668.548,234.668 669.116,237.03 669.684,236.397 670.253,236.41 670.821,236.46 671.389,234.572 671.958,234.703 672.526,236.897 673.094,238.064 673.663,238.252 674.231,237.259 674.799,236.146 675.368,235.13 675.936,233.321 676.505,232.488 677.073,233.009 677.641,231.479 678.21,229.769 678.778,230.454 679.346,229.087 679.915,229.594 680.483,229.242 681.051,228.935 681.62,232.336 682.188,231.599 682.756,234.056 683.325,234.164 683.893,233.243 684.461,234.409 685.03,232.57 685.598,231.681 686.166,233.982 686.735,235.047 687.303,232.218 687.871,234.648 688.44,234.777 689.008,237.03 689.577,234.015 690.145,235.23 690.713,235.511 691.282,236.917 691.85,238 692.418,238.907 692.987,237.754 693.555,237.387 694.123,237.347 694.692,236.507 695.26,235.599 695.828,236.698 696.397,238.787 696.965,238.673 697.533,238.49 698.102,241.334 698.67,242.114 699.238,239.754 699.807,238.517 700.375,236.309 700.943,237.331 701.512,237.26 702.08,236.338 702.648,235.195 703.217,235.1 703.785,235.308 704.354,234.03 704.922,232.29 705.49,232.638 706.059,233.84 706.627,234.888 707.195,233.776 707.764,235.09 708.332,234.976 708.9,235.935 709.469,233.742 710.037,233.908 710.605,232.088 711.174,232.256 711.742,228.54 712.31,228.023 712.879,228.881 713.447,229.275 714.015,229.775 714.584,231.152 715.152,232.283 715.72,233.682 716.289,233.872 716.857,235.044 717.425,235.206 717.994,235.397 718.562,234.448 719.131,233.686 719.699,231.759 720.267,230.86 720.836,230.141 721.404,229.516 721.972,228.8 722.541,227.335 723.109,228.004 723.677,228.466 724.246,229.998 724.814,232.537 725.382,231.669 725.951,232.109 726.519,233.463 727.087,233.805 727.656,233.068 728.224,233.284 728.792,233.662 729.361,236.821 729.929,234.765 730.497,236.045 731.066,238.214 731.634,239.078 732.203,237.918 732.771,237.787 733.339,236.479 733.908,238.547 734.476,240.35 735.044,238.918 735.613,238.833 736.181,238.59 736.749,239.365 737.318,240.025 737.886,239.773 738.454,238.503 739.023,239.237 739.591,238.771 740.159,240.289 740.728,239.828 741.296,238.532 741.864,237.255 742.433,234.96 743.001,234.852 743.569,233.894 744.138,232.777 744.706,232.9 745.274,232.063 745.843,232.182 746.411,230.427 746.98,228.647 747.548,228.073 748.116,226.467 748.685,228.05 749.253,227.389 749.821,228.902 750.39,228.476 750.958,230 751.526,230.369 752.095,230.614 752.663,231.014 753.231,234.347 753.8,233.293 754.368,236.525 754.936,236.437 755.505,236.333 756.073,233.983 756.641,229.986 757.21,229.139 757.778,230.457 758.346,230.873 758.915,231.045 759.483,231.236 760.052,231.563 760.62,232.826 761.188,234.056 761.757,234.142 762.325,235.243 762.893,234.996 763.462,234.949 764.03,235.877 764.598,237.952 765.167,238.691 765.735,239.574 766.303,238.17 766.872,236.989 767.44,238.831 768.008,237.551 768.577,238.527 769.145,238.008 769.713,233.599 770.282,231.547 770.85,230.719 771.418,232.128 771.987,234.508 772.555,235.598 773.123,235.541 773.692,235.583 774.26,237.59 774.829,237.355 775.397,237.063 775.965,236.469 776.534,236.17 777.102,235.919 777.67,235.65 778.239,237.693 778.807,236.228 779.375,235.938 779.944,235.773 780.512,235.441 781.08,236.341 781.649,235.057 782.217,232.72 782.785,233.74 783.354,233.521 783.922,235.451 784.49,234.461 785.059,233.35 785.627,231.414 786.195,232.552 786.764,235.536 787.332,232.272 787.9,234.433 788.469,234.146 789.037,233.781 789.606,232.627 790.174,234.661 790.742,235.413 791.311,233.041 791.879,232.961 792.447,234.991 793.016,236.749 793.584,236.298 794.152,235.136 794.721,232.051 795.289,232.002 795.857,231.001 796.426,232.372 796.994,232.418 797.562,232.459 798.131,233.399 798.699,233.247 799.267,232.23 799.836,234.345 800.404,233.134 800.972,232.076 801.541,231.057 802.109,228.987 802.678,228.182 803.246,229.509 803.814,229.558 804.383,229.652 804.951,228.731 805.519,228.885 806.088,229.016 806.656,228.21 807.224,230.6 807.793,229.788 808.361,229.96 808.929,229.947 809.498,229.111 810.066,230.225 810.634,231.377 811.203,232.571 811.771,233.589 812.339,233.366 812.908,234.561 813.476,232.596 814.044,231.37 814.613,231.482 815.181,231.463 815.749,232.605 816.318,233.924 816.886,233.569 817.455,232.356 818.023,232.619 818.591,231.543 819.16,232.631 819.728,232.771 820.296,231.912 820.865,232.234 821.433,231.272 822.001,231.636 822.57,232.887 823.138,233.657 823.706,234.693 824.275,232.473 824.843,232.533 825.411,231.579 825.98,231.636 826.548,232.882 827.116,233.765 827.685,232.537 828.253,232.37 828.821,232.567 829.39,232.624 829.958,232.8 830.526,232.636 831.095,232.763 831.663,231.684 832.232,229.784 832.8,229.977 833.368,229.093 833.937,230.318 834.505,229.326 835.073,229.633 835.642,228.935 836.21,230.349 836.778,230.541 837.347,227.771 837.915,228.053 838.483,228.162 839.052,228.375 839.62,228.747 840.188,228.245 840.757,226.755 841.325,225.209 841.893,224.79 842.462,223.647 843.03,224.493 843.598,224.072 844.167,223.777 844.735,225.447 845.304,226.968 845.872,226.614 846.44,228.26 847.009,228.528 847.577,229.996 848.145,231.484 848.714,231.78 849.282,231.858 849.85,233.124 850.419,233.153 850.987,235.194 851.555,234.116 852.124,234.164 852.692,234.282 853.26,233.947 853.829,234.059 854.397,234.317 854.965,234.397 855.534,234.283 856.102,234.291 856.67,235.468 857.239,237.786 857.807,236.648 858.375,238.419 858.944,241.322 859.512,241.651 860.081,241.172 860.649,243.727 861.217,243.854 861.786,243.071 862.354,242.21 862.922,243.336 863.491,239.34 864.059,237.76 864.627,237.237 865.196,236.737 865.764,235.301 866.332,233.994 866.901,233.759 867.469,233.63 868.037,234.447 868.606,234.175 869.174,234.001 869.742,232.832 870.311,234.013 870.879,234.849 871.447,235.71 872.016,237.333 872.584,235.847 873.152,234.389 873.721,235.44 874.289,235.053 874.858,234.854 875.426,234.73 875.994,233.427 876.563,232.237 877.131,231.075 877.699,230.988 878.268,231.874 878.836,233.019 879.404,233.094 879.973,232.887 880.541,230.652 881.109,228.825 881.678,229.211 882.246,228.415 882.814,228.446 883.383,228.797 883.951,230.12 884.519,229.987 885.088,228.158 885.656,228.359 886.224,228.683 886.793,230.006 887.361,231.297 887.93,232.179 888.498,234.191 889.066,234.146 889.635,233.062 890.203,231.938 890.771,232.812 891.34,232.687 891.908,231.654 892.476,231.587 893.045,231.658 893.613,231.618 894.181,233.6 894.75,233.725 895.318,235.918 895.886,236.496 896.455,237.411 897.023,235.984 897.591,237.914 898.16,237.34 898.728,236.952 899.296,235.613 899.865,235.441 900.433,235.336 901.001,236.043 901.57,235.851 902.138,235.549 902.707,236.343 903.275,236.925 903.843,237.615 904.412,235.888 904.98,236.429 905.548,238.113 906.117,238.535 906.685,237.861 907.253,238.413 907.822,236.818 908.39,235.25 908.958,233.799 909.527,232.442 910.095,229.348 910.663,228.455 911.232,229.42 911.8,230.543 912.368,228.564 912.937,228.797 913.505,230.891 914.073,229.986 914.642,229.911 915.21,230.046 915.779,229.944 916.347,229.904 916.915,228.777 917.484,229.977 918.052,228.782 918.62,229.152 919.189,229.239 919.757,229.316 920.325,229.36 920.894,229.487 921.462,228.513 922.03,228.7 922.599,229.863 923.167,229.003 923.735,230.036 924.304,230.09 924.872,231.23 925.44,230.242 926.009,229.323 926.577,228.536 927.145,229.581 927.714,229.765 928.282,228.695 928.85,228.752 929.419,226.808 929.987,226.066 930.556,227.683 931.124,231.12 931.692,231.066 932.261,231.217 932.829,232.211 933.397,233.139 933.966,233.109 934.534,232.144 935.102,233.104 935.671,234.089 936.239,231.803 936.807,231.842 937.376,232.67 937.944,233.654 938.512,233.568 939.081,231.486 939.649,230.57 940.217,229.798 940.786,229.926 941.354,229.024 941.922,229.95 942.491,229.075 943.059,231.25 943.627,231.067 944.196,231 944.764,231.024 945.333,231.013 945.901,232.273 946.469,234.366 947.038,233.237 947.606,233.245 948.174,231.133 948.743,231.186 949.311,229.161 949.879,230.52 950.448,231.817 951.016,231.856 951.584,230.625 952.153,231.503 952.721,232.724 953.289,232.736 953.858,233.569 954.426,233.318 954.994,233.232 955.563,232.211 956.131,231.193 956.699,230.392 957.268,229.551 957.836,230.697 958.405,232.88 958.973,232.779 959.541,233.908 960.11,233.972 960.678,234.073 961.246,232.062 961.815,231.087 962.383,232.067 962.951,232.335 963.52,229.156 964.088,230.304 964.656,232.47 965.225,231.467 965.793,231.518 966.361,229.608 966.93,230.633 967.498,231.005 968.066,229.999 968.635,230.719 969.203,230.964 969.771,231.12 970.34,230.254 970.908,229.329 971.476,229.574 972.045,226.562 972.613,227.813 973.182,228.118 973.75,229.507 974.318,226.78 974.887,228.183 975.455,229.499 976.023,228.762 976.592,229.901 977.16,231.124 977.728,232.328 978.297,232.6 978.865,233.486 979.433,232.283 980.002,234.451 980.57,234.482 981.138,236.428 981.707,236.025 982.275,233.937 982.843,234.728 983.412,233.705 983.98,230.357 984.548,230.374 985.117,230.749 985.685,228.947 986.253,228.992 986.822,231.411 987.39,232.375 987.959,231.498 988.527,231.426 989.095,232.448 989.664,231.335 990.232,231.495 990.8,232.765 991.369,231.55 991.937,230.537 992.505,233.671 993.074,233.657 993.642,233.469 994.21,234.22 994.779,234.187 995.347,232.875 995.915,232.772 996.484,231.499 997.052,231.622 997.62,229.741 998.189,229.852 998.757,231.114 999.325,231.359 999.894,230.592 1000.46,229.545 1001.03,227.753 1001.6,227.138 1002.17,228.655 1002.74,228.947 1003.3,229.254 1003.87,228.434 1004.44,226.666 1005.01,228.258 1005.58,230.726 1006.15,231.094 1006.71,235.419 1007.28,235.256 1007.85,235.09 1008.42,233.047 1008.99,233.913 1009.56,234.749 1010.12,234.277 1010.69,233.061 1011.26,232.84 1011.83,232.718 1012.4,233.838 1012.97,231.879 1013.53,230.732 1014.1,231.939 1014.67,231.964 1015.24,232.067 1015.81,231.038 1016.38,232.148 1016.94,230.988 1017.51,230.863 1018.08,230.641 1018.65,229.627 1019.22,230.962 1019.79,231.283 1020.35,231.447 1020.92,230.408 1021.49,229.588 1022.06,229.59 1022.63,228.874 1023.2,228.058 1023.76,227.237 1024.33,229.809 1024.9,230.032 1025.47,231.228 1026.04,230.365 1026.61,230.484 1027.17,230.846 1027.74,232.192 1028.31,234.308 1028.88,234.261 1029.45,235.173 1030.02,232.645 1030.58,231.72 1031.15,230.786 1031.72,232.894 1032.29,231.816 1032.86,229.983 1033.43,229.229 1033.99,229.316 1034.56,227.347 1035.13,225.589 1035.7,228.053 1036.27,228.2 1036.84,229.812 1037.4,231.125 1037.97,231.349 1038.54,228.607 1039.11,228.952 1039.68,229.109 1040.25,229.309 1040.81,229.525 1041.38,228.873 1041.95,230.312 1042.52,231.477 1043.09,231.573 1043.66,231.544 1044.22,231.912 1044.79,235.237 1045.36,235.184 1045.93,235.153 1046.5,235.9 1047.07,234.596 1047.63,236.695 1048.2,236.404 1048.77,233.861 1049.34,233.771 1049.91,231.751 1050.48,233.939 1051.05,232.958 1051.61,231.94 1052.18,231.008 1052.75,230.052 1053.32,231.079 1053.89,231.322 1054.46,232.525 1055.02,230.554 1055.59,230.551 1056.16,231.773 1056.73,231.683 1057.3,234.019 1057.87,234.029 1058.43,232.761 1059,232.952 1059.57,231.934 1060.14,232.932 1060.71,231.818 1061.28,229.891 1061.84,230.009 1062.41,233.285 1062.98,232.188 1063.55,231.054 1064.12,231.202 1064.69,232.207 1065.25,231.058 1065.82,229.234 1066.39,230.885 1066.96,227.873 1067.53,228.578 1068.1,231.942 1068.66,231.065 1069.23,231.979 1069.8,234.042 1070.37,233.086 1070.94,234.135 1071.51,233.846 1072.07,233.547 1072.64,234.401 1073.21,233.366 1073.78,232.364 1074.35,233.279 1074.92,235.427 1075.48,234.096 1076.05,233.897 1076.62,234.793 1077.19,233.893 1077.76,232.026 1078.33,232.979 1078.89,232.182 1079.46,230.969 1080.03,231.161 1080.6,233.275 1081.17,234.186 1081.74,237.042 1082.3,236.971 1082.87,236.701 1083.44,236.591 1084.01,236.381 1084.58,236.2 1085.15,234.757 1085.71,232.44 1086.28,230.186 1086.85,231.301 1087.42,230.452 1087.99,228.564 1088.56,224.637 1089.12,226.099 1089.69,223.435 1090.26,226.22 1090.83,225.639 1091.4,225.35 1091.97,225.835 1092.53,227.379 1093.1,229.929 1093.67,231.283 1094.24,231.314 1094.81,232.707 1095.38,234.685 1095.94,239.642 1096.51,239.126 1097.08,238.501 1097.65,239.975 1098.22,239.503 1098.79,241.003 1099.35,243.491 1099.92,240.573 1100.49,239.074 1101.06,238.695 1101.63,237.866 1102.2,239.403 1102.76,238.853 1103.33,237.324 1103.9,237.836 1104.47,235.326 1105.04,237.219 1105.61,236.754 1106.17,237.385 1106.74,237.927 1107.31,236.337 1107.88,237.037 1108.45,237.597 1109.02,234.96 1109.58,235.774 1110.15,236.285 1110.72,235.992 1111.29,234.51 1111.86,233.249 1112.43,233.052 1112.99,232.891 1113.56,233.598 1114.13,233.347 1114.7,234.195 1115.27,235.727 1115.84,235.383 1116.4,233.938 1116.97,233.622 1117.54,233.151 1118.11,235.961 1118.68,236.66 1119.25,236.16 1119.81,234.601 1120.38,235.483 1120.95,233.831 1121.52,233.53 1122.09,232.183 1122.66,229.881 1123.23,230.904 1123.79,231.697 1124.36,230.707 1124.93,230.606 1125.5,230.661 1126.07,231.561 1126.64,229.216 1127.2,229.006 1127.77,229.877 1128.34,229.868 1128.91,226.793 1129.48,227.043 1130.05,227.189 1130.61,226.308 1131.18,225.813 1131.75,224.083 1132.32,223.659 1132.89,219.976 1133.46,219.895 1134.02,222.686 1134.59,224.304 1135.16,228.072 1135.73,229.381 1136.3,232.504 1136.87,231.537 1137.43,231.555 1138,229.627 1138.57,229.586 1139.14,230.65 1139.71,229.82 1140.28,230.037 1140.84,230.228 1141.41,230.277 1141.98,231.473 1142.55,233.669 1143.12,232.378 1143.69,234.211 1144.25,234.185 1144.82,233.837 1145.39,233.978 1145.96,233.945 1146.53,230.567 1147.1,230.529 1147.66,230.389 1148.23,229.453 1148.8,231.593 1149.37,232.74 1149.94,230.613 1150.51,230.787 1151.07,227.806 1151.64,225.078 1152.21,226.607 1152.78,225.805 1153.35,225.124 1153.92,223.511 1154.48,224.172 1155.05,223.623 1155.62,225.047 1156.19,224.67 1156.76,225.339 1157.33,226.786 1157.89,227.063 1158.46,229.594 1159.03,229.729 1159.6,232.24 1160.17,232.181 1160.74,232.135 1161.3,235.136 1161.87,234.924 1162.44,235.779 1163.01,233.494 1163.58,232.302 1164.15,234.291 1164.71,231.997 1165.28,230.953 1165.85,230.957 1166.42,230.014 1166.99,229.039 1167.56,229.215 1168.12,227.483 1168.69,229.832 1169.26,229.779 1169.83,229.034 1170.4,232.559 1170.97,233.577 1171.53,232.484 1172.1,234.618 1172.67,233.37 1173.24,231.353 1173.81,232.608 1174.38,233.659 1174.94,232.783 1175.51,232.527 1176.08,230.443 1176.65,230.579 1177.22,231.749 1177.79,233.919 1178.35,232.854 1178.92,231.691 1179.49,230.807 1180.06,231.822 1180.63,233.038 1181.2,231.136 1181.76,231.065 1182.33,234.382 1182.9,234.137 1183.47,234.055 1184.04,235.062 1184.61,235.054 1185.17,235.725 1185.74,235.448 1186.31,234.137 1186.88,231.877 1187.45,232.885 1188.02,231.806 1188.58,231.896 1189.15,230.769 1189.72,230.885 1190.29,230.863 1190.86,232.96 1191.43,234.163 1192,233.859 1192.56,234.83 1193.13,233.687 1193.7,231.52 1194.27,231.373 1194.84,230.416 1195.41,231.524 1195.97,229.725 1196.54,229.772 1197.11,232.091 1197.68,232.032 1198.25,231.166 1198.82,229.288 1199.38,228.455 1199.95,227.746 1200.52,224.998 1201.09,227.709 1201.66,228.995 1202.23,229.178 1202.79,230.321 1203.36,230.4 1203.93,231.481 1204.5,232.305 1205.07,232.116 1205.64,233.09 1206.2,230.91 1206.77,231.947 1207.34,233.095 1207.91,233.83 1208.48,232.696 1209.05,230.443 1209.61,229.553 1210.18,229.795 1210.75,227.086 1211.32,228.4 1211.89,228.683 1212.46,228.023 1213.02,228.213 1213.59,227.445 1214.16,225.932 1214.73,225.41 1215.3,226.926 1215.87,227.355 1216.43,229.887 1217,228.962 1217.57,230.289 1218.14,231.405 1218.71,232.705 1219.28,233.832 1219.84,237.049 1220.41,235.852 1220.98,236.68 1221.55,237.436 1222.12,237.89 1222.69,237.482 1223.25,237.984 1223.82,237.607 1224.39,238.252 1224.96,238.561 1225.53,236.852 1226.1,237.483 1226.66,234.103 1227.23,235.025 1227.8,234.664 1228.37,233.33 1228.94,234.602 1229.51,234.607 1230.07,235.396 1230.64,234.039 1231.21,233.735 1231.78,232.563 1232.35,229.426 1232.92,228.509 1233.48,225.469 1234.05,224.799 1234.62,225.304 1235.19,226.885 1235.76,230.602 1236.33,231.76 1236.89,231.711 1237.46,231.536 1238.03,231.594 1238.6,233.644 1239.17,234.509 1239.74,234.177 1240.3,234.106 1240.87,235.129 1241.44,233.81 1242.01,233.774 1242.58,233.669 1243.15,233.671 1243.71,232.407 1244.28,234.435 1244.85,235.238 1245.42,234.864 1245.99,235.776 1246.56,236.63 1247.12,236.513 1247.69,236.191 1248.26,235.629 1248.83,235.583 1249.4,236.277 1249.97,235.693 1250.53,236.544 1251.1,235.132 1251.67,234.634 1252.24,234.173 1252.81,233.818 1253.38,235.605 1253.94,234.291 1254.51,232.032 1255.08,231.915 1255.65,231.527 1256.22,232.637 1256.79,232.31 1257.35,231.345 1257.92,229.06 1258.49,227.928 1259.06,227.232 1259.63,228.673 1260.2,226.291 1260.76,228.727 1261.33,229.021 1261.9,230.296 1262.47,230.3 1263.04,231.337 1263.61,231.224 1264.18,232.223 1264.74,230.283 1265.31,232.381 1265.88,234.317 1266.45,234.103 1267.02,237.081 1267.59,235.69 1268.15,236.436 1268.72,234.007 1269.29,235.803 1269.86,236.333 1270.43,235.894 1271,235.426 1271.56,234.108 1272.13,235.724 1272.7,235.342 1273.27,233.98 1273.84,233.841 1274.41,232.549 1274.97,231.529 1275.54,230.606 1276.11,230.68 1276.68,229.417 1277.25,228.362 1277.82,227.684 1278.38,227.832 1278.95,226.12 1279.52,225.363 1280.09,224.812 1280.66,227.239 1281.23,229.552 1281.79,230.62 1282.36,230.72 1282.93,229.699 1283.5,228.851 1284.07,227.892 1284.64,229.225 1285.2,230.504 1285.77,229.642 1286.34,229.856 1286.91,230.821 1287.48,230.809 1288.05,230.898 1288.61,232.039 1289.18,230.773 1289.75,233.01 1290.32,231.85 1290.89,230.549 1291.46,230.759 1292.02,229.697 1292.59,228.745 1293.16,228.785 1293.73,228.822 1294.3,226.761 1294.87,224.154 1295.43,224.623 1296,226.086 1296.57,223.385 1297.14,223.784 1297.71,226.329 1298.28,222.78 1298.84,222.443 1299.41,223.173 1299.98,224.964 1300.55,225.58 1301.12,225.115 1301.69,223.614 1302.25,227.385 1302.82,227.067 1303.39,228.535 1303.96,227.914 1304.53,230.306 1305.1,227.462 1305.66,227.862 1306.23,229.305 1306.8,230.591 1307.37,229.933 1307.94,230.176 1308.51,229.431 1309.07,230.655 1309.64,231.818 1310.21,231.862 1310.78,234.173 1311.35,235.14 1311.92,234.081 1312.48,234.985 1313.05,236.059 1313.62,235.157 1314.19,232.993 1314.76,232.163 1315.33,231.183 1315.89,233.512 1316.46,232.591 1317.03,233.661 1317.6,234.722 1318.17,236.585 1318.74,234.426 1319.3,234.213 1319.87,234.116 1320.44,235.262 1321.01,238.153 1321.58,237.827 1322.15,237.723 1322.71,236.277 1323.28,237.162 1323.85,239.009 1324.42,240.553 1324.99,239.798 1325.56,239.041 1326.12,238.372 1326.69,236.688 1327.26,236.088 1327.83,234.813 1328.4,235.494 1328.97,234.042 1329.53,232.707 1330.1,232.621 1330.67,233.505 1331.24,235.302 1331.81,236.161 1332.38,234.75 1332.94,235.622 1333.51,234.278 1334.08,235.069 1334.65,233.81 1335.22,235.667 1335.79,234.248 1336.36,233.918 1336.92,232.607 1337.49,234.411 1338.06,234.079 1338.63,234.862 1339.2,235.438 1339.77,234.897 1340.33,232.522 1340.9,231.045 1341.47,233.261 1342.04,232.955 1342.61,232.71 1343.18,233.516 1343.74,233.037 1344.31,232.768 1344.88,232.547 1345.45,233.398 1346.02,232.351 1346.59,231.03 1347.15,231.93 1347.72,232.814 1348.29,232.325 1348.86,233.247 1349.43,233.056 1350,232.726 1350.56,232.369 1351.13,232.968 1351.7,231.717 1352.27,230.474 1352.84,230.41 1353.41,230.667 1353.97,230.601 1354.54,228.657 1355.11,227.806 1355.68,229.153 1356.25,231.545 1356.82,231.337 1357.38,231.316 1357.95,231.094 1358.52,230.143 1359.09,228.22 1359.66,226.59 1360.23,227.878 1360.79,227.724 1361.36,228.779 1361.93,229.893 1362.5,229.944 1363.07,231.131 1363.64,230.063 1364.2,229.063 1364.77,228.255 1365.34,228.533 1365.91,228.569 1366.48,229.898 1367.05,229.846 1367.61,229.989 1368.18,230.9 1368.75,231.065 1369.32,230.974 1369.89,230.951 1370.46,231.167 1371.02,230.035 1371.59,229.051 1372.16,232.203 1372.73,233.099 1373.3,232.004 1373.87,233.005 1374.43,229.881 1375,229.051 1375.57,230.236 1376.14,229.209 1376.71,227.328 1377.28,227.8 1377.84,227.971 1378.41,228.993 1378.98,228.057 1379.55,228.281 1380.12,226.572 1380.69,228 1381.25,228.279 1381.82,228.458 1382.39,230.759 1382.96,230.744 1383.53,229.999 1384.1,232.233 1384.66,233.96 1385.23,230.608 1385.8,231.655 1386.37,232.811 1386.94,234.876 1387.51,234.706 1388.07,233.507 1388.64,233.472 1389.21,231.003 1389.78,231.103 1390.35,230.021 1390.92,231.137 1391.48,230.094 1392.05,230.111 1392.62,229.277 1393.19,228.36 1393.76,227.438 1394.33,227.82 1394.89,229.309 1395.46,230.492 1396.03,230.534 1396.6,230.574 1397.17,230.515 1397.74,232.757 1398.3,231.73 1398.87,231.531 1399.44,230.584 1400.01,229.697 1400.58,232.826 1401.15,232.491 1401.71,234.555 1402.28,235.378 1402.85,234.062 1403.42,233.978 1403.99,232.956 1404.56,232.612 1405.13,232.858 1405.69,233.634 1406.26,232.429 1406.83,232.18 1407.4,232.332 1407.97,233.44 1408.54,232.484 1409.1,230.195 1409.67,230.348 1410.24,230.351 1410.81,230.427 1411.38,229.525 1411.95,229.889 1412.51,228.975 1413.08,229.042 1413.65,229.381 1414.22,229.494 1414.79,230.671 1415.36,228.764 1415.92,230.145 1416.49,229.144 1417.06,231.45 1417.63,229.511 1418.2,228.749 1418.77,227.207 1419.33,227.559 1419.9,228.135 1420.47,228.559 1421.04,227.125 1421.61,227.764 1422.18,230.19 1422.74,229.347 1423.31,231.494 1423.88,231.547 1424.45,233.788 1425.02,233.83 1425.59,233.712 1426.15,231.555 1426.72,230.705 1427.29,231.78 1427.86,229.821 1428.43,230.08 1429,229.118 1429.56,229.404 1430.13,230.714 1430.7,232.046 1431.27,230.032 1431.84,231.326 1432.41,230.241 1432.97,230.535 1433.54,232.92 1434.11,232.913 1434.68,233.955 1435.25,230.818 1435.82,230.797 1436.38,230.081 1436.95,229.29 1437.52,227.361 1438.09,225.813 1438.66,226.609 1439.23,227.061 1439.79,228.611 1440.36,232.083 1440.93,231.535 1441.5,231.677 1442.07,231.977 1442.64,232.159 1443.2,233.1 1443.77,234.291 1444.34,235.2 1444.91,233.94 1445.48,236.134 1446.05,238.13 1446.61,237.724 1447.18,239.466 1447.75,236.903 1448.32,234.304 1448.89,235.179 1449.46,233.74 1450.02,233.704 1450.59,232.442 1451.16,235.281 1451.73,235.07 1452.3,235.706 1452.87,235.248 1453.43,235.087 1454,235.895 1454.57,233.649 1455.14,231.579 1455.71,230.609 1456.28,232.776 1456.84,233.914 1457.41,234.791 1457.98,235.684 1458.55,234.578 1459.12,235.404 1459.69,236.204 1460.25,237.08 1460.82,237.728 1461.39,236.316 1461.96,235.946 1462.53,236.728 1463.1,235.192 1463.66,236.976 1464.23,236.465 1464.8,238.299 1465.37,236.939 1465.94,235.323 1466.51,235.214 1467.07,236.921 1467.64,236.361 1468.21,236.052 1468.78,235.67 1469.35,236.263 1469.92,235.957 1470.48,234.468 1471.05,234.131 1471.62,235.028 1472.19,234.754 1472.76,234.551 1473.33,233.377 1473.89,234.978 1474.46,233.406 1475.03,232.212 1475.6,231.951 1476.17,230.791 1476.74,229.559 1477.31,228.241 1477.87,229.364 1478.44,230.582 1479.01,228.31 1479.58,228.358 1480.15,228.422 1480.72,229.663 1481.28,225.658 1481.85,228.096 1482.42,230.228 1482.99,229.36 1483.56,228.474 1484.13,228.695 1484.69,229.797 1485.26,229.774 1485.83,227.48 1486.4,226.623 1486.97,227.024 1487.54,226.258 1488.1,227.723 1488.67,229.036 1489.24,229.125 1489.81,227.413 1490.38,225.587 1490.95,226.774 1491.51,226.987 1492.08,227.498 1492.65,228.954 1493.22,228.305 1493.79,227.395 1494.36,229.809 1494.92,231.175 1495.49,232.115 1496.06,231.168 1496.63,232.359 1497.2,230.331 1497.77,231.501 1498.33,231.43 1498.9,230.445 1499.47,229.48 1500.04,230.907 1500.61,230.977 1501.18,230.98 1501.74,232.75 1502.31,232.549 1502.88,232.277 1503.45,233.234 1504.02,232.026 1504.59,233.018 1505.15,234.013 1505.72,233.736 1506.29,232.336 1506.86,232.371 1507.43,229.113 1508,230.915 1508.56,231.205 1509.13,229.647 1509.7,229.747 1510.27,228.976 1510.84,230.283 1511.41,228.331 1511.97,226.489 1512.54,226.822 1513.11,226.246 1513.68,223.494 1514.25,222.987 1514.82,224.694 1515.38,224.259 1515.95,226.712 1516.52,225.901 1517.09,224.494 1517.66,226.318 1518.23,225.796 1518.79,224.236 1519.36,222.029 1519.93,221.825 1520.5,221.568 1521.07,224.518 1521.64,226.22 1522.2,228.867 1522.77,230.353 1523.34,228.599 1523.91,231.834 1524.48,234.969 1525.05,235.094 1525.61,236.102 1526.18,236.749 1526.75,236.587 1527.32,238.259 1527.89,239.011 1528.46,241.714 1529.02,238.981 1529.59,239.973 1530.16,240.575 1530.73,238.135 1531.3,239.996 1531.87,240.598 1532.43,240.243 1533,237.399 1533.57,237.123 1534.14,236.858 1534.71,236.583 1535.28,235.119 1535.84,233.893 1536.41,233.738 1536.98,233.612 1537.55,234.67 1538.12,231.322 1538.69,233.401 1539.25,233.331 1539.82,234.467 1540.39,234.331 1540.96,232.164 1541.53,230.932 1542.1,230.956 1542.66,230.967 1543.23,229.773 1543.8,229.003 1544.37,229.179 1544.94,230.348 1545.51,229.213 1546.08,230.393 1546.64,231.714 1547.21,229.674 1547.78,229.688 1548.35,228.98 1548.92,230.292 1549.49,231.554 1550.05,231.649 1550.62,232.962 1551.19,232.878 1551.76,235.906 1552.33,237.87 1552.9,235.551 1553.46,235.491 1554.03,233.17 1554.6,230.177 1555.17,229.145 1555.74,232.274 1556.31,232.116 1556.87,233.311 1557.44,235.454 1558.01,234.267 1558.58,233.17 1559.15,234.018 1559.72,234.88 1560.28,231.614 1560.85,230.427 1561.42,232.416 1561.99,233.107 1562.56,233.003 1563.13,233.93 1563.69,234.887 1564.26,234.493 1564.83,235.253 1565.4,233.857 1565.97,234.69 1566.54,233.303 1567.1,235.297 1567.67,234.969 1568.24,233.835 1568.81,231.54 1569.38,232.508 1569.95,235.513 1570.51,235.016 1571.08,235.792 1571.65,235.412 1572.22,233.091 1572.79,232.919 1573.36,232.728 1573.92,233.637 1574.49,233.097 1575.06,233.037 1575.63,231.783 1576.2,227.796 1576.77,230.091 1577.33,231.072 1577.9,233.211 1578.47,232.951 1579.04,229.595 1579.61,228.61 1580.18,226.623 1580.74,229.868 1581.31,230.022 1581.88,232.177 1582.45,231.019 1583.02,229.843 1583.59,228.78 1584.15,228.745 1584.72,226.831 1585.29,226.176 1585.86,226.5 1586.43,227.869 1587,229.343 1587.56,227.488 1588.13,225.695 1588.7,225.109 1589.27,224.715 1589.84,224.184 1590.41,225.88 1590.97,228.39 1591.54,229.536 1592.11,229.702 1592.68,230.091 1593.25,228.275 1593.82,230.519 1594.38,230.707 1594.95,231.708 1595.52,232.837 1596.09,233.722 1596.66,231.459 1597.23,232.42 1597.79,231.436 1598.36,231.478 1598.93,231.415 1599.5,231.255 1600.07,233.273 1600.64,233.445 1601.2,236.422 1601.77,236.193 1602.34,236.098 1602.91,238.027 1603.48,237.635 1604.05,236.144 1604.61,235.818 1605.18,234.706 1605.75,234.199 1606.32,234.043 1606.89,231.764 1607.46,230.707 1608.02,229.791 1608.59,234.088 1609.16,235.012 1609.73,233.728 1610.3,235.803 1610.87,233.558 1611.43,234.414 1612,234.409 1612.57,234.409 1613.14,234.41 1613.71,238.269 1614.28,235.789 1614.84,236.452 1615.41,236.097 1615.98,233.376 1616.55,233.298 1617.12,231.874 1617.69,230.813 1618.26,229.687 1618.82,227.77 1619.39,224.853 1619.96,225.212 1620.53,224.653 1621.1,227.294 1621.67,227.675 1622.23,227.826 1622.8,230.168 1623.37,229.199 1623.94,229.525 1624.51,229.628 1625.08,227.677 1625.64,228.795 1626.21,225.929 1626.78,224.475 1627.35,224.119 1627.92,226.867 1628.49,228.171 1629.05,227.494 1629.62,225.811 1630.19,228.476 1630.76,228.691 1631.33,228.84 1631.9,231.178 1632.46,233.433 1633.03,233.267 1633.6,232.161 1634.17,231.313 1634.74,230.411 1635.31,233.625 1635.87,232.438 1636.44,232.378 1637.01,232.351 1637.58,233.124 1638.15,232.946 1638.72,233.839 1639.28,234.774 1639.85,237.783 1640.42,241.509 1640.99,239.987 1641.56,237.241 1642.13,238.054 1642.69,235.551 1643.26,237.341 1643.83,236.815 1644.4,236.241 1644.97,236.197 1645.54,237.158 1646.1,237.817 1646.67,235.327 1647.24,235.246 1647.81,234.012 1648.38,233.916 1648.95,232.482 1649.51,233.373 1650.08,233.048 1650.65,233.942 1651.22,234.786 1651.79,234.394 1652.36,234.046 1652.92,233.029 1653.49,232.747 1654.06,232.51 1654.63,232.565 1655.2,233.476 1655.77,233.218 1656.33,230.751 1656.9,229.561 1657.47,229.708 1658.04,230.953 1658.61,230.868 1659.18,228.676 1659.74,229.799 1660.31,224.577 1660.88,223.697 1661.45,222.949 1662.02,225.626 1662.59,226.114 1663.15,226.378 1663.72,226.821 1664.29,224.99 1664.86,224.441 1665.43,224.258 1666,223.463 1666.56,225.189 1667.13,226.631 1667.7,226.981 1668.27,227.272 1668.84,227.655 1669.41,228.09 1669.97,227.263 1670.54,228.65 1671.11,230.75 1671.68,232.021 1672.25,231.09 1672.82,231.17 1673.38,233.354 1673.95,233.33 1674.52,231.221 1675.09,232.349 1675.66,232.432 1676.23,235.489 1676.79,235.251 1677.36,237.211 1677.93,234.88 1678.5,235.755 1679.07,234.726 1679.64,234.342 1680.2,234.104 1680.77,235.019 1681.34,232.773 1681.91,231.639 1682.48,231.872 1683.05,230.839 1683.61,230.795 1684.18,231.027 1684.75,227.802 1685.32,227.348 1685.89,226.64 1686.46,227.041 1687.02,228.584 1687.59,230.882 1688.16,231.062 1688.73,228.998 1689.3,230.347 1689.87,230.229 1690.44,229.221 1691,227.295 1691.57,227.673 1692.14,228.404 1692.71,227.737 1693.28,229.094 1693.85,229.009 1694.41,231.21 1694.98,230.295 1695.55,231.573 1696.12,233.483 1696.69,235.573 1697.26,233.168 1697.82,234.277 1698.39,235.021 1698.96,233.672 1699.53,234.523 1700.1,236.392 1700.67,238.067 1701.23,237.442 1701.8,236.93 1702.37,234.646 1702.94,238.626 1703.51,236.015 1704.08,235.682 1704.64,235.4 1705.21,237.232 1705.78,237.047 1706.35,235.679 1706.92,234.322 1707.49,230.932 1708.05,231.025 1708.62,232.374 1709.19,232.289 1709.76,232.189 1710.33,232.03 1710.9,232.861 1711.46,231.825 1712.03,230.95 1712.6,230.857 1713.17,234.006 1713.74,232.817 1714.31,234.8 1714.87,235.682 1715.44,234.197 1716.01,232.011 1716.58,231.871 1717.15,230.756 1717.72,232.709 1718.28,232.402 1718.85,231.312 1719.42,230.438 1719.99,229.423 1720.56,230.631 1721.13,230.777 1721.69,229.746 1722.26,229.839 1722.83,229.702 1723.4,228.574 1723.97,229.871 1724.54,226.947 1725.1,226.346 1725.67,226.706 1726.24,229.162 1726.81,230.467 1727.38,232.48 1727.95,235.492 1728.51,234.055 1729.08,232.926 1729.65,232.92 1730.22,232.002 1730.79,232.709 1731.36,232.53 1731.92,231.402 1732.49,231.412 1733.06,232.567 1733.63,232.215 1734.2,231.055 1734.77,231.182 1735.33,232.187 1735.9,232.025 1736.47,233.153 1737.04,233.92 1737.61,232.788 1738.18,233.719 1738.74,233.656 1739.31,235.443 1739.88,234.146 1740.45,235.959 1741.02,236.719 1741.59,235.29 1742.15,232.931 1742.72,231.67 1743.29,231.712 1743.86,228.367 1744.43,229.457 1745,228.697 1745.56,229.839 1746.13,230.945 1746.7,230.037 1747.27,230.145 1747.84,229.122 1748.41,227.38 1748.97,228.677 1749.54,228.93 1750.11,232.009 1750.68,232.918 1751.25,234.903 1751.82,234.649 1752.38,233.279 1752.95,234.275 1753.52,235.171 1754.09,236.053 1754.66,235.767 1755.23,236.592 1755.79,236.181 1756.36,234.667 1756.93,234.292 1757.5,233.012 1758.07,234.134 1758.64,229.79 1759.21,228.718 1759.77,228.631 1760.34,228.67 1760.91,229.855 1761.48,229.172 1762.05,230.084 1762.62,230.219 1763.18,231.3 1763.75,231.143 1764.32,230.174 1764.89,231.313 1765.46,231.17 1766.03,228.297 1766.59,230.564 1767.16,230.736 1767.73,233.95 1768.3,233.823 1768.87,233.338 1769.44,233.21 1770,233.127 1770.57,233.307 1771.14,234.373 1771.71,234.386 1772.28,230.945 1772.85,231.904 1773.41,231.886 1773.98,230.717 1774.55,230.769 1775.12,231.81 1775.69,229.69 1776.26,229.695 1776.82,231.882 1777.39,230.566 1777.96,231.455 1778.53,231.252 1779.1,231.19 1779.67,231.195 1780.23,230.242 1780.8,228.302 1781.37,229.662 1781.94,224.554 1782.51,225.98 1783.08,226.517 1783.64,226.927 1784.21,229.642 1784.78,230.013 1785.35,228.059 1785.92,231.587 1786.49,232.484 1787.05,233.558 1787.62,232.589 1788.19,232.366 1788.76,233.369 1789.33,233.283 1789.9,236.207 1790.46,234.867 1791.03,237.745 1791.6,237.297 1792.17,236.838 1792.74,238.295 1793.31,238.786 1793.87,236.308 1794.44,237.022 1795.01,235.579 1795.58,237.218 1796.15,237.854 1796.72,237.367 1797.28,237.901 1797.85,235.325 1798.42,233.022 1798.99,232.787 1799.56,231.57 1800.13,230.39 1800.69,231.183 1801.26,229.912 1801.83,231.172 1802.4,229.339 1802.97,229.182 1803.54,229.27 1804.1,227.415 1804.67,225.601 1805.24,227.165 1805.81,229.4 1806.38,231.445 1806.95,234.463 1807.51,236.187 1808.08,234.792 1808.65,234.401 1809.22,236.981 1809.79,233.676 1810.36,230.574 1810.92,229.467 1811.49,228.517 1812.06,229.426 1812.63,230.475 1813.2,231.606 1813.77,232.673 1814.33,231.278 1814.9,228.243 1815.47,227.365 1816.04,227.577 1816.61,228.901 1817.18,229.012 1817.74,230.238 1818.31,228.186 1818.88,230.359 1819.45,231.583 1820.02,230.568 1820.59,231.853 1821.15,231.961 1821.72,231.914 1822.29,228.831 1822.86,230.878 1823.43,229.886 1824,230.665 1824.56,231.744 1825.13,231.766 1825.7,231.428 1826.27,228.264 1826.84,229.395 1827.41,230.436 1827.97,231.552 1828.54,232.467 1829.11,234.278 1829.68,234.153 1830.25,232.649 1830.82,232.69 1831.39,230.459 1831.95,230.667 1832.52,230.706 1833.09,231.879 1833.66,230.844 1834.23,231.855 1834.8,230.866 1835.36,230.235 1835.93,229.411 1836.5,232.611 1837.07,232.238 1837.64,231.304 1838.21,231.048 1838.77,229.916 1839.34,230.034 1839.91,229.999 1840.48,229 1841.05,228.237 1841.62,229.787 1842.18,228.781 1842.75,229.998 1843.32,229.024 1843.89,229.384 1844.46,230.475 1845.03,231.415 1845.59,232.273 1846.16,233.187 1846.73,232.057 1847.3,232.772 1847.87,231.577 1848.44,229.537 1849,229.707 1849.57,231.685 1850.14,231.665 1850.71,228.632 1851.28,228.692 1851.85,228.007 1852.41,230.287 1852.98,230.579 1853.55,229.465 1854.12,228.468 1854.69,228.897 1855.26,229.233 1855.82,228.433 1856.39,228.745 1856.96,229.787 1857.53,230.031 1858.1,229.418 1858.67,229.631 1859.23,228.915 1859.8,228.315 1860.37,228.472 1860.94,228.689 1861.51,228.976 1862.08,230.237 1862.64,228.341 1863.21,229.617 1863.78,226.865 1864.35,226.219 1864.92,227.699 1865.49,227.058 1866.05,227.213 1866.62,224.519 1867.19,224.312 1867.76,224.975 1868.33,224.786 1868.9,225.368 1869.46,228.047 1870.03,228.509 1870.6,228.804 1871.17,232.948 1871.74,231.711 1872.31,228.614 1872.87,230.092 1873.44,232.421 1874.01,232.594 1874.58,232.636 1875.15,232.62 1875.72,234.8 1876.28,232.962 1876.85,233.085 1877.42,233.026 1877.99,233.126 1878.56,235.208 1879.13,235.653 1879.69,234.447 1880.26,233.453 1880.83,233.584 1881.4,236.652 1881.97,237.595 1882.54,234.177 1883.1,233.049 1883.67,232.992 1884.24,234.984 1884.81,234.989 1885.38,234.963 1885.95,233.862 1886.51,234.888 1887.08,233.789 1887.65,234.639 1888.22,232.411 1888.79,231.141 1889.36,232.26 1889.92,236.333 1890.49,236.125 1891.06,235.867 1891.63,235.544 1892.2,234.271 1892.77,233.041 1893.33,233.861 1893.9,233.614 1894.47,234.362 1895.04,235.056 1895.61,233.731 1896.18,232.68 1896.74,232.556 1897.31,233.753 1897.88,231.563 1898.45,233.469 1899.02,233.363 1899.59,233.229 1900.16,235.017 1900.72,233.609 1901.29,234.658 1901.86,232.481 1902.43,228.259 1903,229.593 1903.57,230.938 1904.13,229.866 1904.7,233.113 1905.27,231.844 1905.84,231.687 1906.41,233.676 1906.98,234.615 1907.54,234.351 1908.11,236.067 1908.68,234.762 1909.25,233.561 1909.82,233.311 1910.39,231.119 1910.95,231.075 1911.52,229.939 1912.09,229.047 1912.66,229.537 1913.23,229.667 1913.8,226.801 1914.36,228.112 1914.93,227.352 1915.5,226.541 1916.07,225.896 1916.64,225.234 1917.21,225.754 1917.77,226.265 1918.34,227.682 1918.91,227.935 1919.48,227.373 1920.05,230.859 1920.62,229.786 1921.18,230.886 1921.75,235.011 1922.32,234.851 1922.89,233.788 1923.46,236.829 1924.03,235.552 1924.59,236.221 1925.16,235.956 1925.73,237.698 1926.3,236.38 1926.87,235.045 1927.44,233.899 1928,234.745 1928.57,234.496 1929.14,233.477 1929.71,230.335 1930.28,228.637 1930.85,228.787 1931.41,227.833 1931.98,226.949 1932.55,225.195 1933.12,226.782 1933.69,227.097 1934.26,227.482 1934.82,225.847 1935.39,225.219 1935.96,226.769 1936.53,226.275 1937.1,226.77 1937.67,226.063 1938.23,226.665 1938.8,227.331 1939.37,228.72 1939.94,226.792 1940.51,227.3 1941.08,227.728 1941.64,228.195 1942.21,229.617 1942.78,229.971 1943.35,230.313 1943.92,229.398 1944.49,230.534 1945.05,228.6 1945.62,231.02 1946.19,228.135 1946.76,230.587 1947.33,229.794 1947.9,232.025 1948.46,232.013 1949.03,231.296 1949.6,234.362 1950.17,232.065 1950.74,234.277 1951.31,234.201 1951.87,231.013 1952.44,232.112 1953.01,232.286 1953.58,231.401 1954.15,236.485 1954.72,236.212 1955.28,233.862 1955.85,234.948 1956.42,233.878 1956.99,233.979 1957.56,232.91 1958.13,234.969 1958.69,232.9 1959.26,233.932 1959.83,232.87 1960.4,230.83 1960.97,229.769 1961.54,228.72 1962.1,228.167 1962.67,230.415 1963.24,232.741 1963.81,233.752 1964.38,235.738 1964.95,234.484 1965.51,237.312 1966.08,237.172 1966.65,234.868 1967.22,236.601 1967.79,235.215 1968.36,238.392 1968.92,236.739 1969.49,237.224 1970.06,235.836 1970.63,237.649 1971.2,238.251 1971.77,238.672 1972.34,239.313 1972.9,237.951 1973.47,238.722 1974.04,237.233 1974.61,237.694 1975.18,239.366 1975.75,237.922 1976.31,237.535 1976.88,238.083 1977.45,236.722 1978.02,238.327 1978.59,239.031 1979.16,239.461 1979.72,237.705 1980.29,237.241 1980.86,236.695 1981.43,236.551 1982,237.189 1982.57,234.729 1983.13,235.346 1983.7,234.89 1984.27,232.245 1984.84,232.091 1985.41,230.843 1985.98,229.764 1986.54,231.869 1987.11,231.921 1987.68,232.962 1988.25,229.543 1988.82,229.569 1989.39,225.447 1989.95,225.643 1990.52,223.899 1991.09,221.166 1991.66,220.716 1992.23,223.562 1992.8,227.192 1993.36,225.335 1993.93,227.695 1994.5,227.962 1995.07,227.478 1995.64,227.722 1996.21,230.011 1996.77,230.492 1997.34,231.697 1997.91,232.586 1998.48,234.777 1999.05,236.468 1999.62,234.097 2000.18,231.882 2000.75,230.633 2001.32,230.82 2001.89,231.925 2002.46,230.87 2003.03,232.027 2003.59,231.874 2004.16,233.84 2004.73,233.916 2005.3,234.565 2005.87,234.572 2006.44,234.414 2007,234.091 2007.57,234.813 2008.14,236.487 2008.71,235.033 2009.28,234.807 2009.85,232.505 2010.41,233.358 2010.98,235.48 2011.55,235.045 2012.12,235.766 2012.69,235.639 2013.26,233.103 2013.82,229.621 2014.39,228.442 2014.96,227.327 2015.53,227.613 2016.1,228.04 2016.67,227.152 2017.23,227.366 2017.8,227.52 2018.37,228.574 2018.94,228.708 2019.51,228.665 2020.08,229.591 2020.64,228.694 2021.21,229.596 2021.78,229.753 2022.35,228.63 2022.92,230.985 2023.49,230.088 2024.05,226.053 2024.62,227.321 2025.19,230.771 2025.76,229.711 2026.33,227.885 2026.9,226.937 2027.46,229.405 2028.03,230.714 2028.6,231.081 2029.17,230.114 2029.74,230.107 2030.31,230.12 2030.87,230.078 2031.44,231.346 2032.01,232.336 2032.58,232.411 2033.15,233.289 2033.72,233.162 2034.28,234.017 2034.85,234.858 2035.42,233.451 2035.99,235.259 2036.56,234.869 2037.13,236.681 2037.69,237.156 2038.26,235.758 2038.83,237.74 2039.4,236.985 2039.97,238.695 2040.54,239.145 2041.11,240.733 2041.67,240.019 2042.24,237.156 2042.81,234.58 2043.38,233.301 2043.95,232.972 2044.52,233.973 2045.08,232.877 2045.65,232.42 2046.22,232.332 2046.79,233.404 2047.36,232.036 2047.93,233.1 2048.49,233.763 2049.06,233.247 2049.63,233.209 2050.2,232.903 2050.77,232.58 2051.34,233.153 2051.9,232.77 2052.47,231.491 2053.04,231.393 2053.61,231.277 2054.18,231.3 2054.75,231.037 2055.31,227.987 2055.88,230.062 2056.45,228.084 2057.02,228.037 2057.59,229.059 2058.16,230.255 2058.72,229.272 2059.29,231.621 2059.86,232.478 2060.43,233.223 2061,233.025 2061.57,231.74 2062.13,231.396 2062.7,232.412 2063.27,233.502 2063.84,233.54 2064.41,231.09 2064.98,232.012 2065.54,231.788 2066.11,230.766 2066.68,229.479 2067.25,230.677 2067.82,229.613 2068.39,228.726 2068.95,228.116 2069.52,229.103 2070.09,229.131 2070.66,231.386 2071.23,232.304 2071.8,230.026 2072.36,229.015 2072.93,229.134 2073.5,231.357 2074.07,229.008 2074.64,229.275 2075.21,232.414 2075.77,231.314 2076.34,228.355 2076.91,228.789 2077.48,228.074 2078.05,229.359 2078.62,228.736 2079.18,231.901 2079.75,232.716 2080.32,231.636 2080.89,232.785 2081.46,232.592 2082.03,232.528 2082.59,231.426 2083.16,230.203 2083.73,229.256 2084.3,229.434 2084.87,229.585 2085.44,229.612 2086,229.802 2086.57,229.913 2087.14,227.953 2087.71,228.072 2088.28,229.354 2088.85,229.688 2089.41,229.523 2089.98,228.362 2090.55,226.461 2091.12,226.954 2091.69,223.963 2092.26,224.394 2092.82,225.931 2093.39,225.226 2093.96,226.738 2094.53,227.118 2095.1,226.525 2095.67,226.86 2096.23,228.166 2096.8,228.384 2097.37,228.562 2097.94,230.815 2098.51,229.83 2099.08,232.033 2099.64,232.085 2100.21,232.225 2100.78,231.227 2101.35,232.231 2101.92,234.254 2102.49,234.149 2103.05,234.943 2103.62,234.504 2104.19,234.473 2104.76,234.253 2105.33,233.09 2105.9,233.027 2106.46,229.881 2107.03,231.176 2107.6,233.327 2108.17,234.308 2108.74,232.364 2109.31,232.391 2109.87,231.516 2110.44,231.45 2111.01,229.492 2111.58,229.591 2112.15,228.625 2112.72,228.739 2113.29,226.743 2113.85,229.024 2114.42,230.132 2114.99,230.306 2115.56,234.671 2116.13,234.619 2116.7,234.388 2117.26,233.013 2117.83,231.979 2118.4,232.099 2118.97,234.202 2119.54,235.049 2120.11,233.544 2120.67,234.527 2121.24,235.479 2121.81,234.845 2122.38,235.452 2122.95,235.465 2123.52,236.401 2124.08,233.169 2124.65,232.933 2125.22,232.935 2125.79,232.864 2126.36,232.845 2126.93,233.854 2127.49,235.743 2128.06,237.664 2128.63,236.231 2129.2,235.749 2129.77,237.375 2130.34,239.155 2130.9,238.285 2131.47,237.666 2132.04,238.361 2132.61,239.991 2133.18,239.357 2133.75,236.949 2134.31,235.462 2134.88,236.152 2135.45,233.689 2136.02,232.437 2136.59,233.404 2137.16,232.955 2137.72,231.869 2138.29,230.477 2138.86,229.315 2139.43,230.221 2140,229.266 2140.57,229.4 2141.13,228.674 2141.7,229.812 2142.27,230.826 2142.84,230.895 2143.41,230.664 2143.98,230.553 2144.54,229.441 2145.11,228.345 2145.68,227.351 2146.25,225.672 2146.82,224.81 2147.39,223.102 2147.95,224.646 2148.52,225.045 2149.09,226.335 2149.66,224.578 2150.23,221.851 2150.8,221.488 2151.36,224.335 2151.93,226.019 2152.5,226.427 2153.07,227.867 2153.64,226.17 2154.21,225.499 2154.77,224.96 2155.34,225.293 2155.91,225.782 2156.48,226.034 2157.05,225.291 2157.62,226.709 2158.18,224.937 2158.75,227.338 2159.32,226.538 2159.89,226.994 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.031 ± 0.021\n  with uncertainty of ± 0.0013376640719432844\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01781 ± (0.0020341, 0.00205215) (MC)\n  95% confidence interval: [-4.02194, -4.01405]) (MC)\n  linear error propagation: -4.01782 ± 0.0020632\n  |δ_y| = |0.00141019| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017810770984781, val_l = 0.004126788044874985, val_u = 0.003757907262502691)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip470\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip471\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip472\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.4 2211.02,1143.4 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,990.991 2211.02,990.991 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,838.587 2211.02,838.587 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,686.182 2211.02,686.182 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,533.777 2211.02,533.777 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,381.373 2211.02,381.373 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,228.968 2211.02,228.968 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.4 365.751,1143.4 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,990.991 365.751,990.991 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,838.587 365.751,838.587 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,686.182 365.751,686.182 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,533.777 365.751,533.777 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,381.373 365.751,381.373 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,228.968 365.751,228.968 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M298.909 1129.19 Q295.298 1129.19 293.469 1132.76 Q291.664 1136.3 291.664 1143.43 Q291.664 1150.54 293.469 1154.1 Q295.298 1157.64 298.909 1157.64 Q302.543 1157.64 304.349 1154.1 Q306.177 1150.54 306.177 1143.43 Q306.177 1136.3 304.349 1132.76 Q302.543 1129.19 298.909 1129.19 M298.909 1125.49 Q304.719 1125.49 307.775 1130.1 Q310.853 1134.68 310.853 1143.43 Q310.853 1152.16 307.775 1156.76 Q304.719 1161.35 298.909 1161.35 Q293.099 1161.35 290.02 1156.76 Q286.964 1152.16 286.964 1143.43 Q286.964 1134.68 290.02 1130.1 Q293.099 1125.49 298.909 1125.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M259.557 1004.34 L267.196 1004.34 L267.196 977.97 L258.886 979.637 L258.886 975.378 L267.15 973.711 L271.826 973.711 L271.826 1004.34 L279.465 1004.34 L279.465 1008.27 L259.557 1008.27 L259.557 1004.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 976.79 Q295.298 976.79 293.469 980.355 Q291.664 983.896 291.664 991.026 Q291.664 998.132 293.469 1001.7 Q295.298 1005.24 298.909 1005.24 Q302.543 1005.24 304.349 1001.7 Q306.177 998.132 306.177 991.026 Q306.177 983.896 304.349 980.355 Q302.543 976.79 298.909 976.79 M298.909 973.086 Q304.719 973.086 307.775 977.693 Q310.853 982.276 310.853 991.026 Q310.853 999.753 307.775 1004.36 Q304.719 1008.94 298.909 1008.94 Q293.099 1008.94 290.02 1004.36 Q286.964 999.753 286.964 991.026 Q286.964 982.276 290.02 977.693 Q293.099 973.086 298.909 973.086 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M262.775 851.931 L279.094 851.931 L279.094 855.867 L257.15 855.867 L257.15 851.931 Q259.812 849.177 264.395 844.547 Q269.002 839.894 270.182 838.552 Q272.428 836.029 273.307 834.293 Q274.21 832.533 274.21 830.844 Q274.21 828.089 272.266 826.353 Q270.344 824.617 267.242 824.617 Q265.043 824.617 262.59 825.381 Q260.159 826.145 257.381 827.695 L257.381 822.973 Q260.205 821.839 262.659 821.26 Q265.113 820.682 267.15 820.682 Q272.52 820.682 275.715 823.367 Q278.909 826.052 278.909 830.543 Q278.909 832.672 278.099 834.594 Q277.312 836.492 275.205 839.084 Q274.627 839.756 271.525 842.973 Q268.423 846.168 262.775 851.931 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 824.385 Q295.298 824.385 293.469 827.95 Q291.664 831.492 291.664 838.621 Q291.664 845.728 293.469 849.293 Q295.298 852.834 298.909 852.834 Q302.543 852.834 304.349 849.293 Q306.177 845.728 306.177 838.621 Q306.177 831.492 304.349 827.95 Q302.543 824.385 298.909 824.385 M298.909 820.682 Q304.719 820.682 307.775 825.288 Q310.853 829.871 310.853 838.621 Q310.853 847.348 307.775 851.955 Q304.719 856.538 298.909 856.538 Q293.099 856.538 290.02 851.955 Q286.964 847.348 286.964 838.621 Q286.964 829.871 290.02 825.288 Q293.099 820.682 298.909 820.682 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M272.914 684.828 Q276.27 685.545 278.145 687.814 Q280.043 690.082 280.043 693.416 Q280.043 698.531 276.525 701.332 Q273.006 704.133 266.525 704.133 Q264.349 704.133 262.034 703.693 Q259.742 703.277 257.289 702.42 L257.289 697.906 Q259.233 699.041 261.548 699.619 Q263.863 700.198 266.386 700.198 Q270.784 700.198 273.076 698.462 Q275.39 696.726 275.39 693.416 Q275.39 690.36 273.238 688.647 Q271.108 686.911 267.289 686.911 L263.261 686.911 L263.261 683.069 L267.474 683.069 Q270.923 683.069 272.752 681.703 Q274.58 680.314 274.58 677.721 Q274.58 675.059 272.682 673.647 Q270.807 672.212 267.289 672.212 Q265.367 672.212 263.168 672.629 Q260.969 673.045 258.33 673.925 L258.33 669.758 Q260.992 669.018 263.307 668.647 Q265.645 668.277 267.705 668.277 Q273.029 668.277 276.131 670.708 Q279.233 673.115 279.233 677.235 Q279.233 680.106 277.59 682.096 Q275.946 684.064 272.914 684.828 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 671.981 Q295.298 671.981 293.469 675.545 Q291.664 679.087 291.664 686.217 Q291.664 693.323 293.469 696.888 Q295.298 700.43 298.909 700.43 Q302.543 700.43 304.349 696.888 Q306.177 693.323 306.177 686.217 Q306.177 679.087 304.349 675.545 Q302.543 671.981 298.909 671.981 M298.909 668.277 Q304.719 668.277 307.775 672.883 Q310.853 677.467 310.853 686.217 Q310.853 694.944 307.775 699.55 Q304.719 704.133 298.909 704.133 Q293.099 704.133 290.02 699.55 Q286.964 694.944 286.964 686.217 Q286.964 677.467 290.02 672.883 Q293.099 668.277 298.909 668.277 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M271.594 520.571 L259.789 539.02 L271.594 539.02 L271.594 520.571 M270.367 516.497 L276.247 516.497 L276.247 539.02 L281.177 539.02 L281.177 542.909 L276.247 542.909 L276.247 551.057 L271.594 551.057 L271.594 542.909 L255.992 542.909 L255.992 538.395 L270.367 516.497 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 519.576 Q295.298 519.576 293.469 523.141 Q291.664 526.683 291.664 533.812 Q291.664 540.919 293.469 544.483 Q295.298 548.025 298.909 548.025 Q302.543 548.025 304.349 544.483 Q306.177 540.919 306.177 533.812 Q306.177 526.683 304.349 523.141 Q302.543 519.576 298.909 519.576 M298.909 515.872 Q304.719 515.872 307.775 520.479 Q310.853 525.062 310.853 533.812 Q310.853 542.539 307.775 547.145 Q304.719 551.729 298.909 551.729 Q293.099 551.729 290.02 547.145 Q286.964 542.539 286.964 533.812 Q286.964 525.062 290.02 520.479 Q293.099 515.872 298.909 515.872 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M258.793 364.093 L277.15 364.093 L277.15 368.028 L263.076 368.028 L263.076 376.5 Q264.094 376.153 265.113 375.991 Q266.131 375.806 267.15 375.806 Q272.937 375.806 276.316 378.977 Q279.696 382.148 279.696 387.565 Q279.696 393.144 276.224 396.245 Q272.752 399.324 266.432 399.324 Q264.256 399.324 261.988 398.954 Q259.742 398.583 257.335 397.843 L257.335 393.144 Q259.418 394.278 261.641 394.833 Q263.863 395.389 266.34 395.389 Q270.344 395.389 272.682 393.282 Q275.02 391.176 275.02 387.565 Q275.02 383.954 272.682 381.847 Q270.344 379.741 266.34 379.741 Q264.465 379.741 262.59 380.157 Q260.738 380.574 258.793 381.454 L258.793 364.093 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 367.171 Q295.298 367.171 293.469 370.736 Q291.664 374.278 291.664 381.407 Q291.664 388.514 293.469 392.079 Q295.298 395.62 298.909 395.62 Q302.543 395.62 304.349 392.079 Q306.177 388.514 306.177 381.407 Q306.177 374.278 304.349 370.736 Q302.543 367.171 298.909 367.171 M298.909 363.468 Q304.719 363.468 307.775 368.074 Q310.853 372.658 310.853 381.407 Q310.853 390.134 307.775 394.741 Q304.719 399.324 298.909 399.324 Q293.099 399.324 290.02 394.741 Q286.964 390.134 286.964 381.407 Q286.964 372.658 290.02 368.074 Q293.099 363.468 298.909 363.468 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M269.326 227.105 Q266.178 227.105 264.326 229.257 Q262.497 231.41 262.497 235.16 Q262.497 238.887 264.326 241.063 Q266.178 243.216 269.326 243.216 Q272.474 243.216 274.303 241.063 Q276.154 238.887 276.154 235.16 Q276.154 231.41 274.303 229.257 Q272.474 227.105 269.326 227.105 M278.608 212.452 L278.608 216.711 Q276.849 215.878 275.043 215.438 Q273.261 214.998 271.502 214.998 Q266.872 214.998 264.418 218.123 Q261.988 221.248 261.641 227.568 Q263.006 225.554 265.066 224.489 Q267.127 223.401 269.603 223.401 Q274.812 223.401 277.821 226.572 Q280.853 229.72 280.853 235.16 Q280.853 240.484 277.705 243.702 Q274.557 246.919 269.326 246.919 Q263.33 246.919 260.159 242.336 Q256.988 237.73 256.988 229.003 Q256.988 220.808 260.877 215.947 Q264.766 211.063 271.316 211.063 Q273.076 211.063 274.858 211.41 Q276.664 211.758 278.608 212.452 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 214.767 Q295.298 214.767 293.469 218.332 Q291.664 221.873 291.664 229.003 Q291.664 236.109 293.469 239.674 Q295.298 243.216 298.909 243.216 Q302.543 243.216 304.349 239.674 Q306.177 236.109 306.177 229.003 Q306.177 221.873 304.349 218.332 Q302.543 214.767 298.909 214.767 M298.909 211.063 Q304.719 211.063 307.775 215.67 Q310.853 220.253 310.853 229.003 Q310.853 237.73 307.775 242.336 Q304.719 246.919 298.909 246.919 Q293.099 246.919 290.02 242.336 Q286.964 237.73 286.964 229.003 Q286.964 220.253 290.02 215.67 Q293.099 211.063 298.909 211.063 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1031.1 400.199,1045.64 400.786,946.592 401.372,852.279 401.958,767.732 402.545,688.535 403.131,616.217 403.718,550.326 404.304,493.647 404.891,527.171 405.477,475.237 406.063,428.352 406.65,387.617 407.236,349.791 407.823,317.536 408.409,287.63 408.995,261.342 409.582,238.434 410.168,219.895 410.755,253.001 411.341,281.724 411.927,266.763 412.514,255.714 413.1,245.568 413.687,237.622 414.273,232.399 414.86,259.112 415.446,256.641 416.032,255.862 416.619,280.654 417.205,304.891 417.792,307.221 418.378,331.415 418.964,353.08 419.551,358.056 420.137,396.544 420.724,401.487 421.31,422.77 421.896,427.909 422.483,447.252 423.069,466.179 423.656,471.907 424.242,479.247 424.829,487.245 425.415,495.249 426.001,504.087 426.588,531.37 427.174,557.683 427.761,567.349 428.347,585.137 428.933,601.783 429.52,624.577 430.106,634.262 430.693,650.537 431.279,659.794 431.865,675.186 432.452,690.486 433.038,710.574 433.625,724.191 434.211,737.654 434.798,746.296 435.384,759.44 435.97,785.357 436.557,792.85 437.143,812.382 437.73,827.064 438.316,833.247 438.902,840.057 439.489,854.051 440.075,860.474 440.662,870.034 441.248,876.427 441.835,882.682 442.421,892.3 443.007,904.802 443.594,916.609 444.18,922.2 444.767,930.847 445.353,936.503 445.939,945.055 446.526,958.769 447.112,974.857 447.699,982.398 448.285,989.839 448.871,999.346 449.458,1006.53 450.044,1013.39 450.631,1017.88 451.217,1022.22 451.804,1030.93 452.39,1041.65 452.976,1045.2 453.563,1053.14 454.149,1056.88 454.736,1062.74 455.322,1070.69 455.908,1078.07 456.495,1083.47 457.081,1090.8 457.668,1094.03 458.254,1097.38 458.84,1102.42 459.427,1107.26 460.013,1112.25 460.6,1116.84 461.186,1123.35 461.773,1127.73 462.359,1131.82 462.945,1133.89 463.532,1138.02 464.118,1141.6 464.705,1148.67 465.291,1155.48 465.877,1160.51 466.464,1168.19 467.05,1169.29 467.637,1170.43 468.223,1173.21 468.809,1174.24 469.396,1176.8 469.982,1177.74 470.569,1184.73 471.155,1185.47 471.742,1181.34 472.328,1185.45 472.914,1187.75 473.501,1187 474.087,1190.85 474.674,1192.59 475.26,1193.36 475.846,1195.6 476.433,1197.41 477.019,1195.05 477.606,1198.8 478.192,1199.18 478.778,1201.16 479.365,1203.02 479.951,1206.52 480.538,1206.97 481.124,1207.38 481.711,1207.96 482.297,1208.24 482.883,1208.7 483.47,1212.05 484.056,1217.86 484.643,1219.08 485.229,1218.89 485.815,1221.6 486.402,1224.18 486.988,1224.04 487.575,1224.64 488.161,1225.93 488.748,1225.43 489.334,1226.47 489.92,1227.51 490.507,1227.05 491.093,1225.27 491.68,1226.28 492.266,1226.09 492.852,1225.88 493.439,1228.28 494.025,1229.21 494.612,1232.89 495.198,1232.09 495.784,1231.41 496.371,1231.08 496.957,1234.55 497.544,1235.25 498.13,1234.65 498.717,1235.48 499.303,1236.24 499.889,1235.55 500.476,1235.03 501.062,1239.74 501.649,1239.22 502.235,1239.42 502.821,1238.42 503.408,1240.18 503.994,1240.59 504.581,1243.69 505.167,1242.62 505.753,1244.39 506.34,1244.46 506.926,1242.13 507.513,1243.56 508.099,1245.42 508.686,1246.72 509.272,1246.83 509.858,1249.54 510.445,1249.36 511.031,1250.53 511.618,1247.79 512.204,1249.18 512.79,1247.89 513.377,1248.13 513.963,1246.5 514.55,1246.17 515.136,1243.59 515.722,1245.01 516.309,1242.8 516.895,1241.77 517.482,1240.7 518.068,1239.56 518.655,1242.38 519.241,1240.25 519.827,1239.55 520.414,1238.84 521,1236.51 521.587,1238.41 522.173,1235.11 522.759,1234.55 523.346,1233.95 523.932,1234.42 524.519,1233.95 525.105,1230.64 525.691,1231.48 526.278,1230.97 526.864,1231.64 527.451,1229.95 528.037,1229.83 528.624,1229.57 529.21,1230.56 529.796,1228.81 530.383,1229.85 530.969,1232.09 531.556,1230.11 532.142,1229.89 532.728,1229.48 533.315,1231.82 533.901,1233.94 534.488,1234.56 535.074,1233.94 535.661,1234.64 536.247,1236.46 536.833,1239.76 537.42,1236.37 538.006,1234.32 538.593,1229.95 539.179,1229.39 539.765,1230.54 540.352,1227.56 540.938,1227.25 541.525,1228.33 542.111,1230.87 542.697,1229.3 543.284,1229.94 543.87,1225.76 544.457,1225.58 545.043,1230.31 545.63,1230.93 546.216,1230.46 546.802,1230.34 547.389,1231.27 547.975,1232.2 548.562,1231.43 549.148,1235.76 549.734,1234.92 550.321,1234.55 550.907,1233.99 551.494,1233.36 552.08,1232.93 552.666,1232.56 553.253,1232.17 553.839,1231.53 554.426,1232.07 555.012,1231.72 555.599,1232.1 556.185,1234.17 556.771,1237.21 557.358,1232.41 557.944,1231.76 558.531,1237.59 559.117,1237.89 559.703,1238.42 560.29,1239.92 560.876,1241.6 561.463,1240.56 562.049,1239.65 562.635,1237.47 563.222,1236.37 563.808,1236.66 564.395,1235.7 564.981,1235.17 565.568,1234.31 566.154,1233.7 566.74,1232.88 567.327,1228.67 567.913,1228.04 568.5,1223.83 569.086,1224.75 569.672,1224.18 570.259,1221.3 570.845,1224.92 571.432,1226.14 572.018,1225.81 572.605,1225.7 573.191,1226.72 573.777,1225.3 574.364,1226.37 574.95,1225.59 575.537,1225.24 576.123,1223.44 576.709,1222.03 577.296,1224.25 577.882,1228.81 578.469,1228.26 579.055,1228.98 579.641,1228.5 580.228,1228.04 580.814,1227.77 581.401,1225.89 581.987,1228.06 582.574,1226.12 583.16,1225.64 583.746,1226.66 584.333,1223.32 584.919,1221.89 585.506,1221.62 586.092,1221.09 586.678,1220.62 587.265,1221.84 587.851,1221.37 588.438,1221.07 589.024,1218.19 589.61,1220.43 590.197,1220.4 590.783,1220.33 591.37,1218.65 591.956,1219.56 592.543,1218.12 593.129,1217.97 593.715,1220.41 594.302,1221.48 594.888,1221.55 595.475,1222.33 596.061,1222.02 596.647,1221.5 597.234,1221.25 597.82,1222.12 598.407,1225.6 598.993,1225.07 599.579,1221.94 600.166,1221.49 600.752,1224.79 601.339,1224.4 601.925,1221.41 602.512,1222.41 603.098,1220.87 603.684,1221.91 604.271,1221.45 604.857,1222.42 605.444,1222 606.03,1222.68 606.616,1222.4 607.203,1218.21 607.789,1221.79 608.376,1221.64 608.962,1222.65 609.548,1219.69 610.135,1218.25 610.721,1218.03 611.308,1217.56 611.894,1217.44 612.481,1217.42 613.067,1218.33 613.653,1216.9 614.24,1215.56 614.826,1213.22 615.413,1213.55 615.999,1216.24 616.585,1217.22 617.172,1216.84 617.758,1217.75 618.345,1217.46 618.931,1221.14 619.518,1220.85 620.104,1217.91 620.69,1218.55 621.277,1218.42 621.863,1218.25 622.45,1220.42 623.036,1220.2 623.622,1217.46 624.209,1215.92 624.795,1215.54 625.382,1216.59 625.968,1217.81 626.554,1218.93 627.141,1221.04 627.727,1222.01 628.314,1221.36 628.9,1223.18 629.487,1225.25 630.073,1224.46 630.659,1226.14 631.246,1225.59 631.832,1226.06 632.419,1226.49 633.005,1222.45 633.591,1223.32 634.178,1220.35 634.764,1220.17 635.351,1221.22 635.937,1219.77 636.523,1221.93 637.11,1222.99 637.696,1220.2 638.283,1218.86 638.869,1222.2 639.456,1219.25 640.042,1219.02 640.628,1216.21 641.215,1219.74 641.801,1218.21 642.388,1217.78 642.974,1215.99 643.56,1214.55 644.147,1213.29 644.733,1214.52 645.32,1214.82 645.906,1214.74 646.492,1215.62 647.079,1216.61 647.665,1215.18 648.252,1212.52 648.838,1212.49 649.425,1212.55 650.011,1208.92 650.597,1207.74 651.184,1210.36 651.77,1211.68 652.357,1214.2 652.943,1212.85 653.529,1212.8 654.116,1213.78 654.702,1215.06 655.289,1215.09 655.875,1214.76 656.462,1216.22 657.048,1218.27 657.634,1217.83 658.221,1216.35 658.807,1215.03 659.394,1216.3 659.98,1214.66 660.566,1214.72 661.153,1213.47 661.739,1216.03 662.326,1215.78 662.912,1217.93 663.498,1217.72 664.085,1222.19 664.671,1222.88 665.258,1221.93 665.844,1221.53 666.431,1220.98 667.017,1219.36 667.603,1218.01 668.19,1216.3 668.776,1216.02 669.363,1214.55 669.949,1214.27 670.535,1213.96 671.122,1215.02 671.708,1215.87 672.295,1218.16 672.881,1219.24 673.467,1220.13 674.054,1220.92 674.64,1221.83 675.227,1223.66 675.813,1222.96 676.4,1222.49 676.986,1220.72 677.572,1217.69 678.159,1218.72 678.745,1218.18 679.332,1216.54 679.918,1216.08 680.504,1216.92 681.091,1216.63 681.677,1216.13 682.264,1212.25 682.85,1214.62 683.436,1213 684.023,1210.26 684.609,1209.05 685.196,1210.28 685.782,1210.3 686.369,1211.74 686.955,1209.11 687.541,1206.75 688.128,1208.29 688.714,1208.22 689.301,1208.34 689.887,1207.24 690.473,1206.25 691.06,1206.36 691.646,1207.71 692.233,1206.65 692.819,1207.04 693.405,1205.02 693.992,1205.38 694.578,1206.76 695.165,1208.15 695.751,1210.8 696.338,1210.86 696.924,1211.94 697.51,1213.24 698.097,1213.06 698.683,1214.05 699.27,1213.89 699.856,1216 700.442,1218.18 701.029,1218.94 701.615,1220.96 702.202,1219.17 702.788,1220.05 703.375,1218.33 703.961,1218.91 704.547,1217.15 705.134,1216.74 705.72,1216.48 706.307,1216.02 706.893,1212 707.479,1213.22 708.066,1209.26 708.652,1209.25 709.239,1209.26 709.825,1212 710.411,1216.78 710.998,1217.84 711.584,1216.31 712.171,1215.83 712.757,1215.64 713.344,1215.43 713.93,1215.04 714.516,1213.52 715.103,1212 715.689,1211.84 716.276,1210.45 716.862,1210.66 717.448,1210.64 718.035,1209.44 718.621,1206.82 719.208,1205.77 719.794,1204.52 720.38,1206.04 720.967,1207.32 721.553,1204.96 722.14,1206.35 722.726,1205.02 723.313,1205.49 723.899,1210.68 724.485,1213.12 725.072,1214.12 725.658,1212.44 726.245,1209.55 726.831,1208.16 727.417,1208.14 728.004,1207.99 728.59,1205.46 729.177,1205.61 729.763,1205.83 730.349,1206.42 730.936,1206.67 731.522,1206.87 732.109,1207.09 732.695,1204.52 733.282,1206.15 733.868,1206.39 734.454,1206.49 735.041,1206.8 735.627,1205.62 736.214,1207.06 736.8,1209.81 737.386,1208.55 737.973,1208.77 738.559,1206.39 739.146,1207.49 739.732,1208.77 740.318,1211.07 740.905,1209.7 741.491,1206.07 742.078,1209.93 742.664,1207.3 743.251,1207.58 743.837,1207.96 744.423,1209.31 745.01,1206.82 745.596,1205.84 746.183,1208.63 746.769,1208.69 747.355,1206.2 747.942,1203.99 748.528,1204.41 749.115,1205.71 749.701,1209.37 750.288,1209.42 750.874,1210.62 751.46,1208.98 752.047,1208.9 752.633,1208.83 753.22,1207.68 753.806,1207.82 754.392,1209.01 754.979,1206.44 755.565,1207.84 756.152,1209.09 756.738,1210.31 757.324,1212.82 757.911,1213.85 758.497,1212.34 759.084,1212.33 759.67,1212.26 760.257,1213.42 760.843,1213.31 761.429,1213.21 762.016,1214.25 762.602,1211.45 763.189,1212.45 763.775,1212.29 764.361,1212.34 764.948,1213.39 765.534,1212.11 766.121,1210.75 766.707,1209.32 767.293,1208.06 767.88,1208.29 768.466,1206.8 769.053,1209.11 769.639,1210.57 770.226,1210.44 770.812,1210.47 771.398,1209.09 771.985,1207.47 772.571,1207.85 773.158,1209.27 773.744,1208.93 774.33,1210.21 774.917,1208.9 775.503,1208.71 776.09,1209.72 776.676,1209.32 777.262,1210.47 777.849,1210.04 778.435,1208.53 779.022,1207.57 779.608,1206.27 780.195,1208.88 780.781,1208.79 781.367,1209.92 781.954,1209.86 782.54,1208.35 783.127,1207.25 783.713,1208.69 784.299,1208.87 784.886,1208.61 785.472,1208.52 786.059,1208.29 786.645,1208.46 787.232,1208.28 787.818,1209.56 788.404,1211.85 788.991,1211.66 789.577,1212.77 790.164,1211.35 790.75,1212.58 791.336,1212.27 791.923,1213.15 792.509,1211.51 793.096,1211.31 793.682,1214.68 794.268,1214.43 794.855,1214.39 795.441,1214.21 796.028,1213.84 796.614,1214.51 797.201,1216.39 797.787,1218.36 798.373,1219.02 798.96,1220.55 799.546,1219.72 800.133,1220.4 800.719,1220.93 801.305,1219.11 801.892,1217.43 802.478,1217.97 803.065,1216.11 803.651,1215.86 804.237,1214.17 804.824,1212.41 805.41,1212.06 805.997,1211.96 806.583,1210.42 807.17,1210.35 807.756,1207.85 808.342,1209.07 808.929,1208.95 809.515,1208.75 810.102,1209.09 810.688,1208.9 811.274,1208.53 811.861,1208.37 812.447,1208.45 813.034,1208.37 813.62,1206.88 814.206,1203.98 814.793,1205.22 815.379,1202.94 815.966,1199.25 816.552,1198.62 817.139,1198.96 817.725,1195.62 818.311,1195.17 818.898,1195.84 819.484,1196.62 820.071,1194.99 820.657,1199.59 821.243,1201.33 821.83,1201.82 822.416,1202.29 823.003,1203.92 823.589,1205.41 824.175,1205.64 824.762,1205.75 825.348,1204.71 825.935,1204.97 826.521,1205.12 827.108,1206.48 827.694,1205.03 828.28,1203.96 828.867,1202.84 829.453,1200.77 830.04,1202.44 830.626,1204.11 831.212,1202.77 831.799,1203.15 832.385,1203.31 832.972,1203.38 833.558,1204.89 834.145,1206.29 834.731,1207.68 835.317,1207.8 835.904,1206.74 836.49,1205.35 837.077,1205.23 837.663,1205.44 838.249,1208.12 838.836,1210.34 839.422,1209.95 840.009,1210.96 840.595,1211 841.181,1210.66 841.768,1209.13 842.354,1209.32 842.941,1211.57 843.527,1211.41 844.114,1211.1 844.7,1209.57 845.286,1208.05 845.873,1206.99 846.459,1204.55 847.046,1204.54 847.632,1205.79 848.218,1207.12 848.805,1206.06 849.391,1206.18 849.978,1207.41 850.564,1207.49 851.15,1207.4 851.737,1207.45 852.323,1205.05 852.91,1204.86 853.496,1202.15 854.083,1201.35 854.669,1200.12 855.255,1201.72 855.842,1199.27 856.428,1199.82 857.015,1200.15 857.601,1201.65 858.187,1201.77 858.774,1201.81 859.36,1200.86 859.947,1200.99 860.533,1201.26 861.119,1200.2 861.706,1199.38 862.292,1198.42 862.879,1200.37 863.465,1199.62 864.052,1197.46 864.638,1196.79 865.224,1197.45 865.811,1196.63 866.397,1198.41 866.984,1200.19 867.57,1201.86 868.156,1203.45 868.743,1207.17 869.329,1208.3 869.916,1207.21 870.502,1205.91 871.089,1208.32 871.675,1208.11 872.261,1205.66 872.848,1206.77 873.434,1206.9 874.021,1206.77 874.607,1206.94 875.193,1207.02 875.78,1208.42 876.366,1207.05 876.953,1208.53 877.539,1208.15 878.125,1208.1 878.712,1208.07 879.298,1208.07 879.885,1207.97 880.471,1209.2 881.058,1209.04 881.644,1207.71 882.23,1208.79 882.817,1207.61 883.403,1207.58 883.99,1206.24 884.576,1207.44 885.162,1208.59 885.749,1209.59 886.335,1208.4 886.922,1208.23 887.508,1209.57 888.094,1209.57 888.681,1211.98 889.267,1212.98 889.854,1211.17 890.44,1207.12 891.027,1207.2 891.613,1207.03 892.199,1205.84 892.786,1204.7 893.372,1204.7 893.959,1205.84 894.545,1204.66 895.131,1203.44 895.718,1206.15 896.304,1206.09 896.891,1205.09 897.477,1203.87 898.063,1203.93 898.65,1206.4 899.236,1207.51 899.823,1208.47 900.409,1208.36 900.996,1209.49 901.582,1208.44 902.168,1209.53 902.755,1206.97 903.341,1207.2 903.928,1207.29 904.514,1207.28 905.1,1207.31 905.687,1205.8 906.273,1203.25 906.86,1204.55 907.446,1204.51 908.032,1207.02 908.619,1206.97 909.205,1209.43 909.792,1207.85 910.378,1206.31 910.965,1206.25 911.551,1207.74 912.137,1206.7 912.724,1205.23 913.31,1205.19 913.897,1204.15 914.483,1204.41 915.069,1204.48 915.656,1205.68 916.242,1206.89 916.829,1207.87 917.415,1208.91 918.002,1207.58 918.588,1204.97 919.174,1205.06 919.761,1203.67 920.347,1203.54 920.934,1203.36 921.52,1205.73 922.106,1206.9 922.693,1205.73 923.279,1205.4 923.866,1209.22 924.452,1207.89 925.038,1205.31 925.625,1206.5 926.211,1206.45 926.798,1208.75 927.384,1207.57 927.971,1207.14 928.557,1208.37 929.143,1207.54 929.73,1207.27 930.316,1207.09 930.903,1208.15 931.489,1209.3 932.075,1209.06 932.662,1212.74 933.248,1211.35 933.835,1211.08 934.421,1209.49 935.007,1212.82 935.594,1211.25 936.18,1209.74 936.767,1210.68 937.353,1209.38 937.94,1207.94 938.526,1206.5 939.112,1206.16 939.699,1205.06 940.285,1206.47 940.872,1203.83 941.458,1203.73 942.044,1201.3 942.631,1201.68 943.217,1204.11 943.804,1203.09 944.39,1204.26 944.976,1208.26 945.563,1208.27 946.149,1207.85 946.736,1210.04 947.322,1210.05 947.909,1207.2 948.495,1206.04 949.081,1207.08 949.668,1207.17 950.254,1205.94 950.841,1207.27 951.427,1207.08 952.013,1205.55 952.6,1206.99 953.186,1208.22 953.773,1204.46 954.359,1204.43 954.945,1204.6 955.532,1203.65 956.118,1203.63 956.705,1205.16 957.291,1205.26 957.878,1206.77 958.464,1206.62 959.05,1208.89 959.637,1208.81 960.223,1207.33 960.81,1207.04 961.396,1207.98 961.982,1209.26 962.569,1211.47 963.155,1212.31 963.742,1210.58 964.328,1210.31 964.915,1210 965.501,1211.04 966.087,1213.25 966.674,1211.45 967.26,1208.55 967.847,1208.13 968.433,1202.91 969.019,1203.02 969.606,1203.13 970.192,1205.53 970.779,1204.45 971.365,1203.38 971.951,1203.88 972.538,1205.29 973.124,1205.52 973.711,1205.64 974.297,1204.26 974.884,1206.58 975.47,1207.96 976.056,1206.52 976.643,1206.49 977.229,1206.35 977.816,1207.59 978.402,1206.26 978.988,1207.65 979.575,1207.82 980.161,1208.1 980.748,1209.35 981.334,1207.79 981.92,1207.42 982.507,1207.23 983.093,1208.49 983.68,1209.51 984.266,1209.55 984.853,1210.46 985.439,1211.51 986.025,1212.59 986.612,1209.59 987.198,1209.37 987.785,1207.96 988.371,1209.01 988.957,1208.9 989.544,1208.49 990.13,1206.88 990.717,1204.31 991.303,1204.3 991.889,1203.14 992.476,1206.12 993.062,1207.21 993.649,1208.34 994.235,1205.81 994.822,1207.08 995.408,1209.29 995.994,1210.24 996.581,1210.19 997.167,1212.62 997.754,1214.84 998.34,1212.02 998.926,1211.93 999.513,1210.06 1000.1,1208.52 1000.69,1208.26 1001.27,1211.58 1001.86,1211.24 1002.44,1211.11 1003.03,1210.93 1003.62,1210.73 1004.2,1211.56 1004.79,1209.89 1005.38,1208.52 1005.96,1208.4 1006.55,1208.44 1007.14,1208 1007.72,1203.97 1008.31,1203.95 1008.9,1203.9 1009.48,1202.91 1010.07,1204.39 1010.65,1201.78 1011.24,1202.01 1011.83,1204.98 1012.41,1205.04 1013,1207.43 1013.59,1204.78 1014.17,1205.91 1014.76,1207.12 1015.35,1208.23 1015.93,1209.4 1016.52,1208.2 1017.11,1207.92 1017.69,1206.48 1018.28,1208.84 1018.86,1208.87 1019.45,1207.42 1020.04,1207.52 1020.62,1204.7 1021.21,1204.63 1021.8,1206.11 1022.38,1205.85 1022.97,1207.05 1023.56,1205.84 1024.14,1207.15 1024.73,1209.47 1025.32,1209.37 1025.9,1205.45 1026.49,1206.74 1027.07,1208.1 1027.66,1207.94 1028.25,1206.73 1028.83,1208.11 1029.42,1210.32 1030.01,1208.39 1030.59,1212.04 1031.18,1211.28 1031.77,1207.29 1032.35,1208.34 1032.94,1207.25 1033.52,1204.75 1034.11,1205.85 1034.7,1204.55 1035.28,1204.84 1035.87,1205.15 1036.46,1204.07 1037.04,1205.26 1037.63,1206.43 1038.22,1205.3 1038.8,1202.66 1039.39,1204.19 1039.98,1204.37 1040.56,1203.23 1041.15,1204.25 1041.73,1206.45 1042.32,1205.29 1042.91,1206.22 1043.49,1207.68 1044.08,1207.46 1044.67,1204.92 1045.25,1203.78 1045.84,1200.25 1046.43,1200.21 1047.01,1200.41 1047.6,1200.42 1048.19,1200.56 1048.77,1200.67 1049.36,1202.31 1049.94,1205.04 1050.53,1207.75 1051.12,1206.44 1051.7,1207.47 1052.29,1209.77 1052.88,1214.57 1053.46,1212.98 1054.05,1216.31 1054.64,1213.16 1055.22,1213.99 1055.81,1214.48 1056.39,1214.04 1056.98,1212.32 1057.57,1209.35 1058.15,1207.76 1058.74,1207.73 1059.33,1206.05 1059.91,1203.63 1060.5,1197.54 1061.09,1197.98 1061.67,1198.56 1062.26,1196.6 1062.85,1196.98 1063.43,1194.97 1064.02,1191.71 1064.6,1194.98 1065.19,1196.6 1065.78,1196.88 1066.36,1197.73 1066.95,1195.71 1067.54,1196.19 1068.12,1197.88 1068.71,1197.12 1069.3,1200.02 1069.88,1197.64 1070.47,1198.07 1071.06,1197.18 1071.64,1196.39 1072.23,1198.17 1072.81,1197.21 1073.4,1196.4 1073.99,1199.46 1074.57,1198.4 1075.16,1197.68 1075.75,1197.92 1076.33,1199.62 1076.92,1201.08 1077.51,1201.28 1078.09,1201.44 1078.68,1200.55 1079.26,1200.81 1079.85,1199.75 1080.44,1197.83 1081.02,1198.15 1081.61,1199.81 1082.2,1200.14 1082.78,1200.66 1083.37,1197.22 1083.96,1196.27 1084.54,1196.76 1085.13,1198.54 1085.72,1197.4 1086.3,1199.32 1086.89,1199.63 1087.47,1201.21 1088.06,1203.98 1088.65,1202.79 1089.23,1201.85 1089.82,1203.04 1090.41,1203.19 1090.99,1203.15 1091.58,1202.08 1092.17,1204.91 1092.75,1205.22 1093.34,1204.24 1093.93,1204.29 1094.51,1208.04 1095.1,1207.85 1095.68,1207.78 1096.27,1208.95 1096.86,1209.67 1097.44,1211.88 1098.03,1212.57 1098.62,1217.17 1099.2,1217.54 1099.79,1214.48 1100.38,1212.75 1100.96,1208.4 1101.55,1206.9 1102.14,1203.19 1102.72,1204.33 1103.31,1204.31 1103.89,1206.65 1104.48,1206.74 1105.07,1205.51 1105.65,1206.53 1106.24,1206.31 1106.83,1206.12 1107.41,1206.1 1108,1204.69 1108.59,1202.03 1109.17,1203.55 1109.76,1201.31 1110.34,1201.28 1110.93,1201.64 1111.52,1201.42 1112.1,1201.41 1112.69,1205.44 1113.28,1205.51 1113.86,1205.7 1114.45,1206.86 1115.04,1204.33 1115.62,1202.95 1116.21,1205.49 1116.8,1205.31 1117.38,1208.92 1117.97,1212.29 1118.55,1210.61 1119.14,1211.69 1119.73,1212.65 1120.31,1214.74 1120.9,1214.14 1121.49,1214.97 1122.07,1213.45 1122.66,1214.06 1123.25,1213.42 1123.83,1211.83 1124.42,1211.62 1125.01,1208.68 1125.59,1208.56 1126.18,1205.58 1126.76,1205.63 1127.35,1205.68 1127.94,1202.03 1128.52,1202.21 1129.11,1201.09 1129.7,1203.76 1130.28,1205.16 1130.87,1202.74 1131.46,1205.45 1132.04,1206.7 1132.63,1206.72 1133.21,1207.87 1133.8,1209.09 1134.39,1208.94 1134.97,1211.08 1135.56,1208.35 1136.15,1208.46 1136.73,1209.4 1137.32,1205.2 1137.91,1203.95 1138.49,1205.23 1139.08,1202.62 1139.67,1204.06 1140.25,1206.46 1140.84,1204.95 1141.42,1203.66 1142.01,1204.67 1142.6,1204.95 1143.18,1207.45 1143.77,1207.32 1144.36,1205.93 1144.94,1203.3 1145.53,1204.54 1146.12,1205.91 1146.7,1206.98 1147.29,1205.77 1147.88,1204.3 1148.46,1206.57 1149.05,1206.67 1149.63,1202.67 1150.22,1202.9 1150.81,1202.94 1151.39,1201.66 1151.98,1201.59 1152.57,1200.7 1153.15,1200.94 1153.74,1202.43 1154.33,1205.11 1154.91,1203.89 1155.5,1205.16 1156.09,1205.05 1156.67,1206.4 1157.26,1206.29 1157.84,1206.33 1158.43,1203.81 1159.02,1202.33 1159.6,1202.64 1160.19,1201.41 1160.78,1202.72 1161.36,1205.29 1161.95,1205.47 1162.54,1206.63 1163.12,1205.32 1163.71,1207.5 1164.29,1207.49 1164.88,1204.73 1165.47,1204.79 1166.05,1205.83 1166.64,1208.11 1167.23,1209.17 1167.81,1210.1 1168.4,1213.49 1168.99,1210.39 1169.57,1208.94 1170.16,1208.78 1170.75,1207.46 1171.33,1207.39 1171.92,1206.12 1172.5,1205.13 1173.09,1205.34 1173.68,1204.15 1174.26,1206.75 1174.85,1205.52 1175.44,1204.12 1176.02,1203.2 1176.61,1204.52 1177.2,1207.22 1177.78,1208.32 1178.37,1208.08 1178.96,1211.38 1179.54,1209.91 1180.13,1209.64 1180.71,1210.51 1181.3,1210.37 1181.89,1211.37 1182.47,1213.29 1183.06,1214.06 1183.65,1212.38 1184.23,1211.98 1184.82,1209.03 1185.41,1210.18 1185.99,1208.65 1186.58,1207.33 1187.16,1205.77 1187.75,1204.38 1188.34,1200.42 1188.92,1201.75 1189.51,1200.64 1190.1,1199.61 1190.68,1198.92 1191.27,1199.27 1191.86,1198.52 1192.44,1198.82 1193.03,1197.9 1193.62,1197.37 1194.2,1199.28 1194.79,1198.39 1195.37,1202.35 1195.96,1201.18 1196.55,1201.53 1197.13,1203.08 1197.72,1201.5 1198.31,1201.42 1198.89,1200.39 1199.48,1201.95 1200.07,1202.26 1200.65,1203.63 1201.24,1207.4 1201.83,1208.56 1202.41,1212.29 1203,1213.24 1203.58,1212.79 1204.17,1211.04 1204.76,1206.68 1205.34,1205.3 1205.93,1205.36 1206.52,1205.57 1207.1,1205.5 1207.69,1203.03 1208.28,1201.93 1208.86,1202.26 1209.45,1202.29 1210.03,1200.99 1210.62,1202.51 1211.21,1202.5 1211.79,1202.58 1212.38,1202.53 1212.97,1204.01 1213.55,1201.54 1214.14,1200.5 1214.73,1200.87 1215.31,1199.68 1215.9,1198.55 1216.49,1198.57 1217.07,1198.85 1217.66,1199.42 1218.24,1199.38 1218.83,1198.45 1219.42,1199.05 1220,1197.92 1220.59,1199.52 1221.18,1200.04 1221.76,1200.52 1222.35,1200.89 1222.94,1198.68 1223.52,1200.18 1224.11,1202.85 1224.7,1202.98 1225.28,1203.44 1225.87,1202.1 1226.45,1202.48 1227.04,1203.63 1227.63,1206.39 1228.21,1207.82 1228.8,1208.74 1229.39,1207.11 1229.97,1210.05 1230.56,1207.24 1231.15,1206.96 1231.73,1205.48 1232.32,1205.51 1232.91,1204.29 1233.49,1204.44 1234.08,1203.24 1234.66,1205.57 1235.25,1203.07 1235.84,1200.71 1236.42,1200.9 1237.01,1197.23 1237.6,1198.79 1238.18,1197.79 1238.77,1200.62 1239.36,1198.39 1239.94,1197.65 1240.53,1198.07 1241.11,1198.54 1241.7,1200.04 1242.29,1198.03 1242.87,1198.39 1243.46,1199.96 1244.05,1200.07 1244.63,1201.58 1245.22,1202.79 1245.81,1203.91 1246.39,1203.85 1246.98,1205.39 1247.57,1206.72 1248.15,1207.61 1248.74,1207.53 1249.32,1209.68 1249.91,1210.72 1250.5,1211.53 1251.08,1208.77 1251.67,1206.09 1252.26,1204.85 1252.84,1204.75 1253.43,1206.01 1254.02,1207.08 1254.6,1208.3 1255.19,1206.78 1255.78,1205.3 1256.36,1206.36 1256.95,1206.15 1257.53,1205.03 1258.12,1205.07 1258.71,1204.98 1259.29,1203.62 1259.88,1205.14 1260.47,1202.46 1261.05,1203.83 1261.64,1205.39 1262.23,1205.16 1262.81,1206.47 1263.4,1207.66 1263.98,1207.68 1264.57,1207.71 1265.16,1210.25 1265.74,1213.5 1266.33,1213.12 1266.92,1211.52 1267.5,1214.9 1268.09,1214.61 1268.68,1211.74 1269.26,1216.13 1269.85,1216.74 1270.44,1216.09 1271.02,1214.14 1271.61,1213.56 1272.19,1214.26 1272.78,1216.21 1273.37,1211.87 1273.95,1212.36 1274.54,1210.7 1275.13,1211.52 1275.71,1208.72 1276.3,1212.18 1276.89,1211.8 1277.47,1210.15 1278.06,1208.66 1278.65,1209.48 1279.23,1209.22 1279.82,1210.16 1280.4,1208.73 1280.99,1207.35 1281.58,1207.29 1282.16,1204.49 1282.75,1203.26 1283.34,1204.46 1283.92,1203.31 1284.51,1201.93 1285.1,1202.92 1285.68,1205.46 1286.27,1206.43 1286.86,1207.6 1287.44,1204.79 1288.03,1205.86 1288.61,1204.55 1289.2,1203.21 1289.79,1200.88 1290.37,1203.38 1290.96,1203.58 1291.55,1203.63 1292.13,1202.19 1292.72,1198.59 1293.31,1198.83 1293.89,1198.81 1294.48,1200.42 1295.06,1199.24 1295.65,1196.86 1296.24,1194.81 1296.82,1195.51 1297.41,1196.24 1298,1196.88 1298.58,1198.77 1299.17,1199.38 1299.76,1200.82 1300.34,1199.92 1300.93,1201.59 1301.52,1203.14 1302.1,1203.22 1302.69,1202.13 1303.27,1199.91 1303.86,1198.78 1304.45,1200.39 1305.03,1199.25 1305.62,1200.79 1306.21,1199.77 1306.79,1201.21 1307.38,1198.91 1307.97,1200.54 1308.55,1200.87 1309.14,1202.41 1309.73,1200.2 1310.31,1200.54 1310.9,1199.53 1311.48,1198.76 1312.07,1199.32 1312.66,1202.12 1313.24,1203.89 1313.83,1201.22 1314.42,1201.55 1315,1201.82 1315.59,1200.82 1316.18,1201.35 1316.76,1201.65 1317.35,1201.89 1317.93,1200.84 1318.52,1202.06 1319.11,1203.64 1319.69,1202.57 1320.28,1201.49 1320.87,1202.06 1321.45,1200.93 1322.04,1201.12 1322.63,1201.49 1323.21,1201.89 1323.8,1201.15 1324.39,1202.63 1324.97,1204.13 1325.56,1204.24 1326.14,1203.96 1326.73,1204.06 1327.32,1206.43 1327.9,1207.52 1328.49,1205.99 1329.08,1203.17 1329.66,1203.42 1330.25,1203.45 1330.84,1203.73 1331.42,1204.89 1332.01,1207.24 1332.6,1209.29 1333.18,1207.86 1333.77,1208.13 1334.35,1206.95 1334.94,1205.68 1335.53,1205.66 1336.11,1204.27 1336.7,1205.57 1337.29,1206.81 1337.87,1207.85 1338.46,1207.59 1339.05,1207.62 1339.63,1206.09 1340.22,1206.2 1340.8,1206.07 1341.39,1205.01 1341.98,1204.83 1342.56,1204.95 1343.15,1204.99 1343.74,1204.75 1344.32,1206.13 1344.91,1207.35 1345.5,1203.61 1346.08,1202.51 1346.67,1203.8 1347.26,1202.58 1347.84,1206.33 1348.43,1207.37 1349.01,1206 1349.6,1207.27 1350.19,1209.6 1350.77,1209.13 1351.36,1209.02 1351.95,1207.87 1352.53,1209.06 1353.12,1208.88 1353.71,1211.01 1354.29,1209.42 1354.88,1209.17 1355.47,1209.03 1356.05,1206.33 1356.64,1206.37 1357.22,1207.29 1357.81,1204.63 1358.4,1202.53 1358.98,1206.53 1359.57,1205.29 1360.16,1203.89 1360.74,1201.36 1361.33,1201.49 1361.92,1202.87 1362.5,1202.87 1363.09,1205.81 1363.68,1205.71 1364.26,1207.02 1364.85,1205.72 1365.43,1206.99 1366.02,1207 1366.61,1208.05 1367.19,1209.21 1367.78,1210.4 1368.37,1210.04 1368.95,1208.33 1369.54,1206.96 1370.13,1206.94 1370.71,1206.92 1371.3,1207.01 1371.88,1204.33 1372.47,1205.55 1373.06,1205.78 1373.64,1206.93 1374.23,1208.03 1374.82,1204.29 1375.4,1204.67 1375.99,1202.15 1376.58,1201.09 1377.16,1202.59 1377.75,1202.64 1378.34,1203.82 1378.92,1204.2 1379.51,1203.88 1380.09,1202.92 1380.68,1204.33 1381.27,1204.61 1381.85,1204.41 1382.44,1203.06 1383.03,1204.17 1383.61,1206.92 1384.2,1206.77 1384.79,1206.79 1385.37,1206.73 1385.96,1207.85 1386.55,1207.46 1387.13,1208.61 1387.72,1208.59 1388.3,1208.24 1388.89,1208.16 1389.48,1206.79 1390.06,1209.11 1390.65,1207.52 1391.24,1208.76 1391.82,1206.04 1392.41,1208.38 1393,1209.35 1393.58,1211.28 1394.17,1210.96 1394.75,1210.36 1395.34,1209.93 1395.93,1211.73 1396.51,1211.07 1397.1,1208.24 1397.69,1209.29 1398.27,1206.75 1398.86,1206.69 1399.45,1203.99 1400.03,1203.88 1400.62,1203.98 1401.21,1206.54 1401.79,1207.57 1402.38,1206.29 1402.96,1208.65 1403.55,1208.38 1404.14,1209.58 1404.72,1209.29 1405.31,1207.77 1405.9,1206.18 1406.48,1208.6 1407.07,1207.08 1407.66,1208.4 1408.24,1208.08 1408.83,1205.22 1409.42,1205.2 1410,1203.91 1410.59,1207.65 1411.17,1207.69 1411.76,1208.58 1412.35,1209.57 1412.93,1211.95 1413.52,1213.91 1414.11,1213.09 1414.69,1212.67 1415.28,1210.91 1415.87,1206.79 1416.45,1207.44 1417.04,1207.27 1417.63,1206.91 1418.21,1206.68 1418.8,1205.53 1419.38,1204.06 1419.97,1202.89 1420.56,1204.34 1421.14,1201.62 1421.73,1199.09 1422.32,1199.43 1422.9,1197.17 1423.49,1200.1 1424.08,1203.12 1424.66,1202 1425.25,1203.66 1425.83,1203.65 1426.42,1205.13 1427.01,1201.68 1427.59,1201.85 1428.18,1200.99 1428.77,1201.45 1429.35,1201.56 1429.94,1200.5 1430.53,1203.12 1431.11,1205.58 1431.7,1206.75 1432.29,1204.16 1432.87,1202.76 1433.46,1201.64 1434.04,1200.48 1434.63,1201.73 1435.22,1200.66 1435.8,1199.6 1436.39,1198.43 1436.98,1197.51 1437.56,1199.08 1438.15,1199.42 1438.74,1198.37 1439.32,1200.11 1439.91,1197.86 1440.5,1198.36 1441.08,1196.01 1441.67,1197.51 1442.25,1199.34 1442.84,1199.39 1443.43,1197.23 1444.01,1197.79 1444.6,1198.05 1445.19,1198.41 1445.77,1197.59 1446.36,1197.86 1446.95,1199.56 1447.53,1199.9 1448.12,1198.76 1448.7,1199.01 1449.29,1199.18 1449.88,1200.53 1450.46,1198.55 1451.05,1200.38 1451.64,1201.78 1452.22,1202.08 1452.81,1203.48 1453.4,1204.99 1453.98,1206.62 1454.57,1205.35 1455.16,1203.94 1455.74,1206.7 1456.33,1206.72 1456.91,1206.72 1457.5,1205.3 1458.09,1210.17 1458.67,1207.38 1459.26,1204.89 1459.85,1205.97 1460.43,1207.1 1461.02,1206.91 1461.61,1205.65 1462.19,1205.72 1462.78,1208.53 1463.37,1209.66 1463.95,1209.29 1464.54,1210.32 1465.12,1208.69 1465.71,1207.2 1466.3,1207.16 1466.88,1209.28 1467.47,1211.57 1468.06,1210.29 1468.64,1210.15 1469.23,1209.64 1469.82,1207.99 1470.4,1208.83 1470.99,1210.01 1471.57,1207.2 1472.16,1205.6 1472.75,1204.47 1473.33,1205.61 1473.92,1204.18 1474.51,1206.61 1475.09,1205.23 1475.68,1205.32 1476.27,1206.51 1476.85,1207.71 1477.44,1206.04 1478.03,1205.97 1478.61,1205.98 1479.2,1203.86 1479.78,1204.08 1480.37,1204.38 1480.96,1203.21 1481.54,1204.63 1482.13,1203.43 1482.72,1202.19 1483.3,1202.47 1483.89,1204.11 1484.48,1204.05 1485.06,1207.97 1485.65,1205.86 1486.24,1205.52 1486.82,1207.41 1487.41,1207.34 1487.99,1208.32 1488.58,1206.8 1489.17,1209.19 1489.75,1211.49 1490.34,1211.21 1490.93,1212.01 1491.51,1215.44 1492.1,1216.25 1492.69,1214.4 1493.27,1215.09 1493.86,1212.32 1494.45,1213.41 1495.03,1215.23 1495.62,1213.21 1496.2,1213.97 1496.79,1215.98 1497.38,1218.8 1497.96,1219.27 1498.55,1219.81 1499.14,1216.51 1499.72,1214.63 1500.31,1211.58 1500.9,1209.85 1501.48,1212 1502.07,1208.17 1502.65,1204.37 1503.24,1204.14 1503.83,1202.83 1504.41,1201.94 1505,1202.02 1505.59,1199.87 1506.17,1198.8 1506.76,1195.33 1507.35,1198.42 1507.93,1197.04 1508.52,1196.1 1509.11,1198.86 1509.69,1196.44 1510.28,1195.51 1510.86,1195.73 1511.45,1198.99 1512.04,1199.19 1512.62,1199.38 1513.21,1199.59 1513.8,1201.25 1514.38,1202.65 1514.97,1202.79 1515.56,1202.89 1516.14,1201.56 1516.73,1205.54 1517.32,1203.03 1517.9,1203.08 1518.49,1201.66 1519.07,1201.76 1519.66,1204.32 1520.25,1205.8 1520.83,1205.78 1521.42,1205.79 1522.01,1207.24 1522.59,1208.22 1523.18,1208.07 1523.77,1206.72 1524.35,1208.12 1524.94,1206.75 1525.52,1205.19 1526.11,1207.65 1526.7,1207.68 1527.28,1208.58 1527.87,1207.06 1528.46,1205.57 1529.04,1205.45 1529.63,1203.87 1530.22,1203.94 1530.8,1200.24 1531.39,1197.75 1531.98,1200.42 1532.56,1200.4 1533.15,1203.12 1533.73,1206.7 1534.32,1207.98 1534.91,1204.26 1535.49,1204.44 1536.08,1202.98 1536.67,1200.35 1537.25,1201.7 1537.84,1202.96 1538.43,1201.9 1539.01,1200.8 1539.6,1204.68 1540.19,1206.11 1540.77,1203.74 1541.36,1202.88 1541.94,1202.97 1542.53,1201.82 1543.12,1200.61 1543.7,1201.01 1544.29,1200.02 1544.88,1201.63 1545.46,1200.56 1546.05,1202.17 1546.64,1199.72 1547.22,1200.03 1547.81,1201.32 1548.4,1204.05 1548.98,1202.88 1549.57,1199.22 1550.15,1199.73 1550.74,1198.71 1551.33,1199.07 1551.91,1201.8 1552.5,1201.97 1553.09,1202.17 1553.67,1201.05 1554.26,1201.65 1554.85,1201.69 1555.43,1203.17 1556.02,1207.98 1556.6,1205.3 1557.19,1204.16 1557.78,1201.59 1558.36,1201.86 1558.95,1205.89 1559.54,1207.12 1560.12,1209.59 1560.71,1205.8 1561.3,1205.65 1561.88,1203.09 1562.47,1204.48 1563.06,1205.91 1563.64,1207.24 1564.23,1207.35 1564.81,1209.72 1565.4,1210.62 1565.99,1210.36 1566.57,1208.83 1567.16,1207.15 1567.75,1209.44 1568.33,1211.69 1568.92,1212.54 1569.51,1213.16 1570.09,1213.96 1570.68,1212.1 1571.27,1209.22 1571.85,1207.92 1572.44,1207.77 1573.02,1207.34 1573.61,1209.57 1574.2,1206.95 1574.78,1206.74 1575.37,1205.56 1575.96,1204.19 1576.54,1203.09 1577.13,1205.78 1577.72,1204.62 1578.3,1205.8 1578.89,1205.75 1579.47,1205.83 1580.06,1206.03 1580.65,1203.6 1581.23,1203.35 1581.82,1199.7 1582.41,1199.87 1582.99,1199.87 1583.58,1197.42 1584.17,1197.75 1584.75,1199.42 1585.34,1199.71 1585.93,1200.96 1586.51,1201.5 1587.1,1201.63 1587.68,1204.33 1588.27,1205.6 1588.86,1206.73 1589.44,1201.58 1590.03,1200.4 1590.62,1201.88 1591.2,1199.31 1591.79,1201.94 1592.38,1200.85 1592.96,1200.79 1593.55,1200.73 1594.14,1200.66 1594.72,1195.91 1595.31,1198.77 1595.89,1197.87 1596.48,1198.18 1597.07,1201.37 1597.65,1201.43 1598.24,1203.11 1598.83,1204.39 1599.41,1205.77 1600,1208.12 1600.59,1211.72 1601.17,1211.45 1601.76,1212.27 1602.34,1209.27 1602.93,1208.91 1603.52,1208.82 1604.1,1206.09 1604.69,1207.29 1605.28,1206.96 1605.86,1206.89 1606.45,1209.28 1607.04,1208.03 1607.62,1211.55 1608.21,1213.43 1608.8,1214.03 1609.38,1210.9 1609.97,1209.45 1610.55,1210.34 1611.14,1212.47 1611.73,1209.4 1612.31,1209.21 1612.9,1209.1 1613.49,1206.35 1614.07,1203.64 1614.66,1203.79 1615.25,1205.09 1615.83,1206.11 1616.42,1207.2 1617.01,1203.35 1617.59,1204.74 1618.18,1204.79 1618.76,1204.81 1619.35,1203.86 1619.94,1204.04 1620.52,1202.92 1621.11,1201.74 1621.7,1198.01 1622.28,1193.33 1622.87,1194.95 1623.46,1198.09 1624.04,1196.97 1624.63,1199.86 1625.22,1197.59 1625.8,1198.1 1626.39,1198.67 1626.97,1198.62 1627.56,1197.34 1628.15,1196.41 1628.73,1199.29 1629.32,1199.3 1629.91,1200.71 1630.49,1200.77 1631.08,1202.45 1631.67,1201.35 1632.25,1201.71 1632.84,1200.59 1633.42,1199.51 1634.01,1199.91 1634.6,1200.27 1635.18,1201.45 1635.77,1201.75 1636.36,1202.02 1636.94,1201.93 1637.53,1200.8 1638.12,1201.07 1638.7,1204.02 1639.29,1205.47 1639.88,1205.35 1640.46,1203.89 1641.05,1204.01 1641.63,1206.67 1642.22,1205.39 1642.81,1211.72 1643.39,1212.94 1643.98,1214.02 1644.57,1211.02 1645.15,1210.57 1645.74,1210.39 1646.33,1209.98 1646.91,1212.29 1647.5,1213.11 1648.09,1213.5 1648.67,1214.63 1649.26,1212.75 1649.84,1211.17 1650.43,1210.87 1651.02,1210.63 1651.6,1210.27 1652.19,1209.84 1652.78,1210.92 1653.36,1209.35 1653.95,1206.89 1654.54,1205.38 1655.12,1206.49 1655.71,1206.41 1656.29,1203.78 1656.88,1203.77 1657.47,1206.28 1658.05,1204.93 1658.64,1204.81 1659.23,1201.09 1659.81,1201.29 1660.4,1198.82 1660.99,1201.52 1661.57,1200.38 1662.16,1201.53 1662.75,1201.93 1663.33,1202.15 1663.92,1200.98 1664.5,1203.62 1665.09,1204.97 1665.68,1204.69 1666.26,1205.93 1666.85,1206 1667.44,1205.74 1668.02,1209.65 1668.61,1210.28 1669.2,1211.24 1669.78,1210.87 1670.37,1209.12 1670.96,1206.42 1671.54,1206.23 1672.13,1208.73 1672.71,1207.17 1673.3,1207.34 1673.89,1208.59 1674.47,1210.97 1675.06,1210.61 1675.65,1209.83 1676.23,1210.71 1676.82,1209.17 1677.41,1209.33 1677.99,1206.74 1678.58,1207.85 1679.17,1206.34 1679.75,1204.03 1680.34,1201.46 1680.92,1204.28 1681.51,1202.9 1682.1,1201.94 1682.68,1203.49 1683.27,1202.41 1683.86,1200.08 1684.44,1197.93 1685.03,1198.54 1685.62,1199.02 1686.2,1201.67 1686.79,1196.76 1687.37,1199.77 1687.96,1200.07 1688.55,1200.32 1689.13,1198 1689.72,1198.1 1690.31,1199.63 1690.89,1201.18 1691.48,1205.21 1692.07,1205.12 1692.65,1203.5 1693.24,1203.59 1693.83,1203.7 1694.41,1203.88 1695,1202.86 1695.58,1204.09 1696.17,1205.14 1696.76,1205.27 1697.34,1201.48 1697.93,1202.86 1698.52,1200.43 1699.1,1199.29 1699.69,1200.99 1700.28,1203.58 1700.86,1203.74 1701.45,1205.08 1702.04,1202.74 1702.62,1203.09 1703.21,1204.39 1703.79,1205.45 1704.38,1206.7 1704.97,1205.3 1705.55,1205.15 1706.14,1206.41 1706.73,1206.35 1707.31,1206.55 1707.9,1207.96 1708.49,1206.47 1709.07,1210.03 1709.66,1210.87 1710.24,1210.56 1710.83,1207.72 1711.42,1206.2 1712,1203.8 1712.59,1200.13 1713.18,1201.78 1713.76,1203.09 1714.35,1203.07 1714.94,1204.15 1715.52,1203.29 1716.11,1203.48 1716.7,1204.82 1717.28,1204.81 1717.87,1203.42 1718.45,1203.83 1719.04,1205.22 1719.63,1205.08 1720.21,1203.87 1720.8,1204.06 1721.39,1202.68 1721.97,1201.72 1722.56,1203.04 1723.15,1201.88 1723.73,1201.91 1724.32,1199.7 1724.91,1201.18 1725.49,1198.92 1726.08,1197.9 1726.66,1199.51 1727.25,1202.28 1727.84,1203.78 1728.42,1203.73 1729.01,1207.76 1729.6,1206.53 1730.18,1207.49 1730.77,1206.19 1731.36,1204.89 1731.94,1206.01 1732.53,1205.91 1733.11,1207.18 1733.7,1209.34 1734.29,1207.88 1734.87,1207.65 1735.46,1204 1736.05,1202.89 1736.63,1200.45 1737.22,1200.68 1737.81,1202.27 1738.39,1201.03 1738.98,1199.88 1739.57,1198.73 1740.15,1198.97 1740.74,1197.87 1741.32,1198.25 1741.91,1199.98 1742.5,1200.36 1743.08,1201.85 1743.67,1200.46 1744.26,1205.65 1744.84,1206.99 1745.43,1207.16 1746.02,1207.19 1746.6,1205.83 1747.19,1206.7 1747.78,1205.65 1748.36,1205.53 1748.95,1204.26 1749.53,1204.46 1750.12,1205.64 1750.71,1204.3 1751.29,1204.48 1751.88,1207.95 1752.47,1205.3 1753.05,1205.12 1753.64,1201.25 1754.23,1201.35 1754.81,1201.89 1755.4,1202 1755.99,1202.07 1756.57,1201.82 1757.16,1200.48 1757.74,1200.4 1758.33,1204.5 1758.92,1203.36 1759.5,1203.38 1760.09,1204.78 1760.68,1204.74 1761.26,1203.5 1761.85,1206.06 1762.44,1206.1 1763.02,1203.51 1763.61,1205.09 1764.19,1204.04 1764.78,1204.29 1765.37,1204.38 1765.95,1204.38 1766.54,1205.54 1767.13,1207.92 1767.71,1206.36 1768.3,1212.55 1768.89,1211 1769.47,1210.49 1770.06,1210.12 1770.65,1206.96 1771.23,1206.56 1771.82,1208.96 1772.4,1204.79 1772.99,1203.7 1773.58,1202.38 1774.16,1203.51 1774.75,1203.76 1775.34,1202.53 1775.92,1202.59 1776.51,1199.01 1777.1,1200.53 1777.68,1196.96 1778.27,1197.36 1778.86,1197.78 1779.44,1195.89 1780.03,1195.13 1780.61,1197.97 1781.2,1197 1781.79,1198.62 1782.37,1196.54 1782.96,1195.63 1783.55,1196.08 1784.13,1195.29 1784.72,1198.27 1785.31,1200.97 1785.89,1201.23 1786.48,1202.67 1787.06,1204.1 1787.65,1203.17 1788.24,1204.72 1788.82,1203.24 1789.41,1205.46 1790,1205.7 1790.58,1205.65 1791.17,1207.95 1791.76,1210.23 1792.34,1208.49 1792.93,1205.9 1793.52,1203.49 1794.1,1199.84 1794.69,1197.68 1795.27,1199.27 1795.86,1199.67 1796.45,1196.47 1797.03,1200.36 1797.62,1204.06 1798.21,1205.42 1798.79,1206.62 1799.38,1205.59 1799.97,1204.38 1800.55,1203.04 1801.14,1201.75 1801.73,1203.42 1802.31,1207.09 1802.9,1208.22 1803.48,1208.07 1804.07,1206.57 1804.66,1206.5 1805.24,1205.09 1805.83,1207.6 1806.42,1205.06 1807,1203.61 1807.59,1204.84 1808.18,1203.31 1808.76,1203.18 1809.35,1203.22 1809.94,1206.94 1810.52,1204.54 1811.11,1205.75 1811.69,1204.85 1812.28,1203.57 1812.87,1203.55 1813.45,1203.95 1814.04,1207.77 1814.63,1206.49 1815.21,1205.29 1815.8,1203.97 1816.39,1202.87 1816.97,1200.65 1817.56,1200.74 1818.14,1202.5 1818.73,1202.43 1819.32,1205.1 1819.9,1204.88 1820.49,1204.86 1821.08,1203.46 1821.66,1204.71 1822.25,1203.5 1822.84,1204.69 1823.42,1205.47 1824.01,1206.5 1824.6,1202.69 1825.18,1203.12 1825.77,1204.23 1826.35,1204.55 1826.94,1205.93 1827.53,1205.83 1828.11,1205.91 1828.7,1207.16 1829.29,1208.14 1829.87,1206.35 1830.46,1207.61 1831.05,1206.21 1831.63,1207.42 1832.22,1207.05 1832.81,1205.79 1833.39,1204.68 1833.98,1203.65 1834.56,1202.53 1835.15,1203.86 1835.74,1202.98 1836.32,1204.4 1836.91,1206.87 1837.5,1206.71 1838.08,1204.37 1838.67,1204.39 1839.26,1208.05 1839.84,1208.05 1840.43,1208.95 1841.01,1206.29 1841.6,1205.97 1842.19,1207.34 1842.77,1208.59 1843.36,1208.15 1843.95,1207.81 1844.53,1208.83 1845.12,1208.53 1845.71,1207.34 1846.29,1207.09 1846.88,1207.87 1847.47,1207.67 1848.05,1208.58 1848.64,1209.36 1849.22,1209.25 1849.81,1209.07 1850.4,1208.79 1850.98,1207.33 1851.57,1209.65 1852.16,1208.19 1852.74,1211.56 1853.33,1212.45 1853.92,1210.8 1854.5,1211.66 1855.09,1211.58 1855.68,1214.92 1856.26,1215.34 1856.85,1214.72 1857.43,1215.1 1858.02,1214.57 1858.61,1211.49 1859.19,1211.02 1859.78,1210.74 1860.37,1205.8 1860.95,1207.27 1861.54,1211.01 1862.13,1209.3 1862.71,1206.52 1863.3,1206.29 1863.88,1206.22 1864.47,1206.21 1865.06,1203.55 1865.64,1205.7 1866.23,1205.52 1866.82,1205.56 1867.4,1205.41 1867.99,1202.85 1868.58,1202.23 1869.16,1203.59 1869.75,1204.73 1870.34,1204.53 1870.92,1200.77 1871.51,1199.5 1872.09,1203.51 1872.68,1204.81 1873.27,1204.85 1873.85,1202.4 1874.44,1202.32 1875.03,1202.27 1875.61,1203.53 1876.2,1202.23 1876.79,1203.49 1877.37,1202.41 1877.96,1205.03 1878.55,1206.55 1879.13,1205.21 1879.72,1200.26 1880.3,1200.4 1880.89,1200.61 1881.48,1200.9 1882.06,1202.35 1882.65,1203.78 1883.24,1202.75 1883.82,1203 1884.41,1202.05 1885,1201.14 1885.58,1202.67 1886.17,1203.89 1886.76,1204.01 1887.34,1202.54 1887.93,1205.14 1888.51,1202.84 1889.1,1202.93 1889.69,1203.05 1890.27,1200.84 1890.86,1202.47 1891.45,1201.15 1892.03,1203.72 1892.62,1208.79 1893.21,1207.27 1893.79,1205.69 1894.38,1207 1894.96,1203.12 1895.55,1204.62 1896.14,1204.81 1896.72,1202.4 1897.31,1201.21 1897.9,1201.46 1898.48,1199.32 1899.07,1200.8 1899.66,1202.18 1900.24,1202.44 1900.83,1205.05 1901.42,1205.11 1902,1206.5 1902.59,1207.61 1903.17,1207.08 1903.76,1206.98 1904.35,1210.48 1904.93,1209.01 1905.52,1210.01 1906.11,1211.09 1906.69,1211.99 1907.28,1212.92 1907.87,1212.44 1908.45,1211.97 1909.04,1210.39 1909.63,1210.18 1910.21,1210.95 1910.8,1206.85 1911.38,1208.16 1911.97,1206.88 1912.56,1201.9 1913.14,1202.02 1913.73,1203.23 1914.32,1199.49 1914.9,1200.92 1915.49,1200.01 1916.08,1200.23 1916.66,1198.01 1917.25,1199.47 1917.83,1200.97 1918.42,1202.28 1919.01,1201.2 1919.59,1201.43 1920.18,1202.6 1920.77,1206.35 1921.35,1208.43 1921.94,1208.32 1922.53,1209.54 1923.11,1210.69 1923.7,1212.91 1924.29,1211.16 1924.87,1210.89 1925.46,1210.54 1926.04,1212.6 1926.63,1213.5 1927.22,1211.79 1927.8,1212.49 1928.39,1212.03 1928.98,1212.99 1929.56,1212.4 1930.15,1211.72 1930.74,1210.15 1931.32,1212.54 1931.91,1212.04 1932.5,1211.63 1933.08,1211.16 1933.67,1209.53 1934.25,1209.15 1934.84,1208.77 1935.43,1209.91 1936.01,1208.59 1936.6,1210.95 1937.19,1208.11 1937.77,1211.6 1938.36,1208.73 1938.95,1209.71 1939.53,1207.06 1940.12,1207.07 1940.71,1207.92 1941.29,1204.22 1941.88,1206.94 1942.46,1204.25 1943.05,1204.28 1943.64,1208.08 1944.22,1206.76 1944.81,1206.54 1945.4,1207.6 1945.98,1201.45 1946.57,1201.66 1947.16,1204.4 1947.74,1203.04 1948.33,1204.25 1948.91,1204.08 1949.5,1205.32 1950.09,1202.79 1950.67,1205.22 1951.26,1203.94 1951.85,1205.17 1952.43,1207.61 1953.02,1208.91 1953.61,1210.22 1954.19,1210.95 1954.78,1208.33 1955.37,1205.55 1955.95,1204.3 1956.54,1201.84 1957.12,1203.26 1957.71,1199.77 1958.3,1199.8 1958.88,1202.47 1959.47,1200.29 1960.06,1201.85 1960.64,1197.91 1961.23,1199.76 1961.82,1199.05 1962.4,1200.6 1962.99,1198.3 1963.58,1197.42 1964.16,1196.76 1964.75,1195.81 1965.33,1197.28 1965.92,1196.2 1966.51,1197.84 1967.09,1197.15 1967.68,1194.97 1968.27,1196.54 1968.85,1196.86 1969.44,1196.06 1970.03,1197.56 1970.61,1195.49 1971.2,1194.47 1971.78,1193.77 1972.37,1195.72 1972.96,1196.14 1973.54,1196.67 1974.13,1196.73 1974.72,1195.84 1975.3,1198.69 1975.89,1197.87 1976.48,1198.34 1977.06,1201.46 1977.65,1201.63 1978.24,1203.13 1978.82,1204.45 1979.41,1201.96 1979.99,1201.89 1980.58,1200.62 1981.17,1204.72 1981.75,1204.74 1982.34,1209.75 1982.93,1209.66 1983.51,1211.9 1984.1,1215.35 1984.69,1216.14 1985.27,1212.99 1985.86,1208.82 1986.45,1211.16 1987.03,1208.47 1987.62,1208.24 1988.2,1208.91 1988.79,1208.72 1989.38,1206.05 1989.96,1205.51 1990.55,1204.08 1991.14,1203.01 1991.72,1200.33 1992.31,1198.21 1992.9,1200.97 1993.48,1203.59 1994.07,1205.09 1994.65,1204.89 1995.24,1203.58 1995.83,1204.84 1996.41,1203.46 1997,1203.64 1997.59,1201.26 1998.17,1201.11 1998.76,1200.27 1999.35,1200.19 1999.93,1200.32 2000.52,1200.64 2001.11,1199.71 2001.69,1197.6 2002.28,1199.25 2002.86,1199.45 2003.45,1202.16 2004.04,1201.11 2004.62,1198.5 2005.21,1198.93 2005.8,1197.98 2006.38,1198.03 2006.97,1201.01 2007.56,1205.18 2008.14,1206.65 2008.73,1208.07 2009.32,1207.83 2009.9,1207.41 2010.49,1208.57 2011.07,1208.41 2011.66,1208.33 2012.25,1207.16 2012.83,1207.07 2013.42,1207.19 2014.01,1206.15 2014.59,1207.28 2015.18,1206.26 2015.77,1206.12 2016.35,1207.52 2016.94,1204.75 2017.53,1205.85 2018.11,1210.74 2018.7,1209.35 2019.28,1205.29 2019.87,1206.59 2020.46,1208.84 2021.04,1210.07 2021.63,1207.21 2022.22,1205.68 2022.8,1205.26 2023.39,1206.44 2023.98,1206.49 2024.56,1206.51 2025.15,1206.6 2025.73,1205.1 2026.32,1203.91 2026.91,1203.81 2027.49,1202.73 2028.08,1202.84 2028.67,1201.77 2029.25,1200.7 2029.84,1202.32 2030.43,1200.09 2031.01,1200.48 2031.6,1198.2 2032.19,1197.51 2032.77,1199.07 2033.36,1196.57 2033.94,1197.34 2034.53,1195.14 2035.12,1194.42 2035.7,1192.31 2036.29,1192.96 2036.88,1196.25 2037.46,1199.24 2038.05,1200.72 2038.64,1201.08 2039.22,1199.84 2039.81,1201.11 2040.4,1201.63 2040.98,1201.72 2041.57,1200.41 2042.15,1202.02 2042.74,1200.73 2043.33,1199.89 2043.91,1200.46 2044.5,1200.47 2045.09,1200.81 2045.67,1201.17 2046.26,1200.45 2046.85,1200.88 2047.43,1202.4 2048.02,1202.52 2048.6,1202.67 2049.19,1202.65 2049.78,1202.97 2050.36,1206.67 2050.95,1204.25 2051.54,1206.67 2052.12,1206.82 2052.71,1205.67 2053.3,1204.29 2053.88,1205.51 2054.47,1202.73 2055.06,1201.69 2055.64,1200.77 2056.23,1200.98 2056.81,1202.5 2057.4,1202.91 2057.99,1201.69 2058.57,1200.35 2059.16,1200.26 2059.75,1203.18 2060.33,1202.08 2060.92,1202.34 2061.51,1203.57 2062.09,1205.15 2062.68,1203.75 2063.27,1205.06 2063.85,1206.18 2064.44,1206.98 2065.02,1205.88 2065.61,1205.9 2066.2,1203.24 2066.78,1202.14 2067.37,1204.87 2067.96,1206.13 2068.54,1206.05 2069.13,1203.43 2069.72,1206.27 2070.3,1206.01 2070.89,1202.28 2071.48,1203.59 2072.06,1207.16 2072.65,1206.72 2073.23,1207.65 2073.82,1206.18 2074.41,1206.99 2074.99,1203.24 2075.58,1202.25 2076.17,1203.53 2076.75,1202.14 2077.34,1202.35 2077.93,1202.4 2078.51,1203.71 2079.1,1205.2 2079.68,1206.37 2080.27,1206.21 2080.86,1206.08 2081.44,1206.1 2082.03,1205.92 2082.62,1205.83 2083.2,1208.23 2083.79,1208.18 2084.38,1206.72 2084.96,1206.37 2085.55,1206.61 2086.14,1208.06 2086.72,1210.43 2087.31,1209.96 2087.89,1213.66 2088.48,1213.33 2089.07,1211.65 2089.65,1212.64 2090.24,1210.97 2090.83,1210.63 2091.41,1211.45 2092,1211.17 2092.59,1209.71 2093.17,1209.53 2093.76,1209.39 2094.35,1206.75 2094.93,1207.96 2095.52,1205.34 2096.1,1205.27 2096.69,1205.09 2097.28,1206.28 2097.86,1205.08 2098.45,1202.62 2099.04,1202.68 2099.62,1201.66 2100.21,1202.11 2100.8,1202.08 2101.38,1202.28 2101.97,1203.63 2102.55,1203.67 2103.14,1207.44 2103.73,1205.92 2104.31,1203.33 2104.9,1202.1 2105.49,1204.39 2106.07,1204.34 2106.66,1205.38 2107.25,1205.47 2107.83,1207.83 2108.42,1207.77 2109.01,1208.98 2109.59,1208.91 2110.18,1211.38 2110.76,1208.75 2111.35,1207.48 2111.94,1207.31 2112.52,1202.06 2113.11,1202.05 2113.7,1202.26 2114.28,1203.86 2114.87,1205.08 2115.46,1204.93 2116.04,1202.37 2116.63,1201.28 2117.22,1203.03 2117.8,1201.79 2118.39,1200.57 2118.97,1201.25 2119.56,1200.44 2120.15,1200.33 2120.73,1199.1 2121.32,1202.91 2121.91,1203.16 2122.49,1203.12 2123.08,1203.18 2123.67,1203.17 2124.25,1201.93 2124.84,1199.58 2125.42,1197.15 2126.01,1198.75 2126.6,1199.23 2127.18,1197.16 2127.77,1194.86 2128.36,1195.74 2128.94,1196.33 2129.53,1195.34 2130.12,1193.2 2130.7,1193.77 2131.29,1196.52 2131.88,1198.2 2132.46,1197.27 2133.05,1200.15 2133.63,1201.62 2134.22,1200.43 2134.81,1200.93 2135.39,1202.21 2135.98,1203.89 2136.57,1205.32 2137.15,1204.28 2137.74,1205.47 2138.33,1205.36 2138.91,1206.29 2139.5,1204.99 2140.09,1203.81 2140.67,1203.74 2141.26,1204.04 2141.84,1204.2 2142.43,1205.57 2143.02,1206.94 2143.6,1208.21 2144.19,1210.33 2144.78,1211.51 2145.36,1213.72 2145.95,1212.07 2146.54,1211.76 2147.12,1210.36 2147.71,1212.6 2148.3,1216.03 2148.88,1216.7 2149.47,1213.53 2150.05,1211.68 2150.64,1211.32 2151.23,1209.71 2151.81,1211.84 2152.4,1212.78 2152.99,1213.57 2153.57,1213.33 2154.16,1212.89 2154.75,1212.73 2155.33,1213.76 2155.92,1212.2 2156.5,1214.45 2157.09,1211.72 2157.68,1212.78 2158.26,1212.36 \"/>\n<path clip-path=\"url(#clip472)\" d=\"M986.025 1205.16 L986.612 1205.16 L987.198 1205.16 L987.785 1205.16 L988.371 1205.16 L988.957 1205.16 L989.544 1205.16 L990.13 1205.16 L990.717 1205.16 L991.303 1205.16 L991.889 1205.16 L992.476 1205.16 L993.062 1205.16 L993.649 1205.16 L994.235 1205.16 L994.822 1205.16 L995.408 1205.16 L995.994 1205.16 L996.581 1205.16 L997.167 1205.16 L997.754 1205.16 L998.34 1205.16 L998.926 1205.16 L999.513 1205.16 L1000.1 1205.16 L1000.69 1205.16 L1001.27 1205.16 L1001.86 1205.16 L1002.44 1205.16 L1003.03 1205.16 L1003.62 1205.16 L1004.2 1205.16 L1004.79 1205.16 L1005.38 1205.16 L1005.96 1205.16 L1006.55 1205.16 L1007.14 1205.16 L1007.72 1205.16 L1008.31 1205.16 L1008.9 1205.16 L1009.48 1205.16 L1010.07 1205.16 L1010.65 1205.16 L1011.24 1205.16 L1011.83 1205.16 L1012.41 1205.16 L1013 1205.16 L1013.59 1205.16 L1014.17 1205.16 L1014.76 1205.16 L1015.35 1205.16 L1015.93 1205.16 L1016.52 1205.16 L1017.11 1205.16 L1017.69 1205.16 L1018.28 1205.16 L1018.86 1205.16 L1019.45 1205.16 L1020.04 1205.16 L1020.62 1205.16 L1021.21 1205.16 L1021.8 1205.16 L1022.38 1205.16 L1022.97 1205.16 L1023.56 1205.16 L1024.14 1205.16 L1024.73 1205.16 L1025.32 1205.16 L1025.9 1205.16 L1026.49 1205.16 L1027.07 1205.16 L1027.66 1205.16 L1028.25 1205.16 L1028.83 1205.16 L1029.42 1205.16 L1030.01 1205.16 L1030.59 1205.16 L1031.18 1205.16 L1031.77 1205.16 L1032.35 1205.16 L1032.94 1205.16 L1033.52 1205.16 L1034.11 1205.16 L1034.7 1205.16 L1035.28 1205.16 L1035.87 1205.16 L1036.46 1205.16 L1037.04 1205.16 L1037.63 1205.16 L1038.22 1205.16 L1038.8 1205.16 L1039.39 1205.16 L1039.98 1205.16 L1040.56 1205.16 L1041.15 1205.16 L1041.73 1205.16 L1042.32 1205.16 L1042.91 1205.16 L1043.49 1205.16 L1044.08 1205.16 L1044.67 1205.16 L1045.25 1205.16 L1045.84 1205.16 L1046.43 1205.16 L1047.01 1205.16 L1047.6 1205.16 L1048.19 1205.16 L1048.77 1205.16 L1049.36 1205.16 L1049.94 1205.16 L1050.53 1205.16 L1051.12 1205.16 L1051.7 1205.16 L1052.29 1205.16 L1052.88 1205.16 L1053.46 1205.16 L1054.05 1205.16 L1054.64 1205.16 L1055.22 1205.16 L1055.81 1205.16 L1056.39 1205.16 L1056.98 1205.16 L1057.57 1205.16 L1058.15 1205.16 L1058.74 1205.16 L1059.33 1205.16 L1059.91 1205.16 L1060.5 1205.16 L1061.09 1205.16 L1061.67 1205.16 L1062.26 1205.16 L1062.85 1205.16 L1063.43 1205.16 L1064.02 1205.16 L1064.6 1205.16 L1065.19 1205.16 L1065.78 1205.16 L1066.36 1205.16 L1066.95 1205.16 L1067.54 1205.16 L1068.12 1205.16 L1068.71 1205.16 L1069.3 1205.16 L1069.88 1205.16 L1070.47 1205.16 L1071.06 1205.16 L1071.64 1205.16 L1072.23 1205.16 L1072.81 1205.16 L1073.4 1205.16 L1073.99 1205.16 L1074.57 1205.16 L1075.16 1205.16 L1075.75 1205.16 L1076.33 1205.16 L1076.92 1205.16 L1077.51 1205.16 L1078.09 1205.16 L1078.68 1205.16 L1079.26 1205.16 L1079.85 1205.16 L1080.44 1205.16 L1081.02 1205.16 L1081.61 1205.16 L1082.2 1205.16 L1082.78 1205.16 L1083.37 1205.16 L1083.96 1205.16 L1084.54 1205.16 L1085.13 1205.16 L1085.72 1205.16 L1086.3 1205.16 L1086.89 1205.16 L1087.47 1205.16 L1088.06 1205.16 L1088.65 1205.16 L1089.23 1205.16 L1089.82 1205.16 L1090.41 1205.16 L1090.99 1205.16 L1091.58 1205.16 L1092.17 1205.16 L1092.75 1205.16 L1093.34 1205.16 L1093.93 1205.16 L1094.51 1205.16 L1095.1 1205.16 L1095.68 1205.16 L1096.27 1205.16 L1096.86 1205.16 L1097.44 1205.16 L1098.03 1205.16 L1098.62 1205.16 L1099.2 1205.16 L1099.79 1205.16 L1100.38 1205.16 L1100.96 1205.16 L1101.55 1205.16 L1102.14 1205.16 L1102.72 1205.16 L1103.31 1205.16 L1103.89 1205.16 L1104.48 1205.16 L1105.07 1205.16 L1105.65 1205.16 L1106.24 1205.16 L1106.83 1205.16 L1107.41 1205.16 L1108 1205.16 L1108.59 1205.16 L1109.17 1205.16 L1109.76 1205.16 L1110.34 1205.16 L1110.93 1205.16 L1111.52 1205.16 L1112.1 1205.16 L1112.69 1205.16 L1113.28 1205.16 L1113.86 1205.16 L1114.45 1205.16 L1115.04 1205.16 L1115.62 1205.16 L1116.21 1205.16 L1116.8 1205.16 L1117.38 1205.16 L1117.97 1205.16 L1118.55 1205.16 L1119.14 1205.16 L1119.73 1205.16 L1120.31 1205.16 L1120.9 1205.16 L1121.49 1205.16 L1122.07 1205.16 L1122.66 1205.16 L1123.25 1205.16 L1123.83 1205.16 L1124.42 1205.16 L1125.01 1205.16 L1125.59 1205.16 L1126.18 1205.16 L1126.76 1205.16 L1127.35 1205.16 L1127.94 1205.16 L1128.52 1205.16 L1129.11 1205.16 L1129.7 1205.16 L1130.28 1205.16 L1130.87 1205.16 L1131.46 1205.16 L1132.04 1205.16 L1132.63 1205.16 L1133.21 1205.16 L1133.8 1205.16 L1134.39 1205.16 L1134.97 1205.16 L1135.56 1205.16 L1136.15 1205.16 L1136.73 1205.16 L1137.32 1205.16 L1137.91 1205.16 L1138.49 1205.16 L1139.08 1205.16 L1139.67 1205.16 L1140.25 1205.16 L1140.84 1205.16 L1141.42 1205.16 L1142.01 1205.16 L1142.6 1205.16 L1143.18 1205.16 L1143.77 1205.16 L1144.36 1205.16 L1144.94 1205.16 L1145.53 1205.16 L1146.12 1205.16 L1146.7 1205.16 L1147.29 1205.16 L1147.88 1205.16 L1148.46 1205.16 L1149.05 1205.16 L1149.63 1205.16 L1150.22 1205.16 L1150.81 1205.16 L1151.39 1205.16 L1151.98 1205.16 L1152.57 1205.16 L1153.15 1205.16 L1153.74 1205.16 L1154.33 1205.16 L1154.91 1205.16 L1155.5 1205.16 L1156.09 1205.16 L1156.67 1205.16 L1157.26 1205.16 L1157.84 1205.16 L1158.43 1205.16 L1159.02 1205.16 L1159.6 1205.16 L1160.19 1205.16 L1160.78 1205.16 L1161.36 1205.16 L1161.95 1205.16 L1162.54 1205.16 L1163.12 1205.16 L1163.71 1205.16 L1164.29 1205.16 L1164.88 1205.16 L1165.47 1205.16 L1166.05 1205.16 L1166.64 1205.16 L1167.23 1205.16 L1167.81 1205.16 L1168.4 1205.16 L1168.99 1205.16 L1169.57 1205.16 L1170.16 1205.16 L1170.75 1205.16 L1171.33 1205.16 L1171.92 1205.16 L1172.5 1205.16 L1173.09 1205.16 L1173.68 1205.16 L1174.26 1205.16 L1174.85 1205.16 L1175.44 1205.16 L1176.02 1205.16 L1176.61 1205.16 L1177.2 1205.16 L1177.78 1205.16 L1178.37 1205.16 L1178.96 1205.16 L1179.54 1205.16 L1180.13 1205.16 L1180.71 1205.16 L1181.3 1205.16 L1181.89 1205.16 L1182.47 1205.16 L1183.06 1205.16 L1183.65 1205.16 L1184.23 1205.16 L1184.82 1205.16 L1185.41 1205.16 L1185.99 1205.16 L1186.58 1205.16 L1187.16 1205.16 L1187.75 1205.16 L1188.34 1205.16 L1188.92 1205.16 L1189.51 1205.16 L1190.1 1205.16 L1190.68 1205.16 L1191.27 1205.16 L1191.86 1205.16 L1192.44 1205.16 L1193.03 1205.16 L1193.62 1205.16 L1194.2 1205.16 L1194.79 1205.16 L1195.37 1205.16 L1195.96 1205.16 L1196.55 1205.16 L1197.13 1205.16 L1197.72 1205.16 L1198.31 1205.16 L1198.89 1205.16 L1199.48 1205.16 L1200.07 1205.16 L1200.65 1205.16 L1201.24 1205.16 L1201.83 1205.16 L1202.41 1205.16 L1203 1205.16 L1203.58 1205.16 L1204.17 1205.16 L1204.76 1205.16 L1205.34 1205.16 L1205.93 1205.16 L1206.52 1205.16 L1207.1 1205.16 L1207.69 1205.16 L1208.28 1205.16 L1208.86 1205.16 L1209.45 1205.16 L1210.03 1205.16 L1210.62 1205.16 L1211.21 1205.16 L1211.79 1205.16 L1212.38 1205.16 L1212.97 1205.16 L1213.55 1205.16 L1214.14 1205.16 L1214.73 1205.16 L1215.31 1205.16 L1215.9 1205.16 L1216.49 1205.16 L1217.07 1205.16 L1217.66 1205.16 L1218.24 1205.16 L1218.83 1205.16 L1219.42 1205.16 L1220 1205.16 L1220.59 1205.16 L1221.18 1205.16 L1221.76 1205.16 L1222.35 1205.16 L1222.94 1205.16 L1223.52 1205.16 L1224.11 1205.16 L1224.7 1205.16 L1225.28 1205.16 L1225.87 1205.16 L1226.45 1205.16 L1227.04 1205.16 L1227.63 1205.16 L1228.21 1205.16 L1228.8 1205.16 L1229.39 1205.16 L1229.97 1205.16 L1230.56 1205.16 L1231.15 1205.16 L1231.73 1205.16 L1232.32 1205.16 L1232.91 1205.16 L1233.49 1205.16 L1234.08 1205.16 L1234.66 1205.16 L1235.25 1205.16 L1235.84 1205.16 L1236.42 1205.16 L1237.01 1205.16 L1237.6 1205.16 L1238.18 1205.16 L1238.77 1205.16 L1239.36 1205.16 L1239.94 1205.16 L1240.53 1205.16 L1241.11 1205.16 L1241.7 1205.16 L1242.29 1205.16 L1242.87 1205.16 L1243.46 1205.16 L1244.05 1205.16 L1244.63 1205.16 L1245.22 1205.16 L1245.81 1205.16 L1246.39 1205.16 L1246.98 1205.16 L1247.57 1205.16 L1248.15 1205.16 L1248.74 1205.16 L1249.32 1205.16 L1249.91 1205.16 L1250.5 1205.16 L1251.08 1205.16 L1251.67 1205.16 L1252.26 1205.16 L1252.84 1205.16 L1253.43 1205.16 L1254.02 1205.16 L1254.6 1205.16 L1255.19 1205.16 L1255.78 1205.16 L1256.36 1205.16 L1256.95 1205.16 L1257.53 1205.16 L1258.12 1205.16 L1258.71 1205.16 L1259.29 1205.16 L1259.88 1205.16 L1260.47 1205.16 L1261.05 1205.16 L1261.64 1205.16 L1262.23 1205.16 L1262.81 1205.16 L1263.4 1205.16 L1263.98 1205.16 L1264.57 1205.16 L1265.16 1205.16 L1265.74 1205.16 L1266.33 1205.16 L1266.92 1205.16 L1267.5 1205.16 L1268.09 1205.16 L1268.68 1205.16 L1269.26 1205.16 L1269.85 1205.16 L1270.44 1205.16 L1271.02 1205.16 L1271.61 1205.16 L1272.19 1205.16 L1272.78 1205.16 L1273.37 1205.16 L1273.95 1205.16 L1274.54 1205.16 L1275.13 1205.16 L1275.71 1205.16 L1276.3 1205.16 L1276.89 1205.16 L1277.47 1205.16 L1278.06 1205.16 L1278.65 1205.16 L1279.23 1205.16 L1279.82 1205.16 L1280.4 1205.16 L1280.99 1205.16 L1281.58 1205.16 L1282.16 1205.16 L1282.75 1205.16 L1283.34 1205.16 L1283.92 1205.16 L1284.51 1205.16 L1285.1 1205.16 L1285.68 1205.16 L1286.27 1205.16 L1286.86 1205.16 L1287.44 1205.16 L1288.03 1205.16 L1288.61 1205.16 L1289.2 1205.16 L1289.79 1205.16 L1290.37 1205.16 L1290.96 1205.16 L1291.55 1205.16 L1292.13 1205.16 L1292.72 1205.16 L1293.31 1205.16 L1293.89 1205.16 L1294.48 1205.16 L1295.06 1205.16 L1295.65 1205.16 L1296.24 1205.16 L1296.82 1205.16 L1297.41 1205.16 L1298 1205.16 L1298.58 1205.16 L1299.17 1205.16 L1299.76 1205.16 L1300.34 1205.16 L1300.93 1205.16 L1301.52 1205.16 L1302.1 1205.16 L1302.69 1205.16 L1303.27 1205.16 L1303.86 1205.16 L1304.45 1205.16 L1305.03 1205.16 L1305.62 1205.16 L1306.21 1205.16 L1306.79 1205.16 L1307.38 1205.16 L1307.97 1205.16 L1308.55 1205.16 L1309.14 1205.16 L1309.73 1205.16 L1310.31 1205.16 L1310.9 1205.16 L1311.48 1205.16 L1312.07 1205.16 L1312.66 1205.16 L1313.24 1205.16 L1313.83 1205.16 L1314.42 1205.16 L1315 1205.16 L1315.59 1205.16 L1316.18 1205.16 L1316.76 1205.16 L1317.35 1205.16 L1317.93 1205.16 L1318.52 1205.16 L1319.11 1205.16 L1319.69 1205.16 L1320.28 1205.16 L1320.87 1205.16 L1321.45 1205.16 L1322.04 1205.16 L1322.63 1205.16 L1323.21 1205.16 L1323.8 1205.16 L1324.39 1205.16 L1324.97 1205.16 L1325.56 1205.16 L1326.14 1205.16 L1326.73 1205.16 L1327.32 1205.16 L1327.9 1205.16 L1328.49 1205.16 L1329.08 1205.16 L1329.66 1205.16 L1330.25 1205.16 L1330.84 1205.16 L1331.42 1205.16 L1332.01 1205.16 L1332.6 1205.16 L1333.18 1205.16 L1333.77 1205.16 L1334.35 1205.16 L1334.94 1205.16 L1335.53 1205.16 L1336.11 1205.16 L1336.7 1205.16 L1337.29 1205.16 L1337.87 1205.16 L1338.46 1205.16 L1339.05 1205.16 L1339.63 1205.16 L1340.22 1205.16 L1340.8 1205.16 L1341.39 1205.16 L1341.98 1205.16 L1342.56 1205.16 L1343.15 1205.16 L1343.74 1205.16 L1344.32 1205.16 L1344.91 1205.16 L1345.5 1205.16 L1346.08 1205.16 L1346.67 1205.16 L1347.26 1205.16 L1347.84 1205.16 L1348.43 1205.16 L1349.01 1205.16 L1349.6 1205.16 L1350.19 1205.16 L1350.77 1205.16 L1351.36 1205.16 L1351.95 1205.16 L1352.53 1205.16 L1353.12 1205.16 L1353.71 1205.16 L1354.29 1205.16 L1354.88 1205.16 L1355.47 1205.16 L1356.05 1205.16 L1356.64 1205.16 L1357.22 1205.16 L1357.81 1205.16 L1358.4 1205.16 L1358.98 1205.16 L1359.57 1205.16 L1360.16 1205.16 L1360.74 1205.16 L1361.33 1205.16 L1361.92 1205.16 L1362.5 1205.16 L1363.09 1205.16 L1363.68 1205.16 L1364.26 1205.16 L1364.85 1205.16 L1365.43 1205.16 L1366.02 1205.16 L1366.61 1205.16 L1367.19 1205.16 L1367.78 1205.16 L1368.37 1205.16 L1368.95 1205.16 L1369.54 1205.16 L1370.13 1205.16 L1370.71 1205.16 L1371.3 1205.16 L1371.88 1205.16 L1372.47 1205.16 L1373.06 1205.16 L1373.64 1205.16 L1374.23 1205.16 L1374.82 1205.16 L1375.4 1205.16 L1375.99 1205.16 L1376.58 1205.16 L1377.16 1205.16 L1377.75 1205.16 L1378.34 1205.16 L1378.92 1205.16 L1379.51 1205.16 L1380.09 1205.16 L1380.68 1205.16 L1381.27 1205.16 L1381.85 1205.16 L1382.44 1205.16 L1383.03 1205.16 L1383.61 1205.16 L1384.2 1205.16 L1384.79 1205.16 L1385.37 1205.16 L1385.96 1205.16 L1386.55 1205.16 L1387.13 1205.16 L1387.72 1205.16 L1388.3 1205.16 L1388.89 1205.16 L1389.48 1205.16 L1390.06 1205.16 L1390.65 1205.16 L1391.24 1205.16 L1391.82 1205.16 L1392.41 1205.16 L1393 1205.16 L1393.58 1205.16 L1394.17 1205.16 L1394.75 1205.16 L1395.34 1205.16 L1395.93 1205.16 L1396.51 1205.16 L1397.1 1205.16 L1397.69 1205.16 L1398.27 1205.16 L1398.86 1205.16 L1399.45 1205.16 L1400.03 1205.16 L1400.62 1205.16 L1401.21 1205.16 L1401.79 1205.16 L1402.38 1205.16 L1402.96 1205.16 L1403.55 1205.16 L1404.14 1205.16 L1404.72 1205.16 L1405.31 1205.16 L1405.9 1205.16 L1406.48 1205.16 L1407.07 1205.16 L1407.66 1205.16 L1408.24 1205.16 L1408.83 1205.16 L1409.42 1205.16 L1410 1205.16 L1410.59 1205.16 L1411.17 1205.16 L1411.76 1205.16 L1412.35 1205.16 L1412.93 1205.16 L1413.52 1205.16 L1414.11 1205.16 L1414.69 1205.16 L1415.28 1205.16 L1415.87 1205.16 L1416.45 1205.16 L1417.04 1205.16 L1417.63 1205.16 L1418.21 1205.16 L1418.8 1205.16 L1419.38 1205.16 L1419.97 1205.16 L1420.56 1205.16 L1421.14 1205.16 L1421.73 1205.16 L1422.32 1205.16 L1422.9 1205.16 L1423.49 1205.16 L1424.08 1205.16 L1424.66 1205.16 L1425.25 1205.16 L1425.83 1205.16 L1426.42 1205.16 L1427.01 1205.16 L1427.59 1205.16 L1428.18 1205.16 L1428.77 1205.16 L1429.35 1205.16 L1429.94 1205.16 L1430.53 1205.16 L1431.11 1205.16 L1431.7 1205.16 L1432.29 1205.16 L1432.87 1205.16 L1433.46 1205.16 L1434.04 1205.16 L1434.63 1205.16 L1435.22 1205.16 L1435.8 1205.16 L1436.39 1205.16 L1436.98 1205.16 L1437.56 1205.16 L1438.15 1205.16 L1438.74 1205.16 L1439.32 1205.16 L1439.91 1205.16 L1440.5 1205.16 L1441.08 1205.16 L1441.67 1205.16 L1442.25 1205.16 L1442.84 1205.16 L1443.43 1205.16 L1444.01 1205.16 L1444.6 1205.16 L1445.19 1205.16 L1445.77 1205.16 L1446.36 1205.16 L1446.95 1205.16 L1447.53 1205.16 L1448.12 1205.16 L1448.7 1205.16 L1449.29 1205.16 L1449.88 1205.16 L1450.46 1205.16 L1451.05 1205.16 L1451.64 1205.16 L1452.22 1205.16 L1452.81 1205.16 L1453.4 1205.16 L1453.98 1205.16 L1454.57 1205.16 L1455.16 1205.16 L1455.74 1205.16 L1456.33 1205.16 L1456.91 1205.16 L1457.5 1205.16 L1458.09 1205.16 L1458.67 1205.16 L1459.26 1205.16 L1459.85 1205.16 L1460.43 1205.16 L1461.02 1205.16 L1461.61 1205.16 L1462.19 1205.16 L1462.78 1205.16 L1463.37 1205.16 L1463.95 1205.16 L1464.54 1205.16 L1465.12 1205.16 L1465.71 1205.16 L1466.3 1205.16 L1466.88 1205.16 L1467.47 1205.16 L1468.06 1205.16 L1468.64 1205.16 L1469.23 1205.16 L1469.82 1205.16 L1470.4 1205.16 L1470.99 1205.16 L1471.57 1205.16 L1472.16 1205.16 L1472.75 1205.16 L1473.33 1205.16 L1473.92 1205.16 L1474.51 1205.16 L1475.09 1205.16 L1475.68 1205.16 L1476.27 1205.16 L1476.85 1205.16 L1477.44 1205.16 L1478.03 1205.16 L1478.61 1205.16 L1479.2 1205.16 L1479.78 1205.16 L1480.37 1205.16 L1480.96 1205.16 L1481.54 1205.16 L1482.13 1205.16 L1482.72 1205.16 L1483.3 1205.16 L1483.89 1205.16 L1484.48 1205.16 L1485.06 1205.16 L1485.65 1205.16 L1486.24 1205.16 L1486.82 1205.16 L1487.41 1205.16 L1487.99 1205.16 L1488.58 1205.16 L1489.17 1205.16 L1489.75 1205.16 L1490.34 1205.16 L1490.93 1205.16 L1491.51 1205.16 L1492.1 1205.16 L1492.69 1205.16 L1493.27 1205.16 L1493.86 1205.16 L1494.45 1205.16 L1495.03 1205.16 L1495.62 1205.16 L1496.2 1205.16 L1496.79 1205.16 L1497.38 1205.16 L1497.96 1205.16 L1498.55 1205.16 L1499.14 1205.16 L1499.72 1205.16 L1500.31 1205.16 L1500.9 1205.16 L1501.48 1205.16 L1502.07 1205.16 L1502.65 1205.16 L1503.24 1205.16 L1503.83 1205.16 L1504.41 1205.16 L1505 1205.16 L1505.59 1205.16 L1506.17 1205.16 L1506.76 1205.16 L1507.35 1205.16 L1507.93 1205.16 L1508.52 1205.16 L1509.11 1205.16 L1509.69 1205.16 L1510.28 1205.16 L1510.86 1205.16 L1511.45 1205.16 L1512.04 1205.16 L1512.62 1205.16 L1513.21 1205.16 L1513.8 1205.16 L1514.38 1205.16 L1514.97 1205.16 L1515.56 1205.16 L1516.14 1205.16 L1516.73 1205.16 L1517.32 1205.16 L1517.9 1205.16 L1518.49 1205.16 L1519.07 1205.16 L1519.66 1205.16 L1520.25 1205.16 L1520.83 1205.16 L1521.42 1205.16 L1522.01 1205.16 L1522.59 1205.16 L1523.18 1205.16 L1523.77 1205.16 L1524.35 1205.16 L1524.94 1205.16 L1525.52 1205.16 L1526.11 1205.16 L1526.7 1205.16 L1527.28 1205.16 L1527.87 1205.16 L1528.46 1205.16 L1529.04 1205.16 L1529.63 1205.16 L1530.22 1205.16 L1530.8 1205.16 L1531.39 1205.16 L1531.98 1205.16 L1532.56 1205.16 L1533.15 1205.16 L1533.73 1205.16 L1534.32 1205.16 L1534.91 1205.16 L1535.49 1205.16 L1536.08 1205.16 L1536.67 1205.16 L1537.25 1205.16 L1537.84 1205.16 L1538.43 1205.16 L1539.01 1205.16 L1539.6 1205.16 L1540.19 1205.16 L1540.77 1205.16 L1541.36 1205.16 L1541.94 1205.16 L1542.53 1205.16 L1543.12 1205.16 L1543.7 1205.16 L1544.29 1205.16 L1544.88 1205.16 L1545.46 1205.16 L1546.05 1205.16 L1546.64 1205.16 L1547.22 1205.16 L1547.81 1205.16 L1548.4 1205.16 L1548.98 1205.16 L1549.57 1205.16 L1550.15 1205.16 L1550.74 1205.16 L1551.33 1205.16 L1551.91 1205.16 L1552.5 1205.16 L1553.09 1205.16 L1553.67 1205.16 L1554.26 1205.16 L1554.85 1205.16 L1555.43 1205.16 L1556.02 1205.16 L1556.6 1205.16 L1557.19 1205.16 L1557.78 1205.16 L1558.36 1205.16 L1558.95 1205.16 L1559.54 1205.16 L1560.12 1205.16 L1560.71 1205.16 L1561.3 1205.16 L1561.88 1205.16 L1562.47 1205.16 L1563.06 1205.16 L1563.64 1205.16 L1564.23 1205.16 L1564.81 1205.16 L1565.4 1205.16 L1565.99 1205.16 L1566.57 1205.16 L1567.16 1205.16 L1567.75 1205.16 L1568.33 1205.16 L1568.92 1205.16 L1569.51 1205.16 L1570.09 1205.16 L1570.68 1205.16 L1571.27 1205.16 L1571.85 1205.16 L1572.44 1205.16 L1573.02 1205.16 L1573.61 1205.16 L1574.2 1205.16 L1574.78 1205.16 L1575.37 1205.16 L1575.96 1205.16 L1576.54 1205.16 L1577.13 1205.16 L1577.72 1205.16 L1578.3 1205.16 L1578.89 1205.16 L1579.47 1205.16 L1580.06 1205.16 L1580.65 1205.16 L1581.23 1205.16 L1581.82 1205.16 L1582.41 1205.16 L1582.99 1205.16 L1583.58 1205.16 L1584.17 1205.16 L1584.75 1205.16 L1585.34 1205.16 L1585.93 1205.16 L1586.51 1205.16 L1587.1 1205.16 L1587.68 1205.16 L1588.27 1205.16 L1588.86 1205.16 L1589.44 1205.16 L1590.03 1205.16 L1590.62 1205.16 L1591.2 1205.16 L1591.79 1205.16 L1592.38 1205.16 L1592.96 1205.16 L1593.55 1205.16 L1594.14 1205.16 L1594.72 1205.16 L1595.31 1205.16 L1595.89 1205.16 L1596.48 1205.16 L1597.07 1205.16 L1597.65 1205.16 L1598.24 1205.16 L1598.83 1205.16 L1599.41 1205.16 L1600 1205.16 L1600.59 1205.16 L1601.17 1205.16 L1601.76 1205.16 L1602.34 1205.16 L1602.93 1205.16 L1603.52 1205.16 L1604.1 1205.16 L1604.69 1205.16 L1605.28 1205.16 L1605.86 1205.16 L1606.45 1205.16 L1607.04 1205.16 L1607.62 1205.16 L1608.21 1205.16 L1608.8 1205.16 L1609.38 1205.16 L1609.97 1205.16 L1610.55 1205.16 L1611.14 1205.16 L1611.73 1205.16 L1612.31 1205.16 L1612.9 1205.16 L1613.49 1205.16 L1614.07 1205.16 L1614.66 1205.16 L1615.25 1205.16 L1615.83 1205.16 L1616.42 1205.16 L1617.01 1205.16 L1617.59 1205.16 L1618.18 1205.16 L1618.76 1205.16 L1619.35 1205.16 L1619.94 1205.16 L1620.52 1205.16 L1621.11 1205.16 L1621.7 1205.16 L1622.28 1205.16 L1622.87 1205.16 L1623.46 1205.16 L1624.04 1205.16 L1624.63 1205.16 L1625.22 1205.16 L1625.8 1205.16 L1626.39 1205.16 L1626.97 1205.16 L1627.56 1205.16 L1628.15 1205.16 L1628.73 1205.16 L1629.32 1205.16 L1629.91 1205.16 L1630.49 1205.16 L1631.08 1205.16 L1631.67 1205.16 L1632.25 1205.16 L1632.84 1205.16 L1633.42 1205.16 L1634.01 1205.16 L1634.6 1205.16 L1635.18 1205.16 L1635.77 1205.16 L1636.36 1205.16 L1636.94 1205.16 L1637.53 1205.16 L1638.12 1205.16 L1638.7 1205.16 L1639.29 1205.16 L1639.88 1205.16 L1640.46 1205.16 L1641.05 1205.16 L1641.63 1205.16 L1642.22 1205.16 L1642.81 1205.16 L1643.39 1205.16 L1643.98 1205.16 L1644.57 1205.16 L1645.15 1205.16 L1645.74 1205.16 L1646.33 1205.16 L1646.91 1205.16 L1647.5 1205.16 L1648.09 1205.16 L1648.67 1205.16 L1649.26 1205.16 L1649.84 1205.16 L1650.43 1205.16 L1651.02 1205.16 L1651.6 1205.16 L1652.19 1205.16 L1652.78 1205.16 L1653.36 1205.16 L1653.95 1205.16 L1654.54 1205.16 L1655.12 1205.16 L1655.71 1205.16 L1656.29 1205.16 L1656.88 1205.16 L1657.47 1205.16 L1658.05 1205.16 L1658.64 1205.16 L1659.23 1205.16 L1659.81 1205.16 L1660.4 1205.16 L1660.99 1205.16 L1661.57 1205.16 L1662.16 1205.16 L1662.75 1205.16 L1663.33 1205.16 L1663.92 1205.16 L1664.5 1205.16 L1665.09 1205.16 L1665.68 1205.16 L1666.26 1205.16 L1666.85 1205.16 L1667.44 1205.16 L1668.02 1205.16 L1668.61 1205.16 L1669.2 1205.16 L1669.78 1205.16 L1670.37 1205.16 L1670.96 1205.16 L1671.54 1205.16 L1672.13 1205.16 L1672.71 1205.16 L1673.3 1205.16 L1673.89 1205.16 L1674.47 1205.16 L1675.06 1205.16 L1675.65 1205.16 L1676.23 1205.16 L1676.82 1205.16 L1677.41 1205.16 L1677.99 1205.16 L1678.58 1205.16 L1679.17 1205.16 L1679.75 1205.16 L1680.34 1205.16 L1680.92 1205.16 L1681.51 1205.16 L1682.1 1205.16 L1682.68 1205.16 L1683.27 1205.16 L1683.86 1205.16 L1684.44 1205.16 L1685.03 1205.16 L1685.62 1205.16 L1686.2 1205.16 L1686.79 1205.16 L1687.37 1205.16 L1687.96 1205.16 L1688.55 1205.16 L1689.13 1205.16 L1689.72 1205.16 L1690.31 1205.16 L1690.89 1205.16 L1691.48 1205.16 L1692.07 1205.16 L1692.65 1205.16 L1693.24 1205.16 L1693.83 1205.16 L1694.41 1205.16 L1695 1205.16 L1695.58 1205.16 L1696.17 1205.16 L1696.76 1205.16 L1697.34 1205.16 L1697.93 1205.16 L1698.52 1205.16 L1699.1 1205.16 L1699.69 1205.16 L1700.28 1205.16 L1700.86 1205.16 L1701.45 1205.16 L1702.04 1205.16 L1702.62 1205.16 L1703.21 1205.16 L1703.79 1205.16 L1704.38 1205.16 L1704.97 1205.16 L1705.55 1205.16 L1706.14 1205.16 L1706.73 1205.16 L1707.31 1205.16 L1707.9 1205.16 L1708.49 1205.16 L1709.07 1205.16 L1709.66 1205.16 L1710.24 1205.16 L1710.83 1205.16 L1711.42 1205.16 L1712 1205.16 L1712.59 1205.16 L1713.18 1205.16 L1713.76 1205.16 L1714.35 1205.16 L1714.94 1205.16 L1715.52 1205.16 L1716.11 1205.16 L1716.7 1205.16 L1717.28 1205.16 L1717.87 1205.16 L1718.45 1205.16 L1719.04 1205.16 L1719.63 1205.16 L1720.21 1205.16 L1720.8 1205.16 L1721.39 1205.16 L1721.97 1205.16 L1722.56 1205.16 L1723.15 1205.16 L1723.73 1205.16 L1724.32 1205.16 L1724.91 1205.16 L1725.49 1205.16 L1726.08 1205.16 L1726.66 1205.16 L1727.25 1205.16 L1727.84 1205.16 L1728.42 1205.16 L1729.01 1205.16 L1729.6 1205.16 L1730.18 1205.16 L1730.77 1205.16 L1731.36 1205.16 L1731.94 1205.16 L1732.53 1205.16 L1733.11 1205.16 L1733.7 1205.16 L1734.29 1205.16 L1734.87 1205.16 L1735.46 1205.16 L1736.05 1205.16 L1736.63 1205.16 L1737.22 1205.16 L1737.81 1205.16 L1738.39 1205.16 L1738.98 1205.16 L1739.57 1205.16 L1740.15 1205.16 L1740.74 1205.16 L1741.32 1205.16 L1741.91 1205.16 L1742.5 1205.16 L1743.08 1205.16 L1743.67 1205.16 L1744.26 1205.16 L1744.84 1205.16 L1745.43 1205.16 L1746.02 1205.16 L1746.6 1205.16 L1747.19 1205.16 L1747.78 1205.16 L1748.36 1205.16 L1748.95 1205.16 L1749.53 1205.16 L1750.12 1205.16 L1750.71 1205.16 L1751.29 1205.16 L1751.88 1205.16 L1752.47 1205.16 L1753.05 1205.16 L1753.64 1205.16 L1754.23 1205.16 L1754.81 1205.16 L1755.4 1205.16 L1755.99 1205.16 L1756.57 1205.16 L1757.16 1205.16 L1757.74 1205.16 L1758.33 1205.16 L1758.92 1205.16 L1759.5 1205.16 L1760.09 1205.16 L1760.68 1205.16 L1761.26 1205.16 L1761.85 1205.16 L1762.44 1205.16 L1763.02 1205.16 L1763.61 1205.16 L1764.19 1205.16 L1764.78 1205.16 L1765.37 1205.16 L1765.95 1205.16 L1766.54 1205.16 L1767.13 1205.16 L1767.71 1205.16 L1768.3 1205.16 L1768.89 1205.16 L1769.47 1205.16 L1770.06 1205.16 L1770.65 1205.16 L1771.23 1205.16 L1771.82 1205.16 L1772.4 1205.16 L1772.99 1205.16 L1773.58 1205.16 L1774.16 1205.16 L1774.75 1205.16 L1775.34 1205.16 L1775.92 1205.16 L1776.51 1205.16 L1777.1 1205.16 L1777.68 1205.16 L1778.27 1205.16 L1778.86 1205.16 L1779.44 1205.16 L1780.03 1205.16 L1780.61 1205.16 L1781.2 1205.16 L1781.79 1205.16 L1782.37 1205.16 L1782.96 1205.16 L1783.55 1205.16 L1784.13 1205.16 L1784.72 1205.16 L1785.31 1205.16 L1785.89 1205.16 L1786.48 1205.16 L1787.06 1205.16 L1787.65 1205.16 L1788.24 1205.16 L1788.82 1205.16 L1789.41 1205.16 L1790 1205.16 L1790.58 1205.16 L1791.17 1205.16 L1791.76 1205.16 L1792.34 1205.16 L1792.93 1205.16 L1793.52 1205.16 L1794.1 1205.16 L1794.69 1205.16 L1795.27 1205.16 L1795.86 1205.16 L1796.45 1205.16 L1797.03 1205.16 L1797.62 1205.16 L1798.21 1205.16 L1798.79 1205.16 L1799.38 1205.16 L1799.97 1205.16 L1800.55 1205.16 L1801.14 1205.16 L1801.73 1205.16 L1802.31 1205.16 L1802.9 1205.16 L1803.48 1205.16 L1804.07 1205.16 L1804.66 1205.16 L1805.24 1205.16 L1805.83 1205.16 L1806.42 1205.16 L1807 1205.16 L1807.59 1205.16 L1808.18 1205.16 L1808.76 1205.16 L1809.35 1205.16 L1809.94 1205.16 L1810.52 1205.16 L1811.11 1205.16 L1811.69 1205.16 L1812.28 1205.16 L1812.87 1205.16 L1813.45 1205.16 L1814.04 1205.16 L1814.63 1205.16 L1815.21 1205.16 L1815.8 1205.16 L1816.39 1205.16 L1816.97 1205.16 L1817.56 1205.16 L1818.14 1205.16 L1818.73 1205.16 L1819.32 1205.16 L1819.9 1205.16 L1820.49 1205.16 L1821.08 1205.16 L1821.66 1205.16 L1822.25 1205.16 L1822.84 1205.16 L1823.42 1205.16 L1824.01 1205.16 L1824.6 1205.16 L1825.18 1205.16 L1825.77 1205.16 L1826.35 1205.16 L1826.94 1205.16 L1827.53 1205.16 L1828.11 1205.16 L1828.7 1205.16 L1829.29 1205.16 L1829.87 1205.16 L1830.46 1205.16 L1831.05 1205.16 L1831.63 1205.16 L1832.22 1205.16 L1832.81 1205.16 L1833.39 1205.16 L1833.98 1205.16 L1834.56 1205.16 L1835.15 1205.16 L1835.74 1205.16 L1836.32 1205.16 L1836.91 1205.16 L1837.5 1205.16 L1838.08 1205.16 L1838.67 1205.16 L1839.26 1205.16 L1839.84 1205.16 L1840.43 1205.16 L1841.01 1205.16 L1841.6 1205.16 L1842.19 1205.16 L1842.77 1205.16 L1843.36 1205.16 L1843.95 1205.16 L1844.53 1205.16 L1845.12 1205.16 L1845.71 1205.16 L1846.29 1205.16 L1846.88 1205.16 L1847.47 1205.16 L1848.05 1205.16 L1848.64 1205.16 L1849.22 1205.16 L1849.81 1205.16 L1850.4 1205.16 L1850.98 1205.16 L1851.57 1205.16 L1852.16 1205.16 L1852.74 1205.16 L1853.33 1205.16 L1853.92 1205.16 L1854.5 1205.16 L1855.09 1205.16 L1855.68 1205.16 L1856.26 1205.16 L1856.85 1205.16 L1857.43 1205.16 L1858.02 1205.16 L1858.61 1205.16 L1859.19 1205.16 L1859.78 1205.16 L1860.37 1205.16 L1860.95 1205.16 L1861.54 1205.16 L1862.13 1205.16 L1862.71 1205.16 L1863.3 1205.16 L1863.88 1205.16 L1864.47 1205.16 L1865.06 1205.16 L1865.64 1205.16 L1866.23 1205.16 L1866.82 1205.16 L1867.4 1205.16 L1867.99 1205.16 L1868.58 1205.16 L1869.16 1205.16 L1869.75 1205.16 L1870.34 1205.16 L1870.92 1205.16 L1871.51 1205.16 L1872.09 1205.16 L1872.68 1205.16 L1873.27 1205.16 L1873.85 1205.16 L1874.44 1205.16 L1875.03 1205.16 L1875.61 1205.16 L1876.2 1205.16 L1876.79 1205.16 L1877.37 1205.16 L1877.96 1205.16 L1878.55 1205.16 L1879.13 1205.16 L1879.72 1205.16 L1880.3 1205.16 L1880.89 1205.16 L1881.48 1205.16 L1882.06 1205.16 L1882.65 1205.16 L1883.24 1205.16 L1883.82 1205.16 L1884.41 1205.16 L1885 1205.16 L1885.58 1205.16 L1886.17 1205.16 L1886.76 1205.16 L1887.34 1205.16 L1887.93 1205.16 L1888.51 1205.16 L1889.1 1205.16 L1889.69 1205.16 L1890.27 1205.16 L1890.86 1205.16 L1891.45 1205.16 L1892.03 1205.16 L1892.62 1205.16 L1893.21 1205.16 L1893.79 1205.16 L1894.38 1205.16 L1894.96 1205.16 L1895.55 1205.16 L1896.14 1205.16 L1896.72 1205.16 L1897.31 1205.16 L1897.9 1205.16 L1898.48 1205.16 L1899.07 1205.16 L1899.66 1205.16 L1900.24 1205.16 L1900.83 1205.16 L1901.42 1205.16 L1902 1205.16 L1902.59 1205.16 L1903.17 1205.16 L1903.76 1205.16 L1904.35 1205.16 L1904.93 1205.16 L1905.52 1205.16 L1906.11 1205.16 L1906.69 1205.16 L1907.28 1205.16 L1907.87 1205.16 L1908.45 1205.16 L1909.04 1205.16 L1909.63 1205.16 L1910.21 1205.16 L1910.8 1205.16 L1911.38 1205.16 L1911.97 1205.16 L1912.56 1205.16 L1913.14 1205.16 L1913.73 1205.16 L1914.32 1205.16 L1914.9 1205.16 L1915.49 1205.16 L1916.08 1205.16 L1916.66 1205.16 L1917.25 1205.16 L1917.83 1205.16 L1918.42 1205.16 L1919.01 1205.16 L1919.59 1205.16 L1920.18 1205.16 L1920.77 1205.16 L1921.35 1205.16 L1921.94 1205.16 L1922.53 1205.16 L1923.11 1205.16 L1923.7 1205.16 L1924.29 1205.16 L1924.87 1205.16 L1925.46 1205.16 L1926.04 1205.16 L1926.63 1205.16 L1927.22 1205.16 L1927.8 1205.16 L1928.39 1205.16 L1928.98 1205.16 L1929.56 1205.16 L1930.15 1205.16 L1930.74 1205.16 L1931.32 1205.16 L1931.91 1205.16 L1932.5 1205.16 L1933.08 1205.16 L1933.67 1205.16 L1934.25 1205.16 L1934.84 1205.16 L1935.43 1205.16 L1936.01 1205.16 L1936.6 1205.16 L1937.19 1205.16 L1937.77 1205.16 L1938.36 1205.16 L1938.95 1205.16 L1939.53 1205.16 L1940.12 1205.16 L1940.71 1205.16 L1941.29 1205.16 L1941.88 1205.16 L1942.46 1205.16 L1943.05 1205.16 L1943.64 1205.16 L1944.22 1205.16 L1944.81 1205.16 L1945.4 1205.16 L1945.98 1205.16 L1946.57 1205.16 L1947.16 1205.16 L1947.74 1205.16 L1948.33 1205.16 L1948.91 1205.16 L1949.5 1205.16 L1950.09 1205.16 L1950.67 1205.16 L1951.26 1205.16 L1951.85 1205.16 L1952.43 1205.16 L1953.02 1205.16 L1953.61 1205.16 L1954.19 1205.16 L1954.78 1205.16 L1955.37 1205.16 L1955.95 1205.16 L1956.54 1205.16 L1957.12 1205.16 L1957.71 1205.16 L1958.3 1205.16 L1958.88 1205.16 L1959.47 1205.16 L1960.06 1205.16 L1960.64 1205.16 L1961.23 1205.16 L1961.82 1205.16 L1962.4 1205.16 L1962.99 1205.16 L1963.58 1205.16 L1964.16 1205.16 L1964.75 1205.16 L1965.33 1205.16 L1965.92 1205.16 L1966.51 1205.16 L1967.09 1205.16 L1967.68 1205.16 L1968.27 1205.16 L1968.85 1205.16 L1969.44 1205.16 L1970.03 1205.16 L1970.61 1205.16 L1971.2 1205.16 L1971.78 1205.16 L1972.37 1205.16 L1972.96 1205.16 L1973.54 1205.16 L1974.13 1205.16 L1974.72 1205.16 L1975.3 1205.16 L1975.89 1205.16 L1976.48 1205.16 L1977.06 1205.16 L1977.65 1205.16 L1978.24 1205.16 L1978.82 1205.16 L1979.41 1205.16 L1979.99 1205.16 L1980.58 1205.16 L1981.17 1205.16 L1981.75 1205.16 L1982.34 1205.16 L1982.93 1205.16 L1983.51 1205.16 L1984.1 1205.16 L1984.69 1205.16 L1985.27 1205.16 L1985.86 1205.16 L1986.45 1205.16 L1987.03 1205.16 L1987.62 1205.16 L1988.2 1205.16 L1988.79 1205.16 L1989.38 1205.16 L1989.96 1205.16 L1990.55 1205.16 L1991.14 1205.16 L1991.72 1205.16 L1992.31 1205.16 L1992.9 1205.16 L1993.48 1205.16 L1994.07 1205.16 L1994.65 1205.16 L1995.24 1205.16 L1995.83 1205.16 L1996.41 1205.16 L1997 1205.16 L1997.59 1205.16 L1998.17 1205.16 L1998.76 1205.16 L1999.35 1205.16 L1999.93 1205.16 L2000.52 1205.16 L2001.11 1205.16 L2001.69 1205.16 L2002.28 1205.16 L2002.86 1205.16 L2003.45 1205.16 L2004.04 1205.16 L2004.62 1205.16 L2005.21 1205.16 L2005.8 1205.16 L2006.38 1205.16 L2006.97 1205.16 L2007.56 1205.16 L2008.14 1205.16 L2008.73 1205.16 L2009.32 1205.16 L2009.9 1205.16 L2010.49 1205.16 L2011.07 1205.16 L2011.66 1205.16 L2012.25 1205.16 L2012.83 1205.16 L2013.42 1205.16 L2014.01 1205.16 L2014.59 1205.16 L2015.18 1205.16 L2015.77 1205.16 L2016.35 1205.16 L2016.94 1205.16 L2017.53 1205.16 L2018.11 1205.16 L2018.7 1205.16 L2019.28 1205.16 L2019.87 1205.16 L2020.46 1205.16 L2021.04 1205.16 L2021.63 1205.16 L2022.22 1205.16 L2022.8 1205.16 L2023.39 1205.16 L2023.98 1205.16 L2024.56 1205.16 L2025.15 1205.16 L2025.73 1205.16 L2026.32 1205.16 L2026.91 1205.16 L2027.49 1205.16 L2028.08 1205.16 L2028.67 1205.16 L2029.25 1205.16 L2029.84 1205.16 L2030.43 1205.16 L2031.01 1205.16 L2031.6 1205.16 L2032.19 1205.16 L2032.77 1205.16 L2033.36 1205.16 L2033.94 1205.16 L2034.53 1205.16 L2035.12 1205.16 L2035.7 1205.16 L2036.29 1205.16 L2036.88 1205.16 L2037.46 1205.16 L2038.05 1205.16 L2038.64 1205.16 L2039.22 1205.16 L2039.81 1205.16 L2040.4 1205.16 L2040.98 1205.16 L2041.57 1205.16 L2042.15 1205.16 L2042.74 1205.16 L2043.33 1205.16 L2043.91 1205.16 L2044.5 1205.16 L2045.09 1205.16 L2045.67 1205.16 L2046.26 1205.16 L2046.85 1205.16 L2047.43 1205.16 L2048.02 1205.16 L2048.6 1205.16 L2049.19 1205.16 L2049.78 1205.16 L2050.36 1205.16 L2050.95 1205.16 L2051.54 1205.16 L2052.12 1205.16 L2052.71 1205.16 L2053.3 1205.16 L2053.88 1205.16 L2054.47 1205.16 L2055.06 1205.16 L2055.64 1205.16 L2056.23 1205.16 L2056.81 1205.16 L2057.4 1205.16 L2057.99 1205.16 L2058.57 1205.16 L2059.16 1205.16 L2059.75 1205.16 L2060.33 1205.16 L2060.92 1205.16 L2061.51 1205.16 L2062.09 1205.16 L2062.68 1205.16 L2063.27 1205.16 L2063.85 1205.16 L2064.44 1205.16 L2065.02 1205.16 L2065.61 1205.16 L2066.2 1205.16 L2066.78 1205.16 L2067.37 1205.16 L2067.96 1205.16 L2068.54 1205.16 L2069.13 1205.16 L2069.72 1205.16 L2070.3 1205.16 L2070.89 1205.16 L2071.48 1205.16 L2072.06 1205.16 L2072.65 1205.16 L2073.23 1205.16 L2073.82 1205.16 L2074.41 1205.16 L2074.99 1205.16 L2075.58 1205.16 L2076.17 1205.16 L2076.75 1205.16 L2077.34 1205.16 L2077.93 1205.16 L2078.51 1205.16 L2079.1 1205.16 L2079.68 1205.16 L2080.27 1205.16 L2080.86 1205.16 L2081.44 1205.16 L2082.03 1205.16 L2082.62 1205.16 L2083.2 1205.16 L2083.79 1205.16 L2084.38 1205.16 L2084.96 1205.16 L2085.55 1205.16 L2086.14 1205.16 L2086.72 1205.16 L2087.31 1205.16 L2087.89 1205.16 L2088.48 1205.16 L2089.07 1205.16 L2089.65 1205.16 L2090.24 1205.16 L2090.83 1205.16 L2091.41 1205.16 L2092 1205.16 L2092.59 1205.16 L2093.17 1205.16 L2093.76 1205.16 L2094.35 1205.16 L2094.93 1205.16 L2095.52 1205.16 L2096.1 1205.16 L2096.69 1205.16 L2097.28 1205.16 L2097.86 1205.16 L2098.45 1205.16 L2099.04 1205.16 L2099.62 1205.16 L2100.21 1205.16 L2100.8 1205.16 L2101.38 1205.16 L2101.97 1205.16 L2102.55 1205.16 L2103.14 1205.16 L2103.73 1205.16 L2104.31 1205.16 L2104.9 1205.16 L2105.49 1205.16 L2106.07 1205.16 L2106.66 1205.16 L2107.25 1205.16 L2107.83 1205.16 L2108.42 1205.16 L2109.01 1205.16 L2109.59 1205.16 L2110.18 1205.16 L2110.76 1205.16 L2111.35 1205.16 L2111.94 1205.16 L2112.52 1205.16 L2113.11 1205.16 L2113.7 1205.16 L2114.28 1205.16 L2114.87 1205.16 L2115.46 1205.16 L2116.04 1205.16 L2116.63 1205.16 L2117.22 1205.16 L2117.8 1205.16 L2118.39 1205.16 L2118.97 1205.16 L2119.56 1205.16 L2120.15 1205.16 L2120.73 1205.16 L2121.32 1205.16 L2121.91 1205.16 L2122.49 1205.16 L2123.08 1205.16 L2123.67 1205.16 L2124.25 1205.16 L2124.84 1205.16 L2125.42 1205.16 L2126.01 1205.16 L2126.6 1205.16 L2127.18 1205.16 L2127.77 1205.16 L2128.36 1205.16 L2128.94 1205.16 L2129.53 1205.16 L2130.12 1205.16 L2130.7 1205.16 L2131.29 1205.16 L2131.88 1205.16 L2132.46 1205.16 L2133.05 1205.16 L2133.63 1205.16 L2134.22 1205.16 L2134.81 1205.16 L2135.39 1205.16 L2135.98 1205.16 L2136.57 1205.16 L2137.15 1205.16 L2137.74 1205.16 L2138.33 1205.16 L2138.91 1205.16 L2139.5 1205.16 L2140.09 1205.16 L2140.67 1205.16 L2141.26 1205.16 L2141.84 1205.16 L2142.43 1205.16 L2143.02 1205.16 L2143.6 1205.16 L2144.19 1205.16 L2144.78 1205.16 L2145.36 1205.16 L2145.95 1205.16 L2146.54 1205.16 L2147.12 1205.16 L2147.71 1205.16 L2148.3 1205.16 L2148.88 1205.16 L2149.47 1205.16 L2150.05 1205.16 L2150.64 1205.16 L2151.23 1205.16 L2151.81 1205.16 L2152.4 1205.16 L2152.99 1205.16 L2153.57 1205.16 L2154.16 1205.16 L2154.75 1205.16 L2155.33 1205.16 L2155.92 1205.16 L2156.5 1205.16 L2157.09 1205.16 L2157.68 1205.16 L2158.26 1205.16 L2158.26 1204.52 L2157.68 1204.52 L2157.09 1204.52 L2156.5 1204.52 L2155.92 1204.52 L2155.33 1204.52 L2154.75 1204.52 L2154.16 1204.52 L2153.57 1204.52 L2152.99 1204.52 L2152.4 1204.52 L2151.81 1204.52 L2151.23 1204.52 L2150.64 1204.52 L2150.05 1204.52 L2149.47 1204.52 L2148.88 1204.52 L2148.3 1204.52 L2147.71 1204.52 L2147.12 1204.52 L2146.54 1204.52 L2145.95 1204.52 L2145.36 1204.52 L2144.78 1204.52 L2144.19 1204.52 L2143.6 1204.52 L2143.02 1204.52 L2142.43 1204.52 L2141.84 1204.52 L2141.26 1204.52 L2140.67 1204.52 L2140.09 1204.52 L2139.5 1204.52 L2138.91 1204.52 L2138.33 1204.52 L2137.74 1204.52 L2137.15 1204.52 L2136.57 1204.52 L2135.98 1204.52 L2135.39 1204.52 L2134.81 1204.52 L2134.22 1204.52 L2133.63 1204.52 L2133.05 1204.52 L2132.46 1204.52 L2131.88 1204.52 L2131.29 1204.52 L2130.7 1204.52 L2130.12 1204.52 L2129.53 1204.52 L2128.94 1204.52 L2128.36 1204.52 L2127.77 1204.52 L2127.18 1204.52 L2126.6 1204.52 L2126.01 1204.52 L2125.42 1204.52 L2124.84 1204.52 L2124.25 1204.52 L2123.67 1204.52 L2123.08 1204.52 L2122.49 1204.52 L2121.91 1204.52 L2121.32 1204.52 L2120.73 1204.52 L2120.15 1204.52 L2119.56 1204.52 L2118.97 1204.52 L2118.39 1204.52 L2117.8 1204.52 L2117.22 1204.52 L2116.63 1204.52 L2116.04 1204.52 L2115.46 1204.52 L2114.87 1204.52 L2114.28 1204.52 L2113.7 1204.52 L2113.11 1204.52 L2112.52 1204.52 L2111.94 1204.52 L2111.35 1204.52 L2110.76 1204.52 L2110.18 1204.52 L2109.59 1204.52 L2109.01 1204.52 L2108.42 1204.52 L2107.83 1204.52 L2107.25 1204.52 L2106.66 1204.52 L2106.07 1204.52 L2105.49 1204.52 L2104.9 1204.52 L2104.31 1204.52 L2103.73 1204.52 L2103.14 1204.52 L2102.55 1204.52 L2101.97 1204.52 L2101.38 1204.52 L2100.8 1204.52 L2100.21 1204.52 L2099.62 1204.52 L2099.04 1204.52 L2098.45 1204.52 L2097.86 1204.52 L2097.28 1204.52 L2096.69 1204.52 L2096.1 1204.52 L2095.52 1204.52 L2094.93 1204.52 L2094.35 1204.52 L2093.76 1204.52 L2093.17 1204.52 L2092.59 1204.52 L2092 1204.52 L2091.41 1204.52 L2090.83 1204.52 L2090.24 1204.52 L2089.65 1204.52 L2089.07 1204.52 L2088.48 1204.52 L2087.89 1204.52 L2087.31 1204.52 L2086.72 1204.52 L2086.14 1204.52 L2085.55 1204.52 L2084.96 1204.52 L2084.38 1204.52 L2083.79 1204.52 L2083.2 1204.52 L2082.62 1204.52 L2082.03 1204.52 L2081.44 1204.52 L2080.86 1204.52 L2080.27 1204.52 L2079.68 1204.52 L2079.1 1204.52 L2078.51 1204.52 L2077.93 1204.52 L2077.34 1204.52 L2076.75 1204.52 L2076.17 1204.52 L2075.58 1204.52 L2074.99 1204.52 L2074.41 1204.52 L2073.82 1204.52 L2073.23 1204.52 L2072.65 1204.52 L2072.06 1204.52 L2071.48 1204.52 L2070.89 1204.52 L2070.3 1204.52 L2069.72 1204.52 L2069.13 1204.52 L2068.54 1204.52 L2067.96 1204.52 L2067.37 1204.52 L2066.78 1204.52 L2066.2 1204.52 L2065.61 1204.52 L2065.02 1204.52 L2064.44 1204.52 L2063.85 1204.52 L2063.27 1204.52 L2062.68 1204.52 L2062.09 1204.52 L2061.51 1204.52 L2060.92 1204.52 L2060.33 1204.52 L2059.75 1204.52 L2059.16 1204.52 L2058.57 1204.52 L2057.99 1204.52 L2057.4 1204.52 L2056.81 1204.52 L2056.23 1204.52 L2055.64 1204.52 L2055.06 1204.52 L2054.47 1204.52 L2053.88 1204.52 L2053.3 1204.52 L2052.71 1204.52 L2052.12 1204.52 L2051.54 1204.52 L2050.95 1204.52 L2050.36 1204.52 L2049.78 1204.52 L2049.19 1204.52 L2048.6 1204.52 L2048.02 1204.52 L2047.43 1204.52 L2046.85 1204.52 L2046.26 1204.52 L2045.67 1204.52 L2045.09 1204.52 L2044.5 1204.52 L2043.91 1204.52 L2043.33 1204.52 L2042.74 1204.52 L2042.15 1204.52 L2041.57 1204.52 L2040.98 1204.52 L2040.4 1204.52 L2039.81 1204.52 L2039.22 1204.52 L2038.64 1204.52 L2038.05 1204.52 L2037.46 1204.52 L2036.88 1204.52 L2036.29 1204.52 L2035.7 1204.52 L2035.12 1204.52 L2034.53 1204.52 L2033.94 1204.52 L2033.36 1204.52 L2032.77 1204.52 L2032.19 1204.52 L2031.6 1204.52 L2031.01 1204.52 L2030.43 1204.52 L2029.84 1204.52 L2029.25 1204.52 L2028.67 1204.52 L2028.08 1204.52 L2027.49 1204.52 L2026.91 1204.52 L2026.32 1204.52 L2025.73 1204.52 L2025.15 1204.52 L2024.56 1204.52 L2023.98 1204.52 L2023.39 1204.52 L2022.8 1204.52 L2022.22 1204.52 L2021.63 1204.52 L2021.04 1204.52 L2020.46 1204.52 L2019.87 1204.52 L2019.28 1204.52 L2018.7 1204.52 L2018.11 1204.52 L2017.53 1204.52 L2016.94 1204.52 L2016.35 1204.52 L2015.77 1204.52 L2015.18 1204.52 L2014.59 1204.52 L2014.01 1204.52 L2013.42 1204.52 L2012.83 1204.52 L2012.25 1204.52 L2011.66 1204.52 L2011.07 1204.52 L2010.49 1204.52 L2009.9 1204.52 L2009.32 1204.52 L2008.73 1204.52 L2008.14 1204.52 L2007.56 1204.52 L2006.97 1204.52 L2006.38 1204.52 L2005.8 1204.52 L2005.21 1204.52 L2004.62 1204.52 L2004.04 1204.52 L2003.45 1204.52 L2002.86 1204.52 L2002.28 1204.52 L2001.69 1204.52 L2001.11 1204.52 L2000.52 1204.52 L1999.93 1204.52 L1999.35 1204.52 L1998.76 1204.52 L1998.17 1204.52 L1997.59 1204.52 L1997 1204.52 L1996.41 1204.52 L1995.83 1204.52 L1995.24 1204.52 L1994.65 1204.52 L1994.07 1204.52 L1993.48 1204.52 L1992.9 1204.52 L1992.31 1204.52 L1991.72 1204.52 L1991.14 1204.52 L1990.55 1204.52 L1989.96 1204.52 L1989.38 1204.52 L1988.79 1204.52 L1988.2 1204.52 L1987.62 1204.52 L1987.03 1204.52 L1986.45 1204.52 L1985.86 1204.52 L1985.27 1204.52 L1984.69 1204.52 L1984.1 1204.52 L1983.51 1204.52 L1982.93 1204.52 L1982.34 1204.52 L1981.75 1204.52 L1981.17 1204.52 L1980.58 1204.52 L1979.99 1204.52 L1979.41 1204.52 L1978.82 1204.52 L1978.24 1204.52 L1977.65 1204.52 L1977.06 1204.52 L1976.48 1204.52 L1975.89 1204.52 L1975.3 1204.52 L1974.72 1204.52 L1974.13 1204.52 L1973.54 1204.52 L1972.96 1204.52 L1972.37 1204.52 L1971.78 1204.52 L1971.2 1204.52 L1970.61 1204.52 L1970.03 1204.52 L1969.44 1204.52 L1968.85 1204.52 L1968.27 1204.52 L1967.68 1204.52 L1967.09 1204.52 L1966.51 1204.52 L1965.92 1204.52 L1965.33 1204.52 L1964.75 1204.52 L1964.16 1204.52 L1963.58 1204.52 L1962.99 1204.52 L1962.4 1204.52 L1961.82 1204.52 L1961.23 1204.52 L1960.64 1204.52 L1960.06 1204.52 L1959.47 1204.52 L1958.88 1204.52 L1958.3 1204.52 L1957.71 1204.52 L1957.12 1204.52 L1956.54 1204.52 L1955.95 1204.52 L1955.37 1204.52 L1954.78 1204.52 L1954.19 1204.52 L1953.61 1204.52 L1953.02 1204.52 L1952.43 1204.52 L1951.85 1204.52 L1951.26 1204.52 L1950.67 1204.52 L1950.09 1204.52 L1949.5 1204.52 L1948.91 1204.52 L1948.33 1204.52 L1947.74 1204.52 L1947.16 1204.52 L1946.57 1204.52 L1945.98 1204.52 L1945.4 1204.52 L1944.81 1204.52 L1944.22 1204.52 L1943.64 1204.52 L1943.05 1204.52 L1942.46 1204.52 L1941.88 1204.52 L1941.29 1204.52 L1940.71 1204.52 L1940.12 1204.52 L1939.53 1204.52 L1938.95 1204.52 L1938.36 1204.52 L1937.77 1204.52 L1937.19 1204.52 L1936.6 1204.52 L1936.01 1204.52 L1935.43 1204.52 L1934.84 1204.52 L1934.25 1204.52 L1933.67 1204.52 L1933.08 1204.52 L1932.5 1204.52 L1931.91 1204.52 L1931.32 1204.52 L1930.74 1204.52 L1930.15 1204.52 L1929.56 1204.52 L1928.98 1204.52 L1928.39 1204.52 L1927.8 1204.52 L1927.22 1204.52 L1926.63 1204.52 L1926.04 1204.52 L1925.46 1204.52 L1924.87 1204.52 L1924.29 1204.52 L1923.7 1204.52 L1923.11 1204.52 L1922.53 1204.52 L1921.94 1204.52 L1921.35 1204.52 L1920.77 1204.52 L1920.18 1204.52 L1919.59 1204.52 L1919.01 1204.52 L1918.42 1204.52 L1917.83 1204.52 L1917.25 1204.52 L1916.66 1204.52 L1916.08 1204.52 L1915.49 1204.52 L1914.9 1204.52 L1914.32 1204.52 L1913.73 1204.52 L1913.14 1204.52 L1912.56 1204.52 L1911.97 1204.52 L1911.38 1204.52 L1910.8 1204.52 L1910.21 1204.52 L1909.63 1204.52 L1909.04 1204.52 L1908.45 1204.52 L1907.87 1204.52 L1907.28 1204.52 L1906.69 1204.52 L1906.11 1204.52 L1905.52 1204.52 L1904.93 1204.52 L1904.35 1204.52 L1903.76 1204.52 L1903.17 1204.52 L1902.59 1204.52 L1902 1204.52 L1901.42 1204.52 L1900.83 1204.52 L1900.24 1204.52 L1899.66 1204.52 L1899.07 1204.52 L1898.48 1204.52 L1897.9 1204.52 L1897.31 1204.52 L1896.72 1204.52 L1896.14 1204.52 L1895.55 1204.52 L1894.96 1204.52 L1894.38 1204.52 L1893.79 1204.52 L1893.21 1204.52 L1892.62 1204.52 L1892.03 1204.52 L1891.45 1204.52 L1890.86 1204.52 L1890.27 1204.52 L1889.69 1204.52 L1889.1 1204.52 L1888.51 1204.52 L1887.93 1204.52 L1887.34 1204.52 L1886.76 1204.52 L1886.17 1204.52 L1885.58 1204.52 L1885 1204.52 L1884.41 1204.52 L1883.82 1204.52 L1883.24 1204.52 L1882.65 1204.52 L1882.06 1204.52 L1881.48 1204.52 L1880.89 1204.52 L1880.3 1204.52 L1879.72 1204.52 L1879.13 1204.52 L1878.55 1204.52 L1877.96 1204.52 L1877.37 1204.52 L1876.79 1204.52 L1876.2 1204.52 L1875.61 1204.52 L1875.03 1204.52 L1874.44 1204.52 L1873.85 1204.52 L1873.27 1204.52 L1872.68 1204.52 L1872.09 1204.52 L1871.51 1204.52 L1870.92 1204.52 L1870.34 1204.52 L1869.75 1204.52 L1869.16 1204.52 L1868.58 1204.52 L1867.99 1204.52 L1867.4 1204.52 L1866.82 1204.52 L1866.23 1204.52 L1865.64 1204.52 L1865.06 1204.52 L1864.47 1204.52 L1863.88 1204.52 L1863.3 1204.52 L1862.71 1204.52 L1862.13 1204.52 L1861.54 1204.52 L1860.95 1204.52 L1860.37 1204.52 L1859.78 1204.52 L1859.19 1204.52 L1858.61 1204.52 L1858.02 1204.52 L1857.43 1204.52 L1856.85 1204.52 L1856.26 1204.52 L1855.68 1204.52 L1855.09 1204.52 L1854.5 1204.52 L1853.92 1204.52 L1853.33 1204.52 L1852.74 1204.52 L1852.16 1204.52 L1851.57 1204.52 L1850.98 1204.52 L1850.4 1204.52 L1849.81 1204.52 L1849.22 1204.52 L1848.64 1204.52 L1848.05 1204.52 L1847.47 1204.52 L1846.88 1204.52 L1846.29 1204.52 L1845.71 1204.52 L1845.12 1204.52 L1844.53 1204.52 L1843.95 1204.52 L1843.36 1204.52 L1842.77 1204.52 L1842.19 1204.52 L1841.6 1204.52 L1841.01 1204.52 L1840.43 1204.52 L1839.84 1204.52 L1839.26 1204.52 L1838.67 1204.52 L1838.08 1204.52 L1837.5 1204.52 L1836.91 1204.52 L1836.32 1204.52 L1835.74 1204.52 L1835.15 1204.52 L1834.56 1204.52 L1833.98 1204.52 L1833.39 1204.52 L1832.81 1204.52 L1832.22 1204.52 L1831.63 1204.52 L1831.05 1204.52 L1830.46 1204.52 L1829.87 1204.52 L1829.29 1204.52 L1828.7 1204.52 L1828.11 1204.52 L1827.53 1204.52 L1826.94 1204.52 L1826.35 1204.52 L1825.77 1204.52 L1825.18 1204.52 L1824.6 1204.52 L1824.01 1204.52 L1823.42 1204.52 L1822.84 1204.52 L1822.25 1204.52 L1821.66 1204.52 L1821.08 1204.52 L1820.49 1204.52 L1819.9 1204.52 L1819.32 1204.52 L1818.73 1204.52 L1818.14 1204.52 L1817.56 1204.52 L1816.97 1204.52 L1816.39 1204.52 L1815.8 1204.52 L1815.21 1204.52 L1814.63 1204.52 L1814.04 1204.52 L1813.45 1204.52 L1812.87 1204.52 L1812.28 1204.52 L1811.69 1204.52 L1811.11 1204.52 L1810.52 1204.52 L1809.94 1204.52 L1809.35 1204.52 L1808.76 1204.52 L1808.18 1204.52 L1807.59 1204.52 L1807 1204.52 L1806.42 1204.52 L1805.83 1204.52 L1805.24 1204.52 L1804.66 1204.52 L1804.07 1204.52 L1803.48 1204.52 L1802.9 1204.52 L1802.31 1204.52 L1801.73 1204.52 L1801.14 1204.52 L1800.55 1204.52 L1799.97 1204.52 L1799.38 1204.52 L1798.79 1204.52 L1798.21 1204.52 L1797.62 1204.52 L1797.03 1204.52 L1796.45 1204.52 L1795.86 1204.52 L1795.27 1204.52 L1794.69 1204.52 L1794.1 1204.52 L1793.52 1204.52 L1792.93 1204.52 L1792.34 1204.52 L1791.76 1204.52 L1791.17 1204.52 L1790.58 1204.52 L1790 1204.52 L1789.41 1204.52 L1788.82 1204.52 L1788.24 1204.52 L1787.65 1204.52 L1787.06 1204.52 L1786.48 1204.52 L1785.89 1204.52 L1785.31 1204.52 L1784.72 1204.52 L1784.13 1204.52 L1783.55 1204.52 L1782.96 1204.52 L1782.37 1204.52 L1781.79 1204.52 L1781.2 1204.52 L1780.61 1204.52 L1780.03 1204.52 L1779.44 1204.52 L1778.86 1204.52 L1778.27 1204.52 L1777.68 1204.52 L1777.1 1204.52 L1776.51 1204.52 L1775.92 1204.52 L1775.34 1204.52 L1774.75 1204.52 L1774.16 1204.52 L1773.58 1204.52 L1772.99 1204.52 L1772.4 1204.52 L1771.82 1204.52 L1771.23 1204.52 L1770.65 1204.52 L1770.06 1204.52 L1769.47 1204.52 L1768.89 1204.52 L1768.3 1204.52 L1767.71 1204.52 L1767.13 1204.52 L1766.54 1204.52 L1765.95 1204.52 L1765.37 1204.52 L1764.78 1204.52 L1764.19 1204.52 L1763.61 1204.52 L1763.02 1204.52 L1762.44 1204.52 L1761.85 1204.52 L1761.26 1204.52 L1760.68 1204.52 L1760.09 1204.52 L1759.5 1204.52 L1758.92 1204.52 L1758.33 1204.52 L1757.74 1204.52 L1757.16 1204.52 L1756.57 1204.52 L1755.99 1204.52 L1755.4 1204.52 L1754.81 1204.52 L1754.23 1204.52 L1753.64 1204.52 L1753.05 1204.52 L1752.47 1204.52 L1751.88 1204.52 L1751.29 1204.52 L1750.71 1204.52 L1750.12 1204.52 L1749.53 1204.52 L1748.95 1204.52 L1748.36 1204.52 L1747.78 1204.52 L1747.19 1204.52 L1746.6 1204.52 L1746.02 1204.52 L1745.43 1204.52 L1744.84 1204.52 L1744.26 1204.52 L1743.67 1204.52 L1743.08 1204.52 L1742.5 1204.52 L1741.91 1204.52 L1741.32 1204.52 L1740.74 1204.52 L1740.15 1204.52 L1739.57 1204.52 L1738.98 1204.52 L1738.39 1204.52 L1737.81 1204.52 L1737.22 1204.52 L1736.63 1204.52 L1736.05 1204.52 L1735.46 1204.52 L1734.87 1204.52 L1734.29 1204.52 L1733.7 1204.52 L1733.11 1204.52 L1732.53 1204.52 L1731.94 1204.52 L1731.36 1204.52 L1730.77 1204.52 L1730.18 1204.52 L1729.6 1204.52 L1729.01 1204.52 L1728.42 1204.52 L1727.84 1204.52 L1727.25 1204.52 L1726.66 1204.52 L1726.08 1204.52 L1725.49 1204.52 L1724.91 1204.52 L1724.32 1204.52 L1723.73 1204.52 L1723.15 1204.52 L1722.56 1204.52 L1721.97 1204.52 L1721.39 1204.52 L1720.8 1204.52 L1720.21 1204.52 L1719.63 1204.52 L1719.04 1204.52 L1718.45 1204.52 L1717.87 1204.52 L1717.28 1204.52 L1716.7 1204.52 L1716.11 1204.52 L1715.52 1204.52 L1714.94 1204.52 L1714.35 1204.52 L1713.76 1204.52 L1713.18 1204.52 L1712.59 1204.52 L1712 1204.52 L1711.42 1204.52 L1710.83 1204.52 L1710.24 1204.52 L1709.66 1204.52 L1709.07 1204.52 L1708.49 1204.52 L1707.9 1204.52 L1707.31 1204.52 L1706.73 1204.52 L1706.14 1204.52 L1705.55 1204.52 L1704.97 1204.52 L1704.38 1204.52 L1703.79 1204.52 L1703.21 1204.52 L1702.62 1204.52 L1702.04 1204.52 L1701.45 1204.52 L1700.86 1204.52 L1700.28 1204.52 L1699.69 1204.52 L1699.1 1204.52 L1698.52 1204.52 L1697.93 1204.52 L1697.34 1204.52 L1696.76 1204.52 L1696.17 1204.52 L1695.58 1204.52 L1695 1204.52 L1694.41 1204.52 L1693.83 1204.52 L1693.24 1204.52 L1692.65 1204.52 L1692.07 1204.52 L1691.48 1204.52 L1690.89 1204.52 L1690.31 1204.52 L1689.72 1204.52 L1689.13 1204.52 L1688.55 1204.52 L1687.96 1204.52 L1687.37 1204.52 L1686.79 1204.52 L1686.2 1204.52 L1685.62 1204.52 L1685.03 1204.52 L1684.44 1204.52 L1683.86 1204.52 L1683.27 1204.52 L1682.68 1204.52 L1682.1 1204.52 L1681.51 1204.52 L1680.92 1204.52 L1680.34 1204.52 L1679.75 1204.52 L1679.17 1204.52 L1678.58 1204.52 L1677.99 1204.52 L1677.41 1204.52 L1676.82 1204.52 L1676.23 1204.52 L1675.65 1204.52 L1675.06 1204.52 L1674.47 1204.52 L1673.89 1204.52 L1673.3 1204.52 L1672.71 1204.52 L1672.13 1204.52 L1671.54 1204.52 L1670.96 1204.52 L1670.37 1204.52 L1669.78 1204.52 L1669.2 1204.52 L1668.61 1204.52 L1668.02 1204.52 L1667.44 1204.52 L1666.85 1204.52 L1666.26 1204.52 L1665.68 1204.52 L1665.09 1204.52 L1664.5 1204.52 L1663.92 1204.52 L1663.33 1204.52 L1662.75 1204.52 L1662.16 1204.52 L1661.57 1204.52 L1660.99 1204.52 L1660.4 1204.52 L1659.81 1204.52 L1659.23 1204.52 L1658.64 1204.52 L1658.05 1204.52 L1657.47 1204.52 L1656.88 1204.52 L1656.29 1204.52 L1655.71 1204.52 L1655.12 1204.52 L1654.54 1204.52 L1653.95 1204.52 L1653.36 1204.52 L1652.78 1204.52 L1652.19 1204.52 L1651.6 1204.52 L1651.02 1204.52 L1650.43 1204.52 L1649.84 1204.52 L1649.26 1204.52 L1648.67 1204.52 L1648.09 1204.52 L1647.5 1204.52 L1646.91 1204.52 L1646.33 1204.52 L1645.74 1204.52 L1645.15 1204.52 L1644.57 1204.52 L1643.98 1204.52 L1643.39 1204.52 L1642.81 1204.52 L1642.22 1204.52 L1641.63 1204.52 L1641.05 1204.52 L1640.46 1204.52 L1639.88 1204.52 L1639.29 1204.52 L1638.7 1204.52 L1638.12 1204.52 L1637.53 1204.52 L1636.94 1204.52 L1636.36 1204.52 L1635.77 1204.52 L1635.18 1204.52 L1634.6 1204.52 L1634.01 1204.52 L1633.42 1204.52 L1632.84 1204.52 L1632.25 1204.52 L1631.67 1204.52 L1631.08 1204.52 L1630.49 1204.52 L1629.91 1204.52 L1629.32 1204.52 L1628.73 1204.52 L1628.15 1204.52 L1627.56 1204.52 L1626.97 1204.52 L1626.39 1204.52 L1625.8 1204.52 L1625.22 1204.52 L1624.63 1204.52 L1624.04 1204.52 L1623.46 1204.52 L1622.87 1204.52 L1622.28 1204.52 L1621.7 1204.52 L1621.11 1204.52 L1620.52 1204.52 L1619.94 1204.52 L1619.35 1204.52 L1618.76 1204.52 L1618.18 1204.52 L1617.59 1204.52 L1617.01 1204.52 L1616.42 1204.52 L1615.83 1204.52 L1615.25 1204.52 L1614.66 1204.52 L1614.07 1204.52 L1613.49 1204.52 L1612.9 1204.52 L1612.31 1204.52 L1611.73 1204.52 L1611.14 1204.52 L1610.55 1204.52 L1609.97 1204.52 L1609.38 1204.52 L1608.8 1204.52 L1608.21 1204.52 L1607.62 1204.52 L1607.04 1204.52 L1606.45 1204.52 L1605.86 1204.52 L1605.28 1204.52 L1604.69 1204.52 L1604.1 1204.52 L1603.52 1204.52 L1602.93 1204.52 L1602.34 1204.52 L1601.76 1204.52 L1601.17 1204.52 L1600.59 1204.52 L1600 1204.52 L1599.41 1204.52 L1598.83 1204.52 L1598.24 1204.52 L1597.65 1204.52 L1597.07 1204.52 L1596.48 1204.52 L1595.89 1204.52 L1595.31 1204.52 L1594.72 1204.52 L1594.14 1204.52 L1593.55 1204.52 L1592.96 1204.52 L1592.38 1204.52 L1591.79 1204.52 L1591.2 1204.52 L1590.62 1204.52 L1590.03 1204.52 L1589.44 1204.52 L1588.86 1204.52 L1588.27 1204.52 L1587.68 1204.52 L1587.1 1204.52 L1586.51 1204.52 L1585.93 1204.52 L1585.34 1204.52 L1584.75 1204.52 L1584.17 1204.52 L1583.58 1204.52 L1582.99 1204.52 L1582.41 1204.52 L1581.82 1204.52 L1581.23 1204.52 L1580.65 1204.52 L1580.06 1204.52 L1579.47 1204.52 L1578.89 1204.52 L1578.3 1204.52 L1577.72 1204.52 L1577.13 1204.52 L1576.54 1204.52 L1575.96 1204.52 L1575.37 1204.52 L1574.78 1204.52 L1574.2 1204.52 L1573.61 1204.52 L1573.02 1204.52 L1572.44 1204.52 L1571.85 1204.52 L1571.27 1204.52 L1570.68 1204.52 L1570.09 1204.52 L1569.51 1204.52 L1568.92 1204.52 L1568.33 1204.52 L1567.75 1204.52 L1567.16 1204.52 L1566.57 1204.52 L1565.99 1204.52 L1565.4 1204.52 L1564.81 1204.52 L1564.23 1204.52 L1563.64 1204.52 L1563.06 1204.52 L1562.47 1204.52 L1561.88 1204.52 L1561.3 1204.52 L1560.71 1204.52 L1560.12 1204.52 L1559.54 1204.52 L1558.95 1204.52 L1558.36 1204.52 L1557.78 1204.52 L1557.19 1204.52 L1556.6 1204.52 L1556.02 1204.52 L1555.43 1204.52 L1554.85 1204.52 L1554.26 1204.52 L1553.67 1204.52 L1553.09 1204.52 L1552.5 1204.52 L1551.91 1204.52 L1551.33 1204.52 L1550.74 1204.52 L1550.15 1204.52 L1549.57 1204.52 L1548.98 1204.52 L1548.4 1204.52 L1547.81 1204.52 L1547.22 1204.52 L1546.64 1204.52 L1546.05 1204.52 L1545.46 1204.52 L1544.88 1204.52 L1544.29 1204.52 L1543.7 1204.52 L1543.12 1204.52 L1542.53 1204.52 L1541.94 1204.52 L1541.36 1204.52 L1540.77 1204.52 L1540.19 1204.52 L1539.6 1204.52 L1539.01 1204.52 L1538.43 1204.52 L1537.84 1204.52 L1537.25 1204.52 L1536.67 1204.52 L1536.08 1204.52 L1535.49 1204.52 L1534.91 1204.52 L1534.32 1204.52 L1533.73 1204.52 L1533.15 1204.52 L1532.56 1204.52 L1531.98 1204.52 L1531.39 1204.52 L1530.8 1204.52 L1530.22 1204.52 L1529.63 1204.52 L1529.04 1204.52 L1528.46 1204.52 L1527.87 1204.52 L1527.28 1204.52 L1526.7 1204.52 L1526.11 1204.52 L1525.52 1204.52 L1524.94 1204.52 L1524.35 1204.52 L1523.77 1204.52 L1523.18 1204.52 L1522.59 1204.52 L1522.01 1204.52 L1521.42 1204.52 L1520.83 1204.52 L1520.25 1204.52 L1519.66 1204.52 L1519.07 1204.52 L1518.49 1204.52 L1517.9 1204.52 L1517.32 1204.52 L1516.73 1204.52 L1516.14 1204.52 L1515.56 1204.52 L1514.97 1204.52 L1514.38 1204.52 L1513.8 1204.52 L1513.21 1204.52 L1512.62 1204.52 L1512.04 1204.52 L1511.45 1204.52 L1510.86 1204.52 L1510.28 1204.52 L1509.69 1204.52 L1509.11 1204.52 L1508.52 1204.52 L1507.93 1204.52 L1507.35 1204.52 L1506.76 1204.52 L1506.17 1204.52 L1505.59 1204.52 L1505 1204.52 L1504.41 1204.52 L1503.83 1204.52 L1503.24 1204.52 L1502.65 1204.52 L1502.07 1204.52 L1501.48 1204.52 L1500.9 1204.52 L1500.31 1204.52 L1499.72 1204.52 L1499.14 1204.52 L1498.55 1204.52 L1497.96 1204.52 L1497.38 1204.52 L1496.79 1204.52 L1496.2 1204.52 L1495.62 1204.52 L1495.03 1204.52 L1494.45 1204.52 L1493.86 1204.52 L1493.27 1204.52 L1492.69 1204.52 L1492.1 1204.52 L1491.51 1204.52 L1490.93 1204.52 L1490.34 1204.52 L1489.75 1204.52 L1489.17 1204.52 L1488.58 1204.52 L1487.99 1204.52 L1487.41 1204.52 L1486.82 1204.52 L1486.24 1204.52 L1485.65 1204.52 L1485.06 1204.52 L1484.48 1204.52 L1483.89 1204.52 L1483.3 1204.52 L1482.72 1204.52 L1482.13 1204.52 L1481.54 1204.52 L1480.96 1204.52 L1480.37 1204.52 L1479.78 1204.52 L1479.2 1204.52 L1478.61 1204.52 L1478.03 1204.52 L1477.44 1204.52 L1476.85 1204.52 L1476.27 1204.52 L1475.68 1204.52 L1475.09 1204.52 L1474.51 1204.52 L1473.92 1204.52 L1473.33 1204.52 L1472.75 1204.52 L1472.16 1204.52 L1471.57 1204.52 L1470.99 1204.52 L1470.4 1204.52 L1469.82 1204.52 L1469.23 1204.52 L1468.64 1204.52 L1468.06 1204.52 L1467.47 1204.52 L1466.88 1204.52 L1466.3 1204.52 L1465.71 1204.52 L1465.12 1204.52 L1464.54 1204.52 L1463.95 1204.52 L1463.37 1204.52 L1462.78 1204.52 L1462.19 1204.52 L1461.61 1204.52 L1461.02 1204.52 L1460.43 1204.52 L1459.85 1204.52 L1459.26 1204.52 L1458.67 1204.52 L1458.09 1204.52 L1457.5 1204.52 L1456.91 1204.52 L1456.33 1204.52 L1455.74 1204.52 L1455.16 1204.52 L1454.57 1204.52 L1453.98 1204.52 L1453.4 1204.52 L1452.81 1204.52 L1452.22 1204.52 L1451.64 1204.52 L1451.05 1204.52 L1450.46 1204.52 L1449.88 1204.52 L1449.29 1204.52 L1448.7 1204.52 L1448.12 1204.52 L1447.53 1204.52 L1446.95 1204.52 L1446.36 1204.52 L1445.77 1204.52 L1445.19 1204.52 L1444.6 1204.52 L1444.01 1204.52 L1443.43 1204.52 L1442.84 1204.52 L1442.25 1204.52 L1441.67 1204.52 L1441.08 1204.52 L1440.5 1204.52 L1439.91 1204.52 L1439.32 1204.52 L1438.74 1204.52 L1438.15 1204.52 L1437.56 1204.52 L1436.98 1204.52 L1436.39 1204.52 L1435.8 1204.52 L1435.22 1204.52 L1434.63 1204.52 L1434.04 1204.52 L1433.46 1204.52 L1432.87 1204.52 L1432.29 1204.52 L1431.7 1204.52 L1431.11 1204.52 L1430.53 1204.52 L1429.94 1204.52 L1429.35 1204.52 L1428.77 1204.52 L1428.18 1204.52 L1427.59 1204.52 L1427.01 1204.52 L1426.42 1204.52 L1425.83 1204.52 L1425.25 1204.52 L1424.66 1204.52 L1424.08 1204.52 L1423.49 1204.52 L1422.9 1204.52 L1422.32 1204.52 L1421.73 1204.52 L1421.14 1204.52 L1420.56 1204.52 L1419.97 1204.52 L1419.38 1204.52 L1418.8 1204.52 L1418.21 1204.52 L1417.63 1204.52 L1417.04 1204.52 L1416.45 1204.52 L1415.87 1204.52 L1415.28 1204.52 L1414.69 1204.52 L1414.11 1204.52 L1413.52 1204.52 L1412.93 1204.52 L1412.35 1204.52 L1411.76 1204.52 L1411.17 1204.52 L1410.59 1204.52 L1410 1204.52 L1409.42 1204.52 L1408.83 1204.52 L1408.24 1204.52 L1407.66 1204.52 L1407.07 1204.52 L1406.48 1204.52 L1405.9 1204.52 L1405.31 1204.52 L1404.72 1204.52 L1404.14 1204.52 L1403.55 1204.52 L1402.96 1204.52 L1402.38 1204.52 L1401.79 1204.52 L1401.21 1204.52 L1400.62 1204.52 L1400.03 1204.52 L1399.45 1204.52 L1398.86 1204.52 L1398.27 1204.52 L1397.69 1204.52 L1397.1 1204.52 L1396.51 1204.52 L1395.93 1204.52 L1395.34 1204.52 L1394.75 1204.52 L1394.17 1204.52 L1393.58 1204.52 L1393 1204.52 L1392.41 1204.52 L1391.82 1204.52 L1391.24 1204.52 L1390.65 1204.52 L1390.06 1204.52 L1389.48 1204.52 L1388.89 1204.52 L1388.3 1204.52 L1387.72 1204.52 L1387.13 1204.52 L1386.55 1204.52 L1385.96 1204.52 L1385.37 1204.52 L1384.79 1204.52 L1384.2 1204.52 L1383.61 1204.52 L1383.03 1204.52 L1382.44 1204.52 L1381.85 1204.52 L1381.27 1204.52 L1380.68 1204.52 L1380.09 1204.52 L1379.51 1204.52 L1378.92 1204.52 L1378.34 1204.52 L1377.75 1204.52 L1377.16 1204.52 L1376.58 1204.52 L1375.99 1204.52 L1375.4 1204.52 L1374.82 1204.52 L1374.23 1204.52 L1373.64 1204.52 L1373.06 1204.52 L1372.47 1204.52 L1371.88 1204.52 L1371.3 1204.52 L1370.71 1204.52 L1370.13 1204.52 L1369.54 1204.52 L1368.95 1204.52 L1368.37 1204.52 L1367.78 1204.52 L1367.19 1204.52 L1366.61 1204.52 L1366.02 1204.52 L1365.43 1204.52 L1364.85 1204.52 L1364.26 1204.52 L1363.68 1204.52 L1363.09 1204.52 L1362.5 1204.52 L1361.92 1204.52 L1361.33 1204.52 L1360.74 1204.52 L1360.16 1204.52 L1359.57 1204.52 L1358.98 1204.52 L1358.4 1204.52 L1357.81 1204.52 L1357.22 1204.52 L1356.64 1204.52 L1356.05 1204.52 L1355.47 1204.52 L1354.88 1204.52 L1354.29 1204.52 L1353.71 1204.52 L1353.12 1204.52 L1352.53 1204.52 L1351.95 1204.52 L1351.36 1204.52 L1350.77 1204.52 L1350.19 1204.52 L1349.6 1204.52 L1349.01 1204.52 L1348.43 1204.52 L1347.84 1204.52 L1347.26 1204.52 L1346.67 1204.52 L1346.08 1204.52 L1345.5 1204.52 L1344.91 1204.52 L1344.32 1204.52 L1343.74 1204.52 L1343.15 1204.52 L1342.56 1204.52 L1341.98 1204.52 L1341.39 1204.52 L1340.8 1204.52 L1340.22 1204.52 L1339.63 1204.52 L1339.05 1204.52 L1338.46 1204.52 L1337.87 1204.52 L1337.29 1204.52 L1336.7 1204.52 L1336.11 1204.52 L1335.53 1204.52 L1334.94 1204.52 L1334.35 1204.52 L1333.77 1204.52 L1333.18 1204.52 L1332.6 1204.52 L1332.01 1204.52 L1331.42 1204.52 L1330.84 1204.52 L1330.25 1204.52 L1329.66 1204.52 L1329.08 1204.52 L1328.49 1204.52 L1327.9 1204.52 L1327.32 1204.52 L1326.73 1204.52 L1326.14 1204.52 L1325.56 1204.52 L1324.97 1204.52 L1324.39 1204.52 L1323.8 1204.52 L1323.21 1204.52 L1322.63 1204.52 L1322.04 1204.52 L1321.45 1204.52 L1320.87 1204.52 L1320.28 1204.52 L1319.69 1204.52 L1319.11 1204.52 L1318.52 1204.52 L1317.93 1204.52 L1317.35 1204.52 L1316.76 1204.52 L1316.18 1204.52 L1315.59 1204.52 L1315 1204.52 L1314.42 1204.52 L1313.83 1204.52 L1313.24 1204.52 L1312.66 1204.52 L1312.07 1204.52 L1311.48 1204.52 L1310.9 1204.52 L1310.31 1204.52 L1309.73 1204.52 L1309.14 1204.52 L1308.55 1204.52 L1307.97 1204.52 L1307.38 1204.52 L1306.79 1204.52 L1306.21 1204.52 L1305.62 1204.52 L1305.03 1204.52 L1304.45 1204.52 L1303.86 1204.52 L1303.27 1204.52 L1302.69 1204.52 L1302.1 1204.52 L1301.52 1204.52 L1300.93 1204.52 L1300.34 1204.52 L1299.76 1204.52 L1299.17 1204.52 L1298.58 1204.52 L1298 1204.52 L1297.41 1204.52 L1296.82 1204.52 L1296.24 1204.52 L1295.65 1204.52 L1295.06 1204.52 L1294.48 1204.52 L1293.89 1204.52 L1293.31 1204.52 L1292.72 1204.52 L1292.13 1204.52 L1291.55 1204.52 L1290.96 1204.52 L1290.37 1204.52 L1289.79 1204.52 L1289.2 1204.52 L1288.61 1204.52 L1288.03 1204.52 L1287.44 1204.52 L1286.86 1204.52 L1286.27 1204.52 L1285.68 1204.52 L1285.1 1204.52 L1284.51 1204.52 L1283.92 1204.52 L1283.34 1204.52 L1282.75 1204.52 L1282.16 1204.52 L1281.58 1204.52 L1280.99 1204.52 L1280.4 1204.52 L1279.82 1204.52 L1279.23 1204.52 L1278.65 1204.52 L1278.06 1204.52 L1277.47 1204.52 L1276.89 1204.52 L1276.3 1204.52 L1275.71 1204.52 L1275.13 1204.52 L1274.54 1204.52 L1273.95 1204.52 L1273.37 1204.52 L1272.78 1204.52 L1272.19 1204.52 L1271.61 1204.52 L1271.02 1204.52 L1270.44 1204.52 L1269.85 1204.52 L1269.26 1204.52 L1268.68 1204.52 L1268.09 1204.52 L1267.5 1204.52 L1266.92 1204.52 L1266.33 1204.52 L1265.74 1204.52 L1265.16 1204.52 L1264.57 1204.52 L1263.98 1204.52 L1263.4 1204.52 L1262.81 1204.52 L1262.23 1204.52 L1261.64 1204.52 L1261.05 1204.52 L1260.47 1204.52 L1259.88 1204.52 L1259.29 1204.52 L1258.71 1204.52 L1258.12 1204.52 L1257.53 1204.52 L1256.95 1204.52 L1256.36 1204.52 L1255.78 1204.52 L1255.19 1204.52 L1254.6 1204.52 L1254.02 1204.52 L1253.43 1204.52 L1252.84 1204.52 L1252.26 1204.52 L1251.67 1204.52 L1251.08 1204.52 L1250.5 1204.52 L1249.91 1204.52 L1249.32 1204.52 L1248.74 1204.52 L1248.15 1204.52 L1247.57 1204.52 L1246.98 1204.52 L1246.39 1204.52 L1245.81 1204.52 L1245.22 1204.52 L1244.63 1204.52 L1244.05 1204.52 L1243.46 1204.52 L1242.87 1204.52 L1242.29 1204.52 L1241.7 1204.52 L1241.11 1204.52 L1240.53 1204.52 L1239.94 1204.52 L1239.36 1204.52 L1238.77 1204.52 L1238.18 1204.52 L1237.6 1204.52 L1237.01 1204.52 L1236.42 1204.52 L1235.84 1204.52 L1235.25 1204.52 L1234.66 1204.52 L1234.08 1204.52 L1233.49 1204.52 L1232.91 1204.52 L1232.32 1204.52 L1231.73 1204.52 L1231.15 1204.52 L1230.56 1204.52 L1229.97 1204.52 L1229.39 1204.52 L1228.8 1204.52 L1228.21 1204.52 L1227.63 1204.52 L1227.04 1204.52 L1226.45 1204.52 L1225.87 1204.52 L1225.28 1204.52 L1224.7 1204.52 L1224.11 1204.52 L1223.52 1204.52 L1222.94 1204.52 L1222.35 1204.52 L1221.76 1204.52 L1221.18 1204.52 L1220.59 1204.52 L1220 1204.52 L1219.42 1204.52 L1218.83 1204.52 L1218.24 1204.52 L1217.66 1204.52 L1217.07 1204.52 L1216.49 1204.52 L1215.9 1204.52 L1215.31 1204.52 L1214.73 1204.52 L1214.14 1204.52 L1213.55 1204.52 L1212.97 1204.52 L1212.38 1204.52 L1211.79 1204.52 L1211.21 1204.52 L1210.62 1204.52 L1210.03 1204.52 L1209.45 1204.52 L1208.86 1204.52 L1208.28 1204.52 L1207.69 1204.52 L1207.1 1204.52 L1206.52 1204.52 L1205.93 1204.52 L1205.34 1204.52 L1204.76 1204.52 L1204.17 1204.52 L1203.58 1204.52 L1203 1204.52 L1202.41 1204.52 L1201.83 1204.52 L1201.24 1204.52 L1200.65 1204.52 L1200.07 1204.52 L1199.48 1204.52 L1198.89 1204.52 L1198.31 1204.52 L1197.72 1204.52 L1197.13 1204.52 L1196.55 1204.52 L1195.96 1204.52 L1195.37 1204.52 L1194.79 1204.52 L1194.2 1204.52 L1193.62 1204.52 L1193.03 1204.52 L1192.44 1204.52 L1191.86 1204.52 L1191.27 1204.52 L1190.68 1204.52 L1190.1 1204.52 L1189.51 1204.52 L1188.92 1204.52 L1188.34 1204.52 L1187.75 1204.52 L1187.16 1204.52 L1186.58 1204.52 L1185.99 1204.52 L1185.41 1204.52 L1184.82 1204.52 L1184.23 1204.52 L1183.65 1204.52 L1183.06 1204.52 L1182.47 1204.52 L1181.89 1204.52 L1181.3 1204.52 L1180.71 1204.52 L1180.13 1204.52 L1179.54 1204.52 L1178.96 1204.52 L1178.37 1204.52 L1177.78 1204.52 L1177.2 1204.52 L1176.61 1204.52 L1176.02 1204.52 L1175.44 1204.52 L1174.85 1204.52 L1174.26 1204.52 L1173.68 1204.52 L1173.09 1204.52 L1172.5 1204.52 L1171.92 1204.52 L1171.33 1204.52 L1170.75 1204.52 L1170.16 1204.52 L1169.57 1204.52 L1168.99 1204.52 L1168.4 1204.52 L1167.81 1204.52 L1167.23 1204.52 L1166.64 1204.52 L1166.05 1204.52 L1165.47 1204.52 L1164.88 1204.52 L1164.29 1204.52 L1163.71 1204.52 L1163.12 1204.52 L1162.54 1204.52 L1161.95 1204.52 L1161.36 1204.52 L1160.78 1204.52 L1160.19 1204.52 L1159.6 1204.52 L1159.02 1204.52 L1158.43 1204.52 L1157.84 1204.52 L1157.26 1204.52 L1156.67 1204.52 L1156.09 1204.52 L1155.5 1204.52 L1154.91 1204.52 L1154.33 1204.52 L1153.74 1204.52 L1153.15 1204.52 L1152.57 1204.52 L1151.98 1204.52 L1151.39 1204.52 L1150.81 1204.52 L1150.22 1204.52 L1149.63 1204.52 L1149.05 1204.52 L1148.46 1204.52 L1147.88 1204.52 L1147.29 1204.52 L1146.7 1204.52 L1146.12 1204.52 L1145.53 1204.52 L1144.94 1204.52 L1144.36 1204.52 L1143.77 1204.52 L1143.18 1204.52 L1142.6 1204.52 L1142.01 1204.52 L1141.42 1204.52 L1140.84 1204.52 L1140.25 1204.52 L1139.67 1204.52 L1139.08 1204.52 L1138.49 1204.52 L1137.91 1204.52 L1137.32 1204.52 L1136.73 1204.52 L1136.15 1204.52 L1135.56 1204.52 L1134.97 1204.52 L1134.39 1204.52 L1133.8 1204.52 L1133.21 1204.52 L1132.63 1204.52 L1132.04 1204.52 L1131.46 1204.52 L1130.87 1204.52 L1130.28 1204.52 L1129.7 1204.52 L1129.11 1204.52 L1128.52 1204.52 L1127.94 1204.52 L1127.35 1204.52 L1126.76 1204.52 L1126.18 1204.52 L1125.59 1204.52 L1125.01 1204.52 L1124.42 1204.52 L1123.83 1204.52 L1123.25 1204.52 L1122.66 1204.52 L1122.07 1204.52 L1121.49 1204.52 L1120.9 1204.52 L1120.31 1204.52 L1119.73 1204.52 L1119.14 1204.52 L1118.55 1204.52 L1117.97 1204.52 L1117.38 1204.52 L1116.8 1204.52 L1116.21 1204.52 L1115.62 1204.52 L1115.04 1204.52 L1114.45 1204.52 L1113.86 1204.52 L1113.28 1204.52 L1112.69 1204.52 L1112.1 1204.52 L1111.52 1204.52 L1110.93 1204.52 L1110.34 1204.52 L1109.76 1204.52 L1109.17 1204.52 L1108.59 1204.52 L1108 1204.52 L1107.41 1204.52 L1106.83 1204.52 L1106.24 1204.52 L1105.65 1204.52 L1105.07 1204.52 L1104.48 1204.52 L1103.89 1204.52 L1103.31 1204.52 L1102.72 1204.52 L1102.14 1204.52 L1101.55 1204.52 L1100.96 1204.52 L1100.38 1204.52 L1099.79 1204.52 L1099.2 1204.52 L1098.62 1204.52 L1098.03 1204.52 L1097.44 1204.52 L1096.86 1204.52 L1096.27 1204.52 L1095.68 1204.52 L1095.1 1204.52 L1094.51 1204.52 L1093.93 1204.52 L1093.34 1204.52 L1092.75 1204.52 L1092.17 1204.52 L1091.58 1204.52 L1090.99 1204.52 L1090.41 1204.52 L1089.82 1204.52 L1089.23 1204.52 L1088.65 1204.52 L1088.06 1204.52 L1087.47 1204.52 L1086.89 1204.52 L1086.3 1204.52 L1085.72 1204.52 L1085.13 1204.52 L1084.54 1204.52 L1083.96 1204.52 L1083.37 1204.52 L1082.78 1204.52 L1082.2 1204.52 L1081.61 1204.52 L1081.02 1204.52 L1080.44 1204.52 L1079.85 1204.52 L1079.26 1204.52 L1078.68 1204.52 L1078.09 1204.52 L1077.51 1204.52 L1076.92 1204.52 L1076.33 1204.52 L1075.75 1204.52 L1075.16 1204.52 L1074.57 1204.52 L1073.99 1204.52 L1073.4 1204.52 L1072.81 1204.52 L1072.23 1204.52 L1071.64 1204.52 L1071.06 1204.52 L1070.47 1204.52 L1069.88 1204.52 L1069.3 1204.52 L1068.71 1204.52 L1068.12 1204.52 L1067.54 1204.52 L1066.95 1204.52 L1066.36 1204.52 L1065.78 1204.52 L1065.19 1204.52 L1064.6 1204.52 L1064.02 1204.52 L1063.43 1204.52 L1062.85 1204.52 L1062.26 1204.52 L1061.67 1204.52 L1061.09 1204.52 L1060.5 1204.52 L1059.91 1204.52 L1059.33 1204.52 L1058.74 1204.52 L1058.15 1204.52 L1057.57 1204.52 L1056.98 1204.52 L1056.39 1204.52 L1055.81 1204.52 L1055.22 1204.52 L1054.64 1204.52 L1054.05 1204.52 L1053.46 1204.52 L1052.88 1204.52 L1052.29 1204.52 L1051.7 1204.52 L1051.12 1204.52 L1050.53 1204.52 L1049.94 1204.52 L1049.36 1204.52 L1048.77 1204.52 L1048.19 1204.52 L1047.6 1204.52 L1047.01 1204.52 L1046.43 1204.52 L1045.84 1204.52 L1045.25 1204.52 L1044.67 1204.52 L1044.08 1204.52 L1043.49 1204.52 L1042.91 1204.52 L1042.32 1204.52 L1041.73 1204.52 L1041.15 1204.52 L1040.56 1204.52 L1039.98 1204.52 L1039.39 1204.52 L1038.8 1204.52 L1038.22 1204.52 L1037.63 1204.52 L1037.04 1204.52 L1036.46 1204.52 L1035.87 1204.52 L1035.28 1204.52 L1034.7 1204.52 L1034.11 1204.52 L1033.52 1204.52 L1032.94 1204.52 L1032.35 1204.52 L1031.77 1204.52 L1031.18 1204.52 L1030.59 1204.52 L1030.01 1204.52 L1029.42 1204.52 L1028.83 1204.52 L1028.25 1204.52 L1027.66 1204.52 L1027.07 1204.52 L1026.49 1204.52 L1025.9 1204.52 L1025.32 1204.52 L1024.73 1204.52 L1024.14 1204.52 L1023.56 1204.52 L1022.97 1204.52 L1022.38 1204.52 L1021.8 1204.52 L1021.21 1204.52 L1020.62 1204.52 L1020.04 1204.52 L1019.45 1204.52 L1018.86 1204.52 L1018.28 1204.52 L1017.69 1204.52 L1017.11 1204.52 L1016.52 1204.52 L1015.93 1204.52 L1015.35 1204.52 L1014.76 1204.52 L1014.17 1204.52 L1013.59 1204.52 L1013 1204.52 L1012.41 1204.52 L1011.83 1204.52 L1011.24 1204.52 L1010.65 1204.52 L1010.07 1204.52 L1009.48 1204.52 L1008.9 1204.52 L1008.31 1204.52 L1007.72 1204.52 L1007.14 1204.52 L1006.55 1204.52 L1005.96 1204.52 L1005.38 1204.52 L1004.79 1204.52 L1004.2 1204.52 L1003.62 1204.52 L1003.03 1204.52 L1002.44 1204.52 L1001.86 1204.52 L1001.27 1204.52 L1000.69 1204.52 L1000.1 1204.52 L999.513 1204.52 L998.926 1204.52 L998.34 1204.52 L997.754 1204.52 L997.167 1204.52 L996.581 1204.52 L995.994 1204.52 L995.408 1204.52 L994.822 1204.52 L994.235 1204.52 L993.649 1204.52 L993.062 1204.52 L992.476 1204.52 L991.889 1204.52 L991.303 1204.52 L990.717 1204.52 L990.13 1204.52 L989.544 1204.52 L988.957 1204.52 L988.371 1204.52 L987.785 1204.52 L987.198 1204.52 L986.612 1204.52 L986.025 1204.52  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.84 986.612,1204.84 987.198,1204.84 987.785,1204.84 988.371,1204.84 988.957,1204.84 989.544,1204.84 990.13,1204.84 990.717,1204.84 991.303,1204.84 991.889,1204.84 992.476,1204.84 993.062,1204.84 993.649,1204.84 994.235,1204.84 994.822,1204.84 995.408,1204.84 995.994,1204.84 996.581,1204.84 997.167,1204.84 997.754,1204.84 998.34,1204.84 998.926,1204.84 999.513,1204.84 1000.1,1204.84 1000.69,1204.84 1001.27,1204.84 1001.86,1204.84 1002.44,1204.84 1003.03,1204.84 1003.62,1204.84 1004.2,1204.84 1004.79,1204.84 1005.38,1204.84 1005.96,1204.84 1006.55,1204.84 1007.14,1204.84 1007.72,1204.84 1008.31,1204.84 1008.9,1204.84 1009.48,1204.84 1010.07,1204.84 1010.65,1204.84 1011.24,1204.84 1011.83,1204.84 1012.41,1204.84 1013,1204.84 1013.59,1204.84 1014.17,1204.84 1014.76,1204.84 1015.35,1204.84 1015.93,1204.84 1016.52,1204.84 1017.11,1204.84 1017.69,1204.84 1018.28,1204.84 1018.86,1204.84 1019.45,1204.84 1020.04,1204.84 1020.62,1204.84 1021.21,1204.84 1021.8,1204.84 1022.38,1204.84 1022.97,1204.84 1023.56,1204.84 1024.14,1204.84 1024.73,1204.84 1025.32,1204.84 1025.9,1204.84 1026.49,1204.84 1027.07,1204.84 1027.66,1204.84 1028.25,1204.84 1028.83,1204.84 1029.42,1204.84 1030.01,1204.84 1030.59,1204.84 1031.18,1204.84 1031.77,1204.84 1032.35,1204.84 1032.94,1204.84 1033.52,1204.84 1034.11,1204.84 1034.7,1204.84 1035.28,1204.84 1035.87,1204.84 1036.46,1204.84 1037.04,1204.84 1037.63,1204.84 1038.22,1204.84 1038.8,1204.84 1039.39,1204.84 1039.98,1204.84 1040.56,1204.84 1041.15,1204.84 1041.73,1204.84 1042.32,1204.84 1042.91,1204.84 1043.49,1204.84 1044.08,1204.84 1044.67,1204.84 1045.25,1204.84 1045.84,1204.84 1046.43,1204.84 1047.01,1204.84 1047.6,1204.84 1048.19,1204.84 1048.77,1204.84 1049.36,1204.84 1049.94,1204.84 1050.53,1204.84 1051.12,1204.84 1051.7,1204.84 1052.29,1204.84 1052.88,1204.84 1053.46,1204.84 1054.05,1204.84 1054.64,1204.84 1055.22,1204.84 1055.81,1204.84 1056.39,1204.84 1056.98,1204.84 1057.57,1204.84 1058.15,1204.84 1058.74,1204.84 1059.33,1204.84 1059.91,1204.84 1060.5,1204.84 1061.09,1204.84 1061.67,1204.84 1062.26,1204.84 1062.85,1204.84 1063.43,1204.84 1064.02,1204.84 1064.6,1204.84 1065.19,1204.84 1065.78,1204.84 1066.36,1204.84 1066.95,1204.84 1067.54,1204.84 1068.12,1204.84 1068.71,1204.84 1069.3,1204.84 1069.88,1204.84 1070.47,1204.84 1071.06,1204.84 1071.64,1204.84 1072.23,1204.84 1072.81,1204.84 1073.4,1204.84 1073.99,1204.84 1074.57,1204.84 1075.16,1204.84 1075.75,1204.84 1076.33,1204.84 1076.92,1204.84 1077.51,1204.84 1078.09,1204.84 1078.68,1204.84 1079.26,1204.84 1079.85,1204.84 1080.44,1204.84 1081.02,1204.84 1081.61,1204.84 1082.2,1204.84 1082.78,1204.84 1083.37,1204.84 1083.96,1204.84 1084.54,1204.84 1085.13,1204.84 1085.72,1204.84 1086.3,1204.84 1086.89,1204.84 1087.47,1204.84 1088.06,1204.84 1088.65,1204.84 1089.23,1204.84 1089.82,1204.84 1090.41,1204.84 1090.99,1204.84 1091.58,1204.84 1092.17,1204.84 1092.75,1204.84 1093.34,1204.84 1093.93,1204.84 1094.51,1204.84 1095.1,1204.84 1095.68,1204.84 1096.27,1204.84 1096.86,1204.84 1097.44,1204.84 1098.03,1204.84 1098.62,1204.84 1099.2,1204.84 1099.79,1204.84 1100.38,1204.84 1100.96,1204.84 1101.55,1204.84 1102.14,1204.84 1102.72,1204.84 1103.31,1204.84 1103.89,1204.84 1104.48,1204.84 1105.07,1204.84 1105.65,1204.84 1106.24,1204.84 1106.83,1204.84 1107.41,1204.84 1108,1204.84 1108.59,1204.84 1109.17,1204.84 1109.76,1204.84 1110.34,1204.84 1110.93,1204.84 1111.52,1204.84 1112.1,1204.84 1112.69,1204.84 1113.28,1204.84 1113.86,1204.84 1114.45,1204.84 1115.04,1204.84 1115.62,1204.84 1116.21,1204.84 1116.8,1204.84 1117.38,1204.84 1117.97,1204.84 1118.55,1204.84 1119.14,1204.84 1119.73,1204.84 1120.31,1204.84 1120.9,1204.84 1121.49,1204.84 1122.07,1204.84 1122.66,1204.84 1123.25,1204.84 1123.83,1204.84 1124.42,1204.84 1125.01,1204.84 1125.59,1204.84 1126.18,1204.84 1126.76,1204.84 1127.35,1204.84 1127.94,1204.84 1128.52,1204.84 1129.11,1204.84 1129.7,1204.84 1130.28,1204.84 1130.87,1204.84 1131.46,1204.84 1132.04,1204.84 1132.63,1204.84 1133.21,1204.84 1133.8,1204.84 1134.39,1204.84 1134.97,1204.84 1135.56,1204.84 1136.15,1204.84 1136.73,1204.84 1137.32,1204.84 1137.91,1204.84 1138.49,1204.84 1139.08,1204.84 1139.67,1204.84 1140.25,1204.84 1140.84,1204.84 1141.42,1204.84 1142.01,1204.84 1142.6,1204.84 1143.18,1204.84 1143.77,1204.84 1144.36,1204.84 1144.94,1204.84 1145.53,1204.84 1146.12,1204.84 1146.7,1204.84 1147.29,1204.84 1147.88,1204.84 1148.46,1204.84 1149.05,1204.84 1149.63,1204.84 1150.22,1204.84 1150.81,1204.84 1151.39,1204.84 1151.98,1204.84 1152.57,1204.84 1153.15,1204.84 1153.74,1204.84 1154.33,1204.84 1154.91,1204.84 1155.5,1204.84 1156.09,1204.84 1156.67,1204.84 1157.26,1204.84 1157.84,1204.84 1158.43,1204.84 1159.02,1204.84 1159.6,1204.84 1160.19,1204.84 1160.78,1204.84 1161.36,1204.84 1161.95,1204.84 1162.54,1204.84 1163.12,1204.84 1163.71,1204.84 1164.29,1204.84 1164.88,1204.84 1165.47,1204.84 1166.05,1204.84 1166.64,1204.84 1167.23,1204.84 1167.81,1204.84 1168.4,1204.84 1168.99,1204.84 1169.57,1204.84 1170.16,1204.84 1170.75,1204.84 1171.33,1204.84 1171.92,1204.84 1172.5,1204.84 1173.09,1204.84 1173.68,1204.84 1174.26,1204.84 1174.85,1204.84 1175.44,1204.84 1176.02,1204.84 1176.61,1204.84 1177.2,1204.84 1177.78,1204.84 1178.37,1204.84 1178.96,1204.84 1179.54,1204.84 1180.13,1204.84 1180.71,1204.84 1181.3,1204.84 1181.89,1204.84 1182.47,1204.84 1183.06,1204.84 1183.65,1204.84 1184.23,1204.84 1184.82,1204.84 1185.41,1204.84 1185.99,1204.84 1186.58,1204.84 1187.16,1204.84 1187.75,1204.84 1188.34,1204.84 1188.92,1204.84 1189.51,1204.84 1190.1,1204.84 1190.68,1204.84 1191.27,1204.84 1191.86,1204.84 1192.44,1204.84 1193.03,1204.84 1193.62,1204.84 1194.2,1204.84 1194.79,1204.84 1195.37,1204.84 1195.96,1204.84 1196.55,1204.84 1197.13,1204.84 1197.72,1204.84 1198.31,1204.84 1198.89,1204.84 1199.48,1204.84 1200.07,1204.84 1200.65,1204.84 1201.24,1204.84 1201.83,1204.84 1202.41,1204.84 1203,1204.84 1203.58,1204.84 1204.17,1204.84 1204.76,1204.84 1205.34,1204.84 1205.93,1204.84 1206.52,1204.84 1207.1,1204.84 1207.69,1204.84 1208.28,1204.84 1208.86,1204.84 1209.45,1204.84 1210.03,1204.84 1210.62,1204.84 1211.21,1204.84 1211.79,1204.84 1212.38,1204.84 1212.97,1204.84 1213.55,1204.84 1214.14,1204.84 1214.73,1204.84 1215.31,1204.84 1215.9,1204.84 1216.49,1204.84 1217.07,1204.84 1217.66,1204.84 1218.24,1204.84 1218.83,1204.84 1219.42,1204.84 1220,1204.84 1220.59,1204.84 1221.18,1204.84 1221.76,1204.84 1222.35,1204.84 1222.94,1204.84 1223.52,1204.84 1224.11,1204.84 1224.7,1204.84 1225.28,1204.84 1225.87,1204.84 1226.45,1204.84 1227.04,1204.84 1227.63,1204.84 1228.21,1204.84 1228.8,1204.84 1229.39,1204.84 1229.97,1204.84 1230.56,1204.84 1231.15,1204.84 1231.73,1204.84 1232.32,1204.84 1232.91,1204.84 1233.49,1204.84 1234.08,1204.84 1234.66,1204.84 1235.25,1204.84 1235.84,1204.84 1236.42,1204.84 1237.01,1204.84 1237.6,1204.84 1238.18,1204.84 1238.77,1204.84 1239.36,1204.84 1239.94,1204.84 1240.53,1204.84 1241.11,1204.84 1241.7,1204.84 1242.29,1204.84 1242.87,1204.84 1243.46,1204.84 1244.05,1204.84 1244.63,1204.84 1245.22,1204.84 1245.81,1204.84 1246.39,1204.84 1246.98,1204.84 1247.57,1204.84 1248.15,1204.84 1248.74,1204.84 1249.32,1204.84 1249.91,1204.84 1250.5,1204.84 1251.08,1204.84 1251.67,1204.84 1252.26,1204.84 1252.84,1204.84 1253.43,1204.84 1254.02,1204.84 1254.6,1204.84 1255.19,1204.84 1255.78,1204.84 1256.36,1204.84 1256.95,1204.84 1257.53,1204.84 1258.12,1204.84 1258.71,1204.84 1259.29,1204.84 1259.88,1204.84 1260.47,1204.84 1261.05,1204.84 1261.64,1204.84 1262.23,1204.84 1262.81,1204.84 1263.4,1204.84 1263.98,1204.84 1264.57,1204.84 1265.16,1204.84 1265.74,1204.84 1266.33,1204.84 1266.92,1204.84 1267.5,1204.84 1268.09,1204.84 1268.68,1204.84 1269.26,1204.84 1269.85,1204.84 1270.44,1204.84 1271.02,1204.84 1271.61,1204.84 1272.19,1204.84 1272.78,1204.84 1273.37,1204.84 1273.95,1204.84 1274.54,1204.84 1275.13,1204.84 1275.71,1204.84 1276.3,1204.84 1276.89,1204.84 1277.47,1204.84 1278.06,1204.84 1278.65,1204.84 1279.23,1204.84 1279.82,1204.84 1280.4,1204.84 1280.99,1204.84 1281.58,1204.84 1282.16,1204.84 1282.75,1204.84 1283.34,1204.84 1283.92,1204.84 1284.51,1204.84 1285.1,1204.84 1285.68,1204.84 1286.27,1204.84 1286.86,1204.84 1287.44,1204.84 1288.03,1204.84 1288.61,1204.84 1289.2,1204.84 1289.79,1204.84 1290.37,1204.84 1290.96,1204.84 1291.55,1204.84 1292.13,1204.84 1292.72,1204.84 1293.31,1204.84 1293.89,1204.84 1294.48,1204.84 1295.06,1204.84 1295.65,1204.84 1296.24,1204.84 1296.82,1204.84 1297.41,1204.84 1298,1204.84 1298.58,1204.84 1299.17,1204.84 1299.76,1204.84 1300.34,1204.84 1300.93,1204.84 1301.52,1204.84 1302.1,1204.84 1302.69,1204.84 1303.27,1204.84 1303.86,1204.84 1304.45,1204.84 1305.03,1204.84 1305.62,1204.84 1306.21,1204.84 1306.79,1204.84 1307.38,1204.84 1307.97,1204.84 1308.55,1204.84 1309.14,1204.84 1309.73,1204.84 1310.31,1204.84 1310.9,1204.84 1311.48,1204.84 1312.07,1204.84 1312.66,1204.84 1313.24,1204.84 1313.83,1204.84 1314.42,1204.84 1315,1204.84 1315.59,1204.84 1316.18,1204.84 1316.76,1204.84 1317.35,1204.84 1317.93,1204.84 1318.52,1204.84 1319.11,1204.84 1319.69,1204.84 1320.28,1204.84 1320.87,1204.84 1321.45,1204.84 1322.04,1204.84 1322.63,1204.84 1323.21,1204.84 1323.8,1204.84 1324.39,1204.84 1324.97,1204.84 1325.56,1204.84 1326.14,1204.84 1326.73,1204.84 1327.32,1204.84 1327.9,1204.84 1328.49,1204.84 1329.08,1204.84 1329.66,1204.84 1330.25,1204.84 1330.84,1204.84 1331.42,1204.84 1332.01,1204.84 1332.6,1204.84 1333.18,1204.84 1333.77,1204.84 1334.35,1204.84 1334.94,1204.84 1335.53,1204.84 1336.11,1204.84 1336.7,1204.84 1337.29,1204.84 1337.87,1204.84 1338.46,1204.84 1339.05,1204.84 1339.63,1204.84 1340.22,1204.84 1340.8,1204.84 1341.39,1204.84 1341.98,1204.84 1342.56,1204.84 1343.15,1204.84 1343.74,1204.84 1344.32,1204.84 1344.91,1204.84 1345.5,1204.84 1346.08,1204.84 1346.67,1204.84 1347.26,1204.84 1347.84,1204.84 1348.43,1204.84 1349.01,1204.84 1349.6,1204.84 1350.19,1204.84 1350.77,1204.84 1351.36,1204.84 1351.95,1204.84 1352.53,1204.84 1353.12,1204.84 1353.71,1204.84 1354.29,1204.84 1354.88,1204.84 1355.47,1204.84 1356.05,1204.84 1356.64,1204.84 1357.22,1204.84 1357.81,1204.84 1358.4,1204.84 1358.98,1204.84 1359.57,1204.84 1360.16,1204.84 1360.74,1204.84 1361.33,1204.84 1361.92,1204.84 1362.5,1204.84 1363.09,1204.84 1363.68,1204.84 1364.26,1204.84 1364.85,1204.84 1365.43,1204.84 1366.02,1204.84 1366.61,1204.84 1367.19,1204.84 1367.78,1204.84 1368.37,1204.84 1368.95,1204.84 1369.54,1204.84 1370.13,1204.84 1370.71,1204.84 1371.3,1204.84 1371.88,1204.84 1372.47,1204.84 1373.06,1204.84 1373.64,1204.84 1374.23,1204.84 1374.82,1204.84 1375.4,1204.84 1375.99,1204.84 1376.58,1204.84 1377.16,1204.84 1377.75,1204.84 1378.34,1204.84 1378.92,1204.84 1379.51,1204.84 1380.09,1204.84 1380.68,1204.84 1381.27,1204.84 1381.85,1204.84 1382.44,1204.84 1383.03,1204.84 1383.61,1204.84 1384.2,1204.84 1384.79,1204.84 1385.37,1204.84 1385.96,1204.84 1386.55,1204.84 1387.13,1204.84 1387.72,1204.84 1388.3,1204.84 1388.89,1204.84 1389.48,1204.84 1390.06,1204.84 1390.65,1204.84 1391.24,1204.84 1391.82,1204.84 1392.41,1204.84 1393,1204.84 1393.58,1204.84 1394.17,1204.84 1394.75,1204.84 1395.34,1204.84 1395.93,1204.84 1396.51,1204.84 1397.1,1204.84 1397.69,1204.84 1398.27,1204.84 1398.86,1204.84 1399.45,1204.84 1400.03,1204.84 1400.62,1204.84 1401.21,1204.84 1401.79,1204.84 1402.38,1204.84 1402.96,1204.84 1403.55,1204.84 1404.14,1204.84 1404.72,1204.84 1405.31,1204.84 1405.9,1204.84 1406.48,1204.84 1407.07,1204.84 1407.66,1204.84 1408.24,1204.84 1408.83,1204.84 1409.42,1204.84 1410,1204.84 1410.59,1204.84 1411.17,1204.84 1411.76,1204.84 1412.35,1204.84 1412.93,1204.84 1413.52,1204.84 1414.11,1204.84 1414.69,1204.84 1415.28,1204.84 1415.87,1204.84 1416.45,1204.84 1417.04,1204.84 1417.63,1204.84 1418.21,1204.84 1418.8,1204.84 1419.38,1204.84 1419.97,1204.84 1420.56,1204.84 1421.14,1204.84 1421.73,1204.84 1422.32,1204.84 1422.9,1204.84 1423.49,1204.84 1424.08,1204.84 1424.66,1204.84 1425.25,1204.84 1425.83,1204.84 1426.42,1204.84 1427.01,1204.84 1427.59,1204.84 1428.18,1204.84 1428.77,1204.84 1429.35,1204.84 1429.94,1204.84 1430.53,1204.84 1431.11,1204.84 1431.7,1204.84 1432.29,1204.84 1432.87,1204.84 1433.46,1204.84 1434.04,1204.84 1434.63,1204.84 1435.22,1204.84 1435.8,1204.84 1436.39,1204.84 1436.98,1204.84 1437.56,1204.84 1438.15,1204.84 1438.74,1204.84 1439.32,1204.84 1439.91,1204.84 1440.5,1204.84 1441.08,1204.84 1441.67,1204.84 1442.25,1204.84 1442.84,1204.84 1443.43,1204.84 1444.01,1204.84 1444.6,1204.84 1445.19,1204.84 1445.77,1204.84 1446.36,1204.84 1446.95,1204.84 1447.53,1204.84 1448.12,1204.84 1448.7,1204.84 1449.29,1204.84 1449.88,1204.84 1450.46,1204.84 1451.05,1204.84 1451.64,1204.84 1452.22,1204.84 1452.81,1204.84 1453.4,1204.84 1453.98,1204.84 1454.57,1204.84 1455.16,1204.84 1455.74,1204.84 1456.33,1204.84 1456.91,1204.84 1457.5,1204.84 1458.09,1204.84 1458.67,1204.84 1459.26,1204.84 1459.85,1204.84 1460.43,1204.84 1461.02,1204.84 1461.61,1204.84 1462.19,1204.84 1462.78,1204.84 1463.37,1204.84 1463.95,1204.84 1464.54,1204.84 1465.12,1204.84 1465.71,1204.84 1466.3,1204.84 1466.88,1204.84 1467.47,1204.84 1468.06,1204.84 1468.64,1204.84 1469.23,1204.84 1469.82,1204.84 1470.4,1204.84 1470.99,1204.84 1471.57,1204.84 1472.16,1204.84 1472.75,1204.84 1473.33,1204.84 1473.92,1204.84 1474.51,1204.84 1475.09,1204.84 1475.68,1204.84 1476.27,1204.84 1476.85,1204.84 1477.44,1204.84 1478.03,1204.84 1478.61,1204.84 1479.2,1204.84 1479.78,1204.84 1480.37,1204.84 1480.96,1204.84 1481.54,1204.84 1482.13,1204.84 1482.72,1204.84 1483.3,1204.84 1483.89,1204.84 1484.48,1204.84 1485.06,1204.84 1485.65,1204.84 1486.24,1204.84 1486.82,1204.84 1487.41,1204.84 1487.99,1204.84 1488.58,1204.84 1489.17,1204.84 1489.75,1204.84 1490.34,1204.84 1490.93,1204.84 1491.51,1204.84 1492.1,1204.84 1492.69,1204.84 1493.27,1204.84 1493.86,1204.84 1494.45,1204.84 1495.03,1204.84 1495.62,1204.84 1496.2,1204.84 1496.79,1204.84 1497.38,1204.84 1497.96,1204.84 1498.55,1204.84 1499.14,1204.84 1499.72,1204.84 1500.31,1204.84 1500.9,1204.84 1501.48,1204.84 1502.07,1204.84 1502.65,1204.84 1503.24,1204.84 1503.83,1204.84 1504.41,1204.84 1505,1204.84 1505.59,1204.84 1506.17,1204.84 1506.76,1204.84 1507.35,1204.84 1507.93,1204.84 1508.52,1204.84 1509.11,1204.84 1509.69,1204.84 1510.28,1204.84 1510.86,1204.84 1511.45,1204.84 1512.04,1204.84 1512.62,1204.84 1513.21,1204.84 1513.8,1204.84 1514.38,1204.84 1514.97,1204.84 1515.56,1204.84 1516.14,1204.84 1516.73,1204.84 1517.32,1204.84 1517.9,1204.84 1518.49,1204.84 1519.07,1204.84 1519.66,1204.84 1520.25,1204.84 1520.83,1204.84 1521.42,1204.84 1522.01,1204.84 1522.59,1204.84 1523.18,1204.84 1523.77,1204.84 1524.35,1204.84 1524.94,1204.84 1525.52,1204.84 1526.11,1204.84 1526.7,1204.84 1527.28,1204.84 1527.87,1204.84 1528.46,1204.84 1529.04,1204.84 1529.63,1204.84 1530.22,1204.84 1530.8,1204.84 1531.39,1204.84 1531.98,1204.84 1532.56,1204.84 1533.15,1204.84 1533.73,1204.84 1534.32,1204.84 1534.91,1204.84 1535.49,1204.84 1536.08,1204.84 1536.67,1204.84 1537.25,1204.84 1537.84,1204.84 1538.43,1204.84 1539.01,1204.84 1539.6,1204.84 1540.19,1204.84 1540.77,1204.84 1541.36,1204.84 1541.94,1204.84 1542.53,1204.84 1543.12,1204.84 1543.7,1204.84 1544.29,1204.84 1544.88,1204.84 1545.46,1204.84 1546.05,1204.84 1546.64,1204.84 1547.22,1204.84 1547.81,1204.84 1548.4,1204.84 1548.98,1204.84 1549.57,1204.84 1550.15,1204.84 1550.74,1204.84 1551.33,1204.84 1551.91,1204.84 1552.5,1204.84 1553.09,1204.84 1553.67,1204.84 1554.26,1204.84 1554.85,1204.84 1555.43,1204.84 1556.02,1204.84 1556.6,1204.84 1557.19,1204.84 1557.78,1204.84 1558.36,1204.84 1558.95,1204.84 1559.54,1204.84 1560.12,1204.84 1560.71,1204.84 1561.3,1204.84 1561.88,1204.84 1562.47,1204.84 1563.06,1204.84 1563.64,1204.84 1564.23,1204.84 1564.81,1204.84 1565.4,1204.84 1565.99,1204.84 1566.57,1204.84 1567.16,1204.84 1567.75,1204.84 1568.33,1204.84 1568.92,1204.84 1569.51,1204.84 1570.09,1204.84 1570.68,1204.84 1571.27,1204.84 1571.85,1204.84 1572.44,1204.84 1573.02,1204.84 1573.61,1204.84 1574.2,1204.84 1574.78,1204.84 1575.37,1204.84 1575.96,1204.84 1576.54,1204.84 1577.13,1204.84 1577.72,1204.84 1578.3,1204.84 1578.89,1204.84 1579.47,1204.84 1580.06,1204.84 1580.65,1204.84 1581.23,1204.84 1581.82,1204.84 1582.41,1204.84 1582.99,1204.84 1583.58,1204.84 1584.17,1204.84 1584.75,1204.84 1585.34,1204.84 1585.93,1204.84 1586.51,1204.84 1587.1,1204.84 1587.68,1204.84 1588.27,1204.84 1588.86,1204.84 1589.44,1204.84 1590.03,1204.84 1590.62,1204.84 1591.2,1204.84 1591.79,1204.84 1592.38,1204.84 1592.96,1204.84 1593.55,1204.84 1594.14,1204.84 1594.72,1204.84 1595.31,1204.84 1595.89,1204.84 1596.48,1204.84 1597.07,1204.84 1597.65,1204.84 1598.24,1204.84 1598.83,1204.84 1599.41,1204.84 1600,1204.84 1600.59,1204.84 1601.17,1204.84 1601.76,1204.84 1602.34,1204.84 1602.93,1204.84 1603.52,1204.84 1604.1,1204.84 1604.69,1204.84 1605.28,1204.84 1605.86,1204.84 1606.45,1204.84 1607.04,1204.84 1607.62,1204.84 1608.21,1204.84 1608.8,1204.84 1609.38,1204.84 1609.97,1204.84 1610.55,1204.84 1611.14,1204.84 1611.73,1204.84 1612.31,1204.84 1612.9,1204.84 1613.49,1204.84 1614.07,1204.84 1614.66,1204.84 1615.25,1204.84 1615.83,1204.84 1616.42,1204.84 1617.01,1204.84 1617.59,1204.84 1618.18,1204.84 1618.76,1204.84 1619.35,1204.84 1619.94,1204.84 1620.52,1204.84 1621.11,1204.84 1621.7,1204.84 1622.28,1204.84 1622.87,1204.84 1623.46,1204.84 1624.04,1204.84 1624.63,1204.84 1625.22,1204.84 1625.8,1204.84 1626.39,1204.84 1626.97,1204.84 1627.56,1204.84 1628.15,1204.84 1628.73,1204.84 1629.32,1204.84 1629.91,1204.84 1630.49,1204.84 1631.08,1204.84 1631.67,1204.84 1632.25,1204.84 1632.84,1204.84 1633.42,1204.84 1634.01,1204.84 1634.6,1204.84 1635.18,1204.84 1635.77,1204.84 1636.36,1204.84 1636.94,1204.84 1637.53,1204.84 1638.12,1204.84 1638.7,1204.84 1639.29,1204.84 1639.88,1204.84 1640.46,1204.84 1641.05,1204.84 1641.63,1204.84 1642.22,1204.84 1642.81,1204.84 1643.39,1204.84 1643.98,1204.84 1644.57,1204.84 1645.15,1204.84 1645.74,1204.84 1646.33,1204.84 1646.91,1204.84 1647.5,1204.84 1648.09,1204.84 1648.67,1204.84 1649.26,1204.84 1649.84,1204.84 1650.43,1204.84 1651.02,1204.84 1651.6,1204.84 1652.19,1204.84 1652.78,1204.84 1653.36,1204.84 1653.95,1204.84 1654.54,1204.84 1655.12,1204.84 1655.71,1204.84 1656.29,1204.84 1656.88,1204.84 1657.47,1204.84 1658.05,1204.84 1658.64,1204.84 1659.23,1204.84 1659.81,1204.84 1660.4,1204.84 1660.99,1204.84 1661.57,1204.84 1662.16,1204.84 1662.75,1204.84 1663.33,1204.84 1663.92,1204.84 1664.5,1204.84 1665.09,1204.84 1665.68,1204.84 1666.26,1204.84 1666.85,1204.84 1667.44,1204.84 1668.02,1204.84 1668.61,1204.84 1669.2,1204.84 1669.78,1204.84 1670.37,1204.84 1670.96,1204.84 1671.54,1204.84 1672.13,1204.84 1672.71,1204.84 1673.3,1204.84 1673.89,1204.84 1674.47,1204.84 1675.06,1204.84 1675.65,1204.84 1676.23,1204.84 1676.82,1204.84 1677.41,1204.84 1677.99,1204.84 1678.58,1204.84 1679.17,1204.84 1679.75,1204.84 1680.34,1204.84 1680.92,1204.84 1681.51,1204.84 1682.1,1204.84 1682.68,1204.84 1683.27,1204.84 1683.86,1204.84 1684.44,1204.84 1685.03,1204.84 1685.62,1204.84 1686.2,1204.84 1686.79,1204.84 1687.37,1204.84 1687.96,1204.84 1688.55,1204.84 1689.13,1204.84 1689.72,1204.84 1690.31,1204.84 1690.89,1204.84 1691.48,1204.84 1692.07,1204.84 1692.65,1204.84 1693.24,1204.84 1693.83,1204.84 1694.41,1204.84 1695,1204.84 1695.58,1204.84 1696.17,1204.84 1696.76,1204.84 1697.34,1204.84 1697.93,1204.84 1698.52,1204.84 1699.1,1204.84 1699.69,1204.84 1700.28,1204.84 1700.86,1204.84 1701.45,1204.84 1702.04,1204.84 1702.62,1204.84 1703.21,1204.84 1703.79,1204.84 1704.38,1204.84 1704.97,1204.84 1705.55,1204.84 1706.14,1204.84 1706.73,1204.84 1707.31,1204.84 1707.9,1204.84 1708.49,1204.84 1709.07,1204.84 1709.66,1204.84 1710.24,1204.84 1710.83,1204.84 1711.42,1204.84 1712,1204.84 1712.59,1204.84 1713.18,1204.84 1713.76,1204.84 1714.35,1204.84 1714.94,1204.84 1715.52,1204.84 1716.11,1204.84 1716.7,1204.84 1717.28,1204.84 1717.87,1204.84 1718.45,1204.84 1719.04,1204.84 1719.63,1204.84 1720.21,1204.84 1720.8,1204.84 1721.39,1204.84 1721.97,1204.84 1722.56,1204.84 1723.15,1204.84 1723.73,1204.84 1724.32,1204.84 1724.91,1204.84 1725.49,1204.84 1726.08,1204.84 1726.66,1204.84 1727.25,1204.84 1727.84,1204.84 1728.42,1204.84 1729.01,1204.84 1729.6,1204.84 1730.18,1204.84 1730.77,1204.84 1731.36,1204.84 1731.94,1204.84 1732.53,1204.84 1733.11,1204.84 1733.7,1204.84 1734.29,1204.84 1734.87,1204.84 1735.46,1204.84 1736.05,1204.84 1736.63,1204.84 1737.22,1204.84 1737.81,1204.84 1738.39,1204.84 1738.98,1204.84 1739.57,1204.84 1740.15,1204.84 1740.74,1204.84 1741.32,1204.84 1741.91,1204.84 1742.5,1204.84 1743.08,1204.84 1743.67,1204.84 1744.26,1204.84 1744.84,1204.84 1745.43,1204.84 1746.02,1204.84 1746.6,1204.84 1747.19,1204.84 1747.78,1204.84 1748.36,1204.84 1748.95,1204.84 1749.53,1204.84 1750.12,1204.84 1750.71,1204.84 1751.29,1204.84 1751.88,1204.84 1752.47,1204.84 1753.05,1204.84 1753.64,1204.84 1754.23,1204.84 1754.81,1204.84 1755.4,1204.84 1755.99,1204.84 1756.57,1204.84 1757.16,1204.84 1757.74,1204.84 1758.33,1204.84 1758.92,1204.84 1759.5,1204.84 1760.09,1204.84 1760.68,1204.84 1761.26,1204.84 1761.85,1204.84 1762.44,1204.84 1763.02,1204.84 1763.61,1204.84 1764.19,1204.84 1764.78,1204.84 1765.37,1204.84 1765.95,1204.84 1766.54,1204.84 1767.13,1204.84 1767.71,1204.84 1768.3,1204.84 1768.89,1204.84 1769.47,1204.84 1770.06,1204.84 1770.65,1204.84 1771.23,1204.84 1771.82,1204.84 1772.4,1204.84 1772.99,1204.84 1773.58,1204.84 1774.16,1204.84 1774.75,1204.84 1775.34,1204.84 1775.92,1204.84 1776.51,1204.84 1777.1,1204.84 1777.68,1204.84 1778.27,1204.84 1778.86,1204.84 1779.44,1204.84 1780.03,1204.84 1780.61,1204.84 1781.2,1204.84 1781.79,1204.84 1782.37,1204.84 1782.96,1204.84 1783.55,1204.84 1784.13,1204.84 1784.72,1204.84 1785.31,1204.84 1785.89,1204.84 1786.48,1204.84 1787.06,1204.84 1787.65,1204.84 1788.24,1204.84 1788.82,1204.84 1789.41,1204.84 1790,1204.84 1790.58,1204.84 1791.17,1204.84 1791.76,1204.84 1792.34,1204.84 1792.93,1204.84 1793.52,1204.84 1794.1,1204.84 1794.69,1204.84 1795.27,1204.84 1795.86,1204.84 1796.45,1204.84 1797.03,1204.84 1797.62,1204.84 1798.21,1204.84 1798.79,1204.84 1799.38,1204.84 1799.97,1204.84 1800.55,1204.84 1801.14,1204.84 1801.73,1204.84 1802.31,1204.84 1802.9,1204.84 1803.48,1204.84 1804.07,1204.84 1804.66,1204.84 1805.24,1204.84 1805.83,1204.84 1806.42,1204.84 1807,1204.84 1807.59,1204.84 1808.18,1204.84 1808.76,1204.84 1809.35,1204.84 1809.94,1204.84 1810.52,1204.84 1811.11,1204.84 1811.69,1204.84 1812.28,1204.84 1812.87,1204.84 1813.45,1204.84 1814.04,1204.84 1814.63,1204.84 1815.21,1204.84 1815.8,1204.84 1816.39,1204.84 1816.97,1204.84 1817.56,1204.84 1818.14,1204.84 1818.73,1204.84 1819.32,1204.84 1819.9,1204.84 1820.49,1204.84 1821.08,1204.84 1821.66,1204.84 1822.25,1204.84 1822.84,1204.84 1823.42,1204.84 1824.01,1204.84 1824.6,1204.84 1825.18,1204.84 1825.77,1204.84 1826.35,1204.84 1826.94,1204.84 1827.53,1204.84 1828.11,1204.84 1828.7,1204.84 1829.29,1204.84 1829.87,1204.84 1830.46,1204.84 1831.05,1204.84 1831.63,1204.84 1832.22,1204.84 1832.81,1204.84 1833.39,1204.84 1833.98,1204.84 1834.56,1204.84 1835.15,1204.84 1835.74,1204.84 1836.32,1204.84 1836.91,1204.84 1837.5,1204.84 1838.08,1204.84 1838.67,1204.84 1839.26,1204.84 1839.84,1204.84 1840.43,1204.84 1841.01,1204.84 1841.6,1204.84 1842.19,1204.84 1842.77,1204.84 1843.36,1204.84 1843.95,1204.84 1844.53,1204.84 1845.12,1204.84 1845.71,1204.84 1846.29,1204.84 1846.88,1204.84 1847.47,1204.84 1848.05,1204.84 1848.64,1204.84 1849.22,1204.84 1849.81,1204.84 1850.4,1204.84 1850.98,1204.84 1851.57,1204.84 1852.16,1204.84 1852.74,1204.84 1853.33,1204.84 1853.92,1204.84 1854.5,1204.84 1855.09,1204.84 1855.68,1204.84 1856.26,1204.84 1856.85,1204.84 1857.43,1204.84 1858.02,1204.84 1858.61,1204.84 1859.19,1204.84 1859.78,1204.84 1860.37,1204.84 1860.95,1204.84 1861.54,1204.84 1862.13,1204.84 1862.71,1204.84 1863.3,1204.84 1863.88,1204.84 1864.47,1204.84 1865.06,1204.84 1865.64,1204.84 1866.23,1204.84 1866.82,1204.84 1867.4,1204.84 1867.99,1204.84 1868.58,1204.84 1869.16,1204.84 1869.75,1204.84 1870.34,1204.84 1870.92,1204.84 1871.51,1204.84 1872.09,1204.84 1872.68,1204.84 1873.27,1204.84 1873.85,1204.84 1874.44,1204.84 1875.03,1204.84 1875.61,1204.84 1876.2,1204.84 1876.79,1204.84 1877.37,1204.84 1877.96,1204.84 1878.55,1204.84 1879.13,1204.84 1879.72,1204.84 1880.3,1204.84 1880.89,1204.84 1881.48,1204.84 1882.06,1204.84 1882.65,1204.84 1883.24,1204.84 1883.82,1204.84 1884.41,1204.84 1885,1204.84 1885.58,1204.84 1886.17,1204.84 1886.76,1204.84 1887.34,1204.84 1887.93,1204.84 1888.51,1204.84 1889.1,1204.84 1889.69,1204.84 1890.27,1204.84 1890.86,1204.84 1891.45,1204.84 1892.03,1204.84 1892.62,1204.84 1893.21,1204.84 1893.79,1204.84 1894.38,1204.84 1894.96,1204.84 1895.55,1204.84 1896.14,1204.84 1896.72,1204.84 1897.31,1204.84 1897.9,1204.84 1898.48,1204.84 1899.07,1204.84 1899.66,1204.84 1900.24,1204.84 1900.83,1204.84 1901.42,1204.84 1902,1204.84 1902.59,1204.84 1903.17,1204.84 1903.76,1204.84 1904.35,1204.84 1904.93,1204.84 1905.52,1204.84 1906.11,1204.84 1906.69,1204.84 1907.28,1204.84 1907.87,1204.84 1908.45,1204.84 1909.04,1204.84 1909.63,1204.84 1910.21,1204.84 1910.8,1204.84 1911.38,1204.84 1911.97,1204.84 1912.56,1204.84 1913.14,1204.84 1913.73,1204.84 1914.32,1204.84 1914.9,1204.84 1915.49,1204.84 1916.08,1204.84 1916.66,1204.84 1917.25,1204.84 1917.83,1204.84 1918.42,1204.84 1919.01,1204.84 1919.59,1204.84 1920.18,1204.84 1920.77,1204.84 1921.35,1204.84 1921.94,1204.84 1922.53,1204.84 1923.11,1204.84 1923.7,1204.84 1924.29,1204.84 1924.87,1204.84 1925.46,1204.84 1926.04,1204.84 1926.63,1204.84 1927.22,1204.84 1927.8,1204.84 1928.39,1204.84 1928.98,1204.84 1929.56,1204.84 1930.15,1204.84 1930.74,1204.84 1931.32,1204.84 1931.91,1204.84 1932.5,1204.84 1933.08,1204.84 1933.67,1204.84 1934.25,1204.84 1934.84,1204.84 1935.43,1204.84 1936.01,1204.84 1936.6,1204.84 1937.19,1204.84 1937.77,1204.84 1938.36,1204.84 1938.95,1204.84 1939.53,1204.84 1940.12,1204.84 1940.71,1204.84 1941.29,1204.84 1941.88,1204.84 1942.46,1204.84 1943.05,1204.84 1943.64,1204.84 1944.22,1204.84 1944.81,1204.84 1945.4,1204.84 1945.98,1204.84 1946.57,1204.84 1947.16,1204.84 1947.74,1204.84 1948.33,1204.84 1948.91,1204.84 1949.5,1204.84 1950.09,1204.84 1950.67,1204.84 1951.26,1204.84 1951.85,1204.84 1952.43,1204.84 1953.02,1204.84 1953.61,1204.84 1954.19,1204.84 1954.78,1204.84 1955.37,1204.84 1955.95,1204.84 1956.54,1204.84 1957.12,1204.84 1957.71,1204.84 1958.3,1204.84 1958.88,1204.84 1959.47,1204.84 1960.06,1204.84 1960.64,1204.84 1961.23,1204.84 1961.82,1204.84 1962.4,1204.84 1962.99,1204.84 1963.58,1204.84 1964.16,1204.84 1964.75,1204.84 1965.33,1204.84 1965.92,1204.84 1966.51,1204.84 1967.09,1204.84 1967.68,1204.84 1968.27,1204.84 1968.85,1204.84 1969.44,1204.84 1970.03,1204.84 1970.61,1204.84 1971.2,1204.84 1971.78,1204.84 1972.37,1204.84 1972.96,1204.84 1973.54,1204.84 1974.13,1204.84 1974.72,1204.84 1975.3,1204.84 1975.89,1204.84 1976.48,1204.84 1977.06,1204.84 1977.65,1204.84 1978.24,1204.84 1978.82,1204.84 1979.41,1204.84 1979.99,1204.84 1980.58,1204.84 1981.17,1204.84 1981.75,1204.84 1982.34,1204.84 1982.93,1204.84 1983.51,1204.84 1984.1,1204.84 1984.69,1204.84 1985.27,1204.84 1985.86,1204.84 1986.45,1204.84 1987.03,1204.84 1987.62,1204.84 1988.2,1204.84 1988.79,1204.84 1989.38,1204.84 1989.96,1204.84 1990.55,1204.84 1991.14,1204.84 1991.72,1204.84 1992.31,1204.84 1992.9,1204.84 1993.48,1204.84 1994.07,1204.84 1994.65,1204.84 1995.24,1204.84 1995.83,1204.84 1996.41,1204.84 1997,1204.84 1997.59,1204.84 1998.17,1204.84 1998.76,1204.84 1999.35,1204.84 1999.93,1204.84 2000.52,1204.84 2001.11,1204.84 2001.69,1204.84 2002.28,1204.84 2002.86,1204.84 2003.45,1204.84 2004.04,1204.84 2004.62,1204.84 2005.21,1204.84 2005.8,1204.84 2006.38,1204.84 2006.97,1204.84 2007.56,1204.84 2008.14,1204.84 2008.73,1204.84 2009.32,1204.84 2009.9,1204.84 2010.49,1204.84 2011.07,1204.84 2011.66,1204.84 2012.25,1204.84 2012.83,1204.84 2013.42,1204.84 2014.01,1204.84 2014.59,1204.84 2015.18,1204.84 2015.77,1204.84 2016.35,1204.84 2016.94,1204.84 2017.53,1204.84 2018.11,1204.84 2018.7,1204.84 2019.28,1204.84 2019.87,1204.84 2020.46,1204.84 2021.04,1204.84 2021.63,1204.84 2022.22,1204.84 2022.8,1204.84 2023.39,1204.84 2023.98,1204.84 2024.56,1204.84 2025.15,1204.84 2025.73,1204.84 2026.32,1204.84 2026.91,1204.84 2027.49,1204.84 2028.08,1204.84 2028.67,1204.84 2029.25,1204.84 2029.84,1204.84 2030.43,1204.84 2031.01,1204.84 2031.6,1204.84 2032.19,1204.84 2032.77,1204.84 2033.36,1204.84 2033.94,1204.84 2034.53,1204.84 2035.12,1204.84 2035.7,1204.84 2036.29,1204.84 2036.88,1204.84 2037.46,1204.84 2038.05,1204.84 2038.64,1204.84 2039.22,1204.84 2039.81,1204.84 2040.4,1204.84 2040.98,1204.84 2041.57,1204.84 2042.15,1204.84 2042.74,1204.84 2043.33,1204.84 2043.91,1204.84 2044.5,1204.84 2045.09,1204.84 2045.67,1204.84 2046.26,1204.84 2046.85,1204.84 2047.43,1204.84 2048.02,1204.84 2048.6,1204.84 2049.19,1204.84 2049.78,1204.84 2050.36,1204.84 2050.95,1204.84 2051.54,1204.84 2052.12,1204.84 2052.71,1204.84 2053.3,1204.84 2053.88,1204.84 2054.47,1204.84 2055.06,1204.84 2055.64,1204.84 2056.23,1204.84 2056.81,1204.84 2057.4,1204.84 2057.99,1204.84 2058.57,1204.84 2059.16,1204.84 2059.75,1204.84 2060.33,1204.84 2060.92,1204.84 2061.51,1204.84 2062.09,1204.84 2062.68,1204.84 2063.27,1204.84 2063.85,1204.84 2064.44,1204.84 2065.02,1204.84 2065.61,1204.84 2066.2,1204.84 2066.78,1204.84 2067.37,1204.84 2067.96,1204.84 2068.54,1204.84 2069.13,1204.84 2069.72,1204.84 2070.3,1204.84 2070.89,1204.84 2071.48,1204.84 2072.06,1204.84 2072.65,1204.84 2073.23,1204.84 2073.82,1204.84 2074.41,1204.84 2074.99,1204.84 2075.58,1204.84 2076.17,1204.84 2076.75,1204.84 2077.34,1204.84 2077.93,1204.84 2078.51,1204.84 2079.1,1204.84 2079.68,1204.84 2080.27,1204.84 2080.86,1204.84 2081.44,1204.84 2082.03,1204.84 2082.62,1204.84 2083.2,1204.84 2083.79,1204.84 2084.38,1204.84 2084.96,1204.84 2085.55,1204.84 2086.14,1204.84 2086.72,1204.84 2087.31,1204.84 2087.89,1204.84 2088.48,1204.84 2089.07,1204.84 2089.65,1204.84 2090.24,1204.84 2090.83,1204.84 2091.41,1204.84 2092,1204.84 2092.59,1204.84 2093.17,1204.84 2093.76,1204.84 2094.35,1204.84 2094.93,1204.84 2095.52,1204.84 2096.1,1204.84 2096.69,1204.84 2097.28,1204.84 2097.86,1204.84 2098.45,1204.84 2099.04,1204.84 2099.62,1204.84 2100.21,1204.84 2100.8,1204.84 2101.38,1204.84 2101.97,1204.84 2102.55,1204.84 2103.14,1204.84 2103.73,1204.84 2104.31,1204.84 2104.9,1204.84 2105.49,1204.84 2106.07,1204.84 2106.66,1204.84 2107.25,1204.84 2107.83,1204.84 2108.42,1204.84 2109.01,1204.84 2109.59,1204.84 2110.18,1204.84 2110.76,1204.84 2111.35,1204.84 2111.94,1204.84 2112.52,1204.84 2113.11,1204.84 2113.7,1204.84 2114.28,1204.84 2114.87,1204.84 2115.46,1204.84 2116.04,1204.84 2116.63,1204.84 2117.22,1204.84 2117.8,1204.84 2118.39,1204.84 2118.97,1204.84 2119.56,1204.84 2120.15,1204.84 2120.73,1204.84 2121.32,1204.84 2121.91,1204.84 2122.49,1204.84 2123.08,1204.84 2123.67,1204.84 2124.25,1204.84 2124.84,1204.84 2125.42,1204.84 2126.01,1204.84 2126.6,1204.84 2127.18,1204.84 2127.77,1204.84 2128.36,1204.84 2128.94,1204.84 2129.53,1204.84 2130.12,1204.84 2130.7,1204.84 2131.29,1204.84 2131.88,1204.84 2132.46,1204.84 2133.05,1204.84 2133.63,1204.84 2134.22,1204.84 2134.81,1204.84 2135.39,1204.84 2135.98,1204.84 2136.57,1204.84 2137.15,1204.84 2137.74,1204.84 2138.33,1204.84 2138.91,1204.84 2139.5,1204.84 2140.09,1204.84 2140.67,1204.84 2141.26,1204.84 2141.84,1204.84 2142.43,1204.84 2143.02,1204.84 2143.6,1204.84 2144.19,1204.84 2144.78,1204.84 2145.36,1204.84 2145.95,1204.84 2146.54,1204.84 2147.12,1204.84 2147.71,1204.84 2148.3,1204.84 2148.88,1204.84 2149.47,1204.84 2150.05,1204.84 2150.64,1204.84 2151.23,1204.84 2151.81,1204.84 2152.4,1204.84 2152.99,1204.84 2153.57,1204.84 2154.16,1204.84 2154.75,1204.84 2155.33,1204.84 2155.92,1204.84 2156.5,1204.84 2157.09,1204.84 2157.68,1204.84 2158.26,1204.84 \"/>\n<path clip-path=\"url(#clip472)\" d=\"M986.025 1204.69 L986.612 1204.69 L987.198 1204.69 L987.785 1204.69 L988.371 1204.69 L988.957 1204.69 L989.544 1204.69 L990.13 1204.69 L990.717 1204.69 L991.303 1204.69 L991.889 1204.69 L992.476 1204.69 L993.062 1204.69 L993.649 1204.69 L994.235 1204.69 L994.822 1204.69 L995.408 1204.69 L995.994 1204.69 L996.581 1204.69 L997.167 1204.69 L997.754 1204.69 L998.34 1204.69 L998.926 1204.69 L999.513 1204.69 L1000.1 1204.69 L1000.69 1204.69 L1001.27 1204.69 L1001.86 1204.69 L1002.44 1204.69 L1003.03 1204.69 L1003.62 1204.69 L1004.2 1204.69 L1004.79 1204.69 L1005.38 1204.69 L1005.96 1204.69 L1006.55 1204.69 L1007.14 1204.69 L1007.72 1204.69 L1008.31 1204.69 L1008.9 1204.69 L1009.48 1204.69 L1010.07 1204.69 L1010.65 1204.69 L1011.24 1204.69 L1011.83 1204.69 L1012.41 1204.69 L1013 1204.69 L1013.59 1204.69 L1014.17 1204.69 L1014.76 1204.69 L1015.35 1204.69 L1015.93 1204.69 L1016.52 1204.69 L1017.11 1204.69 L1017.69 1204.69 L1018.28 1204.69 L1018.86 1204.69 L1019.45 1204.69 L1020.04 1204.69 L1020.62 1204.69 L1021.21 1204.69 L1021.8 1204.69 L1022.38 1204.69 L1022.97 1204.69 L1023.56 1204.69 L1024.14 1204.69 L1024.73 1204.69 L1025.32 1204.69 L1025.9 1204.69 L1026.49 1204.69 L1027.07 1204.69 L1027.66 1204.69 L1028.25 1204.69 L1028.83 1204.69 L1029.42 1204.69 L1030.01 1204.69 L1030.59 1204.69 L1031.18 1204.69 L1031.77 1204.69 L1032.35 1204.69 L1032.94 1204.69 L1033.52 1204.69 L1034.11 1204.69 L1034.7 1204.69 L1035.28 1204.69 L1035.87 1204.69 L1036.46 1204.69 L1037.04 1204.69 L1037.63 1204.69 L1038.22 1204.69 L1038.8 1204.69 L1039.39 1204.69 L1039.98 1204.69 L1040.56 1204.69 L1041.15 1204.69 L1041.73 1204.69 L1042.32 1204.69 L1042.91 1204.69 L1043.49 1204.69 L1044.08 1204.69 L1044.67 1204.69 L1045.25 1204.69 L1045.84 1204.69 L1046.43 1204.69 L1047.01 1204.69 L1047.6 1204.69 L1048.19 1204.69 L1048.77 1204.69 L1049.36 1204.69 L1049.94 1204.69 L1050.53 1204.69 L1051.12 1204.69 L1051.7 1204.69 L1052.29 1204.69 L1052.88 1204.69 L1053.46 1204.69 L1054.05 1204.69 L1054.64 1204.69 L1055.22 1204.69 L1055.81 1204.69 L1056.39 1204.69 L1056.98 1204.69 L1057.57 1204.69 L1058.15 1204.69 L1058.74 1204.69 L1059.33 1204.69 L1059.91 1204.69 L1060.5 1204.69 L1061.09 1204.69 L1061.67 1204.69 L1062.26 1204.69 L1062.85 1204.69 L1063.43 1204.69 L1064.02 1204.69 L1064.6 1204.69 L1065.19 1204.69 L1065.78 1204.69 L1066.36 1204.69 L1066.95 1204.69 L1067.54 1204.69 L1068.12 1204.69 L1068.71 1204.69 L1069.3 1204.69 L1069.88 1204.69 L1070.47 1204.69 L1071.06 1204.69 L1071.64 1204.69 L1072.23 1204.69 L1072.81 1204.69 L1073.4 1204.69 L1073.99 1204.69 L1074.57 1204.69 L1075.16 1204.69 L1075.75 1204.69 L1076.33 1204.69 L1076.92 1204.69 L1077.51 1204.69 L1078.09 1204.69 L1078.68 1204.69 L1079.26 1204.69 L1079.85 1204.69 L1080.44 1204.69 L1081.02 1204.69 L1081.61 1204.69 L1082.2 1204.69 L1082.78 1204.69 L1083.37 1204.69 L1083.96 1204.69 L1084.54 1204.69 L1085.13 1204.69 L1085.72 1204.69 L1086.3 1204.69 L1086.89 1204.69 L1087.47 1204.69 L1088.06 1204.69 L1088.65 1204.69 L1089.23 1204.69 L1089.82 1204.69 L1090.41 1204.69 L1090.99 1204.69 L1091.58 1204.69 L1092.17 1204.69 L1092.75 1204.69 L1093.34 1204.69 L1093.93 1204.69 L1094.51 1204.69 L1095.1 1204.69 L1095.68 1204.69 L1096.27 1204.69 L1096.86 1204.69 L1097.44 1204.69 L1098.03 1204.69 L1098.62 1204.69 L1099.2 1204.69 L1099.79 1204.69 L1100.38 1204.69 L1100.96 1204.69 L1101.55 1204.69 L1102.14 1204.69 L1102.72 1204.69 L1103.31 1204.69 L1103.89 1204.69 L1104.48 1204.69 L1105.07 1204.69 L1105.65 1204.69 L1106.24 1204.69 L1106.83 1204.69 L1107.41 1204.69 L1108 1204.69 L1108.59 1204.69 L1109.17 1204.69 L1109.76 1204.69 L1110.34 1204.69 L1110.93 1204.69 L1111.52 1204.69 L1112.1 1204.69 L1112.69 1204.69 L1113.28 1204.69 L1113.86 1204.69 L1114.45 1204.69 L1115.04 1204.69 L1115.62 1204.69 L1116.21 1204.69 L1116.8 1204.69 L1117.38 1204.69 L1117.97 1204.69 L1118.55 1204.69 L1119.14 1204.69 L1119.73 1204.69 L1120.31 1204.69 L1120.9 1204.69 L1121.49 1204.69 L1122.07 1204.69 L1122.66 1204.69 L1123.25 1204.69 L1123.83 1204.69 L1124.42 1204.69 L1125.01 1204.69 L1125.59 1204.69 L1126.18 1204.69 L1126.76 1204.69 L1127.35 1204.69 L1127.94 1204.69 L1128.52 1204.69 L1129.11 1204.69 L1129.7 1204.69 L1130.28 1204.69 L1130.87 1204.69 L1131.46 1204.69 L1132.04 1204.69 L1132.63 1204.69 L1133.21 1204.69 L1133.8 1204.69 L1134.39 1204.69 L1134.97 1204.69 L1135.56 1204.69 L1136.15 1204.69 L1136.73 1204.69 L1137.32 1204.69 L1137.91 1204.69 L1138.49 1204.69 L1139.08 1204.69 L1139.67 1204.69 L1140.25 1204.69 L1140.84 1204.69 L1141.42 1204.69 L1142.01 1204.69 L1142.6 1204.69 L1143.18 1204.69 L1143.77 1204.69 L1144.36 1204.69 L1144.94 1204.69 L1145.53 1204.69 L1146.12 1204.69 L1146.7 1204.69 L1147.29 1204.69 L1147.88 1204.69 L1148.46 1204.69 L1149.05 1204.69 L1149.63 1204.69 L1150.22 1204.69 L1150.81 1204.69 L1151.39 1204.69 L1151.98 1204.69 L1152.57 1204.69 L1153.15 1204.69 L1153.74 1204.69 L1154.33 1204.69 L1154.91 1204.69 L1155.5 1204.69 L1156.09 1204.69 L1156.67 1204.69 L1157.26 1204.69 L1157.84 1204.69 L1158.43 1204.69 L1159.02 1204.69 L1159.6 1204.69 L1160.19 1204.69 L1160.78 1204.69 L1161.36 1204.69 L1161.95 1204.69 L1162.54 1204.69 L1163.12 1204.69 L1163.71 1204.69 L1164.29 1204.69 L1164.88 1204.69 L1165.47 1204.69 L1166.05 1204.69 L1166.64 1204.69 L1167.23 1204.69 L1167.81 1204.69 L1168.4 1204.69 L1168.99 1204.69 L1169.57 1204.69 L1170.16 1204.69 L1170.75 1204.69 L1171.33 1204.69 L1171.92 1204.69 L1172.5 1204.69 L1173.09 1204.69 L1173.68 1204.69 L1174.26 1204.69 L1174.85 1204.69 L1175.44 1204.69 L1176.02 1204.69 L1176.61 1204.69 L1177.2 1204.69 L1177.78 1204.69 L1178.37 1204.69 L1178.96 1204.69 L1179.54 1204.69 L1180.13 1204.69 L1180.71 1204.69 L1181.3 1204.69 L1181.89 1204.69 L1182.47 1204.69 L1183.06 1204.69 L1183.65 1204.69 L1184.23 1204.69 L1184.82 1204.69 L1185.41 1204.69 L1185.99 1204.69 L1186.58 1204.69 L1187.16 1204.69 L1187.75 1204.69 L1188.34 1204.69 L1188.92 1204.69 L1189.51 1204.69 L1190.1 1204.69 L1190.68 1204.69 L1191.27 1204.69 L1191.86 1204.69 L1192.44 1204.69 L1193.03 1204.69 L1193.62 1204.69 L1194.2 1204.69 L1194.79 1204.69 L1195.37 1204.69 L1195.96 1204.69 L1196.55 1204.69 L1197.13 1204.69 L1197.72 1204.69 L1198.31 1204.69 L1198.89 1204.69 L1199.48 1204.69 L1200.07 1204.69 L1200.65 1204.69 L1201.24 1204.69 L1201.83 1204.69 L1202.41 1204.69 L1203 1204.69 L1203.58 1204.69 L1204.17 1204.69 L1204.76 1204.69 L1205.34 1204.69 L1205.93 1204.69 L1206.52 1204.69 L1207.1 1204.69 L1207.69 1204.69 L1208.28 1204.69 L1208.86 1204.69 L1209.45 1204.69 L1210.03 1204.69 L1210.62 1204.69 L1211.21 1204.69 L1211.79 1204.69 L1212.38 1204.69 L1212.97 1204.69 L1213.55 1204.69 L1214.14 1204.69 L1214.73 1204.69 L1215.31 1204.69 L1215.9 1204.69 L1216.49 1204.69 L1217.07 1204.69 L1217.66 1204.69 L1218.24 1204.69 L1218.83 1204.69 L1219.42 1204.69 L1220 1204.69 L1220.59 1204.69 L1221.18 1204.69 L1221.76 1204.69 L1222.35 1204.69 L1222.94 1204.69 L1223.52 1204.69 L1224.11 1204.69 L1224.7 1204.69 L1225.28 1204.69 L1225.87 1204.69 L1226.45 1204.69 L1227.04 1204.69 L1227.63 1204.69 L1228.21 1204.69 L1228.8 1204.69 L1229.39 1204.69 L1229.97 1204.69 L1230.56 1204.69 L1231.15 1204.69 L1231.73 1204.69 L1232.32 1204.69 L1232.91 1204.69 L1233.49 1204.69 L1234.08 1204.69 L1234.66 1204.69 L1235.25 1204.69 L1235.84 1204.69 L1236.42 1204.69 L1237.01 1204.69 L1237.6 1204.69 L1238.18 1204.69 L1238.77 1204.69 L1239.36 1204.69 L1239.94 1204.69 L1240.53 1204.69 L1241.11 1204.69 L1241.7 1204.69 L1242.29 1204.69 L1242.87 1204.69 L1243.46 1204.69 L1244.05 1204.69 L1244.63 1204.69 L1245.22 1204.69 L1245.81 1204.69 L1246.39 1204.69 L1246.98 1204.69 L1247.57 1204.69 L1248.15 1204.69 L1248.74 1204.69 L1249.32 1204.69 L1249.91 1204.69 L1250.5 1204.69 L1251.08 1204.69 L1251.67 1204.69 L1252.26 1204.69 L1252.84 1204.69 L1253.43 1204.69 L1254.02 1204.69 L1254.6 1204.69 L1255.19 1204.69 L1255.78 1204.69 L1256.36 1204.69 L1256.95 1204.69 L1257.53 1204.69 L1258.12 1204.69 L1258.71 1204.69 L1259.29 1204.69 L1259.88 1204.69 L1260.47 1204.69 L1261.05 1204.69 L1261.64 1204.69 L1262.23 1204.69 L1262.81 1204.69 L1263.4 1204.69 L1263.98 1204.69 L1264.57 1204.69 L1265.16 1204.69 L1265.74 1204.69 L1266.33 1204.69 L1266.92 1204.69 L1267.5 1204.69 L1268.09 1204.69 L1268.68 1204.69 L1269.26 1204.69 L1269.85 1204.69 L1270.44 1204.69 L1271.02 1204.69 L1271.61 1204.69 L1272.19 1204.69 L1272.78 1204.69 L1273.37 1204.69 L1273.95 1204.69 L1274.54 1204.69 L1275.13 1204.69 L1275.71 1204.69 L1276.3 1204.69 L1276.89 1204.69 L1277.47 1204.69 L1278.06 1204.69 L1278.65 1204.69 L1279.23 1204.69 L1279.82 1204.69 L1280.4 1204.69 L1280.99 1204.69 L1281.58 1204.69 L1282.16 1204.69 L1282.75 1204.69 L1283.34 1204.69 L1283.92 1204.69 L1284.51 1204.69 L1285.1 1204.69 L1285.68 1204.69 L1286.27 1204.69 L1286.86 1204.69 L1287.44 1204.69 L1288.03 1204.69 L1288.61 1204.69 L1289.2 1204.69 L1289.79 1204.69 L1290.37 1204.69 L1290.96 1204.69 L1291.55 1204.69 L1292.13 1204.69 L1292.72 1204.69 L1293.31 1204.69 L1293.89 1204.69 L1294.48 1204.69 L1295.06 1204.69 L1295.65 1204.69 L1296.24 1204.69 L1296.82 1204.69 L1297.41 1204.69 L1298 1204.69 L1298.58 1204.69 L1299.17 1204.69 L1299.76 1204.69 L1300.34 1204.69 L1300.93 1204.69 L1301.52 1204.69 L1302.1 1204.69 L1302.69 1204.69 L1303.27 1204.69 L1303.86 1204.69 L1304.45 1204.69 L1305.03 1204.69 L1305.62 1204.69 L1306.21 1204.69 L1306.79 1204.69 L1307.38 1204.69 L1307.97 1204.69 L1308.55 1204.69 L1309.14 1204.69 L1309.73 1204.69 L1310.31 1204.69 L1310.9 1204.69 L1311.48 1204.69 L1312.07 1204.69 L1312.66 1204.69 L1313.24 1204.69 L1313.83 1204.69 L1314.42 1204.69 L1315 1204.69 L1315.59 1204.69 L1316.18 1204.69 L1316.76 1204.69 L1317.35 1204.69 L1317.93 1204.69 L1318.52 1204.69 L1319.11 1204.69 L1319.69 1204.69 L1320.28 1204.69 L1320.87 1204.69 L1321.45 1204.69 L1322.04 1204.69 L1322.63 1204.69 L1323.21 1204.69 L1323.8 1204.69 L1324.39 1204.69 L1324.97 1204.69 L1325.56 1204.69 L1326.14 1204.69 L1326.73 1204.69 L1327.32 1204.69 L1327.9 1204.69 L1328.49 1204.69 L1329.08 1204.69 L1329.66 1204.69 L1330.25 1204.69 L1330.84 1204.69 L1331.42 1204.69 L1332.01 1204.69 L1332.6 1204.69 L1333.18 1204.69 L1333.77 1204.69 L1334.35 1204.69 L1334.94 1204.69 L1335.53 1204.69 L1336.11 1204.69 L1336.7 1204.69 L1337.29 1204.69 L1337.87 1204.69 L1338.46 1204.69 L1339.05 1204.69 L1339.63 1204.69 L1340.22 1204.69 L1340.8 1204.69 L1341.39 1204.69 L1341.98 1204.69 L1342.56 1204.69 L1343.15 1204.69 L1343.74 1204.69 L1344.32 1204.69 L1344.91 1204.69 L1345.5 1204.69 L1346.08 1204.69 L1346.67 1204.69 L1347.26 1204.69 L1347.84 1204.69 L1348.43 1204.69 L1349.01 1204.69 L1349.6 1204.69 L1350.19 1204.69 L1350.77 1204.69 L1351.36 1204.69 L1351.95 1204.69 L1352.53 1204.69 L1353.12 1204.69 L1353.71 1204.69 L1354.29 1204.69 L1354.88 1204.69 L1355.47 1204.69 L1356.05 1204.69 L1356.64 1204.69 L1357.22 1204.69 L1357.81 1204.69 L1358.4 1204.69 L1358.98 1204.69 L1359.57 1204.69 L1360.16 1204.69 L1360.74 1204.69 L1361.33 1204.69 L1361.92 1204.69 L1362.5 1204.69 L1363.09 1204.69 L1363.68 1204.69 L1364.26 1204.69 L1364.85 1204.69 L1365.43 1204.69 L1366.02 1204.69 L1366.61 1204.69 L1367.19 1204.69 L1367.78 1204.69 L1368.37 1204.69 L1368.95 1204.69 L1369.54 1204.69 L1370.13 1204.69 L1370.71 1204.69 L1371.3 1204.69 L1371.88 1204.69 L1372.47 1204.69 L1373.06 1204.69 L1373.64 1204.69 L1374.23 1204.69 L1374.82 1204.69 L1375.4 1204.69 L1375.99 1204.69 L1376.58 1204.69 L1377.16 1204.69 L1377.75 1204.69 L1378.34 1204.69 L1378.92 1204.69 L1379.51 1204.69 L1380.09 1204.69 L1380.68 1204.69 L1381.27 1204.69 L1381.85 1204.69 L1382.44 1204.69 L1383.03 1204.69 L1383.61 1204.69 L1384.2 1204.69 L1384.79 1204.69 L1385.37 1204.69 L1385.96 1204.69 L1386.55 1204.69 L1387.13 1204.69 L1387.72 1204.69 L1388.3 1204.69 L1388.89 1204.69 L1389.48 1204.69 L1390.06 1204.69 L1390.65 1204.69 L1391.24 1204.69 L1391.82 1204.69 L1392.41 1204.69 L1393 1204.69 L1393.58 1204.69 L1394.17 1204.69 L1394.75 1204.69 L1395.34 1204.69 L1395.93 1204.69 L1396.51 1204.69 L1397.1 1204.69 L1397.69 1204.69 L1398.27 1204.69 L1398.86 1204.69 L1399.45 1204.69 L1400.03 1204.69 L1400.62 1204.69 L1401.21 1204.69 L1401.79 1204.69 L1402.38 1204.69 L1402.96 1204.69 L1403.55 1204.69 L1404.14 1204.69 L1404.72 1204.69 L1405.31 1204.69 L1405.9 1204.69 L1406.48 1204.69 L1407.07 1204.69 L1407.66 1204.69 L1408.24 1204.69 L1408.83 1204.69 L1409.42 1204.69 L1410 1204.69 L1410.59 1204.69 L1411.17 1204.69 L1411.76 1204.69 L1412.35 1204.69 L1412.93 1204.69 L1413.52 1204.69 L1414.11 1204.69 L1414.69 1204.69 L1415.28 1204.69 L1415.87 1204.69 L1416.45 1204.69 L1417.04 1204.69 L1417.63 1204.69 L1418.21 1204.69 L1418.8 1204.69 L1419.38 1204.69 L1419.97 1204.69 L1420.56 1204.69 L1421.14 1204.69 L1421.73 1204.69 L1422.32 1204.69 L1422.9 1204.69 L1423.49 1204.69 L1424.08 1204.69 L1424.66 1204.69 L1425.25 1204.69 L1425.83 1204.69 L1426.42 1204.69 L1427.01 1204.69 L1427.59 1204.69 L1428.18 1204.69 L1428.77 1204.69 L1429.35 1204.69 L1429.94 1204.69 L1430.53 1204.69 L1431.11 1204.69 L1431.7 1204.69 L1432.29 1204.69 L1432.87 1204.69 L1433.46 1204.69 L1434.04 1204.69 L1434.63 1204.69 L1435.22 1204.69 L1435.8 1204.69 L1436.39 1204.69 L1436.98 1204.69 L1437.56 1204.69 L1438.15 1204.69 L1438.74 1204.69 L1439.32 1204.69 L1439.91 1204.69 L1440.5 1204.69 L1441.08 1204.69 L1441.67 1204.69 L1442.25 1204.69 L1442.84 1204.69 L1443.43 1204.69 L1444.01 1204.69 L1444.6 1204.69 L1445.19 1204.69 L1445.77 1204.69 L1446.36 1204.69 L1446.95 1204.69 L1447.53 1204.69 L1448.12 1204.69 L1448.7 1204.69 L1449.29 1204.69 L1449.88 1204.69 L1450.46 1204.69 L1451.05 1204.69 L1451.64 1204.69 L1452.22 1204.69 L1452.81 1204.69 L1453.4 1204.69 L1453.98 1204.69 L1454.57 1204.69 L1455.16 1204.69 L1455.74 1204.69 L1456.33 1204.69 L1456.91 1204.69 L1457.5 1204.69 L1458.09 1204.69 L1458.67 1204.69 L1459.26 1204.69 L1459.85 1204.69 L1460.43 1204.69 L1461.02 1204.69 L1461.61 1204.69 L1462.19 1204.69 L1462.78 1204.69 L1463.37 1204.69 L1463.95 1204.69 L1464.54 1204.69 L1465.12 1204.69 L1465.71 1204.69 L1466.3 1204.69 L1466.88 1204.69 L1467.47 1204.69 L1468.06 1204.69 L1468.64 1204.69 L1469.23 1204.69 L1469.82 1204.69 L1470.4 1204.69 L1470.99 1204.69 L1471.57 1204.69 L1472.16 1204.69 L1472.75 1204.69 L1473.33 1204.69 L1473.92 1204.69 L1474.51 1204.69 L1475.09 1204.69 L1475.68 1204.69 L1476.27 1204.69 L1476.85 1204.69 L1477.44 1204.69 L1478.03 1204.69 L1478.61 1204.69 L1479.2 1204.69 L1479.78 1204.69 L1480.37 1204.69 L1480.96 1204.69 L1481.54 1204.69 L1482.13 1204.69 L1482.72 1204.69 L1483.3 1204.69 L1483.89 1204.69 L1484.48 1204.69 L1485.06 1204.69 L1485.65 1204.69 L1486.24 1204.69 L1486.82 1204.69 L1487.41 1204.69 L1487.99 1204.69 L1488.58 1204.69 L1489.17 1204.69 L1489.75 1204.69 L1490.34 1204.69 L1490.93 1204.69 L1491.51 1204.69 L1492.1 1204.69 L1492.69 1204.69 L1493.27 1204.69 L1493.86 1204.69 L1494.45 1204.69 L1495.03 1204.69 L1495.62 1204.69 L1496.2 1204.69 L1496.79 1204.69 L1497.38 1204.69 L1497.96 1204.69 L1498.55 1204.69 L1499.14 1204.69 L1499.72 1204.69 L1500.31 1204.69 L1500.9 1204.69 L1501.48 1204.69 L1502.07 1204.69 L1502.65 1204.69 L1503.24 1204.69 L1503.83 1204.69 L1504.41 1204.69 L1505 1204.69 L1505.59 1204.69 L1506.17 1204.69 L1506.76 1204.69 L1507.35 1204.69 L1507.93 1204.69 L1508.52 1204.69 L1509.11 1204.69 L1509.69 1204.69 L1510.28 1204.69 L1510.86 1204.69 L1511.45 1204.69 L1512.04 1204.69 L1512.62 1204.69 L1513.21 1204.69 L1513.8 1204.69 L1514.38 1204.69 L1514.97 1204.69 L1515.56 1204.69 L1516.14 1204.69 L1516.73 1204.69 L1517.32 1204.69 L1517.9 1204.69 L1518.49 1204.69 L1519.07 1204.69 L1519.66 1204.69 L1520.25 1204.69 L1520.83 1204.69 L1521.42 1204.69 L1522.01 1204.69 L1522.59 1204.69 L1523.18 1204.69 L1523.77 1204.69 L1524.35 1204.69 L1524.94 1204.69 L1525.52 1204.69 L1526.11 1204.69 L1526.7 1204.69 L1527.28 1204.69 L1527.87 1204.69 L1528.46 1204.69 L1529.04 1204.69 L1529.63 1204.69 L1530.22 1204.69 L1530.8 1204.69 L1531.39 1204.69 L1531.98 1204.69 L1532.56 1204.69 L1533.15 1204.69 L1533.73 1204.69 L1534.32 1204.69 L1534.91 1204.69 L1535.49 1204.69 L1536.08 1204.69 L1536.67 1204.69 L1537.25 1204.69 L1537.84 1204.69 L1538.43 1204.69 L1539.01 1204.69 L1539.6 1204.69 L1540.19 1204.69 L1540.77 1204.69 L1541.36 1204.69 L1541.94 1204.69 L1542.53 1204.69 L1543.12 1204.69 L1543.7 1204.69 L1544.29 1204.69 L1544.88 1204.69 L1545.46 1204.69 L1546.05 1204.69 L1546.64 1204.69 L1547.22 1204.69 L1547.81 1204.69 L1548.4 1204.69 L1548.98 1204.69 L1549.57 1204.69 L1550.15 1204.69 L1550.74 1204.69 L1551.33 1204.69 L1551.91 1204.69 L1552.5 1204.69 L1553.09 1204.69 L1553.67 1204.69 L1554.26 1204.69 L1554.85 1204.69 L1555.43 1204.69 L1556.02 1204.69 L1556.6 1204.69 L1557.19 1204.69 L1557.78 1204.69 L1558.36 1204.69 L1558.95 1204.69 L1559.54 1204.69 L1560.12 1204.69 L1560.71 1204.69 L1561.3 1204.69 L1561.88 1204.69 L1562.47 1204.69 L1563.06 1204.69 L1563.64 1204.69 L1564.23 1204.69 L1564.81 1204.69 L1565.4 1204.69 L1565.99 1204.69 L1566.57 1204.69 L1567.16 1204.69 L1567.75 1204.69 L1568.33 1204.69 L1568.92 1204.69 L1569.51 1204.69 L1570.09 1204.69 L1570.68 1204.69 L1571.27 1204.69 L1571.85 1204.69 L1572.44 1204.69 L1573.02 1204.69 L1573.61 1204.69 L1574.2 1204.69 L1574.78 1204.69 L1575.37 1204.69 L1575.96 1204.69 L1576.54 1204.69 L1577.13 1204.69 L1577.72 1204.69 L1578.3 1204.69 L1578.89 1204.69 L1579.47 1204.69 L1580.06 1204.69 L1580.65 1204.69 L1581.23 1204.69 L1581.82 1204.69 L1582.41 1204.69 L1582.99 1204.69 L1583.58 1204.69 L1584.17 1204.69 L1584.75 1204.69 L1585.34 1204.69 L1585.93 1204.69 L1586.51 1204.69 L1587.1 1204.69 L1587.68 1204.69 L1588.27 1204.69 L1588.86 1204.69 L1589.44 1204.69 L1590.03 1204.69 L1590.62 1204.69 L1591.2 1204.69 L1591.79 1204.69 L1592.38 1204.69 L1592.96 1204.69 L1593.55 1204.69 L1594.14 1204.69 L1594.72 1204.69 L1595.31 1204.69 L1595.89 1204.69 L1596.48 1204.69 L1597.07 1204.69 L1597.65 1204.69 L1598.24 1204.69 L1598.83 1204.69 L1599.41 1204.69 L1600 1204.69 L1600.59 1204.69 L1601.17 1204.69 L1601.76 1204.69 L1602.34 1204.69 L1602.93 1204.69 L1603.52 1204.69 L1604.1 1204.69 L1604.69 1204.69 L1605.28 1204.69 L1605.86 1204.69 L1606.45 1204.69 L1607.04 1204.69 L1607.62 1204.69 L1608.21 1204.69 L1608.8 1204.69 L1609.38 1204.69 L1609.97 1204.69 L1610.55 1204.69 L1611.14 1204.69 L1611.73 1204.69 L1612.31 1204.69 L1612.9 1204.69 L1613.49 1204.69 L1614.07 1204.69 L1614.66 1204.69 L1615.25 1204.69 L1615.83 1204.69 L1616.42 1204.69 L1617.01 1204.69 L1617.59 1204.69 L1618.18 1204.69 L1618.76 1204.69 L1619.35 1204.69 L1619.94 1204.69 L1620.52 1204.69 L1621.11 1204.69 L1621.7 1204.69 L1622.28 1204.69 L1622.87 1204.69 L1623.46 1204.69 L1624.04 1204.69 L1624.63 1204.69 L1625.22 1204.69 L1625.8 1204.69 L1626.39 1204.69 L1626.97 1204.69 L1627.56 1204.69 L1628.15 1204.69 L1628.73 1204.69 L1629.32 1204.69 L1629.91 1204.69 L1630.49 1204.69 L1631.08 1204.69 L1631.67 1204.69 L1632.25 1204.69 L1632.84 1204.69 L1633.42 1204.69 L1634.01 1204.69 L1634.6 1204.69 L1635.18 1204.69 L1635.77 1204.69 L1636.36 1204.69 L1636.94 1204.69 L1637.53 1204.69 L1638.12 1204.69 L1638.7 1204.69 L1639.29 1204.69 L1639.88 1204.69 L1640.46 1204.69 L1641.05 1204.69 L1641.63 1204.69 L1642.22 1204.69 L1642.81 1204.69 L1643.39 1204.69 L1643.98 1204.69 L1644.57 1204.69 L1645.15 1204.69 L1645.74 1204.69 L1646.33 1204.69 L1646.91 1204.69 L1647.5 1204.69 L1648.09 1204.69 L1648.67 1204.69 L1649.26 1204.69 L1649.84 1204.69 L1650.43 1204.69 L1651.02 1204.69 L1651.6 1204.69 L1652.19 1204.69 L1652.78 1204.69 L1653.36 1204.69 L1653.95 1204.69 L1654.54 1204.69 L1655.12 1204.69 L1655.71 1204.69 L1656.29 1204.69 L1656.88 1204.69 L1657.47 1204.69 L1658.05 1204.69 L1658.64 1204.69 L1659.23 1204.69 L1659.81 1204.69 L1660.4 1204.69 L1660.99 1204.69 L1661.57 1204.69 L1662.16 1204.69 L1662.75 1204.69 L1663.33 1204.69 L1663.92 1204.69 L1664.5 1204.69 L1665.09 1204.69 L1665.68 1204.69 L1666.26 1204.69 L1666.85 1204.69 L1667.44 1204.69 L1668.02 1204.69 L1668.61 1204.69 L1669.2 1204.69 L1669.78 1204.69 L1670.37 1204.69 L1670.96 1204.69 L1671.54 1204.69 L1672.13 1204.69 L1672.71 1204.69 L1673.3 1204.69 L1673.89 1204.69 L1674.47 1204.69 L1675.06 1204.69 L1675.65 1204.69 L1676.23 1204.69 L1676.82 1204.69 L1677.41 1204.69 L1677.99 1204.69 L1678.58 1204.69 L1679.17 1204.69 L1679.75 1204.69 L1680.34 1204.69 L1680.92 1204.69 L1681.51 1204.69 L1682.1 1204.69 L1682.68 1204.69 L1683.27 1204.69 L1683.86 1204.69 L1684.44 1204.69 L1685.03 1204.69 L1685.62 1204.69 L1686.2 1204.69 L1686.79 1204.69 L1687.37 1204.69 L1687.96 1204.69 L1688.55 1204.69 L1689.13 1204.69 L1689.72 1204.69 L1690.31 1204.69 L1690.89 1204.69 L1691.48 1204.69 L1692.07 1204.69 L1692.65 1204.69 L1693.24 1204.69 L1693.83 1204.69 L1694.41 1204.69 L1695 1204.69 L1695.58 1204.69 L1696.17 1204.69 L1696.76 1204.69 L1697.34 1204.69 L1697.93 1204.69 L1698.52 1204.69 L1699.1 1204.69 L1699.69 1204.69 L1700.28 1204.69 L1700.86 1204.69 L1701.45 1204.69 L1702.04 1204.69 L1702.62 1204.69 L1703.21 1204.69 L1703.79 1204.69 L1704.38 1204.69 L1704.97 1204.69 L1705.55 1204.69 L1706.14 1204.69 L1706.73 1204.69 L1707.31 1204.69 L1707.9 1204.69 L1708.49 1204.69 L1709.07 1204.69 L1709.66 1204.69 L1710.24 1204.69 L1710.83 1204.69 L1711.42 1204.69 L1712 1204.69 L1712.59 1204.69 L1713.18 1204.69 L1713.76 1204.69 L1714.35 1204.69 L1714.94 1204.69 L1715.52 1204.69 L1716.11 1204.69 L1716.7 1204.69 L1717.28 1204.69 L1717.87 1204.69 L1718.45 1204.69 L1719.04 1204.69 L1719.63 1204.69 L1720.21 1204.69 L1720.8 1204.69 L1721.39 1204.69 L1721.97 1204.69 L1722.56 1204.69 L1723.15 1204.69 L1723.73 1204.69 L1724.32 1204.69 L1724.91 1204.69 L1725.49 1204.69 L1726.08 1204.69 L1726.66 1204.69 L1727.25 1204.69 L1727.84 1204.69 L1728.42 1204.69 L1729.01 1204.69 L1729.6 1204.69 L1730.18 1204.69 L1730.77 1204.69 L1731.36 1204.69 L1731.94 1204.69 L1732.53 1204.69 L1733.11 1204.69 L1733.7 1204.69 L1734.29 1204.69 L1734.87 1204.69 L1735.46 1204.69 L1736.05 1204.69 L1736.63 1204.69 L1737.22 1204.69 L1737.81 1204.69 L1738.39 1204.69 L1738.98 1204.69 L1739.57 1204.69 L1740.15 1204.69 L1740.74 1204.69 L1741.32 1204.69 L1741.91 1204.69 L1742.5 1204.69 L1743.08 1204.69 L1743.67 1204.69 L1744.26 1204.69 L1744.84 1204.69 L1745.43 1204.69 L1746.02 1204.69 L1746.6 1204.69 L1747.19 1204.69 L1747.78 1204.69 L1748.36 1204.69 L1748.95 1204.69 L1749.53 1204.69 L1750.12 1204.69 L1750.71 1204.69 L1751.29 1204.69 L1751.88 1204.69 L1752.47 1204.69 L1753.05 1204.69 L1753.64 1204.69 L1754.23 1204.69 L1754.81 1204.69 L1755.4 1204.69 L1755.99 1204.69 L1756.57 1204.69 L1757.16 1204.69 L1757.74 1204.69 L1758.33 1204.69 L1758.92 1204.69 L1759.5 1204.69 L1760.09 1204.69 L1760.68 1204.69 L1761.26 1204.69 L1761.85 1204.69 L1762.44 1204.69 L1763.02 1204.69 L1763.61 1204.69 L1764.19 1204.69 L1764.78 1204.69 L1765.37 1204.69 L1765.95 1204.69 L1766.54 1204.69 L1767.13 1204.69 L1767.71 1204.69 L1768.3 1204.69 L1768.89 1204.69 L1769.47 1204.69 L1770.06 1204.69 L1770.65 1204.69 L1771.23 1204.69 L1771.82 1204.69 L1772.4 1204.69 L1772.99 1204.69 L1773.58 1204.69 L1774.16 1204.69 L1774.75 1204.69 L1775.34 1204.69 L1775.92 1204.69 L1776.51 1204.69 L1777.1 1204.69 L1777.68 1204.69 L1778.27 1204.69 L1778.86 1204.69 L1779.44 1204.69 L1780.03 1204.69 L1780.61 1204.69 L1781.2 1204.69 L1781.79 1204.69 L1782.37 1204.69 L1782.96 1204.69 L1783.55 1204.69 L1784.13 1204.69 L1784.72 1204.69 L1785.31 1204.69 L1785.89 1204.69 L1786.48 1204.69 L1787.06 1204.69 L1787.65 1204.69 L1788.24 1204.69 L1788.82 1204.69 L1789.41 1204.69 L1790 1204.69 L1790.58 1204.69 L1791.17 1204.69 L1791.76 1204.69 L1792.34 1204.69 L1792.93 1204.69 L1793.52 1204.69 L1794.1 1204.69 L1794.69 1204.69 L1795.27 1204.69 L1795.86 1204.69 L1796.45 1204.69 L1797.03 1204.69 L1797.62 1204.69 L1798.21 1204.69 L1798.79 1204.69 L1799.38 1204.69 L1799.97 1204.69 L1800.55 1204.69 L1801.14 1204.69 L1801.73 1204.69 L1802.31 1204.69 L1802.9 1204.69 L1803.48 1204.69 L1804.07 1204.69 L1804.66 1204.69 L1805.24 1204.69 L1805.83 1204.69 L1806.42 1204.69 L1807 1204.69 L1807.59 1204.69 L1808.18 1204.69 L1808.76 1204.69 L1809.35 1204.69 L1809.94 1204.69 L1810.52 1204.69 L1811.11 1204.69 L1811.69 1204.69 L1812.28 1204.69 L1812.87 1204.69 L1813.45 1204.69 L1814.04 1204.69 L1814.63 1204.69 L1815.21 1204.69 L1815.8 1204.69 L1816.39 1204.69 L1816.97 1204.69 L1817.56 1204.69 L1818.14 1204.69 L1818.73 1204.69 L1819.32 1204.69 L1819.9 1204.69 L1820.49 1204.69 L1821.08 1204.69 L1821.66 1204.69 L1822.25 1204.69 L1822.84 1204.69 L1823.42 1204.69 L1824.01 1204.69 L1824.6 1204.69 L1825.18 1204.69 L1825.77 1204.69 L1826.35 1204.69 L1826.94 1204.69 L1827.53 1204.69 L1828.11 1204.69 L1828.7 1204.69 L1829.29 1204.69 L1829.87 1204.69 L1830.46 1204.69 L1831.05 1204.69 L1831.63 1204.69 L1832.22 1204.69 L1832.81 1204.69 L1833.39 1204.69 L1833.98 1204.69 L1834.56 1204.69 L1835.15 1204.69 L1835.74 1204.69 L1836.32 1204.69 L1836.91 1204.69 L1837.5 1204.69 L1838.08 1204.69 L1838.67 1204.69 L1839.26 1204.69 L1839.84 1204.69 L1840.43 1204.69 L1841.01 1204.69 L1841.6 1204.69 L1842.19 1204.69 L1842.77 1204.69 L1843.36 1204.69 L1843.95 1204.69 L1844.53 1204.69 L1845.12 1204.69 L1845.71 1204.69 L1846.29 1204.69 L1846.88 1204.69 L1847.47 1204.69 L1848.05 1204.69 L1848.64 1204.69 L1849.22 1204.69 L1849.81 1204.69 L1850.4 1204.69 L1850.98 1204.69 L1851.57 1204.69 L1852.16 1204.69 L1852.74 1204.69 L1853.33 1204.69 L1853.92 1204.69 L1854.5 1204.69 L1855.09 1204.69 L1855.68 1204.69 L1856.26 1204.69 L1856.85 1204.69 L1857.43 1204.69 L1858.02 1204.69 L1858.61 1204.69 L1859.19 1204.69 L1859.78 1204.69 L1860.37 1204.69 L1860.95 1204.69 L1861.54 1204.69 L1862.13 1204.69 L1862.71 1204.69 L1863.3 1204.69 L1863.88 1204.69 L1864.47 1204.69 L1865.06 1204.69 L1865.64 1204.69 L1866.23 1204.69 L1866.82 1204.69 L1867.4 1204.69 L1867.99 1204.69 L1868.58 1204.69 L1869.16 1204.69 L1869.75 1204.69 L1870.34 1204.69 L1870.92 1204.69 L1871.51 1204.69 L1872.09 1204.69 L1872.68 1204.69 L1873.27 1204.69 L1873.85 1204.69 L1874.44 1204.69 L1875.03 1204.69 L1875.61 1204.69 L1876.2 1204.69 L1876.79 1204.69 L1877.37 1204.69 L1877.96 1204.69 L1878.55 1204.69 L1879.13 1204.69 L1879.72 1204.69 L1880.3 1204.69 L1880.89 1204.69 L1881.48 1204.69 L1882.06 1204.69 L1882.65 1204.69 L1883.24 1204.69 L1883.82 1204.69 L1884.41 1204.69 L1885 1204.69 L1885.58 1204.69 L1886.17 1204.69 L1886.76 1204.69 L1887.34 1204.69 L1887.93 1204.69 L1888.51 1204.69 L1889.1 1204.69 L1889.69 1204.69 L1890.27 1204.69 L1890.86 1204.69 L1891.45 1204.69 L1892.03 1204.69 L1892.62 1204.69 L1893.21 1204.69 L1893.79 1204.69 L1894.38 1204.69 L1894.96 1204.69 L1895.55 1204.69 L1896.14 1204.69 L1896.72 1204.69 L1897.31 1204.69 L1897.9 1204.69 L1898.48 1204.69 L1899.07 1204.69 L1899.66 1204.69 L1900.24 1204.69 L1900.83 1204.69 L1901.42 1204.69 L1902 1204.69 L1902.59 1204.69 L1903.17 1204.69 L1903.76 1204.69 L1904.35 1204.69 L1904.93 1204.69 L1905.52 1204.69 L1906.11 1204.69 L1906.69 1204.69 L1907.28 1204.69 L1907.87 1204.69 L1908.45 1204.69 L1909.04 1204.69 L1909.63 1204.69 L1910.21 1204.69 L1910.8 1204.69 L1911.38 1204.69 L1911.97 1204.69 L1912.56 1204.69 L1913.14 1204.69 L1913.73 1204.69 L1914.32 1204.69 L1914.9 1204.69 L1915.49 1204.69 L1916.08 1204.69 L1916.66 1204.69 L1917.25 1204.69 L1917.83 1204.69 L1918.42 1204.69 L1919.01 1204.69 L1919.59 1204.69 L1920.18 1204.69 L1920.77 1204.69 L1921.35 1204.69 L1921.94 1204.69 L1922.53 1204.69 L1923.11 1204.69 L1923.7 1204.69 L1924.29 1204.69 L1924.87 1204.69 L1925.46 1204.69 L1926.04 1204.69 L1926.63 1204.69 L1927.22 1204.69 L1927.8 1204.69 L1928.39 1204.69 L1928.98 1204.69 L1929.56 1204.69 L1930.15 1204.69 L1930.74 1204.69 L1931.32 1204.69 L1931.91 1204.69 L1932.5 1204.69 L1933.08 1204.69 L1933.67 1204.69 L1934.25 1204.69 L1934.84 1204.69 L1935.43 1204.69 L1936.01 1204.69 L1936.6 1204.69 L1937.19 1204.69 L1937.77 1204.69 L1938.36 1204.69 L1938.95 1204.69 L1939.53 1204.69 L1940.12 1204.69 L1940.71 1204.69 L1941.29 1204.69 L1941.88 1204.69 L1942.46 1204.69 L1943.05 1204.69 L1943.64 1204.69 L1944.22 1204.69 L1944.81 1204.69 L1945.4 1204.69 L1945.98 1204.69 L1946.57 1204.69 L1947.16 1204.69 L1947.74 1204.69 L1948.33 1204.69 L1948.91 1204.69 L1949.5 1204.69 L1950.09 1204.69 L1950.67 1204.69 L1951.26 1204.69 L1951.85 1204.69 L1952.43 1204.69 L1953.02 1204.69 L1953.61 1204.69 L1954.19 1204.69 L1954.78 1204.69 L1955.37 1204.69 L1955.95 1204.69 L1956.54 1204.69 L1957.12 1204.69 L1957.71 1204.69 L1958.3 1204.69 L1958.88 1204.69 L1959.47 1204.69 L1960.06 1204.69 L1960.64 1204.69 L1961.23 1204.69 L1961.82 1204.69 L1962.4 1204.69 L1962.99 1204.69 L1963.58 1204.69 L1964.16 1204.69 L1964.75 1204.69 L1965.33 1204.69 L1965.92 1204.69 L1966.51 1204.69 L1967.09 1204.69 L1967.68 1204.69 L1968.27 1204.69 L1968.85 1204.69 L1969.44 1204.69 L1970.03 1204.69 L1970.61 1204.69 L1971.2 1204.69 L1971.78 1204.69 L1972.37 1204.69 L1972.96 1204.69 L1973.54 1204.69 L1974.13 1204.69 L1974.72 1204.69 L1975.3 1204.69 L1975.89 1204.69 L1976.48 1204.69 L1977.06 1204.69 L1977.65 1204.69 L1978.24 1204.69 L1978.82 1204.69 L1979.41 1204.69 L1979.99 1204.69 L1980.58 1204.69 L1981.17 1204.69 L1981.75 1204.69 L1982.34 1204.69 L1982.93 1204.69 L1983.51 1204.69 L1984.1 1204.69 L1984.69 1204.69 L1985.27 1204.69 L1985.86 1204.69 L1986.45 1204.69 L1987.03 1204.69 L1987.62 1204.69 L1988.2 1204.69 L1988.79 1204.69 L1989.38 1204.69 L1989.96 1204.69 L1990.55 1204.69 L1991.14 1204.69 L1991.72 1204.69 L1992.31 1204.69 L1992.9 1204.69 L1993.48 1204.69 L1994.07 1204.69 L1994.65 1204.69 L1995.24 1204.69 L1995.83 1204.69 L1996.41 1204.69 L1997 1204.69 L1997.59 1204.69 L1998.17 1204.69 L1998.76 1204.69 L1999.35 1204.69 L1999.93 1204.69 L2000.52 1204.69 L2001.11 1204.69 L2001.69 1204.69 L2002.28 1204.69 L2002.86 1204.69 L2003.45 1204.69 L2004.04 1204.69 L2004.62 1204.69 L2005.21 1204.69 L2005.8 1204.69 L2006.38 1204.69 L2006.97 1204.69 L2007.56 1204.69 L2008.14 1204.69 L2008.73 1204.69 L2009.32 1204.69 L2009.9 1204.69 L2010.49 1204.69 L2011.07 1204.69 L2011.66 1204.69 L2012.25 1204.69 L2012.83 1204.69 L2013.42 1204.69 L2014.01 1204.69 L2014.59 1204.69 L2015.18 1204.69 L2015.77 1204.69 L2016.35 1204.69 L2016.94 1204.69 L2017.53 1204.69 L2018.11 1204.69 L2018.7 1204.69 L2019.28 1204.69 L2019.87 1204.69 L2020.46 1204.69 L2021.04 1204.69 L2021.63 1204.69 L2022.22 1204.69 L2022.8 1204.69 L2023.39 1204.69 L2023.98 1204.69 L2024.56 1204.69 L2025.15 1204.69 L2025.73 1204.69 L2026.32 1204.69 L2026.91 1204.69 L2027.49 1204.69 L2028.08 1204.69 L2028.67 1204.69 L2029.25 1204.69 L2029.84 1204.69 L2030.43 1204.69 L2031.01 1204.69 L2031.6 1204.69 L2032.19 1204.69 L2032.77 1204.69 L2033.36 1204.69 L2033.94 1204.69 L2034.53 1204.69 L2035.12 1204.69 L2035.7 1204.69 L2036.29 1204.69 L2036.88 1204.69 L2037.46 1204.69 L2038.05 1204.69 L2038.64 1204.69 L2039.22 1204.69 L2039.81 1204.69 L2040.4 1204.69 L2040.98 1204.69 L2041.57 1204.69 L2042.15 1204.69 L2042.74 1204.69 L2043.33 1204.69 L2043.91 1204.69 L2044.5 1204.69 L2045.09 1204.69 L2045.67 1204.69 L2046.26 1204.69 L2046.85 1204.69 L2047.43 1204.69 L2048.02 1204.69 L2048.6 1204.69 L2049.19 1204.69 L2049.78 1204.69 L2050.36 1204.69 L2050.95 1204.69 L2051.54 1204.69 L2052.12 1204.69 L2052.71 1204.69 L2053.3 1204.69 L2053.88 1204.69 L2054.47 1204.69 L2055.06 1204.69 L2055.64 1204.69 L2056.23 1204.69 L2056.81 1204.69 L2057.4 1204.69 L2057.99 1204.69 L2058.57 1204.69 L2059.16 1204.69 L2059.75 1204.69 L2060.33 1204.69 L2060.92 1204.69 L2061.51 1204.69 L2062.09 1204.69 L2062.68 1204.69 L2063.27 1204.69 L2063.85 1204.69 L2064.44 1204.69 L2065.02 1204.69 L2065.61 1204.69 L2066.2 1204.69 L2066.78 1204.69 L2067.37 1204.69 L2067.96 1204.69 L2068.54 1204.69 L2069.13 1204.69 L2069.72 1204.69 L2070.3 1204.69 L2070.89 1204.69 L2071.48 1204.69 L2072.06 1204.69 L2072.65 1204.69 L2073.23 1204.69 L2073.82 1204.69 L2074.41 1204.69 L2074.99 1204.69 L2075.58 1204.69 L2076.17 1204.69 L2076.75 1204.69 L2077.34 1204.69 L2077.93 1204.69 L2078.51 1204.69 L2079.1 1204.69 L2079.68 1204.69 L2080.27 1204.69 L2080.86 1204.69 L2081.44 1204.69 L2082.03 1204.69 L2082.62 1204.69 L2083.2 1204.69 L2083.79 1204.69 L2084.38 1204.69 L2084.96 1204.69 L2085.55 1204.69 L2086.14 1204.69 L2086.72 1204.69 L2087.31 1204.69 L2087.89 1204.69 L2088.48 1204.69 L2089.07 1204.69 L2089.65 1204.69 L2090.24 1204.69 L2090.83 1204.69 L2091.41 1204.69 L2092 1204.69 L2092.59 1204.69 L2093.17 1204.69 L2093.76 1204.69 L2094.35 1204.69 L2094.93 1204.69 L2095.52 1204.69 L2096.1 1204.69 L2096.69 1204.69 L2097.28 1204.69 L2097.86 1204.69 L2098.45 1204.69 L2099.04 1204.69 L2099.62 1204.69 L2100.21 1204.69 L2100.8 1204.69 L2101.38 1204.69 L2101.97 1204.69 L2102.55 1204.69 L2103.14 1204.69 L2103.73 1204.69 L2104.31 1204.69 L2104.9 1204.69 L2105.49 1204.69 L2106.07 1204.69 L2106.66 1204.69 L2107.25 1204.69 L2107.83 1204.69 L2108.42 1204.69 L2109.01 1204.69 L2109.59 1204.69 L2110.18 1204.69 L2110.76 1204.69 L2111.35 1204.69 L2111.94 1204.69 L2112.52 1204.69 L2113.11 1204.69 L2113.7 1204.69 L2114.28 1204.69 L2114.87 1204.69 L2115.46 1204.69 L2116.04 1204.69 L2116.63 1204.69 L2117.22 1204.69 L2117.8 1204.69 L2118.39 1204.69 L2118.97 1204.69 L2119.56 1204.69 L2120.15 1204.69 L2120.73 1204.69 L2121.32 1204.69 L2121.91 1204.69 L2122.49 1204.69 L2123.08 1204.69 L2123.67 1204.69 L2124.25 1204.69 L2124.84 1204.69 L2125.42 1204.69 L2126.01 1204.69 L2126.6 1204.69 L2127.18 1204.69 L2127.77 1204.69 L2128.36 1204.69 L2128.94 1204.69 L2129.53 1204.69 L2130.12 1204.69 L2130.7 1204.69 L2131.29 1204.69 L2131.88 1204.69 L2132.46 1204.69 L2133.05 1204.69 L2133.63 1204.69 L2134.22 1204.69 L2134.81 1204.69 L2135.39 1204.69 L2135.98 1204.69 L2136.57 1204.69 L2137.15 1204.69 L2137.74 1204.69 L2138.33 1204.69 L2138.91 1204.69 L2139.5 1204.69 L2140.09 1204.69 L2140.67 1204.69 L2141.26 1204.69 L2141.84 1204.69 L2142.43 1204.69 L2143.02 1204.69 L2143.6 1204.69 L2144.19 1204.69 L2144.78 1204.69 L2145.36 1204.69 L2145.95 1204.69 L2146.54 1204.69 L2147.12 1204.69 L2147.71 1204.69 L2148.3 1204.69 L2148.88 1204.69 L2149.47 1204.69 L2150.05 1204.69 L2150.64 1204.69 L2151.23 1204.69 L2151.81 1204.69 L2152.4 1204.69 L2152.99 1204.69 L2153.57 1204.69 L2154.16 1204.69 L2154.75 1204.69 L2155.33 1204.69 L2155.92 1204.69 L2156.5 1204.69 L2157.09 1204.69 L2157.68 1204.69 L2158.26 1204.69 L2158.26 1204.57 L2157.68 1204.57 L2157.09 1204.57 L2156.5 1204.57 L2155.92 1204.57 L2155.33 1204.57 L2154.75 1204.57 L2154.16 1204.57 L2153.57 1204.57 L2152.99 1204.57 L2152.4 1204.57 L2151.81 1204.57 L2151.23 1204.57 L2150.64 1204.57 L2150.05 1204.57 L2149.47 1204.57 L2148.88 1204.57 L2148.3 1204.57 L2147.71 1204.57 L2147.12 1204.57 L2146.54 1204.57 L2145.95 1204.57 L2145.36 1204.57 L2144.78 1204.57 L2144.19 1204.57 L2143.6 1204.57 L2143.02 1204.57 L2142.43 1204.57 L2141.84 1204.57 L2141.26 1204.57 L2140.67 1204.57 L2140.09 1204.57 L2139.5 1204.57 L2138.91 1204.57 L2138.33 1204.57 L2137.74 1204.57 L2137.15 1204.57 L2136.57 1204.57 L2135.98 1204.57 L2135.39 1204.57 L2134.81 1204.57 L2134.22 1204.57 L2133.63 1204.57 L2133.05 1204.57 L2132.46 1204.57 L2131.88 1204.57 L2131.29 1204.57 L2130.7 1204.57 L2130.12 1204.57 L2129.53 1204.57 L2128.94 1204.57 L2128.36 1204.57 L2127.77 1204.57 L2127.18 1204.57 L2126.6 1204.57 L2126.01 1204.57 L2125.42 1204.57 L2124.84 1204.57 L2124.25 1204.57 L2123.67 1204.57 L2123.08 1204.57 L2122.49 1204.57 L2121.91 1204.57 L2121.32 1204.57 L2120.73 1204.57 L2120.15 1204.57 L2119.56 1204.57 L2118.97 1204.57 L2118.39 1204.57 L2117.8 1204.57 L2117.22 1204.57 L2116.63 1204.57 L2116.04 1204.57 L2115.46 1204.57 L2114.87 1204.57 L2114.28 1204.57 L2113.7 1204.57 L2113.11 1204.57 L2112.52 1204.57 L2111.94 1204.57 L2111.35 1204.57 L2110.76 1204.57 L2110.18 1204.57 L2109.59 1204.57 L2109.01 1204.57 L2108.42 1204.57 L2107.83 1204.57 L2107.25 1204.57 L2106.66 1204.57 L2106.07 1204.57 L2105.49 1204.57 L2104.9 1204.57 L2104.31 1204.57 L2103.73 1204.57 L2103.14 1204.57 L2102.55 1204.57 L2101.97 1204.57 L2101.38 1204.57 L2100.8 1204.57 L2100.21 1204.57 L2099.62 1204.57 L2099.04 1204.57 L2098.45 1204.57 L2097.86 1204.57 L2097.28 1204.57 L2096.69 1204.57 L2096.1 1204.57 L2095.52 1204.57 L2094.93 1204.57 L2094.35 1204.57 L2093.76 1204.57 L2093.17 1204.57 L2092.59 1204.57 L2092 1204.57 L2091.41 1204.57 L2090.83 1204.57 L2090.24 1204.57 L2089.65 1204.57 L2089.07 1204.57 L2088.48 1204.57 L2087.89 1204.57 L2087.31 1204.57 L2086.72 1204.57 L2086.14 1204.57 L2085.55 1204.57 L2084.96 1204.57 L2084.38 1204.57 L2083.79 1204.57 L2083.2 1204.57 L2082.62 1204.57 L2082.03 1204.57 L2081.44 1204.57 L2080.86 1204.57 L2080.27 1204.57 L2079.68 1204.57 L2079.1 1204.57 L2078.51 1204.57 L2077.93 1204.57 L2077.34 1204.57 L2076.75 1204.57 L2076.17 1204.57 L2075.58 1204.57 L2074.99 1204.57 L2074.41 1204.57 L2073.82 1204.57 L2073.23 1204.57 L2072.65 1204.57 L2072.06 1204.57 L2071.48 1204.57 L2070.89 1204.57 L2070.3 1204.57 L2069.72 1204.57 L2069.13 1204.57 L2068.54 1204.57 L2067.96 1204.57 L2067.37 1204.57 L2066.78 1204.57 L2066.2 1204.57 L2065.61 1204.57 L2065.02 1204.57 L2064.44 1204.57 L2063.85 1204.57 L2063.27 1204.57 L2062.68 1204.57 L2062.09 1204.57 L2061.51 1204.57 L2060.92 1204.57 L2060.33 1204.57 L2059.75 1204.57 L2059.16 1204.57 L2058.57 1204.57 L2057.99 1204.57 L2057.4 1204.57 L2056.81 1204.57 L2056.23 1204.57 L2055.64 1204.57 L2055.06 1204.57 L2054.47 1204.57 L2053.88 1204.57 L2053.3 1204.57 L2052.71 1204.57 L2052.12 1204.57 L2051.54 1204.57 L2050.95 1204.57 L2050.36 1204.57 L2049.78 1204.57 L2049.19 1204.57 L2048.6 1204.57 L2048.02 1204.57 L2047.43 1204.57 L2046.85 1204.57 L2046.26 1204.57 L2045.67 1204.57 L2045.09 1204.57 L2044.5 1204.57 L2043.91 1204.57 L2043.33 1204.57 L2042.74 1204.57 L2042.15 1204.57 L2041.57 1204.57 L2040.98 1204.57 L2040.4 1204.57 L2039.81 1204.57 L2039.22 1204.57 L2038.64 1204.57 L2038.05 1204.57 L2037.46 1204.57 L2036.88 1204.57 L2036.29 1204.57 L2035.7 1204.57 L2035.12 1204.57 L2034.53 1204.57 L2033.94 1204.57 L2033.36 1204.57 L2032.77 1204.57 L2032.19 1204.57 L2031.6 1204.57 L2031.01 1204.57 L2030.43 1204.57 L2029.84 1204.57 L2029.25 1204.57 L2028.67 1204.57 L2028.08 1204.57 L2027.49 1204.57 L2026.91 1204.57 L2026.32 1204.57 L2025.73 1204.57 L2025.15 1204.57 L2024.56 1204.57 L2023.98 1204.57 L2023.39 1204.57 L2022.8 1204.57 L2022.22 1204.57 L2021.63 1204.57 L2021.04 1204.57 L2020.46 1204.57 L2019.87 1204.57 L2019.28 1204.57 L2018.7 1204.57 L2018.11 1204.57 L2017.53 1204.57 L2016.94 1204.57 L2016.35 1204.57 L2015.77 1204.57 L2015.18 1204.57 L2014.59 1204.57 L2014.01 1204.57 L2013.42 1204.57 L2012.83 1204.57 L2012.25 1204.57 L2011.66 1204.57 L2011.07 1204.57 L2010.49 1204.57 L2009.9 1204.57 L2009.32 1204.57 L2008.73 1204.57 L2008.14 1204.57 L2007.56 1204.57 L2006.97 1204.57 L2006.38 1204.57 L2005.8 1204.57 L2005.21 1204.57 L2004.62 1204.57 L2004.04 1204.57 L2003.45 1204.57 L2002.86 1204.57 L2002.28 1204.57 L2001.69 1204.57 L2001.11 1204.57 L2000.52 1204.57 L1999.93 1204.57 L1999.35 1204.57 L1998.76 1204.57 L1998.17 1204.57 L1997.59 1204.57 L1997 1204.57 L1996.41 1204.57 L1995.83 1204.57 L1995.24 1204.57 L1994.65 1204.57 L1994.07 1204.57 L1993.48 1204.57 L1992.9 1204.57 L1992.31 1204.57 L1991.72 1204.57 L1991.14 1204.57 L1990.55 1204.57 L1989.96 1204.57 L1989.38 1204.57 L1988.79 1204.57 L1988.2 1204.57 L1987.62 1204.57 L1987.03 1204.57 L1986.45 1204.57 L1985.86 1204.57 L1985.27 1204.57 L1984.69 1204.57 L1984.1 1204.57 L1983.51 1204.57 L1982.93 1204.57 L1982.34 1204.57 L1981.75 1204.57 L1981.17 1204.57 L1980.58 1204.57 L1979.99 1204.57 L1979.41 1204.57 L1978.82 1204.57 L1978.24 1204.57 L1977.65 1204.57 L1977.06 1204.57 L1976.48 1204.57 L1975.89 1204.57 L1975.3 1204.57 L1974.72 1204.57 L1974.13 1204.57 L1973.54 1204.57 L1972.96 1204.57 L1972.37 1204.57 L1971.78 1204.57 L1971.2 1204.57 L1970.61 1204.57 L1970.03 1204.57 L1969.44 1204.57 L1968.85 1204.57 L1968.27 1204.57 L1967.68 1204.57 L1967.09 1204.57 L1966.51 1204.57 L1965.92 1204.57 L1965.33 1204.57 L1964.75 1204.57 L1964.16 1204.57 L1963.58 1204.57 L1962.99 1204.57 L1962.4 1204.57 L1961.82 1204.57 L1961.23 1204.57 L1960.64 1204.57 L1960.06 1204.57 L1959.47 1204.57 L1958.88 1204.57 L1958.3 1204.57 L1957.71 1204.57 L1957.12 1204.57 L1956.54 1204.57 L1955.95 1204.57 L1955.37 1204.57 L1954.78 1204.57 L1954.19 1204.57 L1953.61 1204.57 L1953.02 1204.57 L1952.43 1204.57 L1951.85 1204.57 L1951.26 1204.57 L1950.67 1204.57 L1950.09 1204.57 L1949.5 1204.57 L1948.91 1204.57 L1948.33 1204.57 L1947.74 1204.57 L1947.16 1204.57 L1946.57 1204.57 L1945.98 1204.57 L1945.4 1204.57 L1944.81 1204.57 L1944.22 1204.57 L1943.64 1204.57 L1943.05 1204.57 L1942.46 1204.57 L1941.88 1204.57 L1941.29 1204.57 L1940.71 1204.57 L1940.12 1204.57 L1939.53 1204.57 L1938.95 1204.57 L1938.36 1204.57 L1937.77 1204.57 L1937.19 1204.57 L1936.6 1204.57 L1936.01 1204.57 L1935.43 1204.57 L1934.84 1204.57 L1934.25 1204.57 L1933.67 1204.57 L1933.08 1204.57 L1932.5 1204.57 L1931.91 1204.57 L1931.32 1204.57 L1930.74 1204.57 L1930.15 1204.57 L1929.56 1204.57 L1928.98 1204.57 L1928.39 1204.57 L1927.8 1204.57 L1927.22 1204.57 L1926.63 1204.57 L1926.04 1204.57 L1925.46 1204.57 L1924.87 1204.57 L1924.29 1204.57 L1923.7 1204.57 L1923.11 1204.57 L1922.53 1204.57 L1921.94 1204.57 L1921.35 1204.57 L1920.77 1204.57 L1920.18 1204.57 L1919.59 1204.57 L1919.01 1204.57 L1918.42 1204.57 L1917.83 1204.57 L1917.25 1204.57 L1916.66 1204.57 L1916.08 1204.57 L1915.49 1204.57 L1914.9 1204.57 L1914.32 1204.57 L1913.73 1204.57 L1913.14 1204.57 L1912.56 1204.57 L1911.97 1204.57 L1911.38 1204.57 L1910.8 1204.57 L1910.21 1204.57 L1909.63 1204.57 L1909.04 1204.57 L1908.45 1204.57 L1907.87 1204.57 L1907.28 1204.57 L1906.69 1204.57 L1906.11 1204.57 L1905.52 1204.57 L1904.93 1204.57 L1904.35 1204.57 L1903.76 1204.57 L1903.17 1204.57 L1902.59 1204.57 L1902 1204.57 L1901.42 1204.57 L1900.83 1204.57 L1900.24 1204.57 L1899.66 1204.57 L1899.07 1204.57 L1898.48 1204.57 L1897.9 1204.57 L1897.31 1204.57 L1896.72 1204.57 L1896.14 1204.57 L1895.55 1204.57 L1894.96 1204.57 L1894.38 1204.57 L1893.79 1204.57 L1893.21 1204.57 L1892.62 1204.57 L1892.03 1204.57 L1891.45 1204.57 L1890.86 1204.57 L1890.27 1204.57 L1889.69 1204.57 L1889.1 1204.57 L1888.51 1204.57 L1887.93 1204.57 L1887.34 1204.57 L1886.76 1204.57 L1886.17 1204.57 L1885.58 1204.57 L1885 1204.57 L1884.41 1204.57 L1883.82 1204.57 L1883.24 1204.57 L1882.65 1204.57 L1882.06 1204.57 L1881.48 1204.57 L1880.89 1204.57 L1880.3 1204.57 L1879.72 1204.57 L1879.13 1204.57 L1878.55 1204.57 L1877.96 1204.57 L1877.37 1204.57 L1876.79 1204.57 L1876.2 1204.57 L1875.61 1204.57 L1875.03 1204.57 L1874.44 1204.57 L1873.85 1204.57 L1873.27 1204.57 L1872.68 1204.57 L1872.09 1204.57 L1871.51 1204.57 L1870.92 1204.57 L1870.34 1204.57 L1869.75 1204.57 L1869.16 1204.57 L1868.58 1204.57 L1867.99 1204.57 L1867.4 1204.57 L1866.82 1204.57 L1866.23 1204.57 L1865.64 1204.57 L1865.06 1204.57 L1864.47 1204.57 L1863.88 1204.57 L1863.3 1204.57 L1862.71 1204.57 L1862.13 1204.57 L1861.54 1204.57 L1860.95 1204.57 L1860.37 1204.57 L1859.78 1204.57 L1859.19 1204.57 L1858.61 1204.57 L1858.02 1204.57 L1857.43 1204.57 L1856.85 1204.57 L1856.26 1204.57 L1855.68 1204.57 L1855.09 1204.57 L1854.5 1204.57 L1853.92 1204.57 L1853.33 1204.57 L1852.74 1204.57 L1852.16 1204.57 L1851.57 1204.57 L1850.98 1204.57 L1850.4 1204.57 L1849.81 1204.57 L1849.22 1204.57 L1848.64 1204.57 L1848.05 1204.57 L1847.47 1204.57 L1846.88 1204.57 L1846.29 1204.57 L1845.71 1204.57 L1845.12 1204.57 L1844.53 1204.57 L1843.95 1204.57 L1843.36 1204.57 L1842.77 1204.57 L1842.19 1204.57 L1841.6 1204.57 L1841.01 1204.57 L1840.43 1204.57 L1839.84 1204.57 L1839.26 1204.57 L1838.67 1204.57 L1838.08 1204.57 L1837.5 1204.57 L1836.91 1204.57 L1836.32 1204.57 L1835.74 1204.57 L1835.15 1204.57 L1834.56 1204.57 L1833.98 1204.57 L1833.39 1204.57 L1832.81 1204.57 L1832.22 1204.57 L1831.63 1204.57 L1831.05 1204.57 L1830.46 1204.57 L1829.87 1204.57 L1829.29 1204.57 L1828.7 1204.57 L1828.11 1204.57 L1827.53 1204.57 L1826.94 1204.57 L1826.35 1204.57 L1825.77 1204.57 L1825.18 1204.57 L1824.6 1204.57 L1824.01 1204.57 L1823.42 1204.57 L1822.84 1204.57 L1822.25 1204.57 L1821.66 1204.57 L1821.08 1204.57 L1820.49 1204.57 L1819.9 1204.57 L1819.32 1204.57 L1818.73 1204.57 L1818.14 1204.57 L1817.56 1204.57 L1816.97 1204.57 L1816.39 1204.57 L1815.8 1204.57 L1815.21 1204.57 L1814.63 1204.57 L1814.04 1204.57 L1813.45 1204.57 L1812.87 1204.57 L1812.28 1204.57 L1811.69 1204.57 L1811.11 1204.57 L1810.52 1204.57 L1809.94 1204.57 L1809.35 1204.57 L1808.76 1204.57 L1808.18 1204.57 L1807.59 1204.57 L1807 1204.57 L1806.42 1204.57 L1805.83 1204.57 L1805.24 1204.57 L1804.66 1204.57 L1804.07 1204.57 L1803.48 1204.57 L1802.9 1204.57 L1802.31 1204.57 L1801.73 1204.57 L1801.14 1204.57 L1800.55 1204.57 L1799.97 1204.57 L1799.38 1204.57 L1798.79 1204.57 L1798.21 1204.57 L1797.62 1204.57 L1797.03 1204.57 L1796.45 1204.57 L1795.86 1204.57 L1795.27 1204.57 L1794.69 1204.57 L1794.1 1204.57 L1793.52 1204.57 L1792.93 1204.57 L1792.34 1204.57 L1791.76 1204.57 L1791.17 1204.57 L1790.58 1204.57 L1790 1204.57 L1789.41 1204.57 L1788.82 1204.57 L1788.24 1204.57 L1787.65 1204.57 L1787.06 1204.57 L1786.48 1204.57 L1785.89 1204.57 L1785.31 1204.57 L1784.72 1204.57 L1784.13 1204.57 L1783.55 1204.57 L1782.96 1204.57 L1782.37 1204.57 L1781.79 1204.57 L1781.2 1204.57 L1780.61 1204.57 L1780.03 1204.57 L1779.44 1204.57 L1778.86 1204.57 L1778.27 1204.57 L1777.68 1204.57 L1777.1 1204.57 L1776.51 1204.57 L1775.92 1204.57 L1775.34 1204.57 L1774.75 1204.57 L1774.16 1204.57 L1773.58 1204.57 L1772.99 1204.57 L1772.4 1204.57 L1771.82 1204.57 L1771.23 1204.57 L1770.65 1204.57 L1770.06 1204.57 L1769.47 1204.57 L1768.89 1204.57 L1768.3 1204.57 L1767.71 1204.57 L1767.13 1204.57 L1766.54 1204.57 L1765.95 1204.57 L1765.37 1204.57 L1764.78 1204.57 L1764.19 1204.57 L1763.61 1204.57 L1763.02 1204.57 L1762.44 1204.57 L1761.85 1204.57 L1761.26 1204.57 L1760.68 1204.57 L1760.09 1204.57 L1759.5 1204.57 L1758.92 1204.57 L1758.33 1204.57 L1757.74 1204.57 L1757.16 1204.57 L1756.57 1204.57 L1755.99 1204.57 L1755.4 1204.57 L1754.81 1204.57 L1754.23 1204.57 L1753.64 1204.57 L1753.05 1204.57 L1752.47 1204.57 L1751.88 1204.57 L1751.29 1204.57 L1750.71 1204.57 L1750.12 1204.57 L1749.53 1204.57 L1748.95 1204.57 L1748.36 1204.57 L1747.78 1204.57 L1747.19 1204.57 L1746.6 1204.57 L1746.02 1204.57 L1745.43 1204.57 L1744.84 1204.57 L1744.26 1204.57 L1743.67 1204.57 L1743.08 1204.57 L1742.5 1204.57 L1741.91 1204.57 L1741.32 1204.57 L1740.74 1204.57 L1740.15 1204.57 L1739.57 1204.57 L1738.98 1204.57 L1738.39 1204.57 L1737.81 1204.57 L1737.22 1204.57 L1736.63 1204.57 L1736.05 1204.57 L1735.46 1204.57 L1734.87 1204.57 L1734.29 1204.57 L1733.7 1204.57 L1733.11 1204.57 L1732.53 1204.57 L1731.94 1204.57 L1731.36 1204.57 L1730.77 1204.57 L1730.18 1204.57 L1729.6 1204.57 L1729.01 1204.57 L1728.42 1204.57 L1727.84 1204.57 L1727.25 1204.57 L1726.66 1204.57 L1726.08 1204.57 L1725.49 1204.57 L1724.91 1204.57 L1724.32 1204.57 L1723.73 1204.57 L1723.15 1204.57 L1722.56 1204.57 L1721.97 1204.57 L1721.39 1204.57 L1720.8 1204.57 L1720.21 1204.57 L1719.63 1204.57 L1719.04 1204.57 L1718.45 1204.57 L1717.87 1204.57 L1717.28 1204.57 L1716.7 1204.57 L1716.11 1204.57 L1715.52 1204.57 L1714.94 1204.57 L1714.35 1204.57 L1713.76 1204.57 L1713.18 1204.57 L1712.59 1204.57 L1712 1204.57 L1711.42 1204.57 L1710.83 1204.57 L1710.24 1204.57 L1709.66 1204.57 L1709.07 1204.57 L1708.49 1204.57 L1707.9 1204.57 L1707.31 1204.57 L1706.73 1204.57 L1706.14 1204.57 L1705.55 1204.57 L1704.97 1204.57 L1704.38 1204.57 L1703.79 1204.57 L1703.21 1204.57 L1702.62 1204.57 L1702.04 1204.57 L1701.45 1204.57 L1700.86 1204.57 L1700.28 1204.57 L1699.69 1204.57 L1699.1 1204.57 L1698.52 1204.57 L1697.93 1204.57 L1697.34 1204.57 L1696.76 1204.57 L1696.17 1204.57 L1695.58 1204.57 L1695 1204.57 L1694.41 1204.57 L1693.83 1204.57 L1693.24 1204.57 L1692.65 1204.57 L1692.07 1204.57 L1691.48 1204.57 L1690.89 1204.57 L1690.31 1204.57 L1689.72 1204.57 L1689.13 1204.57 L1688.55 1204.57 L1687.96 1204.57 L1687.37 1204.57 L1686.79 1204.57 L1686.2 1204.57 L1685.62 1204.57 L1685.03 1204.57 L1684.44 1204.57 L1683.86 1204.57 L1683.27 1204.57 L1682.68 1204.57 L1682.1 1204.57 L1681.51 1204.57 L1680.92 1204.57 L1680.34 1204.57 L1679.75 1204.57 L1679.17 1204.57 L1678.58 1204.57 L1677.99 1204.57 L1677.41 1204.57 L1676.82 1204.57 L1676.23 1204.57 L1675.65 1204.57 L1675.06 1204.57 L1674.47 1204.57 L1673.89 1204.57 L1673.3 1204.57 L1672.71 1204.57 L1672.13 1204.57 L1671.54 1204.57 L1670.96 1204.57 L1670.37 1204.57 L1669.78 1204.57 L1669.2 1204.57 L1668.61 1204.57 L1668.02 1204.57 L1667.44 1204.57 L1666.85 1204.57 L1666.26 1204.57 L1665.68 1204.57 L1665.09 1204.57 L1664.5 1204.57 L1663.92 1204.57 L1663.33 1204.57 L1662.75 1204.57 L1662.16 1204.57 L1661.57 1204.57 L1660.99 1204.57 L1660.4 1204.57 L1659.81 1204.57 L1659.23 1204.57 L1658.64 1204.57 L1658.05 1204.57 L1657.47 1204.57 L1656.88 1204.57 L1656.29 1204.57 L1655.71 1204.57 L1655.12 1204.57 L1654.54 1204.57 L1653.95 1204.57 L1653.36 1204.57 L1652.78 1204.57 L1652.19 1204.57 L1651.6 1204.57 L1651.02 1204.57 L1650.43 1204.57 L1649.84 1204.57 L1649.26 1204.57 L1648.67 1204.57 L1648.09 1204.57 L1647.5 1204.57 L1646.91 1204.57 L1646.33 1204.57 L1645.74 1204.57 L1645.15 1204.57 L1644.57 1204.57 L1643.98 1204.57 L1643.39 1204.57 L1642.81 1204.57 L1642.22 1204.57 L1641.63 1204.57 L1641.05 1204.57 L1640.46 1204.57 L1639.88 1204.57 L1639.29 1204.57 L1638.7 1204.57 L1638.12 1204.57 L1637.53 1204.57 L1636.94 1204.57 L1636.36 1204.57 L1635.77 1204.57 L1635.18 1204.57 L1634.6 1204.57 L1634.01 1204.57 L1633.42 1204.57 L1632.84 1204.57 L1632.25 1204.57 L1631.67 1204.57 L1631.08 1204.57 L1630.49 1204.57 L1629.91 1204.57 L1629.32 1204.57 L1628.73 1204.57 L1628.15 1204.57 L1627.56 1204.57 L1626.97 1204.57 L1626.39 1204.57 L1625.8 1204.57 L1625.22 1204.57 L1624.63 1204.57 L1624.04 1204.57 L1623.46 1204.57 L1622.87 1204.57 L1622.28 1204.57 L1621.7 1204.57 L1621.11 1204.57 L1620.52 1204.57 L1619.94 1204.57 L1619.35 1204.57 L1618.76 1204.57 L1618.18 1204.57 L1617.59 1204.57 L1617.01 1204.57 L1616.42 1204.57 L1615.83 1204.57 L1615.25 1204.57 L1614.66 1204.57 L1614.07 1204.57 L1613.49 1204.57 L1612.9 1204.57 L1612.31 1204.57 L1611.73 1204.57 L1611.14 1204.57 L1610.55 1204.57 L1609.97 1204.57 L1609.38 1204.57 L1608.8 1204.57 L1608.21 1204.57 L1607.62 1204.57 L1607.04 1204.57 L1606.45 1204.57 L1605.86 1204.57 L1605.28 1204.57 L1604.69 1204.57 L1604.1 1204.57 L1603.52 1204.57 L1602.93 1204.57 L1602.34 1204.57 L1601.76 1204.57 L1601.17 1204.57 L1600.59 1204.57 L1600 1204.57 L1599.41 1204.57 L1598.83 1204.57 L1598.24 1204.57 L1597.65 1204.57 L1597.07 1204.57 L1596.48 1204.57 L1595.89 1204.57 L1595.31 1204.57 L1594.72 1204.57 L1594.14 1204.57 L1593.55 1204.57 L1592.96 1204.57 L1592.38 1204.57 L1591.79 1204.57 L1591.2 1204.57 L1590.62 1204.57 L1590.03 1204.57 L1589.44 1204.57 L1588.86 1204.57 L1588.27 1204.57 L1587.68 1204.57 L1587.1 1204.57 L1586.51 1204.57 L1585.93 1204.57 L1585.34 1204.57 L1584.75 1204.57 L1584.17 1204.57 L1583.58 1204.57 L1582.99 1204.57 L1582.41 1204.57 L1581.82 1204.57 L1581.23 1204.57 L1580.65 1204.57 L1580.06 1204.57 L1579.47 1204.57 L1578.89 1204.57 L1578.3 1204.57 L1577.72 1204.57 L1577.13 1204.57 L1576.54 1204.57 L1575.96 1204.57 L1575.37 1204.57 L1574.78 1204.57 L1574.2 1204.57 L1573.61 1204.57 L1573.02 1204.57 L1572.44 1204.57 L1571.85 1204.57 L1571.27 1204.57 L1570.68 1204.57 L1570.09 1204.57 L1569.51 1204.57 L1568.92 1204.57 L1568.33 1204.57 L1567.75 1204.57 L1567.16 1204.57 L1566.57 1204.57 L1565.99 1204.57 L1565.4 1204.57 L1564.81 1204.57 L1564.23 1204.57 L1563.64 1204.57 L1563.06 1204.57 L1562.47 1204.57 L1561.88 1204.57 L1561.3 1204.57 L1560.71 1204.57 L1560.12 1204.57 L1559.54 1204.57 L1558.95 1204.57 L1558.36 1204.57 L1557.78 1204.57 L1557.19 1204.57 L1556.6 1204.57 L1556.02 1204.57 L1555.43 1204.57 L1554.85 1204.57 L1554.26 1204.57 L1553.67 1204.57 L1553.09 1204.57 L1552.5 1204.57 L1551.91 1204.57 L1551.33 1204.57 L1550.74 1204.57 L1550.15 1204.57 L1549.57 1204.57 L1548.98 1204.57 L1548.4 1204.57 L1547.81 1204.57 L1547.22 1204.57 L1546.64 1204.57 L1546.05 1204.57 L1545.46 1204.57 L1544.88 1204.57 L1544.29 1204.57 L1543.7 1204.57 L1543.12 1204.57 L1542.53 1204.57 L1541.94 1204.57 L1541.36 1204.57 L1540.77 1204.57 L1540.19 1204.57 L1539.6 1204.57 L1539.01 1204.57 L1538.43 1204.57 L1537.84 1204.57 L1537.25 1204.57 L1536.67 1204.57 L1536.08 1204.57 L1535.49 1204.57 L1534.91 1204.57 L1534.32 1204.57 L1533.73 1204.57 L1533.15 1204.57 L1532.56 1204.57 L1531.98 1204.57 L1531.39 1204.57 L1530.8 1204.57 L1530.22 1204.57 L1529.63 1204.57 L1529.04 1204.57 L1528.46 1204.57 L1527.87 1204.57 L1527.28 1204.57 L1526.7 1204.57 L1526.11 1204.57 L1525.52 1204.57 L1524.94 1204.57 L1524.35 1204.57 L1523.77 1204.57 L1523.18 1204.57 L1522.59 1204.57 L1522.01 1204.57 L1521.42 1204.57 L1520.83 1204.57 L1520.25 1204.57 L1519.66 1204.57 L1519.07 1204.57 L1518.49 1204.57 L1517.9 1204.57 L1517.32 1204.57 L1516.73 1204.57 L1516.14 1204.57 L1515.56 1204.57 L1514.97 1204.57 L1514.38 1204.57 L1513.8 1204.57 L1513.21 1204.57 L1512.62 1204.57 L1512.04 1204.57 L1511.45 1204.57 L1510.86 1204.57 L1510.28 1204.57 L1509.69 1204.57 L1509.11 1204.57 L1508.52 1204.57 L1507.93 1204.57 L1507.35 1204.57 L1506.76 1204.57 L1506.17 1204.57 L1505.59 1204.57 L1505 1204.57 L1504.41 1204.57 L1503.83 1204.57 L1503.24 1204.57 L1502.65 1204.57 L1502.07 1204.57 L1501.48 1204.57 L1500.9 1204.57 L1500.31 1204.57 L1499.72 1204.57 L1499.14 1204.57 L1498.55 1204.57 L1497.96 1204.57 L1497.38 1204.57 L1496.79 1204.57 L1496.2 1204.57 L1495.62 1204.57 L1495.03 1204.57 L1494.45 1204.57 L1493.86 1204.57 L1493.27 1204.57 L1492.69 1204.57 L1492.1 1204.57 L1491.51 1204.57 L1490.93 1204.57 L1490.34 1204.57 L1489.75 1204.57 L1489.17 1204.57 L1488.58 1204.57 L1487.99 1204.57 L1487.41 1204.57 L1486.82 1204.57 L1486.24 1204.57 L1485.65 1204.57 L1485.06 1204.57 L1484.48 1204.57 L1483.89 1204.57 L1483.3 1204.57 L1482.72 1204.57 L1482.13 1204.57 L1481.54 1204.57 L1480.96 1204.57 L1480.37 1204.57 L1479.78 1204.57 L1479.2 1204.57 L1478.61 1204.57 L1478.03 1204.57 L1477.44 1204.57 L1476.85 1204.57 L1476.27 1204.57 L1475.68 1204.57 L1475.09 1204.57 L1474.51 1204.57 L1473.92 1204.57 L1473.33 1204.57 L1472.75 1204.57 L1472.16 1204.57 L1471.57 1204.57 L1470.99 1204.57 L1470.4 1204.57 L1469.82 1204.57 L1469.23 1204.57 L1468.64 1204.57 L1468.06 1204.57 L1467.47 1204.57 L1466.88 1204.57 L1466.3 1204.57 L1465.71 1204.57 L1465.12 1204.57 L1464.54 1204.57 L1463.95 1204.57 L1463.37 1204.57 L1462.78 1204.57 L1462.19 1204.57 L1461.61 1204.57 L1461.02 1204.57 L1460.43 1204.57 L1459.85 1204.57 L1459.26 1204.57 L1458.67 1204.57 L1458.09 1204.57 L1457.5 1204.57 L1456.91 1204.57 L1456.33 1204.57 L1455.74 1204.57 L1455.16 1204.57 L1454.57 1204.57 L1453.98 1204.57 L1453.4 1204.57 L1452.81 1204.57 L1452.22 1204.57 L1451.64 1204.57 L1451.05 1204.57 L1450.46 1204.57 L1449.88 1204.57 L1449.29 1204.57 L1448.7 1204.57 L1448.12 1204.57 L1447.53 1204.57 L1446.95 1204.57 L1446.36 1204.57 L1445.77 1204.57 L1445.19 1204.57 L1444.6 1204.57 L1444.01 1204.57 L1443.43 1204.57 L1442.84 1204.57 L1442.25 1204.57 L1441.67 1204.57 L1441.08 1204.57 L1440.5 1204.57 L1439.91 1204.57 L1439.32 1204.57 L1438.74 1204.57 L1438.15 1204.57 L1437.56 1204.57 L1436.98 1204.57 L1436.39 1204.57 L1435.8 1204.57 L1435.22 1204.57 L1434.63 1204.57 L1434.04 1204.57 L1433.46 1204.57 L1432.87 1204.57 L1432.29 1204.57 L1431.7 1204.57 L1431.11 1204.57 L1430.53 1204.57 L1429.94 1204.57 L1429.35 1204.57 L1428.77 1204.57 L1428.18 1204.57 L1427.59 1204.57 L1427.01 1204.57 L1426.42 1204.57 L1425.83 1204.57 L1425.25 1204.57 L1424.66 1204.57 L1424.08 1204.57 L1423.49 1204.57 L1422.9 1204.57 L1422.32 1204.57 L1421.73 1204.57 L1421.14 1204.57 L1420.56 1204.57 L1419.97 1204.57 L1419.38 1204.57 L1418.8 1204.57 L1418.21 1204.57 L1417.63 1204.57 L1417.04 1204.57 L1416.45 1204.57 L1415.87 1204.57 L1415.28 1204.57 L1414.69 1204.57 L1414.11 1204.57 L1413.52 1204.57 L1412.93 1204.57 L1412.35 1204.57 L1411.76 1204.57 L1411.17 1204.57 L1410.59 1204.57 L1410 1204.57 L1409.42 1204.57 L1408.83 1204.57 L1408.24 1204.57 L1407.66 1204.57 L1407.07 1204.57 L1406.48 1204.57 L1405.9 1204.57 L1405.31 1204.57 L1404.72 1204.57 L1404.14 1204.57 L1403.55 1204.57 L1402.96 1204.57 L1402.38 1204.57 L1401.79 1204.57 L1401.21 1204.57 L1400.62 1204.57 L1400.03 1204.57 L1399.45 1204.57 L1398.86 1204.57 L1398.27 1204.57 L1397.69 1204.57 L1397.1 1204.57 L1396.51 1204.57 L1395.93 1204.57 L1395.34 1204.57 L1394.75 1204.57 L1394.17 1204.57 L1393.58 1204.57 L1393 1204.57 L1392.41 1204.57 L1391.82 1204.57 L1391.24 1204.57 L1390.65 1204.57 L1390.06 1204.57 L1389.48 1204.57 L1388.89 1204.57 L1388.3 1204.57 L1387.72 1204.57 L1387.13 1204.57 L1386.55 1204.57 L1385.96 1204.57 L1385.37 1204.57 L1384.79 1204.57 L1384.2 1204.57 L1383.61 1204.57 L1383.03 1204.57 L1382.44 1204.57 L1381.85 1204.57 L1381.27 1204.57 L1380.68 1204.57 L1380.09 1204.57 L1379.51 1204.57 L1378.92 1204.57 L1378.34 1204.57 L1377.75 1204.57 L1377.16 1204.57 L1376.58 1204.57 L1375.99 1204.57 L1375.4 1204.57 L1374.82 1204.57 L1374.23 1204.57 L1373.64 1204.57 L1373.06 1204.57 L1372.47 1204.57 L1371.88 1204.57 L1371.3 1204.57 L1370.71 1204.57 L1370.13 1204.57 L1369.54 1204.57 L1368.95 1204.57 L1368.37 1204.57 L1367.78 1204.57 L1367.19 1204.57 L1366.61 1204.57 L1366.02 1204.57 L1365.43 1204.57 L1364.85 1204.57 L1364.26 1204.57 L1363.68 1204.57 L1363.09 1204.57 L1362.5 1204.57 L1361.92 1204.57 L1361.33 1204.57 L1360.74 1204.57 L1360.16 1204.57 L1359.57 1204.57 L1358.98 1204.57 L1358.4 1204.57 L1357.81 1204.57 L1357.22 1204.57 L1356.64 1204.57 L1356.05 1204.57 L1355.47 1204.57 L1354.88 1204.57 L1354.29 1204.57 L1353.71 1204.57 L1353.12 1204.57 L1352.53 1204.57 L1351.95 1204.57 L1351.36 1204.57 L1350.77 1204.57 L1350.19 1204.57 L1349.6 1204.57 L1349.01 1204.57 L1348.43 1204.57 L1347.84 1204.57 L1347.26 1204.57 L1346.67 1204.57 L1346.08 1204.57 L1345.5 1204.57 L1344.91 1204.57 L1344.32 1204.57 L1343.74 1204.57 L1343.15 1204.57 L1342.56 1204.57 L1341.98 1204.57 L1341.39 1204.57 L1340.8 1204.57 L1340.22 1204.57 L1339.63 1204.57 L1339.05 1204.57 L1338.46 1204.57 L1337.87 1204.57 L1337.29 1204.57 L1336.7 1204.57 L1336.11 1204.57 L1335.53 1204.57 L1334.94 1204.57 L1334.35 1204.57 L1333.77 1204.57 L1333.18 1204.57 L1332.6 1204.57 L1332.01 1204.57 L1331.42 1204.57 L1330.84 1204.57 L1330.25 1204.57 L1329.66 1204.57 L1329.08 1204.57 L1328.49 1204.57 L1327.9 1204.57 L1327.32 1204.57 L1326.73 1204.57 L1326.14 1204.57 L1325.56 1204.57 L1324.97 1204.57 L1324.39 1204.57 L1323.8 1204.57 L1323.21 1204.57 L1322.63 1204.57 L1322.04 1204.57 L1321.45 1204.57 L1320.87 1204.57 L1320.28 1204.57 L1319.69 1204.57 L1319.11 1204.57 L1318.52 1204.57 L1317.93 1204.57 L1317.35 1204.57 L1316.76 1204.57 L1316.18 1204.57 L1315.59 1204.57 L1315 1204.57 L1314.42 1204.57 L1313.83 1204.57 L1313.24 1204.57 L1312.66 1204.57 L1312.07 1204.57 L1311.48 1204.57 L1310.9 1204.57 L1310.31 1204.57 L1309.73 1204.57 L1309.14 1204.57 L1308.55 1204.57 L1307.97 1204.57 L1307.38 1204.57 L1306.79 1204.57 L1306.21 1204.57 L1305.62 1204.57 L1305.03 1204.57 L1304.45 1204.57 L1303.86 1204.57 L1303.27 1204.57 L1302.69 1204.57 L1302.1 1204.57 L1301.52 1204.57 L1300.93 1204.57 L1300.34 1204.57 L1299.76 1204.57 L1299.17 1204.57 L1298.58 1204.57 L1298 1204.57 L1297.41 1204.57 L1296.82 1204.57 L1296.24 1204.57 L1295.65 1204.57 L1295.06 1204.57 L1294.48 1204.57 L1293.89 1204.57 L1293.31 1204.57 L1292.72 1204.57 L1292.13 1204.57 L1291.55 1204.57 L1290.96 1204.57 L1290.37 1204.57 L1289.79 1204.57 L1289.2 1204.57 L1288.61 1204.57 L1288.03 1204.57 L1287.44 1204.57 L1286.86 1204.57 L1286.27 1204.57 L1285.68 1204.57 L1285.1 1204.57 L1284.51 1204.57 L1283.92 1204.57 L1283.34 1204.57 L1282.75 1204.57 L1282.16 1204.57 L1281.58 1204.57 L1280.99 1204.57 L1280.4 1204.57 L1279.82 1204.57 L1279.23 1204.57 L1278.65 1204.57 L1278.06 1204.57 L1277.47 1204.57 L1276.89 1204.57 L1276.3 1204.57 L1275.71 1204.57 L1275.13 1204.57 L1274.54 1204.57 L1273.95 1204.57 L1273.37 1204.57 L1272.78 1204.57 L1272.19 1204.57 L1271.61 1204.57 L1271.02 1204.57 L1270.44 1204.57 L1269.85 1204.57 L1269.26 1204.57 L1268.68 1204.57 L1268.09 1204.57 L1267.5 1204.57 L1266.92 1204.57 L1266.33 1204.57 L1265.74 1204.57 L1265.16 1204.57 L1264.57 1204.57 L1263.98 1204.57 L1263.4 1204.57 L1262.81 1204.57 L1262.23 1204.57 L1261.64 1204.57 L1261.05 1204.57 L1260.47 1204.57 L1259.88 1204.57 L1259.29 1204.57 L1258.71 1204.57 L1258.12 1204.57 L1257.53 1204.57 L1256.95 1204.57 L1256.36 1204.57 L1255.78 1204.57 L1255.19 1204.57 L1254.6 1204.57 L1254.02 1204.57 L1253.43 1204.57 L1252.84 1204.57 L1252.26 1204.57 L1251.67 1204.57 L1251.08 1204.57 L1250.5 1204.57 L1249.91 1204.57 L1249.32 1204.57 L1248.74 1204.57 L1248.15 1204.57 L1247.57 1204.57 L1246.98 1204.57 L1246.39 1204.57 L1245.81 1204.57 L1245.22 1204.57 L1244.63 1204.57 L1244.05 1204.57 L1243.46 1204.57 L1242.87 1204.57 L1242.29 1204.57 L1241.7 1204.57 L1241.11 1204.57 L1240.53 1204.57 L1239.94 1204.57 L1239.36 1204.57 L1238.77 1204.57 L1238.18 1204.57 L1237.6 1204.57 L1237.01 1204.57 L1236.42 1204.57 L1235.84 1204.57 L1235.25 1204.57 L1234.66 1204.57 L1234.08 1204.57 L1233.49 1204.57 L1232.91 1204.57 L1232.32 1204.57 L1231.73 1204.57 L1231.15 1204.57 L1230.56 1204.57 L1229.97 1204.57 L1229.39 1204.57 L1228.8 1204.57 L1228.21 1204.57 L1227.63 1204.57 L1227.04 1204.57 L1226.45 1204.57 L1225.87 1204.57 L1225.28 1204.57 L1224.7 1204.57 L1224.11 1204.57 L1223.52 1204.57 L1222.94 1204.57 L1222.35 1204.57 L1221.76 1204.57 L1221.18 1204.57 L1220.59 1204.57 L1220 1204.57 L1219.42 1204.57 L1218.83 1204.57 L1218.24 1204.57 L1217.66 1204.57 L1217.07 1204.57 L1216.49 1204.57 L1215.9 1204.57 L1215.31 1204.57 L1214.73 1204.57 L1214.14 1204.57 L1213.55 1204.57 L1212.97 1204.57 L1212.38 1204.57 L1211.79 1204.57 L1211.21 1204.57 L1210.62 1204.57 L1210.03 1204.57 L1209.45 1204.57 L1208.86 1204.57 L1208.28 1204.57 L1207.69 1204.57 L1207.1 1204.57 L1206.52 1204.57 L1205.93 1204.57 L1205.34 1204.57 L1204.76 1204.57 L1204.17 1204.57 L1203.58 1204.57 L1203 1204.57 L1202.41 1204.57 L1201.83 1204.57 L1201.24 1204.57 L1200.65 1204.57 L1200.07 1204.57 L1199.48 1204.57 L1198.89 1204.57 L1198.31 1204.57 L1197.72 1204.57 L1197.13 1204.57 L1196.55 1204.57 L1195.96 1204.57 L1195.37 1204.57 L1194.79 1204.57 L1194.2 1204.57 L1193.62 1204.57 L1193.03 1204.57 L1192.44 1204.57 L1191.86 1204.57 L1191.27 1204.57 L1190.68 1204.57 L1190.1 1204.57 L1189.51 1204.57 L1188.92 1204.57 L1188.34 1204.57 L1187.75 1204.57 L1187.16 1204.57 L1186.58 1204.57 L1185.99 1204.57 L1185.41 1204.57 L1184.82 1204.57 L1184.23 1204.57 L1183.65 1204.57 L1183.06 1204.57 L1182.47 1204.57 L1181.89 1204.57 L1181.3 1204.57 L1180.71 1204.57 L1180.13 1204.57 L1179.54 1204.57 L1178.96 1204.57 L1178.37 1204.57 L1177.78 1204.57 L1177.2 1204.57 L1176.61 1204.57 L1176.02 1204.57 L1175.44 1204.57 L1174.85 1204.57 L1174.26 1204.57 L1173.68 1204.57 L1173.09 1204.57 L1172.5 1204.57 L1171.92 1204.57 L1171.33 1204.57 L1170.75 1204.57 L1170.16 1204.57 L1169.57 1204.57 L1168.99 1204.57 L1168.4 1204.57 L1167.81 1204.57 L1167.23 1204.57 L1166.64 1204.57 L1166.05 1204.57 L1165.47 1204.57 L1164.88 1204.57 L1164.29 1204.57 L1163.71 1204.57 L1163.12 1204.57 L1162.54 1204.57 L1161.95 1204.57 L1161.36 1204.57 L1160.78 1204.57 L1160.19 1204.57 L1159.6 1204.57 L1159.02 1204.57 L1158.43 1204.57 L1157.84 1204.57 L1157.26 1204.57 L1156.67 1204.57 L1156.09 1204.57 L1155.5 1204.57 L1154.91 1204.57 L1154.33 1204.57 L1153.74 1204.57 L1153.15 1204.57 L1152.57 1204.57 L1151.98 1204.57 L1151.39 1204.57 L1150.81 1204.57 L1150.22 1204.57 L1149.63 1204.57 L1149.05 1204.57 L1148.46 1204.57 L1147.88 1204.57 L1147.29 1204.57 L1146.7 1204.57 L1146.12 1204.57 L1145.53 1204.57 L1144.94 1204.57 L1144.36 1204.57 L1143.77 1204.57 L1143.18 1204.57 L1142.6 1204.57 L1142.01 1204.57 L1141.42 1204.57 L1140.84 1204.57 L1140.25 1204.57 L1139.67 1204.57 L1139.08 1204.57 L1138.49 1204.57 L1137.91 1204.57 L1137.32 1204.57 L1136.73 1204.57 L1136.15 1204.57 L1135.56 1204.57 L1134.97 1204.57 L1134.39 1204.57 L1133.8 1204.57 L1133.21 1204.57 L1132.63 1204.57 L1132.04 1204.57 L1131.46 1204.57 L1130.87 1204.57 L1130.28 1204.57 L1129.7 1204.57 L1129.11 1204.57 L1128.52 1204.57 L1127.94 1204.57 L1127.35 1204.57 L1126.76 1204.57 L1126.18 1204.57 L1125.59 1204.57 L1125.01 1204.57 L1124.42 1204.57 L1123.83 1204.57 L1123.25 1204.57 L1122.66 1204.57 L1122.07 1204.57 L1121.49 1204.57 L1120.9 1204.57 L1120.31 1204.57 L1119.73 1204.57 L1119.14 1204.57 L1118.55 1204.57 L1117.97 1204.57 L1117.38 1204.57 L1116.8 1204.57 L1116.21 1204.57 L1115.62 1204.57 L1115.04 1204.57 L1114.45 1204.57 L1113.86 1204.57 L1113.28 1204.57 L1112.69 1204.57 L1112.1 1204.57 L1111.52 1204.57 L1110.93 1204.57 L1110.34 1204.57 L1109.76 1204.57 L1109.17 1204.57 L1108.59 1204.57 L1108 1204.57 L1107.41 1204.57 L1106.83 1204.57 L1106.24 1204.57 L1105.65 1204.57 L1105.07 1204.57 L1104.48 1204.57 L1103.89 1204.57 L1103.31 1204.57 L1102.72 1204.57 L1102.14 1204.57 L1101.55 1204.57 L1100.96 1204.57 L1100.38 1204.57 L1099.79 1204.57 L1099.2 1204.57 L1098.62 1204.57 L1098.03 1204.57 L1097.44 1204.57 L1096.86 1204.57 L1096.27 1204.57 L1095.68 1204.57 L1095.1 1204.57 L1094.51 1204.57 L1093.93 1204.57 L1093.34 1204.57 L1092.75 1204.57 L1092.17 1204.57 L1091.58 1204.57 L1090.99 1204.57 L1090.41 1204.57 L1089.82 1204.57 L1089.23 1204.57 L1088.65 1204.57 L1088.06 1204.57 L1087.47 1204.57 L1086.89 1204.57 L1086.3 1204.57 L1085.72 1204.57 L1085.13 1204.57 L1084.54 1204.57 L1083.96 1204.57 L1083.37 1204.57 L1082.78 1204.57 L1082.2 1204.57 L1081.61 1204.57 L1081.02 1204.57 L1080.44 1204.57 L1079.85 1204.57 L1079.26 1204.57 L1078.68 1204.57 L1078.09 1204.57 L1077.51 1204.57 L1076.92 1204.57 L1076.33 1204.57 L1075.75 1204.57 L1075.16 1204.57 L1074.57 1204.57 L1073.99 1204.57 L1073.4 1204.57 L1072.81 1204.57 L1072.23 1204.57 L1071.64 1204.57 L1071.06 1204.57 L1070.47 1204.57 L1069.88 1204.57 L1069.3 1204.57 L1068.71 1204.57 L1068.12 1204.57 L1067.54 1204.57 L1066.95 1204.57 L1066.36 1204.57 L1065.78 1204.57 L1065.19 1204.57 L1064.6 1204.57 L1064.02 1204.57 L1063.43 1204.57 L1062.85 1204.57 L1062.26 1204.57 L1061.67 1204.57 L1061.09 1204.57 L1060.5 1204.57 L1059.91 1204.57 L1059.33 1204.57 L1058.74 1204.57 L1058.15 1204.57 L1057.57 1204.57 L1056.98 1204.57 L1056.39 1204.57 L1055.81 1204.57 L1055.22 1204.57 L1054.64 1204.57 L1054.05 1204.57 L1053.46 1204.57 L1052.88 1204.57 L1052.29 1204.57 L1051.7 1204.57 L1051.12 1204.57 L1050.53 1204.57 L1049.94 1204.57 L1049.36 1204.57 L1048.77 1204.57 L1048.19 1204.57 L1047.6 1204.57 L1047.01 1204.57 L1046.43 1204.57 L1045.84 1204.57 L1045.25 1204.57 L1044.67 1204.57 L1044.08 1204.57 L1043.49 1204.57 L1042.91 1204.57 L1042.32 1204.57 L1041.73 1204.57 L1041.15 1204.57 L1040.56 1204.57 L1039.98 1204.57 L1039.39 1204.57 L1038.8 1204.57 L1038.22 1204.57 L1037.63 1204.57 L1037.04 1204.57 L1036.46 1204.57 L1035.87 1204.57 L1035.28 1204.57 L1034.7 1204.57 L1034.11 1204.57 L1033.52 1204.57 L1032.94 1204.57 L1032.35 1204.57 L1031.77 1204.57 L1031.18 1204.57 L1030.59 1204.57 L1030.01 1204.57 L1029.42 1204.57 L1028.83 1204.57 L1028.25 1204.57 L1027.66 1204.57 L1027.07 1204.57 L1026.49 1204.57 L1025.9 1204.57 L1025.32 1204.57 L1024.73 1204.57 L1024.14 1204.57 L1023.56 1204.57 L1022.97 1204.57 L1022.38 1204.57 L1021.8 1204.57 L1021.21 1204.57 L1020.62 1204.57 L1020.04 1204.57 L1019.45 1204.57 L1018.86 1204.57 L1018.28 1204.57 L1017.69 1204.57 L1017.11 1204.57 L1016.52 1204.57 L1015.93 1204.57 L1015.35 1204.57 L1014.76 1204.57 L1014.17 1204.57 L1013.59 1204.57 L1013 1204.57 L1012.41 1204.57 L1011.83 1204.57 L1011.24 1204.57 L1010.65 1204.57 L1010.07 1204.57 L1009.48 1204.57 L1008.9 1204.57 L1008.31 1204.57 L1007.72 1204.57 L1007.14 1204.57 L1006.55 1204.57 L1005.96 1204.57 L1005.38 1204.57 L1004.79 1204.57 L1004.2 1204.57 L1003.62 1204.57 L1003.03 1204.57 L1002.44 1204.57 L1001.86 1204.57 L1001.27 1204.57 L1000.69 1204.57 L1000.1 1204.57 L999.513 1204.57 L998.926 1204.57 L998.34 1204.57 L997.754 1204.57 L997.167 1204.57 L996.581 1204.57 L995.994 1204.57 L995.408 1204.57 L994.822 1204.57 L994.235 1204.57 L993.649 1204.57 L993.062 1204.57 L992.476 1204.57 L991.889 1204.57 L991.303 1204.57 L990.717 1204.57 L990.13 1204.57 L989.544 1204.57 L988.957 1204.57 L988.371 1204.57 L987.785 1204.57 L987.198 1204.57 L986.612 1204.57 L986.025 1204.57  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.63 986.612,1204.63 987.198,1204.63 987.785,1204.63 988.371,1204.63 988.957,1204.63 989.544,1204.63 990.13,1204.63 990.717,1204.63 991.303,1204.63 991.889,1204.63 992.476,1204.63 993.062,1204.63 993.649,1204.63 994.235,1204.63 994.822,1204.63 995.408,1204.63 995.994,1204.63 996.581,1204.63 997.167,1204.63 997.754,1204.63 998.34,1204.63 998.926,1204.63 999.513,1204.63 1000.1,1204.63 1000.69,1204.63 1001.27,1204.63 1001.86,1204.63 1002.44,1204.63 1003.03,1204.63 1003.62,1204.63 1004.2,1204.63 1004.79,1204.63 1005.38,1204.63 1005.96,1204.63 1006.55,1204.63 1007.14,1204.63 1007.72,1204.63 1008.31,1204.63 1008.9,1204.63 1009.48,1204.63 1010.07,1204.63 1010.65,1204.63 1011.24,1204.63 1011.83,1204.63 1012.41,1204.63 1013,1204.63 1013.59,1204.63 1014.17,1204.63 1014.76,1204.63 1015.35,1204.63 1015.93,1204.63 1016.52,1204.63 1017.11,1204.63 1017.69,1204.63 1018.28,1204.63 1018.86,1204.63 1019.45,1204.63 1020.04,1204.63 1020.62,1204.63 1021.21,1204.63 1021.8,1204.63 1022.38,1204.63 1022.97,1204.63 1023.56,1204.63 1024.14,1204.63 1024.73,1204.63 1025.32,1204.63 1025.9,1204.63 1026.49,1204.63 1027.07,1204.63 1027.66,1204.63 1028.25,1204.63 1028.83,1204.63 1029.42,1204.63 1030.01,1204.63 1030.59,1204.63 1031.18,1204.63 1031.77,1204.63 1032.35,1204.63 1032.94,1204.63 1033.52,1204.63 1034.11,1204.63 1034.7,1204.63 1035.28,1204.63 1035.87,1204.63 1036.46,1204.63 1037.04,1204.63 1037.63,1204.63 1038.22,1204.63 1038.8,1204.63 1039.39,1204.63 1039.98,1204.63 1040.56,1204.63 1041.15,1204.63 1041.73,1204.63 1042.32,1204.63 1042.91,1204.63 1043.49,1204.63 1044.08,1204.63 1044.67,1204.63 1045.25,1204.63 1045.84,1204.63 1046.43,1204.63 1047.01,1204.63 1047.6,1204.63 1048.19,1204.63 1048.77,1204.63 1049.36,1204.63 1049.94,1204.63 1050.53,1204.63 1051.12,1204.63 1051.7,1204.63 1052.29,1204.63 1052.88,1204.63 1053.46,1204.63 1054.05,1204.63 1054.64,1204.63 1055.22,1204.63 1055.81,1204.63 1056.39,1204.63 1056.98,1204.63 1057.57,1204.63 1058.15,1204.63 1058.74,1204.63 1059.33,1204.63 1059.91,1204.63 1060.5,1204.63 1061.09,1204.63 1061.67,1204.63 1062.26,1204.63 1062.85,1204.63 1063.43,1204.63 1064.02,1204.63 1064.6,1204.63 1065.19,1204.63 1065.78,1204.63 1066.36,1204.63 1066.95,1204.63 1067.54,1204.63 1068.12,1204.63 1068.71,1204.63 1069.3,1204.63 1069.88,1204.63 1070.47,1204.63 1071.06,1204.63 1071.64,1204.63 1072.23,1204.63 1072.81,1204.63 1073.4,1204.63 1073.99,1204.63 1074.57,1204.63 1075.16,1204.63 1075.75,1204.63 1076.33,1204.63 1076.92,1204.63 1077.51,1204.63 1078.09,1204.63 1078.68,1204.63 1079.26,1204.63 1079.85,1204.63 1080.44,1204.63 1081.02,1204.63 1081.61,1204.63 1082.2,1204.63 1082.78,1204.63 1083.37,1204.63 1083.96,1204.63 1084.54,1204.63 1085.13,1204.63 1085.72,1204.63 1086.3,1204.63 1086.89,1204.63 1087.47,1204.63 1088.06,1204.63 1088.65,1204.63 1089.23,1204.63 1089.82,1204.63 1090.41,1204.63 1090.99,1204.63 1091.58,1204.63 1092.17,1204.63 1092.75,1204.63 1093.34,1204.63 1093.93,1204.63 1094.51,1204.63 1095.1,1204.63 1095.68,1204.63 1096.27,1204.63 1096.86,1204.63 1097.44,1204.63 1098.03,1204.63 1098.62,1204.63 1099.2,1204.63 1099.79,1204.63 1100.38,1204.63 1100.96,1204.63 1101.55,1204.63 1102.14,1204.63 1102.72,1204.63 1103.31,1204.63 1103.89,1204.63 1104.48,1204.63 1105.07,1204.63 1105.65,1204.63 1106.24,1204.63 1106.83,1204.63 1107.41,1204.63 1108,1204.63 1108.59,1204.63 1109.17,1204.63 1109.76,1204.63 1110.34,1204.63 1110.93,1204.63 1111.52,1204.63 1112.1,1204.63 1112.69,1204.63 1113.28,1204.63 1113.86,1204.63 1114.45,1204.63 1115.04,1204.63 1115.62,1204.63 1116.21,1204.63 1116.8,1204.63 1117.38,1204.63 1117.97,1204.63 1118.55,1204.63 1119.14,1204.63 1119.73,1204.63 1120.31,1204.63 1120.9,1204.63 1121.49,1204.63 1122.07,1204.63 1122.66,1204.63 1123.25,1204.63 1123.83,1204.63 1124.42,1204.63 1125.01,1204.63 1125.59,1204.63 1126.18,1204.63 1126.76,1204.63 1127.35,1204.63 1127.94,1204.63 1128.52,1204.63 1129.11,1204.63 1129.7,1204.63 1130.28,1204.63 1130.87,1204.63 1131.46,1204.63 1132.04,1204.63 1132.63,1204.63 1133.21,1204.63 1133.8,1204.63 1134.39,1204.63 1134.97,1204.63 1135.56,1204.63 1136.15,1204.63 1136.73,1204.63 1137.32,1204.63 1137.91,1204.63 1138.49,1204.63 1139.08,1204.63 1139.67,1204.63 1140.25,1204.63 1140.84,1204.63 1141.42,1204.63 1142.01,1204.63 1142.6,1204.63 1143.18,1204.63 1143.77,1204.63 1144.36,1204.63 1144.94,1204.63 1145.53,1204.63 1146.12,1204.63 1146.7,1204.63 1147.29,1204.63 1147.88,1204.63 1148.46,1204.63 1149.05,1204.63 1149.63,1204.63 1150.22,1204.63 1150.81,1204.63 1151.39,1204.63 1151.98,1204.63 1152.57,1204.63 1153.15,1204.63 1153.74,1204.63 1154.33,1204.63 1154.91,1204.63 1155.5,1204.63 1156.09,1204.63 1156.67,1204.63 1157.26,1204.63 1157.84,1204.63 1158.43,1204.63 1159.02,1204.63 1159.6,1204.63 1160.19,1204.63 1160.78,1204.63 1161.36,1204.63 1161.95,1204.63 1162.54,1204.63 1163.12,1204.63 1163.71,1204.63 1164.29,1204.63 1164.88,1204.63 1165.47,1204.63 1166.05,1204.63 1166.64,1204.63 1167.23,1204.63 1167.81,1204.63 1168.4,1204.63 1168.99,1204.63 1169.57,1204.63 1170.16,1204.63 1170.75,1204.63 1171.33,1204.63 1171.92,1204.63 1172.5,1204.63 1173.09,1204.63 1173.68,1204.63 1174.26,1204.63 1174.85,1204.63 1175.44,1204.63 1176.02,1204.63 1176.61,1204.63 1177.2,1204.63 1177.78,1204.63 1178.37,1204.63 1178.96,1204.63 1179.54,1204.63 1180.13,1204.63 1180.71,1204.63 1181.3,1204.63 1181.89,1204.63 1182.47,1204.63 1183.06,1204.63 1183.65,1204.63 1184.23,1204.63 1184.82,1204.63 1185.41,1204.63 1185.99,1204.63 1186.58,1204.63 1187.16,1204.63 1187.75,1204.63 1188.34,1204.63 1188.92,1204.63 1189.51,1204.63 1190.1,1204.63 1190.68,1204.63 1191.27,1204.63 1191.86,1204.63 1192.44,1204.63 1193.03,1204.63 1193.62,1204.63 1194.2,1204.63 1194.79,1204.63 1195.37,1204.63 1195.96,1204.63 1196.55,1204.63 1197.13,1204.63 1197.72,1204.63 1198.31,1204.63 1198.89,1204.63 1199.48,1204.63 1200.07,1204.63 1200.65,1204.63 1201.24,1204.63 1201.83,1204.63 1202.41,1204.63 1203,1204.63 1203.58,1204.63 1204.17,1204.63 1204.76,1204.63 1205.34,1204.63 1205.93,1204.63 1206.52,1204.63 1207.1,1204.63 1207.69,1204.63 1208.28,1204.63 1208.86,1204.63 1209.45,1204.63 1210.03,1204.63 1210.62,1204.63 1211.21,1204.63 1211.79,1204.63 1212.38,1204.63 1212.97,1204.63 1213.55,1204.63 1214.14,1204.63 1214.73,1204.63 1215.31,1204.63 1215.9,1204.63 1216.49,1204.63 1217.07,1204.63 1217.66,1204.63 1218.24,1204.63 1218.83,1204.63 1219.42,1204.63 1220,1204.63 1220.59,1204.63 1221.18,1204.63 1221.76,1204.63 1222.35,1204.63 1222.94,1204.63 1223.52,1204.63 1224.11,1204.63 1224.7,1204.63 1225.28,1204.63 1225.87,1204.63 1226.45,1204.63 1227.04,1204.63 1227.63,1204.63 1228.21,1204.63 1228.8,1204.63 1229.39,1204.63 1229.97,1204.63 1230.56,1204.63 1231.15,1204.63 1231.73,1204.63 1232.32,1204.63 1232.91,1204.63 1233.49,1204.63 1234.08,1204.63 1234.66,1204.63 1235.25,1204.63 1235.84,1204.63 1236.42,1204.63 1237.01,1204.63 1237.6,1204.63 1238.18,1204.63 1238.77,1204.63 1239.36,1204.63 1239.94,1204.63 1240.53,1204.63 1241.11,1204.63 1241.7,1204.63 1242.29,1204.63 1242.87,1204.63 1243.46,1204.63 1244.05,1204.63 1244.63,1204.63 1245.22,1204.63 1245.81,1204.63 1246.39,1204.63 1246.98,1204.63 1247.57,1204.63 1248.15,1204.63 1248.74,1204.63 1249.32,1204.63 1249.91,1204.63 1250.5,1204.63 1251.08,1204.63 1251.67,1204.63 1252.26,1204.63 1252.84,1204.63 1253.43,1204.63 1254.02,1204.63 1254.6,1204.63 1255.19,1204.63 1255.78,1204.63 1256.36,1204.63 1256.95,1204.63 1257.53,1204.63 1258.12,1204.63 1258.71,1204.63 1259.29,1204.63 1259.88,1204.63 1260.47,1204.63 1261.05,1204.63 1261.64,1204.63 1262.23,1204.63 1262.81,1204.63 1263.4,1204.63 1263.98,1204.63 1264.57,1204.63 1265.16,1204.63 1265.74,1204.63 1266.33,1204.63 1266.92,1204.63 1267.5,1204.63 1268.09,1204.63 1268.68,1204.63 1269.26,1204.63 1269.85,1204.63 1270.44,1204.63 1271.02,1204.63 1271.61,1204.63 1272.19,1204.63 1272.78,1204.63 1273.37,1204.63 1273.95,1204.63 1274.54,1204.63 1275.13,1204.63 1275.71,1204.63 1276.3,1204.63 1276.89,1204.63 1277.47,1204.63 1278.06,1204.63 1278.65,1204.63 1279.23,1204.63 1279.82,1204.63 1280.4,1204.63 1280.99,1204.63 1281.58,1204.63 1282.16,1204.63 1282.75,1204.63 1283.34,1204.63 1283.92,1204.63 1284.51,1204.63 1285.1,1204.63 1285.68,1204.63 1286.27,1204.63 1286.86,1204.63 1287.44,1204.63 1288.03,1204.63 1288.61,1204.63 1289.2,1204.63 1289.79,1204.63 1290.37,1204.63 1290.96,1204.63 1291.55,1204.63 1292.13,1204.63 1292.72,1204.63 1293.31,1204.63 1293.89,1204.63 1294.48,1204.63 1295.06,1204.63 1295.65,1204.63 1296.24,1204.63 1296.82,1204.63 1297.41,1204.63 1298,1204.63 1298.58,1204.63 1299.17,1204.63 1299.76,1204.63 1300.34,1204.63 1300.93,1204.63 1301.52,1204.63 1302.1,1204.63 1302.69,1204.63 1303.27,1204.63 1303.86,1204.63 1304.45,1204.63 1305.03,1204.63 1305.62,1204.63 1306.21,1204.63 1306.79,1204.63 1307.38,1204.63 1307.97,1204.63 1308.55,1204.63 1309.14,1204.63 1309.73,1204.63 1310.31,1204.63 1310.9,1204.63 1311.48,1204.63 1312.07,1204.63 1312.66,1204.63 1313.24,1204.63 1313.83,1204.63 1314.42,1204.63 1315,1204.63 1315.59,1204.63 1316.18,1204.63 1316.76,1204.63 1317.35,1204.63 1317.93,1204.63 1318.52,1204.63 1319.11,1204.63 1319.69,1204.63 1320.28,1204.63 1320.87,1204.63 1321.45,1204.63 1322.04,1204.63 1322.63,1204.63 1323.21,1204.63 1323.8,1204.63 1324.39,1204.63 1324.97,1204.63 1325.56,1204.63 1326.14,1204.63 1326.73,1204.63 1327.32,1204.63 1327.9,1204.63 1328.49,1204.63 1329.08,1204.63 1329.66,1204.63 1330.25,1204.63 1330.84,1204.63 1331.42,1204.63 1332.01,1204.63 1332.6,1204.63 1333.18,1204.63 1333.77,1204.63 1334.35,1204.63 1334.94,1204.63 1335.53,1204.63 1336.11,1204.63 1336.7,1204.63 1337.29,1204.63 1337.87,1204.63 1338.46,1204.63 1339.05,1204.63 1339.63,1204.63 1340.22,1204.63 1340.8,1204.63 1341.39,1204.63 1341.98,1204.63 1342.56,1204.63 1343.15,1204.63 1343.74,1204.63 1344.32,1204.63 1344.91,1204.63 1345.5,1204.63 1346.08,1204.63 1346.67,1204.63 1347.26,1204.63 1347.84,1204.63 1348.43,1204.63 1349.01,1204.63 1349.6,1204.63 1350.19,1204.63 1350.77,1204.63 1351.36,1204.63 1351.95,1204.63 1352.53,1204.63 1353.12,1204.63 1353.71,1204.63 1354.29,1204.63 1354.88,1204.63 1355.47,1204.63 1356.05,1204.63 1356.64,1204.63 1357.22,1204.63 1357.81,1204.63 1358.4,1204.63 1358.98,1204.63 1359.57,1204.63 1360.16,1204.63 1360.74,1204.63 1361.33,1204.63 1361.92,1204.63 1362.5,1204.63 1363.09,1204.63 1363.68,1204.63 1364.26,1204.63 1364.85,1204.63 1365.43,1204.63 1366.02,1204.63 1366.61,1204.63 1367.19,1204.63 1367.78,1204.63 1368.37,1204.63 1368.95,1204.63 1369.54,1204.63 1370.13,1204.63 1370.71,1204.63 1371.3,1204.63 1371.88,1204.63 1372.47,1204.63 1373.06,1204.63 1373.64,1204.63 1374.23,1204.63 1374.82,1204.63 1375.4,1204.63 1375.99,1204.63 1376.58,1204.63 1377.16,1204.63 1377.75,1204.63 1378.34,1204.63 1378.92,1204.63 1379.51,1204.63 1380.09,1204.63 1380.68,1204.63 1381.27,1204.63 1381.85,1204.63 1382.44,1204.63 1383.03,1204.63 1383.61,1204.63 1384.2,1204.63 1384.79,1204.63 1385.37,1204.63 1385.96,1204.63 1386.55,1204.63 1387.13,1204.63 1387.72,1204.63 1388.3,1204.63 1388.89,1204.63 1389.48,1204.63 1390.06,1204.63 1390.65,1204.63 1391.24,1204.63 1391.82,1204.63 1392.41,1204.63 1393,1204.63 1393.58,1204.63 1394.17,1204.63 1394.75,1204.63 1395.34,1204.63 1395.93,1204.63 1396.51,1204.63 1397.1,1204.63 1397.69,1204.63 1398.27,1204.63 1398.86,1204.63 1399.45,1204.63 1400.03,1204.63 1400.62,1204.63 1401.21,1204.63 1401.79,1204.63 1402.38,1204.63 1402.96,1204.63 1403.55,1204.63 1404.14,1204.63 1404.72,1204.63 1405.31,1204.63 1405.9,1204.63 1406.48,1204.63 1407.07,1204.63 1407.66,1204.63 1408.24,1204.63 1408.83,1204.63 1409.42,1204.63 1410,1204.63 1410.59,1204.63 1411.17,1204.63 1411.76,1204.63 1412.35,1204.63 1412.93,1204.63 1413.52,1204.63 1414.11,1204.63 1414.69,1204.63 1415.28,1204.63 1415.87,1204.63 1416.45,1204.63 1417.04,1204.63 1417.63,1204.63 1418.21,1204.63 1418.8,1204.63 1419.38,1204.63 1419.97,1204.63 1420.56,1204.63 1421.14,1204.63 1421.73,1204.63 1422.32,1204.63 1422.9,1204.63 1423.49,1204.63 1424.08,1204.63 1424.66,1204.63 1425.25,1204.63 1425.83,1204.63 1426.42,1204.63 1427.01,1204.63 1427.59,1204.63 1428.18,1204.63 1428.77,1204.63 1429.35,1204.63 1429.94,1204.63 1430.53,1204.63 1431.11,1204.63 1431.7,1204.63 1432.29,1204.63 1432.87,1204.63 1433.46,1204.63 1434.04,1204.63 1434.63,1204.63 1435.22,1204.63 1435.8,1204.63 1436.39,1204.63 1436.98,1204.63 1437.56,1204.63 1438.15,1204.63 1438.74,1204.63 1439.32,1204.63 1439.91,1204.63 1440.5,1204.63 1441.08,1204.63 1441.67,1204.63 1442.25,1204.63 1442.84,1204.63 1443.43,1204.63 1444.01,1204.63 1444.6,1204.63 1445.19,1204.63 1445.77,1204.63 1446.36,1204.63 1446.95,1204.63 1447.53,1204.63 1448.12,1204.63 1448.7,1204.63 1449.29,1204.63 1449.88,1204.63 1450.46,1204.63 1451.05,1204.63 1451.64,1204.63 1452.22,1204.63 1452.81,1204.63 1453.4,1204.63 1453.98,1204.63 1454.57,1204.63 1455.16,1204.63 1455.74,1204.63 1456.33,1204.63 1456.91,1204.63 1457.5,1204.63 1458.09,1204.63 1458.67,1204.63 1459.26,1204.63 1459.85,1204.63 1460.43,1204.63 1461.02,1204.63 1461.61,1204.63 1462.19,1204.63 1462.78,1204.63 1463.37,1204.63 1463.95,1204.63 1464.54,1204.63 1465.12,1204.63 1465.71,1204.63 1466.3,1204.63 1466.88,1204.63 1467.47,1204.63 1468.06,1204.63 1468.64,1204.63 1469.23,1204.63 1469.82,1204.63 1470.4,1204.63 1470.99,1204.63 1471.57,1204.63 1472.16,1204.63 1472.75,1204.63 1473.33,1204.63 1473.92,1204.63 1474.51,1204.63 1475.09,1204.63 1475.68,1204.63 1476.27,1204.63 1476.85,1204.63 1477.44,1204.63 1478.03,1204.63 1478.61,1204.63 1479.2,1204.63 1479.78,1204.63 1480.37,1204.63 1480.96,1204.63 1481.54,1204.63 1482.13,1204.63 1482.72,1204.63 1483.3,1204.63 1483.89,1204.63 1484.48,1204.63 1485.06,1204.63 1485.65,1204.63 1486.24,1204.63 1486.82,1204.63 1487.41,1204.63 1487.99,1204.63 1488.58,1204.63 1489.17,1204.63 1489.75,1204.63 1490.34,1204.63 1490.93,1204.63 1491.51,1204.63 1492.1,1204.63 1492.69,1204.63 1493.27,1204.63 1493.86,1204.63 1494.45,1204.63 1495.03,1204.63 1495.62,1204.63 1496.2,1204.63 1496.79,1204.63 1497.38,1204.63 1497.96,1204.63 1498.55,1204.63 1499.14,1204.63 1499.72,1204.63 1500.31,1204.63 1500.9,1204.63 1501.48,1204.63 1502.07,1204.63 1502.65,1204.63 1503.24,1204.63 1503.83,1204.63 1504.41,1204.63 1505,1204.63 1505.59,1204.63 1506.17,1204.63 1506.76,1204.63 1507.35,1204.63 1507.93,1204.63 1508.52,1204.63 1509.11,1204.63 1509.69,1204.63 1510.28,1204.63 1510.86,1204.63 1511.45,1204.63 1512.04,1204.63 1512.62,1204.63 1513.21,1204.63 1513.8,1204.63 1514.38,1204.63 1514.97,1204.63 1515.56,1204.63 1516.14,1204.63 1516.73,1204.63 1517.32,1204.63 1517.9,1204.63 1518.49,1204.63 1519.07,1204.63 1519.66,1204.63 1520.25,1204.63 1520.83,1204.63 1521.42,1204.63 1522.01,1204.63 1522.59,1204.63 1523.18,1204.63 1523.77,1204.63 1524.35,1204.63 1524.94,1204.63 1525.52,1204.63 1526.11,1204.63 1526.7,1204.63 1527.28,1204.63 1527.87,1204.63 1528.46,1204.63 1529.04,1204.63 1529.63,1204.63 1530.22,1204.63 1530.8,1204.63 1531.39,1204.63 1531.98,1204.63 1532.56,1204.63 1533.15,1204.63 1533.73,1204.63 1534.32,1204.63 1534.91,1204.63 1535.49,1204.63 1536.08,1204.63 1536.67,1204.63 1537.25,1204.63 1537.84,1204.63 1538.43,1204.63 1539.01,1204.63 1539.6,1204.63 1540.19,1204.63 1540.77,1204.63 1541.36,1204.63 1541.94,1204.63 1542.53,1204.63 1543.12,1204.63 1543.7,1204.63 1544.29,1204.63 1544.88,1204.63 1545.46,1204.63 1546.05,1204.63 1546.64,1204.63 1547.22,1204.63 1547.81,1204.63 1548.4,1204.63 1548.98,1204.63 1549.57,1204.63 1550.15,1204.63 1550.74,1204.63 1551.33,1204.63 1551.91,1204.63 1552.5,1204.63 1553.09,1204.63 1553.67,1204.63 1554.26,1204.63 1554.85,1204.63 1555.43,1204.63 1556.02,1204.63 1556.6,1204.63 1557.19,1204.63 1557.78,1204.63 1558.36,1204.63 1558.95,1204.63 1559.54,1204.63 1560.12,1204.63 1560.71,1204.63 1561.3,1204.63 1561.88,1204.63 1562.47,1204.63 1563.06,1204.63 1563.64,1204.63 1564.23,1204.63 1564.81,1204.63 1565.4,1204.63 1565.99,1204.63 1566.57,1204.63 1567.16,1204.63 1567.75,1204.63 1568.33,1204.63 1568.92,1204.63 1569.51,1204.63 1570.09,1204.63 1570.68,1204.63 1571.27,1204.63 1571.85,1204.63 1572.44,1204.63 1573.02,1204.63 1573.61,1204.63 1574.2,1204.63 1574.78,1204.63 1575.37,1204.63 1575.96,1204.63 1576.54,1204.63 1577.13,1204.63 1577.72,1204.63 1578.3,1204.63 1578.89,1204.63 1579.47,1204.63 1580.06,1204.63 1580.65,1204.63 1581.23,1204.63 1581.82,1204.63 1582.41,1204.63 1582.99,1204.63 1583.58,1204.63 1584.17,1204.63 1584.75,1204.63 1585.34,1204.63 1585.93,1204.63 1586.51,1204.63 1587.1,1204.63 1587.68,1204.63 1588.27,1204.63 1588.86,1204.63 1589.44,1204.63 1590.03,1204.63 1590.62,1204.63 1591.2,1204.63 1591.79,1204.63 1592.38,1204.63 1592.96,1204.63 1593.55,1204.63 1594.14,1204.63 1594.72,1204.63 1595.31,1204.63 1595.89,1204.63 1596.48,1204.63 1597.07,1204.63 1597.65,1204.63 1598.24,1204.63 1598.83,1204.63 1599.41,1204.63 1600,1204.63 1600.59,1204.63 1601.17,1204.63 1601.76,1204.63 1602.34,1204.63 1602.93,1204.63 1603.52,1204.63 1604.1,1204.63 1604.69,1204.63 1605.28,1204.63 1605.86,1204.63 1606.45,1204.63 1607.04,1204.63 1607.62,1204.63 1608.21,1204.63 1608.8,1204.63 1609.38,1204.63 1609.97,1204.63 1610.55,1204.63 1611.14,1204.63 1611.73,1204.63 1612.31,1204.63 1612.9,1204.63 1613.49,1204.63 1614.07,1204.63 1614.66,1204.63 1615.25,1204.63 1615.83,1204.63 1616.42,1204.63 1617.01,1204.63 1617.59,1204.63 1618.18,1204.63 1618.76,1204.63 1619.35,1204.63 1619.94,1204.63 1620.52,1204.63 1621.11,1204.63 1621.7,1204.63 1622.28,1204.63 1622.87,1204.63 1623.46,1204.63 1624.04,1204.63 1624.63,1204.63 1625.22,1204.63 1625.8,1204.63 1626.39,1204.63 1626.97,1204.63 1627.56,1204.63 1628.15,1204.63 1628.73,1204.63 1629.32,1204.63 1629.91,1204.63 1630.49,1204.63 1631.08,1204.63 1631.67,1204.63 1632.25,1204.63 1632.84,1204.63 1633.42,1204.63 1634.01,1204.63 1634.6,1204.63 1635.18,1204.63 1635.77,1204.63 1636.36,1204.63 1636.94,1204.63 1637.53,1204.63 1638.12,1204.63 1638.7,1204.63 1639.29,1204.63 1639.88,1204.63 1640.46,1204.63 1641.05,1204.63 1641.63,1204.63 1642.22,1204.63 1642.81,1204.63 1643.39,1204.63 1643.98,1204.63 1644.57,1204.63 1645.15,1204.63 1645.74,1204.63 1646.33,1204.63 1646.91,1204.63 1647.5,1204.63 1648.09,1204.63 1648.67,1204.63 1649.26,1204.63 1649.84,1204.63 1650.43,1204.63 1651.02,1204.63 1651.6,1204.63 1652.19,1204.63 1652.78,1204.63 1653.36,1204.63 1653.95,1204.63 1654.54,1204.63 1655.12,1204.63 1655.71,1204.63 1656.29,1204.63 1656.88,1204.63 1657.47,1204.63 1658.05,1204.63 1658.64,1204.63 1659.23,1204.63 1659.81,1204.63 1660.4,1204.63 1660.99,1204.63 1661.57,1204.63 1662.16,1204.63 1662.75,1204.63 1663.33,1204.63 1663.92,1204.63 1664.5,1204.63 1665.09,1204.63 1665.68,1204.63 1666.26,1204.63 1666.85,1204.63 1667.44,1204.63 1668.02,1204.63 1668.61,1204.63 1669.2,1204.63 1669.78,1204.63 1670.37,1204.63 1670.96,1204.63 1671.54,1204.63 1672.13,1204.63 1672.71,1204.63 1673.3,1204.63 1673.89,1204.63 1674.47,1204.63 1675.06,1204.63 1675.65,1204.63 1676.23,1204.63 1676.82,1204.63 1677.41,1204.63 1677.99,1204.63 1678.58,1204.63 1679.17,1204.63 1679.75,1204.63 1680.34,1204.63 1680.92,1204.63 1681.51,1204.63 1682.1,1204.63 1682.68,1204.63 1683.27,1204.63 1683.86,1204.63 1684.44,1204.63 1685.03,1204.63 1685.62,1204.63 1686.2,1204.63 1686.79,1204.63 1687.37,1204.63 1687.96,1204.63 1688.55,1204.63 1689.13,1204.63 1689.72,1204.63 1690.31,1204.63 1690.89,1204.63 1691.48,1204.63 1692.07,1204.63 1692.65,1204.63 1693.24,1204.63 1693.83,1204.63 1694.41,1204.63 1695,1204.63 1695.58,1204.63 1696.17,1204.63 1696.76,1204.63 1697.34,1204.63 1697.93,1204.63 1698.52,1204.63 1699.1,1204.63 1699.69,1204.63 1700.28,1204.63 1700.86,1204.63 1701.45,1204.63 1702.04,1204.63 1702.62,1204.63 1703.21,1204.63 1703.79,1204.63 1704.38,1204.63 1704.97,1204.63 1705.55,1204.63 1706.14,1204.63 1706.73,1204.63 1707.31,1204.63 1707.9,1204.63 1708.49,1204.63 1709.07,1204.63 1709.66,1204.63 1710.24,1204.63 1710.83,1204.63 1711.42,1204.63 1712,1204.63 1712.59,1204.63 1713.18,1204.63 1713.76,1204.63 1714.35,1204.63 1714.94,1204.63 1715.52,1204.63 1716.11,1204.63 1716.7,1204.63 1717.28,1204.63 1717.87,1204.63 1718.45,1204.63 1719.04,1204.63 1719.63,1204.63 1720.21,1204.63 1720.8,1204.63 1721.39,1204.63 1721.97,1204.63 1722.56,1204.63 1723.15,1204.63 1723.73,1204.63 1724.32,1204.63 1724.91,1204.63 1725.49,1204.63 1726.08,1204.63 1726.66,1204.63 1727.25,1204.63 1727.84,1204.63 1728.42,1204.63 1729.01,1204.63 1729.6,1204.63 1730.18,1204.63 1730.77,1204.63 1731.36,1204.63 1731.94,1204.63 1732.53,1204.63 1733.11,1204.63 1733.7,1204.63 1734.29,1204.63 1734.87,1204.63 1735.46,1204.63 1736.05,1204.63 1736.63,1204.63 1737.22,1204.63 1737.81,1204.63 1738.39,1204.63 1738.98,1204.63 1739.57,1204.63 1740.15,1204.63 1740.74,1204.63 1741.32,1204.63 1741.91,1204.63 1742.5,1204.63 1743.08,1204.63 1743.67,1204.63 1744.26,1204.63 1744.84,1204.63 1745.43,1204.63 1746.02,1204.63 1746.6,1204.63 1747.19,1204.63 1747.78,1204.63 1748.36,1204.63 1748.95,1204.63 1749.53,1204.63 1750.12,1204.63 1750.71,1204.63 1751.29,1204.63 1751.88,1204.63 1752.47,1204.63 1753.05,1204.63 1753.64,1204.63 1754.23,1204.63 1754.81,1204.63 1755.4,1204.63 1755.99,1204.63 1756.57,1204.63 1757.16,1204.63 1757.74,1204.63 1758.33,1204.63 1758.92,1204.63 1759.5,1204.63 1760.09,1204.63 1760.68,1204.63 1761.26,1204.63 1761.85,1204.63 1762.44,1204.63 1763.02,1204.63 1763.61,1204.63 1764.19,1204.63 1764.78,1204.63 1765.37,1204.63 1765.95,1204.63 1766.54,1204.63 1767.13,1204.63 1767.71,1204.63 1768.3,1204.63 1768.89,1204.63 1769.47,1204.63 1770.06,1204.63 1770.65,1204.63 1771.23,1204.63 1771.82,1204.63 1772.4,1204.63 1772.99,1204.63 1773.58,1204.63 1774.16,1204.63 1774.75,1204.63 1775.34,1204.63 1775.92,1204.63 1776.51,1204.63 1777.1,1204.63 1777.68,1204.63 1778.27,1204.63 1778.86,1204.63 1779.44,1204.63 1780.03,1204.63 1780.61,1204.63 1781.2,1204.63 1781.79,1204.63 1782.37,1204.63 1782.96,1204.63 1783.55,1204.63 1784.13,1204.63 1784.72,1204.63 1785.31,1204.63 1785.89,1204.63 1786.48,1204.63 1787.06,1204.63 1787.65,1204.63 1788.24,1204.63 1788.82,1204.63 1789.41,1204.63 1790,1204.63 1790.58,1204.63 1791.17,1204.63 1791.76,1204.63 1792.34,1204.63 1792.93,1204.63 1793.52,1204.63 1794.1,1204.63 1794.69,1204.63 1795.27,1204.63 1795.86,1204.63 1796.45,1204.63 1797.03,1204.63 1797.62,1204.63 1798.21,1204.63 1798.79,1204.63 1799.38,1204.63 1799.97,1204.63 1800.55,1204.63 1801.14,1204.63 1801.73,1204.63 1802.31,1204.63 1802.9,1204.63 1803.48,1204.63 1804.07,1204.63 1804.66,1204.63 1805.24,1204.63 1805.83,1204.63 1806.42,1204.63 1807,1204.63 1807.59,1204.63 1808.18,1204.63 1808.76,1204.63 1809.35,1204.63 1809.94,1204.63 1810.52,1204.63 1811.11,1204.63 1811.69,1204.63 1812.28,1204.63 1812.87,1204.63 1813.45,1204.63 1814.04,1204.63 1814.63,1204.63 1815.21,1204.63 1815.8,1204.63 1816.39,1204.63 1816.97,1204.63 1817.56,1204.63 1818.14,1204.63 1818.73,1204.63 1819.32,1204.63 1819.9,1204.63 1820.49,1204.63 1821.08,1204.63 1821.66,1204.63 1822.25,1204.63 1822.84,1204.63 1823.42,1204.63 1824.01,1204.63 1824.6,1204.63 1825.18,1204.63 1825.77,1204.63 1826.35,1204.63 1826.94,1204.63 1827.53,1204.63 1828.11,1204.63 1828.7,1204.63 1829.29,1204.63 1829.87,1204.63 1830.46,1204.63 1831.05,1204.63 1831.63,1204.63 1832.22,1204.63 1832.81,1204.63 1833.39,1204.63 1833.98,1204.63 1834.56,1204.63 1835.15,1204.63 1835.74,1204.63 1836.32,1204.63 1836.91,1204.63 1837.5,1204.63 1838.08,1204.63 1838.67,1204.63 1839.26,1204.63 1839.84,1204.63 1840.43,1204.63 1841.01,1204.63 1841.6,1204.63 1842.19,1204.63 1842.77,1204.63 1843.36,1204.63 1843.95,1204.63 1844.53,1204.63 1845.12,1204.63 1845.71,1204.63 1846.29,1204.63 1846.88,1204.63 1847.47,1204.63 1848.05,1204.63 1848.64,1204.63 1849.22,1204.63 1849.81,1204.63 1850.4,1204.63 1850.98,1204.63 1851.57,1204.63 1852.16,1204.63 1852.74,1204.63 1853.33,1204.63 1853.92,1204.63 1854.5,1204.63 1855.09,1204.63 1855.68,1204.63 1856.26,1204.63 1856.85,1204.63 1857.43,1204.63 1858.02,1204.63 1858.61,1204.63 1859.19,1204.63 1859.78,1204.63 1860.37,1204.63 1860.95,1204.63 1861.54,1204.63 1862.13,1204.63 1862.71,1204.63 1863.3,1204.63 1863.88,1204.63 1864.47,1204.63 1865.06,1204.63 1865.64,1204.63 1866.23,1204.63 1866.82,1204.63 1867.4,1204.63 1867.99,1204.63 1868.58,1204.63 1869.16,1204.63 1869.75,1204.63 1870.34,1204.63 1870.92,1204.63 1871.51,1204.63 1872.09,1204.63 1872.68,1204.63 1873.27,1204.63 1873.85,1204.63 1874.44,1204.63 1875.03,1204.63 1875.61,1204.63 1876.2,1204.63 1876.79,1204.63 1877.37,1204.63 1877.96,1204.63 1878.55,1204.63 1879.13,1204.63 1879.72,1204.63 1880.3,1204.63 1880.89,1204.63 1881.48,1204.63 1882.06,1204.63 1882.65,1204.63 1883.24,1204.63 1883.82,1204.63 1884.41,1204.63 1885,1204.63 1885.58,1204.63 1886.17,1204.63 1886.76,1204.63 1887.34,1204.63 1887.93,1204.63 1888.51,1204.63 1889.1,1204.63 1889.69,1204.63 1890.27,1204.63 1890.86,1204.63 1891.45,1204.63 1892.03,1204.63 1892.62,1204.63 1893.21,1204.63 1893.79,1204.63 1894.38,1204.63 1894.96,1204.63 1895.55,1204.63 1896.14,1204.63 1896.72,1204.63 1897.31,1204.63 1897.9,1204.63 1898.48,1204.63 1899.07,1204.63 1899.66,1204.63 1900.24,1204.63 1900.83,1204.63 1901.42,1204.63 1902,1204.63 1902.59,1204.63 1903.17,1204.63 1903.76,1204.63 1904.35,1204.63 1904.93,1204.63 1905.52,1204.63 1906.11,1204.63 1906.69,1204.63 1907.28,1204.63 1907.87,1204.63 1908.45,1204.63 1909.04,1204.63 1909.63,1204.63 1910.21,1204.63 1910.8,1204.63 1911.38,1204.63 1911.97,1204.63 1912.56,1204.63 1913.14,1204.63 1913.73,1204.63 1914.32,1204.63 1914.9,1204.63 1915.49,1204.63 1916.08,1204.63 1916.66,1204.63 1917.25,1204.63 1917.83,1204.63 1918.42,1204.63 1919.01,1204.63 1919.59,1204.63 1920.18,1204.63 1920.77,1204.63 1921.35,1204.63 1921.94,1204.63 1922.53,1204.63 1923.11,1204.63 1923.7,1204.63 1924.29,1204.63 1924.87,1204.63 1925.46,1204.63 1926.04,1204.63 1926.63,1204.63 1927.22,1204.63 1927.8,1204.63 1928.39,1204.63 1928.98,1204.63 1929.56,1204.63 1930.15,1204.63 1930.74,1204.63 1931.32,1204.63 1931.91,1204.63 1932.5,1204.63 1933.08,1204.63 1933.67,1204.63 1934.25,1204.63 1934.84,1204.63 1935.43,1204.63 1936.01,1204.63 1936.6,1204.63 1937.19,1204.63 1937.77,1204.63 1938.36,1204.63 1938.95,1204.63 1939.53,1204.63 1940.12,1204.63 1940.71,1204.63 1941.29,1204.63 1941.88,1204.63 1942.46,1204.63 1943.05,1204.63 1943.64,1204.63 1944.22,1204.63 1944.81,1204.63 1945.4,1204.63 1945.98,1204.63 1946.57,1204.63 1947.16,1204.63 1947.74,1204.63 1948.33,1204.63 1948.91,1204.63 1949.5,1204.63 1950.09,1204.63 1950.67,1204.63 1951.26,1204.63 1951.85,1204.63 1952.43,1204.63 1953.02,1204.63 1953.61,1204.63 1954.19,1204.63 1954.78,1204.63 1955.37,1204.63 1955.95,1204.63 1956.54,1204.63 1957.12,1204.63 1957.71,1204.63 1958.3,1204.63 1958.88,1204.63 1959.47,1204.63 1960.06,1204.63 1960.64,1204.63 1961.23,1204.63 1961.82,1204.63 1962.4,1204.63 1962.99,1204.63 1963.58,1204.63 1964.16,1204.63 1964.75,1204.63 1965.33,1204.63 1965.92,1204.63 1966.51,1204.63 1967.09,1204.63 1967.68,1204.63 1968.27,1204.63 1968.85,1204.63 1969.44,1204.63 1970.03,1204.63 1970.61,1204.63 1971.2,1204.63 1971.78,1204.63 1972.37,1204.63 1972.96,1204.63 1973.54,1204.63 1974.13,1204.63 1974.72,1204.63 1975.3,1204.63 1975.89,1204.63 1976.48,1204.63 1977.06,1204.63 1977.65,1204.63 1978.24,1204.63 1978.82,1204.63 1979.41,1204.63 1979.99,1204.63 1980.58,1204.63 1981.17,1204.63 1981.75,1204.63 1982.34,1204.63 1982.93,1204.63 1983.51,1204.63 1984.1,1204.63 1984.69,1204.63 1985.27,1204.63 1985.86,1204.63 1986.45,1204.63 1987.03,1204.63 1987.62,1204.63 1988.2,1204.63 1988.79,1204.63 1989.38,1204.63 1989.96,1204.63 1990.55,1204.63 1991.14,1204.63 1991.72,1204.63 1992.31,1204.63 1992.9,1204.63 1993.48,1204.63 1994.07,1204.63 1994.65,1204.63 1995.24,1204.63 1995.83,1204.63 1996.41,1204.63 1997,1204.63 1997.59,1204.63 1998.17,1204.63 1998.76,1204.63 1999.35,1204.63 1999.93,1204.63 2000.52,1204.63 2001.11,1204.63 2001.69,1204.63 2002.28,1204.63 2002.86,1204.63 2003.45,1204.63 2004.04,1204.63 2004.62,1204.63 2005.21,1204.63 2005.8,1204.63 2006.38,1204.63 2006.97,1204.63 2007.56,1204.63 2008.14,1204.63 2008.73,1204.63 2009.32,1204.63 2009.9,1204.63 2010.49,1204.63 2011.07,1204.63 2011.66,1204.63 2012.25,1204.63 2012.83,1204.63 2013.42,1204.63 2014.01,1204.63 2014.59,1204.63 2015.18,1204.63 2015.77,1204.63 2016.35,1204.63 2016.94,1204.63 2017.53,1204.63 2018.11,1204.63 2018.7,1204.63 2019.28,1204.63 2019.87,1204.63 2020.46,1204.63 2021.04,1204.63 2021.63,1204.63 2022.22,1204.63 2022.8,1204.63 2023.39,1204.63 2023.98,1204.63 2024.56,1204.63 2025.15,1204.63 2025.73,1204.63 2026.32,1204.63 2026.91,1204.63 2027.49,1204.63 2028.08,1204.63 2028.67,1204.63 2029.25,1204.63 2029.84,1204.63 2030.43,1204.63 2031.01,1204.63 2031.6,1204.63 2032.19,1204.63 2032.77,1204.63 2033.36,1204.63 2033.94,1204.63 2034.53,1204.63 2035.12,1204.63 2035.7,1204.63 2036.29,1204.63 2036.88,1204.63 2037.46,1204.63 2038.05,1204.63 2038.64,1204.63 2039.22,1204.63 2039.81,1204.63 2040.4,1204.63 2040.98,1204.63 2041.57,1204.63 2042.15,1204.63 2042.74,1204.63 2043.33,1204.63 2043.91,1204.63 2044.5,1204.63 2045.09,1204.63 2045.67,1204.63 2046.26,1204.63 2046.85,1204.63 2047.43,1204.63 2048.02,1204.63 2048.6,1204.63 2049.19,1204.63 2049.78,1204.63 2050.36,1204.63 2050.95,1204.63 2051.54,1204.63 2052.12,1204.63 2052.71,1204.63 2053.3,1204.63 2053.88,1204.63 2054.47,1204.63 2055.06,1204.63 2055.64,1204.63 2056.23,1204.63 2056.81,1204.63 2057.4,1204.63 2057.99,1204.63 2058.57,1204.63 2059.16,1204.63 2059.75,1204.63 2060.33,1204.63 2060.92,1204.63 2061.51,1204.63 2062.09,1204.63 2062.68,1204.63 2063.27,1204.63 2063.85,1204.63 2064.44,1204.63 2065.02,1204.63 2065.61,1204.63 2066.2,1204.63 2066.78,1204.63 2067.37,1204.63 2067.96,1204.63 2068.54,1204.63 2069.13,1204.63 2069.72,1204.63 2070.3,1204.63 2070.89,1204.63 2071.48,1204.63 2072.06,1204.63 2072.65,1204.63 2073.23,1204.63 2073.82,1204.63 2074.41,1204.63 2074.99,1204.63 2075.58,1204.63 2076.17,1204.63 2076.75,1204.63 2077.34,1204.63 2077.93,1204.63 2078.51,1204.63 2079.1,1204.63 2079.68,1204.63 2080.27,1204.63 2080.86,1204.63 2081.44,1204.63 2082.03,1204.63 2082.62,1204.63 2083.2,1204.63 2083.79,1204.63 2084.38,1204.63 2084.96,1204.63 2085.55,1204.63 2086.14,1204.63 2086.72,1204.63 2087.31,1204.63 2087.89,1204.63 2088.48,1204.63 2089.07,1204.63 2089.65,1204.63 2090.24,1204.63 2090.83,1204.63 2091.41,1204.63 2092,1204.63 2092.59,1204.63 2093.17,1204.63 2093.76,1204.63 2094.35,1204.63 2094.93,1204.63 2095.52,1204.63 2096.1,1204.63 2096.69,1204.63 2097.28,1204.63 2097.86,1204.63 2098.45,1204.63 2099.04,1204.63 2099.62,1204.63 2100.21,1204.63 2100.8,1204.63 2101.38,1204.63 2101.97,1204.63 2102.55,1204.63 2103.14,1204.63 2103.73,1204.63 2104.31,1204.63 2104.9,1204.63 2105.49,1204.63 2106.07,1204.63 2106.66,1204.63 2107.25,1204.63 2107.83,1204.63 2108.42,1204.63 2109.01,1204.63 2109.59,1204.63 2110.18,1204.63 2110.76,1204.63 2111.35,1204.63 2111.94,1204.63 2112.52,1204.63 2113.11,1204.63 2113.7,1204.63 2114.28,1204.63 2114.87,1204.63 2115.46,1204.63 2116.04,1204.63 2116.63,1204.63 2117.22,1204.63 2117.8,1204.63 2118.39,1204.63 2118.97,1204.63 2119.56,1204.63 2120.15,1204.63 2120.73,1204.63 2121.32,1204.63 2121.91,1204.63 2122.49,1204.63 2123.08,1204.63 2123.67,1204.63 2124.25,1204.63 2124.84,1204.63 2125.42,1204.63 2126.01,1204.63 2126.6,1204.63 2127.18,1204.63 2127.77,1204.63 2128.36,1204.63 2128.94,1204.63 2129.53,1204.63 2130.12,1204.63 2130.7,1204.63 2131.29,1204.63 2131.88,1204.63 2132.46,1204.63 2133.05,1204.63 2133.63,1204.63 2134.22,1204.63 2134.81,1204.63 2135.39,1204.63 2135.98,1204.63 2136.57,1204.63 2137.15,1204.63 2137.74,1204.63 2138.33,1204.63 2138.91,1204.63 2139.5,1204.63 2140.09,1204.63 2140.67,1204.63 2141.26,1204.63 2141.84,1204.63 2142.43,1204.63 2143.02,1204.63 2143.6,1204.63 2144.19,1204.63 2144.78,1204.63 2145.36,1204.63 2145.95,1204.63 2146.54,1204.63 2147.12,1204.63 2147.71,1204.63 2148.3,1204.63 2148.88,1204.63 2149.47,1204.63 2150.05,1204.63 2150.64,1204.63 2151.23,1204.63 2151.81,1204.63 2152.4,1204.63 2152.99,1204.63 2153.57,1204.63 2154.16,1204.63 2154.75,1204.63 2155.33,1204.63 2155.92,1204.63 2156.5,1204.63 2157.09,1204.63 2157.68,1204.63 2158.26,1204.63 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.48,1187.59 1401.13,899.083 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1221.12 985.439,1187.59 2158.26,1187.59 2158.26,1221.12 985.439,1221.12 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip473\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip473)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2678.91 162.673,-3908.1 163.232,-5010.02 163.792,-6042.2 164.351,-6984.74 164.91,-7843.5 165.469,-8582.21 166.029,-8145.28 166.588,-8822.15 167.147,-9433.21 167.706,-9964.11 168.266,-10457.1 168.825,-10877.5 169.384,-11267.2 169.943,-11609.9 170.503,-11908.4 171.062,-12150.1 171.621,-11718.6 172.18,-11344.2 172.74,-11539.2 173.299,-11683.2 173.858,-11815.5 174.417,-11919 174.977,-11987.1 175.536,-11638.9 176.095,-11671.1 176.655,-11681.3 177.214,-11358.2 177.773,-11042.3 178.332,-11011.9 178.892,-10696.6 179.451,-10414.2 180.01,-10349.4 180.569,-9847.76 181.129,-9783.34 181.688,-9505.95 182.247,-9438.98 182.806,-9186.87 183.366,-8940.2 183.925,-8865.55 184.484,-8769.88 185.043,-8665.65 185.603,-8561.33 186.162,-8446.13 186.721,-8090.55 187.28,-7747.61 187.84,-7621.64 188.399,-7389.81 188.958,-7172.86 189.517,-6875.77 190.077,-6749.55 190.636,-6537.44 191.195,-6416.79 191.754,-6216.18 192.314,-6016.78 192.873,-5754.96 193.432,-5577.49 193.991,-5402.03 194.551,-5289.4 195.11,-5118.09 195.669,-4780.3 196.228,-4682.65 196.788,-4428.09 197.347,-4236.74 197.906,-4156.16 198.465,-4067.39 199.025,-3885.01 199.584,-3801.3 200.143,-3676.7 200.702,-3593.38 201.262,-3511.86 201.821,-3386.51 202.38,-3223.57 202.939,-3069.68 203.499,-2996.81 204.058,-2884.11 204.617,-2810.4 205.176,-2698.94 205.736,-2520.21 206.295,-2310.53 206.854,-2212.24 207.413,-2115.26 207.973,-1991.36 208.532,-1897.7 209.091,-1808.37 209.65,-1749.77 210.21,-1693.3 210.769,-1579.68 211.328,-1440.05 211.887,-1393.68 212.447,-1290.22 213.006,-1241.45 213.565,-1165.17 214.124,-1061.53 214.684,-965.402 215.243,-895.013 215.802,-799.474 216.361,-757.389 216.921,-713.719 217.48,-647.943 218.039,-584.926 218.598,-519.896 219.158,-460.038 219.717,-375.164 220.276,-318.158 220.835,-264.752 221.395,-237.836 221.954,-184.045 222.513,-137.338 223.072,-45.1722 223.632,43.6091 224.191,109.156 224.75,209.242 225.309,223.576 225.869,238.386 226.428,274.589 226.987,287.996 227.546,321.442 228.106,333.675 228.665,424.832 229.224,434.478 229.783,380.646 230.343,434.129 230.902,464.144 231.461,454.368 232.02,504.521 232.58,527.178 233.139,537.217 233.698,566.51 234.257,589.976 234.817,559.301 235.376,608.116 235.935,613.151 236.494,638.86 237.054,663.148 237.613,708.734 238.172,714.662 238.731,719.999 239.291,727.526 239.85,731.182 240.409,737.229 240.968,780.779 241.528,856.588 242.087,872.466 242.646,870.019 243.205,905.351 243.765,938.924 244.324,937.131 244.883,944.943 245.442,961.744 246.002,955.262 246.561,968.773 247.12,982.375 247.679,976.334 248.239,953.093 248.798,966.304 249.357,963.836 249.916,961.143 250.476,992.312 251.035,1004.43 251.594,1052.43 252.153,1042.05 252.713,1033.16 253.272,1028.83 253.831,1074.13 254.39,1083.21 254.95,1075.43 255.509,1086.26 256.068,1096.15 256.627,1087.08 257.187,1080.4 257.746,1141.77 258.305,1134.96 258.864,1137.59 259.424,1124.52 259.983,1147.5 260.542,1152.8 261.101,1193.19 261.661,1179.3 262.22,1202.38 262.779,1203.19 263.338,1172.87 263.898,1191.54 264.457,1215.74 265.016,1232.72 265.575,1234.16 266.135,1269.43 266.694,1267.06 267.253,1282.34 267.812,1246.66 268.372,1264.76 268.931,1248 269.49,1251.14 270.049,1229.82 270.609,1225.53 271.168,1191.92 271.727,1210.39 272.286,1181.55 272.846,1168.17 273.405,1154.22 273.964,1139.45 274.523,1176.08 275.083,1148.32 275.642,1139.31 276.201,1129.96 276.76,1099.57 277.32,1124.4 277.879,1081.36 278.438,1074.11 278.997,1066.23 279.557,1072.36 280.116,1066.31 280.675,1023.07 281.234,1034.01 281.794,1027.43 282.353,1036.22 282.912,1014.12 283.471,1012.61 284.031,1009.15 284.59,1022.09 285.149,999.325 285.708,1012.87 286.268,1042.08 286.827,1016.28 287.386,1013.37 287.945,1007.96 288.505,1038.5 289.064,1066.18 289.623,1074.27 290.182,1066.09 290.742,1075.32 291.301,1098.96 291.86,1142.02 292.419,1097.79 292.979,1071.14 293.538,1014.13 294.097,1006.78 294.656,1021.88 295.216,983.025 295.775,978.938 296.334,993.066 296.893,1026.12 297.453,1005.65 298.012,1014.04 298.571,959.579 299.13,957.165 299.69,1018.84 300.249,1026.94 300.808,1020.73 301.368,1019.17 301.927,1031.31 302.486,1043.5 303.045,1033.49 303.605,1089.79 304.164,1078.96 304.723,1074.07 305.282,1066.75 305.842,1058.58 306.401,1053 306.96,1048.21 307.519,1043.1 308.079,1034.72 308.638,1041.81 309.197,1037.17 309.756,1042.16 310.316,1069.19 310.875,1108.72 311.434,1046.22 311.993,1037.7 312.553,1113.72 313.112,1117.62 313.671,1124.49 314.23,1144.13 314.79,1165.94 315.349,1152.45 315.908,1140.62 316.467,1112.17 317.027,1097.86 317.586,1101.54 318.145,1089.06 318.704,1082.21 319.264,1071.02 319.823,1063.05 320.382,1052.32 320.941,997.42 321.501,989.304 322.06,934.357 322.619,946.39 323.178,938.969 323.738,901.408 324.297,948.617 324.856,964.444 325.415,960.211 325.975,958.782 326.534,971.98 327.093,953.522 327.652,967.515 328.212,957.293 328.771,952.754 329.33,929.237 329.889,910.934 330.449,939.829 331.008,999.26 331.567,992.118 332.126,1001.49 332.686,995.185 333.245,989.235 333.804,985.77 334.363,961.175 334.923,989.479 335.482,964.269 336.041,957.908 336.6,971.252 337.16,927.782 337.719,909.111 338.278,905.616 338.837,898.701 339.397,892.525 339.956,908.451 340.515,902.261 341.074,898.447 341.634,860.902 342.193,890.096 342.752,889.657 343.311,888.75 343.871,866.83 344.43,878.704 344.989,860.017 345.548,858.044 346.108,889.738 346.667,903.795 347.226,904.625 347.785,914.854 348.345,910.758 348.904,904.051 349.463,900.685 350.022,912.062 350.582,957.409 351.141,950.491 351.7,909.795 352.259,903.92 352.819,946.856 353.378,941.779 353.937,902.799 354.496,915.877 355.056,895.738 355.615,909.356 356.174,903.362 356.733,915.937 357.293,910.513 357.852,919.327 358.411,915.751 358.97,861.084 359.53,907.772 360.089,905.892 360.648,919.015 361.207,880.36 361.767,861.608 362.326,858.753 362.885,852.629 363.444,851.074 364.004,850.796 364.563,862.655 365.122,844.076 365.681,826.63 366.241,796.129 366.8,800.367 367.359,835.421 367.918,848.167 368.478,843.278 369.037,855.127 369.596,851.33 370.155,899.27 370.715,895.49 371.274,857.212 371.833,865.571 372.392,863.895 372.952,861.628 373.511,889.992 374.07,887.013 374.629,851.375 375.189,831.275 375.748,826.312 376.307,839.997 376.866,855.867 377.426,870.542 377.985,898.038 378.544,910.656 379.103,902.179 379.663,925.867 380.222,952.822 380.781,942.633 381.34,964.5 381.9,957.324 382.459,963.485 383.018,969.058 383.577,916.384 384.137,927.78 384.696,889.062 385.255,886.614 385.814,900.373 386.374,881.484 386.933,909.646 387.492,923.365 388.051,887.084 388.611,869.54 389.17,913.125 389.729,874.622 390.288,871.651 390.848,835.061 391.407,881.054 391.966,861.138 392.525,855.586 393.085,832.148 393.644,813.371 394.203,797.026 394.762,813.061 395.322,816.982 395.881,815.844 396.44,827.379 396.999,840.224 397.559,821.635 398.118,786.974 398.677,786.575 399.236,787.296 399.796,740.019 400.355,724.618 400.914,758.868 401.473,775.987 402.033,808.831 402.592,791.208 403.151,790.584 403.71,803.43 404.27,820.055 404.829,820.461 405.388,816.11 405.947,835.168 406.507,861.881 407.066,856.189 407.625,836.932 408.184,819.713 408.744,836.262 409.303,814.866 409.862,815.595 410.421,799.403 410.981,832.734 411.54,829.458 412.099,857.469 412.658,854.682 413.218,912.947 413.777,922.035 414.336,909.673 414.895,904.345 415.455,897.221 416.014,876.14 416.573,858.479 417.132,836.218 417.692,832.601 418.251,813.406 418.81,809.796 419.369,805.678 419.929,819.511 420.488,830.675 421.047,860.421 421.606,874.556 422.166,886.113 422.725,896.403 423.284,908.311 423.843,932.182 424.403,923.016 424.962,916.888 425.521,893.802 426.08,854.339 426.64,867.747 427.199,860.801 427.758,839.314 428.318,833.359 428.877,844.32 429.436,840.473 429.995,834.019 430.555,783.466 431.114,814.384 431.673,793.191 432.232,757.476 432.792,741.743 433.351,757.836 433.91,757.98 434.469,776.78 435.029,742.544 435.588,711.794 436.147,731.827 436.706,730.911 437.266,732.548 437.825,718.106 438.384,705.242 438.943,706.649 439.503,724.266 440.062,710.518 440.621,715.555 441.18,689.249 441.74,693.892 442.299,711.918 442.858,730.02 443.417,764.597 443.977,765.273 444.536,779.416 445.095,796.341 445.654,794.051 446.214,806.862 446.773,804.864 447.332,832.333 447.891,860.687 448.451,870.622 449.01,896.91 449.569,873.679 450.128,885.166 450.688,862.728 451.247,870.265 451.806,847.311 452.365,842.018 452.925,838.548 453.484,832.584 454.043,780.24 454.602,796.037 455.162,744.476 455.721,744.346 456.28,744.513 456.839,780.211 457.399,842.447 457.958,856.277 458.517,836.331 459.076,830.157 459.636,827.687 460.195,824.882 460.754,819.855 461.313,799.98 461.873,780.21 462.432,778.121 462.991,759.957 463.55,762.746 464.11,762.459 464.669,746.776 465.228,712.623 465.787,698.946 466.347,682.754 466.906,702.569 467.465,719.258 468.024,688.425 468.584,706.489 469.143,689.193 469.702,695.297 470.261,763.046 470.821,794.783 471.38,807.854 471.939,785.957 472.498,748.259 473.058,730.155 473.617,729.846 474.176,727.98 474.735,694.999 475.295,696.882 475.854,699.744 476.413,707.472 476.972,710.71 477.532,713.279 478.091,716.205 478.65,682.64 479.209,703.959 479.769,707.14 480.328,708.417 480.887,712.388 481.446,696.992 482.006,715.833 482.565,751.67 483.124,735.251 483.683,738.062 484.243,707.014 484.802,721.472 485.361,738.136 485.92,768.13 486.48,750.279 487.039,702.9 487.598,753.212 488.157,718.933 488.717,722.604 489.276,727.597 489.835,745.131 490.394,712.734 490.954,699.921 491.513,736.209 492.072,737.052 492.631,704.601 493.191,675.767 493.75,681.32 494.309,698.266 494.868,745.861 495.428,746.514 495.987,762.168 496.546,740.784 497.105,739.831 497.665,738.941 498.224,723.883 498.783,725.742 499.342,741.268 499.902,707.743 500.461,726.021 501.02,742.233 501.579,758.155 502.139,790.886 502.698,804.341 503.257,784.569 503.816,784.467 504.376,783.642 504.935,798.724 505.494,797.201 506.053,796.006 506.613,809.467 507.172,772.97 507.731,786.077 508.29,783.949 508.85,784.668 509.409,798.337 509.968,781.614 510.527,763.921 511.087,745.2 511.646,728.857 512.205,731.783 512.764,712.391 513.324,742.5 513.883,761.515 514.442,759.838 515.001,760.2 515.561,742.254 516.12,721.16 516.679,726.054 517.238,744.603 517.798,740.227 518.357,756.882 518.916,739.788 519.475,737.264 520.035,750.471 520.594,745.31 521.153,760.286 521.712,754.667 522.272,734.955 522.831,722.43 523.39,705.464 523.949,739.551 524.509,738.35 525.068,753.11 525.627,752.236 526.186,732.607 526.746,718.301 527.305,737.018 527.864,739.373 528.423,736.045 528.983,734.868 529.542,731.783 530.101,734.019 530.66,731.708 531.22,748.371 531.779,778.265 532.338,775.803 532.897,790.21 533.457,771.745 534.016,787.76 534.575,783.655 535.134,795.245 535.694,773.852 536.253,771.237 536.812,815.097 537.371,811.87 537.931,811.276 538.49,809.004 539.049,804.176 539.608,812.951 540.168,837.373 540.727,863.098 541.286,871.643 541.845,891.621 542.405,880.859 542.964,889.646 543.523,896.593 544.082,872.89 544.642,850.97 545.201,857.958 545.76,833.696 546.319,830.541 546.879,808.433 547.438,785.535 547.997,780.923 548.556,779.656 549.116,759.635 549.675,758.734 550.234,726.047 550.793,741.976 551.353,740.453 551.912,737.823 552.471,742.288 553.031,739.824 553.59,735.006 554.149,732.919 554.708,733.87 555.268,732.929 555.827,713.521 556.386,675.656 556.945,691.767 557.505,662.174 558.064,613.999 558.623,605.754 559.182,610.272 559.742,566.65 560.301,560.881 560.86,569.56 561.419,579.732 561.979,558.527 562.538,618.422 563.097,641.101 563.656,647.48 564.216,653.676 564.775,674.82 565.334,694.332 565.893,697.311 566.453,698.701 567.012,685.185 567.571,688.622 568.13,690.583 568.69,708.298 569.249,689.311 569.808,675.371 570.367,660.785 570.927,633.849 571.486,655.598 572.045,677.342 572.604,659.898 573.164,664.832 573.723,666.927 574.282,667.9 574.841,687.52 575.401,705.732 575.96,723.846 576.519,725.397 577.078,711.651 577.638,693.539 578.197,691.943 578.756,694.75 579.315,729.584 579.875,758.613 580.434,753.422 580.993,766.669 581.552,767.185 582.112,762.665 582.671,742.75 583.23,745.313 583.789,774.563 584.349,772.479 584.908,768.417 585.467,748.536 586.026,728.739 586.586,714.96 587.145,683.059 587.704,682.982 588.263,699.316 588.823,716.602 589.382,702.733 589.941,704.348 590.5,720.307 591.06,721.355 591.619,720.264 592.178,720.886 592.737,689.661 593.297,687.08 593.856,651.808 594.415,641.334 594.974,625.35 595.534,646.156 596.093,614.27 596.652,621.412 597.211,625.796 597.771,645.346 598.33,646.835 598.889,647.322 599.448,634.999 600.008,636.69 600.567,640.163 601.126,626.398 601.685,615.741 602.245,603.172 602.804,628.659 603.363,618.804 603.922,590.647 604.482,581.961 605.041,590.519 605.6,579.836 606.159,603.013 606.719,626.22 607.278,648.024 607.837,668.76 608.396,717.2 608.956,731.946 609.515,717.778 610.074,700.797 610.633,732.248 611.193,729.55 611.752,697.502 612.311,711.975 612.87,713.671 613.43,712.087 613.989,714.184 614.548,715.34 615.107,733.585 615.667,715.62 616.226,734.913 616.785,729.983 617.344,729.387 617.904,728.936 618.463,728.963 619.022,727.677 619.581,743.641 620.141,741.666 620.7,724.313 621.259,738.374 621.818,722.952 622.378,722.606 622.937,705.146 623.496,720.825 624.055,735.705 624.615,748.799 625.174,733.332 625.733,731.085 626.292,748.482 626.852,748.502 627.411,779.899 627.97,793.009 628.529,769.386 629.089,716.605 629.648,717.618 630.207,715.426 630.766,699.903 631.326,685.098 631.885,685.112 632.444,699.866 633.003,684.589 633.563,668.594 634.122,703.895 634.681,703.225 635.24,690.13 635.8,674.291 636.359,675.028 636.918,707.252 637.477,721.718 638.037,734.202 638.596,732.765 639.155,747.469 639.714,733.734 640.274,748.003 640.833,714.597 641.392,717.6 641.951,718.833 642.511,718.668 643.07,719.031 643.629,699.381 644.188,666.176 644.748,683.152 645.307,682.538 645.866,715.319 646.425,714.652 646.985,746.649 647.544,726.048 648.103,705.984 648.662,705.313 649.222,724.632 649.781,711.135 650.34,691.936 650.899,691.421 651.459,677.941 652.018,681.306 652.577,682.156 653.136,697.762 653.696,713.62 654.255,726.368 654.814,739.98 655.373,722.619 655.933,688.528 656.492,689.742 657.051,671.586 657.61,669.869 658.17,667.562 658.729,698.525 659.288,713.763 659.847,698.497 660.407,694.15 660.966,743.962 661.525,726.682 662.084,692.994 662.644,708.54 663.203,707.793 663.762,737.891 664.321,722.4 664.881,716.863 665.44,732.892 665.999,722.075 666.558,718.508 667.118,716.261 667.677,730.053 668.236,745.023 668.795,741.89 669.355,789.803 669.914,771.756 670.473,768.154 671.032,747.43 671.592,790.889 672.151,770.392 672.71,750.788 673.269,763.033 673.829,746.03 674.388,727.328 674.947,708.533 675.506,704.038 676.066,689.77 676.625,708.174 677.184,673.773 677.743,672.42 678.303,640.789 678.862,645.683 679.421,677.317 679.981,664.12 680.54,679.329 681.099,731.445 681.658,731.58 682.218,726.075 682.777,754.684 683.336,754.804 683.895,717.584 684.455,702.476 685.014,716.068 685.573,717.243 686.132,701.218 686.692,718.506 687.251,716.09 687.81,696.13 688.369,714.921 688.929,730.902 689.488,681.861 690.047,681.466 690.606,683.807 691.166,671.395 691.725,671.132 692.284,691.037 692.843,692.293 693.403,712.004 693.962,710.106 694.521,739.71 695.08,738.563 695.64,719.269 696.199,715.576 696.758,727.741 697.317,744.527 697.877,773.327 698.436,784.174 698.995,761.748 699.554,758.101 700.114,754.101 700.673,767.725 701.232,796.45 701.791,773.024 702.351,735.274 702.91,729.766 703.469,661.719 704.028,663.139 704.588,664.649 705.147,695.828 705.706,681.735 706.265,667.838 706.825,674.336 707.384,692.714 707.943,695.761 708.502,697.316 709.062,679.318 709.621,709.538 710.18,727.529 710.739,708.815 711.299,708.329 711.858,706.606 712.417,722.683 712.976,705.389 713.536,723.516 714.095,725.685 714.654,729.416 715.213,745.678 715.773,725.303 716.332,720.468 716.891,717.995 717.45,734.421 718.01,747.692 718.569,748.298 719.128,760.183 719.687,773.846 720.247,787.834 720.806,748.822 721.365,745.888 721.924,727.566 722.484,741.281 723.043,739.8 723.602,734.462 724.161,713.517 724.721,679.972 725.28,679.895 725.839,664.684 726.398,703.496 726.958,717.764 727.517,732.45 728.076,699.52 728.635,716.117 729.195,744.914 729.754,757.277 730.313,756.665 730.872,788.293 731.432,817.171 731.991,780.416 732.55,779.217 733.109,754.959 733.669,734.868 734.228,731.51 734.787,774.72 735.346,770.242 735.906,768.598 736.465,766.252 737.024,763.584 737.583,774.485 738.143,752.718 738.702,734.794 739.261,733.337 739.82,733.82 740.38,728.067 740.939,675.522 741.498,675.241 742.057,674.636 742.617,661.754 743.176,681.046 743.735,646.958 744.294,649.988 744.854,688.71 745.413,689.444 745.972,720.645 746.531,686.119 747.091,700.883 747.65,716.529 748.209,731.119 748.768,746.348 749.328,730.689 749.887,727.038 750.446,708.194 751.005,738.962 751.565,739.349 752.124,720.446 752.683,721.832 753.242,684.997 753.802,684.104 754.361,703.377 754.92,700.019 755.479,715.667 756.039,699.843 756.598,717 757.157,747.274 757.716,745.973 758.276,694.886 758.835,711.679 759.394,729.36 759.953,727.224 760.513,711.528 761.072,729.458 761.631,758.329 762.19,733.105 762.75,780.687 763.309,770.776 763.868,718.822 764.427,732.534 764.987,718.331 765.546,685.697 766.105,700.045 766.664,683.04 767.224,686.848 767.783,690.875 768.342,676.813 768.901,692.3 769.461,707.565 770.02,692.929 770.579,658.508 771.138,678.361 771.698,680.748 772.257,665.907 772.816,679.144 773.375,707.893 773.935,692.759 774.494,704.915 775.053,723.854 775.612,721.049 776.172,687.881 776.731,673.003 777.29,627.071 777.849,626.532 778.409,629.149 778.968,629.326 779.527,631.127 780.086,632.527 780.646,653.931 781.205,689.536 781.764,724.774 782.323,707.677 782.883,721.152 783.442,751.189 784.001,813.685 784.56,792.971 785.12,836.348 785.679,795.31 786.238,806.075 786.797,812.456 787.357,806.801 787.916,784.399 788.475,745.67 789.034,724.903 789.594,724.525 790.153,702.689 790.712,671.154 791.271,591.72 791.831,597.429 792.39,605.033 792.949,579.524 793.508,584.434 794.068,558.175 794.627,515.688 795.186,558.431 795.745,579.471 796.305,583.183 796.864,594.144 797.423,567.848 797.982,574.171 798.542,596.163 799.101,586.302 799.66,624.111 800.219,593.018 800.779,598.655 801.338,587.092 801.897,576.731 802.456,599.969 803.016,587.44 803.575,576.899 804.134,616.779 804.693,602.894 805.253,593.537 805.812,596.726 806.371,618.813 806.931,637.825 807.49,640.437 808.049,642.549 808.608,631.009 809.168,634.371 809.727,620.475 810.286,595.483 810.845,599.662 811.405,621.33 811.964,625.602 812.523,632.436 813.082,587.58 813.642,575.202 814.201,581.564 814.76,604.812 815.319,589.961 815.879,614.871 816.438,618.94 816.997,639.607 817.556,675.677 818.116,660.132 818.675,647.879 819.234,663.441 819.793,665.332 820.353,664.786 820.912,650.92 821.471,687.836 822.03,691.885 822.59,679.021 823.149,679.7 823.708,728.537 824.267,726.109 824.827,725.235 825.386,740.431 825.945,749.831 826.504,778.688 827.064,787.647 827.623,847.566 828.182,852.404 828.741,812.498 829.301,789.977 829.86,733.215 830.419,713.756 830.978,665.304 831.538,680.289 832.097,680.03 832.656,710.402 833.215,711.671 833.775,695.579 834.334,708.936 834.893,706.092 835.452,703.591 836.012,703.262 836.571,684.857 837.13,650.292 837.689,670.034 838.249,640.894 838.808,640.521 839.367,645.224 839.926,642.326 840.486,642.129 841.045,694.659 841.604,695.583 842.163,698.138 842.723,713.246 843.282,680.261 843.841,662.2 844.4,695.372 844.96,692.942 845.519,740.055 846.078,783.996 846.637,762.069 847.197,776.185 847.756,788.652 848.315,815.887 848.874,808.056 849.434,818.933 849.993,799.145 850.552,807.078 851.111,798.746 851.671,778.033 852.23,775.191 852.789,736.878 853.348,735.378 853.908,696.454 854.467,697.212 855.026,697.777 855.585,650.269 856.145,652.533 856.704,638.011 857.263,672.822 857.822,691.05 858.382,659.484 858.941,694.849 859.5,711.181 860.059,711.338 860.619,726.381 861.178,742.206 861.737,740.257 862.296,768.2 862.856,732.593 863.415,733.989 863.974,746.28 864.533,691.613 865.093,675.277 865.652,691.92 866.211,657.992 866.77,676.773 867.33,708.032 867.889,688.359 868.448,671.483 869.007,684.686 869.567,688.364 870.126,720.92 870.685,719.152 871.244,701.056 871.804,666.819 872.363,682.913 872.922,700.876 873.481,714.776 874.041,699.056 874.6,679.852 875.159,709.386 875.718,710.661 876.278,658.544 876.837,661.578 877.396,662.101 877.955,645.45 878.515,644.533 879.074,632.867 879.633,635.981 880.192,655.522 880.752,690.391 881.311,674.433 881.87,691.06 882.429,689.607 882.989,707.269 883.548,705.714 884.107,706.307 884.666,673.508 885.226,654.129 885.785,658.143 886.344,642.139 886.903,659.198 887.463,692.73 888.022,695.084 888.581,710.234 889.14,693.174 889.7,721.528 890.259,721.382 890.818,685.455 891.377,686.262 891.937,699.776 892.496,729.464 893.055,743.274 893.614,755.385 894.174,799.658 894.733,759.222 895.292,740.255 895.851,738.201 896.411,720.993 896.97,720.162 897.529,703.53 898.088,690.603 898.648,693.39 899.207,677.896 899.766,711.797 900.325,695.698 900.885,677.504 901.444,665.458 902.003,682.685 902.562,717.829 903.122,732.206 903.681,729.044 904.24,772.152 904.799,752.946 905.359,749.497 905.918,760.787 906.477,758.913 907.036,772.022 907.596,797.042 908.155,806.979 908.714,785.145 909.273,779.874 909.833,741.448 910.392,756.53 910.951,736.5 911.51,719.365 912.07,698.958 912.629,680.848 913.188,629.332 913.747,646.591 914.307,632.197 914.866,618.669 915.425,609.693 915.984,614.226 916.544,604.459 917.103,608.47 917.662,596.406 918.221,589.474 918.781,614.403 919.34,602.798 919.899,654.448 920.458,639.125 921.018,643.784 921.577,663.903 922.136,643.312 922.695,642.317 923.255,628.94 923.814,649.225 924.373,653.276 924.932,671.121 925.492,720.217 926.051,735.305 926.61,783.944 927.169,796.326 927.729,790.531 928.288,767.723 928.847,710.814 929.406,692.908 929.966,693.656 930.525,696.398 931.084,695.513 931.644,663.225 932.203,648.95 932.762,653.304 933.321,653.654 933.881,636.727 934.44,656.48 934.999,656.384 935.558,657.382 936.118,656.736 936.677,676.039 937.236,643.822 937.795,630.266 938.355,635.072 938.914,619.661 939.473,604.886 940.032,605.186 940.592,608.776 941.151,616.268 941.71,615.771 942.269,603.566 942.829,611.375 943.388,596.672 943.947,617.477 944.506,624.276 945.066,630.626 945.625,635.453 946.184,606.558 946.743,626.095 947.303,660.909 947.862,662.638 948.421,668.67 948.98,651.214 949.54,656.064 950.099,671.067 950.658,707.095 951.217,725.673 951.777,737.733 952.336,716.489 952.895,754.775 953.454,718.215 954.014,714.493 954.573,695.26 955.132,695.623 955.691,679.714 956.251,681.601 956.81,665.995 957.369,696.354 957.928,663.749 958.488,632.982 959.047,635.538 959.606,587.702 960.165,608.038 960.725,594.991 961.284,631.89 961.843,602.793 962.402,593.123 962.962,598.612 963.521,604.705 964.08,624.353 964.639,598.066 965.199,602.854 965.758,623.222 966.317,624.692 966.876,644.39 967.436,660.186 967.995,674.761 968.554,673.917 969.113,694.082 969.673,711.33 970.232,722.99 970.791,721.889 971.35,749.903 971.91,763.462 972.469,774.032 973.028,738.119 973.587,703.163 974.147,687.017 974.706,685.762 975.265,702.114 975.824,716.034 976.384,731.957 976.943,712.191 977.502,692.834 978.061,706.739 978.621,703.989 979.18,689.365 979.739,689.812 980.298,688.674 980.858,670.952 981.417,690.755 981.976,655.8 982.535,673.657 983.095,694.081 983.654,691.106 984.213,708.088 984.772,723.649 985.332,723.921 985.891,724.221 986.45,757.44 987.009,799.75 987.569,794.727 988.128,773.991 988.687,817.954 989.246,814.267 989.806,776.863 990.365,834.02 990.924,841.995 991.483,833.433 992.043,808.05 992.602,800.459 993.161,809.617 993.72,835.088 994.28,778.529 994.839,784.832 995.398,763.211 995.957,773.915 996.517,737.492 997.076,782.585 997.635,777.603 998.194,756.111 998.754,736.618 999.313,747.289 999.872,744.005 1000.43,756.17 1000.99,737.601 1001.55,719.605 1002.11,718.862 1002.67,682.352 1003.23,666.295 1003.79,681.946 1004.35,666.927 1004.91,648.92 1005.46,661.81 1006.02,694.892 1006.58,707.557 1007.14,722.837 1007.7,686.28 1008.26,700.233 1008.82,683.054 1009.38,665.691 1009.94,635.282 1010.5,667.891 1011.06,670.388 1011.62,671.133 1012.18,652.273 1012.73,605.404 1013.29,608.55 1013.85,608.296 1014.41,629.308 1014.97,613.865 1015.53,582.887 1016.09,556.101 1016.65,565.326 1017.21,574.821 1017.77,583.131 1018.33,607.73 1018.89,615.656 1019.45,634.436 1020.01,622.698 1020.56,644.455 1021.12,664.772 1021.68,665.8 1022.24,651.563 1022.8,622.624 1023.36,607.901 1023.92,628.819 1024.48,614.075 1025.04,634.091 1025.6,620.786 1026.16,639.606 1026.72,609.607 1027.28,630.786 1027.83,635.184 1028.39,655.162 1028.95,626.408 1029.51,630.797 1030.07,617.683 1030.63,607.589 1031.19,614.963 1031.75,651.448 1032.31,674.44 1032.87,639.716 1033.43,644.048 1033.99,647.498 1034.55,634.461 1035.1,641.446 1035.66,645.262 1036.22,648.397 1036.78,634.698 1037.34,650.667 1037.9,671.257 1038.46,657.276 1039.02,643.271 1039.58,650.621 1040.14,635.865 1040.7,638.385 1041.26,643.169 1041.82,648.464 1042.38,638.788 1042.93,658.106 1043.49,677.644 1044.05,679.014 1044.61,675.364 1045.17,676.696 1045.73,707.582 1046.29,721.86 1046.85,701.91 1047.41,665.056 1047.97,668.366 1048.53,668.783 1049.09,672.389 1049.65,687.519 1050.2,718.204 1050.76,744.822 1051.32,726.18 1051.88,729.761 1052.44,714.41 1053,697.804 1053.56,697.534 1054.12,679.398 1054.68,696.356 1055.24,712.566 1055.8,726.056 1056.36,722.733 1056.92,723.133 1057.48,703.197 1058.03,704.566 1058.59,702.874 1059.15,689.05 1059.71,686.698 1060.27,688.301 1060.83,688.87 1061.39,685.687 1061.95,703.648 1062.51,719.615 1063.07,670.832 1063.63,656.532 1064.19,673.355 1064.75,657.457 1065.3,706.242 1065.86,719.823 1066.42,701.995 1066.98,718.583 1067.54,748.87 1068.1,742.791 1068.66,741.297 1069.22,726.386 1069.78,741.905 1070.34,739.494 1070.9,767.344 1071.46,746.51 1072.02,743.256 1072.57,741.482 1073.13,706.309 1073.69,706.825 1074.25,718.823 1074.81,684.161 1075.37,656.747 1075.93,708.862 1076.49,692.696 1077.05,674.486 1077.61,641.544 1078.17,643.226 1078.73,661.21 1079.29,661.185 1079.85,699.536 1080.4,698.165 1080.96,715.348 1081.52,698.302 1082.08,714.868 1082.64,715.082 1083.2,728.668 1083.76,743.802 1084.32,759.283 1084.88,754.595 1085.44,732.394 1086,714.52 1086.56,714.221 1087.12,713.939 1087.67,715.191 1088.23,680.24 1088.79,696.085 1089.35,699.187 1089.91,714.13 1090.47,728.42 1091.03,679.757 1091.59,684.673 1092.15,651.856 1092.71,637.952 1093.27,657.584 1093.83,658.174 1094.39,673.569 1094.94,678.594 1095.5,674.421 1096.06,661.814 1096.62,680.195 1097.18,683.876 1097.74,681.321 1098.3,663.642 1098.86,678.16 1099.42,713.954 1099.98,711.998 1100.54,712.343 1101.1,711.551 1101.66,726.123 1102.22,721.057 1102.77,735.954 1103.33,735.736 1103.89,731.209 1104.45,730.134 1105.01,712.303 1105.57,742.579 1106.13,721.771 1106.69,737.966 1107.25,702.465 1107.81,733.031 1108.37,745.663 1108.93,770.764 1109.49,766.611 1110.04,758.827 1110.6,753.256 1111.16,776.722 1111.72,768.087 1112.28,731.174 1112.84,744.878 1113.4,711.825 1113.96,711.032 1114.52,675.738 1115.08,674.418 1115.64,675.613 1116.2,708.971 1116.76,722.391 1117.31,705.75 1117.87,736.543 1118.43,733.032 1118.99,748.637 1119.55,744.925 1120.11,725.021 1120.67,704.349 1121.23,735.921 1121.79,716.064 1122.35,733.237 1122.91,729.041 1123.47,691.827 1124.03,691.543 1124.59,674.717 1125.14,723.45 1125.7,724.037 1126.26,735.569 1126.82,748.488 1127.38,779.489 1127.94,805.076 1128.5,794.411 1129.06,788.869 1129.62,765.963 1130.18,712.293 1130.74,720.794 1131.3,718.6 1131.86,713.865 1132.41,710.899 1132.97,695.913 1133.53,676.668 1134.09,661.496 1134.65,680.293 1135.21,644.914 1135.77,611.931 1136.33,616.361 1136.89,586.854 1137.45,625.061 1138.01,664.516 1138.57,649.88 1139.13,671.512 1139.68,671.429 1140.24,690.698 1140.8,645.648 1141.36,647.869 1141.92,636.757 1142.48,642.738 1143.04,644.177 1143.6,630.333 1144.16,664.514 1144.72,696.52 1145.28,711.811 1145.84,678.004 1146.4,659.704 1146.96,645.162 1147.51,630.071 1148.07,646.312 1148.63,632.354 1149.19,618.539 1149.75,603.278 1150.31,591.331 1150.87,611.805 1151.43,616.207 1151.99,602.508 1152.55,625.228 1153.11,595.916 1153.67,602.365 1154.23,571.821 1154.78,591.305 1155.34,615.228 1155.9,615.818 1156.46,587.721 1157.02,594.95 1157.58,598.383 1158.14,603.062 1158.7,592.436 1159.26,595.851 1159.82,618.06 1160.38,622.508 1160.94,607.571 1161.5,610.865 1162.05,613.1 1162.61,630.744 1163.17,604.939 1163.73,628.727 1164.29,647.011 1164.85,650.944 1165.41,669.113 1165.97,688.767 1166.53,710.114 1167.09,693.521 1167.65,675.08 1168.21,711.109 1168.77,711.394 1169.33,711.404 1169.88,692.906 1170.44,756.348 1171,719.982 1171.56,687.584 1172.12,701.66 1172.68,716.293 1173.24,713.794 1173.8,697.402 1174.36,698.334 1174.92,734.934 1175.48,749.654 1176.04,744.913 1176.6,758.357 1177.15,737.043 1177.71,717.65 1178.27,717.049 1178.83,744.711 1179.39,774.635 1179.95,757.896 1180.51,756.066 1181.07,749.485 1181.63,727.92 1182.19,738.937 1182.75,754.245 1183.31,717.655 1183.87,696.742 1184.43,682.086 1184.98,696.858 1185.54,678.25 1186.1,709.96 1186.66,691.944 1187.22,693.117 1187.78,708.68 1188.34,724.226 1188.9,702.459 1189.46,701.597 1190.02,701.756 1190.58,674.08 1191.14,676.916 1191.7,680.916 1192.25,665.637 1192.81,684.186 1193.37,668.441 1193.93,652.317 1194.49,655.971 1195.05,677.397 1195.61,676.635 1196.17,727.679 1196.73,700.121 1197.29,695.789 1197.85,720.431 1198.41,719.479 1198.97,732.186 1199.52,712.47 1200.08,743.56 1200.64,773.485 1201.2,769.853 1201.76,780.368 1202.32,825.089 1202.88,835.522 1203.44,811.503 1204,820.444 1204.56,784.323 1205.12,798.554 1205.68,822.343 1206.24,795.995 1206.8,805.81 1207.35,832.032 1207.91,868.776 1208.47,874.919 1209.03,881.955 1209.59,838.976 1210.15,814.531 1210.71,774.689 1211.27,752.192 1211.83,780.16 1212.39,730.215 1212.95,680.71 1213.51,677.707 1214.07,660.706 1214.62,649.09 1215.18,650.083 1215.74,622.072 1216.3,608.098 1216.86,562.881 1217.42,603.177 1217.98,585.157 1218.54,573.018 1219.1,608.967 1219.66,577.437 1220.22,565.3 1220.78,568.158 1221.34,610.607 1221.89,613.198 1222.45,615.693 1223.01,618.434 1223.57,640.06 1224.13,658.343 1224.69,660.109 1225.25,661.452 1225.81,644.146 1226.37,696.008 1226.93,663.342 1227.49,663.903 1228.05,645.455 1228.61,646.731 1229.17,680.082 1229.72,699.333 1230.28,699.18 1230.84,699.224 1231.4,718.214 1231.96,730.892 1232.52,728.94 1233.08,711.331 1233.64,729.573 1234.2,711.772 1234.76,691.378 1235.32,723.451 1235.88,723.847 1236.44,735.574 1236.99,715.782 1237.55,696.339 1238.11,694.873 1238.67,674.178 1239.23,675.101 1239.79,626.903 1240.35,594.504 1240.91,629.282 1241.47,629.021 1242.03,664.484 1242.59,711.162 1243.15,727.836 1243.71,679.367 1244.26,681.663 1244.82,662.69 1245.38,628.342 1245.94,645.921 1246.5,662.417 1247.06,648.563 1247.62,634.229 1248.18,684.737 1248.74,703.436 1249.3,672.492 1249.86,661.374 1250.42,662.565 1250.98,647.51 1251.54,631.703 1252.09,636.924 1252.65,624.044 1253.21,644.975 1253.77,631.135 1254.33,652.098 1254.89,620.102 1255.45,624.159 1256.01,641.035 1256.57,676.548 1257.13,661.331 1257.69,613.638 1258.25,620.287 1258.81,606.993 1259.36,611.709 1259.92,647.194 1260.48,649.457 1261.04,652.092 1261.6,637.423 1262.16,645.323 1262.72,645.815 1263.28,665.159 1263.84,727.792 1264.4,692.934 1264.96,677.991 1265.52,644.46 1266.08,648.086 1266.63,700.519 1267.19,716.623 1267.75,748.74 1268.31,699.339 1268.87,697.477 1269.43,664.053 1269.99,682.133 1270.55,700.831 1271.11,718.092 1271.67,719.526 1272.23,750.448 1272.79,762.2 1273.35,758.808 1273.91,738.933 1274.46,716.948 1275.02,746.784 1275.58,776.168 1276.14,787.175 1276.7,795.36 1277.26,805.793 1277.82,781.557 1278.38,743.979 1278.94,726.982 1279.5,725.034 1280.06,719.517 1280.62,748.534 1281.18,714.314 1281.73,711.695 1282.29,696.234 1282.85,678.423 1283.41,664.108 1283.97,699.127 1284.53,684.059 1285.09,699.325 1285.65,698.718 1286.21,699.766 1286.77,702.357 1287.33,670.683 1287.89,667.472 1288.45,619.882 1289,622.036 1289.56,622.123 1290.12,590.217 1290.68,594.454 1291.24,616.2 1291.8,619.96 1292.36,636.253 1292.92,643.307 1293.48,644.998 1294.04,680.195 1294.6,696.796 1295.16,711.486 1295.72,644.372 1296.28,629.027 1296.83,648.267 1297.39,614.853 1297.95,649.022 1298.51,634.928 1299.07,634.143 1299.63,633.3 1300.19,632.425 1300.75,570.528 1301.31,607.74 1301.87,595.968 1302.43,600.103 1302.99,641.702 1303.55,642.398 1304.1,664.336 1304.66,680.983 1305.22,698.955 1305.78,729.667 1306.34,776.553 1306.9,773.037 1307.46,783.758 1308.02,744.556 1308.58,739.918 1309.14,738.774 1309.7,703.172 1310.26,718.859 1310.82,714.5 1311.38,713.529 1311.93,744.796 1312.49,728.467 1313.05,774.304 1313.61,798.824 1314.17,806.591 1314.73,765.9 1315.29,746.916 1315.85,758.604 1316.41,786.265 1316.97,746.277 1317.53,743.88 1318.09,742.45 1318.65,706.561 1319.2,671.174 1319.76,673.249 1320.32,690.176 1320.88,703.375 1321.44,717.68 1322,667.424 1322.56,685.532 1323.12,686.237 1323.68,686.444 1324.24,674.043 1324.8,676.386 1325.36,661.907 1325.92,646.466 1326.47,597.902 1327.03,536.861 1327.59,557.983 1328.15,598.947 1328.71,584.335 1329.27,621.968 1329.83,592.448 1330.39,599.008 1330.95,606.486 1331.51,605.766 1332.07,589.154 1332.63,577.012 1333.19,614.51 1333.75,614.649 1334.3,633.024 1334.86,633.819 1335.42,655.741 1335.98,641.434 1336.54,646.025 1337.1,631.491 1337.66,617.454 1338.22,622.675 1338.78,627.317 1339.34,642.635 1339.9,646.656 1340.46,650.057 1341.02,648.915 1341.57,634.274 1342.13,637.771 1342.69,676.162 1343.25,695.15 1343.81,693.48 1344.37,674.499 1344.93,676.058 1345.49,710.756 1346.05,694.033 1346.61,776.499 1347.17,792.428 1347.73,806.564 1348.29,767.384 1348.84,761.588 1349.4,759.156 1349.96,753.843 1350.52,784.007 1351.08,794.643 1351.64,799.729 1352.2,814.43 1352.76,789.96 1353.32,769.364 1353.88,765.431 1354.44,762.299 1355,757.653 1355.56,752.047 1356.12,766.127 1356.67,745.706 1357.23,713.637 1357.79,693.903 1358.35,708.441 1358.91,707.358 1359.47,673.093 1360.03,672.939 1360.59,705.658 1361.15,688.025 1361.71,686.509 1362.27,638.015 1362.83,640.581 1363.39,608.464 1363.94,643.61 1364.5,628.788 1365.06,643.789 1365.62,648.903 1366.18,651.816 1366.74,636.609 1367.3,671.02 1367.86,688.549 1368.42,684.887 1368.98,701.078 1369.54,702.015 1370.1,698.636 1370.66,749.507 1371.21,757.816 1371.77,770.249 1372.33,765.497 1372.89,742.709 1373.45,707.53 1374.01,704.948 1374.57,737.582 1375.13,717.197 1375.69,719.447 1376.25,735.741 1376.81,766.728 1377.37,762.132 1377.93,751.892 1378.49,763.355 1379.04,743.268 1379.6,745.389 1380.16,711.585 1380.72,726.129 1381.28,706.434 1381.84,676.345 1382.4,642.775 1382.96,679.547 1383.52,661.579 1384.08,649.018 1384.64,669.278 1385.2,655.208 1385.76,624.785 1386.31,596.791 1386.87,604.712 1387.43,611.015 1387.99,645.5 1388.55,581.591 1389.11,620.787 1389.67,624.697 1390.23,627.901 1390.79,597.772 1391.35,598.97 1391.91,618.935 1392.47,639.132 1393.03,691.752 1393.58,690.508 1394.14,669.45 1394.7,670.577 1395.26,671.961 1395.82,674.3 1396.38,661.075 1396.94,677.039 1397.5,690.761 1398.06,692.438 1398.62,643.051 1399.18,661.084 1399.74,629.429 1400.3,614.51 1400.86,636.726 1401.41,670.429 1401.97,672.525 1402.53,690.008 1403.09,659.519 1403.65,664.032 1404.21,680.979 1404.77,694.83 1405.33,711.162 1405.89,692.856 1406.45,690.881 1407.01,707.368 1407.57,706.497 1408.13,709.204 1408.68,727.531 1409.24,708.098 1409.8,754.56 1410.36,765.429 1410.92,761.417 1411.48,724.394 1412.04,704.662 1412.6,673.329 1413.16,625.52 1413.72,647.034 1414.28,664.111 1414.84,663.81 1415.4,677.89 1415.95,666.634 1416.51,669.133 1417.07,686.635 1417.63,686.546 1418.19,668.429 1418.75,673.696 1419.31,691.793 1419.87,689.971 1420.43,674.295 1420.99,676.682 1421.55,658.784 1422.11,646.221 1422.67,663.382 1423.23,648.338 1423.78,648.694 1424.34,619.851 1424.9,639.167 1425.46,609.757 1426.02,596.402 1426.58,617.429 1427.14,653.547 1427.7,673.024 1428.26,672.361 1428.82,724.944 1429.38,708.837 1429.94,721.446 1430.5,704.42 1431.05,687.578 1431.61,702.087 1432.17,700.884 1432.73,717.423 1433.29,745.555 1433.85,726.518 1434.41,723.461 1434.97,675.863 1435.53,661.434 1436.09,629.705 1436.65,632.706 1437.21,653.419 1437.77,637.191 1438.33,622.233 1438.88,607.193 1439.44,610.354 1440,596.03 1440.56,601.008 1441.12,623.537 1441.68,628.525 1442.24,647.909 1442.8,629.786 1443.36,697.447 1443.92,714.876 1444.48,717.142 1445.04,717.464 1445.6,699.759 1446.15,711.059 1446.71,697.484 1447.27,695.841 1447.83,679.283 1448.39,681.859 1448.95,697.267 1449.51,679.79 1450.07,682.148 1450.63,727.461 1451.19,692.867 1451.75,690.507 1452.31,640.133 1452.87,641.433 1453.42,648.419 1453.98,649.919 1454.54,650.735 1455.1,647.453 1455.66,630.107 1456.22,629.06 1456.78,682.464 1457.34,667.579 1457.9,667.787 1458.46,686.118 1459.02,685.592 1459.58,669.472 1460.14,702.791 1460.7,703.315 1461.25,669.499 1461.81,690.152 1462.37,676.49 1462.93,679.757 1463.49,680.847 1464.05,680.919 1464.61,696.05 1465.17,726.979 1465.73,706.649 1466.29,787.343 1466.85,767.208 1467.41,760.551 1467.97,755.711 1468.52,714.545 1469.08,709.338 1469.64,740.528 1470.2,686.17 1470.76,672.059 1471.32,654.87 1471.88,669.568 1472.44,672.79 1473,656.749 1473.56,657.578 1474.12,610.897 1474.68,630.669 1475.24,584.136 1475.79,589.35 1476.35,594.86 1476.91,570.187 1477.47,560.341 1478.03,597.383 1478.59,584.649 1479.15,605.809 1479.71,578.668 1480.27,566.867 1480.83,572.666 1481.39,562.431 1481.95,601.255 1482.51,636.478 1483.07,639.775 1483.62,658.6 1484.18,677.19 1484.74,665.108 1485.3,685.246 1485.86,665.961 1486.42,694.938 1486.98,698.121 1487.54,697.493 1488.1,727.349 1488.66,757.088 1489.22,734.45 1489.78,700.739 1490.34,669.269 1490.89,621.751 1491.45,593.62 1492.01,614.272 1492.57,619.478 1493.13,577.841 1493.69,628.431 1494.25,676.672 1494.81,694.414 1495.37,710.016 1495.93,696.707 1496.49,680.889 1497.05,663.463 1497.61,646.657 1498.16,668.322 1498.72,716.145 1499.28,730.976 1499.84,728.978 1500.4,709.452 1500.96,708.559 1501.52,690.096 1502.08,722.782 1502.64,689.7 1503.2,670.831 1503.76,686.836 1504.32,666.941 1504.88,665.179 1505.44,665.818 1505.99,714.232 1506.55,682.931 1507.11,698.767 1507.67,687.058 1508.23,670.386 1508.79,669.998 1509.35,675.298 1509.91,725.103 1510.47,708.395 1511.03,692.712 1511.59,675.527 1512.15,661.147 1512.71,632.317 1513.26,633.489 1513.82,656.436 1514.38,655.481 1514.94,690.303 1515.5,687.402 1516.06,687.089 1516.62,668.906 1517.18,685.138 1517.74,669.469 1518.3,684.976 1518.86,695.147 1519.42,708.538 1519.98,658.864 1520.53,664.444 1521.09,678.984 1521.65,683.12 1522.21,701.112 1522.77,699.802 1523.33,700.848 1523.89,717.057 1524.45,729.851 1525.01,706.557 1525.57,722.949 1526.13,704.703 1526.69,720.527 1527.25,715.673 1527.81,699.23 1528.36,684.794 1528.92,671.355 1529.48,656.756 1530.04,674.094 1530.6,662.694 1531.16,681.187 1531.72,713.304 1532.28,711.279 1532.84,680.761 1533.4,681.069 1533.96,728.765 1534.52,728.743 1535.08,740.414 1535.63,705.716 1536.19,701.554 1536.75,719.403 1537.31,735.729 1537.87,729.974 1538.43,725.548 1538.99,738.854 1539.55,734.95 1540.11,719.484 1540.67,716.214 1541.23,726.356 1541.79,723.698 1542.35,735.572 1542.9,745.843 1543.46,744.405 1544.02,741.982 1544.58,738.389 1545.14,719.384 1545.7,749.62 1546.26,730.587 1546.82,774.42 1547.38,786.014 1547.94,764.496 1548.5,775.757 1549.06,774.747 1549.62,818.311 1550.18,823.734 1550.73,815.634 1551.29,820.648 1551.85,813.652 1552.41,773.595 1552.97,767.459 1553.53,763.792 1554.09,699.446 1554.65,718.546 1555.21,767.231 1555.77,744.949 1556.33,708.756 1556.89,705.805 1557.45,704.851 1558,704.788 1558.56,670.091 1559.12,698.137 1559.68,695.784 1560.24,696.276 1560.8,694.272 1561.36,660.949 1561.92,652.819 1562.48,670.629 1563.04,685.467 1563.6,682.832 1564.16,633.767 1564.72,617.287 1565.28,669.497 1565.83,686.511 1566.39,686.976 1566.95,655.131 1567.51,654.009 1568.07,653.399 1568.63,669.76 1569.19,652.876 1569.75,669.229 1570.31,655.151 1570.87,689.383 1571.43,709.147 1571.99,691.682 1572.55,627.188 1573.1,629.029 1573.66,631.723 1574.22,635.518 1574.78,654.433 1575.34,673.036 1575.9,659.671 1576.46,662.889 1577.02,650.469 1577.58,638.67 1578.14,658.537 1578.7,674.471 1579.26,676.108 1579.82,656.957 1580.37,690.827 1580.93,660.823 1581.49,661.928 1582.05,663.505 1582.61,634.804 1583.17,655.993 1583.73,638.826 1584.29,672.253 1584.85,738.4 1585.41,718.494 1585.97,697.968 1586.53,715.053 1587.09,664.485 1587.65,684.027 1588.2,686.443 1588.76,655.077 1589.32,639.626 1589.88,642.875 1590.44,614.93 1591,634.199 1591.56,652.192 1592.12,655.546 1592.68,689.574 1593.24,690.43 1593.8,708.48 1594.36,723.03 1594.92,716.133 1595.47,714.744 1596.03,760.348 1596.59,741.268 1597.15,754.295 1597.71,768.326 1598.27,780.018 1598.83,792.153 1599.39,785.978 1599.95,779.8 1600.51,759.238 1601.07,756.489 1601.63,766.461 1602.19,713.013 1602.74,730.138 1603.3,713.404 1603.86,648.606 1604.42,650.095 1604.98,665.885 1605.54,617.167 1606.1,635.767 1606.66,623.982 1607.22,626.75 1607.78,597.854 1608.34,616.842 1608.9,636.486 1609.46,653.536 1610.02,639.489 1610.57,642.466 1611.13,657.662 1611.69,706.592 1612.25,733.692 1612.81,732.271 1613.37,748.127 1613.93,763.167 1614.49,792.091 1615.05,769.218 1615.61,765.786 1616.17,761.155 1616.73,788.069 1617.29,799.687 1617.84,777.393 1618.4,786.64 1618.96,780.536 1619.52,793.121 1620.08,785.41 1620.64,776.508 1621.2,756.027 1621.76,787.183 1622.32,780.718 1622.88,775.345 1623.44,769.235 1624,747.966 1624.56,743.02 1625.11,738.159 1625.67,752.961 1626.23,735.804 1626.79,766.537 1627.35,729.443 1627.91,774.974 1628.47,737.54 1629.03,750.34 1629.59,715.794 1630.15,715.873 1630.71,727.059 1631.27,678.818 1631.83,714.209 1632.39,679.198 1632.94,679.59 1633.5,729.06 1634.06,711.941 1634.62,709.058 1635.18,722.813 1635.74,642.637 1636.3,645.461 1636.86,681.179 1637.42,663.353 1637.98,679.229 1638.54,676.946 1639.1,693.092 1639.66,660.208 1640.21,691.844 1640.77,675.169 1641.33,691.222 1641.89,722.98 1642.45,739.918 1643.01,756.989 1643.57,766.57 1644.13,732.317 1644.69,696.083 1645.25,679.801 1645.81,647.781 1646.37,666.326 1646.93,620.734 1647.48,621.19 1648.04,655.924 1648.6,627.523 1649.16,647.913 1649.72,596.53 1650.28,620.621 1650.84,611.379 1651.4,631.613 1651.96,601.627 1652.52,590.22 1653.08,581.508 1653.64,569.171 1654.2,588.387 1654.76,574.222 1655.31,595.62 1655.87,586.592 1656.43,558.217 1656.99,578.715 1657.55,582.9 1658.11,572.409 1658.67,591.973 1659.23,564.972 1659.79,551.743 1660.35,542.632 1660.91,568.053 1661.47,573.529 1662.03,580.45 1662.58,581.163 1663.14,569.55 1663.7,606.746 1664.26,596.042 1664.82,602.098 1665.38,642.84 1665.94,645.074 1666.5,664.598 1667.06,681.826 1667.62,649.277 1668.18,648.392 1668.74,631.901 1669.3,685.321 1669.85,685.57 1670.41,750.862 1670.97,749.711 1671.53,778.845 1672.09,823.898 1672.65,834.127 1673.21,793.07 1673.77,738.735 1674.33,769.214 1674.89,734.169 1675.45,731.197 1676.01,739.942 1676.57,737.397 1677.13,702.654 1677.68,695.591 1678.24,676.994 1678.8,662.967 1679.36,628.1 1679.92,600.401 1680.48,636.395 1681.04,670.557 1681.6,690.147 1682.16,687.524 1682.72,670.392 1683.28,686.92 1683.84,668.93 1684.4,671.239 1684.95,640.172 1685.51,638.29 1686.07,627.345 1686.63,626.33 1687.19,627.922 1687.75,632.171 1688.31,620.021 1688.87,592.569 1689.43,614.067 1689.99,616.586 1690.55,651.938 1691.11,638.234 1691.67,604.197 1692.23,609.877 1692.78,597.439 1693.34,598.174 1693.9,636.983 1694.46,691.356 1695.02,710.503 1695.58,729 1696.14,725.85 1696.7,720.389 1697.26,735.427 1697.82,733.463 1698.38,732.369 1698.94,717.097 1699.5,715.943 1700.05,717.535 1700.61,703.904 1701.17,718.636 1701.73,705.378 1702.29,703.539 1702.85,721.766 1703.41,685.688 1703.97,700.007 1704.53,763.815 1705.09,745.659 1705.65,692.794 1706.21,709.742 1706.77,739.027 1707.32,755.051 1707.88,717.768 1708.44,697.879 1709,692.387 1709.56,707.774 1710.12,708.374 1710.68,708.643 1711.24,709.776 1711.8,690.301 1712.36,674.813 1712.92,673.412 1713.48,659.339 1714.04,660.833 1714.6,646.874 1715.15,632.865 1715.71,654.092 1716.27,624.984 1716.83,630.026 1717.39,600.379 1717.95,591.311 1718.51,611.724 1719.07,579.081 1719.63,589.162 1720.19,560.421 1720.75,551.09 1721.31,523.562 1721.87,532.078 1722.42,574.894 1722.98,613.92 1723.54,633.199 1724.1,637.886 1724.66,621.681 1725.22,638.258 1725.78,645.078 1726.34,646.239 1726.9,629.126 1727.46,650.151 1728.02,633.264 1728.58,622.349 1729.14,629.834 1729.69,629.942 1730.25,634.297 1730.81,639 1731.37,629.677 1731.93,635.252 1732.49,655.053 1733.05,656.648 1733.61,658.561 1734.17,658.315 1734.73,662.562 1735.29,710.685 1735.85,679.225 1736.41,710.787 1736.97,712.624 1737.52,697.7 1738.08,679.694 1738.64,695.574 1739.2,659.355 1739.76,645.864 1740.32,633.877 1740.88,636.502 1741.44,656.327 1742,661.731 1742.56,645.8 1743.12,628.372 1743.68,627.21 1744.24,665.235 1744.79,650.894 1745.35,654.303 1745.91,670.349 1746.47,690.863 1747.03,672.704 1747.59,689.726 1748.15,704.295 1748.71,714.771 1749.27,700.369 1749.83,700.711 1750.39,666.026 1750.95,651.646 1751.51,687.316 1752.06,703.7 1752.62,702.652 1753.18,668.455 1753.74,705.498 1754.3,702.116 1754.86,653.459 1755.42,670.54 1755.98,717.164 1756.54,711.367 1757.1,723.485 1757.66,704.396 1758.22,714.895 1758.78,666.018 1759.34,653.101 1759.89,669.789 1760.45,651.684 1761.01,654.375 1761.57,655.102 1762.13,672.188 1762.69,691.507 1763.25,706.831 1763.81,704.776 1764.37,703.094 1764.93,703.305 1765.49,700.944 1766.05,699.781 1766.61,731.093 1767.16,730.373 1767.72,711.337 1768.28,706.809 1768.84,709.997 1769.4,728.894 1769.96,759.726 1770.52,753.598 1771.08,801.876 1771.64,797.493 1772.2,775.675 1772.76,788.48 1773.32,766.782 1773.88,762.33 1774.43,773.033 1774.99,769.348 1775.55,750.348 1776.11,747.998 1776.67,746.217 1777.23,711.753 1777.79,727.506 1778.35,693.392 1778.91,692.457 1779.47,690.114 1780.03,705.662 1780.59,689.98 1781.15,657.887 1781.71,658.752 1782.26,645.437 1782.82,651.348 1783.38,650.958 1783.94,653.557 1784.5,671.114 1785.06,671.657 1785.62,720.777 1786.18,700.945 1786.74,667.194 1787.3,651.205 1787.86,681.041 1788.42,680.396 1788.98,693.957 1789.53,695.036 1790.09,725.896 1790.65,725.008 1791.21,740.823 1791.77,739.968 1792.33,772.175 1792.89,737.898 1793.45,721.305 1794.01,719.037 1794.57,650.646 1795.13,650.538 1795.69,653.27 1796.25,674.116 1796.8,689.997 1797.36,688.01 1797.92,654.698 1798.48,640.54 1799.04,663.245 1799.6,647.154 1800.16,631.218 1800.72,640.05 1801.28,629.476 1801.84,628.091 1802.4,612.108 1802.96,661.703 1803.52,664.957 1804.08,664.517 1804.63,665.255 1805.19,665.173 1805.75,648.894 1806.31,618.366 1806.87,586.701 1807.43,607.527 1807.99,613.721 1808.55,586.737 1809.11,556.741 1809.67,568.212 1810.23,575.973 1810.79,563.091 1811.35,535.153 1811.9,542.636 1812.46,578.405 1813.02,600.298 1813.58,588.208 1814.14,625.728 1814.7,644.851 1815.26,629.346 1815.82,635.893 1816.38,652.611 1816.94,674.457 1817.5,693.093 1818.06,679.571 1818.62,695.022 1819.18,693.651 1819.73,705.748 1820.29,688.789 1820.85,673.414 1821.41,672.575 1821.97,676.449 1822.53,678.502 1823.09,696.324 1823.65,714.222 1824.21,730.831 1824.77,758.473 1825.33,773.806 1825.89,802.621 1826.45,781.104 1827,777.019 1827.56,758.859 1828.12,788 1828.68,832.772 1829.24,841.45 1829.8,800.109 1830.36,776.019 1830.92,771.352 1831.48,750.391 1832.04,778.166 1832.6,790.352 1833.16,800.684 1833.72,797.534 1834.27,791.843 1834.83,789.7 1835.39,803.066 1835.95,782.815 1836.51,812.087 1837.07,776.551 1837.63,790.415 1838.19,784.836 \"/>\n<path clip-path=\"url(#clip473)\" d=\"M720.247 691.01 L720.806 691.01 L721.365 691.01 L721.924 691.01 L722.484 691.01 L723.043 691.01 L723.602 691.01 L724.161 691.01 L724.721 691.01 L725.28 691.01 L725.839 691.01 L726.398 691.01 L726.958 691.01 L727.517 691.01 L728.076 691.01 L728.635 691.01 L729.195 691.01 L729.754 691.01 L730.313 691.01 L730.872 691.01 L731.432 691.01 L731.991 691.01 L732.55 691.01 L733.109 691.01 L733.669 691.01 L734.228 691.01 L734.787 691.01 L735.346 691.01 L735.906 691.01 L736.465 691.01 L737.024 691.01 L737.583 691.01 L738.143 691.01 L738.702 691.01 L739.261 691.01 L739.82 691.01 L740.38 691.01 L740.939 691.01 L741.498 691.01 L742.057 691.01 L742.617 691.01 L743.176 691.01 L743.735 691.01 L744.294 691.01 L744.854 691.01 L745.413 691.01 L745.972 691.01 L746.531 691.01 L747.091 691.01 L747.65 691.01 L748.209 691.01 L748.768 691.01 L749.328 691.01 L749.887 691.01 L750.446 691.01 L751.005 691.01 L751.565 691.01 L752.124 691.01 L752.683 691.01 L753.242 691.01 L753.802 691.01 L754.361 691.01 L754.92 691.01 L755.479 691.01 L756.039 691.01 L756.598 691.01 L757.157 691.01 L757.716 691.01 L758.276 691.01 L758.835 691.01 L759.394 691.01 L759.953 691.01 L760.513 691.01 L761.072 691.01 L761.631 691.01 L762.19 691.01 L762.75 691.01 L763.309 691.01 L763.868 691.01 L764.427 691.01 L764.987 691.01 L765.546 691.01 L766.105 691.01 L766.664 691.01 L767.224 691.01 L767.783 691.01 L768.342 691.01 L768.901 691.01 L769.461 691.01 L770.02 691.01 L770.579 691.01 L771.138 691.01 L771.698 691.01 L772.257 691.01 L772.816 691.01 L773.375 691.01 L773.935 691.01 L774.494 691.01 L775.053 691.01 L775.612 691.01 L776.172 691.01 L776.731 691.01 L777.29 691.01 L777.849 691.01 L778.409 691.01 L778.968 691.01 L779.527 691.01 L780.086 691.01 L780.646 691.01 L781.205 691.01 L781.764 691.01 L782.323 691.01 L782.883 691.01 L783.442 691.01 L784.001 691.01 L784.56 691.01 L785.12 691.01 L785.679 691.01 L786.238 691.01 L786.797 691.01 L787.357 691.01 L787.916 691.01 L788.475 691.01 L789.034 691.01 L789.594 691.01 L790.153 691.01 L790.712 691.01 L791.271 691.01 L791.831 691.01 L792.39 691.01 L792.949 691.01 L793.508 691.01 L794.068 691.01 L794.627 691.01 L795.186 691.01 L795.745 691.01 L796.305 691.01 L796.864 691.01 L797.423 691.01 L797.982 691.01 L798.542 691.01 L799.101 691.01 L799.66 691.01 L800.219 691.01 L800.779 691.01 L801.338 691.01 L801.897 691.01 L802.456 691.01 L803.016 691.01 L803.575 691.01 L804.134 691.01 L804.693 691.01 L805.253 691.01 L805.812 691.01 L806.371 691.01 L806.931 691.01 L807.49 691.01 L808.049 691.01 L808.608 691.01 L809.168 691.01 L809.727 691.01 L810.286 691.01 L810.845 691.01 L811.405 691.01 L811.964 691.01 L812.523 691.01 L813.082 691.01 L813.642 691.01 L814.201 691.01 L814.76 691.01 L815.319 691.01 L815.879 691.01 L816.438 691.01 L816.997 691.01 L817.556 691.01 L818.116 691.01 L818.675 691.01 L819.234 691.01 L819.793 691.01 L820.353 691.01 L820.912 691.01 L821.471 691.01 L822.03 691.01 L822.59 691.01 L823.149 691.01 L823.708 691.01 L824.267 691.01 L824.827 691.01 L825.386 691.01 L825.945 691.01 L826.504 691.01 L827.064 691.01 L827.623 691.01 L828.182 691.01 L828.741 691.01 L829.301 691.01 L829.86 691.01 L830.419 691.01 L830.978 691.01 L831.538 691.01 L832.097 691.01 L832.656 691.01 L833.215 691.01 L833.775 691.01 L834.334 691.01 L834.893 691.01 L835.452 691.01 L836.012 691.01 L836.571 691.01 L837.13 691.01 L837.689 691.01 L838.249 691.01 L838.808 691.01 L839.367 691.01 L839.926 691.01 L840.486 691.01 L841.045 691.01 L841.604 691.01 L842.163 691.01 L842.723 691.01 L843.282 691.01 L843.841 691.01 L844.4 691.01 L844.96 691.01 L845.519 691.01 L846.078 691.01 L846.637 691.01 L847.197 691.01 L847.756 691.01 L848.315 691.01 L848.874 691.01 L849.434 691.01 L849.993 691.01 L850.552 691.01 L851.111 691.01 L851.671 691.01 L852.23 691.01 L852.789 691.01 L853.348 691.01 L853.908 691.01 L854.467 691.01 L855.026 691.01 L855.585 691.01 L856.145 691.01 L856.704 691.01 L857.263 691.01 L857.822 691.01 L858.382 691.01 L858.941 691.01 L859.5 691.01 L860.059 691.01 L860.619 691.01 L861.178 691.01 L861.737 691.01 L862.296 691.01 L862.856 691.01 L863.415 691.01 L863.974 691.01 L864.533 691.01 L865.093 691.01 L865.652 691.01 L866.211 691.01 L866.77 691.01 L867.33 691.01 L867.889 691.01 L868.448 691.01 L869.007 691.01 L869.567 691.01 L870.126 691.01 L870.685 691.01 L871.244 691.01 L871.804 691.01 L872.363 691.01 L872.922 691.01 L873.481 691.01 L874.041 691.01 L874.6 691.01 L875.159 691.01 L875.718 691.01 L876.278 691.01 L876.837 691.01 L877.396 691.01 L877.955 691.01 L878.515 691.01 L879.074 691.01 L879.633 691.01 L880.192 691.01 L880.752 691.01 L881.311 691.01 L881.87 691.01 L882.429 691.01 L882.989 691.01 L883.548 691.01 L884.107 691.01 L884.666 691.01 L885.226 691.01 L885.785 691.01 L886.344 691.01 L886.903 691.01 L887.463 691.01 L888.022 691.01 L888.581 691.01 L889.14 691.01 L889.7 691.01 L890.259 691.01 L890.818 691.01 L891.377 691.01 L891.937 691.01 L892.496 691.01 L893.055 691.01 L893.614 691.01 L894.174 691.01 L894.733 691.01 L895.292 691.01 L895.851 691.01 L896.411 691.01 L896.97 691.01 L897.529 691.01 L898.088 691.01 L898.648 691.01 L899.207 691.01 L899.766 691.01 L900.325 691.01 L900.885 691.01 L901.444 691.01 L902.003 691.01 L902.562 691.01 L903.122 691.01 L903.681 691.01 L904.24 691.01 L904.799 691.01 L905.359 691.01 L905.918 691.01 L906.477 691.01 L907.036 691.01 L907.596 691.01 L908.155 691.01 L908.714 691.01 L909.273 691.01 L909.833 691.01 L910.392 691.01 L910.951 691.01 L911.51 691.01 L912.07 691.01 L912.629 691.01 L913.188 691.01 L913.747 691.01 L914.307 691.01 L914.866 691.01 L915.425 691.01 L915.984 691.01 L916.544 691.01 L917.103 691.01 L917.662 691.01 L918.221 691.01 L918.781 691.01 L919.34 691.01 L919.899 691.01 L920.458 691.01 L921.018 691.01 L921.577 691.01 L922.136 691.01 L922.695 691.01 L923.255 691.01 L923.814 691.01 L924.373 691.01 L924.932 691.01 L925.492 691.01 L926.051 691.01 L926.61 691.01 L927.169 691.01 L927.729 691.01 L928.288 691.01 L928.847 691.01 L929.406 691.01 L929.966 691.01 L930.525 691.01 L931.084 691.01 L931.644 691.01 L932.203 691.01 L932.762 691.01 L933.321 691.01 L933.881 691.01 L934.44 691.01 L934.999 691.01 L935.558 691.01 L936.118 691.01 L936.677 691.01 L937.236 691.01 L937.795 691.01 L938.355 691.01 L938.914 691.01 L939.473 691.01 L940.032 691.01 L940.592 691.01 L941.151 691.01 L941.71 691.01 L942.269 691.01 L942.829 691.01 L943.388 691.01 L943.947 691.01 L944.506 691.01 L945.066 691.01 L945.625 691.01 L946.184 691.01 L946.743 691.01 L947.303 691.01 L947.862 691.01 L948.421 691.01 L948.98 691.01 L949.54 691.01 L950.099 691.01 L950.658 691.01 L951.217 691.01 L951.777 691.01 L952.336 691.01 L952.895 691.01 L953.454 691.01 L954.014 691.01 L954.573 691.01 L955.132 691.01 L955.691 691.01 L956.251 691.01 L956.81 691.01 L957.369 691.01 L957.928 691.01 L958.488 691.01 L959.047 691.01 L959.606 691.01 L960.165 691.01 L960.725 691.01 L961.284 691.01 L961.843 691.01 L962.402 691.01 L962.962 691.01 L963.521 691.01 L964.08 691.01 L964.639 691.01 L965.199 691.01 L965.758 691.01 L966.317 691.01 L966.876 691.01 L967.436 691.01 L967.995 691.01 L968.554 691.01 L969.113 691.01 L969.673 691.01 L970.232 691.01 L970.791 691.01 L971.35 691.01 L971.91 691.01 L972.469 691.01 L973.028 691.01 L973.587 691.01 L974.147 691.01 L974.706 691.01 L975.265 691.01 L975.824 691.01 L976.384 691.01 L976.943 691.01 L977.502 691.01 L978.061 691.01 L978.621 691.01 L979.18 691.01 L979.739 691.01 L980.298 691.01 L980.858 691.01 L981.417 691.01 L981.976 691.01 L982.535 691.01 L983.095 691.01 L983.654 691.01 L984.213 691.01 L984.772 691.01 L985.332 691.01 L985.891 691.01 L986.45 691.01 L987.009 691.01 L987.569 691.01 L988.128 691.01 L988.687 691.01 L989.246 691.01 L989.806 691.01 L990.365 691.01 L990.924 691.01 L991.483 691.01 L992.043 691.01 L992.602 691.01 L993.161 691.01 L993.72 691.01 L994.28 691.01 L994.839 691.01 L995.398 691.01 L995.957 691.01 L996.517 691.01 L997.076 691.01 L997.635 691.01 L998.194 691.01 L998.754 691.01 L999.313 691.01 L999.872 691.01 L1000.43 691.01 L1000.99 691.01 L1001.55 691.01 L1002.11 691.01 L1002.67 691.01 L1003.23 691.01 L1003.79 691.01 L1004.35 691.01 L1004.91 691.01 L1005.46 691.01 L1006.02 691.01 L1006.58 691.01 L1007.14 691.01 L1007.7 691.01 L1008.26 691.01 L1008.82 691.01 L1009.38 691.01 L1009.94 691.01 L1010.5 691.01 L1011.06 691.01 L1011.62 691.01 L1012.18 691.01 L1012.73 691.01 L1013.29 691.01 L1013.85 691.01 L1014.41 691.01 L1014.97 691.01 L1015.53 691.01 L1016.09 691.01 L1016.65 691.01 L1017.21 691.01 L1017.77 691.01 L1018.33 691.01 L1018.89 691.01 L1019.45 691.01 L1020.01 691.01 L1020.56 691.01 L1021.12 691.01 L1021.68 691.01 L1022.24 691.01 L1022.8 691.01 L1023.36 691.01 L1023.92 691.01 L1024.48 691.01 L1025.04 691.01 L1025.6 691.01 L1026.16 691.01 L1026.72 691.01 L1027.28 691.01 L1027.83 691.01 L1028.39 691.01 L1028.95 691.01 L1029.51 691.01 L1030.07 691.01 L1030.63 691.01 L1031.19 691.01 L1031.75 691.01 L1032.31 691.01 L1032.87 691.01 L1033.43 691.01 L1033.99 691.01 L1034.55 691.01 L1035.1 691.01 L1035.66 691.01 L1036.22 691.01 L1036.78 691.01 L1037.34 691.01 L1037.9 691.01 L1038.46 691.01 L1039.02 691.01 L1039.58 691.01 L1040.14 691.01 L1040.7 691.01 L1041.26 691.01 L1041.82 691.01 L1042.38 691.01 L1042.93 691.01 L1043.49 691.01 L1044.05 691.01 L1044.61 691.01 L1045.17 691.01 L1045.73 691.01 L1046.29 691.01 L1046.85 691.01 L1047.41 691.01 L1047.97 691.01 L1048.53 691.01 L1049.09 691.01 L1049.65 691.01 L1050.2 691.01 L1050.76 691.01 L1051.32 691.01 L1051.88 691.01 L1052.44 691.01 L1053 691.01 L1053.56 691.01 L1054.12 691.01 L1054.68 691.01 L1055.24 691.01 L1055.8 691.01 L1056.36 691.01 L1056.92 691.01 L1057.48 691.01 L1058.03 691.01 L1058.59 691.01 L1059.15 691.01 L1059.71 691.01 L1060.27 691.01 L1060.83 691.01 L1061.39 691.01 L1061.95 691.01 L1062.51 691.01 L1063.07 691.01 L1063.63 691.01 L1064.19 691.01 L1064.75 691.01 L1065.3 691.01 L1065.86 691.01 L1066.42 691.01 L1066.98 691.01 L1067.54 691.01 L1068.1 691.01 L1068.66 691.01 L1069.22 691.01 L1069.78 691.01 L1070.34 691.01 L1070.9 691.01 L1071.46 691.01 L1072.02 691.01 L1072.57 691.01 L1073.13 691.01 L1073.69 691.01 L1074.25 691.01 L1074.81 691.01 L1075.37 691.01 L1075.93 691.01 L1076.49 691.01 L1077.05 691.01 L1077.61 691.01 L1078.17 691.01 L1078.73 691.01 L1079.29 691.01 L1079.85 691.01 L1080.4 691.01 L1080.96 691.01 L1081.52 691.01 L1082.08 691.01 L1082.64 691.01 L1083.2 691.01 L1083.76 691.01 L1084.32 691.01 L1084.88 691.01 L1085.44 691.01 L1086 691.01 L1086.56 691.01 L1087.12 691.01 L1087.67 691.01 L1088.23 691.01 L1088.79 691.01 L1089.35 691.01 L1089.91 691.01 L1090.47 691.01 L1091.03 691.01 L1091.59 691.01 L1092.15 691.01 L1092.71 691.01 L1093.27 691.01 L1093.83 691.01 L1094.39 691.01 L1094.94 691.01 L1095.5 691.01 L1096.06 691.01 L1096.62 691.01 L1097.18 691.01 L1097.74 691.01 L1098.3 691.01 L1098.86 691.01 L1099.42 691.01 L1099.98 691.01 L1100.54 691.01 L1101.1 691.01 L1101.66 691.01 L1102.22 691.01 L1102.77 691.01 L1103.33 691.01 L1103.89 691.01 L1104.45 691.01 L1105.01 691.01 L1105.57 691.01 L1106.13 691.01 L1106.69 691.01 L1107.25 691.01 L1107.81 691.01 L1108.37 691.01 L1108.93 691.01 L1109.49 691.01 L1110.04 691.01 L1110.6 691.01 L1111.16 691.01 L1111.72 691.01 L1112.28 691.01 L1112.84 691.01 L1113.4 691.01 L1113.96 691.01 L1114.52 691.01 L1115.08 691.01 L1115.64 691.01 L1116.2 691.01 L1116.76 691.01 L1117.31 691.01 L1117.87 691.01 L1118.43 691.01 L1118.99 691.01 L1119.55 691.01 L1120.11 691.01 L1120.67 691.01 L1121.23 691.01 L1121.79 691.01 L1122.35 691.01 L1122.91 691.01 L1123.47 691.01 L1124.03 691.01 L1124.59 691.01 L1125.14 691.01 L1125.7 691.01 L1126.26 691.01 L1126.82 691.01 L1127.38 691.01 L1127.94 691.01 L1128.5 691.01 L1129.06 691.01 L1129.62 691.01 L1130.18 691.01 L1130.74 691.01 L1131.3 691.01 L1131.86 691.01 L1132.41 691.01 L1132.97 691.01 L1133.53 691.01 L1134.09 691.01 L1134.65 691.01 L1135.21 691.01 L1135.77 691.01 L1136.33 691.01 L1136.89 691.01 L1137.45 691.01 L1138.01 691.01 L1138.57 691.01 L1139.13 691.01 L1139.68 691.01 L1140.24 691.01 L1140.8 691.01 L1141.36 691.01 L1141.92 691.01 L1142.48 691.01 L1143.04 691.01 L1143.6 691.01 L1144.16 691.01 L1144.72 691.01 L1145.28 691.01 L1145.84 691.01 L1146.4 691.01 L1146.96 691.01 L1147.51 691.01 L1148.07 691.01 L1148.63 691.01 L1149.19 691.01 L1149.75 691.01 L1150.31 691.01 L1150.87 691.01 L1151.43 691.01 L1151.99 691.01 L1152.55 691.01 L1153.11 691.01 L1153.67 691.01 L1154.23 691.01 L1154.78 691.01 L1155.34 691.01 L1155.9 691.01 L1156.46 691.01 L1157.02 691.01 L1157.58 691.01 L1158.14 691.01 L1158.7 691.01 L1159.26 691.01 L1159.82 691.01 L1160.38 691.01 L1160.94 691.01 L1161.5 691.01 L1162.05 691.01 L1162.61 691.01 L1163.17 691.01 L1163.73 691.01 L1164.29 691.01 L1164.85 691.01 L1165.41 691.01 L1165.97 691.01 L1166.53 691.01 L1167.09 691.01 L1167.65 691.01 L1168.21 691.01 L1168.77 691.01 L1169.33 691.01 L1169.88 691.01 L1170.44 691.01 L1171 691.01 L1171.56 691.01 L1172.12 691.01 L1172.68 691.01 L1173.24 691.01 L1173.8 691.01 L1174.36 691.01 L1174.92 691.01 L1175.48 691.01 L1176.04 691.01 L1176.6 691.01 L1177.15 691.01 L1177.71 691.01 L1178.27 691.01 L1178.83 691.01 L1179.39 691.01 L1179.95 691.01 L1180.51 691.01 L1181.07 691.01 L1181.63 691.01 L1182.19 691.01 L1182.75 691.01 L1183.31 691.01 L1183.87 691.01 L1184.43 691.01 L1184.98 691.01 L1185.54 691.01 L1186.1 691.01 L1186.66 691.01 L1187.22 691.01 L1187.78 691.01 L1188.34 691.01 L1188.9 691.01 L1189.46 691.01 L1190.02 691.01 L1190.58 691.01 L1191.14 691.01 L1191.7 691.01 L1192.25 691.01 L1192.81 691.01 L1193.37 691.01 L1193.93 691.01 L1194.49 691.01 L1195.05 691.01 L1195.61 691.01 L1196.17 691.01 L1196.73 691.01 L1197.29 691.01 L1197.85 691.01 L1198.41 691.01 L1198.97 691.01 L1199.52 691.01 L1200.08 691.01 L1200.64 691.01 L1201.2 691.01 L1201.76 691.01 L1202.32 691.01 L1202.88 691.01 L1203.44 691.01 L1204 691.01 L1204.56 691.01 L1205.12 691.01 L1205.68 691.01 L1206.24 691.01 L1206.8 691.01 L1207.35 691.01 L1207.91 691.01 L1208.47 691.01 L1209.03 691.01 L1209.59 691.01 L1210.15 691.01 L1210.71 691.01 L1211.27 691.01 L1211.83 691.01 L1212.39 691.01 L1212.95 691.01 L1213.51 691.01 L1214.07 691.01 L1214.62 691.01 L1215.18 691.01 L1215.74 691.01 L1216.3 691.01 L1216.86 691.01 L1217.42 691.01 L1217.98 691.01 L1218.54 691.01 L1219.1 691.01 L1219.66 691.01 L1220.22 691.01 L1220.78 691.01 L1221.34 691.01 L1221.89 691.01 L1222.45 691.01 L1223.01 691.01 L1223.57 691.01 L1224.13 691.01 L1224.69 691.01 L1225.25 691.01 L1225.81 691.01 L1226.37 691.01 L1226.93 691.01 L1227.49 691.01 L1228.05 691.01 L1228.61 691.01 L1229.17 691.01 L1229.72 691.01 L1230.28 691.01 L1230.84 691.01 L1231.4 691.01 L1231.96 691.01 L1232.52 691.01 L1233.08 691.01 L1233.64 691.01 L1234.2 691.01 L1234.76 691.01 L1235.32 691.01 L1235.88 691.01 L1236.44 691.01 L1236.99 691.01 L1237.55 691.01 L1238.11 691.01 L1238.67 691.01 L1239.23 691.01 L1239.79 691.01 L1240.35 691.01 L1240.91 691.01 L1241.47 691.01 L1242.03 691.01 L1242.59 691.01 L1243.15 691.01 L1243.71 691.01 L1244.26 691.01 L1244.82 691.01 L1245.38 691.01 L1245.94 691.01 L1246.5 691.01 L1247.06 691.01 L1247.62 691.01 L1248.18 691.01 L1248.74 691.01 L1249.3 691.01 L1249.86 691.01 L1250.42 691.01 L1250.98 691.01 L1251.54 691.01 L1252.09 691.01 L1252.65 691.01 L1253.21 691.01 L1253.77 691.01 L1254.33 691.01 L1254.89 691.01 L1255.45 691.01 L1256.01 691.01 L1256.57 691.01 L1257.13 691.01 L1257.69 691.01 L1258.25 691.01 L1258.81 691.01 L1259.36 691.01 L1259.92 691.01 L1260.48 691.01 L1261.04 691.01 L1261.6 691.01 L1262.16 691.01 L1262.72 691.01 L1263.28 691.01 L1263.84 691.01 L1264.4 691.01 L1264.96 691.01 L1265.52 691.01 L1266.08 691.01 L1266.63 691.01 L1267.19 691.01 L1267.75 691.01 L1268.31 691.01 L1268.87 691.01 L1269.43 691.01 L1269.99 691.01 L1270.55 691.01 L1271.11 691.01 L1271.67 691.01 L1272.23 691.01 L1272.79 691.01 L1273.35 691.01 L1273.91 691.01 L1274.46 691.01 L1275.02 691.01 L1275.58 691.01 L1276.14 691.01 L1276.7 691.01 L1277.26 691.01 L1277.82 691.01 L1278.38 691.01 L1278.94 691.01 L1279.5 691.01 L1280.06 691.01 L1280.62 691.01 L1281.18 691.01 L1281.73 691.01 L1282.29 691.01 L1282.85 691.01 L1283.41 691.01 L1283.97 691.01 L1284.53 691.01 L1285.09 691.01 L1285.65 691.01 L1286.21 691.01 L1286.77 691.01 L1287.33 691.01 L1287.89 691.01 L1288.45 691.01 L1289 691.01 L1289.56 691.01 L1290.12 691.01 L1290.68 691.01 L1291.24 691.01 L1291.8 691.01 L1292.36 691.01 L1292.92 691.01 L1293.48 691.01 L1294.04 691.01 L1294.6 691.01 L1295.16 691.01 L1295.72 691.01 L1296.28 691.01 L1296.83 691.01 L1297.39 691.01 L1297.95 691.01 L1298.51 691.01 L1299.07 691.01 L1299.63 691.01 L1300.19 691.01 L1300.75 691.01 L1301.31 691.01 L1301.87 691.01 L1302.43 691.01 L1302.99 691.01 L1303.55 691.01 L1304.1 691.01 L1304.66 691.01 L1305.22 691.01 L1305.78 691.01 L1306.34 691.01 L1306.9 691.01 L1307.46 691.01 L1308.02 691.01 L1308.58 691.01 L1309.14 691.01 L1309.7 691.01 L1310.26 691.01 L1310.82 691.01 L1311.38 691.01 L1311.93 691.01 L1312.49 691.01 L1313.05 691.01 L1313.61 691.01 L1314.17 691.01 L1314.73 691.01 L1315.29 691.01 L1315.85 691.01 L1316.41 691.01 L1316.97 691.01 L1317.53 691.01 L1318.09 691.01 L1318.65 691.01 L1319.2 691.01 L1319.76 691.01 L1320.32 691.01 L1320.88 691.01 L1321.44 691.01 L1322 691.01 L1322.56 691.01 L1323.12 691.01 L1323.68 691.01 L1324.24 691.01 L1324.8 691.01 L1325.36 691.01 L1325.92 691.01 L1326.47 691.01 L1327.03 691.01 L1327.59 691.01 L1328.15 691.01 L1328.71 691.01 L1329.27 691.01 L1329.83 691.01 L1330.39 691.01 L1330.95 691.01 L1331.51 691.01 L1332.07 691.01 L1332.63 691.01 L1333.19 691.01 L1333.75 691.01 L1334.3 691.01 L1334.86 691.01 L1335.42 691.01 L1335.98 691.01 L1336.54 691.01 L1337.1 691.01 L1337.66 691.01 L1338.22 691.01 L1338.78 691.01 L1339.34 691.01 L1339.9 691.01 L1340.46 691.01 L1341.02 691.01 L1341.57 691.01 L1342.13 691.01 L1342.69 691.01 L1343.25 691.01 L1343.81 691.01 L1344.37 691.01 L1344.93 691.01 L1345.49 691.01 L1346.05 691.01 L1346.61 691.01 L1347.17 691.01 L1347.73 691.01 L1348.29 691.01 L1348.84 691.01 L1349.4 691.01 L1349.96 691.01 L1350.52 691.01 L1351.08 691.01 L1351.64 691.01 L1352.2 691.01 L1352.76 691.01 L1353.32 691.01 L1353.88 691.01 L1354.44 691.01 L1355 691.01 L1355.56 691.01 L1356.12 691.01 L1356.67 691.01 L1357.23 691.01 L1357.79 691.01 L1358.35 691.01 L1358.91 691.01 L1359.47 691.01 L1360.03 691.01 L1360.59 691.01 L1361.15 691.01 L1361.71 691.01 L1362.27 691.01 L1362.83 691.01 L1363.39 691.01 L1363.94 691.01 L1364.5 691.01 L1365.06 691.01 L1365.62 691.01 L1366.18 691.01 L1366.74 691.01 L1367.3 691.01 L1367.86 691.01 L1368.42 691.01 L1368.98 691.01 L1369.54 691.01 L1370.1 691.01 L1370.66 691.01 L1371.21 691.01 L1371.77 691.01 L1372.33 691.01 L1372.89 691.01 L1373.45 691.01 L1374.01 691.01 L1374.57 691.01 L1375.13 691.01 L1375.69 691.01 L1376.25 691.01 L1376.81 691.01 L1377.37 691.01 L1377.93 691.01 L1378.49 691.01 L1379.04 691.01 L1379.6 691.01 L1380.16 691.01 L1380.72 691.01 L1381.28 691.01 L1381.84 691.01 L1382.4 691.01 L1382.96 691.01 L1383.52 691.01 L1384.08 691.01 L1384.64 691.01 L1385.2 691.01 L1385.76 691.01 L1386.31 691.01 L1386.87 691.01 L1387.43 691.01 L1387.99 691.01 L1388.55 691.01 L1389.11 691.01 L1389.67 691.01 L1390.23 691.01 L1390.79 691.01 L1391.35 691.01 L1391.91 691.01 L1392.47 691.01 L1393.03 691.01 L1393.58 691.01 L1394.14 691.01 L1394.7 691.01 L1395.26 691.01 L1395.82 691.01 L1396.38 691.01 L1396.94 691.01 L1397.5 691.01 L1398.06 691.01 L1398.62 691.01 L1399.18 691.01 L1399.74 691.01 L1400.3 691.01 L1400.86 691.01 L1401.41 691.01 L1401.97 691.01 L1402.53 691.01 L1403.09 691.01 L1403.65 691.01 L1404.21 691.01 L1404.77 691.01 L1405.33 691.01 L1405.89 691.01 L1406.45 691.01 L1407.01 691.01 L1407.57 691.01 L1408.13 691.01 L1408.68 691.01 L1409.24 691.01 L1409.8 691.01 L1410.36 691.01 L1410.92 691.01 L1411.48 691.01 L1412.04 691.01 L1412.6 691.01 L1413.16 691.01 L1413.72 691.01 L1414.28 691.01 L1414.84 691.01 L1415.4 691.01 L1415.95 691.01 L1416.51 691.01 L1417.07 691.01 L1417.63 691.01 L1418.19 691.01 L1418.75 691.01 L1419.31 691.01 L1419.87 691.01 L1420.43 691.01 L1420.99 691.01 L1421.55 691.01 L1422.11 691.01 L1422.67 691.01 L1423.23 691.01 L1423.78 691.01 L1424.34 691.01 L1424.9 691.01 L1425.46 691.01 L1426.02 691.01 L1426.58 691.01 L1427.14 691.01 L1427.7 691.01 L1428.26 691.01 L1428.82 691.01 L1429.38 691.01 L1429.94 691.01 L1430.5 691.01 L1431.05 691.01 L1431.61 691.01 L1432.17 691.01 L1432.73 691.01 L1433.29 691.01 L1433.85 691.01 L1434.41 691.01 L1434.97 691.01 L1435.53 691.01 L1436.09 691.01 L1436.65 691.01 L1437.21 691.01 L1437.77 691.01 L1438.33 691.01 L1438.88 691.01 L1439.44 691.01 L1440 691.01 L1440.56 691.01 L1441.12 691.01 L1441.68 691.01 L1442.24 691.01 L1442.8 691.01 L1443.36 691.01 L1443.92 691.01 L1444.48 691.01 L1445.04 691.01 L1445.6 691.01 L1446.15 691.01 L1446.71 691.01 L1447.27 691.01 L1447.83 691.01 L1448.39 691.01 L1448.95 691.01 L1449.51 691.01 L1450.07 691.01 L1450.63 691.01 L1451.19 691.01 L1451.75 691.01 L1452.31 691.01 L1452.87 691.01 L1453.42 691.01 L1453.98 691.01 L1454.54 691.01 L1455.1 691.01 L1455.66 691.01 L1456.22 691.01 L1456.78 691.01 L1457.34 691.01 L1457.9 691.01 L1458.46 691.01 L1459.02 691.01 L1459.58 691.01 L1460.14 691.01 L1460.7 691.01 L1461.25 691.01 L1461.81 691.01 L1462.37 691.01 L1462.93 691.01 L1463.49 691.01 L1464.05 691.01 L1464.61 691.01 L1465.17 691.01 L1465.73 691.01 L1466.29 691.01 L1466.85 691.01 L1467.41 691.01 L1467.97 691.01 L1468.52 691.01 L1469.08 691.01 L1469.64 691.01 L1470.2 691.01 L1470.76 691.01 L1471.32 691.01 L1471.88 691.01 L1472.44 691.01 L1473 691.01 L1473.56 691.01 L1474.12 691.01 L1474.68 691.01 L1475.24 691.01 L1475.79 691.01 L1476.35 691.01 L1476.91 691.01 L1477.47 691.01 L1478.03 691.01 L1478.59 691.01 L1479.15 691.01 L1479.71 691.01 L1480.27 691.01 L1480.83 691.01 L1481.39 691.01 L1481.95 691.01 L1482.51 691.01 L1483.07 691.01 L1483.62 691.01 L1484.18 691.01 L1484.74 691.01 L1485.3 691.01 L1485.86 691.01 L1486.42 691.01 L1486.98 691.01 L1487.54 691.01 L1488.1 691.01 L1488.66 691.01 L1489.22 691.01 L1489.78 691.01 L1490.34 691.01 L1490.89 691.01 L1491.45 691.01 L1492.01 691.01 L1492.57 691.01 L1493.13 691.01 L1493.69 691.01 L1494.25 691.01 L1494.81 691.01 L1495.37 691.01 L1495.93 691.01 L1496.49 691.01 L1497.05 691.01 L1497.61 691.01 L1498.16 691.01 L1498.72 691.01 L1499.28 691.01 L1499.84 691.01 L1500.4 691.01 L1500.96 691.01 L1501.52 691.01 L1502.08 691.01 L1502.64 691.01 L1503.2 691.01 L1503.76 691.01 L1504.32 691.01 L1504.88 691.01 L1505.44 691.01 L1505.99 691.01 L1506.55 691.01 L1507.11 691.01 L1507.67 691.01 L1508.23 691.01 L1508.79 691.01 L1509.35 691.01 L1509.91 691.01 L1510.47 691.01 L1511.03 691.01 L1511.59 691.01 L1512.15 691.01 L1512.71 691.01 L1513.26 691.01 L1513.82 691.01 L1514.38 691.01 L1514.94 691.01 L1515.5 691.01 L1516.06 691.01 L1516.62 691.01 L1517.18 691.01 L1517.74 691.01 L1518.3 691.01 L1518.86 691.01 L1519.42 691.01 L1519.98 691.01 L1520.53 691.01 L1521.09 691.01 L1521.65 691.01 L1522.21 691.01 L1522.77 691.01 L1523.33 691.01 L1523.89 691.01 L1524.45 691.01 L1525.01 691.01 L1525.57 691.01 L1526.13 691.01 L1526.69 691.01 L1527.25 691.01 L1527.81 691.01 L1528.36 691.01 L1528.92 691.01 L1529.48 691.01 L1530.04 691.01 L1530.6 691.01 L1531.16 691.01 L1531.72 691.01 L1532.28 691.01 L1532.84 691.01 L1533.4 691.01 L1533.96 691.01 L1534.52 691.01 L1535.08 691.01 L1535.63 691.01 L1536.19 691.01 L1536.75 691.01 L1537.31 691.01 L1537.87 691.01 L1538.43 691.01 L1538.99 691.01 L1539.55 691.01 L1540.11 691.01 L1540.67 691.01 L1541.23 691.01 L1541.79 691.01 L1542.35 691.01 L1542.9 691.01 L1543.46 691.01 L1544.02 691.01 L1544.58 691.01 L1545.14 691.01 L1545.7 691.01 L1546.26 691.01 L1546.82 691.01 L1547.38 691.01 L1547.94 691.01 L1548.5 691.01 L1549.06 691.01 L1549.62 691.01 L1550.18 691.01 L1550.73 691.01 L1551.29 691.01 L1551.85 691.01 L1552.41 691.01 L1552.97 691.01 L1553.53 691.01 L1554.09 691.01 L1554.65 691.01 L1555.21 691.01 L1555.77 691.01 L1556.33 691.01 L1556.89 691.01 L1557.45 691.01 L1558 691.01 L1558.56 691.01 L1559.12 691.01 L1559.68 691.01 L1560.24 691.01 L1560.8 691.01 L1561.36 691.01 L1561.92 691.01 L1562.48 691.01 L1563.04 691.01 L1563.6 691.01 L1564.16 691.01 L1564.72 691.01 L1565.28 691.01 L1565.83 691.01 L1566.39 691.01 L1566.95 691.01 L1567.51 691.01 L1568.07 691.01 L1568.63 691.01 L1569.19 691.01 L1569.75 691.01 L1570.31 691.01 L1570.87 691.01 L1571.43 691.01 L1571.99 691.01 L1572.55 691.01 L1573.1 691.01 L1573.66 691.01 L1574.22 691.01 L1574.78 691.01 L1575.34 691.01 L1575.9 691.01 L1576.46 691.01 L1577.02 691.01 L1577.58 691.01 L1578.14 691.01 L1578.7 691.01 L1579.26 691.01 L1579.82 691.01 L1580.37 691.01 L1580.93 691.01 L1581.49 691.01 L1582.05 691.01 L1582.61 691.01 L1583.17 691.01 L1583.73 691.01 L1584.29 691.01 L1584.85 691.01 L1585.41 691.01 L1585.97 691.01 L1586.53 691.01 L1587.09 691.01 L1587.65 691.01 L1588.2 691.01 L1588.76 691.01 L1589.32 691.01 L1589.88 691.01 L1590.44 691.01 L1591 691.01 L1591.56 691.01 L1592.12 691.01 L1592.68 691.01 L1593.24 691.01 L1593.8 691.01 L1594.36 691.01 L1594.92 691.01 L1595.47 691.01 L1596.03 691.01 L1596.59 691.01 L1597.15 691.01 L1597.71 691.01 L1598.27 691.01 L1598.83 691.01 L1599.39 691.01 L1599.95 691.01 L1600.51 691.01 L1601.07 691.01 L1601.63 691.01 L1602.19 691.01 L1602.74 691.01 L1603.3 691.01 L1603.86 691.01 L1604.42 691.01 L1604.98 691.01 L1605.54 691.01 L1606.1 691.01 L1606.66 691.01 L1607.22 691.01 L1607.78 691.01 L1608.34 691.01 L1608.9 691.01 L1609.46 691.01 L1610.02 691.01 L1610.57 691.01 L1611.13 691.01 L1611.69 691.01 L1612.25 691.01 L1612.81 691.01 L1613.37 691.01 L1613.93 691.01 L1614.49 691.01 L1615.05 691.01 L1615.61 691.01 L1616.17 691.01 L1616.73 691.01 L1617.29 691.01 L1617.84 691.01 L1618.4 691.01 L1618.96 691.01 L1619.52 691.01 L1620.08 691.01 L1620.64 691.01 L1621.2 691.01 L1621.76 691.01 L1622.32 691.01 L1622.88 691.01 L1623.44 691.01 L1624 691.01 L1624.56 691.01 L1625.11 691.01 L1625.67 691.01 L1626.23 691.01 L1626.79 691.01 L1627.35 691.01 L1627.91 691.01 L1628.47 691.01 L1629.03 691.01 L1629.59 691.01 L1630.15 691.01 L1630.71 691.01 L1631.27 691.01 L1631.83 691.01 L1632.39 691.01 L1632.94 691.01 L1633.5 691.01 L1634.06 691.01 L1634.62 691.01 L1635.18 691.01 L1635.74 691.01 L1636.3 691.01 L1636.86 691.01 L1637.42 691.01 L1637.98 691.01 L1638.54 691.01 L1639.1 691.01 L1639.66 691.01 L1640.21 691.01 L1640.77 691.01 L1641.33 691.01 L1641.89 691.01 L1642.45 691.01 L1643.01 691.01 L1643.57 691.01 L1644.13 691.01 L1644.69 691.01 L1645.25 691.01 L1645.81 691.01 L1646.37 691.01 L1646.93 691.01 L1647.48 691.01 L1648.04 691.01 L1648.6 691.01 L1649.16 691.01 L1649.72 691.01 L1650.28 691.01 L1650.84 691.01 L1651.4 691.01 L1651.96 691.01 L1652.52 691.01 L1653.08 691.01 L1653.64 691.01 L1654.2 691.01 L1654.76 691.01 L1655.31 691.01 L1655.87 691.01 L1656.43 691.01 L1656.99 691.01 L1657.55 691.01 L1658.11 691.01 L1658.67 691.01 L1659.23 691.01 L1659.79 691.01 L1660.35 691.01 L1660.91 691.01 L1661.47 691.01 L1662.03 691.01 L1662.58 691.01 L1663.14 691.01 L1663.7 691.01 L1664.26 691.01 L1664.82 691.01 L1665.38 691.01 L1665.94 691.01 L1666.5 691.01 L1667.06 691.01 L1667.62 691.01 L1668.18 691.01 L1668.74 691.01 L1669.3 691.01 L1669.85 691.01 L1670.41 691.01 L1670.97 691.01 L1671.53 691.01 L1672.09 691.01 L1672.65 691.01 L1673.21 691.01 L1673.77 691.01 L1674.33 691.01 L1674.89 691.01 L1675.45 691.01 L1676.01 691.01 L1676.57 691.01 L1677.13 691.01 L1677.68 691.01 L1678.24 691.01 L1678.8 691.01 L1679.36 691.01 L1679.92 691.01 L1680.48 691.01 L1681.04 691.01 L1681.6 691.01 L1682.16 691.01 L1682.72 691.01 L1683.28 691.01 L1683.84 691.01 L1684.4 691.01 L1684.95 691.01 L1685.51 691.01 L1686.07 691.01 L1686.63 691.01 L1687.19 691.01 L1687.75 691.01 L1688.31 691.01 L1688.87 691.01 L1689.43 691.01 L1689.99 691.01 L1690.55 691.01 L1691.11 691.01 L1691.67 691.01 L1692.23 691.01 L1692.78 691.01 L1693.34 691.01 L1693.9 691.01 L1694.46 691.01 L1695.02 691.01 L1695.58 691.01 L1696.14 691.01 L1696.7 691.01 L1697.26 691.01 L1697.82 691.01 L1698.38 691.01 L1698.94 691.01 L1699.5 691.01 L1700.05 691.01 L1700.61 691.01 L1701.17 691.01 L1701.73 691.01 L1702.29 691.01 L1702.85 691.01 L1703.41 691.01 L1703.97 691.01 L1704.53 691.01 L1705.09 691.01 L1705.65 691.01 L1706.21 691.01 L1706.77 691.01 L1707.32 691.01 L1707.88 691.01 L1708.44 691.01 L1709 691.01 L1709.56 691.01 L1710.12 691.01 L1710.68 691.01 L1711.24 691.01 L1711.8 691.01 L1712.36 691.01 L1712.92 691.01 L1713.48 691.01 L1714.04 691.01 L1714.6 691.01 L1715.15 691.01 L1715.71 691.01 L1716.27 691.01 L1716.83 691.01 L1717.39 691.01 L1717.95 691.01 L1718.51 691.01 L1719.07 691.01 L1719.63 691.01 L1720.19 691.01 L1720.75 691.01 L1721.31 691.01 L1721.87 691.01 L1722.42 691.01 L1722.98 691.01 L1723.54 691.01 L1724.1 691.01 L1724.66 691.01 L1725.22 691.01 L1725.78 691.01 L1726.34 691.01 L1726.9 691.01 L1727.46 691.01 L1728.02 691.01 L1728.58 691.01 L1729.14 691.01 L1729.69 691.01 L1730.25 691.01 L1730.81 691.01 L1731.37 691.01 L1731.93 691.01 L1732.49 691.01 L1733.05 691.01 L1733.61 691.01 L1734.17 691.01 L1734.73 691.01 L1735.29 691.01 L1735.85 691.01 L1736.41 691.01 L1736.97 691.01 L1737.52 691.01 L1738.08 691.01 L1738.64 691.01 L1739.2 691.01 L1739.76 691.01 L1740.32 691.01 L1740.88 691.01 L1741.44 691.01 L1742 691.01 L1742.56 691.01 L1743.12 691.01 L1743.68 691.01 L1744.24 691.01 L1744.79 691.01 L1745.35 691.01 L1745.91 691.01 L1746.47 691.01 L1747.03 691.01 L1747.59 691.01 L1748.15 691.01 L1748.71 691.01 L1749.27 691.01 L1749.83 691.01 L1750.39 691.01 L1750.95 691.01 L1751.51 691.01 L1752.06 691.01 L1752.62 691.01 L1753.18 691.01 L1753.74 691.01 L1754.3 691.01 L1754.86 691.01 L1755.42 691.01 L1755.98 691.01 L1756.54 691.01 L1757.1 691.01 L1757.66 691.01 L1758.22 691.01 L1758.78 691.01 L1759.34 691.01 L1759.89 691.01 L1760.45 691.01 L1761.01 691.01 L1761.57 691.01 L1762.13 691.01 L1762.69 691.01 L1763.25 691.01 L1763.81 691.01 L1764.37 691.01 L1764.93 691.01 L1765.49 691.01 L1766.05 691.01 L1766.61 691.01 L1767.16 691.01 L1767.72 691.01 L1768.28 691.01 L1768.84 691.01 L1769.4 691.01 L1769.96 691.01 L1770.52 691.01 L1771.08 691.01 L1771.64 691.01 L1772.2 691.01 L1772.76 691.01 L1773.32 691.01 L1773.88 691.01 L1774.43 691.01 L1774.99 691.01 L1775.55 691.01 L1776.11 691.01 L1776.67 691.01 L1777.23 691.01 L1777.79 691.01 L1778.35 691.01 L1778.91 691.01 L1779.47 691.01 L1780.03 691.01 L1780.59 691.01 L1781.15 691.01 L1781.71 691.01 L1782.26 691.01 L1782.82 691.01 L1783.38 691.01 L1783.94 691.01 L1784.5 691.01 L1785.06 691.01 L1785.62 691.01 L1786.18 691.01 L1786.74 691.01 L1787.3 691.01 L1787.86 691.01 L1788.42 691.01 L1788.98 691.01 L1789.53 691.01 L1790.09 691.01 L1790.65 691.01 L1791.21 691.01 L1791.77 691.01 L1792.33 691.01 L1792.89 691.01 L1793.45 691.01 L1794.01 691.01 L1794.57 691.01 L1795.13 691.01 L1795.69 691.01 L1796.25 691.01 L1796.8 691.01 L1797.36 691.01 L1797.92 691.01 L1798.48 691.01 L1799.04 691.01 L1799.6 691.01 L1800.16 691.01 L1800.72 691.01 L1801.28 691.01 L1801.84 691.01 L1802.4 691.01 L1802.96 691.01 L1803.52 691.01 L1804.08 691.01 L1804.63 691.01 L1805.19 691.01 L1805.75 691.01 L1806.31 691.01 L1806.87 691.01 L1807.43 691.01 L1807.99 691.01 L1808.55 691.01 L1809.11 691.01 L1809.67 691.01 L1810.23 691.01 L1810.79 691.01 L1811.35 691.01 L1811.9 691.01 L1812.46 691.01 L1813.02 691.01 L1813.58 691.01 L1814.14 691.01 L1814.7 691.01 L1815.26 691.01 L1815.82 691.01 L1816.38 691.01 L1816.94 691.01 L1817.5 691.01 L1818.06 691.01 L1818.62 691.01 L1819.18 691.01 L1819.73 691.01 L1820.29 691.01 L1820.85 691.01 L1821.41 691.01 L1821.97 691.01 L1822.53 691.01 L1823.09 691.01 L1823.65 691.01 L1824.21 691.01 L1824.77 691.01 L1825.33 691.01 L1825.89 691.01 L1826.45 691.01 L1827 691.01 L1827.56 691.01 L1828.12 691.01 L1828.68 691.01 L1829.24 691.01 L1829.8 691.01 L1830.36 691.01 L1830.92 691.01 L1831.48 691.01 L1832.04 691.01 L1832.6 691.01 L1833.16 691.01 L1833.72 691.01 L1834.27 691.01 L1834.83 691.01 L1835.39 691.01 L1835.95 691.01 L1836.51 691.01 L1837.07 691.01 L1837.63 691.01 L1838.19 691.01 L1838.19 682.641 L1837.63 682.641 L1837.07 682.641 L1836.51 682.641 L1835.95 682.641 L1835.39 682.641 L1834.83 682.641 L1834.27 682.641 L1833.72 682.641 L1833.16 682.641 L1832.6 682.641 L1832.04 682.641 L1831.48 682.641 L1830.92 682.641 L1830.36 682.641 L1829.8 682.641 L1829.24 682.641 L1828.68 682.641 L1828.12 682.641 L1827.56 682.641 L1827 682.641 L1826.45 682.641 L1825.89 682.641 L1825.33 682.641 L1824.77 682.641 L1824.21 682.641 L1823.65 682.641 L1823.09 682.641 L1822.53 682.641 L1821.97 682.641 L1821.41 682.641 L1820.85 682.641 L1820.29 682.641 L1819.73 682.641 L1819.18 682.641 L1818.62 682.641 L1818.06 682.641 L1817.5 682.641 L1816.94 682.641 L1816.38 682.641 L1815.82 682.641 L1815.26 682.641 L1814.7 682.641 L1814.14 682.641 L1813.58 682.641 L1813.02 682.641 L1812.46 682.641 L1811.9 682.641 L1811.35 682.641 L1810.79 682.641 L1810.23 682.641 L1809.67 682.641 L1809.11 682.641 L1808.55 682.641 L1807.99 682.641 L1807.43 682.641 L1806.87 682.641 L1806.31 682.641 L1805.75 682.641 L1805.19 682.641 L1804.63 682.641 L1804.08 682.641 L1803.52 682.641 L1802.96 682.641 L1802.4 682.641 L1801.84 682.641 L1801.28 682.641 L1800.72 682.641 L1800.16 682.641 L1799.6 682.641 L1799.04 682.641 L1798.48 682.641 L1797.92 682.641 L1797.36 682.641 L1796.8 682.641 L1796.25 682.641 L1795.69 682.641 L1795.13 682.641 L1794.57 682.641 L1794.01 682.641 L1793.45 682.641 L1792.89 682.641 L1792.33 682.641 L1791.77 682.641 L1791.21 682.641 L1790.65 682.641 L1790.09 682.641 L1789.53 682.641 L1788.98 682.641 L1788.42 682.641 L1787.86 682.641 L1787.3 682.641 L1786.74 682.641 L1786.18 682.641 L1785.62 682.641 L1785.06 682.641 L1784.5 682.641 L1783.94 682.641 L1783.38 682.641 L1782.82 682.641 L1782.26 682.641 L1781.71 682.641 L1781.15 682.641 L1780.59 682.641 L1780.03 682.641 L1779.47 682.641 L1778.91 682.641 L1778.35 682.641 L1777.79 682.641 L1777.23 682.641 L1776.67 682.641 L1776.11 682.641 L1775.55 682.641 L1774.99 682.641 L1774.43 682.641 L1773.88 682.641 L1773.32 682.641 L1772.76 682.641 L1772.2 682.641 L1771.64 682.641 L1771.08 682.641 L1770.52 682.641 L1769.96 682.641 L1769.4 682.641 L1768.84 682.641 L1768.28 682.641 L1767.72 682.641 L1767.16 682.641 L1766.61 682.641 L1766.05 682.641 L1765.49 682.641 L1764.93 682.641 L1764.37 682.641 L1763.81 682.641 L1763.25 682.641 L1762.69 682.641 L1762.13 682.641 L1761.57 682.641 L1761.01 682.641 L1760.45 682.641 L1759.89 682.641 L1759.34 682.641 L1758.78 682.641 L1758.22 682.641 L1757.66 682.641 L1757.1 682.641 L1756.54 682.641 L1755.98 682.641 L1755.42 682.641 L1754.86 682.641 L1754.3 682.641 L1753.74 682.641 L1753.18 682.641 L1752.62 682.641 L1752.06 682.641 L1751.51 682.641 L1750.95 682.641 L1750.39 682.641 L1749.83 682.641 L1749.27 682.641 L1748.71 682.641 L1748.15 682.641 L1747.59 682.641 L1747.03 682.641 L1746.47 682.641 L1745.91 682.641 L1745.35 682.641 L1744.79 682.641 L1744.24 682.641 L1743.68 682.641 L1743.12 682.641 L1742.56 682.641 L1742 682.641 L1741.44 682.641 L1740.88 682.641 L1740.32 682.641 L1739.76 682.641 L1739.2 682.641 L1738.64 682.641 L1738.08 682.641 L1737.52 682.641 L1736.97 682.641 L1736.41 682.641 L1735.85 682.641 L1735.29 682.641 L1734.73 682.641 L1734.17 682.641 L1733.61 682.641 L1733.05 682.641 L1732.49 682.641 L1731.93 682.641 L1731.37 682.641 L1730.81 682.641 L1730.25 682.641 L1729.69 682.641 L1729.14 682.641 L1728.58 682.641 L1728.02 682.641 L1727.46 682.641 L1726.9 682.641 L1726.34 682.641 L1725.78 682.641 L1725.22 682.641 L1724.66 682.641 L1724.1 682.641 L1723.54 682.641 L1722.98 682.641 L1722.42 682.641 L1721.87 682.641 L1721.31 682.641 L1720.75 682.641 L1720.19 682.641 L1719.63 682.641 L1719.07 682.641 L1718.51 682.641 L1717.95 682.641 L1717.39 682.641 L1716.83 682.641 L1716.27 682.641 L1715.71 682.641 L1715.15 682.641 L1714.6 682.641 L1714.04 682.641 L1713.48 682.641 L1712.92 682.641 L1712.36 682.641 L1711.8 682.641 L1711.24 682.641 L1710.68 682.641 L1710.12 682.641 L1709.56 682.641 L1709 682.641 L1708.44 682.641 L1707.88 682.641 L1707.32 682.641 L1706.77 682.641 L1706.21 682.641 L1705.65 682.641 L1705.09 682.641 L1704.53 682.641 L1703.97 682.641 L1703.41 682.641 L1702.85 682.641 L1702.29 682.641 L1701.73 682.641 L1701.17 682.641 L1700.61 682.641 L1700.05 682.641 L1699.5 682.641 L1698.94 682.641 L1698.38 682.641 L1697.82 682.641 L1697.26 682.641 L1696.7 682.641 L1696.14 682.641 L1695.58 682.641 L1695.02 682.641 L1694.46 682.641 L1693.9 682.641 L1693.34 682.641 L1692.78 682.641 L1692.23 682.641 L1691.67 682.641 L1691.11 682.641 L1690.55 682.641 L1689.99 682.641 L1689.43 682.641 L1688.87 682.641 L1688.31 682.641 L1687.75 682.641 L1687.19 682.641 L1686.63 682.641 L1686.07 682.641 L1685.51 682.641 L1684.95 682.641 L1684.4 682.641 L1683.84 682.641 L1683.28 682.641 L1682.72 682.641 L1682.16 682.641 L1681.6 682.641 L1681.04 682.641 L1680.48 682.641 L1679.92 682.641 L1679.36 682.641 L1678.8 682.641 L1678.24 682.641 L1677.68 682.641 L1677.13 682.641 L1676.57 682.641 L1676.01 682.641 L1675.45 682.641 L1674.89 682.641 L1674.33 682.641 L1673.77 682.641 L1673.21 682.641 L1672.65 682.641 L1672.09 682.641 L1671.53 682.641 L1670.97 682.641 L1670.41 682.641 L1669.85 682.641 L1669.3 682.641 L1668.74 682.641 L1668.18 682.641 L1667.62 682.641 L1667.06 682.641 L1666.5 682.641 L1665.94 682.641 L1665.38 682.641 L1664.82 682.641 L1664.26 682.641 L1663.7 682.641 L1663.14 682.641 L1662.58 682.641 L1662.03 682.641 L1661.47 682.641 L1660.91 682.641 L1660.35 682.641 L1659.79 682.641 L1659.23 682.641 L1658.67 682.641 L1658.11 682.641 L1657.55 682.641 L1656.99 682.641 L1656.43 682.641 L1655.87 682.641 L1655.31 682.641 L1654.76 682.641 L1654.2 682.641 L1653.64 682.641 L1653.08 682.641 L1652.52 682.641 L1651.96 682.641 L1651.4 682.641 L1650.84 682.641 L1650.28 682.641 L1649.72 682.641 L1649.16 682.641 L1648.6 682.641 L1648.04 682.641 L1647.48 682.641 L1646.93 682.641 L1646.37 682.641 L1645.81 682.641 L1645.25 682.641 L1644.69 682.641 L1644.13 682.641 L1643.57 682.641 L1643.01 682.641 L1642.45 682.641 L1641.89 682.641 L1641.33 682.641 L1640.77 682.641 L1640.21 682.641 L1639.66 682.641 L1639.1 682.641 L1638.54 682.641 L1637.98 682.641 L1637.42 682.641 L1636.86 682.641 L1636.3 682.641 L1635.74 682.641 L1635.18 682.641 L1634.62 682.641 L1634.06 682.641 L1633.5 682.641 L1632.94 682.641 L1632.39 682.641 L1631.83 682.641 L1631.27 682.641 L1630.71 682.641 L1630.15 682.641 L1629.59 682.641 L1629.03 682.641 L1628.47 682.641 L1627.91 682.641 L1627.35 682.641 L1626.79 682.641 L1626.23 682.641 L1625.67 682.641 L1625.11 682.641 L1624.56 682.641 L1624 682.641 L1623.44 682.641 L1622.88 682.641 L1622.32 682.641 L1621.76 682.641 L1621.2 682.641 L1620.64 682.641 L1620.08 682.641 L1619.52 682.641 L1618.96 682.641 L1618.4 682.641 L1617.84 682.641 L1617.29 682.641 L1616.73 682.641 L1616.17 682.641 L1615.61 682.641 L1615.05 682.641 L1614.49 682.641 L1613.93 682.641 L1613.37 682.641 L1612.81 682.641 L1612.25 682.641 L1611.69 682.641 L1611.13 682.641 L1610.57 682.641 L1610.02 682.641 L1609.46 682.641 L1608.9 682.641 L1608.34 682.641 L1607.78 682.641 L1607.22 682.641 L1606.66 682.641 L1606.1 682.641 L1605.54 682.641 L1604.98 682.641 L1604.42 682.641 L1603.86 682.641 L1603.3 682.641 L1602.74 682.641 L1602.19 682.641 L1601.63 682.641 L1601.07 682.641 L1600.51 682.641 L1599.95 682.641 L1599.39 682.641 L1598.83 682.641 L1598.27 682.641 L1597.71 682.641 L1597.15 682.641 L1596.59 682.641 L1596.03 682.641 L1595.47 682.641 L1594.92 682.641 L1594.36 682.641 L1593.8 682.641 L1593.24 682.641 L1592.68 682.641 L1592.12 682.641 L1591.56 682.641 L1591 682.641 L1590.44 682.641 L1589.88 682.641 L1589.32 682.641 L1588.76 682.641 L1588.2 682.641 L1587.65 682.641 L1587.09 682.641 L1586.53 682.641 L1585.97 682.641 L1585.41 682.641 L1584.85 682.641 L1584.29 682.641 L1583.73 682.641 L1583.17 682.641 L1582.61 682.641 L1582.05 682.641 L1581.49 682.641 L1580.93 682.641 L1580.37 682.641 L1579.82 682.641 L1579.26 682.641 L1578.7 682.641 L1578.14 682.641 L1577.58 682.641 L1577.02 682.641 L1576.46 682.641 L1575.9 682.641 L1575.34 682.641 L1574.78 682.641 L1574.22 682.641 L1573.66 682.641 L1573.1 682.641 L1572.55 682.641 L1571.99 682.641 L1571.43 682.641 L1570.87 682.641 L1570.31 682.641 L1569.75 682.641 L1569.19 682.641 L1568.63 682.641 L1568.07 682.641 L1567.51 682.641 L1566.95 682.641 L1566.39 682.641 L1565.83 682.641 L1565.28 682.641 L1564.72 682.641 L1564.16 682.641 L1563.6 682.641 L1563.04 682.641 L1562.48 682.641 L1561.92 682.641 L1561.36 682.641 L1560.8 682.641 L1560.24 682.641 L1559.68 682.641 L1559.12 682.641 L1558.56 682.641 L1558 682.641 L1557.45 682.641 L1556.89 682.641 L1556.33 682.641 L1555.77 682.641 L1555.21 682.641 L1554.65 682.641 L1554.09 682.641 L1553.53 682.641 L1552.97 682.641 L1552.41 682.641 L1551.85 682.641 L1551.29 682.641 L1550.73 682.641 L1550.18 682.641 L1549.62 682.641 L1549.06 682.641 L1548.5 682.641 L1547.94 682.641 L1547.38 682.641 L1546.82 682.641 L1546.26 682.641 L1545.7 682.641 L1545.14 682.641 L1544.58 682.641 L1544.02 682.641 L1543.46 682.641 L1542.9 682.641 L1542.35 682.641 L1541.79 682.641 L1541.23 682.641 L1540.67 682.641 L1540.11 682.641 L1539.55 682.641 L1538.99 682.641 L1538.43 682.641 L1537.87 682.641 L1537.31 682.641 L1536.75 682.641 L1536.19 682.641 L1535.63 682.641 L1535.08 682.641 L1534.52 682.641 L1533.96 682.641 L1533.4 682.641 L1532.84 682.641 L1532.28 682.641 L1531.72 682.641 L1531.16 682.641 L1530.6 682.641 L1530.04 682.641 L1529.48 682.641 L1528.92 682.641 L1528.36 682.641 L1527.81 682.641 L1527.25 682.641 L1526.69 682.641 L1526.13 682.641 L1525.57 682.641 L1525.01 682.641 L1524.45 682.641 L1523.89 682.641 L1523.33 682.641 L1522.77 682.641 L1522.21 682.641 L1521.65 682.641 L1521.09 682.641 L1520.53 682.641 L1519.98 682.641 L1519.42 682.641 L1518.86 682.641 L1518.3 682.641 L1517.74 682.641 L1517.18 682.641 L1516.62 682.641 L1516.06 682.641 L1515.5 682.641 L1514.94 682.641 L1514.38 682.641 L1513.82 682.641 L1513.26 682.641 L1512.71 682.641 L1512.15 682.641 L1511.59 682.641 L1511.03 682.641 L1510.47 682.641 L1509.91 682.641 L1509.35 682.641 L1508.79 682.641 L1508.23 682.641 L1507.67 682.641 L1507.11 682.641 L1506.55 682.641 L1505.99 682.641 L1505.44 682.641 L1504.88 682.641 L1504.32 682.641 L1503.76 682.641 L1503.2 682.641 L1502.64 682.641 L1502.08 682.641 L1501.52 682.641 L1500.96 682.641 L1500.4 682.641 L1499.84 682.641 L1499.28 682.641 L1498.72 682.641 L1498.16 682.641 L1497.61 682.641 L1497.05 682.641 L1496.49 682.641 L1495.93 682.641 L1495.37 682.641 L1494.81 682.641 L1494.25 682.641 L1493.69 682.641 L1493.13 682.641 L1492.57 682.641 L1492.01 682.641 L1491.45 682.641 L1490.89 682.641 L1490.34 682.641 L1489.78 682.641 L1489.22 682.641 L1488.66 682.641 L1488.1 682.641 L1487.54 682.641 L1486.98 682.641 L1486.42 682.641 L1485.86 682.641 L1485.3 682.641 L1484.74 682.641 L1484.18 682.641 L1483.62 682.641 L1483.07 682.641 L1482.51 682.641 L1481.95 682.641 L1481.39 682.641 L1480.83 682.641 L1480.27 682.641 L1479.71 682.641 L1479.15 682.641 L1478.59 682.641 L1478.03 682.641 L1477.47 682.641 L1476.91 682.641 L1476.35 682.641 L1475.79 682.641 L1475.24 682.641 L1474.68 682.641 L1474.12 682.641 L1473.56 682.641 L1473 682.641 L1472.44 682.641 L1471.88 682.641 L1471.32 682.641 L1470.76 682.641 L1470.2 682.641 L1469.64 682.641 L1469.08 682.641 L1468.52 682.641 L1467.97 682.641 L1467.41 682.641 L1466.85 682.641 L1466.29 682.641 L1465.73 682.641 L1465.17 682.641 L1464.61 682.641 L1464.05 682.641 L1463.49 682.641 L1462.93 682.641 L1462.37 682.641 L1461.81 682.641 L1461.25 682.641 L1460.7 682.641 L1460.14 682.641 L1459.58 682.641 L1459.02 682.641 L1458.46 682.641 L1457.9 682.641 L1457.34 682.641 L1456.78 682.641 L1456.22 682.641 L1455.66 682.641 L1455.1 682.641 L1454.54 682.641 L1453.98 682.641 L1453.42 682.641 L1452.87 682.641 L1452.31 682.641 L1451.75 682.641 L1451.19 682.641 L1450.63 682.641 L1450.07 682.641 L1449.51 682.641 L1448.95 682.641 L1448.39 682.641 L1447.83 682.641 L1447.27 682.641 L1446.71 682.641 L1446.15 682.641 L1445.6 682.641 L1445.04 682.641 L1444.48 682.641 L1443.92 682.641 L1443.36 682.641 L1442.8 682.641 L1442.24 682.641 L1441.68 682.641 L1441.12 682.641 L1440.56 682.641 L1440 682.641 L1439.44 682.641 L1438.88 682.641 L1438.33 682.641 L1437.77 682.641 L1437.21 682.641 L1436.65 682.641 L1436.09 682.641 L1435.53 682.641 L1434.97 682.641 L1434.41 682.641 L1433.85 682.641 L1433.29 682.641 L1432.73 682.641 L1432.17 682.641 L1431.61 682.641 L1431.05 682.641 L1430.5 682.641 L1429.94 682.641 L1429.38 682.641 L1428.82 682.641 L1428.26 682.641 L1427.7 682.641 L1427.14 682.641 L1426.58 682.641 L1426.02 682.641 L1425.46 682.641 L1424.9 682.641 L1424.34 682.641 L1423.78 682.641 L1423.23 682.641 L1422.67 682.641 L1422.11 682.641 L1421.55 682.641 L1420.99 682.641 L1420.43 682.641 L1419.87 682.641 L1419.31 682.641 L1418.75 682.641 L1418.19 682.641 L1417.63 682.641 L1417.07 682.641 L1416.51 682.641 L1415.95 682.641 L1415.4 682.641 L1414.84 682.641 L1414.28 682.641 L1413.72 682.641 L1413.16 682.641 L1412.6 682.641 L1412.04 682.641 L1411.48 682.641 L1410.92 682.641 L1410.36 682.641 L1409.8 682.641 L1409.24 682.641 L1408.68 682.641 L1408.13 682.641 L1407.57 682.641 L1407.01 682.641 L1406.45 682.641 L1405.89 682.641 L1405.33 682.641 L1404.77 682.641 L1404.21 682.641 L1403.65 682.641 L1403.09 682.641 L1402.53 682.641 L1401.97 682.641 L1401.41 682.641 L1400.86 682.641 L1400.3 682.641 L1399.74 682.641 L1399.18 682.641 L1398.62 682.641 L1398.06 682.641 L1397.5 682.641 L1396.94 682.641 L1396.38 682.641 L1395.82 682.641 L1395.26 682.641 L1394.7 682.641 L1394.14 682.641 L1393.58 682.641 L1393.03 682.641 L1392.47 682.641 L1391.91 682.641 L1391.35 682.641 L1390.79 682.641 L1390.23 682.641 L1389.67 682.641 L1389.11 682.641 L1388.55 682.641 L1387.99 682.641 L1387.43 682.641 L1386.87 682.641 L1386.31 682.641 L1385.76 682.641 L1385.2 682.641 L1384.64 682.641 L1384.08 682.641 L1383.52 682.641 L1382.96 682.641 L1382.4 682.641 L1381.84 682.641 L1381.28 682.641 L1380.72 682.641 L1380.16 682.641 L1379.6 682.641 L1379.04 682.641 L1378.49 682.641 L1377.93 682.641 L1377.37 682.641 L1376.81 682.641 L1376.25 682.641 L1375.69 682.641 L1375.13 682.641 L1374.57 682.641 L1374.01 682.641 L1373.45 682.641 L1372.89 682.641 L1372.33 682.641 L1371.77 682.641 L1371.21 682.641 L1370.66 682.641 L1370.1 682.641 L1369.54 682.641 L1368.98 682.641 L1368.42 682.641 L1367.86 682.641 L1367.3 682.641 L1366.74 682.641 L1366.18 682.641 L1365.62 682.641 L1365.06 682.641 L1364.5 682.641 L1363.94 682.641 L1363.39 682.641 L1362.83 682.641 L1362.27 682.641 L1361.71 682.641 L1361.15 682.641 L1360.59 682.641 L1360.03 682.641 L1359.47 682.641 L1358.91 682.641 L1358.35 682.641 L1357.79 682.641 L1357.23 682.641 L1356.67 682.641 L1356.12 682.641 L1355.56 682.641 L1355 682.641 L1354.44 682.641 L1353.88 682.641 L1353.32 682.641 L1352.76 682.641 L1352.2 682.641 L1351.64 682.641 L1351.08 682.641 L1350.52 682.641 L1349.96 682.641 L1349.4 682.641 L1348.84 682.641 L1348.29 682.641 L1347.73 682.641 L1347.17 682.641 L1346.61 682.641 L1346.05 682.641 L1345.49 682.641 L1344.93 682.641 L1344.37 682.641 L1343.81 682.641 L1343.25 682.641 L1342.69 682.641 L1342.13 682.641 L1341.57 682.641 L1341.02 682.641 L1340.46 682.641 L1339.9 682.641 L1339.34 682.641 L1338.78 682.641 L1338.22 682.641 L1337.66 682.641 L1337.1 682.641 L1336.54 682.641 L1335.98 682.641 L1335.42 682.641 L1334.86 682.641 L1334.3 682.641 L1333.75 682.641 L1333.19 682.641 L1332.63 682.641 L1332.07 682.641 L1331.51 682.641 L1330.95 682.641 L1330.39 682.641 L1329.83 682.641 L1329.27 682.641 L1328.71 682.641 L1328.15 682.641 L1327.59 682.641 L1327.03 682.641 L1326.47 682.641 L1325.92 682.641 L1325.36 682.641 L1324.8 682.641 L1324.24 682.641 L1323.68 682.641 L1323.12 682.641 L1322.56 682.641 L1322 682.641 L1321.44 682.641 L1320.88 682.641 L1320.32 682.641 L1319.76 682.641 L1319.2 682.641 L1318.65 682.641 L1318.09 682.641 L1317.53 682.641 L1316.97 682.641 L1316.41 682.641 L1315.85 682.641 L1315.29 682.641 L1314.73 682.641 L1314.17 682.641 L1313.61 682.641 L1313.05 682.641 L1312.49 682.641 L1311.93 682.641 L1311.38 682.641 L1310.82 682.641 L1310.26 682.641 L1309.7 682.641 L1309.14 682.641 L1308.58 682.641 L1308.02 682.641 L1307.46 682.641 L1306.9 682.641 L1306.34 682.641 L1305.78 682.641 L1305.22 682.641 L1304.66 682.641 L1304.1 682.641 L1303.55 682.641 L1302.99 682.641 L1302.43 682.641 L1301.87 682.641 L1301.31 682.641 L1300.75 682.641 L1300.19 682.641 L1299.63 682.641 L1299.07 682.641 L1298.51 682.641 L1297.95 682.641 L1297.39 682.641 L1296.83 682.641 L1296.28 682.641 L1295.72 682.641 L1295.16 682.641 L1294.6 682.641 L1294.04 682.641 L1293.48 682.641 L1292.92 682.641 L1292.36 682.641 L1291.8 682.641 L1291.24 682.641 L1290.68 682.641 L1290.12 682.641 L1289.56 682.641 L1289 682.641 L1288.45 682.641 L1287.89 682.641 L1287.33 682.641 L1286.77 682.641 L1286.21 682.641 L1285.65 682.641 L1285.09 682.641 L1284.53 682.641 L1283.97 682.641 L1283.41 682.641 L1282.85 682.641 L1282.29 682.641 L1281.73 682.641 L1281.18 682.641 L1280.62 682.641 L1280.06 682.641 L1279.5 682.641 L1278.94 682.641 L1278.38 682.641 L1277.82 682.641 L1277.26 682.641 L1276.7 682.641 L1276.14 682.641 L1275.58 682.641 L1275.02 682.641 L1274.46 682.641 L1273.91 682.641 L1273.35 682.641 L1272.79 682.641 L1272.23 682.641 L1271.67 682.641 L1271.11 682.641 L1270.55 682.641 L1269.99 682.641 L1269.43 682.641 L1268.87 682.641 L1268.31 682.641 L1267.75 682.641 L1267.19 682.641 L1266.63 682.641 L1266.08 682.641 L1265.52 682.641 L1264.96 682.641 L1264.4 682.641 L1263.84 682.641 L1263.28 682.641 L1262.72 682.641 L1262.16 682.641 L1261.6 682.641 L1261.04 682.641 L1260.48 682.641 L1259.92 682.641 L1259.36 682.641 L1258.81 682.641 L1258.25 682.641 L1257.69 682.641 L1257.13 682.641 L1256.57 682.641 L1256.01 682.641 L1255.45 682.641 L1254.89 682.641 L1254.33 682.641 L1253.77 682.641 L1253.21 682.641 L1252.65 682.641 L1252.09 682.641 L1251.54 682.641 L1250.98 682.641 L1250.42 682.641 L1249.86 682.641 L1249.3 682.641 L1248.74 682.641 L1248.18 682.641 L1247.62 682.641 L1247.06 682.641 L1246.5 682.641 L1245.94 682.641 L1245.38 682.641 L1244.82 682.641 L1244.26 682.641 L1243.71 682.641 L1243.15 682.641 L1242.59 682.641 L1242.03 682.641 L1241.47 682.641 L1240.91 682.641 L1240.35 682.641 L1239.79 682.641 L1239.23 682.641 L1238.67 682.641 L1238.11 682.641 L1237.55 682.641 L1236.99 682.641 L1236.44 682.641 L1235.88 682.641 L1235.32 682.641 L1234.76 682.641 L1234.2 682.641 L1233.64 682.641 L1233.08 682.641 L1232.52 682.641 L1231.96 682.641 L1231.4 682.641 L1230.84 682.641 L1230.28 682.641 L1229.72 682.641 L1229.17 682.641 L1228.61 682.641 L1228.05 682.641 L1227.49 682.641 L1226.93 682.641 L1226.37 682.641 L1225.81 682.641 L1225.25 682.641 L1224.69 682.641 L1224.13 682.641 L1223.57 682.641 L1223.01 682.641 L1222.45 682.641 L1221.89 682.641 L1221.34 682.641 L1220.78 682.641 L1220.22 682.641 L1219.66 682.641 L1219.1 682.641 L1218.54 682.641 L1217.98 682.641 L1217.42 682.641 L1216.86 682.641 L1216.3 682.641 L1215.74 682.641 L1215.18 682.641 L1214.62 682.641 L1214.07 682.641 L1213.51 682.641 L1212.95 682.641 L1212.39 682.641 L1211.83 682.641 L1211.27 682.641 L1210.71 682.641 L1210.15 682.641 L1209.59 682.641 L1209.03 682.641 L1208.47 682.641 L1207.91 682.641 L1207.35 682.641 L1206.8 682.641 L1206.24 682.641 L1205.68 682.641 L1205.12 682.641 L1204.56 682.641 L1204 682.641 L1203.44 682.641 L1202.88 682.641 L1202.32 682.641 L1201.76 682.641 L1201.2 682.641 L1200.64 682.641 L1200.08 682.641 L1199.52 682.641 L1198.97 682.641 L1198.41 682.641 L1197.85 682.641 L1197.29 682.641 L1196.73 682.641 L1196.17 682.641 L1195.61 682.641 L1195.05 682.641 L1194.49 682.641 L1193.93 682.641 L1193.37 682.641 L1192.81 682.641 L1192.25 682.641 L1191.7 682.641 L1191.14 682.641 L1190.58 682.641 L1190.02 682.641 L1189.46 682.641 L1188.9 682.641 L1188.34 682.641 L1187.78 682.641 L1187.22 682.641 L1186.66 682.641 L1186.1 682.641 L1185.54 682.641 L1184.98 682.641 L1184.43 682.641 L1183.87 682.641 L1183.31 682.641 L1182.75 682.641 L1182.19 682.641 L1181.63 682.641 L1181.07 682.641 L1180.51 682.641 L1179.95 682.641 L1179.39 682.641 L1178.83 682.641 L1178.27 682.641 L1177.71 682.641 L1177.15 682.641 L1176.6 682.641 L1176.04 682.641 L1175.48 682.641 L1174.92 682.641 L1174.36 682.641 L1173.8 682.641 L1173.24 682.641 L1172.68 682.641 L1172.12 682.641 L1171.56 682.641 L1171 682.641 L1170.44 682.641 L1169.88 682.641 L1169.33 682.641 L1168.77 682.641 L1168.21 682.641 L1167.65 682.641 L1167.09 682.641 L1166.53 682.641 L1165.97 682.641 L1165.41 682.641 L1164.85 682.641 L1164.29 682.641 L1163.73 682.641 L1163.17 682.641 L1162.61 682.641 L1162.05 682.641 L1161.5 682.641 L1160.94 682.641 L1160.38 682.641 L1159.82 682.641 L1159.26 682.641 L1158.7 682.641 L1158.14 682.641 L1157.58 682.641 L1157.02 682.641 L1156.46 682.641 L1155.9 682.641 L1155.34 682.641 L1154.78 682.641 L1154.23 682.641 L1153.67 682.641 L1153.11 682.641 L1152.55 682.641 L1151.99 682.641 L1151.43 682.641 L1150.87 682.641 L1150.31 682.641 L1149.75 682.641 L1149.19 682.641 L1148.63 682.641 L1148.07 682.641 L1147.51 682.641 L1146.96 682.641 L1146.4 682.641 L1145.84 682.641 L1145.28 682.641 L1144.72 682.641 L1144.16 682.641 L1143.6 682.641 L1143.04 682.641 L1142.48 682.641 L1141.92 682.641 L1141.36 682.641 L1140.8 682.641 L1140.24 682.641 L1139.68 682.641 L1139.13 682.641 L1138.57 682.641 L1138.01 682.641 L1137.45 682.641 L1136.89 682.641 L1136.33 682.641 L1135.77 682.641 L1135.21 682.641 L1134.65 682.641 L1134.09 682.641 L1133.53 682.641 L1132.97 682.641 L1132.41 682.641 L1131.86 682.641 L1131.3 682.641 L1130.74 682.641 L1130.18 682.641 L1129.62 682.641 L1129.06 682.641 L1128.5 682.641 L1127.94 682.641 L1127.38 682.641 L1126.82 682.641 L1126.26 682.641 L1125.7 682.641 L1125.14 682.641 L1124.59 682.641 L1124.03 682.641 L1123.47 682.641 L1122.91 682.641 L1122.35 682.641 L1121.79 682.641 L1121.23 682.641 L1120.67 682.641 L1120.11 682.641 L1119.55 682.641 L1118.99 682.641 L1118.43 682.641 L1117.87 682.641 L1117.31 682.641 L1116.76 682.641 L1116.2 682.641 L1115.64 682.641 L1115.08 682.641 L1114.52 682.641 L1113.96 682.641 L1113.4 682.641 L1112.84 682.641 L1112.28 682.641 L1111.72 682.641 L1111.16 682.641 L1110.6 682.641 L1110.04 682.641 L1109.49 682.641 L1108.93 682.641 L1108.37 682.641 L1107.81 682.641 L1107.25 682.641 L1106.69 682.641 L1106.13 682.641 L1105.57 682.641 L1105.01 682.641 L1104.45 682.641 L1103.89 682.641 L1103.33 682.641 L1102.77 682.641 L1102.22 682.641 L1101.66 682.641 L1101.1 682.641 L1100.54 682.641 L1099.98 682.641 L1099.42 682.641 L1098.86 682.641 L1098.3 682.641 L1097.74 682.641 L1097.18 682.641 L1096.62 682.641 L1096.06 682.641 L1095.5 682.641 L1094.94 682.641 L1094.39 682.641 L1093.83 682.641 L1093.27 682.641 L1092.71 682.641 L1092.15 682.641 L1091.59 682.641 L1091.03 682.641 L1090.47 682.641 L1089.91 682.641 L1089.35 682.641 L1088.79 682.641 L1088.23 682.641 L1087.67 682.641 L1087.12 682.641 L1086.56 682.641 L1086 682.641 L1085.44 682.641 L1084.88 682.641 L1084.32 682.641 L1083.76 682.641 L1083.2 682.641 L1082.64 682.641 L1082.08 682.641 L1081.52 682.641 L1080.96 682.641 L1080.4 682.641 L1079.85 682.641 L1079.29 682.641 L1078.73 682.641 L1078.17 682.641 L1077.61 682.641 L1077.05 682.641 L1076.49 682.641 L1075.93 682.641 L1075.37 682.641 L1074.81 682.641 L1074.25 682.641 L1073.69 682.641 L1073.13 682.641 L1072.57 682.641 L1072.02 682.641 L1071.46 682.641 L1070.9 682.641 L1070.34 682.641 L1069.78 682.641 L1069.22 682.641 L1068.66 682.641 L1068.1 682.641 L1067.54 682.641 L1066.98 682.641 L1066.42 682.641 L1065.86 682.641 L1065.3 682.641 L1064.75 682.641 L1064.19 682.641 L1063.63 682.641 L1063.07 682.641 L1062.51 682.641 L1061.95 682.641 L1061.39 682.641 L1060.83 682.641 L1060.27 682.641 L1059.71 682.641 L1059.15 682.641 L1058.59 682.641 L1058.03 682.641 L1057.48 682.641 L1056.92 682.641 L1056.36 682.641 L1055.8 682.641 L1055.24 682.641 L1054.68 682.641 L1054.12 682.641 L1053.56 682.641 L1053 682.641 L1052.44 682.641 L1051.88 682.641 L1051.32 682.641 L1050.76 682.641 L1050.2 682.641 L1049.65 682.641 L1049.09 682.641 L1048.53 682.641 L1047.97 682.641 L1047.41 682.641 L1046.85 682.641 L1046.29 682.641 L1045.73 682.641 L1045.17 682.641 L1044.61 682.641 L1044.05 682.641 L1043.49 682.641 L1042.93 682.641 L1042.38 682.641 L1041.82 682.641 L1041.26 682.641 L1040.7 682.641 L1040.14 682.641 L1039.58 682.641 L1039.02 682.641 L1038.46 682.641 L1037.9 682.641 L1037.34 682.641 L1036.78 682.641 L1036.22 682.641 L1035.66 682.641 L1035.1 682.641 L1034.55 682.641 L1033.99 682.641 L1033.43 682.641 L1032.87 682.641 L1032.31 682.641 L1031.75 682.641 L1031.19 682.641 L1030.63 682.641 L1030.07 682.641 L1029.51 682.641 L1028.95 682.641 L1028.39 682.641 L1027.83 682.641 L1027.28 682.641 L1026.72 682.641 L1026.16 682.641 L1025.6 682.641 L1025.04 682.641 L1024.48 682.641 L1023.92 682.641 L1023.36 682.641 L1022.8 682.641 L1022.24 682.641 L1021.68 682.641 L1021.12 682.641 L1020.56 682.641 L1020.01 682.641 L1019.45 682.641 L1018.89 682.641 L1018.33 682.641 L1017.77 682.641 L1017.21 682.641 L1016.65 682.641 L1016.09 682.641 L1015.53 682.641 L1014.97 682.641 L1014.41 682.641 L1013.85 682.641 L1013.29 682.641 L1012.73 682.641 L1012.18 682.641 L1011.62 682.641 L1011.06 682.641 L1010.5 682.641 L1009.94 682.641 L1009.38 682.641 L1008.82 682.641 L1008.26 682.641 L1007.7 682.641 L1007.14 682.641 L1006.58 682.641 L1006.02 682.641 L1005.46 682.641 L1004.91 682.641 L1004.35 682.641 L1003.79 682.641 L1003.23 682.641 L1002.67 682.641 L1002.11 682.641 L1001.55 682.641 L1000.99 682.641 L1000.43 682.641 L999.872 682.641 L999.313 682.641 L998.754 682.641 L998.194 682.641 L997.635 682.641 L997.076 682.641 L996.517 682.641 L995.957 682.641 L995.398 682.641 L994.839 682.641 L994.28 682.641 L993.72 682.641 L993.161 682.641 L992.602 682.641 L992.043 682.641 L991.483 682.641 L990.924 682.641 L990.365 682.641 L989.806 682.641 L989.246 682.641 L988.687 682.641 L988.128 682.641 L987.569 682.641 L987.009 682.641 L986.45 682.641 L985.891 682.641 L985.332 682.641 L984.772 682.641 L984.213 682.641 L983.654 682.641 L983.095 682.641 L982.535 682.641 L981.976 682.641 L981.417 682.641 L980.858 682.641 L980.298 682.641 L979.739 682.641 L979.18 682.641 L978.621 682.641 L978.061 682.641 L977.502 682.641 L976.943 682.641 L976.384 682.641 L975.824 682.641 L975.265 682.641 L974.706 682.641 L974.147 682.641 L973.587 682.641 L973.028 682.641 L972.469 682.641 L971.91 682.641 L971.35 682.641 L970.791 682.641 L970.232 682.641 L969.673 682.641 L969.113 682.641 L968.554 682.641 L967.995 682.641 L967.436 682.641 L966.876 682.641 L966.317 682.641 L965.758 682.641 L965.199 682.641 L964.639 682.641 L964.08 682.641 L963.521 682.641 L962.962 682.641 L962.402 682.641 L961.843 682.641 L961.284 682.641 L960.725 682.641 L960.165 682.641 L959.606 682.641 L959.047 682.641 L958.488 682.641 L957.928 682.641 L957.369 682.641 L956.81 682.641 L956.251 682.641 L955.691 682.641 L955.132 682.641 L954.573 682.641 L954.014 682.641 L953.454 682.641 L952.895 682.641 L952.336 682.641 L951.777 682.641 L951.217 682.641 L950.658 682.641 L950.099 682.641 L949.54 682.641 L948.98 682.641 L948.421 682.641 L947.862 682.641 L947.303 682.641 L946.743 682.641 L946.184 682.641 L945.625 682.641 L945.066 682.641 L944.506 682.641 L943.947 682.641 L943.388 682.641 L942.829 682.641 L942.269 682.641 L941.71 682.641 L941.151 682.641 L940.592 682.641 L940.032 682.641 L939.473 682.641 L938.914 682.641 L938.355 682.641 L937.795 682.641 L937.236 682.641 L936.677 682.641 L936.118 682.641 L935.558 682.641 L934.999 682.641 L934.44 682.641 L933.881 682.641 L933.321 682.641 L932.762 682.641 L932.203 682.641 L931.644 682.641 L931.084 682.641 L930.525 682.641 L929.966 682.641 L929.406 682.641 L928.847 682.641 L928.288 682.641 L927.729 682.641 L927.169 682.641 L926.61 682.641 L926.051 682.641 L925.492 682.641 L924.932 682.641 L924.373 682.641 L923.814 682.641 L923.255 682.641 L922.695 682.641 L922.136 682.641 L921.577 682.641 L921.018 682.641 L920.458 682.641 L919.899 682.641 L919.34 682.641 L918.781 682.641 L918.221 682.641 L917.662 682.641 L917.103 682.641 L916.544 682.641 L915.984 682.641 L915.425 682.641 L914.866 682.641 L914.307 682.641 L913.747 682.641 L913.188 682.641 L912.629 682.641 L912.07 682.641 L911.51 682.641 L910.951 682.641 L910.392 682.641 L909.833 682.641 L909.273 682.641 L908.714 682.641 L908.155 682.641 L907.596 682.641 L907.036 682.641 L906.477 682.641 L905.918 682.641 L905.359 682.641 L904.799 682.641 L904.24 682.641 L903.681 682.641 L903.122 682.641 L902.562 682.641 L902.003 682.641 L901.444 682.641 L900.885 682.641 L900.325 682.641 L899.766 682.641 L899.207 682.641 L898.648 682.641 L898.088 682.641 L897.529 682.641 L896.97 682.641 L896.411 682.641 L895.851 682.641 L895.292 682.641 L894.733 682.641 L894.174 682.641 L893.614 682.641 L893.055 682.641 L892.496 682.641 L891.937 682.641 L891.377 682.641 L890.818 682.641 L890.259 682.641 L889.7 682.641 L889.14 682.641 L888.581 682.641 L888.022 682.641 L887.463 682.641 L886.903 682.641 L886.344 682.641 L885.785 682.641 L885.226 682.641 L884.666 682.641 L884.107 682.641 L883.548 682.641 L882.989 682.641 L882.429 682.641 L881.87 682.641 L881.311 682.641 L880.752 682.641 L880.192 682.641 L879.633 682.641 L879.074 682.641 L878.515 682.641 L877.955 682.641 L877.396 682.641 L876.837 682.641 L876.278 682.641 L875.718 682.641 L875.159 682.641 L874.6 682.641 L874.041 682.641 L873.481 682.641 L872.922 682.641 L872.363 682.641 L871.804 682.641 L871.244 682.641 L870.685 682.641 L870.126 682.641 L869.567 682.641 L869.007 682.641 L868.448 682.641 L867.889 682.641 L867.33 682.641 L866.77 682.641 L866.211 682.641 L865.652 682.641 L865.093 682.641 L864.533 682.641 L863.974 682.641 L863.415 682.641 L862.856 682.641 L862.296 682.641 L861.737 682.641 L861.178 682.641 L860.619 682.641 L860.059 682.641 L859.5 682.641 L858.941 682.641 L858.382 682.641 L857.822 682.641 L857.263 682.641 L856.704 682.641 L856.145 682.641 L855.585 682.641 L855.026 682.641 L854.467 682.641 L853.908 682.641 L853.348 682.641 L852.789 682.641 L852.23 682.641 L851.671 682.641 L851.111 682.641 L850.552 682.641 L849.993 682.641 L849.434 682.641 L848.874 682.641 L848.315 682.641 L847.756 682.641 L847.197 682.641 L846.637 682.641 L846.078 682.641 L845.519 682.641 L844.96 682.641 L844.4 682.641 L843.841 682.641 L843.282 682.641 L842.723 682.641 L842.163 682.641 L841.604 682.641 L841.045 682.641 L840.486 682.641 L839.926 682.641 L839.367 682.641 L838.808 682.641 L838.249 682.641 L837.689 682.641 L837.13 682.641 L836.571 682.641 L836.012 682.641 L835.452 682.641 L834.893 682.641 L834.334 682.641 L833.775 682.641 L833.215 682.641 L832.656 682.641 L832.097 682.641 L831.538 682.641 L830.978 682.641 L830.419 682.641 L829.86 682.641 L829.301 682.641 L828.741 682.641 L828.182 682.641 L827.623 682.641 L827.064 682.641 L826.504 682.641 L825.945 682.641 L825.386 682.641 L824.827 682.641 L824.267 682.641 L823.708 682.641 L823.149 682.641 L822.59 682.641 L822.03 682.641 L821.471 682.641 L820.912 682.641 L820.353 682.641 L819.793 682.641 L819.234 682.641 L818.675 682.641 L818.116 682.641 L817.556 682.641 L816.997 682.641 L816.438 682.641 L815.879 682.641 L815.319 682.641 L814.76 682.641 L814.201 682.641 L813.642 682.641 L813.082 682.641 L812.523 682.641 L811.964 682.641 L811.405 682.641 L810.845 682.641 L810.286 682.641 L809.727 682.641 L809.168 682.641 L808.608 682.641 L808.049 682.641 L807.49 682.641 L806.931 682.641 L806.371 682.641 L805.812 682.641 L805.253 682.641 L804.693 682.641 L804.134 682.641 L803.575 682.641 L803.016 682.641 L802.456 682.641 L801.897 682.641 L801.338 682.641 L800.779 682.641 L800.219 682.641 L799.66 682.641 L799.101 682.641 L798.542 682.641 L797.982 682.641 L797.423 682.641 L796.864 682.641 L796.305 682.641 L795.745 682.641 L795.186 682.641 L794.627 682.641 L794.068 682.641 L793.508 682.641 L792.949 682.641 L792.39 682.641 L791.831 682.641 L791.271 682.641 L790.712 682.641 L790.153 682.641 L789.594 682.641 L789.034 682.641 L788.475 682.641 L787.916 682.641 L787.357 682.641 L786.797 682.641 L786.238 682.641 L785.679 682.641 L785.12 682.641 L784.56 682.641 L784.001 682.641 L783.442 682.641 L782.883 682.641 L782.323 682.641 L781.764 682.641 L781.205 682.641 L780.646 682.641 L780.086 682.641 L779.527 682.641 L778.968 682.641 L778.409 682.641 L777.849 682.641 L777.29 682.641 L776.731 682.641 L776.172 682.641 L775.612 682.641 L775.053 682.641 L774.494 682.641 L773.935 682.641 L773.375 682.641 L772.816 682.641 L772.257 682.641 L771.698 682.641 L771.138 682.641 L770.579 682.641 L770.02 682.641 L769.461 682.641 L768.901 682.641 L768.342 682.641 L767.783 682.641 L767.224 682.641 L766.664 682.641 L766.105 682.641 L765.546 682.641 L764.987 682.641 L764.427 682.641 L763.868 682.641 L763.309 682.641 L762.75 682.641 L762.19 682.641 L761.631 682.641 L761.072 682.641 L760.513 682.641 L759.953 682.641 L759.394 682.641 L758.835 682.641 L758.276 682.641 L757.716 682.641 L757.157 682.641 L756.598 682.641 L756.039 682.641 L755.479 682.641 L754.92 682.641 L754.361 682.641 L753.802 682.641 L753.242 682.641 L752.683 682.641 L752.124 682.641 L751.565 682.641 L751.005 682.641 L750.446 682.641 L749.887 682.641 L749.328 682.641 L748.768 682.641 L748.209 682.641 L747.65 682.641 L747.091 682.641 L746.531 682.641 L745.972 682.641 L745.413 682.641 L744.854 682.641 L744.294 682.641 L743.735 682.641 L743.176 682.641 L742.617 682.641 L742.057 682.641 L741.498 682.641 L740.939 682.641 L740.38 682.641 L739.82 682.641 L739.261 682.641 L738.702 682.641 L738.143 682.641 L737.583 682.641 L737.024 682.641 L736.465 682.641 L735.906 682.641 L735.346 682.641 L734.787 682.641 L734.228 682.641 L733.669 682.641 L733.109 682.641 L732.55 682.641 L731.991 682.641 L731.432 682.641 L730.872 682.641 L730.313 682.641 L729.754 682.641 L729.195 682.641 L728.635 682.641 L728.076 682.641 L727.517 682.641 L726.958 682.641 L726.398 682.641 L725.839 682.641 L725.28 682.641 L724.721 682.641 L724.161 682.641 L723.602 682.641 L723.043 682.641 L722.484 682.641 L721.924 682.641 L721.365 682.641 L720.806 682.641 L720.247 682.641  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.825 720.806,686.825 721.365,686.825 721.924,686.825 722.484,686.825 723.043,686.825 723.602,686.825 724.161,686.825 724.721,686.825 725.28,686.825 725.839,686.825 726.398,686.825 726.958,686.825 727.517,686.825 728.076,686.825 728.635,686.825 729.195,686.825 729.754,686.825 730.313,686.825 730.872,686.825 731.432,686.825 731.991,686.825 732.55,686.825 733.109,686.825 733.669,686.825 734.228,686.825 734.787,686.825 735.346,686.825 735.906,686.825 736.465,686.825 737.024,686.825 737.583,686.825 738.143,686.825 738.702,686.825 739.261,686.825 739.82,686.825 740.38,686.825 740.939,686.825 741.498,686.825 742.057,686.825 742.617,686.825 743.176,686.825 743.735,686.825 744.294,686.825 744.854,686.825 745.413,686.825 745.972,686.825 746.531,686.825 747.091,686.825 747.65,686.825 748.209,686.825 748.768,686.825 749.328,686.825 749.887,686.825 750.446,686.825 751.005,686.825 751.565,686.825 752.124,686.825 752.683,686.825 753.242,686.825 753.802,686.825 754.361,686.825 754.92,686.825 755.479,686.825 756.039,686.825 756.598,686.825 757.157,686.825 757.716,686.825 758.276,686.825 758.835,686.825 759.394,686.825 759.953,686.825 760.513,686.825 761.072,686.825 761.631,686.825 762.19,686.825 762.75,686.825 763.309,686.825 763.868,686.825 764.427,686.825 764.987,686.825 765.546,686.825 766.105,686.825 766.664,686.825 767.224,686.825 767.783,686.825 768.342,686.825 768.901,686.825 769.461,686.825 770.02,686.825 770.579,686.825 771.138,686.825 771.698,686.825 772.257,686.825 772.816,686.825 773.375,686.825 773.935,686.825 774.494,686.825 775.053,686.825 775.612,686.825 776.172,686.825 776.731,686.825 777.29,686.825 777.849,686.825 778.409,686.825 778.968,686.825 779.527,686.825 780.086,686.825 780.646,686.825 781.205,686.825 781.764,686.825 782.323,686.825 782.883,686.825 783.442,686.825 784.001,686.825 784.56,686.825 785.12,686.825 785.679,686.825 786.238,686.825 786.797,686.825 787.357,686.825 787.916,686.825 788.475,686.825 789.034,686.825 789.594,686.825 790.153,686.825 790.712,686.825 791.271,686.825 791.831,686.825 792.39,686.825 792.949,686.825 793.508,686.825 794.068,686.825 794.627,686.825 795.186,686.825 795.745,686.825 796.305,686.825 796.864,686.825 797.423,686.825 797.982,686.825 798.542,686.825 799.101,686.825 799.66,686.825 800.219,686.825 800.779,686.825 801.338,686.825 801.897,686.825 802.456,686.825 803.016,686.825 803.575,686.825 804.134,686.825 804.693,686.825 805.253,686.825 805.812,686.825 806.371,686.825 806.931,686.825 807.49,686.825 808.049,686.825 808.608,686.825 809.168,686.825 809.727,686.825 810.286,686.825 810.845,686.825 811.405,686.825 811.964,686.825 812.523,686.825 813.082,686.825 813.642,686.825 814.201,686.825 814.76,686.825 815.319,686.825 815.879,686.825 816.438,686.825 816.997,686.825 817.556,686.825 818.116,686.825 818.675,686.825 819.234,686.825 819.793,686.825 820.353,686.825 820.912,686.825 821.471,686.825 822.03,686.825 822.59,686.825 823.149,686.825 823.708,686.825 824.267,686.825 824.827,686.825 825.386,686.825 825.945,686.825 826.504,686.825 827.064,686.825 827.623,686.825 828.182,686.825 828.741,686.825 829.301,686.825 829.86,686.825 830.419,686.825 830.978,686.825 831.538,686.825 832.097,686.825 832.656,686.825 833.215,686.825 833.775,686.825 834.334,686.825 834.893,686.825 835.452,686.825 836.012,686.825 836.571,686.825 837.13,686.825 837.689,686.825 838.249,686.825 838.808,686.825 839.367,686.825 839.926,686.825 840.486,686.825 841.045,686.825 841.604,686.825 842.163,686.825 842.723,686.825 843.282,686.825 843.841,686.825 844.4,686.825 844.96,686.825 845.519,686.825 846.078,686.825 846.637,686.825 847.197,686.825 847.756,686.825 848.315,686.825 848.874,686.825 849.434,686.825 849.993,686.825 850.552,686.825 851.111,686.825 851.671,686.825 852.23,686.825 852.789,686.825 853.348,686.825 853.908,686.825 854.467,686.825 855.026,686.825 855.585,686.825 856.145,686.825 856.704,686.825 857.263,686.825 857.822,686.825 858.382,686.825 858.941,686.825 859.5,686.825 860.059,686.825 860.619,686.825 861.178,686.825 861.737,686.825 862.296,686.825 862.856,686.825 863.415,686.825 863.974,686.825 864.533,686.825 865.093,686.825 865.652,686.825 866.211,686.825 866.77,686.825 867.33,686.825 867.889,686.825 868.448,686.825 869.007,686.825 869.567,686.825 870.126,686.825 870.685,686.825 871.244,686.825 871.804,686.825 872.363,686.825 872.922,686.825 873.481,686.825 874.041,686.825 874.6,686.825 875.159,686.825 875.718,686.825 876.278,686.825 876.837,686.825 877.396,686.825 877.955,686.825 878.515,686.825 879.074,686.825 879.633,686.825 880.192,686.825 880.752,686.825 881.311,686.825 881.87,686.825 882.429,686.825 882.989,686.825 883.548,686.825 884.107,686.825 884.666,686.825 885.226,686.825 885.785,686.825 886.344,686.825 886.903,686.825 887.463,686.825 888.022,686.825 888.581,686.825 889.14,686.825 889.7,686.825 890.259,686.825 890.818,686.825 891.377,686.825 891.937,686.825 892.496,686.825 893.055,686.825 893.614,686.825 894.174,686.825 894.733,686.825 895.292,686.825 895.851,686.825 896.411,686.825 896.97,686.825 897.529,686.825 898.088,686.825 898.648,686.825 899.207,686.825 899.766,686.825 900.325,686.825 900.885,686.825 901.444,686.825 902.003,686.825 902.562,686.825 903.122,686.825 903.681,686.825 904.24,686.825 904.799,686.825 905.359,686.825 905.918,686.825 906.477,686.825 907.036,686.825 907.596,686.825 908.155,686.825 908.714,686.825 909.273,686.825 909.833,686.825 910.392,686.825 910.951,686.825 911.51,686.825 912.07,686.825 912.629,686.825 913.188,686.825 913.747,686.825 914.307,686.825 914.866,686.825 915.425,686.825 915.984,686.825 916.544,686.825 917.103,686.825 917.662,686.825 918.221,686.825 918.781,686.825 919.34,686.825 919.899,686.825 920.458,686.825 921.018,686.825 921.577,686.825 922.136,686.825 922.695,686.825 923.255,686.825 923.814,686.825 924.373,686.825 924.932,686.825 925.492,686.825 926.051,686.825 926.61,686.825 927.169,686.825 927.729,686.825 928.288,686.825 928.847,686.825 929.406,686.825 929.966,686.825 930.525,686.825 931.084,686.825 931.644,686.825 932.203,686.825 932.762,686.825 933.321,686.825 933.881,686.825 934.44,686.825 934.999,686.825 935.558,686.825 936.118,686.825 936.677,686.825 937.236,686.825 937.795,686.825 938.355,686.825 938.914,686.825 939.473,686.825 940.032,686.825 940.592,686.825 941.151,686.825 941.71,686.825 942.269,686.825 942.829,686.825 943.388,686.825 943.947,686.825 944.506,686.825 945.066,686.825 945.625,686.825 946.184,686.825 946.743,686.825 947.303,686.825 947.862,686.825 948.421,686.825 948.98,686.825 949.54,686.825 950.099,686.825 950.658,686.825 951.217,686.825 951.777,686.825 952.336,686.825 952.895,686.825 953.454,686.825 954.014,686.825 954.573,686.825 955.132,686.825 955.691,686.825 956.251,686.825 956.81,686.825 957.369,686.825 957.928,686.825 958.488,686.825 959.047,686.825 959.606,686.825 960.165,686.825 960.725,686.825 961.284,686.825 961.843,686.825 962.402,686.825 962.962,686.825 963.521,686.825 964.08,686.825 964.639,686.825 965.199,686.825 965.758,686.825 966.317,686.825 966.876,686.825 967.436,686.825 967.995,686.825 968.554,686.825 969.113,686.825 969.673,686.825 970.232,686.825 970.791,686.825 971.35,686.825 971.91,686.825 972.469,686.825 973.028,686.825 973.587,686.825 974.147,686.825 974.706,686.825 975.265,686.825 975.824,686.825 976.384,686.825 976.943,686.825 977.502,686.825 978.061,686.825 978.621,686.825 979.18,686.825 979.739,686.825 980.298,686.825 980.858,686.825 981.417,686.825 981.976,686.825 982.535,686.825 983.095,686.825 983.654,686.825 984.213,686.825 984.772,686.825 985.332,686.825 985.891,686.825 986.45,686.825 987.009,686.825 987.569,686.825 988.128,686.825 988.687,686.825 989.246,686.825 989.806,686.825 990.365,686.825 990.924,686.825 991.483,686.825 992.043,686.825 992.602,686.825 993.161,686.825 993.72,686.825 994.28,686.825 994.839,686.825 995.398,686.825 995.957,686.825 996.517,686.825 997.076,686.825 997.635,686.825 998.194,686.825 998.754,686.825 999.313,686.825 999.872,686.825 1000.43,686.825 1000.99,686.825 1001.55,686.825 1002.11,686.825 1002.67,686.825 1003.23,686.825 1003.79,686.825 1004.35,686.825 1004.91,686.825 1005.46,686.825 1006.02,686.825 1006.58,686.825 1007.14,686.825 1007.7,686.825 1008.26,686.825 1008.82,686.825 1009.38,686.825 1009.94,686.825 1010.5,686.825 1011.06,686.825 1011.62,686.825 1012.18,686.825 1012.73,686.825 1013.29,686.825 1013.85,686.825 1014.41,686.825 1014.97,686.825 1015.53,686.825 1016.09,686.825 1016.65,686.825 1017.21,686.825 1017.77,686.825 1018.33,686.825 1018.89,686.825 1019.45,686.825 1020.01,686.825 1020.56,686.825 1021.12,686.825 1021.68,686.825 1022.24,686.825 1022.8,686.825 1023.36,686.825 1023.92,686.825 1024.48,686.825 1025.04,686.825 1025.6,686.825 1026.16,686.825 1026.72,686.825 1027.28,686.825 1027.83,686.825 1028.39,686.825 1028.95,686.825 1029.51,686.825 1030.07,686.825 1030.63,686.825 1031.19,686.825 1031.75,686.825 1032.31,686.825 1032.87,686.825 1033.43,686.825 1033.99,686.825 1034.55,686.825 1035.1,686.825 1035.66,686.825 1036.22,686.825 1036.78,686.825 1037.34,686.825 1037.9,686.825 1038.46,686.825 1039.02,686.825 1039.58,686.825 1040.14,686.825 1040.7,686.825 1041.26,686.825 1041.82,686.825 1042.38,686.825 1042.93,686.825 1043.49,686.825 1044.05,686.825 1044.61,686.825 1045.17,686.825 1045.73,686.825 1046.29,686.825 1046.85,686.825 1047.41,686.825 1047.97,686.825 1048.53,686.825 1049.09,686.825 1049.65,686.825 1050.2,686.825 1050.76,686.825 1051.32,686.825 1051.88,686.825 1052.44,686.825 1053,686.825 1053.56,686.825 1054.12,686.825 1054.68,686.825 1055.24,686.825 1055.8,686.825 1056.36,686.825 1056.92,686.825 1057.48,686.825 1058.03,686.825 1058.59,686.825 1059.15,686.825 1059.71,686.825 1060.27,686.825 1060.83,686.825 1061.39,686.825 1061.95,686.825 1062.51,686.825 1063.07,686.825 1063.63,686.825 1064.19,686.825 1064.75,686.825 1065.3,686.825 1065.86,686.825 1066.42,686.825 1066.98,686.825 1067.54,686.825 1068.1,686.825 1068.66,686.825 1069.22,686.825 1069.78,686.825 1070.34,686.825 1070.9,686.825 1071.46,686.825 1072.02,686.825 1072.57,686.825 1073.13,686.825 1073.69,686.825 1074.25,686.825 1074.81,686.825 1075.37,686.825 1075.93,686.825 1076.49,686.825 1077.05,686.825 1077.61,686.825 1078.17,686.825 1078.73,686.825 1079.29,686.825 1079.85,686.825 1080.4,686.825 1080.96,686.825 1081.52,686.825 1082.08,686.825 1082.64,686.825 1083.2,686.825 1083.76,686.825 1084.32,686.825 1084.88,686.825 1085.44,686.825 1086,686.825 1086.56,686.825 1087.12,686.825 1087.67,686.825 1088.23,686.825 1088.79,686.825 1089.35,686.825 1089.91,686.825 1090.47,686.825 1091.03,686.825 1091.59,686.825 1092.15,686.825 1092.71,686.825 1093.27,686.825 1093.83,686.825 1094.39,686.825 1094.94,686.825 1095.5,686.825 1096.06,686.825 1096.62,686.825 1097.18,686.825 1097.74,686.825 1098.3,686.825 1098.86,686.825 1099.42,686.825 1099.98,686.825 1100.54,686.825 1101.1,686.825 1101.66,686.825 1102.22,686.825 1102.77,686.825 1103.33,686.825 1103.89,686.825 1104.45,686.825 1105.01,686.825 1105.57,686.825 1106.13,686.825 1106.69,686.825 1107.25,686.825 1107.81,686.825 1108.37,686.825 1108.93,686.825 1109.49,686.825 1110.04,686.825 1110.6,686.825 1111.16,686.825 1111.72,686.825 1112.28,686.825 1112.84,686.825 1113.4,686.825 1113.96,686.825 1114.52,686.825 1115.08,686.825 1115.64,686.825 1116.2,686.825 1116.76,686.825 1117.31,686.825 1117.87,686.825 1118.43,686.825 1118.99,686.825 1119.55,686.825 1120.11,686.825 1120.67,686.825 1121.23,686.825 1121.79,686.825 1122.35,686.825 1122.91,686.825 1123.47,686.825 1124.03,686.825 1124.59,686.825 1125.14,686.825 1125.7,686.825 1126.26,686.825 1126.82,686.825 1127.38,686.825 1127.94,686.825 1128.5,686.825 1129.06,686.825 1129.62,686.825 1130.18,686.825 1130.74,686.825 1131.3,686.825 1131.86,686.825 1132.41,686.825 1132.97,686.825 1133.53,686.825 1134.09,686.825 1134.65,686.825 1135.21,686.825 1135.77,686.825 1136.33,686.825 1136.89,686.825 1137.45,686.825 1138.01,686.825 1138.57,686.825 1139.13,686.825 1139.68,686.825 1140.24,686.825 1140.8,686.825 1141.36,686.825 1141.92,686.825 1142.48,686.825 1143.04,686.825 1143.6,686.825 1144.16,686.825 1144.72,686.825 1145.28,686.825 1145.84,686.825 1146.4,686.825 1146.96,686.825 1147.51,686.825 1148.07,686.825 1148.63,686.825 1149.19,686.825 1149.75,686.825 1150.31,686.825 1150.87,686.825 1151.43,686.825 1151.99,686.825 1152.55,686.825 1153.11,686.825 1153.67,686.825 1154.23,686.825 1154.78,686.825 1155.34,686.825 1155.9,686.825 1156.46,686.825 1157.02,686.825 1157.58,686.825 1158.14,686.825 1158.7,686.825 1159.26,686.825 1159.82,686.825 1160.38,686.825 1160.94,686.825 1161.5,686.825 1162.05,686.825 1162.61,686.825 1163.17,686.825 1163.73,686.825 1164.29,686.825 1164.85,686.825 1165.41,686.825 1165.97,686.825 1166.53,686.825 1167.09,686.825 1167.65,686.825 1168.21,686.825 1168.77,686.825 1169.33,686.825 1169.88,686.825 1170.44,686.825 1171,686.825 1171.56,686.825 1172.12,686.825 1172.68,686.825 1173.24,686.825 1173.8,686.825 1174.36,686.825 1174.92,686.825 1175.48,686.825 1176.04,686.825 1176.6,686.825 1177.15,686.825 1177.71,686.825 1178.27,686.825 1178.83,686.825 1179.39,686.825 1179.95,686.825 1180.51,686.825 1181.07,686.825 1181.63,686.825 1182.19,686.825 1182.75,686.825 1183.31,686.825 1183.87,686.825 1184.43,686.825 1184.98,686.825 1185.54,686.825 1186.1,686.825 1186.66,686.825 1187.22,686.825 1187.78,686.825 1188.34,686.825 1188.9,686.825 1189.46,686.825 1190.02,686.825 1190.58,686.825 1191.14,686.825 1191.7,686.825 1192.25,686.825 1192.81,686.825 1193.37,686.825 1193.93,686.825 1194.49,686.825 1195.05,686.825 1195.61,686.825 1196.17,686.825 1196.73,686.825 1197.29,686.825 1197.85,686.825 1198.41,686.825 1198.97,686.825 1199.52,686.825 1200.08,686.825 1200.64,686.825 1201.2,686.825 1201.76,686.825 1202.32,686.825 1202.88,686.825 1203.44,686.825 1204,686.825 1204.56,686.825 1205.12,686.825 1205.68,686.825 1206.24,686.825 1206.8,686.825 1207.35,686.825 1207.91,686.825 1208.47,686.825 1209.03,686.825 1209.59,686.825 1210.15,686.825 1210.71,686.825 1211.27,686.825 1211.83,686.825 1212.39,686.825 1212.95,686.825 1213.51,686.825 1214.07,686.825 1214.62,686.825 1215.18,686.825 1215.74,686.825 1216.3,686.825 1216.86,686.825 1217.42,686.825 1217.98,686.825 1218.54,686.825 1219.1,686.825 1219.66,686.825 1220.22,686.825 1220.78,686.825 1221.34,686.825 1221.89,686.825 1222.45,686.825 1223.01,686.825 1223.57,686.825 1224.13,686.825 1224.69,686.825 1225.25,686.825 1225.81,686.825 1226.37,686.825 1226.93,686.825 1227.49,686.825 1228.05,686.825 1228.61,686.825 1229.17,686.825 1229.72,686.825 1230.28,686.825 1230.84,686.825 1231.4,686.825 1231.96,686.825 1232.52,686.825 1233.08,686.825 1233.64,686.825 1234.2,686.825 1234.76,686.825 1235.32,686.825 1235.88,686.825 1236.44,686.825 1236.99,686.825 1237.55,686.825 1238.11,686.825 1238.67,686.825 1239.23,686.825 1239.79,686.825 1240.35,686.825 1240.91,686.825 1241.47,686.825 1242.03,686.825 1242.59,686.825 1243.15,686.825 1243.71,686.825 1244.26,686.825 1244.82,686.825 1245.38,686.825 1245.94,686.825 1246.5,686.825 1247.06,686.825 1247.62,686.825 1248.18,686.825 1248.74,686.825 1249.3,686.825 1249.86,686.825 1250.42,686.825 1250.98,686.825 1251.54,686.825 1252.09,686.825 1252.65,686.825 1253.21,686.825 1253.77,686.825 1254.33,686.825 1254.89,686.825 1255.45,686.825 1256.01,686.825 1256.57,686.825 1257.13,686.825 1257.69,686.825 1258.25,686.825 1258.81,686.825 1259.36,686.825 1259.92,686.825 1260.48,686.825 1261.04,686.825 1261.6,686.825 1262.16,686.825 1262.72,686.825 1263.28,686.825 1263.84,686.825 1264.4,686.825 1264.96,686.825 1265.52,686.825 1266.08,686.825 1266.63,686.825 1267.19,686.825 1267.75,686.825 1268.31,686.825 1268.87,686.825 1269.43,686.825 1269.99,686.825 1270.55,686.825 1271.11,686.825 1271.67,686.825 1272.23,686.825 1272.79,686.825 1273.35,686.825 1273.91,686.825 1274.46,686.825 1275.02,686.825 1275.58,686.825 1276.14,686.825 1276.7,686.825 1277.26,686.825 1277.82,686.825 1278.38,686.825 1278.94,686.825 1279.5,686.825 1280.06,686.825 1280.62,686.825 1281.18,686.825 1281.73,686.825 1282.29,686.825 1282.85,686.825 1283.41,686.825 1283.97,686.825 1284.53,686.825 1285.09,686.825 1285.65,686.825 1286.21,686.825 1286.77,686.825 1287.33,686.825 1287.89,686.825 1288.45,686.825 1289,686.825 1289.56,686.825 1290.12,686.825 1290.68,686.825 1291.24,686.825 1291.8,686.825 1292.36,686.825 1292.92,686.825 1293.48,686.825 1294.04,686.825 1294.6,686.825 1295.16,686.825 1295.72,686.825 1296.28,686.825 1296.83,686.825 1297.39,686.825 1297.95,686.825 1298.51,686.825 1299.07,686.825 1299.63,686.825 1300.19,686.825 1300.75,686.825 1301.31,686.825 1301.87,686.825 1302.43,686.825 1302.99,686.825 1303.55,686.825 1304.1,686.825 1304.66,686.825 1305.22,686.825 1305.78,686.825 1306.34,686.825 1306.9,686.825 1307.46,686.825 1308.02,686.825 1308.58,686.825 1309.14,686.825 1309.7,686.825 1310.26,686.825 1310.82,686.825 1311.38,686.825 1311.93,686.825 1312.49,686.825 1313.05,686.825 1313.61,686.825 1314.17,686.825 1314.73,686.825 1315.29,686.825 1315.85,686.825 1316.41,686.825 1316.97,686.825 1317.53,686.825 1318.09,686.825 1318.65,686.825 1319.2,686.825 1319.76,686.825 1320.32,686.825 1320.88,686.825 1321.44,686.825 1322,686.825 1322.56,686.825 1323.12,686.825 1323.68,686.825 1324.24,686.825 1324.8,686.825 1325.36,686.825 1325.92,686.825 1326.47,686.825 1327.03,686.825 1327.59,686.825 1328.15,686.825 1328.71,686.825 1329.27,686.825 1329.83,686.825 1330.39,686.825 1330.95,686.825 1331.51,686.825 1332.07,686.825 1332.63,686.825 1333.19,686.825 1333.75,686.825 1334.3,686.825 1334.86,686.825 1335.42,686.825 1335.98,686.825 1336.54,686.825 1337.1,686.825 1337.66,686.825 1338.22,686.825 1338.78,686.825 1339.34,686.825 1339.9,686.825 1340.46,686.825 1341.02,686.825 1341.57,686.825 1342.13,686.825 1342.69,686.825 1343.25,686.825 1343.81,686.825 1344.37,686.825 1344.93,686.825 1345.49,686.825 1346.05,686.825 1346.61,686.825 1347.17,686.825 1347.73,686.825 1348.29,686.825 1348.84,686.825 1349.4,686.825 1349.96,686.825 1350.52,686.825 1351.08,686.825 1351.64,686.825 1352.2,686.825 1352.76,686.825 1353.32,686.825 1353.88,686.825 1354.44,686.825 1355,686.825 1355.56,686.825 1356.12,686.825 1356.67,686.825 1357.23,686.825 1357.79,686.825 1358.35,686.825 1358.91,686.825 1359.47,686.825 1360.03,686.825 1360.59,686.825 1361.15,686.825 1361.71,686.825 1362.27,686.825 1362.83,686.825 1363.39,686.825 1363.94,686.825 1364.5,686.825 1365.06,686.825 1365.62,686.825 1366.18,686.825 1366.74,686.825 1367.3,686.825 1367.86,686.825 1368.42,686.825 1368.98,686.825 1369.54,686.825 1370.1,686.825 1370.66,686.825 1371.21,686.825 1371.77,686.825 1372.33,686.825 1372.89,686.825 1373.45,686.825 1374.01,686.825 1374.57,686.825 1375.13,686.825 1375.69,686.825 1376.25,686.825 1376.81,686.825 1377.37,686.825 1377.93,686.825 1378.49,686.825 1379.04,686.825 1379.6,686.825 1380.16,686.825 1380.72,686.825 1381.28,686.825 1381.84,686.825 1382.4,686.825 1382.96,686.825 1383.52,686.825 1384.08,686.825 1384.64,686.825 1385.2,686.825 1385.76,686.825 1386.31,686.825 1386.87,686.825 1387.43,686.825 1387.99,686.825 1388.55,686.825 1389.11,686.825 1389.67,686.825 1390.23,686.825 1390.79,686.825 1391.35,686.825 1391.91,686.825 1392.47,686.825 1393.03,686.825 1393.58,686.825 1394.14,686.825 1394.7,686.825 1395.26,686.825 1395.82,686.825 1396.38,686.825 1396.94,686.825 1397.5,686.825 1398.06,686.825 1398.62,686.825 1399.18,686.825 1399.74,686.825 1400.3,686.825 1400.86,686.825 1401.41,686.825 1401.97,686.825 1402.53,686.825 1403.09,686.825 1403.65,686.825 1404.21,686.825 1404.77,686.825 1405.33,686.825 1405.89,686.825 1406.45,686.825 1407.01,686.825 1407.57,686.825 1408.13,686.825 1408.68,686.825 1409.24,686.825 1409.8,686.825 1410.36,686.825 1410.92,686.825 1411.48,686.825 1412.04,686.825 1412.6,686.825 1413.16,686.825 1413.72,686.825 1414.28,686.825 1414.84,686.825 1415.4,686.825 1415.95,686.825 1416.51,686.825 1417.07,686.825 1417.63,686.825 1418.19,686.825 1418.75,686.825 1419.31,686.825 1419.87,686.825 1420.43,686.825 1420.99,686.825 1421.55,686.825 1422.11,686.825 1422.67,686.825 1423.23,686.825 1423.78,686.825 1424.34,686.825 1424.9,686.825 1425.46,686.825 1426.02,686.825 1426.58,686.825 1427.14,686.825 1427.7,686.825 1428.26,686.825 1428.82,686.825 1429.38,686.825 1429.94,686.825 1430.5,686.825 1431.05,686.825 1431.61,686.825 1432.17,686.825 1432.73,686.825 1433.29,686.825 1433.85,686.825 1434.41,686.825 1434.97,686.825 1435.53,686.825 1436.09,686.825 1436.65,686.825 1437.21,686.825 1437.77,686.825 1438.33,686.825 1438.88,686.825 1439.44,686.825 1440,686.825 1440.56,686.825 1441.12,686.825 1441.68,686.825 1442.24,686.825 1442.8,686.825 1443.36,686.825 1443.92,686.825 1444.48,686.825 1445.04,686.825 1445.6,686.825 1446.15,686.825 1446.71,686.825 1447.27,686.825 1447.83,686.825 1448.39,686.825 1448.95,686.825 1449.51,686.825 1450.07,686.825 1450.63,686.825 1451.19,686.825 1451.75,686.825 1452.31,686.825 1452.87,686.825 1453.42,686.825 1453.98,686.825 1454.54,686.825 1455.1,686.825 1455.66,686.825 1456.22,686.825 1456.78,686.825 1457.34,686.825 1457.9,686.825 1458.46,686.825 1459.02,686.825 1459.58,686.825 1460.14,686.825 1460.7,686.825 1461.25,686.825 1461.81,686.825 1462.37,686.825 1462.93,686.825 1463.49,686.825 1464.05,686.825 1464.61,686.825 1465.17,686.825 1465.73,686.825 1466.29,686.825 1466.85,686.825 1467.41,686.825 1467.97,686.825 1468.52,686.825 1469.08,686.825 1469.64,686.825 1470.2,686.825 1470.76,686.825 1471.32,686.825 1471.88,686.825 1472.44,686.825 1473,686.825 1473.56,686.825 1474.12,686.825 1474.68,686.825 1475.24,686.825 1475.79,686.825 1476.35,686.825 1476.91,686.825 1477.47,686.825 1478.03,686.825 1478.59,686.825 1479.15,686.825 1479.71,686.825 1480.27,686.825 1480.83,686.825 1481.39,686.825 1481.95,686.825 1482.51,686.825 1483.07,686.825 1483.62,686.825 1484.18,686.825 1484.74,686.825 1485.3,686.825 1485.86,686.825 1486.42,686.825 1486.98,686.825 1487.54,686.825 1488.1,686.825 1488.66,686.825 1489.22,686.825 1489.78,686.825 1490.34,686.825 1490.89,686.825 1491.45,686.825 1492.01,686.825 1492.57,686.825 1493.13,686.825 1493.69,686.825 1494.25,686.825 1494.81,686.825 1495.37,686.825 1495.93,686.825 1496.49,686.825 1497.05,686.825 1497.61,686.825 1498.16,686.825 1498.72,686.825 1499.28,686.825 1499.84,686.825 1500.4,686.825 1500.96,686.825 1501.52,686.825 1502.08,686.825 1502.64,686.825 1503.2,686.825 1503.76,686.825 1504.32,686.825 1504.88,686.825 1505.44,686.825 1505.99,686.825 1506.55,686.825 1507.11,686.825 1507.67,686.825 1508.23,686.825 1508.79,686.825 1509.35,686.825 1509.91,686.825 1510.47,686.825 1511.03,686.825 1511.59,686.825 1512.15,686.825 1512.71,686.825 1513.26,686.825 1513.82,686.825 1514.38,686.825 1514.94,686.825 1515.5,686.825 1516.06,686.825 1516.62,686.825 1517.18,686.825 1517.74,686.825 1518.3,686.825 1518.86,686.825 1519.42,686.825 1519.98,686.825 1520.53,686.825 1521.09,686.825 1521.65,686.825 1522.21,686.825 1522.77,686.825 1523.33,686.825 1523.89,686.825 1524.45,686.825 1525.01,686.825 1525.57,686.825 1526.13,686.825 1526.69,686.825 1527.25,686.825 1527.81,686.825 1528.36,686.825 1528.92,686.825 1529.48,686.825 1530.04,686.825 1530.6,686.825 1531.16,686.825 1531.72,686.825 1532.28,686.825 1532.84,686.825 1533.4,686.825 1533.96,686.825 1534.52,686.825 1535.08,686.825 1535.63,686.825 1536.19,686.825 1536.75,686.825 1537.31,686.825 1537.87,686.825 1538.43,686.825 1538.99,686.825 1539.55,686.825 1540.11,686.825 1540.67,686.825 1541.23,686.825 1541.79,686.825 1542.35,686.825 1542.9,686.825 1543.46,686.825 1544.02,686.825 1544.58,686.825 1545.14,686.825 1545.7,686.825 1546.26,686.825 1546.82,686.825 1547.38,686.825 1547.94,686.825 1548.5,686.825 1549.06,686.825 1549.62,686.825 1550.18,686.825 1550.73,686.825 1551.29,686.825 1551.85,686.825 1552.41,686.825 1552.97,686.825 1553.53,686.825 1554.09,686.825 1554.65,686.825 1555.21,686.825 1555.77,686.825 1556.33,686.825 1556.89,686.825 1557.45,686.825 1558,686.825 1558.56,686.825 1559.12,686.825 1559.68,686.825 1560.24,686.825 1560.8,686.825 1561.36,686.825 1561.92,686.825 1562.48,686.825 1563.04,686.825 1563.6,686.825 1564.16,686.825 1564.72,686.825 1565.28,686.825 1565.83,686.825 1566.39,686.825 1566.95,686.825 1567.51,686.825 1568.07,686.825 1568.63,686.825 1569.19,686.825 1569.75,686.825 1570.31,686.825 1570.87,686.825 1571.43,686.825 1571.99,686.825 1572.55,686.825 1573.1,686.825 1573.66,686.825 1574.22,686.825 1574.78,686.825 1575.34,686.825 1575.9,686.825 1576.46,686.825 1577.02,686.825 1577.58,686.825 1578.14,686.825 1578.7,686.825 1579.26,686.825 1579.82,686.825 1580.37,686.825 1580.93,686.825 1581.49,686.825 1582.05,686.825 1582.61,686.825 1583.17,686.825 1583.73,686.825 1584.29,686.825 1584.85,686.825 1585.41,686.825 1585.97,686.825 1586.53,686.825 1587.09,686.825 1587.65,686.825 1588.2,686.825 1588.76,686.825 1589.32,686.825 1589.88,686.825 1590.44,686.825 1591,686.825 1591.56,686.825 1592.12,686.825 1592.68,686.825 1593.24,686.825 1593.8,686.825 1594.36,686.825 1594.92,686.825 1595.47,686.825 1596.03,686.825 1596.59,686.825 1597.15,686.825 1597.71,686.825 1598.27,686.825 1598.83,686.825 1599.39,686.825 1599.95,686.825 1600.51,686.825 1601.07,686.825 1601.63,686.825 1602.19,686.825 1602.74,686.825 1603.3,686.825 1603.86,686.825 1604.42,686.825 1604.98,686.825 1605.54,686.825 1606.1,686.825 1606.66,686.825 1607.22,686.825 1607.78,686.825 1608.34,686.825 1608.9,686.825 1609.46,686.825 1610.02,686.825 1610.57,686.825 1611.13,686.825 1611.69,686.825 1612.25,686.825 1612.81,686.825 1613.37,686.825 1613.93,686.825 1614.49,686.825 1615.05,686.825 1615.61,686.825 1616.17,686.825 1616.73,686.825 1617.29,686.825 1617.84,686.825 1618.4,686.825 1618.96,686.825 1619.52,686.825 1620.08,686.825 1620.64,686.825 1621.2,686.825 1621.76,686.825 1622.32,686.825 1622.88,686.825 1623.44,686.825 1624,686.825 1624.56,686.825 1625.11,686.825 1625.67,686.825 1626.23,686.825 1626.79,686.825 1627.35,686.825 1627.91,686.825 1628.47,686.825 1629.03,686.825 1629.59,686.825 1630.15,686.825 1630.71,686.825 1631.27,686.825 1631.83,686.825 1632.39,686.825 1632.94,686.825 1633.5,686.825 1634.06,686.825 1634.62,686.825 1635.18,686.825 1635.74,686.825 1636.3,686.825 1636.86,686.825 1637.42,686.825 1637.98,686.825 1638.54,686.825 1639.1,686.825 1639.66,686.825 1640.21,686.825 1640.77,686.825 1641.33,686.825 1641.89,686.825 1642.45,686.825 1643.01,686.825 1643.57,686.825 1644.13,686.825 1644.69,686.825 1645.25,686.825 1645.81,686.825 1646.37,686.825 1646.93,686.825 1647.48,686.825 1648.04,686.825 1648.6,686.825 1649.16,686.825 1649.72,686.825 1650.28,686.825 1650.84,686.825 1651.4,686.825 1651.96,686.825 1652.52,686.825 1653.08,686.825 1653.64,686.825 1654.2,686.825 1654.76,686.825 1655.31,686.825 1655.87,686.825 1656.43,686.825 1656.99,686.825 1657.55,686.825 1658.11,686.825 1658.67,686.825 1659.23,686.825 1659.79,686.825 1660.35,686.825 1660.91,686.825 1661.47,686.825 1662.03,686.825 1662.58,686.825 1663.14,686.825 1663.7,686.825 1664.26,686.825 1664.82,686.825 1665.38,686.825 1665.94,686.825 1666.5,686.825 1667.06,686.825 1667.62,686.825 1668.18,686.825 1668.74,686.825 1669.3,686.825 1669.85,686.825 1670.41,686.825 1670.97,686.825 1671.53,686.825 1672.09,686.825 1672.65,686.825 1673.21,686.825 1673.77,686.825 1674.33,686.825 1674.89,686.825 1675.45,686.825 1676.01,686.825 1676.57,686.825 1677.13,686.825 1677.68,686.825 1678.24,686.825 1678.8,686.825 1679.36,686.825 1679.92,686.825 1680.48,686.825 1681.04,686.825 1681.6,686.825 1682.16,686.825 1682.72,686.825 1683.28,686.825 1683.84,686.825 1684.4,686.825 1684.95,686.825 1685.51,686.825 1686.07,686.825 1686.63,686.825 1687.19,686.825 1687.75,686.825 1688.31,686.825 1688.87,686.825 1689.43,686.825 1689.99,686.825 1690.55,686.825 1691.11,686.825 1691.67,686.825 1692.23,686.825 1692.78,686.825 1693.34,686.825 1693.9,686.825 1694.46,686.825 1695.02,686.825 1695.58,686.825 1696.14,686.825 1696.7,686.825 1697.26,686.825 1697.82,686.825 1698.38,686.825 1698.94,686.825 1699.5,686.825 1700.05,686.825 1700.61,686.825 1701.17,686.825 1701.73,686.825 1702.29,686.825 1702.85,686.825 1703.41,686.825 1703.97,686.825 1704.53,686.825 1705.09,686.825 1705.65,686.825 1706.21,686.825 1706.77,686.825 1707.32,686.825 1707.88,686.825 1708.44,686.825 1709,686.825 1709.56,686.825 1710.12,686.825 1710.68,686.825 1711.24,686.825 1711.8,686.825 1712.36,686.825 1712.92,686.825 1713.48,686.825 1714.04,686.825 1714.6,686.825 1715.15,686.825 1715.71,686.825 1716.27,686.825 1716.83,686.825 1717.39,686.825 1717.95,686.825 1718.51,686.825 1719.07,686.825 1719.63,686.825 1720.19,686.825 1720.75,686.825 1721.31,686.825 1721.87,686.825 1722.42,686.825 1722.98,686.825 1723.54,686.825 1724.1,686.825 1724.66,686.825 1725.22,686.825 1725.78,686.825 1726.34,686.825 1726.9,686.825 1727.46,686.825 1728.02,686.825 1728.58,686.825 1729.14,686.825 1729.69,686.825 1730.25,686.825 1730.81,686.825 1731.37,686.825 1731.93,686.825 1732.49,686.825 1733.05,686.825 1733.61,686.825 1734.17,686.825 1734.73,686.825 1735.29,686.825 1735.85,686.825 1736.41,686.825 1736.97,686.825 1737.52,686.825 1738.08,686.825 1738.64,686.825 1739.2,686.825 1739.76,686.825 1740.32,686.825 1740.88,686.825 1741.44,686.825 1742,686.825 1742.56,686.825 1743.12,686.825 1743.68,686.825 1744.24,686.825 1744.79,686.825 1745.35,686.825 1745.91,686.825 1746.47,686.825 1747.03,686.825 1747.59,686.825 1748.15,686.825 1748.71,686.825 1749.27,686.825 1749.83,686.825 1750.39,686.825 1750.95,686.825 1751.51,686.825 1752.06,686.825 1752.62,686.825 1753.18,686.825 1753.74,686.825 1754.3,686.825 1754.86,686.825 1755.42,686.825 1755.98,686.825 1756.54,686.825 1757.1,686.825 1757.66,686.825 1758.22,686.825 1758.78,686.825 1759.34,686.825 1759.89,686.825 1760.45,686.825 1761.01,686.825 1761.57,686.825 1762.13,686.825 1762.69,686.825 1763.25,686.825 1763.81,686.825 1764.37,686.825 1764.93,686.825 1765.49,686.825 1766.05,686.825 1766.61,686.825 1767.16,686.825 1767.72,686.825 1768.28,686.825 1768.84,686.825 1769.4,686.825 1769.96,686.825 1770.52,686.825 1771.08,686.825 1771.64,686.825 1772.2,686.825 1772.76,686.825 1773.32,686.825 1773.88,686.825 1774.43,686.825 1774.99,686.825 1775.55,686.825 1776.11,686.825 1776.67,686.825 1777.23,686.825 1777.79,686.825 1778.35,686.825 1778.91,686.825 1779.47,686.825 1780.03,686.825 1780.59,686.825 1781.15,686.825 1781.71,686.825 1782.26,686.825 1782.82,686.825 1783.38,686.825 1783.94,686.825 1784.5,686.825 1785.06,686.825 1785.62,686.825 1786.18,686.825 1786.74,686.825 1787.3,686.825 1787.86,686.825 1788.42,686.825 1788.98,686.825 1789.53,686.825 1790.09,686.825 1790.65,686.825 1791.21,686.825 1791.77,686.825 1792.33,686.825 1792.89,686.825 1793.45,686.825 1794.01,686.825 1794.57,686.825 1795.13,686.825 1795.69,686.825 1796.25,686.825 1796.8,686.825 1797.36,686.825 1797.92,686.825 1798.48,686.825 1799.04,686.825 1799.6,686.825 1800.16,686.825 1800.72,686.825 1801.28,686.825 1801.84,686.825 1802.4,686.825 1802.96,686.825 1803.52,686.825 1804.08,686.825 1804.63,686.825 1805.19,686.825 1805.75,686.825 1806.31,686.825 1806.87,686.825 1807.43,686.825 1807.99,686.825 1808.55,686.825 1809.11,686.825 1809.67,686.825 1810.23,686.825 1810.79,686.825 1811.35,686.825 1811.9,686.825 1812.46,686.825 1813.02,686.825 1813.58,686.825 1814.14,686.825 1814.7,686.825 1815.26,686.825 1815.82,686.825 1816.38,686.825 1816.94,686.825 1817.5,686.825 1818.06,686.825 1818.62,686.825 1819.18,686.825 1819.73,686.825 1820.29,686.825 1820.85,686.825 1821.41,686.825 1821.97,686.825 1822.53,686.825 1823.09,686.825 1823.65,686.825 1824.21,686.825 1824.77,686.825 1825.33,686.825 1825.89,686.825 1826.45,686.825 1827,686.825 1827.56,686.825 1828.12,686.825 1828.68,686.825 1829.24,686.825 1829.8,686.825 1830.36,686.825 1830.92,686.825 1831.48,686.825 1832.04,686.825 1832.6,686.825 1833.16,686.825 1833.72,686.825 1834.27,686.825 1834.83,686.825 1835.39,686.825 1835.95,686.825 1836.51,686.825 1837.07,686.825 1837.63,686.825 1838.19,686.825 \"/>\n<path clip-path=\"url(#clip473)\" d=\"M720.247 684.946 L720.806 684.946 L721.365 684.946 L721.924 684.946 L722.484 684.946 L723.043 684.946 L723.602 684.946 L724.161 684.946 L724.721 684.946 L725.28 684.946 L725.839 684.946 L726.398 684.946 L726.958 684.946 L727.517 684.946 L728.076 684.946 L728.635 684.946 L729.195 684.946 L729.754 684.946 L730.313 684.946 L730.872 684.946 L731.432 684.946 L731.991 684.946 L732.55 684.946 L733.109 684.946 L733.669 684.946 L734.228 684.946 L734.787 684.946 L735.346 684.946 L735.906 684.946 L736.465 684.946 L737.024 684.946 L737.583 684.946 L738.143 684.946 L738.702 684.946 L739.261 684.946 L739.82 684.946 L740.38 684.946 L740.939 684.946 L741.498 684.946 L742.057 684.946 L742.617 684.946 L743.176 684.946 L743.735 684.946 L744.294 684.946 L744.854 684.946 L745.413 684.946 L745.972 684.946 L746.531 684.946 L747.091 684.946 L747.65 684.946 L748.209 684.946 L748.768 684.946 L749.328 684.946 L749.887 684.946 L750.446 684.946 L751.005 684.946 L751.565 684.946 L752.124 684.946 L752.683 684.946 L753.242 684.946 L753.802 684.946 L754.361 684.946 L754.92 684.946 L755.479 684.946 L756.039 684.946 L756.598 684.946 L757.157 684.946 L757.716 684.946 L758.276 684.946 L758.835 684.946 L759.394 684.946 L759.953 684.946 L760.513 684.946 L761.072 684.946 L761.631 684.946 L762.19 684.946 L762.75 684.946 L763.309 684.946 L763.868 684.946 L764.427 684.946 L764.987 684.946 L765.546 684.946 L766.105 684.946 L766.664 684.946 L767.224 684.946 L767.783 684.946 L768.342 684.946 L768.901 684.946 L769.461 684.946 L770.02 684.946 L770.579 684.946 L771.138 684.946 L771.698 684.946 L772.257 684.946 L772.816 684.946 L773.375 684.946 L773.935 684.946 L774.494 684.946 L775.053 684.946 L775.612 684.946 L776.172 684.946 L776.731 684.946 L777.29 684.946 L777.849 684.946 L778.409 684.946 L778.968 684.946 L779.527 684.946 L780.086 684.946 L780.646 684.946 L781.205 684.946 L781.764 684.946 L782.323 684.946 L782.883 684.946 L783.442 684.946 L784.001 684.946 L784.56 684.946 L785.12 684.946 L785.679 684.946 L786.238 684.946 L786.797 684.946 L787.357 684.946 L787.916 684.946 L788.475 684.946 L789.034 684.946 L789.594 684.946 L790.153 684.946 L790.712 684.946 L791.271 684.946 L791.831 684.946 L792.39 684.946 L792.949 684.946 L793.508 684.946 L794.068 684.946 L794.627 684.946 L795.186 684.946 L795.745 684.946 L796.305 684.946 L796.864 684.946 L797.423 684.946 L797.982 684.946 L798.542 684.946 L799.101 684.946 L799.66 684.946 L800.219 684.946 L800.779 684.946 L801.338 684.946 L801.897 684.946 L802.456 684.946 L803.016 684.946 L803.575 684.946 L804.134 684.946 L804.693 684.946 L805.253 684.946 L805.812 684.946 L806.371 684.946 L806.931 684.946 L807.49 684.946 L808.049 684.946 L808.608 684.946 L809.168 684.946 L809.727 684.946 L810.286 684.946 L810.845 684.946 L811.405 684.946 L811.964 684.946 L812.523 684.946 L813.082 684.946 L813.642 684.946 L814.201 684.946 L814.76 684.946 L815.319 684.946 L815.879 684.946 L816.438 684.946 L816.997 684.946 L817.556 684.946 L818.116 684.946 L818.675 684.946 L819.234 684.946 L819.793 684.946 L820.353 684.946 L820.912 684.946 L821.471 684.946 L822.03 684.946 L822.59 684.946 L823.149 684.946 L823.708 684.946 L824.267 684.946 L824.827 684.946 L825.386 684.946 L825.945 684.946 L826.504 684.946 L827.064 684.946 L827.623 684.946 L828.182 684.946 L828.741 684.946 L829.301 684.946 L829.86 684.946 L830.419 684.946 L830.978 684.946 L831.538 684.946 L832.097 684.946 L832.656 684.946 L833.215 684.946 L833.775 684.946 L834.334 684.946 L834.893 684.946 L835.452 684.946 L836.012 684.946 L836.571 684.946 L837.13 684.946 L837.689 684.946 L838.249 684.946 L838.808 684.946 L839.367 684.946 L839.926 684.946 L840.486 684.946 L841.045 684.946 L841.604 684.946 L842.163 684.946 L842.723 684.946 L843.282 684.946 L843.841 684.946 L844.4 684.946 L844.96 684.946 L845.519 684.946 L846.078 684.946 L846.637 684.946 L847.197 684.946 L847.756 684.946 L848.315 684.946 L848.874 684.946 L849.434 684.946 L849.993 684.946 L850.552 684.946 L851.111 684.946 L851.671 684.946 L852.23 684.946 L852.789 684.946 L853.348 684.946 L853.908 684.946 L854.467 684.946 L855.026 684.946 L855.585 684.946 L856.145 684.946 L856.704 684.946 L857.263 684.946 L857.822 684.946 L858.382 684.946 L858.941 684.946 L859.5 684.946 L860.059 684.946 L860.619 684.946 L861.178 684.946 L861.737 684.946 L862.296 684.946 L862.856 684.946 L863.415 684.946 L863.974 684.946 L864.533 684.946 L865.093 684.946 L865.652 684.946 L866.211 684.946 L866.77 684.946 L867.33 684.946 L867.889 684.946 L868.448 684.946 L869.007 684.946 L869.567 684.946 L870.126 684.946 L870.685 684.946 L871.244 684.946 L871.804 684.946 L872.363 684.946 L872.922 684.946 L873.481 684.946 L874.041 684.946 L874.6 684.946 L875.159 684.946 L875.718 684.946 L876.278 684.946 L876.837 684.946 L877.396 684.946 L877.955 684.946 L878.515 684.946 L879.074 684.946 L879.633 684.946 L880.192 684.946 L880.752 684.946 L881.311 684.946 L881.87 684.946 L882.429 684.946 L882.989 684.946 L883.548 684.946 L884.107 684.946 L884.666 684.946 L885.226 684.946 L885.785 684.946 L886.344 684.946 L886.903 684.946 L887.463 684.946 L888.022 684.946 L888.581 684.946 L889.14 684.946 L889.7 684.946 L890.259 684.946 L890.818 684.946 L891.377 684.946 L891.937 684.946 L892.496 684.946 L893.055 684.946 L893.614 684.946 L894.174 684.946 L894.733 684.946 L895.292 684.946 L895.851 684.946 L896.411 684.946 L896.97 684.946 L897.529 684.946 L898.088 684.946 L898.648 684.946 L899.207 684.946 L899.766 684.946 L900.325 684.946 L900.885 684.946 L901.444 684.946 L902.003 684.946 L902.562 684.946 L903.122 684.946 L903.681 684.946 L904.24 684.946 L904.799 684.946 L905.359 684.946 L905.918 684.946 L906.477 684.946 L907.036 684.946 L907.596 684.946 L908.155 684.946 L908.714 684.946 L909.273 684.946 L909.833 684.946 L910.392 684.946 L910.951 684.946 L911.51 684.946 L912.07 684.946 L912.629 684.946 L913.188 684.946 L913.747 684.946 L914.307 684.946 L914.866 684.946 L915.425 684.946 L915.984 684.946 L916.544 684.946 L917.103 684.946 L917.662 684.946 L918.221 684.946 L918.781 684.946 L919.34 684.946 L919.899 684.946 L920.458 684.946 L921.018 684.946 L921.577 684.946 L922.136 684.946 L922.695 684.946 L923.255 684.946 L923.814 684.946 L924.373 684.946 L924.932 684.946 L925.492 684.946 L926.051 684.946 L926.61 684.946 L927.169 684.946 L927.729 684.946 L928.288 684.946 L928.847 684.946 L929.406 684.946 L929.966 684.946 L930.525 684.946 L931.084 684.946 L931.644 684.946 L932.203 684.946 L932.762 684.946 L933.321 684.946 L933.881 684.946 L934.44 684.946 L934.999 684.946 L935.558 684.946 L936.118 684.946 L936.677 684.946 L937.236 684.946 L937.795 684.946 L938.355 684.946 L938.914 684.946 L939.473 684.946 L940.032 684.946 L940.592 684.946 L941.151 684.946 L941.71 684.946 L942.269 684.946 L942.829 684.946 L943.388 684.946 L943.947 684.946 L944.506 684.946 L945.066 684.946 L945.625 684.946 L946.184 684.946 L946.743 684.946 L947.303 684.946 L947.862 684.946 L948.421 684.946 L948.98 684.946 L949.54 684.946 L950.099 684.946 L950.658 684.946 L951.217 684.946 L951.777 684.946 L952.336 684.946 L952.895 684.946 L953.454 684.946 L954.014 684.946 L954.573 684.946 L955.132 684.946 L955.691 684.946 L956.251 684.946 L956.81 684.946 L957.369 684.946 L957.928 684.946 L958.488 684.946 L959.047 684.946 L959.606 684.946 L960.165 684.946 L960.725 684.946 L961.284 684.946 L961.843 684.946 L962.402 684.946 L962.962 684.946 L963.521 684.946 L964.08 684.946 L964.639 684.946 L965.199 684.946 L965.758 684.946 L966.317 684.946 L966.876 684.946 L967.436 684.946 L967.995 684.946 L968.554 684.946 L969.113 684.946 L969.673 684.946 L970.232 684.946 L970.791 684.946 L971.35 684.946 L971.91 684.946 L972.469 684.946 L973.028 684.946 L973.587 684.946 L974.147 684.946 L974.706 684.946 L975.265 684.946 L975.824 684.946 L976.384 684.946 L976.943 684.946 L977.502 684.946 L978.061 684.946 L978.621 684.946 L979.18 684.946 L979.739 684.946 L980.298 684.946 L980.858 684.946 L981.417 684.946 L981.976 684.946 L982.535 684.946 L983.095 684.946 L983.654 684.946 L984.213 684.946 L984.772 684.946 L985.332 684.946 L985.891 684.946 L986.45 684.946 L987.009 684.946 L987.569 684.946 L988.128 684.946 L988.687 684.946 L989.246 684.946 L989.806 684.946 L990.365 684.946 L990.924 684.946 L991.483 684.946 L992.043 684.946 L992.602 684.946 L993.161 684.946 L993.72 684.946 L994.28 684.946 L994.839 684.946 L995.398 684.946 L995.957 684.946 L996.517 684.946 L997.076 684.946 L997.635 684.946 L998.194 684.946 L998.754 684.946 L999.313 684.946 L999.872 684.946 L1000.43 684.946 L1000.99 684.946 L1001.55 684.946 L1002.11 684.946 L1002.67 684.946 L1003.23 684.946 L1003.79 684.946 L1004.35 684.946 L1004.91 684.946 L1005.46 684.946 L1006.02 684.946 L1006.58 684.946 L1007.14 684.946 L1007.7 684.946 L1008.26 684.946 L1008.82 684.946 L1009.38 684.946 L1009.94 684.946 L1010.5 684.946 L1011.06 684.946 L1011.62 684.946 L1012.18 684.946 L1012.73 684.946 L1013.29 684.946 L1013.85 684.946 L1014.41 684.946 L1014.97 684.946 L1015.53 684.946 L1016.09 684.946 L1016.65 684.946 L1017.21 684.946 L1017.77 684.946 L1018.33 684.946 L1018.89 684.946 L1019.45 684.946 L1020.01 684.946 L1020.56 684.946 L1021.12 684.946 L1021.68 684.946 L1022.24 684.946 L1022.8 684.946 L1023.36 684.946 L1023.92 684.946 L1024.48 684.946 L1025.04 684.946 L1025.6 684.946 L1026.16 684.946 L1026.72 684.946 L1027.28 684.946 L1027.83 684.946 L1028.39 684.946 L1028.95 684.946 L1029.51 684.946 L1030.07 684.946 L1030.63 684.946 L1031.19 684.946 L1031.75 684.946 L1032.31 684.946 L1032.87 684.946 L1033.43 684.946 L1033.99 684.946 L1034.55 684.946 L1035.1 684.946 L1035.66 684.946 L1036.22 684.946 L1036.78 684.946 L1037.34 684.946 L1037.9 684.946 L1038.46 684.946 L1039.02 684.946 L1039.58 684.946 L1040.14 684.946 L1040.7 684.946 L1041.26 684.946 L1041.82 684.946 L1042.38 684.946 L1042.93 684.946 L1043.49 684.946 L1044.05 684.946 L1044.61 684.946 L1045.17 684.946 L1045.73 684.946 L1046.29 684.946 L1046.85 684.946 L1047.41 684.946 L1047.97 684.946 L1048.53 684.946 L1049.09 684.946 L1049.65 684.946 L1050.2 684.946 L1050.76 684.946 L1051.32 684.946 L1051.88 684.946 L1052.44 684.946 L1053 684.946 L1053.56 684.946 L1054.12 684.946 L1054.68 684.946 L1055.24 684.946 L1055.8 684.946 L1056.36 684.946 L1056.92 684.946 L1057.48 684.946 L1058.03 684.946 L1058.59 684.946 L1059.15 684.946 L1059.71 684.946 L1060.27 684.946 L1060.83 684.946 L1061.39 684.946 L1061.95 684.946 L1062.51 684.946 L1063.07 684.946 L1063.63 684.946 L1064.19 684.946 L1064.75 684.946 L1065.3 684.946 L1065.86 684.946 L1066.42 684.946 L1066.98 684.946 L1067.54 684.946 L1068.1 684.946 L1068.66 684.946 L1069.22 684.946 L1069.78 684.946 L1070.34 684.946 L1070.9 684.946 L1071.46 684.946 L1072.02 684.946 L1072.57 684.946 L1073.13 684.946 L1073.69 684.946 L1074.25 684.946 L1074.81 684.946 L1075.37 684.946 L1075.93 684.946 L1076.49 684.946 L1077.05 684.946 L1077.61 684.946 L1078.17 684.946 L1078.73 684.946 L1079.29 684.946 L1079.85 684.946 L1080.4 684.946 L1080.96 684.946 L1081.52 684.946 L1082.08 684.946 L1082.64 684.946 L1083.2 684.946 L1083.76 684.946 L1084.32 684.946 L1084.88 684.946 L1085.44 684.946 L1086 684.946 L1086.56 684.946 L1087.12 684.946 L1087.67 684.946 L1088.23 684.946 L1088.79 684.946 L1089.35 684.946 L1089.91 684.946 L1090.47 684.946 L1091.03 684.946 L1091.59 684.946 L1092.15 684.946 L1092.71 684.946 L1093.27 684.946 L1093.83 684.946 L1094.39 684.946 L1094.94 684.946 L1095.5 684.946 L1096.06 684.946 L1096.62 684.946 L1097.18 684.946 L1097.74 684.946 L1098.3 684.946 L1098.86 684.946 L1099.42 684.946 L1099.98 684.946 L1100.54 684.946 L1101.1 684.946 L1101.66 684.946 L1102.22 684.946 L1102.77 684.946 L1103.33 684.946 L1103.89 684.946 L1104.45 684.946 L1105.01 684.946 L1105.57 684.946 L1106.13 684.946 L1106.69 684.946 L1107.25 684.946 L1107.81 684.946 L1108.37 684.946 L1108.93 684.946 L1109.49 684.946 L1110.04 684.946 L1110.6 684.946 L1111.16 684.946 L1111.72 684.946 L1112.28 684.946 L1112.84 684.946 L1113.4 684.946 L1113.96 684.946 L1114.52 684.946 L1115.08 684.946 L1115.64 684.946 L1116.2 684.946 L1116.76 684.946 L1117.31 684.946 L1117.87 684.946 L1118.43 684.946 L1118.99 684.946 L1119.55 684.946 L1120.11 684.946 L1120.67 684.946 L1121.23 684.946 L1121.79 684.946 L1122.35 684.946 L1122.91 684.946 L1123.47 684.946 L1124.03 684.946 L1124.59 684.946 L1125.14 684.946 L1125.7 684.946 L1126.26 684.946 L1126.82 684.946 L1127.38 684.946 L1127.94 684.946 L1128.5 684.946 L1129.06 684.946 L1129.62 684.946 L1130.18 684.946 L1130.74 684.946 L1131.3 684.946 L1131.86 684.946 L1132.41 684.946 L1132.97 684.946 L1133.53 684.946 L1134.09 684.946 L1134.65 684.946 L1135.21 684.946 L1135.77 684.946 L1136.33 684.946 L1136.89 684.946 L1137.45 684.946 L1138.01 684.946 L1138.57 684.946 L1139.13 684.946 L1139.68 684.946 L1140.24 684.946 L1140.8 684.946 L1141.36 684.946 L1141.92 684.946 L1142.48 684.946 L1143.04 684.946 L1143.6 684.946 L1144.16 684.946 L1144.72 684.946 L1145.28 684.946 L1145.84 684.946 L1146.4 684.946 L1146.96 684.946 L1147.51 684.946 L1148.07 684.946 L1148.63 684.946 L1149.19 684.946 L1149.75 684.946 L1150.31 684.946 L1150.87 684.946 L1151.43 684.946 L1151.99 684.946 L1152.55 684.946 L1153.11 684.946 L1153.67 684.946 L1154.23 684.946 L1154.78 684.946 L1155.34 684.946 L1155.9 684.946 L1156.46 684.946 L1157.02 684.946 L1157.58 684.946 L1158.14 684.946 L1158.7 684.946 L1159.26 684.946 L1159.82 684.946 L1160.38 684.946 L1160.94 684.946 L1161.5 684.946 L1162.05 684.946 L1162.61 684.946 L1163.17 684.946 L1163.73 684.946 L1164.29 684.946 L1164.85 684.946 L1165.41 684.946 L1165.97 684.946 L1166.53 684.946 L1167.09 684.946 L1167.65 684.946 L1168.21 684.946 L1168.77 684.946 L1169.33 684.946 L1169.88 684.946 L1170.44 684.946 L1171 684.946 L1171.56 684.946 L1172.12 684.946 L1172.68 684.946 L1173.24 684.946 L1173.8 684.946 L1174.36 684.946 L1174.92 684.946 L1175.48 684.946 L1176.04 684.946 L1176.6 684.946 L1177.15 684.946 L1177.71 684.946 L1178.27 684.946 L1178.83 684.946 L1179.39 684.946 L1179.95 684.946 L1180.51 684.946 L1181.07 684.946 L1181.63 684.946 L1182.19 684.946 L1182.75 684.946 L1183.31 684.946 L1183.87 684.946 L1184.43 684.946 L1184.98 684.946 L1185.54 684.946 L1186.1 684.946 L1186.66 684.946 L1187.22 684.946 L1187.78 684.946 L1188.34 684.946 L1188.9 684.946 L1189.46 684.946 L1190.02 684.946 L1190.58 684.946 L1191.14 684.946 L1191.7 684.946 L1192.25 684.946 L1192.81 684.946 L1193.37 684.946 L1193.93 684.946 L1194.49 684.946 L1195.05 684.946 L1195.61 684.946 L1196.17 684.946 L1196.73 684.946 L1197.29 684.946 L1197.85 684.946 L1198.41 684.946 L1198.97 684.946 L1199.52 684.946 L1200.08 684.946 L1200.64 684.946 L1201.2 684.946 L1201.76 684.946 L1202.32 684.946 L1202.88 684.946 L1203.44 684.946 L1204 684.946 L1204.56 684.946 L1205.12 684.946 L1205.68 684.946 L1206.24 684.946 L1206.8 684.946 L1207.35 684.946 L1207.91 684.946 L1208.47 684.946 L1209.03 684.946 L1209.59 684.946 L1210.15 684.946 L1210.71 684.946 L1211.27 684.946 L1211.83 684.946 L1212.39 684.946 L1212.95 684.946 L1213.51 684.946 L1214.07 684.946 L1214.62 684.946 L1215.18 684.946 L1215.74 684.946 L1216.3 684.946 L1216.86 684.946 L1217.42 684.946 L1217.98 684.946 L1218.54 684.946 L1219.1 684.946 L1219.66 684.946 L1220.22 684.946 L1220.78 684.946 L1221.34 684.946 L1221.89 684.946 L1222.45 684.946 L1223.01 684.946 L1223.57 684.946 L1224.13 684.946 L1224.69 684.946 L1225.25 684.946 L1225.81 684.946 L1226.37 684.946 L1226.93 684.946 L1227.49 684.946 L1228.05 684.946 L1228.61 684.946 L1229.17 684.946 L1229.72 684.946 L1230.28 684.946 L1230.84 684.946 L1231.4 684.946 L1231.96 684.946 L1232.52 684.946 L1233.08 684.946 L1233.64 684.946 L1234.2 684.946 L1234.76 684.946 L1235.32 684.946 L1235.88 684.946 L1236.44 684.946 L1236.99 684.946 L1237.55 684.946 L1238.11 684.946 L1238.67 684.946 L1239.23 684.946 L1239.79 684.946 L1240.35 684.946 L1240.91 684.946 L1241.47 684.946 L1242.03 684.946 L1242.59 684.946 L1243.15 684.946 L1243.71 684.946 L1244.26 684.946 L1244.82 684.946 L1245.38 684.946 L1245.94 684.946 L1246.5 684.946 L1247.06 684.946 L1247.62 684.946 L1248.18 684.946 L1248.74 684.946 L1249.3 684.946 L1249.86 684.946 L1250.42 684.946 L1250.98 684.946 L1251.54 684.946 L1252.09 684.946 L1252.65 684.946 L1253.21 684.946 L1253.77 684.946 L1254.33 684.946 L1254.89 684.946 L1255.45 684.946 L1256.01 684.946 L1256.57 684.946 L1257.13 684.946 L1257.69 684.946 L1258.25 684.946 L1258.81 684.946 L1259.36 684.946 L1259.92 684.946 L1260.48 684.946 L1261.04 684.946 L1261.6 684.946 L1262.16 684.946 L1262.72 684.946 L1263.28 684.946 L1263.84 684.946 L1264.4 684.946 L1264.96 684.946 L1265.52 684.946 L1266.08 684.946 L1266.63 684.946 L1267.19 684.946 L1267.75 684.946 L1268.31 684.946 L1268.87 684.946 L1269.43 684.946 L1269.99 684.946 L1270.55 684.946 L1271.11 684.946 L1271.67 684.946 L1272.23 684.946 L1272.79 684.946 L1273.35 684.946 L1273.91 684.946 L1274.46 684.946 L1275.02 684.946 L1275.58 684.946 L1276.14 684.946 L1276.7 684.946 L1277.26 684.946 L1277.82 684.946 L1278.38 684.946 L1278.94 684.946 L1279.5 684.946 L1280.06 684.946 L1280.62 684.946 L1281.18 684.946 L1281.73 684.946 L1282.29 684.946 L1282.85 684.946 L1283.41 684.946 L1283.97 684.946 L1284.53 684.946 L1285.09 684.946 L1285.65 684.946 L1286.21 684.946 L1286.77 684.946 L1287.33 684.946 L1287.89 684.946 L1288.45 684.946 L1289 684.946 L1289.56 684.946 L1290.12 684.946 L1290.68 684.946 L1291.24 684.946 L1291.8 684.946 L1292.36 684.946 L1292.92 684.946 L1293.48 684.946 L1294.04 684.946 L1294.6 684.946 L1295.16 684.946 L1295.72 684.946 L1296.28 684.946 L1296.83 684.946 L1297.39 684.946 L1297.95 684.946 L1298.51 684.946 L1299.07 684.946 L1299.63 684.946 L1300.19 684.946 L1300.75 684.946 L1301.31 684.946 L1301.87 684.946 L1302.43 684.946 L1302.99 684.946 L1303.55 684.946 L1304.1 684.946 L1304.66 684.946 L1305.22 684.946 L1305.78 684.946 L1306.34 684.946 L1306.9 684.946 L1307.46 684.946 L1308.02 684.946 L1308.58 684.946 L1309.14 684.946 L1309.7 684.946 L1310.26 684.946 L1310.82 684.946 L1311.38 684.946 L1311.93 684.946 L1312.49 684.946 L1313.05 684.946 L1313.61 684.946 L1314.17 684.946 L1314.73 684.946 L1315.29 684.946 L1315.85 684.946 L1316.41 684.946 L1316.97 684.946 L1317.53 684.946 L1318.09 684.946 L1318.65 684.946 L1319.2 684.946 L1319.76 684.946 L1320.32 684.946 L1320.88 684.946 L1321.44 684.946 L1322 684.946 L1322.56 684.946 L1323.12 684.946 L1323.68 684.946 L1324.24 684.946 L1324.8 684.946 L1325.36 684.946 L1325.92 684.946 L1326.47 684.946 L1327.03 684.946 L1327.59 684.946 L1328.15 684.946 L1328.71 684.946 L1329.27 684.946 L1329.83 684.946 L1330.39 684.946 L1330.95 684.946 L1331.51 684.946 L1332.07 684.946 L1332.63 684.946 L1333.19 684.946 L1333.75 684.946 L1334.3 684.946 L1334.86 684.946 L1335.42 684.946 L1335.98 684.946 L1336.54 684.946 L1337.1 684.946 L1337.66 684.946 L1338.22 684.946 L1338.78 684.946 L1339.34 684.946 L1339.9 684.946 L1340.46 684.946 L1341.02 684.946 L1341.57 684.946 L1342.13 684.946 L1342.69 684.946 L1343.25 684.946 L1343.81 684.946 L1344.37 684.946 L1344.93 684.946 L1345.49 684.946 L1346.05 684.946 L1346.61 684.946 L1347.17 684.946 L1347.73 684.946 L1348.29 684.946 L1348.84 684.946 L1349.4 684.946 L1349.96 684.946 L1350.52 684.946 L1351.08 684.946 L1351.64 684.946 L1352.2 684.946 L1352.76 684.946 L1353.32 684.946 L1353.88 684.946 L1354.44 684.946 L1355 684.946 L1355.56 684.946 L1356.12 684.946 L1356.67 684.946 L1357.23 684.946 L1357.79 684.946 L1358.35 684.946 L1358.91 684.946 L1359.47 684.946 L1360.03 684.946 L1360.59 684.946 L1361.15 684.946 L1361.71 684.946 L1362.27 684.946 L1362.83 684.946 L1363.39 684.946 L1363.94 684.946 L1364.5 684.946 L1365.06 684.946 L1365.62 684.946 L1366.18 684.946 L1366.74 684.946 L1367.3 684.946 L1367.86 684.946 L1368.42 684.946 L1368.98 684.946 L1369.54 684.946 L1370.1 684.946 L1370.66 684.946 L1371.21 684.946 L1371.77 684.946 L1372.33 684.946 L1372.89 684.946 L1373.45 684.946 L1374.01 684.946 L1374.57 684.946 L1375.13 684.946 L1375.69 684.946 L1376.25 684.946 L1376.81 684.946 L1377.37 684.946 L1377.93 684.946 L1378.49 684.946 L1379.04 684.946 L1379.6 684.946 L1380.16 684.946 L1380.72 684.946 L1381.28 684.946 L1381.84 684.946 L1382.4 684.946 L1382.96 684.946 L1383.52 684.946 L1384.08 684.946 L1384.64 684.946 L1385.2 684.946 L1385.76 684.946 L1386.31 684.946 L1386.87 684.946 L1387.43 684.946 L1387.99 684.946 L1388.55 684.946 L1389.11 684.946 L1389.67 684.946 L1390.23 684.946 L1390.79 684.946 L1391.35 684.946 L1391.91 684.946 L1392.47 684.946 L1393.03 684.946 L1393.58 684.946 L1394.14 684.946 L1394.7 684.946 L1395.26 684.946 L1395.82 684.946 L1396.38 684.946 L1396.94 684.946 L1397.5 684.946 L1398.06 684.946 L1398.62 684.946 L1399.18 684.946 L1399.74 684.946 L1400.3 684.946 L1400.86 684.946 L1401.41 684.946 L1401.97 684.946 L1402.53 684.946 L1403.09 684.946 L1403.65 684.946 L1404.21 684.946 L1404.77 684.946 L1405.33 684.946 L1405.89 684.946 L1406.45 684.946 L1407.01 684.946 L1407.57 684.946 L1408.13 684.946 L1408.68 684.946 L1409.24 684.946 L1409.8 684.946 L1410.36 684.946 L1410.92 684.946 L1411.48 684.946 L1412.04 684.946 L1412.6 684.946 L1413.16 684.946 L1413.72 684.946 L1414.28 684.946 L1414.84 684.946 L1415.4 684.946 L1415.95 684.946 L1416.51 684.946 L1417.07 684.946 L1417.63 684.946 L1418.19 684.946 L1418.75 684.946 L1419.31 684.946 L1419.87 684.946 L1420.43 684.946 L1420.99 684.946 L1421.55 684.946 L1422.11 684.946 L1422.67 684.946 L1423.23 684.946 L1423.78 684.946 L1424.34 684.946 L1424.9 684.946 L1425.46 684.946 L1426.02 684.946 L1426.58 684.946 L1427.14 684.946 L1427.7 684.946 L1428.26 684.946 L1428.82 684.946 L1429.38 684.946 L1429.94 684.946 L1430.5 684.946 L1431.05 684.946 L1431.61 684.946 L1432.17 684.946 L1432.73 684.946 L1433.29 684.946 L1433.85 684.946 L1434.41 684.946 L1434.97 684.946 L1435.53 684.946 L1436.09 684.946 L1436.65 684.946 L1437.21 684.946 L1437.77 684.946 L1438.33 684.946 L1438.88 684.946 L1439.44 684.946 L1440 684.946 L1440.56 684.946 L1441.12 684.946 L1441.68 684.946 L1442.24 684.946 L1442.8 684.946 L1443.36 684.946 L1443.92 684.946 L1444.48 684.946 L1445.04 684.946 L1445.6 684.946 L1446.15 684.946 L1446.71 684.946 L1447.27 684.946 L1447.83 684.946 L1448.39 684.946 L1448.95 684.946 L1449.51 684.946 L1450.07 684.946 L1450.63 684.946 L1451.19 684.946 L1451.75 684.946 L1452.31 684.946 L1452.87 684.946 L1453.42 684.946 L1453.98 684.946 L1454.54 684.946 L1455.1 684.946 L1455.66 684.946 L1456.22 684.946 L1456.78 684.946 L1457.34 684.946 L1457.9 684.946 L1458.46 684.946 L1459.02 684.946 L1459.58 684.946 L1460.14 684.946 L1460.7 684.946 L1461.25 684.946 L1461.81 684.946 L1462.37 684.946 L1462.93 684.946 L1463.49 684.946 L1464.05 684.946 L1464.61 684.946 L1465.17 684.946 L1465.73 684.946 L1466.29 684.946 L1466.85 684.946 L1467.41 684.946 L1467.97 684.946 L1468.52 684.946 L1469.08 684.946 L1469.64 684.946 L1470.2 684.946 L1470.76 684.946 L1471.32 684.946 L1471.88 684.946 L1472.44 684.946 L1473 684.946 L1473.56 684.946 L1474.12 684.946 L1474.68 684.946 L1475.24 684.946 L1475.79 684.946 L1476.35 684.946 L1476.91 684.946 L1477.47 684.946 L1478.03 684.946 L1478.59 684.946 L1479.15 684.946 L1479.71 684.946 L1480.27 684.946 L1480.83 684.946 L1481.39 684.946 L1481.95 684.946 L1482.51 684.946 L1483.07 684.946 L1483.62 684.946 L1484.18 684.946 L1484.74 684.946 L1485.3 684.946 L1485.86 684.946 L1486.42 684.946 L1486.98 684.946 L1487.54 684.946 L1488.1 684.946 L1488.66 684.946 L1489.22 684.946 L1489.78 684.946 L1490.34 684.946 L1490.89 684.946 L1491.45 684.946 L1492.01 684.946 L1492.57 684.946 L1493.13 684.946 L1493.69 684.946 L1494.25 684.946 L1494.81 684.946 L1495.37 684.946 L1495.93 684.946 L1496.49 684.946 L1497.05 684.946 L1497.61 684.946 L1498.16 684.946 L1498.72 684.946 L1499.28 684.946 L1499.84 684.946 L1500.4 684.946 L1500.96 684.946 L1501.52 684.946 L1502.08 684.946 L1502.64 684.946 L1503.2 684.946 L1503.76 684.946 L1504.32 684.946 L1504.88 684.946 L1505.44 684.946 L1505.99 684.946 L1506.55 684.946 L1507.11 684.946 L1507.67 684.946 L1508.23 684.946 L1508.79 684.946 L1509.35 684.946 L1509.91 684.946 L1510.47 684.946 L1511.03 684.946 L1511.59 684.946 L1512.15 684.946 L1512.71 684.946 L1513.26 684.946 L1513.82 684.946 L1514.38 684.946 L1514.94 684.946 L1515.5 684.946 L1516.06 684.946 L1516.62 684.946 L1517.18 684.946 L1517.74 684.946 L1518.3 684.946 L1518.86 684.946 L1519.42 684.946 L1519.98 684.946 L1520.53 684.946 L1521.09 684.946 L1521.65 684.946 L1522.21 684.946 L1522.77 684.946 L1523.33 684.946 L1523.89 684.946 L1524.45 684.946 L1525.01 684.946 L1525.57 684.946 L1526.13 684.946 L1526.69 684.946 L1527.25 684.946 L1527.81 684.946 L1528.36 684.946 L1528.92 684.946 L1529.48 684.946 L1530.04 684.946 L1530.6 684.946 L1531.16 684.946 L1531.72 684.946 L1532.28 684.946 L1532.84 684.946 L1533.4 684.946 L1533.96 684.946 L1534.52 684.946 L1535.08 684.946 L1535.63 684.946 L1536.19 684.946 L1536.75 684.946 L1537.31 684.946 L1537.87 684.946 L1538.43 684.946 L1538.99 684.946 L1539.55 684.946 L1540.11 684.946 L1540.67 684.946 L1541.23 684.946 L1541.79 684.946 L1542.35 684.946 L1542.9 684.946 L1543.46 684.946 L1544.02 684.946 L1544.58 684.946 L1545.14 684.946 L1545.7 684.946 L1546.26 684.946 L1546.82 684.946 L1547.38 684.946 L1547.94 684.946 L1548.5 684.946 L1549.06 684.946 L1549.62 684.946 L1550.18 684.946 L1550.73 684.946 L1551.29 684.946 L1551.85 684.946 L1552.41 684.946 L1552.97 684.946 L1553.53 684.946 L1554.09 684.946 L1554.65 684.946 L1555.21 684.946 L1555.77 684.946 L1556.33 684.946 L1556.89 684.946 L1557.45 684.946 L1558 684.946 L1558.56 684.946 L1559.12 684.946 L1559.68 684.946 L1560.24 684.946 L1560.8 684.946 L1561.36 684.946 L1561.92 684.946 L1562.48 684.946 L1563.04 684.946 L1563.6 684.946 L1564.16 684.946 L1564.72 684.946 L1565.28 684.946 L1565.83 684.946 L1566.39 684.946 L1566.95 684.946 L1567.51 684.946 L1568.07 684.946 L1568.63 684.946 L1569.19 684.946 L1569.75 684.946 L1570.31 684.946 L1570.87 684.946 L1571.43 684.946 L1571.99 684.946 L1572.55 684.946 L1573.1 684.946 L1573.66 684.946 L1574.22 684.946 L1574.78 684.946 L1575.34 684.946 L1575.9 684.946 L1576.46 684.946 L1577.02 684.946 L1577.58 684.946 L1578.14 684.946 L1578.7 684.946 L1579.26 684.946 L1579.82 684.946 L1580.37 684.946 L1580.93 684.946 L1581.49 684.946 L1582.05 684.946 L1582.61 684.946 L1583.17 684.946 L1583.73 684.946 L1584.29 684.946 L1584.85 684.946 L1585.41 684.946 L1585.97 684.946 L1586.53 684.946 L1587.09 684.946 L1587.65 684.946 L1588.2 684.946 L1588.76 684.946 L1589.32 684.946 L1589.88 684.946 L1590.44 684.946 L1591 684.946 L1591.56 684.946 L1592.12 684.946 L1592.68 684.946 L1593.24 684.946 L1593.8 684.946 L1594.36 684.946 L1594.92 684.946 L1595.47 684.946 L1596.03 684.946 L1596.59 684.946 L1597.15 684.946 L1597.71 684.946 L1598.27 684.946 L1598.83 684.946 L1599.39 684.946 L1599.95 684.946 L1600.51 684.946 L1601.07 684.946 L1601.63 684.946 L1602.19 684.946 L1602.74 684.946 L1603.3 684.946 L1603.86 684.946 L1604.42 684.946 L1604.98 684.946 L1605.54 684.946 L1606.1 684.946 L1606.66 684.946 L1607.22 684.946 L1607.78 684.946 L1608.34 684.946 L1608.9 684.946 L1609.46 684.946 L1610.02 684.946 L1610.57 684.946 L1611.13 684.946 L1611.69 684.946 L1612.25 684.946 L1612.81 684.946 L1613.37 684.946 L1613.93 684.946 L1614.49 684.946 L1615.05 684.946 L1615.61 684.946 L1616.17 684.946 L1616.73 684.946 L1617.29 684.946 L1617.84 684.946 L1618.4 684.946 L1618.96 684.946 L1619.52 684.946 L1620.08 684.946 L1620.64 684.946 L1621.2 684.946 L1621.76 684.946 L1622.32 684.946 L1622.88 684.946 L1623.44 684.946 L1624 684.946 L1624.56 684.946 L1625.11 684.946 L1625.67 684.946 L1626.23 684.946 L1626.79 684.946 L1627.35 684.946 L1627.91 684.946 L1628.47 684.946 L1629.03 684.946 L1629.59 684.946 L1630.15 684.946 L1630.71 684.946 L1631.27 684.946 L1631.83 684.946 L1632.39 684.946 L1632.94 684.946 L1633.5 684.946 L1634.06 684.946 L1634.62 684.946 L1635.18 684.946 L1635.74 684.946 L1636.3 684.946 L1636.86 684.946 L1637.42 684.946 L1637.98 684.946 L1638.54 684.946 L1639.1 684.946 L1639.66 684.946 L1640.21 684.946 L1640.77 684.946 L1641.33 684.946 L1641.89 684.946 L1642.45 684.946 L1643.01 684.946 L1643.57 684.946 L1644.13 684.946 L1644.69 684.946 L1645.25 684.946 L1645.81 684.946 L1646.37 684.946 L1646.93 684.946 L1647.48 684.946 L1648.04 684.946 L1648.6 684.946 L1649.16 684.946 L1649.72 684.946 L1650.28 684.946 L1650.84 684.946 L1651.4 684.946 L1651.96 684.946 L1652.52 684.946 L1653.08 684.946 L1653.64 684.946 L1654.2 684.946 L1654.76 684.946 L1655.31 684.946 L1655.87 684.946 L1656.43 684.946 L1656.99 684.946 L1657.55 684.946 L1658.11 684.946 L1658.67 684.946 L1659.23 684.946 L1659.79 684.946 L1660.35 684.946 L1660.91 684.946 L1661.47 684.946 L1662.03 684.946 L1662.58 684.946 L1663.14 684.946 L1663.7 684.946 L1664.26 684.946 L1664.82 684.946 L1665.38 684.946 L1665.94 684.946 L1666.5 684.946 L1667.06 684.946 L1667.62 684.946 L1668.18 684.946 L1668.74 684.946 L1669.3 684.946 L1669.85 684.946 L1670.41 684.946 L1670.97 684.946 L1671.53 684.946 L1672.09 684.946 L1672.65 684.946 L1673.21 684.946 L1673.77 684.946 L1674.33 684.946 L1674.89 684.946 L1675.45 684.946 L1676.01 684.946 L1676.57 684.946 L1677.13 684.946 L1677.68 684.946 L1678.24 684.946 L1678.8 684.946 L1679.36 684.946 L1679.92 684.946 L1680.48 684.946 L1681.04 684.946 L1681.6 684.946 L1682.16 684.946 L1682.72 684.946 L1683.28 684.946 L1683.84 684.946 L1684.4 684.946 L1684.95 684.946 L1685.51 684.946 L1686.07 684.946 L1686.63 684.946 L1687.19 684.946 L1687.75 684.946 L1688.31 684.946 L1688.87 684.946 L1689.43 684.946 L1689.99 684.946 L1690.55 684.946 L1691.11 684.946 L1691.67 684.946 L1692.23 684.946 L1692.78 684.946 L1693.34 684.946 L1693.9 684.946 L1694.46 684.946 L1695.02 684.946 L1695.58 684.946 L1696.14 684.946 L1696.7 684.946 L1697.26 684.946 L1697.82 684.946 L1698.38 684.946 L1698.94 684.946 L1699.5 684.946 L1700.05 684.946 L1700.61 684.946 L1701.17 684.946 L1701.73 684.946 L1702.29 684.946 L1702.85 684.946 L1703.41 684.946 L1703.97 684.946 L1704.53 684.946 L1705.09 684.946 L1705.65 684.946 L1706.21 684.946 L1706.77 684.946 L1707.32 684.946 L1707.88 684.946 L1708.44 684.946 L1709 684.946 L1709.56 684.946 L1710.12 684.946 L1710.68 684.946 L1711.24 684.946 L1711.8 684.946 L1712.36 684.946 L1712.92 684.946 L1713.48 684.946 L1714.04 684.946 L1714.6 684.946 L1715.15 684.946 L1715.71 684.946 L1716.27 684.946 L1716.83 684.946 L1717.39 684.946 L1717.95 684.946 L1718.51 684.946 L1719.07 684.946 L1719.63 684.946 L1720.19 684.946 L1720.75 684.946 L1721.31 684.946 L1721.87 684.946 L1722.42 684.946 L1722.98 684.946 L1723.54 684.946 L1724.1 684.946 L1724.66 684.946 L1725.22 684.946 L1725.78 684.946 L1726.34 684.946 L1726.9 684.946 L1727.46 684.946 L1728.02 684.946 L1728.58 684.946 L1729.14 684.946 L1729.69 684.946 L1730.25 684.946 L1730.81 684.946 L1731.37 684.946 L1731.93 684.946 L1732.49 684.946 L1733.05 684.946 L1733.61 684.946 L1734.17 684.946 L1734.73 684.946 L1735.29 684.946 L1735.85 684.946 L1736.41 684.946 L1736.97 684.946 L1737.52 684.946 L1738.08 684.946 L1738.64 684.946 L1739.2 684.946 L1739.76 684.946 L1740.32 684.946 L1740.88 684.946 L1741.44 684.946 L1742 684.946 L1742.56 684.946 L1743.12 684.946 L1743.68 684.946 L1744.24 684.946 L1744.79 684.946 L1745.35 684.946 L1745.91 684.946 L1746.47 684.946 L1747.03 684.946 L1747.59 684.946 L1748.15 684.946 L1748.71 684.946 L1749.27 684.946 L1749.83 684.946 L1750.39 684.946 L1750.95 684.946 L1751.51 684.946 L1752.06 684.946 L1752.62 684.946 L1753.18 684.946 L1753.74 684.946 L1754.3 684.946 L1754.86 684.946 L1755.42 684.946 L1755.98 684.946 L1756.54 684.946 L1757.1 684.946 L1757.66 684.946 L1758.22 684.946 L1758.78 684.946 L1759.34 684.946 L1759.89 684.946 L1760.45 684.946 L1761.01 684.946 L1761.57 684.946 L1762.13 684.946 L1762.69 684.946 L1763.25 684.946 L1763.81 684.946 L1764.37 684.946 L1764.93 684.946 L1765.49 684.946 L1766.05 684.946 L1766.61 684.946 L1767.16 684.946 L1767.72 684.946 L1768.28 684.946 L1768.84 684.946 L1769.4 684.946 L1769.96 684.946 L1770.52 684.946 L1771.08 684.946 L1771.64 684.946 L1772.2 684.946 L1772.76 684.946 L1773.32 684.946 L1773.88 684.946 L1774.43 684.946 L1774.99 684.946 L1775.55 684.946 L1776.11 684.946 L1776.67 684.946 L1777.23 684.946 L1777.79 684.946 L1778.35 684.946 L1778.91 684.946 L1779.47 684.946 L1780.03 684.946 L1780.59 684.946 L1781.15 684.946 L1781.71 684.946 L1782.26 684.946 L1782.82 684.946 L1783.38 684.946 L1783.94 684.946 L1784.5 684.946 L1785.06 684.946 L1785.62 684.946 L1786.18 684.946 L1786.74 684.946 L1787.3 684.946 L1787.86 684.946 L1788.42 684.946 L1788.98 684.946 L1789.53 684.946 L1790.09 684.946 L1790.65 684.946 L1791.21 684.946 L1791.77 684.946 L1792.33 684.946 L1792.89 684.946 L1793.45 684.946 L1794.01 684.946 L1794.57 684.946 L1795.13 684.946 L1795.69 684.946 L1796.25 684.946 L1796.8 684.946 L1797.36 684.946 L1797.92 684.946 L1798.48 684.946 L1799.04 684.946 L1799.6 684.946 L1800.16 684.946 L1800.72 684.946 L1801.28 684.946 L1801.84 684.946 L1802.4 684.946 L1802.96 684.946 L1803.52 684.946 L1804.08 684.946 L1804.63 684.946 L1805.19 684.946 L1805.75 684.946 L1806.31 684.946 L1806.87 684.946 L1807.43 684.946 L1807.99 684.946 L1808.55 684.946 L1809.11 684.946 L1809.67 684.946 L1810.23 684.946 L1810.79 684.946 L1811.35 684.946 L1811.9 684.946 L1812.46 684.946 L1813.02 684.946 L1813.58 684.946 L1814.14 684.946 L1814.7 684.946 L1815.26 684.946 L1815.82 684.946 L1816.38 684.946 L1816.94 684.946 L1817.5 684.946 L1818.06 684.946 L1818.62 684.946 L1819.18 684.946 L1819.73 684.946 L1820.29 684.946 L1820.85 684.946 L1821.41 684.946 L1821.97 684.946 L1822.53 684.946 L1823.09 684.946 L1823.65 684.946 L1824.21 684.946 L1824.77 684.946 L1825.33 684.946 L1825.89 684.946 L1826.45 684.946 L1827 684.946 L1827.56 684.946 L1828.12 684.946 L1828.68 684.946 L1829.24 684.946 L1829.8 684.946 L1830.36 684.946 L1830.92 684.946 L1831.48 684.946 L1832.04 684.946 L1832.6 684.946 L1833.16 684.946 L1833.72 684.946 L1834.27 684.946 L1834.83 684.946 L1835.39 684.946 L1835.95 684.946 L1836.51 684.946 L1837.07 684.946 L1837.63 684.946 L1838.19 684.946 L1838.19 683.38 L1837.63 683.38 L1837.07 683.38 L1836.51 683.38 L1835.95 683.38 L1835.39 683.38 L1834.83 683.38 L1834.27 683.38 L1833.72 683.38 L1833.16 683.38 L1832.6 683.38 L1832.04 683.38 L1831.48 683.38 L1830.92 683.38 L1830.36 683.38 L1829.8 683.38 L1829.24 683.38 L1828.68 683.38 L1828.12 683.38 L1827.56 683.38 L1827 683.38 L1826.45 683.38 L1825.89 683.38 L1825.33 683.38 L1824.77 683.38 L1824.21 683.38 L1823.65 683.38 L1823.09 683.38 L1822.53 683.38 L1821.97 683.38 L1821.41 683.38 L1820.85 683.38 L1820.29 683.38 L1819.73 683.38 L1819.18 683.38 L1818.62 683.38 L1818.06 683.38 L1817.5 683.38 L1816.94 683.38 L1816.38 683.38 L1815.82 683.38 L1815.26 683.38 L1814.7 683.38 L1814.14 683.38 L1813.58 683.38 L1813.02 683.38 L1812.46 683.38 L1811.9 683.38 L1811.35 683.38 L1810.79 683.38 L1810.23 683.38 L1809.67 683.38 L1809.11 683.38 L1808.55 683.38 L1807.99 683.38 L1807.43 683.38 L1806.87 683.38 L1806.31 683.38 L1805.75 683.38 L1805.19 683.38 L1804.63 683.38 L1804.08 683.38 L1803.52 683.38 L1802.96 683.38 L1802.4 683.38 L1801.84 683.38 L1801.28 683.38 L1800.72 683.38 L1800.16 683.38 L1799.6 683.38 L1799.04 683.38 L1798.48 683.38 L1797.92 683.38 L1797.36 683.38 L1796.8 683.38 L1796.25 683.38 L1795.69 683.38 L1795.13 683.38 L1794.57 683.38 L1794.01 683.38 L1793.45 683.38 L1792.89 683.38 L1792.33 683.38 L1791.77 683.38 L1791.21 683.38 L1790.65 683.38 L1790.09 683.38 L1789.53 683.38 L1788.98 683.38 L1788.42 683.38 L1787.86 683.38 L1787.3 683.38 L1786.74 683.38 L1786.18 683.38 L1785.62 683.38 L1785.06 683.38 L1784.5 683.38 L1783.94 683.38 L1783.38 683.38 L1782.82 683.38 L1782.26 683.38 L1781.71 683.38 L1781.15 683.38 L1780.59 683.38 L1780.03 683.38 L1779.47 683.38 L1778.91 683.38 L1778.35 683.38 L1777.79 683.38 L1777.23 683.38 L1776.67 683.38 L1776.11 683.38 L1775.55 683.38 L1774.99 683.38 L1774.43 683.38 L1773.88 683.38 L1773.32 683.38 L1772.76 683.38 L1772.2 683.38 L1771.64 683.38 L1771.08 683.38 L1770.52 683.38 L1769.96 683.38 L1769.4 683.38 L1768.84 683.38 L1768.28 683.38 L1767.72 683.38 L1767.16 683.38 L1766.61 683.38 L1766.05 683.38 L1765.49 683.38 L1764.93 683.38 L1764.37 683.38 L1763.81 683.38 L1763.25 683.38 L1762.69 683.38 L1762.13 683.38 L1761.57 683.38 L1761.01 683.38 L1760.45 683.38 L1759.89 683.38 L1759.34 683.38 L1758.78 683.38 L1758.22 683.38 L1757.66 683.38 L1757.1 683.38 L1756.54 683.38 L1755.98 683.38 L1755.42 683.38 L1754.86 683.38 L1754.3 683.38 L1753.74 683.38 L1753.18 683.38 L1752.62 683.38 L1752.06 683.38 L1751.51 683.38 L1750.95 683.38 L1750.39 683.38 L1749.83 683.38 L1749.27 683.38 L1748.71 683.38 L1748.15 683.38 L1747.59 683.38 L1747.03 683.38 L1746.47 683.38 L1745.91 683.38 L1745.35 683.38 L1744.79 683.38 L1744.24 683.38 L1743.68 683.38 L1743.12 683.38 L1742.56 683.38 L1742 683.38 L1741.44 683.38 L1740.88 683.38 L1740.32 683.38 L1739.76 683.38 L1739.2 683.38 L1738.64 683.38 L1738.08 683.38 L1737.52 683.38 L1736.97 683.38 L1736.41 683.38 L1735.85 683.38 L1735.29 683.38 L1734.73 683.38 L1734.17 683.38 L1733.61 683.38 L1733.05 683.38 L1732.49 683.38 L1731.93 683.38 L1731.37 683.38 L1730.81 683.38 L1730.25 683.38 L1729.69 683.38 L1729.14 683.38 L1728.58 683.38 L1728.02 683.38 L1727.46 683.38 L1726.9 683.38 L1726.34 683.38 L1725.78 683.38 L1725.22 683.38 L1724.66 683.38 L1724.1 683.38 L1723.54 683.38 L1722.98 683.38 L1722.42 683.38 L1721.87 683.38 L1721.31 683.38 L1720.75 683.38 L1720.19 683.38 L1719.63 683.38 L1719.07 683.38 L1718.51 683.38 L1717.95 683.38 L1717.39 683.38 L1716.83 683.38 L1716.27 683.38 L1715.71 683.38 L1715.15 683.38 L1714.6 683.38 L1714.04 683.38 L1713.48 683.38 L1712.92 683.38 L1712.36 683.38 L1711.8 683.38 L1711.24 683.38 L1710.68 683.38 L1710.12 683.38 L1709.56 683.38 L1709 683.38 L1708.44 683.38 L1707.88 683.38 L1707.32 683.38 L1706.77 683.38 L1706.21 683.38 L1705.65 683.38 L1705.09 683.38 L1704.53 683.38 L1703.97 683.38 L1703.41 683.38 L1702.85 683.38 L1702.29 683.38 L1701.73 683.38 L1701.17 683.38 L1700.61 683.38 L1700.05 683.38 L1699.5 683.38 L1698.94 683.38 L1698.38 683.38 L1697.82 683.38 L1697.26 683.38 L1696.7 683.38 L1696.14 683.38 L1695.58 683.38 L1695.02 683.38 L1694.46 683.38 L1693.9 683.38 L1693.34 683.38 L1692.78 683.38 L1692.23 683.38 L1691.67 683.38 L1691.11 683.38 L1690.55 683.38 L1689.99 683.38 L1689.43 683.38 L1688.87 683.38 L1688.31 683.38 L1687.75 683.38 L1687.19 683.38 L1686.63 683.38 L1686.07 683.38 L1685.51 683.38 L1684.95 683.38 L1684.4 683.38 L1683.84 683.38 L1683.28 683.38 L1682.72 683.38 L1682.16 683.38 L1681.6 683.38 L1681.04 683.38 L1680.48 683.38 L1679.92 683.38 L1679.36 683.38 L1678.8 683.38 L1678.24 683.38 L1677.68 683.38 L1677.13 683.38 L1676.57 683.38 L1676.01 683.38 L1675.45 683.38 L1674.89 683.38 L1674.33 683.38 L1673.77 683.38 L1673.21 683.38 L1672.65 683.38 L1672.09 683.38 L1671.53 683.38 L1670.97 683.38 L1670.41 683.38 L1669.85 683.38 L1669.3 683.38 L1668.74 683.38 L1668.18 683.38 L1667.62 683.38 L1667.06 683.38 L1666.5 683.38 L1665.94 683.38 L1665.38 683.38 L1664.82 683.38 L1664.26 683.38 L1663.7 683.38 L1663.14 683.38 L1662.58 683.38 L1662.03 683.38 L1661.47 683.38 L1660.91 683.38 L1660.35 683.38 L1659.79 683.38 L1659.23 683.38 L1658.67 683.38 L1658.11 683.38 L1657.55 683.38 L1656.99 683.38 L1656.43 683.38 L1655.87 683.38 L1655.31 683.38 L1654.76 683.38 L1654.2 683.38 L1653.64 683.38 L1653.08 683.38 L1652.52 683.38 L1651.96 683.38 L1651.4 683.38 L1650.84 683.38 L1650.28 683.38 L1649.72 683.38 L1649.16 683.38 L1648.6 683.38 L1648.04 683.38 L1647.48 683.38 L1646.93 683.38 L1646.37 683.38 L1645.81 683.38 L1645.25 683.38 L1644.69 683.38 L1644.13 683.38 L1643.57 683.38 L1643.01 683.38 L1642.45 683.38 L1641.89 683.38 L1641.33 683.38 L1640.77 683.38 L1640.21 683.38 L1639.66 683.38 L1639.1 683.38 L1638.54 683.38 L1637.98 683.38 L1637.42 683.38 L1636.86 683.38 L1636.3 683.38 L1635.74 683.38 L1635.18 683.38 L1634.62 683.38 L1634.06 683.38 L1633.5 683.38 L1632.94 683.38 L1632.39 683.38 L1631.83 683.38 L1631.27 683.38 L1630.71 683.38 L1630.15 683.38 L1629.59 683.38 L1629.03 683.38 L1628.47 683.38 L1627.91 683.38 L1627.35 683.38 L1626.79 683.38 L1626.23 683.38 L1625.67 683.38 L1625.11 683.38 L1624.56 683.38 L1624 683.38 L1623.44 683.38 L1622.88 683.38 L1622.32 683.38 L1621.76 683.38 L1621.2 683.38 L1620.64 683.38 L1620.08 683.38 L1619.52 683.38 L1618.96 683.38 L1618.4 683.38 L1617.84 683.38 L1617.29 683.38 L1616.73 683.38 L1616.17 683.38 L1615.61 683.38 L1615.05 683.38 L1614.49 683.38 L1613.93 683.38 L1613.37 683.38 L1612.81 683.38 L1612.25 683.38 L1611.69 683.38 L1611.13 683.38 L1610.57 683.38 L1610.02 683.38 L1609.46 683.38 L1608.9 683.38 L1608.34 683.38 L1607.78 683.38 L1607.22 683.38 L1606.66 683.38 L1606.1 683.38 L1605.54 683.38 L1604.98 683.38 L1604.42 683.38 L1603.86 683.38 L1603.3 683.38 L1602.74 683.38 L1602.19 683.38 L1601.63 683.38 L1601.07 683.38 L1600.51 683.38 L1599.95 683.38 L1599.39 683.38 L1598.83 683.38 L1598.27 683.38 L1597.71 683.38 L1597.15 683.38 L1596.59 683.38 L1596.03 683.38 L1595.47 683.38 L1594.92 683.38 L1594.36 683.38 L1593.8 683.38 L1593.24 683.38 L1592.68 683.38 L1592.12 683.38 L1591.56 683.38 L1591 683.38 L1590.44 683.38 L1589.88 683.38 L1589.32 683.38 L1588.76 683.38 L1588.2 683.38 L1587.65 683.38 L1587.09 683.38 L1586.53 683.38 L1585.97 683.38 L1585.41 683.38 L1584.85 683.38 L1584.29 683.38 L1583.73 683.38 L1583.17 683.38 L1582.61 683.38 L1582.05 683.38 L1581.49 683.38 L1580.93 683.38 L1580.37 683.38 L1579.82 683.38 L1579.26 683.38 L1578.7 683.38 L1578.14 683.38 L1577.58 683.38 L1577.02 683.38 L1576.46 683.38 L1575.9 683.38 L1575.34 683.38 L1574.78 683.38 L1574.22 683.38 L1573.66 683.38 L1573.1 683.38 L1572.55 683.38 L1571.99 683.38 L1571.43 683.38 L1570.87 683.38 L1570.31 683.38 L1569.75 683.38 L1569.19 683.38 L1568.63 683.38 L1568.07 683.38 L1567.51 683.38 L1566.95 683.38 L1566.39 683.38 L1565.83 683.38 L1565.28 683.38 L1564.72 683.38 L1564.16 683.38 L1563.6 683.38 L1563.04 683.38 L1562.48 683.38 L1561.92 683.38 L1561.36 683.38 L1560.8 683.38 L1560.24 683.38 L1559.68 683.38 L1559.12 683.38 L1558.56 683.38 L1558 683.38 L1557.45 683.38 L1556.89 683.38 L1556.33 683.38 L1555.77 683.38 L1555.21 683.38 L1554.65 683.38 L1554.09 683.38 L1553.53 683.38 L1552.97 683.38 L1552.41 683.38 L1551.85 683.38 L1551.29 683.38 L1550.73 683.38 L1550.18 683.38 L1549.62 683.38 L1549.06 683.38 L1548.5 683.38 L1547.94 683.38 L1547.38 683.38 L1546.82 683.38 L1546.26 683.38 L1545.7 683.38 L1545.14 683.38 L1544.58 683.38 L1544.02 683.38 L1543.46 683.38 L1542.9 683.38 L1542.35 683.38 L1541.79 683.38 L1541.23 683.38 L1540.67 683.38 L1540.11 683.38 L1539.55 683.38 L1538.99 683.38 L1538.43 683.38 L1537.87 683.38 L1537.31 683.38 L1536.75 683.38 L1536.19 683.38 L1535.63 683.38 L1535.08 683.38 L1534.52 683.38 L1533.96 683.38 L1533.4 683.38 L1532.84 683.38 L1532.28 683.38 L1531.72 683.38 L1531.16 683.38 L1530.6 683.38 L1530.04 683.38 L1529.48 683.38 L1528.92 683.38 L1528.36 683.38 L1527.81 683.38 L1527.25 683.38 L1526.69 683.38 L1526.13 683.38 L1525.57 683.38 L1525.01 683.38 L1524.45 683.38 L1523.89 683.38 L1523.33 683.38 L1522.77 683.38 L1522.21 683.38 L1521.65 683.38 L1521.09 683.38 L1520.53 683.38 L1519.98 683.38 L1519.42 683.38 L1518.86 683.38 L1518.3 683.38 L1517.74 683.38 L1517.18 683.38 L1516.62 683.38 L1516.06 683.38 L1515.5 683.38 L1514.94 683.38 L1514.38 683.38 L1513.82 683.38 L1513.26 683.38 L1512.71 683.38 L1512.15 683.38 L1511.59 683.38 L1511.03 683.38 L1510.47 683.38 L1509.91 683.38 L1509.35 683.38 L1508.79 683.38 L1508.23 683.38 L1507.67 683.38 L1507.11 683.38 L1506.55 683.38 L1505.99 683.38 L1505.44 683.38 L1504.88 683.38 L1504.32 683.38 L1503.76 683.38 L1503.2 683.38 L1502.64 683.38 L1502.08 683.38 L1501.52 683.38 L1500.96 683.38 L1500.4 683.38 L1499.84 683.38 L1499.28 683.38 L1498.72 683.38 L1498.16 683.38 L1497.61 683.38 L1497.05 683.38 L1496.49 683.38 L1495.93 683.38 L1495.37 683.38 L1494.81 683.38 L1494.25 683.38 L1493.69 683.38 L1493.13 683.38 L1492.57 683.38 L1492.01 683.38 L1491.45 683.38 L1490.89 683.38 L1490.34 683.38 L1489.78 683.38 L1489.22 683.38 L1488.66 683.38 L1488.1 683.38 L1487.54 683.38 L1486.98 683.38 L1486.42 683.38 L1485.86 683.38 L1485.3 683.38 L1484.74 683.38 L1484.18 683.38 L1483.62 683.38 L1483.07 683.38 L1482.51 683.38 L1481.95 683.38 L1481.39 683.38 L1480.83 683.38 L1480.27 683.38 L1479.71 683.38 L1479.15 683.38 L1478.59 683.38 L1478.03 683.38 L1477.47 683.38 L1476.91 683.38 L1476.35 683.38 L1475.79 683.38 L1475.24 683.38 L1474.68 683.38 L1474.12 683.38 L1473.56 683.38 L1473 683.38 L1472.44 683.38 L1471.88 683.38 L1471.32 683.38 L1470.76 683.38 L1470.2 683.38 L1469.64 683.38 L1469.08 683.38 L1468.52 683.38 L1467.97 683.38 L1467.41 683.38 L1466.85 683.38 L1466.29 683.38 L1465.73 683.38 L1465.17 683.38 L1464.61 683.38 L1464.05 683.38 L1463.49 683.38 L1462.93 683.38 L1462.37 683.38 L1461.81 683.38 L1461.25 683.38 L1460.7 683.38 L1460.14 683.38 L1459.58 683.38 L1459.02 683.38 L1458.46 683.38 L1457.9 683.38 L1457.34 683.38 L1456.78 683.38 L1456.22 683.38 L1455.66 683.38 L1455.1 683.38 L1454.54 683.38 L1453.98 683.38 L1453.42 683.38 L1452.87 683.38 L1452.31 683.38 L1451.75 683.38 L1451.19 683.38 L1450.63 683.38 L1450.07 683.38 L1449.51 683.38 L1448.95 683.38 L1448.39 683.38 L1447.83 683.38 L1447.27 683.38 L1446.71 683.38 L1446.15 683.38 L1445.6 683.38 L1445.04 683.38 L1444.48 683.38 L1443.92 683.38 L1443.36 683.38 L1442.8 683.38 L1442.24 683.38 L1441.68 683.38 L1441.12 683.38 L1440.56 683.38 L1440 683.38 L1439.44 683.38 L1438.88 683.38 L1438.33 683.38 L1437.77 683.38 L1437.21 683.38 L1436.65 683.38 L1436.09 683.38 L1435.53 683.38 L1434.97 683.38 L1434.41 683.38 L1433.85 683.38 L1433.29 683.38 L1432.73 683.38 L1432.17 683.38 L1431.61 683.38 L1431.05 683.38 L1430.5 683.38 L1429.94 683.38 L1429.38 683.38 L1428.82 683.38 L1428.26 683.38 L1427.7 683.38 L1427.14 683.38 L1426.58 683.38 L1426.02 683.38 L1425.46 683.38 L1424.9 683.38 L1424.34 683.38 L1423.78 683.38 L1423.23 683.38 L1422.67 683.38 L1422.11 683.38 L1421.55 683.38 L1420.99 683.38 L1420.43 683.38 L1419.87 683.38 L1419.31 683.38 L1418.75 683.38 L1418.19 683.38 L1417.63 683.38 L1417.07 683.38 L1416.51 683.38 L1415.95 683.38 L1415.4 683.38 L1414.84 683.38 L1414.28 683.38 L1413.72 683.38 L1413.16 683.38 L1412.6 683.38 L1412.04 683.38 L1411.48 683.38 L1410.92 683.38 L1410.36 683.38 L1409.8 683.38 L1409.24 683.38 L1408.68 683.38 L1408.13 683.38 L1407.57 683.38 L1407.01 683.38 L1406.45 683.38 L1405.89 683.38 L1405.33 683.38 L1404.77 683.38 L1404.21 683.38 L1403.65 683.38 L1403.09 683.38 L1402.53 683.38 L1401.97 683.38 L1401.41 683.38 L1400.86 683.38 L1400.3 683.38 L1399.74 683.38 L1399.18 683.38 L1398.62 683.38 L1398.06 683.38 L1397.5 683.38 L1396.94 683.38 L1396.38 683.38 L1395.82 683.38 L1395.26 683.38 L1394.7 683.38 L1394.14 683.38 L1393.58 683.38 L1393.03 683.38 L1392.47 683.38 L1391.91 683.38 L1391.35 683.38 L1390.79 683.38 L1390.23 683.38 L1389.67 683.38 L1389.11 683.38 L1388.55 683.38 L1387.99 683.38 L1387.43 683.38 L1386.87 683.38 L1386.31 683.38 L1385.76 683.38 L1385.2 683.38 L1384.64 683.38 L1384.08 683.38 L1383.52 683.38 L1382.96 683.38 L1382.4 683.38 L1381.84 683.38 L1381.28 683.38 L1380.72 683.38 L1380.16 683.38 L1379.6 683.38 L1379.04 683.38 L1378.49 683.38 L1377.93 683.38 L1377.37 683.38 L1376.81 683.38 L1376.25 683.38 L1375.69 683.38 L1375.13 683.38 L1374.57 683.38 L1374.01 683.38 L1373.45 683.38 L1372.89 683.38 L1372.33 683.38 L1371.77 683.38 L1371.21 683.38 L1370.66 683.38 L1370.1 683.38 L1369.54 683.38 L1368.98 683.38 L1368.42 683.38 L1367.86 683.38 L1367.3 683.38 L1366.74 683.38 L1366.18 683.38 L1365.62 683.38 L1365.06 683.38 L1364.5 683.38 L1363.94 683.38 L1363.39 683.38 L1362.83 683.38 L1362.27 683.38 L1361.71 683.38 L1361.15 683.38 L1360.59 683.38 L1360.03 683.38 L1359.47 683.38 L1358.91 683.38 L1358.35 683.38 L1357.79 683.38 L1357.23 683.38 L1356.67 683.38 L1356.12 683.38 L1355.56 683.38 L1355 683.38 L1354.44 683.38 L1353.88 683.38 L1353.32 683.38 L1352.76 683.38 L1352.2 683.38 L1351.64 683.38 L1351.08 683.38 L1350.52 683.38 L1349.96 683.38 L1349.4 683.38 L1348.84 683.38 L1348.29 683.38 L1347.73 683.38 L1347.17 683.38 L1346.61 683.38 L1346.05 683.38 L1345.49 683.38 L1344.93 683.38 L1344.37 683.38 L1343.81 683.38 L1343.25 683.38 L1342.69 683.38 L1342.13 683.38 L1341.57 683.38 L1341.02 683.38 L1340.46 683.38 L1339.9 683.38 L1339.34 683.38 L1338.78 683.38 L1338.22 683.38 L1337.66 683.38 L1337.1 683.38 L1336.54 683.38 L1335.98 683.38 L1335.42 683.38 L1334.86 683.38 L1334.3 683.38 L1333.75 683.38 L1333.19 683.38 L1332.63 683.38 L1332.07 683.38 L1331.51 683.38 L1330.95 683.38 L1330.39 683.38 L1329.83 683.38 L1329.27 683.38 L1328.71 683.38 L1328.15 683.38 L1327.59 683.38 L1327.03 683.38 L1326.47 683.38 L1325.92 683.38 L1325.36 683.38 L1324.8 683.38 L1324.24 683.38 L1323.68 683.38 L1323.12 683.38 L1322.56 683.38 L1322 683.38 L1321.44 683.38 L1320.88 683.38 L1320.32 683.38 L1319.76 683.38 L1319.2 683.38 L1318.65 683.38 L1318.09 683.38 L1317.53 683.38 L1316.97 683.38 L1316.41 683.38 L1315.85 683.38 L1315.29 683.38 L1314.73 683.38 L1314.17 683.38 L1313.61 683.38 L1313.05 683.38 L1312.49 683.38 L1311.93 683.38 L1311.38 683.38 L1310.82 683.38 L1310.26 683.38 L1309.7 683.38 L1309.14 683.38 L1308.58 683.38 L1308.02 683.38 L1307.46 683.38 L1306.9 683.38 L1306.34 683.38 L1305.78 683.38 L1305.22 683.38 L1304.66 683.38 L1304.1 683.38 L1303.55 683.38 L1302.99 683.38 L1302.43 683.38 L1301.87 683.38 L1301.31 683.38 L1300.75 683.38 L1300.19 683.38 L1299.63 683.38 L1299.07 683.38 L1298.51 683.38 L1297.95 683.38 L1297.39 683.38 L1296.83 683.38 L1296.28 683.38 L1295.72 683.38 L1295.16 683.38 L1294.6 683.38 L1294.04 683.38 L1293.48 683.38 L1292.92 683.38 L1292.36 683.38 L1291.8 683.38 L1291.24 683.38 L1290.68 683.38 L1290.12 683.38 L1289.56 683.38 L1289 683.38 L1288.45 683.38 L1287.89 683.38 L1287.33 683.38 L1286.77 683.38 L1286.21 683.38 L1285.65 683.38 L1285.09 683.38 L1284.53 683.38 L1283.97 683.38 L1283.41 683.38 L1282.85 683.38 L1282.29 683.38 L1281.73 683.38 L1281.18 683.38 L1280.62 683.38 L1280.06 683.38 L1279.5 683.38 L1278.94 683.38 L1278.38 683.38 L1277.82 683.38 L1277.26 683.38 L1276.7 683.38 L1276.14 683.38 L1275.58 683.38 L1275.02 683.38 L1274.46 683.38 L1273.91 683.38 L1273.35 683.38 L1272.79 683.38 L1272.23 683.38 L1271.67 683.38 L1271.11 683.38 L1270.55 683.38 L1269.99 683.38 L1269.43 683.38 L1268.87 683.38 L1268.31 683.38 L1267.75 683.38 L1267.19 683.38 L1266.63 683.38 L1266.08 683.38 L1265.52 683.38 L1264.96 683.38 L1264.4 683.38 L1263.84 683.38 L1263.28 683.38 L1262.72 683.38 L1262.16 683.38 L1261.6 683.38 L1261.04 683.38 L1260.48 683.38 L1259.92 683.38 L1259.36 683.38 L1258.81 683.38 L1258.25 683.38 L1257.69 683.38 L1257.13 683.38 L1256.57 683.38 L1256.01 683.38 L1255.45 683.38 L1254.89 683.38 L1254.33 683.38 L1253.77 683.38 L1253.21 683.38 L1252.65 683.38 L1252.09 683.38 L1251.54 683.38 L1250.98 683.38 L1250.42 683.38 L1249.86 683.38 L1249.3 683.38 L1248.74 683.38 L1248.18 683.38 L1247.62 683.38 L1247.06 683.38 L1246.5 683.38 L1245.94 683.38 L1245.38 683.38 L1244.82 683.38 L1244.26 683.38 L1243.71 683.38 L1243.15 683.38 L1242.59 683.38 L1242.03 683.38 L1241.47 683.38 L1240.91 683.38 L1240.35 683.38 L1239.79 683.38 L1239.23 683.38 L1238.67 683.38 L1238.11 683.38 L1237.55 683.38 L1236.99 683.38 L1236.44 683.38 L1235.88 683.38 L1235.32 683.38 L1234.76 683.38 L1234.2 683.38 L1233.64 683.38 L1233.08 683.38 L1232.52 683.38 L1231.96 683.38 L1231.4 683.38 L1230.84 683.38 L1230.28 683.38 L1229.72 683.38 L1229.17 683.38 L1228.61 683.38 L1228.05 683.38 L1227.49 683.38 L1226.93 683.38 L1226.37 683.38 L1225.81 683.38 L1225.25 683.38 L1224.69 683.38 L1224.13 683.38 L1223.57 683.38 L1223.01 683.38 L1222.45 683.38 L1221.89 683.38 L1221.34 683.38 L1220.78 683.38 L1220.22 683.38 L1219.66 683.38 L1219.1 683.38 L1218.54 683.38 L1217.98 683.38 L1217.42 683.38 L1216.86 683.38 L1216.3 683.38 L1215.74 683.38 L1215.18 683.38 L1214.62 683.38 L1214.07 683.38 L1213.51 683.38 L1212.95 683.38 L1212.39 683.38 L1211.83 683.38 L1211.27 683.38 L1210.71 683.38 L1210.15 683.38 L1209.59 683.38 L1209.03 683.38 L1208.47 683.38 L1207.91 683.38 L1207.35 683.38 L1206.8 683.38 L1206.24 683.38 L1205.68 683.38 L1205.12 683.38 L1204.56 683.38 L1204 683.38 L1203.44 683.38 L1202.88 683.38 L1202.32 683.38 L1201.76 683.38 L1201.2 683.38 L1200.64 683.38 L1200.08 683.38 L1199.52 683.38 L1198.97 683.38 L1198.41 683.38 L1197.85 683.38 L1197.29 683.38 L1196.73 683.38 L1196.17 683.38 L1195.61 683.38 L1195.05 683.38 L1194.49 683.38 L1193.93 683.38 L1193.37 683.38 L1192.81 683.38 L1192.25 683.38 L1191.7 683.38 L1191.14 683.38 L1190.58 683.38 L1190.02 683.38 L1189.46 683.38 L1188.9 683.38 L1188.34 683.38 L1187.78 683.38 L1187.22 683.38 L1186.66 683.38 L1186.1 683.38 L1185.54 683.38 L1184.98 683.38 L1184.43 683.38 L1183.87 683.38 L1183.31 683.38 L1182.75 683.38 L1182.19 683.38 L1181.63 683.38 L1181.07 683.38 L1180.51 683.38 L1179.95 683.38 L1179.39 683.38 L1178.83 683.38 L1178.27 683.38 L1177.71 683.38 L1177.15 683.38 L1176.6 683.38 L1176.04 683.38 L1175.48 683.38 L1174.92 683.38 L1174.36 683.38 L1173.8 683.38 L1173.24 683.38 L1172.68 683.38 L1172.12 683.38 L1171.56 683.38 L1171 683.38 L1170.44 683.38 L1169.88 683.38 L1169.33 683.38 L1168.77 683.38 L1168.21 683.38 L1167.65 683.38 L1167.09 683.38 L1166.53 683.38 L1165.97 683.38 L1165.41 683.38 L1164.85 683.38 L1164.29 683.38 L1163.73 683.38 L1163.17 683.38 L1162.61 683.38 L1162.05 683.38 L1161.5 683.38 L1160.94 683.38 L1160.38 683.38 L1159.82 683.38 L1159.26 683.38 L1158.7 683.38 L1158.14 683.38 L1157.58 683.38 L1157.02 683.38 L1156.46 683.38 L1155.9 683.38 L1155.34 683.38 L1154.78 683.38 L1154.23 683.38 L1153.67 683.38 L1153.11 683.38 L1152.55 683.38 L1151.99 683.38 L1151.43 683.38 L1150.87 683.38 L1150.31 683.38 L1149.75 683.38 L1149.19 683.38 L1148.63 683.38 L1148.07 683.38 L1147.51 683.38 L1146.96 683.38 L1146.4 683.38 L1145.84 683.38 L1145.28 683.38 L1144.72 683.38 L1144.16 683.38 L1143.6 683.38 L1143.04 683.38 L1142.48 683.38 L1141.92 683.38 L1141.36 683.38 L1140.8 683.38 L1140.24 683.38 L1139.68 683.38 L1139.13 683.38 L1138.57 683.38 L1138.01 683.38 L1137.45 683.38 L1136.89 683.38 L1136.33 683.38 L1135.77 683.38 L1135.21 683.38 L1134.65 683.38 L1134.09 683.38 L1133.53 683.38 L1132.97 683.38 L1132.41 683.38 L1131.86 683.38 L1131.3 683.38 L1130.74 683.38 L1130.18 683.38 L1129.62 683.38 L1129.06 683.38 L1128.5 683.38 L1127.94 683.38 L1127.38 683.38 L1126.82 683.38 L1126.26 683.38 L1125.7 683.38 L1125.14 683.38 L1124.59 683.38 L1124.03 683.38 L1123.47 683.38 L1122.91 683.38 L1122.35 683.38 L1121.79 683.38 L1121.23 683.38 L1120.67 683.38 L1120.11 683.38 L1119.55 683.38 L1118.99 683.38 L1118.43 683.38 L1117.87 683.38 L1117.31 683.38 L1116.76 683.38 L1116.2 683.38 L1115.64 683.38 L1115.08 683.38 L1114.52 683.38 L1113.96 683.38 L1113.4 683.38 L1112.84 683.38 L1112.28 683.38 L1111.72 683.38 L1111.16 683.38 L1110.6 683.38 L1110.04 683.38 L1109.49 683.38 L1108.93 683.38 L1108.37 683.38 L1107.81 683.38 L1107.25 683.38 L1106.69 683.38 L1106.13 683.38 L1105.57 683.38 L1105.01 683.38 L1104.45 683.38 L1103.89 683.38 L1103.33 683.38 L1102.77 683.38 L1102.22 683.38 L1101.66 683.38 L1101.1 683.38 L1100.54 683.38 L1099.98 683.38 L1099.42 683.38 L1098.86 683.38 L1098.3 683.38 L1097.74 683.38 L1097.18 683.38 L1096.62 683.38 L1096.06 683.38 L1095.5 683.38 L1094.94 683.38 L1094.39 683.38 L1093.83 683.38 L1093.27 683.38 L1092.71 683.38 L1092.15 683.38 L1091.59 683.38 L1091.03 683.38 L1090.47 683.38 L1089.91 683.38 L1089.35 683.38 L1088.79 683.38 L1088.23 683.38 L1087.67 683.38 L1087.12 683.38 L1086.56 683.38 L1086 683.38 L1085.44 683.38 L1084.88 683.38 L1084.32 683.38 L1083.76 683.38 L1083.2 683.38 L1082.64 683.38 L1082.08 683.38 L1081.52 683.38 L1080.96 683.38 L1080.4 683.38 L1079.85 683.38 L1079.29 683.38 L1078.73 683.38 L1078.17 683.38 L1077.61 683.38 L1077.05 683.38 L1076.49 683.38 L1075.93 683.38 L1075.37 683.38 L1074.81 683.38 L1074.25 683.38 L1073.69 683.38 L1073.13 683.38 L1072.57 683.38 L1072.02 683.38 L1071.46 683.38 L1070.9 683.38 L1070.34 683.38 L1069.78 683.38 L1069.22 683.38 L1068.66 683.38 L1068.1 683.38 L1067.54 683.38 L1066.98 683.38 L1066.42 683.38 L1065.86 683.38 L1065.3 683.38 L1064.75 683.38 L1064.19 683.38 L1063.63 683.38 L1063.07 683.38 L1062.51 683.38 L1061.95 683.38 L1061.39 683.38 L1060.83 683.38 L1060.27 683.38 L1059.71 683.38 L1059.15 683.38 L1058.59 683.38 L1058.03 683.38 L1057.48 683.38 L1056.92 683.38 L1056.36 683.38 L1055.8 683.38 L1055.24 683.38 L1054.68 683.38 L1054.12 683.38 L1053.56 683.38 L1053 683.38 L1052.44 683.38 L1051.88 683.38 L1051.32 683.38 L1050.76 683.38 L1050.2 683.38 L1049.65 683.38 L1049.09 683.38 L1048.53 683.38 L1047.97 683.38 L1047.41 683.38 L1046.85 683.38 L1046.29 683.38 L1045.73 683.38 L1045.17 683.38 L1044.61 683.38 L1044.05 683.38 L1043.49 683.38 L1042.93 683.38 L1042.38 683.38 L1041.82 683.38 L1041.26 683.38 L1040.7 683.38 L1040.14 683.38 L1039.58 683.38 L1039.02 683.38 L1038.46 683.38 L1037.9 683.38 L1037.34 683.38 L1036.78 683.38 L1036.22 683.38 L1035.66 683.38 L1035.1 683.38 L1034.55 683.38 L1033.99 683.38 L1033.43 683.38 L1032.87 683.38 L1032.31 683.38 L1031.75 683.38 L1031.19 683.38 L1030.63 683.38 L1030.07 683.38 L1029.51 683.38 L1028.95 683.38 L1028.39 683.38 L1027.83 683.38 L1027.28 683.38 L1026.72 683.38 L1026.16 683.38 L1025.6 683.38 L1025.04 683.38 L1024.48 683.38 L1023.92 683.38 L1023.36 683.38 L1022.8 683.38 L1022.24 683.38 L1021.68 683.38 L1021.12 683.38 L1020.56 683.38 L1020.01 683.38 L1019.45 683.38 L1018.89 683.38 L1018.33 683.38 L1017.77 683.38 L1017.21 683.38 L1016.65 683.38 L1016.09 683.38 L1015.53 683.38 L1014.97 683.38 L1014.41 683.38 L1013.85 683.38 L1013.29 683.38 L1012.73 683.38 L1012.18 683.38 L1011.62 683.38 L1011.06 683.38 L1010.5 683.38 L1009.94 683.38 L1009.38 683.38 L1008.82 683.38 L1008.26 683.38 L1007.7 683.38 L1007.14 683.38 L1006.58 683.38 L1006.02 683.38 L1005.46 683.38 L1004.91 683.38 L1004.35 683.38 L1003.79 683.38 L1003.23 683.38 L1002.67 683.38 L1002.11 683.38 L1001.55 683.38 L1000.99 683.38 L1000.43 683.38 L999.872 683.38 L999.313 683.38 L998.754 683.38 L998.194 683.38 L997.635 683.38 L997.076 683.38 L996.517 683.38 L995.957 683.38 L995.398 683.38 L994.839 683.38 L994.28 683.38 L993.72 683.38 L993.161 683.38 L992.602 683.38 L992.043 683.38 L991.483 683.38 L990.924 683.38 L990.365 683.38 L989.806 683.38 L989.246 683.38 L988.687 683.38 L988.128 683.38 L987.569 683.38 L987.009 683.38 L986.45 683.38 L985.891 683.38 L985.332 683.38 L984.772 683.38 L984.213 683.38 L983.654 683.38 L983.095 683.38 L982.535 683.38 L981.976 683.38 L981.417 683.38 L980.858 683.38 L980.298 683.38 L979.739 683.38 L979.18 683.38 L978.621 683.38 L978.061 683.38 L977.502 683.38 L976.943 683.38 L976.384 683.38 L975.824 683.38 L975.265 683.38 L974.706 683.38 L974.147 683.38 L973.587 683.38 L973.028 683.38 L972.469 683.38 L971.91 683.38 L971.35 683.38 L970.791 683.38 L970.232 683.38 L969.673 683.38 L969.113 683.38 L968.554 683.38 L967.995 683.38 L967.436 683.38 L966.876 683.38 L966.317 683.38 L965.758 683.38 L965.199 683.38 L964.639 683.38 L964.08 683.38 L963.521 683.38 L962.962 683.38 L962.402 683.38 L961.843 683.38 L961.284 683.38 L960.725 683.38 L960.165 683.38 L959.606 683.38 L959.047 683.38 L958.488 683.38 L957.928 683.38 L957.369 683.38 L956.81 683.38 L956.251 683.38 L955.691 683.38 L955.132 683.38 L954.573 683.38 L954.014 683.38 L953.454 683.38 L952.895 683.38 L952.336 683.38 L951.777 683.38 L951.217 683.38 L950.658 683.38 L950.099 683.38 L949.54 683.38 L948.98 683.38 L948.421 683.38 L947.862 683.38 L947.303 683.38 L946.743 683.38 L946.184 683.38 L945.625 683.38 L945.066 683.38 L944.506 683.38 L943.947 683.38 L943.388 683.38 L942.829 683.38 L942.269 683.38 L941.71 683.38 L941.151 683.38 L940.592 683.38 L940.032 683.38 L939.473 683.38 L938.914 683.38 L938.355 683.38 L937.795 683.38 L937.236 683.38 L936.677 683.38 L936.118 683.38 L935.558 683.38 L934.999 683.38 L934.44 683.38 L933.881 683.38 L933.321 683.38 L932.762 683.38 L932.203 683.38 L931.644 683.38 L931.084 683.38 L930.525 683.38 L929.966 683.38 L929.406 683.38 L928.847 683.38 L928.288 683.38 L927.729 683.38 L927.169 683.38 L926.61 683.38 L926.051 683.38 L925.492 683.38 L924.932 683.38 L924.373 683.38 L923.814 683.38 L923.255 683.38 L922.695 683.38 L922.136 683.38 L921.577 683.38 L921.018 683.38 L920.458 683.38 L919.899 683.38 L919.34 683.38 L918.781 683.38 L918.221 683.38 L917.662 683.38 L917.103 683.38 L916.544 683.38 L915.984 683.38 L915.425 683.38 L914.866 683.38 L914.307 683.38 L913.747 683.38 L913.188 683.38 L912.629 683.38 L912.07 683.38 L911.51 683.38 L910.951 683.38 L910.392 683.38 L909.833 683.38 L909.273 683.38 L908.714 683.38 L908.155 683.38 L907.596 683.38 L907.036 683.38 L906.477 683.38 L905.918 683.38 L905.359 683.38 L904.799 683.38 L904.24 683.38 L903.681 683.38 L903.122 683.38 L902.562 683.38 L902.003 683.38 L901.444 683.38 L900.885 683.38 L900.325 683.38 L899.766 683.38 L899.207 683.38 L898.648 683.38 L898.088 683.38 L897.529 683.38 L896.97 683.38 L896.411 683.38 L895.851 683.38 L895.292 683.38 L894.733 683.38 L894.174 683.38 L893.614 683.38 L893.055 683.38 L892.496 683.38 L891.937 683.38 L891.377 683.38 L890.818 683.38 L890.259 683.38 L889.7 683.38 L889.14 683.38 L888.581 683.38 L888.022 683.38 L887.463 683.38 L886.903 683.38 L886.344 683.38 L885.785 683.38 L885.226 683.38 L884.666 683.38 L884.107 683.38 L883.548 683.38 L882.989 683.38 L882.429 683.38 L881.87 683.38 L881.311 683.38 L880.752 683.38 L880.192 683.38 L879.633 683.38 L879.074 683.38 L878.515 683.38 L877.955 683.38 L877.396 683.38 L876.837 683.38 L876.278 683.38 L875.718 683.38 L875.159 683.38 L874.6 683.38 L874.041 683.38 L873.481 683.38 L872.922 683.38 L872.363 683.38 L871.804 683.38 L871.244 683.38 L870.685 683.38 L870.126 683.38 L869.567 683.38 L869.007 683.38 L868.448 683.38 L867.889 683.38 L867.33 683.38 L866.77 683.38 L866.211 683.38 L865.652 683.38 L865.093 683.38 L864.533 683.38 L863.974 683.38 L863.415 683.38 L862.856 683.38 L862.296 683.38 L861.737 683.38 L861.178 683.38 L860.619 683.38 L860.059 683.38 L859.5 683.38 L858.941 683.38 L858.382 683.38 L857.822 683.38 L857.263 683.38 L856.704 683.38 L856.145 683.38 L855.585 683.38 L855.026 683.38 L854.467 683.38 L853.908 683.38 L853.348 683.38 L852.789 683.38 L852.23 683.38 L851.671 683.38 L851.111 683.38 L850.552 683.38 L849.993 683.38 L849.434 683.38 L848.874 683.38 L848.315 683.38 L847.756 683.38 L847.197 683.38 L846.637 683.38 L846.078 683.38 L845.519 683.38 L844.96 683.38 L844.4 683.38 L843.841 683.38 L843.282 683.38 L842.723 683.38 L842.163 683.38 L841.604 683.38 L841.045 683.38 L840.486 683.38 L839.926 683.38 L839.367 683.38 L838.808 683.38 L838.249 683.38 L837.689 683.38 L837.13 683.38 L836.571 683.38 L836.012 683.38 L835.452 683.38 L834.893 683.38 L834.334 683.38 L833.775 683.38 L833.215 683.38 L832.656 683.38 L832.097 683.38 L831.538 683.38 L830.978 683.38 L830.419 683.38 L829.86 683.38 L829.301 683.38 L828.741 683.38 L828.182 683.38 L827.623 683.38 L827.064 683.38 L826.504 683.38 L825.945 683.38 L825.386 683.38 L824.827 683.38 L824.267 683.38 L823.708 683.38 L823.149 683.38 L822.59 683.38 L822.03 683.38 L821.471 683.38 L820.912 683.38 L820.353 683.38 L819.793 683.38 L819.234 683.38 L818.675 683.38 L818.116 683.38 L817.556 683.38 L816.997 683.38 L816.438 683.38 L815.879 683.38 L815.319 683.38 L814.76 683.38 L814.201 683.38 L813.642 683.38 L813.082 683.38 L812.523 683.38 L811.964 683.38 L811.405 683.38 L810.845 683.38 L810.286 683.38 L809.727 683.38 L809.168 683.38 L808.608 683.38 L808.049 683.38 L807.49 683.38 L806.931 683.38 L806.371 683.38 L805.812 683.38 L805.253 683.38 L804.693 683.38 L804.134 683.38 L803.575 683.38 L803.016 683.38 L802.456 683.38 L801.897 683.38 L801.338 683.38 L800.779 683.38 L800.219 683.38 L799.66 683.38 L799.101 683.38 L798.542 683.38 L797.982 683.38 L797.423 683.38 L796.864 683.38 L796.305 683.38 L795.745 683.38 L795.186 683.38 L794.627 683.38 L794.068 683.38 L793.508 683.38 L792.949 683.38 L792.39 683.38 L791.831 683.38 L791.271 683.38 L790.712 683.38 L790.153 683.38 L789.594 683.38 L789.034 683.38 L788.475 683.38 L787.916 683.38 L787.357 683.38 L786.797 683.38 L786.238 683.38 L785.679 683.38 L785.12 683.38 L784.56 683.38 L784.001 683.38 L783.442 683.38 L782.883 683.38 L782.323 683.38 L781.764 683.38 L781.205 683.38 L780.646 683.38 L780.086 683.38 L779.527 683.38 L778.968 683.38 L778.409 683.38 L777.849 683.38 L777.29 683.38 L776.731 683.38 L776.172 683.38 L775.612 683.38 L775.053 683.38 L774.494 683.38 L773.935 683.38 L773.375 683.38 L772.816 683.38 L772.257 683.38 L771.698 683.38 L771.138 683.38 L770.579 683.38 L770.02 683.38 L769.461 683.38 L768.901 683.38 L768.342 683.38 L767.783 683.38 L767.224 683.38 L766.664 683.38 L766.105 683.38 L765.546 683.38 L764.987 683.38 L764.427 683.38 L763.868 683.38 L763.309 683.38 L762.75 683.38 L762.19 683.38 L761.631 683.38 L761.072 683.38 L760.513 683.38 L759.953 683.38 L759.394 683.38 L758.835 683.38 L758.276 683.38 L757.716 683.38 L757.157 683.38 L756.598 683.38 L756.039 683.38 L755.479 683.38 L754.92 683.38 L754.361 683.38 L753.802 683.38 L753.242 683.38 L752.683 683.38 L752.124 683.38 L751.565 683.38 L751.005 683.38 L750.446 683.38 L749.887 683.38 L749.328 683.38 L748.768 683.38 L748.209 683.38 L747.65 683.38 L747.091 683.38 L746.531 683.38 L745.972 683.38 L745.413 683.38 L744.854 683.38 L744.294 683.38 L743.735 683.38 L743.176 683.38 L742.617 683.38 L742.057 683.38 L741.498 683.38 L740.939 683.38 L740.38 683.38 L739.82 683.38 L739.261 683.38 L738.702 683.38 L738.143 683.38 L737.583 683.38 L737.024 683.38 L736.465 683.38 L735.906 683.38 L735.346 683.38 L734.787 683.38 L734.228 683.38 L733.669 683.38 L733.109 683.38 L732.55 683.38 L731.991 683.38 L731.432 683.38 L730.872 683.38 L730.313 683.38 L729.754 683.38 L729.195 683.38 L728.635 683.38 L728.076 683.38 L727.517 683.38 L726.958 683.38 L726.398 683.38 L725.839 683.38 L725.28 683.38 L724.721 683.38 L724.161 683.38 L723.602 683.38 L723.043 683.38 L722.484 683.38 L721.924 683.38 L721.365 683.38 L720.806 683.38 L720.247 683.38  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.126 720.806,684.126 721.365,684.126 721.924,684.126 722.484,684.126 723.043,684.126 723.602,684.126 724.161,684.126 724.721,684.126 725.28,684.126 725.839,684.126 726.398,684.126 726.958,684.126 727.517,684.126 728.076,684.126 728.635,684.126 729.195,684.126 729.754,684.126 730.313,684.126 730.872,684.126 731.432,684.126 731.991,684.126 732.55,684.126 733.109,684.126 733.669,684.126 734.228,684.126 734.787,684.126 735.346,684.126 735.906,684.126 736.465,684.126 737.024,684.126 737.583,684.126 738.143,684.126 738.702,684.126 739.261,684.126 739.82,684.126 740.38,684.126 740.939,684.126 741.498,684.126 742.057,684.126 742.617,684.126 743.176,684.126 743.735,684.126 744.294,684.126 744.854,684.126 745.413,684.126 745.972,684.126 746.531,684.126 747.091,684.126 747.65,684.126 748.209,684.126 748.768,684.126 749.328,684.126 749.887,684.126 750.446,684.126 751.005,684.126 751.565,684.126 752.124,684.126 752.683,684.126 753.242,684.126 753.802,684.126 754.361,684.126 754.92,684.126 755.479,684.126 756.039,684.126 756.598,684.126 757.157,684.126 757.716,684.126 758.276,684.126 758.835,684.126 759.394,684.126 759.953,684.126 760.513,684.126 761.072,684.126 761.631,684.126 762.19,684.126 762.75,684.126 763.309,684.126 763.868,684.126 764.427,684.126 764.987,684.126 765.546,684.126 766.105,684.126 766.664,684.126 767.224,684.126 767.783,684.126 768.342,684.126 768.901,684.126 769.461,684.126 770.02,684.126 770.579,684.126 771.138,684.126 771.698,684.126 772.257,684.126 772.816,684.126 773.375,684.126 773.935,684.126 774.494,684.126 775.053,684.126 775.612,684.126 776.172,684.126 776.731,684.126 777.29,684.126 777.849,684.126 778.409,684.126 778.968,684.126 779.527,684.126 780.086,684.126 780.646,684.126 781.205,684.126 781.764,684.126 782.323,684.126 782.883,684.126 783.442,684.126 784.001,684.126 784.56,684.126 785.12,684.126 785.679,684.126 786.238,684.126 786.797,684.126 787.357,684.126 787.916,684.126 788.475,684.126 789.034,684.126 789.594,684.126 790.153,684.126 790.712,684.126 791.271,684.126 791.831,684.126 792.39,684.126 792.949,684.126 793.508,684.126 794.068,684.126 794.627,684.126 795.186,684.126 795.745,684.126 796.305,684.126 796.864,684.126 797.423,684.126 797.982,684.126 798.542,684.126 799.101,684.126 799.66,684.126 800.219,684.126 800.779,684.126 801.338,684.126 801.897,684.126 802.456,684.126 803.016,684.126 803.575,684.126 804.134,684.126 804.693,684.126 805.253,684.126 805.812,684.126 806.371,684.126 806.931,684.126 807.49,684.126 808.049,684.126 808.608,684.126 809.168,684.126 809.727,684.126 810.286,684.126 810.845,684.126 811.405,684.126 811.964,684.126 812.523,684.126 813.082,684.126 813.642,684.126 814.201,684.126 814.76,684.126 815.319,684.126 815.879,684.126 816.438,684.126 816.997,684.126 817.556,684.126 818.116,684.126 818.675,684.126 819.234,684.126 819.793,684.126 820.353,684.126 820.912,684.126 821.471,684.126 822.03,684.126 822.59,684.126 823.149,684.126 823.708,684.126 824.267,684.126 824.827,684.126 825.386,684.126 825.945,684.126 826.504,684.126 827.064,684.126 827.623,684.126 828.182,684.126 828.741,684.126 829.301,684.126 829.86,684.126 830.419,684.126 830.978,684.126 831.538,684.126 832.097,684.126 832.656,684.126 833.215,684.126 833.775,684.126 834.334,684.126 834.893,684.126 835.452,684.126 836.012,684.126 836.571,684.126 837.13,684.126 837.689,684.126 838.249,684.126 838.808,684.126 839.367,684.126 839.926,684.126 840.486,684.126 841.045,684.126 841.604,684.126 842.163,684.126 842.723,684.126 843.282,684.126 843.841,684.126 844.4,684.126 844.96,684.126 845.519,684.126 846.078,684.126 846.637,684.126 847.197,684.126 847.756,684.126 848.315,684.126 848.874,684.126 849.434,684.126 849.993,684.126 850.552,684.126 851.111,684.126 851.671,684.126 852.23,684.126 852.789,684.126 853.348,684.126 853.908,684.126 854.467,684.126 855.026,684.126 855.585,684.126 856.145,684.126 856.704,684.126 857.263,684.126 857.822,684.126 858.382,684.126 858.941,684.126 859.5,684.126 860.059,684.126 860.619,684.126 861.178,684.126 861.737,684.126 862.296,684.126 862.856,684.126 863.415,684.126 863.974,684.126 864.533,684.126 865.093,684.126 865.652,684.126 866.211,684.126 866.77,684.126 867.33,684.126 867.889,684.126 868.448,684.126 869.007,684.126 869.567,684.126 870.126,684.126 870.685,684.126 871.244,684.126 871.804,684.126 872.363,684.126 872.922,684.126 873.481,684.126 874.041,684.126 874.6,684.126 875.159,684.126 875.718,684.126 876.278,684.126 876.837,684.126 877.396,684.126 877.955,684.126 878.515,684.126 879.074,684.126 879.633,684.126 880.192,684.126 880.752,684.126 881.311,684.126 881.87,684.126 882.429,684.126 882.989,684.126 883.548,684.126 884.107,684.126 884.666,684.126 885.226,684.126 885.785,684.126 886.344,684.126 886.903,684.126 887.463,684.126 888.022,684.126 888.581,684.126 889.14,684.126 889.7,684.126 890.259,684.126 890.818,684.126 891.377,684.126 891.937,684.126 892.496,684.126 893.055,684.126 893.614,684.126 894.174,684.126 894.733,684.126 895.292,684.126 895.851,684.126 896.411,684.126 896.97,684.126 897.529,684.126 898.088,684.126 898.648,684.126 899.207,684.126 899.766,684.126 900.325,684.126 900.885,684.126 901.444,684.126 902.003,684.126 902.562,684.126 903.122,684.126 903.681,684.126 904.24,684.126 904.799,684.126 905.359,684.126 905.918,684.126 906.477,684.126 907.036,684.126 907.596,684.126 908.155,684.126 908.714,684.126 909.273,684.126 909.833,684.126 910.392,684.126 910.951,684.126 911.51,684.126 912.07,684.126 912.629,684.126 913.188,684.126 913.747,684.126 914.307,684.126 914.866,684.126 915.425,684.126 915.984,684.126 916.544,684.126 917.103,684.126 917.662,684.126 918.221,684.126 918.781,684.126 919.34,684.126 919.899,684.126 920.458,684.126 921.018,684.126 921.577,684.126 922.136,684.126 922.695,684.126 923.255,684.126 923.814,684.126 924.373,684.126 924.932,684.126 925.492,684.126 926.051,684.126 926.61,684.126 927.169,684.126 927.729,684.126 928.288,684.126 928.847,684.126 929.406,684.126 929.966,684.126 930.525,684.126 931.084,684.126 931.644,684.126 932.203,684.126 932.762,684.126 933.321,684.126 933.881,684.126 934.44,684.126 934.999,684.126 935.558,684.126 936.118,684.126 936.677,684.126 937.236,684.126 937.795,684.126 938.355,684.126 938.914,684.126 939.473,684.126 940.032,684.126 940.592,684.126 941.151,684.126 941.71,684.126 942.269,684.126 942.829,684.126 943.388,684.126 943.947,684.126 944.506,684.126 945.066,684.126 945.625,684.126 946.184,684.126 946.743,684.126 947.303,684.126 947.862,684.126 948.421,684.126 948.98,684.126 949.54,684.126 950.099,684.126 950.658,684.126 951.217,684.126 951.777,684.126 952.336,684.126 952.895,684.126 953.454,684.126 954.014,684.126 954.573,684.126 955.132,684.126 955.691,684.126 956.251,684.126 956.81,684.126 957.369,684.126 957.928,684.126 958.488,684.126 959.047,684.126 959.606,684.126 960.165,684.126 960.725,684.126 961.284,684.126 961.843,684.126 962.402,684.126 962.962,684.126 963.521,684.126 964.08,684.126 964.639,684.126 965.199,684.126 965.758,684.126 966.317,684.126 966.876,684.126 967.436,684.126 967.995,684.126 968.554,684.126 969.113,684.126 969.673,684.126 970.232,684.126 970.791,684.126 971.35,684.126 971.91,684.126 972.469,684.126 973.028,684.126 973.587,684.126 974.147,684.126 974.706,684.126 975.265,684.126 975.824,684.126 976.384,684.126 976.943,684.126 977.502,684.126 978.061,684.126 978.621,684.126 979.18,684.126 979.739,684.126 980.298,684.126 980.858,684.126 981.417,684.126 981.976,684.126 982.535,684.126 983.095,684.126 983.654,684.126 984.213,684.126 984.772,684.126 985.332,684.126 985.891,684.126 986.45,684.126 987.009,684.126 987.569,684.126 988.128,684.126 988.687,684.126 989.246,684.126 989.806,684.126 990.365,684.126 990.924,684.126 991.483,684.126 992.043,684.126 992.602,684.126 993.161,684.126 993.72,684.126 994.28,684.126 994.839,684.126 995.398,684.126 995.957,684.126 996.517,684.126 997.076,684.126 997.635,684.126 998.194,684.126 998.754,684.126 999.313,684.126 999.872,684.126 1000.43,684.126 1000.99,684.126 1001.55,684.126 1002.11,684.126 1002.67,684.126 1003.23,684.126 1003.79,684.126 1004.35,684.126 1004.91,684.126 1005.46,684.126 1006.02,684.126 1006.58,684.126 1007.14,684.126 1007.7,684.126 1008.26,684.126 1008.82,684.126 1009.38,684.126 1009.94,684.126 1010.5,684.126 1011.06,684.126 1011.62,684.126 1012.18,684.126 1012.73,684.126 1013.29,684.126 1013.85,684.126 1014.41,684.126 1014.97,684.126 1015.53,684.126 1016.09,684.126 1016.65,684.126 1017.21,684.126 1017.77,684.126 1018.33,684.126 1018.89,684.126 1019.45,684.126 1020.01,684.126 1020.56,684.126 1021.12,684.126 1021.68,684.126 1022.24,684.126 1022.8,684.126 1023.36,684.126 1023.92,684.126 1024.48,684.126 1025.04,684.126 1025.6,684.126 1026.16,684.126 1026.72,684.126 1027.28,684.126 1027.83,684.126 1028.39,684.126 1028.95,684.126 1029.51,684.126 1030.07,684.126 1030.63,684.126 1031.19,684.126 1031.75,684.126 1032.31,684.126 1032.87,684.126 1033.43,684.126 1033.99,684.126 1034.55,684.126 1035.1,684.126 1035.66,684.126 1036.22,684.126 1036.78,684.126 1037.34,684.126 1037.9,684.126 1038.46,684.126 1039.02,684.126 1039.58,684.126 1040.14,684.126 1040.7,684.126 1041.26,684.126 1041.82,684.126 1042.38,684.126 1042.93,684.126 1043.49,684.126 1044.05,684.126 1044.61,684.126 1045.17,684.126 1045.73,684.126 1046.29,684.126 1046.85,684.126 1047.41,684.126 1047.97,684.126 1048.53,684.126 1049.09,684.126 1049.65,684.126 1050.2,684.126 1050.76,684.126 1051.32,684.126 1051.88,684.126 1052.44,684.126 1053,684.126 1053.56,684.126 1054.12,684.126 1054.68,684.126 1055.24,684.126 1055.8,684.126 1056.36,684.126 1056.92,684.126 1057.48,684.126 1058.03,684.126 1058.59,684.126 1059.15,684.126 1059.71,684.126 1060.27,684.126 1060.83,684.126 1061.39,684.126 1061.95,684.126 1062.51,684.126 1063.07,684.126 1063.63,684.126 1064.19,684.126 1064.75,684.126 1065.3,684.126 1065.86,684.126 1066.42,684.126 1066.98,684.126 1067.54,684.126 1068.1,684.126 1068.66,684.126 1069.22,684.126 1069.78,684.126 1070.34,684.126 1070.9,684.126 1071.46,684.126 1072.02,684.126 1072.57,684.126 1073.13,684.126 1073.69,684.126 1074.25,684.126 1074.81,684.126 1075.37,684.126 1075.93,684.126 1076.49,684.126 1077.05,684.126 1077.61,684.126 1078.17,684.126 1078.73,684.126 1079.29,684.126 1079.85,684.126 1080.4,684.126 1080.96,684.126 1081.52,684.126 1082.08,684.126 1082.64,684.126 1083.2,684.126 1083.76,684.126 1084.32,684.126 1084.88,684.126 1085.44,684.126 1086,684.126 1086.56,684.126 1087.12,684.126 1087.67,684.126 1088.23,684.126 1088.79,684.126 1089.35,684.126 1089.91,684.126 1090.47,684.126 1091.03,684.126 1091.59,684.126 1092.15,684.126 1092.71,684.126 1093.27,684.126 1093.83,684.126 1094.39,684.126 1094.94,684.126 1095.5,684.126 1096.06,684.126 1096.62,684.126 1097.18,684.126 1097.74,684.126 1098.3,684.126 1098.86,684.126 1099.42,684.126 1099.98,684.126 1100.54,684.126 1101.1,684.126 1101.66,684.126 1102.22,684.126 1102.77,684.126 1103.33,684.126 1103.89,684.126 1104.45,684.126 1105.01,684.126 1105.57,684.126 1106.13,684.126 1106.69,684.126 1107.25,684.126 1107.81,684.126 1108.37,684.126 1108.93,684.126 1109.49,684.126 1110.04,684.126 1110.6,684.126 1111.16,684.126 1111.72,684.126 1112.28,684.126 1112.84,684.126 1113.4,684.126 1113.96,684.126 1114.52,684.126 1115.08,684.126 1115.64,684.126 1116.2,684.126 1116.76,684.126 1117.31,684.126 1117.87,684.126 1118.43,684.126 1118.99,684.126 1119.55,684.126 1120.11,684.126 1120.67,684.126 1121.23,684.126 1121.79,684.126 1122.35,684.126 1122.91,684.126 1123.47,684.126 1124.03,684.126 1124.59,684.126 1125.14,684.126 1125.7,684.126 1126.26,684.126 1126.82,684.126 1127.38,684.126 1127.94,684.126 1128.5,684.126 1129.06,684.126 1129.62,684.126 1130.18,684.126 1130.74,684.126 1131.3,684.126 1131.86,684.126 1132.41,684.126 1132.97,684.126 1133.53,684.126 1134.09,684.126 1134.65,684.126 1135.21,684.126 1135.77,684.126 1136.33,684.126 1136.89,684.126 1137.45,684.126 1138.01,684.126 1138.57,684.126 1139.13,684.126 1139.68,684.126 1140.24,684.126 1140.8,684.126 1141.36,684.126 1141.92,684.126 1142.48,684.126 1143.04,684.126 1143.6,684.126 1144.16,684.126 1144.72,684.126 1145.28,684.126 1145.84,684.126 1146.4,684.126 1146.96,684.126 1147.51,684.126 1148.07,684.126 1148.63,684.126 1149.19,684.126 1149.75,684.126 1150.31,684.126 1150.87,684.126 1151.43,684.126 1151.99,684.126 1152.55,684.126 1153.11,684.126 1153.67,684.126 1154.23,684.126 1154.78,684.126 1155.34,684.126 1155.9,684.126 1156.46,684.126 1157.02,684.126 1157.58,684.126 1158.14,684.126 1158.7,684.126 1159.26,684.126 1159.82,684.126 1160.38,684.126 1160.94,684.126 1161.5,684.126 1162.05,684.126 1162.61,684.126 1163.17,684.126 1163.73,684.126 1164.29,684.126 1164.85,684.126 1165.41,684.126 1165.97,684.126 1166.53,684.126 1167.09,684.126 1167.65,684.126 1168.21,684.126 1168.77,684.126 1169.33,684.126 1169.88,684.126 1170.44,684.126 1171,684.126 1171.56,684.126 1172.12,684.126 1172.68,684.126 1173.24,684.126 1173.8,684.126 1174.36,684.126 1174.92,684.126 1175.48,684.126 1176.04,684.126 1176.6,684.126 1177.15,684.126 1177.71,684.126 1178.27,684.126 1178.83,684.126 1179.39,684.126 1179.95,684.126 1180.51,684.126 1181.07,684.126 1181.63,684.126 1182.19,684.126 1182.75,684.126 1183.31,684.126 1183.87,684.126 1184.43,684.126 1184.98,684.126 1185.54,684.126 1186.1,684.126 1186.66,684.126 1187.22,684.126 1187.78,684.126 1188.34,684.126 1188.9,684.126 1189.46,684.126 1190.02,684.126 1190.58,684.126 1191.14,684.126 1191.7,684.126 1192.25,684.126 1192.81,684.126 1193.37,684.126 1193.93,684.126 1194.49,684.126 1195.05,684.126 1195.61,684.126 1196.17,684.126 1196.73,684.126 1197.29,684.126 1197.85,684.126 1198.41,684.126 1198.97,684.126 1199.52,684.126 1200.08,684.126 1200.64,684.126 1201.2,684.126 1201.76,684.126 1202.32,684.126 1202.88,684.126 1203.44,684.126 1204,684.126 1204.56,684.126 1205.12,684.126 1205.68,684.126 1206.24,684.126 1206.8,684.126 1207.35,684.126 1207.91,684.126 1208.47,684.126 1209.03,684.126 1209.59,684.126 1210.15,684.126 1210.71,684.126 1211.27,684.126 1211.83,684.126 1212.39,684.126 1212.95,684.126 1213.51,684.126 1214.07,684.126 1214.62,684.126 1215.18,684.126 1215.74,684.126 1216.3,684.126 1216.86,684.126 1217.42,684.126 1217.98,684.126 1218.54,684.126 1219.1,684.126 1219.66,684.126 1220.22,684.126 1220.78,684.126 1221.34,684.126 1221.89,684.126 1222.45,684.126 1223.01,684.126 1223.57,684.126 1224.13,684.126 1224.69,684.126 1225.25,684.126 1225.81,684.126 1226.37,684.126 1226.93,684.126 1227.49,684.126 1228.05,684.126 1228.61,684.126 1229.17,684.126 1229.72,684.126 1230.28,684.126 1230.84,684.126 1231.4,684.126 1231.96,684.126 1232.52,684.126 1233.08,684.126 1233.64,684.126 1234.2,684.126 1234.76,684.126 1235.32,684.126 1235.88,684.126 1236.44,684.126 1236.99,684.126 1237.55,684.126 1238.11,684.126 1238.67,684.126 1239.23,684.126 1239.79,684.126 1240.35,684.126 1240.91,684.126 1241.47,684.126 1242.03,684.126 1242.59,684.126 1243.15,684.126 1243.71,684.126 1244.26,684.126 1244.82,684.126 1245.38,684.126 1245.94,684.126 1246.5,684.126 1247.06,684.126 1247.62,684.126 1248.18,684.126 1248.74,684.126 1249.3,684.126 1249.86,684.126 1250.42,684.126 1250.98,684.126 1251.54,684.126 1252.09,684.126 1252.65,684.126 1253.21,684.126 1253.77,684.126 1254.33,684.126 1254.89,684.126 1255.45,684.126 1256.01,684.126 1256.57,684.126 1257.13,684.126 1257.69,684.126 1258.25,684.126 1258.81,684.126 1259.36,684.126 1259.92,684.126 1260.48,684.126 1261.04,684.126 1261.6,684.126 1262.16,684.126 1262.72,684.126 1263.28,684.126 1263.84,684.126 1264.4,684.126 1264.96,684.126 1265.52,684.126 1266.08,684.126 1266.63,684.126 1267.19,684.126 1267.75,684.126 1268.31,684.126 1268.87,684.126 1269.43,684.126 1269.99,684.126 1270.55,684.126 1271.11,684.126 1271.67,684.126 1272.23,684.126 1272.79,684.126 1273.35,684.126 1273.91,684.126 1274.46,684.126 1275.02,684.126 1275.58,684.126 1276.14,684.126 1276.7,684.126 1277.26,684.126 1277.82,684.126 1278.38,684.126 1278.94,684.126 1279.5,684.126 1280.06,684.126 1280.62,684.126 1281.18,684.126 1281.73,684.126 1282.29,684.126 1282.85,684.126 1283.41,684.126 1283.97,684.126 1284.53,684.126 1285.09,684.126 1285.65,684.126 1286.21,684.126 1286.77,684.126 1287.33,684.126 1287.89,684.126 1288.45,684.126 1289,684.126 1289.56,684.126 1290.12,684.126 1290.68,684.126 1291.24,684.126 1291.8,684.126 1292.36,684.126 1292.92,684.126 1293.48,684.126 1294.04,684.126 1294.6,684.126 1295.16,684.126 1295.72,684.126 1296.28,684.126 1296.83,684.126 1297.39,684.126 1297.95,684.126 1298.51,684.126 1299.07,684.126 1299.63,684.126 1300.19,684.126 1300.75,684.126 1301.31,684.126 1301.87,684.126 1302.43,684.126 1302.99,684.126 1303.55,684.126 1304.1,684.126 1304.66,684.126 1305.22,684.126 1305.78,684.126 1306.34,684.126 1306.9,684.126 1307.46,684.126 1308.02,684.126 1308.58,684.126 1309.14,684.126 1309.7,684.126 1310.26,684.126 1310.82,684.126 1311.38,684.126 1311.93,684.126 1312.49,684.126 1313.05,684.126 1313.61,684.126 1314.17,684.126 1314.73,684.126 1315.29,684.126 1315.85,684.126 1316.41,684.126 1316.97,684.126 1317.53,684.126 1318.09,684.126 1318.65,684.126 1319.2,684.126 1319.76,684.126 1320.32,684.126 1320.88,684.126 1321.44,684.126 1322,684.126 1322.56,684.126 1323.12,684.126 1323.68,684.126 1324.24,684.126 1324.8,684.126 1325.36,684.126 1325.92,684.126 1326.47,684.126 1327.03,684.126 1327.59,684.126 1328.15,684.126 1328.71,684.126 1329.27,684.126 1329.83,684.126 1330.39,684.126 1330.95,684.126 1331.51,684.126 1332.07,684.126 1332.63,684.126 1333.19,684.126 1333.75,684.126 1334.3,684.126 1334.86,684.126 1335.42,684.126 1335.98,684.126 1336.54,684.126 1337.1,684.126 1337.66,684.126 1338.22,684.126 1338.78,684.126 1339.34,684.126 1339.9,684.126 1340.46,684.126 1341.02,684.126 1341.57,684.126 1342.13,684.126 1342.69,684.126 1343.25,684.126 1343.81,684.126 1344.37,684.126 1344.93,684.126 1345.49,684.126 1346.05,684.126 1346.61,684.126 1347.17,684.126 1347.73,684.126 1348.29,684.126 1348.84,684.126 1349.4,684.126 1349.96,684.126 1350.52,684.126 1351.08,684.126 1351.64,684.126 1352.2,684.126 1352.76,684.126 1353.32,684.126 1353.88,684.126 1354.44,684.126 1355,684.126 1355.56,684.126 1356.12,684.126 1356.67,684.126 1357.23,684.126 1357.79,684.126 1358.35,684.126 1358.91,684.126 1359.47,684.126 1360.03,684.126 1360.59,684.126 1361.15,684.126 1361.71,684.126 1362.27,684.126 1362.83,684.126 1363.39,684.126 1363.94,684.126 1364.5,684.126 1365.06,684.126 1365.62,684.126 1366.18,684.126 1366.74,684.126 1367.3,684.126 1367.86,684.126 1368.42,684.126 1368.98,684.126 1369.54,684.126 1370.1,684.126 1370.66,684.126 1371.21,684.126 1371.77,684.126 1372.33,684.126 1372.89,684.126 1373.45,684.126 1374.01,684.126 1374.57,684.126 1375.13,684.126 1375.69,684.126 1376.25,684.126 1376.81,684.126 1377.37,684.126 1377.93,684.126 1378.49,684.126 1379.04,684.126 1379.6,684.126 1380.16,684.126 1380.72,684.126 1381.28,684.126 1381.84,684.126 1382.4,684.126 1382.96,684.126 1383.52,684.126 1384.08,684.126 1384.64,684.126 1385.2,684.126 1385.76,684.126 1386.31,684.126 1386.87,684.126 1387.43,684.126 1387.99,684.126 1388.55,684.126 1389.11,684.126 1389.67,684.126 1390.23,684.126 1390.79,684.126 1391.35,684.126 1391.91,684.126 1392.47,684.126 1393.03,684.126 1393.58,684.126 1394.14,684.126 1394.7,684.126 1395.26,684.126 1395.82,684.126 1396.38,684.126 1396.94,684.126 1397.5,684.126 1398.06,684.126 1398.62,684.126 1399.18,684.126 1399.74,684.126 1400.3,684.126 1400.86,684.126 1401.41,684.126 1401.97,684.126 1402.53,684.126 1403.09,684.126 1403.65,684.126 1404.21,684.126 1404.77,684.126 1405.33,684.126 1405.89,684.126 1406.45,684.126 1407.01,684.126 1407.57,684.126 1408.13,684.126 1408.68,684.126 1409.24,684.126 1409.8,684.126 1410.36,684.126 1410.92,684.126 1411.48,684.126 1412.04,684.126 1412.6,684.126 1413.16,684.126 1413.72,684.126 1414.28,684.126 1414.84,684.126 1415.4,684.126 1415.95,684.126 1416.51,684.126 1417.07,684.126 1417.63,684.126 1418.19,684.126 1418.75,684.126 1419.31,684.126 1419.87,684.126 1420.43,684.126 1420.99,684.126 1421.55,684.126 1422.11,684.126 1422.67,684.126 1423.23,684.126 1423.78,684.126 1424.34,684.126 1424.9,684.126 1425.46,684.126 1426.02,684.126 1426.58,684.126 1427.14,684.126 1427.7,684.126 1428.26,684.126 1428.82,684.126 1429.38,684.126 1429.94,684.126 1430.5,684.126 1431.05,684.126 1431.61,684.126 1432.17,684.126 1432.73,684.126 1433.29,684.126 1433.85,684.126 1434.41,684.126 1434.97,684.126 1435.53,684.126 1436.09,684.126 1436.65,684.126 1437.21,684.126 1437.77,684.126 1438.33,684.126 1438.88,684.126 1439.44,684.126 1440,684.126 1440.56,684.126 1441.12,684.126 1441.68,684.126 1442.24,684.126 1442.8,684.126 1443.36,684.126 1443.92,684.126 1444.48,684.126 1445.04,684.126 1445.6,684.126 1446.15,684.126 1446.71,684.126 1447.27,684.126 1447.83,684.126 1448.39,684.126 1448.95,684.126 1449.51,684.126 1450.07,684.126 1450.63,684.126 1451.19,684.126 1451.75,684.126 1452.31,684.126 1452.87,684.126 1453.42,684.126 1453.98,684.126 1454.54,684.126 1455.1,684.126 1455.66,684.126 1456.22,684.126 1456.78,684.126 1457.34,684.126 1457.9,684.126 1458.46,684.126 1459.02,684.126 1459.58,684.126 1460.14,684.126 1460.7,684.126 1461.25,684.126 1461.81,684.126 1462.37,684.126 1462.93,684.126 1463.49,684.126 1464.05,684.126 1464.61,684.126 1465.17,684.126 1465.73,684.126 1466.29,684.126 1466.85,684.126 1467.41,684.126 1467.97,684.126 1468.52,684.126 1469.08,684.126 1469.64,684.126 1470.2,684.126 1470.76,684.126 1471.32,684.126 1471.88,684.126 1472.44,684.126 1473,684.126 1473.56,684.126 1474.12,684.126 1474.68,684.126 1475.24,684.126 1475.79,684.126 1476.35,684.126 1476.91,684.126 1477.47,684.126 1478.03,684.126 1478.59,684.126 1479.15,684.126 1479.71,684.126 1480.27,684.126 1480.83,684.126 1481.39,684.126 1481.95,684.126 1482.51,684.126 1483.07,684.126 1483.62,684.126 1484.18,684.126 1484.74,684.126 1485.3,684.126 1485.86,684.126 1486.42,684.126 1486.98,684.126 1487.54,684.126 1488.1,684.126 1488.66,684.126 1489.22,684.126 1489.78,684.126 1490.34,684.126 1490.89,684.126 1491.45,684.126 1492.01,684.126 1492.57,684.126 1493.13,684.126 1493.69,684.126 1494.25,684.126 1494.81,684.126 1495.37,684.126 1495.93,684.126 1496.49,684.126 1497.05,684.126 1497.61,684.126 1498.16,684.126 1498.72,684.126 1499.28,684.126 1499.84,684.126 1500.4,684.126 1500.96,684.126 1501.52,684.126 1502.08,684.126 1502.64,684.126 1503.2,684.126 1503.76,684.126 1504.32,684.126 1504.88,684.126 1505.44,684.126 1505.99,684.126 1506.55,684.126 1507.11,684.126 1507.67,684.126 1508.23,684.126 1508.79,684.126 1509.35,684.126 1509.91,684.126 1510.47,684.126 1511.03,684.126 1511.59,684.126 1512.15,684.126 1512.71,684.126 1513.26,684.126 1513.82,684.126 1514.38,684.126 1514.94,684.126 1515.5,684.126 1516.06,684.126 1516.62,684.126 1517.18,684.126 1517.74,684.126 1518.3,684.126 1518.86,684.126 1519.42,684.126 1519.98,684.126 1520.53,684.126 1521.09,684.126 1521.65,684.126 1522.21,684.126 1522.77,684.126 1523.33,684.126 1523.89,684.126 1524.45,684.126 1525.01,684.126 1525.57,684.126 1526.13,684.126 1526.69,684.126 1527.25,684.126 1527.81,684.126 1528.36,684.126 1528.92,684.126 1529.48,684.126 1530.04,684.126 1530.6,684.126 1531.16,684.126 1531.72,684.126 1532.28,684.126 1532.84,684.126 1533.4,684.126 1533.96,684.126 1534.52,684.126 1535.08,684.126 1535.63,684.126 1536.19,684.126 1536.75,684.126 1537.31,684.126 1537.87,684.126 1538.43,684.126 1538.99,684.126 1539.55,684.126 1540.11,684.126 1540.67,684.126 1541.23,684.126 1541.79,684.126 1542.35,684.126 1542.9,684.126 1543.46,684.126 1544.02,684.126 1544.58,684.126 1545.14,684.126 1545.7,684.126 1546.26,684.126 1546.82,684.126 1547.38,684.126 1547.94,684.126 1548.5,684.126 1549.06,684.126 1549.62,684.126 1550.18,684.126 1550.73,684.126 1551.29,684.126 1551.85,684.126 1552.41,684.126 1552.97,684.126 1553.53,684.126 1554.09,684.126 1554.65,684.126 1555.21,684.126 1555.77,684.126 1556.33,684.126 1556.89,684.126 1557.45,684.126 1558,684.126 1558.56,684.126 1559.12,684.126 1559.68,684.126 1560.24,684.126 1560.8,684.126 1561.36,684.126 1561.92,684.126 1562.48,684.126 1563.04,684.126 1563.6,684.126 1564.16,684.126 1564.72,684.126 1565.28,684.126 1565.83,684.126 1566.39,684.126 1566.95,684.126 1567.51,684.126 1568.07,684.126 1568.63,684.126 1569.19,684.126 1569.75,684.126 1570.31,684.126 1570.87,684.126 1571.43,684.126 1571.99,684.126 1572.55,684.126 1573.1,684.126 1573.66,684.126 1574.22,684.126 1574.78,684.126 1575.34,684.126 1575.9,684.126 1576.46,684.126 1577.02,684.126 1577.58,684.126 1578.14,684.126 1578.7,684.126 1579.26,684.126 1579.82,684.126 1580.37,684.126 1580.93,684.126 1581.49,684.126 1582.05,684.126 1582.61,684.126 1583.17,684.126 1583.73,684.126 1584.29,684.126 1584.85,684.126 1585.41,684.126 1585.97,684.126 1586.53,684.126 1587.09,684.126 1587.65,684.126 1588.2,684.126 1588.76,684.126 1589.32,684.126 1589.88,684.126 1590.44,684.126 1591,684.126 1591.56,684.126 1592.12,684.126 1592.68,684.126 1593.24,684.126 1593.8,684.126 1594.36,684.126 1594.92,684.126 1595.47,684.126 1596.03,684.126 1596.59,684.126 1597.15,684.126 1597.71,684.126 1598.27,684.126 1598.83,684.126 1599.39,684.126 1599.95,684.126 1600.51,684.126 1601.07,684.126 1601.63,684.126 1602.19,684.126 1602.74,684.126 1603.3,684.126 1603.86,684.126 1604.42,684.126 1604.98,684.126 1605.54,684.126 1606.1,684.126 1606.66,684.126 1607.22,684.126 1607.78,684.126 1608.34,684.126 1608.9,684.126 1609.46,684.126 1610.02,684.126 1610.57,684.126 1611.13,684.126 1611.69,684.126 1612.25,684.126 1612.81,684.126 1613.37,684.126 1613.93,684.126 1614.49,684.126 1615.05,684.126 1615.61,684.126 1616.17,684.126 1616.73,684.126 1617.29,684.126 1617.84,684.126 1618.4,684.126 1618.96,684.126 1619.52,684.126 1620.08,684.126 1620.64,684.126 1621.2,684.126 1621.76,684.126 1622.32,684.126 1622.88,684.126 1623.44,684.126 1624,684.126 1624.56,684.126 1625.11,684.126 1625.67,684.126 1626.23,684.126 1626.79,684.126 1627.35,684.126 1627.91,684.126 1628.47,684.126 1629.03,684.126 1629.59,684.126 1630.15,684.126 1630.71,684.126 1631.27,684.126 1631.83,684.126 1632.39,684.126 1632.94,684.126 1633.5,684.126 1634.06,684.126 1634.62,684.126 1635.18,684.126 1635.74,684.126 1636.3,684.126 1636.86,684.126 1637.42,684.126 1637.98,684.126 1638.54,684.126 1639.1,684.126 1639.66,684.126 1640.21,684.126 1640.77,684.126 1641.33,684.126 1641.89,684.126 1642.45,684.126 1643.01,684.126 1643.57,684.126 1644.13,684.126 1644.69,684.126 1645.25,684.126 1645.81,684.126 1646.37,684.126 1646.93,684.126 1647.48,684.126 1648.04,684.126 1648.6,684.126 1649.16,684.126 1649.72,684.126 1650.28,684.126 1650.84,684.126 1651.4,684.126 1651.96,684.126 1652.52,684.126 1653.08,684.126 1653.64,684.126 1654.2,684.126 1654.76,684.126 1655.31,684.126 1655.87,684.126 1656.43,684.126 1656.99,684.126 1657.55,684.126 1658.11,684.126 1658.67,684.126 1659.23,684.126 1659.79,684.126 1660.35,684.126 1660.91,684.126 1661.47,684.126 1662.03,684.126 1662.58,684.126 1663.14,684.126 1663.7,684.126 1664.26,684.126 1664.82,684.126 1665.38,684.126 1665.94,684.126 1666.5,684.126 1667.06,684.126 1667.62,684.126 1668.18,684.126 1668.74,684.126 1669.3,684.126 1669.85,684.126 1670.41,684.126 1670.97,684.126 1671.53,684.126 1672.09,684.126 1672.65,684.126 1673.21,684.126 1673.77,684.126 1674.33,684.126 1674.89,684.126 1675.45,684.126 1676.01,684.126 1676.57,684.126 1677.13,684.126 1677.68,684.126 1678.24,684.126 1678.8,684.126 1679.36,684.126 1679.92,684.126 1680.48,684.126 1681.04,684.126 1681.6,684.126 1682.16,684.126 1682.72,684.126 1683.28,684.126 1683.84,684.126 1684.4,684.126 1684.95,684.126 1685.51,684.126 1686.07,684.126 1686.63,684.126 1687.19,684.126 1687.75,684.126 1688.31,684.126 1688.87,684.126 1689.43,684.126 1689.99,684.126 1690.55,684.126 1691.11,684.126 1691.67,684.126 1692.23,684.126 1692.78,684.126 1693.34,684.126 1693.9,684.126 1694.46,684.126 1695.02,684.126 1695.58,684.126 1696.14,684.126 1696.7,684.126 1697.26,684.126 1697.82,684.126 1698.38,684.126 1698.94,684.126 1699.5,684.126 1700.05,684.126 1700.61,684.126 1701.17,684.126 1701.73,684.126 1702.29,684.126 1702.85,684.126 1703.41,684.126 1703.97,684.126 1704.53,684.126 1705.09,684.126 1705.65,684.126 1706.21,684.126 1706.77,684.126 1707.32,684.126 1707.88,684.126 1708.44,684.126 1709,684.126 1709.56,684.126 1710.12,684.126 1710.68,684.126 1711.24,684.126 1711.8,684.126 1712.36,684.126 1712.92,684.126 1713.48,684.126 1714.04,684.126 1714.6,684.126 1715.15,684.126 1715.71,684.126 1716.27,684.126 1716.83,684.126 1717.39,684.126 1717.95,684.126 1718.51,684.126 1719.07,684.126 1719.63,684.126 1720.19,684.126 1720.75,684.126 1721.31,684.126 1721.87,684.126 1722.42,684.126 1722.98,684.126 1723.54,684.126 1724.1,684.126 1724.66,684.126 1725.22,684.126 1725.78,684.126 1726.34,684.126 1726.9,684.126 1727.46,684.126 1728.02,684.126 1728.58,684.126 1729.14,684.126 1729.69,684.126 1730.25,684.126 1730.81,684.126 1731.37,684.126 1731.93,684.126 1732.49,684.126 1733.05,684.126 1733.61,684.126 1734.17,684.126 1734.73,684.126 1735.29,684.126 1735.85,684.126 1736.41,684.126 1736.97,684.126 1737.52,684.126 1738.08,684.126 1738.64,684.126 1739.2,684.126 1739.76,684.126 1740.32,684.126 1740.88,684.126 1741.44,684.126 1742,684.126 1742.56,684.126 1743.12,684.126 1743.68,684.126 1744.24,684.126 1744.79,684.126 1745.35,684.126 1745.91,684.126 1746.47,684.126 1747.03,684.126 1747.59,684.126 1748.15,684.126 1748.71,684.126 1749.27,684.126 1749.83,684.126 1750.39,684.126 1750.95,684.126 1751.51,684.126 1752.06,684.126 1752.62,684.126 1753.18,684.126 1753.74,684.126 1754.3,684.126 1754.86,684.126 1755.42,684.126 1755.98,684.126 1756.54,684.126 1757.1,684.126 1757.66,684.126 1758.22,684.126 1758.78,684.126 1759.34,684.126 1759.89,684.126 1760.45,684.126 1761.01,684.126 1761.57,684.126 1762.13,684.126 1762.69,684.126 1763.25,684.126 1763.81,684.126 1764.37,684.126 1764.93,684.126 1765.49,684.126 1766.05,684.126 1766.61,684.126 1767.16,684.126 1767.72,684.126 1768.28,684.126 1768.84,684.126 1769.4,684.126 1769.96,684.126 1770.52,684.126 1771.08,684.126 1771.64,684.126 1772.2,684.126 1772.76,684.126 1773.32,684.126 1773.88,684.126 1774.43,684.126 1774.99,684.126 1775.55,684.126 1776.11,684.126 1776.67,684.126 1777.23,684.126 1777.79,684.126 1778.35,684.126 1778.91,684.126 1779.47,684.126 1780.03,684.126 1780.59,684.126 1781.15,684.126 1781.71,684.126 1782.26,684.126 1782.82,684.126 1783.38,684.126 1783.94,684.126 1784.5,684.126 1785.06,684.126 1785.62,684.126 1786.18,684.126 1786.74,684.126 1787.3,684.126 1787.86,684.126 1788.42,684.126 1788.98,684.126 1789.53,684.126 1790.09,684.126 1790.65,684.126 1791.21,684.126 1791.77,684.126 1792.33,684.126 1792.89,684.126 1793.45,684.126 1794.01,684.126 1794.57,684.126 1795.13,684.126 1795.69,684.126 1796.25,684.126 1796.8,684.126 1797.36,684.126 1797.92,684.126 1798.48,684.126 1799.04,684.126 1799.6,684.126 1800.16,684.126 1800.72,684.126 1801.28,684.126 1801.84,684.126 1802.4,684.126 1802.96,684.126 1803.52,684.126 1804.08,684.126 1804.63,684.126 1805.19,684.126 1805.75,684.126 1806.31,684.126 1806.87,684.126 1807.43,684.126 1807.99,684.126 1808.55,684.126 1809.11,684.126 1809.67,684.126 1810.23,684.126 1810.79,684.126 1811.35,684.126 1811.9,684.126 1812.46,684.126 1813.02,684.126 1813.58,684.126 1814.14,684.126 1814.7,684.126 1815.26,684.126 1815.82,684.126 1816.38,684.126 1816.94,684.126 1817.5,684.126 1818.06,684.126 1818.62,684.126 1819.18,684.126 1819.73,684.126 1820.29,684.126 1820.85,684.126 1821.41,684.126 1821.97,684.126 1822.53,684.126 1823.09,684.126 1823.65,684.126 1824.21,684.126 1824.77,684.126 1825.33,684.126 1825.89,684.126 1826.45,684.126 1827,684.126 1827.56,684.126 1828.12,684.126 1828.68,684.126 1829.24,684.126 1829.8,684.126 1830.36,684.126 1830.92,684.126 1831.48,684.126 1832.04,684.126 1832.6,684.126 1833.16,684.126 1833.72,684.126 1834.27,684.126 1834.83,684.126 1835.39,684.126 1835.95,684.126 1836.51,684.126 1837.07,684.126 1837.63,684.126 1838.19,684.126 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031399189213099 ± 0.021065554870528247\nProjected Energy: -4.017810770984781 ± (0.004126788044874985, 0.003757907262502691)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.468129</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4487e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2674e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.428e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.243e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.665e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.065e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition : the boundary condition to apply. Can be one of :periodic, :twisted, or :hard_wall\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen, [Val(boundary_condition)])\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions can be periodic, pi-twisted and hard-wall.\n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(:twisted))\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(:hard_wall))\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
