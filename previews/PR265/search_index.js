var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2127034574209961 ± 0.0013848887668242704\n   G2(1) = 0.9181083881040302 ± 0.0006270627795505596\n   G2(2) = 0.9812158296336797 ± 0.0006450206925416317\n   G2(3) = 0.9886481071035844 ± 0.0009245496084040008\n   G2(4) = 0.9812158296336797 ± 0.0006450206925416317\n   G2(5) = 0.9181083881040302 ± 0.0006270627795505596\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9781007740335887 ± 0.1308185377173498\n   Replica 2: -4.0103866143238305 ± 0.1395810405035034\n   Replica 3: -3.954578617274573 ± 0.14457553899770026\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip500\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip501\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip502\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.84 2211.02,1261.84 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.82 2211.02,1004.82 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.813 2211.02,747.813 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.8 2211.02,490.8 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,233.788 2211.02,233.788 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.84 423.181,1261.84 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.82 423.181,1004.82 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.813 423.181,747.813 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.8 423.181,490.8 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,233.788 423.181,233.788 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M356.339 1247.64 Q352.728 1247.64 350.899 1251.2 Q349.094 1254.74 349.094 1261.87 Q349.094 1268.98 350.899 1272.54 Q352.728 1276.08 356.339 1276.08 Q359.973 1276.08 361.779 1272.54 Q363.608 1268.98 363.608 1261.87 Q363.608 1254.74 361.779 1251.2 Q359.973 1247.64 356.339 1247.64 M356.339 1243.93 Q362.149 1243.93 365.205 1248.54 Q368.284 1253.12 368.284 1261.87 Q368.284 1270.6 365.205 1275.21 Q362.149 1279.79 356.339 1279.79 Q350.529 1279.79 347.45 1275.21 Q344.395 1270.6 344.395 1261.87 Q344.395 1253.12 347.45 1248.54 Q350.529 1243.93 356.339 1243.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M290.043 1018.17 L306.363 1018.17 L306.363 1022.1 L284.418 1022.1 L284.418 1018.17 Q287.08 1015.42 291.664 1010.79 Q296.27 1006.13 297.451 1004.79 Q299.696 1002.27 300.576 1000.53 Q301.478 998.772 301.478 997.082 Q301.478 994.327 299.534 992.591 Q297.613 990.855 294.511 990.855 Q292.312 990.855 289.858 991.619 Q287.427 992.383 284.65 993.934 L284.65 989.212 Q287.474 988.077 289.927 987.499 Q292.381 986.92 294.418 986.92 Q299.789 986.92 302.983 989.605 Q306.177 992.29 306.177 996.781 Q306.177 998.911 305.367 1000.83 Q304.58 1002.73 302.474 1005.32 Q301.895 1005.99 298.793 1009.21 Q295.691 1012.41 290.043 1018.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M316.224 987.545 L334.58 987.545 L334.58 991.48 L320.506 991.48 L320.506 999.952 Q321.524 999.605 322.543 999.443 Q323.562 999.258 324.58 999.258 Q330.367 999.258 333.747 1002.43 Q337.126 1005.6 337.126 1011.02 Q337.126 1016.6 333.654 1019.7 Q330.182 1022.78 323.862 1022.78 Q321.687 1022.78 319.418 1022.41 Q317.173 1022.04 314.765 1021.29 L314.765 1016.6 Q316.849 1017.73 319.071 1018.29 Q321.293 1018.84 323.77 1018.84 Q327.774 1018.84 330.112 1016.73 Q332.45 1014.63 332.45 1011.02 Q332.45 1007.41 330.112 1005.3 Q327.774 1003.19 323.77 1003.19 Q321.895 1003.19 320.02 1003.61 Q318.168 1004.03 316.224 1004.91 L316.224 987.545 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 990.624 Q352.728 990.624 350.899 994.188 Q349.094 997.73 349.094 1004.86 Q349.094 1011.97 350.899 1015.53 Q352.728 1019.07 356.339 1019.07 Q359.973 1019.07 361.779 1015.53 Q363.608 1011.97 363.608 1004.86 Q363.608 997.73 361.779 994.188 Q359.973 990.624 356.339 990.624 M356.339 986.92 Q362.149 986.92 365.205 991.526 Q368.284 996.11 368.284 1004.86 Q368.284 1013.59 365.205 1018.19 Q362.149 1022.78 356.339 1022.78 Q350.529 1022.78 347.45 1018.19 Q344.395 1013.59 344.395 1004.86 Q344.395 996.11 347.45 991.526 Q350.529 986.92 356.339 986.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M286.062 730.533 L304.418 730.533 L304.418 734.468 L290.344 734.468 L290.344 742.94 Q291.363 742.593 292.381 742.431 Q293.4 742.246 294.418 742.246 Q300.205 742.246 303.585 745.417 Q306.964 748.588 306.964 754.005 Q306.964 759.583 303.492 762.685 Q300.02 765.764 293.701 765.764 Q291.525 765.764 289.256 765.394 Q287.011 765.023 284.603 764.282 L284.603 759.583 Q286.687 760.718 288.909 761.273 Q291.131 761.829 293.608 761.829 Q297.613 761.829 299.951 759.722 Q302.288 757.616 302.288 754.005 Q302.288 750.394 299.951 748.287 Q297.613 746.181 293.608 746.181 Q291.733 746.181 289.858 746.597 Q288.006 747.014 286.062 747.894 L286.062 730.533 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M326.177 733.611 Q322.566 733.611 320.737 737.176 Q318.932 740.718 318.932 747.847 Q318.932 754.954 320.737 758.519 Q322.566 762.06 326.177 762.06 Q329.811 762.06 331.617 758.519 Q333.446 754.954 333.446 747.847 Q333.446 740.718 331.617 737.176 Q329.811 733.611 326.177 733.611 M326.177 729.908 Q331.987 729.908 335.043 734.514 Q338.122 739.097 338.122 747.847 Q338.122 756.574 335.043 761.181 Q331.987 765.764 326.177 765.764 Q320.367 765.764 317.288 761.181 Q314.233 756.574 314.233 747.847 Q314.233 739.097 317.288 734.514 Q320.367 729.908 326.177 729.908 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 733.611 Q352.728 733.611 350.899 737.176 Q349.094 740.718 349.094 747.847 Q349.094 754.954 350.899 758.519 Q352.728 762.06 356.339 762.06 Q359.973 762.06 361.779 758.519 Q363.608 754.954 363.608 747.847 Q363.608 740.718 361.779 737.176 Q359.973 733.611 356.339 733.611 M356.339 729.908 Q362.149 729.908 365.205 734.514 Q368.284 739.097 368.284 747.847 Q368.284 756.574 365.205 761.181 Q362.149 765.764 356.339 765.764 Q350.529 765.764 347.45 761.181 Q344.395 756.574 344.395 747.847 Q344.395 739.097 347.45 734.514 Q350.529 729.908 356.339 729.908 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M284.835 473.52 L307.057 473.52 L307.057 475.511 L294.511 508.08 L289.627 508.08 L301.432 477.456 L284.835 477.456 L284.835 473.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M316.224 473.52 L334.58 473.52 L334.58 477.456 L320.506 477.456 L320.506 485.928 Q321.524 485.581 322.543 485.418 Q323.562 485.233 324.58 485.233 Q330.367 485.233 333.747 488.405 Q337.126 491.576 337.126 496.993 Q337.126 502.571 333.654 505.673 Q330.182 508.752 323.862 508.752 Q321.687 508.752 319.418 508.381 Q317.173 508.011 314.765 507.27 L314.765 502.571 Q316.849 503.705 319.071 504.261 Q321.293 504.817 323.77 504.817 Q327.774 504.817 330.112 502.71 Q332.45 500.604 332.45 496.993 Q332.45 493.381 330.112 491.275 Q327.774 489.168 323.77 489.168 Q321.895 489.168 320.02 489.585 Q318.168 490.002 316.224 490.881 L316.224 473.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 476.599 Q352.728 476.599 350.899 480.164 Q349.094 483.706 349.094 490.835 Q349.094 497.942 350.899 501.506 Q352.728 505.048 356.339 505.048 Q359.973 505.048 361.779 501.506 Q363.608 497.942 363.608 490.835 Q363.608 483.706 361.779 480.164 Q359.973 476.599 356.339 476.599 M356.339 472.895 Q362.149 472.895 365.205 477.502 Q368.284 482.085 368.284 490.835 Q368.284 499.562 365.205 504.168 Q362.149 508.752 356.339 508.752 Q350.529 508.752 347.45 504.168 Q344.395 499.562 344.395 490.835 Q344.395 482.085 347.45 477.502 Q350.529 472.895 356.339 472.895 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M256.664 247.133 L264.303 247.133 L264.303 220.767 L255.992 222.434 L255.992 218.175 L264.256 216.508 L268.932 216.508 L268.932 247.133 L276.571 247.133 L276.571 251.068 L256.664 251.068 L256.664 247.133 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M296.015 219.587 Q292.404 219.587 290.576 223.152 Q288.77 226.693 288.77 233.823 Q288.77 240.929 290.576 244.494 Q292.404 248.036 296.015 248.036 Q299.65 248.036 301.455 244.494 Q303.284 240.929 303.284 233.823 Q303.284 226.693 301.455 223.152 Q299.65 219.587 296.015 219.587 M296.015 215.883 Q301.826 215.883 304.881 220.49 Q307.96 225.073 307.96 233.823 Q307.96 242.55 304.881 247.156 Q301.826 251.739 296.015 251.739 Q290.205 251.739 287.127 247.156 Q284.071 242.55 284.071 233.823 Q284.071 225.073 287.127 220.49 Q290.205 215.883 296.015 215.883 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M326.177 219.587 Q322.566 219.587 320.737 223.152 Q318.932 226.693 318.932 233.823 Q318.932 240.929 320.737 244.494 Q322.566 248.036 326.177 248.036 Q329.811 248.036 331.617 244.494 Q333.446 240.929 333.446 233.823 Q333.446 226.693 331.617 223.152 Q329.811 219.587 326.177 219.587 M326.177 215.883 Q331.987 215.883 335.043 220.49 Q338.122 225.073 338.122 233.823 Q338.122 242.55 335.043 247.156 Q331.987 251.739 326.177 251.739 Q320.367 251.739 317.288 247.156 Q314.233 242.55 314.233 233.823 Q314.233 225.073 317.288 220.49 Q320.367 215.883 326.177 215.883 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M356.339 219.587 Q352.728 219.587 350.899 223.152 Q349.094 226.693 349.094 233.823 Q349.094 240.929 350.899 244.494 Q352.728 248.036 356.339 248.036 Q359.973 248.036 361.779 244.494 Q363.608 240.929 363.608 233.823 Q363.608 226.693 361.779 223.152 Q359.973 219.587 356.339 219.587 M356.339 215.883 Q362.149 215.883 365.205 220.49 Q368.284 225.073 368.284 233.823 Q368.284 242.55 365.205 247.156 Q362.149 251.739 356.339 251.739 Q350.529 251.739 347.45 247.156 Q344.395 242.55 344.395 233.823 Q344.395 225.073 347.45 220.49 Q350.529 215.883 356.339 215.883 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,233.788 4017.76,233.788 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.43 457.123,1249.22 457.691,1248.04 458.259,1247.85 458.828,1247.59 459.396,1247.26 459.964,1246.83 460.533,1246.31 461.101,1245.74 461.669,1245.08 462.238,1244.32 462.806,1243.49 463.375,1242.51 463.943,1241.5 464.511,1239.33 465.08,1237.11 465.648,1235.81 466.216,1234.38 466.785,1232.85 467.353,1231.16 467.921,1229.38 468.49,1227.4 469.058,1225.34 469.626,1223.09 470.195,1220.65 470.763,1216.05 471.331,1210.3 471.9,1207.51 472.468,1203.58 473.036,1199.42 473.605,1195.05 474.173,1191.48 474.741,1186.72 475.31,1181.67 475.878,1177.39 476.446,1172.87 477.015,1167.17 477.583,1161.27 478.152,1155.28 478.72,1150.09 479.288,1143.69 479.857,1138.12 480.425,1132.25 480.993,1126.17 481.562,1120.02 482.13,1112.51 482.698,1103.82 483.267,1094.94 483.835,1087.97 484.403,1078.8 484.972,1069.51 485.54,1061.05 486.108,1053.53 486.677,1044.82 487.245,1035.96 487.813,1026.9 488.382,1017.48 488.95,1006.99 489.518,997.476 490.087,987.701 490.655,977.577 491.224,968.496 491.792,959.338 492.36,950.053 492.929,939.609 493.497,929.08 494.065,918.617 494.634,908.089 495.202,897.651 495.77,887.153 496.339,875.485 496.907,863.885 497.475,853.21 498.044,842.759 498.612,831.272 499.18,821.756 499.749,810.17 500.317,800.732 500.885,791.263 501.454,781.82 502.022,769.169 502.59,757.772 503.159,748.633 503.727,731.217 504.295,721.361 504.864,712.655 505.432,701.807 506.001,691.035 506.569,680.667 507.137,671.37 507.706,662.203 508.274,652.993 508.842,644.019 509.411,636.163 509.979,628.413 510.547,620.694 511.116,611.965 511.684,604.475 512.252,595.829 512.821,588.491 513.389,579.048 513.957,567.921 514.526,560.305 515.094,550.523 515.662,541.916 516.231,532.777 516.799,525.654 517.367,516.791 517.936,510.295 518.504,506.029 519.072,500.599 519.641,495.243 520.209,487.825 520.778,480.531 521.346,475.572 521.914,470.681 522.483,464.704 523.051,458.908 523.619,453.264 524.188,448.763 524.756,444.298 525.324,439.009 525.893,434.682 526.461,428.52 527.029,422.656 527.598,418.804 528.166,414.845 528.734,411.084 529.303,406.329 529.871,398.611 530.439,394.211 531.008,386.942 531.576,381.956 532.144,377.022 532.713,373.287 533.281,369.735 533.85,367.296 534.418,364.766 534.986,361.484 535.555,360.187 536.123,355.291 536.691,351.913 537.26,349.861 537.828,348.579 538.396,346.411 538.965,342.175 539.533,339.122 540.101,336.377 540.67,332.403 541.238,328.64 541.806,325.121 542.375,322.689 542.943,319.197 543.511,315.866 544.08,315.743 544.648,313.651 545.216,314.573 545.785,313.244 546.353,313.119 546.921,312.555 547.49,311.234 548.058,308.727 548.627,307.118 549.195,304.761 549.763,303.582 550.332,300.627 550.9,297.547 551.468,296.531 552.037,295.761 552.605,294.783 553.173,291.481 553.742,290.662 554.31,285.754 554.878,285.265 555.447,283.897 556.015,280.556 556.583,281.51 557.152,278.002 557.72,277.9 558.288,278.826 558.857,277.473 559.425,278.225 559.993,276.806 560.562,275.357 561.13,274.859 561.698,271.631 562.267,269.501 562.835,267.41 563.404,267.472 563.972,269.319 564.54,268.017 565.109,269.025 565.677,268.968 566.245,268.933 566.814,270.714 567.382,268.209 567.95,266.971 568.519,264.66 569.087,263.7 569.655,264.446 570.224,264.34 570.792,262.179 571.36,262.162 571.929,261.251 572.497,261.197 573.065,260.089 573.634,260.187 574.202,260.297 574.77,260.24 575.339,260.244 575.907,259.204 576.476,259.061 577.044,257.13 577.612,256.193 578.181,254.093 578.749,254.33 579.317,253.496 579.886,252.574 580.454,251.795 581.022,252.114 581.591,250.15 582.159,251.442 582.727,249.57 583.296,250.002 583.864,249.255 584.432,249.461 585.001,249.866 585.569,249.075 586.137,250.238 586.706,250.711 587.274,251.971 587.842,251.221 588.411,251.429 588.979,250.385 589.547,251.435 590.116,251.772 590.684,250.687 591.253,249.808 591.821,249.091 592.389,248.504 592.958,247.877 593.526,246.983 594.094,246.175 594.663,248.719 595.231,251.084 595.799,252.141 596.368,252.027 596.936,252.043 597.504,253 598.073,252.663 598.641,251.532 599.209,251.342 599.778,250.165 600.346,249.777 600.914,248.542 601.483,249.518 602.051,249.488 602.619,245.358 603.188,243.321 603.756,245.744 604.325,247.779 604.893,247.86 605.461,247.692 606.03,245.564 606.598,245.921 607.166,247.073 607.735,247.92 608.303,244.85 608.871,245.963 609.44,246.963 610.008,246.674 610.576,246.747 611.145,245.561 611.713,242.594 612.281,244.039 612.85,243.199 613.418,241.504 613.986,239.83 614.555,240.255 615.123,243.742 615.691,241.661 616.26,240.998 616.828,239.456 617.396,237.787 617.965,237.318 618.533,236.884 619.102,238.626 619.67,238.109 620.238,237.447 620.807,237.949 621.375,239.441 621.943,241.838 622.512,241.944 623.08,242.024 623.648,243.151 624.217,244.246 624.785,242.428 625.353,241.598 625.922,242.04 626.49,243.13 627.058,241.139 627.627,241.526 628.195,240.658 628.763,238.677 629.332,239.026 629.9,239.494 630.468,238.651 631.037,239.043 631.605,238.259 632.173,238.759 632.742,240.176 633.31,239.447 633.879,237.681 634.447,237.121 635.015,237.722 635.584,238.429 636.152,241.145 636.72,242.37 637.289,244.522 637.857,243.496 638.425,242.54 638.994,243.537 639.562,244.746 640.13,244.744 640.699,243.748 641.267,242.583 641.835,244.565 642.404,243.329 642.972,241.411 643.54,240.539 644.109,239.415 644.677,241.79 645.245,243.779 645.814,239.734 646.382,237.696 646.951,234.921 647.519,238.565 648.087,238.792 648.656,239.978 649.224,241.007 649.792,240.002 650.361,240.978 650.929,239.091 651.497,240.249 652.066,241.279 652.634,241.378 653.202,241.373 653.771,241.372 654.339,240.308 654.907,238.245 655.476,237.52 656.044,239.888 656.612,238.896 657.181,237.962 657.749,235.059 658.317,235.663 658.886,237.026 659.454,235.338 660.022,237.653 660.591,235.57 661.159,235.06 661.728,234.304 662.296,234.791 662.864,240.206 663.433,240.294 664.001,240.184 664.569,240.489 665.138,240.642 665.706,237.66 666.274,239.02 666.843,242.002 667.411,243.104 667.979,241.805 668.548,239.703 669.116,239.594 669.684,238.648 670.253,238.672 670.821,238.822 671.389,238.104 671.958,238.239 672.526,238.358 673.094,237.266 673.663,236.393 674.231,234.481 674.799,236.883 675.368,238.2 675.936,238.418 676.505,235.385 677.073,238.865 677.641,236.789 678.21,234.928 678.778,233.265 679.346,234.596 679.915,233.99 680.483,234.175 681.051,233.397 681.62,233.659 682.188,234.963 682.756,238.363 683.325,238.501 683.893,238.583 684.461,237.498 685.03,240.745 685.598,240.674 686.166,239.466 686.735,239.659 687.303,239.55 687.871,239.805 688.44,237.764 689.008,238.856 689.577,238.899 690.145,238.812 690.713,239.009 691.282,237.868 691.85,239.245 692.418,239.154 692.987,239.11 693.555,239.249 694.123,237.084 694.692,238.421 695.26,237.229 695.828,238.241 696.397,238.26 696.965,237.257 697.533,238.28 698.102,238.335 698.67,239.351 699.238,239.363 699.807,239.222 700.375,238.974 700.943,237.843 701.512,236.82 702.08,236.945 702.648,237.095 703.217,235.034 703.785,234.364 704.354,235.466 704.922,233.261 705.49,234.713 706.059,235.017 706.627,236.209 707.195,236.299 707.764,236.685 708.332,236.682 708.9,236.742 709.469,236.821 710.037,236.8 710.605,235.846 711.174,235.018 711.742,233.147 712.31,232.402 712.879,233.937 713.447,237.316 714.015,239.444 714.584,239.208 715.152,238.042 715.72,238.104 716.289,239.088 716.857,235.668 717.425,235.794 717.994,237.007 718.562,239.153 719.131,239.04 719.699,236.933 720.267,239.096 720.836,241.904 721.404,237.475 721.972,239.52 722.541,239.323 723.109,238.078 723.677,237.9 724.246,237.825 724.814,236.897 725.382,236.939 725.951,238.712 726.519,236.376 727.087,233.207 727.656,232.47 728.224,232.908 728.792,233.092 729.361,232.426 729.929,233.649 730.497,234.974 731.066,234.967 731.634,234.987 732.203,234.883 732.771,236.036 733.339,238.075 733.908,239.94 734.476,238.623 735.044,237.57 735.613,238.357 736.181,239.437 736.749,238.389 737.318,238.137 737.886,238.934 738.454,235.679 739.023,232.853 739.591,232.032 740.159,233.311 740.728,233.563 741.296,232.828 741.864,235.111 742.433,235.025 743.001,235.139 743.569,235.184 744.138,236.309 744.706,237.506 745.274,239.366 745.843,235.856 746.411,236.076 746.98,238.283 747.548,238.086 748.116,238.95 748.685,238.875 749.253,237.726 749.821,236.647 750.39,236.521 750.958,237.667 751.526,238.606 752.095,235.306 752.663,237.447 753.231,238.152 753.8,239.064 754.368,240.958 754.936,239.588 755.505,237.273 756.073,236.112 756.641,234.075 757.21,232.053 757.778,233.073 758.346,232.247 758.915,231.308 759.483,231.641 760.052,233.171 760.62,231.496 761.188,231.866 761.757,231.193 762.325,231.41 762.893,228.625 763.462,228.314 764.03,228.803 764.598,230.403 765.167,231.016 765.735,229.42 766.303,232.879 766.872,233.049 767.44,231.266 768.008,231.633 768.577,227.9 769.145,228.505 769.713,230.11 770.282,231.692 770.85,232.057 771.418,231.258 771.987,231.656 772.555,232.266 773.123,232.526 773.692,232.551 774.26,232.772 774.829,234.175 775.397,234.31 775.965,235.562 776.534,233.633 777.102,234.013 777.67,232.148 778.239,232.496 778.807,232.808 779.375,233.289 779.944,233.413 780.512,234.838 781.08,233.998 781.649,236.339 782.217,234.523 782.785,233.6 783.354,233.975 783.922,236.111 784.49,236.025 785.059,237.096 785.627,238.181 786.195,237.987 786.764,237.968 787.332,237.738 787.9,236.603 788.469,236.634 789.037,239.711 789.606,237.412 790.174,236.477 790.742,236.435 791.311,236.484 791.879,235.407 792.447,233.438 793.016,231.688 793.584,233.01 794.152,233.179 794.721,233.586 795.289,232.916 795.857,232.207 796.426,230.407 796.994,229.837 797.562,230.416 798.131,231.863 798.699,234.266 799.267,234.35 799.836,234.477 800.404,235.779 800.972,239.968 801.541,239.456 802.109,240.247 802.678,239.88 803.246,242.67 803.814,242.321 804.383,243.939 804.951,244.474 805.519,245.792 806.088,244.219 806.656,244.535 807.224,243.872 807.793,243.351 808.361,242.87 808.929,241.132 809.498,240.605 810.066,241.297 810.634,241.66 811.203,244.239 811.771,242.551 812.339,241.717 812.908,240.021 813.476,240.615 814.044,242.221 814.613,241.461 815.181,240.863 815.749,242.299 816.318,242.773 816.886,242.24 817.455,242.677 818.023,240.908 818.591,240.288 819.16,239.866 819.728,237.36 820.296,237.041 820.865,235.585 821.433,236.426 822.001,235.102 822.57,236.057 823.138,236.605 823.706,236.299 824.275,236.976 824.843,235.827 825.411,236.498 825.98,238.246 826.548,236.808 827.116,236.276 827.685,237.046 828.253,236.767 828.821,236.408 829.39,235.173 829.958,235.041 830.526,235.584 831.095,234.434 831.663,233.211 832.232,234.211 832.8,233.174 833.368,232.87 833.937,230.771 834.505,229.717 835.073,230.819 835.642,228.833 836.21,229.076 836.778,228.297 837.347,228.625 837.915,229.921 838.483,229.992 839.052,230.217 839.62,230.433 840.188,228.437 840.757,230.837 841.325,231.099 841.893,232.092 842.462,234.248 843.03,232.248 843.598,231.074 844.167,232.289 844.735,229.403 845.304,228.663 845.872,229.946 846.44,231.266 847.009,231.198 847.577,232.285 848.145,232.322 848.714,231.405 849.282,231.577 849.85,231.838 850.419,232.895 850.987,232.911 851.555,233.862 852.124,231.736 852.692,232.772 853.26,229.722 853.829,230.245 854.397,231.583 854.965,231.592 855.534,233.001 856.102,233.284 856.67,234.44 857.239,234.631 857.807,232.404 858.375,231.554 858.944,231.799 859.512,231.149 860.081,230.404 860.649,231.764 861.217,230.834 861.786,231.07 862.354,229.308 862.922,230.759 863.491,228.032 864.059,228.596 864.627,231.069 865.196,231.423 865.764,232.809 866.332,233.076 866.901,233.058 867.469,232.99 868.037,232.121 868.606,230.501 869.174,229.818 869.742,229.014 870.311,229.49 870.879,229.822 871.447,231.313 872.016,233.671 872.584,234.006 873.152,233.121 873.721,232.308 874.289,232.857 874.858,234.039 875.426,234.011 875.994,234.937 876.563,234.855 877.131,235.011 877.699,234.163 878.268,234.228 878.836,234.407 879.404,236.396 879.973,239.551 880.541,239.282 881.109,236.858 881.678,238.752 882.246,238.513 882.814,238.447 883.383,237.352 883.951,237.124 884.519,237.103 885.088,238.174 885.656,237.875 886.224,238.641 886.793,239.257 887.361,238.621 887.93,239.114 888.498,237.867 889.066,238.351 889.635,237.004 890.203,233.545 890.771,231.731 891.34,230.76 891.908,230.063 892.476,227.38 893.045,227.036 893.613,226.322 894.181,229.022 894.75,229.359 895.318,228.668 895.886,231.143 896.455,232.408 897.023,231.564 897.591,233.004 898.16,234.14 898.728,235.255 899.296,234.224 899.865,235.354 900.433,235.273 901.001,234.46 901.57,234.63 902.138,234.849 902.707,234.718 903.275,233.693 903.843,233.779 904.412,233.699 904.98,230.785 905.548,229.068 906.117,227.534 906.685,228.07 907.253,226.398 907.822,229.88 908.39,228.168 908.958,229.786 909.527,230.239 910.095,233.58 910.663,235.727 911.232,235.736 911.8,235.593 912.368,235.591 912.937,235.79 913.505,236.75 914.073,237.427 914.642,236.263 915.21,237.235 915.779,237.095 916.347,235.891 916.915,235.769 917.484,234.768 918.052,236.01 918.62,236.063 919.189,237.014 919.757,235.926 920.325,235.914 920.894,234.907 921.462,233.759 922.03,233.658 922.599,232.52 923.167,233.795 923.735,233.686 924.304,232.746 924.872,234.004 925.44,233.77 926.009,234.86 926.577,235.091 927.145,234.117 927.714,232.171 928.282,232.431 928.85,233.664 929.419,231.506 929.987,230.94 930.556,228.28 931.124,229.804 931.692,231.081 932.261,232.374 932.829,232.62 933.397,231.778 933.966,231.122 934.534,232.492 935.102,232.785 935.671,231.054 936.239,229.435 936.807,231.981 937.376,234.342 937.944,231.477 938.512,232.976 939.081,233.189 939.649,231.216 940.217,234.751 940.786,233.926 941.354,233.043 941.922,233.407 942.491,234.451 943.059,236.796 943.627,239.809 944.196,241.677 944.764,242.288 945.333,242.881 945.901,244.557 946.469,241.874 947.038,241.653 947.606,239.015 948.174,237.602 948.743,237.321 949.311,236.963 949.879,236.817 950.448,235.437 951.016,236.416 951.584,236.469 952.153,235.607 952.721,235.587 953.289,234.461 953.858,233.445 954.426,234.651 954.994,235.482 955.563,235.445 956.131,235.306 956.699,233.048 957.268,233.078 957.836,231.303 958.405,233.723 958.973,236.784 959.541,235.46 960.11,233.496 960.678,234.722 961.246,237.771 961.815,237.361 962.383,237.993 962.951,237.877 963.52,235.615 964.088,235.477 964.656,235.2 965.225,236.241 965.793,235.004 966.361,234.846 966.93,233.707 967.498,234.607 968.066,231.43 968.635,232.642 969.203,231.512 969.771,231.908 970.34,230.839 970.908,231.115 971.476,233.483 972.045,234.543 972.613,236.719 973.182,238.637 973.75,238.278 974.318,236.887 974.887,234.842 975.455,234.731 976.023,234.657 976.592,233.669 977.16,235.7 977.728,234.403 978.297,233.53 978.865,233.595 979.433,232.55 980.002,232.746 980.57,233.209 981.138,234.127 981.707,234.055 982.275,235.05 982.843,235.13 983.412,234.257 983.98,234.218 984.548,231.274 985.117,233.617 985.685,232.306 986.253,233.513 986.822,235.482 987.39,234.27 987.959,234.261 988.527,234.408 989.095,234.263 989.664,230.407 990.232,228.377 990.8,228.923 991.369,228.721 991.937,227.126 992.505,228.701 993.074,230.107 993.642,228.319 994.21,226.631 994.779,230.204 995.347,231.583 995.915,230.804 996.484,232.281 997.052,234.435 997.62,234.358 998.189,235.509 998.757,236.503 999.325,236.399 999.894,236.031 1000.46,237.754 1001.03,235.744 1001.6,234.598 1002.17,234.72 1002.74,234.752 1003.3,234.843 1003.87,233.91 1004.44,235.773 1005.01,237.551 1005.58,237.492 1006.15,237.253 1006.71,239.018 1007.28,236.363 1007.85,236.183 1008.42,237.11 1008.99,239.025 1009.56,236.916 1010.12,236.849 1010.69,237.704 1011.26,237.463 1011.83,238.339 1012.4,239.192 1012.97,241.687 1013.53,240.195 1014.1,239.671 1014.67,238.235 1015.24,237.968 1015.81,233.6 1016.38,232.409 1016.94,233.564 1017.51,236.563 1018.08,234.195 1018.65,233.058 1019.22,233.934 1019.79,233.699 1020.35,234.649 1020.92,237.669 1021.49,236.123 1022.06,236.03 1022.63,233.707 1023.2,232.682 1023.76,232.682 1024.33,233.82 1024.9,233.505 1025.47,234.71 1026.04,234.508 1026.61,235.515 1027.17,234.238 1027.74,234.212 1028.31,233.214 1028.88,235.201 1029.45,234.122 1030.02,235.108 1030.58,234.967 1031.15,237.045 1031.72,235.789 1032.29,234.577 1032.86,234.384 1033.43,232.174 1033.99,232.502 1034.56,233.773 1035.13,233.833 1035.7,232.769 1036.27,230.81 1036.84,231.049 1037.4,233.486 1037.97,235.481 1038.54,235.406 1039.11,236.15 1039.68,235.92 1040.25,235.623 1040.81,235.443 1041.38,235.567 1041.95,236.384 1042.52,235.191 1043.09,234.976 1043.66,233.874 1044.22,234.154 1044.79,232.984 1045.36,231.909 1045.93,232.999 1046.5,231.898 1047.07,232.822 1047.63,232.75 1048.2,229.57 1048.77,231.934 1049.34,230.892 1049.91,230.924 1050.48,231.094 1051.05,231.257 1051.61,232.521 1052.18,231.739 1052.75,231.862 1053.32,230.783 1053.89,229.761 1054.46,229.981 1055.02,232.237 1055.59,231.274 1056.16,232.358 1056.73,231.383 1057.3,232.321 1057.87,231.301 1058.43,232.681 1059,234.037 1059.57,233.179 1060.14,233.419 1060.71,233.273 1061.28,232.123 1061.84,232.364 1062.41,231.516 1062.98,231.806 1063.55,231.843 1064.12,233.012 1064.69,232.968 1065.25,233.063 1065.82,233.337 1066.39,233.265 1066.96,234.171 1067.53,232.281 1068.1,233.342 1068.66,232.572 1069.23,232.56 1069.8,232.813 1070.37,233.045 1070.94,235.079 1071.51,233.924 1072.07,233.936 1072.64,233.897 1073.21,233.861 1073.78,233.942 1074.35,235.101 1074.92,234.999 1075.48,234.835 1076.05,233.729 1076.62,234.809 1077.19,236.953 1077.76,237 1078.33,234.607 1078.89,235.691 1079.46,236.617 1080.03,237.546 1080.6,240.328 1081.17,240.713 1081.74,241.157 1082.3,240.828 1082.87,241.335 1083.44,240.795 1084.01,240.167 1084.58,238.65 1085.15,238.194 1085.71,235.703 1086.28,235.619 1086.85,235.337 1087.42,237.181 1087.99,239.956 1088.56,239.605 1089.12,240.143 1089.69,240.878 1090.26,239.25 1090.83,236.624 1091.4,236.276 1091.97,232.877 1092.53,234.103 1093.1,233.839 1093.67,232.827 1094.24,229.88 1094.81,230.985 1095.38,229.962 1095.94,230.956 1096.51,231.768 1097.08,232.922 1097.65,231.747 1098.22,229.933 1098.79,232.363 1099.35,233.309 1099.92,232.285 1100.49,232.28 1101.06,230.332 1101.63,229.505 1102.2,230.844 1102.76,231.995 1103.33,234.229 1103.9,234.204 1104.47,233.962 1105.04,234.918 1105.61,233.876 1106.17,234.926 1106.74,235.781 1107.31,235.554 1107.88,235.216 1108.45,236.991 1109.02,236.739 1109.58,236.762 1110.15,236.375 1110.72,237.898 1111.29,236.502 1111.86,237.218 1112.43,236.843 1112.99,235.424 1113.56,234.001 1114.13,236.927 1114.7,235.544 1115.27,235.109 1115.84,233.848 1116.4,234.662 1116.97,234.447 1117.54,233.314 1118.11,233.253 1118.68,233.886 1119.25,232.549 1119.81,232.801 1120.38,232.585 1120.95,232.692 1121.52,231.749 1122.09,229.683 1122.66,228.765 1123.23,228.952 1123.79,229.216 1124.36,231.613 1124.93,231.729 1125.5,229.817 1126.07,229.847 1126.64,230.287 1127.2,230.443 1127.77,227.63 1128.34,227.977 1128.91,223.317 1129.48,224.164 1130.05,228.044 1130.61,228.367 1131.18,229.638 1131.75,231.137 1132.32,230.396 1132.89,229.589 1133.46,230.012 1134.02,230.325 1134.59,230.586 1135.16,230.947 1135.73,233.318 1136.3,233.556 1136.87,233.559 1137.43,233.547 1138,232.454 1138.57,231.65 1139.14,230.602 1139.71,231.943 1140.28,231.163 1140.84,233.591 1141.41,235.716 1141.98,234.641 1142.55,234.568 1143.12,234.684 1143.69,234.596 1144.25,234.443 1144.82,235.287 1145.39,235.99 1145.96,237.767 1146.53,235.447 1147.1,236.075 1147.66,235.957 1148.23,236.936 1148.8,236.852 1149.37,235.512 1149.94,234.595 1150.51,232.532 1151.07,231.385 1151.64,231.685 1152.21,230.983 1152.78,229.351 1153.35,229.642 1153.92,230.141 1154.48,230.683 1155.05,230.982 1155.62,230.164 1156.19,232.379 1156.76,232.616 1157.33,232.681 1157.89,231.682 1158.46,232.808 1159.03,236.968 1159.6,236.837 1160.17,236.756 1160.74,238.361 1161.3,237.01 1161.87,236.844 1162.44,236.733 1163.01,237.385 1163.58,236.303 1164.15,235.971 1164.71,234.62 1165.28,233.519 1165.85,234.459 1166.42,234.449 1166.99,234.595 1167.56,234.349 1168.12,234.345 1168.69,236.4 1169.26,233.193 1169.83,234.16 1170.4,237.034 1170.97,236.632 1171.53,233.478 1172.1,232.468 1172.67,233.631 1173.24,234.559 1173.81,231.471 1174.38,230.665 1174.94,230.81 1175.51,231.076 1176.08,231.302 1176.65,232.783 1177.22,231.815 1177.79,235.856 1178.35,235.824 1178.92,235.652 1179.49,234.393 1180.06,234.315 1180.63,233.266 1181.2,233.197 1181.76,233.287 1182.33,231.222 1182.9,232.387 1183.47,232.541 1184.04,233.942 1184.61,234.008 1185.17,233.188 1185.74,234.449 1186.31,234.35 1186.88,236.315 1187.45,233.225 1188.02,233.141 1188.58,231.224 1189.15,229.451 1189.72,228.865 1190.29,229.181 1190.86,230.522 1191.43,229.76 1192,230.282 1192.56,230.54 1193.13,232.852 1193.7,234.041 1194.27,234.029 1194.84,233.975 1195.41,234.124 1195.97,235.306 1196.54,235.281 1197.11,235.201 1197.68,236.385 1198.25,234.239 1198.82,234.592 1199.38,234.664 1199.95,235.642 1200.52,236.633 1201.09,238.498 1201.66,240.441 1202.23,235.056 1202.79,235.093 1203.36,235.095 1203.93,236.19 1204.5,237.137 1205.07,237.789 1205.64,238.53 1206.2,236.124 1206.77,236.222 1207.34,236.022 1207.91,237.893 1208.48,236.662 1209.05,238.248 1209.61,236.973 1210.18,235.764 1210.75,236.796 1211.32,236.653 1211.89,237.384 1212.46,236.972 1213.02,234.851 1213.59,235.673 1214.16,239.432 1214.73,238.04 1215.3,236.754 1215.87,235.519 1216.43,237.728 1217,237.421 1217.57,237.04 1218.14,236.631 1218.71,236.355 1219.28,235.157 1219.84,236.06 1220.41,239.012 1220.98,236.534 1221.55,237.307 1222.12,236.9 1222.69,233.363 1223.25,231.412 1223.82,232.272 1224.39,232.14 1224.96,233.18 1225.53,233.035 1226.1,235.035 1226.66,233.127 1227.23,231.107 1227.8,231.258 1228.37,231.374 1228.94,230.281 1229.51,229.444 1230.07,232.658 1230.64,231.721 1231.21,231.635 1231.78,231.605 1232.35,232.7 1232.92,232.74 1233.48,233.688 1234.05,231.782 1234.62,231.926 1235.19,227.756 1235.76,230.063 1236.33,231.182 1236.89,232.293 1237.46,232.472 1238.03,232.665 1238.6,231.812 1239.17,227.973 1239.74,228.452 1240.3,227.685 1240.87,229.306 1241.44,230.455 1242.01,229.724 1242.58,228.116 1243.15,228.447 1243.71,230.951 1244.28,230.114 1244.85,234.43 1245.42,233.524 1245.99,232.612 1246.56,231.56 1247.12,230.68 1247.69,234.862 1248.26,233.818 1248.83,231.998 1249.4,231.136 1249.97,231.668 1250.53,232.616 1251.1,232.666 1251.67,231.791 1252.24,231.995 1252.81,232.083 1253.38,234.612 1253.94,234.551 1254.51,233.518 1255.08,232.299 1255.65,235.496 1256.22,235.54 1256.79,232.347 1257.35,231.355 1257.92,233.613 1258.49,232.779 1259.06,231.74 1259.63,232.905 1260.2,233.258 1260.76,234.4 1261.33,233.661 1261.9,232.755 1262.47,231.956 1263.04,232.332 1263.61,231.43 1264.18,231.587 1264.74,232.811 1265.31,232.736 1265.88,233.961 1266.45,238.001 1267.02,235.659 1267.59,235.605 1268.15,233.711 1268.72,233.613 1269.29,231.52 1269.86,231.828 1270.43,235.069 1271,235.983 1271.56,235.861 1272.13,237.883 1272.7,238.756 1273.27,240.639 1273.84,238.1 1274.41,237.918 1274.97,237.483 1275.54,236.076 1276.11,235.828 1276.68,234.697 1277.25,234.589 1277.82,234.445 1278.38,234.522 1278.95,235.469 1279.52,234.145 1280.09,235.142 1280.66,238.153 1281.23,238.668 1281.79,236.493 1282.36,237.386 1282.93,237.205 1283.5,236.758 1284.07,239.547 1284.64,241.214 1285.2,239.856 1285.77,236.511 1286.34,238.176 1286.91,238.693 1287.48,239.216 1288.05,238.705 1288.61,238.417 1289.18,240.111 1289.75,238.445 1290.32,238.979 1290.89,238.459 1291.46,238.198 1292.02,241.084 1292.59,240.554 1293.16,239.063 1293.73,237.553 1294.3,237.263 1294.87,236.962 1295.43,236.574 1296,237.334 1296.57,234.941 1297.14,234.507 1297.71,233.452 1298.28,232.191 1298.84,230.942 1299.41,231.077 1299.98,231.117 1300.55,231.047 1301.12,229.155 1301.69,229.212 1302.25,230.554 1302.82,229.627 1303.39,228.655 1303.96,230.856 1304.53,230.966 1305.1,230.883 1305.66,231.933 1306.23,232.864 1306.8,231.946 1307.37,231.085 1307.94,232.984 1308.51,231.799 1309.07,232.038 1309.64,231.184 1310.21,231.429 1310.78,232.606 1311.35,231.583 1311.92,230.682 1312.48,228.789 1313.05,229.129 1313.62,229.268 1314.19,228.587 1314.76,229.955 1315.33,229.218 1315.89,229.664 1316.46,227.863 1317.03,227.486 1317.6,227.873 1318.17,230.046 1318.74,234.226 1319.3,231.181 1319.87,232.361 1320.44,234.766 1321.01,234.562 1321.58,231.538 1322.15,230.59 1322.71,231.002 1323.28,232.243 1323.85,233.259 1324.42,234.469 1324.99,234.636 1325.56,236.702 1326.12,236.652 1326.69,235.455 1327.26,238.408 1327.83,236.868 1328.4,237.375 1328.97,235.898 1329.53,235.791 1330.1,234.813 1330.67,235.596 1331.24,236.686 1331.81,236.553 1332.38,236.448 1332.94,236.429 1333.51,236.399 1334.08,236.429 1334.65,237.319 1335.22,237.069 1335.79,236.84 1336.36,239.7 1336.92,238.173 1337.49,236.75 1338.06,235.772 1338.63,232.53 1339.2,230.365 1339.77,230.667 1340.33,229.875 1340.9,230.039 1341.47,230.356 1342.04,229.561 1342.61,230.888 1343.18,231.946 1343.74,230.941 1344.31,230.222 1344.88,229.407 1345.45,229.826 1346.02,229.34 1346.59,226.589 1347.15,228.138 1347.72,230.623 1348.29,228.856 1348.86,230.415 1349.43,230.676 1350,230.782 1350.56,231.778 1351.13,231.931 1351.7,230.914 1352.27,232.102 1352.84,232.309 1353.41,234.312 1353.97,234.313 1354.54,233.247 1355.11,233.253 1355.68,233.379 1356.25,233.425 1356.82,232.34 1357.38,232.331 1357.95,231.689 1358.52,231.922 1359.09,231.218 1359.66,231.434 1360.23,232.662 1360.79,231.999 1361.36,232.071 1361.93,231.183 1362.5,232.192 1363.07,232.278 1363.64,234.592 1364.2,236.759 1364.77,236.455 1365.34,238.456 1365.91,237.181 1366.48,235.922 1367.05,235.029 1367.61,235.012 1368.18,232.947 1368.75,233.016 1369.32,233.29 1369.89,231.254 1370.46,234.532 1371.02,234.634 1371.59,233.632 1372.16,234.687 1372.73,234.635 1373.3,234.759 1373.87,231.69 1374.43,231.925 1375,231.972 1375.57,234.177 1376.14,234.342 1376.71,235.498 1377.28,236.34 1377.84,237.311 1378.41,238.148 1378.98,236.757 1379.55,236.831 1380.12,236.544 1380.69,236.648 1381.25,236.445 1381.82,239.203 1382.39,238.778 1382.96,237.436 1383.53,237.173 1384.1,236.935 1384.66,233.553 1385.23,234.358 1385.8,233.228 1386.37,231.968 1386.94,231.32 1387.51,231.559 1388.07,230.541 1388.64,231.9 1389.21,232.163 1389.78,230.238 1390.35,230.426 1390.92,228.525 1391.48,228.828 1392.05,229.098 1392.62,230.571 1393.19,231.903 1393.76,231.034 1394.33,232.274 1394.89,232.582 1395.46,234.727 1396.03,235.888 1396.6,238.261 1397.17,236.954 1397.74,237.608 1398.3,237.32 1398.87,237.282 1399.44,239.225 1400.01,238.841 1400.58,237.149 1401.15,238 1401.71,237.458 1402.28,237.135 1402.85,237.904 1403.42,238.448 1403.99,238.17 1404.56,236.784 1405.13,237.821 1405.69,239.605 1406.26,240.164 1406.83,238.5 1407.4,237.244 1407.97,235.991 1408.54,236.085 1409.1,235.884 1409.67,236.83 1410.24,238.675 1410.81,240.408 1411.38,239.976 1411.95,239.596 1412.51,236.96 1413.08,234.707 1413.65,234.471 1414.22,233.482 1414.79,232.456 1415.36,233.501 1415.92,232.296 1416.49,232.26 1417.06,235.211 1417.63,236.871 1418.2,236.653 1418.77,236.326 1419.33,235.951 1419.9,237.898 1420.47,238.495 1421.04,237.975 1421.61,235.365 1422.18,235.878 1422.74,232.695 1423.31,232.468 1423.88,230.427 1424.45,231.81 1425.02,233.123 1425.59,232.882 1426.15,234.086 1426.72,232.75 1427.29,232.358 1427.86,230.332 1428.43,230.757 1429,231.991 1429.56,231.934 1430.13,230.752 1430.7,230.709 1431.27,230.76 1431.84,233.095 1432.41,233.286 1432.97,233.335 1433.54,232.101 1434.11,231.221 1434.68,231.533 1435.25,232.645 1435.82,232.599 1436.38,232.532 1436.95,232.474 1437.52,235.484 1438.09,236.263 1438.66,236.889 1439.23,236.328 1439.79,235.097 1440.36,232.916 1440.93,230.857 1441.5,229.921 1442.07,231.062 1442.64,231.183 1443.2,232.456 1443.77,229.48 1444.34,229.677 1444.91,231.931 1445.48,232.138 1446.05,232.298 1446.61,233.426 1447.18,233.479 1447.75,234.355 1448.32,231.2 1448.89,231.183 1449.46,233.445 1450.02,233.412 1450.59,233.303 1451.16,232.186 1451.73,233.241 1452.3,232.262 1452.87,234.44 1453.43,234.488 1454,234.388 1454.57,232.242 1455.14,231.401 1455.71,230.458 1456.28,230.765 1456.84,230.059 1457.41,232.373 1457.98,232.362 1458.55,232.533 1459.12,231.705 1459.69,232.792 1460.25,233.028 1460.82,235.159 1461.39,231.16 1461.96,228.396 1462.53,229.746 1463.1,230.231 1463.66,230.406 1464.23,228.521 1464.8,228.803 1465.37,226.908 1465.94,228.543 1466.51,230.014 1467.07,230.438 1467.64,232.675 1468.21,230.62 1468.78,231.125 1469.35,231.231 1469.92,230.543 1470.48,230.78 1471.05,235.139 1471.62,238.108 1472.19,239.039 1472.76,238.669 1473.33,238.197 1473.89,238.019 1474.46,236.987 1475.03,234.96 1475.6,233.921 1476.17,234.083 1476.74,230.796 1477.31,231.041 1477.87,228.962 1478.44,230.209 1479.01,230.655 1479.58,231.079 1480.15,231.32 1480.72,231.516 1481.28,232.963 1481.85,234.176 1482.42,234.38 1482.99,233.516 1483.56,232.413 1484.13,232.888 1484.69,233.107 1485.26,232.399 1485.83,232.676 1486.4,232.663 1486.97,232.819 1487.54,233.973 1488.1,231.898 1488.67,234.211 1489.24,234.085 1489.81,234.013 1490.38,233.831 1490.95,233.121 1491.51,232.158 1492.08,232.562 1492.65,231.779 1493.22,231.843 1493.79,235.134 1494.36,234.965 1494.92,234.847 1495.49,234.97 1496.06,232.953 1496.63,235.008 1497.2,237.853 1497.77,238.533 1498.33,237.178 1498.9,239.064 1499.47,238.701 1500.04,238.625 1500.61,238.325 1501.18,238.75 1501.74,238.462 1502.31,237.447 1502.88,236.977 1503.45,236.597 1504.02,236.331 1504.59,235.021 1505.15,233.694 1505.72,231.907 1506.29,233.016 1506.86,231.168 1507.43,232.247 1508,231.285 1508.56,231.467 1509.13,229.64 1509.7,228.885 1510.27,228.199 1510.84,229.696 1511.41,231.013 1511.97,231.146 1512.54,226.124 1513.11,227.616 1513.68,229.17 1514.25,231.689 1514.82,233.083 1515.38,233.063 1515.95,236.424 1516.52,235.279 1517.09,235.263 1517.66,235.393 1518.23,234.445 1518.79,234.242 1519.36,236.469 1519.93,235.304 1520.5,236.249 1521.07,234.204 1521.64,234.167 1522.2,232.999 1522.77,233.093 1523.34,232.888 1523.91,233.095 1524.48,232.264 1525.05,235.645 1525.61,234.52 1526.18,235.456 1526.75,235.458 1527.32,234.229 1527.89,232.132 1528.46,231.311 1529.02,231.708 1529.59,233.928 1530.16,234.833 1530.73,236.007 1531.3,236.816 1531.87,234.714 1532.43,235.654 1533,235.749 1533.57,236.819 1534.14,236.618 1534.71,236.484 1535.28,235.388 1535.84,235.232 1536.41,235.147 1536.98,235.369 1537.55,236.242 1538.12,236.097 1538.69,236.174 1539.25,236.144 1539.82,235.971 1540.39,235.802 1540.96,236.667 1541.53,236.519 1542.1,233.122 1542.66,234.258 1543.23,235.443 1543.8,236.37 1544.37,237.175 1544.94,236.829 1545.51,237.267 1546.08,238.908 1546.64,239.408 1547.21,238.046 1547.78,237.674 1548.35,237.411 1548.92,235.905 1549.49,235.442 1550.05,236.242 1550.62,234.001 1551.19,233.066 1551.76,231.104 1552.33,231.344 1552.9,232.49 1553.46,229.439 1554.03,229.771 1554.6,230.043 1555.17,230.311 1555.74,230.515 1556.31,230.763 1556.87,229.945 1557.44,229.153 1558.01,229.194 1558.58,232.64 1559.15,232.756 1559.72,234.206 1560.28,234.135 1560.85,233.827 1561.42,232.142 1561.99,228.898 1562.56,229.082 1563.13,230.497 1563.69,229.803 1564.26,231.084 1564.83,232.497 1565.4,232.735 1565.97,233.954 1566.54,235.181 1567.1,235.251 1567.67,236.237 1568.24,238.162 1568.81,239.84 1569.38,238.454 1569.95,234.019 1570.51,237.237 1571.08,233.702 1571.65,233.982 1572.22,237.004 1572.79,235.803 1573.36,237.788 1573.92,237.646 1574.49,237.148 1575.06,236.944 1575.63,236.971 1576.2,236.601 1576.77,236.481 1577.33,236.31 1577.9,237.134 1578.47,236.753 1579.04,236.427 1579.61,236.13 1580.18,236.91 1580.74,236.546 1581.31,237.415 1581.88,238.122 1582.45,234.732 1583.02,235.432 1583.59,235.199 1584.15,232.989 1584.72,232.862 1585.29,233.928 1585.86,233.859 1586.43,234.874 1587,234.756 1587.56,236.451 1588.13,235.158 1588.7,237.308 1589.27,238.976 1589.84,235.407 1590.41,235.305 1590.97,235.147 1591.54,234.782 1592.11,233.333 1592.68,233.184 1593.25,232.012 1593.82,229.071 1594.38,228.173 1594.95,228.371 1595.52,225.658 1596.09,226.257 1596.66,226.597 1597.23,226.075 1597.79,226.523 1598.36,226.159 1598.93,227.758 1599.5,229.236 1600.07,228.657 1600.64,228.99 1601.2,228.253 1601.77,229.632 1602.34,231.871 1602.91,232.096 1603.48,233.177 1604.05,232.228 1604.61,231.266 1605.18,233.507 1605.75,231.413 1606.32,231.656 1606.89,231.955 1607.46,231.762 1608.02,231.865 1608.59,229.987 1609.16,231.478 1609.73,231.666 1610.3,229.909 1610.87,227.134 1611.43,224.667 1612,224.482 1612.57,220.948 1613.14,219.895 1613.71,220.966 1614.28,222.06 1614.84,224.062 1615.41,224.794 1615.98,227.401 1616.55,225.979 1617.12,225.847 1617.69,228.738 1618.26,230.332 1618.82,233.131 1619.39,234.49 1619.96,235.838 1620.53,234.771 1621.1,234.72 1621.67,236.232 1622.23,235.273 1622.8,237.366 1623.37,237.545 1623.94,239.536 1624.51,238.478 1625.08,239.276 1625.64,239.14 1626.21,241.121 1626.78,240.898 1627.35,238.601 1627.92,239.416 1628.49,239.224 1629.05,238.048 1629.62,237.728 1630.19,235.498 1630.76,234.547 1631.33,234.61 1631.9,234.778 1632.46,236.832 1633.03,234.64 1633.6,235.79 1634.17,236.798 1634.74,235.64 1635.31,235.641 1635.87,236.778 1636.44,234.598 1637.01,236.62 1637.58,238.674 1638.15,238.352 1638.72,240.156 1639.28,237.907 1639.85,236.465 1640.42,235.321 1640.99,236.325 1641.56,238.376 1642.13,239.351 1642.69,239.144 1643.26,239.069 1643.83,237.513 1644.4,237.393 1644.97,237.409 1645.54,238.025 1646.1,239.63 1646.67,238.317 1647.24,238.966 1647.81,234.554 1648.38,235.706 1648.95,236.684 1649.51,238.409 1650.08,237.938 1650.65,237.97 1651.22,238.817 1651.79,238.376 1652.36,240.061 1652.92,238.699 1653.49,240.312 1654.06,241.917 1654.63,241.081 1655.2,240.413 1655.77,238.857 1656.33,238.568 1656.9,238.124 1657.47,235.552 1658.04,235.363 1658.61,237.177 1659.18,240.894 1659.74,237.392 1660.31,236.86 1660.88,237.764 1661.45,237.269 1662.02,236.712 1662.59,240.453 1663.15,239.948 1663.72,239.426 1664.29,239.646 1664.86,239.224 1665.43,237.649 1666,237.429 1666.56,237.109 1667.13,236.658 1667.7,239.321 1668.27,237.546 1668.84,233.967 1669.41,230.473 1669.97,230.659 1670.54,228.815 1671.11,231.035 1671.68,228.079 1672.25,228.386 1672.82,227.547 1673.38,226.773 1673.95,226.3 1674.52,227.873 1675.09,225.193 1675.66,225.501 1676.23,226.866 1676.79,226.025 1677.36,225.144 1677.93,226.617 1678.5,228.445 1679.07,228.571 1679.64,228.889 1680.2,228.941 1680.77,229.297 1681.34,229.555 1681.91,232.632 1682.48,231.696 1683.05,231.83 1683.61,231.956 1684.18,233.193 1684.75,233.111 1685.32,232.023 1685.89,231.951 1686.46,234.001 1687.02,231.834 1687.59,231.05 1688.16,232.249 1688.73,232.439 1689.3,234.504 1689.87,236.406 1690.44,233.047 1691,232.183 1691.57,230.09 1692.14,230.377 1692.71,232.83 1693.28,236.028 1693.85,238.102 1694.41,235.887 1694.98,234.792 1695.55,234.67 1696.12,233.678 1696.69,235.743 1697.26,234.643 1697.82,235.501 1698.39,235.496 1698.96,232.245 1699.53,232.337 1700.1,231.344 1700.67,231.284 1701.23,230.324 1701.8,230.463 1702.37,233.818 1702.94,233.681 1703.51,230.46 1704.08,230.731 1704.64,231.077 1705.21,231.242 1705.78,231.275 1706.35,232.452 1706.92,233.599 1707.49,233.599 1708.05,233.675 1708.62,234.587 1709.19,232.603 1709.76,231.568 1710.33,231.866 1710.9,229.941 1711.46,230.334 1712.03,229.425 1712.6,230.701 1713.17,232.004 1713.74,232.262 1714.31,233.586 1714.87,233.457 1715.44,233.55 1716.01,233.555 1716.58,235.508 1717.15,236.44 1717.72,236.197 1718.28,234.185 1718.85,235.265 1719.42,235.263 1719.99,236.163 1720.56,236.071 1721.13,235.99 1721.69,233.639 1722.26,234.449 1722.83,235.412 1723.4,237.171 1723.97,236.842 1724.54,233.527 1725.1,235.575 1725.67,234.394 1726.24,235.267 1726.81,234.13 1727.38,235.079 1727.95,235.231 1728.51,236.186 1729.08,235.859 1729.65,235.737 1730.22,233.382 1730.79,234.471 1731.36,236.532 1731.92,235.226 1732.49,235.061 1733.06,234.14 1733.63,234.105 1734.2,233.202 1734.77,233.133 1735.33,235.202 1735.9,239.291 1736.47,236.729 1737.04,237.499 1737.61,235.057 1738.18,235.875 1738.74,235.53 1739.31,237.324 1739.88,236.069 1740.45,235.799 1741.02,235.481 1741.59,232.089 1742.15,232.276 1742.72,233.308 1743.29,231.245 1743.86,231.309 1744.43,230.328 1745,228.403 1745.56,227.524 1746.13,229.034 1746.7,230.481 1747.27,229.742 1747.84,231.086 1748.41,230.218 1748.97,231.369 1749.54,233.505 1750.11,231.429 1750.68,230.577 1751.25,230.949 1751.82,232.039 1752.38,230.043 1752.95,231.364 1753.52,229.327 1754.09,229.661 1754.66,229.06 1755.23,228.599 1755.79,231.166 1756.36,229.406 1756.93,230.854 1757.5,233.101 1758.07,234.483 1758.64,232.192 1759.21,231.197 1759.77,230.368 1760.34,229.678 1760.91,231.048 1761.48,230.217 1762.05,232.602 1762.62,231.663 1763.18,231.61 1763.75,231.737 1764.32,233.425 1764.89,233.679 1765.46,234.098 1766.03,234.124 1766.59,234.19 1767.16,235.22 1767.73,234.496 1768.3,233.348 1768.87,232.427 1769.44,233.633 1770,233.872 1770.57,233.704 1771.14,231.813 1771.71,230.958 1772.28,232.165 1772.85,232.372 1773.41,232.544 1773.98,233.59 1774.55,233.986 1775.12,234.137 1775.69,236.416 1776.26,235.313 1776.82,239.263 1777.39,238.848 1777.96,237.47 1778.53,237.231 1779.1,235.952 1779.67,236.877 1780.23,235.768 1780.8,235.475 1781.37,237.669 1781.94,237.57 1782.51,236.55 1783.08,237.646 1783.64,236.542 1784.21,237.555 1784.78,234.292 1785.35,236.524 1785.92,235.501 1786.49,238.501 1787.05,239.138 1787.62,237.867 1788.19,239.523 1788.76,240.058 1789.33,239.434 1789.9,239.714 1790.46,238.992 1791.03,238.624 1791.6,236.873 1792.17,235.492 1792.74,234.318 1793.31,232.177 1793.87,234.465 1794.44,235.615 1795.01,235.6 1795.58,235.59 1796.15,235.482 1796.72,234.245 1797.28,234.182 1797.85,236.131 1798.42,236.16 1798.99,235.983 1799.56,235.662 1800.13,231.389 1800.69,231.278 1801.26,231.422 1801.83,228.492 1802.4,227.655 1802.97,230.295 1803.54,228.615 1804.1,229.972 1804.67,228.975 1805.24,228.112 1805.81,228.538 1806.38,228.221 1806.95,228.58 1807.51,228.081 1808.08,229.56 1808.65,230.101 1809.22,229.451 1809.79,231.528 1810.36,232.709 1810.92,233.661 1811.49,234.668 1812.06,232.475 1812.63,234.735 1813.2,234.75 1813.77,235.007 1814.33,233.817 1814.9,233.781 1815.47,232.01 1816.04,234.231 1816.61,235.32 1817.18,235.426 1817.74,235.141 1818.31,235.014 1818.88,235.997 1819.45,234.946 1820.02,235.696 1820.59,235.734 1821.15,236.624 1821.72,235.43 1822.29,236.515 1822.86,237.286 1823.43,238.159 1824,238.265 1824.56,236.925 1825.13,235.906 1825.7,234.745 1826.27,235.82 1826.84,236.787 1827.41,237.684 1827.97,236.275 1828.54,236.011 1829.11,235.761 1829.68,236.48 1830.25,236.323 1830.82,238.344 1831.39,238.196 1831.95,238.874 1832.52,239.451 1833.09,239.989 1833.66,237.412 1834.23,236.961 1834.8,237.603 1835.36,237.276 1835.93,235.999 1836.5,235.76 1837.07,236.643 1837.64,234.245 1838.21,234.256 1838.77,233.371 1839.34,230.39 1839.91,230.552 1840.48,233.737 1841.05,233.487 1841.62,234.378 1842.18,234.341 1842.75,233.232 1843.32,232.099 1843.89,232.108 1844.46,230.9 1845.03,230.97 1845.59,230.094 1846.16,229.05 1846.73,228.159 1847.3,229.612 1847.87,228.723 1848.44,229.135 1849,233.733 1849.57,229.691 1850.14,230.095 1850.71,230.296 1851.28,228.57 1851.85,227.895 1852.41,230.427 1852.98,232.53 1853.55,231.564 1854.12,231.724 1854.69,231.939 1855.26,232.315 1855.82,233.598 1856.39,235.698 1856.96,237.649 1857.53,236.475 1858.1,237.414 1858.67,236.085 1859.23,234.873 1859.8,232.748 1860.37,233.709 1860.94,234.667 1861.51,231.491 1862.08,233.762 1862.64,233.845 1863.21,233.76 1863.78,231.464 1864.35,230.616 1864.92,229.932 1865.49,229.995 1866.05,229.452 1866.62,230.886 1867.19,233.142 1867.76,235.539 1868.33,235.244 1868.9,235.142 1869.46,233.26 1870.03,232.272 1870.6,231.315 1871.17,232.464 1871.74,232.46 1872.31,233.511 1872.87,232.489 1873.44,233.735 1874.01,232.595 1874.58,232.466 1875.15,232.41 1875.72,231.395 1876.28,231.44 1876.85,232.544 1877.42,231.636 1877.99,229.792 1878.56,228.98 1879.13,228.528 1879.69,229.891 1880.26,229.092 1880.83,229.61 1881.4,232.261 1881.97,230.208 1882.54,230.44 1883.1,231.73 1883.67,229.991 1884.24,228.28 1884.81,228.6 1885.38,229.876 1885.95,230.239 1886.51,229.522 1887.08,228.848 1887.65,228.997 1888.22,230.335 1888.79,231.963 1889.36,232.195 1889.92,232.577 1890.49,233.636 1891.06,233.982 1891.63,235.083 1892.2,236.026 1892.77,232.955 1893.33,230.834 1893.9,232.067 1894.47,232.496 1895.04,232.621 1895.61,232.674 1896.18,234.903 1896.74,233.966 1897.31,231.979 1897.88,233.16 1898.45,234.378 1899.02,236.355 1899.59,236.253 1900.16,235.352 1900.72,235.31 1901.29,237.318 1901.86,235.151 1902.43,233.935 1903,234.229 1903.57,236.193 1904.13,236.074 1904.7,237.083 1905.27,236.107 1905.84,235.938 1906.41,237.919 1906.98,234.734 1907.54,235.626 1908.11,235.666 1908.68,236.844 1909.25,235.859 1909.82,233.897 1910.39,230.999 1910.95,232.228 1911.52,234.634 1912.09,233.573 1912.66,231.585 1913.23,233.655 1913.8,235.788 1914.36,234.815 1914.93,234.69 1915.5,234.575 1916.07,237.698 1916.64,236.377 1917.21,235.291 1917.77,233.958 1918.34,234.976 1918.91,232.9 1919.48,233.915 1920.05,235.013 1920.62,235.995 1921.18,237.201 1921.75,236.935 1922.32,239.715 1922.89,239.288 1923.46,239.973 1924.03,240.721 1924.59,241.41 1925.16,240.883 1925.73,238.349 1926.3,238.16 1926.87,238.791 1927.44,238.347 1928,236.105 1928.57,235.858 1929.14,236.632 1929.71,236.586 1930.28,235.267 1930.85,234.899 1931.41,234.734 1931.98,234.654 1932.55,233.367 1933.12,232.264 1933.69,232.518 1934.26,233.711 1934.82,235.057 1935.39,235.018 1935.96,234.63 1936.53,233.223 1937.1,233.024 1937.67,231.051 1938.23,231.978 1938.8,230.977 1939.37,230.339 1939.94,229.58 1940.51,230.915 1941.08,228.936 1941.64,229.339 1942.21,228.734 1942.78,229.915 1943.35,231.215 1943.92,231.443 1944.49,233.878 1945.05,234.96 1945.62,236.069 1946.19,232.884 1946.76,233.132 1947.33,234.376 1947.9,232.21 1948.46,231.308 1949.03,231.517 1949.6,231.885 1950.17,232.045 1950.74,232.339 1951.31,233.292 1951.87,231.369 1952.44,229.272 1953.01,230.643 1953.58,232.876 1954.15,231.056 1954.72,231.424 1955.28,233.734 1955.85,237.801 1956.42,239.478 1956.99,238.081 1957.56,237.935 1958.13,237.687 1958.69,235.476 1959.26,236.299 1959.83,236.222 1960.4,237.201 1960.97,238.973 1961.54,237.505 1962.1,237.416 1962.67,238.166 1963.24,236.809 1963.81,235.454 1964.38,234.061 1964.95,236.079 1965.51,236.973 1966.08,238.847 1966.65,240.523 1967.22,238.98 1967.79,239.317 1968.36,239.075 1968.92,238.584 1969.49,238.396 1970.06,236.003 1970.63,236.719 1971.2,236.558 1971.77,237.155 1972.34,233.83 1972.9,233.538 1973.47,234.456 1974.04,234.404 1974.61,235.573 1975.18,234.182 1975.75,233.141 1976.31,234.2 1976.88,234.157 1977.45,235.135 1978.02,236.831 1978.59,237.481 1979.16,236.134 1979.72,236.161 1980.29,236.013 1980.86,236.789 1981.43,236.679 1982,235.424 1982.57,233.997 1983.13,233.731 1983.7,232.639 1984.27,232.622 1984.84,232.722 1985.41,233.518 1985.98,233.441 1986.54,231.314 1987.11,230.455 1987.68,231.852 1988.25,232.87 1988.82,232.773 1989.39,232.733 1989.95,232.447 1990.52,231.275 1991.09,231.317 1991.66,228.298 1992.23,226.55 1992.8,226.777 1993.36,227.418 1993.93,224.561 1994.5,225.031 1995.07,227.725 1995.64,227.063 1996.21,229.47 1996.77,230.819 1997.34,233.938 1997.91,231.976 1998.48,233.45 1999.05,234.461 1999.62,234.508 2000.18,234.36 2000.75,235.433 2001.32,233.436 2001.89,232.31 2002.46,232.43 2003.03,233.284 2003.59,236.66 2004.16,234.515 2004.73,234.384 2005.3,235.276 2005.87,233.897 2006.44,228.945 2007,228.207 2007.57,227.489 2008.14,230.973 2008.71,231.122 2009.28,233.324 2009.85,234.413 2010.41,234.487 2010.98,232.232 2011.55,231.182 2012.12,232.018 2012.69,232.167 2013.26,234.317 2013.82,234.337 2014.39,234.202 2014.96,233.301 2015.53,235.391 2016.1,235.178 2016.67,233.323 2017.23,233.581 2017.8,232.545 2018.37,232.595 2018.94,232.69 2019.51,233.881 2020.08,234.085 2020.64,233.184 2021.21,232.545 2021.78,233.588 2022.35,233.682 2022.92,234.546 2023.49,236.703 2024.05,235.525 2024.62,234.329 2025.19,234.381 2025.76,231.37 2026.33,232.48 2026.9,232.526 2027.46,232.03 2028.03,232.026 2028.6,231.135 2029.17,234.568 2029.74,233.625 2030.31,234.61 2030.87,234.656 2031.44,235.312 2032.01,236.38 2032.58,234.083 2033.15,234.268 2033.72,236.411 2034.28,237.294 2034.85,237.031 2035.42,237.623 2035.99,237.198 2036.56,235.969 2037.13,235.76 2037.69,235.767 2038.26,233.543 2038.83,234.487 2039.4,235.311 2039.97,235.285 2040.54,235.317 2041.11,235.253 2041.67,236.273 2042.24,235.111 2042.81,235.785 2043.38,236.759 2043.95,235.405 2044.52,236.151 2045.08,236.909 2045.65,235.675 2046.22,235.582 2046.79,232.313 2047.36,232.449 2047.93,229.537 2048.49,229.87 2049.06,229.046 2049.63,226.246 2050.2,228.85 2050.77,228.272 2051.34,225.584 2051.9,231.279 2052.47,232.675 2053.04,233.976 2053.61,237.008 2054.18,237.833 2054.75,238.678 2055.31,241.588 2055.88,243.07 2056.45,243.295 2057.02,239.577 2057.59,240.224 2058.16,239.623 2058.72,240.228 2059.29,240.673 2059.86,240.179 2060.43,240.669 2061,239.157 2061.57,235.456 2062.13,233.188 2062.7,233.109 2063.27,231.823 2063.84,232.89 2064.41,233.006 2064.98,231.652 2065.54,232.763 2066.11,233.782 2066.68,232.609 2067.25,231.611 2067.82,231.686 2068.39,230.754 2068.95,230.003 2069.52,231.074 2070.09,231.108 2070.66,231.338 2071.23,231.52 2071.8,231.523 2072.36,230.853 2072.93,231.09 2073.5,229.255 2074.07,228.547 2074.64,226.963 2075.21,226.363 2075.77,226.714 2076.34,227.214 2076.91,227.507 2077.48,228.855 2078.05,232.047 2078.62,228.175 2079.18,229.834 2079.75,231.072 2080.32,232.302 2080.89,234.628 2081.46,235.901 2082.03,236.853 2082.59,235.794 2083.16,234.557 2083.73,232.359 2084.3,232.37 2084.87,233.356 2085.44,233.522 2086,233.435 2086.57,234.517 2087.14,234.359 2087.71,234.463 2088.28,236.613 2088.85,237.47 2089.41,237.141 2089.98,235.845 2090.55,234.868 2091.12,233.744 2091.69,233.978 2092.26,234.968 2092.82,233.835 2093.39,233.825 2093.96,233.964 2094.53,232.846 2095.1,234.123 2095.67,231.102 2096.23,232.418 2096.8,230.511 2097.37,230.808 2097.94,230.868 2098.51,230.04 2099.08,231.381 2099.64,232.475 2100.21,233.484 2100.78,233.599 2101.35,233.202 2101.92,232.214 2102.49,234.361 2103.05,237.299 2103.62,237.034 2104.19,235.895 2104.76,235.96 2105.33,235.976 2105.9,236.87 2106.46,237.607 2107.03,238.299 2107.6,240.05 2108.17,236.546 2108.74,234.28 2109.31,233.175 2109.87,233.237 2110.44,232.292 2111.01,231.214 2111.58,231.793 2112.15,231.843 2112.72,233.93 2113.29,234.721 2113.85,234.746 2114.42,233.784 2114.99,233.987 2115.56,234.853 2116.13,234.773 2116.7,235.777 2117.26,234.689 2117.83,236.844 2118.4,236.874 2118.97,236.903 2119.54,235.801 2120.11,235.397 2120.67,234.091 2121.24,235.179 2121.81,232.885 2122.38,231.981 2122.95,232.148 2123.52,233.367 2124.08,234.349 2124.65,234.305 2125.22,231.097 2125.79,231.373 2126.36,232.631 2126.93,231.618 2127.49,230.872 2128.06,231.202 2128.63,230.218 2129.2,228.552 2129.77,229.037 2130.34,228.387 2130.9,229.933 2131.47,232.265 2132.04,232.528 2132.61,232.704 2133.18,232.921 2133.75,233.922 2134.31,233.918 2134.88,235.079 2135.45,234.103 2136.02,236.39 2136.59,236.318 2137.16,236.061 2137.72,235.957 2138.29,236.941 2138.86,238.956 2139.43,237.721 2140,237.383 2140.57,235.046 2141.13,234.902 2141.7,235.788 2142.27,238.589 2142.84,239.231 2143.41,238.808 2143.98,237.295 2144.54,235.921 2145.11,234.722 2145.68,236.559 2146.25,238.209 2146.82,238.996 2147.39,238.468 2147.95,239.18 2148.52,242.921 2149.09,240.915 2149.66,238.368 2150.23,236.973 2150.8,236.5 2151.36,236.247 2151.93,234.824 2152.5,234.618 2153.07,234.007 2153.64,232.837 2154.21,233.923 2154.77,233.896 2155.34,233.007 2155.91,231.945 2156.48,232.807 2157.05,231.599 2157.62,230.761 2158.18,229.869 2158.75,230.037 2159.32,230.31 2159.89,230.563 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.021\n  with uncertainty of ± 0.001919542494521694\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01773 ± (0.00224505, 0.00248853) (MC)\n  95% confidence interval: [-4.02244, -4.01327]) (MC)\n  linear error propagation: -4.01821 ± 0.00240527\n  |δ_y| = |0.00199902| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0177253247094855, val_l = 0.004715033490287013, val_u = 0.004454552126727407)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip530\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip530)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip531\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip530)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip532\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1151.51 2211.02,1151.51 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,994.047 2211.02,994.047 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,836.582 2211.02,836.582 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,679.117 2211.02,679.117 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,521.652 2211.02,521.652 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,364.187 2211.02,364.187 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,206.722 2211.02,206.722 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1151.51 365.751,1151.51 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,994.047 365.751,994.047 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,836.582 365.751,836.582 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,679.117 365.751,679.117 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,521.652 365.751,521.652 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,364.187 365.751,364.187 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,206.722 365.751,206.722 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M298.909 1137.31 Q295.298 1137.31 293.469 1140.88 Q291.664 1144.42 291.664 1151.55 Q291.664 1158.65 293.469 1162.22 Q295.298 1165.76 298.909 1165.76 Q302.543 1165.76 304.349 1162.22 Q306.177 1158.65 306.177 1151.55 Q306.177 1144.42 304.349 1140.88 Q302.543 1137.31 298.909 1137.31 M298.909 1133.61 Q304.719 1133.61 307.775 1138.21 Q310.853 1142.8 310.853 1151.55 Q310.853 1160.27 307.775 1164.88 Q304.719 1169.46 298.909 1169.46 Q293.099 1169.46 290.02 1164.88 Q286.964 1160.27 286.964 1151.55 Q286.964 1142.8 290.02 1138.21 Q293.099 1133.61 298.909 1133.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M259.557 1007.39 L267.196 1007.39 L267.196 981.027 L258.886 982.693 L258.886 978.434 L267.15 976.767 L271.826 976.767 L271.826 1007.39 L279.465 1007.39 L279.465 1011.33 L259.557 1011.33 L259.557 1007.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 979.846 Q295.298 979.846 293.469 983.411 Q291.664 986.952 291.664 994.082 Q291.664 1001.19 293.469 1004.75 Q295.298 1008.29 298.909 1008.29 Q302.543 1008.29 304.349 1004.75 Q306.177 1001.19 306.177 994.082 Q306.177 986.952 304.349 983.411 Q302.543 979.846 298.909 979.846 M298.909 976.142 Q304.719 976.142 307.775 980.749 Q310.853 985.332 310.853 994.082 Q310.853 1002.81 307.775 1007.42 Q304.719 1012 298.909 1012 Q293.099 1012 290.02 1007.42 Q286.964 1002.81 286.964 994.082 Q286.964 985.332 290.02 980.749 Q293.099 976.142 298.909 976.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M262.775 849.927 L279.094 849.927 L279.094 853.862 L257.15 853.862 L257.15 849.927 Q259.812 847.173 264.395 842.543 Q269.002 837.89 270.182 836.548 Q272.428 834.024 273.307 832.288 Q274.21 830.529 274.21 828.839 Q274.21 826.085 272.266 824.349 Q270.344 822.612 267.242 822.612 Q265.043 822.612 262.59 823.376 Q260.159 824.14 257.381 825.691 L257.381 820.969 Q260.205 819.835 262.659 819.256 Q265.113 818.677 267.15 818.677 Q272.52 818.677 275.715 821.362 Q278.909 824.048 278.909 828.538 Q278.909 830.668 278.099 832.589 Q277.312 834.487 275.205 837.08 Q274.627 837.751 271.525 840.969 Q268.423 844.163 262.775 849.927 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 822.381 Q295.298 822.381 293.469 825.946 Q291.664 829.487 291.664 836.617 Q291.664 843.723 293.469 847.288 Q295.298 850.83 298.909 850.83 Q302.543 850.83 304.349 847.288 Q306.177 843.723 306.177 836.617 Q306.177 829.487 304.349 825.946 Q302.543 822.381 298.909 822.381 M298.909 818.677 Q304.719 818.677 307.775 823.284 Q310.853 827.867 310.853 836.617 Q310.853 845.344 307.775 849.95 Q304.719 854.534 298.909 854.534 Q293.099 854.534 290.02 849.95 Q286.964 845.344 286.964 836.617 Q286.964 827.867 290.02 823.284 Q293.099 818.677 298.909 818.677 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M272.914 677.763 Q276.27 678.481 278.145 680.749 Q280.043 683.018 280.043 686.351 Q280.043 691.467 276.525 694.268 Q273.006 697.069 266.525 697.069 Q264.349 697.069 262.034 696.629 Q259.742 696.212 257.289 695.356 L257.289 690.842 Q259.233 691.976 261.548 692.555 Q263.863 693.133 266.386 693.133 Q270.784 693.133 273.076 691.397 Q275.39 689.661 275.39 686.351 Q275.39 683.295 273.238 681.583 Q271.108 679.846 267.289 679.846 L263.261 679.846 L263.261 676.004 L267.474 676.004 Q270.923 676.004 272.752 674.638 Q274.58 673.249 274.58 670.657 Q274.58 667.995 272.682 666.583 Q270.807 665.147 267.289 665.147 Q265.367 665.147 263.168 665.564 Q260.969 665.981 258.33 666.86 L258.33 662.694 Q260.992 661.953 263.307 661.583 Q265.645 661.212 267.705 661.212 Q273.029 661.212 276.131 663.643 Q279.233 666.05 279.233 670.171 Q279.233 673.041 277.59 675.032 Q275.946 676.999 272.914 677.763 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 664.916 Q295.298 664.916 293.469 668.481 Q291.664 672.022 291.664 679.152 Q291.664 686.258 293.469 689.823 Q295.298 693.365 298.909 693.365 Q302.543 693.365 304.349 689.823 Q306.177 686.258 306.177 679.152 Q306.177 672.022 304.349 668.481 Q302.543 664.916 298.909 664.916 M298.909 661.212 Q304.719 661.212 307.775 665.819 Q310.853 670.402 310.853 679.152 Q310.853 687.879 307.775 692.485 Q304.719 697.069 298.909 697.069 Q293.099 697.069 290.02 692.485 Q286.964 687.879 286.964 679.152 Q286.964 670.402 290.02 665.819 Q293.099 661.212 298.909 661.212 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M271.594 508.446 L259.789 526.895 L271.594 526.895 L271.594 508.446 M270.367 504.372 L276.247 504.372 L276.247 526.895 L281.177 526.895 L281.177 530.784 L276.247 530.784 L276.247 538.932 L271.594 538.932 L271.594 530.784 L255.992 530.784 L255.992 526.27 L270.367 504.372 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 507.451 Q295.298 507.451 293.469 511.016 Q291.664 514.557 291.664 521.687 Q291.664 528.793 293.469 532.358 Q295.298 535.9 298.909 535.9 Q302.543 535.9 304.349 532.358 Q306.177 528.793 306.177 521.687 Q306.177 514.557 304.349 511.016 Q302.543 507.451 298.909 507.451 M298.909 503.747 Q304.719 503.747 307.775 508.354 Q310.853 512.937 310.853 521.687 Q310.853 530.414 307.775 535.02 Q304.719 539.604 298.909 539.604 Q293.099 539.604 290.02 535.02 Q286.964 530.414 286.964 521.687 Q286.964 512.937 290.02 508.354 Q293.099 503.747 298.909 503.747 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M258.793 346.907 L277.15 346.907 L277.15 350.842 L263.076 350.842 L263.076 359.315 Q264.094 358.967 265.113 358.805 Q266.131 358.62 267.15 358.62 Q272.937 358.62 276.316 361.791 Q279.696 364.963 279.696 370.379 Q279.696 375.958 276.224 379.06 Q272.752 382.138 266.432 382.138 Q264.256 382.138 261.988 381.768 Q259.742 381.398 257.335 380.657 L257.335 375.958 Q259.418 377.092 261.641 377.648 Q263.863 378.203 266.34 378.203 Q270.344 378.203 272.682 376.097 Q275.02 373.99 275.02 370.379 Q275.02 366.768 272.682 364.662 Q270.344 362.555 266.34 362.555 Q264.465 362.555 262.59 362.972 Q260.738 363.389 258.793 364.268 L258.793 346.907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 349.986 Q295.298 349.986 293.469 353.551 Q291.664 357.092 291.664 364.222 Q291.664 371.328 293.469 374.893 Q295.298 378.435 298.909 378.435 Q302.543 378.435 304.349 374.893 Q306.177 371.328 306.177 364.222 Q306.177 357.092 304.349 353.551 Q302.543 349.986 298.909 349.986 M298.909 346.282 Q304.719 346.282 307.775 350.889 Q310.853 355.472 310.853 364.222 Q310.853 372.949 307.775 377.555 Q304.719 382.138 298.909 382.138 Q293.099 382.138 290.02 377.555 Q286.964 372.949 286.964 364.222 Q286.964 355.472 290.02 350.889 Q293.099 346.282 298.909 346.282 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M269.326 204.859 Q266.178 204.859 264.326 207.011 Q262.497 209.164 262.497 212.914 Q262.497 216.641 264.326 218.817 Q266.178 220.97 269.326 220.97 Q272.474 220.97 274.303 218.817 Q276.154 216.641 276.154 212.914 Q276.154 209.164 274.303 207.011 Q272.474 204.859 269.326 204.859 M278.608 190.206 L278.608 194.465 Q276.849 193.632 275.043 193.192 Q273.261 192.752 271.502 192.752 Q266.872 192.752 264.418 195.877 Q261.988 199.002 261.641 205.322 Q263.006 203.308 265.066 202.243 Q267.127 201.155 269.603 201.155 Q274.812 201.155 277.821 204.326 Q280.853 207.474 280.853 212.914 Q280.853 218.238 277.705 221.456 Q274.557 224.673 269.326 224.673 Q263.33 224.673 260.159 220.09 Q256.988 215.484 256.988 206.757 Q256.988 198.562 260.877 193.701 Q264.766 188.817 271.316 188.817 Q273.076 188.817 274.858 189.164 Q276.664 189.512 278.608 190.206 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M298.909 192.521 Q295.298 192.521 293.469 196.086 Q291.664 199.627 291.664 206.757 Q291.664 213.863 293.469 217.428 Q295.298 220.97 298.909 220.97 Q302.543 220.97 304.349 217.428 Q306.177 213.863 306.177 206.757 Q306.177 199.627 304.349 196.086 Q302.543 192.521 298.909 192.521 M298.909 188.817 Q304.719 188.817 307.775 193.424 Q310.853 198.007 310.853 206.757 Q310.853 215.484 307.775 220.09 Q304.719 224.673 298.909 224.673 Q293.099 224.673 290.02 220.09 Q286.964 215.484 286.964 206.757 Q286.964 198.007 290.02 193.424 Q293.099 188.817 298.909 188.817 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip532)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1157.95 400.199,1045.09 400.786,941.614 401.372,957.652 401.958,962.466 402.545,870.75 403.131,786.448 403.718,707.987 404.304,638.168 404.891,575.475 405.477,515.739 406.063,462.816 406.65,416.483 407.236,373.448 407.823,338.36 408.409,303.843 408.995,335.085 409.582,360.073 410.168,331.757 410.755,307.868 411.341,286.181 411.927,269.141 412.514,253.194 413.1,242.371 413.687,231.347 414.273,223.982 414.86,219.895 415.446,274.847 416.032,348.494 416.619,340.879 417.205,356.511 417.792,372.954 418.378,389.201 418.964,387.271 419.551,403.777 420.137,421.535 420.724,424.073 421.31,428.045 421.896,446.175 422.483,463.77 423.069,479.625 423.656,483.589 424.242,499.271 424.829,503.957 425.415,510.111 426.001,516.919 426.588,522.812 427.174,539.213 427.761,563.286 428.347,586.332 428.933,593.148 429.52,614.369 430.106,634.542 430.693,647.623 431.279,653.679 431.865,666.093 432.452,678.333 433.038,690.701 433.625,704.013 434.211,721.838 434.798,733.788 435.384,746.226 435.97,759.52 436.557,767.54 437.143,775.442 437.73,783.469 438.316,795.744 438.902,807.832 439.489,819.191 440.075,830.372 440.662,840.858 441.248,851.228 441.835,865.202 442.421,878.557 443.007,888.657 443.594,897.863 444.18,910 444.767,916.163 445.353,928.176 445.939,934.028 446.526,939.945 447.112,945.785 447.699,960.024 448.285,970.877 448.871,976.008 449.458,1001.39 450.044,1008.37 450.631,1012.7 451.217,1022.04 451.804,1031.22 452.39,1039.52 452.976,1045.54 453.563,1051.37 454.149,1057.37 454.736,1062.98 455.322,1066.38 455.908,1069.69 456.495,1073.05 457.081,1078.53 457.668,1081.7 458.254,1087.22 458.84,1090.36 459.427,1097.6 460.013,1108.06 460.6,1112.18 461.186,1120.35 461.773,1126.52 462.359,1133.75 462.945,1137.59 463.532,1144.55 464.118,1147.59 464.705,1146.97 465.291,1148.42 465.877,1149.86 466.464,1154.84 467.05,1159.74 467.637,1160.96 468.223,1162.17 468.809,1165.24 469.396,1168.14 469.982,1170.91 470.569,1172 471.155,1173.12 471.742,1175.64 472.328,1176.76 472.914,1180.82 473.501,1184.54 474.087,1185.31 474.674,1186.33 475.26,1187.15 475.846,1189.54 476.433,1196.45 477.019,1198.58 477.606,1205.03 478.192,1208.26 478.778,1211.53 479.365,1213.16 479.951,1214.61 480.538,1214.55 481.124,1214.67 481.711,1215.93 482.297,1214.44 482.883,1218.09 483.47,1219.7 484.056,1219.52 484.643,1218.31 485.229,1218.37 485.815,1221.38 486.402,1222.83 486.988,1223.92 487.575,1226.78 488.161,1229.43 488.748,1231.83 489.334,1232.82 489.92,1235.31 490.507,1237.66 491.093,1235.73 491.68,1236.47 492.266,1233.18 492.852,1232.92 493.439,1231.07 494.025,1229.81 494.612,1229.58 495.198,1230.99 495.784,1231.26 496.371,1232.56 496.957,1232.34 497.544,1234.52 498.13,1236.94 498.717,1236.68 499.303,1236.12 499.889,1235.85 500.476,1238.69 501.062,1238.32 501.649,1243.36 502.235,1242.7 502.821,1243.2 503.408,1246.33 503.994,1243.91 504.581,1247.3 505.167,1246.32 505.753,1244.01 506.34,1244.65 506.926,1242.57 507.513,1243.31 508.099,1244.12 508.686,1243.73 509.272,1246.9 509.858,1248.72 510.445,1250.53 511.031,1249.61 511.618,1246.38 512.204,1247.18 512.79,1245.02 513.377,1244.22 513.963,1243.39 514.55,1240.2 515.136,1242.53 515.722,1243.27 516.309,1245.42 516.895,1245.89 517.482,1244.19 518.068,1243.56 518.655,1245.58 519.241,1244.9 519.827,1245.36 520.414,1244.75 521,1245.49 521.587,1244.71 522.173,1243.92 522.759,1243.33 523.346,1242.67 523.932,1243.35 524.519,1242.9 525.105,1244.74 525.691,1245.36 526.278,1247.49 526.864,1246.68 527.451,1247.24 528.037,1247.92 528.624,1248.45 529.21,1247.6 529.796,1249.64 530.383,1247.6 530.969,1249.54 531.556,1248.6 532.142,1249.15 532.728,1248.5 533.315,1247.6 533.901,1248.21 534.488,1246.36 535.074,1245.35 535.661,1243.33 536.247,1243.83 536.833,1243.14 537.42,1244.03 538.006,1242.28 538.593,1241.42 539.179,1242.35 539.765,1243.05 540.352,1243.57 540.938,1243.93 541.525,1244.37 542.111,1245.15 542.697,1245.85 543.284,1242.32 543.87,1238.95 544.457,1237.18 545.043,1236.87 545.63,1236.4 546.216,1234.73 546.802,1234.68 547.389,1235.65 547.975,1235.46 548.562,1236.52 549.148,1236.61 549.734,1237.78 550.321,1236.17 550.907,1235.82 551.494,1240.67 552.08,1242.96 552.666,1239.66 553.253,1236.79 553.839,1236.34 554.426,1236.21 555.012,1238.56 555.599,1237.82 556.185,1236.06 556.771,1234.66 557.358,1238.19 557.944,1236.52 558.531,1234.95 559.117,1234.99 559.703,1234.58 560.29,1235.76 560.876,1239.22 561.463,1237.18 562.049,1237.98 562.635,1239.89 563.222,1241.81 563.808,1241.12 564.395,1236.57 564.981,1238.95 565.568,1239.59 566.154,1241.35 566.74,1243.31 567.327,1243.8 567.913,1244.26 568.5,1241.99 569.086,1242.52 569.672,1243.25 570.259,1242.53 570.845,1240.55 571.432,1237.4 572.018,1237.07 572.605,1236.77 573.191,1235.14 573.777,1233.53 574.364,1235.57 574.95,1236.4 575.537,1235.65 576.123,1234.07 576.709,1236.35 577.296,1235.68 577.882,1236.59 578.469,1238.91 579.055,1238.35 579.641,1237.63 580.228,1238.55 580.814,1237.94 581.401,1238.79 581.987,1238.06 582.574,1236.15 583.16,1236.91 583.746,1238.99 584.333,1239.6 584.919,1238.76 585.506,1237.78 586.092,1234.25 586.678,1232.53 587.265,1229.6 587.851,1230.63 588.438,1231.6 589.024,1230.12 589.61,1228.36 590.197,1228.09 590.783,1229.08 591.37,1230.3 591.956,1227.58 592.543,1228.88 593.129,1231.06 593.715,1231.97 594.302,1233.22 594.888,1230.09 595.475,1227.39 596.061,1232.24 596.647,1234.65 597.234,1238.03 597.82,1233.44 598.407,1233.03 598.993,1231.42 599.579,1229.97 600.166,1231.06 600.752,1229.68 601.339,1231.88 601.925,1230.29 602.512,1228.84 603.098,1228.53 603.684,1228.35 604.271,1228.16 604.857,1229.31 605.444,1231.75 606.03,1232.55 606.616,1229.48 607.203,1230.58 607.789,1231.62 608.376,1235.16 608.962,1234.37 609.548,1232.62 610.135,1234.65 610.721,1231.71 611.308,1234.23 611.894,1234.82 612.481,1235.74 613.067,1235.12 613.653,1228.3 614.24,1228.03 614.826,1228.01 615.413,1227.47 615.999,1227.11 616.585,1230.69 617.172,1228.89 617.758,1225.01 618.345,1223.42 618.931,1224.82 619.518,1227.27 620.104,1227.26 620.69,1228.31 621.277,1228.16 621.863,1227.85 622.45,1228.63 623.036,1228.35 623.622,1228.1 624.209,1229.35 624.795,1230.36 625.382,1232.69 625.968,1229.67 626.554,1227.94 627.141,1227.56 627.727,1231.25 628.314,1226.84 628.9,1229.32 629.487,1231.58 630.073,1233.63 630.659,1231.98 631.246,1232.72 631.832,1232.48 632.419,1233.45 633.005,1233.13 633.591,1231.5 634.178,1227.21 634.764,1226.92 635.351,1226.71 635.937,1227.95 636.523,1223.78 637.11,1223.7 637.696,1225.05 638.283,1224.67 638.869,1224.66 639.456,1224.2 640.042,1226.61 640.628,1225.14 641.215,1224.96 641.801,1224.95 642.388,1224.58 642.974,1225.88 643.56,1224.05 644.147,1224.03 644.733,1223.96 645.32,1223.65 645.906,1226.23 646.492,1224.48 647.079,1225.86 647.665,1224.5 648.252,1224.37 648.838,1225.52 649.425,1224.15 650.011,1223.97 650.597,1222.58 651.184,1222.43 651.77,1222.47 652.357,1222.65 652.943,1223.94 653.529,1225.12 654.116,1224.89 654.702,1224.63 655.289,1227.13 655.875,1227.94 656.462,1226.54 657.048,1229.26 657.634,1227.46 658.221,1227.05 658.807,1225.53 659.394,1225.36 659.98,1224.81 660.566,1224.75 661.153,1224.6 661.739,1224.43 662.326,1224.38 662.912,1225.5 663.498,1226.49 664.085,1228.8 664.671,1229.74 665.258,1227.86 665.844,1223.63 666.431,1220.87 667.017,1221.02 667.603,1222.36 668.19,1222.17 668.776,1220.83 669.363,1224.99 669.949,1224.79 670.535,1223.22 671.122,1220.45 671.708,1220.46 672.295,1222.97 672.881,1220.18 673.467,1216.52 674.054,1221.88 674.64,1219.23 675.227,1219.33 675.813,1220.76 676.4,1220.88 676.986,1220.87 677.572,1221.94 678.159,1221.81 678.745,1219.51 679.332,1222.31 679.918,1226.22 680.504,1227.15 681.091,1226.64 681.677,1226.43 682.264,1227.28 682.85,1225.78 683.436,1224.13 684.023,1224.11 684.609,1224.05 685.196,1224.15 685.782,1222.69 686.369,1220.07 686.955,1217.62 687.541,1219.13 688.128,1220.33 688.714,1219.25 689.301,1217.78 689.887,1218.96 690.473,1219.16 691.06,1218.06 691.646,1222.01 692.233,1225.5 692.819,1226.55 693.405,1224.99 693.992,1224.69 694.578,1225.61 695.165,1222.78 695.751,1222.86 696.338,1222.69 696.924,1222.6 697.51,1221.15 698.097,1219.59 698.683,1217.16 699.27,1221.43 699.856,1221.1 700.442,1218.28 701.029,1218.42 701.615,1217.23 702.202,1217.19 702.788,1218.51 703.375,1219.77 703.961,1219.86 704.547,1218.35 705.134,1217.08 705.72,1221.1 706.307,1218.38 706.893,1217.4 707.479,1216.15 708.066,1213.64 708.652,1215.19 709.239,1217.95 709.825,1219.32 710.411,1221.81 710.998,1224.33 711.584,1223.1 712.171,1224.15 712.757,1225.36 713.344,1225 713.93,1223.15 714.516,1225.25 715.103,1224.85 715.689,1225.73 716.276,1225.52 716.862,1229.05 717.448,1229.56 718.035,1229.09 718.621,1227.22 719.208,1226.54 719.794,1228.59 720.38,1224.39 720.967,1224.2 721.553,1226.44 722.14,1226.05 722.726,1230.75 723.313,1230.14 723.899,1228.27 724.485,1226.39 725.072,1225.98 725.658,1227.02 726.245,1226.59 726.831,1225.88 727.417,1225.59 728.004,1225.59 728.59,1225.35 729.177,1223.62 729.763,1223.44 730.349,1221.86 730.936,1224.23 731.522,1223.76 732.109,1226.08 732.695,1225.69 733.282,1225.33 733.868,1224.75 734.454,1224.61 735.041,1222.84 735.627,1223.86 736.214,1220.93 736.8,1223.14 737.386,1224.28 737.973,1223.81 738.559,1221.13 739.146,1221.18 739.732,1219.79 740.318,1218.35 740.905,1218.48 741.491,1218.4 742.078,1218.59 742.664,1219.91 743.251,1219.81 743.837,1215.87 744.423,1218.62 745.01,1219.7 745.596,1219.68 746.183,1219.56 746.769,1220.84 747.355,1223.26 747.942,1225.46 748.528,1223.86 749.115,1223.67 749.701,1223.17 750.288,1224.02 750.874,1224.92 751.46,1227.21 752.047,1228 752.633,1227.37 753.22,1225.65 753.806,1222.7 754.392,1222.58 754.979,1222.41 755.565,1220.76 756.152,1215.46 756.738,1215.95 757.324,1214.81 757.911,1215.12 758.497,1211.45 759.084,1211.68 759.67,1209.42 760.257,1208.5 760.843,1206.57 761.429,1208.26 762.016,1207.61 762.602,1208.18 763.189,1208.59 763.775,1208.96 764.361,1210.93 764.948,1211.41 765.534,1210.37 766.121,1209.73 766.707,1206.28 767.293,1208.15 767.88,1208.99 768.466,1210.93 769.053,1210.03 769.639,1207.84 770.226,1208.59 770.812,1209.15 771.398,1207.17 771.985,1206.36 772.571,1206.81 773.158,1206.05 773.744,1208.06 774.33,1208.67 774.917,1209.04 775.503,1212.04 776.09,1212.35 776.676,1214.09 777.262,1213 777.849,1214.59 778.435,1213.36 779.022,1212.62 779.608,1212.93 780.195,1212.02 780.781,1213.39 781.367,1212.49 781.954,1210.24 782.54,1211.93 783.127,1212.52 783.713,1211.5 784.299,1211.77 784.886,1212.14 785.472,1213.63 786.059,1213.76 786.645,1213.05 787.232,1214.44 787.818,1215.95 788.404,1214.72 788.991,1216 789.577,1216.4 790.164,1219.04 790.75,1220.43 791.336,1219.15 791.923,1221.7 792.509,1221.52 793.096,1222.6 793.682,1222.33 794.268,1220.84 794.855,1220.85 795.441,1220.66 796.028,1220.48 796.614,1223.04 797.201,1220.19 797.787,1219.93 798.373,1218.76 798.96,1216.11 799.546,1218.6 800.133,1220.1 800.719,1218.65 801.305,1222.28 801.892,1223.31 802.478,1221.84 803.065,1220.29 803.651,1220.44 804.237,1219.14 804.824,1219.13 805.41,1220.31 805.997,1220.16 806.583,1219.89 807.17,1218.61 807.756,1218.62 808.342,1217.45 808.929,1220.1 809.515,1218.86 810.102,1222.69 810.688,1222.14 811.274,1220.56 811.861,1220.6 812.447,1218.89 813.034,1218.56 813.62,1217.13 814.206,1216.87 814.793,1219.63 815.379,1220.73 815.966,1220.48 816.552,1221.34 817.139,1222.33 817.725,1220.72 818.311,1221.93 818.898,1221.7 819.484,1223.96 820.071,1222.27 820.657,1225.74 821.243,1225.18 821.83,1222.22 822.416,1221.85 823.003,1220.18 823.589,1219.87 824.175,1219.91 824.762,1220.01 825.348,1221.11 825.935,1223.18 826.521,1224.11 827.108,1225.2 827.694,1224.73 828.28,1224.42 828.867,1222.66 829.453,1219.78 830.04,1219.36 830.626,1220.46 831.212,1221.49 831.799,1220.84 832.385,1219.39 832.972,1219.42 833.558,1218.25 834.145,1218.33 834.731,1218.11 835.317,1219.14 835.904,1219.05 836.49,1218.81 837.077,1216.31 837.663,1212.28 838.249,1212.48 838.836,1215.39 839.422,1212.94 840.009,1213.11 840.595,1213.08 841.181,1214.34 841.768,1214.54 842.354,1214.48 842.941,1213.06 843.527,1213.33 844.114,1212.26 844.7,1211.37 845.286,1212.04 845.873,1211.3 846.459,1212.73 847.046,1212.03 847.632,1213.6 848.218,1217.85 848.805,1220.12 849.391,1221.39 849.978,1222.33 850.564,1225.76 851.15,1226.34 851.737,1227.39 852.323,1224.22 852.91,1223.92 853.496,1224.88 854.083,1221.93 854.669,1220.41 855.255,1221.5 855.842,1219.76 856.428,1218.36 857.015,1216.95 857.601,1218.21 858.187,1216.78 858.774,1216.85 859.36,1217.83 859.947,1217.6 860.533,1217.3 861.119,1217.44 861.706,1218.7 862.292,1218.59 862.879,1218.7 863.465,1222.33 864.052,1224.55 864.638,1226.57 865.224,1226.05 865.811,1228.27 866.397,1224.12 866.984,1226.35 867.57,1224.47 868.156,1224.01 868.743,1219.93 869.329,1217.25 869.916,1217.19 870.502,1217.32 871.089,1217.28 871.675,1216.98 872.261,1215.73 872.848,1214.81 873.434,1216.18 874.021,1214.9 874.607,1214.99 875.193,1216.42 875.78,1216.52 876.366,1217.72 876.953,1216.15 877.539,1216.02 878.125,1214.78 878.712,1216.06 879.298,1216.02 879.885,1217.23 880.471,1218.64 881.058,1218.77 881.644,1220.19 882.23,1218.63 882.817,1218.77 883.403,1219.94 883.99,1218.4 884.576,1218.68 885.162,1217.32 885.749,1217.01 886.335,1218.19 886.922,1220.62 887.508,1220.33 888.094,1218.82 888.681,1221.52 889.267,1222.28 889.854,1225.66 890.44,1223.9 891.027,1222.41 891.613,1220.86 892.199,1220.59 892.786,1221.67 893.372,1222.54 893.959,1220.89 894.545,1220.56 895.131,1222.74 895.718,1224.83 896.304,1221.76 896.891,1218.85 897.477,1222.42 898.063,1220.6 898.65,1220.36 899.236,1222.84 899.823,1218.48 900.409,1219.49 900.996,1220.59 901.582,1220.16 902.168,1218.86 902.755,1215.91 903.341,1212.05 903.928,1209.55 904.514,1208.59 905.1,1207.63 905.687,1205.29 906.273,1208.41 906.86,1208.49 907.446,1211.62 908.032,1213.26 908.619,1213.52 909.205,1213.88 909.792,1213.99 910.378,1215.64 910.965,1214.38 911.551,1214.24 912.137,1215.26 912.724,1215.24 913.31,1216.6 913.897,1217.86 914.483,1216.36 915.069,1215.3 915.656,1215.3 916.242,1215.44 916.829,1218.22 917.415,1218.2 918.002,1220.43 918.588,1217.47 919.174,1213.64 919.761,1215.23 920.347,1217.64 920.934,1216.12 921.52,1212.28 922.106,1212.69 922.693,1211.81 923.279,1211.85 923.866,1214.59 924.452,1214.72 925.038,1215.02 925.625,1213.68 926.211,1215.17 926.798,1215.34 927.384,1216.74 927.971,1215.62 928.557,1219.56 929.143,1218.11 929.73,1219.55 930.316,1219.11 930.903,1220.49 931.489,1220.22 932.075,1217.33 932.662,1216.01 933.248,1213.27 933.835,1210.79 934.421,1211.12 935.007,1212.75 935.594,1215.24 936.18,1215.35 936.767,1215.42 937.353,1216.64 937.94,1214.1 938.526,1215.67 939.112,1216.75 939.699,1216.67 940.285,1217.98 940.872,1217.77 941.458,1217.22 942.044,1216.08 942.631,1216.17 943.217,1214.91 943.804,1214.78 944.39,1215.84 944.976,1215.88 945.563,1219.55 946.149,1216.68 946.736,1218.32 947.322,1216.85 947.909,1214.4 948.495,1215.87 949.081,1215.87 949.668,1215.68 950.254,1215.84 950.841,1220.64 951.427,1223.25 952.013,1222.71 952.6,1223.08 953.186,1225.18 953.773,1223.39 954.359,1221.76 954.945,1224.08 955.532,1226.31 956.118,1222.04 956.705,1220.41 957.291,1221.43 957.878,1219.66 958.464,1217.01 959.05,1217.09 959.637,1215.64 960.223,1214.35 960.81,1214.41 961.396,1214.81 961.982,1212.6 962.569,1215.02 963.155,1216.4 963.742,1216.23 964.328,1216.17 964.915,1216.03 965.501,1217.17 966.087,1214.84 966.674,1212.56 967.26,1212.54 967.847,1212.75 968.433,1210.45 969.019,1213.65 969.606,1213.82 970.192,1212.6 970.779,1210.11 971.365,1212.63 971.951,1212.63 972.538,1211.49 973.124,1211.69 973.711,1210.5 974.297,1209.32 974.884,1206.05 975.47,1207.73 976.056,1208.23 976.643,1209.89 977.229,1210.12 977.816,1215.49 978.402,1216.98 978.988,1215.57 979.575,1211.82 980.161,1214.72 980.748,1216.13 981.334,1215.05 981.92,1215.34 982.507,1214.16 983.093,1210.35 983.68,1212.2 984.266,1212.26 984.853,1215.11 985.439,1216.39 986.025,1216.42 986.612,1215.02 987.198,1215.42 987.785,1213.92 988.371,1214.15 988.957,1212.87 989.544,1214.42 990.13,1214.44 990.717,1215.68 991.303,1213.21 991.889,1214.53 992.476,1213.29 993.062,1213.43 993.649,1210.8 994.235,1212.29 994.822,1213.76 995.408,1213.98 995.994,1216.73 996.581,1216.36 997.167,1214.8 997.754,1214.73 998.34,1216.05 998.926,1218.52 999.513,1218.3 1000.1,1215.32 1000.69,1212.84 1001.27,1212.89 1001.86,1211.92 1002.44,1212.15 1003.03,1212.47 1003.62,1212.65 1004.2,1212.45 1004.79,1211.38 1005.38,1212.82 1005.96,1213.05 1006.55,1214.4 1007.14,1214.05 1007.72,1215.5 1008.31,1216.86 1008.9,1215.55 1009.48,1216.94 1010.07,1215.83 1010.65,1215.95 1011.24,1219.94 1011.83,1217.09 1012.41,1218.44 1013,1218.47 1013.59,1218.33 1014.17,1218.19 1014.76,1216.68 1015.35,1217.68 1015.93,1217.58 1016.52,1218.97 1017.11,1220.32 1017.69,1220.14 1018.28,1217.42 1018.86,1218.66 1019.45,1217.37 1020.04,1218.62 1020.62,1217.51 1021.21,1218.82 1021.8,1217.16 1022.38,1215.49 1022.97,1216.56 1023.56,1216.27 1024.14,1216.47 1024.73,1217.91 1025.32,1217.65 1025.9,1218.75 1026.49,1218.44 1027.07,1218.44 1027.66,1217.03 1028.25,1217.11 1028.83,1217.01 1029.42,1216.68 1030.01,1216.78 1030.59,1215.66 1031.18,1218.02 1031.77,1216.73 1032.35,1217.7 1032.94,1217.74 1033.52,1217.46 1034.11,1217.19 1034.7,1214.67 1035.28,1216.08 1035.87,1216.06 1036.46,1216.11 1037.04,1216.15 1037.63,1216.05 1038.22,1214.59 1038.8,1214.69 1039.39,1214.87 1039.98,1216.22 1040.56,1214.87 1041.15,1212.16 1041.73,1212.03 1042.32,1214.94 1042.91,1213.57 1043.49,1212.36 1044.08,1211.13 1044.67,1207.54 1045.25,1206.89 1045.84,1206.17 1046.43,1206.4 1047.01,1205.59 1047.6,1206.08 1048.19,1206.7 1048.77,1208.45 1049.36,1208.9 1049.94,1211.92 1050.53,1211.97 1051.12,1212.28 1051.7,1209.93 1052.29,1206.37 1052.88,1206.66 1053.46,1205.84 1054.05,1204.76 1054.64,1206.63 1055.22,1209.79 1055.81,1210.16 1056.39,1214.35 1056.98,1212.84 1057.57,1213.16 1058.15,1214.42 1058.74,1218.12 1059.33,1216.84 1059.91,1218.18 1060.5,1217.04 1061.09,1216.1 1061.67,1214.71 1062.26,1216.19 1062.85,1218.5 1063.43,1215.57 1064.02,1214.42 1064.6,1215.71 1065.19,1215.76 1065.78,1218.22 1066.36,1219.34 1066.95,1217.77 1067.54,1216.41 1068.12,1213.66 1068.71,1213.68 1069.3,1213.98 1069.88,1212.78 1070.47,1214.05 1071.06,1212.74 1071.64,1211.64 1072.23,1211.87 1072.81,1212.25 1073.4,1209.99 1073.99,1210.23 1074.57,1210.13 1075.16,1210.54 1075.75,1208.57 1076.33,1210.22 1076.92,1209.25 1077.51,1209.64 1078.09,1211.34 1078.68,1213.08 1079.26,1209.41 1079.85,1211.07 1080.44,1211.57 1081.02,1213.12 1081.61,1212.1 1082.2,1212.35 1082.78,1213.74 1083.37,1213.83 1083.96,1213.05 1084.54,1214.72 1085.13,1214.44 1085.72,1214.73 1086.3,1214.63 1086.89,1215.83 1087.47,1218.46 1088.06,1219.7 1088.65,1219.59 1089.23,1219.38 1089.82,1216.5 1090.41,1216.41 1090.99,1218.85 1091.58,1218.91 1092.17,1218.45 1092.75,1218.35 1093.34,1221.93 1093.93,1221.65 1094.51,1227.57 1095.1,1226.77 1095.68,1222.2 1096.27,1221.93 1096.86,1220.49 1097.44,1218.72 1098.03,1219.71 1098.62,1220.8 1099.2,1220.37 1099.79,1220.07 1100.38,1219.83 1100.96,1219.46 1101.55,1216.57 1102.14,1216.29 1102.72,1216.29 1103.31,1216.31 1103.89,1217.68 1104.48,1218.72 1105.07,1220.08 1105.65,1218.48 1106.24,1219.5 1106.83,1216.53 1107.41,1213.88 1108,1215.18 1108.59,1215.25 1109.17,1215.08 1109.76,1215.17 1110.34,1215.34 1110.93,1214.27 1111.52,1213.36 1112.1,1211.07 1112.69,1213.88 1113.28,1213.06 1113.86,1213.15 1114.45,1211.87 1115.04,1211.9 1115.62,1213.5 1116.21,1214.6 1116.8,1217.16 1117.38,1218.63 1117.97,1218.31 1118.55,1219.24 1119.14,1221.34 1119.73,1221.08 1120.31,1220.56 1120.9,1219.98 1121.49,1219.68 1122.07,1220.77 1122.66,1218.1 1123.25,1217.84 1123.83,1217.78 1124.42,1219.06 1125.01,1217.7 1125.59,1212.52 1126.18,1212.61 1126.76,1212.63 1127.35,1210.55 1127.94,1212.13 1128.52,1212.26 1129.11,1212.32 1129.7,1211.43 1130.28,1212.7 1130.87,1213.06 1131.46,1214.69 1132.04,1216.05 1132.63,1214.88 1133.21,1214.88 1133.8,1214.68 1134.39,1214.97 1134.97,1214.96 1135.56,1212.37 1136.15,1216.32 1136.73,1215.13 1137.32,1211.52 1137.91,1211.94 1138.49,1215.82 1139.08,1217.09 1139.67,1215.67 1140.25,1214.51 1140.84,1218.35 1141.42,1219.41 1142.01,1219.31 1142.6,1219.05 1143.18,1218.83 1143.77,1217.05 1144.36,1218.28 1144.94,1213.28 1145.53,1213.27 1146.12,1213.43 1146.7,1214.96 1147.29,1215.04 1147.88,1216.34 1148.46,1216.44 1149.05,1216.34 1149.63,1218.93 1150.22,1217.54 1150.81,1217.38 1151.39,1215.66 1151.98,1215.58 1152.57,1216.6 1153.15,1215.04 1153.74,1215.14 1154.33,1212.67 1154.91,1216.47 1155.5,1216.59 1156.09,1219 1156.67,1221.27 1157.26,1222.11 1157.84,1221.83 1158.43,1220.28 1159.02,1221.31 1159.6,1220.76 1160.19,1220.52 1160.78,1217.72 1161.36,1216.25 1161.95,1216.26 1162.54,1216.32 1163.12,1216.13 1163.71,1214.64 1164.29,1214.64 1164.88,1214.7 1165.47,1213.19 1166.05,1215.81 1166.64,1215.36 1167.23,1215.25 1167.81,1214 1168.4,1212.71 1168.99,1210.3 1169.57,1207.75 1170.16,1214.34 1170.75,1214.26 1171.33,1214.23 1171.92,1212.82 1172.5,1211.58 1173.09,1210.68 1173.68,1209.65 1174.26,1212.55 1174.85,1212.37 1175.44,1212.56 1176.02,1210.16 1176.61,1211.6 1177.2,1209.54 1177.78,1211.03 1178.37,1212.47 1178.96,1211.13 1179.54,1211.23 1180.13,1210.25 1180.71,1210.68 1181.3,1213.25 1181.89,1212.2 1182.47,1207.44 1183.06,1209.05 1183.65,1210.56 1184.23,1212.03 1184.82,1209.22 1185.41,1209.51 1185.99,1209.9 1186.58,1210.33 1187.16,1210.61 1187.75,1212.04 1188.34,1210.88 1188.92,1207.12 1189.51,1210.1 1190.1,1209.06 1190.68,1209.49 1191.27,1213.84 1191.86,1216.28 1192.44,1215.27 1193.03,1215.47 1193.62,1214.21 1194.2,1214.41 1194.79,1211.93 1195.37,1214.28 1195.96,1216.82 1196.55,1216.7 1197.13,1216.61 1197.72,1218.03 1198.31,1219.16 1198.89,1215.26 1199.48,1216.46 1200.07,1216.62 1200.65,1216.71 1201.24,1215.39 1201.83,1215.37 1202.41,1214.21 1203,1216.59 1203.58,1216.46 1204.17,1221.7 1204.76,1218.98 1205.34,1217.68 1205.93,1216.35 1206.52,1216.17 1207.1,1215.96 1207.69,1217.05 1208.28,1221.88 1208.86,1221.43 1209.45,1222.51 1210.03,1220.64 1210.62,1219.32 1211.21,1220.31 1211.79,1222.41 1212.38,1222.14 1212.97,1219.15 1213.55,1220.27 1214.14,1214.97 1214.73,1216.09 1215.31,1217.23 1215.9,1218.57 1216.49,1219.72 1217.07,1214.58 1217.66,1215.86 1218.24,1218.13 1218.83,1219.25 1219.42,1218.65 1220,1217.52 1220.59,1217.49 1221.18,1218.61 1221.76,1218.4 1222.35,1218.33 1222.94,1215.22 1223.52,1215.27 1224.11,1216.54 1224.7,1218.07 1225.28,1214.11 1225.87,1214.02 1226.45,1217.97 1227.04,1219.24 1227.63,1216.48 1228.21,1217.53 1228.8,1218.85 1229.39,1217.44 1229.97,1217.02 1230.56,1215.61 1231.15,1216.52 1231.73,1217.65 1232.32,1218.68 1232.91,1218.25 1233.49,1219.41 1234.08,1219.27 1234.66,1217.8 1235.25,1217.92 1235.84,1216.41 1236.42,1211.35 1237.01,1214.18 1237.6,1214.2 1238.18,1216.53 1238.77,1216.65 1239.36,1219.27 1239.94,1218.94 1240.53,1214.94 1241.11,1213.76 1241.7,1213.86 1242.29,1211.28 1242.87,1210.08 1243.46,1207.59 1244.05,1210.61 1244.63,1210.74 1245.22,1211.18 1245.81,1212.85 1246.39,1213.11 1246.98,1214.47 1247.57,1214.59 1248.15,1214.75 1248.74,1214.63 1249.32,1213.43 1249.91,1215.05 1250.5,1213.79 1251.08,1209.98 1251.67,1209.23 1252.26,1211.84 1252.84,1210.65 1253.43,1210.79 1254.02,1211.27 1254.6,1207.69 1255.19,1205.46 1255.78,1206.98 1256.36,1211.03 1256.95,1208.88 1257.53,1208.12 1258.12,1207.34 1258.71,1207.85 1259.29,1208.09 1259.88,1205.85 1260.47,1207.79 1261.05,1207 1261.64,1207.53 1262.23,1207.74 1262.81,1204 1263.4,1204.49 1263.98,1206.2 1264.57,1207.97 1265.16,1208.24 1265.74,1208.53 1266.33,1208.94 1266.92,1207.92 1267.5,1210.83 1268.09,1211.34 1268.68,1212.64 1269.26,1214.23 1269.85,1215.82 1270.44,1215.72 1271.02,1215.74 1271.61,1215.89 1272.19,1218.32 1272.78,1218.36 1273.37,1216.8 1273.95,1218.03 1274.54,1219.34 1275.13,1216.73 1275.71,1216.66 1276.3,1216.84 1276.89,1215.6 1277.47,1214.48 1278.06,1215.65 1278.65,1216.77 1279.23,1214.47 1279.82,1215.97 1280.4,1215.72 1280.99,1216.82 1281.58,1216.58 1282.16,1215.17 1282.75,1216.48 1283.34,1217.65 1283.92,1220.09 1284.51,1219.79 1285.1,1219.73 1285.68,1220.68 1286.27,1219.11 1286.86,1220.12 1287.44,1219.68 1288.03,1222.02 1288.61,1222.63 1289.2,1222.31 1289.79,1219.75 1290.37,1214.62 1290.96,1218.41 1291.55,1217 1292.13,1214.03 1292.72,1214.27 1293.31,1218.02 1293.89,1219.26 1294.48,1218.82 1295.06,1217.34 1295.65,1216.11 1296.24,1214.62 1296.82,1214.39 1297.41,1211.78 1298,1211.77 1298.58,1213.2 1299.17,1209.46 1299.76,1211.28 1300.34,1210.57 1300.93,1212.33 1301.52,1212.41 1302.1,1213.59 1302.69,1212.58 1303.27,1211.17 1303.86,1211.27 1304.45,1211.33 1305.03,1211.29 1305.62,1211.26 1306.21,1211.16 1306.79,1209.98 1307.38,1210.21 1307.97,1210.41 1308.55,1206.75 1309.14,1208.52 1309.73,1210.2 1310.31,1211.35 1310.9,1215.36 1311.48,1218.09 1312.07,1217.79 1312.66,1218.86 1313.24,1218.75 1313.83,1218.44 1314.42,1219.52 1315,1217.97 1315.59,1216.72 1316.18,1218.02 1316.76,1218.99 1317.35,1220.09 1317.93,1219.67 1318.52,1220.38 1319.11,1223.9 1319.69,1222.15 1320.28,1219.2 1320.87,1221.48 1321.45,1219.66 1322.04,1219.41 1322.63,1219.36 1323.21,1218.19 1323.8,1218.05 1324.39,1219.36 1324.97,1217.95 1325.56,1217.73 1326.14,1215.27 1326.73,1215.25 1327.32,1216.57 1327.9,1216.58 1328.49,1216.43 1329.08,1216.39 1329.66,1217.75 1330.25,1217.8 1330.84,1218.63 1331.42,1218.39 1332.01,1219.32 1332.6,1219.11 1333.18,1217.64 1333.77,1218.49 1334.35,1218.45 1334.94,1219.6 1335.53,1218.4 1336.11,1218.33 1336.7,1215.48 1337.29,1212.75 1337.87,1213.05 1338.46,1210.48 1339.05,1211.96 1339.63,1213.46 1340.22,1214.52 1340.8,1214.52 1341.39,1217.07 1341.98,1217 1342.56,1216.68 1343.15,1219.23 1343.74,1215.2 1344.32,1215.05 1344.91,1216.29 1345.5,1214.97 1346.08,1215.01 1346.67,1214.84 1347.26,1218.65 1347.84,1218.41 1348.43,1218.39 1349.01,1215.68 1349.6,1215.47 1350.19,1214.01 1350.77,1212.91 1351.36,1211.63 1351.95,1210.49 1352.53,1212.13 1353.12,1211.97 1353.71,1212.25 1354.29,1212.05 1354.88,1212.24 1355.47,1208.71 1356.05,1209.11 1356.64,1210.67 1357.22,1210.91 1357.81,1211.13 1358.4,1215.29 1358.98,1214.28 1359.57,1215.68 1360.16,1217.27 1360.74,1218.12 1361.33,1217.89 1361.92,1219.21 1362.5,1217.59 1363.09,1217.31 1363.68,1219.75 1364.26,1219.6 1364.85,1222.05 1365.43,1221.8 1366.02,1221.59 1366.61,1219.87 1367.19,1218.29 1367.78,1219.42 1368.37,1217.94 1368.95,1217.59 1369.54,1214.94 1370.13,1213.47 1370.71,1210.44 1371.3,1211.97 1371.88,1211.07 1372.47,1211.34 1373.06,1211.3 1373.64,1208.77 1374.23,1209.12 1374.82,1211.12 1375.4,1209.97 1375.99,1210.55 1376.58,1210.86 1377.16,1209.82 1377.75,1209.03 1378.34,1209.27 1378.92,1210.9 1379.51,1209.52 1380.09,1207.18 1380.68,1206.34 1381.27,1208.27 1381.85,1209.73 1382.44,1211.22 1383.03,1211.05 1383.61,1211.24 1384.2,1210.01 1384.79,1207.62 1385.37,1205.32 1385.96,1205.7 1386.55,1206.02 1387.13,1209.19 1387.72,1211.93 1388.3,1212.21 1388.89,1213.43 1389.48,1214.72 1390.06,1213.44 1390.65,1214.95 1391.24,1215.04 1391.82,1211.38 1392.41,1209.27 1393,1209.47 1393.58,1209.81 1394.17,1210.22 1394.75,1207.72 1395.34,1206.87 1395.93,1207.41 1396.51,1210.58 1397.1,1209.9 1397.69,1213.82 1398.27,1214.13 1398.86,1216.71 1399.45,1215.07 1400.03,1213.48 1400.62,1213.8 1401.21,1212.32 1401.79,1213.98 1402.38,1214.49 1402.96,1217.05 1403.55,1216.61 1404.14,1215.14 1404.72,1215.26 1405.31,1216.78 1405.9,1216.91 1406.48,1216.92 1407.07,1214.08 1407.66,1213.86 1408.24,1213.81 1408.83,1215.36 1409.42,1216.5 1410,1216.17 1410.59,1214.84 1411.17,1214.93 1411.76,1215.04 1412.35,1215.14 1412.93,1211.41 1413.52,1210.39 1414.11,1209.55 1414.69,1210.17 1415.28,1211.65 1415.87,1214.35 1416.45,1216.94 1417.04,1218.18 1417.63,1216.85 1418.21,1216.77 1418.8,1215.24 1419.38,1218.98 1419.97,1218.84 1420.56,1216.13 1421.14,1215.92 1421.73,1215.76 1422.32,1214.39 1422.9,1214.33 1423.49,1213.25 1424.08,1217.17 1424.66,1217.26 1425.25,1214.5 1425.83,1214.55 1426.42,1214.69 1427.01,1216.1 1427.59,1214.82 1428.18,1216.06 1428.77,1213.37 1429.35,1213.3 1429.94,1213.4 1430.53,1216.07 1431.11,1217.16 1431.7,1218.39 1432.29,1218.09 1432.87,1219.04 1433.46,1216.25 1434.04,1216.3 1434.63,1216.12 1435.22,1217.18 1435.8,1215.88 1436.39,1215.61 1436.98,1212.96 1437.56,1217.92 1438.15,1221.43 1438.74,1219.88 1439.32,1219.38 1439.91,1219.25 1440.5,1221.67 1441.08,1221.45 1441.67,1223.93 1442.25,1222.07 1442.84,1220.36 1443.43,1219.93 1444.01,1217.22 1444.6,1219.81 1445.19,1219.26 1445.77,1219.19 1446.36,1220.11 1446.95,1219.9 1447.53,1214.53 1448.12,1210.77 1448.7,1209.5 1449.29,1209.83 1449.88,1210.3 1450.46,1210.42 1451.05,1211.61 1451.64,1214.07 1452.22,1215.34 1452.81,1215.14 1453.4,1219.23 1453.98,1219 1454.57,1221.66 1455.16,1220.22 1455.74,1219.75 1456.33,1219.3 1456.91,1219.07 1457.5,1218.88 1458.09,1217.13 1458.67,1215.64 1459.26,1215.37 1459.85,1216.44 1460.43,1217.82 1461.02,1217.26 1461.61,1217.01 1462.19,1217.91 1462.78,1217.6 1463.37,1217.64 1463.95,1217.48 1464.54,1216.06 1465.12,1218.64 1465.71,1215.8 1466.3,1215.95 1466.88,1216.03 1467.47,1216.25 1468.06,1217.14 1468.64,1218.36 1469.23,1217.9 1469.82,1218.9 1470.4,1218.87 1470.99,1214.81 1471.57,1214.99 1472.16,1215.1 1472.75,1214.92 1473.33,1217.42 1473.92,1214.87 1474.51,1211.27 1475.09,1210.32 1475.68,1211.9 1476.27,1209.45 1476.85,1209.78 1477.44,1209.75 1478.03,1210.01 1478.61,1209.37 1479.2,1209.61 1479.78,1210.77 1480.37,1211.27 1480.96,1211.66 1481.54,1211.93 1482.13,1213.51 1482.72,1215.13 1483.3,1217.37 1483.89,1216.03 1484.48,1218.36 1485.06,1217.07 1485.65,1218.31 1486.24,1218.15 1486.82,1220.48 1487.41,1221.52 1487.99,1222.49 1488.58,1220.77 1489.17,1219.23 1489.75,1219.13 1490.34,1225.44 1490.93,1223.77 1491.51,1221.99 1492.1,1218.97 1492.69,1217.28 1493.27,1217.32 1493.86,1213.13 1494.45,1214.5 1495.03,1214.49 1495.62,1214.29 1496.2,1215.44 1496.79,1215.67 1497.38,1212.87 1497.96,1214.27 1498.55,1213.05 1499.14,1215.55 1499.72,1215.58 1500.31,1217.03 1500.9,1216.93 1501.48,1217.21 1502.07,1216.97 1502.65,1218.03 1503.24,1213.84 1503.83,1215.2 1504.41,1214.01 1505,1213.97 1505.59,1215.46 1506.17,1218.07 1506.76,1219.14 1507.35,1218.7 1507.93,1215.98 1508.52,1214.84 1509.11,1213.35 1509.69,1212.28 1510.28,1214.84 1510.86,1213.64 1511.45,1213.48 1512.04,1212.09 1512.62,1212.26 1513.21,1212.36 1513.8,1213.67 1514.38,1213.83 1514.97,1213.9 1515.56,1213.59 1516.14,1212.45 1516.73,1212.57 1517.32,1212.42 1517.9,1212.4 1518.49,1212.56 1519.07,1212.72 1519.66,1211.58 1520.25,1211.7 1520.83,1215.88 1521.42,1214.48 1522.01,1212.99 1522.59,1211.78 1523.18,1210.71 1523.77,1211.06 1524.35,1210.44 1524.94,1208.29 1525.52,1207.54 1526.11,1209.11 1526.7,1209.47 1527.28,1209.71 1527.87,1211.51 1528.46,1212.03 1529.04,1210.99 1529.63,1213.74 1530.22,1214.9 1530.8,1217.37 1531.39,1217.13 1531.98,1215.76 1532.56,1219.6 1533.15,1219.29 1533.73,1219.05 1534.32,1218.81 1534.91,1218.64 1535.49,1218.41 1536.08,1219.5 1536.67,1220.58 1537.25,1220.64 1537.84,1216.46 1538.43,1216.35 1539.01,1214.56 1539.6,1214.64 1540.19,1215.01 1540.77,1217.12 1541.36,1221.2 1541.94,1221.09 1542.53,1219.44 1543.12,1220.39 1543.7,1218.89 1544.29,1217.19 1544.88,1216.93 1545.46,1215.43 1546.05,1213.89 1546.64,1213.77 1547.22,1212.5 1547.81,1210.02 1548.4,1207.81 1548.98,1209.4 1549.57,1214.84 1550.15,1210.81 1550.74,1215.15 1551.33,1214.8 1551.91,1211.01 1552.5,1212.44 1553.09,1209.9 1553.67,1209.98 1554.26,1210.51 1554.85,1210.69 1555.43,1210.57 1556.02,1210.96 1556.6,1211.04 1557.19,1211.19 1557.78,1210.09 1558.36,1210.49 1558.95,1210.83 1559.54,1211.13 1560.12,1210.1 1560.71,1210.48 1561.3,1209.32 1561.88,1208.34 1562.47,1212.49 1563.06,1211.59 1563.64,1211.84 1564.23,1214.57 1564.81,1214.75 1565.4,1213.44 1565.99,1213.52 1566.57,1212.25 1567.16,1212.37 1567.75,1210.22 1568.33,1211.78 1568.92,1209.05 1569.51,1206.87 1570.09,1211.22 1570.68,1211.31 1571.27,1211.47 1571.85,1211.89 1572.44,1213.68 1573.02,1213.87 1573.61,1215.35 1574.2,1219.06 1574.78,1220.29 1575.37,1220.18 1575.96,1223.68 1576.54,1223.14 1577.13,1222.9 1577.72,1223.72 1578.3,1223.36 1578.89,1223.99 1579.47,1222.19 1580.06,1220.5 1580.65,1221.33 1581.23,1221.04 1581.82,1222.07 1582.41,1220.49 1582.99,1217.8 1583.58,1217.57 1584.17,1216.26 1584.75,1217.46 1585.34,1218.7 1585.93,1215.96 1586.51,1218.59 1587.1,1218.34 1587.68,1218.02 1588.27,1218.31 1588.86,1218.23 1589.44,1220.61 1590.03,1218.85 1590.62,1218.67 1591.2,1220.91 1591.79,1224.46 1592.38,1227.68 1592.96,1228.13 1593.55,1232.73 1594.14,1234.34 1594.72,1233.36 1595.31,1232.32 1595.89,1230.13 1596.48,1229.46 1597.07,1226.45 1597.65,1228.37 1598.24,1228.72 1598.83,1225.32 1599.41,1223.46 1600,1220.06 1600.59,1218.37 1601.17,1216.67 1601.76,1217.95 1602.34,1217.99 1602.93,1216.08 1603.52,1217.22 1604.1,1214.56 1604.69,1214.25 1605.28,1211.66 1605.86,1212.84 1606.45,1211.73 1607.04,1211.76 1607.62,1209.14 1608.21,1209.24 1608.8,1211.95 1609.38,1210.81 1609.97,1210.91 1610.55,1212.26 1611.14,1212.55 1611.73,1215.25 1612.31,1216.4 1612.9,1216.3 1613.49,1216.07 1614.07,1213.48 1614.66,1216.15 1615.25,1214.69 1615.83,1213.37 1616.42,1214.75 1617.01,1214.7 1617.59,1213.23 1618.18,1215.89 1618.76,1213.34 1619.35,1210.69 1619.94,1210.98 1620.52,1208.6 1621.11,1211.27 1621.7,1212.97 1622.28,1214.34 1622.87,1213.05 1623.46,1210.41 1624.04,1209.07 1624.63,1209.2 1625.22,1209.16 1625.8,1210.98 1626.39,1211.04 1626.97,1210.93 1627.56,1210.07 1628.15,1207.95 1628.73,1209.46 1629.32,1208.53 1629.91,1213.94 1630.49,1212.47 1631.08,1211.2 1631.67,1208.97 1632.25,1209.45 1632.84,1209.3 1633.42,1208.14 1634.01,1208.57 1634.6,1206.34 1635.18,1207.89 1635.77,1205.75 1636.36,1203.57 1636.94,1204.42 1637.53,1205.08 1638.12,1206.87 1638.7,1207.11 1639.29,1207.55 1639.88,1210.67 1640.46,1210.86 1641.05,1208.55 1641.63,1203.8 1642.22,1208.02 1642.81,1208.6 1643.39,1207.39 1643.98,1207.92 1644.57,1208.53 1645.15,1203.76 1645.74,1204.23 1646.33,1204.74 1646.91,1204.32 1647.5,1204.71 1648.09,1206.55 1648.67,1206.73 1649.26,1207.04 1649.84,1207.53 1650.43,1204.12 1651.02,1206.21 1651.6,1210.6 1652.19,1214.95 1652.78,1214.8 1653.36,1217.18 1653.95,1214.53 1654.54,1218.28 1655.12,1218.04 1655.71,1219.21 1656.29,1220.33 1656.88,1221.08 1657.47,1219.31 1658.05,1222.79 1658.64,1222.61 1659.23,1221.12 1659.81,1222.33 1660.4,1223.62 1660.99,1222 1661.57,1219.9 1662.16,1219.88 1662.75,1219.61 1663.33,1219.67 1663.92,1219.34 1664.5,1219.13 1665.09,1215.4 1665.68,1216.59 1666.26,1216.48 1666.85,1216.37 1667.44,1214.87 1668.02,1214.99 1668.61,1216.36 1669.2,1216.49 1669.78,1213.98 1670.37,1216.68 1670.96,1217.71 1671.54,1216.28 1672.13,1216.08 1672.71,1213.53 1673.3,1211.13 1673.89,1215.27 1674.47,1216.37 1675.06,1219.01 1675.65,1218.75 1676.23,1215.77 1676.82,1211.8 1677.41,1209.14 1677.99,1211.81 1678.58,1213.13 1679.17,1213.26 1679.75,1214.48 1680.34,1211.9 1680.92,1213.23 1681.51,1212.13 1682.1,1212.1 1682.68,1216.12 1683.27,1216.04 1683.86,1217.31 1684.44,1217.45 1685.03,1218.71 1685.62,1218.62 1686.2,1214.51 1686.79,1214.68 1687.37,1218.7 1687.96,1218.45 1688.55,1218.09 1689.13,1217.95 1689.72,1217.97 1690.31,1216.57 1690.89,1215.17 1691.48,1215.17 1692.07,1215.08 1692.65,1213.94 1693.24,1216.4 1693.83,1217.72 1694.41,1217.41 1695,1219.85 1695.58,1219.46 1696.17,1220.67 1696.76,1219.19 1697.34,1217.64 1697.93,1217.36 1698.52,1215.75 1699.1,1215.91 1699.69,1215.81 1700.28,1215.81 1700.86,1213.37 1701.45,1212.16 1702.04,1212.4 1702.62,1214.86 1703.21,1213.5 1703.79,1213.46 1704.38,1212.3 1704.97,1212.36 1705.55,1212.4 1706.14,1215.29 1706.73,1214.28 1707.31,1213.06 1707.9,1210.82 1708.49,1211.15 1709.07,1215.22 1709.66,1212.66 1710.24,1214.1 1710.83,1212.99 1711.42,1214.38 1712,1213.18 1712.59,1212.96 1713.18,1211.73 1713.76,1212.08 1714.35,1212.18 1714.94,1215.08 1715.52,1213.73 1716.11,1211.13 1716.7,1212.7 1717.28,1212.87 1717.87,1213.99 1718.45,1214.03 1719.04,1215.15 1719.63,1215.25 1720.21,1212.68 1720.8,1207.51 1721.39,1210.59 1721.97,1209.56 1722.56,1212.53 1723.15,1211.47 1723.73,1211.85 1724.32,1209.56 1724.91,1211.05 1725.49,1211.33 1726.08,1211.68 1726.66,1215.88 1727.25,1215.68 1727.84,1214.43 1728.42,1217.02 1729.01,1217 1729.6,1218.29 1730.18,1220.76 1730.77,1221.99 1731.36,1220.26 1731.94,1218.58 1732.53,1219.58 1733.11,1218 1733.7,1219.15 1734.29,1217.81 1734.87,1215.2 1735.46,1217.8 1736.05,1218.92 1736.63,1218.53 1737.22,1217.24 1737.81,1219.77 1738.39,1218.22 1738.98,1220.82 1739.57,1220.51 1740.15,1221.36 1740.74,1222.05 1741.32,1218.98 1741.91,1221.23 1742.5,1219.54 1743.08,1216.81 1743.67,1215.1 1744.26,1217.94 1744.84,1219.22 1745.43,1220.32 1746.02,1221.26 1746.6,1219.65 1747.19,1220.76 1747.78,1217.87 1748.36,1219.07 1748.95,1219.19 1749.53,1219.08 1750.12,1217.03 1750.71,1216.72 1751.29,1216.2 1751.88,1216.16 1752.47,1216.07 1753.05,1214.77 1753.64,1215.64 1754.23,1217.06 1754.81,1218.22 1755.4,1216.75 1755.99,1216.45 1756.57,1216.66 1757.16,1219.02 1757.74,1220.14 1758.33,1218.7 1758.92,1218.48 1759.5,1218.3 1760.09,1217.02 1760.68,1216.53 1761.26,1216.34 1761.85,1213.48 1762.44,1214.8 1763.02,1209.81 1763.61,1210.19 1764.19,1211.8 1764.78,1212.01 1765.37,1213.53 1765.95,1212.31 1766.54,1213.63 1767.13,1213.95 1767.71,1211.15 1768.3,1211.18 1768.89,1212.37 1769.47,1210.93 1770.06,1212.22 1770.65,1210.88 1771.23,1214.87 1771.82,1212.07 1772.4,1213.28 1772.99,1209.48 1773.58,1208.56 1774.16,1210.03 1774.75,1207.85 1775.34,1207.03 1775.92,1207.66 1776.51,1207.17 1777.1,1207.93 1777.68,1208.27 1778.27,1210.35 1778.86,1212 1779.44,1213.43 1780.03,1216.09 1780.61,1213.27 1781.2,1211.81 1781.79,1211.79 1782.37,1211.76 1782.96,1211.85 1783.55,1213.35 1784.13,1213.42 1784.72,1210.97 1785.31,1210.88 1785.89,1211.04 1786.48,1211.39 1787.06,1216.68 1787.65,1216.88 1788.24,1216.76 1788.82,1220.47 1789.41,1221.64 1790,1218.51 1790.58,1220.68 1791.17,1219.12 1791.76,1220.45 1792.34,1221.64 1792.93,1221.25 1793.52,1221.78 1794.1,1221.47 1794.69,1222.21 1795.27,1220.51 1795.86,1219.94 1796.45,1220.84 1797.03,1218.36 1797.62,1216.94 1798.21,1215.78 1798.79,1214.52 1799.38,1217.24 1799.97,1214.45 1800.55,1214.41 1801.14,1214.06 1801.73,1215.52 1802.31,1215.57 1802.9,1217.78 1803.48,1215.05 1804.07,1213.67 1804.66,1213.5 1805.24,1213.82 1805.83,1213.95 1806.42,1212.69 1807,1213.95 1807.59,1212.98 1808.18,1212.89 1808.76,1211.72 1809.35,1213.15 1809.94,1211.75 1810.52,1210.72 1811.11,1209.53 1811.69,1209.29 1812.28,1210.87 1812.87,1212.07 1813.45,1213.47 1814.04,1212.1 1814.63,1210.84 1815.21,1209.64 1815.8,1211.31 1816.39,1211.58 1816.97,1211.84 1817.56,1210.89 1818.14,1211.02 1818.73,1208.42 1819.32,1208.5 1819.9,1207.54 1820.49,1206.69 1821.08,1205.87 1821.66,1208.95 1822.25,1209.43 1822.84,1208.55 1823.42,1208.86 1824.01,1210.38 1824.6,1210.62 1825.18,1209.47 1825.77,1212.4 1826.35,1212.38 1826.94,1213.47 1827.53,1217.2 1828.11,1217.08 1828.7,1213.19 1829.29,1213.5 1829.87,1212.39 1830.46,1212.43 1831.05,1213.8 1831.63,1215.23 1832.22,1215.26 1832.81,1216.8 1833.39,1216.79 1833.98,1217.95 1834.56,1219.34 1835.15,1220.56 1835.74,1218.89 1836.32,1220.1 1836.91,1219.71 1837.5,1214.09 1838.08,1219.14 1838.67,1218.73 1839.26,1218.57 1839.84,1220.81 1840.43,1221.77 1841.01,1218.77 1841.6,1216.23 1842.19,1217.46 1842.77,1217.32 1843.36,1217.1 1843.95,1216.67 1844.53,1215.11 1845.12,1212.49 1845.71,1209.99 1846.29,1211.37 1846.88,1210.13 1847.47,1211.7 1848.05,1213.17 1848.64,1215.8 1849.22,1214.62 1849.81,1213.42 1850.4,1217.37 1850.98,1214.59 1851.57,1214.49 1852.16,1214.59 1852.74,1217.46 1853.33,1218.57 1853.92,1219.5 1854.5,1219.52 1855.09,1220.29 1855.68,1218.61 1856.26,1215.86 1856.85,1212.88 1857.43,1213.21 1858.02,1213.3 1858.61,1215.62 1859.19,1216.87 1859.78,1218.1 1860.37,1216.73 1860.95,1216.76 1861.54,1215.48 1862.13,1216.77 1862.71,1215.24 1863.3,1216.67 1863.88,1216.86 1864.47,1216.96 1865.06,1218.26 1865.64,1218.26 1866.23,1216.94 1866.82,1218.11 1867.4,1220.46 1867.99,1221.56 1868.58,1222.24 1869.16,1220.68 1869.75,1221.77 1870.34,1221.24 1870.92,1218.03 1871.51,1220.63 1872.09,1220.43 1872.68,1218.9 1873.27,1221.12 1873.85,1223.34 1874.44,1223.08 1875.03,1221.62 1875.61,1221.26 1876.2,1222.24 1876.79,1223.19 1877.37,1223.12 1877.96,1221.57 1878.55,1219.63 1879.13,1219.38 1879.72,1218.94 1880.3,1217.65 1880.89,1217.22 1881.48,1215.84 1882.06,1214.63 1882.65,1218.42 1883.24,1221.08 1883.82,1219.62 1884.41,1219.12 1885,1219 1885.58,1218.96 1886.17,1216.2 1886.76,1217.35 1887.34,1219.82 1887.93,1218.39 1888.51,1216.89 1889.1,1214.4 1889.69,1214.46 1890.27,1215.53 1890.86,1215.54 1891.45,1212.99 1892.03,1215.62 1892.62,1217.11 1893.21,1216.74 1893.79,1214.27 1894.38,1214.36 1894.96,1213.04 1895.55,1214.18 1896.14,1214.33 1896.72,1211.8 1897.31,1215.69 1897.9,1214.55 1898.48,1214.45 1899.07,1212.93 1899.66,1214.09 1900.24,1216.49 1900.83,1220.11 1901.42,1218.64 1902,1215.67 1902.59,1216.98 1903.17,1219.47 1903.76,1216.94 1904.35,1214.27 1904.93,1215.44 1905.52,1215.57 1906.11,1215.69 1906.69,1211.76 1907.28,1213.32 1907.87,1214.62 1908.45,1216.25 1909.04,1214.97 1909.63,1217.54 1910.21,1216.29 1910.8,1214.92 1911.38,1213.66 1911.97,1212.09 1912.56,1212.34 1913.14,1208.77 1913.73,1209.16 1914.32,1208.17 1914.9,1207.08 1915.49,1206.04 1916.08,1206.51 1916.66,1209.52 1917.25,1209.65 1917.83,1208.75 1918.42,1209.18 1919.01,1211.88 1919.59,1212.14 1920.18,1211.12 1920.77,1211.1 1921.35,1212.69 1921.94,1213.11 1922.53,1213.29 1923.11,1213.37 1923.7,1214.95 1924.29,1216.34 1924.87,1216.06 1925.46,1214.6 1926.04,1212.92 1926.63,1212.94 1927.22,1213.4 1927.8,1215.13 1928.39,1215.4 1928.98,1217.88 1929.56,1216.79 1930.15,1218.08 1930.74,1218.94 1931.32,1219.97 1931.91,1218.41 1932.5,1220.95 1933.08,1220.57 1933.67,1221.43 1934.25,1220.08 1934.84,1218.56 1935.43,1218.33 1936.01,1215.35 1936.6,1214 1937.19,1212.58 1937.77,1216.51 1938.36,1216.22 1938.95,1214.68 1939.53,1217.37 1940.12,1218.54 1940.71,1218.34 1941.29,1217.93 1941.88,1217.78 1942.46,1217.46 1943.05,1216.3 1943.64,1218.71 1944.22,1221.38 1944.81,1219.79 1945.4,1217.08 1945.98,1219.37 1946.57,1218.98 1947.16,1216.16 1947.74,1211.06 1948.33,1208.86 1948.91,1210.47 1949.5,1210.55 1950.09,1210.76 1950.67,1213.44 1951.26,1212.36 1951.85,1212.4 1952.43,1211.11 1953.02,1208.8 1953.61,1210.52 1954.19,1210.54 1954.78,1209.51 1955.37,1211.1 1955.95,1212.73 1956.54,1214.43 1957.12,1211.9 1957.71,1210.72 1958.3,1208.29 1958.88,1206.06 1959.47,1207.83 1960.06,1207.28 1960.64,1207.45 1961.23,1207.94 1961.82,1208.06 1962.4,1210.94 1962.99,1209.99 1963.58,1210.12 1964.16,1209.31 1964.75,1213.39 1965.33,1213.75 1965.92,1212.61 1966.51,1212.66 1967.09,1211.18 1967.68,1212.88 1968.27,1214.17 1968.85,1212.86 1969.44,1212.9 1970.03,1211.67 1970.61,1209.51 1971.2,1208.62 1971.78,1210.22 1972.37,1210.13 1972.96,1210.26 1973.54,1209.23 1974.13,1209.29 1974.72,1210.8 1975.3,1212.54 1975.89,1212.87 1976.48,1214.23 1977.06,1214.28 1977.65,1214.19 1978.24,1213.22 1978.82,1213.32 1979.41,1215.98 1979.99,1217.12 1980.58,1215.46 1981.17,1214.23 1981.75,1214.38 1982.34,1214.45 1982.93,1214.83 1983.51,1216.33 1984.1,1216.34 1984.69,1220.16 1985.27,1222.46 1985.86,1222.36 1986.45,1221.73 1987.03,1225.43 1987.62,1225.07 1988.2,1221.95 1988.79,1222.92 1989.38,1220.09 1989.96,1218.51 1990.55,1214.69 1991.14,1217.14 1991.72,1215.34 1992.31,1214.09 1992.9,1214.01 1993.48,1214.18 1994.07,1212.82 1994.65,1215.28 1995.24,1216.7 1995.83,1216.58 1996.41,1215.55 1997,1211.34 1997.59,1213.95 1998.17,1214.1 1998.76,1212.97 1999.35,1214.66 1999.93,1220.83 2000.52,1221.86 2001.11,1222.89 2001.69,1218.71 2002.28,1218.6 2002.86,1215.91 2003.45,1214.56 2004.04,1214.45 2004.62,1217.26 2005.21,1218.6 2005.8,1217.62 2006.38,1217.48 2006.97,1214.84 2007.56,1214.8 2008.14,1214.95 2008.73,1216.07 2009.32,1213.47 2009.9,1213.69 2010.49,1215.98 2011.07,1215.67 2011.66,1216.97 2012.25,1216.94 2012.83,1216.85 2013.42,1215.39 2014.01,1215.13 2014.59,1216.25 2015.18,1217.06 2015.77,1215.79 2016.35,1215.67 2016.94,1214.6 2017.53,1211.88 2018.11,1213.28 2018.7,1214.74 2019.28,1214.66 2019.87,1218.4 2020.46,1217.08 2021.04,1217.05 2021.63,1217.7 2022.22,1217.75 2022.8,1218.9 2023.39,1214.68 2023.98,1215.84 2024.56,1214.61 2025.15,1214.54 2025.73,1213.7 2026.32,1212.32 2026.91,1215.13 2027.49,1214.89 2028.08,1212.2 2028.67,1211.03 2029.25,1211.27 2029.84,1210.45 2030.43,1210.89 2031.01,1212.34 2031.6,1212.55 2032.19,1212.5 2032.77,1215.23 2033.36,1214.05 2033.94,1213.01 2034.53,1213 2035.12,1212.93 2035.7,1212.97 2036.29,1211.65 2036.88,1213.05 2037.46,1212.17 2038.05,1210.9 2038.64,1212.53 2039.22,1211.55 2039.81,1210.54 2040.4,1212.01 2040.98,1212.08 2041.57,1216.13 2042.15,1215.99 2042.74,1219.66 2043.33,1219.35 2043.91,1220.47 2044.5,1224.06 2045.09,1221.01 2045.67,1221.85 2046.26,1225.32 2046.85,1218.44 2047.43,1216.76 2048.02,1215.16 2048.6,1211.36 2049.19,1210.25 2049.78,1209.09 2050.36,1205.31 2050.95,1203.25 2051.54,1202.74 2052.12,1207.18 2052.71,1206.23 2053.3,1206.83 2053.88,1205.92 2054.47,1205.2 2055.06,1205.66 2055.64,1204.88 2056.23,1206.61 2056.81,1211.12 2057.4,1213.92 2057.99,1214.03 2058.57,1215.65 2059.16,1214.37 2059.75,1214.25 2060.33,1215.96 2060.92,1214.62 2061.51,1213.38 2062.09,1214.84 2062.68,1216.11 2063.27,1216.07 2063.85,1217.29 2064.44,1218.3 2065.02,1217.06 2065.61,1217.08 2066.2,1216.86 2066.78,1216.69 2067.37,1216.74 2067.96,1217.63 2068.54,1217.41 2069.13,1219.76 2069.72,1220.75 2070.3,1222.85 2070.89,1223.76 2071.48,1223.51 2072.06,1223.06 2072.65,1222.86 2073.23,1221.33 2073.82,1217.48 2074.41,1222.34 2074.99,1220.42 2075.58,1218.97 2076.17,1217.5 2076.75,1214.63 2077.34,1213.02 2077.93,1211.77 2078.51,1213.03 2079.1,1214.52 2079.68,1217.25 2080.27,1217.27 2080.86,1216.08 2081.44,1215.88 2082.03,1216 2082.62,1214.65 2083.2,1214.83 2083.79,1214.69 2084.38,1211.98 2084.96,1210.83 2085.55,1211.16 2086.14,1212.7 2086.72,1213.87 2087.31,1215.25 2087.89,1214.96 2088.48,1213.72 2089.07,1215.1 2089.65,1215.12 2090.24,1214.94 2090.83,1216.33 2091.41,1214.76 2092,1218.52 2092.59,1216.95 2093.17,1219.36 2093.76,1219.07 2094.35,1219.07 2094.93,1220.17 2095.52,1218.59 2096.1,1217.28 2096.69,1216.06 2097.28,1215.92 2097.86,1216.42 2098.45,1217.67 2099.04,1215.03 2099.62,1211.33 2100.21,1211.58 2100.8,1212.93 2101.38,1212.79 2101.97,1212.72 2102.55,1211.55 2103.14,1210.55 2103.73,1209.58 2104.31,1207.27 2104.9,1211.52 2105.49,1214.29 2106.07,1215.66 2106.66,1215.59 2107.25,1216.79 2107.83,1218.17 2108.42,1217.51 2109.01,1217.5 2109.59,1214.94 2110.18,1213.94 2110.76,1213.89 2111.35,1215.07 2111.94,1214.82 2112.52,1213.73 2113.11,1213.8 2113.7,1212.52 2114.28,1213.83 2114.87,1211.11 2115.46,1211 2116.04,1210.89 2116.63,1212.19 2117.22,1212.65 2117.8,1214.24 2118.39,1212.88 2118.97,1215.71 2119.56,1216.86 2120.15,1216.7 2120.73,1215.21 2121.32,1214 2121.91,1214.04 2122.49,1218.03 2123.08,1217.75 2123.67,1216.24 2124.25,1217.53 2124.84,1218.52 2125.42,1218.18 2126.01,1219.47 2126.6,1221.63 2127.18,1221.15 2127.77,1222.08 2128.36,1220.29 2128.94,1217.47 2129.53,1217.18 2130.12,1216.99 2130.7,1216.75 2131.29,1215.52 2131.88,1215.52 2132.46,1214.07 2133.05,1215.26 2133.63,1212.39 2134.22,1212.41 2134.81,1212.67 2135.39,1212.75 2135.98,1211.46 2136.57,1208.85 2137.15,1210.28 2137.74,1210.6 2138.33,1213.44 2138.91,1213.59 2139.5,1212.46 2140.09,1208.9 2140.67,1207.97 2141.26,1208.37 2141.84,1210.14 2142.43,1211.78 2143.02,1213.23 2143.6,1210.91 2144.19,1208.77 2144.78,1207.67 2145.36,1208.21 2145.95,1207.2 2146.54,1202.36 2147.12,1204.66 2147.71,1207.68 2148.3,1209.32 2148.88,1209.84 2149.47,1210.09 2150.05,1211.81 2150.64,1212.04 2151.23,1212.78 2151.81,1214.24 2152.4,1212.91 2152.99,1212.94 2153.57,1214.05 2154.16,1215.39 2154.75,1214.36 2155.33,1215.89 2155.92,1216.99 2156.5,1218.18 2157.09,1218.06 2157.68,1217.81 2158.26,1217.58 \"/>\n<path clip-path=\"url(#clip532)\" d=\"M986.025 1215.28 L986.612 1215.28 L987.198 1215.28 L987.785 1215.28 L988.371 1215.28 L988.957 1215.28 L989.544 1215.28 L990.13 1215.28 L990.717 1215.28 L991.303 1215.28 L991.889 1215.28 L992.476 1215.28 L993.062 1215.28 L993.649 1215.28 L994.235 1215.28 L994.822 1215.28 L995.408 1215.28 L995.994 1215.28 L996.581 1215.28 L997.167 1215.28 L997.754 1215.28 L998.34 1215.28 L998.926 1215.28 L999.513 1215.28 L1000.1 1215.28 L1000.69 1215.28 L1001.27 1215.28 L1001.86 1215.28 L1002.44 1215.28 L1003.03 1215.28 L1003.62 1215.28 L1004.2 1215.28 L1004.79 1215.28 L1005.38 1215.28 L1005.96 1215.28 L1006.55 1215.28 L1007.14 1215.28 L1007.72 1215.28 L1008.31 1215.28 L1008.9 1215.28 L1009.48 1215.28 L1010.07 1215.28 L1010.65 1215.28 L1011.24 1215.28 L1011.83 1215.28 L1012.41 1215.28 L1013 1215.28 L1013.59 1215.28 L1014.17 1215.28 L1014.76 1215.28 L1015.35 1215.28 L1015.93 1215.28 L1016.52 1215.28 L1017.11 1215.28 L1017.69 1215.28 L1018.28 1215.28 L1018.86 1215.28 L1019.45 1215.28 L1020.04 1215.28 L1020.62 1215.28 L1021.21 1215.28 L1021.8 1215.28 L1022.38 1215.28 L1022.97 1215.28 L1023.56 1215.28 L1024.14 1215.28 L1024.73 1215.28 L1025.32 1215.28 L1025.9 1215.28 L1026.49 1215.28 L1027.07 1215.28 L1027.66 1215.28 L1028.25 1215.28 L1028.83 1215.28 L1029.42 1215.28 L1030.01 1215.28 L1030.59 1215.28 L1031.18 1215.28 L1031.77 1215.28 L1032.35 1215.28 L1032.94 1215.28 L1033.52 1215.28 L1034.11 1215.28 L1034.7 1215.28 L1035.28 1215.28 L1035.87 1215.28 L1036.46 1215.28 L1037.04 1215.28 L1037.63 1215.28 L1038.22 1215.28 L1038.8 1215.28 L1039.39 1215.28 L1039.98 1215.28 L1040.56 1215.28 L1041.15 1215.28 L1041.73 1215.28 L1042.32 1215.28 L1042.91 1215.28 L1043.49 1215.28 L1044.08 1215.28 L1044.67 1215.28 L1045.25 1215.28 L1045.84 1215.28 L1046.43 1215.28 L1047.01 1215.28 L1047.6 1215.28 L1048.19 1215.28 L1048.77 1215.28 L1049.36 1215.28 L1049.94 1215.28 L1050.53 1215.28 L1051.12 1215.28 L1051.7 1215.28 L1052.29 1215.28 L1052.88 1215.28 L1053.46 1215.28 L1054.05 1215.28 L1054.64 1215.28 L1055.22 1215.28 L1055.81 1215.28 L1056.39 1215.28 L1056.98 1215.28 L1057.57 1215.28 L1058.15 1215.28 L1058.74 1215.28 L1059.33 1215.28 L1059.91 1215.28 L1060.5 1215.28 L1061.09 1215.28 L1061.67 1215.28 L1062.26 1215.28 L1062.85 1215.28 L1063.43 1215.28 L1064.02 1215.28 L1064.6 1215.28 L1065.19 1215.28 L1065.78 1215.28 L1066.36 1215.28 L1066.95 1215.28 L1067.54 1215.28 L1068.12 1215.28 L1068.71 1215.28 L1069.3 1215.28 L1069.88 1215.28 L1070.47 1215.28 L1071.06 1215.28 L1071.64 1215.28 L1072.23 1215.28 L1072.81 1215.28 L1073.4 1215.28 L1073.99 1215.28 L1074.57 1215.28 L1075.16 1215.28 L1075.75 1215.28 L1076.33 1215.28 L1076.92 1215.28 L1077.51 1215.28 L1078.09 1215.28 L1078.68 1215.28 L1079.26 1215.28 L1079.85 1215.28 L1080.44 1215.28 L1081.02 1215.28 L1081.61 1215.28 L1082.2 1215.28 L1082.78 1215.28 L1083.37 1215.28 L1083.96 1215.28 L1084.54 1215.28 L1085.13 1215.28 L1085.72 1215.28 L1086.3 1215.28 L1086.89 1215.28 L1087.47 1215.28 L1088.06 1215.28 L1088.65 1215.28 L1089.23 1215.28 L1089.82 1215.28 L1090.41 1215.28 L1090.99 1215.28 L1091.58 1215.28 L1092.17 1215.28 L1092.75 1215.28 L1093.34 1215.28 L1093.93 1215.28 L1094.51 1215.28 L1095.1 1215.28 L1095.68 1215.28 L1096.27 1215.28 L1096.86 1215.28 L1097.44 1215.28 L1098.03 1215.28 L1098.62 1215.28 L1099.2 1215.28 L1099.79 1215.28 L1100.38 1215.28 L1100.96 1215.28 L1101.55 1215.28 L1102.14 1215.28 L1102.72 1215.28 L1103.31 1215.28 L1103.89 1215.28 L1104.48 1215.28 L1105.07 1215.28 L1105.65 1215.28 L1106.24 1215.28 L1106.83 1215.28 L1107.41 1215.28 L1108 1215.28 L1108.59 1215.28 L1109.17 1215.28 L1109.76 1215.28 L1110.34 1215.28 L1110.93 1215.28 L1111.52 1215.28 L1112.1 1215.28 L1112.69 1215.28 L1113.28 1215.28 L1113.86 1215.28 L1114.45 1215.28 L1115.04 1215.28 L1115.62 1215.28 L1116.21 1215.28 L1116.8 1215.28 L1117.38 1215.28 L1117.97 1215.28 L1118.55 1215.28 L1119.14 1215.28 L1119.73 1215.28 L1120.31 1215.28 L1120.9 1215.28 L1121.49 1215.28 L1122.07 1215.28 L1122.66 1215.28 L1123.25 1215.28 L1123.83 1215.28 L1124.42 1215.28 L1125.01 1215.28 L1125.59 1215.28 L1126.18 1215.28 L1126.76 1215.28 L1127.35 1215.28 L1127.94 1215.28 L1128.52 1215.28 L1129.11 1215.28 L1129.7 1215.28 L1130.28 1215.28 L1130.87 1215.28 L1131.46 1215.28 L1132.04 1215.28 L1132.63 1215.28 L1133.21 1215.28 L1133.8 1215.28 L1134.39 1215.28 L1134.97 1215.28 L1135.56 1215.28 L1136.15 1215.28 L1136.73 1215.28 L1137.32 1215.28 L1137.91 1215.28 L1138.49 1215.28 L1139.08 1215.28 L1139.67 1215.28 L1140.25 1215.28 L1140.84 1215.28 L1141.42 1215.28 L1142.01 1215.28 L1142.6 1215.28 L1143.18 1215.28 L1143.77 1215.28 L1144.36 1215.28 L1144.94 1215.28 L1145.53 1215.28 L1146.12 1215.28 L1146.7 1215.28 L1147.29 1215.28 L1147.88 1215.28 L1148.46 1215.28 L1149.05 1215.28 L1149.63 1215.28 L1150.22 1215.28 L1150.81 1215.28 L1151.39 1215.28 L1151.98 1215.28 L1152.57 1215.28 L1153.15 1215.28 L1153.74 1215.28 L1154.33 1215.28 L1154.91 1215.28 L1155.5 1215.28 L1156.09 1215.28 L1156.67 1215.28 L1157.26 1215.28 L1157.84 1215.28 L1158.43 1215.28 L1159.02 1215.28 L1159.6 1215.28 L1160.19 1215.28 L1160.78 1215.28 L1161.36 1215.28 L1161.95 1215.28 L1162.54 1215.28 L1163.12 1215.28 L1163.71 1215.28 L1164.29 1215.28 L1164.88 1215.28 L1165.47 1215.28 L1166.05 1215.28 L1166.64 1215.28 L1167.23 1215.28 L1167.81 1215.28 L1168.4 1215.28 L1168.99 1215.28 L1169.57 1215.28 L1170.16 1215.28 L1170.75 1215.28 L1171.33 1215.28 L1171.92 1215.28 L1172.5 1215.28 L1173.09 1215.28 L1173.68 1215.28 L1174.26 1215.28 L1174.85 1215.28 L1175.44 1215.28 L1176.02 1215.28 L1176.61 1215.28 L1177.2 1215.28 L1177.78 1215.28 L1178.37 1215.28 L1178.96 1215.28 L1179.54 1215.28 L1180.13 1215.28 L1180.71 1215.28 L1181.3 1215.28 L1181.89 1215.28 L1182.47 1215.28 L1183.06 1215.28 L1183.65 1215.28 L1184.23 1215.28 L1184.82 1215.28 L1185.41 1215.28 L1185.99 1215.28 L1186.58 1215.28 L1187.16 1215.28 L1187.75 1215.28 L1188.34 1215.28 L1188.92 1215.28 L1189.51 1215.28 L1190.1 1215.28 L1190.68 1215.28 L1191.27 1215.28 L1191.86 1215.28 L1192.44 1215.28 L1193.03 1215.28 L1193.62 1215.28 L1194.2 1215.28 L1194.79 1215.28 L1195.37 1215.28 L1195.96 1215.28 L1196.55 1215.28 L1197.13 1215.28 L1197.72 1215.28 L1198.31 1215.28 L1198.89 1215.28 L1199.48 1215.28 L1200.07 1215.28 L1200.65 1215.28 L1201.24 1215.28 L1201.83 1215.28 L1202.41 1215.28 L1203 1215.28 L1203.58 1215.28 L1204.17 1215.28 L1204.76 1215.28 L1205.34 1215.28 L1205.93 1215.28 L1206.52 1215.28 L1207.1 1215.28 L1207.69 1215.28 L1208.28 1215.28 L1208.86 1215.28 L1209.45 1215.28 L1210.03 1215.28 L1210.62 1215.28 L1211.21 1215.28 L1211.79 1215.28 L1212.38 1215.28 L1212.97 1215.28 L1213.55 1215.28 L1214.14 1215.28 L1214.73 1215.28 L1215.31 1215.28 L1215.9 1215.28 L1216.49 1215.28 L1217.07 1215.28 L1217.66 1215.28 L1218.24 1215.28 L1218.83 1215.28 L1219.42 1215.28 L1220 1215.28 L1220.59 1215.28 L1221.18 1215.28 L1221.76 1215.28 L1222.35 1215.28 L1222.94 1215.28 L1223.52 1215.28 L1224.11 1215.28 L1224.7 1215.28 L1225.28 1215.28 L1225.87 1215.28 L1226.45 1215.28 L1227.04 1215.28 L1227.63 1215.28 L1228.21 1215.28 L1228.8 1215.28 L1229.39 1215.28 L1229.97 1215.28 L1230.56 1215.28 L1231.15 1215.28 L1231.73 1215.28 L1232.32 1215.28 L1232.91 1215.28 L1233.49 1215.28 L1234.08 1215.28 L1234.66 1215.28 L1235.25 1215.28 L1235.84 1215.28 L1236.42 1215.28 L1237.01 1215.28 L1237.6 1215.28 L1238.18 1215.28 L1238.77 1215.28 L1239.36 1215.28 L1239.94 1215.28 L1240.53 1215.28 L1241.11 1215.28 L1241.7 1215.28 L1242.29 1215.28 L1242.87 1215.28 L1243.46 1215.28 L1244.05 1215.28 L1244.63 1215.28 L1245.22 1215.28 L1245.81 1215.28 L1246.39 1215.28 L1246.98 1215.28 L1247.57 1215.28 L1248.15 1215.28 L1248.74 1215.28 L1249.32 1215.28 L1249.91 1215.28 L1250.5 1215.28 L1251.08 1215.28 L1251.67 1215.28 L1252.26 1215.28 L1252.84 1215.28 L1253.43 1215.28 L1254.02 1215.28 L1254.6 1215.28 L1255.19 1215.28 L1255.78 1215.28 L1256.36 1215.28 L1256.95 1215.28 L1257.53 1215.28 L1258.12 1215.28 L1258.71 1215.28 L1259.29 1215.28 L1259.88 1215.28 L1260.47 1215.28 L1261.05 1215.28 L1261.64 1215.28 L1262.23 1215.28 L1262.81 1215.28 L1263.4 1215.28 L1263.98 1215.28 L1264.57 1215.28 L1265.16 1215.28 L1265.74 1215.28 L1266.33 1215.28 L1266.92 1215.28 L1267.5 1215.28 L1268.09 1215.28 L1268.68 1215.28 L1269.26 1215.28 L1269.85 1215.28 L1270.44 1215.28 L1271.02 1215.28 L1271.61 1215.28 L1272.19 1215.28 L1272.78 1215.28 L1273.37 1215.28 L1273.95 1215.28 L1274.54 1215.28 L1275.13 1215.28 L1275.71 1215.28 L1276.3 1215.28 L1276.89 1215.28 L1277.47 1215.28 L1278.06 1215.28 L1278.65 1215.28 L1279.23 1215.28 L1279.82 1215.28 L1280.4 1215.28 L1280.99 1215.28 L1281.58 1215.28 L1282.16 1215.28 L1282.75 1215.28 L1283.34 1215.28 L1283.92 1215.28 L1284.51 1215.28 L1285.1 1215.28 L1285.68 1215.28 L1286.27 1215.28 L1286.86 1215.28 L1287.44 1215.28 L1288.03 1215.28 L1288.61 1215.28 L1289.2 1215.28 L1289.79 1215.28 L1290.37 1215.28 L1290.96 1215.28 L1291.55 1215.28 L1292.13 1215.28 L1292.72 1215.28 L1293.31 1215.28 L1293.89 1215.28 L1294.48 1215.28 L1295.06 1215.28 L1295.65 1215.28 L1296.24 1215.28 L1296.82 1215.28 L1297.41 1215.28 L1298 1215.28 L1298.58 1215.28 L1299.17 1215.28 L1299.76 1215.28 L1300.34 1215.28 L1300.93 1215.28 L1301.52 1215.28 L1302.1 1215.28 L1302.69 1215.28 L1303.27 1215.28 L1303.86 1215.28 L1304.45 1215.28 L1305.03 1215.28 L1305.62 1215.28 L1306.21 1215.28 L1306.79 1215.28 L1307.38 1215.28 L1307.97 1215.28 L1308.55 1215.28 L1309.14 1215.28 L1309.73 1215.28 L1310.31 1215.28 L1310.9 1215.28 L1311.48 1215.28 L1312.07 1215.28 L1312.66 1215.28 L1313.24 1215.28 L1313.83 1215.28 L1314.42 1215.28 L1315 1215.28 L1315.59 1215.28 L1316.18 1215.28 L1316.76 1215.28 L1317.35 1215.28 L1317.93 1215.28 L1318.52 1215.28 L1319.11 1215.28 L1319.69 1215.28 L1320.28 1215.28 L1320.87 1215.28 L1321.45 1215.28 L1322.04 1215.28 L1322.63 1215.28 L1323.21 1215.28 L1323.8 1215.28 L1324.39 1215.28 L1324.97 1215.28 L1325.56 1215.28 L1326.14 1215.28 L1326.73 1215.28 L1327.32 1215.28 L1327.9 1215.28 L1328.49 1215.28 L1329.08 1215.28 L1329.66 1215.28 L1330.25 1215.28 L1330.84 1215.28 L1331.42 1215.28 L1332.01 1215.28 L1332.6 1215.28 L1333.18 1215.28 L1333.77 1215.28 L1334.35 1215.28 L1334.94 1215.28 L1335.53 1215.28 L1336.11 1215.28 L1336.7 1215.28 L1337.29 1215.28 L1337.87 1215.28 L1338.46 1215.28 L1339.05 1215.28 L1339.63 1215.28 L1340.22 1215.28 L1340.8 1215.28 L1341.39 1215.28 L1341.98 1215.28 L1342.56 1215.28 L1343.15 1215.28 L1343.74 1215.28 L1344.32 1215.28 L1344.91 1215.28 L1345.5 1215.28 L1346.08 1215.28 L1346.67 1215.28 L1347.26 1215.28 L1347.84 1215.28 L1348.43 1215.28 L1349.01 1215.28 L1349.6 1215.28 L1350.19 1215.28 L1350.77 1215.28 L1351.36 1215.28 L1351.95 1215.28 L1352.53 1215.28 L1353.12 1215.28 L1353.71 1215.28 L1354.29 1215.28 L1354.88 1215.28 L1355.47 1215.28 L1356.05 1215.28 L1356.64 1215.28 L1357.22 1215.28 L1357.81 1215.28 L1358.4 1215.28 L1358.98 1215.28 L1359.57 1215.28 L1360.16 1215.28 L1360.74 1215.28 L1361.33 1215.28 L1361.92 1215.28 L1362.5 1215.28 L1363.09 1215.28 L1363.68 1215.28 L1364.26 1215.28 L1364.85 1215.28 L1365.43 1215.28 L1366.02 1215.28 L1366.61 1215.28 L1367.19 1215.28 L1367.78 1215.28 L1368.37 1215.28 L1368.95 1215.28 L1369.54 1215.28 L1370.13 1215.28 L1370.71 1215.28 L1371.3 1215.28 L1371.88 1215.28 L1372.47 1215.28 L1373.06 1215.28 L1373.64 1215.28 L1374.23 1215.28 L1374.82 1215.28 L1375.4 1215.28 L1375.99 1215.28 L1376.58 1215.28 L1377.16 1215.28 L1377.75 1215.28 L1378.34 1215.28 L1378.92 1215.28 L1379.51 1215.28 L1380.09 1215.28 L1380.68 1215.28 L1381.27 1215.28 L1381.85 1215.28 L1382.44 1215.28 L1383.03 1215.28 L1383.61 1215.28 L1384.2 1215.28 L1384.79 1215.28 L1385.37 1215.28 L1385.96 1215.28 L1386.55 1215.28 L1387.13 1215.28 L1387.72 1215.28 L1388.3 1215.28 L1388.89 1215.28 L1389.48 1215.28 L1390.06 1215.28 L1390.65 1215.28 L1391.24 1215.28 L1391.82 1215.28 L1392.41 1215.28 L1393 1215.28 L1393.58 1215.28 L1394.17 1215.28 L1394.75 1215.28 L1395.34 1215.28 L1395.93 1215.28 L1396.51 1215.28 L1397.1 1215.28 L1397.69 1215.28 L1398.27 1215.28 L1398.86 1215.28 L1399.45 1215.28 L1400.03 1215.28 L1400.62 1215.28 L1401.21 1215.28 L1401.79 1215.28 L1402.38 1215.28 L1402.96 1215.28 L1403.55 1215.28 L1404.14 1215.28 L1404.72 1215.28 L1405.31 1215.28 L1405.9 1215.28 L1406.48 1215.28 L1407.07 1215.28 L1407.66 1215.28 L1408.24 1215.28 L1408.83 1215.28 L1409.42 1215.28 L1410 1215.28 L1410.59 1215.28 L1411.17 1215.28 L1411.76 1215.28 L1412.35 1215.28 L1412.93 1215.28 L1413.52 1215.28 L1414.11 1215.28 L1414.69 1215.28 L1415.28 1215.28 L1415.87 1215.28 L1416.45 1215.28 L1417.04 1215.28 L1417.63 1215.28 L1418.21 1215.28 L1418.8 1215.28 L1419.38 1215.28 L1419.97 1215.28 L1420.56 1215.28 L1421.14 1215.28 L1421.73 1215.28 L1422.32 1215.28 L1422.9 1215.28 L1423.49 1215.28 L1424.08 1215.28 L1424.66 1215.28 L1425.25 1215.28 L1425.83 1215.28 L1426.42 1215.28 L1427.01 1215.28 L1427.59 1215.28 L1428.18 1215.28 L1428.77 1215.28 L1429.35 1215.28 L1429.94 1215.28 L1430.53 1215.28 L1431.11 1215.28 L1431.7 1215.28 L1432.29 1215.28 L1432.87 1215.28 L1433.46 1215.28 L1434.04 1215.28 L1434.63 1215.28 L1435.22 1215.28 L1435.8 1215.28 L1436.39 1215.28 L1436.98 1215.28 L1437.56 1215.28 L1438.15 1215.28 L1438.74 1215.28 L1439.32 1215.28 L1439.91 1215.28 L1440.5 1215.28 L1441.08 1215.28 L1441.67 1215.28 L1442.25 1215.28 L1442.84 1215.28 L1443.43 1215.28 L1444.01 1215.28 L1444.6 1215.28 L1445.19 1215.28 L1445.77 1215.28 L1446.36 1215.28 L1446.95 1215.28 L1447.53 1215.28 L1448.12 1215.28 L1448.7 1215.28 L1449.29 1215.28 L1449.88 1215.28 L1450.46 1215.28 L1451.05 1215.28 L1451.64 1215.28 L1452.22 1215.28 L1452.81 1215.28 L1453.4 1215.28 L1453.98 1215.28 L1454.57 1215.28 L1455.16 1215.28 L1455.74 1215.28 L1456.33 1215.28 L1456.91 1215.28 L1457.5 1215.28 L1458.09 1215.28 L1458.67 1215.28 L1459.26 1215.28 L1459.85 1215.28 L1460.43 1215.28 L1461.02 1215.28 L1461.61 1215.28 L1462.19 1215.28 L1462.78 1215.28 L1463.37 1215.28 L1463.95 1215.28 L1464.54 1215.28 L1465.12 1215.28 L1465.71 1215.28 L1466.3 1215.28 L1466.88 1215.28 L1467.47 1215.28 L1468.06 1215.28 L1468.64 1215.28 L1469.23 1215.28 L1469.82 1215.28 L1470.4 1215.28 L1470.99 1215.28 L1471.57 1215.28 L1472.16 1215.28 L1472.75 1215.28 L1473.33 1215.28 L1473.92 1215.28 L1474.51 1215.28 L1475.09 1215.28 L1475.68 1215.28 L1476.27 1215.28 L1476.85 1215.28 L1477.44 1215.28 L1478.03 1215.28 L1478.61 1215.28 L1479.2 1215.28 L1479.78 1215.28 L1480.37 1215.28 L1480.96 1215.28 L1481.54 1215.28 L1482.13 1215.28 L1482.72 1215.28 L1483.3 1215.28 L1483.89 1215.28 L1484.48 1215.28 L1485.06 1215.28 L1485.65 1215.28 L1486.24 1215.28 L1486.82 1215.28 L1487.41 1215.28 L1487.99 1215.28 L1488.58 1215.28 L1489.17 1215.28 L1489.75 1215.28 L1490.34 1215.28 L1490.93 1215.28 L1491.51 1215.28 L1492.1 1215.28 L1492.69 1215.28 L1493.27 1215.28 L1493.86 1215.28 L1494.45 1215.28 L1495.03 1215.28 L1495.62 1215.28 L1496.2 1215.28 L1496.79 1215.28 L1497.38 1215.28 L1497.96 1215.28 L1498.55 1215.28 L1499.14 1215.28 L1499.72 1215.28 L1500.31 1215.28 L1500.9 1215.28 L1501.48 1215.28 L1502.07 1215.28 L1502.65 1215.28 L1503.24 1215.28 L1503.83 1215.28 L1504.41 1215.28 L1505 1215.28 L1505.59 1215.28 L1506.17 1215.28 L1506.76 1215.28 L1507.35 1215.28 L1507.93 1215.28 L1508.52 1215.28 L1509.11 1215.28 L1509.69 1215.28 L1510.28 1215.28 L1510.86 1215.28 L1511.45 1215.28 L1512.04 1215.28 L1512.62 1215.28 L1513.21 1215.28 L1513.8 1215.28 L1514.38 1215.28 L1514.97 1215.28 L1515.56 1215.28 L1516.14 1215.28 L1516.73 1215.28 L1517.32 1215.28 L1517.9 1215.28 L1518.49 1215.28 L1519.07 1215.28 L1519.66 1215.28 L1520.25 1215.28 L1520.83 1215.28 L1521.42 1215.28 L1522.01 1215.28 L1522.59 1215.28 L1523.18 1215.28 L1523.77 1215.28 L1524.35 1215.28 L1524.94 1215.28 L1525.52 1215.28 L1526.11 1215.28 L1526.7 1215.28 L1527.28 1215.28 L1527.87 1215.28 L1528.46 1215.28 L1529.04 1215.28 L1529.63 1215.28 L1530.22 1215.28 L1530.8 1215.28 L1531.39 1215.28 L1531.98 1215.28 L1532.56 1215.28 L1533.15 1215.28 L1533.73 1215.28 L1534.32 1215.28 L1534.91 1215.28 L1535.49 1215.28 L1536.08 1215.28 L1536.67 1215.28 L1537.25 1215.28 L1537.84 1215.28 L1538.43 1215.28 L1539.01 1215.28 L1539.6 1215.28 L1540.19 1215.28 L1540.77 1215.28 L1541.36 1215.28 L1541.94 1215.28 L1542.53 1215.28 L1543.12 1215.28 L1543.7 1215.28 L1544.29 1215.28 L1544.88 1215.28 L1545.46 1215.28 L1546.05 1215.28 L1546.64 1215.28 L1547.22 1215.28 L1547.81 1215.28 L1548.4 1215.28 L1548.98 1215.28 L1549.57 1215.28 L1550.15 1215.28 L1550.74 1215.28 L1551.33 1215.28 L1551.91 1215.28 L1552.5 1215.28 L1553.09 1215.28 L1553.67 1215.28 L1554.26 1215.28 L1554.85 1215.28 L1555.43 1215.28 L1556.02 1215.28 L1556.6 1215.28 L1557.19 1215.28 L1557.78 1215.28 L1558.36 1215.28 L1558.95 1215.28 L1559.54 1215.28 L1560.12 1215.28 L1560.71 1215.28 L1561.3 1215.28 L1561.88 1215.28 L1562.47 1215.28 L1563.06 1215.28 L1563.64 1215.28 L1564.23 1215.28 L1564.81 1215.28 L1565.4 1215.28 L1565.99 1215.28 L1566.57 1215.28 L1567.16 1215.28 L1567.75 1215.28 L1568.33 1215.28 L1568.92 1215.28 L1569.51 1215.28 L1570.09 1215.28 L1570.68 1215.28 L1571.27 1215.28 L1571.85 1215.28 L1572.44 1215.28 L1573.02 1215.28 L1573.61 1215.28 L1574.2 1215.28 L1574.78 1215.28 L1575.37 1215.28 L1575.96 1215.28 L1576.54 1215.28 L1577.13 1215.28 L1577.72 1215.28 L1578.3 1215.28 L1578.89 1215.28 L1579.47 1215.28 L1580.06 1215.28 L1580.65 1215.28 L1581.23 1215.28 L1581.82 1215.28 L1582.41 1215.28 L1582.99 1215.28 L1583.58 1215.28 L1584.17 1215.28 L1584.75 1215.28 L1585.34 1215.28 L1585.93 1215.28 L1586.51 1215.28 L1587.1 1215.28 L1587.68 1215.28 L1588.27 1215.28 L1588.86 1215.28 L1589.44 1215.28 L1590.03 1215.28 L1590.62 1215.28 L1591.2 1215.28 L1591.79 1215.28 L1592.38 1215.28 L1592.96 1215.28 L1593.55 1215.28 L1594.14 1215.28 L1594.72 1215.28 L1595.31 1215.28 L1595.89 1215.28 L1596.48 1215.28 L1597.07 1215.28 L1597.65 1215.28 L1598.24 1215.28 L1598.83 1215.28 L1599.41 1215.28 L1600 1215.28 L1600.59 1215.28 L1601.17 1215.28 L1601.76 1215.28 L1602.34 1215.28 L1602.93 1215.28 L1603.52 1215.28 L1604.1 1215.28 L1604.69 1215.28 L1605.28 1215.28 L1605.86 1215.28 L1606.45 1215.28 L1607.04 1215.28 L1607.62 1215.28 L1608.21 1215.28 L1608.8 1215.28 L1609.38 1215.28 L1609.97 1215.28 L1610.55 1215.28 L1611.14 1215.28 L1611.73 1215.28 L1612.31 1215.28 L1612.9 1215.28 L1613.49 1215.28 L1614.07 1215.28 L1614.66 1215.28 L1615.25 1215.28 L1615.83 1215.28 L1616.42 1215.28 L1617.01 1215.28 L1617.59 1215.28 L1618.18 1215.28 L1618.76 1215.28 L1619.35 1215.28 L1619.94 1215.28 L1620.52 1215.28 L1621.11 1215.28 L1621.7 1215.28 L1622.28 1215.28 L1622.87 1215.28 L1623.46 1215.28 L1624.04 1215.28 L1624.63 1215.28 L1625.22 1215.28 L1625.8 1215.28 L1626.39 1215.28 L1626.97 1215.28 L1627.56 1215.28 L1628.15 1215.28 L1628.73 1215.28 L1629.32 1215.28 L1629.91 1215.28 L1630.49 1215.28 L1631.08 1215.28 L1631.67 1215.28 L1632.25 1215.28 L1632.84 1215.28 L1633.42 1215.28 L1634.01 1215.28 L1634.6 1215.28 L1635.18 1215.28 L1635.77 1215.28 L1636.36 1215.28 L1636.94 1215.28 L1637.53 1215.28 L1638.12 1215.28 L1638.7 1215.28 L1639.29 1215.28 L1639.88 1215.28 L1640.46 1215.28 L1641.05 1215.28 L1641.63 1215.28 L1642.22 1215.28 L1642.81 1215.28 L1643.39 1215.28 L1643.98 1215.28 L1644.57 1215.28 L1645.15 1215.28 L1645.74 1215.28 L1646.33 1215.28 L1646.91 1215.28 L1647.5 1215.28 L1648.09 1215.28 L1648.67 1215.28 L1649.26 1215.28 L1649.84 1215.28 L1650.43 1215.28 L1651.02 1215.28 L1651.6 1215.28 L1652.19 1215.28 L1652.78 1215.28 L1653.36 1215.28 L1653.95 1215.28 L1654.54 1215.28 L1655.12 1215.28 L1655.71 1215.28 L1656.29 1215.28 L1656.88 1215.28 L1657.47 1215.28 L1658.05 1215.28 L1658.64 1215.28 L1659.23 1215.28 L1659.81 1215.28 L1660.4 1215.28 L1660.99 1215.28 L1661.57 1215.28 L1662.16 1215.28 L1662.75 1215.28 L1663.33 1215.28 L1663.92 1215.28 L1664.5 1215.28 L1665.09 1215.28 L1665.68 1215.28 L1666.26 1215.28 L1666.85 1215.28 L1667.44 1215.28 L1668.02 1215.28 L1668.61 1215.28 L1669.2 1215.28 L1669.78 1215.28 L1670.37 1215.28 L1670.96 1215.28 L1671.54 1215.28 L1672.13 1215.28 L1672.71 1215.28 L1673.3 1215.28 L1673.89 1215.28 L1674.47 1215.28 L1675.06 1215.28 L1675.65 1215.28 L1676.23 1215.28 L1676.82 1215.28 L1677.41 1215.28 L1677.99 1215.28 L1678.58 1215.28 L1679.17 1215.28 L1679.75 1215.28 L1680.34 1215.28 L1680.92 1215.28 L1681.51 1215.28 L1682.1 1215.28 L1682.68 1215.28 L1683.27 1215.28 L1683.86 1215.28 L1684.44 1215.28 L1685.03 1215.28 L1685.62 1215.28 L1686.2 1215.28 L1686.79 1215.28 L1687.37 1215.28 L1687.96 1215.28 L1688.55 1215.28 L1689.13 1215.28 L1689.72 1215.28 L1690.31 1215.28 L1690.89 1215.28 L1691.48 1215.28 L1692.07 1215.28 L1692.65 1215.28 L1693.24 1215.28 L1693.83 1215.28 L1694.41 1215.28 L1695 1215.28 L1695.58 1215.28 L1696.17 1215.28 L1696.76 1215.28 L1697.34 1215.28 L1697.93 1215.28 L1698.52 1215.28 L1699.1 1215.28 L1699.69 1215.28 L1700.28 1215.28 L1700.86 1215.28 L1701.45 1215.28 L1702.04 1215.28 L1702.62 1215.28 L1703.21 1215.28 L1703.79 1215.28 L1704.38 1215.28 L1704.97 1215.28 L1705.55 1215.28 L1706.14 1215.28 L1706.73 1215.28 L1707.31 1215.28 L1707.9 1215.28 L1708.49 1215.28 L1709.07 1215.28 L1709.66 1215.28 L1710.24 1215.28 L1710.83 1215.28 L1711.42 1215.28 L1712 1215.28 L1712.59 1215.28 L1713.18 1215.28 L1713.76 1215.28 L1714.35 1215.28 L1714.94 1215.28 L1715.52 1215.28 L1716.11 1215.28 L1716.7 1215.28 L1717.28 1215.28 L1717.87 1215.28 L1718.45 1215.28 L1719.04 1215.28 L1719.63 1215.28 L1720.21 1215.28 L1720.8 1215.28 L1721.39 1215.28 L1721.97 1215.28 L1722.56 1215.28 L1723.15 1215.28 L1723.73 1215.28 L1724.32 1215.28 L1724.91 1215.28 L1725.49 1215.28 L1726.08 1215.28 L1726.66 1215.28 L1727.25 1215.28 L1727.84 1215.28 L1728.42 1215.28 L1729.01 1215.28 L1729.6 1215.28 L1730.18 1215.28 L1730.77 1215.28 L1731.36 1215.28 L1731.94 1215.28 L1732.53 1215.28 L1733.11 1215.28 L1733.7 1215.28 L1734.29 1215.28 L1734.87 1215.28 L1735.46 1215.28 L1736.05 1215.28 L1736.63 1215.28 L1737.22 1215.28 L1737.81 1215.28 L1738.39 1215.28 L1738.98 1215.28 L1739.57 1215.28 L1740.15 1215.28 L1740.74 1215.28 L1741.32 1215.28 L1741.91 1215.28 L1742.5 1215.28 L1743.08 1215.28 L1743.67 1215.28 L1744.26 1215.28 L1744.84 1215.28 L1745.43 1215.28 L1746.02 1215.28 L1746.6 1215.28 L1747.19 1215.28 L1747.78 1215.28 L1748.36 1215.28 L1748.95 1215.28 L1749.53 1215.28 L1750.12 1215.28 L1750.71 1215.28 L1751.29 1215.28 L1751.88 1215.28 L1752.47 1215.28 L1753.05 1215.28 L1753.64 1215.28 L1754.23 1215.28 L1754.81 1215.28 L1755.4 1215.28 L1755.99 1215.28 L1756.57 1215.28 L1757.16 1215.28 L1757.74 1215.28 L1758.33 1215.28 L1758.92 1215.28 L1759.5 1215.28 L1760.09 1215.28 L1760.68 1215.28 L1761.26 1215.28 L1761.85 1215.28 L1762.44 1215.28 L1763.02 1215.28 L1763.61 1215.28 L1764.19 1215.28 L1764.78 1215.28 L1765.37 1215.28 L1765.95 1215.28 L1766.54 1215.28 L1767.13 1215.28 L1767.71 1215.28 L1768.3 1215.28 L1768.89 1215.28 L1769.47 1215.28 L1770.06 1215.28 L1770.65 1215.28 L1771.23 1215.28 L1771.82 1215.28 L1772.4 1215.28 L1772.99 1215.28 L1773.58 1215.28 L1774.16 1215.28 L1774.75 1215.28 L1775.34 1215.28 L1775.92 1215.28 L1776.51 1215.28 L1777.1 1215.28 L1777.68 1215.28 L1778.27 1215.28 L1778.86 1215.28 L1779.44 1215.28 L1780.03 1215.28 L1780.61 1215.28 L1781.2 1215.28 L1781.79 1215.28 L1782.37 1215.28 L1782.96 1215.28 L1783.55 1215.28 L1784.13 1215.28 L1784.72 1215.28 L1785.31 1215.28 L1785.89 1215.28 L1786.48 1215.28 L1787.06 1215.28 L1787.65 1215.28 L1788.24 1215.28 L1788.82 1215.28 L1789.41 1215.28 L1790 1215.28 L1790.58 1215.28 L1791.17 1215.28 L1791.76 1215.28 L1792.34 1215.28 L1792.93 1215.28 L1793.52 1215.28 L1794.1 1215.28 L1794.69 1215.28 L1795.27 1215.28 L1795.86 1215.28 L1796.45 1215.28 L1797.03 1215.28 L1797.62 1215.28 L1798.21 1215.28 L1798.79 1215.28 L1799.38 1215.28 L1799.97 1215.28 L1800.55 1215.28 L1801.14 1215.28 L1801.73 1215.28 L1802.31 1215.28 L1802.9 1215.28 L1803.48 1215.28 L1804.07 1215.28 L1804.66 1215.28 L1805.24 1215.28 L1805.83 1215.28 L1806.42 1215.28 L1807 1215.28 L1807.59 1215.28 L1808.18 1215.28 L1808.76 1215.28 L1809.35 1215.28 L1809.94 1215.28 L1810.52 1215.28 L1811.11 1215.28 L1811.69 1215.28 L1812.28 1215.28 L1812.87 1215.28 L1813.45 1215.28 L1814.04 1215.28 L1814.63 1215.28 L1815.21 1215.28 L1815.8 1215.28 L1816.39 1215.28 L1816.97 1215.28 L1817.56 1215.28 L1818.14 1215.28 L1818.73 1215.28 L1819.32 1215.28 L1819.9 1215.28 L1820.49 1215.28 L1821.08 1215.28 L1821.66 1215.28 L1822.25 1215.28 L1822.84 1215.28 L1823.42 1215.28 L1824.01 1215.28 L1824.6 1215.28 L1825.18 1215.28 L1825.77 1215.28 L1826.35 1215.28 L1826.94 1215.28 L1827.53 1215.28 L1828.11 1215.28 L1828.7 1215.28 L1829.29 1215.28 L1829.87 1215.28 L1830.46 1215.28 L1831.05 1215.28 L1831.63 1215.28 L1832.22 1215.28 L1832.81 1215.28 L1833.39 1215.28 L1833.98 1215.28 L1834.56 1215.28 L1835.15 1215.28 L1835.74 1215.28 L1836.32 1215.28 L1836.91 1215.28 L1837.5 1215.28 L1838.08 1215.28 L1838.67 1215.28 L1839.26 1215.28 L1839.84 1215.28 L1840.43 1215.28 L1841.01 1215.28 L1841.6 1215.28 L1842.19 1215.28 L1842.77 1215.28 L1843.36 1215.28 L1843.95 1215.28 L1844.53 1215.28 L1845.12 1215.28 L1845.71 1215.28 L1846.29 1215.28 L1846.88 1215.28 L1847.47 1215.28 L1848.05 1215.28 L1848.64 1215.28 L1849.22 1215.28 L1849.81 1215.28 L1850.4 1215.28 L1850.98 1215.28 L1851.57 1215.28 L1852.16 1215.28 L1852.74 1215.28 L1853.33 1215.28 L1853.92 1215.28 L1854.5 1215.28 L1855.09 1215.28 L1855.68 1215.28 L1856.26 1215.28 L1856.85 1215.28 L1857.43 1215.28 L1858.02 1215.28 L1858.61 1215.28 L1859.19 1215.28 L1859.78 1215.28 L1860.37 1215.28 L1860.95 1215.28 L1861.54 1215.28 L1862.13 1215.28 L1862.71 1215.28 L1863.3 1215.28 L1863.88 1215.28 L1864.47 1215.28 L1865.06 1215.28 L1865.64 1215.28 L1866.23 1215.28 L1866.82 1215.28 L1867.4 1215.28 L1867.99 1215.28 L1868.58 1215.28 L1869.16 1215.28 L1869.75 1215.28 L1870.34 1215.28 L1870.92 1215.28 L1871.51 1215.28 L1872.09 1215.28 L1872.68 1215.28 L1873.27 1215.28 L1873.85 1215.28 L1874.44 1215.28 L1875.03 1215.28 L1875.61 1215.28 L1876.2 1215.28 L1876.79 1215.28 L1877.37 1215.28 L1877.96 1215.28 L1878.55 1215.28 L1879.13 1215.28 L1879.72 1215.28 L1880.3 1215.28 L1880.89 1215.28 L1881.48 1215.28 L1882.06 1215.28 L1882.65 1215.28 L1883.24 1215.28 L1883.82 1215.28 L1884.41 1215.28 L1885 1215.28 L1885.58 1215.28 L1886.17 1215.28 L1886.76 1215.28 L1887.34 1215.28 L1887.93 1215.28 L1888.51 1215.28 L1889.1 1215.28 L1889.69 1215.28 L1890.27 1215.28 L1890.86 1215.28 L1891.45 1215.28 L1892.03 1215.28 L1892.62 1215.28 L1893.21 1215.28 L1893.79 1215.28 L1894.38 1215.28 L1894.96 1215.28 L1895.55 1215.28 L1896.14 1215.28 L1896.72 1215.28 L1897.31 1215.28 L1897.9 1215.28 L1898.48 1215.28 L1899.07 1215.28 L1899.66 1215.28 L1900.24 1215.28 L1900.83 1215.28 L1901.42 1215.28 L1902 1215.28 L1902.59 1215.28 L1903.17 1215.28 L1903.76 1215.28 L1904.35 1215.28 L1904.93 1215.28 L1905.52 1215.28 L1906.11 1215.28 L1906.69 1215.28 L1907.28 1215.28 L1907.87 1215.28 L1908.45 1215.28 L1909.04 1215.28 L1909.63 1215.28 L1910.21 1215.28 L1910.8 1215.28 L1911.38 1215.28 L1911.97 1215.28 L1912.56 1215.28 L1913.14 1215.28 L1913.73 1215.28 L1914.32 1215.28 L1914.9 1215.28 L1915.49 1215.28 L1916.08 1215.28 L1916.66 1215.28 L1917.25 1215.28 L1917.83 1215.28 L1918.42 1215.28 L1919.01 1215.28 L1919.59 1215.28 L1920.18 1215.28 L1920.77 1215.28 L1921.35 1215.28 L1921.94 1215.28 L1922.53 1215.28 L1923.11 1215.28 L1923.7 1215.28 L1924.29 1215.28 L1924.87 1215.28 L1925.46 1215.28 L1926.04 1215.28 L1926.63 1215.28 L1927.22 1215.28 L1927.8 1215.28 L1928.39 1215.28 L1928.98 1215.28 L1929.56 1215.28 L1930.15 1215.28 L1930.74 1215.28 L1931.32 1215.28 L1931.91 1215.28 L1932.5 1215.28 L1933.08 1215.28 L1933.67 1215.28 L1934.25 1215.28 L1934.84 1215.28 L1935.43 1215.28 L1936.01 1215.28 L1936.6 1215.28 L1937.19 1215.28 L1937.77 1215.28 L1938.36 1215.28 L1938.95 1215.28 L1939.53 1215.28 L1940.12 1215.28 L1940.71 1215.28 L1941.29 1215.28 L1941.88 1215.28 L1942.46 1215.28 L1943.05 1215.28 L1943.64 1215.28 L1944.22 1215.28 L1944.81 1215.28 L1945.4 1215.28 L1945.98 1215.28 L1946.57 1215.28 L1947.16 1215.28 L1947.74 1215.28 L1948.33 1215.28 L1948.91 1215.28 L1949.5 1215.28 L1950.09 1215.28 L1950.67 1215.28 L1951.26 1215.28 L1951.85 1215.28 L1952.43 1215.28 L1953.02 1215.28 L1953.61 1215.28 L1954.19 1215.28 L1954.78 1215.28 L1955.37 1215.28 L1955.95 1215.28 L1956.54 1215.28 L1957.12 1215.28 L1957.71 1215.28 L1958.3 1215.28 L1958.88 1215.28 L1959.47 1215.28 L1960.06 1215.28 L1960.64 1215.28 L1961.23 1215.28 L1961.82 1215.28 L1962.4 1215.28 L1962.99 1215.28 L1963.58 1215.28 L1964.16 1215.28 L1964.75 1215.28 L1965.33 1215.28 L1965.92 1215.28 L1966.51 1215.28 L1967.09 1215.28 L1967.68 1215.28 L1968.27 1215.28 L1968.85 1215.28 L1969.44 1215.28 L1970.03 1215.28 L1970.61 1215.28 L1971.2 1215.28 L1971.78 1215.28 L1972.37 1215.28 L1972.96 1215.28 L1973.54 1215.28 L1974.13 1215.28 L1974.72 1215.28 L1975.3 1215.28 L1975.89 1215.28 L1976.48 1215.28 L1977.06 1215.28 L1977.65 1215.28 L1978.24 1215.28 L1978.82 1215.28 L1979.41 1215.28 L1979.99 1215.28 L1980.58 1215.28 L1981.17 1215.28 L1981.75 1215.28 L1982.34 1215.28 L1982.93 1215.28 L1983.51 1215.28 L1984.1 1215.28 L1984.69 1215.28 L1985.27 1215.28 L1985.86 1215.28 L1986.45 1215.28 L1987.03 1215.28 L1987.62 1215.28 L1988.2 1215.28 L1988.79 1215.28 L1989.38 1215.28 L1989.96 1215.28 L1990.55 1215.28 L1991.14 1215.28 L1991.72 1215.28 L1992.31 1215.28 L1992.9 1215.28 L1993.48 1215.28 L1994.07 1215.28 L1994.65 1215.28 L1995.24 1215.28 L1995.83 1215.28 L1996.41 1215.28 L1997 1215.28 L1997.59 1215.28 L1998.17 1215.28 L1998.76 1215.28 L1999.35 1215.28 L1999.93 1215.28 L2000.52 1215.28 L2001.11 1215.28 L2001.69 1215.28 L2002.28 1215.28 L2002.86 1215.28 L2003.45 1215.28 L2004.04 1215.28 L2004.62 1215.28 L2005.21 1215.28 L2005.8 1215.28 L2006.38 1215.28 L2006.97 1215.28 L2007.56 1215.28 L2008.14 1215.28 L2008.73 1215.28 L2009.32 1215.28 L2009.9 1215.28 L2010.49 1215.28 L2011.07 1215.28 L2011.66 1215.28 L2012.25 1215.28 L2012.83 1215.28 L2013.42 1215.28 L2014.01 1215.28 L2014.59 1215.28 L2015.18 1215.28 L2015.77 1215.28 L2016.35 1215.28 L2016.94 1215.28 L2017.53 1215.28 L2018.11 1215.28 L2018.7 1215.28 L2019.28 1215.28 L2019.87 1215.28 L2020.46 1215.28 L2021.04 1215.28 L2021.63 1215.28 L2022.22 1215.28 L2022.8 1215.28 L2023.39 1215.28 L2023.98 1215.28 L2024.56 1215.28 L2025.15 1215.28 L2025.73 1215.28 L2026.32 1215.28 L2026.91 1215.28 L2027.49 1215.28 L2028.08 1215.28 L2028.67 1215.28 L2029.25 1215.28 L2029.84 1215.28 L2030.43 1215.28 L2031.01 1215.28 L2031.6 1215.28 L2032.19 1215.28 L2032.77 1215.28 L2033.36 1215.28 L2033.94 1215.28 L2034.53 1215.28 L2035.12 1215.28 L2035.7 1215.28 L2036.29 1215.28 L2036.88 1215.28 L2037.46 1215.28 L2038.05 1215.28 L2038.64 1215.28 L2039.22 1215.28 L2039.81 1215.28 L2040.4 1215.28 L2040.98 1215.28 L2041.57 1215.28 L2042.15 1215.28 L2042.74 1215.28 L2043.33 1215.28 L2043.91 1215.28 L2044.5 1215.28 L2045.09 1215.28 L2045.67 1215.28 L2046.26 1215.28 L2046.85 1215.28 L2047.43 1215.28 L2048.02 1215.28 L2048.6 1215.28 L2049.19 1215.28 L2049.78 1215.28 L2050.36 1215.28 L2050.95 1215.28 L2051.54 1215.28 L2052.12 1215.28 L2052.71 1215.28 L2053.3 1215.28 L2053.88 1215.28 L2054.47 1215.28 L2055.06 1215.28 L2055.64 1215.28 L2056.23 1215.28 L2056.81 1215.28 L2057.4 1215.28 L2057.99 1215.28 L2058.57 1215.28 L2059.16 1215.28 L2059.75 1215.28 L2060.33 1215.28 L2060.92 1215.28 L2061.51 1215.28 L2062.09 1215.28 L2062.68 1215.28 L2063.27 1215.28 L2063.85 1215.28 L2064.44 1215.28 L2065.02 1215.28 L2065.61 1215.28 L2066.2 1215.28 L2066.78 1215.28 L2067.37 1215.28 L2067.96 1215.28 L2068.54 1215.28 L2069.13 1215.28 L2069.72 1215.28 L2070.3 1215.28 L2070.89 1215.28 L2071.48 1215.28 L2072.06 1215.28 L2072.65 1215.28 L2073.23 1215.28 L2073.82 1215.28 L2074.41 1215.28 L2074.99 1215.28 L2075.58 1215.28 L2076.17 1215.28 L2076.75 1215.28 L2077.34 1215.28 L2077.93 1215.28 L2078.51 1215.28 L2079.1 1215.28 L2079.68 1215.28 L2080.27 1215.28 L2080.86 1215.28 L2081.44 1215.28 L2082.03 1215.28 L2082.62 1215.28 L2083.2 1215.28 L2083.79 1215.28 L2084.38 1215.28 L2084.96 1215.28 L2085.55 1215.28 L2086.14 1215.28 L2086.72 1215.28 L2087.31 1215.28 L2087.89 1215.28 L2088.48 1215.28 L2089.07 1215.28 L2089.65 1215.28 L2090.24 1215.28 L2090.83 1215.28 L2091.41 1215.28 L2092 1215.28 L2092.59 1215.28 L2093.17 1215.28 L2093.76 1215.28 L2094.35 1215.28 L2094.93 1215.28 L2095.52 1215.28 L2096.1 1215.28 L2096.69 1215.28 L2097.28 1215.28 L2097.86 1215.28 L2098.45 1215.28 L2099.04 1215.28 L2099.62 1215.28 L2100.21 1215.28 L2100.8 1215.28 L2101.38 1215.28 L2101.97 1215.28 L2102.55 1215.28 L2103.14 1215.28 L2103.73 1215.28 L2104.31 1215.28 L2104.9 1215.28 L2105.49 1215.28 L2106.07 1215.28 L2106.66 1215.28 L2107.25 1215.28 L2107.83 1215.28 L2108.42 1215.28 L2109.01 1215.28 L2109.59 1215.28 L2110.18 1215.28 L2110.76 1215.28 L2111.35 1215.28 L2111.94 1215.28 L2112.52 1215.28 L2113.11 1215.28 L2113.7 1215.28 L2114.28 1215.28 L2114.87 1215.28 L2115.46 1215.28 L2116.04 1215.28 L2116.63 1215.28 L2117.22 1215.28 L2117.8 1215.28 L2118.39 1215.28 L2118.97 1215.28 L2119.56 1215.28 L2120.15 1215.28 L2120.73 1215.28 L2121.32 1215.28 L2121.91 1215.28 L2122.49 1215.28 L2123.08 1215.28 L2123.67 1215.28 L2124.25 1215.28 L2124.84 1215.28 L2125.42 1215.28 L2126.01 1215.28 L2126.6 1215.28 L2127.18 1215.28 L2127.77 1215.28 L2128.36 1215.28 L2128.94 1215.28 L2129.53 1215.28 L2130.12 1215.28 L2130.7 1215.28 L2131.29 1215.28 L2131.88 1215.28 L2132.46 1215.28 L2133.05 1215.28 L2133.63 1215.28 L2134.22 1215.28 L2134.81 1215.28 L2135.39 1215.28 L2135.98 1215.28 L2136.57 1215.28 L2137.15 1215.28 L2137.74 1215.28 L2138.33 1215.28 L2138.91 1215.28 L2139.5 1215.28 L2140.09 1215.28 L2140.67 1215.28 L2141.26 1215.28 L2141.84 1215.28 L2142.43 1215.28 L2143.02 1215.28 L2143.6 1215.28 L2144.19 1215.28 L2144.78 1215.28 L2145.36 1215.28 L2145.95 1215.28 L2146.54 1215.28 L2147.12 1215.28 L2147.71 1215.28 L2148.3 1215.28 L2148.88 1215.28 L2149.47 1215.28 L2150.05 1215.28 L2150.64 1215.28 L2151.23 1215.28 L2151.81 1215.28 L2152.4 1215.28 L2152.99 1215.28 L2153.57 1215.28 L2154.16 1215.28 L2154.75 1215.28 L2155.33 1215.28 L2155.92 1215.28 L2156.5 1215.28 L2157.09 1215.28 L2157.68 1215.28 L2158.26 1215.28 L2158.26 1214.62 L2157.68 1214.62 L2157.09 1214.62 L2156.5 1214.62 L2155.92 1214.62 L2155.33 1214.62 L2154.75 1214.62 L2154.16 1214.62 L2153.57 1214.62 L2152.99 1214.62 L2152.4 1214.62 L2151.81 1214.62 L2151.23 1214.62 L2150.64 1214.62 L2150.05 1214.62 L2149.47 1214.62 L2148.88 1214.62 L2148.3 1214.62 L2147.71 1214.62 L2147.12 1214.62 L2146.54 1214.62 L2145.95 1214.62 L2145.36 1214.62 L2144.78 1214.62 L2144.19 1214.62 L2143.6 1214.62 L2143.02 1214.62 L2142.43 1214.62 L2141.84 1214.62 L2141.26 1214.62 L2140.67 1214.62 L2140.09 1214.62 L2139.5 1214.62 L2138.91 1214.62 L2138.33 1214.62 L2137.74 1214.62 L2137.15 1214.62 L2136.57 1214.62 L2135.98 1214.62 L2135.39 1214.62 L2134.81 1214.62 L2134.22 1214.62 L2133.63 1214.62 L2133.05 1214.62 L2132.46 1214.62 L2131.88 1214.62 L2131.29 1214.62 L2130.7 1214.62 L2130.12 1214.62 L2129.53 1214.62 L2128.94 1214.62 L2128.36 1214.62 L2127.77 1214.62 L2127.18 1214.62 L2126.6 1214.62 L2126.01 1214.62 L2125.42 1214.62 L2124.84 1214.62 L2124.25 1214.62 L2123.67 1214.62 L2123.08 1214.62 L2122.49 1214.62 L2121.91 1214.62 L2121.32 1214.62 L2120.73 1214.62 L2120.15 1214.62 L2119.56 1214.62 L2118.97 1214.62 L2118.39 1214.62 L2117.8 1214.62 L2117.22 1214.62 L2116.63 1214.62 L2116.04 1214.62 L2115.46 1214.62 L2114.87 1214.62 L2114.28 1214.62 L2113.7 1214.62 L2113.11 1214.62 L2112.52 1214.62 L2111.94 1214.62 L2111.35 1214.62 L2110.76 1214.62 L2110.18 1214.62 L2109.59 1214.62 L2109.01 1214.62 L2108.42 1214.62 L2107.83 1214.62 L2107.25 1214.62 L2106.66 1214.62 L2106.07 1214.62 L2105.49 1214.62 L2104.9 1214.62 L2104.31 1214.62 L2103.73 1214.62 L2103.14 1214.62 L2102.55 1214.62 L2101.97 1214.62 L2101.38 1214.62 L2100.8 1214.62 L2100.21 1214.62 L2099.62 1214.62 L2099.04 1214.62 L2098.45 1214.62 L2097.86 1214.62 L2097.28 1214.62 L2096.69 1214.62 L2096.1 1214.62 L2095.52 1214.62 L2094.93 1214.62 L2094.35 1214.62 L2093.76 1214.62 L2093.17 1214.62 L2092.59 1214.62 L2092 1214.62 L2091.41 1214.62 L2090.83 1214.62 L2090.24 1214.62 L2089.65 1214.62 L2089.07 1214.62 L2088.48 1214.62 L2087.89 1214.62 L2087.31 1214.62 L2086.72 1214.62 L2086.14 1214.62 L2085.55 1214.62 L2084.96 1214.62 L2084.38 1214.62 L2083.79 1214.62 L2083.2 1214.62 L2082.62 1214.62 L2082.03 1214.62 L2081.44 1214.62 L2080.86 1214.62 L2080.27 1214.62 L2079.68 1214.62 L2079.1 1214.62 L2078.51 1214.62 L2077.93 1214.62 L2077.34 1214.62 L2076.75 1214.62 L2076.17 1214.62 L2075.58 1214.62 L2074.99 1214.62 L2074.41 1214.62 L2073.82 1214.62 L2073.23 1214.62 L2072.65 1214.62 L2072.06 1214.62 L2071.48 1214.62 L2070.89 1214.62 L2070.3 1214.62 L2069.72 1214.62 L2069.13 1214.62 L2068.54 1214.62 L2067.96 1214.62 L2067.37 1214.62 L2066.78 1214.62 L2066.2 1214.62 L2065.61 1214.62 L2065.02 1214.62 L2064.44 1214.62 L2063.85 1214.62 L2063.27 1214.62 L2062.68 1214.62 L2062.09 1214.62 L2061.51 1214.62 L2060.92 1214.62 L2060.33 1214.62 L2059.75 1214.62 L2059.16 1214.62 L2058.57 1214.62 L2057.99 1214.62 L2057.4 1214.62 L2056.81 1214.62 L2056.23 1214.62 L2055.64 1214.62 L2055.06 1214.62 L2054.47 1214.62 L2053.88 1214.62 L2053.3 1214.62 L2052.71 1214.62 L2052.12 1214.62 L2051.54 1214.62 L2050.95 1214.62 L2050.36 1214.62 L2049.78 1214.62 L2049.19 1214.62 L2048.6 1214.62 L2048.02 1214.62 L2047.43 1214.62 L2046.85 1214.62 L2046.26 1214.62 L2045.67 1214.62 L2045.09 1214.62 L2044.5 1214.62 L2043.91 1214.62 L2043.33 1214.62 L2042.74 1214.62 L2042.15 1214.62 L2041.57 1214.62 L2040.98 1214.62 L2040.4 1214.62 L2039.81 1214.62 L2039.22 1214.62 L2038.64 1214.62 L2038.05 1214.62 L2037.46 1214.62 L2036.88 1214.62 L2036.29 1214.62 L2035.7 1214.62 L2035.12 1214.62 L2034.53 1214.62 L2033.94 1214.62 L2033.36 1214.62 L2032.77 1214.62 L2032.19 1214.62 L2031.6 1214.62 L2031.01 1214.62 L2030.43 1214.62 L2029.84 1214.62 L2029.25 1214.62 L2028.67 1214.62 L2028.08 1214.62 L2027.49 1214.62 L2026.91 1214.62 L2026.32 1214.62 L2025.73 1214.62 L2025.15 1214.62 L2024.56 1214.62 L2023.98 1214.62 L2023.39 1214.62 L2022.8 1214.62 L2022.22 1214.62 L2021.63 1214.62 L2021.04 1214.62 L2020.46 1214.62 L2019.87 1214.62 L2019.28 1214.62 L2018.7 1214.62 L2018.11 1214.62 L2017.53 1214.62 L2016.94 1214.62 L2016.35 1214.62 L2015.77 1214.62 L2015.18 1214.62 L2014.59 1214.62 L2014.01 1214.62 L2013.42 1214.62 L2012.83 1214.62 L2012.25 1214.62 L2011.66 1214.62 L2011.07 1214.62 L2010.49 1214.62 L2009.9 1214.62 L2009.32 1214.62 L2008.73 1214.62 L2008.14 1214.62 L2007.56 1214.62 L2006.97 1214.62 L2006.38 1214.62 L2005.8 1214.62 L2005.21 1214.62 L2004.62 1214.62 L2004.04 1214.62 L2003.45 1214.62 L2002.86 1214.62 L2002.28 1214.62 L2001.69 1214.62 L2001.11 1214.62 L2000.52 1214.62 L1999.93 1214.62 L1999.35 1214.62 L1998.76 1214.62 L1998.17 1214.62 L1997.59 1214.62 L1997 1214.62 L1996.41 1214.62 L1995.83 1214.62 L1995.24 1214.62 L1994.65 1214.62 L1994.07 1214.62 L1993.48 1214.62 L1992.9 1214.62 L1992.31 1214.62 L1991.72 1214.62 L1991.14 1214.62 L1990.55 1214.62 L1989.96 1214.62 L1989.38 1214.62 L1988.79 1214.62 L1988.2 1214.62 L1987.62 1214.62 L1987.03 1214.62 L1986.45 1214.62 L1985.86 1214.62 L1985.27 1214.62 L1984.69 1214.62 L1984.1 1214.62 L1983.51 1214.62 L1982.93 1214.62 L1982.34 1214.62 L1981.75 1214.62 L1981.17 1214.62 L1980.58 1214.62 L1979.99 1214.62 L1979.41 1214.62 L1978.82 1214.62 L1978.24 1214.62 L1977.65 1214.62 L1977.06 1214.62 L1976.48 1214.62 L1975.89 1214.62 L1975.3 1214.62 L1974.72 1214.62 L1974.13 1214.62 L1973.54 1214.62 L1972.96 1214.62 L1972.37 1214.62 L1971.78 1214.62 L1971.2 1214.62 L1970.61 1214.62 L1970.03 1214.62 L1969.44 1214.62 L1968.85 1214.62 L1968.27 1214.62 L1967.68 1214.62 L1967.09 1214.62 L1966.51 1214.62 L1965.92 1214.62 L1965.33 1214.62 L1964.75 1214.62 L1964.16 1214.62 L1963.58 1214.62 L1962.99 1214.62 L1962.4 1214.62 L1961.82 1214.62 L1961.23 1214.62 L1960.64 1214.62 L1960.06 1214.62 L1959.47 1214.62 L1958.88 1214.62 L1958.3 1214.62 L1957.71 1214.62 L1957.12 1214.62 L1956.54 1214.62 L1955.95 1214.62 L1955.37 1214.62 L1954.78 1214.62 L1954.19 1214.62 L1953.61 1214.62 L1953.02 1214.62 L1952.43 1214.62 L1951.85 1214.62 L1951.26 1214.62 L1950.67 1214.62 L1950.09 1214.62 L1949.5 1214.62 L1948.91 1214.62 L1948.33 1214.62 L1947.74 1214.62 L1947.16 1214.62 L1946.57 1214.62 L1945.98 1214.62 L1945.4 1214.62 L1944.81 1214.62 L1944.22 1214.62 L1943.64 1214.62 L1943.05 1214.62 L1942.46 1214.62 L1941.88 1214.62 L1941.29 1214.62 L1940.71 1214.62 L1940.12 1214.62 L1939.53 1214.62 L1938.95 1214.62 L1938.36 1214.62 L1937.77 1214.62 L1937.19 1214.62 L1936.6 1214.62 L1936.01 1214.62 L1935.43 1214.62 L1934.84 1214.62 L1934.25 1214.62 L1933.67 1214.62 L1933.08 1214.62 L1932.5 1214.62 L1931.91 1214.62 L1931.32 1214.62 L1930.74 1214.62 L1930.15 1214.62 L1929.56 1214.62 L1928.98 1214.62 L1928.39 1214.62 L1927.8 1214.62 L1927.22 1214.62 L1926.63 1214.62 L1926.04 1214.62 L1925.46 1214.62 L1924.87 1214.62 L1924.29 1214.62 L1923.7 1214.62 L1923.11 1214.62 L1922.53 1214.62 L1921.94 1214.62 L1921.35 1214.62 L1920.77 1214.62 L1920.18 1214.62 L1919.59 1214.62 L1919.01 1214.62 L1918.42 1214.62 L1917.83 1214.62 L1917.25 1214.62 L1916.66 1214.62 L1916.08 1214.62 L1915.49 1214.62 L1914.9 1214.62 L1914.32 1214.62 L1913.73 1214.62 L1913.14 1214.62 L1912.56 1214.62 L1911.97 1214.62 L1911.38 1214.62 L1910.8 1214.62 L1910.21 1214.62 L1909.63 1214.62 L1909.04 1214.62 L1908.45 1214.62 L1907.87 1214.62 L1907.28 1214.62 L1906.69 1214.62 L1906.11 1214.62 L1905.52 1214.62 L1904.93 1214.62 L1904.35 1214.62 L1903.76 1214.62 L1903.17 1214.62 L1902.59 1214.62 L1902 1214.62 L1901.42 1214.62 L1900.83 1214.62 L1900.24 1214.62 L1899.66 1214.62 L1899.07 1214.62 L1898.48 1214.62 L1897.9 1214.62 L1897.31 1214.62 L1896.72 1214.62 L1896.14 1214.62 L1895.55 1214.62 L1894.96 1214.62 L1894.38 1214.62 L1893.79 1214.62 L1893.21 1214.62 L1892.62 1214.62 L1892.03 1214.62 L1891.45 1214.62 L1890.86 1214.62 L1890.27 1214.62 L1889.69 1214.62 L1889.1 1214.62 L1888.51 1214.62 L1887.93 1214.62 L1887.34 1214.62 L1886.76 1214.62 L1886.17 1214.62 L1885.58 1214.62 L1885 1214.62 L1884.41 1214.62 L1883.82 1214.62 L1883.24 1214.62 L1882.65 1214.62 L1882.06 1214.62 L1881.48 1214.62 L1880.89 1214.62 L1880.3 1214.62 L1879.72 1214.62 L1879.13 1214.62 L1878.55 1214.62 L1877.96 1214.62 L1877.37 1214.62 L1876.79 1214.62 L1876.2 1214.62 L1875.61 1214.62 L1875.03 1214.62 L1874.44 1214.62 L1873.85 1214.62 L1873.27 1214.62 L1872.68 1214.62 L1872.09 1214.62 L1871.51 1214.62 L1870.92 1214.62 L1870.34 1214.62 L1869.75 1214.62 L1869.16 1214.62 L1868.58 1214.62 L1867.99 1214.62 L1867.4 1214.62 L1866.82 1214.62 L1866.23 1214.62 L1865.64 1214.62 L1865.06 1214.62 L1864.47 1214.62 L1863.88 1214.62 L1863.3 1214.62 L1862.71 1214.62 L1862.13 1214.62 L1861.54 1214.62 L1860.95 1214.62 L1860.37 1214.62 L1859.78 1214.62 L1859.19 1214.62 L1858.61 1214.62 L1858.02 1214.62 L1857.43 1214.62 L1856.85 1214.62 L1856.26 1214.62 L1855.68 1214.62 L1855.09 1214.62 L1854.5 1214.62 L1853.92 1214.62 L1853.33 1214.62 L1852.74 1214.62 L1852.16 1214.62 L1851.57 1214.62 L1850.98 1214.62 L1850.4 1214.62 L1849.81 1214.62 L1849.22 1214.62 L1848.64 1214.62 L1848.05 1214.62 L1847.47 1214.62 L1846.88 1214.62 L1846.29 1214.62 L1845.71 1214.62 L1845.12 1214.62 L1844.53 1214.62 L1843.95 1214.62 L1843.36 1214.62 L1842.77 1214.62 L1842.19 1214.62 L1841.6 1214.62 L1841.01 1214.62 L1840.43 1214.62 L1839.84 1214.62 L1839.26 1214.62 L1838.67 1214.62 L1838.08 1214.62 L1837.5 1214.62 L1836.91 1214.62 L1836.32 1214.62 L1835.74 1214.62 L1835.15 1214.62 L1834.56 1214.62 L1833.98 1214.62 L1833.39 1214.62 L1832.81 1214.62 L1832.22 1214.62 L1831.63 1214.62 L1831.05 1214.62 L1830.46 1214.62 L1829.87 1214.62 L1829.29 1214.62 L1828.7 1214.62 L1828.11 1214.62 L1827.53 1214.62 L1826.94 1214.62 L1826.35 1214.62 L1825.77 1214.62 L1825.18 1214.62 L1824.6 1214.62 L1824.01 1214.62 L1823.42 1214.62 L1822.84 1214.62 L1822.25 1214.62 L1821.66 1214.62 L1821.08 1214.62 L1820.49 1214.62 L1819.9 1214.62 L1819.32 1214.62 L1818.73 1214.62 L1818.14 1214.62 L1817.56 1214.62 L1816.97 1214.62 L1816.39 1214.62 L1815.8 1214.62 L1815.21 1214.62 L1814.63 1214.62 L1814.04 1214.62 L1813.45 1214.62 L1812.87 1214.62 L1812.28 1214.62 L1811.69 1214.62 L1811.11 1214.62 L1810.52 1214.62 L1809.94 1214.62 L1809.35 1214.62 L1808.76 1214.62 L1808.18 1214.62 L1807.59 1214.62 L1807 1214.62 L1806.42 1214.62 L1805.83 1214.62 L1805.24 1214.62 L1804.66 1214.62 L1804.07 1214.62 L1803.48 1214.62 L1802.9 1214.62 L1802.31 1214.62 L1801.73 1214.62 L1801.14 1214.62 L1800.55 1214.62 L1799.97 1214.62 L1799.38 1214.62 L1798.79 1214.62 L1798.21 1214.62 L1797.62 1214.62 L1797.03 1214.62 L1796.45 1214.62 L1795.86 1214.62 L1795.27 1214.62 L1794.69 1214.62 L1794.1 1214.62 L1793.52 1214.62 L1792.93 1214.62 L1792.34 1214.62 L1791.76 1214.62 L1791.17 1214.62 L1790.58 1214.62 L1790 1214.62 L1789.41 1214.62 L1788.82 1214.62 L1788.24 1214.62 L1787.65 1214.62 L1787.06 1214.62 L1786.48 1214.62 L1785.89 1214.62 L1785.31 1214.62 L1784.72 1214.62 L1784.13 1214.62 L1783.55 1214.62 L1782.96 1214.62 L1782.37 1214.62 L1781.79 1214.62 L1781.2 1214.62 L1780.61 1214.62 L1780.03 1214.62 L1779.44 1214.62 L1778.86 1214.62 L1778.27 1214.62 L1777.68 1214.62 L1777.1 1214.62 L1776.51 1214.62 L1775.92 1214.62 L1775.34 1214.62 L1774.75 1214.62 L1774.16 1214.62 L1773.58 1214.62 L1772.99 1214.62 L1772.4 1214.62 L1771.82 1214.62 L1771.23 1214.62 L1770.65 1214.62 L1770.06 1214.62 L1769.47 1214.62 L1768.89 1214.62 L1768.3 1214.62 L1767.71 1214.62 L1767.13 1214.62 L1766.54 1214.62 L1765.95 1214.62 L1765.37 1214.62 L1764.78 1214.62 L1764.19 1214.62 L1763.61 1214.62 L1763.02 1214.62 L1762.44 1214.62 L1761.85 1214.62 L1761.26 1214.62 L1760.68 1214.62 L1760.09 1214.62 L1759.5 1214.62 L1758.92 1214.62 L1758.33 1214.62 L1757.74 1214.62 L1757.16 1214.62 L1756.57 1214.62 L1755.99 1214.62 L1755.4 1214.62 L1754.81 1214.62 L1754.23 1214.62 L1753.64 1214.62 L1753.05 1214.62 L1752.47 1214.62 L1751.88 1214.62 L1751.29 1214.62 L1750.71 1214.62 L1750.12 1214.62 L1749.53 1214.62 L1748.95 1214.62 L1748.36 1214.62 L1747.78 1214.62 L1747.19 1214.62 L1746.6 1214.62 L1746.02 1214.62 L1745.43 1214.62 L1744.84 1214.62 L1744.26 1214.62 L1743.67 1214.62 L1743.08 1214.62 L1742.5 1214.62 L1741.91 1214.62 L1741.32 1214.62 L1740.74 1214.62 L1740.15 1214.62 L1739.57 1214.62 L1738.98 1214.62 L1738.39 1214.62 L1737.81 1214.62 L1737.22 1214.62 L1736.63 1214.62 L1736.05 1214.62 L1735.46 1214.62 L1734.87 1214.62 L1734.29 1214.62 L1733.7 1214.62 L1733.11 1214.62 L1732.53 1214.62 L1731.94 1214.62 L1731.36 1214.62 L1730.77 1214.62 L1730.18 1214.62 L1729.6 1214.62 L1729.01 1214.62 L1728.42 1214.62 L1727.84 1214.62 L1727.25 1214.62 L1726.66 1214.62 L1726.08 1214.62 L1725.49 1214.62 L1724.91 1214.62 L1724.32 1214.62 L1723.73 1214.62 L1723.15 1214.62 L1722.56 1214.62 L1721.97 1214.62 L1721.39 1214.62 L1720.8 1214.62 L1720.21 1214.62 L1719.63 1214.62 L1719.04 1214.62 L1718.45 1214.62 L1717.87 1214.62 L1717.28 1214.62 L1716.7 1214.62 L1716.11 1214.62 L1715.52 1214.62 L1714.94 1214.62 L1714.35 1214.62 L1713.76 1214.62 L1713.18 1214.62 L1712.59 1214.62 L1712 1214.62 L1711.42 1214.62 L1710.83 1214.62 L1710.24 1214.62 L1709.66 1214.62 L1709.07 1214.62 L1708.49 1214.62 L1707.9 1214.62 L1707.31 1214.62 L1706.73 1214.62 L1706.14 1214.62 L1705.55 1214.62 L1704.97 1214.62 L1704.38 1214.62 L1703.79 1214.62 L1703.21 1214.62 L1702.62 1214.62 L1702.04 1214.62 L1701.45 1214.62 L1700.86 1214.62 L1700.28 1214.62 L1699.69 1214.62 L1699.1 1214.62 L1698.52 1214.62 L1697.93 1214.62 L1697.34 1214.62 L1696.76 1214.62 L1696.17 1214.62 L1695.58 1214.62 L1695 1214.62 L1694.41 1214.62 L1693.83 1214.62 L1693.24 1214.62 L1692.65 1214.62 L1692.07 1214.62 L1691.48 1214.62 L1690.89 1214.62 L1690.31 1214.62 L1689.72 1214.62 L1689.13 1214.62 L1688.55 1214.62 L1687.96 1214.62 L1687.37 1214.62 L1686.79 1214.62 L1686.2 1214.62 L1685.62 1214.62 L1685.03 1214.62 L1684.44 1214.62 L1683.86 1214.62 L1683.27 1214.62 L1682.68 1214.62 L1682.1 1214.62 L1681.51 1214.62 L1680.92 1214.62 L1680.34 1214.62 L1679.75 1214.62 L1679.17 1214.62 L1678.58 1214.62 L1677.99 1214.62 L1677.41 1214.62 L1676.82 1214.62 L1676.23 1214.62 L1675.65 1214.62 L1675.06 1214.62 L1674.47 1214.62 L1673.89 1214.62 L1673.3 1214.62 L1672.71 1214.62 L1672.13 1214.62 L1671.54 1214.62 L1670.96 1214.62 L1670.37 1214.62 L1669.78 1214.62 L1669.2 1214.62 L1668.61 1214.62 L1668.02 1214.62 L1667.44 1214.62 L1666.85 1214.62 L1666.26 1214.62 L1665.68 1214.62 L1665.09 1214.62 L1664.5 1214.62 L1663.92 1214.62 L1663.33 1214.62 L1662.75 1214.62 L1662.16 1214.62 L1661.57 1214.62 L1660.99 1214.62 L1660.4 1214.62 L1659.81 1214.62 L1659.23 1214.62 L1658.64 1214.62 L1658.05 1214.62 L1657.47 1214.62 L1656.88 1214.62 L1656.29 1214.62 L1655.71 1214.62 L1655.12 1214.62 L1654.54 1214.62 L1653.95 1214.62 L1653.36 1214.62 L1652.78 1214.62 L1652.19 1214.62 L1651.6 1214.62 L1651.02 1214.62 L1650.43 1214.62 L1649.84 1214.62 L1649.26 1214.62 L1648.67 1214.62 L1648.09 1214.62 L1647.5 1214.62 L1646.91 1214.62 L1646.33 1214.62 L1645.74 1214.62 L1645.15 1214.62 L1644.57 1214.62 L1643.98 1214.62 L1643.39 1214.62 L1642.81 1214.62 L1642.22 1214.62 L1641.63 1214.62 L1641.05 1214.62 L1640.46 1214.62 L1639.88 1214.62 L1639.29 1214.62 L1638.7 1214.62 L1638.12 1214.62 L1637.53 1214.62 L1636.94 1214.62 L1636.36 1214.62 L1635.77 1214.62 L1635.18 1214.62 L1634.6 1214.62 L1634.01 1214.62 L1633.42 1214.62 L1632.84 1214.62 L1632.25 1214.62 L1631.67 1214.62 L1631.08 1214.62 L1630.49 1214.62 L1629.91 1214.62 L1629.32 1214.62 L1628.73 1214.62 L1628.15 1214.62 L1627.56 1214.62 L1626.97 1214.62 L1626.39 1214.62 L1625.8 1214.62 L1625.22 1214.62 L1624.63 1214.62 L1624.04 1214.62 L1623.46 1214.62 L1622.87 1214.62 L1622.28 1214.62 L1621.7 1214.62 L1621.11 1214.62 L1620.52 1214.62 L1619.94 1214.62 L1619.35 1214.62 L1618.76 1214.62 L1618.18 1214.62 L1617.59 1214.62 L1617.01 1214.62 L1616.42 1214.62 L1615.83 1214.62 L1615.25 1214.62 L1614.66 1214.62 L1614.07 1214.62 L1613.49 1214.62 L1612.9 1214.62 L1612.31 1214.62 L1611.73 1214.62 L1611.14 1214.62 L1610.55 1214.62 L1609.97 1214.62 L1609.38 1214.62 L1608.8 1214.62 L1608.21 1214.62 L1607.62 1214.62 L1607.04 1214.62 L1606.45 1214.62 L1605.86 1214.62 L1605.28 1214.62 L1604.69 1214.62 L1604.1 1214.62 L1603.52 1214.62 L1602.93 1214.62 L1602.34 1214.62 L1601.76 1214.62 L1601.17 1214.62 L1600.59 1214.62 L1600 1214.62 L1599.41 1214.62 L1598.83 1214.62 L1598.24 1214.62 L1597.65 1214.62 L1597.07 1214.62 L1596.48 1214.62 L1595.89 1214.62 L1595.31 1214.62 L1594.72 1214.62 L1594.14 1214.62 L1593.55 1214.62 L1592.96 1214.62 L1592.38 1214.62 L1591.79 1214.62 L1591.2 1214.62 L1590.62 1214.62 L1590.03 1214.62 L1589.44 1214.62 L1588.86 1214.62 L1588.27 1214.62 L1587.68 1214.62 L1587.1 1214.62 L1586.51 1214.62 L1585.93 1214.62 L1585.34 1214.62 L1584.75 1214.62 L1584.17 1214.62 L1583.58 1214.62 L1582.99 1214.62 L1582.41 1214.62 L1581.82 1214.62 L1581.23 1214.62 L1580.65 1214.62 L1580.06 1214.62 L1579.47 1214.62 L1578.89 1214.62 L1578.3 1214.62 L1577.72 1214.62 L1577.13 1214.62 L1576.54 1214.62 L1575.96 1214.62 L1575.37 1214.62 L1574.78 1214.62 L1574.2 1214.62 L1573.61 1214.62 L1573.02 1214.62 L1572.44 1214.62 L1571.85 1214.62 L1571.27 1214.62 L1570.68 1214.62 L1570.09 1214.62 L1569.51 1214.62 L1568.92 1214.62 L1568.33 1214.62 L1567.75 1214.62 L1567.16 1214.62 L1566.57 1214.62 L1565.99 1214.62 L1565.4 1214.62 L1564.81 1214.62 L1564.23 1214.62 L1563.64 1214.62 L1563.06 1214.62 L1562.47 1214.62 L1561.88 1214.62 L1561.3 1214.62 L1560.71 1214.62 L1560.12 1214.62 L1559.54 1214.62 L1558.95 1214.62 L1558.36 1214.62 L1557.78 1214.62 L1557.19 1214.62 L1556.6 1214.62 L1556.02 1214.62 L1555.43 1214.62 L1554.85 1214.62 L1554.26 1214.62 L1553.67 1214.62 L1553.09 1214.62 L1552.5 1214.62 L1551.91 1214.62 L1551.33 1214.62 L1550.74 1214.62 L1550.15 1214.62 L1549.57 1214.62 L1548.98 1214.62 L1548.4 1214.62 L1547.81 1214.62 L1547.22 1214.62 L1546.64 1214.62 L1546.05 1214.62 L1545.46 1214.62 L1544.88 1214.62 L1544.29 1214.62 L1543.7 1214.62 L1543.12 1214.62 L1542.53 1214.62 L1541.94 1214.62 L1541.36 1214.62 L1540.77 1214.62 L1540.19 1214.62 L1539.6 1214.62 L1539.01 1214.62 L1538.43 1214.62 L1537.84 1214.62 L1537.25 1214.62 L1536.67 1214.62 L1536.08 1214.62 L1535.49 1214.62 L1534.91 1214.62 L1534.32 1214.62 L1533.73 1214.62 L1533.15 1214.62 L1532.56 1214.62 L1531.98 1214.62 L1531.39 1214.62 L1530.8 1214.62 L1530.22 1214.62 L1529.63 1214.62 L1529.04 1214.62 L1528.46 1214.62 L1527.87 1214.62 L1527.28 1214.62 L1526.7 1214.62 L1526.11 1214.62 L1525.52 1214.62 L1524.94 1214.62 L1524.35 1214.62 L1523.77 1214.62 L1523.18 1214.62 L1522.59 1214.62 L1522.01 1214.62 L1521.42 1214.62 L1520.83 1214.62 L1520.25 1214.62 L1519.66 1214.62 L1519.07 1214.62 L1518.49 1214.62 L1517.9 1214.62 L1517.32 1214.62 L1516.73 1214.62 L1516.14 1214.62 L1515.56 1214.62 L1514.97 1214.62 L1514.38 1214.62 L1513.8 1214.62 L1513.21 1214.62 L1512.62 1214.62 L1512.04 1214.62 L1511.45 1214.62 L1510.86 1214.62 L1510.28 1214.62 L1509.69 1214.62 L1509.11 1214.62 L1508.52 1214.62 L1507.93 1214.62 L1507.35 1214.62 L1506.76 1214.62 L1506.17 1214.62 L1505.59 1214.62 L1505 1214.62 L1504.41 1214.62 L1503.83 1214.62 L1503.24 1214.62 L1502.65 1214.62 L1502.07 1214.62 L1501.48 1214.62 L1500.9 1214.62 L1500.31 1214.62 L1499.72 1214.62 L1499.14 1214.62 L1498.55 1214.62 L1497.96 1214.62 L1497.38 1214.62 L1496.79 1214.62 L1496.2 1214.62 L1495.62 1214.62 L1495.03 1214.62 L1494.45 1214.62 L1493.86 1214.62 L1493.27 1214.62 L1492.69 1214.62 L1492.1 1214.62 L1491.51 1214.62 L1490.93 1214.62 L1490.34 1214.62 L1489.75 1214.62 L1489.17 1214.62 L1488.58 1214.62 L1487.99 1214.62 L1487.41 1214.62 L1486.82 1214.62 L1486.24 1214.62 L1485.65 1214.62 L1485.06 1214.62 L1484.48 1214.62 L1483.89 1214.62 L1483.3 1214.62 L1482.72 1214.62 L1482.13 1214.62 L1481.54 1214.62 L1480.96 1214.62 L1480.37 1214.62 L1479.78 1214.62 L1479.2 1214.62 L1478.61 1214.62 L1478.03 1214.62 L1477.44 1214.62 L1476.85 1214.62 L1476.27 1214.62 L1475.68 1214.62 L1475.09 1214.62 L1474.51 1214.62 L1473.92 1214.62 L1473.33 1214.62 L1472.75 1214.62 L1472.16 1214.62 L1471.57 1214.62 L1470.99 1214.62 L1470.4 1214.62 L1469.82 1214.62 L1469.23 1214.62 L1468.64 1214.62 L1468.06 1214.62 L1467.47 1214.62 L1466.88 1214.62 L1466.3 1214.62 L1465.71 1214.62 L1465.12 1214.62 L1464.54 1214.62 L1463.95 1214.62 L1463.37 1214.62 L1462.78 1214.62 L1462.19 1214.62 L1461.61 1214.62 L1461.02 1214.62 L1460.43 1214.62 L1459.85 1214.62 L1459.26 1214.62 L1458.67 1214.62 L1458.09 1214.62 L1457.5 1214.62 L1456.91 1214.62 L1456.33 1214.62 L1455.74 1214.62 L1455.16 1214.62 L1454.57 1214.62 L1453.98 1214.62 L1453.4 1214.62 L1452.81 1214.62 L1452.22 1214.62 L1451.64 1214.62 L1451.05 1214.62 L1450.46 1214.62 L1449.88 1214.62 L1449.29 1214.62 L1448.7 1214.62 L1448.12 1214.62 L1447.53 1214.62 L1446.95 1214.62 L1446.36 1214.62 L1445.77 1214.62 L1445.19 1214.62 L1444.6 1214.62 L1444.01 1214.62 L1443.43 1214.62 L1442.84 1214.62 L1442.25 1214.62 L1441.67 1214.62 L1441.08 1214.62 L1440.5 1214.62 L1439.91 1214.62 L1439.32 1214.62 L1438.74 1214.62 L1438.15 1214.62 L1437.56 1214.62 L1436.98 1214.62 L1436.39 1214.62 L1435.8 1214.62 L1435.22 1214.62 L1434.63 1214.62 L1434.04 1214.62 L1433.46 1214.62 L1432.87 1214.62 L1432.29 1214.62 L1431.7 1214.62 L1431.11 1214.62 L1430.53 1214.62 L1429.94 1214.62 L1429.35 1214.62 L1428.77 1214.62 L1428.18 1214.62 L1427.59 1214.62 L1427.01 1214.62 L1426.42 1214.62 L1425.83 1214.62 L1425.25 1214.62 L1424.66 1214.62 L1424.08 1214.62 L1423.49 1214.62 L1422.9 1214.62 L1422.32 1214.62 L1421.73 1214.62 L1421.14 1214.62 L1420.56 1214.62 L1419.97 1214.62 L1419.38 1214.62 L1418.8 1214.62 L1418.21 1214.62 L1417.63 1214.62 L1417.04 1214.62 L1416.45 1214.62 L1415.87 1214.62 L1415.28 1214.62 L1414.69 1214.62 L1414.11 1214.62 L1413.52 1214.62 L1412.93 1214.62 L1412.35 1214.62 L1411.76 1214.62 L1411.17 1214.62 L1410.59 1214.62 L1410 1214.62 L1409.42 1214.62 L1408.83 1214.62 L1408.24 1214.62 L1407.66 1214.62 L1407.07 1214.62 L1406.48 1214.62 L1405.9 1214.62 L1405.31 1214.62 L1404.72 1214.62 L1404.14 1214.62 L1403.55 1214.62 L1402.96 1214.62 L1402.38 1214.62 L1401.79 1214.62 L1401.21 1214.62 L1400.62 1214.62 L1400.03 1214.62 L1399.45 1214.62 L1398.86 1214.62 L1398.27 1214.62 L1397.69 1214.62 L1397.1 1214.62 L1396.51 1214.62 L1395.93 1214.62 L1395.34 1214.62 L1394.75 1214.62 L1394.17 1214.62 L1393.58 1214.62 L1393 1214.62 L1392.41 1214.62 L1391.82 1214.62 L1391.24 1214.62 L1390.65 1214.62 L1390.06 1214.62 L1389.48 1214.62 L1388.89 1214.62 L1388.3 1214.62 L1387.72 1214.62 L1387.13 1214.62 L1386.55 1214.62 L1385.96 1214.62 L1385.37 1214.62 L1384.79 1214.62 L1384.2 1214.62 L1383.61 1214.62 L1383.03 1214.62 L1382.44 1214.62 L1381.85 1214.62 L1381.27 1214.62 L1380.68 1214.62 L1380.09 1214.62 L1379.51 1214.62 L1378.92 1214.62 L1378.34 1214.62 L1377.75 1214.62 L1377.16 1214.62 L1376.58 1214.62 L1375.99 1214.62 L1375.4 1214.62 L1374.82 1214.62 L1374.23 1214.62 L1373.64 1214.62 L1373.06 1214.62 L1372.47 1214.62 L1371.88 1214.62 L1371.3 1214.62 L1370.71 1214.62 L1370.13 1214.62 L1369.54 1214.62 L1368.95 1214.62 L1368.37 1214.62 L1367.78 1214.62 L1367.19 1214.62 L1366.61 1214.62 L1366.02 1214.62 L1365.43 1214.62 L1364.85 1214.62 L1364.26 1214.62 L1363.68 1214.62 L1363.09 1214.62 L1362.5 1214.62 L1361.92 1214.62 L1361.33 1214.62 L1360.74 1214.62 L1360.16 1214.62 L1359.57 1214.62 L1358.98 1214.62 L1358.4 1214.62 L1357.81 1214.62 L1357.22 1214.62 L1356.64 1214.62 L1356.05 1214.62 L1355.47 1214.62 L1354.88 1214.62 L1354.29 1214.62 L1353.71 1214.62 L1353.12 1214.62 L1352.53 1214.62 L1351.95 1214.62 L1351.36 1214.62 L1350.77 1214.62 L1350.19 1214.62 L1349.6 1214.62 L1349.01 1214.62 L1348.43 1214.62 L1347.84 1214.62 L1347.26 1214.62 L1346.67 1214.62 L1346.08 1214.62 L1345.5 1214.62 L1344.91 1214.62 L1344.32 1214.62 L1343.74 1214.62 L1343.15 1214.62 L1342.56 1214.62 L1341.98 1214.62 L1341.39 1214.62 L1340.8 1214.62 L1340.22 1214.62 L1339.63 1214.62 L1339.05 1214.62 L1338.46 1214.62 L1337.87 1214.62 L1337.29 1214.62 L1336.7 1214.62 L1336.11 1214.62 L1335.53 1214.62 L1334.94 1214.62 L1334.35 1214.62 L1333.77 1214.62 L1333.18 1214.62 L1332.6 1214.62 L1332.01 1214.62 L1331.42 1214.62 L1330.84 1214.62 L1330.25 1214.62 L1329.66 1214.62 L1329.08 1214.62 L1328.49 1214.62 L1327.9 1214.62 L1327.32 1214.62 L1326.73 1214.62 L1326.14 1214.62 L1325.56 1214.62 L1324.97 1214.62 L1324.39 1214.62 L1323.8 1214.62 L1323.21 1214.62 L1322.63 1214.62 L1322.04 1214.62 L1321.45 1214.62 L1320.87 1214.62 L1320.28 1214.62 L1319.69 1214.62 L1319.11 1214.62 L1318.52 1214.62 L1317.93 1214.62 L1317.35 1214.62 L1316.76 1214.62 L1316.18 1214.62 L1315.59 1214.62 L1315 1214.62 L1314.42 1214.62 L1313.83 1214.62 L1313.24 1214.62 L1312.66 1214.62 L1312.07 1214.62 L1311.48 1214.62 L1310.9 1214.62 L1310.31 1214.62 L1309.73 1214.62 L1309.14 1214.62 L1308.55 1214.62 L1307.97 1214.62 L1307.38 1214.62 L1306.79 1214.62 L1306.21 1214.62 L1305.62 1214.62 L1305.03 1214.62 L1304.45 1214.62 L1303.86 1214.62 L1303.27 1214.62 L1302.69 1214.62 L1302.1 1214.62 L1301.52 1214.62 L1300.93 1214.62 L1300.34 1214.62 L1299.76 1214.62 L1299.17 1214.62 L1298.58 1214.62 L1298 1214.62 L1297.41 1214.62 L1296.82 1214.62 L1296.24 1214.62 L1295.65 1214.62 L1295.06 1214.62 L1294.48 1214.62 L1293.89 1214.62 L1293.31 1214.62 L1292.72 1214.62 L1292.13 1214.62 L1291.55 1214.62 L1290.96 1214.62 L1290.37 1214.62 L1289.79 1214.62 L1289.2 1214.62 L1288.61 1214.62 L1288.03 1214.62 L1287.44 1214.62 L1286.86 1214.62 L1286.27 1214.62 L1285.68 1214.62 L1285.1 1214.62 L1284.51 1214.62 L1283.92 1214.62 L1283.34 1214.62 L1282.75 1214.62 L1282.16 1214.62 L1281.58 1214.62 L1280.99 1214.62 L1280.4 1214.62 L1279.82 1214.62 L1279.23 1214.62 L1278.65 1214.62 L1278.06 1214.62 L1277.47 1214.62 L1276.89 1214.62 L1276.3 1214.62 L1275.71 1214.62 L1275.13 1214.62 L1274.54 1214.62 L1273.95 1214.62 L1273.37 1214.62 L1272.78 1214.62 L1272.19 1214.62 L1271.61 1214.62 L1271.02 1214.62 L1270.44 1214.62 L1269.85 1214.62 L1269.26 1214.62 L1268.68 1214.62 L1268.09 1214.62 L1267.5 1214.62 L1266.92 1214.62 L1266.33 1214.62 L1265.74 1214.62 L1265.16 1214.62 L1264.57 1214.62 L1263.98 1214.62 L1263.4 1214.62 L1262.81 1214.62 L1262.23 1214.62 L1261.64 1214.62 L1261.05 1214.62 L1260.47 1214.62 L1259.88 1214.62 L1259.29 1214.62 L1258.71 1214.62 L1258.12 1214.62 L1257.53 1214.62 L1256.95 1214.62 L1256.36 1214.62 L1255.78 1214.62 L1255.19 1214.62 L1254.6 1214.62 L1254.02 1214.62 L1253.43 1214.62 L1252.84 1214.62 L1252.26 1214.62 L1251.67 1214.62 L1251.08 1214.62 L1250.5 1214.62 L1249.91 1214.62 L1249.32 1214.62 L1248.74 1214.62 L1248.15 1214.62 L1247.57 1214.62 L1246.98 1214.62 L1246.39 1214.62 L1245.81 1214.62 L1245.22 1214.62 L1244.63 1214.62 L1244.05 1214.62 L1243.46 1214.62 L1242.87 1214.62 L1242.29 1214.62 L1241.7 1214.62 L1241.11 1214.62 L1240.53 1214.62 L1239.94 1214.62 L1239.36 1214.62 L1238.77 1214.62 L1238.18 1214.62 L1237.6 1214.62 L1237.01 1214.62 L1236.42 1214.62 L1235.84 1214.62 L1235.25 1214.62 L1234.66 1214.62 L1234.08 1214.62 L1233.49 1214.62 L1232.91 1214.62 L1232.32 1214.62 L1231.73 1214.62 L1231.15 1214.62 L1230.56 1214.62 L1229.97 1214.62 L1229.39 1214.62 L1228.8 1214.62 L1228.21 1214.62 L1227.63 1214.62 L1227.04 1214.62 L1226.45 1214.62 L1225.87 1214.62 L1225.28 1214.62 L1224.7 1214.62 L1224.11 1214.62 L1223.52 1214.62 L1222.94 1214.62 L1222.35 1214.62 L1221.76 1214.62 L1221.18 1214.62 L1220.59 1214.62 L1220 1214.62 L1219.42 1214.62 L1218.83 1214.62 L1218.24 1214.62 L1217.66 1214.62 L1217.07 1214.62 L1216.49 1214.62 L1215.9 1214.62 L1215.31 1214.62 L1214.73 1214.62 L1214.14 1214.62 L1213.55 1214.62 L1212.97 1214.62 L1212.38 1214.62 L1211.79 1214.62 L1211.21 1214.62 L1210.62 1214.62 L1210.03 1214.62 L1209.45 1214.62 L1208.86 1214.62 L1208.28 1214.62 L1207.69 1214.62 L1207.1 1214.62 L1206.52 1214.62 L1205.93 1214.62 L1205.34 1214.62 L1204.76 1214.62 L1204.17 1214.62 L1203.58 1214.62 L1203 1214.62 L1202.41 1214.62 L1201.83 1214.62 L1201.24 1214.62 L1200.65 1214.62 L1200.07 1214.62 L1199.48 1214.62 L1198.89 1214.62 L1198.31 1214.62 L1197.72 1214.62 L1197.13 1214.62 L1196.55 1214.62 L1195.96 1214.62 L1195.37 1214.62 L1194.79 1214.62 L1194.2 1214.62 L1193.62 1214.62 L1193.03 1214.62 L1192.44 1214.62 L1191.86 1214.62 L1191.27 1214.62 L1190.68 1214.62 L1190.1 1214.62 L1189.51 1214.62 L1188.92 1214.62 L1188.34 1214.62 L1187.75 1214.62 L1187.16 1214.62 L1186.58 1214.62 L1185.99 1214.62 L1185.41 1214.62 L1184.82 1214.62 L1184.23 1214.62 L1183.65 1214.62 L1183.06 1214.62 L1182.47 1214.62 L1181.89 1214.62 L1181.3 1214.62 L1180.71 1214.62 L1180.13 1214.62 L1179.54 1214.62 L1178.96 1214.62 L1178.37 1214.62 L1177.78 1214.62 L1177.2 1214.62 L1176.61 1214.62 L1176.02 1214.62 L1175.44 1214.62 L1174.85 1214.62 L1174.26 1214.62 L1173.68 1214.62 L1173.09 1214.62 L1172.5 1214.62 L1171.92 1214.62 L1171.33 1214.62 L1170.75 1214.62 L1170.16 1214.62 L1169.57 1214.62 L1168.99 1214.62 L1168.4 1214.62 L1167.81 1214.62 L1167.23 1214.62 L1166.64 1214.62 L1166.05 1214.62 L1165.47 1214.62 L1164.88 1214.62 L1164.29 1214.62 L1163.71 1214.62 L1163.12 1214.62 L1162.54 1214.62 L1161.95 1214.62 L1161.36 1214.62 L1160.78 1214.62 L1160.19 1214.62 L1159.6 1214.62 L1159.02 1214.62 L1158.43 1214.62 L1157.84 1214.62 L1157.26 1214.62 L1156.67 1214.62 L1156.09 1214.62 L1155.5 1214.62 L1154.91 1214.62 L1154.33 1214.62 L1153.74 1214.62 L1153.15 1214.62 L1152.57 1214.62 L1151.98 1214.62 L1151.39 1214.62 L1150.81 1214.62 L1150.22 1214.62 L1149.63 1214.62 L1149.05 1214.62 L1148.46 1214.62 L1147.88 1214.62 L1147.29 1214.62 L1146.7 1214.62 L1146.12 1214.62 L1145.53 1214.62 L1144.94 1214.62 L1144.36 1214.62 L1143.77 1214.62 L1143.18 1214.62 L1142.6 1214.62 L1142.01 1214.62 L1141.42 1214.62 L1140.84 1214.62 L1140.25 1214.62 L1139.67 1214.62 L1139.08 1214.62 L1138.49 1214.62 L1137.91 1214.62 L1137.32 1214.62 L1136.73 1214.62 L1136.15 1214.62 L1135.56 1214.62 L1134.97 1214.62 L1134.39 1214.62 L1133.8 1214.62 L1133.21 1214.62 L1132.63 1214.62 L1132.04 1214.62 L1131.46 1214.62 L1130.87 1214.62 L1130.28 1214.62 L1129.7 1214.62 L1129.11 1214.62 L1128.52 1214.62 L1127.94 1214.62 L1127.35 1214.62 L1126.76 1214.62 L1126.18 1214.62 L1125.59 1214.62 L1125.01 1214.62 L1124.42 1214.62 L1123.83 1214.62 L1123.25 1214.62 L1122.66 1214.62 L1122.07 1214.62 L1121.49 1214.62 L1120.9 1214.62 L1120.31 1214.62 L1119.73 1214.62 L1119.14 1214.62 L1118.55 1214.62 L1117.97 1214.62 L1117.38 1214.62 L1116.8 1214.62 L1116.21 1214.62 L1115.62 1214.62 L1115.04 1214.62 L1114.45 1214.62 L1113.86 1214.62 L1113.28 1214.62 L1112.69 1214.62 L1112.1 1214.62 L1111.52 1214.62 L1110.93 1214.62 L1110.34 1214.62 L1109.76 1214.62 L1109.17 1214.62 L1108.59 1214.62 L1108 1214.62 L1107.41 1214.62 L1106.83 1214.62 L1106.24 1214.62 L1105.65 1214.62 L1105.07 1214.62 L1104.48 1214.62 L1103.89 1214.62 L1103.31 1214.62 L1102.72 1214.62 L1102.14 1214.62 L1101.55 1214.62 L1100.96 1214.62 L1100.38 1214.62 L1099.79 1214.62 L1099.2 1214.62 L1098.62 1214.62 L1098.03 1214.62 L1097.44 1214.62 L1096.86 1214.62 L1096.27 1214.62 L1095.68 1214.62 L1095.1 1214.62 L1094.51 1214.62 L1093.93 1214.62 L1093.34 1214.62 L1092.75 1214.62 L1092.17 1214.62 L1091.58 1214.62 L1090.99 1214.62 L1090.41 1214.62 L1089.82 1214.62 L1089.23 1214.62 L1088.65 1214.62 L1088.06 1214.62 L1087.47 1214.62 L1086.89 1214.62 L1086.3 1214.62 L1085.72 1214.62 L1085.13 1214.62 L1084.54 1214.62 L1083.96 1214.62 L1083.37 1214.62 L1082.78 1214.62 L1082.2 1214.62 L1081.61 1214.62 L1081.02 1214.62 L1080.44 1214.62 L1079.85 1214.62 L1079.26 1214.62 L1078.68 1214.62 L1078.09 1214.62 L1077.51 1214.62 L1076.92 1214.62 L1076.33 1214.62 L1075.75 1214.62 L1075.16 1214.62 L1074.57 1214.62 L1073.99 1214.62 L1073.4 1214.62 L1072.81 1214.62 L1072.23 1214.62 L1071.64 1214.62 L1071.06 1214.62 L1070.47 1214.62 L1069.88 1214.62 L1069.3 1214.62 L1068.71 1214.62 L1068.12 1214.62 L1067.54 1214.62 L1066.95 1214.62 L1066.36 1214.62 L1065.78 1214.62 L1065.19 1214.62 L1064.6 1214.62 L1064.02 1214.62 L1063.43 1214.62 L1062.85 1214.62 L1062.26 1214.62 L1061.67 1214.62 L1061.09 1214.62 L1060.5 1214.62 L1059.91 1214.62 L1059.33 1214.62 L1058.74 1214.62 L1058.15 1214.62 L1057.57 1214.62 L1056.98 1214.62 L1056.39 1214.62 L1055.81 1214.62 L1055.22 1214.62 L1054.64 1214.62 L1054.05 1214.62 L1053.46 1214.62 L1052.88 1214.62 L1052.29 1214.62 L1051.7 1214.62 L1051.12 1214.62 L1050.53 1214.62 L1049.94 1214.62 L1049.36 1214.62 L1048.77 1214.62 L1048.19 1214.62 L1047.6 1214.62 L1047.01 1214.62 L1046.43 1214.62 L1045.84 1214.62 L1045.25 1214.62 L1044.67 1214.62 L1044.08 1214.62 L1043.49 1214.62 L1042.91 1214.62 L1042.32 1214.62 L1041.73 1214.62 L1041.15 1214.62 L1040.56 1214.62 L1039.98 1214.62 L1039.39 1214.62 L1038.8 1214.62 L1038.22 1214.62 L1037.63 1214.62 L1037.04 1214.62 L1036.46 1214.62 L1035.87 1214.62 L1035.28 1214.62 L1034.7 1214.62 L1034.11 1214.62 L1033.52 1214.62 L1032.94 1214.62 L1032.35 1214.62 L1031.77 1214.62 L1031.18 1214.62 L1030.59 1214.62 L1030.01 1214.62 L1029.42 1214.62 L1028.83 1214.62 L1028.25 1214.62 L1027.66 1214.62 L1027.07 1214.62 L1026.49 1214.62 L1025.9 1214.62 L1025.32 1214.62 L1024.73 1214.62 L1024.14 1214.62 L1023.56 1214.62 L1022.97 1214.62 L1022.38 1214.62 L1021.8 1214.62 L1021.21 1214.62 L1020.62 1214.62 L1020.04 1214.62 L1019.45 1214.62 L1018.86 1214.62 L1018.28 1214.62 L1017.69 1214.62 L1017.11 1214.62 L1016.52 1214.62 L1015.93 1214.62 L1015.35 1214.62 L1014.76 1214.62 L1014.17 1214.62 L1013.59 1214.62 L1013 1214.62 L1012.41 1214.62 L1011.83 1214.62 L1011.24 1214.62 L1010.65 1214.62 L1010.07 1214.62 L1009.48 1214.62 L1008.9 1214.62 L1008.31 1214.62 L1007.72 1214.62 L1007.14 1214.62 L1006.55 1214.62 L1005.96 1214.62 L1005.38 1214.62 L1004.79 1214.62 L1004.2 1214.62 L1003.62 1214.62 L1003.03 1214.62 L1002.44 1214.62 L1001.86 1214.62 L1001.27 1214.62 L1000.69 1214.62 L1000.1 1214.62 L999.513 1214.62 L998.926 1214.62 L998.34 1214.62 L997.754 1214.62 L997.167 1214.62 L996.581 1214.62 L995.994 1214.62 L995.408 1214.62 L994.822 1214.62 L994.235 1214.62 L993.649 1214.62 L993.062 1214.62 L992.476 1214.62 L991.889 1214.62 L991.303 1214.62 L990.717 1214.62 L990.13 1214.62 L989.544 1214.62 L988.957 1214.62 L988.371 1214.62 L987.785 1214.62 L987.198 1214.62 L986.612 1214.62 L986.025 1214.62  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.95 986.612,1214.95 987.198,1214.95 987.785,1214.95 988.371,1214.95 988.957,1214.95 989.544,1214.95 990.13,1214.95 990.717,1214.95 991.303,1214.95 991.889,1214.95 992.476,1214.95 993.062,1214.95 993.649,1214.95 994.235,1214.95 994.822,1214.95 995.408,1214.95 995.994,1214.95 996.581,1214.95 997.167,1214.95 997.754,1214.95 998.34,1214.95 998.926,1214.95 999.513,1214.95 1000.1,1214.95 1000.69,1214.95 1001.27,1214.95 1001.86,1214.95 1002.44,1214.95 1003.03,1214.95 1003.62,1214.95 1004.2,1214.95 1004.79,1214.95 1005.38,1214.95 1005.96,1214.95 1006.55,1214.95 1007.14,1214.95 1007.72,1214.95 1008.31,1214.95 1008.9,1214.95 1009.48,1214.95 1010.07,1214.95 1010.65,1214.95 1011.24,1214.95 1011.83,1214.95 1012.41,1214.95 1013,1214.95 1013.59,1214.95 1014.17,1214.95 1014.76,1214.95 1015.35,1214.95 1015.93,1214.95 1016.52,1214.95 1017.11,1214.95 1017.69,1214.95 1018.28,1214.95 1018.86,1214.95 1019.45,1214.95 1020.04,1214.95 1020.62,1214.95 1021.21,1214.95 1021.8,1214.95 1022.38,1214.95 1022.97,1214.95 1023.56,1214.95 1024.14,1214.95 1024.73,1214.95 1025.32,1214.95 1025.9,1214.95 1026.49,1214.95 1027.07,1214.95 1027.66,1214.95 1028.25,1214.95 1028.83,1214.95 1029.42,1214.95 1030.01,1214.95 1030.59,1214.95 1031.18,1214.95 1031.77,1214.95 1032.35,1214.95 1032.94,1214.95 1033.52,1214.95 1034.11,1214.95 1034.7,1214.95 1035.28,1214.95 1035.87,1214.95 1036.46,1214.95 1037.04,1214.95 1037.63,1214.95 1038.22,1214.95 1038.8,1214.95 1039.39,1214.95 1039.98,1214.95 1040.56,1214.95 1041.15,1214.95 1041.73,1214.95 1042.32,1214.95 1042.91,1214.95 1043.49,1214.95 1044.08,1214.95 1044.67,1214.95 1045.25,1214.95 1045.84,1214.95 1046.43,1214.95 1047.01,1214.95 1047.6,1214.95 1048.19,1214.95 1048.77,1214.95 1049.36,1214.95 1049.94,1214.95 1050.53,1214.95 1051.12,1214.95 1051.7,1214.95 1052.29,1214.95 1052.88,1214.95 1053.46,1214.95 1054.05,1214.95 1054.64,1214.95 1055.22,1214.95 1055.81,1214.95 1056.39,1214.95 1056.98,1214.95 1057.57,1214.95 1058.15,1214.95 1058.74,1214.95 1059.33,1214.95 1059.91,1214.95 1060.5,1214.95 1061.09,1214.95 1061.67,1214.95 1062.26,1214.95 1062.85,1214.95 1063.43,1214.95 1064.02,1214.95 1064.6,1214.95 1065.19,1214.95 1065.78,1214.95 1066.36,1214.95 1066.95,1214.95 1067.54,1214.95 1068.12,1214.95 1068.71,1214.95 1069.3,1214.95 1069.88,1214.95 1070.47,1214.95 1071.06,1214.95 1071.64,1214.95 1072.23,1214.95 1072.81,1214.95 1073.4,1214.95 1073.99,1214.95 1074.57,1214.95 1075.16,1214.95 1075.75,1214.95 1076.33,1214.95 1076.92,1214.95 1077.51,1214.95 1078.09,1214.95 1078.68,1214.95 1079.26,1214.95 1079.85,1214.95 1080.44,1214.95 1081.02,1214.95 1081.61,1214.95 1082.2,1214.95 1082.78,1214.95 1083.37,1214.95 1083.96,1214.95 1084.54,1214.95 1085.13,1214.95 1085.72,1214.95 1086.3,1214.95 1086.89,1214.95 1087.47,1214.95 1088.06,1214.95 1088.65,1214.95 1089.23,1214.95 1089.82,1214.95 1090.41,1214.95 1090.99,1214.95 1091.58,1214.95 1092.17,1214.95 1092.75,1214.95 1093.34,1214.95 1093.93,1214.95 1094.51,1214.95 1095.1,1214.95 1095.68,1214.95 1096.27,1214.95 1096.86,1214.95 1097.44,1214.95 1098.03,1214.95 1098.62,1214.95 1099.2,1214.95 1099.79,1214.95 1100.38,1214.95 1100.96,1214.95 1101.55,1214.95 1102.14,1214.95 1102.72,1214.95 1103.31,1214.95 1103.89,1214.95 1104.48,1214.95 1105.07,1214.95 1105.65,1214.95 1106.24,1214.95 1106.83,1214.95 1107.41,1214.95 1108,1214.95 1108.59,1214.95 1109.17,1214.95 1109.76,1214.95 1110.34,1214.95 1110.93,1214.95 1111.52,1214.95 1112.1,1214.95 1112.69,1214.95 1113.28,1214.95 1113.86,1214.95 1114.45,1214.95 1115.04,1214.95 1115.62,1214.95 1116.21,1214.95 1116.8,1214.95 1117.38,1214.95 1117.97,1214.95 1118.55,1214.95 1119.14,1214.95 1119.73,1214.95 1120.31,1214.95 1120.9,1214.95 1121.49,1214.95 1122.07,1214.95 1122.66,1214.95 1123.25,1214.95 1123.83,1214.95 1124.42,1214.95 1125.01,1214.95 1125.59,1214.95 1126.18,1214.95 1126.76,1214.95 1127.35,1214.95 1127.94,1214.95 1128.52,1214.95 1129.11,1214.95 1129.7,1214.95 1130.28,1214.95 1130.87,1214.95 1131.46,1214.95 1132.04,1214.95 1132.63,1214.95 1133.21,1214.95 1133.8,1214.95 1134.39,1214.95 1134.97,1214.95 1135.56,1214.95 1136.15,1214.95 1136.73,1214.95 1137.32,1214.95 1137.91,1214.95 1138.49,1214.95 1139.08,1214.95 1139.67,1214.95 1140.25,1214.95 1140.84,1214.95 1141.42,1214.95 1142.01,1214.95 1142.6,1214.95 1143.18,1214.95 1143.77,1214.95 1144.36,1214.95 1144.94,1214.95 1145.53,1214.95 1146.12,1214.95 1146.7,1214.95 1147.29,1214.95 1147.88,1214.95 1148.46,1214.95 1149.05,1214.95 1149.63,1214.95 1150.22,1214.95 1150.81,1214.95 1151.39,1214.95 1151.98,1214.95 1152.57,1214.95 1153.15,1214.95 1153.74,1214.95 1154.33,1214.95 1154.91,1214.95 1155.5,1214.95 1156.09,1214.95 1156.67,1214.95 1157.26,1214.95 1157.84,1214.95 1158.43,1214.95 1159.02,1214.95 1159.6,1214.95 1160.19,1214.95 1160.78,1214.95 1161.36,1214.95 1161.95,1214.95 1162.54,1214.95 1163.12,1214.95 1163.71,1214.95 1164.29,1214.95 1164.88,1214.95 1165.47,1214.95 1166.05,1214.95 1166.64,1214.95 1167.23,1214.95 1167.81,1214.95 1168.4,1214.95 1168.99,1214.95 1169.57,1214.95 1170.16,1214.95 1170.75,1214.95 1171.33,1214.95 1171.92,1214.95 1172.5,1214.95 1173.09,1214.95 1173.68,1214.95 1174.26,1214.95 1174.85,1214.95 1175.44,1214.95 1176.02,1214.95 1176.61,1214.95 1177.2,1214.95 1177.78,1214.95 1178.37,1214.95 1178.96,1214.95 1179.54,1214.95 1180.13,1214.95 1180.71,1214.95 1181.3,1214.95 1181.89,1214.95 1182.47,1214.95 1183.06,1214.95 1183.65,1214.95 1184.23,1214.95 1184.82,1214.95 1185.41,1214.95 1185.99,1214.95 1186.58,1214.95 1187.16,1214.95 1187.75,1214.95 1188.34,1214.95 1188.92,1214.95 1189.51,1214.95 1190.1,1214.95 1190.68,1214.95 1191.27,1214.95 1191.86,1214.95 1192.44,1214.95 1193.03,1214.95 1193.62,1214.95 1194.2,1214.95 1194.79,1214.95 1195.37,1214.95 1195.96,1214.95 1196.55,1214.95 1197.13,1214.95 1197.72,1214.95 1198.31,1214.95 1198.89,1214.95 1199.48,1214.95 1200.07,1214.95 1200.65,1214.95 1201.24,1214.95 1201.83,1214.95 1202.41,1214.95 1203,1214.95 1203.58,1214.95 1204.17,1214.95 1204.76,1214.95 1205.34,1214.95 1205.93,1214.95 1206.52,1214.95 1207.1,1214.95 1207.69,1214.95 1208.28,1214.95 1208.86,1214.95 1209.45,1214.95 1210.03,1214.95 1210.62,1214.95 1211.21,1214.95 1211.79,1214.95 1212.38,1214.95 1212.97,1214.95 1213.55,1214.95 1214.14,1214.95 1214.73,1214.95 1215.31,1214.95 1215.9,1214.95 1216.49,1214.95 1217.07,1214.95 1217.66,1214.95 1218.24,1214.95 1218.83,1214.95 1219.42,1214.95 1220,1214.95 1220.59,1214.95 1221.18,1214.95 1221.76,1214.95 1222.35,1214.95 1222.94,1214.95 1223.52,1214.95 1224.11,1214.95 1224.7,1214.95 1225.28,1214.95 1225.87,1214.95 1226.45,1214.95 1227.04,1214.95 1227.63,1214.95 1228.21,1214.95 1228.8,1214.95 1229.39,1214.95 1229.97,1214.95 1230.56,1214.95 1231.15,1214.95 1231.73,1214.95 1232.32,1214.95 1232.91,1214.95 1233.49,1214.95 1234.08,1214.95 1234.66,1214.95 1235.25,1214.95 1235.84,1214.95 1236.42,1214.95 1237.01,1214.95 1237.6,1214.95 1238.18,1214.95 1238.77,1214.95 1239.36,1214.95 1239.94,1214.95 1240.53,1214.95 1241.11,1214.95 1241.7,1214.95 1242.29,1214.95 1242.87,1214.95 1243.46,1214.95 1244.05,1214.95 1244.63,1214.95 1245.22,1214.95 1245.81,1214.95 1246.39,1214.95 1246.98,1214.95 1247.57,1214.95 1248.15,1214.95 1248.74,1214.95 1249.32,1214.95 1249.91,1214.95 1250.5,1214.95 1251.08,1214.95 1251.67,1214.95 1252.26,1214.95 1252.84,1214.95 1253.43,1214.95 1254.02,1214.95 1254.6,1214.95 1255.19,1214.95 1255.78,1214.95 1256.36,1214.95 1256.95,1214.95 1257.53,1214.95 1258.12,1214.95 1258.71,1214.95 1259.29,1214.95 1259.88,1214.95 1260.47,1214.95 1261.05,1214.95 1261.64,1214.95 1262.23,1214.95 1262.81,1214.95 1263.4,1214.95 1263.98,1214.95 1264.57,1214.95 1265.16,1214.95 1265.74,1214.95 1266.33,1214.95 1266.92,1214.95 1267.5,1214.95 1268.09,1214.95 1268.68,1214.95 1269.26,1214.95 1269.85,1214.95 1270.44,1214.95 1271.02,1214.95 1271.61,1214.95 1272.19,1214.95 1272.78,1214.95 1273.37,1214.95 1273.95,1214.95 1274.54,1214.95 1275.13,1214.95 1275.71,1214.95 1276.3,1214.95 1276.89,1214.95 1277.47,1214.95 1278.06,1214.95 1278.65,1214.95 1279.23,1214.95 1279.82,1214.95 1280.4,1214.95 1280.99,1214.95 1281.58,1214.95 1282.16,1214.95 1282.75,1214.95 1283.34,1214.95 1283.92,1214.95 1284.51,1214.95 1285.1,1214.95 1285.68,1214.95 1286.27,1214.95 1286.86,1214.95 1287.44,1214.95 1288.03,1214.95 1288.61,1214.95 1289.2,1214.95 1289.79,1214.95 1290.37,1214.95 1290.96,1214.95 1291.55,1214.95 1292.13,1214.95 1292.72,1214.95 1293.31,1214.95 1293.89,1214.95 1294.48,1214.95 1295.06,1214.95 1295.65,1214.95 1296.24,1214.95 1296.82,1214.95 1297.41,1214.95 1298,1214.95 1298.58,1214.95 1299.17,1214.95 1299.76,1214.95 1300.34,1214.95 1300.93,1214.95 1301.52,1214.95 1302.1,1214.95 1302.69,1214.95 1303.27,1214.95 1303.86,1214.95 1304.45,1214.95 1305.03,1214.95 1305.62,1214.95 1306.21,1214.95 1306.79,1214.95 1307.38,1214.95 1307.97,1214.95 1308.55,1214.95 1309.14,1214.95 1309.73,1214.95 1310.31,1214.95 1310.9,1214.95 1311.48,1214.95 1312.07,1214.95 1312.66,1214.95 1313.24,1214.95 1313.83,1214.95 1314.42,1214.95 1315,1214.95 1315.59,1214.95 1316.18,1214.95 1316.76,1214.95 1317.35,1214.95 1317.93,1214.95 1318.52,1214.95 1319.11,1214.95 1319.69,1214.95 1320.28,1214.95 1320.87,1214.95 1321.45,1214.95 1322.04,1214.95 1322.63,1214.95 1323.21,1214.95 1323.8,1214.95 1324.39,1214.95 1324.97,1214.95 1325.56,1214.95 1326.14,1214.95 1326.73,1214.95 1327.32,1214.95 1327.9,1214.95 1328.49,1214.95 1329.08,1214.95 1329.66,1214.95 1330.25,1214.95 1330.84,1214.95 1331.42,1214.95 1332.01,1214.95 1332.6,1214.95 1333.18,1214.95 1333.77,1214.95 1334.35,1214.95 1334.94,1214.95 1335.53,1214.95 1336.11,1214.95 1336.7,1214.95 1337.29,1214.95 1337.87,1214.95 1338.46,1214.95 1339.05,1214.95 1339.63,1214.95 1340.22,1214.95 1340.8,1214.95 1341.39,1214.95 1341.98,1214.95 1342.56,1214.95 1343.15,1214.95 1343.74,1214.95 1344.32,1214.95 1344.91,1214.95 1345.5,1214.95 1346.08,1214.95 1346.67,1214.95 1347.26,1214.95 1347.84,1214.95 1348.43,1214.95 1349.01,1214.95 1349.6,1214.95 1350.19,1214.95 1350.77,1214.95 1351.36,1214.95 1351.95,1214.95 1352.53,1214.95 1353.12,1214.95 1353.71,1214.95 1354.29,1214.95 1354.88,1214.95 1355.47,1214.95 1356.05,1214.95 1356.64,1214.95 1357.22,1214.95 1357.81,1214.95 1358.4,1214.95 1358.98,1214.95 1359.57,1214.95 1360.16,1214.95 1360.74,1214.95 1361.33,1214.95 1361.92,1214.95 1362.5,1214.95 1363.09,1214.95 1363.68,1214.95 1364.26,1214.95 1364.85,1214.95 1365.43,1214.95 1366.02,1214.95 1366.61,1214.95 1367.19,1214.95 1367.78,1214.95 1368.37,1214.95 1368.95,1214.95 1369.54,1214.95 1370.13,1214.95 1370.71,1214.95 1371.3,1214.95 1371.88,1214.95 1372.47,1214.95 1373.06,1214.95 1373.64,1214.95 1374.23,1214.95 1374.82,1214.95 1375.4,1214.95 1375.99,1214.95 1376.58,1214.95 1377.16,1214.95 1377.75,1214.95 1378.34,1214.95 1378.92,1214.95 1379.51,1214.95 1380.09,1214.95 1380.68,1214.95 1381.27,1214.95 1381.85,1214.95 1382.44,1214.95 1383.03,1214.95 1383.61,1214.95 1384.2,1214.95 1384.79,1214.95 1385.37,1214.95 1385.96,1214.95 1386.55,1214.95 1387.13,1214.95 1387.72,1214.95 1388.3,1214.95 1388.89,1214.95 1389.48,1214.95 1390.06,1214.95 1390.65,1214.95 1391.24,1214.95 1391.82,1214.95 1392.41,1214.95 1393,1214.95 1393.58,1214.95 1394.17,1214.95 1394.75,1214.95 1395.34,1214.95 1395.93,1214.95 1396.51,1214.95 1397.1,1214.95 1397.69,1214.95 1398.27,1214.95 1398.86,1214.95 1399.45,1214.95 1400.03,1214.95 1400.62,1214.95 1401.21,1214.95 1401.79,1214.95 1402.38,1214.95 1402.96,1214.95 1403.55,1214.95 1404.14,1214.95 1404.72,1214.95 1405.31,1214.95 1405.9,1214.95 1406.48,1214.95 1407.07,1214.95 1407.66,1214.95 1408.24,1214.95 1408.83,1214.95 1409.42,1214.95 1410,1214.95 1410.59,1214.95 1411.17,1214.95 1411.76,1214.95 1412.35,1214.95 1412.93,1214.95 1413.52,1214.95 1414.11,1214.95 1414.69,1214.95 1415.28,1214.95 1415.87,1214.95 1416.45,1214.95 1417.04,1214.95 1417.63,1214.95 1418.21,1214.95 1418.8,1214.95 1419.38,1214.95 1419.97,1214.95 1420.56,1214.95 1421.14,1214.95 1421.73,1214.95 1422.32,1214.95 1422.9,1214.95 1423.49,1214.95 1424.08,1214.95 1424.66,1214.95 1425.25,1214.95 1425.83,1214.95 1426.42,1214.95 1427.01,1214.95 1427.59,1214.95 1428.18,1214.95 1428.77,1214.95 1429.35,1214.95 1429.94,1214.95 1430.53,1214.95 1431.11,1214.95 1431.7,1214.95 1432.29,1214.95 1432.87,1214.95 1433.46,1214.95 1434.04,1214.95 1434.63,1214.95 1435.22,1214.95 1435.8,1214.95 1436.39,1214.95 1436.98,1214.95 1437.56,1214.95 1438.15,1214.95 1438.74,1214.95 1439.32,1214.95 1439.91,1214.95 1440.5,1214.95 1441.08,1214.95 1441.67,1214.95 1442.25,1214.95 1442.84,1214.95 1443.43,1214.95 1444.01,1214.95 1444.6,1214.95 1445.19,1214.95 1445.77,1214.95 1446.36,1214.95 1446.95,1214.95 1447.53,1214.95 1448.12,1214.95 1448.7,1214.95 1449.29,1214.95 1449.88,1214.95 1450.46,1214.95 1451.05,1214.95 1451.64,1214.95 1452.22,1214.95 1452.81,1214.95 1453.4,1214.95 1453.98,1214.95 1454.57,1214.95 1455.16,1214.95 1455.74,1214.95 1456.33,1214.95 1456.91,1214.95 1457.5,1214.95 1458.09,1214.95 1458.67,1214.95 1459.26,1214.95 1459.85,1214.95 1460.43,1214.95 1461.02,1214.95 1461.61,1214.95 1462.19,1214.95 1462.78,1214.95 1463.37,1214.95 1463.95,1214.95 1464.54,1214.95 1465.12,1214.95 1465.71,1214.95 1466.3,1214.95 1466.88,1214.95 1467.47,1214.95 1468.06,1214.95 1468.64,1214.95 1469.23,1214.95 1469.82,1214.95 1470.4,1214.95 1470.99,1214.95 1471.57,1214.95 1472.16,1214.95 1472.75,1214.95 1473.33,1214.95 1473.92,1214.95 1474.51,1214.95 1475.09,1214.95 1475.68,1214.95 1476.27,1214.95 1476.85,1214.95 1477.44,1214.95 1478.03,1214.95 1478.61,1214.95 1479.2,1214.95 1479.78,1214.95 1480.37,1214.95 1480.96,1214.95 1481.54,1214.95 1482.13,1214.95 1482.72,1214.95 1483.3,1214.95 1483.89,1214.95 1484.48,1214.95 1485.06,1214.95 1485.65,1214.95 1486.24,1214.95 1486.82,1214.95 1487.41,1214.95 1487.99,1214.95 1488.58,1214.95 1489.17,1214.95 1489.75,1214.95 1490.34,1214.95 1490.93,1214.95 1491.51,1214.95 1492.1,1214.95 1492.69,1214.95 1493.27,1214.95 1493.86,1214.95 1494.45,1214.95 1495.03,1214.95 1495.62,1214.95 1496.2,1214.95 1496.79,1214.95 1497.38,1214.95 1497.96,1214.95 1498.55,1214.95 1499.14,1214.95 1499.72,1214.95 1500.31,1214.95 1500.9,1214.95 1501.48,1214.95 1502.07,1214.95 1502.65,1214.95 1503.24,1214.95 1503.83,1214.95 1504.41,1214.95 1505,1214.95 1505.59,1214.95 1506.17,1214.95 1506.76,1214.95 1507.35,1214.95 1507.93,1214.95 1508.52,1214.95 1509.11,1214.95 1509.69,1214.95 1510.28,1214.95 1510.86,1214.95 1511.45,1214.95 1512.04,1214.95 1512.62,1214.95 1513.21,1214.95 1513.8,1214.95 1514.38,1214.95 1514.97,1214.95 1515.56,1214.95 1516.14,1214.95 1516.73,1214.95 1517.32,1214.95 1517.9,1214.95 1518.49,1214.95 1519.07,1214.95 1519.66,1214.95 1520.25,1214.95 1520.83,1214.95 1521.42,1214.95 1522.01,1214.95 1522.59,1214.95 1523.18,1214.95 1523.77,1214.95 1524.35,1214.95 1524.94,1214.95 1525.52,1214.95 1526.11,1214.95 1526.7,1214.95 1527.28,1214.95 1527.87,1214.95 1528.46,1214.95 1529.04,1214.95 1529.63,1214.95 1530.22,1214.95 1530.8,1214.95 1531.39,1214.95 1531.98,1214.95 1532.56,1214.95 1533.15,1214.95 1533.73,1214.95 1534.32,1214.95 1534.91,1214.95 1535.49,1214.95 1536.08,1214.95 1536.67,1214.95 1537.25,1214.95 1537.84,1214.95 1538.43,1214.95 1539.01,1214.95 1539.6,1214.95 1540.19,1214.95 1540.77,1214.95 1541.36,1214.95 1541.94,1214.95 1542.53,1214.95 1543.12,1214.95 1543.7,1214.95 1544.29,1214.95 1544.88,1214.95 1545.46,1214.95 1546.05,1214.95 1546.64,1214.95 1547.22,1214.95 1547.81,1214.95 1548.4,1214.95 1548.98,1214.95 1549.57,1214.95 1550.15,1214.95 1550.74,1214.95 1551.33,1214.95 1551.91,1214.95 1552.5,1214.95 1553.09,1214.95 1553.67,1214.95 1554.26,1214.95 1554.85,1214.95 1555.43,1214.95 1556.02,1214.95 1556.6,1214.95 1557.19,1214.95 1557.78,1214.95 1558.36,1214.95 1558.95,1214.95 1559.54,1214.95 1560.12,1214.95 1560.71,1214.95 1561.3,1214.95 1561.88,1214.95 1562.47,1214.95 1563.06,1214.95 1563.64,1214.95 1564.23,1214.95 1564.81,1214.95 1565.4,1214.95 1565.99,1214.95 1566.57,1214.95 1567.16,1214.95 1567.75,1214.95 1568.33,1214.95 1568.92,1214.95 1569.51,1214.95 1570.09,1214.95 1570.68,1214.95 1571.27,1214.95 1571.85,1214.95 1572.44,1214.95 1573.02,1214.95 1573.61,1214.95 1574.2,1214.95 1574.78,1214.95 1575.37,1214.95 1575.96,1214.95 1576.54,1214.95 1577.13,1214.95 1577.72,1214.95 1578.3,1214.95 1578.89,1214.95 1579.47,1214.95 1580.06,1214.95 1580.65,1214.95 1581.23,1214.95 1581.82,1214.95 1582.41,1214.95 1582.99,1214.95 1583.58,1214.95 1584.17,1214.95 1584.75,1214.95 1585.34,1214.95 1585.93,1214.95 1586.51,1214.95 1587.1,1214.95 1587.68,1214.95 1588.27,1214.95 1588.86,1214.95 1589.44,1214.95 1590.03,1214.95 1590.62,1214.95 1591.2,1214.95 1591.79,1214.95 1592.38,1214.95 1592.96,1214.95 1593.55,1214.95 1594.14,1214.95 1594.72,1214.95 1595.31,1214.95 1595.89,1214.95 1596.48,1214.95 1597.07,1214.95 1597.65,1214.95 1598.24,1214.95 1598.83,1214.95 1599.41,1214.95 1600,1214.95 1600.59,1214.95 1601.17,1214.95 1601.76,1214.95 1602.34,1214.95 1602.93,1214.95 1603.52,1214.95 1604.1,1214.95 1604.69,1214.95 1605.28,1214.95 1605.86,1214.95 1606.45,1214.95 1607.04,1214.95 1607.62,1214.95 1608.21,1214.95 1608.8,1214.95 1609.38,1214.95 1609.97,1214.95 1610.55,1214.95 1611.14,1214.95 1611.73,1214.95 1612.31,1214.95 1612.9,1214.95 1613.49,1214.95 1614.07,1214.95 1614.66,1214.95 1615.25,1214.95 1615.83,1214.95 1616.42,1214.95 1617.01,1214.95 1617.59,1214.95 1618.18,1214.95 1618.76,1214.95 1619.35,1214.95 1619.94,1214.95 1620.52,1214.95 1621.11,1214.95 1621.7,1214.95 1622.28,1214.95 1622.87,1214.95 1623.46,1214.95 1624.04,1214.95 1624.63,1214.95 1625.22,1214.95 1625.8,1214.95 1626.39,1214.95 1626.97,1214.95 1627.56,1214.95 1628.15,1214.95 1628.73,1214.95 1629.32,1214.95 1629.91,1214.95 1630.49,1214.95 1631.08,1214.95 1631.67,1214.95 1632.25,1214.95 1632.84,1214.95 1633.42,1214.95 1634.01,1214.95 1634.6,1214.95 1635.18,1214.95 1635.77,1214.95 1636.36,1214.95 1636.94,1214.95 1637.53,1214.95 1638.12,1214.95 1638.7,1214.95 1639.29,1214.95 1639.88,1214.95 1640.46,1214.95 1641.05,1214.95 1641.63,1214.95 1642.22,1214.95 1642.81,1214.95 1643.39,1214.95 1643.98,1214.95 1644.57,1214.95 1645.15,1214.95 1645.74,1214.95 1646.33,1214.95 1646.91,1214.95 1647.5,1214.95 1648.09,1214.95 1648.67,1214.95 1649.26,1214.95 1649.84,1214.95 1650.43,1214.95 1651.02,1214.95 1651.6,1214.95 1652.19,1214.95 1652.78,1214.95 1653.36,1214.95 1653.95,1214.95 1654.54,1214.95 1655.12,1214.95 1655.71,1214.95 1656.29,1214.95 1656.88,1214.95 1657.47,1214.95 1658.05,1214.95 1658.64,1214.95 1659.23,1214.95 1659.81,1214.95 1660.4,1214.95 1660.99,1214.95 1661.57,1214.95 1662.16,1214.95 1662.75,1214.95 1663.33,1214.95 1663.92,1214.95 1664.5,1214.95 1665.09,1214.95 1665.68,1214.95 1666.26,1214.95 1666.85,1214.95 1667.44,1214.95 1668.02,1214.95 1668.61,1214.95 1669.2,1214.95 1669.78,1214.95 1670.37,1214.95 1670.96,1214.95 1671.54,1214.95 1672.13,1214.95 1672.71,1214.95 1673.3,1214.95 1673.89,1214.95 1674.47,1214.95 1675.06,1214.95 1675.65,1214.95 1676.23,1214.95 1676.82,1214.95 1677.41,1214.95 1677.99,1214.95 1678.58,1214.95 1679.17,1214.95 1679.75,1214.95 1680.34,1214.95 1680.92,1214.95 1681.51,1214.95 1682.1,1214.95 1682.68,1214.95 1683.27,1214.95 1683.86,1214.95 1684.44,1214.95 1685.03,1214.95 1685.62,1214.95 1686.2,1214.95 1686.79,1214.95 1687.37,1214.95 1687.96,1214.95 1688.55,1214.95 1689.13,1214.95 1689.72,1214.95 1690.31,1214.95 1690.89,1214.95 1691.48,1214.95 1692.07,1214.95 1692.65,1214.95 1693.24,1214.95 1693.83,1214.95 1694.41,1214.95 1695,1214.95 1695.58,1214.95 1696.17,1214.95 1696.76,1214.95 1697.34,1214.95 1697.93,1214.95 1698.52,1214.95 1699.1,1214.95 1699.69,1214.95 1700.28,1214.95 1700.86,1214.95 1701.45,1214.95 1702.04,1214.95 1702.62,1214.95 1703.21,1214.95 1703.79,1214.95 1704.38,1214.95 1704.97,1214.95 1705.55,1214.95 1706.14,1214.95 1706.73,1214.95 1707.31,1214.95 1707.9,1214.95 1708.49,1214.95 1709.07,1214.95 1709.66,1214.95 1710.24,1214.95 1710.83,1214.95 1711.42,1214.95 1712,1214.95 1712.59,1214.95 1713.18,1214.95 1713.76,1214.95 1714.35,1214.95 1714.94,1214.95 1715.52,1214.95 1716.11,1214.95 1716.7,1214.95 1717.28,1214.95 1717.87,1214.95 1718.45,1214.95 1719.04,1214.95 1719.63,1214.95 1720.21,1214.95 1720.8,1214.95 1721.39,1214.95 1721.97,1214.95 1722.56,1214.95 1723.15,1214.95 1723.73,1214.95 1724.32,1214.95 1724.91,1214.95 1725.49,1214.95 1726.08,1214.95 1726.66,1214.95 1727.25,1214.95 1727.84,1214.95 1728.42,1214.95 1729.01,1214.95 1729.6,1214.95 1730.18,1214.95 1730.77,1214.95 1731.36,1214.95 1731.94,1214.95 1732.53,1214.95 1733.11,1214.95 1733.7,1214.95 1734.29,1214.95 1734.87,1214.95 1735.46,1214.95 1736.05,1214.95 1736.63,1214.95 1737.22,1214.95 1737.81,1214.95 1738.39,1214.95 1738.98,1214.95 1739.57,1214.95 1740.15,1214.95 1740.74,1214.95 1741.32,1214.95 1741.91,1214.95 1742.5,1214.95 1743.08,1214.95 1743.67,1214.95 1744.26,1214.95 1744.84,1214.95 1745.43,1214.95 1746.02,1214.95 1746.6,1214.95 1747.19,1214.95 1747.78,1214.95 1748.36,1214.95 1748.95,1214.95 1749.53,1214.95 1750.12,1214.95 1750.71,1214.95 1751.29,1214.95 1751.88,1214.95 1752.47,1214.95 1753.05,1214.95 1753.64,1214.95 1754.23,1214.95 1754.81,1214.95 1755.4,1214.95 1755.99,1214.95 1756.57,1214.95 1757.16,1214.95 1757.74,1214.95 1758.33,1214.95 1758.92,1214.95 1759.5,1214.95 1760.09,1214.95 1760.68,1214.95 1761.26,1214.95 1761.85,1214.95 1762.44,1214.95 1763.02,1214.95 1763.61,1214.95 1764.19,1214.95 1764.78,1214.95 1765.37,1214.95 1765.95,1214.95 1766.54,1214.95 1767.13,1214.95 1767.71,1214.95 1768.3,1214.95 1768.89,1214.95 1769.47,1214.95 1770.06,1214.95 1770.65,1214.95 1771.23,1214.95 1771.82,1214.95 1772.4,1214.95 1772.99,1214.95 1773.58,1214.95 1774.16,1214.95 1774.75,1214.95 1775.34,1214.95 1775.92,1214.95 1776.51,1214.95 1777.1,1214.95 1777.68,1214.95 1778.27,1214.95 1778.86,1214.95 1779.44,1214.95 1780.03,1214.95 1780.61,1214.95 1781.2,1214.95 1781.79,1214.95 1782.37,1214.95 1782.96,1214.95 1783.55,1214.95 1784.13,1214.95 1784.72,1214.95 1785.31,1214.95 1785.89,1214.95 1786.48,1214.95 1787.06,1214.95 1787.65,1214.95 1788.24,1214.95 1788.82,1214.95 1789.41,1214.95 1790,1214.95 1790.58,1214.95 1791.17,1214.95 1791.76,1214.95 1792.34,1214.95 1792.93,1214.95 1793.52,1214.95 1794.1,1214.95 1794.69,1214.95 1795.27,1214.95 1795.86,1214.95 1796.45,1214.95 1797.03,1214.95 1797.62,1214.95 1798.21,1214.95 1798.79,1214.95 1799.38,1214.95 1799.97,1214.95 1800.55,1214.95 1801.14,1214.95 1801.73,1214.95 1802.31,1214.95 1802.9,1214.95 1803.48,1214.95 1804.07,1214.95 1804.66,1214.95 1805.24,1214.95 1805.83,1214.95 1806.42,1214.95 1807,1214.95 1807.59,1214.95 1808.18,1214.95 1808.76,1214.95 1809.35,1214.95 1809.94,1214.95 1810.52,1214.95 1811.11,1214.95 1811.69,1214.95 1812.28,1214.95 1812.87,1214.95 1813.45,1214.95 1814.04,1214.95 1814.63,1214.95 1815.21,1214.95 1815.8,1214.95 1816.39,1214.95 1816.97,1214.95 1817.56,1214.95 1818.14,1214.95 1818.73,1214.95 1819.32,1214.95 1819.9,1214.95 1820.49,1214.95 1821.08,1214.95 1821.66,1214.95 1822.25,1214.95 1822.84,1214.95 1823.42,1214.95 1824.01,1214.95 1824.6,1214.95 1825.18,1214.95 1825.77,1214.95 1826.35,1214.95 1826.94,1214.95 1827.53,1214.95 1828.11,1214.95 1828.7,1214.95 1829.29,1214.95 1829.87,1214.95 1830.46,1214.95 1831.05,1214.95 1831.63,1214.95 1832.22,1214.95 1832.81,1214.95 1833.39,1214.95 1833.98,1214.95 1834.56,1214.95 1835.15,1214.95 1835.74,1214.95 1836.32,1214.95 1836.91,1214.95 1837.5,1214.95 1838.08,1214.95 1838.67,1214.95 1839.26,1214.95 1839.84,1214.95 1840.43,1214.95 1841.01,1214.95 1841.6,1214.95 1842.19,1214.95 1842.77,1214.95 1843.36,1214.95 1843.95,1214.95 1844.53,1214.95 1845.12,1214.95 1845.71,1214.95 1846.29,1214.95 1846.88,1214.95 1847.47,1214.95 1848.05,1214.95 1848.64,1214.95 1849.22,1214.95 1849.81,1214.95 1850.4,1214.95 1850.98,1214.95 1851.57,1214.95 1852.16,1214.95 1852.74,1214.95 1853.33,1214.95 1853.92,1214.95 1854.5,1214.95 1855.09,1214.95 1855.68,1214.95 1856.26,1214.95 1856.85,1214.95 1857.43,1214.95 1858.02,1214.95 1858.61,1214.95 1859.19,1214.95 1859.78,1214.95 1860.37,1214.95 1860.95,1214.95 1861.54,1214.95 1862.13,1214.95 1862.71,1214.95 1863.3,1214.95 1863.88,1214.95 1864.47,1214.95 1865.06,1214.95 1865.64,1214.95 1866.23,1214.95 1866.82,1214.95 1867.4,1214.95 1867.99,1214.95 1868.58,1214.95 1869.16,1214.95 1869.75,1214.95 1870.34,1214.95 1870.92,1214.95 1871.51,1214.95 1872.09,1214.95 1872.68,1214.95 1873.27,1214.95 1873.85,1214.95 1874.44,1214.95 1875.03,1214.95 1875.61,1214.95 1876.2,1214.95 1876.79,1214.95 1877.37,1214.95 1877.96,1214.95 1878.55,1214.95 1879.13,1214.95 1879.72,1214.95 1880.3,1214.95 1880.89,1214.95 1881.48,1214.95 1882.06,1214.95 1882.65,1214.95 1883.24,1214.95 1883.82,1214.95 1884.41,1214.95 1885,1214.95 1885.58,1214.95 1886.17,1214.95 1886.76,1214.95 1887.34,1214.95 1887.93,1214.95 1888.51,1214.95 1889.1,1214.95 1889.69,1214.95 1890.27,1214.95 1890.86,1214.95 1891.45,1214.95 1892.03,1214.95 1892.62,1214.95 1893.21,1214.95 1893.79,1214.95 1894.38,1214.95 1894.96,1214.95 1895.55,1214.95 1896.14,1214.95 1896.72,1214.95 1897.31,1214.95 1897.9,1214.95 1898.48,1214.95 1899.07,1214.95 1899.66,1214.95 1900.24,1214.95 1900.83,1214.95 1901.42,1214.95 1902,1214.95 1902.59,1214.95 1903.17,1214.95 1903.76,1214.95 1904.35,1214.95 1904.93,1214.95 1905.52,1214.95 1906.11,1214.95 1906.69,1214.95 1907.28,1214.95 1907.87,1214.95 1908.45,1214.95 1909.04,1214.95 1909.63,1214.95 1910.21,1214.95 1910.8,1214.95 1911.38,1214.95 1911.97,1214.95 1912.56,1214.95 1913.14,1214.95 1913.73,1214.95 1914.32,1214.95 1914.9,1214.95 1915.49,1214.95 1916.08,1214.95 1916.66,1214.95 1917.25,1214.95 1917.83,1214.95 1918.42,1214.95 1919.01,1214.95 1919.59,1214.95 1920.18,1214.95 1920.77,1214.95 1921.35,1214.95 1921.94,1214.95 1922.53,1214.95 1923.11,1214.95 1923.7,1214.95 1924.29,1214.95 1924.87,1214.95 1925.46,1214.95 1926.04,1214.95 1926.63,1214.95 1927.22,1214.95 1927.8,1214.95 1928.39,1214.95 1928.98,1214.95 1929.56,1214.95 1930.15,1214.95 1930.74,1214.95 1931.32,1214.95 1931.91,1214.95 1932.5,1214.95 1933.08,1214.95 1933.67,1214.95 1934.25,1214.95 1934.84,1214.95 1935.43,1214.95 1936.01,1214.95 1936.6,1214.95 1937.19,1214.95 1937.77,1214.95 1938.36,1214.95 1938.95,1214.95 1939.53,1214.95 1940.12,1214.95 1940.71,1214.95 1941.29,1214.95 1941.88,1214.95 1942.46,1214.95 1943.05,1214.95 1943.64,1214.95 1944.22,1214.95 1944.81,1214.95 1945.4,1214.95 1945.98,1214.95 1946.57,1214.95 1947.16,1214.95 1947.74,1214.95 1948.33,1214.95 1948.91,1214.95 1949.5,1214.95 1950.09,1214.95 1950.67,1214.95 1951.26,1214.95 1951.85,1214.95 1952.43,1214.95 1953.02,1214.95 1953.61,1214.95 1954.19,1214.95 1954.78,1214.95 1955.37,1214.95 1955.95,1214.95 1956.54,1214.95 1957.12,1214.95 1957.71,1214.95 1958.3,1214.95 1958.88,1214.95 1959.47,1214.95 1960.06,1214.95 1960.64,1214.95 1961.23,1214.95 1961.82,1214.95 1962.4,1214.95 1962.99,1214.95 1963.58,1214.95 1964.16,1214.95 1964.75,1214.95 1965.33,1214.95 1965.92,1214.95 1966.51,1214.95 1967.09,1214.95 1967.68,1214.95 1968.27,1214.95 1968.85,1214.95 1969.44,1214.95 1970.03,1214.95 1970.61,1214.95 1971.2,1214.95 1971.78,1214.95 1972.37,1214.95 1972.96,1214.95 1973.54,1214.95 1974.13,1214.95 1974.72,1214.95 1975.3,1214.95 1975.89,1214.95 1976.48,1214.95 1977.06,1214.95 1977.65,1214.95 1978.24,1214.95 1978.82,1214.95 1979.41,1214.95 1979.99,1214.95 1980.58,1214.95 1981.17,1214.95 1981.75,1214.95 1982.34,1214.95 1982.93,1214.95 1983.51,1214.95 1984.1,1214.95 1984.69,1214.95 1985.27,1214.95 1985.86,1214.95 1986.45,1214.95 1987.03,1214.95 1987.62,1214.95 1988.2,1214.95 1988.79,1214.95 1989.38,1214.95 1989.96,1214.95 1990.55,1214.95 1991.14,1214.95 1991.72,1214.95 1992.31,1214.95 1992.9,1214.95 1993.48,1214.95 1994.07,1214.95 1994.65,1214.95 1995.24,1214.95 1995.83,1214.95 1996.41,1214.95 1997,1214.95 1997.59,1214.95 1998.17,1214.95 1998.76,1214.95 1999.35,1214.95 1999.93,1214.95 2000.52,1214.95 2001.11,1214.95 2001.69,1214.95 2002.28,1214.95 2002.86,1214.95 2003.45,1214.95 2004.04,1214.95 2004.62,1214.95 2005.21,1214.95 2005.8,1214.95 2006.38,1214.95 2006.97,1214.95 2007.56,1214.95 2008.14,1214.95 2008.73,1214.95 2009.32,1214.95 2009.9,1214.95 2010.49,1214.95 2011.07,1214.95 2011.66,1214.95 2012.25,1214.95 2012.83,1214.95 2013.42,1214.95 2014.01,1214.95 2014.59,1214.95 2015.18,1214.95 2015.77,1214.95 2016.35,1214.95 2016.94,1214.95 2017.53,1214.95 2018.11,1214.95 2018.7,1214.95 2019.28,1214.95 2019.87,1214.95 2020.46,1214.95 2021.04,1214.95 2021.63,1214.95 2022.22,1214.95 2022.8,1214.95 2023.39,1214.95 2023.98,1214.95 2024.56,1214.95 2025.15,1214.95 2025.73,1214.95 2026.32,1214.95 2026.91,1214.95 2027.49,1214.95 2028.08,1214.95 2028.67,1214.95 2029.25,1214.95 2029.84,1214.95 2030.43,1214.95 2031.01,1214.95 2031.6,1214.95 2032.19,1214.95 2032.77,1214.95 2033.36,1214.95 2033.94,1214.95 2034.53,1214.95 2035.12,1214.95 2035.7,1214.95 2036.29,1214.95 2036.88,1214.95 2037.46,1214.95 2038.05,1214.95 2038.64,1214.95 2039.22,1214.95 2039.81,1214.95 2040.4,1214.95 2040.98,1214.95 2041.57,1214.95 2042.15,1214.95 2042.74,1214.95 2043.33,1214.95 2043.91,1214.95 2044.5,1214.95 2045.09,1214.95 2045.67,1214.95 2046.26,1214.95 2046.85,1214.95 2047.43,1214.95 2048.02,1214.95 2048.6,1214.95 2049.19,1214.95 2049.78,1214.95 2050.36,1214.95 2050.95,1214.95 2051.54,1214.95 2052.12,1214.95 2052.71,1214.95 2053.3,1214.95 2053.88,1214.95 2054.47,1214.95 2055.06,1214.95 2055.64,1214.95 2056.23,1214.95 2056.81,1214.95 2057.4,1214.95 2057.99,1214.95 2058.57,1214.95 2059.16,1214.95 2059.75,1214.95 2060.33,1214.95 2060.92,1214.95 2061.51,1214.95 2062.09,1214.95 2062.68,1214.95 2063.27,1214.95 2063.85,1214.95 2064.44,1214.95 2065.02,1214.95 2065.61,1214.95 2066.2,1214.95 2066.78,1214.95 2067.37,1214.95 2067.96,1214.95 2068.54,1214.95 2069.13,1214.95 2069.72,1214.95 2070.3,1214.95 2070.89,1214.95 2071.48,1214.95 2072.06,1214.95 2072.65,1214.95 2073.23,1214.95 2073.82,1214.95 2074.41,1214.95 2074.99,1214.95 2075.58,1214.95 2076.17,1214.95 2076.75,1214.95 2077.34,1214.95 2077.93,1214.95 2078.51,1214.95 2079.1,1214.95 2079.68,1214.95 2080.27,1214.95 2080.86,1214.95 2081.44,1214.95 2082.03,1214.95 2082.62,1214.95 2083.2,1214.95 2083.79,1214.95 2084.38,1214.95 2084.96,1214.95 2085.55,1214.95 2086.14,1214.95 2086.72,1214.95 2087.31,1214.95 2087.89,1214.95 2088.48,1214.95 2089.07,1214.95 2089.65,1214.95 2090.24,1214.95 2090.83,1214.95 2091.41,1214.95 2092,1214.95 2092.59,1214.95 2093.17,1214.95 2093.76,1214.95 2094.35,1214.95 2094.93,1214.95 2095.52,1214.95 2096.1,1214.95 2096.69,1214.95 2097.28,1214.95 2097.86,1214.95 2098.45,1214.95 2099.04,1214.95 2099.62,1214.95 2100.21,1214.95 2100.8,1214.95 2101.38,1214.95 2101.97,1214.95 2102.55,1214.95 2103.14,1214.95 2103.73,1214.95 2104.31,1214.95 2104.9,1214.95 2105.49,1214.95 2106.07,1214.95 2106.66,1214.95 2107.25,1214.95 2107.83,1214.95 2108.42,1214.95 2109.01,1214.95 2109.59,1214.95 2110.18,1214.95 2110.76,1214.95 2111.35,1214.95 2111.94,1214.95 2112.52,1214.95 2113.11,1214.95 2113.7,1214.95 2114.28,1214.95 2114.87,1214.95 2115.46,1214.95 2116.04,1214.95 2116.63,1214.95 2117.22,1214.95 2117.8,1214.95 2118.39,1214.95 2118.97,1214.95 2119.56,1214.95 2120.15,1214.95 2120.73,1214.95 2121.32,1214.95 2121.91,1214.95 2122.49,1214.95 2123.08,1214.95 2123.67,1214.95 2124.25,1214.95 2124.84,1214.95 2125.42,1214.95 2126.01,1214.95 2126.6,1214.95 2127.18,1214.95 2127.77,1214.95 2128.36,1214.95 2128.94,1214.95 2129.53,1214.95 2130.12,1214.95 2130.7,1214.95 2131.29,1214.95 2131.88,1214.95 2132.46,1214.95 2133.05,1214.95 2133.63,1214.95 2134.22,1214.95 2134.81,1214.95 2135.39,1214.95 2135.98,1214.95 2136.57,1214.95 2137.15,1214.95 2137.74,1214.95 2138.33,1214.95 2138.91,1214.95 2139.5,1214.95 2140.09,1214.95 2140.67,1214.95 2141.26,1214.95 2141.84,1214.95 2142.43,1214.95 2143.02,1214.95 2143.6,1214.95 2144.19,1214.95 2144.78,1214.95 2145.36,1214.95 2145.95,1214.95 2146.54,1214.95 2147.12,1214.95 2147.71,1214.95 2148.3,1214.95 2148.88,1214.95 2149.47,1214.95 2150.05,1214.95 2150.64,1214.95 2151.23,1214.95 2151.81,1214.95 2152.4,1214.95 2152.99,1214.95 2153.57,1214.95 2154.16,1214.95 2154.75,1214.95 2155.33,1214.95 2155.92,1214.95 2156.5,1214.95 2157.09,1214.95 2157.68,1214.95 2158.26,1214.95 \"/>\n<path clip-path=\"url(#clip532)\" d=\"M986.025 1214.85 L986.612 1214.85 L987.198 1214.85 L987.785 1214.85 L988.371 1214.85 L988.957 1214.85 L989.544 1214.85 L990.13 1214.85 L990.717 1214.85 L991.303 1214.85 L991.889 1214.85 L992.476 1214.85 L993.062 1214.85 L993.649 1214.85 L994.235 1214.85 L994.822 1214.85 L995.408 1214.85 L995.994 1214.85 L996.581 1214.85 L997.167 1214.85 L997.754 1214.85 L998.34 1214.85 L998.926 1214.85 L999.513 1214.85 L1000.1 1214.85 L1000.69 1214.85 L1001.27 1214.85 L1001.86 1214.85 L1002.44 1214.85 L1003.03 1214.85 L1003.62 1214.85 L1004.2 1214.85 L1004.79 1214.85 L1005.38 1214.85 L1005.96 1214.85 L1006.55 1214.85 L1007.14 1214.85 L1007.72 1214.85 L1008.31 1214.85 L1008.9 1214.85 L1009.48 1214.85 L1010.07 1214.85 L1010.65 1214.85 L1011.24 1214.85 L1011.83 1214.85 L1012.41 1214.85 L1013 1214.85 L1013.59 1214.85 L1014.17 1214.85 L1014.76 1214.85 L1015.35 1214.85 L1015.93 1214.85 L1016.52 1214.85 L1017.11 1214.85 L1017.69 1214.85 L1018.28 1214.85 L1018.86 1214.85 L1019.45 1214.85 L1020.04 1214.85 L1020.62 1214.85 L1021.21 1214.85 L1021.8 1214.85 L1022.38 1214.85 L1022.97 1214.85 L1023.56 1214.85 L1024.14 1214.85 L1024.73 1214.85 L1025.32 1214.85 L1025.9 1214.85 L1026.49 1214.85 L1027.07 1214.85 L1027.66 1214.85 L1028.25 1214.85 L1028.83 1214.85 L1029.42 1214.85 L1030.01 1214.85 L1030.59 1214.85 L1031.18 1214.85 L1031.77 1214.85 L1032.35 1214.85 L1032.94 1214.85 L1033.52 1214.85 L1034.11 1214.85 L1034.7 1214.85 L1035.28 1214.85 L1035.87 1214.85 L1036.46 1214.85 L1037.04 1214.85 L1037.63 1214.85 L1038.22 1214.85 L1038.8 1214.85 L1039.39 1214.85 L1039.98 1214.85 L1040.56 1214.85 L1041.15 1214.85 L1041.73 1214.85 L1042.32 1214.85 L1042.91 1214.85 L1043.49 1214.85 L1044.08 1214.85 L1044.67 1214.85 L1045.25 1214.85 L1045.84 1214.85 L1046.43 1214.85 L1047.01 1214.85 L1047.6 1214.85 L1048.19 1214.85 L1048.77 1214.85 L1049.36 1214.85 L1049.94 1214.85 L1050.53 1214.85 L1051.12 1214.85 L1051.7 1214.85 L1052.29 1214.85 L1052.88 1214.85 L1053.46 1214.85 L1054.05 1214.85 L1054.64 1214.85 L1055.22 1214.85 L1055.81 1214.85 L1056.39 1214.85 L1056.98 1214.85 L1057.57 1214.85 L1058.15 1214.85 L1058.74 1214.85 L1059.33 1214.85 L1059.91 1214.85 L1060.5 1214.85 L1061.09 1214.85 L1061.67 1214.85 L1062.26 1214.85 L1062.85 1214.85 L1063.43 1214.85 L1064.02 1214.85 L1064.6 1214.85 L1065.19 1214.85 L1065.78 1214.85 L1066.36 1214.85 L1066.95 1214.85 L1067.54 1214.85 L1068.12 1214.85 L1068.71 1214.85 L1069.3 1214.85 L1069.88 1214.85 L1070.47 1214.85 L1071.06 1214.85 L1071.64 1214.85 L1072.23 1214.85 L1072.81 1214.85 L1073.4 1214.85 L1073.99 1214.85 L1074.57 1214.85 L1075.16 1214.85 L1075.75 1214.85 L1076.33 1214.85 L1076.92 1214.85 L1077.51 1214.85 L1078.09 1214.85 L1078.68 1214.85 L1079.26 1214.85 L1079.85 1214.85 L1080.44 1214.85 L1081.02 1214.85 L1081.61 1214.85 L1082.2 1214.85 L1082.78 1214.85 L1083.37 1214.85 L1083.96 1214.85 L1084.54 1214.85 L1085.13 1214.85 L1085.72 1214.85 L1086.3 1214.85 L1086.89 1214.85 L1087.47 1214.85 L1088.06 1214.85 L1088.65 1214.85 L1089.23 1214.85 L1089.82 1214.85 L1090.41 1214.85 L1090.99 1214.85 L1091.58 1214.85 L1092.17 1214.85 L1092.75 1214.85 L1093.34 1214.85 L1093.93 1214.85 L1094.51 1214.85 L1095.1 1214.85 L1095.68 1214.85 L1096.27 1214.85 L1096.86 1214.85 L1097.44 1214.85 L1098.03 1214.85 L1098.62 1214.85 L1099.2 1214.85 L1099.79 1214.85 L1100.38 1214.85 L1100.96 1214.85 L1101.55 1214.85 L1102.14 1214.85 L1102.72 1214.85 L1103.31 1214.85 L1103.89 1214.85 L1104.48 1214.85 L1105.07 1214.85 L1105.65 1214.85 L1106.24 1214.85 L1106.83 1214.85 L1107.41 1214.85 L1108 1214.85 L1108.59 1214.85 L1109.17 1214.85 L1109.76 1214.85 L1110.34 1214.85 L1110.93 1214.85 L1111.52 1214.85 L1112.1 1214.85 L1112.69 1214.85 L1113.28 1214.85 L1113.86 1214.85 L1114.45 1214.85 L1115.04 1214.85 L1115.62 1214.85 L1116.21 1214.85 L1116.8 1214.85 L1117.38 1214.85 L1117.97 1214.85 L1118.55 1214.85 L1119.14 1214.85 L1119.73 1214.85 L1120.31 1214.85 L1120.9 1214.85 L1121.49 1214.85 L1122.07 1214.85 L1122.66 1214.85 L1123.25 1214.85 L1123.83 1214.85 L1124.42 1214.85 L1125.01 1214.85 L1125.59 1214.85 L1126.18 1214.85 L1126.76 1214.85 L1127.35 1214.85 L1127.94 1214.85 L1128.52 1214.85 L1129.11 1214.85 L1129.7 1214.85 L1130.28 1214.85 L1130.87 1214.85 L1131.46 1214.85 L1132.04 1214.85 L1132.63 1214.85 L1133.21 1214.85 L1133.8 1214.85 L1134.39 1214.85 L1134.97 1214.85 L1135.56 1214.85 L1136.15 1214.85 L1136.73 1214.85 L1137.32 1214.85 L1137.91 1214.85 L1138.49 1214.85 L1139.08 1214.85 L1139.67 1214.85 L1140.25 1214.85 L1140.84 1214.85 L1141.42 1214.85 L1142.01 1214.85 L1142.6 1214.85 L1143.18 1214.85 L1143.77 1214.85 L1144.36 1214.85 L1144.94 1214.85 L1145.53 1214.85 L1146.12 1214.85 L1146.7 1214.85 L1147.29 1214.85 L1147.88 1214.85 L1148.46 1214.85 L1149.05 1214.85 L1149.63 1214.85 L1150.22 1214.85 L1150.81 1214.85 L1151.39 1214.85 L1151.98 1214.85 L1152.57 1214.85 L1153.15 1214.85 L1153.74 1214.85 L1154.33 1214.85 L1154.91 1214.85 L1155.5 1214.85 L1156.09 1214.85 L1156.67 1214.85 L1157.26 1214.85 L1157.84 1214.85 L1158.43 1214.85 L1159.02 1214.85 L1159.6 1214.85 L1160.19 1214.85 L1160.78 1214.85 L1161.36 1214.85 L1161.95 1214.85 L1162.54 1214.85 L1163.12 1214.85 L1163.71 1214.85 L1164.29 1214.85 L1164.88 1214.85 L1165.47 1214.85 L1166.05 1214.85 L1166.64 1214.85 L1167.23 1214.85 L1167.81 1214.85 L1168.4 1214.85 L1168.99 1214.85 L1169.57 1214.85 L1170.16 1214.85 L1170.75 1214.85 L1171.33 1214.85 L1171.92 1214.85 L1172.5 1214.85 L1173.09 1214.85 L1173.68 1214.85 L1174.26 1214.85 L1174.85 1214.85 L1175.44 1214.85 L1176.02 1214.85 L1176.61 1214.85 L1177.2 1214.85 L1177.78 1214.85 L1178.37 1214.85 L1178.96 1214.85 L1179.54 1214.85 L1180.13 1214.85 L1180.71 1214.85 L1181.3 1214.85 L1181.89 1214.85 L1182.47 1214.85 L1183.06 1214.85 L1183.65 1214.85 L1184.23 1214.85 L1184.82 1214.85 L1185.41 1214.85 L1185.99 1214.85 L1186.58 1214.85 L1187.16 1214.85 L1187.75 1214.85 L1188.34 1214.85 L1188.92 1214.85 L1189.51 1214.85 L1190.1 1214.85 L1190.68 1214.85 L1191.27 1214.85 L1191.86 1214.85 L1192.44 1214.85 L1193.03 1214.85 L1193.62 1214.85 L1194.2 1214.85 L1194.79 1214.85 L1195.37 1214.85 L1195.96 1214.85 L1196.55 1214.85 L1197.13 1214.85 L1197.72 1214.85 L1198.31 1214.85 L1198.89 1214.85 L1199.48 1214.85 L1200.07 1214.85 L1200.65 1214.85 L1201.24 1214.85 L1201.83 1214.85 L1202.41 1214.85 L1203 1214.85 L1203.58 1214.85 L1204.17 1214.85 L1204.76 1214.85 L1205.34 1214.85 L1205.93 1214.85 L1206.52 1214.85 L1207.1 1214.85 L1207.69 1214.85 L1208.28 1214.85 L1208.86 1214.85 L1209.45 1214.85 L1210.03 1214.85 L1210.62 1214.85 L1211.21 1214.85 L1211.79 1214.85 L1212.38 1214.85 L1212.97 1214.85 L1213.55 1214.85 L1214.14 1214.85 L1214.73 1214.85 L1215.31 1214.85 L1215.9 1214.85 L1216.49 1214.85 L1217.07 1214.85 L1217.66 1214.85 L1218.24 1214.85 L1218.83 1214.85 L1219.42 1214.85 L1220 1214.85 L1220.59 1214.85 L1221.18 1214.85 L1221.76 1214.85 L1222.35 1214.85 L1222.94 1214.85 L1223.52 1214.85 L1224.11 1214.85 L1224.7 1214.85 L1225.28 1214.85 L1225.87 1214.85 L1226.45 1214.85 L1227.04 1214.85 L1227.63 1214.85 L1228.21 1214.85 L1228.8 1214.85 L1229.39 1214.85 L1229.97 1214.85 L1230.56 1214.85 L1231.15 1214.85 L1231.73 1214.85 L1232.32 1214.85 L1232.91 1214.85 L1233.49 1214.85 L1234.08 1214.85 L1234.66 1214.85 L1235.25 1214.85 L1235.84 1214.85 L1236.42 1214.85 L1237.01 1214.85 L1237.6 1214.85 L1238.18 1214.85 L1238.77 1214.85 L1239.36 1214.85 L1239.94 1214.85 L1240.53 1214.85 L1241.11 1214.85 L1241.7 1214.85 L1242.29 1214.85 L1242.87 1214.85 L1243.46 1214.85 L1244.05 1214.85 L1244.63 1214.85 L1245.22 1214.85 L1245.81 1214.85 L1246.39 1214.85 L1246.98 1214.85 L1247.57 1214.85 L1248.15 1214.85 L1248.74 1214.85 L1249.32 1214.85 L1249.91 1214.85 L1250.5 1214.85 L1251.08 1214.85 L1251.67 1214.85 L1252.26 1214.85 L1252.84 1214.85 L1253.43 1214.85 L1254.02 1214.85 L1254.6 1214.85 L1255.19 1214.85 L1255.78 1214.85 L1256.36 1214.85 L1256.95 1214.85 L1257.53 1214.85 L1258.12 1214.85 L1258.71 1214.85 L1259.29 1214.85 L1259.88 1214.85 L1260.47 1214.85 L1261.05 1214.85 L1261.64 1214.85 L1262.23 1214.85 L1262.81 1214.85 L1263.4 1214.85 L1263.98 1214.85 L1264.57 1214.85 L1265.16 1214.85 L1265.74 1214.85 L1266.33 1214.85 L1266.92 1214.85 L1267.5 1214.85 L1268.09 1214.85 L1268.68 1214.85 L1269.26 1214.85 L1269.85 1214.85 L1270.44 1214.85 L1271.02 1214.85 L1271.61 1214.85 L1272.19 1214.85 L1272.78 1214.85 L1273.37 1214.85 L1273.95 1214.85 L1274.54 1214.85 L1275.13 1214.85 L1275.71 1214.85 L1276.3 1214.85 L1276.89 1214.85 L1277.47 1214.85 L1278.06 1214.85 L1278.65 1214.85 L1279.23 1214.85 L1279.82 1214.85 L1280.4 1214.85 L1280.99 1214.85 L1281.58 1214.85 L1282.16 1214.85 L1282.75 1214.85 L1283.34 1214.85 L1283.92 1214.85 L1284.51 1214.85 L1285.1 1214.85 L1285.68 1214.85 L1286.27 1214.85 L1286.86 1214.85 L1287.44 1214.85 L1288.03 1214.85 L1288.61 1214.85 L1289.2 1214.85 L1289.79 1214.85 L1290.37 1214.85 L1290.96 1214.85 L1291.55 1214.85 L1292.13 1214.85 L1292.72 1214.85 L1293.31 1214.85 L1293.89 1214.85 L1294.48 1214.85 L1295.06 1214.85 L1295.65 1214.85 L1296.24 1214.85 L1296.82 1214.85 L1297.41 1214.85 L1298 1214.85 L1298.58 1214.85 L1299.17 1214.85 L1299.76 1214.85 L1300.34 1214.85 L1300.93 1214.85 L1301.52 1214.85 L1302.1 1214.85 L1302.69 1214.85 L1303.27 1214.85 L1303.86 1214.85 L1304.45 1214.85 L1305.03 1214.85 L1305.62 1214.85 L1306.21 1214.85 L1306.79 1214.85 L1307.38 1214.85 L1307.97 1214.85 L1308.55 1214.85 L1309.14 1214.85 L1309.73 1214.85 L1310.31 1214.85 L1310.9 1214.85 L1311.48 1214.85 L1312.07 1214.85 L1312.66 1214.85 L1313.24 1214.85 L1313.83 1214.85 L1314.42 1214.85 L1315 1214.85 L1315.59 1214.85 L1316.18 1214.85 L1316.76 1214.85 L1317.35 1214.85 L1317.93 1214.85 L1318.52 1214.85 L1319.11 1214.85 L1319.69 1214.85 L1320.28 1214.85 L1320.87 1214.85 L1321.45 1214.85 L1322.04 1214.85 L1322.63 1214.85 L1323.21 1214.85 L1323.8 1214.85 L1324.39 1214.85 L1324.97 1214.85 L1325.56 1214.85 L1326.14 1214.85 L1326.73 1214.85 L1327.32 1214.85 L1327.9 1214.85 L1328.49 1214.85 L1329.08 1214.85 L1329.66 1214.85 L1330.25 1214.85 L1330.84 1214.85 L1331.42 1214.85 L1332.01 1214.85 L1332.6 1214.85 L1333.18 1214.85 L1333.77 1214.85 L1334.35 1214.85 L1334.94 1214.85 L1335.53 1214.85 L1336.11 1214.85 L1336.7 1214.85 L1337.29 1214.85 L1337.87 1214.85 L1338.46 1214.85 L1339.05 1214.85 L1339.63 1214.85 L1340.22 1214.85 L1340.8 1214.85 L1341.39 1214.85 L1341.98 1214.85 L1342.56 1214.85 L1343.15 1214.85 L1343.74 1214.85 L1344.32 1214.85 L1344.91 1214.85 L1345.5 1214.85 L1346.08 1214.85 L1346.67 1214.85 L1347.26 1214.85 L1347.84 1214.85 L1348.43 1214.85 L1349.01 1214.85 L1349.6 1214.85 L1350.19 1214.85 L1350.77 1214.85 L1351.36 1214.85 L1351.95 1214.85 L1352.53 1214.85 L1353.12 1214.85 L1353.71 1214.85 L1354.29 1214.85 L1354.88 1214.85 L1355.47 1214.85 L1356.05 1214.85 L1356.64 1214.85 L1357.22 1214.85 L1357.81 1214.85 L1358.4 1214.85 L1358.98 1214.85 L1359.57 1214.85 L1360.16 1214.85 L1360.74 1214.85 L1361.33 1214.85 L1361.92 1214.85 L1362.5 1214.85 L1363.09 1214.85 L1363.68 1214.85 L1364.26 1214.85 L1364.85 1214.85 L1365.43 1214.85 L1366.02 1214.85 L1366.61 1214.85 L1367.19 1214.85 L1367.78 1214.85 L1368.37 1214.85 L1368.95 1214.85 L1369.54 1214.85 L1370.13 1214.85 L1370.71 1214.85 L1371.3 1214.85 L1371.88 1214.85 L1372.47 1214.85 L1373.06 1214.85 L1373.64 1214.85 L1374.23 1214.85 L1374.82 1214.85 L1375.4 1214.85 L1375.99 1214.85 L1376.58 1214.85 L1377.16 1214.85 L1377.75 1214.85 L1378.34 1214.85 L1378.92 1214.85 L1379.51 1214.85 L1380.09 1214.85 L1380.68 1214.85 L1381.27 1214.85 L1381.85 1214.85 L1382.44 1214.85 L1383.03 1214.85 L1383.61 1214.85 L1384.2 1214.85 L1384.79 1214.85 L1385.37 1214.85 L1385.96 1214.85 L1386.55 1214.85 L1387.13 1214.85 L1387.72 1214.85 L1388.3 1214.85 L1388.89 1214.85 L1389.48 1214.85 L1390.06 1214.85 L1390.65 1214.85 L1391.24 1214.85 L1391.82 1214.85 L1392.41 1214.85 L1393 1214.85 L1393.58 1214.85 L1394.17 1214.85 L1394.75 1214.85 L1395.34 1214.85 L1395.93 1214.85 L1396.51 1214.85 L1397.1 1214.85 L1397.69 1214.85 L1398.27 1214.85 L1398.86 1214.85 L1399.45 1214.85 L1400.03 1214.85 L1400.62 1214.85 L1401.21 1214.85 L1401.79 1214.85 L1402.38 1214.85 L1402.96 1214.85 L1403.55 1214.85 L1404.14 1214.85 L1404.72 1214.85 L1405.31 1214.85 L1405.9 1214.85 L1406.48 1214.85 L1407.07 1214.85 L1407.66 1214.85 L1408.24 1214.85 L1408.83 1214.85 L1409.42 1214.85 L1410 1214.85 L1410.59 1214.85 L1411.17 1214.85 L1411.76 1214.85 L1412.35 1214.85 L1412.93 1214.85 L1413.52 1214.85 L1414.11 1214.85 L1414.69 1214.85 L1415.28 1214.85 L1415.87 1214.85 L1416.45 1214.85 L1417.04 1214.85 L1417.63 1214.85 L1418.21 1214.85 L1418.8 1214.85 L1419.38 1214.85 L1419.97 1214.85 L1420.56 1214.85 L1421.14 1214.85 L1421.73 1214.85 L1422.32 1214.85 L1422.9 1214.85 L1423.49 1214.85 L1424.08 1214.85 L1424.66 1214.85 L1425.25 1214.85 L1425.83 1214.85 L1426.42 1214.85 L1427.01 1214.85 L1427.59 1214.85 L1428.18 1214.85 L1428.77 1214.85 L1429.35 1214.85 L1429.94 1214.85 L1430.53 1214.85 L1431.11 1214.85 L1431.7 1214.85 L1432.29 1214.85 L1432.87 1214.85 L1433.46 1214.85 L1434.04 1214.85 L1434.63 1214.85 L1435.22 1214.85 L1435.8 1214.85 L1436.39 1214.85 L1436.98 1214.85 L1437.56 1214.85 L1438.15 1214.85 L1438.74 1214.85 L1439.32 1214.85 L1439.91 1214.85 L1440.5 1214.85 L1441.08 1214.85 L1441.67 1214.85 L1442.25 1214.85 L1442.84 1214.85 L1443.43 1214.85 L1444.01 1214.85 L1444.6 1214.85 L1445.19 1214.85 L1445.77 1214.85 L1446.36 1214.85 L1446.95 1214.85 L1447.53 1214.85 L1448.12 1214.85 L1448.7 1214.85 L1449.29 1214.85 L1449.88 1214.85 L1450.46 1214.85 L1451.05 1214.85 L1451.64 1214.85 L1452.22 1214.85 L1452.81 1214.85 L1453.4 1214.85 L1453.98 1214.85 L1454.57 1214.85 L1455.16 1214.85 L1455.74 1214.85 L1456.33 1214.85 L1456.91 1214.85 L1457.5 1214.85 L1458.09 1214.85 L1458.67 1214.85 L1459.26 1214.85 L1459.85 1214.85 L1460.43 1214.85 L1461.02 1214.85 L1461.61 1214.85 L1462.19 1214.85 L1462.78 1214.85 L1463.37 1214.85 L1463.95 1214.85 L1464.54 1214.85 L1465.12 1214.85 L1465.71 1214.85 L1466.3 1214.85 L1466.88 1214.85 L1467.47 1214.85 L1468.06 1214.85 L1468.64 1214.85 L1469.23 1214.85 L1469.82 1214.85 L1470.4 1214.85 L1470.99 1214.85 L1471.57 1214.85 L1472.16 1214.85 L1472.75 1214.85 L1473.33 1214.85 L1473.92 1214.85 L1474.51 1214.85 L1475.09 1214.85 L1475.68 1214.85 L1476.27 1214.85 L1476.85 1214.85 L1477.44 1214.85 L1478.03 1214.85 L1478.61 1214.85 L1479.2 1214.85 L1479.78 1214.85 L1480.37 1214.85 L1480.96 1214.85 L1481.54 1214.85 L1482.13 1214.85 L1482.72 1214.85 L1483.3 1214.85 L1483.89 1214.85 L1484.48 1214.85 L1485.06 1214.85 L1485.65 1214.85 L1486.24 1214.85 L1486.82 1214.85 L1487.41 1214.85 L1487.99 1214.85 L1488.58 1214.85 L1489.17 1214.85 L1489.75 1214.85 L1490.34 1214.85 L1490.93 1214.85 L1491.51 1214.85 L1492.1 1214.85 L1492.69 1214.85 L1493.27 1214.85 L1493.86 1214.85 L1494.45 1214.85 L1495.03 1214.85 L1495.62 1214.85 L1496.2 1214.85 L1496.79 1214.85 L1497.38 1214.85 L1497.96 1214.85 L1498.55 1214.85 L1499.14 1214.85 L1499.72 1214.85 L1500.31 1214.85 L1500.9 1214.85 L1501.48 1214.85 L1502.07 1214.85 L1502.65 1214.85 L1503.24 1214.85 L1503.83 1214.85 L1504.41 1214.85 L1505 1214.85 L1505.59 1214.85 L1506.17 1214.85 L1506.76 1214.85 L1507.35 1214.85 L1507.93 1214.85 L1508.52 1214.85 L1509.11 1214.85 L1509.69 1214.85 L1510.28 1214.85 L1510.86 1214.85 L1511.45 1214.85 L1512.04 1214.85 L1512.62 1214.85 L1513.21 1214.85 L1513.8 1214.85 L1514.38 1214.85 L1514.97 1214.85 L1515.56 1214.85 L1516.14 1214.85 L1516.73 1214.85 L1517.32 1214.85 L1517.9 1214.85 L1518.49 1214.85 L1519.07 1214.85 L1519.66 1214.85 L1520.25 1214.85 L1520.83 1214.85 L1521.42 1214.85 L1522.01 1214.85 L1522.59 1214.85 L1523.18 1214.85 L1523.77 1214.85 L1524.35 1214.85 L1524.94 1214.85 L1525.52 1214.85 L1526.11 1214.85 L1526.7 1214.85 L1527.28 1214.85 L1527.87 1214.85 L1528.46 1214.85 L1529.04 1214.85 L1529.63 1214.85 L1530.22 1214.85 L1530.8 1214.85 L1531.39 1214.85 L1531.98 1214.85 L1532.56 1214.85 L1533.15 1214.85 L1533.73 1214.85 L1534.32 1214.85 L1534.91 1214.85 L1535.49 1214.85 L1536.08 1214.85 L1536.67 1214.85 L1537.25 1214.85 L1537.84 1214.85 L1538.43 1214.85 L1539.01 1214.85 L1539.6 1214.85 L1540.19 1214.85 L1540.77 1214.85 L1541.36 1214.85 L1541.94 1214.85 L1542.53 1214.85 L1543.12 1214.85 L1543.7 1214.85 L1544.29 1214.85 L1544.88 1214.85 L1545.46 1214.85 L1546.05 1214.85 L1546.64 1214.85 L1547.22 1214.85 L1547.81 1214.85 L1548.4 1214.85 L1548.98 1214.85 L1549.57 1214.85 L1550.15 1214.85 L1550.74 1214.85 L1551.33 1214.85 L1551.91 1214.85 L1552.5 1214.85 L1553.09 1214.85 L1553.67 1214.85 L1554.26 1214.85 L1554.85 1214.85 L1555.43 1214.85 L1556.02 1214.85 L1556.6 1214.85 L1557.19 1214.85 L1557.78 1214.85 L1558.36 1214.85 L1558.95 1214.85 L1559.54 1214.85 L1560.12 1214.85 L1560.71 1214.85 L1561.3 1214.85 L1561.88 1214.85 L1562.47 1214.85 L1563.06 1214.85 L1563.64 1214.85 L1564.23 1214.85 L1564.81 1214.85 L1565.4 1214.85 L1565.99 1214.85 L1566.57 1214.85 L1567.16 1214.85 L1567.75 1214.85 L1568.33 1214.85 L1568.92 1214.85 L1569.51 1214.85 L1570.09 1214.85 L1570.68 1214.85 L1571.27 1214.85 L1571.85 1214.85 L1572.44 1214.85 L1573.02 1214.85 L1573.61 1214.85 L1574.2 1214.85 L1574.78 1214.85 L1575.37 1214.85 L1575.96 1214.85 L1576.54 1214.85 L1577.13 1214.85 L1577.72 1214.85 L1578.3 1214.85 L1578.89 1214.85 L1579.47 1214.85 L1580.06 1214.85 L1580.65 1214.85 L1581.23 1214.85 L1581.82 1214.85 L1582.41 1214.85 L1582.99 1214.85 L1583.58 1214.85 L1584.17 1214.85 L1584.75 1214.85 L1585.34 1214.85 L1585.93 1214.85 L1586.51 1214.85 L1587.1 1214.85 L1587.68 1214.85 L1588.27 1214.85 L1588.86 1214.85 L1589.44 1214.85 L1590.03 1214.85 L1590.62 1214.85 L1591.2 1214.85 L1591.79 1214.85 L1592.38 1214.85 L1592.96 1214.85 L1593.55 1214.85 L1594.14 1214.85 L1594.72 1214.85 L1595.31 1214.85 L1595.89 1214.85 L1596.48 1214.85 L1597.07 1214.85 L1597.65 1214.85 L1598.24 1214.85 L1598.83 1214.85 L1599.41 1214.85 L1600 1214.85 L1600.59 1214.85 L1601.17 1214.85 L1601.76 1214.85 L1602.34 1214.85 L1602.93 1214.85 L1603.52 1214.85 L1604.1 1214.85 L1604.69 1214.85 L1605.28 1214.85 L1605.86 1214.85 L1606.45 1214.85 L1607.04 1214.85 L1607.62 1214.85 L1608.21 1214.85 L1608.8 1214.85 L1609.38 1214.85 L1609.97 1214.85 L1610.55 1214.85 L1611.14 1214.85 L1611.73 1214.85 L1612.31 1214.85 L1612.9 1214.85 L1613.49 1214.85 L1614.07 1214.85 L1614.66 1214.85 L1615.25 1214.85 L1615.83 1214.85 L1616.42 1214.85 L1617.01 1214.85 L1617.59 1214.85 L1618.18 1214.85 L1618.76 1214.85 L1619.35 1214.85 L1619.94 1214.85 L1620.52 1214.85 L1621.11 1214.85 L1621.7 1214.85 L1622.28 1214.85 L1622.87 1214.85 L1623.46 1214.85 L1624.04 1214.85 L1624.63 1214.85 L1625.22 1214.85 L1625.8 1214.85 L1626.39 1214.85 L1626.97 1214.85 L1627.56 1214.85 L1628.15 1214.85 L1628.73 1214.85 L1629.32 1214.85 L1629.91 1214.85 L1630.49 1214.85 L1631.08 1214.85 L1631.67 1214.85 L1632.25 1214.85 L1632.84 1214.85 L1633.42 1214.85 L1634.01 1214.85 L1634.6 1214.85 L1635.18 1214.85 L1635.77 1214.85 L1636.36 1214.85 L1636.94 1214.85 L1637.53 1214.85 L1638.12 1214.85 L1638.7 1214.85 L1639.29 1214.85 L1639.88 1214.85 L1640.46 1214.85 L1641.05 1214.85 L1641.63 1214.85 L1642.22 1214.85 L1642.81 1214.85 L1643.39 1214.85 L1643.98 1214.85 L1644.57 1214.85 L1645.15 1214.85 L1645.74 1214.85 L1646.33 1214.85 L1646.91 1214.85 L1647.5 1214.85 L1648.09 1214.85 L1648.67 1214.85 L1649.26 1214.85 L1649.84 1214.85 L1650.43 1214.85 L1651.02 1214.85 L1651.6 1214.85 L1652.19 1214.85 L1652.78 1214.85 L1653.36 1214.85 L1653.95 1214.85 L1654.54 1214.85 L1655.12 1214.85 L1655.71 1214.85 L1656.29 1214.85 L1656.88 1214.85 L1657.47 1214.85 L1658.05 1214.85 L1658.64 1214.85 L1659.23 1214.85 L1659.81 1214.85 L1660.4 1214.85 L1660.99 1214.85 L1661.57 1214.85 L1662.16 1214.85 L1662.75 1214.85 L1663.33 1214.85 L1663.92 1214.85 L1664.5 1214.85 L1665.09 1214.85 L1665.68 1214.85 L1666.26 1214.85 L1666.85 1214.85 L1667.44 1214.85 L1668.02 1214.85 L1668.61 1214.85 L1669.2 1214.85 L1669.78 1214.85 L1670.37 1214.85 L1670.96 1214.85 L1671.54 1214.85 L1672.13 1214.85 L1672.71 1214.85 L1673.3 1214.85 L1673.89 1214.85 L1674.47 1214.85 L1675.06 1214.85 L1675.65 1214.85 L1676.23 1214.85 L1676.82 1214.85 L1677.41 1214.85 L1677.99 1214.85 L1678.58 1214.85 L1679.17 1214.85 L1679.75 1214.85 L1680.34 1214.85 L1680.92 1214.85 L1681.51 1214.85 L1682.1 1214.85 L1682.68 1214.85 L1683.27 1214.85 L1683.86 1214.85 L1684.44 1214.85 L1685.03 1214.85 L1685.62 1214.85 L1686.2 1214.85 L1686.79 1214.85 L1687.37 1214.85 L1687.96 1214.85 L1688.55 1214.85 L1689.13 1214.85 L1689.72 1214.85 L1690.31 1214.85 L1690.89 1214.85 L1691.48 1214.85 L1692.07 1214.85 L1692.65 1214.85 L1693.24 1214.85 L1693.83 1214.85 L1694.41 1214.85 L1695 1214.85 L1695.58 1214.85 L1696.17 1214.85 L1696.76 1214.85 L1697.34 1214.85 L1697.93 1214.85 L1698.52 1214.85 L1699.1 1214.85 L1699.69 1214.85 L1700.28 1214.85 L1700.86 1214.85 L1701.45 1214.85 L1702.04 1214.85 L1702.62 1214.85 L1703.21 1214.85 L1703.79 1214.85 L1704.38 1214.85 L1704.97 1214.85 L1705.55 1214.85 L1706.14 1214.85 L1706.73 1214.85 L1707.31 1214.85 L1707.9 1214.85 L1708.49 1214.85 L1709.07 1214.85 L1709.66 1214.85 L1710.24 1214.85 L1710.83 1214.85 L1711.42 1214.85 L1712 1214.85 L1712.59 1214.85 L1713.18 1214.85 L1713.76 1214.85 L1714.35 1214.85 L1714.94 1214.85 L1715.52 1214.85 L1716.11 1214.85 L1716.7 1214.85 L1717.28 1214.85 L1717.87 1214.85 L1718.45 1214.85 L1719.04 1214.85 L1719.63 1214.85 L1720.21 1214.85 L1720.8 1214.85 L1721.39 1214.85 L1721.97 1214.85 L1722.56 1214.85 L1723.15 1214.85 L1723.73 1214.85 L1724.32 1214.85 L1724.91 1214.85 L1725.49 1214.85 L1726.08 1214.85 L1726.66 1214.85 L1727.25 1214.85 L1727.84 1214.85 L1728.42 1214.85 L1729.01 1214.85 L1729.6 1214.85 L1730.18 1214.85 L1730.77 1214.85 L1731.36 1214.85 L1731.94 1214.85 L1732.53 1214.85 L1733.11 1214.85 L1733.7 1214.85 L1734.29 1214.85 L1734.87 1214.85 L1735.46 1214.85 L1736.05 1214.85 L1736.63 1214.85 L1737.22 1214.85 L1737.81 1214.85 L1738.39 1214.85 L1738.98 1214.85 L1739.57 1214.85 L1740.15 1214.85 L1740.74 1214.85 L1741.32 1214.85 L1741.91 1214.85 L1742.5 1214.85 L1743.08 1214.85 L1743.67 1214.85 L1744.26 1214.85 L1744.84 1214.85 L1745.43 1214.85 L1746.02 1214.85 L1746.6 1214.85 L1747.19 1214.85 L1747.78 1214.85 L1748.36 1214.85 L1748.95 1214.85 L1749.53 1214.85 L1750.12 1214.85 L1750.71 1214.85 L1751.29 1214.85 L1751.88 1214.85 L1752.47 1214.85 L1753.05 1214.85 L1753.64 1214.85 L1754.23 1214.85 L1754.81 1214.85 L1755.4 1214.85 L1755.99 1214.85 L1756.57 1214.85 L1757.16 1214.85 L1757.74 1214.85 L1758.33 1214.85 L1758.92 1214.85 L1759.5 1214.85 L1760.09 1214.85 L1760.68 1214.85 L1761.26 1214.85 L1761.85 1214.85 L1762.44 1214.85 L1763.02 1214.85 L1763.61 1214.85 L1764.19 1214.85 L1764.78 1214.85 L1765.37 1214.85 L1765.95 1214.85 L1766.54 1214.85 L1767.13 1214.85 L1767.71 1214.85 L1768.3 1214.85 L1768.89 1214.85 L1769.47 1214.85 L1770.06 1214.85 L1770.65 1214.85 L1771.23 1214.85 L1771.82 1214.85 L1772.4 1214.85 L1772.99 1214.85 L1773.58 1214.85 L1774.16 1214.85 L1774.75 1214.85 L1775.34 1214.85 L1775.92 1214.85 L1776.51 1214.85 L1777.1 1214.85 L1777.68 1214.85 L1778.27 1214.85 L1778.86 1214.85 L1779.44 1214.85 L1780.03 1214.85 L1780.61 1214.85 L1781.2 1214.85 L1781.79 1214.85 L1782.37 1214.85 L1782.96 1214.85 L1783.55 1214.85 L1784.13 1214.85 L1784.72 1214.85 L1785.31 1214.85 L1785.89 1214.85 L1786.48 1214.85 L1787.06 1214.85 L1787.65 1214.85 L1788.24 1214.85 L1788.82 1214.85 L1789.41 1214.85 L1790 1214.85 L1790.58 1214.85 L1791.17 1214.85 L1791.76 1214.85 L1792.34 1214.85 L1792.93 1214.85 L1793.52 1214.85 L1794.1 1214.85 L1794.69 1214.85 L1795.27 1214.85 L1795.86 1214.85 L1796.45 1214.85 L1797.03 1214.85 L1797.62 1214.85 L1798.21 1214.85 L1798.79 1214.85 L1799.38 1214.85 L1799.97 1214.85 L1800.55 1214.85 L1801.14 1214.85 L1801.73 1214.85 L1802.31 1214.85 L1802.9 1214.85 L1803.48 1214.85 L1804.07 1214.85 L1804.66 1214.85 L1805.24 1214.85 L1805.83 1214.85 L1806.42 1214.85 L1807 1214.85 L1807.59 1214.85 L1808.18 1214.85 L1808.76 1214.85 L1809.35 1214.85 L1809.94 1214.85 L1810.52 1214.85 L1811.11 1214.85 L1811.69 1214.85 L1812.28 1214.85 L1812.87 1214.85 L1813.45 1214.85 L1814.04 1214.85 L1814.63 1214.85 L1815.21 1214.85 L1815.8 1214.85 L1816.39 1214.85 L1816.97 1214.85 L1817.56 1214.85 L1818.14 1214.85 L1818.73 1214.85 L1819.32 1214.85 L1819.9 1214.85 L1820.49 1214.85 L1821.08 1214.85 L1821.66 1214.85 L1822.25 1214.85 L1822.84 1214.85 L1823.42 1214.85 L1824.01 1214.85 L1824.6 1214.85 L1825.18 1214.85 L1825.77 1214.85 L1826.35 1214.85 L1826.94 1214.85 L1827.53 1214.85 L1828.11 1214.85 L1828.7 1214.85 L1829.29 1214.85 L1829.87 1214.85 L1830.46 1214.85 L1831.05 1214.85 L1831.63 1214.85 L1832.22 1214.85 L1832.81 1214.85 L1833.39 1214.85 L1833.98 1214.85 L1834.56 1214.85 L1835.15 1214.85 L1835.74 1214.85 L1836.32 1214.85 L1836.91 1214.85 L1837.5 1214.85 L1838.08 1214.85 L1838.67 1214.85 L1839.26 1214.85 L1839.84 1214.85 L1840.43 1214.85 L1841.01 1214.85 L1841.6 1214.85 L1842.19 1214.85 L1842.77 1214.85 L1843.36 1214.85 L1843.95 1214.85 L1844.53 1214.85 L1845.12 1214.85 L1845.71 1214.85 L1846.29 1214.85 L1846.88 1214.85 L1847.47 1214.85 L1848.05 1214.85 L1848.64 1214.85 L1849.22 1214.85 L1849.81 1214.85 L1850.4 1214.85 L1850.98 1214.85 L1851.57 1214.85 L1852.16 1214.85 L1852.74 1214.85 L1853.33 1214.85 L1853.92 1214.85 L1854.5 1214.85 L1855.09 1214.85 L1855.68 1214.85 L1856.26 1214.85 L1856.85 1214.85 L1857.43 1214.85 L1858.02 1214.85 L1858.61 1214.85 L1859.19 1214.85 L1859.78 1214.85 L1860.37 1214.85 L1860.95 1214.85 L1861.54 1214.85 L1862.13 1214.85 L1862.71 1214.85 L1863.3 1214.85 L1863.88 1214.85 L1864.47 1214.85 L1865.06 1214.85 L1865.64 1214.85 L1866.23 1214.85 L1866.82 1214.85 L1867.4 1214.85 L1867.99 1214.85 L1868.58 1214.85 L1869.16 1214.85 L1869.75 1214.85 L1870.34 1214.85 L1870.92 1214.85 L1871.51 1214.85 L1872.09 1214.85 L1872.68 1214.85 L1873.27 1214.85 L1873.85 1214.85 L1874.44 1214.85 L1875.03 1214.85 L1875.61 1214.85 L1876.2 1214.85 L1876.79 1214.85 L1877.37 1214.85 L1877.96 1214.85 L1878.55 1214.85 L1879.13 1214.85 L1879.72 1214.85 L1880.3 1214.85 L1880.89 1214.85 L1881.48 1214.85 L1882.06 1214.85 L1882.65 1214.85 L1883.24 1214.85 L1883.82 1214.85 L1884.41 1214.85 L1885 1214.85 L1885.58 1214.85 L1886.17 1214.85 L1886.76 1214.85 L1887.34 1214.85 L1887.93 1214.85 L1888.51 1214.85 L1889.1 1214.85 L1889.69 1214.85 L1890.27 1214.85 L1890.86 1214.85 L1891.45 1214.85 L1892.03 1214.85 L1892.62 1214.85 L1893.21 1214.85 L1893.79 1214.85 L1894.38 1214.85 L1894.96 1214.85 L1895.55 1214.85 L1896.14 1214.85 L1896.72 1214.85 L1897.31 1214.85 L1897.9 1214.85 L1898.48 1214.85 L1899.07 1214.85 L1899.66 1214.85 L1900.24 1214.85 L1900.83 1214.85 L1901.42 1214.85 L1902 1214.85 L1902.59 1214.85 L1903.17 1214.85 L1903.76 1214.85 L1904.35 1214.85 L1904.93 1214.85 L1905.52 1214.85 L1906.11 1214.85 L1906.69 1214.85 L1907.28 1214.85 L1907.87 1214.85 L1908.45 1214.85 L1909.04 1214.85 L1909.63 1214.85 L1910.21 1214.85 L1910.8 1214.85 L1911.38 1214.85 L1911.97 1214.85 L1912.56 1214.85 L1913.14 1214.85 L1913.73 1214.85 L1914.32 1214.85 L1914.9 1214.85 L1915.49 1214.85 L1916.08 1214.85 L1916.66 1214.85 L1917.25 1214.85 L1917.83 1214.85 L1918.42 1214.85 L1919.01 1214.85 L1919.59 1214.85 L1920.18 1214.85 L1920.77 1214.85 L1921.35 1214.85 L1921.94 1214.85 L1922.53 1214.85 L1923.11 1214.85 L1923.7 1214.85 L1924.29 1214.85 L1924.87 1214.85 L1925.46 1214.85 L1926.04 1214.85 L1926.63 1214.85 L1927.22 1214.85 L1927.8 1214.85 L1928.39 1214.85 L1928.98 1214.85 L1929.56 1214.85 L1930.15 1214.85 L1930.74 1214.85 L1931.32 1214.85 L1931.91 1214.85 L1932.5 1214.85 L1933.08 1214.85 L1933.67 1214.85 L1934.25 1214.85 L1934.84 1214.85 L1935.43 1214.85 L1936.01 1214.85 L1936.6 1214.85 L1937.19 1214.85 L1937.77 1214.85 L1938.36 1214.85 L1938.95 1214.85 L1939.53 1214.85 L1940.12 1214.85 L1940.71 1214.85 L1941.29 1214.85 L1941.88 1214.85 L1942.46 1214.85 L1943.05 1214.85 L1943.64 1214.85 L1944.22 1214.85 L1944.81 1214.85 L1945.4 1214.85 L1945.98 1214.85 L1946.57 1214.85 L1947.16 1214.85 L1947.74 1214.85 L1948.33 1214.85 L1948.91 1214.85 L1949.5 1214.85 L1950.09 1214.85 L1950.67 1214.85 L1951.26 1214.85 L1951.85 1214.85 L1952.43 1214.85 L1953.02 1214.85 L1953.61 1214.85 L1954.19 1214.85 L1954.78 1214.85 L1955.37 1214.85 L1955.95 1214.85 L1956.54 1214.85 L1957.12 1214.85 L1957.71 1214.85 L1958.3 1214.85 L1958.88 1214.85 L1959.47 1214.85 L1960.06 1214.85 L1960.64 1214.85 L1961.23 1214.85 L1961.82 1214.85 L1962.4 1214.85 L1962.99 1214.85 L1963.58 1214.85 L1964.16 1214.85 L1964.75 1214.85 L1965.33 1214.85 L1965.92 1214.85 L1966.51 1214.85 L1967.09 1214.85 L1967.68 1214.85 L1968.27 1214.85 L1968.85 1214.85 L1969.44 1214.85 L1970.03 1214.85 L1970.61 1214.85 L1971.2 1214.85 L1971.78 1214.85 L1972.37 1214.85 L1972.96 1214.85 L1973.54 1214.85 L1974.13 1214.85 L1974.72 1214.85 L1975.3 1214.85 L1975.89 1214.85 L1976.48 1214.85 L1977.06 1214.85 L1977.65 1214.85 L1978.24 1214.85 L1978.82 1214.85 L1979.41 1214.85 L1979.99 1214.85 L1980.58 1214.85 L1981.17 1214.85 L1981.75 1214.85 L1982.34 1214.85 L1982.93 1214.85 L1983.51 1214.85 L1984.1 1214.85 L1984.69 1214.85 L1985.27 1214.85 L1985.86 1214.85 L1986.45 1214.85 L1987.03 1214.85 L1987.62 1214.85 L1988.2 1214.85 L1988.79 1214.85 L1989.38 1214.85 L1989.96 1214.85 L1990.55 1214.85 L1991.14 1214.85 L1991.72 1214.85 L1992.31 1214.85 L1992.9 1214.85 L1993.48 1214.85 L1994.07 1214.85 L1994.65 1214.85 L1995.24 1214.85 L1995.83 1214.85 L1996.41 1214.85 L1997 1214.85 L1997.59 1214.85 L1998.17 1214.85 L1998.76 1214.85 L1999.35 1214.85 L1999.93 1214.85 L2000.52 1214.85 L2001.11 1214.85 L2001.69 1214.85 L2002.28 1214.85 L2002.86 1214.85 L2003.45 1214.85 L2004.04 1214.85 L2004.62 1214.85 L2005.21 1214.85 L2005.8 1214.85 L2006.38 1214.85 L2006.97 1214.85 L2007.56 1214.85 L2008.14 1214.85 L2008.73 1214.85 L2009.32 1214.85 L2009.9 1214.85 L2010.49 1214.85 L2011.07 1214.85 L2011.66 1214.85 L2012.25 1214.85 L2012.83 1214.85 L2013.42 1214.85 L2014.01 1214.85 L2014.59 1214.85 L2015.18 1214.85 L2015.77 1214.85 L2016.35 1214.85 L2016.94 1214.85 L2017.53 1214.85 L2018.11 1214.85 L2018.7 1214.85 L2019.28 1214.85 L2019.87 1214.85 L2020.46 1214.85 L2021.04 1214.85 L2021.63 1214.85 L2022.22 1214.85 L2022.8 1214.85 L2023.39 1214.85 L2023.98 1214.85 L2024.56 1214.85 L2025.15 1214.85 L2025.73 1214.85 L2026.32 1214.85 L2026.91 1214.85 L2027.49 1214.85 L2028.08 1214.85 L2028.67 1214.85 L2029.25 1214.85 L2029.84 1214.85 L2030.43 1214.85 L2031.01 1214.85 L2031.6 1214.85 L2032.19 1214.85 L2032.77 1214.85 L2033.36 1214.85 L2033.94 1214.85 L2034.53 1214.85 L2035.12 1214.85 L2035.7 1214.85 L2036.29 1214.85 L2036.88 1214.85 L2037.46 1214.85 L2038.05 1214.85 L2038.64 1214.85 L2039.22 1214.85 L2039.81 1214.85 L2040.4 1214.85 L2040.98 1214.85 L2041.57 1214.85 L2042.15 1214.85 L2042.74 1214.85 L2043.33 1214.85 L2043.91 1214.85 L2044.5 1214.85 L2045.09 1214.85 L2045.67 1214.85 L2046.26 1214.85 L2046.85 1214.85 L2047.43 1214.85 L2048.02 1214.85 L2048.6 1214.85 L2049.19 1214.85 L2049.78 1214.85 L2050.36 1214.85 L2050.95 1214.85 L2051.54 1214.85 L2052.12 1214.85 L2052.71 1214.85 L2053.3 1214.85 L2053.88 1214.85 L2054.47 1214.85 L2055.06 1214.85 L2055.64 1214.85 L2056.23 1214.85 L2056.81 1214.85 L2057.4 1214.85 L2057.99 1214.85 L2058.57 1214.85 L2059.16 1214.85 L2059.75 1214.85 L2060.33 1214.85 L2060.92 1214.85 L2061.51 1214.85 L2062.09 1214.85 L2062.68 1214.85 L2063.27 1214.85 L2063.85 1214.85 L2064.44 1214.85 L2065.02 1214.85 L2065.61 1214.85 L2066.2 1214.85 L2066.78 1214.85 L2067.37 1214.85 L2067.96 1214.85 L2068.54 1214.85 L2069.13 1214.85 L2069.72 1214.85 L2070.3 1214.85 L2070.89 1214.85 L2071.48 1214.85 L2072.06 1214.85 L2072.65 1214.85 L2073.23 1214.85 L2073.82 1214.85 L2074.41 1214.85 L2074.99 1214.85 L2075.58 1214.85 L2076.17 1214.85 L2076.75 1214.85 L2077.34 1214.85 L2077.93 1214.85 L2078.51 1214.85 L2079.1 1214.85 L2079.68 1214.85 L2080.27 1214.85 L2080.86 1214.85 L2081.44 1214.85 L2082.03 1214.85 L2082.62 1214.85 L2083.2 1214.85 L2083.79 1214.85 L2084.38 1214.85 L2084.96 1214.85 L2085.55 1214.85 L2086.14 1214.85 L2086.72 1214.85 L2087.31 1214.85 L2087.89 1214.85 L2088.48 1214.85 L2089.07 1214.85 L2089.65 1214.85 L2090.24 1214.85 L2090.83 1214.85 L2091.41 1214.85 L2092 1214.85 L2092.59 1214.85 L2093.17 1214.85 L2093.76 1214.85 L2094.35 1214.85 L2094.93 1214.85 L2095.52 1214.85 L2096.1 1214.85 L2096.69 1214.85 L2097.28 1214.85 L2097.86 1214.85 L2098.45 1214.85 L2099.04 1214.85 L2099.62 1214.85 L2100.21 1214.85 L2100.8 1214.85 L2101.38 1214.85 L2101.97 1214.85 L2102.55 1214.85 L2103.14 1214.85 L2103.73 1214.85 L2104.31 1214.85 L2104.9 1214.85 L2105.49 1214.85 L2106.07 1214.85 L2106.66 1214.85 L2107.25 1214.85 L2107.83 1214.85 L2108.42 1214.85 L2109.01 1214.85 L2109.59 1214.85 L2110.18 1214.85 L2110.76 1214.85 L2111.35 1214.85 L2111.94 1214.85 L2112.52 1214.85 L2113.11 1214.85 L2113.7 1214.85 L2114.28 1214.85 L2114.87 1214.85 L2115.46 1214.85 L2116.04 1214.85 L2116.63 1214.85 L2117.22 1214.85 L2117.8 1214.85 L2118.39 1214.85 L2118.97 1214.85 L2119.56 1214.85 L2120.15 1214.85 L2120.73 1214.85 L2121.32 1214.85 L2121.91 1214.85 L2122.49 1214.85 L2123.08 1214.85 L2123.67 1214.85 L2124.25 1214.85 L2124.84 1214.85 L2125.42 1214.85 L2126.01 1214.85 L2126.6 1214.85 L2127.18 1214.85 L2127.77 1214.85 L2128.36 1214.85 L2128.94 1214.85 L2129.53 1214.85 L2130.12 1214.85 L2130.7 1214.85 L2131.29 1214.85 L2131.88 1214.85 L2132.46 1214.85 L2133.05 1214.85 L2133.63 1214.85 L2134.22 1214.85 L2134.81 1214.85 L2135.39 1214.85 L2135.98 1214.85 L2136.57 1214.85 L2137.15 1214.85 L2137.74 1214.85 L2138.33 1214.85 L2138.91 1214.85 L2139.5 1214.85 L2140.09 1214.85 L2140.67 1214.85 L2141.26 1214.85 L2141.84 1214.85 L2142.43 1214.85 L2143.02 1214.85 L2143.6 1214.85 L2144.19 1214.85 L2144.78 1214.85 L2145.36 1214.85 L2145.95 1214.85 L2146.54 1214.85 L2147.12 1214.85 L2147.71 1214.85 L2148.3 1214.85 L2148.88 1214.85 L2149.47 1214.85 L2150.05 1214.85 L2150.64 1214.85 L2151.23 1214.85 L2151.81 1214.85 L2152.4 1214.85 L2152.99 1214.85 L2153.57 1214.85 L2154.16 1214.85 L2154.75 1214.85 L2155.33 1214.85 L2155.92 1214.85 L2156.5 1214.85 L2157.09 1214.85 L2157.68 1214.85 L2158.26 1214.85 L2158.26 1214.71 L2157.68 1214.71 L2157.09 1214.71 L2156.5 1214.71 L2155.92 1214.71 L2155.33 1214.71 L2154.75 1214.71 L2154.16 1214.71 L2153.57 1214.71 L2152.99 1214.71 L2152.4 1214.71 L2151.81 1214.71 L2151.23 1214.71 L2150.64 1214.71 L2150.05 1214.71 L2149.47 1214.71 L2148.88 1214.71 L2148.3 1214.71 L2147.71 1214.71 L2147.12 1214.71 L2146.54 1214.71 L2145.95 1214.71 L2145.36 1214.71 L2144.78 1214.71 L2144.19 1214.71 L2143.6 1214.71 L2143.02 1214.71 L2142.43 1214.71 L2141.84 1214.71 L2141.26 1214.71 L2140.67 1214.71 L2140.09 1214.71 L2139.5 1214.71 L2138.91 1214.71 L2138.33 1214.71 L2137.74 1214.71 L2137.15 1214.71 L2136.57 1214.71 L2135.98 1214.71 L2135.39 1214.71 L2134.81 1214.71 L2134.22 1214.71 L2133.63 1214.71 L2133.05 1214.71 L2132.46 1214.71 L2131.88 1214.71 L2131.29 1214.71 L2130.7 1214.71 L2130.12 1214.71 L2129.53 1214.71 L2128.94 1214.71 L2128.36 1214.71 L2127.77 1214.71 L2127.18 1214.71 L2126.6 1214.71 L2126.01 1214.71 L2125.42 1214.71 L2124.84 1214.71 L2124.25 1214.71 L2123.67 1214.71 L2123.08 1214.71 L2122.49 1214.71 L2121.91 1214.71 L2121.32 1214.71 L2120.73 1214.71 L2120.15 1214.71 L2119.56 1214.71 L2118.97 1214.71 L2118.39 1214.71 L2117.8 1214.71 L2117.22 1214.71 L2116.63 1214.71 L2116.04 1214.71 L2115.46 1214.71 L2114.87 1214.71 L2114.28 1214.71 L2113.7 1214.71 L2113.11 1214.71 L2112.52 1214.71 L2111.94 1214.71 L2111.35 1214.71 L2110.76 1214.71 L2110.18 1214.71 L2109.59 1214.71 L2109.01 1214.71 L2108.42 1214.71 L2107.83 1214.71 L2107.25 1214.71 L2106.66 1214.71 L2106.07 1214.71 L2105.49 1214.71 L2104.9 1214.71 L2104.31 1214.71 L2103.73 1214.71 L2103.14 1214.71 L2102.55 1214.71 L2101.97 1214.71 L2101.38 1214.71 L2100.8 1214.71 L2100.21 1214.71 L2099.62 1214.71 L2099.04 1214.71 L2098.45 1214.71 L2097.86 1214.71 L2097.28 1214.71 L2096.69 1214.71 L2096.1 1214.71 L2095.52 1214.71 L2094.93 1214.71 L2094.35 1214.71 L2093.76 1214.71 L2093.17 1214.71 L2092.59 1214.71 L2092 1214.71 L2091.41 1214.71 L2090.83 1214.71 L2090.24 1214.71 L2089.65 1214.71 L2089.07 1214.71 L2088.48 1214.71 L2087.89 1214.71 L2087.31 1214.71 L2086.72 1214.71 L2086.14 1214.71 L2085.55 1214.71 L2084.96 1214.71 L2084.38 1214.71 L2083.79 1214.71 L2083.2 1214.71 L2082.62 1214.71 L2082.03 1214.71 L2081.44 1214.71 L2080.86 1214.71 L2080.27 1214.71 L2079.68 1214.71 L2079.1 1214.71 L2078.51 1214.71 L2077.93 1214.71 L2077.34 1214.71 L2076.75 1214.71 L2076.17 1214.71 L2075.58 1214.71 L2074.99 1214.71 L2074.41 1214.71 L2073.82 1214.71 L2073.23 1214.71 L2072.65 1214.71 L2072.06 1214.71 L2071.48 1214.71 L2070.89 1214.71 L2070.3 1214.71 L2069.72 1214.71 L2069.13 1214.71 L2068.54 1214.71 L2067.96 1214.71 L2067.37 1214.71 L2066.78 1214.71 L2066.2 1214.71 L2065.61 1214.71 L2065.02 1214.71 L2064.44 1214.71 L2063.85 1214.71 L2063.27 1214.71 L2062.68 1214.71 L2062.09 1214.71 L2061.51 1214.71 L2060.92 1214.71 L2060.33 1214.71 L2059.75 1214.71 L2059.16 1214.71 L2058.57 1214.71 L2057.99 1214.71 L2057.4 1214.71 L2056.81 1214.71 L2056.23 1214.71 L2055.64 1214.71 L2055.06 1214.71 L2054.47 1214.71 L2053.88 1214.71 L2053.3 1214.71 L2052.71 1214.71 L2052.12 1214.71 L2051.54 1214.71 L2050.95 1214.71 L2050.36 1214.71 L2049.78 1214.71 L2049.19 1214.71 L2048.6 1214.71 L2048.02 1214.71 L2047.43 1214.71 L2046.85 1214.71 L2046.26 1214.71 L2045.67 1214.71 L2045.09 1214.71 L2044.5 1214.71 L2043.91 1214.71 L2043.33 1214.71 L2042.74 1214.71 L2042.15 1214.71 L2041.57 1214.71 L2040.98 1214.71 L2040.4 1214.71 L2039.81 1214.71 L2039.22 1214.71 L2038.64 1214.71 L2038.05 1214.71 L2037.46 1214.71 L2036.88 1214.71 L2036.29 1214.71 L2035.7 1214.71 L2035.12 1214.71 L2034.53 1214.71 L2033.94 1214.71 L2033.36 1214.71 L2032.77 1214.71 L2032.19 1214.71 L2031.6 1214.71 L2031.01 1214.71 L2030.43 1214.71 L2029.84 1214.71 L2029.25 1214.71 L2028.67 1214.71 L2028.08 1214.71 L2027.49 1214.71 L2026.91 1214.71 L2026.32 1214.71 L2025.73 1214.71 L2025.15 1214.71 L2024.56 1214.71 L2023.98 1214.71 L2023.39 1214.71 L2022.8 1214.71 L2022.22 1214.71 L2021.63 1214.71 L2021.04 1214.71 L2020.46 1214.71 L2019.87 1214.71 L2019.28 1214.71 L2018.7 1214.71 L2018.11 1214.71 L2017.53 1214.71 L2016.94 1214.71 L2016.35 1214.71 L2015.77 1214.71 L2015.18 1214.71 L2014.59 1214.71 L2014.01 1214.71 L2013.42 1214.71 L2012.83 1214.71 L2012.25 1214.71 L2011.66 1214.71 L2011.07 1214.71 L2010.49 1214.71 L2009.9 1214.71 L2009.32 1214.71 L2008.73 1214.71 L2008.14 1214.71 L2007.56 1214.71 L2006.97 1214.71 L2006.38 1214.71 L2005.8 1214.71 L2005.21 1214.71 L2004.62 1214.71 L2004.04 1214.71 L2003.45 1214.71 L2002.86 1214.71 L2002.28 1214.71 L2001.69 1214.71 L2001.11 1214.71 L2000.52 1214.71 L1999.93 1214.71 L1999.35 1214.71 L1998.76 1214.71 L1998.17 1214.71 L1997.59 1214.71 L1997 1214.71 L1996.41 1214.71 L1995.83 1214.71 L1995.24 1214.71 L1994.65 1214.71 L1994.07 1214.71 L1993.48 1214.71 L1992.9 1214.71 L1992.31 1214.71 L1991.72 1214.71 L1991.14 1214.71 L1990.55 1214.71 L1989.96 1214.71 L1989.38 1214.71 L1988.79 1214.71 L1988.2 1214.71 L1987.62 1214.71 L1987.03 1214.71 L1986.45 1214.71 L1985.86 1214.71 L1985.27 1214.71 L1984.69 1214.71 L1984.1 1214.71 L1983.51 1214.71 L1982.93 1214.71 L1982.34 1214.71 L1981.75 1214.71 L1981.17 1214.71 L1980.58 1214.71 L1979.99 1214.71 L1979.41 1214.71 L1978.82 1214.71 L1978.24 1214.71 L1977.65 1214.71 L1977.06 1214.71 L1976.48 1214.71 L1975.89 1214.71 L1975.3 1214.71 L1974.72 1214.71 L1974.13 1214.71 L1973.54 1214.71 L1972.96 1214.71 L1972.37 1214.71 L1971.78 1214.71 L1971.2 1214.71 L1970.61 1214.71 L1970.03 1214.71 L1969.44 1214.71 L1968.85 1214.71 L1968.27 1214.71 L1967.68 1214.71 L1967.09 1214.71 L1966.51 1214.71 L1965.92 1214.71 L1965.33 1214.71 L1964.75 1214.71 L1964.16 1214.71 L1963.58 1214.71 L1962.99 1214.71 L1962.4 1214.71 L1961.82 1214.71 L1961.23 1214.71 L1960.64 1214.71 L1960.06 1214.71 L1959.47 1214.71 L1958.88 1214.71 L1958.3 1214.71 L1957.71 1214.71 L1957.12 1214.71 L1956.54 1214.71 L1955.95 1214.71 L1955.37 1214.71 L1954.78 1214.71 L1954.19 1214.71 L1953.61 1214.71 L1953.02 1214.71 L1952.43 1214.71 L1951.85 1214.71 L1951.26 1214.71 L1950.67 1214.71 L1950.09 1214.71 L1949.5 1214.71 L1948.91 1214.71 L1948.33 1214.71 L1947.74 1214.71 L1947.16 1214.71 L1946.57 1214.71 L1945.98 1214.71 L1945.4 1214.71 L1944.81 1214.71 L1944.22 1214.71 L1943.64 1214.71 L1943.05 1214.71 L1942.46 1214.71 L1941.88 1214.71 L1941.29 1214.71 L1940.71 1214.71 L1940.12 1214.71 L1939.53 1214.71 L1938.95 1214.71 L1938.36 1214.71 L1937.77 1214.71 L1937.19 1214.71 L1936.6 1214.71 L1936.01 1214.71 L1935.43 1214.71 L1934.84 1214.71 L1934.25 1214.71 L1933.67 1214.71 L1933.08 1214.71 L1932.5 1214.71 L1931.91 1214.71 L1931.32 1214.71 L1930.74 1214.71 L1930.15 1214.71 L1929.56 1214.71 L1928.98 1214.71 L1928.39 1214.71 L1927.8 1214.71 L1927.22 1214.71 L1926.63 1214.71 L1926.04 1214.71 L1925.46 1214.71 L1924.87 1214.71 L1924.29 1214.71 L1923.7 1214.71 L1923.11 1214.71 L1922.53 1214.71 L1921.94 1214.71 L1921.35 1214.71 L1920.77 1214.71 L1920.18 1214.71 L1919.59 1214.71 L1919.01 1214.71 L1918.42 1214.71 L1917.83 1214.71 L1917.25 1214.71 L1916.66 1214.71 L1916.08 1214.71 L1915.49 1214.71 L1914.9 1214.71 L1914.32 1214.71 L1913.73 1214.71 L1913.14 1214.71 L1912.56 1214.71 L1911.97 1214.71 L1911.38 1214.71 L1910.8 1214.71 L1910.21 1214.71 L1909.63 1214.71 L1909.04 1214.71 L1908.45 1214.71 L1907.87 1214.71 L1907.28 1214.71 L1906.69 1214.71 L1906.11 1214.71 L1905.52 1214.71 L1904.93 1214.71 L1904.35 1214.71 L1903.76 1214.71 L1903.17 1214.71 L1902.59 1214.71 L1902 1214.71 L1901.42 1214.71 L1900.83 1214.71 L1900.24 1214.71 L1899.66 1214.71 L1899.07 1214.71 L1898.48 1214.71 L1897.9 1214.71 L1897.31 1214.71 L1896.72 1214.71 L1896.14 1214.71 L1895.55 1214.71 L1894.96 1214.71 L1894.38 1214.71 L1893.79 1214.71 L1893.21 1214.71 L1892.62 1214.71 L1892.03 1214.71 L1891.45 1214.71 L1890.86 1214.71 L1890.27 1214.71 L1889.69 1214.71 L1889.1 1214.71 L1888.51 1214.71 L1887.93 1214.71 L1887.34 1214.71 L1886.76 1214.71 L1886.17 1214.71 L1885.58 1214.71 L1885 1214.71 L1884.41 1214.71 L1883.82 1214.71 L1883.24 1214.71 L1882.65 1214.71 L1882.06 1214.71 L1881.48 1214.71 L1880.89 1214.71 L1880.3 1214.71 L1879.72 1214.71 L1879.13 1214.71 L1878.55 1214.71 L1877.96 1214.71 L1877.37 1214.71 L1876.79 1214.71 L1876.2 1214.71 L1875.61 1214.71 L1875.03 1214.71 L1874.44 1214.71 L1873.85 1214.71 L1873.27 1214.71 L1872.68 1214.71 L1872.09 1214.71 L1871.51 1214.71 L1870.92 1214.71 L1870.34 1214.71 L1869.75 1214.71 L1869.16 1214.71 L1868.58 1214.71 L1867.99 1214.71 L1867.4 1214.71 L1866.82 1214.71 L1866.23 1214.71 L1865.64 1214.71 L1865.06 1214.71 L1864.47 1214.71 L1863.88 1214.71 L1863.3 1214.71 L1862.71 1214.71 L1862.13 1214.71 L1861.54 1214.71 L1860.95 1214.71 L1860.37 1214.71 L1859.78 1214.71 L1859.19 1214.71 L1858.61 1214.71 L1858.02 1214.71 L1857.43 1214.71 L1856.85 1214.71 L1856.26 1214.71 L1855.68 1214.71 L1855.09 1214.71 L1854.5 1214.71 L1853.92 1214.71 L1853.33 1214.71 L1852.74 1214.71 L1852.16 1214.71 L1851.57 1214.71 L1850.98 1214.71 L1850.4 1214.71 L1849.81 1214.71 L1849.22 1214.71 L1848.64 1214.71 L1848.05 1214.71 L1847.47 1214.71 L1846.88 1214.71 L1846.29 1214.71 L1845.71 1214.71 L1845.12 1214.71 L1844.53 1214.71 L1843.95 1214.71 L1843.36 1214.71 L1842.77 1214.71 L1842.19 1214.71 L1841.6 1214.71 L1841.01 1214.71 L1840.43 1214.71 L1839.84 1214.71 L1839.26 1214.71 L1838.67 1214.71 L1838.08 1214.71 L1837.5 1214.71 L1836.91 1214.71 L1836.32 1214.71 L1835.74 1214.71 L1835.15 1214.71 L1834.56 1214.71 L1833.98 1214.71 L1833.39 1214.71 L1832.81 1214.71 L1832.22 1214.71 L1831.63 1214.71 L1831.05 1214.71 L1830.46 1214.71 L1829.87 1214.71 L1829.29 1214.71 L1828.7 1214.71 L1828.11 1214.71 L1827.53 1214.71 L1826.94 1214.71 L1826.35 1214.71 L1825.77 1214.71 L1825.18 1214.71 L1824.6 1214.71 L1824.01 1214.71 L1823.42 1214.71 L1822.84 1214.71 L1822.25 1214.71 L1821.66 1214.71 L1821.08 1214.71 L1820.49 1214.71 L1819.9 1214.71 L1819.32 1214.71 L1818.73 1214.71 L1818.14 1214.71 L1817.56 1214.71 L1816.97 1214.71 L1816.39 1214.71 L1815.8 1214.71 L1815.21 1214.71 L1814.63 1214.71 L1814.04 1214.71 L1813.45 1214.71 L1812.87 1214.71 L1812.28 1214.71 L1811.69 1214.71 L1811.11 1214.71 L1810.52 1214.71 L1809.94 1214.71 L1809.35 1214.71 L1808.76 1214.71 L1808.18 1214.71 L1807.59 1214.71 L1807 1214.71 L1806.42 1214.71 L1805.83 1214.71 L1805.24 1214.71 L1804.66 1214.71 L1804.07 1214.71 L1803.48 1214.71 L1802.9 1214.71 L1802.31 1214.71 L1801.73 1214.71 L1801.14 1214.71 L1800.55 1214.71 L1799.97 1214.71 L1799.38 1214.71 L1798.79 1214.71 L1798.21 1214.71 L1797.62 1214.71 L1797.03 1214.71 L1796.45 1214.71 L1795.86 1214.71 L1795.27 1214.71 L1794.69 1214.71 L1794.1 1214.71 L1793.52 1214.71 L1792.93 1214.71 L1792.34 1214.71 L1791.76 1214.71 L1791.17 1214.71 L1790.58 1214.71 L1790 1214.71 L1789.41 1214.71 L1788.82 1214.71 L1788.24 1214.71 L1787.65 1214.71 L1787.06 1214.71 L1786.48 1214.71 L1785.89 1214.71 L1785.31 1214.71 L1784.72 1214.71 L1784.13 1214.71 L1783.55 1214.71 L1782.96 1214.71 L1782.37 1214.71 L1781.79 1214.71 L1781.2 1214.71 L1780.61 1214.71 L1780.03 1214.71 L1779.44 1214.71 L1778.86 1214.71 L1778.27 1214.71 L1777.68 1214.71 L1777.1 1214.71 L1776.51 1214.71 L1775.92 1214.71 L1775.34 1214.71 L1774.75 1214.71 L1774.16 1214.71 L1773.58 1214.71 L1772.99 1214.71 L1772.4 1214.71 L1771.82 1214.71 L1771.23 1214.71 L1770.65 1214.71 L1770.06 1214.71 L1769.47 1214.71 L1768.89 1214.71 L1768.3 1214.71 L1767.71 1214.71 L1767.13 1214.71 L1766.54 1214.71 L1765.95 1214.71 L1765.37 1214.71 L1764.78 1214.71 L1764.19 1214.71 L1763.61 1214.71 L1763.02 1214.71 L1762.44 1214.71 L1761.85 1214.71 L1761.26 1214.71 L1760.68 1214.71 L1760.09 1214.71 L1759.5 1214.71 L1758.92 1214.71 L1758.33 1214.71 L1757.74 1214.71 L1757.16 1214.71 L1756.57 1214.71 L1755.99 1214.71 L1755.4 1214.71 L1754.81 1214.71 L1754.23 1214.71 L1753.64 1214.71 L1753.05 1214.71 L1752.47 1214.71 L1751.88 1214.71 L1751.29 1214.71 L1750.71 1214.71 L1750.12 1214.71 L1749.53 1214.71 L1748.95 1214.71 L1748.36 1214.71 L1747.78 1214.71 L1747.19 1214.71 L1746.6 1214.71 L1746.02 1214.71 L1745.43 1214.71 L1744.84 1214.71 L1744.26 1214.71 L1743.67 1214.71 L1743.08 1214.71 L1742.5 1214.71 L1741.91 1214.71 L1741.32 1214.71 L1740.74 1214.71 L1740.15 1214.71 L1739.57 1214.71 L1738.98 1214.71 L1738.39 1214.71 L1737.81 1214.71 L1737.22 1214.71 L1736.63 1214.71 L1736.05 1214.71 L1735.46 1214.71 L1734.87 1214.71 L1734.29 1214.71 L1733.7 1214.71 L1733.11 1214.71 L1732.53 1214.71 L1731.94 1214.71 L1731.36 1214.71 L1730.77 1214.71 L1730.18 1214.71 L1729.6 1214.71 L1729.01 1214.71 L1728.42 1214.71 L1727.84 1214.71 L1727.25 1214.71 L1726.66 1214.71 L1726.08 1214.71 L1725.49 1214.71 L1724.91 1214.71 L1724.32 1214.71 L1723.73 1214.71 L1723.15 1214.71 L1722.56 1214.71 L1721.97 1214.71 L1721.39 1214.71 L1720.8 1214.71 L1720.21 1214.71 L1719.63 1214.71 L1719.04 1214.71 L1718.45 1214.71 L1717.87 1214.71 L1717.28 1214.71 L1716.7 1214.71 L1716.11 1214.71 L1715.52 1214.71 L1714.94 1214.71 L1714.35 1214.71 L1713.76 1214.71 L1713.18 1214.71 L1712.59 1214.71 L1712 1214.71 L1711.42 1214.71 L1710.83 1214.71 L1710.24 1214.71 L1709.66 1214.71 L1709.07 1214.71 L1708.49 1214.71 L1707.9 1214.71 L1707.31 1214.71 L1706.73 1214.71 L1706.14 1214.71 L1705.55 1214.71 L1704.97 1214.71 L1704.38 1214.71 L1703.79 1214.71 L1703.21 1214.71 L1702.62 1214.71 L1702.04 1214.71 L1701.45 1214.71 L1700.86 1214.71 L1700.28 1214.71 L1699.69 1214.71 L1699.1 1214.71 L1698.52 1214.71 L1697.93 1214.71 L1697.34 1214.71 L1696.76 1214.71 L1696.17 1214.71 L1695.58 1214.71 L1695 1214.71 L1694.41 1214.71 L1693.83 1214.71 L1693.24 1214.71 L1692.65 1214.71 L1692.07 1214.71 L1691.48 1214.71 L1690.89 1214.71 L1690.31 1214.71 L1689.72 1214.71 L1689.13 1214.71 L1688.55 1214.71 L1687.96 1214.71 L1687.37 1214.71 L1686.79 1214.71 L1686.2 1214.71 L1685.62 1214.71 L1685.03 1214.71 L1684.44 1214.71 L1683.86 1214.71 L1683.27 1214.71 L1682.68 1214.71 L1682.1 1214.71 L1681.51 1214.71 L1680.92 1214.71 L1680.34 1214.71 L1679.75 1214.71 L1679.17 1214.71 L1678.58 1214.71 L1677.99 1214.71 L1677.41 1214.71 L1676.82 1214.71 L1676.23 1214.71 L1675.65 1214.71 L1675.06 1214.71 L1674.47 1214.71 L1673.89 1214.71 L1673.3 1214.71 L1672.71 1214.71 L1672.13 1214.71 L1671.54 1214.71 L1670.96 1214.71 L1670.37 1214.71 L1669.78 1214.71 L1669.2 1214.71 L1668.61 1214.71 L1668.02 1214.71 L1667.44 1214.71 L1666.85 1214.71 L1666.26 1214.71 L1665.68 1214.71 L1665.09 1214.71 L1664.5 1214.71 L1663.92 1214.71 L1663.33 1214.71 L1662.75 1214.71 L1662.16 1214.71 L1661.57 1214.71 L1660.99 1214.71 L1660.4 1214.71 L1659.81 1214.71 L1659.23 1214.71 L1658.64 1214.71 L1658.05 1214.71 L1657.47 1214.71 L1656.88 1214.71 L1656.29 1214.71 L1655.71 1214.71 L1655.12 1214.71 L1654.54 1214.71 L1653.95 1214.71 L1653.36 1214.71 L1652.78 1214.71 L1652.19 1214.71 L1651.6 1214.71 L1651.02 1214.71 L1650.43 1214.71 L1649.84 1214.71 L1649.26 1214.71 L1648.67 1214.71 L1648.09 1214.71 L1647.5 1214.71 L1646.91 1214.71 L1646.33 1214.71 L1645.74 1214.71 L1645.15 1214.71 L1644.57 1214.71 L1643.98 1214.71 L1643.39 1214.71 L1642.81 1214.71 L1642.22 1214.71 L1641.63 1214.71 L1641.05 1214.71 L1640.46 1214.71 L1639.88 1214.71 L1639.29 1214.71 L1638.7 1214.71 L1638.12 1214.71 L1637.53 1214.71 L1636.94 1214.71 L1636.36 1214.71 L1635.77 1214.71 L1635.18 1214.71 L1634.6 1214.71 L1634.01 1214.71 L1633.42 1214.71 L1632.84 1214.71 L1632.25 1214.71 L1631.67 1214.71 L1631.08 1214.71 L1630.49 1214.71 L1629.91 1214.71 L1629.32 1214.71 L1628.73 1214.71 L1628.15 1214.71 L1627.56 1214.71 L1626.97 1214.71 L1626.39 1214.71 L1625.8 1214.71 L1625.22 1214.71 L1624.63 1214.71 L1624.04 1214.71 L1623.46 1214.71 L1622.87 1214.71 L1622.28 1214.71 L1621.7 1214.71 L1621.11 1214.71 L1620.52 1214.71 L1619.94 1214.71 L1619.35 1214.71 L1618.76 1214.71 L1618.18 1214.71 L1617.59 1214.71 L1617.01 1214.71 L1616.42 1214.71 L1615.83 1214.71 L1615.25 1214.71 L1614.66 1214.71 L1614.07 1214.71 L1613.49 1214.71 L1612.9 1214.71 L1612.31 1214.71 L1611.73 1214.71 L1611.14 1214.71 L1610.55 1214.71 L1609.97 1214.71 L1609.38 1214.71 L1608.8 1214.71 L1608.21 1214.71 L1607.62 1214.71 L1607.04 1214.71 L1606.45 1214.71 L1605.86 1214.71 L1605.28 1214.71 L1604.69 1214.71 L1604.1 1214.71 L1603.52 1214.71 L1602.93 1214.71 L1602.34 1214.71 L1601.76 1214.71 L1601.17 1214.71 L1600.59 1214.71 L1600 1214.71 L1599.41 1214.71 L1598.83 1214.71 L1598.24 1214.71 L1597.65 1214.71 L1597.07 1214.71 L1596.48 1214.71 L1595.89 1214.71 L1595.31 1214.71 L1594.72 1214.71 L1594.14 1214.71 L1593.55 1214.71 L1592.96 1214.71 L1592.38 1214.71 L1591.79 1214.71 L1591.2 1214.71 L1590.62 1214.71 L1590.03 1214.71 L1589.44 1214.71 L1588.86 1214.71 L1588.27 1214.71 L1587.68 1214.71 L1587.1 1214.71 L1586.51 1214.71 L1585.93 1214.71 L1585.34 1214.71 L1584.75 1214.71 L1584.17 1214.71 L1583.58 1214.71 L1582.99 1214.71 L1582.41 1214.71 L1581.82 1214.71 L1581.23 1214.71 L1580.65 1214.71 L1580.06 1214.71 L1579.47 1214.71 L1578.89 1214.71 L1578.3 1214.71 L1577.72 1214.71 L1577.13 1214.71 L1576.54 1214.71 L1575.96 1214.71 L1575.37 1214.71 L1574.78 1214.71 L1574.2 1214.71 L1573.61 1214.71 L1573.02 1214.71 L1572.44 1214.71 L1571.85 1214.71 L1571.27 1214.71 L1570.68 1214.71 L1570.09 1214.71 L1569.51 1214.71 L1568.92 1214.71 L1568.33 1214.71 L1567.75 1214.71 L1567.16 1214.71 L1566.57 1214.71 L1565.99 1214.71 L1565.4 1214.71 L1564.81 1214.71 L1564.23 1214.71 L1563.64 1214.71 L1563.06 1214.71 L1562.47 1214.71 L1561.88 1214.71 L1561.3 1214.71 L1560.71 1214.71 L1560.12 1214.71 L1559.54 1214.71 L1558.95 1214.71 L1558.36 1214.71 L1557.78 1214.71 L1557.19 1214.71 L1556.6 1214.71 L1556.02 1214.71 L1555.43 1214.71 L1554.85 1214.71 L1554.26 1214.71 L1553.67 1214.71 L1553.09 1214.71 L1552.5 1214.71 L1551.91 1214.71 L1551.33 1214.71 L1550.74 1214.71 L1550.15 1214.71 L1549.57 1214.71 L1548.98 1214.71 L1548.4 1214.71 L1547.81 1214.71 L1547.22 1214.71 L1546.64 1214.71 L1546.05 1214.71 L1545.46 1214.71 L1544.88 1214.71 L1544.29 1214.71 L1543.7 1214.71 L1543.12 1214.71 L1542.53 1214.71 L1541.94 1214.71 L1541.36 1214.71 L1540.77 1214.71 L1540.19 1214.71 L1539.6 1214.71 L1539.01 1214.71 L1538.43 1214.71 L1537.84 1214.71 L1537.25 1214.71 L1536.67 1214.71 L1536.08 1214.71 L1535.49 1214.71 L1534.91 1214.71 L1534.32 1214.71 L1533.73 1214.71 L1533.15 1214.71 L1532.56 1214.71 L1531.98 1214.71 L1531.39 1214.71 L1530.8 1214.71 L1530.22 1214.71 L1529.63 1214.71 L1529.04 1214.71 L1528.46 1214.71 L1527.87 1214.71 L1527.28 1214.71 L1526.7 1214.71 L1526.11 1214.71 L1525.52 1214.71 L1524.94 1214.71 L1524.35 1214.71 L1523.77 1214.71 L1523.18 1214.71 L1522.59 1214.71 L1522.01 1214.71 L1521.42 1214.71 L1520.83 1214.71 L1520.25 1214.71 L1519.66 1214.71 L1519.07 1214.71 L1518.49 1214.71 L1517.9 1214.71 L1517.32 1214.71 L1516.73 1214.71 L1516.14 1214.71 L1515.56 1214.71 L1514.97 1214.71 L1514.38 1214.71 L1513.8 1214.71 L1513.21 1214.71 L1512.62 1214.71 L1512.04 1214.71 L1511.45 1214.71 L1510.86 1214.71 L1510.28 1214.71 L1509.69 1214.71 L1509.11 1214.71 L1508.52 1214.71 L1507.93 1214.71 L1507.35 1214.71 L1506.76 1214.71 L1506.17 1214.71 L1505.59 1214.71 L1505 1214.71 L1504.41 1214.71 L1503.83 1214.71 L1503.24 1214.71 L1502.65 1214.71 L1502.07 1214.71 L1501.48 1214.71 L1500.9 1214.71 L1500.31 1214.71 L1499.72 1214.71 L1499.14 1214.71 L1498.55 1214.71 L1497.96 1214.71 L1497.38 1214.71 L1496.79 1214.71 L1496.2 1214.71 L1495.62 1214.71 L1495.03 1214.71 L1494.45 1214.71 L1493.86 1214.71 L1493.27 1214.71 L1492.69 1214.71 L1492.1 1214.71 L1491.51 1214.71 L1490.93 1214.71 L1490.34 1214.71 L1489.75 1214.71 L1489.17 1214.71 L1488.58 1214.71 L1487.99 1214.71 L1487.41 1214.71 L1486.82 1214.71 L1486.24 1214.71 L1485.65 1214.71 L1485.06 1214.71 L1484.48 1214.71 L1483.89 1214.71 L1483.3 1214.71 L1482.72 1214.71 L1482.13 1214.71 L1481.54 1214.71 L1480.96 1214.71 L1480.37 1214.71 L1479.78 1214.71 L1479.2 1214.71 L1478.61 1214.71 L1478.03 1214.71 L1477.44 1214.71 L1476.85 1214.71 L1476.27 1214.71 L1475.68 1214.71 L1475.09 1214.71 L1474.51 1214.71 L1473.92 1214.71 L1473.33 1214.71 L1472.75 1214.71 L1472.16 1214.71 L1471.57 1214.71 L1470.99 1214.71 L1470.4 1214.71 L1469.82 1214.71 L1469.23 1214.71 L1468.64 1214.71 L1468.06 1214.71 L1467.47 1214.71 L1466.88 1214.71 L1466.3 1214.71 L1465.71 1214.71 L1465.12 1214.71 L1464.54 1214.71 L1463.95 1214.71 L1463.37 1214.71 L1462.78 1214.71 L1462.19 1214.71 L1461.61 1214.71 L1461.02 1214.71 L1460.43 1214.71 L1459.85 1214.71 L1459.26 1214.71 L1458.67 1214.71 L1458.09 1214.71 L1457.5 1214.71 L1456.91 1214.71 L1456.33 1214.71 L1455.74 1214.71 L1455.16 1214.71 L1454.57 1214.71 L1453.98 1214.71 L1453.4 1214.71 L1452.81 1214.71 L1452.22 1214.71 L1451.64 1214.71 L1451.05 1214.71 L1450.46 1214.71 L1449.88 1214.71 L1449.29 1214.71 L1448.7 1214.71 L1448.12 1214.71 L1447.53 1214.71 L1446.95 1214.71 L1446.36 1214.71 L1445.77 1214.71 L1445.19 1214.71 L1444.6 1214.71 L1444.01 1214.71 L1443.43 1214.71 L1442.84 1214.71 L1442.25 1214.71 L1441.67 1214.71 L1441.08 1214.71 L1440.5 1214.71 L1439.91 1214.71 L1439.32 1214.71 L1438.74 1214.71 L1438.15 1214.71 L1437.56 1214.71 L1436.98 1214.71 L1436.39 1214.71 L1435.8 1214.71 L1435.22 1214.71 L1434.63 1214.71 L1434.04 1214.71 L1433.46 1214.71 L1432.87 1214.71 L1432.29 1214.71 L1431.7 1214.71 L1431.11 1214.71 L1430.53 1214.71 L1429.94 1214.71 L1429.35 1214.71 L1428.77 1214.71 L1428.18 1214.71 L1427.59 1214.71 L1427.01 1214.71 L1426.42 1214.71 L1425.83 1214.71 L1425.25 1214.71 L1424.66 1214.71 L1424.08 1214.71 L1423.49 1214.71 L1422.9 1214.71 L1422.32 1214.71 L1421.73 1214.71 L1421.14 1214.71 L1420.56 1214.71 L1419.97 1214.71 L1419.38 1214.71 L1418.8 1214.71 L1418.21 1214.71 L1417.63 1214.71 L1417.04 1214.71 L1416.45 1214.71 L1415.87 1214.71 L1415.28 1214.71 L1414.69 1214.71 L1414.11 1214.71 L1413.52 1214.71 L1412.93 1214.71 L1412.35 1214.71 L1411.76 1214.71 L1411.17 1214.71 L1410.59 1214.71 L1410 1214.71 L1409.42 1214.71 L1408.83 1214.71 L1408.24 1214.71 L1407.66 1214.71 L1407.07 1214.71 L1406.48 1214.71 L1405.9 1214.71 L1405.31 1214.71 L1404.72 1214.71 L1404.14 1214.71 L1403.55 1214.71 L1402.96 1214.71 L1402.38 1214.71 L1401.79 1214.71 L1401.21 1214.71 L1400.62 1214.71 L1400.03 1214.71 L1399.45 1214.71 L1398.86 1214.71 L1398.27 1214.71 L1397.69 1214.71 L1397.1 1214.71 L1396.51 1214.71 L1395.93 1214.71 L1395.34 1214.71 L1394.75 1214.71 L1394.17 1214.71 L1393.58 1214.71 L1393 1214.71 L1392.41 1214.71 L1391.82 1214.71 L1391.24 1214.71 L1390.65 1214.71 L1390.06 1214.71 L1389.48 1214.71 L1388.89 1214.71 L1388.3 1214.71 L1387.72 1214.71 L1387.13 1214.71 L1386.55 1214.71 L1385.96 1214.71 L1385.37 1214.71 L1384.79 1214.71 L1384.2 1214.71 L1383.61 1214.71 L1383.03 1214.71 L1382.44 1214.71 L1381.85 1214.71 L1381.27 1214.71 L1380.68 1214.71 L1380.09 1214.71 L1379.51 1214.71 L1378.92 1214.71 L1378.34 1214.71 L1377.75 1214.71 L1377.16 1214.71 L1376.58 1214.71 L1375.99 1214.71 L1375.4 1214.71 L1374.82 1214.71 L1374.23 1214.71 L1373.64 1214.71 L1373.06 1214.71 L1372.47 1214.71 L1371.88 1214.71 L1371.3 1214.71 L1370.71 1214.71 L1370.13 1214.71 L1369.54 1214.71 L1368.95 1214.71 L1368.37 1214.71 L1367.78 1214.71 L1367.19 1214.71 L1366.61 1214.71 L1366.02 1214.71 L1365.43 1214.71 L1364.85 1214.71 L1364.26 1214.71 L1363.68 1214.71 L1363.09 1214.71 L1362.5 1214.71 L1361.92 1214.71 L1361.33 1214.71 L1360.74 1214.71 L1360.16 1214.71 L1359.57 1214.71 L1358.98 1214.71 L1358.4 1214.71 L1357.81 1214.71 L1357.22 1214.71 L1356.64 1214.71 L1356.05 1214.71 L1355.47 1214.71 L1354.88 1214.71 L1354.29 1214.71 L1353.71 1214.71 L1353.12 1214.71 L1352.53 1214.71 L1351.95 1214.71 L1351.36 1214.71 L1350.77 1214.71 L1350.19 1214.71 L1349.6 1214.71 L1349.01 1214.71 L1348.43 1214.71 L1347.84 1214.71 L1347.26 1214.71 L1346.67 1214.71 L1346.08 1214.71 L1345.5 1214.71 L1344.91 1214.71 L1344.32 1214.71 L1343.74 1214.71 L1343.15 1214.71 L1342.56 1214.71 L1341.98 1214.71 L1341.39 1214.71 L1340.8 1214.71 L1340.22 1214.71 L1339.63 1214.71 L1339.05 1214.71 L1338.46 1214.71 L1337.87 1214.71 L1337.29 1214.71 L1336.7 1214.71 L1336.11 1214.71 L1335.53 1214.71 L1334.94 1214.71 L1334.35 1214.71 L1333.77 1214.71 L1333.18 1214.71 L1332.6 1214.71 L1332.01 1214.71 L1331.42 1214.71 L1330.84 1214.71 L1330.25 1214.71 L1329.66 1214.71 L1329.08 1214.71 L1328.49 1214.71 L1327.9 1214.71 L1327.32 1214.71 L1326.73 1214.71 L1326.14 1214.71 L1325.56 1214.71 L1324.97 1214.71 L1324.39 1214.71 L1323.8 1214.71 L1323.21 1214.71 L1322.63 1214.71 L1322.04 1214.71 L1321.45 1214.71 L1320.87 1214.71 L1320.28 1214.71 L1319.69 1214.71 L1319.11 1214.71 L1318.52 1214.71 L1317.93 1214.71 L1317.35 1214.71 L1316.76 1214.71 L1316.18 1214.71 L1315.59 1214.71 L1315 1214.71 L1314.42 1214.71 L1313.83 1214.71 L1313.24 1214.71 L1312.66 1214.71 L1312.07 1214.71 L1311.48 1214.71 L1310.9 1214.71 L1310.31 1214.71 L1309.73 1214.71 L1309.14 1214.71 L1308.55 1214.71 L1307.97 1214.71 L1307.38 1214.71 L1306.79 1214.71 L1306.21 1214.71 L1305.62 1214.71 L1305.03 1214.71 L1304.45 1214.71 L1303.86 1214.71 L1303.27 1214.71 L1302.69 1214.71 L1302.1 1214.71 L1301.52 1214.71 L1300.93 1214.71 L1300.34 1214.71 L1299.76 1214.71 L1299.17 1214.71 L1298.58 1214.71 L1298 1214.71 L1297.41 1214.71 L1296.82 1214.71 L1296.24 1214.71 L1295.65 1214.71 L1295.06 1214.71 L1294.48 1214.71 L1293.89 1214.71 L1293.31 1214.71 L1292.72 1214.71 L1292.13 1214.71 L1291.55 1214.71 L1290.96 1214.71 L1290.37 1214.71 L1289.79 1214.71 L1289.2 1214.71 L1288.61 1214.71 L1288.03 1214.71 L1287.44 1214.71 L1286.86 1214.71 L1286.27 1214.71 L1285.68 1214.71 L1285.1 1214.71 L1284.51 1214.71 L1283.92 1214.71 L1283.34 1214.71 L1282.75 1214.71 L1282.16 1214.71 L1281.58 1214.71 L1280.99 1214.71 L1280.4 1214.71 L1279.82 1214.71 L1279.23 1214.71 L1278.65 1214.71 L1278.06 1214.71 L1277.47 1214.71 L1276.89 1214.71 L1276.3 1214.71 L1275.71 1214.71 L1275.13 1214.71 L1274.54 1214.71 L1273.95 1214.71 L1273.37 1214.71 L1272.78 1214.71 L1272.19 1214.71 L1271.61 1214.71 L1271.02 1214.71 L1270.44 1214.71 L1269.85 1214.71 L1269.26 1214.71 L1268.68 1214.71 L1268.09 1214.71 L1267.5 1214.71 L1266.92 1214.71 L1266.33 1214.71 L1265.74 1214.71 L1265.16 1214.71 L1264.57 1214.71 L1263.98 1214.71 L1263.4 1214.71 L1262.81 1214.71 L1262.23 1214.71 L1261.64 1214.71 L1261.05 1214.71 L1260.47 1214.71 L1259.88 1214.71 L1259.29 1214.71 L1258.71 1214.71 L1258.12 1214.71 L1257.53 1214.71 L1256.95 1214.71 L1256.36 1214.71 L1255.78 1214.71 L1255.19 1214.71 L1254.6 1214.71 L1254.02 1214.71 L1253.43 1214.71 L1252.84 1214.71 L1252.26 1214.71 L1251.67 1214.71 L1251.08 1214.71 L1250.5 1214.71 L1249.91 1214.71 L1249.32 1214.71 L1248.74 1214.71 L1248.15 1214.71 L1247.57 1214.71 L1246.98 1214.71 L1246.39 1214.71 L1245.81 1214.71 L1245.22 1214.71 L1244.63 1214.71 L1244.05 1214.71 L1243.46 1214.71 L1242.87 1214.71 L1242.29 1214.71 L1241.7 1214.71 L1241.11 1214.71 L1240.53 1214.71 L1239.94 1214.71 L1239.36 1214.71 L1238.77 1214.71 L1238.18 1214.71 L1237.6 1214.71 L1237.01 1214.71 L1236.42 1214.71 L1235.84 1214.71 L1235.25 1214.71 L1234.66 1214.71 L1234.08 1214.71 L1233.49 1214.71 L1232.91 1214.71 L1232.32 1214.71 L1231.73 1214.71 L1231.15 1214.71 L1230.56 1214.71 L1229.97 1214.71 L1229.39 1214.71 L1228.8 1214.71 L1228.21 1214.71 L1227.63 1214.71 L1227.04 1214.71 L1226.45 1214.71 L1225.87 1214.71 L1225.28 1214.71 L1224.7 1214.71 L1224.11 1214.71 L1223.52 1214.71 L1222.94 1214.71 L1222.35 1214.71 L1221.76 1214.71 L1221.18 1214.71 L1220.59 1214.71 L1220 1214.71 L1219.42 1214.71 L1218.83 1214.71 L1218.24 1214.71 L1217.66 1214.71 L1217.07 1214.71 L1216.49 1214.71 L1215.9 1214.71 L1215.31 1214.71 L1214.73 1214.71 L1214.14 1214.71 L1213.55 1214.71 L1212.97 1214.71 L1212.38 1214.71 L1211.79 1214.71 L1211.21 1214.71 L1210.62 1214.71 L1210.03 1214.71 L1209.45 1214.71 L1208.86 1214.71 L1208.28 1214.71 L1207.69 1214.71 L1207.1 1214.71 L1206.52 1214.71 L1205.93 1214.71 L1205.34 1214.71 L1204.76 1214.71 L1204.17 1214.71 L1203.58 1214.71 L1203 1214.71 L1202.41 1214.71 L1201.83 1214.71 L1201.24 1214.71 L1200.65 1214.71 L1200.07 1214.71 L1199.48 1214.71 L1198.89 1214.71 L1198.31 1214.71 L1197.72 1214.71 L1197.13 1214.71 L1196.55 1214.71 L1195.96 1214.71 L1195.37 1214.71 L1194.79 1214.71 L1194.2 1214.71 L1193.62 1214.71 L1193.03 1214.71 L1192.44 1214.71 L1191.86 1214.71 L1191.27 1214.71 L1190.68 1214.71 L1190.1 1214.71 L1189.51 1214.71 L1188.92 1214.71 L1188.34 1214.71 L1187.75 1214.71 L1187.16 1214.71 L1186.58 1214.71 L1185.99 1214.71 L1185.41 1214.71 L1184.82 1214.71 L1184.23 1214.71 L1183.65 1214.71 L1183.06 1214.71 L1182.47 1214.71 L1181.89 1214.71 L1181.3 1214.71 L1180.71 1214.71 L1180.13 1214.71 L1179.54 1214.71 L1178.96 1214.71 L1178.37 1214.71 L1177.78 1214.71 L1177.2 1214.71 L1176.61 1214.71 L1176.02 1214.71 L1175.44 1214.71 L1174.85 1214.71 L1174.26 1214.71 L1173.68 1214.71 L1173.09 1214.71 L1172.5 1214.71 L1171.92 1214.71 L1171.33 1214.71 L1170.75 1214.71 L1170.16 1214.71 L1169.57 1214.71 L1168.99 1214.71 L1168.4 1214.71 L1167.81 1214.71 L1167.23 1214.71 L1166.64 1214.71 L1166.05 1214.71 L1165.47 1214.71 L1164.88 1214.71 L1164.29 1214.71 L1163.71 1214.71 L1163.12 1214.71 L1162.54 1214.71 L1161.95 1214.71 L1161.36 1214.71 L1160.78 1214.71 L1160.19 1214.71 L1159.6 1214.71 L1159.02 1214.71 L1158.43 1214.71 L1157.84 1214.71 L1157.26 1214.71 L1156.67 1214.71 L1156.09 1214.71 L1155.5 1214.71 L1154.91 1214.71 L1154.33 1214.71 L1153.74 1214.71 L1153.15 1214.71 L1152.57 1214.71 L1151.98 1214.71 L1151.39 1214.71 L1150.81 1214.71 L1150.22 1214.71 L1149.63 1214.71 L1149.05 1214.71 L1148.46 1214.71 L1147.88 1214.71 L1147.29 1214.71 L1146.7 1214.71 L1146.12 1214.71 L1145.53 1214.71 L1144.94 1214.71 L1144.36 1214.71 L1143.77 1214.71 L1143.18 1214.71 L1142.6 1214.71 L1142.01 1214.71 L1141.42 1214.71 L1140.84 1214.71 L1140.25 1214.71 L1139.67 1214.71 L1139.08 1214.71 L1138.49 1214.71 L1137.91 1214.71 L1137.32 1214.71 L1136.73 1214.71 L1136.15 1214.71 L1135.56 1214.71 L1134.97 1214.71 L1134.39 1214.71 L1133.8 1214.71 L1133.21 1214.71 L1132.63 1214.71 L1132.04 1214.71 L1131.46 1214.71 L1130.87 1214.71 L1130.28 1214.71 L1129.7 1214.71 L1129.11 1214.71 L1128.52 1214.71 L1127.94 1214.71 L1127.35 1214.71 L1126.76 1214.71 L1126.18 1214.71 L1125.59 1214.71 L1125.01 1214.71 L1124.42 1214.71 L1123.83 1214.71 L1123.25 1214.71 L1122.66 1214.71 L1122.07 1214.71 L1121.49 1214.71 L1120.9 1214.71 L1120.31 1214.71 L1119.73 1214.71 L1119.14 1214.71 L1118.55 1214.71 L1117.97 1214.71 L1117.38 1214.71 L1116.8 1214.71 L1116.21 1214.71 L1115.62 1214.71 L1115.04 1214.71 L1114.45 1214.71 L1113.86 1214.71 L1113.28 1214.71 L1112.69 1214.71 L1112.1 1214.71 L1111.52 1214.71 L1110.93 1214.71 L1110.34 1214.71 L1109.76 1214.71 L1109.17 1214.71 L1108.59 1214.71 L1108 1214.71 L1107.41 1214.71 L1106.83 1214.71 L1106.24 1214.71 L1105.65 1214.71 L1105.07 1214.71 L1104.48 1214.71 L1103.89 1214.71 L1103.31 1214.71 L1102.72 1214.71 L1102.14 1214.71 L1101.55 1214.71 L1100.96 1214.71 L1100.38 1214.71 L1099.79 1214.71 L1099.2 1214.71 L1098.62 1214.71 L1098.03 1214.71 L1097.44 1214.71 L1096.86 1214.71 L1096.27 1214.71 L1095.68 1214.71 L1095.1 1214.71 L1094.51 1214.71 L1093.93 1214.71 L1093.34 1214.71 L1092.75 1214.71 L1092.17 1214.71 L1091.58 1214.71 L1090.99 1214.71 L1090.41 1214.71 L1089.82 1214.71 L1089.23 1214.71 L1088.65 1214.71 L1088.06 1214.71 L1087.47 1214.71 L1086.89 1214.71 L1086.3 1214.71 L1085.72 1214.71 L1085.13 1214.71 L1084.54 1214.71 L1083.96 1214.71 L1083.37 1214.71 L1082.78 1214.71 L1082.2 1214.71 L1081.61 1214.71 L1081.02 1214.71 L1080.44 1214.71 L1079.85 1214.71 L1079.26 1214.71 L1078.68 1214.71 L1078.09 1214.71 L1077.51 1214.71 L1076.92 1214.71 L1076.33 1214.71 L1075.75 1214.71 L1075.16 1214.71 L1074.57 1214.71 L1073.99 1214.71 L1073.4 1214.71 L1072.81 1214.71 L1072.23 1214.71 L1071.64 1214.71 L1071.06 1214.71 L1070.47 1214.71 L1069.88 1214.71 L1069.3 1214.71 L1068.71 1214.71 L1068.12 1214.71 L1067.54 1214.71 L1066.95 1214.71 L1066.36 1214.71 L1065.78 1214.71 L1065.19 1214.71 L1064.6 1214.71 L1064.02 1214.71 L1063.43 1214.71 L1062.85 1214.71 L1062.26 1214.71 L1061.67 1214.71 L1061.09 1214.71 L1060.5 1214.71 L1059.91 1214.71 L1059.33 1214.71 L1058.74 1214.71 L1058.15 1214.71 L1057.57 1214.71 L1056.98 1214.71 L1056.39 1214.71 L1055.81 1214.71 L1055.22 1214.71 L1054.64 1214.71 L1054.05 1214.71 L1053.46 1214.71 L1052.88 1214.71 L1052.29 1214.71 L1051.7 1214.71 L1051.12 1214.71 L1050.53 1214.71 L1049.94 1214.71 L1049.36 1214.71 L1048.77 1214.71 L1048.19 1214.71 L1047.6 1214.71 L1047.01 1214.71 L1046.43 1214.71 L1045.84 1214.71 L1045.25 1214.71 L1044.67 1214.71 L1044.08 1214.71 L1043.49 1214.71 L1042.91 1214.71 L1042.32 1214.71 L1041.73 1214.71 L1041.15 1214.71 L1040.56 1214.71 L1039.98 1214.71 L1039.39 1214.71 L1038.8 1214.71 L1038.22 1214.71 L1037.63 1214.71 L1037.04 1214.71 L1036.46 1214.71 L1035.87 1214.71 L1035.28 1214.71 L1034.7 1214.71 L1034.11 1214.71 L1033.52 1214.71 L1032.94 1214.71 L1032.35 1214.71 L1031.77 1214.71 L1031.18 1214.71 L1030.59 1214.71 L1030.01 1214.71 L1029.42 1214.71 L1028.83 1214.71 L1028.25 1214.71 L1027.66 1214.71 L1027.07 1214.71 L1026.49 1214.71 L1025.9 1214.71 L1025.32 1214.71 L1024.73 1214.71 L1024.14 1214.71 L1023.56 1214.71 L1022.97 1214.71 L1022.38 1214.71 L1021.8 1214.71 L1021.21 1214.71 L1020.62 1214.71 L1020.04 1214.71 L1019.45 1214.71 L1018.86 1214.71 L1018.28 1214.71 L1017.69 1214.71 L1017.11 1214.71 L1016.52 1214.71 L1015.93 1214.71 L1015.35 1214.71 L1014.76 1214.71 L1014.17 1214.71 L1013.59 1214.71 L1013 1214.71 L1012.41 1214.71 L1011.83 1214.71 L1011.24 1214.71 L1010.65 1214.71 L1010.07 1214.71 L1009.48 1214.71 L1008.9 1214.71 L1008.31 1214.71 L1007.72 1214.71 L1007.14 1214.71 L1006.55 1214.71 L1005.96 1214.71 L1005.38 1214.71 L1004.79 1214.71 L1004.2 1214.71 L1003.62 1214.71 L1003.03 1214.71 L1002.44 1214.71 L1001.86 1214.71 L1001.27 1214.71 L1000.69 1214.71 L1000.1 1214.71 L999.513 1214.71 L998.926 1214.71 L998.34 1214.71 L997.754 1214.71 L997.167 1214.71 L996.581 1214.71 L995.994 1214.71 L995.408 1214.71 L994.822 1214.71 L994.235 1214.71 L993.649 1214.71 L993.062 1214.71 L992.476 1214.71 L991.889 1214.71 L991.303 1214.71 L990.717 1214.71 L990.13 1214.71 L989.544 1214.71 L988.957 1214.71 L988.371 1214.71 L987.785 1214.71 L987.198 1214.71 L986.612 1214.71 L986.025 1214.71  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.78 986.612,1214.78 987.198,1214.78 987.785,1214.78 988.371,1214.78 988.957,1214.78 989.544,1214.78 990.13,1214.78 990.717,1214.78 991.303,1214.78 991.889,1214.78 992.476,1214.78 993.062,1214.78 993.649,1214.78 994.235,1214.78 994.822,1214.78 995.408,1214.78 995.994,1214.78 996.581,1214.78 997.167,1214.78 997.754,1214.78 998.34,1214.78 998.926,1214.78 999.513,1214.78 1000.1,1214.78 1000.69,1214.78 1001.27,1214.78 1001.86,1214.78 1002.44,1214.78 1003.03,1214.78 1003.62,1214.78 1004.2,1214.78 1004.79,1214.78 1005.38,1214.78 1005.96,1214.78 1006.55,1214.78 1007.14,1214.78 1007.72,1214.78 1008.31,1214.78 1008.9,1214.78 1009.48,1214.78 1010.07,1214.78 1010.65,1214.78 1011.24,1214.78 1011.83,1214.78 1012.41,1214.78 1013,1214.78 1013.59,1214.78 1014.17,1214.78 1014.76,1214.78 1015.35,1214.78 1015.93,1214.78 1016.52,1214.78 1017.11,1214.78 1017.69,1214.78 1018.28,1214.78 1018.86,1214.78 1019.45,1214.78 1020.04,1214.78 1020.62,1214.78 1021.21,1214.78 1021.8,1214.78 1022.38,1214.78 1022.97,1214.78 1023.56,1214.78 1024.14,1214.78 1024.73,1214.78 1025.32,1214.78 1025.9,1214.78 1026.49,1214.78 1027.07,1214.78 1027.66,1214.78 1028.25,1214.78 1028.83,1214.78 1029.42,1214.78 1030.01,1214.78 1030.59,1214.78 1031.18,1214.78 1031.77,1214.78 1032.35,1214.78 1032.94,1214.78 1033.52,1214.78 1034.11,1214.78 1034.7,1214.78 1035.28,1214.78 1035.87,1214.78 1036.46,1214.78 1037.04,1214.78 1037.63,1214.78 1038.22,1214.78 1038.8,1214.78 1039.39,1214.78 1039.98,1214.78 1040.56,1214.78 1041.15,1214.78 1041.73,1214.78 1042.32,1214.78 1042.91,1214.78 1043.49,1214.78 1044.08,1214.78 1044.67,1214.78 1045.25,1214.78 1045.84,1214.78 1046.43,1214.78 1047.01,1214.78 1047.6,1214.78 1048.19,1214.78 1048.77,1214.78 1049.36,1214.78 1049.94,1214.78 1050.53,1214.78 1051.12,1214.78 1051.7,1214.78 1052.29,1214.78 1052.88,1214.78 1053.46,1214.78 1054.05,1214.78 1054.64,1214.78 1055.22,1214.78 1055.81,1214.78 1056.39,1214.78 1056.98,1214.78 1057.57,1214.78 1058.15,1214.78 1058.74,1214.78 1059.33,1214.78 1059.91,1214.78 1060.5,1214.78 1061.09,1214.78 1061.67,1214.78 1062.26,1214.78 1062.85,1214.78 1063.43,1214.78 1064.02,1214.78 1064.6,1214.78 1065.19,1214.78 1065.78,1214.78 1066.36,1214.78 1066.95,1214.78 1067.54,1214.78 1068.12,1214.78 1068.71,1214.78 1069.3,1214.78 1069.88,1214.78 1070.47,1214.78 1071.06,1214.78 1071.64,1214.78 1072.23,1214.78 1072.81,1214.78 1073.4,1214.78 1073.99,1214.78 1074.57,1214.78 1075.16,1214.78 1075.75,1214.78 1076.33,1214.78 1076.92,1214.78 1077.51,1214.78 1078.09,1214.78 1078.68,1214.78 1079.26,1214.78 1079.85,1214.78 1080.44,1214.78 1081.02,1214.78 1081.61,1214.78 1082.2,1214.78 1082.78,1214.78 1083.37,1214.78 1083.96,1214.78 1084.54,1214.78 1085.13,1214.78 1085.72,1214.78 1086.3,1214.78 1086.89,1214.78 1087.47,1214.78 1088.06,1214.78 1088.65,1214.78 1089.23,1214.78 1089.82,1214.78 1090.41,1214.78 1090.99,1214.78 1091.58,1214.78 1092.17,1214.78 1092.75,1214.78 1093.34,1214.78 1093.93,1214.78 1094.51,1214.78 1095.1,1214.78 1095.68,1214.78 1096.27,1214.78 1096.86,1214.78 1097.44,1214.78 1098.03,1214.78 1098.62,1214.78 1099.2,1214.78 1099.79,1214.78 1100.38,1214.78 1100.96,1214.78 1101.55,1214.78 1102.14,1214.78 1102.72,1214.78 1103.31,1214.78 1103.89,1214.78 1104.48,1214.78 1105.07,1214.78 1105.65,1214.78 1106.24,1214.78 1106.83,1214.78 1107.41,1214.78 1108,1214.78 1108.59,1214.78 1109.17,1214.78 1109.76,1214.78 1110.34,1214.78 1110.93,1214.78 1111.52,1214.78 1112.1,1214.78 1112.69,1214.78 1113.28,1214.78 1113.86,1214.78 1114.45,1214.78 1115.04,1214.78 1115.62,1214.78 1116.21,1214.78 1116.8,1214.78 1117.38,1214.78 1117.97,1214.78 1118.55,1214.78 1119.14,1214.78 1119.73,1214.78 1120.31,1214.78 1120.9,1214.78 1121.49,1214.78 1122.07,1214.78 1122.66,1214.78 1123.25,1214.78 1123.83,1214.78 1124.42,1214.78 1125.01,1214.78 1125.59,1214.78 1126.18,1214.78 1126.76,1214.78 1127.35,1214.78 1127.94,1214.78 1128.52,1214.78 1129.11,1214.78 1129.7,1214.78 1130.28,1214.78 1130.87,1214.78 1131.46,1214.78 1132.04,1214.78 1132.63,1214.78 1133.21,1214.78 1133.8,1214.78 1134.39,1214.78 1134.97,1214.78 1135.56,1214.78 1136.15,1214.78 1136.73,1214.78 1137.32,1214.78 1137.91,1214.78 1138.49,1214.78 1139.08,1214.78 1139.67,1214.78 1140.25,1214.78 1140.84,1214.78 1141.42,1214.78 1142.01,1214.78 1142.6,1214.78 1143.18,1214.78 1143.77,1214.78 1144.36,1214.78 1144.94,1214.78 1145.53,1214.78 1146.12,1214.78 1146.7,1214.78 1147.29,1214.78 1147.88,1214.78 1148.46,1214.78 1149.05,1214.78 1149.63,1214.78 1150.22,1214.78 1150.81,1214.78 1151.39,1214.78 1151.98,1214.78 1152.57,1214.78 1153.15,1214.78 1153.74,1214.78 1154.33,1214.78 1154.91,1214.78 1155.5,1214.78 1156.09,1214.78 1156.67,1214.78 1157.26,1214.78 1157.84,1214.78 1158.43,1214.78 1159.02,1214.78 1159.6,1214.78 1160.19,1214.78 1160.78,1214.78 1161.36,1214.78 1161.95,1214.78 1162.54,1214.78 1163.12,1214.78 1163.71,1214.78 1164.29,1214.78 1164.88,1214.78 1165.47,1214.78 1166.05,1214.78 1166.64,1214.78 1167.23,1214.78 1167.81,1214.78 1168.4,1214.78 1168.99,1214.78 1169.57,1214.78 1170.16,1214.78 1170.75,1214.78 1171.33,1214.78 1171.92,1214.78 1172.5,1214.78 1173.09,1214.78 1173.68,1214.78 1174.26,1214.78 1174.85,1214.78 1175.44,1214.78 1176.02,1214.78 1176.61,1214.78 1177.2,1214.78 1177.78,1214.78 1178.37,1214.78 1178.96,1214.78 1179.54,1214.78 1180.13,1214.78 1180.71,1214.78 1181.3,1214.78 1181.89,1214.78 1182.47,1214.78 1183.06,1214.78 1183.65,1214.78 1184.23,1214.78 1184.82,1214.78 1185.41,1214.78 1185.99,1214.78 1186.58,1214.78 1187.16,1214.78 1187.75,1214.78 1188.34,1214.78 1188.92,1214.78 1189.51,1214.78 1190.1,1214.78 1190.68,1214.78 1191.27,1214.78 1191.86,1214.78 1192.44,1214.78 1193.03,1214.78 1193.62,1214.78 1194.2,1214.78 1194.79,1214.78 1195.37,1214.78 1195.96,1214.78 1196.55,1214.78 1197.13,1214.78 1197.72,1214.78 1198.31,1214.78 1198.89,1214.78 1199.48,1214.78 1200.07,1214.78 1200.65,1214.78 1201.24,1214.78 1201.83,1214.78 1202.41,1214.78 1203,1214.78 1203.58,1214.78 1204.17,1214.78 1204.76,1214.78 1205.34,1214.78 1205.93,1214.78 1206.52,1214.78 1207.1,1214.78 1207.69,1214.78 1208.28,1214.78 1208.86,1214.78 1209.45,1214.78 1210.03,1214.78 1210.62,1214.78 1211.21,1214.78 1211.79,1214.78 1212.38,1214.78 1212.97,1214.78 1213.55,1214.78 1214.14,1214.78 1214.73,1214.78 1215.31,1214.78 1215.9,1214.78 1216.49,1214.78 1217.07,1214.78 1217.66,1214.78 1218.24,1214.78 1218.83,1214.78 1219.42,1214.78 1220,1214.78 1220.59,1214.78 1221.18,1214.78 1221.76,1214.78 1222.35,1214.78 1222.94,1214.78 1223.52,1214.78 1224.11,1214.78 1224.7,1214.78 1225.28,1214.78 1225.87,1214.78 1226.45,1214.78 1227.04,1214.78 1227.63,1214.78 1228.21,1214.78 1228.8,1214.78 1229.39,1214.78 1229.97,1214.78 1230.56,1214.78 1231.15,1214.78 1231.73,1214.78 1232.32,1214.78 1232.91,1214.78 1233.49,1214.78 1234.08,1214.78 1234.66,1214.78 1235.25,1214.78 1235.84,1214.78 1236.42,1214.78 1237.01,1214.78 1237.6,1214.78 1238.18,1214.78 1238.77,1214.78 1239.36,1214.78 1239.94,1214.78 1240.53,1214.78 1241.11,1214.78 1241.7,1214.78 1242.29,1214.78 1242.87,1214.78 1243.46,1214.78 1244.05,1214.78 1244.63,1214.78 1245.22,1214.78 1245.81,1214.78 1246.39,1214.78 1246.98,1214.78 1247.57,1214.78 1248.15,1214.78 1248.74,1214.78 1249.32,1214.78 1249.91,1214.78 1250.5,1214.78 1251.08,1214.78 1251.67,1214.78 1252.26,1214.78 1252.84,1214.78 1253.43,1214.78 1254.02,1214.78 1254.6,1214.78 1255.19,1214.78 1255.78,1214.78 1256.36,1214.78 1256.95,1214.78 1257.53,1214.78 1258.12,1214.78 1258.71,1214.78 1259.29,1214.78 1259.88,1214.78 1260.47,1214.78 1261.05,1214.78 1261.64,1214.78 1262.23,1214.78 1262.81,1214.78 1263.4,1214.78 1263.98,1214.78 1264.57,1214.78 1265.16,1214.78 1265.74,1214.78 1266.33,1214.78 1266.92,1214.78 1267.5,1214.78 1268.09,1214.78 1268.68,1214.78 1269.26,1214.78 1269.85,1214.78 1270.44,1214.78 1271.02,1214.78 1271.61,1214.78 1272.19,1214.78 1272.78,1214.78 1273.37,1214.78 1273.95,1214.78 1274.54,1214.78 1275.13,1214.78 1275.71,1214.78 1276.3,1214.78 1276.89,1214.78 1277.47,1214.78 1278.06,1214.78 1278.65,1214.78 1279.23,1214.78 1279.82,1214.78 1280.4,1214.78 1280.99,1214.78 1281.58,1214.78 1282.16,1214.78 1282.75,1214.78 1283.34,1214.78 1283.92,1214.78 1284.51,1214.78 1285.1,1214.78 1285.68,1214.78 1286.27,1214.78 1286.86,1214.78 1287.44,1214.78 1288.03,1214.78 1288.61,1214.78 1289.2,1214.78 1289.79,1214.78 1290.37,1214.78 1290.96,1214.78 1291.55,1214.78 1292.13,1214.78 1292.72,1214.78 1293.31,1214.78 1293.89,1214.78 1294.48,1214.78 1295.06,1214.78 1295.65,1214.78 1296.24,1214.78 1296.82,1214.78 1297.41,1214.78 1298,1214.78 1298.58,1214.78 1299.17,1214.78 1299.76,1214.78 1300.34,1214.78 1300.93,1214.78 1301.52,1214.78 1302.1,1214.78 1302.69,1214.78 1303.27,1214.78 1303.86,1214.78 1304.45,1214.78 1305.03,1214.78 1305.62,1214.78 1306.21,1214.78 1306.79,1214.78 1307.38,1214.78 1307.97,1214.78 1308.55,1214.78 1309.14,1214.78 1309.73,1214.78 1310.31,1214.78 1310.9,1214.78 1311.48,1214.78 1312.07,1214.78 1312.66,1214.78 1313.24,1214.78 1313.83,1214.78 1314.42,1214.78 1315,1214.78 1315.59,1214.78 1316.18,1214.78 1316.76,1214.78 1317.35,1214.78 1317.93,1214.78 1318.52,1214.78 1319.11,1214.78 1319.69,1214.78 1320.28,1214.78 1320.87,1214.78 1321.45,1214.78 1322.04,1214.78 1322.63,1214.78 1323.21,1214.78 1323.8,1214.78 1324.39,1214.78 1324.97,1214.78 1325.56,1214.78 1326.14,1214.78 1326.73,1214.78 1327.32,1214.78 1327.9,1214.78 1328.49,1214.78 1329.08,1214.78 1329.66,1214.78 1330.25,1214.78 1330.84,1214.78 1331.42,1214.78 1332.01,1214.78 1332.6,1214.78 1333.18,1214.78 1333.77,1214.78 1334.35,1214.78 1334.94,1214.78 1335.53,1214.78 1336.11,1214.78 1336.7,1214.78 1337.29,1214.78 1337.87,1214.78 1338.46,1214.78 1339.05,1214.78 1339.63,1214.78 1340.22,1214.78 1340.8,1214.78 1341.39,1214.78 1341.98,1214.78 1342.56,1214.78 1343.15,1214.78 1343.74,1214.78 1344.32,1214.78 1344.91,1214.78 1345.5,1214.78 1346.08,1214.78 1346.67,1214.78 1347.26,1214.78 1347.84,1214.78 1348.43,1214.78 1349.01,1214.78 1349.6,1214.78 1350.19,1214.78 1350.77,1214.78 1351.36,1214.78 1351.95,1214.78 1352.53,1214.78 1353.12,1214.78 1353.71,1214.78 1354.29,1214.78 1354.88,1214.78 1355.47,1214.78 1356.05,1214.78 1356.64,1214.78 1357.22,1214.78 1357.81,1214.78 1358.4,1214.78 1358.98,1214.78 1359.57,1214.78 1360.16,1214.78 1360.74,1214.78 1361.33,1214.78 1361.92,1214.78 1362.5,1214.78 1363.09,1214.78 1363.68,1214.78 1364.26,1214.78 1364.85,1214.78 1365.43,1214.78 1366.02,1214.78 1366.61,1214.78 1367.19,1214.78 1367.78,1214.78 1368.37,1214.78 1368.95,1214.78 1369.54,1214.78 1370.13,1214.78 1370.71,1214.78 1371.3,1214.78 1371.88,1214.78 1372.47,1214.78 1373.06,1214.78 1373.64,1214.78 1374.23,1214.78 1374.82,1214.78 1375.4,1214.78 1375.99,1214.78 1376.58,1214.78 1377.16,1214.78 1377.75,1214.78 1378.34,1214.78 1378.92,1214.78 1379.51,1214.78 1380.09,1214.78 1380.68,1214.78 1381.27,1214.78 1381.85,1214.78 1382.44,1214.78 1383.03,1214.78 1383.61,1214.78 1384.2,1214.78 1384.79,1214.78 1385.37,1214.78 1385.96,1214.78 1386.55,1214.78 1387.13,1214.78 1387.72,1214.78 1388.3,1214.78 1388.89,1214.78 1389.48,1214.78 1390.06,1214.78 1390.65,1214.78 1391.24,1214.78 1391.82,1214.78 1392.41,1214.78 1393,1214.78 1393.58,1214.78 1394.17,1214.78 1394.75,1214.78 1395.34,1214.78 1395.93,1214.78 1396.51,1214.78 1397.1,1214.78 1397.69,1214.78 1398.27,1214.78 1398.86,1214.78 1399.45,1214.78 1400.03,1214.78 1400.62,1214.78 1401.21,1214.78 1401.79,1214.78 1402.38,1214.78 1402.96,1214.78 1403.55,1214.78 1404.14,1214.78 1404.72,1214.78 1405.31,1214.78 1405.9,1214.78 1406.48,1214.78 1407.07,1214.78 1407.66,1214.78 1408.24,1214.78 1408.83,1214.78 1409.42,1214.78 1410,1214.78 1410.59,1214.78 1411.17,1214.78 1411.76,1214.78 1412.35,1214.78 1412.93,1214.78 1413.52,1214.78 1414.11,1214.78 1414.69,1214.78 1415.28,1214.78 1415.87,1214.78 1416.45,1214.78 1417.04,1214.78 1417.63,1214.78 1418.21,1214.78 1418.8,1214.78 1419.38,1214.78 1419.97,1214.78 1420.56,1214.78 1421.14,1214.78 1421.73,1214.78 1422.32,1214.78 1422.9,1214.78 1423.49,1214.78 1424.08,1214.78 1424.66,1214.78 1425.25,1214.78 1425.83,1214.78 1426.42,1214.78 1427.01,1214.78 1427.59,1214.78 1428.18,1214.78 1428.77,1214.78 1429.35,1214.78 1429.94,1214.78 1430.53,1214.78 1431.11,1214.78 1431.7,1214.78 1432.29,1214.78 1432.87,1214.78 1433.46,1214.78 1434.04,1214.78 1434.63,1214.78 1435.22,1214.78 1435.8,1214.78 1436.39,1214.78 1436.98,1214.78 1437.56,1214.78 1438.15,1214.78 1438.74,1214.78 1439.32,1214.78 1439.91,1214.78 1440.5,1214.78 1441.08,1214.78 1441.67,1214.78 1442.25,1214.78 1442.84,1214.78 1443.43,1214.78 1444.01,1214.78 1444.6,1214.78 1445.19,1214.78 1445.77,1214.78 1446.36,1214.78 1446.95,1214.78 1447.53,1214.78 1448.12,1214.78 1448.7,1214.78 1449.29,1214.78 1449.88,1214.78 1450.46,1214.78 1451.05,1214.78 1451.64,1214.78 1452.22,1214.78 1452.81,1214.78 1453.4,1214.78 1453.98,1214.78 1454.57,1214.78 1455.16,1214.78 1455.74,1214.78 1456.33,1214.78 1456.91,1214.78 1457.5,1214.78 1458.09,1214.78 1458.67,1214.78 1459.26,1214.78 1459.85,1214.78 1460.43,1214.78 1461.02,1214.78 1461.61,1214.78 1462.19,1214.78 1462.78,1214.78 1463.37,1214.78 1463.95,1214.78 1464.54,1214.78 1465.12,1214.78 1465.71,1214.78 1466.3,1214.78 1466.88,1214.78 1467.47,1214.78 1468.06,1214.78 1468.64,1214.78 1469.23,1214.78 1469.82,1214.78 1470.4,1214.78 1470.99,1214.78 1471.57,1214.78 1472.16,1214.78 1472.75,1214.78 1473.33,1214.78 1473.92,1214.78 1474.51,1214.78 1475.09,1214.78 1475.68,1214.78 1476.27,1214.78 1476.85,1214.78 1477.44,1214.78 1478.03,1214.78 1478.61,1214.78 1479.2,1214.78 1479.78,1214.78 1480.37,1214.78 1480.96,1214.78 1481.54,1214.78 1482.13,1214.78 1482.72,1214.78 1483.3,1214.78 1483.89,1214.78 1484.48,1214.78 1485.06,1214.78 1485.65,1214.78 1486.24,1214.78 1486.82,1214.78 1487.41,1214.78 1487.99,1214.78 1488.58,1214.78 1489.17,1214.78 1489.75,1214.78 1490.34,1214.78 1490.93,1214.78 1491.51,1214.78 1492.1,1214.78 1492.69,1214.78 1493.27,1214.78 1493.86,1214.78 1494.45,1214.78 1495.03,1214.78 1495.62,1214.78 1496.2,1214.78 1496.79,1214.78 1497.38,1214.78 1497.96,1214.78 1498.55,1214.78 1499.14,1214.78 1499.72,1214.78 1500.31,1214.78 1500.9,1214.78 1501.48,1214.78 1502.07,1214.78 1502.65,1214.78 1503.24,1214.78 1503.83,1214.78 1504.41,1214.78 1505,1214.78 1505.59,1214.78 1506.17,1214.78 1506.76,1214.78 1507.35,1214.78 1507.93,1214.78 1508.52,1214.78 1509.11,1214.78 1509.69,1214.78 1510.28,1214.78 1510.86,1214.78 1511.45,1214.78 1512.04,1214.78 1512.62,1214.78 1513.21,1214.78 1513.8,1214.78 1514.38,1214.78 1514.97,1214.78 1515.56,1214.78 1516.14,1214.78 1516.73,1214.78 1517.32,1214.78 1517.9,1214.78 1518.49,1214.78 1519.07,1214.78 1519.66,1214.78 1520.25,1214.78 1520.83,1214.78 1521.42,1214.78 1522.01,1214.78 1522.59,1214.78 1523.18,1214.78 1523.77,1214.78 1524.35,1214.78 1524.94,1214.78 1525.52,1214.78 1526.11,1214.78 1526.7,1214.78 1527.28,1214.78 1527.87,1214.78 1528.46,1214.78 1529.04,1214.78 1529.63,1214.78 1530.22,1214.78 1530.8,1214.78 1531.39,1214.78 1531.98,1214.78 1532.56,1214.78 1533.15,1214.78 1533.73,1214.78 1534.32,1214.78 1534.91,1214.78 1535.49,1214.78 1536.08,1214.78 1536.67,1214.78 1537.25,1214.78 1537.84,1214.78 1538.43,1214.78 1539.01,1214.78 1539.6,1214.78 1540.19,1214.78 1540.77,1214.78 1541.36,1214.78 1541.94,1214.78 1542.53,1214.78 1543.12,1214.78 1543.7,1214.78 1544.29,1214.78 1544.88,1214.78 1545.46,1214.78 1546.05,1214.78 1546.64,1214.78 1547.22,1214.78 1547.81,1214.78 1548.4,1214.78 1548.98,1214.78 1549.57,1214.78 1550.15,1214.78 1550.74,1214.78 1551.33,1214.78 1551.91,1214.78 1552.5,1214.78 1553.09,1214.78 1553.67,1214.78 1554.26,1214.78 1554.85,1214.78 1555.43,1214.78 1556.02,1214.78 1556.6,1214.78 1557.19,1214.78 1557.78,1214.78 1558.36,1214.78 1558.95,1214.78 1559.54,1214.78 1560.12,1214.78 1560.71,1214.78 1561.3,1214.78 1561.88,1214.78 1562.47,1214.78 1563.06,1214.78 1563.64,1214.78 1564.23,1214.78 1564.81,1214.78 1565.4,1214.78 1565.99,1214.78 1566.57,1214.78 1567.16,1214.78 1567.75,1214.78 1568.33,1214.78 1568.92,1214.78 1569.51,1214.78 1570.09,1214.78 1570.68,1214.78 1571.27,1214.78 1571.85,1214.78 1572.44,1214.78 1573.02,1214.78 1573.61,1214.78 1574.2,1214.78 1574.78,1214.78 1575.37,1214.78 1575.96,1214.78 1576.54,1214.78 1577.13,1214.78 1577.72,1214.78 1578.3,1214.78 1578.89,1214.78 1579.47,1214.78 1580.06,1214.78 1580.65,1214.78 1581.23,1214.78 1581.82,1214.78 1582.41,1214.78 1582.99,1214.78 1583.58,1214.78 1584.17,1214.78 1584.75,1214.78 1585.34,1214.78 1585.93,1214.78 1586.51,1214.78 1587.1,1214.78 1587.68,1214.78 1588.27,1214.78 1588.86,1214.78 1589.44,1214.78 1590.03,1214.78 1590.62,1214.78 1591.2,1214.78 1591.79,1214.78 1592.38,1214.78 1592.96,1214.78 1593.55,1214.78 1594.14,1214.78 1594.72,1214.78 1595.31,1214.78 1595.89,1214.78 1596.48,1214.78 1597.07,1214.78 1597.65,1214.78 1598.24,1214.78 1598.83,1214.78 1599.41,1214.78 1600,1214.78 1600.59,1214.78 1601.17,1214.78 1601.76,1214.78 1602.34,1214.78 1602.93,1214.78 1603.52,1214.78 1604.1,1214.78 1604.69,1214.78 1605.28,1214.78 1605.86,1214.78 1606.45,1214.78 1607.04,1214.78 1607.62,1214.78 1608.21,1214.78 1608.8,1214.78 1609.38,1214.78 1609.97,1214.78 1610.55,1214.78 1611.14,1214.78 1611.73,1214.78 1612.31,1214.78 1612.9,1214.78 1613.49,1214.78 1614.07,1214.78 1614.66,1214.78 1615.25,1214.78 1615.83,1214.78 1616.42,1214.78 1617.01,1214.78 1617.59,1214.78 1618.18,1214.78 1618.76,1214.78 1619.35,1214.78 1619.94,1214.78 1620.52,1214.78 1621.11,1214.78 1621.7,1214.78 1622.28,1214.78 1622.87,1214.78 1623.46,1214.78 1624.04,1214.78 1624.63,1214.78 1625.22,1214.78 1625.8,1214.78 1626.39,1214.78 1626.97,1214.78 1627.56,1214.78 1628.15,1214.78 1628.73,1214.78 1629.32,1214.78 1629.91,1214.78 1630.49,1214.78 1631.08,1214.78 1631.67,1214.78 1632.25,1214.78 1632.84,1214.78 1633.42,1214.78 1634.01,1214.78 1634.6,1214.78 1635.18,1214.78 1635.77,1214.78 1636.36,1214.78 1636.94,1214.78 1637.53,1214.78 1638.12,1214.78 1638.7,1214.78 1639.29,1214.78 1639.88,1214.78 1640.46,1214.78 1641.05,1214.78 1641.63,1214.78 1642.22,1214.78 1642.81,1214.78 1643.39,1214.78 1643.98,1214.78 1644.57,1214.78 1645.15,1214.78 1645.74,1214.78 1646.33,1214.78 1646.91,1214.78 1647.5,1214.78 1648.09,1214.78 1648.67,1214.78 1649.26,1214.78 1649.84,1214.78 1650.43,1214.78 1651.02,1214.78 1651.6,1214.78 1652.19,1214.78 1652.78,1214.78 1653.36,1214.78 1653.95,1214.78 1654.54,1214.78 1655.12,1214.78 1655.71,1214.78 1656.29,1214.78 1656.88,1214.78 1657.47,1214.78 1658.05,1214.78 1658.64,1214.78 1659.23,1214.78 1659.81,1214.78 1660.4,1214.78 1660.99,1214.78 1661.57,1214.78 1662.16,1214.78 1662.75,1214.78 1663.33,1214.78 1663.92,1214.78 1664.5,1214.78 1665.09,1214.78 1665.68,1214.78 1666.26,1214.78 1666.85,1214.78 1667.44,1214.78 1668.02,1214.78 1668.61,1214.78 1669.2,1214.78 1669.78,1214.78 1670.37,1214.78 1670.96,1214.78 1671.54,1214.78 1672.13,1214.78 1672.71,1214.78 1673.3,1214.78 1673.89,1214.78 1674.47,1214.78 1675.06,1214.78 1675.65,1214.78 1676.23,1214.78 1676.82,1214.78 1677.41,1214.78 1677.99,1214.78 1678.58,1214.78 1679.17,1214.78 1679.75,1214.78 1680.34,1214.78 1680.92,1214.78 1681.51,1214.78 1682.1,1214.78 1682.68,1214.78 1683.27,1214.78 1683.86,1214.78 1684.44,1214.78 1685.03,1214.78 1685.62,1214.78 1686.2,1214.78 1686.79,1214.78 1687.37,1214.78 1687.96,1214.78 1688.55,1214.78 1689.13,1214.78 1689.72,1214.78 1690.31,1214.78 1690.89,1214.78 1691.48,1214.78 1692.07,1214.78 1692.65,1214.78 1693.24,1214.78 1693.83,1214.78 1694.41,1214.78 1695,1214.78 1695.58,1214.78 1696.17,1214.78 1696.76,1214.78 1697.34,1214.78 1697.93,1214.78 1698.52,1214.78 1699.1,1214.78 1699.69,1214.78 1700.28,1214.78 1700.86,1214.78 1701.45,1214.78 1702.04,1214.78 1702.62,1214.78 1703.21,1214.78 1703.79,1214.78 1704.38,1214.78 1704.97,1214.78 1705.55,1214.78 1706.14,1214.78 1706.73,1214.78 1707.31,1214.78 1707.9,1214.78 1708.49,1214.78 1709.07,1214.78 1709.66,1214.78 1710.24,1214.78 1710.83,1214.78 1711.42,1214.78 1712,1214.78 1712.59,1214.78 1713.18,1214.78 1713.76,1214.78 1714.35,1214.78 1714.94,1214.78 1715.52,1214.78 1716.11,1214.78 1716.7,1214.78 1717.28,1214.78 1717.87,1214.78 1718.45,1214.78 1719.04,1214.78 1719.63,1214.78 1720.21,1214.78 1720.8,1214.78 1721.39,1214.78 1721.97,1214.78 1722.56,1214.78 1723.15,1214.78 1723.73,1214.78 1724.32,1214.78 1724.91,1214.78 1725.49,1214.78 1726.08,1214.78 1726.66,1214.78 1727.25,1214.78 1727.84,1214.78 1728.42,1214.78 1729.01,1214.78 1729.6,1214.78 1730.18,1214.78 1730.77,1214.78 1731.36,1214.78 1731.94,1214.78 1732.53,1214.78 1733.11,1214.78 1733.7,1214.78 1734.29,1214.78 1734.87,1214.78 1735.46,1214.78 1736.05,1214.78 1736.63,1214.78 1737.22,1214.78 1737.81,1214.78 1738.39,1214.78 1738.98,1214.78 1739.57,1214.78 1740.15,1214.78 1740.74,1214.78 1741.32,1214.78 1741.91,1214.78 1742.5,1214.78 1743.08,1214.78 1743.67,1214.78 1744.26,1214.78 1744.84,1214.78 1745.43,1214.78 1746.02,1214.78 1746.6,1214.78 1747.19,1214.78 1747.78,1214.78 1748.36,1214.78 1748.95,1214.78 1749.53,1214.78 1750.12,1214.78 1750.71,1214.78 1751.29,1214.78 1751.88,1214.78 1752.47,1214.78 1753.05,1214.78 1753.64,1214.78 1754.23,1214.78 1754.81,1214.78 1755.4,1214.78 1755.99,1214.78 1756.57,1214.78 1757.16,1214.78 1757.74,1214.78 1758.33,1214.78 1758.92,1214.78 1759.5,1214.78 1760.09,1214.78 1760.68,1214.78 1761.26,1214.78 1761.85,1214.78 1762.44,1214.78 1763.02,1214.78 1763.61,1214.78 1764.19,1214.78 1764.78,1214.78 1765.37,1214.78 1765.95,1214.78 1766.54,1214.78 1767.13,1214.78 1767.71,1214.78 1768.3,1214.78 1768.89,1214.78 1769.47,1214.78 1770.06,1214.78 1770.65,1214.78 1771.23,1214.78 1771.82,1214.78 1772.4,1214.78 1772.99,1214.78 1773.58,1214.78 1774.16,1214.78 1774.75,1214.78 1775.34,1214.78 1775.92,1214.78 1776.51,1214.78 1777.1,1214.78 1777.68,1214.78 1778.27,1214.78 1778.86,1214.78 1779.44,1214.78 1780.03,1214.78 1780.61,1214.78 1781.2,1214.78 1781.79,1214.78 1782.37,1214.78 1782.96,1214.78 1783.55,1214.78 1784.13,1214.78 1784.72,1214.78 1785.31,1214.78 1785.89,1214.78 1786.48,1214.78 1787.06,1214.78 1787.65,1214.78 1788.24,1214.78 1788.82,1214.78 1789.41,1214.78 1790,1214.78 1790.58,1214.78 1791.17,1214.78 1791.76,1214.78 1792.34,1214.78 1792.93,1214.78 1793.52,1214.78 1794.1,1214.78 1794.69,1214.78 1795.27,1214.78 1795.86,1214.78 1796.45,1214.78 1797.03,1214.78 1797.62,1214.78 1798.21,1214.78 1798.79,1214.78 1799.38,1214.78 1799.97,1214.78 1800.55,1214.78 1801.14,1214.78 1801.73,1214.78 1802.31,1214.78 1802.9,1214.78 1803.48,1214.78 1804.07,1214.78 1804.66,1214.78 1805.24,1214.78 1805.83,1214.78 1806.42,1214.78 1807,1214.78 1807.59,1214.78 1808.18,1214.78 1808.76,1214.78 1809.35,1214.78 1809.94,1214.78 1810.52,1214.78 1811.11,1214.78 1811.69,1214.78 1812.28,1214.78 1812.87,1214.78 1813.45,1214.78 1814.04,1214.78 1814.63,1214.78 1815.21,1214.78 1815.8,1214.78 1816.39,1214.78 1816.97,1214.78 1817.56,1214.78 1818.14,1214.78 1818.73,1214.78 1819.32,1214.78 1819.9,1214.78 1820.49,1214.78 1821.08,1214.78 1821.66,1214.78 1822.25,1214.78 1822.84,1214.78 1823.42,1214.78 1824.01,1214.78 1824.6,1214.78 1825.18,1214.78 1825.77,1214.78 1826.35,1214.78 1826.94,1214.78 1827.53,1214.78 1828.11,1214.78 1828.7,1214.78 1829.29,1214.78 1829.87,1214.78 1830.46,1214.78 1831.05,1214.78 1831.63,1214.78 1832.22,1214.78 1832.81,1214.78 1833.39,1214.78 1833.98,1214.78 1834.56,1214.78 1835.15,1214.78 1835.74,1214.78 1836.32,1214.78 1836.91,1214.78 1837.5,1214.78 1838.08,1214.78 1838.67,1214.78 1839.26,1214.78 1839.84,1214.78 1840.43,1214.78 1841.01,1214.78 1841.6,1214.78 1842.19,1214.78 1842.77,1214.78 1843.36,1214.78 1843.95,1214.78 1844.53,1214.78 1845.12,1214.78 1845.71,1214.78 1846.29,1214.78 1846.88,1214.78 1847.47,1214.78 1848.05,1214.78 1848.64,1214.78 1849.22,1214.78 1849.81,1214.78 1850.4,1214.78 1850.98,1214.78 1851.57,1214.78 1852.16,1214.78 1852.74,1214.78 1853.33,1214.78 1853.92,1214.78 1854.5,1214.78 1855.09,1214.78 1855.68,1214.78 1856.26,1214.78 1856.85,1214.78 1857.43,1214.78 1858.02,1214.78 1858.61,1214.78 1859.19,1214.78 1859.78,1214.78 1860.37,1214.78 1860.95,1214.78 1861.54,1214.78 1862.13,1214.78 1862.71,1214.78 1863.3,1214.78 1863.88,1214.78 1864.47,1214.78 1865.06,1214.78 1865.64,1214.78 1866.23,1214.78 1866.82,1214.78 1867.4,1214.78 1867.99,1214.78 1868.58,1214.78 1869.16,1214.78 1869.75,1214.78 1870.34,1214.78 1870.92,1214.78 1871.51,1214.78 1872.09,1214.78 1872.68,1214.78 1873.27,1214.78 1873.85,1214.78 1874.44,1214.78 1875.03,1214.78 1875.61,1214.78 1876.2,1214.78 1876.79,1214.78 1877.37,1214.78 1877.96,1214.78 1878.55,1214.78 1879.13,1214.78 1879.72,1214.78 1880.3,1214.78 1880.89,1214.78 1881.48,1214.78 1882.06,1214.78 1882.65,1214.78 1883.24,1214.78 1883.82,1214.78 1884.41,1214.78 1885,1214.78 1885.58,1214.78 1886.17,1214.78 1886.76,1214.78 1887.34,1214.78 1887.93,1214.78 1888.51,1214.78 1889.1,1214.78 1889.69,1214.78 1890.27,1214.78 1890.86,1214.78 1891.45,1214.78 1892.03,1214.78 1892.62,1214.78 1893.21,1214.78 1893.79,1214.78 1894.38,1214.78 1894.96,1214.78 1895.55,1214.78 1896.14,1214.78 1896.72,1214.78 1897.31,1214.78 1897.9,1214.78 1898.48,1214.78 1899.07,1214.78 1899.66,1214.78 1900.24,1214.78 1900.83,1214.78 1901.42,1214.78 1902,1214.78 1902.59,1214.78 1903.17,1214.78 1903.76,1214.78 1904.35,1214.78 1904.93,1214.78 1905.52,1214.78 1906.11,1214.78 1906.69,1214.78 1907.28,1214.78 1907.87,1214.78 1908.45,1214.78 1909.04,1214.78 1909.63,1214.78 1910.21,1214.78 1910.8,1214.78 1911.38,1214.78 1911.97,1214.78 1912.56,1214.78 1913.14,1214.78 1913.73,1214.78 1914.32,1214.78 1914.9,1214.78 1915.49,1214.78 1916.08,1214.78 1916.66,1214.78 1917.25,1214.78 1917.83,1214.78 1918.42,1214.78 1919.01,1214.78 1919.59,1214.78 1920.18,1214.78 1920.77,1214.78 1921.35,1214.78 1921.94,1214.78 1922.53,1214.78 1923.11,1214.78 1923.7,1214.78 1924.29,1214.78 1924.87,1214.78 1925.46,1214.78 1926.04,1214.78 1926.63,1214.78 1927.22,1214.78 1927.8,1214.78 1928.39,1214.78 1928.98,1214.78 1929.56,1214.78 1930.15,1214.78 1930.74,1214.78 1931.32,1214.78 1931.91,1214.78 1932.5,1214.78 1933.08,1214.78 1933.67,1214.78 1934.25,1214.78 1934.84,1214.78 1935.43,1214.78 1936.01,1214.78 1936.6,1214.78 1937.19,1214.78 1937.77,1214.78 1938.36,1214.78 1938.95,1214.78 1939.53,1214.78 1940.12,1214.78 1940.71,1214.78 1941.29,1214.78 1941.88,1214.78 1942.46,1214.78 1943.05,1214.78 1943.64,1214.78 1944.22,1214.78 1944.81,1214.78 1945.4,1214.78 1945.98,1214.78 1946.57,1214.78 1947.16,1214.78 1947.74,1214.78 1948.33,1214.78 1948.91,1214.78 1949.5,1214.78 1950.09,1214.78 1950.67,1214.78 1951.26,1214.78 1951.85,1214.78 1952.43,1214.78 1953.02,1214.78 1953.61,1214.78 1954.19,1214.78 1954.78,1214.78 1955.37,1214.78 1955.95,1214.78 1956.54,1214.78 1957.12,1214.78 1957.71,1214.78 1958.3,1214.78 1958.88,1214.78 1959.47,1214.78 1960.06,1214.78 1960.64,1214.78 1961.23,1214.78 1961.82,1214.78 1962.4,1214.78 1962.99,1214.78 1963.58,1214.78 1964.16,1214.78 1964.75,1214.78 1965.33,1214.78 1965.92,1214.78 1966.51,1214.78 1967.09,1214.78 1967.68,1214.78 1968.27,1214.78 1968.85,1214.78 1969.44,1214.78 1970.03,1214.78 1970.61,1214.78 1971.2,1214.78 1971.78,1214.78 1972.37,1214.78 1972.96,1214.78 1973.54,1214.78 1974.13,1214.78 1974.72,1214.78 1975.3,1214.78 1975.89,1214.78 1976.48,1214.78 1977.06,1214.78 1977.65,1214.78 1978.24,1214.78 1978.82,1214.78 1979.41,1214.78 1979.99,1214.78 1980.58,1214.78 1981.17,1214.78 1981.75,1214.78 1982.34,1214.78 1982.93,1214.78 1983.51,1214.78 1984.1,1214.78 1984.69,1214.78 1985.27,1214.78 1985.86,1214.78 1986.45,1214.78 1987.03,1214.78 1987.62,1214.78 1988.2,1214.78 1988.79,1214.78 1989.38,1214.78 1989.96,1214.78 1990.55,1214.78 1991.14,1214.78 1991.72,1214.78 1992.31,1214.78 1992.9,1214.78 1993.48,1214.78 1994.07,1214.78 1994.65,1214.78 1995.24,1214.78 1995.83,1214.78 1996.41,1214.78 1997,1214.78 1997.59,1214.78 1998.17,1214.78 1998.76,1214.78 1999.35,1214.78 1999.93,1214.78 2000.52,1214.78 2001.11,1214.78 2001.69,1214.78 2002.28,1214.78 2002.86,1214.78 2003.45,1214.78 2004.04,1214.78 2004.62,1214.78 2005.21,1214.78 2005.8,1214.78 2006.38,1214.78 2006.97,1214.78 2007.56,1214.78 2008.14,1214.78 2008.73,1214.78 2009.32,1214.78 2009.9,1214.78 2010.49,1214.78 2011.07,1214.78 2011.66,1214.78 2012.25,1214.78 2012.83,1214.78 2013.42,1214.78 2014.01,1214.78 2014.59,1214.78 2015.18,1214.78 2015.77,1214.78 2016.35,1214.78 2016.94,1214.78 2017.53,1214.78 2018.11,1214.78 2018.7,1214.78 2019.28,1214.78 2019.87,1214.78 2020.46,1214.78 2021.04,1214.78 2021.63,1214.78 2022.22,1214.78 2022.8,1214.78 2023.39,1214.78 2023.98,1214.78 2024.56,1214.78 2025.15,1214.78 2025.73,1214.78 2026.32,1214.78 2026.91,1214.78 2027.49,1214.78 2028.08,1214.78 2028.67,1214.78 2029.25,1214.78 2029.84,1214.78 2030.43,1214.78 2031.01,1214.78 2031.6,1214.78 2032.19,1214.78 2032.77,1214.78 2033.36,1214.78 2033.94,1214.78 2034.53,1214.78 2035.12,1214.78 2035.7,1214.78 2036.29,1214.78 2036.88,1214.78 2037.46,1214.78 2038.05,1214.78 2038.64,1214.78 2039.22,1214.78 2039.81,1214.78 2040.4,1214.78 2040.98,1214.78 2041.57,1214.78 2042.15,1214.78 2042.74,1214.78 2043.33,1214.78 2043.91,1214.78 2044.5,1214.78 2045.09,1214.78 2045.67,1214.78 2046.26,1214.78 2046.85,1214.78 2047.43,1214.78 2048.02,1214.78 2048.6,1214.78 2049.19,1214.78 2049.78,1214.78 2050.36,1214.78 2050.95,1214.78 2051.54,1214.78 2052.12,1214.78 2052.71,1214.78 2053.3,1214.78 2053.88,1214.78 2054.47,1214.78 2055.06,1214.78 2055.64,1214.78 2056.23,1214.78 2056.81,1214.78 2057.4,1214.78 2057.99,1214.78 2058.57,1214.78 2059.16,1214.78 2059.75,1214.78 2060.33,1214.78 2060.92,1214.78 2061.51,1214.78 2062.09,1214.78 2062.68,1214.78 2063.27,1214.78 2063.85,1214.78 2064.44,1214.78 2065.02,1214.78 2065.61,1214.78 2066.2,1214.78 2066.78,1214.78 2067.37,1214.78 2067.96,1214.78 2068.54,1214.78 2069.13,1214.78 2069.72,1214.78 2070.3,1214.78 2070.89,1214.78 2071.48,1214.78 2072.06,1214.78 2072.65,1214.78 2073.23,1214.78 2073.82,1214.78 2074.41,1214.78 2074.99,1214.78 2075.58,1214.78 2076.17,1214.78 2076.75,1214.78 2077.34,1214.78 2077.93,1214.78 2078.51,1214.78 2079.1,1214.78 2079.68,1214.78 2080.27,1214.78 2080.86,1214.78 2081.44,1214.78 2082.03,1214.78 2082.62,1214.78 2083.2,1214.78 2083.79,1214.78 2084.38,1214.78 2084.96,1214.78 2085.55,1214.78 2086.14,1214.78 2086.72,1214.78 2087.31,1214.78 2087.89,1214.78 2088.48,1214.78 2089.07,1214.78 2089.65,1214.78 2090.24,1214.78 2090.83,1214.78 2091.41,1214.78 2092,1214.78 2092.59,1214.78 2093.17,1214.78 2093.76,1214.78 2094.35,1214.78 2094.93,1214.78 2095.52,1214.78 2096.1,1214.78 2096.69,1214.78 2097.28,1214.78 2097.86,1214.78 2098.45,1214.78 2099.04,1214.78 2099.62,1214.78 2100.21,1214.78 2100.8,1214.78 2101.38,1214.78 2101.97,1214.78 2102.55,1214.78 2103.14,1214.78 2103.73,1214.78 2104.31,1214.78 2104.9,1214.78 2105.49,1214.78 2106.07,1214.78 2106.66,1214.78 2107.25,1214.78 2107.83,1214.78 2108.42,1214.78 2109.01,1214.78 2109.59,1214.78 2110.18,1214.78 2110.76,1214.78 2111.35,1214.78 2111.94,1214.78 2112.52,1214.78 2113.11,1214.78 2113.7,1214.78 2114.28,1214.78 2114.87,1214.78 2115.46,1214.78 2116.04,1214.78 2116.63,1214.78 2117.22,1214.78 2117.8,1214.78 2118.39,1214.78 2118.97,1214.78 2119.56,1214.78 2120.15,1214.78 2120.73,1214.78 2121.32,1214.78 2121.91,1214.78 2122.49,1214.78 2123.08,1214.78 2123.67,1214.78 2124.25,1214.78 2124.84,1214.78 2125.42,1214.78 2126.01,1214.78 2126.6,1214.78 2127.18,1214.78 2127.77,1214.78 2128.36,1214.78 2128.94,1214.78 2129.53,1214.78 2130.12,1214.78 2130.7,1214.78 2131.29,1214.78 2131.88,1214.78 2132.46,1214.78 2133.05,1214.78 2133.63,1214.78 2134.22,1214.78 2134.81,1214.78 2135.39,1214.78 2135.98,1214.78 2136.57,1214.78 2137.15,1214.78 2137.74,1214.78 2138.33,1214.78 2138.91,1214.78 2139.5,1214.78 2140.09,1214.78 2140.67,1214.78 2141.26,1214.78 2141.84,1214.78 2142.43,1214.78 2143.02,1214.78 2143.6,1214.78 2144.19,1214.78 2144.78,1214.78 2145.36,1214.78 2145.95,1214.78 2146.54,1214.78 2147.12,1214.78 2147.71,1214.78 2148.3,1214.78 2148.88,1214.78 2149.47,1214.78 2150.05,1214.78 2150.64,1214.78 2151.23,1214.78 2151.81,1214.78 2152.4,1214.78 2152.99,1214.78 2153.57,1214.78 2154.16,1214.78 2154.75,1214.78 2155.33,1214.78 2155.92,1214.78 2156.5,1214.78 2157.09,1214.78 2157.68,1214.78 2158.26,1214.78 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.35,1197.18 1398.81,899.083 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.82 985.439,1197.18 2158.26,1197.18 2158.26,1231.82 985.439,1231.82 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip530)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip530)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip533\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip533)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2761.65 162.673,-2559.35 163.232,-2498.62 163.792,-3655.56 164.351,-4718.97 164.91,-5708.7 165.469,-6589.41 166.029,-7380.24 166.588,-8133.78 167.147,-8801.36 167.706,-9385.82 168.266,-9928.68 168.825,-10371.3 169.384,-10806.7 169.943,-10412.6 170.503,-10097.4 171.062,-10454.6 171.621,-10755.9 172.18,-11029.5 172.74,-11244.4 173.299,-11445.6 173.858,-11582.1 174.417,-11721.2 174.977,-11814.1 175.536,-11865.6 176.095,-11172.5 176.655,-10243.4 177.214,-10339.5 177.773,-10142.3 178.332,-9934.91 178.892,-9729.96 179.451,-9754.31 180.01,-9546.09 180.569,-9322.08 181.129,-9290.07 181.688,-9239.97 182.247,-9011.27 182.806,-8789.32 183.366,-8589.33 183.925,-8539.33 184.484,-8341.51 185.043,-8282.4 185.603,-8204.76 186.162,-8118.88 186.721,-8044.55 187.28,-7837.66 187.84,-7534 188.399,-7243.29 188.958,-7157.31 189.517,-6889.62 190.077,-6635.15 190.636,-6470.15 191.195,-6393.76 191.754,-6237.16 192.314,-6082.76 192.873,-5926.74 193.432,-5758.82 193.991,-5533.97 194.551,-5383.24 195.11,-5226.33 195.669,-5058.64 196.228,-4957.47 196.788,-4857.8 197.347,-4756.54 197.906,-4601.71 198.465,-4449.23 199.025,-4305.94 199.584,-4164.9 200.143,-4032.62 200.702,-3901.81 201.262,-3725.54 201.821,-3557.08 202.38,-3429.68 202.939,-3313.54 203.499,-3160.44 204.058,-3082.7 204.617,-2931.16 205.176,-2857.35 205.736,-2782.71 206.295,-2709.04 206.854,-2529.43 207.413,-2392.52 207.973,-2327.81 208.532,-2007.67 209.091,-1919.57 209.65,-1864.91 210.21,-1747.15 210.769,-1631.38 211.328,-1526.62 211.887,-1450.66 212.447,-1377.17 213.006,-1301.46 213.565,-1230.77 214.124,-1187.8 214.684,-1146.11 215.243,-1103.67 215.802,-1034.56 216.361,-994.575 216.921,-924.918 217.48,-885.273 218.039,-794.022 218.598,-662.086 219.158,-610.085 219.717,-507.084 220.276,-429.191 220.835,-337.967 221.395,-289.581 221.954,-201.746 222.513,-163.374 223.072,-171.204 223.632,-152.93 224.191,-134.79 224.75,-71.9618 225.309,-10.1337 225.869,5.18136 226.428,20.48 226.987,59.2317 227.546,95.8001 228.106,130.798 228.665,144.45 229.224,158.659 229.783,190.369 230.343,204.604 230.902,255.809 231.461,302.712 232.02,312.441 232.58,325.32 233.139,335.571 233.698,365.737 234.257,452.912 234.817,479.796 235.376,561.099 235.935,601.949 236.494,643.113 237.054,663.707 237.613,682.03 238.172,681.209 238.731,682.761 239.291,698.655 239.85,679.823 240.409,725.907 240.968,746.213 241.528,743.946 242.087,728.627 242.646,729.44 243.205,767.384 243.765,785.697 244.324,799.484 244.883,835.531 245.442,868.973 246.002,899.205 246.561,911.678 247.12,943.084 247.679,972.696 248.239,948.356 248.798,957.757 249.357,916.28 249.916,912.995 250.476,889.578 251.035,873.687 251.594,870.889 252.153,888.679 252.713,891.967 253.272,908.412 253.831,905.645 254.39,933.198 254.95,963.682 255.509,960.402 256.068,953.318 256.627,949.956 257.187,985.774 257.746,981.096 258.305,1044.7 258.864,1036.34 259.424,1042.7 259.983,1082.11 260.542,1051.54 261.101,1094.32 261.661,1082.04 262.22,1052.84 262.779,1060.89 263.338,1034.7 263.898,1044.03 264.457,1054.27 265.016,1049.33 265.575,1089.31 266.135,1112.21 266.694,1135.08 267.253,1123.52 267.812,1082.79 268.372,1092.87 268.931,1065.65 269.49,1055.49 270.049,1045.01 270.609,1004.86 271.168,1034.15 271.727,1043.49 272.286,1070.67 272.846,1076.58 273.405,1055.08 273.964,1047.18 274.523,1072.67 275.083,1064.05 275.642,1069.92 276.201,1062.19 276.76,1071.53 277.32,1061.72 277.879,1051.67 278.438,1044.28 278.997,1035.94 279.557,1044.48 280.116,1038.82 280.675,1062.1 281.234,1069.9 281.794,1096.72 282.353,1086.56 282.912,1093.56 283.471,1102.23 284.031,1108.87 284.59,1098.14 285.149,1123.91 285.708,1098.1 286.268,1122.59 286.827,1110.77 287.386,1117.68 287.945,1109.55 288.505,1098.19 289.064,1105.84 289.623,1082.45 290.182,1069.75 290.742,1044.26 291.301,1050.63 291.86,1041.86 292.419,1053.09 292.979,1031.09 293.538,1020.18 294.097,1031.97 294.656,1040.78 295.216,1047.28 295.775,1051.89 296.334,1057.34 296.893,1067.25 297.453,1076.04 298.012,1031.53 298.571,989.005 299.13,966.657 299.69,962.76 300.249,956.816 300.808,935.745 301.368,935.164 301.927,947.428 302.486,944.951 303.045,958.348 303.605,959.457 304.164,974.236 304.723,954.024 305.282,949.606 305.842,1010.7 306.401,1039.55 306.96,997.994 307.519,961.778 308.079,956.123 308.638,954.438 309.197,984.08 309.756,974.718 310.316,952.563 310.875,934.891 311.434,979.5 311.993,958.313 312.553,938.56 313.112,939.083 313.671,933.905 314.23,948.801 314.79,992.382 315.349,966.665 315.908,976.842 316.467,1000.87 317.027,1025.05 317.586,1016.44 318.145,959.005 318.704,989.008 319.264,997.103 319.823,1019.33 320.382,1044.01 320.941,1050.19 321.501,1055.96 322.06,1027.43 322.619,1034.11 323.178,1043.26 323.738,1034.18 324.297,1009.25 324.856,969.465 325.415,965.273 325.975,961.468 326.534,940.99 327.093,920.652 327.652,946.339 328.212,956.85 328.771,947.395 329.33,927.508 329.889,956.254 330.449,947.821 331.008,959.204 331.567,988.486 332.126,981.438 332.686,972.406 333.245,983.991 333.804,976.283 334.363,987.061 334.923,977.756 335.482,953.762 336.041,963.344 336.6,989.563 337.16,997.205 337.719,986.667 338.278,974.258 338.837,929.755 339.397,908.008 339.956,871.089 340.515,884.093 341.074,896.287 341.634,877.699 342.193,855.416 342.752,852.048 343.311,864.51 343.871,879.945 344.43,845.664 344.989,861.996 345.548,889.527 346.108,901.01 346.667,916.745 347.226,877.314 347.785,843.196 348.345,904.36 348.904,934.8 349.463,977.452 350.022,919.478 350.582,914.406 351.141,894.057 351.7,875.799 352.259,889.512 352.819,872.099 353.378,899.799 353.937,879.797 354.496,861.445 355.056,857.548 355.615,855.266 356.174,852.926 356.733,867.465 357.293,898.153 357.852,908.245 358.411,869.576 358.97,883.414 359.53,896.609 360.089,941.219 360.648,931.28 361.207,909.155 361.767,934.828 362.326,897.752 362.885,929.501 363.444,936.993 364.004,948.535 364.563,940.691 365.122,854.693 365.681,851.307 366.241,851.036 366.8,844.221 367.359,839.709 367.918,884.848 368.478,862.104 369.037,813.158 369.596,793.093 370.155,810.848 370.715,841.729 371.274,841.62 371.833,854.809 372.392,852.934 372.952,849.042 373.511,858.85 374.07,855.374 374.629,852.111 375.189,867.982 375.748,880.706 376.307,910.088 376.866,871.936 377.426,850.146 377.985,845.32 378.544,891.854 379.103,836.311 379.663,867.601 380.222,896.074 380.781,921.944 381.34,901.12 381.9,910.435 382.459,907.446 383.018,919.59 383.577,915.592 384.137,895.05 384.696,840.942 385.255,837.331 385.814,834.581 386.374,850.265 386.933,797.659 387.492,796.631 388.051,813.661 388.611,808.842 389.17,808.746 389.729,802.912 390.288,833.389 390.848,814.862 391.407,812.613 391.966,812.401 392.525,807.726 393.085,824.177 393.644,801.095 394.203,800.847 394.762,799.893 395.322,796.038 395.881,828.626 396.44,806.448 396.999,823.87 397.559,806.793 398.118,805.109 398.677,819.6 399.236,802.332 399.796,800.066 400.355,782.569 400.914,780.65 401.473,781.158 402.033,783.396 402.592,799.714 403.151,814.633 403.71,811.728 404.27,808.375 404.829,839.913 405.388,850.098 405.947,832.531 406.507,866.801 407.066,844.068 407.625,838.976 408.184,819.762 408.744,817.605 409.303,810.714 409.862,809.872 410.421,808.029 410.981,805.86 411.54,805.258 412.099,819.393 412.658,831.833 413.218,860.963 413.777,872.892 414.336,849.135 414.895,795.719 415.455,760.934 416.014,762.911 416.573,779.708 417.132,777.403 417.692,760.483 418.251,812.949 418.81,810.387 419.369,790.593 419.929,755.616 420.488,755.747 421.047,787.472 421.606,752.247 422.166,706.044 422.725,773.763 423.284,740.229 423.843,741.578 424.403,759.585 424.962,761.069 425.521,760.986 426.08,774.411 426.64,772.792 427.199,743.75 427.758,779.181 428.318,828.395 428.877,840.185 429.436,833.7 429.995,831.074 430.555,841.773 431.114,822.929 431.673,802.068 432.232,801.807 432.792,801.125 433.351,802.399 433.91,783.863 434.469,750.909 435.029,720.027 435.588,739.004 436.147,754.173 436.706,740.548 437.266,722.007 437.825,736.87 438.384,739.425 438.943,725.455 439.503,775.367 440.062,819.354 440.621,832.561 441.18,812.963 441.74,809.15 442.299,820.796 442.858,785.085 443.417,786.033 443.977,783.864 444.536,782.725 445.095,764.519 445.654,744.811 446.214,714.207 446.773,768.017 447.332,763.902 447.891,728.292 448.451,730.023 449.01,715.004 449.569,714.59 450.128,731.21 450.688,747.048 451.247,748.166 451.806,729.185 452.365,713.126 452.925,763.815 453.484,729.513 454.043,717.21 454.602,701.415 455.162,669.74 455.721,689.253 456.28,724.124 456.839,741.396 457.399,772.831 457.958,804.595 458.517,789.079 459.076,802.301 459.636,817.552 460.195,813.082 460.754,789.661 461.313,816.221 461.873,811.11 462.432,822.289 462.991,819.666 463.55,864.16 464.11,870.623 464.669,864.638 465.228,841.061 465.787,832.465 466.347,858.403 466.906,805.354 467.465,802.959 468.024,831.244 468.584,826.256 469.143,885.543 469.702,877.871 470.261,854.308 470.821,830.572 471.38,825.466 471.939,838.582 472.498,833.092 473.058,824.161 473.617,820.526 474.176,820.532 474.735,817.434 475.295,795.633 475.854,793.386 476.413,773.469 476.972,803.348 477.532,797.407 478.091,826.725 478.65,821.753 479.209,817.24 479.769,809.951 480.328,808.159 480.887,785.808 481.446,798.72 482.006,761.705 482.565,789.599 483.124,803.928 483.683,798.066 484.243,764.293 484.802,764.927 485.361,747.304 485.92,729.113 486.48,730.831 487.039,729.822 487.598,732.174 488.157,748.897 488.717,747.546 489.276,697.933 489.835,732.523 490.394,746.178 490.954,746.008 491.513,744.427 492.072,760.593 492.631,791.158 493.191,818.83 493.75,798.667 494.309,796.243 494.868,790.013 495.428,800.639 495.987,812.068 496.546,840.876 497.105,850.867 497.665,842.987 498.224,821.275 498.783,784.005 499.342,782.544 499.902,780.367 500.461,759.6 501.02,692.664 501.579,698.87 502.139,684.569 502.698,688.387 503.257,642.189 503.816,644.977 504.376,616.585 504.935,604.922 505.494,580.59 506.053,601.929 506.613,593.651 507.172,600.867 507.731,606.024 508.29,610.717 508.85,635.52 509.409,641.61 509.968,628.495 510.527,620.409 511.087,576.934 511.646,600.561 512.205,611.092 512.764,635.56 513.324,624.192 513.883,596.572 514.442,606.029 515.001,613.15 515.561,588.142 516.12,577.958 516.679,583.641 517.238,574.067 517.798,599.414 518.357,607.052 518.916,611.736 519.475,649.543 520.035,653.475 520.594,675.478 521.153,661.646 521.712,681.738 522.272,666.243 522.831,656.889 523.39,660.858 523.949,649.37 524.509,666.545 525.068,655.314 525.627,626.823 526.186,648.191 526.746,655.664 527.305,642.719 527.864,646.119 528.423,650.879 528.983,669.572 529.542,671.233 530.101,662.277 530.66,679.875 531.22,698.958 531.779,683.371 532.338,699.588 532.897,704.561 533.457,737.876 534.016,755.371 534.575,739.312 535.134,771.42 535.694,769.137 536.253,782.802 536.812,779.346 537.371,760.604 537.931,760.675 538.49,758.314 539.049,756.031 539.608,788.389 540.168,752.366 540.727,749.146 541.286,734.362 541.845,700.918 542.405,732.278 542.964,751.24 543.523,732.958 544.082,778.788 544.642,791.75 545.201,773.198 545.76,753.626 546.319,755.475 546.879,739.178 547.438,739.058 547.997,753.935 548.556,751.966 549.116,748.554 549.675,732.512 550.234,732.526 550.793,717.821 551.353,751.278 551.912,735.602 552.471,783.884 553.031,776.926 553.59,756.989 554.149,757.52 554.708,736.023 555.268,731.796 555.827,713.729 556.386,710.524 556.945,745.352 557.505,759.163 558.064,756.005 558.623,766.832 559.182,779.363 559.742,759.023 560.301,774.275 560.86,771.472 561.419,799.996 561.979,778.583 562.538,822.334 563.097,815.269 563.656,778.031 564.216,773.299 564.775,752.213 565.334,748.304 565.893,748.802 566.453,750.1 567.012,764.037 567.571,790.038 568.13,801.778 568.69,815.627 569.249,809.633 569.808,805.736 570.367,783.529 570.927,747.162 571.486,741.916 572.045,755.795 572.604,768.811 573.164,760.624 573.723,742.28 574.282,742.643 574.841,727.965 575.401,728.903 575.96,726.112 576.519,739.107 577.078,737.981 577.638,735.018 578.197,703.421 578.756,652.664 579.315,655.145 579.875,691.819 580.434,660.884 580.993,663.126 581.552,662.71 582.112,678.609 582.671,681.103 583.23,680.403 583.789,662.437 584.349,665.809 584.908,652.41 585.467,641.146 586.026,649.535 586.586,640.214 587.145,658.312 587.704,649.396 588.263,669.302 588.823,722.923 589.382,751.563 589.941,767.46 590.5,779.348 591.06,822.595 591.619,829.965 592.178,843.213 592.737,803.198 593.297,799.39 593.856,811.586 594.415,774.292 594.974,755.207 595.534,768.924 596.093,746.933 596.652,729.269 597.211,711.564 597.771,727.387 598.33,709.416 598.889,710.208 599.448,722.581 600.008,719.699 600.567,715.975 601.126,717.713 601.685,733.594 602.245,732.261 602.804,733.53 603.363,779.435 603.922,807.335 604.482,832.849 605.041,826.366 605.6,854.331 606.159,802.004 606.719,830.07 607.278,806.414 607.837,800.545 608.396,749.052 608.956,715.24 609.515,714.494 610.074,716.161 610.633,715.628 611.193,711.923 611.752,696.138 612.311,684.512 612.87,701.796 613.43,685.658 613.989,686.8 614.548,704.817 615.107,706.088 615.667,721.275 616.226,701.364 616.785,699.837 617.344,684.094 617.904,700.301 618.463,699.821 619.022,715.071 619.581,732.833 620.141,734.431 620.7,752.402 621.259,732.715 621.818,734.432 622.378,749.275 622.937,729.759 623.496,733.383 624.055,716.195 624.615,712.228 625.174,727.193 625.733,757.749 626.292,754.148 626.852,735.148 627.411,769.161 627.97,778.776 628.529,821.43 629.089,799.204 629.648,780.368 630.207,760.855 630.766,757.42 631.326,771.029 631.885,781.978 632.444,761.244 633.003,757.031 633.563,784.578 634.122,810.862 634.681,772.178 635.24,735.541 635.8,780.497 636.359,757.609 636.918,754.504 637.477,785.751 638.037,730.858 638.596,743.575 639.155,757.454 639.714,751.949 640.274,735.604 640.833,698.362 641.392,649.717 641.951,618.193 642.511,606.031 643.07,593.974 643.629,564.466 644.188,603.803 644.748,604.811 645.307,644.231 645.866,664.981 646.425,668.249 646.985,672.817 647.544,674.142 648.103,695.008 648.662,679.04 649.222,677.387 649.781,690.167 650.34,689.929 650.899,707.139 651.459,722.961 652.018,704.048 652.577,690.663 653.136,690.718 653.696,692.403 654.255,727.54 654.814,727.298 655.373,755.459 655.933,718.116 656.492,669.812 657.051,689.812 657.61,720.281 658.17,701.025 658.729,652.557 659.288,657.81 659.847,646.704 660.407,647.232 660.966,681.733 661.525,683.353 662.084,687.195 662.644,670.32 663.203,689.094 663.762,691.221 664.321,708.853 664.881,694.689 665.44,744.478 665.999,726.131 666.558,744.279 667.118,738.741 667.677,756.138 668.236,752.715 668.795,716.265 669.355,699.64 669.914,665.036 670.473,633.776 671.032,637.96 671.592,658.578 672.151,689.933 672.71,691.356 673.269,692.227 673.829,707.547 674.388,675.535 674.947,695.406 675.506,708.996 676.066,708.036 676.625,724.563 677.184,721.857 677.743,714.895 678.303,700.596 678.862,701.633 679.421,685.842 679.981,684.193 680.54,697.554 681.099,698.03 681.658,744.258 682.218,708.141 682.777,728.848 683.336,710.291 683.895,679.321 684.455,697.913 685.014,697.909 685.573,695.445 686.132,697.536 686.692,758.102 687.251,791.017 687.81,784.125 688.369,788.797 688.929,815.351 689.488,792.724 690.047,772.21 690.606,801.411 691.166,829.559 691.725,775.724 692.284,755.147 692.843,768.076 693.403,745.758 693.962,712.276 694.521,713.294 695.08,694.958 695.64,678.714 696.199,679.514 696.758,684.526 697.317,656.581 697.877,687.139 698.436,704.62 698.995,702.448 699.554,701.657 700.114,699.924 700.673,714.31 701.232,684.871 701.791,656.142 702.351,655.911 702.91,658.557 703.469,629.53 704.028,669.93 704.588,671.984 705.147,656.584 705.706,625.235 706.265,656.993 706.825,657.082 707.384,642.621 707.943,645.224 708.502,630.205 709.062,615.293 709.621,574.015 710.18,595.261 710.739,601.578 711.299,622.51 711.858,625.358 712.417,693.06 712.976,711.885 713.536,694.115 714.095,646.854 714.654,683.383 715.213,701.173 715.773,687.591 716.332,691.248 716.891,676.306 717.45,628.313 718.01,651.561 718.569,652.311 719.128,688.274 719.687,704.453 720.247,704.794 720.806,687.202 721.365,692.161 721.924,673.242 722.484,676.143 723.043,660.027 723.602,679.644 724.161,679.908 724.721,695.514 725.28,664.351 725.839,680.938 726.398,665.284 726.958,667.094 727.517,633.901 728.076,652.742 728.635,671.255 729.195,674.067 729.754,708.709 730.313,704.042 730.872,684.404 731.432,683.474 731.991,700.222 732.55,731.369 733.109,728.53 733.669,691.004 734.228,659.627 734.787,660.29 735.346,648.03 735.906,650.935 736.465,654.971 737.024,657.246 737.583,654.771 738.143,641.31 738.702,659.355 739.261,662.309 739.82,679.334 740.38,674.893 740.939,693.216 741.498,710.402 742.057,693.817 742.617,711.39 743.176,697.423 743.735,698.869 744.294,749.193 744.854,713.327 745.413,730.296 745.972,730.677 746.531,728.901 747.091,727.164 747.65,708.05 748.209,720.75 748.768,719.446 749.328,737.016 749.887,754.01 750.446,751.793 751.005,717.483 751.565,733.129 752.124,716.848 752.683,732.619 753.242,718.607 753.802,735.109 754.361,714.16 754.92,693.134 755.479,706.587 756.039,702.989 756.598,705.405 757.157,723.675 757.716,720.397 758.276,734.18 758.835,730.312 759.394,730.349 759.953,712.546 760.513,713.482 761.072,712.227 761.631,708.136 762.19,709.405 762.75,695.295 763.309,724.962 763.868,708.71 764.427,720.975 764.987,721.541 765.546,717.936 766.105,714.583 766.664,682.734 767.224,700.553 767.783,700.324 768.342,700.891 768.901,701.432 769.461,700.128 770.02,681.795 770.579,683.003 771.138,685.22 771.698,702.334 772.257,685.315 772.816,651.134 773.375,649.413 773.935,686.215 774.494,668.845 775.053,653.626 775.612,638.056 776.172,592.815 776.731,584.675 777.29,575.478 777.849,578.423 778.409,568.178 778.968,574.409 779.527,582.204 780.086,604.284 780.646,609.989 781.205,648.017 781.764,648.75 782.323,652.646 782.883,623.016 783.442,578.012 784.001,581.664 784.56,571.331 785.12,557.702 785.679,581.323 786.238,621.208 786.797,625.823 787.357,678.688 787.916,659.646 788.475,663.714 789.034,679.645 789.594,726.297 790.153,710.138 790.712,727.08 791.271,712.628 791.831,700.734 792.39,683.199 792.949,701.953 793.508,731.109 794.068,694.078 794.627,679.625 795.186,695.9 795.745,696.444 796.305,727.546 796.864,741.605 797.423,721.894 797.982,704.684 798.542,670.05 799.101,670.302 799.66,673.997 800.219,658.857 800.779,674.95 801.338,658.358 801.897,644.5 802.456,647.475 803.016,652.26 803.575,623.775 804.134,626.76 804.693,625.487 805.253,630.681 805.812,605.794 806.371,626.605 806.931,614.443 807.49,619.305 808.049,640.787 808.608,662.732 809.168,616.457 809.727,637.344 810.286,643.677 810.845,663.158 811.405,650.309 811.964,653.43 812.523,671.079 813.082,672.2 813.642,662.376 814.201,683.41 814.76,679.834 815.319,683.533 815.879,682.228 816.438,697.413 816.997,730.513 817.556,746.188 818.116,744.81 818.675,742.149 819.234,705.891 819.793,704.741 820.353,735.434 820.912,736.193 821.471,730.489 822.03,729.117 822.59,774.303 823.149,770.759 823.708,845.445 824.267,835.446 824.827,777.684 825.386,774.388 825.945,756.107 826.504,733.845 827.064,746.309 827.623,760.022 828.182,754.684 828.741,750.928 829.301,747.898 829.86,743.203 830.419,706.772 830.978,703.159 831.538,703.179 832.097,703.44 832.656,720.742 833.215,733.81 833.775,750.944 834.334,730.844 834.893,743.671 835.452,706.268 836.012,672.796 836.571,689.159 837.13,690.056 837.689,687.981 838.249,689.099 838.808,691.266 839.367,677.741 839.926,666.171 840.486,637.393 841.045,672.826 841.604,662.393 842.163,663.563 842.723,647.413 843.282,647.758 843.841,667.997 844.4,681.926 844.96,714.201 845.519,732.644 846.078,728.667 846.637,740.354 847.197,766.866 847.756,763.659 848.315,757.099 848.874,749.717 849.434,745.965 849.993,759.693 850.552,725.977 851.111,722.678 851.671,722.017 852.23,738.089 852.789,721.01 853.348,655.648 853.908,656.747 854.467,657.069 855.026,630.761 855.585,650.726 856.145,652.347 856.704,653.161 857.263,641.938 857.822,657.938 858.382,662.402 858.941,683.065 859.5,700.165 860.059,685.421 860.619,685.38 861.178,682.86 861.737,686.505 862.296,686.394 862.856,653.765 863.415,703.572 863.974,688.509 864.533,643 865.093,648.353 865.652,697.267 866.211,713.261 866.77,695.356 867.33,680.774 867.889,729.172 868.448,742.562 869.007,741.247 869.567,737.989 870.126,735.264 870.685,712.724 871.244,728.277 871.804,665.168 872.363,665.035 872.922,667.123 873.481,686.424 874.041,687.467 874.6,703.84 875.159,705.092 875.718,703.852 876.278,736.513 876.837,718.974 877.396,716.983 877.955,695.3 878.515,694.213 879.074,707.065 879.633,687.369 880.192,688.733 880.752,657.521 881.311,705.512 881.87,707.012 882.429,737.378 882.989,766.039 883.548,776.575 884.107,773.125 884.666,753.492 885.226,766.459 885.785,759.514 886.344,756.536 886.903,721.166 887.463,702.72 888.022,702.818 888.581,703.603 889.14,701.197 889.7,682.432 890.259,682.358 890.818,683.17 891.377,664.028 891.937,697.101 892.496,691.402 893.055,690.018 893.614,674.301 894.174,658.066 894.733,627.679 895.292,595.416 895.851,678.574 896.411,677.594 896.97,677.159 897.529,659.464 898.088,643.748 898.648,632.392 899.207,619.424 899.766,656.027 900.325,653.747 900.885,656.156 901.444,625.875 902.003,644.078 902.562,618.095 903.122,636.88 903.681,655.013 904.24,638.083 904.799,639.423 905.359,626.974 905.918,632.377 906.477,664.891 907.036,651.59 907.596,591.532 908.155,611.823 908.714,630.863 909.273,649.449 909.833,614.001 910.392,617.63 910.951,622.532 911.51,628.002 912.07,631.487 912.629,649.602 913.188,634.931 913.747,587.501 914.307,625.108 914.866,612.04 915.425,617.377 915.984,672.254 916.544,703.114 917.103,690.309 917.662,692.859 918.221,676.977 918.781,679.458 919.34,648.153 919.899,677.861 920.458,709.856 921.018,708.315 921.577,707.257 922.136,725.195 922.695,739.42 923.255,690.23 923.814,705.329 924.373,707.31 924.932,708.443 925.492,691.891 926.051,691.597 926.61,676.975 927.169,707.03 927.729,705.383 928.288,771.447 928.847,737.112 929.406,720.672 929.966,703.991 930.525,701.641 931.084,699.014 931.644,712.787 932.203,773.689 932.762,767.965 933.321,781.651 933.881,758.102 934.44,741.433 934.999,753.95 935.558,780.437 936.118,776.984 936.677,739.314 937.236,753.34 937.795,686.531 938.355,700.618 938.914,715.065 939.473,731.989 940.032,746.514 940.592,681.605 941.151,697.74 941.71,726.412 942.269,740.524 942.829,732.97 943.388,718.705 943.947,718.286 944.506,732.402 945.066,729.802 945.625,728.972 946.184,689.655 946.743,690.357 947.303,706.404 947.862,725.7 948.421,675.752 948.98,674.522 949.54,724.324 950.099,740.389 950.658,705.579 951.217,718.771 951.777,735.445 952.336,717.735 952.895,712.449 953.454,694.609 954.014,706.074 954.573,720.391 955.132,733.285 955.691,727.938 956.251,742.572 956.81,740.832 957.369,722.243 957.928,723.725 958.488,704.757 959.047,640.866 959.606,676.588 960.165,676.865 960.725,706.193 961.284,707.762 961.843,740.777 962.402,736.625 962.962,686.158 963.521,671.33 964.08,672.579 964.639,639.951 965.199,624.864 965.758,593.466 966.317,631.585 966.876,633.13 967.436,638.736 967.995,659.842 968.554,663.051 969.113,680.277 969.673,681.694 970.232,683.718 970.791,682.3 971.35,667.131 971.91,687.498 972.469,671.661 973.028,623.637 973.587,614.139 974.147,647.04 974.706,632.078 975.265,633.823 975.824,639.836 976.384,594.764 976.943,566.528 977.502,585.769 978.061,636.861 978.621,609.676 979.18,600.116 979.739,590.319 980.298,596.732 980.858,599.763 981.417,571.48 981.976,595.928 982.535,586.026 983.095,592.66 983.654,595.34 984.213,548.215 984.772,554.364 985.332,575.915 985.891,598.185 986.45,601.607 987.009,605.289 987.569,610.452 988.128,597.572 988.687,634.287 989.246,640.774 989.806,657.183 990.365,677.161 990.924,697.299 991.483,696.061 992.043,696.266 992.602,698.191 993.161,728.762 993.72,729.292 994.28,709.623 994.839,725.184 995.398,741.72 995.957,708.745 996.517,707.912 997.076,710.088 997.635,694.482 998.194,680.395 998.754,695.136 999.313,709.242 999.872,680.189 1000.43,699.098 1000.99,695.947 1001.55,709.928 1002.11,706.874 1002.67,689.073 1003.23,705.546 1003.79,720.397 1004.35,751.089 1004.91,747.286 1005.46,746.547 1006.02,758.625 1006.58,738.76 1007.14,751.514 1007.7,745.921 1008.26,775.453 1008.82,783.184 1009.38,779.064 1009.94,746.777 1010.5,682.148 1011.06,729.967 1011.62,712.204 1012.18,674.729 1012.73,677.651 1013.29,725.055 1013.85,740.658 1014.41,735.161 1014.97,716.495 1015.53,700.977 1016.09,682.068 1016.65,679.214 1017.21,646.322 1017.77,646.202 1018.33,664.232 1018.89,617.023 1019.45,639.954 1020.01,630.987 1020.56,653.231 1021.12,654.257 1021.68,669.091 1022.24,656.412 1022.8,638.621 1023.36,639.829 1023.92,640.641 1024.48,640.109 1025.04,639.767 1025.6,638.485 1026.16,623.592 1026.72,626.459 1027.28,629.061 1027.83,582.835 1028.39,605.194 1028.95,626.355 1029.51,640.887 1030.07,691.413 1030.63,725.858 1031.19,722.157 1031.75,735.572 1032.31,734.193 1032.87,730.369 1033.43,743.915 1033.99,724.381 1034.55,708.637 1035.1,725.001 1035.66,737.194 1036.22,751.084 1036.78,745.865 1037.34,754.718 1037.9,799.215 1038.46,777.166 1039.02,739.886 1039.58,768.624 1040.14,745.66 1040.7,742.602 1041.26,741.901 1041.82,727.156 1042.38,725.373 1042.93,741.941 1043.49,724.145 1044.05,721.404 1044.61,690.295 1045.17,690.123 1045.73,706.76 1046.29,706.829 1046.85,705.013 1047.41,704.421 1047.97,721.617 1048.53,722.211 1049.09,732.761 1049.65,729.737 1050.2,741.396 1050.76,738.784 1051.32,720.196 1051.88,730.98 1052.44,730.395 1053,744.895 1053.56,729.819 1054.12,728.959 1054.68,692.956 1055.24,658.483 1055.8,662.372 1056.36,629.879 1056.92,648.617 1057.48,667.473 1058.03,680.912 1058.59,680.799 1059.15,712.975 1059.71,712.154 1060.27,708.081 1060.83,740.288 1061.39,689.432 1061.95,687.583 1062.51,703.125 1063.07,686.545 1063.63,687.081 1064.19,684.858 1064.75,732.915 1065.3,729.874 1065.86,729.705 1066.42,695.537 1066.98,692.811 1067.54,674.394 1068.1,660.558 1068.66,644.422 1069.22,630.073 1069.78,650.73 1070.34,648.651 1070.9,652.235 1071.46,649.748 1072.02,652.071 1072.57,607.591 1073.13,612.649 1073.69,632.348 1074.25,635.383 1074.81,638.095 1075.37,690.524 1075.93,677.892 1076.49,695.533 1077.05,715.557 1077.61,726.304 1078.17,723.313 1078.73,740.008 1079.29,719.638 1079.85,716.074 1080.4,746.852 1080.96,745.001 1081.52,775.876 1082.08,772.751 1082.64,770.051 1083.2,748.362 1083.76,728.399 1084.32,742.66 1084.88,723.991 1085.44,719.607 1086,686.172 1086.56,667.554 1087.12,629.368 1087.67,648.665 1088.23,637.334 1088.79,640.71 1089.35,640.225 1089.91,608.371 1090.47,612.772 1091.03,637.986 1091.59,623.475 1092.15,630.752 1092.71,634.725 1093.27,621.516 1093.83,611.638 1094.39,614.601 1094.94,635.163 1095.5,617.832 1096.06,588.322 1096.62,577.65 1097.18,602.051 1097.74,620.469 1098.3,639.211 1098.86,637.043 1099.42,639.509 1099.98,623.916 1100.54,593.762 1101.1,564.774 1101.66,569.574 1102.22,573.691 1102.77,613.625 1103.33,648.241 1103.89,651.679 1104.45,667.059 1105.01,683.321 1105.57,667.261 1106.13,686.332 1106.69,687.368 1107.25,641.312 1107.81,614.65 1108.37,617.138 1108.93,621.418 1109.49,626.56 1110.04,595.103 1110.6,584.381 1111.16,591.142 1111.72,631.118 1112.28,622.521 1112.84,672.085 1113.4,675.997 1113.96,708.512 1114.52,687.807 1115.08,667.742 1115.64,671.742 1116.2,653.052 1116.76,674.014 1117.31,680.496 1117.87,712.81 1118.43,707.201 1118.99,688.718 1119.55,690.178 1120.11,709.346 1120.67,710.957 1121.23,711.104 1121.79,675.297 1122.35,672.492 1122.91,671.879 1123.47,691.457 1124.03,705.817 1124.59,701.701 1125.14,684.897 1125.7,685.98 1126.26,687.395 1126.82,688.702 1127.38,641.649 1127.94,628.811 1128.5,618.152 1129.06,626.051 1129.62,644.708 1130.18,678.706 1130.74,711.375 1131.3,726.994 1131.86,710.256 1132.41,709.186 1132.97,689.968 1133.53,737.168 1134.09,735.399 1134.65,701.229 1135.21,698.555 1135.77,696.547 1136.33,679.227 1136.89,678.503 1137.45,664.794 1138.01,714.312 1138.57,715.371 1139.13,680.566 1139.68,681.199 1140.24,683.025 1140.8,700.77 1141.36,684.652 1141.92,700.236 1142.48,666.39 1143.04,665.435 1143.6,666.783 1144.16,700.423 1144.72,714.135 1145.28,729.697 1145.84,725.905 1146.4,737.923 1146.96,702.682 1147.51,703.301 1148.07,701.04 1148.63,714.464 1149.19,698.002 1149.75,694.589 1150.31,661.211 1150.87,723.802 1151.43,768.021 1151.99,748.494 1152.55,742.129 1153.11,740.471 1153.67,771.112 1154.23,768.307 1154.78,799.558 1155.34,776.046 1155.9,754.574 1156.46,749.072 1157.02,714.913 1157.58,747.588 1158.14,740.641 1158.7,739.79 1159.26,751.387 1159.82,748.672 1160.38,680.927 1160.94,633.572 1161.5,617.482 1162.05,621.717 1162.61,627.691 1163.17,629.144 1163.73,644.161 1164.29,675.192 1164.85,691.227 1165.41,688.621 1165.97,740.283 1166.53,737.367 1167.09,770.865 1167.65,752.774 1168.21,746.877 1168.77,741.18 1169.33,738.226 1169.88,735.898 1170.44,713.819 1171,694.95 1171.56,691.614 1172.12,705.065 1172.68,722.517 1173.24,715.457 1173.8,712.291 1174.36,723.652 1174.92,719.721 1175.48,720.266 1176.04,718.163 1176.6,700.267 1177.15,732.895 1177.71,697.052 1178.27,698.894 1178.83,699.941 1179.39,702.746 1179.95,713.93 1180.51,729.295 1181.07,723.441 1181.63,736.134 1182.19,735.756 1182.75,684.487 1183.31,686.737 1183.87,688.234 1184.43,685.965 1184.98,717.412 1185.54,685.256 1186.1,639.91 1186.66,627.89 1187.22,647.867 1187.78,616.953 1188.34,621.065 1188.9,620.751 1189.46,624.006 1190.02,615.867 1190.58,618.894 1191.14,633.503 1191.7,639.815 1192.25,644.83 1192.81,648.165 1193.37,668.08 1193.93,688.618 1194.49,716.808 1195.05,699.915 1195.61,729.239 1196.17,713.081 1196.73,728.683 1197.29,726.602 1197.85,756.03 1198.41,769.167 1198.97,781.439 1199.52,759.675 1200.08,740.24 1200.64,739.004 1201.2,818.599 1201.76,797.595 1202.32,775.12 1202.88,736.957 1203.44,715.669 1204,716.196 1204.56,663.38 1205.12,680.66 1205.68,680.451 1206.24,677.938 1206.8,692.404 1207.35,695.404 1207.91,660.092 1208.47,677.674 1209.03,662.282 1209.59,693.801 1210.15,694.255 1210.71,712.553 1211.27,711.307 1211.83,714.752 1212.39,711.78 1212.95,725.079 1213.51,672.228 1214.07,689.424 1214.62,674.412 1215.18,673.867 1215.74,692.756 1216.3,725.657 1216.86,739.086 1217.42,733.605 1217.98,699.285 1218.54,684.957 1219.1,666.104 1219.66,652.617 1220.22,684.89 1220.78,669.763 1221.34,667.689 1221.89,650.168 1222.45,652.4 1223.01,653.65 1223.57,670.132 1224.13,672.094 1224.69,672.99 1225.25,669.068 1225.81,654.79 1226.37,656.321 1226.93,654.39 1227.49,654.122 1228.05,656.131 1228.61,658.127 1229.17,643.826 1229.72,645.286 1230.28,698.047 1230.84,680.348 1231.4,661.501 1231.96,646.34 1232.52,632.81 1233.08,637.231 1233.64,629.36 1234.2,602.309 1234.76,592.788 1235.32,612.631 1235.88,617.2 1236.44,620.158 1236.99,642.845 1237.55,649.502 1238.11,636.359 1238.67,670.979 1239.23,685.643 1239.79,716.753 1240.35,713.801 1240.91,696.519 1241.47,744.901 1242.03,741.028 1242.59,737.998 1243.15,734.932 1243.71,732.796 1244.26,729.911 1244.82,743.71 1245.38,757.33 1245.94,758.112 1246.5,705.349 1247.06,703.884 1247.62,681.346 1248.18,682.326 1248.74,687.089 1249.3,713.617 1249.86,765.103 1250.42,763.726 1250.98,742.952 1251.54,754.872 1252.09,735.97 1252.65,714.575 1253.21,711.227 1253.77,692.346 1254.33,672.928 1254.89,671.391 1255.45,655.371 1256.01,624.15 1256.57,596.216 1257.13,616.309 1257.69,684.94 1258.25,634.054 1258.81,688.807 1259.36,684.41 1259.92,636.632 1260.48,654.626 1261.04,622.607 1261.6,623.617 1262.16,630.3 1262.72,632.487 1263.28,631.091 1263.84,635.954 1264.4,636.981 1264.96,638.845 1265.52,625.03 1266.08,630.026 1266.63,634.266 1267.19,638.135 1267.75,625.087 1268.31,629.88 1268.87,615.274 1269.43,602.966 1269.99,655.21 1270.55,643.856 1271.11,647.025 1271.67,681.443 1272.23,683.703 1272.79,667.19 1273.35,668.23 1273.91,652.191 1274.46,653.713 1275.02,626.648 1275.58,646.245 1276.14,611.849 1276.7,584.35 1277.26,639.204 1277.82,640.312 1278.38,642.327 1278.94,647.674 1279.5,670.211 1280.06,672.708 1280.62,691.355 1281.18,738.116 1281.73,753.664 1282.29,752.29 1282.85,796.446 1283.41,789.59 1283.97,786.574 1284.53,796.964 1285.09,792.327 1285.65,800.267 1286.21,777.578 1286.77,756.244 1287.33,766.734 1287.89,763.094 1288.45,776.129 1289,756.208 1289.56,722.295 1290.12,719.339 1290.68,702.844 1291.24,717.981 1291.8,733.587 1292.36,699.088 1292.92,732.148 1293.48,729.051 1294.04,725.005 1294.6,728.616 1295.16,727.625 1295.72,757.74 1296.28,735.477 1296.83,733.231 1297.39,761.499 1297.95,806.23 1298.51,846.881 1299.07,852.576 1299.63,910.567 1300.19,930.893 1300.75,918.489 1301.31,905.385 1301.87,877.761 1302.43,869.317 1302.99,831.291 1303.55,855.522 1304.1,859.984 1304.66,817.136 1305.22,793.668 1305.78,750.696 1306.34,729.472 1306.9,707.982 1307.46,724.188 1308.02,724.691 1308.58,700.52 1309.14,714.911 1309.7,681.378 1310.26,677.441 1310.82,644.73 1311.38,659.718 1311.93,645.622 1312.49,646.074 1313.05,612.991 1313.61,614.266 1314.17,648.48 1314.73,634.075 1315.29,635.377 1315.85,652.308 1316.41,656.054 1316.97,690.102 1317.53,704.585 1318.09,703.357 1318.65,700.444 1319.2,667.698 1319.76,701.377 1320.32,682.953 1320.88,666.405 1321.44,683.777 1322,683.185 1322.56,664.645 1323.12,698.147 1323.68,665.963 1324.24,632.581 1324.8,636.164 1325.36,606.163 1325.92,639.819 1326.47,661.359 1327.03,678.604 1327.59,662.264 1328.15,629.037 1328.71,612.167 1329.27,613.724 1329.83,613.255 1330.39,636.259 1330.95,637.004 1331.51,635.637 1332.07,624.758 1332.63,598.02 1333.19,617.007 1333.75,605.329 1334.3,673.491 1334.86,655.065 1335.42,639.018 1335.98,610.818 1336.54,616.848 1337.1,615.062 1337.66,600.339 1338.22,605.779 1338.78,577.649 1339.34,597.283 1339.9,570.194 1340.46,542.683 1341.02,553.442 1341.57,561.786 1342.13,584.4 1342.69,587.412 1343.25,592.956 1343.81,632.293 1344.37,634.722 1344.93,605.566 1345.49,545.618 1346.05,598.91 1346.61,606.208 1347.17,590.962 1347.73,597.561 1348.29,605.294 1348.84,545.125 1349.4,551.072 1349.96,557.44 1350.52,552.209 1351.08,557.074 1351.64,580.338 1352.2,582.633 1352.76,586.56 1353.32,592.666 1353.88,549.624 1354.44,576.023 1355,631.395 1355.56,686.33 1356.12,684.435 1356.67,714.358 1357.23,681.028 1357.79,728.29 1358.35,725.228 1358.91,740.045 1359.47,754.098 1360.03,763.672 1360.59,741.341 1361.15,785.121 1361.71,782.941 1362.27,764.13 1362.83,779.431 1363.39,795.6 1363.94,775.224 1364.5,748.772 1365.06,748.444 1365.62,745.063 1366.18,745.772 1366.74,741.676 1367.3,739.003 1367.86,691.926 1368.42,707.022 1368.98,705.554 1369.54,704.182 1370.1,685.271 1370.66,686.734 1371.21,704.076 1371.77,705.762 1372.33,674.036 1372.89,708.098 1373.45,721.044 1374.01,703.026 1374.57,700.5 1375.13,668.382 1375.69,638.126 1376.25,690.318 1376.81,704.144 1377.37,737.553 1377.93,734.184 1378.49,696.656 1379.04,646.501 1379.6,612.993 1380.16,646.701 1380.72,663.328 1381.28,664.955 1381.84,680.324 1382.4,647.764 1382.96,664.533 1383.52,650.728 1384.08,650.275 1384.64,700.999 1385.2,700.028 1385.76,716.112 1386.31,717.807 1386.87,733.675 1387.43,732.548 1387.99,680.763 1388.55,682.917 1389.11,733.651 1389.67,730.416 1390.23,725.929 1390.79,724.167 1391.35,724.429 1391.91,706.684 1392.47,689.037 1393.03,689.094 1393.58,687.954 1394.14,673.599 1394.7,704.621 1395.26,721.278 1395.82,717.275 1396.38,748.134 1396.94,743.147 1397.5,758.494 1398.06,739.795 1398.62,720.254 1399.18,716.738 1399.74,696.365 1400.3,698.456 1400.86,697.091 1401.41,697.092 1401.97,666.35 1402.53,651.083 1403.09,654.102 1403.65,685.132 1404.21,667.968 1404.77,667.542 1405.33,652.859 1405.89,653.586 1406.45,654.153 1407.01,690.58 1407.57,677.852 1408.13,662.447 1408.68,634.149 1409.24,638.304 1409.8,689.684 1410.36,657.457 1410.92,675.545 1411.48,661.579 1412.04,679.058 1412.6,663.988 1413.16,661.185 1413.72,645.659 1414.28,650.087 1414.84,651.37 1415.4,687.916 1415.95,670.876 1416.51,638.109 1417.07,657.9 1417.63,660.061 1418.19,674.201 1418.75,674.638 1419.31,688.779 1419.87,690.042 1420.43,657.611 1420.99,592.493 1421.55,631.348 1422.11,618.256 1422.67,655.707 1423.23,642.387 1423.78,647.198 1424.34,618.298 1424.9,637.048 1425.46,640.604 1426.02,645.01 1426.58,697.969 1427.14,695.549 1427.7,679.761 1428.26,712.379 1428.82,712.162 1429.38,728.355 1429.94,759.63 1430.5,775.074 1431.05,753.321 1431.61,732.073 1432.17,744.695 1432.73,724.821 1433.29,739.312 1433.85,722.312 1434.41,689.422 1434.97,722.199 1435.53,736.327 1436.09,731.475 1436.65,715.195 1437.21,747.123 1437.77,727.52 1438.33,760.278 1438.88,756.406 1439.44,767.113 1440,775.799 1440.56,737.083 1441.12,765.552 1441.68,744.155 1442.24,709.701 1442.8,688.127 1443.36,724.004 1443.92,740.152 1444.48,753.998 1445.04,765.878 1445.6,745.626 1446.15,759.526 1446.71,723.124 1447.27,738.273 1447.83,739.759 1448.39,738.43 1448.95,712.478 1449.51,708.593 1450.07,702.014 1450.63,701.513 1451.19,700.371 1451.75,683.983 1452.31,694.971 1452.87,712.855 1453.42,727.494 1453.98,708.928 1454.54,705.203 1455.1,707.822 1455.66,737.639 1456.22,751.696 1456.78,733.573 1457.34,730.815 1457.9,728.544 1458.46,712.458 1459.02,706.274 1459.58,703.833 1460.14,667.745 1460.7,684.353 1461.25,621.397 1461.81,626.27 1462.37,646.517 1462.93,649.158 1463.49,668.313 1464.05,653.018 1464.61,669.593 1465.17,673.609 1465.73,638.406 1466.29,638.774 1466.85,653.728 1467.41,635.535 1467.97,651.813 1468.52,634.933 1469.08,685.312 1469.64,649.915 1470.2,665.238 1470.76,617.254 1471.32,605.7 1471.88,624.179 1472.44,596.684 1473,586.417 1473.56,594.369 1474.12,588.178 1474.68,597.794 1475.24,602.006 1475.79,628.224 1476.35,649.094 1476.91,667.091 1477.47,700.669 1478.03,665.104 1478.59,646.739 1479.15,646.416 1479.71,646.018 1480.27,647.162 1480.83,666.165 1481.39,667.004 1481.95,636.122 1482.51,634.932 1483.07,637.002 1483.62,641.395 1484.18,708.166 1484.74,710.657 1485.3,709.165 1485.86,755.917 1486.42,770.666 1486.98,731.137 1487.54,758.58 1488.1,738.873 1488.66,755.718 1489.22,770.738 1489.78,765.794 1490.34,772.384 1490.89,768.485 1491.45,777.914 1492.01,756.468 1492.57,749.269 1493.13,760.612 1493.69,729.311 1494.25,711.417 1494.81,696.747 1495.37,680.916 1495.93,715.214 1496.49,679.984 1497.05,679.453 1497.61,675.097 1498.16,693.503 1498.72,694.065 1499.28,721.953 1499.84,687.51 1500.4,670.196 1500.96,668.05 1501.52,672.035 1502.08,673.62 1502.64,657.724 1503.2,673.63 1503.76,661.436 1504.32,660.246 1504.88,645.582 1505.44,663.558 1505.99,645.92 1506.55,632.872 1507.11,617.973 1507.67,614.947 1508.23,634.757 1508.79,649.9 1509.35,667.58 1509.91,650.312 1510.47,634.4 1511.03,619.27 1511.59,640.347 1512.15,643.749 1512.71,647.02 1513.26,635.05 1513.82,636.697 1514.38,603.927 1514.94,604.86 1515.5,592.765 1516.06,582.036 1516.62,571.755 1517.18,610.66 1517.74,616.664 1518.3,605.522 1518.86,609.52 1519.42,628.627 1519.98,631.725 1520.53,617.157 1521.09,654.143 1521.65,653.821 1522.21,667.637 1522.77,714.673 1523.33,713.173 1523.89,664.037 1524.45,668.002 1525.01,654.044 1525.57,654.451 1526.13,671.765 1526.69,689.78 1527.25,690.147 1527.81,709.681 1528.36,709.46 1528.92,724.11 1529.48,741.63 1530.04,757.074 1530.6,736.019 1531.16,751.248 1531.72,746.343 1532.28,675.457 1532.84,739.078 1533.4,733.991 1533.96,731.978 1534.52,760.156 1535.08,772.342 1535.63,734.421 1536.19,702.382 1536.75,717.96 1537.31,716.144 1537.87,713.385 1538.43,708.041 1538.99,688.28 1539.55,655.212 1540.11,623.777 1540.67,641.144 1541.23,625.467 1541.79,645.351 1542.35,663.791 1542.9,696.958 1543.46,682.128 1544.02,667.045 1544.58,716.813 1545.14,681.762 1545.7,680.453 1546.26,681.782 1546.82,717.948 1547.38,732.004 1547.94,743.719 1548.5,743.931 1549.06,753.623 1549.62,732.434 1550.18,697.815 1550.73,660.215 1551.29,664.321 1551.85,665.479 1552.41,694.745 1552.97,710.477 1553.53,725.995 1554.09,708.687 1554.65,709.159 1555.21,693.004 1555.77,709.193 1556.33,689.96 1556.89,707.943 1557.45,710.348 1558,711.629 1558.56,728.026 1559.12,728.068 1559.68,711.42 1560.24,726.095 1560.8,755.744 1561.36,769.718 1561.92,778.301 1562.48,758.53 1563.04,772.271 1563.6,765.58 1564.16,725.193 1564.72,757.956 1565.28,755.419 1565.83,736.156 1566.39,764.137 1566.95,792.159 1567.51,788.849 1568.07,770.421 1568.63,765.916 1569.19,778.271 1569.75,790.172 1570.31,789.351 1570.87,769.826 1571.43,745.291 1571.99,742.198 1572.55,736.669 1573.1,720.373 1573.66,714.961 1574.22,697.534 1574.78,682.227 1575.34,729.996 1575.9,763.632 1576.46,745.15 1577.02,738.915 1577.58,737.346 1578.14,736.882 1578.7,702.077 1579.26,716.515 1579.82,747.758 1580.37,729.733 1580.93,710.714 1581.49,679.314 1582.05,680.129 1582.61,693.597 1583.17,693.782 1583.73,661.577 1584.29,694.737 1584.85,713.502 1585.41,708.816 1585.97,677.669 1586.53,678.807 1587.09,662.147 1587.65,676.55 1588.2,678.503 1588.76,646.517 1589.32,695.568 1589.88,681.193 1590.44,680.007 1591,660.798 1591.56,675.431 1592.12,705.747 1592.68,751.339 1593.24,732.866 1593.8,695.43 1594.36,711.901 1594.92,743.277 1595.47,711.362 1596.03,677.742 1596.59,692.492 1597.15,694.145 1597.71,695.673 1598.27,646.077 1598.83,665.762 1599.39,682.115 1599.95,702.688 1600.51,686.58 1601.07,718.945 1601.63,703.214 1602.19,685.856 1602.74,669.978 1603.3,650.215 1603.86,653.365 1604.42,608.367 1604.98,613.309 1605.54,600.737 1606.1,586.956 1606.66,573.862 1607.22,579.859 1607.78,617.838 1608.34,619.416 1608.9,608.075 1609.46,613.552 1610.02,647.617 1610.57,650.792 1611.13,637.929 1611.69,637.775 1612.25,657.738 1612.81,663.096 1613.37,665.358 1613.93,666.329 1614.49,686.348 1615.05,703.86 1615.61,700.333 1616.17,681.931 1616.73,660.715 1617.29,660.944 1617.84,666.681 1618.4,688.61 1618.96,691.913 1619.52,723.205 1620.08,709.467 1620.64,725.78 1621.2,736.663 1621.76,749.657 1622.32,729.985 1622.88,761.945 1623.44,757.115 1624,767.988 1624.56,751.007 1625.11,731.765 1625.67,728.975 1626.23,691.359 1626.79,674.264 1627.35,656.376 1627.91,705.93 1628.47,702.293 1629.03,682.89 1629.59,716.84 1630.15,731.519 1630.71,728.993 1631.27,723.902 1631.83,721.975 1632.39,717.896 1632.94,703.323 1633.5,733.761 1634.06,767.452 1634.62,747.316 1635.18,713.145 1635.74,742.064 1636.3,737.128 1636.86,701.486 1637.42,637.257 1637.98,609.44 1638.54,629.812 1639.1,630.787 1639.66,633.44 1640.21,667.181 1640.77,653.66 1641.33,654.09 1641.89,637.866 1642.45,608.751 1643.01,630.383 1643.57,630.65 1644.13,617.654 1644.69,637.772 1645.25,658.238 1645.81,679.713 1646.37,647.779 1646.93,632.932 1647.48,602.275 1648.04,574.135 1648.6,596.512 1649.16,589.569 1649.72,591.687 1650.28,597.822 1650.84,599.327 1651.4,635.752 1651.96,623.737 1652.52,625.379 1653.08,615.081 1653.64,666.549 1654.2,671.149 1654.76,656.742 1655.31,657.35 1655.87,638.708 1656.43,660.114 1656.99,676.411 1657.55,659.915 1658.11,660.465 1658.67,644.918 1659.23,617.695 1659.79,606.475 1660.35,626.629 1660.91,625.48 1661.47,627.092 1662.03,614.125 1662.58,614.94 1663.14,633.878 1663.7,655.891 1664.26,660.016 1664.82,677.246 1665.38,677.869 1665.94,676.644 1666.5,664.432 1667.06,665.738 1667.62,699.324 1668.18,713.605 1668.74,692.661 1669.3,677.232 1669.85,679.046 1670.41,679.979 1670.97,684.808 1671.53,703.668 1672.09,703.788 1672.65,751.96 1673.21,781.051 1673.77,779.727 1674.33,771.839 1674.89,818.518 1675.45,814.001 1676.01,774.526 1676.57,786.772 1677.13,751.097 1677.68,731.24 1678.24,683.043 1678.8,713.908 1679.36,691.248 1679.92,675.422 1680.48,674.469 1681.04,676.572 1681.6,659.466 1682.16,690.457 1682.72,708.311 1683.28,706.878 1683.84,693.846 1684.4,640.706 1684.95,673.702 1685.51,675.534 1686.07,661.284 1686.63,682.569 1687.19,760.443 1687.75,773.504 1688.31,786.486 1688.87,733.745 1689.43,732.267 1689.99,698.423 1690.55,681.399 1691.11,680.037 1691.67,715.364 1692.23,732.36 1692.78,720.013 1693.34,718.206 1693.9,684.835 1694.46,684.363 1695.02,686.319 1695.58,700.387 1696.14,667.575 1696.7,670.446 1697.26,699.271 1697.82,695.348 1698.38,711.726 1698.94,711.336 1699.5,710.203 1700.05,691.773 1700.61,688.522 1701.17,702.643 1701.73,712.885 1702.29,696.838 1702.85,695.424 1703.41,681.827 1703.97,647.52 1704.53,665.245 1705.09,683.583 1705.65,682.598 1706.21,729.845 1706.77,713.123 1707.32,712.796 1707.88,721 1708.44,721.593 1709,736.157 1709.56,682.912 1710.12,697.538 1710.68,682.051 1711.24,681.069 1711.8,670.455 1712.36,653.1 1712.92,688.563 1713.48,685.556 1714.04,651.578 1714.6,636.793 1715.15,639.881 1715.71,629.501 1716.27,635.039 1716.83,653.413 1717.39,656.04 1717.95,655.323 1718.51,689.806 1719.07,674.993 1719.63,661.766 1720.19,661.712 1720.75,660.744 1721.31,661.28 1721.87,644.711 1722.42,662.304 1722.98,651.243 1723.54,635.238 1724.1,655.71 1724.66,643.417 1725.22,630.705 1725.78,649.246 1726.34,650.125 1726.9,701.12 1727.46,699.441 1728.02,745.643 1728.58,741.728 1729.14,755.866 1729.69,801.211 1730.25,762.732 1730.81,773.321 1731.37,817.122 1731.93,730.313 1732.49,709.119 1733.05,688.959 1733.61,641.022 1734.17,626.98 1734.73,612.336 1735.29,564.658 1735.85,538.681 1736.41,532.22 1736.97,588.316 1737.52,576.271 1738.08,583.81 1738.64,572.402 1739.2,563.34 1739.76,569.043 1740.32,559.29 1740.88,581.133 1741.44,638.021 1742,673.274 1742.56,674.714 1743.12,695.164 1743.68,678.97 1744.24,677.422 1744.79,698.98 1745.35,682.164 1745.91,666.421 1746.47,684.896 1747.03,700.969 1747.59,700.463 1748.15,715.769 1748.71,728.514 1749.27,712.849 1749.83,713.149 1750.39,710.36 1750.95,708.247 1751.51,708.908 1752.06,720.136 1752.62,717.316 1753.18,746.983 1753.74,759.496 1754.3,785.932 1754.86,797.431 1755.42,794.225 1755.98,788.569 1756.54,786.003 1757.1,766.808 1757.66,718.17 1758.22,779.536 1758.78,755.224 1759.34,736.99 1759.89,718.476 1760.45,682.276 1761.01,661.913 1761.57,646.214 1762.13,662.005 1762.69,680.911 1763.25,715.312 1763.81,715.583 1764.37,700.49 1764.93,698.012 1765.49,699.467 1766.05,682.505 1766.61,684.772 1767.16,682.959 1767.72,648.795 1768.28,634.367 1768.84,638.434 1769.4,657.885 1769.96,672.68 1770.52,690.077 1771.08,686.401 1771.64,670.71 1772.2,688.222 1772.76,688.375 1773.32,686.168 1773.88,703.728 1774.43,683.889 1774.99,731.362 1775.55,711.489 1776.11,741.907 1776.67,738.249 1777.23,738.222 1777.79,752.141 1778.35,732.227 1778.91,715.739 1779.47,700.258 1780.03,698.54 1780.59,704.85 1781.15,720.599 1781.71,687.244 1782.26,640.659 1782.82,643.765 1783.38,660.755 1783.94,659.077 1784.5,658.151 1785.06,643.352 1785.62,630.738 1786.18,618.607 1786.74,589.45 1787.3,643 1787.86,677.923 1788.42,695.196 1788.98,694.41 1789.53,709.461 1790.09,726.891 1790.65,718.565 1791.21,718.395 1791.77,686.125 1792.33,673.603 1792.89,672.919 1793.45,687.805 1794.01,684.602 1794.57,670.879 1795.13,671.816 1795.69,655.653 1796.25,672.213 1796.8,637.902 1797.36,636.472 1797.92,635.061 1798.48,651.51 1799.04,657.276 1799.6,677.388 1800.16,660.127 1800.72,695.87 1801.28,710.377 1801.84,708.315 1802.4,689.613 1802.96,674.261 1803.52,674.788 1804.08,725.155 1804.63,721.636 1805.19,702.589 1805.75,718.889 1806.31,731.3 1806.87,727.008 1807.43,743.264 1807.99,770.519 1808.55,764.525 1809.11,776.195 1809.67,753.598 1810.23,718.118 1810.79,714.443 1811.35,712.057 1811.9,708.973 1812.46,693.477 1813.02,693.497 1813.58,675.13 1814.14,690.141 1814.7,653.931 1815.26,654.256 1815.82,657.54 1816.38,658.485 1816.94,642.254 1817.5,609.374 1818.06,627.336 1818.62,631.467 1819.18,667.285 1819.73,669.168 1820.29,654.836 1820.85,609.913 1821.41,598.253 1821.97,603.258 1822.53,625.661 1823.09,646.296 1823.65,664.57 1824.21,635.266 1824.77,608.31 1825.33,594.468 1825.89,601.217 1826.45,588.481 1827,527.422 1827.56,556.458 1828.12,594.639 1828.68,615.298 1829.24,621.784 1829.8,624.939 1830.36,646.665 1830.92,649.594 1831.48,658.962 1832.04,677.34 1832.6,660.523 1833.16,660.903 1833.72,674.887 1834.27,691.846 1834.83,678.837 1835.39,698.167 1835.95,712.021 1836.51,726.968 1837.07,725.541 1837.63,722.402 1838.19,719.51 \"/>\n<path clip-path=\"url(#clip533)\" d=\"M720.247 690.494 L720.806 690.494 L721.365 690.494 L721.924 690.494 L722.484 690.494 L723.043 690.494 L723.602 690.494 L724.161 690.494 L724.721 690.494 L725.28 690.494 L725.839 690.494 L726.398 690.494 L726.958 690.494 L727.517 690.494 L728.076 690.494 L728.635 690.494 L729.195 690.494 L729.754 690.494 L730.313 690.494 L730.872 690.494 L731.432 690.494 L731.991 690.494 L732.55 690.494 L733.109 690.494 L733.669 690.494 L734.228 690.494 L734.787 690.494 L735.346 690.494 L735.906 690.494 L736.465 690.494 L737.024 690.494 L737.583 690.494 L738.143 690.494 L738.702 690.494 L739.261 690.494 L739.82 690.494 L740.38 690.494 L740.939 690.494 L741.498 690.494 L742.057 690.494 L742.617 690.494 L743.176 690.494 L743.735 690.494 L744.294 690.494 L744.854 690.494 L745.413 690.494 L745.972 690.494 L746.531 690.494 L747.091 690.494 L747.65 690.494 L748.209 690.494 L748.768 690.494 L749.328 690.494 L749.887 690.494 L750.446 690.494 L751.005 690.494 L751.565 690.494 L752.124 690.494 L752.683 690.494 L753.242 690.494 L753.802 690.494 L754.361 690.494 L754.92 690.494 L755.479 690.494 L756.039 690.494 L756.598 690.494 L757.157 690.494 L757.716 690.494 L758.276 690.494 L758.835 690.494 L759.394 690.494 L759.953 690.494 L760.513 690.494 L761.072 690.494 L761.631 690.494 L762.19 690.494 L762.75 690.494 L763.309 690.494 L763.868 690.494 L764.427 690.494 L764.987 690.494 L765.546 690.494 L766.105 690.494 L766.664 690.494 L767.224 690.494 L767.783 690.494 L768.342 690.494 L768.901 690.494 L769.461 690.494 L770.02 690.494 L770.579 690.494 L771.138 690.494 L771.698 690.494 L772.257 690.494 L772.816 690.494 L773.375 690.494 L773.935 690.494 L774.494 690.494 L775.053 690.494 L775.612 690.494 L776.172 690.494 L776.731 690.494 L777.29 690.494 L777.849 690.494 L778.409 690.494 L778.968 690.494 L779.527 690.494 L780.086 690.494 L780.646 690.494 L781.205 690.494 L781.764 690.494 L782.323 690.494 L782.883 690.494 L783.442 690.494 L784.001 690.494 L784.56 690.494 L785.12 690.494 L785.679 690.494 L786.238 690.494 L786.797 690.494 L787.357 690.494 L787.916 690.494 L788.475 690.494 L789.034 690.494 L789.594 690.494 L790.153 690.494 L790.712 690.494 L791.271 690.494 L791.831 690.494 L792.39 690.494 L792.949 690.494 L793.508 690.494 L794.068 690.494 L794.627 690.494 L795.186 690.494 L795.745 690.494 L796.305 690.494 L796.864 690.494 L797.423 690.494 L797.982 690.494 L798.542 690.494 L799.101 690.494 L799.66 690.494 L800.219 690.494 L800.779 690.494 L801.338 690.494 L801.897 690.494 L802.456 690.494 L803.016 690.494 L803.575 690.494 L804.134 690.494 L804.693 690.494 L805.253 690.494 L805.812 690.494 L806.371 690.494 L806.931 690.494 L807.49 690.494 L808.049 690.494 L808.608 690.494 L809.168 690.494 L809.727 690.494 L810.286 690.494 L810.845 690.494 L811.405 690.494 L811.964 690.494 L812.523 690.494 L813.082 690.494 L813.642 690.494 L814.201 690.494 L814.76 690.494 L815.319 690.494 L815.879 690.494 L816.438 690.494 L816.997 690.494 L817.556 690.494 L818.116 690.494 L818.675 690.494 L819.234 690.494 L819.793 690.494 L820.353 690.494 L820.912 690.494 L821.471 690.494 L822.03 690.494 L822.59 690.494 L823.149 690.494 L823.708 690.494 L824.267 690.494 L824.827 690.494 L825.386 690.494 L825.945 690.494 L826.504 690.494 L827.064 690.494 L827.623 690.494 L828.182 690.494 L828.741 690.494 L829.301 690.494 L829.86 690.494 L830.419 690.494 L830.978 690.494 L831.538 690.494 L832.097 690.494 L832.656 690.494 L833.215 690.494 L833.775 690.494 L834.334 690.494 L834.893 690.494 L835.452 690.494 L836.012 690.494 L836.571 690.494 L837.13 690.494 L837.689 690.494 L838.249 690.494 L838.808 690.494 L839.367 690.494 L839.926 690.494 L840.486 690.494 L841.045 690.494 L841.604 690.494 L842.163 690.494 L842.723 690.494 L843.282 690.494 L843.841 690.494 L844.4 690.494 L844.96 690.494 L845.519 690.494 L846.078 690.494 L846.637 690.494 L847.197 690.494 L847.756 690.494 L848.315 690.494 L848.874 690.494 L849.434 690.494 L849.993 690.494 L850.552 690.494 L851.111 690.494 L851.671 690.494 L852.23 690.494 L852.789 690.494 L853.348 690.494 L853.908 690.494 L854.467 690.494 L855.026 690.494 L855.585 690.494 L856.145 690.494 L856.704 690.494 L857.263 690.494 L857.822 690.494 L858.382 690.494 L858.941 690.494 L859.5 690.494 L860.059 690.494 L860.619 690.494 L861.178 690.494 L861.737 690.494 L862.296 690.494 L862.856 690.494 L863.415 690.494 L863.974 690.494 L864.533 690.494 L865.093 690.494 L865.652 690.494 L866.211 690.494 L866.77 690.494 L867.33 690.494 L867.889 690.494 L868.448 690.494 L869.007 690.494 L869.567 690.494 L870.126 690.494 L870.685 690.494 L871.244 690.494 L871.804 690.494 L872.363 690.494 L872.922 690.494 L873.481 690.494 L874.041 690.494 L874.6 690.494 L875.159 690.494 L875.718 690.494 L876.278 690.494 L876.837 690.494 L877.396 690.494 L877.955 690.494 L878.515 690.494 L879.074 690.494 L879.633 690.494 L880.192 690.494 L880.752 690.494 L881.311 690.494 L881.87 690.494 L882.429 690.494 L882.989 690.494 L883.548 690.494 L884.107 690.494 L884.666 690.494 L885.226 690.494 L885.785 690.494 L886.344 690.494 L886.903 690.494 L887.463 690.494 L888.022 690.494 L888.581 690.494 L889.14 690.494 L889.7 690.494 L890.259 690.494 L890.818 690.494 L891.377 690.494 L891.937 690.494 L892.496 690.494 L893.055 690.494 L893.614 690.494 L894.174 690.494 L894.733 690.494 L895.292 690.494 L895.851 690.494 L896.411 690.494 L896.97 690.494 L897.529 690.494 L898.088 690.494 L898.648 690.494 L899.207 690.494 L899.766 690.494 L900.325 690.494 L900.885 690.494 L901.444 690.494 L902.003 690.494 L902.562 690.494 L903.122 690.494 L903.681 690.494 L904.24 690.494 L904.799 690.494 L905.359 690.494 L905.918 690.494 L906.477 690.494 L907.036 690.494 L907.596 690.494 L908.155 690.494 L908.714 690.494 L909.273 690.494 L909.833 690.494 L910.392 690.494 L910.951 690.494 L911.51 690.494 L912.07 690.494 L912.629 690.494 L913.188 690.494 L913.747 690.494 L914.307 690.494 L914.866 690.494 L915.425 690.494 L915.984 690.494 L916.544 690.494 L917.103 690.494 L917.662 690.494 L918.221 690.494 L918.781 690.494 L919.34 690.494 L919.899 690.494 L920.458 690.494 L921.018 690.494 L921.577 690.494 L922.136 690.494 L922.695 690.494 L923.255 690.494 L923.814 690.494 L924.373 690.494 L924.932 690.494 L925.492 690.494 L926.051 690.494 L926.61 690.494 L927.169 690.494 L927.729 690.494 L928.288 690.494 L928.847 690.494 L929.406 690.494 L929.966 690.494 L930.525 690.494 L931.084 690.494 L931.644 690.494 L932.203 690.494 L932.762 690.494 L933.321 690.494 L933.881 690.494 L934.44 690.494 L934.999 690.494 L935.558 690.494 L936.118 690.494 L936.677 690.494 L937.236 690.494 L937.795 690.494 L938.355 690.494 L938.914 690.494 L939.473 690.494 L940.032 690.494 L940.592 690.494 L941.151 690.494 L941.71 690.494 L942.269 690.494 L942.829 690.494 L943.388 690.494 L943.947 690.494 L944.506 690.494 L945.066 690.494 L945.625 690.494 L946.184 690.494 L946.743 690.494 L947.303 690.494 L947.862 690.494 L948.421 690.494 L948.98 690.494 L949.54 690.494 L950.099 690.494 L950.658 690.494 L951.217 690.494 L951.777 690.494 L952.336 690.494 L952.895 690.494 L953.454 690.494 L954.014 690.494 L954.573 690.494 L955.132 690.494 L955.691 690.494 L956.251 690.494 L956.81 690.494 L957.369 690.494 L957.928 690.494 L958.488 690.494 L959.047 690.494 L959.606 690.494 L960.165 690.494 L960.725 690.494 L961.284 690.494 L961.843 690.494 L962.402 690.494 L962.962 690.494 L963.521 690.494 L964.08 690.494 L964.639 690.494 L965.199 690.494 L965.758 690.494 L966.317 690.494 L966.876 690.494 L967.436 690.494 L967.995 690.494 L968.554 690.494 L969.113 690.494 L969.673 690.494 L970.232 690.494 L970.791 690.494 L971.35 690.494 L971.91 690.494 L972.469 690.494 L973.028 690.494 L973.587 690.494 L974.147 690.494 L974.706 690.494 L975.265 690.494 L975.824 690.494 L976.384 690.494 L976.943 690.494 L977.502 690.494 L978.061 690.494 L978.621 690.494 L979.18 690.494 L979.739 690.494 L980.298 690.494 L980.858 690.494 L981.417 690.494 L981.976 690.494 L982.535 690.494 L983.095 690.494 L983.654 690.494 L984.213 690.494 L984.772 690.494 L985.332 690.494 L985.891 690.494 L986.45 690.494 L987.009 690.494 L987.569 690.494 L988.128 690.494 L988.687 690.494 L989.246 690.494 L989.806 690.494 L990.365 690.494 L990.924 690.494 L991.483 690.494 L992.043 690.494 L992.602 690.494 L993.161 690.494 L993.72 690.494 L994.28 690.494 L994.839 690.494 L995.398 690.494 L995.957 690.494 L996.517 690.494 L997.076 690.494 L997.635 690.494 L998.194 690.494 L998.754 690.494 L999.313 690.494 L999.872 690.494 L1000.43 690.494 L1000.99 690.494 L1001.55 690.494 L1002.11 690.494 L1002.67 690.494 L1003.23 690.494 L1003.79 690.494 L1004.35 690.494 L1004.91 690.494 L1005.46 690.494 L1006.02 690.494 L1006.58 690.494 L1007.14 690.494 L1007.7 690.494 L1008.26 690.494 L1008.82 690.494 L1009.38 690.494 L1009.94 690.494 L1010.5 690.494 L1011.06 690.494 L1011.62 690.494 L1012.18 690.494 L1012.73 690.494 L1013.29 690.494 L1013.85 690.494 L1014.41 690.494 L1014.97 690.494 L1015.53 690.494 L1016.09 690.494 L1016.65 690.494 L1017.21 690.494 L1017.77 690.494 L1018.33 690.494 L1018.89 690.494 L1019.45 690.494 L1020.01 690.494 L1020.56 690.494 L1021.12 690.494 L1021.68 690.494 L1022.24 690.494 L1022.8 690.494 L1023.36 690.494 L1023.92 690.494 L1024.48 690.494 L1025.04 690.494 L1025.6 690.494 L1026.16 690.494 L1026.72 690.494 L1027.28 690.494 L1027.83 690.494 L1028.39 690.494 L1028.95 690.494 L1029.51 690.494 L1030.07 690.494 L1030.63 690.494 L1031.19 690.494 L1031.75 690.494 L1032.31 690.494 L1032.87 690.494 L1033.43 690.494 L1033.99 690.494 L1034.55 690.494 L1035.1 690.494 L1035.66 690.494 L1036.22 690.494 L1036.78 690.494 L1037.34 690.494 L1037.9 690.494 L1038.46 690.494 L1039.02 690.494 L1039.58 690.494 L1040.14 690.494 L1040.7 690.494 L1041.26 690.494 L1041.82 690.494 L1042.38 690.494 L1042.93 690.494 L1043.49 690.494 L1044.05 690.494 L1044.61 690.494 L1045.17 690.494 L1045.73 690.494 L1046.29 690.494 L1046.85 690.494 L1047.41 690.494 L1047.97 690.494 L1048.53 690.494 L1049.09 690.494 L1049.65 690.494 L1050.2 690.494 L1050.76 690.494 L1051.32 690.494 L1051.88 690.494 L1052.44 690.494 L1053 690.494 L1053.56 690.494 L1054.12 690.494 L1054.68 690.494 L1055.24 690.494 L1055.8 690.494 L1056.36 690.494 L1056.92 690.494 L1057.48 690.494 L1058.03 690.494 L1058.59 690.494 L1059.15 690.494 L1059.71 690.494 L1060.27 690.494 L1060.83 690.494 L1061.39 690.494 L1061.95 690.494 L1062.51 690.494 L1063.07 690.494 L1063.63 690.494 L1064.19 690.494 L1064.75 690.494 L1065.3 690.494 L1065.86 690.494 L1066.42 690.494 L1066.98 690.494 L1067.54 690.494 L1068.1 690.494 L1068.66 690.494 L1069.22 690.494 L1069.78 690.494 L1070.34 690.494 L1070.9 690.494 L1071.46 690.494 L1072.02 690.494 L1072.57 690.494 L1073.13 690.494 L1073.69 690.494 L1074.25 690.494 L1074.81 690.494 L1075.37 690.494 L1075.93 690.494 L1076.49 690.494 L1077.05 690.494 L1077.61 690.494 L1078.17 690.494 L1078.73 690.494 L1079.29 690.494 L1079.85 690.494 L1080.4 690.494 L1080.96 690.494 L1081.52 690.494 L1082.08 690.494 L1082.64 690.494 L1083.2 690.494 L1083.76 690.494 L1084.32 690.494 L1084.88 690.494 L1085.44 690.494 L1086 690.494 L1086.56 690.494 L1087.12 690.494 L1087.67 690.494 L1088.23 690.494 L1088.79 690.494 L1089.35 690.494 L1089.91 690.494 L1090.47 690.494 L1091.03 690.494 L1091.59 690.494 L1092.15 690.494 L1092.71 690.494 L1093.27 690.494 L1093.83 690.494 L1094.39 690.494 L1094.94 690.494 L1095.5 690.494 L1096.06 690.494 L1096.62 690.494 L1097.18 690.494 L1097.74 690.494 L1098.3 690.494 L1098.86 690.494 L1099.42 690.494 L1099.98 690.494 L1100.54 690.494 L1101.1 690.494 L1101.66 690.494 L1102.22 690.494 L1102.77 690.494 L1103.33 690.494 L1103.89 690.494 L1104.45 690.494 L1105.01 690.494 L1105.57 690.494 L1106.13 690.494 L1106.69 690.494 L1107.25 690.494 L1107.81 690.494 L1108.37 690.494 L1108.93 690.494 L1109.49 690.494 L1110.04 690.494 L1110.6 690.494 L1111.16 690.494 L1111.72 690.494 L1112.28 690.494 L1112.84 690.494 L1113.4 690.494 L1113.96 690.494 L1114.52 690.494 L1115.08 690.494 L1115.64 690.494 L1116.2 690.494 L1116.76 690.494 L1117.31 690.494 L1117.87 690.494 L1118.43 690.494 L1118.99 690.494 L1119.55 690.494 L1120.11 690.494 L1120.67 690.494 L1121.23 690.494 L1121.79 690.494 L1122.35 690.494 L1122.91 690.494 L1123.47 690.494 L1124.03 690.494 L1124.59 690.494 L1125.14 690.494 L1125.7 690.494 L1126.26 690.494 L1126.82 690.494 L1127.38 690.494 L1127.94 690.494 L1128.5 690.494 L1129.06 690.494 L1129.62 690.494 L1130.18 690.494 L1130.74 690.494 L1131.3 690.494 L1131.86 690.494 L1132.41 690.494 L1132.97 690.494 L1133.53 690.494 L1134.09 690.494 L1134.65 690.494 L1135.21 690.494 L1135.77 690.494 L1136.33 690.494 L1136.89 690.494 L1137.45 690.494 L1138.01 690.494 L1138.57 690.494 L1139.13 690.494 L1139.68 690.494 L1140.24 690.494 L1140.8 690.494 L1141.36 690.494 L1141.92 690.494 L1142.48 690.494 L1143.04 690.494 L1143.6 690.494 L1144.16 690.494 L1144.72 690.494 L1145.28 690.494 L1145.84 690.494 L1146.4 690.494 L1146.96 690.494 L1147.51 690.494 L1148.07 690.494 L1148.63 690.494 L1149.19 690.494 L1149.75 690.494 L1150.31 690.494 L1150.87 690.494 L1151.43 690.494 L1151.99 690.494 L1152.55 690.494 L1153.11 690.494 L1153.67 690.494 L1154.23 690.494 L1154.78 690.494 L1155.34 690.494 L1155.9 690.494 L1156.46 690.494 L1157.02 690.494 L1157.58 690.494 L1158.14 690.494 L1158.7 690.494 L1159.26 690.494 L1159.82 690.494 L1160.38 690.494 L1160.94 690.494 L1161.5 690.494 L1162.05 690.494 L1162.61 690.494 L1163.17 690.494 L1163.73 690.494 L1164.29 690.494 L1164.85 690.494 L1165.41 690.494 L1165.97 690.494 L1166.53 690.494 L1167.09 690.494 L1167.65 690.494 L1168.21 690.494 L1168.77 690.494 L1169.33 690.494 L1169.88 690.494 L1170.44 690.494 L1171 690.494 L1171.56 690.494 L1172.12 690.494 L1172.68 690.494 L1173.24 690.494 L1173.8 690.494 L1174.36 690.494 L1174.92 690.494 L1175.48 690.494 L1176.04 690.494 L1176.6 690.494 L1177.15 690.494 L1177.71 690.494 L1178.27 690.494 L1178.83 690.494 L1179.39 690.494 L1179.95 690.494 L1180.51 690.494 L1181.07 690.494 L1181.63 690.494 L1182.19 690.494 L1182.75 690.494 L1183.31 690.494 L1183.87 690.494 L1184.43 690.494 L1184.98 690.494 L1185.54 690.494 L1186.1 690.494 L1186.66 690.494 L1187.22 690.494 L1187.78 690.494 L1188.34 690.494 L1188.9 690.494 L1189.46 690.494 L1190.02 690.494 L1190.58 690.494 L1191.14 690.494 L1191.7 690.494 L1192.25 690.494 L1192.81 690.494 L1193.37 690.494 L1193.93 690.494 L1194.49 690.494 L1195.05 690.494 L1195.61 690.494 L1196.17 690.494 L1196.73 690.494 L1197.29 690.494 L1197.85 690.494 L1198.41 690.494 L1198.97 690.494 L1199.52 690.494 L1200.08 690.494 L1200.64 690.494 L1201.2 690.494 L1201.76 690.494 L1202.32 690.494 L1202.88 690.494 L1203.44 690.494 L1204 690.494 L1204.56 690.494 L1205.12 690.494 L1205.68 690.494 L1206.24 690.494 L1206.8 690.494 L1207.35 690.494 L1207.91 690.494 L1208.47 690.494 L1209.03 690.494 L1209.59 690.494 L1210.15 690.494 L1210.71 690.494 L1211.27 690.494 L1211.83 690.494 L1212.39 690.494 L1212.95 690.494 L1213.51 690.494 L1214.07 690.494 L1214.62 690.494 L1215.18 690.494 L1215.74 690.494 L1216.3 690.494 L1216.86 690.494 L1217.42 690.494 L1217.98 690.494 L1218.54 690.494 L1219.1 690.494 L1219.66 690.494 L1220.22 690.494 L1220.78 690.494 L1221.34 690.494 L1221.89 690.494 L1222.45 690.494 L1223.01 690.494 L1223.57 690.494 L1224.13 690.494 L1224.69 690.494 L1225.25 690.494 L1225.81 690.494 L1226.37 690.494 L1226.93 690.494 L1227.49 690.494 L1228.05 690.494 L1228.61 690.494 L1229.17 690.494 L1229.72 690.494 L1230.28 690.494 L1230.84 690.494 L1231.4 690.494 L1231.96 690.494 L1232.52 690.494 L1233.08 690.494 L1233.64 690.494 L1234.2 690.494 L1234.76 690.494 L1235.32 690.494 L1235.88 690.494 L1236.44 690.494 L1236.99 690.494 L1237.55 690.494 L1238.11 690.494 L1238.67 690.494 L1239.23 690.494 L1239.79 690.494 L1240.35 690.494 L1240.91 690.494 L1241.47 690.494 L1242.03 690.494 L1242.59 690.494 L1243.15 690.494 L1243.71 690.494 L1244.26 690.494 L1244.82 690.494 L1245.38 690.494 L1245.94 690.494 L1246.5 690.494 L1247.06 690.494 L1247.62 690.494 L1248.18 690.494 L1248.74 690.494 L1249.3 690.494 L1249.86 690.494 L1250.42 690.494 L1250.98 690.494 L1251.54 690.494 L1252.09 690.494 L1252.65 690.494 L1253.21 690.494 L1253.77 690.494 L1254.33 690.494 L1254.89 690.494 L1255.45 690.494 L1256.01 690.494 L1256.57 690.494 L1257.13 690.494 L1257.69 690.494 L1258.25 690.494 L1258.81 690.494 L1259.36 690.494 L1259.92 690.494 L1260.48 690.494 L1261.04 690.494 L1261.6 690.494 L1262.16 690.494 L1262.72 690.494 L1263.28 690.494 L1263.84 690.494 L1264.4 690.494 L1264.96 690.494 L1265.52 690.494 L1266.08 690.494 L1266.63 690.494 L1267.19 690.494 L1267.75 690.494 L1268.31 690.494 L1268.87 690.494 L1269.43 690.494 L1269.99 690.494 L1270.55 690.494 L1271.11 690.494 L1271.67 690.494 L1272.23 690.494 L1272.79 690.494 L1273.35 690.494 L1273.91 690.494 L1274.46 690.494 L1275.02 690.494 L1275.58 690.494 L1276.14 690.494 L1276.7 690.494 L1277.26 690.494 L1277.82 690.494 L1278.38 690.494 L1278.94 690.494 L1279.5 690.494 L1280.06 690.494 L1280.62 690.494 L1281.18 690.494 L1281.73 690.494 L1282.29 690.494 L1282.85 690.494 L1283.41 690.494 L1283.97 690.494 L1284.53 690.494 L1285.09 690.494 L1285.65 690.494 L1286.21 690.494 L1286.77 690.494 L1287.33 690.494 L1287.89 690.494 L1288.45 690.494 L1289 690.494 L1289.56 690.494 L1290.12 690.494 L1290.68 690.494 L1291.24 690.494 L1291.8 690.494 L1292.36 690.494 L1292.92 690.494 L1293.48 690.494 L1294.04 690.494 L1294.6 690.494 L1295.16 690.494 L1295.72 690.494 L1296.28 690.494 L1296.83 690.494 L1297.39 690.494 L1297.95 690.494 L1298.51 690.494 L1299.07 690.494 L1299.63 690.494 L1300.19 690.494 L1300.75 690.494 L1301.31 690.494 L1301.87 690.494 L1302.43 690.494 L1302.99 690.494 L1303.55 690.494 L1304.1 690.494 L1304.66 690.494 L1305.22 690.494 L1305.78 690.494 L1306.34 690.494 L1306.9 690.494 L1307.46 690.494 L1308.02 690.494 L1308.58 690.494 L1309.14 690.494 L1309.7 690.494 L1310.26 690.494 L1310.82 690.494 L1311.38 690.494 L1311.93 690.494 L1312.49 690.494 L1313.05 690.494 L1313.61 690.494 L1314.17 690.494 L1314.73 690.494 L1315.29 690.494 L1315.85 690.494 L1316.41 690.494 L1316.97 690.494 L1317.53 690.494 L1318.09 690.494 L1318.65 690.494 L1319.2 690.494 L1319.76 690.494 L1320.32 690.494 L1320.88 690.494 L1321.44 690.494 L1322 690.494 L1322.56 690.494 L1323.12 690.494 L1323.68 690.494 L1324.24 690.494 L1324.8 690.494 L1325.36 690.494 L1325.92 690.494 L1326.47 690.494 L1327.03 690.494 L1327.59 690.494 L1328.15 690.494 L1328.71 690.494 L1329.27 690.494 L1329.83 690.494 L1330.39 690.494 L1330.95 690.494 L1331.51 690.494 L1332.07 690.494 L1332.63 690.494 L1333.19 690.494 L1333.75 690.494 L1334.3 690.494 L1334.86 690.494 L1335.42 690.494 L1335.98 690.494 L1336.54 690.494 L1337.1 690.494 L1337.66 690.494 L1338.22 690.494 L1338.78 690.494 L1339.34 690.494 L1339.9 690.494 L1340.46 690.494 L1341.02 690.494 L1341.57 690.494 L1342.13 690.494 L1342.69 690.494 L1343.25 690.494 L1343.81 690.494 L1344.37 690.494 L1344.93 690.494 L1345.49 690.494 L1346.05 690.494 L1346.61 690.494 L1347.17 690.494 L1347.73 690.494 L1348.29 690.494 L1348.84 690.494 L1349.4 690.494 L1349.96 690.494 L1350.52 690.494 L1351.08 690.494 L1351.64 690.494 L1352.2 690.494 L1352.76 690.494 L1353.32 690.494 L1353.88 690.494 L1354.44 690.494 L1355 690.494 L1355.56 690.494 L1356.12 690.494 L1356.67 690.494 L1357.23 690.494 L1357.79 690.494 L1358.35 690.494 L1358.91 690.494 L1359.47 690.494 L1360.03 690.494 L1360.59 690.494 L1361.15 690.494 L1361.71 690.494 L1362.27 690.494 L1362.83 690.494 L1363.39 690.494 L1363.94 690.494 L1364.5 690.494 L1365.06 690.494 L1365.62 690.494 L1366.18 690.494 L1366.74 690.494 L1367.3 690.494 L1367.86 690.494 L1368.42 690.494 L1368.98 690.494 L1369.54 690.494 L1370.1 690.494 L1370.66 690.494 L1371.21 690.494 L1371.77 690.494 L1372.33 690.494 L1372.89 690.494 L1373.45 690.494 L1374.01 690.494 L1374.57 690.494 L1375.13 690.494 L1375.69 690.494 L1376.25 690.494 L1376.81 690.494 L1377.37 690.494 L1377.93 690.494 L1378.49 690.494 L1379.04 690.494 L1379.6 690.494 L1380.16 690.494 L1380.72 690.494 L1381.28 690.494 L1381.84 690.494 L1382.4 690.494 L1382.96 690.494 L1383.52 690.494 L1384.08 690.494 L1384.64 690.494 L1385.2 690.494 L1385.76 690.494 L1386.31 690.494 L1386.87 690.494 L1387.43 690.494 L1387.99 690.494 L1388.55 690.494 L1389.11 690.494 L1389.67 690.494 L1390.23 690.494 L1390.79 690.494 L1391.35 690.494 L1391.91 690.494 L1392.47 690.494 L1393.03 690.494 L1393.58 690.494 L1394.14 690.494 L1394.7 690.494 L1395.26 690.494 L1395.82 690.494 L1396.38 690.494 L1396.94 690.494 L1397.5 690.494 L1398.06 690.494 L1398.62 690.494 L1399.18 690.494 L1399.74 690.494 L1400.3 690.494 L1400.86 690.494 L1401.41 690.494 L1401.97 690.494 L1402.53 690.494 L1403.09 690.494 L1403.65 690.494 L1404.21 690.494 L1404.77 690.494 L1405.33 690.494 L1405.89 690.494 L1406.45 690.494 L1407.01 690.494 L1407.57 690.494 L1408.13 690.494 L1408.68 690.494 L1409.24 690.494 L1409.8 690.494 L1410.36 690.494 L1410.92 690.494 L1411.48 690.494 L1412.04 690.494 L1412.6 690.494 L1413.16 690.494 L1413.72 690.494 L1414.28 690.494 L1414.84 690.494 L1415.4 690.494 L1415.95 690.494 L1416.51 690.494 L1417.07 690.494 L1417.63 690.494 L1418.19 690.494 L1418.75 690.494 L1419.31 690.494 L1419.87 690.494 L1420.43 690.494 L1420.99 690.494 L1421.55 690.494 L1422.11 690.494 L1422.67 690.494 L1423.23 690.494 L1423.78 690.494 L1424.34 690.494 L1424.9 690.494 L1425.46 690.494 L1426.02 690.494 L1426.58 690.494 L1427.14 690.494 L1427.7 690.494 L1428.26 690.494 L1428.82 690.494 L1429.38 690.494 L1429.94 690.494 L1430.5 690.494 L1431.05 690.494 L1431.61 690.494 L1432.17 690.494 L1432.73 690.494 L1433.29 690.494 L1433.85 690.494 L1434.41 690.494 L1434.97 690.494 L1435.53 690.494 L1436.09 690.494 L1436.65 690.494 L1437.21 690.494 L1437.77 690.494 L1438.33 690.494 L1438.88 690.494 L1439.44 690.494 L1440 690.494 L1440.56 690.494 L1441.12 690.494 L1441.68 690.494 L1442.24 690.494 L1442.8 690.494 L1443.36 690.494 L1443.92 690.494 L1444.48 690.494 L1445.04 690.494 L1445.6 690.494 L1446.15 690.494 L1446.71 690.494 L1447.27 690.494 L1447.83 690.494 L1448.39 690.494 L1448.95 690.494 L1449.51 690.494 L1450.07 690.494 L1450.63 690.494 L1451.19 690.494 L1451.75 690.494 L1452.31 690.494 L1452.87 690.494 L1453.42 690.494 L1453.98 690.494 L1454.54 690.494 L1455.1 690.494 L1455.66 690.494 L1456.22 690.494 L1456.78 690.494 L1457.34 690.494 L1457.9 690.494 L1458.46 690.494 L1459.02 690.494 L1459.58 690.494 L1460.14 690.494 L1460.7 690.494 L1461.25 690.494 L1461.81 690.494 L1462.37 690.494 L1462.93 690.494 L1463.49 690.494 L1464.05 690.494 L1464.61 690.494 L1465.17 690.494 L1465.73 690.494 L1466.29 690.494 L1466.85 690.494 L1467.41 690.494 L1467.97 690.494 L1468.52 690.494 L1469.08 690.494 L1469.64 690.494 L1470.2 690.494 L1470.76 690.494 L1471.32 690.494 L1471.88 690.494 L1472.44 690.494 L1473 690.494 L1473.56 690.494 L1474.12 690.494 L1474.68 690.494 L1475.24 690.494 L1475.79 690.494 L1476.35 690.494 L1476.91 690.494 L1477.47 690.494 L1478.03 690.494 L1478.59 690.494 L1479.15 690.494 L1479.71 690.494 L1480.27 690.494 L1480.83 690.494 L1481.39 690.494 L1481.95 690.494 L1482.51 690.494 L1483.07 690.494 L1483.62 690.494 L1484.18 690.494 L1484.74 690.494 L1485.3 690.494 L1485.86 690.494 L1486.42 690.494 L1486.98 690.494 L1487.54 690.494 L1488.1 690.494 L1488.66 690.494 L1489.22 690.494 L1489.78 690.494 L1490.34 690.494 L1490.89 690.494 L1491.45 690.494 L1492.01 690.494 L1492.57 690.494 L1493.13 690.494 L1493.69 690.494 L1494.25 690.494 L1494.81 690.494 L1495.37 690.494 L1495.93 690.494 L1496.49 690.494 L1497.05 690.494 L1497.61 690.494 L1498.16 690.494 L1498.72 690.494 L1499.28 690.494 L1499.84 690.494 L1500.4 690.494 L1500.96 690.494 L1501.52 690.494 L1502.08 690.494 L1502.64 690.494 L1503.2 690.494 L1503.76 690.494 L1504.32 690.494 L1504.88 690.494 L1505.44 690.494 L1505.99 690.494 L1506.55 690.494 L1507.11 690.494 L1507.67 690.494 L1508.23 690.494 L1508.79 690.494 L1509.35 690.494 L1509.91 690.494 L1510.47 690.494 L1511.03 690.494 L1511.59 690.494 L1512.15 690.494 L1512.71 690.494 L1513.26 690.494 L1513.82 690.494 L1514.38 690.494 L1514.94 690.494 L1515.5 690.494 L1516.06 690.494 L1516.62 690.494 L1517.18 690.494 L1517.74 690.494 L1518.3 690.494 L1518.86 690.494 L1519.42 690.494 L1519.98 690.494 L1520.53 690.494 L1521.09 690.494 L1521.65 690.494 L1522.21 690.494 L1522.77 690.494 L1523.33 690.494 L1523.89 690.494 L1524.45 690.494 L1525.01 690.494 L1525.57 690.494 L1526.13 690.494 L1526.69 690.494 L1527.25 690.494 L1527.81 690.494 L1528.36 690.494 L1528.92 690.494 L1529.48 690.494 L1530.04 690.494 L1530.6 690.494 L1531.16 690.494 L1531.72 690.494 L1532.28 690.494 L1532.84 690.494 L1533.4 690.494 L1533.96 690.494 L1534.52 690.494 L1535.08 690.494 L1535.63 690.494 L1536.19 690.494 L1536.75 690.494 L1537.31 690.494 L1537.87 690.494 L1538.43 690.494 L1538.99 690.494 L1539.55 690.494 L1540.11 690.494 L1540.67 690.494 L1541.23 690.494 L1541.79 690.494 L1542.35 690.494 L1542.9 690.494 L1543.46 690.494 L1544.02 690.494 L1544.58 690.494 L1545.14 690.494 L1545.7 690.494 L1546.26 690.494 L1546.82 690.494 L1547.38 690.494 L1547.94 690.494 L1548.5 690.494 L1549.06 690.494 L1549.62 690.494 L1550.18 690.494 L1550.73 690.494 L1551.29 690.494 L1551.85 690.494 L1552.41 690.494 L1552.97 690.494 L1553.53 690.494 L1554.09 690.494 L1554.65 690.494 L1555.21 690.494 L1555.77 690.494 L1556.33 690.494 L1556.89 690.494 L1557.45 690.494 L1558 690.494 L1558.56 690.494 L1559.12 690.494 L1559.68 690.494 L1560.24 690.494 L1560.8 690.494 L1561.36 690.494 L1561.92 690.494 L1562.48 690.494 L1563.04 690.494 L1563.6 690.494 L1564.16 690.494 L1564.72 690.494 L1565.28 690.494 L1565.83 690.494 L1566.39 690.494 L1566.95 690.494 L1567.51 690.494 L1568.07 690.494 L1568.63 690.494 L1569.19 690.494 L1569.75 690.494 L1570.31 690.494 L1570.87 690.494 L1571.43 690.494 L1571.99 690.494 L1572.55 690.494 L1573.1 690.494 L1573.66 690.494 L1574.22 690.494 L1574.78 690.494 L1575.34 690.494 L1575.9 690.494 L1576.46 690.494 L1577.02 690.494 L1577.58 690.494 L1578.14 690.494 L1578.7 690.494 L1579.26 690.494 L1579.82 690.494 L1580.37 690.494 L1580.93 690.494 L1581.49 690.494 L1582.05 690.494 L1582.61 690.494 L1583.17 690.494 L1583.73 690.494 L1584.29 690.494 L1584.85 690.494 L1585.41 690.494 L1585.97 690.494 L1586.53 690.494 L1587.09 690.494 L1587.65 690.494 L1588.2 690.494 L1588.76 690.494 L1589.32 690.494 L1589.88 690.494 L1590.44 690.494 L1591 690.494 L1591.56 690.494 L1592.12 690.494 L1592.68 690.494 L1593.24 690.494 L1593.8 690.494 L1594.36 690.494 L1594.92 690.494 L1595.47 690.494 L1596.03 690.494 L1596.59 690.494 L1597.15 690.494 L1597.71 690.494 L1598.27 690.494 L1598.83 690.494 L1599.39 690.494 L1599.95 690.494 L1600.51 690.494 L1601.07 690.494 L1601.63 690.494 L1602.19 690.494 L1602.74 690.494 L1603.3 690.494 L1603.86 690.494 L1604.42 690.494 L1604.98 690.494 L1605.54 690.494 L1606.1 690.494 L1606.66 690.494 L1607.22 690.494 L1607.78 690.494 L1608.34 690.494 L1608.9 690.494 L1609.46 690.494 L1610.02 690.494 L1610.57 690.494 L1611.13 690.494 L1611.69 690.494 L1612.25 690.494 L1612.81 690.494 L1613.37 690.494 L1613.93 690.494 L1614.49 690.494 L1615.05 690.494 L1615.61 690.494 L1616.17 690.494 L1616.73 690.494 L1617.29 690.494 L1617.84 690.494 L1618.4 690.494 L1618.96 690.494 L1619.52 690.494 L1620.08 690.494 L1620.64 690.494 L1621.2 690.494 L1621.76 690.494 L1622.32 690.494 L1622.88 690.494 L1623.44 690.494 L1624 690.494 L1624.56 690.494 L1625.11 690.494 L1625.67 690.494 L1626.23 690.494 L1626.79 690.494 L1627.35 690.494 L1627.91 690.494 L1628.47 690.494 L1629.03 690.494 L1629.59 690.494 L1630.15 690.494 L1630.71 690.494 L1631.27 690.494 L1631.83 690.494 L1632.39 690.494 L1632.94 690.494 L1633.5 690.494 L1634.06 690.494 L1634.62 690.494 L1635.18 690.494 L1635.74 690.494 L1636.3 690.494 L1636.86 690.494 L1637.42 690.494 L1637.98 690.494 L1638.54 690.494 L1639.1 690.494 L1639.66 690.494 L1640.21 690.494 L1640.77 690.494 L1641.33 690.494 L1641.89 690.494 L1642.45 690.494 L1643.01 690.494 L1643.57 690.494 L1644.13 690.494 L1644.69 690.494 L1645.25 690.494 L1645.81 690.494 L1646.37 690.494 L1646.93 690.494 L1647.48 690.494 L1648.04 690.494 L1648.6 690.494 L1649.16 690.494 L1649.72 690.494 L1650.28 690.494 L1650.84 690.494 L1651.4 690.494 L1651.96 690.494 L1652.52 690.494 L1653.08 690.494 L1653.64 690.494 L1654.2 690.494 L1654.76 690.494 L1655.31 690.494 L1655.87 690.494 L1656.43 690.494 L1656.99 690.494 L1657.55 690.494 L1658.11 690.494 L1658.67 690.494 L1659.23 690.494 L1659.79 690.494 L1660.35 690.494 L1660.91 690.494 L1661.47 690.494 L1662.03 690.494 L1662.58 690.494 L1663.14 690.494 L1663.7 690.494 L1664.26 690.494 L1664.82 690.494 L1665.38 690.494 L1665.94 690.494 L1666.5 690.494 L1667.06 690.494 L1667.62 690.494 L1668.18 690.494 L1668.74 690.494 L1669.3 690.494 L1669.85 690.494 L1670.41 690.494 L1670.97 690.494 L1671.53 690.494 L1672.09 690.494 L1672.65 690.494 L1673.21 690.494 L1673.77 690.494 L1674.33 690.494 L1674.89 690.494 L1675.45 690.494 L1676.01 690.494 L1676.57 690.494 L1677.13 690.494 L1677.68 690.494 L1678.24 690.494 L1678.8 690.494 L1679.36 690.494 L1679.92 690.494 L1680.48 690.494 L1681.04 690.494 L1681.6 690.494 L1682.16 690.494 L1682.72 690.494 L1683.28 690.494 L1683.84 690.494 L1684.4 690.494 L1684.95 690.494 L1685.51 690.494 L1686.07 690.494 L1686.63 690.494 L1687.19 690.494 L1687.75 690.494 L1688.31 690.494 L1688.87 690.494 L1689.43 690.494 L1689.99 690.494 L1690.55 690.494 L1691.11 690.494 L1691.67 690.494 L1692.23 690.494 L1692.78 690.494 L1693.34 690.494 L1693.9 690.494 L1694.46 690.494 L1695.02 690.494 L1695.58 690.494 L1696.14 690.494 L1696.7 690.494 L1697.26 690.494 L1697.82 690.494 L1698.38 690.494 L1698.94 690.494 L1699.5 690.494 L1700.05 690.494 L1700.61 690.494 L1701.17 690.494 L1701.73 690.494 L1702.29 690.494 L1702.85 690.494 L1703.41 690.494 L1703.97 690.494 L1704.53 690.494 L1705.09 690.494 L1705.65 690.494 L1706.21 690.494 L1706.77 690.494 L1707.32 690.494 L1707.88 690.494 L1708.44 690.494 L1709 690.494 L1709.56 690.494 L1710.12 690.494 L1710.68 690.494 L1711.24 690.494 L1711.8 690.494 L1712.36 690.494 L1712.92 690.494 L1713.48 690.494 L1714.04 690.494 L1714.6 690.494 L1715.15 690.494 L1715.71 690.494 L1716.27 690.494 L1716.83 690.494 L1717.39 690.494 L1717.95 690.494 L1718.51 690.494 L1719.07 690.494 L1719.63 690.494 L1720.19 690.494 L1720.75 690.494 L1721.31 690.494 L1721.87 690.494 L1722.42 690.494 L1722.98 690.494 L1723.54 690.494 L1724.1 690.494 L1724.66 690.494 L1725.22 690.494 L1725.78 690.494 L1726.34 690.494 L1726.9 690.494 L1727.46 690.494 L1728.02 690.494 L1728.58 690.494 L1729.14 690.494 L1729.69 690.494 L1730.25 690.494 L1730.81 690.494 L1731.37 690.494 L1731.93 690.494 L1732.49 690.494 L1733.05 690.494 L1733.61 690.494 L1734.17 690.494 L1734.73 690.494 L1735.29 690.494 L1735.85 690.494 L1736.41 690.494 L1736.97 690.494 L1737.52 690.494 L1738.08 690.494 L1738.64 690.494 L1739.2 690.494 L1739.76 690.494 L1740.32 690.494 L1740.88 690.494 L1741.44 690.494 L1742 690.494 L1742.56 690.494 L1743.12 690.494 L1743.68 690.494 L1744.24 690.494 L1744.79 690.494 L1745.35 690.494 L1745.91 690.494 L1746.47 690.494 L1747.03 690.494 L1747.59 690.494 L1748.15 690.494 L1748.71 690.494 L1749.27 690.494 L1749.83 690.494 L1750.39 690.494 L1750.95 690.494 L1751.51 690.494 L1752.06 690.494 L1752.62 690.494 L1753.18 690.494 L1753.74 690.494 L1754.3 690.494 L1754.86 690.494 L1755.42 690.494 L1755.98 690.494 L1756.54 690.494 L1757.1 690.494 L1757.66 690.494 L1758.22 690.494 L1758.78 690.494 L1759.34 690.494 L1759.89 690.494 L1760.45 690.494 L1761.01 690.494 L1761.57 690.494 L1762.13 690.494 L1762.69 690.494 L1763.25 690.494 L1763.81 690.494 L1764.37 690.494 L1764.93 690.494 L1765.49 690.494 L1766.05 690.494 L1766.61 690.494 L1767.16 690.494 L1767.72 690.494 L1768.28 690.494 L1768.84 690.494 L1769.4 690.494 L1769.96 690.494 L1770.52 690.494 L1771.08 690.494 L1771.64 690.494 L1772.2 690.494 L1772.76 690.494 L1773.32 690.494 L1773.88 690.494 L1774.43 690.494 L1774.99 690.494 L1775.55 690.494 L1776.11 690.494 L1776.67 690.494 L1777.23 690.494 L1777.79 690.494 L1778.35 690.494 L1778.91 690.494 L1779.47 690.494 L1780.03 690.494 L1780.59 690.494 L1781.15 690.494 L1781.71 690.494 L1782.26 690.494 L1782.82 690.494 L1783.38 690.494 L1783.94 690.494 L1784.5 690.494 L1785.06 690.494 L1785.62 690.494 L1786.18 690.494 L1786.74 690.494 L1787.3 690.494 L1787.86 690.494 L1788.42 690.494 L1788.98 690.494 L1789.53 690.494 L1790.09 690.494 L1790.65 690.494 L1791.21 690.494 L1791.77 690.494 L1792.33 690.494 L1792.89 690.494 L1793.45 690.494 L1794.01 690.494 L1794.57 690.494 L1795.13 690.494 L1795.69 690.494 L1796.25 690.494 L1796.8 690.494 L1797.36 690.494 L1797.92 690.494 L1798.48 690.494 L1799.04 690.494 L1799.6 690.494 L1800.16 690.494 L1800.72 690.494 L1801.28 690.494 L1801.84 690.494 L1802.4 690.494 L1802.96 690.494 L1803.52 690.494 L1804.08 690.494 L1804.63 690.494 L1805.19 690.494 L1805.75 690.494 L1806.31 690.494 L1806.87 690.494 L1807.43 690.494 L1807.99 690.494 L1808.55 690.494 L1809.11 690.494 L1809.67 690.494 L1810.23 690.494 L1810.79 690.494 L1811.35 690.494 L1811.9 690.494 L1812.46 690.494 L1813.02 690.494 L1813.58 690.494 L1814.14 690.494 L1814.7 690.494 L1815.26 690.494 L1815.82 690.494 L1816.38 690.494 L1816.94 690.494 L1817.5 690.494 L1818.06 690.494 L1818.62 690.494 L1819.18 690.494 L1819.73 690.494 L1820.29 690.494 L1820.85 690.494 L1821.41 690.494 L1821.97 690.494 L1822.53 690.494 L1823.09 690.494 L1823.65 690.494 L1824.21 690.494 L1824.77 690.494 L1825.33 690.494 L1825.89 690.494 L1826.45 690.494 L1827 690.494 L1827.56 690.494 L1828.12 690.494 L1828.68 690.494 L1829.24 690.494 L1829.8 690.494 L1830.36 690.494 L1830.92 690.494 L1831.48 690.494 L1832.04 690.494 L1832.6 690.494 L1833.16 690.494 L1833.72 690.494 L1834.27 690.494 L1834.83 690.494 L1835.39 690.494 L1835.95 690.494 L1836.51 690.494 L1837.07 690.494 L1837.63 690.494 L1838.19 690.494 L1838.19 682.072 L1837.63 682.072 L1837.07 682.072 L1836.51 682.072 L1835.95 682.072 L1835.39 682.072 L1834.83 682.072 L1834.27 682.072 L1833.72 682.072 L1833.16 682.072 L1832.6 682.072 L1832.04 682.072 L1831.48 682.072 L1830.92 682.072 L1830.36 682.072 L1829.8 682.072 L1829.24 682.072 L1828.68 682.072 L1828.12 682.072 L1827.56 682.072 L1827 682.072 L1826.45 682.072 L1825.89 682.072 L1825.33 682.072 L1824.77 682.072 L1824.21 682.072 L1823.65 682.072 L1823.09 682.072 L1822.53 682.072 L1821.97 682.072 L1821.41 682.072 L1820.85 682.072 L1820.29 682.072 L1819.73 682.072 L1819.18 682.072 L1818.62 682.072 L1818.06 682.072 L1817.5 682.072 L1816.94 682.072 L1816.38 682.072 L1815.82 682.072 L1815.26 682.072 L1814.7 682.072 L1814.14 682.072 L1813.58 682.072 L1813.02 682.072 L1812.46 682.072 L1811.9 682.072 L1811.35 682.072 L1810.79 682.072 L1810.23 682.072 L1809.67 682.072 L1809.11 682.072 L1808.55 682.072 L1807.99 682.072 L1807.43 682.072 L1806.87 682.072 L1806.31 682.072 L1805.75 682.072 L1805.19 682.072 L1804.63 682.072 L1804.08 682.072 L1803.52 682.072 L1802.96 682.072 L1802.4 682.072 L1801.84 682.072 L1801.28 682.072 L1800.72 682.072 L1800.16 682.072 L1799.6 682.072 L1799.04 682.072 L1798.48 682.072 L1797.92 682.072 L1797.36 682.072 L1796.8 682.072 L1796.25 682.072 L1795.69 682.072 L1795.13 682.072 L1794.57 682.072 L1794.01 682.072 L1793.45 682.072 L1792.89 682.072 L1792.33 682.072 L1791.77 682.072 L1791.21 682.072 L1790.65 682.072 L1790.09 682.072 L1789.53 682.072 L1788.98 682.072 L1788.42 682.072 L1787.86 682.072 L1787.3 682.072 L1786.74 682.072 L1786.18 682.072 L1785.62 682.072 L1785.06 682.072 L1784.5 682.072 L1783.94 682.072 L1783.38 682.072 L1782.82 682.072 L1782.26 682.072 L1781.71 682.072 L1781.15 682.072 L1780.59 682.072 L1780.03 682.072 L1779.47 682.072 L1778.91 682.072 L1778.35 682.072 L1777.79 682.072 L1777.23 682.072 L1776.67 682.072 L1776.11 682.072 L1775.55 682.072 L1774.99 682.072 L1774.43 682.072 L1773.88 682.072 L1773.32 682.072 L1772.76 682.072 L1772.2 682.072 L1771.64 682.072 L1771.08 682.072 L1770.52 682.072 L1769.96 682.072 L1769.4 682.072 L1768.84 682.072 L1768.28 682.072 L1767.72 682.072 L1767.16 682.072 L1766.61 682.072 L1766.05 682.072 L1765.49 682.072 L1764.93 682.072 L1764.37 682.072 L1763.81 682.072 L1763.25 682.072 L1762.69 682.072 L1762.13 682.072 L1761.57 682.072 L1761.01 682.072 L1760.45 682.072 L1759.89 682.072 L1759.34 682.072 L1758.78 682.072 L1758.22 682.072 L1757.66 682.072 L1757.1 682.072 L1756.54 682.072 L1755.98 682.072 L1755.42 682.072 L1754.86 682.072 L1754.3 682.072 L1753.74 682.072 L1753.18 682.072 L1752.62 682.072 L1752.06 682.072 L1751.51 682.072 L1750.95 682.072 L1750.39 682.072 L1749.83 682.072 L1749.27 682.072 L1748.71 682.072 L1748.15 682.072 L1747.59 682.072 L1747.03 682.072 L1746.47 682.072 L1745.91 682.072 L1745.35 682.072 L1744.79 682.072 L1744.24 682.072 L1743.68 682.072 L1743.12 682.072 L1742.56 682.072 L1742 682.072 L1741.44 682.072 L1740.88 682.072 L1740.32 682.072 L1739.76 682.072 L1739.2 682.072 L1738.64 682.072 L1738.08 682.072 L1737.52 682.072 L1736.97 682.072 L1736.41 682.072 L1735.85 682.072 L1735.29 682.072 L1734.73 682.072 L1734.17 682.072 L1733.61 682.072 L1733.05 682.072 L1732.49 682.072 L1731.93 682.072 L1731.37 682.072 L1730.81 682.072 L1730.25 682.072 L1729.69 682.072 L1729.14 682.072 L1728.58 682.072 L1728.02 682.072 L1727.46 682.072 L1726.9 682.072 L1726.34 682.072 L1725.78 682.072 L1725.22 682.072 L1724.66 682.072 L1724.1 682.072 L1723.54 682.072 L1722.98 682.072 L1722.42 682.072 L1721.87 682.072 L1721.31 682.072 L1720.75 682.072 L1720.19 682.072 L1719.63 682.072 L1719.07 682.072 L1718.51 682.072 L1717.95 682.072 L1717.39 682.072 L1716.83 682.072 L1716.27 682.072 L1715.71 682.072 L1715.15 682.072 L1714.6 682.072 L1714.04 682.072 L1713.48 682.072 L1712.92 682.072 L1712.36 682.072 L1711.8 682.072 L1711.24 682.072 L1710.68 682.072 L1710.12 682.072 L1709.56 682.072 L1709 682.072 L1708.44 682.072 L1707.88 682.072 L1707.32 682.072 L1706.77 682.072 L1706.21 682.072 L1705.65 682.072 L1705.09 682.072 L1704.53 682.072 L1703.97 682.072 L1703.41 682.072 L1702.85 682.072 L1702.29 682.072 L1701.73 682.072 L1701.17 682.072 L1700.61 682.072 L1700.05 682.072 L1699.5 682.072 L1698.94 682.072 L1698.38 682.072 L1697.82 682.072 L1697.26 682.072 L1696.7 682.072 L1696.14 682.072 L1695.58 682.072 L1695.02 682.072 L1694.46 682.072 L1693.9 682.072 L1693.34 682.072 L1692.78 682.072 L1692.23 682.072 L1691.67 682.072 L1691.11 682.072 L1690.55 682.072 L1689.99 682.072 L1689.43 682.072 L1688.87 682.072 L1688.31 682.072 L1687.75 682.072 L1687.19 682.072 L1686.63 682.072 L1686.07 682.072 L1685.51 682.072 L1684.95 682.072 L1684.4 682.072 L1683.84 682.072 L1683.28 682.072 L1682.72 682.072 L1682.16 682.072 L1681.6 682.072 L1681.04 682.072 L1680.48 682.072 L1679.92 682.072 L1679.36 682.072 L1678.8 682.072 L1678.24 682.072 L1677.68 682.072 L1677.13 682.072 L1676.57 682.072 L1676.01 682.072 L1675.45 682.072 L1674.89 682.072 L1674.33 682.072 L1673.77 682.072 L1673.21 682.072 L1672.65 682.072 L1672.09 682.072 L1671.53 682.072 L1670.97 682.072 L1670.41 682.072 L1669.85 682.072 L1669.3 682.072 L1668.74 682.072 L1668.18 682.072 L1667.62 682.072 L1667.06 682.072 L1666.5 682.072 L1665.94 682.072 L1665.38 682.072 L1664.82 682.072 L1664.26 682.072 L1663.7 682.072 L1663.14 682.072 L1662.58 682.072 L1662.03 682.072 L1661.47 682.072 L1660.91 682.072 L1660.35 682.072 L1659.79 682.072 L1659.23 682.072 L1658.67 682.072 L1658.11 682.072 L1657.55 682.072 L1656.99 682.072 L1656.43 682.072 L1655.87 682.072 L1655.31 682.072 L1654.76 682.072 L1654.2 682.072 L1653.64 682.072 L1653.08 682.072 L1652.52 682.072 L1651.96 682.072 L1651.4 682.072 L1650.84 682.072 L1650.28 682.072 L1649.72 682.072 L1649.16 682.072 L1648.6 682.072 L1648.04 682.072 L1647.48 682.072 L1646.93 682.072 L1646.37 682.072 L1645.81 682.072 L1645.25 682.072 L1644.69 682.072 L1644.13 682.072 L1643.57 682.072 L1643.01 682.072 L1642.45 682.072 L1641.89 682.072 L1641.33 682.072 L1640.77 682.072 L1640.21 682.072 L1639.66 682.072 L1639.1 682.072 L1638.54 682.072 L1637.98 682.072 L1637.42 682.072 L1636.86 682.072 L1636.3 682.072 L1635.74 682.072 L1635.18 682.072 L1634.62 682.072 L1634.06 682.072 L1633.5 682.072 L1632.94 682.072 L1632.39 682.072 L1631.83 682.072 L1631.27 682.072 L1630.71 682.072 L1630.15 682.072 L1629.59 682.072 L1629.03 682.072 L1628.47 682.072 L1627.91 682.072 L1627.35 682.072 L1626.79 682.072 L1626.23 682.072 L1625.67 682.072 L1625.11 682.072 L1624.56 682.072 L1624 682.072 L1623.44 682.072 L1622.88 682.072 L1622.32 682.072 L1621.76 682.072 L1621.2 682.072 L1620.64 682.072 L1620.08 682.072 L1619.52 682.072 L1618.96 682.072 L1618.4 682.072 L1617.84 682.072 L1617.29 682.072 L1616.73 682.072 L1616.17 682.072 L1615.61 682.072 L1615.05 682.072 L1614.49 682.072 L1613.93 682.072 L1613.37 682.072 L1612.81 682.072 L1612.25 682.072 L1611.69 682.072 L1611.13 682.072 L1610.57 682.072 L1610.02 682.072 L1609.46 682.072 L1608.9 682.072 L1608.34 682.072 L1607.78 682.072 L1607.22 682.072 L1606.66 682.072 L1606.1 682.072 L1605.54 682.072 L1604.98 682.072 L1604.42 682.072 L1603.86 682.072 L1603.3 682.072 L1602.74 682.072 L1602.19 682.072 L1601.63 682.072 L1601.07 682.072 L1600.51 682.072 L1599.95 682.072 L1599.39 682.072 L1598.83 682.072 L1598.27 682.072 L1597.71 682.072 L1597.15 682.072 L1596.59 682.072 L1596.03 682.072 L1595.47 682.072 L1594.92 682.072 L1594.36 682.072 L1593.8 682.072 L1593.24 682.072 L1592.68 682.072 L1592.12 682.072 L1591.56 682.072 L1591 682.072 L1590.44 682.072 L1589.88 682.072 L1589.32 682.072 L1588.76 682.072 L1588.2 682.072 L1587.65 682.072 L1587.09 682.072 L1586.53 682.072 L1585.97 682.072 L1585.41 682.072 L1584.85 682.072 L1584.29 682.072 L1583.73 682.072 L1583.17 682.072 L1582.61 682.072 L1582.05 682.072 L1581.49 682.072 L1580.93 682.072 L1580.37 682.072 L1579.82 682.072 L1579.26 682.072 L1578.7 682.072 L1578.14 682.072 L1577.58 682.072 L1577.02 682.072 L1576.46 682.072 L1575.9 682.072 L1575.34 682.072 L1574.78 682.072 L1574.22 682.072 L1573.66 682.072 L1573.1 682.072 L1572.55 682.072 L1571.99 682.072 L1571.43 682.072 L1570.87 682.072 L1570.31 682.072 L1569.75 682.072 L1569.19 682.072 L1568.63 682.072 L1568.07 682.072 L1567.51 682.072 L1566.95 682.072 L1566.39 682.072 L1565.83 682.072 L1565.28 682.072 L1564.72 682.072 L1564.16 682.072 L1563.6 682.072 L1563.04 682.072 L1562.48 682.072 L1561.92 682.072 L1561.36 682.072 L1560.8 682.072 L1560.24 682.072 L1559.68 682.072 L1559.12 682.072 L1558.56 682.072 L1558 682.072 L1557.45 682.072 L1556.89 682.072 L1556.33 682.072 L1555.77 682.072 L1555.21 682.072 L1554.65 682.072 L1554.09 682.072 L1553.53 682.072 L1552.97 682.072 L1552.41 682.072 L1551.85 682.072 L1551.29 682.072 L1550.73 682.072 L1550.18 682.072 L1549.62 682.072 L1549.06 682.072 L1548.5 682.072 L1547.94 682.072 L1547.38 682.072 L1546.82 682.072 L1546.26 682.072 L1545.7 682.072 L1545.14 682.072 L1544.58 682.072 L1544.02 682.072 L1543.46 682.072 L1542.9 682.072 L1542.35 682.072 L1541.79 682.072 L1541.23 682.072 L1540.67 682.072 L1540.11 682.072 L1539.55 682.072 L1538.99 682.072 L1538.43 682.072 L1537.87 682.072 L1537.31 682.072 L1536.75 682.072 L1536.19 682.072 L1535.63 682.072 L1535.08 682.072 L1534.52 682.072 L1533.96 682.072 L1533.4 682.072 L1532.84 682.072 L1532.28 682.072 L1531.72 682.072 L1531.16 682.072 L1530.6 682.072 L1530.04 682.072 L1529.48 682.072 L1528.92 682.072 L1528.36 682.072 L1527.81 682.072 L1527.25 682.072 L1526.69 682.072 L1526.13 682.072 L1525.57 682.072 L1525.01 682.072 L1524.45 682.072 L1523.89 682.072 L1523.33 682.072 L1522.77 682.072 L1522.21 682.072 L1521.65 682.072 L1521.09 682.072 L1520.53 682.072 L1519.98 682.072 L1519.42 682.072 L1518.86 682.072 L1518.3 682.072 L1517.74 682.072 L1517.18 682.072 L1516.62 682.072 L1516.06 682.072 L1515.5 682.072 L1514.94 682.072 L1514.38 682.072 L1513.82 682.072 L1513.26 682.072 L1512.71 682.072 L1512.15 682.072 L1511.59 682.072 L1511.03 682.072 L1510.47 682.072 L1509.91 682.072 L1509.35 682.072 L1508.79 682.072 L1508.23 682.072 L1507.67 682.072 L1507.11 682.072 L1506.55 682.072 L1505.99 682.072 L1505.44 682.072 L1504.88 682.072 L1504.32 682.072 L1503.76 682.072 L1503.2 682.072 L1502.64 682.072 L1502.08 682.072 L1501.52 682.072 L1500.96 682.072 L1500.4 682.072 L1499.84 682.072 L1499.28 682.072 L1498.72 682.072 L1498.16 682.072 L1497.61 682.072 L1497.05 682.072 L1496.49 682.072 L1495.93 682.072 L1495.37 682.072 L1494.81 682.072 L1494.25 682.072 L1493.69 682.072 L1493.13 682.072 L1492.57 682.072 L1492.01 682.072 L1491.45 682.072 L1490.89 682.072 L1490.34 682.072 L1489.78 682.072 L1489.22 682.072 L1488.66 682.072 L1488.1 682.072 L1487.54 682.072 L1486.98 682.072 L1486.42 682.072 L1485.86 682.072 L1485.3 682.072 L1484.74 682.072 L1484.18 682.072 L1483.62 682.072 L1483.07 682.072 L1482.51 682.072 L1481.95 682.072 L1481.39 682.072 L1480.83 682.072 L1480.27 682.072 L1479.71 682.072 L1479.15 682.072 L1478.59 682.072 L1478.03 682.072 L1477.47 682.072 L1476.91 682.072 L1476.35 682.072 L1475.79 682.072 L1475.24 682.072 L1474.68 682.072 L1474.12 682.072 L1473.56 682.072 L1473 682.072 L1472.44 682.072 L1471.88 682.072 L1471.32 682.072 L1470.76 682.072 L1470.2 682.072 L1469.64 682.072 L1469.08 682.072 L1468.52 682.072 L1467.97 682.072 L1467.41 682.072 L1466.85 682.072 L1466.29 682.072 L1465.73 682.072 L1465.17 682.072 L1464.61 682.072 L1464.05 682.072 L1463.49 682.072 L1462.93 682.072 L1462.37 682.072 L1461.81 682.072 L1461.25 682.072 L1460.7 682.072 L1460.14 682.072 L1459.58 682.072 L1459.02 682.072 L1458.46 682.072 L1457.9 682.072 L1457.34 682.072 L1456.78 682.072 L1456.22 682.072 L1455.66 682.072 L1455.1 682.072 L1454.54 682.072 L1453.98 682.072 L1453.42 682.072 L1452.87 682.072 L1452.31 682.072 L1451.75 682.072 L1451.19 682.072 L1450.63 682.072 L1450.07 682.072 L1449.51 682.072 L1448.95 682.072 L1448.39 682.072 L1447.83 682.072 L1447.27 682.072 L1446.71 682.072 L1446.15 682.072 L1445.6 682.072 L1445.04 682.072 L1444.48 682.072 L1443.92 682.072 L1443.36 682.072 L1442.8 682.072 L1442.24 682.072 L1441.68 682.072 L1441.12 682.072 L1440.56 682.072 L1440 682.072 L1439.44 682.072 L1438.88 682.072 L1438.33 682.072 L1437.77 682.072 L1437.21 682.072 L1436.65 682.072 L1436.09 682.072 L1435.53 682.072 L1434.97 682.072 L1434.41 682.072 L1433.85 682.072 L1433.29 682.072 L1432.73 682.072 L1432.17 682.072 L1431.61 682.072 L1431.05 682.072 L1430.5 682.072 L1429.94 682.072 L1429.38 682.072 L1428.82 682.072 L1428.26 682.072 L1427.7 682.072 L1427.14 682.072 L1426.58 682.072 L1426.02 682.072 L1425.46 682.072 L1424.9 682.072 L1424.34 682.072 L1423.78 682.072 L1423.23 682.072 L1422.67 682.072 L1422.11 682.072 L1421.55 682.072 L1420.99 682.072 L1420.43 682.072 L1419.87 682.072 L1419.31 682.072 L1418.75 682.072 L1418.19 682.072 L1417.63 682.072 L1417.07 682.072 L1416.51 682.072 L1415.95 682.072 L1415.4 682.072 L1414.84 682.072 L1414.28 682.072 L1413.72 682.072 L1413.16 682.072 L1412.6 682.072 L1412.04 682.072 L1411.48 682.072 L1410.92 682.072 L1410.36 682.072 L1409.8 682.072 L1409.24 682.072 L1408.68 682.072 L1408.13 682.072 L1407.57 682.072 L1407.01 682.072 L1406.45 682.072 L1405.89 682.072 L1405.33 682.072 L1404.77 682.072 L1404.21 682.072 L1403.65 682.072 L1403.09 682.072 L1402.53 682.072 L1401.97 682.072 L1401.41 682.072 L1400.86 682.072 L1400.3 682.072 L1399.74 682.072 L1399.18 682.072 L1398.62 682.072 L1398.06 682.072 L1397.5 682.072 L1396.94 682.072 L1396.38 682.072 L1395.82 682.072 L1395.26 682.072 L1394.7 682.072 L1394.14 682.072 L1393.58 682.072 L1393.03 682.072 L1392.47 682.072 L1391.91 682.072 L1391.35 682.072 L1390.79 682.072 L1390.23 682.072 L1389.67 682.072 L1389.11 682.072 L1388.55 682.072 L1387.99 682.072 L1387.43 682.072 L1386.87 682.072 L1386.31 682.072 L1385.76 682.072 L1385.2 682.072 L1384.64 682.072 L1384.08 682.072 L1383.52 682.072 L1382.96 682.072 L1382.4 682.072 L1381.84 682.072 L1381.28 682.072 L1380.72 682.072 L1380.16 682.072 L1379.6 682.072 L1379.04 682.072 L1378.49 682.072 L1377.93 682.072 L1377.37 682.072 L1376.81 682.072 L1376.25 682.072 L1375.69 682.072 L1375.13 682.072 L1374.57 682.072 L1374.01 682.072 L1373.45 682.072 L1372.89 682.072 L1372.33 682.072 L1371.77 682.072 L1371.21 682.072 L1370.66 682.072 L1370.1 682.072 L1369.54 682.072 L1368.98 682.072 L1368.42 682.072 L1367.86 682.072 L1367.3 682.072 L1366.74 682.072 L1366.18 682.072 L1365.62 682.072 L1365.06 682.072 L1364.5 682.072 L1363.94 682.072 L1363.39 682.072 L1362.83 682.072 L1362.27 682.072 L1361.71 682.072 L1361.15 682.072 L1360.59 682.072 L1360.03 682.072 L1359.47 682.072 L1358.91 682.072 L1358.35 682.072 L1357.79 682.072 L1357.23 682.072 L1356.67 682.072 L1356.12 682.072 L1355.56 682.072 L1355 682.072 L1354.44 682.072 L1353.88 682.072 L1353.32 682.072 L1352.76 682.072 L1352.2 682.072 L1351.64 682.072 L1351.08 682.072 L1350.52 682.072 L1349.96 682.072 L1349.4 682.072 L1348.84 682.072 L1348.29 682.072 L1347.73 682.072 L1347.17 682.072 L1346.61 682.072 L1346.05 682.072 L1345.49 682.072 L1344.93 682.072 L1344.37 682.072 L1343.81 682.072 L1343.25 682.072 L1342.69 682.072 L1342.13 682.072 L1341.57 682.072 L1341.02 682.072 L1340.46 682.072 L1339.9 682.072 L1339.34 682.072 L1338.78 682.072 L1338.22 682.072 L1337.66 682.072 L1337.1 682.072 L1336.54 682.072 L1335.98 682.072 L1335.42 682.072 L1334.86 682.072 L1334.3 682.072 L1333.75 682.072 L1333.19 682.072 L1332.63 682.072 L1332.07 682.072 L1331.51 682.072 L1330.95 682.072 L1330.39 682.072 L1329.83 682.072 L1329.27 682.072 L1328.71 682.072 L1328.15 682.072 L1327.59 682.072 L1327.03 682.072 L1326.47 682.072 L1325.92 682.072 L1325.36 682.072 L1324.8 682.072 L1324.24 682.072 L1323.68 682.072 L1323.12 682.072 L1322.56 682.072 L1322 682.072 L1321.44 682.072 L1320.88 682.072 L1320.32 682.072 L1319.76 682.072 L1319.2 682.072 L1318.65 682.072 L1318.09 682.072 L1317.53 682.072 L1316.97 682.072 L1316.41 682.072 L1315.85 682.072 L1315.29 682.072 L1314.73 682.072 L1314.17 682.072 L1313.61 682.072 L1313.05 682.072 L1312.49 682.072 L1311.93 682.072 L1311.38 682.072 L1310.82 682.072 L1310.26 682.072 L1309.7 682.072 L1309.14 682.072 L1308.58 682.072 L1308.02 682.072 L1307.46 682.072 L1306.9 682.072 L1306.34 682.072 L1305.78 682.072 L1305.22 682.072 L1304.66 682.072 L1304.1 682.072 L1303.55 682.072 L1302.99 682.072 L1302.43 682.072 L1301.87 682.072 L1301.31 682.072 L1300.75 682.072 L1300.19 682.072 L1299.63 682.072 L1299.07 682.072 L1298.51 682.072 L1297.95 682.072 L1297.39 682.072 L1296.83 682.072 L1296.28 682.072 L1295.72 682.072 L1295.16 682.072 L1294.6 682.072 L1294.04 682.072 L1293.48 682.072 L1292.92 682.072 L1292.36 682.072 L1291.8 682.072 L1291.24 682.072 L1290.68 682.072 L1290.12 682.072 L1289.56 682.072 L1289 682.072 L1288.45 682.072 L1287.89 682.072 L1287.33 682.072 L1286.77 682.072 L1286.21 682.072 L1285.65 682.072 L1285.09 682.072 L1284.53 682.072 L1283.97 682.072 L1283.41 682.072 L1282.85 682.072 L1282.29 682.072 L1281.73 682.072 L1281.18 682.072 L1280.62 682.072 L1280.06 682.072 L1279.5 682.072 L1278.94 682.072 L1278.38 682.072 L1277.82 682.072 L1277.26 682.072 L1276.7 682.072 L1276.14 682.072 L1275.58 682.072 L1275.02 682.072 L1274.46 682.072 L1273.91 682.072 L1273.35 682.072 L1272.79 682.072 L1272.23 682.072 L1271.67 682.072 L1271.11 682.072 L1270.55 682.072 L1269.99 682.072 L1269.43 682.072 L1268.87 682.072 L1268.31 682.072 L1267.75 682.072 L1267.19 682.072 L1266.63 682.072 L1266.08 682.072 L1265.52 682.072 L1264.96 682.072 L1264.4 682.072 L1263.84 682.072 L1263.28 682.072 L1262.72 682.072 L1262.16 682.072 L1261.6 682.072 L1261.04 682.072 L1260.48 682.072 L1259.92 682.072 L1259.36 682.072 L1258.81 682.072 L1258.25 682.072 L1257.69 682.072 L1257.13 682.072 L1256.57 682.072 L1256.01 682.072 L1255.45 682.072 L1254.89 682.072 L1254.33 682.072 L1253.77 682.072 L1253.21 682.072 L1252.65 682.072 L1252.09 682.072 L1251.54 682.072 L1250.98 682.072 L1250.42 682.072 L1249.86 682.072 L1249.3 682.072 L1248.74 682.072 L1248.18 682.072 L1247.62 682.072 L1247.06 682.072 L1246.5 682.072 L1245.94 682.072 L1245.38 682.072 L1244.82 682.072 L1244.26 682.072 L1243.71 682.072 L1243.15 682.072 L1242.59 682.072 L1242.03 682.072 L1241.47 682.072 L1240.91 682.072 L1240.35 682.072 L1239.79 682.072 L1239.23 682.072 L1238.67 682.072 L1238.11 682.072 L1237.55 682.072 L1236.99 682.072 L1236.44 682.072 L1235.88 682.072 L1235.32 682.072 L1234.76 682.072 L1234.2 682.072 L1233.64 682.072 L1233.08 682.072 L1232.52 682.072 L1231.96 682.072 L1231.4 682.072 L1230.84 682.072 L1230.28 682.072 L1229.72 682.072 L1229.17 682.072 L1228.61 682.072 L1228.05 682.072 L1227.49 682.072 L1226.93 682.072 L1226.37 682.072 L1225.81 682.072 L1225.25 682.072 L1224.69 682.072 L1224.13 682.072 L1223.57 682.072 L1223.01 682.072 L1222.45 682.072 L1221.89 682.072 L1221.34 682.072 L1220.78 682.072 L1220.22 682.072 L1219.66 682.072 L1219.1 682.072 L1218.54 682.072 L1217.98 682.072 L1217.42 682.072 L1216.86 682.072 L1216.3 682.072 L1215.74 682.072 L1215.18 682.072 L1214.62 682.072 L1214.07 682.072 L1213.51 682.072 L1212.95 682.072 L1212.39 682.072 L1211.83 682.072 L1211.27 682.072 L1210.71 682.072 L1210.15 682.072 L1209.59 682.072 L1209.03 682.072 L1208.47 682.072 L1207.91 682.072 L1207.35 682.072 L1206.8 682.072 L1206.24 682.072 L1205.68 682.072 L1205.12 682.072 L1204.56 682.072 L1204 682.072 L1203.44 682.072 L1202.88 682.072 L1202.32 682.072 L1201.76 682.072 L1201.2 682.072 L1200.64 682.072 L1200.08 682.072 L1199.52 682.072 L1198.97 682.072 L1198.41 682.072 L1197.85 682.072 L1197.29 682.072 L1196.73 682.072 L1196.17 682.072 L1195.61 682.072 L1195.05 682.072 L1194.49 682.072 L1193.93 682.072 L1193.37 682.072 L1192.81 682.072 L1192.25 682.072 L1191.7 682.072 L1191.14 682.072 L1190.58 682.072 L1190.02 682.072 L1189.46 682.072 L1188.9 682.072 L1188.34 682.072 L1187.78 682.072 L1187.22 682.072 L1186.66 682.072 L1186.1 682.072 L1185.54 682.072 L1184.98 682.072 L1184.43 682.072 L1183.87 682.072 L1183.31 682.072 L1182.75 682.072 L1182.19 682.072 L1181.63 682.072 L1181.07 682.072 L1180.51 682.072 L1179.95 682.072 L1179.39 682.072 L1178.83 682.072 L1178.27 682.072 L1177.71 682.072 L1177.15 682.072 L1176.6 682.072 L1176.04 682.072 L1175.48 682.072 L1174.92 682.072 L1174.36 682.072 L1173.8 682.072 L1173.24 682.072 L1172.68 682.072 L1172.12 682.072 L1171.56 682.072 L1171 682.072 L1170.44 682.072 L1169.88 682.072 L1169.33 682.072 L1168.77 682.072 L1168.21 682.072 L1167.65 682.072 L1167.09 682.072 L1166.53 682.072 L1165.97 682.072 L1165.41 682.072 L1164.85 682.072 L1164.29 682.072 L1163.73 682.072 L1163.17 682.072 L1162.61 682.072 L1162.05 682.072 L1161.5 682.072 L1160.94 682.072 L1160.38 682.072 L1159.82 682.072 L1159.26 682.072 L1158.7 682.072 L1158.14 682.072 L1157.58 682.072 L1157.02 682.072 L1156.46 682.072 L1155.9 682.072 L1155.34 682.072 L1154.78 682.072 L1154.23 682.072 L1153.67 682.072 L1153.11 682.072 L1152.55 682.072 L1151.99 682.072 L1151.43 682.072 L1150.87 682.072 L1150.31 682.072 L1149.75 682.072 L1149.19 682.072 L1148.63 682.072 L1148.07 682.072 L1147.51 682.072 L1146.96 682.072 L1146.4 682.072 L1145.84 682.072 L1145.28 682.072 L1144.72 682.072 L1144.16 682.072 L1143.6 682.072 L1143.04 682.072 L1142.48 682.072 L1141.92 682.072 L1141.36 682.072 L1140.8 682.072 L1140.24 682.072 L1139.68 682.072 L1139.13 682.072 L1138.57 682.072 L1138.01 682.072 L1137.45 682.072 L1136.89 682.072 L1136.33 682.072 L1135.77 682.072 L1135.21 682.072 L1134.65 682.072 L1134.09 682.072 L1133.53 682.072 L1132.97 682.072 L1132.41 682.072 L1131.86 682.072 L1131.3 682.072 L1130.74 682.072 L1130.18 682.072 L1129.62 682.072 L1129.06 682.072 L1128.5 682.072 L1127.94 682.072 L1127.38 682.072 L1126.82 682.072 L1126.26 682.072 L1125.7 682.072 L1125.14 682.072 L1124.59 682.072 L1124.03 682.072 L1123.47 682.072 L1122.91 682.072 L1122.35 682.072 L1121.79 682.072 L1121.23 682.072 L1120.67 682.072 L1120.11 682.072 L1119.55 682.072 L1118.99 682.072 L1118.43 682.072 L1117.87 682.072 L1117.31 682.072 L1116.76 682.072 L1116.2 682.072 L1115.64 682.072 L1115.08 682.072 L1114.52 682.072 L1113.96 682.072 L1113.4 682.072 L1112.84 682.072 L1112.28 682.072 L1111.72 682.072 L1111.16 682.072 L1110.6 682.072 L1110.04 682.072 L1109.49 682.072 L1108.93 682.072 L1108.37 682.072 L1107.81 682.072 L1107.25 682.072 L1106.69 682.072 L1106.13 682.072 L1105.57 682.072 L1105.01 682.072 L1104.45 682.072 L1103.89 682.072 L1103.33 682.072 L1102.77 682.072 L1102.22 682.072 L1101.66 682.072 L1101.1 682.072 L1100.54 682.072 L1099.98 682.072 L1099.42 682.072 L1098.86 682.072 L1098.3 682.072 L1097.74 682.072 L1097.18 682.072 L1096.62 682.072 L1096.06 682.072 L1095.5 682.072 L1094.94 682.072 L1094.39 682.072 L1093.83 682.072 L1093.27 682.072 L1092.71 682.072 L1092.15 682.072 L1091.59 682.072 L1091.03 682.072 L1090.47 682.072 L1089.91 682.072 L1089.35 682.072 L1088.79 682.072 L1088.23 682.072 L1087.67 682.072 L1087.12 682.072 L1086.56 682.072 L1086 682.072 L1085.44 682.072 L1084.88 682.072 L1084.32 682.072 L1083.76 682.072 L1083.2 682.072 L1082.64 682.072 L1082.08 682.072 L1081.52 682.072 L1080.96 682.072 L1080.4 682.072 L1079.85 682.072 L1079.29 682.072 L1078.73 682.072 L1078.17 682.072 L1077.61 682.072 L1077.05 682.072 L1076.49 682.072 L1075.93 682.072 L1075.37 682.072 L1074.81 682.072 L1074.25 682.072 L1073.69 682.072 L1073.13 682.072 L1072.57 682.072 L1072.02 682.072 L1071.46 682.072 L1070.9 682.072 L1070.34 682.072 L1069.78 682.072 L1069.22 682.072 L1068.66 682.072 L1068.1 682.072 L1067.54 682.072 L1066.98 682.072 L1066.42 682.072 L1065.86 682.072 L1065.3 682.072 L1064.75 682.072 L1064.19 682.072 L1063.63 682.072 L1063.07 682.072 L1062.51 682.072 L1061.95 682.072 L1061.39 682.072 L1060.83 682.072 L1060.27 682.072 L1059.71 682.072 L1059.15 682.072 L1058.59 682.072 L1058.03 682.072 L1057.48 682.072 L1056.92 682.072 L1056.36 682.072 L1055.8 682.072 L1055.24 682.072 L1054.68 682.072 L1054.12 682.072 L1053.56 682.072 L1053 682.072 L1052.44 682.072 L1051.88 682.072 L1051.32 682.072 L1050.76 682.072 L1050.2 682.072 L1049.65 682.072 L1049.09 682.072 L1048.53 682.072 L1047.97 682.072 L1047.41 682.072 L1046.85 682.072 L1046.29 682.072 L1045.73 682.072 L1045.17 682.072 L1044.61 682.072 L1044.05 682.072 L1043.49 682.072 L1042.93 682.072 L1042.38 682.072 L1041.82 682.072 L1041.26 682.072 L1040.7 682.072 L1040.14 682.072 L1039.58 682.072 L1039.02 682.072 L1038.46 682.072 L1037.9 682.072 L1037.34 682.072 L1036.78 682.072 L1036.22 682.072 L1035.66 682.072 L1035.1 682.072 L1034.55 682.072 L1033.99 682.072 L1033.43 682.072 L1032.87 682.072 L1032.31 682.072 L1031.75 682.072 L1031.19 682.072 L1030.63 682.072 L1030.07 682.072 L1029.51 682.072 L1028.95 682.072 L1028.39 682.072 L1027.83 682.072 L1027.28 682.072 L1026.72 682.072 L1026.16 682.072 L1025.6 682.072 L1025.04 682.072 L1024.48 682.072 L1023.92 682.072 L1023.36 682.072 L1022.8 682.072 L1022.24 682.072 L1021.68 682.072 L1021.12 682.072 L1020.56 682.072 L1020.01 682.072 L1019.45 682.072 L1018.89 682.072 L1018.33 682.072 L1017.77 682.072 L1017.21 682.072 L1016.65 682.072 L1016.09 682.072 L1015.53 682.072 L1014.97 682.072 L1014.41 682.072 L1013.85 682.072 L1013.29 682.072 L1012.73 682.072 L1012.18 682.072 L1011.62 682.072 L1011.06 682.072 L1010.5 682.072 L1009.94 682.072 L1009.38 682.072 L1008.82 682.072 L1008.26 682.072 L1007.7 682.072 L1007.14 682.072 L1006.58 682.072 L1006.02 682.072 L1005.46 682.072 L1004.91 682.072 L1004.35 682.072 L1003.79 682.072 L1003.23 682.072 L1002.67 682.072 L1002.11 682.072 L1001.55 682.072 L1000.99 682.072 L1000.43 682.072 L999.872 682.072 L999.313 682.072 L998.754 682.072 L998.194 682.072 L997.635 682.072 L997.076 682.072 L996.517 682.072 L995.957 682.072 L995.398 682.072 L994.839 682.072 L994.28 682.072 L993.72 682.072 L993.161 682.072 L992.602 682.072 L992.043 682.072 L991.483 682.072 L990.924 682.072 L990.365 682.072 L989.806 682.072 L989.246 682.072 L988.687 682.072 L988.128 682.072 L987.569 682.072 L987.009 682.072 L986.45 682.072 L985.891 682.072 L985.332 682.072 L984.772 682.072 L984.213 682.072 L983.654 682.072 L983.095 682.072 L982.535 682.072 L981.976 682.072 L981.417 682.072 L980.858 682.072 L980.298 682.072 L979.739 682.072 L979.18 682.072 L978.621 682.072 L978.061 682.072 L977.502 682.072 L976.943 682.072 L976.384 682.072 L975.824 682.072 L975.265 682.072 L974.706 682.072 L974.147 682.072 L973.587 682.072 L973.028 682.072 L972.469 682.072 L971.91 682.072 L971.35 682.072 L970.791 682.072 L970.232 682.072 L969.673 682.072 L969.113 682.072 L968.554 682.072 L967.995 682.072 L967.436 682.072 L966.876 682.072 L966.317 682.072 L965.758 682.072 L965.199 682.072 L964.639 682.072 L964.08 682.072 L963.521 682.072 L962.962 682.072 L962.402 682.072 L961.843 682.072 L961.284 682.072 L960.725 682.072 L960.165 682.072 L959.606 682.072 L959.047 682.072 L958.488 682.072 L957.928 682.072 L957.369 682.072 L956.81 682.072 L956.251 682.072 L955.691 682.072 L955.132 682.072 L954.573 682.072 L954.014 682.072 L953.454 682.072 L952.895 682.072 L952.336 682.072 L951.777 682.072 L951.217 682.072 L950.658 682.072 L950.099 682.072 L949.54 682.072 L948.98 682.072 L948.421 682.072 L947.862 682.072 L947.303 682.072 L946.743 682.072 L946.184 682.072 L945.625 682.072 L945.066 682.072 L944.506 682.072 L943.947 682.072 L943.388 682.072 L942.829 682.072 L942.269 682.072 L941.71 682.072 L941.151 682.072 L940.592 682.072 L940.032 682.072 L939.473 682.072 L938.914 682.072 L938.355 682.072 L937.795 682.072 L937.236 682.072 L936.677 682.072 L936.118 682.072 L935.558 682.072 L934.999 682.072 L934.44 682.072 L933.881 682.072 L933.321 682.072 L932.762 682.072 L932.203 682.072 L931.644 682.072 L931.084 682.072 L930.525 682.072 L929.966 682.072 L929.406 682.072 L928.847 682.072 L928.288 682.072 L927.729 682.072 L927.169 682.072 L926.61 682.072 L926.051 682.072 L925.492 682.072 L924.932 682.072 L924.373 682.072 L923.814 682.072 L923.255 682.072 L922.695 682.072 L922.136 682.072 L921.577 682.072 L921.018 682.072 L920.458 682.072 L919.899 682.072 L919.34 682.072 L918.781 682.072 L918.221 682.072 L917.662 682.072 L917.103 682.072 L916.544 682.072 L915.984 682.072 L915.425 682.072 L914.866 682.072 L914.307 682.072 L913.747 682.072 L913.188 682.072 L912.629 682.072 L912.07 682.072 L911.51 682.072 L910.951 682.072 L910.392 682.072 L909.833 682.072 L909.273 682.072 L908.714 682.072 L908.155 682.072 L907.596 682.072 L907.036 682.072 L906.477 682.072 L905.918 682.072 L905.359 682.072 L904.799 682.072 L904.24 682.072 L903.681 682.072 L903.122 682.072 L902.562 682.072 L902.003 682.072 L901.444 682.072 L900.885 682.072 L900.325 682.072 L899.766 682.072 L899.207 682.072 L898.648 682.072 L898.088 682.072 L897.529 682.072 L896.97 682.072 L896.411 682.072 L895.851 682.072 L895.292 682.072 L894.733 682.072 L894.174 682.072 L893.614 682.072 L893.055 682.072 L892.496 682.072 L891.937 682.072 L891.377 682.072 L890.818 682.072 L890.259 682.072 L889.7 682.072 L889.14 682.072 L888.581 682.072 L888.022 682.072 L887.463 682.072 L886.903 682.072 L886.344 682.072 L885.785 682.072 L885.226 682.072 L884.666 682.072 L884.107 682.072 L883.548 682.072 L882.989 682.072 L882.429 682.072 L881.87 682.072 L881.311 682.072 L880.752 682.072 L880.192 682.072 L879.633 682.072 L879.074 682.072 L878.515 682.072 L877.955 682.072 L877.396 682.072 L876.837 682.072 L876.278 682.072 L875.718 682.072 L875.159 682.072 L874.6 682.072 L874.041 682.072 L873.481 682.072 L872.922 682.072 L872.363 682.072 L871.804 682.072 L871.244 682.072 L870.685 682.072 L870.126 682.072 L869.567 682.072 L869.007 682.072 L868.448 682.072 L867.889 682.072 L867.33 682.072 L866.77 682.072 L866.211 682.072 L865.652 682.072 L865.093 682.072 L864.533 682.072 L863.974 682.072 L863.415 682.072 L862.856 682.072 L862.296 682.072 L861.737 682.072 L861.178 682.072 L860.619 682.072 L860.059 682.072 L859.5 682.072 L858.941 682.072 L858.382 682.072 L857.822 682.072 L857.263 682.072 L856.704 682.072 L856.145 682.072 L855.585 682.072 L855.026 682.072 L854.467 682.072 L853.908 682.072 L853.348 682.072 L852.789 682.072 L852.23 682.072 L851.671 682.072 L851.111 682.072 L850.552 682.072 L849.993 682.072 L849.434 682.072 L848.874 682.072 L848.315 682.072 L847.756 682.072 L847.197 682.072 L846.637 682.072 L846.078 682.072 L845.519 682.072 L844.96 682.072 L844.4 682.072 L843.841 682.072 L843.282 682.072 L842.723 682.072 L842.163 682.072 L841.604 682.072 L841.045 682.072 L840.486 682.072 L839.926 682.072 L839.367 682.072 L838.808 682.072 L838.249 682.072 L837.689 682.072 L837.13 682.072 L836.571 682.072 L836.012 682.072 L835.452 682.072 L834.893 682.072 L834.334 682.072 L833.775 682.072 L833.215 682.072 L832.656 682.072 L832.097 682.072 L831.538 682.072 L830.978 682.072 L830.419 682.072 L829.86 682.072 L829.301 682.072 L828.741 682.072 L828.182 682.072 L827.623 682.072 L827.064 682.072 L826.504 682.072 L825.945 682.072 L825.386 682.072 L824.827 682.072 L824.267 682.072 L823.708 682.072 L823.149 682.072 L822.59 682.072 L822.03 682.072 L821.471 682.072 L820.912 682.072 L820.353 682.072 L819.793 682.072 L819.234 682.072 L818.675 682.072 L818.116 682.072 L817.556 682.072 L816.997 682.072 L816.438 682.072 L815.879 682.072 L815.319 682.072 L814.76 682.072 L814.201 682.072 L813.642 682.072 L813.082 682.072 L812.523 682.072 L811.964 682.072 L811.405 682.072 L810.845 682.072 L810.286 682.072 L809.727 682.072 L809.168 682.072 L808.608 682.072 L808.049 682.072 L807.49 682.072 L806.931 682.072 L806.371 682.072 L805.812 682.072 L805.253 682.072 L804.693 682.072 L804.134 682.072 L803.575 682.072 L803.016 682.072 L802.456 682.072 L801.897 682.072 L801.338 682.072 L800.779 682.072 L800.219 682.072 L799.66 682.072 L799.101 682.072 L798.542 682.072 L797.982 682.072 L797.423 682.072 L796.864 682.072 L796.305 682.072 L795.745 682.072 L795.186 682.072 L794.627 682.072 L794.068 682.072 L793.508 682.072 L792.949 682.072 L792.39 682.072 L791.831 682.072 L791.271 682.072 L790.712 682.072 L790.153 682.072 L789.594 682.072 L789.034 682.072 L788.475 682.072 L787.916 682.072 L787.357 682.072 L786.797 682.072 L786.238 682.072 L785.679 682.072 L785.12 682.072 L784.56 682.072 L784.001 682.072 L783.442 682.072 L782.883 682.072 L782.323 682.072 L781.764 682.072 L781.205 682.072 L780.646 682.072 L780.086 682.072 L779.527 682.072 L778.968 682.072 L778.409 682.072 L777.849 682.072 L777.29 682.072 L776.731 682.072 L776.172 682.072 L775.612 682.072 L775.053 682.072 L774.494 682.072 L773.935 682.072 L773.375 682.072 L772.816 682.072 L772.257 682.072 L771.698 682.072 L771.138 682.072 L770.579 682.072 L770.02 682.072 L769.461 682.072 L768.901 682.072 L768.342 682.072 L767.783 682.072 L767.224 682.072 L766.664 682.072 L766.105 682.072 L765.546 682.072 L764.987 682.072 L764.427 682.072 L763.868 682.072 L763.309 682.072 L762.75 682.072 L762.19 682.072 L761.631 682.072 L761.072 682.072 L760.513 682.072 L759.953 682.072 L759.394 682.072 L758.835 682.072 L758.276 682.072 L757.716 682.072 L757.157 682.072 L756.598 682.072 L756.039 682.072 L755.479 682.072 L754.92 682.072 L754.361 682.072 L753.802 682.072 L753.242 682.072 L752.683 682.072 L752.124 682.072 L751.565 682.072 L751.005 682.072 L750.446 682.072 L749.887 682.072 L749.328 682.072 L748.768 682.072 L748.209 682.072 L747.65 682.072 L747.091 682.072 L746.531 682.072 L745.972 682.072 L745.413 682.072 L744.854 682.072 L744.294 682.072 L743.735 682.072 L743.176 682.072 L742.617 682.072 L742.057 682.072 L741.498 682.072 L740.939 682.072 L740.38 682.072 L739.82 682.072 L739.261 682.072 L738.702 682.072 L738.143 682.072 L737.583 682.072 L737.024 682.072 L736.465 682.072 L735.906 682.072 L735.346 682.072 L734.787 682.072 L734.228 682.072 L733.669 682.072 L733.109 682.072 L732.55 682.072 L731.991 682.072 L731.432 682.072 L730.872 682.072 L730.313 682.072 L729.754 682.072 L729.195 682.072 L728.635 682.072 L728.076 682.072 L727.517 682.072 L726.958 682.072 L726.398 682.072 L725.839 682.072 L725.28 682.072 L724.721 682.072 L724.161 682.072 L723.602 682.072 L723.043 682.072 L722.484 682.072 L721.924 682.072 L721.365 682.072 L720.806 682.072 L720.247 682.072  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.283 720.806,686.283 721.365,686.283 721.924,686.283 722.484,686.283 723.043,686.283 723.602,686.283 724.161,686.283 724.721,686.283 725.28,686.283 725.839,686.283 726.398,686.283 726.958,686.283 727.517,686.283 728.076,686.283 728.635,686.283 729.195,686.283 729.754,686.283 730.313,686.283 730.872,686.283 731.432,686.283 731.991,686.283 732.55,686.283 733.109,686.283 733.669,686.283 734.228,686.283 734.787,686.283 735.346,686.283 735.906,686.283 736.465,686.283 737.024,686.283 737.583,686.283 738.143,686.283 738.702,686.283 739.261,686.283 739.82,686.283 740.38,686.283 740.939,686.283 741.498,686.283 742.057,686.283 742.617,686.283 743.176,686.283 743.735,686.283 744.294,686.283 744.854,686.283 745.413,686.283 745.972,686.283 746.531,686.283 747.091,686.283 747.65,686.283 748.209,686.283 748.768,686.283 749.328,686.283 749.887,686.283 750.446,686.283 751.005,686.283 751.565,686.283 752.124,686.283 752.683,686.283 753.242,686.283 753.802,686.283 754.361,686.283 754.92,686.283 755.479,686.283 756.039,686.283 756.598,686.283 757.157,686.283 757.716,686.283 758.276,686.283 758.835,686.283 759.394,686.283 759.953,686.283 760.513,686.283 761.072,686.283 761.631,686.283 762.19,686.283 762.75,686.283 763.309,686.283 763.868,686.283 764.427,686.283 764.987,686.283 765.546,686.283 766.105,686.283 766.664,686.283 767.224,686.283 767.783,686.283 768.342,686.283 768.901,686.283 769.461,686.283 770.02,686.283 770.579,686.283 771.138,686.283 771.698,686.283 772.257,686.283 772.816,686.283 773.375,686.283 773.935,686.283 774.494,686.283 775.053,686.283 775.612,686.283 776.172,686.283 776.731,686.283 777.29,686.283 777.849,686.283 778.409,686.283 778.968,686.283 779.527,686.283 780.086,686.283 780.646,686.283 781.205,686.283 781.764,686.283 782.323,686.283 782.883,686.283 783.442,686.283 784.001,686.283 784.56,686.283 785.12,686.283 785.679,686.283 786.238,686.283 786.797,686.283 787.357,686.283 787.916,686.283 788.475,686.283 789.034,686.283 789.594,686.283 790.153,686.283 790.712,686.283 791.271,686.283 791.831,686.283 792.39,686.283 792.949,686.283 793.508,686.283 794.068,686.283 794.627,686.283 795.186,686.283 795.745,686.283 796.305,686.283 796.864,686.283 797.423,686.283 797.982,686.283 798.542,686.283 799.101,686.283 799.66,686.283 800.219,686.283 800.779,686.283 801.338,686.283 801.897,686.283 802.456,686.283 803.016,686.283 803.575,686.283 804.134,686.283 804.693,686.283 805.253,686.283 805.812,686.283 806.371,686.283 806.931,686.283 807.49,686.283 808.049,686.283 808.608,686.283 809.168,686.283 809.727,686.283 810.286,686.283 810.845,686.283 811.405,686.283 811.964,686.283 812.523,686.283 813.082,686.283 813.642,686.283 814.201,686.283 814.76,686.283 815.319,686.283 815.879,686.283 816.438,686.283 816.997,686.283 817.556,686.283 818.116,686.283 818.675,686.283 819.234,686.283 819.793,686.283 820.353,686.283 820.912,686.283 821.471,686.283 822.03,686.283 822.59,686.283 823.149,686.283 823.708,686.283 824.267,686.283 824.827,686.283 825.386,686.283 825.945,686.283 826.504,686.283 827.064,686.283 827.623,686.283 828.182,686.283 828.741,686.283 829.301,686.283 829.86,686.283 830.419,686.283 830.978,686.283 831.538,686.283 832.097,686.283 832.656,686.283 833.215,686.283 833.775,686.283 834.334,686.283 834.893,686.283 835.452,686.283 836.012,686.283 836.571,686.283 837.13,686.283 837.689,686.283 838.249,686.283 838.808,686.283 839.367,686.283 839.926,686.283 840.486,686.283 841.045,686.283 841.604,686.283 842.163,686.283 842.723,686.283 843.282,686.283 843.841,686.283 844.4,686.283 844.96,686.283 845.519,686.283 846.078,686.283 846.637,686.283 847.197,686.283 847.756,686.283 848.315,686.283 848.874,686.283 849.434,686.283 849.993,686.283 850.552,686.283 851.111,686.283 851.671,686.283 852.23,686.283 852.789,686.283 853.348,686.283 853.908,686.283 854.467,686.283 855.026,686.283 855.585,686.283 856.145,686.283 856.704,686.283 857.263,686.283 857.822,686.283 858.382,686.283 858.941,686.283 859.5,686.283 860.059,686.283 860.619,686.283 861.178,686.283 861.737,686.283 862.296,686.283 862.856,686.283 863.415,686.283 863.974,686.283 864.533,686.283 865.093,686.283 865.652,686.283 866.211,686.283 866.77,686.283 867.33,686.283 867.889,686.283 868.448,686.283 869.007,686.283 869.567,686.283 870.126,686.283 870.685,686.283 871.244,686.283 871.804,686.283 872.363,686.283 872.922,686.283 873.481,686.283 874.041,686.283 874.6,686.283 875.159,686.283 875.718,686.283 876.278,686.283 876.837,686.283 877.396,686.283 877.955,686.283 878.515,686.283 879.074,686.283 879.633,686.283 880.192,686.283 880.752,686.283 881.311,686.283 881.87,686.283 882.429,686.283 882.989,686.283 883.548,686.283 884.107,686.283 884.666,686.283 885.226,686.283 885.785,686.283 886.344,686.283 886.903,686.283 887.463,686.283 888.022,686.283 888.581,686.283 889.14,686.283 889.7,686.283 890.259,686.283 890.818,686.283 891.377,686.283 891.937,686.283 892.496,686.283 893.055,686.283 893.614,686.283 894.174,686.283 894.733,686.283 895.292,686.283 895.851,686.283 896.411,686.283 896.97,686.283 897.529,686.283 898.088,686.283 898.648,686.283 899.207,686.283 899.766,686.283 900.325,686.283 900.885,686.283 901.444,686.283 902.003,686.283 902.562,686.283 903.122,686.283 903.681,686.283 904.24,686.283 904.799,686.283 905.359,686.283 905.918,686.283 906.477,686.283 907.036,686.283 907.596,686.283 908.155,686.283 908.714,686.283 909.273,686.283 909.833,686.283 910.392,686.283 910.951,686.283 911.51,686.283 912.07,686.283 912.629,686.283 913.188,686.283 913.747,686.283 914.307,686.283 914.866,686.283 915.425,686.283 915.984,686.283 916.544,686.283 917.103,686.283 917.662,686.283 918.221,686.283 918.781,686.283 919.34,686.283 919.899,686.283 920.458,686.283 921.018,686.283 921.577,686.283 922.136,686.283 922.695,686.283 923.255,686.283 923.814,686.283 924.373,686.283 924.932,686.283 925.492,686.283 926.051,686.283 926.61,686.283 927.169,686.283 927.729,686.283 928.288,686.283 928.847,686.283 929.406,686.283 929.966,686.283 930.525,686.283 931.084,686.283 931.644,686.283 932.203,686.283 932.762,686.283 933.321,686.283 933.881,686.283 934.44,686.283 934.999,686.283 935.558,686.283 936.118,686.283 936.677,686.283 937.236,686.283 937.795,686.283 938.355,686.283 938.914,686.283 939.473,686.283 940.032,686.283 940.592,686.283 941.151,686.283 941.71,686.283 942.269,686.283 942.829,686.283 943.388,686.283 943.947,686.283 944.506,686.283 945.066,686.283 945.625,686.283 946.184,686.283 946.743,686.283 947.303,686.283 947.862,686.283 948.421,686.283 948.98,686.283 949.54,686.283 950.099,686.283 950.658,686.283 951.217,686.283 951.777,686.283 952.336,686.283 952.895,686.283 953.454,686.283 954.014,686.283 954.573,686.283 955.132,686.283 955.691,686.283 956.251,686.283 956.81,686.283 957.369,686.283 957.928,686.283 958.488,686.283 959.047,686.283 959.606,686.283 960.165,686.283 960.725,686.283 961.284,686.283 961.843,686.283 962.402,686.283 962.962,686.283 963.521,686.283 964.08,686.283 964.639,686.283 965.199,686.283 965.758,686.283 966.317,686.283 966.876,686.283 967.436,686.283 967.995,686.283 968.554,686.283 969.113,686.283 969.673,686.283 970.232,686.283 970.791,686.283 971.35,686.283 971.91,686.283 972.469,686.283 973.028,686.283 973.587,686.283 974.147,686.283 974.706,686.283 975.265,686.283 975.824,686.283 976.384,686.283 976.943,686.283 977.502,686.283 978.061,686.283 978.621,686.283 979.18,686.283 979.739,686.283 980.298,686.283 980.858,686.283 981.417,686.283 981.976,686.283 982.535,686.283 983.095,686.283 983.654,686.283 984.213,686.283 984.772,686.283 985.332,686.283 985.891,686.283 986.45,686.283 987.009,686.283 987.569,686.283 988.128,686.283 988.687,686.283 989.246,686.283 989.806,686.283 990.365,686.283 990.924,686.283 991.483,686.283 992.043,686.283 992.602,686.283 993.161,686.283 993.72,686.283 994.28,686.283 994.839,686.283 995.398,686.283 995.957,686.283 996.517,686.283 997.076,686.283 997.635,686.283 998.194,686.283 998.754,686.283 999.313,686.283 999.872,686.283 1000.43,686.283 1000.99,686.283 1001.55,686.283 1002.11,686.283 1002.67,686.283 1003.23,686.283 1003.79,686.283 1004.35,686.283 1004.91,686.283 1005.46,686.283 1006.02,686.283 1006.58,686.283 1007.14,686.283 1007.7,686.283 1008.26,686.283 1008.82,686.283 1009.38,686.283 1009.94,686.283 1010.5,686.283 1011.06,686.283 1011.62,686.283 1012.18,686.283 1012.73,686.283 1013.29,686.283 1013.85,686.283 1014.41,686.283 1014.97,686.283 1015.53,686.283 1016.09,686.283 1016.65,686.283 1017.21,686.283 1017.77,686.283 1018.33,686.283 1018.89,686.283 1019.45,686.283 1020.01,686.283 1020.56,686.283 1021.12,686.283 1021.68,686.283 1022.24,686.283 1022.8,686.283 1023.36,686.283 1023.92,686.283 1024.48,686.283 1025.04,686.283 1025.6,686.283 1026.16,686.283 1026.72,686.283 1027.28,686.283 1027.83,686.283 1028.39,686.283 1028.95,686.283 1029.51,686.283 1030.07,686.283 1030.63,686.283 1031.19,686.283 1031.75,686.283 1032.31,686.283 1032.87,686.283 1033.43,686.283 1033.99,686.283 1034.55,686.283 1035.1,686.283 1035.66,686.283 1036.22,686.283 1036.78,686.283 1037.34,686.283 1037.9,686.283 1038.46,686.283 1039.02,686.283 1039.58,686.283 1040.14,686.283 1040.7,686.283 1041.26,686.283 1041.82,686.283 1042.38,686.283 1042.93,686.283 1043.49,686.283 1044.05,686.283 1044.61,686.283 1045.17,686.283 1045.73,686.283 1046.29,686.283 1046.85,686.283 1047.41,686.283 1047.97,686.283 1048.53,686.283 1049.09,686.283 1049.65,686.283 1050.2,686.283 1050.76,686.283 1051.32,686.283 1051.88,686.283 1052.44,686.283 1053,686.283 1053.56,686.283 1054.12,686.283 1054.68,686.283 1055.24,686.283 1055.8,686.283 1056.36,686.283 1056.92,686.283 1057.48,686.283 1058.03,686.283 1058.59,686.283 1059.15,686.283 1059.71,686.283 1060.27,686.283 1060.83,686.283 1061.39,686.283 1061.95,686.283 1062.51,686.283 1063.07,686.283 1063.63,686.283 1064.19,686.283 1064.75,686.283 1065.3,686.283 1065.86,686.283 1066.42,686.283 1066.98,686.283 1067.54,686.283 1068.1,686.283 1068.66,686.283 1069.22,686.283 1069.78,686.283 1070.34,686.283 1070.9,686.283 1071.46,686.283 1072.02,686.283 1072.57,686.283 1073.13,686.283 1073.69,686.283 1074.25,686.283 1074.81,686.283 1075.37,686.283 1075.93,686.283 1076.49,686.283 1077.05,686.283 1077.61,686.283 1078.17,686.283 1078.73,686.283 1079.29,686.283 1079.85,686.283 1080.4,686.283 1080.96,686.283 1081.52,686.283 1082.08,686.283 1082.64,686.283 1083.2,686.283 1083.76,686.283 1084.32,686.283 1084.88,686.283 1085.44,686.283 1086,686.283 1086.56,686.283 1087.12,686.283 1087.67,686.283 1088.23,686.283 1088.79,686.283 1089.35,686.283 1089.91,686.283 1090.47,686.283 1091.03,686.283 1091.59,686.283 1092.15,686.283 1092.71,686.283 1093.27,686.283 1093.83,686.283 1094.39,686.283 1094.94,686.283 1095.5,686.283 1096.06,686.283 1096.62,686.283 1097.18,686.283 1097.74,686.283 1098.3,686.283 1098.86,686.283 1099.42,686.283 1099.98,686.283 1100.54,686.283 1101.1,686.283 1101.66,686.283 1102.22,686.283 1102.77,686.283 1103.33,686.283 1103.89,686.283 1104.45,686.283 1105.01,686.283 1105.57,686.283 1106.13,686.283 1106.69,686.283 1107.25,686.283 1107.81,686.283 1108.37,686.283 1108.93,686.283 1109.49,686.283 1110.04,686.283 1110.6,686.283 1111.16,686.283 1111.72,686.283 1112.28,686.283 1112.84,686.283 1113.4,686.283 1113.96,686.283 1114.52,686.283 1115.08,686.283 1115.64,686.283 1116.2,686.283 1116.76,686.283 1117.31,686.283 1117.87,686.283 1118.43,686.283 1118.99,686.283 1119.55,686.283 1120.11,686.283 1120.67,686.283 1121.23,686.283 1121.79,686.283 1122.35,686.283 1122.91,686.283 1123.47,686.283 1124.03,686.283 1124.59,686.283 1125.14,686.283 1125.7,686.283 1126.26,686.283 1126.82,686.283 1127.38,686.283 1127.94,686.283 1128.5,686.283 1129.06,686.283 1129.62,686.283 1130.18,686.283 1130.74,686.283 1131.3,686.283 1131.86,686.283 1132.41,686.283 1132.97,686.283 1133.53,686.283 1134.09,686.283 1134.65,686.283 1135.21,686.283 1135.77,686.283 1136.33,686.283 1136.89,686.283 1137.45,686.283 1138.01,686.283 1138.57,686.283 1139.13,686.283 1139.68,686.283 1140.24,686.283 1140.8,686.283 1141.36,686.283 1141.92,686.283 1142.48,686.283 1143.04,686.283 1143.6,686.283 1144.16,686.283 1144.72,686.283 1145.28,686.283 1145.84,686.283 1146.4,686.283 1146.96,686.283 1147.51,686.283 1148.07,686.283 1148.63,686.283 1149.19,686.283 1149.75,686.283 1150.31,686.283 1150.87,686.283 1151.43,686.283 1151.99,686.283 1152.55,686.283 1153.11,686.283 1153.67,686.283 1154.23,686.283 1154.78,686.283 1155.34,686.283 1155.9,686.283 1156.46,686.283 1157.02,686.283 1157.58,686.283 1158.14,686.283 1158.7,686.283 1159.26,686.283 1159.82,686.283 1160.38,686.283 1160.94,686.283 1161.5,686.283 1162.05,686.283 1162.61,686.283 1163.17,686.283 1163.73,686.283 1164.29,686.283 1164.85,686.283 1165.41,686.283 1165.97,686.283 1166.53,686.283 1167.09,686.283 1167.65,686.283 1168.21,686.283 1168.77,686.283 1169.33,686.283 1169.88,686.283 1170.44,686.283 1171,686.283 1171.56,686.283 1172.12,686.283 1172.68,686.283 1173.24,686.283 1173.8,686.283 1174.36,686.283 1174.92,686.283 1175.48,686.283 1176.04,686.283 1176.6,686.283 1177.15,686.283 1177.71,686.283 1178.27,686.283 1178.83,686.283 1179.39,686.283 1179.95,686.283 1180.51,686.283 1181.07,686.283 1181.63,686.283 1182.19,686.283 1182.75,686.283 1183.31,686.283 1183.87,686.283 1184.43,686.283 1184.98,686.283 1185.54,686.283 1186.1,686.283 1186.66,686.283 1187.22,686.283 1187.78,686.283 1188.34,686.283 1188.9,686.283 1189.46,686.283 1190.02,686.283 1190.58,686.283 1191.14,686.283 1191.7,686.283 1192.25,686.283 1192.81,686.283 1193.37,686.283 1193.93,686.283 1194.49,686.283 1195.05,686.283 1195.61,686.283 1196.17,686.283 1196.73,686.283 1197.29,686.283 1197.85,686.283 1198.41,686.283 1198.97,686.283 1199.52,686.283 1200.08,686.283 1200.64,686.283 1201.2,686.283 1201.76,686.283 1202.32,686.283 1202.88,686.283 1203.44,686.283 1204,686.283 1204.56,686.283 1205.12,686.283 1205.68,686.283 1206.24,686.283 1206.8,686.283 1207.35,686.283 1207.91,686.283 1208.47,686.283 1209.03,686.283 1209.59,686.283 1210.15,686.283 1210.71,686.283 1211.27,686.283 1211.83,686.283 1212.39,686.283 1212.95,686.283 1213.51,686.283 1214.07,686.283 1214.62,686.283 1215.18,686.283 1215.74,686.283 1216.3,686.283 1216.86,686.283 1217.42,686.283 1217.98,686.283 1218.54,686.283 1219.1,686.283 1219.66,686.283 1220.22,686.283 1220.78,686.283 1221.34,686.283 1221.89,686.283 1222.45,686.283 1223.01,686.283 1223.57,686.283 1224.13,686.283 1224.69,686.283 1225.25,686.283 1225.81,686.283 1226.37,686.283 1226.93,686.283 1227.49,686.283 1228.05,686.283 1228.61,686.283 1229.17,686.283 1229.72,686.283 1230.28,686.283 1230.84,686.283 1231.4,686.283 1231.96,686.283 1232.52,686.283 1233.08,686.283 1233.64,686.283 1234.2,686.283 1234.76,686.283 1235.32,686.283 1235.88,686.283 1236.44,686.283 1236.99,686.283 1237.55,686.283 1238.11,686.283 1238.67,686.283 1239.23,686.283 1239.79,686.283 1240.35,686.283 1240.91,686.283 1241.47,686.283 1242.03,686.283 1242.59,686.283 1243.15,686.283 1243.71,686.283 1244.26,686.283 1244.82,686.283 1245.38,686.283 1245.94,686.283 1246.5,686.283 1247.06,686.283 1247.62,686.283 1248.18,686.283 1248.74,686.283 1249.3,686.283 1249.86,686.283 1250.42,686.283 1250.98,686.283 1251.54,686.283 1252.09,686.283 1252.65,686.283 1253.21,686.283 1253.77,686.283 1254.33,686.283 1254.89,686.283 1255.45,686.283 1256.01,686.283 1256.57,686.283 1257.13,686.283 1257.69,686.283 1258.25,686.283 1258.81,686.283 1259.36,686.283 1259.92,686.283 1260.48,686.283 1261.04,686.283 1261.6,686.283 1262.16,686.283 1262.72,686.283 1263.28,686.283 1263.84,686.283 1264.4,686.283 1264.96,686.283 1265.52,686.283 1266.08,686.283 1266.63,686.283 1267.19,686.283 1267.75,686.283 1268.31,686.283 1268.87,686.283 1269.43,686.283 1269.99,686.283 1270.55,686.283 1271.11,686.283 1271.67,686.283 1272.23,686.283 1272.79,686.283 1273.35,686.283 1273.91,686.283 1274.46,686.283 1275.02,686.283 1275.58,686.283 1276.14,686.283 1276.7,686.283 1277.26,686.283 1277.82,686.283 1278.38,686.283 1278.94,686.283 1279.5,686.283 1280.06,686.283 1280.62,686.283 1281.18,686.283 1281.73,686.283 1282.29,686.283 1282.85,686.283 1283.41,686.283 1283.97,686.283 1284.53,686.283 1285.09,686.283 1285.65,686.283 1286.21,686.283 1286.77,686.283 1287.33,686.283 1287.89,686.283 1288.45,686.283 1289,686.283 1289.56,686.283 1290.12,686.283 1290.68,686.283 1291.24,686.283 1291.8,686.283 1292.36,686.283 1292.92,686.283 1293.48,686.283 1294.04,686.283 1294.6,686.283 1295.16,686.283 1295.72,686.283 1296.28,686.283 1296.83,686.283 1297.39,686.283 1297.95,686.283 1298.51,686.283 1299.07,686.283 1299.63,686.283 1300.19,686.283 1300.75,686.283 1301.31,686.283 1301.87,686.283 1302.43,686.283 1302.99,686.283 1303.55,686.283 1304.1,686.283 1304.66,686.283 1305.22,686.283 1305.78,686.283 1306.34,686.283 1306.9,686.283 1307.46,686.283 1308.02,686.283 1308.58,686.283 1309.14,686.283 1309.7,686.283 1310.26,686.283 1310.82,686.283 1311.38,686.283 1311.93,686.283 1312.49,686.283 1313.05,686.283 1313.61,686.283 1314.17,686.283 1314.73,686.283 1315.29,686.283 1315.85,686.283 1316.41,686.283 1316.97,686.283 1317.53,686.283 1318.09,686.283 1318.65,686.283 1319.2,686.283 1319.76,686.283 1320.32,686.283 1320.88,686.283 1321.44,686.283 1322,686.283 1322.56,686.283 1323.12,686.283 1323.68,686.283 1324.24,686.283 1324.8,686.283 1325.36,686.283 1325.92,686.283 1326.47,686.283 1327.03,686.283 1327.59,686.283 1328.15,686.283 1328.71,686.283 1329.27,686.283 1329.83,686.283 1330.39,686.283 1330.95,686.283 1331.51,686.283 1332.07,686.283 1332.63,686.283 1333.19,686.283 1333.75,686.283 1334.3,686.283 1334.86,686.283 1335.42,686.283 1335.98,686.283 1336.54,686.283 1337.1,686.283 1337.66,686.283 1338.22,686.283 1338.78,686.283 1339.34,686.283 1339.9,686.283 1340.46,686.283 1341.02,686.283 1341.57,686.283 1342.13,686.283 1342.69,686.283 1343.25,686.283 1343.81,686.283 1344.37,686.283 1344.93,686.283 1345.49,686.283 1346.05,686.283 1346.61,686.283 1347.17,686.283 1347.73,686.283 1348.29,686.283 1348.84,686.283 1349.4,686.283 1349.96,686.283 1350.52,686.283 1351.08,686.283 1351.64,686.283 1352.2,686.283 1352.76,686.283 1353.32,686.283 1353.88,686.283 1354.44,686.283 1355,686.283 1355.56,686.283 1356.12,686.283 1356.67,686.283 1357.23,686.283 1357.79,686.283 1358.35,686.283 1358.91,686.283 1359.47,686.283 1360.03,686.283 1360.59,686.283 1361.15,686.283 1361.71,686.283 1362.27,686.283 1362.83,686.283 1363.39,686.283 1363.94,686.283 1364.5,686.283 1365.06,686.283 1365.62,686.283 1366.18,686.283 1366.74,686.283 1367.3,686.283 1367.86,686.283 1368.42,686.283 1368.98,686.283 1369.54,686.283 1370.1,686.283 1370.66,686.283 1371.21,686.283 1371.77,686.283 1372.33,686.283 1372.89,686.283 1373.45,686.283 1374.01,686.283 1374.57,686.283 1375.13,686.283 1375.69,686.283 1376.25,686.283 1376.81,686.283 1377.37,686.283 1377.93,686.283 1378.49,686.283 1379.04,686.283 1379.6,686.283 1380.16,686.283 1380.72,686.283 1381.28,686.283 1381.84,686.283 1382.4,686.283 1382.96,686.283 1383.52,686.283 1384.08,686.283 1384.64,686.283 1385.2,686.283 1385.76,686.283 1386.31,686.283 1386.87,686.283 1387.43,686.283 1387.99,686.283 1388.55,686.283 1389.11,686.283 1389.67,686.283 1390.23,686.283 1390.79,686.283 1391.35,686.283 1391.91,686.283 1392.47,686.283 1393.03,686.283 1393.58,686.283 1394.14,686.283 1394.7,686.283 1395.26,686.283 1395.82,686.283 1396.38,686.283 1396.94,686.283 1397.5,686.283 1398.06,686.283 1398.62,686.283 1399.18,686.283 1399.74,686.283 1400.3,686.283 1400.86,686.283 1401.41,686.283 1401.97,686.283 1402.53,686.283 1403.09,686.283 1403.65,686.283 1404.21,686.283 1404.77,686.283 1405.33,686.283 1405.89,686.283 1406.45,686.283 1407.01,686.283 1407.57,686.283 1408.13,686.283 1408.68,686.283 1409.24,686.283 1409.8,686.283 1410.36,686.283 1410.92,686.283 1411.48,686.283 1412.04,686.283 1412.6,686.283 1413.16,686.283 1413.72,686.283 1414.28,686.283 1414.84,686.283 1415.4,686.283 1415.95,686.283 1416.51,686.283 1417.07,686.283 1417.63,686.283 1418.19,686.283 1418.75,686.283 1419.31,686.283 1419.87,686.283 1420.43,686.283 1420.99,686.283 1421.55,686.283 1422.11,686.283 1422.67,686.283 1423.23,686.283 1423.78,686.283 1424.34,686.283 1424.9,686.283 1425.46,686.283 1426.02,686.283 1426.58,686.283 1427.14,686.283 1427.7,686.283 1428.26,686.283 1428.82,686.283 1429.38,686.283 1429.94,686.283 1430.5,686.283 1431.05,686.283 1431.61,686.283 1432.17,686.283 1432.73,686.283 1433.29,686.283 1433.85,686.283 1434.41,686.283 1434.97,686.283 1435.53,686.283 1436.09,686.283 1436.65,686.283 1437.21,686.283 1437.77,686.283 1438.33,686.283 1438.88,686.283 1439.44,686.283 1440,686.283 1440.56,686.283 1441.12,686.283 1441.68,686.283 1442.24,686.283 1442.8,686.283 1443.36,686.283 1443.92,686.283 1444.48,686.283 1445.04,686.283 1445.6,686.283 1446.15,686.283 1446.71,686.283 1447.27,686.283 1447.83,686.283 1448.39,686.283 1448.95,686.283 1449.51,686.283 1450.07,686.283 1450.63,686.283 1451.19,686.283 1451.75,686.283 1452.31,686.283 1452.87,686.283 1453.42,686.283 1453.98,686.283 1454.54,686.283 1455.1,686.283 1455.66,686.283 1456.22,686.283 1456.78,686.283 1457.34,686.283 1457.9,686.283 1458.46,686.283 1459.02,686.283 1459.58,686.283 1460.14,686.283 1460.7,686.283 1461.25,686.283 1461.81,686.283 1462.37,686.283 1462.93,686.283 1463.49,686.283 1464.05,686.283 1464.61,686.283 1465.17,686.283 1465.73,686.283 1466.29,686.283 1466.85,686.283 1467.41,686.283 1467.97,686.283 1468.52,686.283 1469.08,686.283 1469.64,686.283 1470.2,686.283 1470.76,686.283 1471.32,686.283 1471.88,686.283 1472.44,686.283 1473,686.283 1473.56,686.283 1474.12,686.283 1474.68,686.283 1475.24,686.283 1475.79,686.283 1476.35,686.283 1476.91,686.283 1477.47,686.283 1478.03,686.283 1478.59,686.283 1479.15,686.283 1479.71,686.283 1480.27,686.283 1480.83,686.283 1481.39,686.283 1481.95,686.283 1482.51,686.283 1483.07,686.283 1483.62,686.283 1484.18,686.283 1484.74,686.283 1485.3,686.283 1485.86,686.283 1486.42,686.283 1486.98,686.283 1487.54,686.283 1488.1,686.283 1488.66,686.283 1489.22,686.283 1489.78,686.283 1490.34,686.283 1490.89,686.283 1491.45,686.283 1492.01,686.283 1492.57,686.283 1493.13,686.283 1493.69,686.283 1494.25,686.283 1494.81,686.283 1495.37,686.283 1495.93,686.283 1496.49,686.283 1497.05,686.283 1497.61,686.283 1498.16,686.283 1498.72,686.283 1499.28,686.283 1499.84,686.283 1500.4,686.283 1500.96,686.283 1501.52,686.283 1502.08,686.283 1502.64,686.283 1503.2,686.283 1503.76,686.283 1504.32,686.283 1504.88,686.283 1505.44,686.283 1505.99,686.283 1506.55,686.283 1507.11,686.283 1507.67,686.283 1508.23,686.283 1508.79,686.283 1509.35,686.283 1509.91,686.283 1510.47,686.283 1511.03,686.283 1511.59,686.283 1512.15,686.283 1512.71,686.283 1513.26,686.283 1513.82,686.283 1514.38,686.283 1514.94,686.283 1515.5,686.283 1516.06,686.283 1516.62,686.283 1517.18,686.283 1517.74,686.283 1518.3,686.283 1518.86,686.283 1519.42,686.283 1519.98,686.283 1520.53,686.283 1521.09,686.283 1521.65,686.283 1522.21,686.283 1522.77,686.283 1523.33,686.283 1523.89,686.283 1524.45,686.283 1525.01,686.283 1525.57,686.283 1526.13,686.283 1526.69,686.283 1527.25,686.283 1527.81,686.283 1528.36,686.283 1528.92,686.283 1529.48,686.283 1530.04,686.283 1530.6,686.283 1531.16,686.283 1531.72,686.283 1532.28,686.283 1532.84,686.283 1533.4,686.283 1533.96,686.283 1534.52,686.283 1535.08,686.283 1535.63,686.283 1536.19,686.283 1536.75,686.283 1537.31,686.283 1537.87,686.283 1538.43,686.283 1538.99,686.283 1539.55,686.283 1540.11,686.283 1540.67,686.283 1541.23,686.283 1541.79,686.283 1542.35,686.283 1542.9,686.283 1543.46,686.283 1544.02,686.283 1544.58,686.283 1545.14,686.283 1545.7,686.283 1546.26,686.283 1546.82,686.283 1547.38,686.283 1547.94,686.283 1548.5,686.283 1549.06,686.283 1549.62,686.283 1550.18,686.283 1550.73,686.283 1551.29,686.283 1551.85,686.283 1552.41,686.283 1552.97,686.283 1553.53,686.283 1554.09,686.283 1554.65,686.283 1555.21,686.283 1555.77,686.283 1556.33,686.283 1556.89,686.283 1557.45,686.283 1558,686.283 1558.56,686.283 1559.12,686.283 1559.68,686.283 1560.24,686.283 1560.8,686.283 1561.36,686.283 1561.92,686.283 1562.48,686.283 1563.04,686.283 1563.6,686.283 1564.16,686.283 1564.72,686.283 1565.28,686.283 1565.83,686.283 1566.39,686.283 1566.95,686.283 1567.51,686.283 1568.07,686.283 1568.63,686.283 1569.19,686.283 1569.75,686.283 1570.31,686.283 1570.87,686.283 1571.43,686.283 1571.99,686.283 1572.55,686.283 1573.1,686.283 1573.66,686.283 1574.22,686.283 1574.78,686.283 1575.34,686.283 1575.9,686.283 1576.46,686.283 1577.02,686.283 1577.58,686.283 1578.14,686.283 1578.7,686.283 1579.26,686.283 1579.82,686.283 1580.37,686.283 1580.93,686.283 1581.49,686.283 1582.05,686.283 1582.61,686.283 1583.17,686.283 1583.73,686.283 1584.29,686.283 1584.85,686.283 1585.41,686.283 1585.97,686.283 1586.53,686.283 1587.09,686.283 1587.65,686.283 1588.2,686.283 1588.76,686.283 1589.32,686.283 1589.88,686.283 1590.44,686.283 1591,686.283 1591.56,686.283 1592.12,686.283 1592.68,686.283 1593.24,686.283 1593.8,686.283 1594.36,686.283 1594.92,686.283 1595.47,686.283 1596.03,686.283 1596.59,686.283 1597.15,686.283 1597.71,686.283 1598.27,686.283 1598.83,686.283 1599.39,686.283 1599.95,686.283 1600.51,686.283 1601.07,686.283 1601.63,686.283 1602.19,686.283 1602.74,686.283 1603.3,686.283 1603.86,686.283 1604.42,686.283 1604.98,686.283 1605.54,686.283 1606.1,686.283 1606.66,686.283 1607.22,686.283 1607.78,686.283 1608.34,686.283 1608.9,686.283 1609.46,686.283 1610.02,686.283 1610.57,686.283 1611.13,686.283 1611.69,686.283 1612.25,686.283 1612.81,686.283 1613.37,686.283 1613.93,686.283 1614.49,686.283 1615.05,686.283 1615.61,686.283 1616.17,686.283 1616.73,686.283 1617.29,686.283 1617.84,686.283 1618.4,686.283 1618.96,686.283 1619.52,686.283 1620.08,686.283 1620.64,686.283 1621.2,686.283 1621.76,686.283 1622.32,686.283 1622.88,686.283 1623.44,686.283 1624,686.283 1624.56,686.283 1625.11,686.283 1625.67,686.283 1626.23,686.283 1626.79,686.283 1627.35,686.283 1627.91,686.283 1628.47,686.283 1629.03,686.283 1629.59,686.283 1630.15,686.283 1630.71,686.283 1631.27,686.283 1631.83,686.283 1632.39,686.283 1632.94,686.283 1633.5,686.283 1634.06,686.283 1634.62,686.283 1635.18,686.283 1635.74,686.283 1636.3,686.283 1636.86,686.283 1637.42,686.283 1637.98,686.283 1638.54,686.283 1639.1,686.283 1639.66,686.283 1640.21,686.283 1640.77,686.283 1641.33,686.283 1641.89,686.283 1642.45,686.283 1643.01,686.283 1643.57,686.283 1644.13,686.283 1644.69,686.283 1645.25,686.283 1645.81,686.283 1646.37,686.283 1646.93,686.283 1647.48,686.283 1648.04,686.283 1648.6,686.283 1649.16,686.283 1649.72,686.283 1650.28,686.283 1650.84,686.283 1651.4,686.283 1651.96,686.283 1652.52,686.283 1653.08,686.283 1653.64,686.283 1654.2,686.283 1654.76,686.283 1655.31,686.283 1655.87,686.283 1656.43,686.283 1656.99,686.283 1657.55,686.283 1658.11,686.283 1658.67,686.283 1659.23,686.283 1659.79,686.283 1660.35,686.283 1660.91,686.283 1661.47,686.283 1662.03,686.283 1662.58,686.283 1663.14,686.283 1663.7,686.283 1664.26,686.283 1664.82,686.283 1665.38,686.283 1665.94,686.283 1666.5,686.283 1667.06,686.283 1667.62,686.283 1668.18,686.283 1668.74,686.283 1669.3,686.283 1669.85,686.283 1670.41,686.283 1670.97,686.283 1671.53,686.283 1672.09,686.283 1672.65,686.283 1673.21,686.283 1673.77,686.283 1674.33,686.283 1674.89,686.283 1675.45,686.283 1676.01,686.283 1676.57,686.283 1677.13,686.283 1677.68,686.283 1678.24,686.283 1678.8,686.283 1679.36,686.283 1679.92,686.283 1680.48,686.283 1681.04,686.283 1681.6,686.283 1682.16,686.283 1682.72,686.283 1683.28,686.283 1683.84,686.283 1684.4,686.283 1684.95,686.283 1685.51,686.283 1686.07,686.283 1686.63,686.283 1687.19,686.283 1687.75,686.283 1688.31,686.283 1688.87,686.283 1689.43,686.283 1689.99,686.283 1690.55,686.283 1691.11,686.283 1691.67,686.283 1692.23,686.283 1692.78,686.283 1693.34,686.283 1693.9,686.283 1694.46,686.283 1695.02,686.283 1695.58,686.283 1696.14,686.283 1696.7,686.283 1697.26,686.283 1697.82,686.283 1698.38,686.283 1698.94,686.283 1699.5,686.283 1700.05,686.283 1700.61,686.283 1701.17,686.283 1701.73,686.283 1702.29,686.283 1702.85,686.283 1703.41,686.283 1703.97,686.283 1704.53,686.283 1705.09,686.283 1705.65,686.283 1706.21,686.283 1706.77,686.283 1707.32,686.283 1707.88,686.283 1708.44,686.283 1709,686.283 1709.56,686.283 1710.12,686.283 1710.68,686.283 1711.24,686.283 1711.8,686.283 1712.36,686.283 1712.92,686.283 1713.48,686.283 1714.04,686.283 1714.6,686.283 1715.15,686.283 1715.71,686.283 1716.27,686.283 1716.83,686.283 1717.39,686.283 1717.95,686.283 1718.51,686.283 1719.07,686.283 1719.63,686.283 1720.19,686.283 1720.75,686.283 1721.31,686.283 1721.87,686.283 1722.42,686.283 1722.98,686.283 1723.54,686.283 1724.1,686.283 1724.66,686.283 1725.22,686.283 1725.78,686.283 1726.34,686.283 1726.9,686.283 1727.46,686.283 1728.02,686.283 1728.58,686.283 1729.14,686.283 1729.69,686.283 1730.25,686.283 1730.81,686.283 1731.37,686.283 1731.93,686.283 1732.49,686.283 1733.05,686.283 1733.61,686.283 1734.17,686.283 1734.73,686.283 1735.29,686.283 1735.85,686.283 1736.41,686.283 1736.97,686.283 1737.52,686.283 1738.08,686.283 1738.64,686.283 1739.2,686.283 1739.76,686.283 1740.32,686.283 1740.88,686.283 1741.44,686.283 1742,686.283 1742.56,686.283 1743.12,686.283 1743.68,686.283 1744.24,686.283 1744.79,686.283 1745.35,686.283 1745.91,686.283 1746.47,686.283 1747.03,686.283 1747.59,686.283 1748.15,686.283 1748.71,686.283 1749.27,686.283 1749.83,686.283 1750.39,686.283 1750.95,686.283 1751.51,686.283 1752.06,686.283 1752.62,686.283 1753.18,686.283 1753.74,686.283 1754.3,686.283 1754.86,686.283 1755.42,686.283 1755.98,686.283 1756.54,686.283 1757.1,686.283 1757.66,686.283 1758.22,686.283 1758.78,686.283 1759.34,686.283 1759.89,686.283 1760.45,686.283 1761.01,686.283 1761.57,686.283 1762.13,686.283 1762.69,686.283 1763.25,686.283 1763.81,686.283 1764.37,686.283 1764.93,686.283 1765.49,686.283 1766.05,686.283 1766.61,686.283 1767.16,686.283 1767.72,686.283 1768.28,686.283 1768.84,686.283 1769.4,686.283 1769.96,686.283 1770.52,686.283 1771.08,686.283 1771.64,686.283 1772.2,686.283 1772.76,686.283 1773.32,686.283 1773.88,686.283 1774.43,686.283 1774.99,686.283 1775.55,686.283 1776.11,686.283 1776.67,686.283 1777.23,686.283 1777.79,686.283 1778.35,686.283 1778.91,686.283 1779.47,686.283 1780.03,686.283 1780.59,686.283 1781.15,686.283 1781.71,686.283 1782.26,686.283 1782.82,686.283 1783.38,686.283 1783.94,686.283 1784.5,686.283 1785.06,686.283 1785.62,686.283 1786.18,686.283 1786.74,686.283 1787.3,686.283 1787.86,686.283 1788.42,686.283 1788.98,686.283 1789.53,686.283 1790.09,686.283 1790.65,686.283 1791.21,686.283 1791.77,686.283 1792.33,686.283 1792.89,686.283 1793.45,686.283 1794.01,686.283 1794.57,686.283 1795.13,686.283 1795.69,686.283 1796.25,686.283 1796.8,686.283 1797.36,686.283 1797.92,686.283 1798.48,686.283 1799.04,686.283 1799.6,686.283 1800.16,686.283 1800.72,686.283 1801.28,686.283 1801.84,686.283 1802.4,686.283 1802.96,686.283 1803.52,686.283 1804.08,686.283 1804.63,686.283 1805.19,686.283 1805.75,686.283 1806.31,686.283 1806.87,686.283 1807.43,686.283 1807.99,686.283 1808.55,686.283 1809.11,686.283 1809.67,686.283 1810.23,686.283 1810.79,686.283 1811.35,686.283 1811.9,686.283 1812.46,686.283 1813.02,686.283 1813.58,686.283 1814.14,686.283 1814.7,686.283 1815.26,686.283 1815.82,686.283 1816.38,686.283 1816.94,686.283 1817.5,686.283 1818.06,686.283 1818.62,686.283 1819.18,686.283 1819.73,686.283 1820.29,686.283 1820.85,686.283 1821.41,686.283 1821.97,686.283 1822.53,686.283 1823.09,686.283 1823.65,686.283 1824.21,686.283 1824.77,686.283 1825.33,686.283 1825.89,686.283 1826.45,686.283 1827,686.283 1827.56,686.283 1828.12,686.283 1828.68,686.283 1829.24,686.283 1829.8,686.283 1830.36,686.283 1830.92,686.283 1831.48,686.283 1832.04,686.283 1832.6,686.283 1833.16,686.283 1833.72,686.283 1834.27,686.283 1834.83,686.283 1835.39,686.283 1835.95,686.283 1836.51,686.283 1837.07,686.283 1837.63,686.283 1838.19,686.283 \"/>\n<path clip-path=\"url(#clip533)\" d=\"M720.247 685.046 L720.806 685.046 L721.365 685.046 L721.924 685.046 L722.484 685.046 L723.043 685.046 L723.602 685.046 L724.161 685.046 L724.721 685.046 L725.28 685.046 L725.839 685.046 L726.398 685.046 L726.958 685.046 L727.517 685.046 L728.076 685.046 L728.635 685.046 L729.195 685.046 L729.754 685.046 L730.313 685.046 L730.872 685.046 L731.432 685.046 L731.991 685.046 L732.55 685.046 L733.109 685.046 L733.669 685.046 L734.228 685.046 L734.787 685.046 L735.346 685.046 L735.906 685.046 L736.465 685.046 L737.024 685.046 L737.583 685.046 L738.143 685.046 L738.702 685.046 L739.261 685.046 L739.82 685.046 L740.38 685.046 L740.939 685.046 L741.498 685.046 L742.057 685.046 L742.617 685.046 L743.176 685.046 L743.735 685.046 L744.294 685.046 L744.854 685.046 L745.413 685.046 L745.972 685.046 L746.531 685.046 L747.091 685.046 L747.65 685.046 L748.209 685.046 L748.768 685.046 L749.328 685.046 L749.887 685.046 L750.446 685.046 L751.005 685.046 L751.565 685.046 L752.124 685.046 L752.683 685.046 L753.242 685.046 L753.802 685.046 L754.361 685.046 L754.92 685.046 L755.479 685.046 L756.039 685.046 L756.598 685.046 L757.157 685.046 L757.716 685.046 L758.276 685.046 L758.835 685.046 L759.394 685.046 L759.953 685.046 L760.513 685.046 L761.072 685.046 L761.631 685.046 L762.19 685.046 L762.75 685.046 L763.309 685.046 L763.868 685.046 L764.427 685.046 L764.987 685.046 L765.546 685.046 L766.105 685.046 L766.664 685.046 L767.224 685.046 L767.783 685.046 L768.342 685.046 L768.901 685.046 L769.461 685.046 L770.02 685.046 L770.579 685.046 L771.138 685.046 L771.698 685.046 L772.257 685.046 L772.816 685.046 L773.375 685.046 L773.935 685.046 L774.494 685.046 L775.053 685.046 L775.612 685.046 L776.172 685.046 L776.731 685.046 L777.29 685.046 L777.849 685.046 L778.409 685.046 L778.968 685.046 L779.527 685.046 L780.086 685.046 L780.646 685.046 L781.205 685.046 L781.764 685.046 L782.323 685.046 L782.883 685.046 L783.442 685.046 L784.001 685.046 L784.56 685.046 L785.12 685.046 L785.679 685.046 L786.238 685.046 L786.797 685.046 L787.357 685.046 L787.916 685.046 L788.475 685.046 L789.034 685.046 L789.594 685.046 L790.153 685.046 L790.712 685.046 L791.271 685.046 L791.831 685.046 L792.39 685.046 L792.949 685.046 L793.508 685.046 L794.068 685.046 L794.627 685.046 L795.186 685.046 L795.745 685.046 L796.305 685.046 L796.864 685.046 L797.423 685.046 L797.982 685.046 L798.542 685.046 L799.101 685.046 L799.66 685.046 L800.219 685.046 L800.779 685.046 L801.338 685.046 L801.897 685.046 L802.456 685.046 L803.016 685.046 L803.575 685.046 L804.134 685.046 L804.693 685.046 L805.253 685.046 L805.812 685.046 L806.371 685.046 L806.931 685.046 L807.49 685.046 L808.049 685.046 L808.608 685.046 L809.168 685.046 L809.727 685.046 L810.286 685.046 L810.845 685.046 L811.405 685.046 L811.964 685.046 L812.523 685.046 L813.082 685.046 L813.642 685.046 L814.201 685.046 L814.76 685.046 L815.319 685.046 L815.879 685.046 L816.438 685.046 L816.997 685.046 L817.556 685.046 L818.116 685.046 L818.675 685.046 L819.234 685.046 L819.793 685.046 L820.353 685.046 L820.912 685.046 L821.471 685.046 L822.03 685.046 L822.59 685.046 L823.149 685.046 L823.708 685.046 L824.267 685.046 L824.827 685.046 L825.386 685.046 L825.945 685.046 L826.504 685.046 L827.064 685.046 L827.623 685.046 L828.182 685.046 L828.741 685.046 L829.301 685.046 L829.86 685.046 L830.419 685.046 L830.978 685.046 L831.538 685.046 L832.097 685.046 L832.656 685.046 L833.215 685.046 L833.775 685.046 L834.334 685.046 L834.893 685.046 L835.452 685.046 L836.012 685.046 L836.571 685.046 L837.13 685.046 L837.689 685.046 L838.249 685.046 L838.808 685.046 L839.367 685.046 L839.926 685.046 L840.486 685.046 L841.045 685.046 L841.604 685.046 L842.163 685.046 L842.723 685.046 L843.282 685.046 L843.841 685.046 L844.4 685.046 L844.96 685.046 L845.519 685.046 L846.078 685.046 L846.637 685.046 L847.197 685.046 L847.756 685.046 L848.315 685.046 L848.874 685.046 L849.434 685.046 L849.993 685.046 L850.552 685.046 L851.111 685.046 L851.671 685.046 L852.23 685.046 L852.789 685.046 L853.348 685.046 L853.908 685.046 L854.467 685.046 L855.026 685.046 L855.585 685.046 L856.145 685.046 L856.704 685.046 L857.263 685.046 L857.822 685.046 L858.382 685.046 L858.941 685.046 L859.5 685.046 L860.059 685.046 L860.619 685.046 L861.178 685.046 L861.737 685.046 L862.296 685.046 L862.856 685.046 L863.415 685.046 L863.974 685.046 L864.533 685.046 L865.093 685.046 L865.652 685.046 L866.211 685.046 L866.77 685.046 L867.33 685.046 L867.889 685.046 L868.448 685.046 L869.007 685.046 L869.567 685.046 L870.126 685.046 L870.685 685.046 L871.244 685.046 L871.804 685.046 L872.363 685.046 L872.922 685.046 L873.481 685.046 L874.041 685.046 L874.6 685.046 L875.159 685.046 L875.718 685.046 L876.278 685.046 L876.837 685.046 L877.396 685.046 L877.955 685.046 L878.515 685.046 L879.074 685.046 L879.633 685.046 L880.192 685.046 L880.752 685.046 L881.311 685.046 L881.87 685.046 L882.429 685.046 L882.989 685.046 L883.548 685.046 L884.107 685.046 L884.666 685.046 L885.226 685.046 L885.785 685.046 L886.344 685.046 L886.903 685.046 L887.463 685.046 L888.022 685.046 L888.581 685.046 L889.14 685.046 L889.7 685.046 L890.259 685.046 L890.818 685.046 L891.377 685.046 L891.937 685.046 L892.496 685.046 L893.055 685.046 L893.614 685.046 L894.174 685.046 L894.733 685.046 L895.292 685.046 L895.851 685.046 L896.411 685.046 L896.97 685.046 L897.529 685.046 L898.088 685.046 L898.648 685.046 L899.207 685.046 L899.766 685.046 L900.325 685.046 L900.885 685.046 L901.444 685.046 L902.003 685.046 L902.562 685.046 L903.122 685.046 L903.681 685.046 L904.24 685.046 L904.799 685.046 L905.359 685.046 L905.918 685.046 L906.477 685.046 L907.036 685.046 L907.596 685.046 L908.155 685.046 L908.714 685.046 L909.273 685.046 L909.833 685.046 L910.392 685.046 L910.951 685.046 L911.51 685.046 L912.07 685.046 L912.629 685.046 L913.188 685.046 L913.747 685.046 L914.307 685.046 L914.866 685.046 L915.425 685.046 L915.984 685.046 L916.544 685.046 L917.103 685.046 L917.662 685.046 L918.221 685.046 L918.781 685.046 L919.34 685.046 L919.899 685.046 L920.458 685.046 L921.018 685.046 L921.577 685.046 L922.136 685.046 L922.695 685.046 L923.255 685.046 L923.814 685.046 L924.373 685.046 L924.932 685.046 L925.492 685.046 L926.051 685.046 L926.61 685.046 L927.169 685.046 L927.729 685.046 L928.288 685.046 L928.847 685.046 L929.406 685.046 L929.966 685.046 L930.525 685.046 L931.084 685.046 L931.644 685.046 L932.203 685.046 L932.762 685.046 L933.321 685.046 L933.881 685.046 L934.44 685.046 L934.999 685.046 L935.558 685.046 L936.118 685.046 L936.677 685.046 L937.236 685.046 L937.795 685.046 L938.355 685.046 L938.914 685.046 L939.473 685.046 L940.032 685.046 L940.592 685.046 L941.151 685.046 L941.71 685.046 L942.269 685.046 L942.829 685.046 L943.388 685.046 L943.947 685.046 L944.506 685.046 L945.066 685.046 L945.625 685.046 L946.184 685.046 L946.743 685.046 L947.303 685.046 L947.862 685.046 L948.421 685.046 L948.98 685.046 L949.54 685.046 L950.099 685.046 L950.658 685.046 L951.217 685.046 L951.777 685.046 L952.336 685.046 L952.895 685.046 L953.454 685.046 L954.014 685.046 L954.573 685.046 L955.132 685.046 L955.691 685.046 L956.251 685.046 L956.81 685.046 L957.369 685.046 L957.928 685.046 L958.488 685.046 L959.047 685.046 L959.606 685.046 L960.165 685.046 L960.725 685.046 L961.284 685.046 L961.843 685.046 L962.402 685.046 L962.962 685.046 L963.521 685.046 L964.08 685.046 L964.639 685.046 L965.199 685.046 L965.758 685.046 L966.317 685.046 L966.876 685.046 L967.436 685.046 L967.995 685.046 L968.554 685.046 L969.113 685.046 L969.673 685.046 L970.232 685.046 L970.791 685.046 L971.35 685.046 L971.91 685.046 L972.469 685.046 L973.028 685.046 L973.587 685.046 L974.147 685.046 L974.706 685.046 L975.265 685.046 L975.824 685.046 L976.384 685.046 L976.943 685.046 L977.502 685.046 L978.061 685.046 L978.621 685.046 L979.18 685.046 L979.739 685.046 L980.298 685.046 L980.858 685.046 L981.417 685.046 L981.976 685.046 L982.535 685.046 L983.095 685.046 L983.654 685.046 L984.213 685.046 L984.772 685.046 L985.332 685.046 L985.891 685.046 L986.45 685.046 L987.009 685.046 L987.569 685.046 L988.128 685.046 L988.687 685.046 L989.246 685.046 L989.806 685.046 L990.365 685.046 L990.924 685.046 L991.483 685.046 L992.043 685.046 L992.602 685.046 L993.161 685.046 L993.72 685.046 L994.28 685.046 L994.839 685.046 L995.398 685.046 L995.957 685.046 L996.517 685.046 L997.076 685.046 L997.635 685.046 L998.194 685.046 L998.754 685.046 L999.313 685.046 L999.872 685.046 L1000.43 685.046 L1000.99 685.046 L1001.55 685.046 L1002.11 685.046 L1002.67 685.046 L1003.23 685.046 L1003.79 685.046 L1004.35 685.046 L1004.91 685.046 L1005.46 685.046 L1006.02 685.046 L1006.58 685.046 L1007.14 685.046 L1007.7 685.046 L1008.26 685.046 L1008.82 685.046 L1009.38 685.046 L1009.94 685.046 L1010.5 685.046 L1011.06 685.046 L1011.62 685.046 L1012.18 685.046 L1012.73 685.046 L1013.29 685.046 L1013.85 685.046 L1014.41 685.046 L1014.97 685.046 L1015.53 685.046 L1016.09 685.046 L1016.65 685.046 L1017.21 685.046 L1017.77 685.046 L1018.33 685.046 L1018.89 685.046 L1019.45 685.046 L1020.01 685.046 L1020.56 685.046 L1021.12 685.046 L1021.68 685.046 L1022.24 685.046 L1022.8 685.046 L1023.36 685.046 L1023.92 685.046 L1024.48 685.046 L1025.04 685.046 L1025.6 685.046 L1026.16 685.046 L1026.72 685.046 L1027.28 685.046 L1027.83 685.046 L1028.39 685.046 L1028.95 685.046 L1029.51 685.046 L1030.07 685.046 L1030.63 685.046 L1031.19 685.046 L1031.75 685.046 L1032.31 685.046 L1032.87 685.046 L1033.43 685.046 L1033.99 685.046 L1034.55 685.046 L1035.1 685.046 L1035.66 685.046 L1036.22 685.046 L1036.78 685.046 L1037.34 685.046 L1037.9 685.046 L1038.46 685.046 L1039.02 685.046 L1039.58 685.046 L1040.14 685.046 L1040.7 685.046 L1041.26 685.046 L1041.82 685.046 L1042.38 685.046 L1042.93 685.046 L1043.49 685.046 L1044.05 685.046 L1044.61 685.046 L1045.17 685.046 L1045.73 685.046 L1046.29 685.046 L1046.85 685.046 L1047.41 685.046 L1047.97 685.046 L1048.53 685.046 L1049.09 685.046 L1049.65 685.046 L1050.2 685.046 L1050.76 685.046 L1051.32 685.046 L1051.88 685.046 L1052.44 685.046 L1053 685.046 L1053.56 685.046 L1054.12 685.046 L1054.68 685.046 L1055.24 685.046 L1055.8 685.046 L1056.36 685.046 L1056.92 685.046 L1057.48 685.046 L1058.03 685.046 L1058.59 685.046 L1059.15 685.046 L1059.71 685.046 L1060.27 685.046 L1060.83 685.046 L1061.39 685.046 L1061.95 685.046 L1062.51 685.046 L1063.07 685.046 L1063.63 685.046 L1064.19 685.046 L1064.75 685.046 L1065.3 685.046 L1065.86 685.046 L1066.42 685.046 L1066.98 685.046 L1067.54 685.046 L1068.1 685.046 L1068.66 685.046 L1069.22 685.046 L1069.78 685.046 L1070.34 685.046 L1070.9 685.046 L1071.46 685.046 L1072.02 685.046 L1072.57 685.046 L1073.13 685.046 L1073.69 685.046 L1074.25 685.046 L1074.81 685.046 L1075.37 685.046 L1075.93 685.046 L1076.49 685.046 L1077.05 685.046 L1077.61 685.046 L1078.17 685.046 L1078.73 685.046 L1079.29 685.046 L1079.85 685.046 L1080.4 685.046 L1080.96 685.046 L1081.52 685.046 L1082.08 685.046 L1082.64 685.046 L1083.2 685.046 L1083.76 685.046 L1084.32 685.046 L1084.88 685.046 L1085.44 685.046 L1086 685.046 L1086.56 685.046 L1087.12 685.046 L1087.67 685.046 L1088.23 685.046 L1088.79 685.046 L1089.35 685.046 L1089.91 685.046 L1090.47 685.046 L1091.03 685.046 L1091.59 685.046 L1092.15 685.046 L1092.71 685.046 L1093.27 685.046 L1093.83 685.046 L1094.39 685.046 L1094.94 685.046 L1095.5 685.046 L1096.06 685.046 L1096.62 685.046 L1097.18 685.046 L1097.74 685.046 L1098.3 685.046 L1098.86 685.046 L1099.42 685.046 L1099.98 685.046 L1100.54 685.046 L1101.1 685.046 L1101.66 685.046 L1102.22 685.046 L1102.77 685.046 L1103.33 685.046 L1103.89 685.046 L1104.45 685.046 L1105.01 685.046 L1105.57 685.046 L1106.13 685.046 L1106.69 685.046 L1107.25 685.046 L1107.81 685.046 L1108.37 685.046 L1108.93 685.046 L1109.49 685.046 L1110.04 685.046 L1110.6 685.046 L1111.16 685.046 L1111.72 685.046 L1112.28 685.046 L1112.84 685.046 L1113.4 685.046 L1113.96 685.046 L1114.52 685.046 L1115.08 685.046 L1115.64 685.046 L1116.2 685.046 L1116.76 685.046 L1117.31 685.046 L1117.87 685.046 L1118.43 685.046 L1118.99 685.046 L1119.55 685.046 L1120.11 685.046 L1120.67 685.046 L1121.23 685.046 L1121.79 685.046 L1122.35 685.046 L1122.91 685.046 L1123.47 685.046 L1124.03 685.046 L1124.59 685.046 L1125.14 685.046 L1125.7 685.046 L1126.26 685.046 L1126.82 685.046 L1127.38 685.046 L1127.94 685.046 L1128.5 685.046 L1129.06 685.046 L1129.62 685.046 L1130.18 685.046 L1130.74 685.046 L1131.3 685.046 L1131.86 685.046 L1132.41 685.046 L1132.97 685.046 L1133.53 685.046 L1134.09 685.046 L1134.65 685.046 L1135.21 685.046 L1135.77 685.046 L1136.33 685.046 L1136.89 685.046 L1137.45 685.046 L1138.01 685.046 L1138.57 685.046 L1139.13 685.046 L1139.68 685.046 L1140.24 685.046 L1140.8 685.046 L1141.36 685.046 L1141.92 685.046 L1142.48 685.046 L1143.04 685.046 L1143.6 685.046 L1144.16 685.046 L1144.72 685.046 L1145.28 685.046 L1145.84 685.046 L1146.4 685.046 L1146.96 685.046 L1147.51 685.046 L1148.07 685.046 L1148.63 685.046 L1149.19 685.046 L1149.75 685.046 L1150.31 685.046 L1150.87 685.046 L1151.43 685.046 L1151.99 685.046 L1152.55 685.046 L1153.11 685.046 L1153.67 685.046 L1154.23 685.046 L1154.78 685.046 L1155.34 685.046 L1155.9 685.046 L1156.46 685.046 L1157.02 685.046 L1157.58 685.046 L1158.14 685.046 L1158.7 685.046 L1159.26 685.046 L1159.82 685.046 L1160.38 685.046 L1160.94 685.046 L1161.5 685.046 L1162.05 685.046 L1162.61 685.046 L1163.17 685.046 L1163.73 685.046 L1164.29 685.046 L1164.85 685.046 L1165.41 685.046 L1165.97 685.046 L1166.53 685.046 L1167.09 685.046 L1167.65 685.046 L1168.21 685.046 L1168.77 685.046 L1169.33 685.046 L1169.88 685.046 L1170.44 685.046 L1171 685.046 L1171.56 685.046 L1172.12 685.046 L1172.68 685.046 L1173.24 685.046 L1173.8 685.046 L1174.36 685.046 L1174.92 685.046 L1175.48 685.046 L1176.04 685.046 L1176.6 685.046 L1177.15 685.046 L1177.71 685.046 L1178.27 685.046 L1178.83 685.046 L1179.39 685.046 L1179.95 685.046 L1180.51 685.046 L1181.07 685.046 L1181.63 685.046 L1182.19 685.046 L1182.75 685.046 L1183.31 685.046 L1183.87 685.046 L1184.43 685.046 L1184.98 685.046 L1185.54 685.046 L1186.1 685.046 L1186.66 685.046 L1187.22 685.046 L1187.78 685.046 L1188.34 685.046 L1188.9 685.046 L1189.46 685.046 L1190.02 685.046 L1190.58 685.046 L1191.14 685.046 L1191.7 685.046 L1192.25 685.046 L1192.81 685.046 L1193.37 685.046 L1193.93 685.046 L1194.49 685.046 L1195.05 685.046 L1195.61 685.046 L1196.17 685.046 L1196.73 685.046 L1197.29 685.046 L1197.85 685.046 L1198.41 685.046 L1198.97 685.046 L1199.52 685.046 L1200.08 685.046 L1200.64 685.046 L1201.2 685.046 L1201.76 685.046 L1202.32 685.046 L1202.88 685.046 L1203.44 685.046 L1204 685.046 L1204.56 685.046 L1205.12 685.046 L1205.68 685.046 L1206.24 685.046 L1206.8 685.046 L1207.35 685.046 L1207.91 685.046 L1208.47 685.046 L1209.03 685.046 L1209.59 685.046 L1210.15 685.046 L1210.71 685.046 L1211.27 685.046 L1211.83 685.046 L1212.39 685.046 L1212.95 685.046 L1213.51 685.046 L1214.07 685.046 L1214.62 685.046 L1215.18 685.046 L1215.74 685.046 L1216.3 685.046 L1216.86 685.046 L1217.42 685.046 L1217.98 685.046 L1218.54 685.046 L1219.1 685.046 L1219.66 685.046 L1220.22 685.046 L1220.78 685.046 L1221.34 685.046 L1221.89 685.046 L1222.45 685.046 L1223.01 685.046 L1223.57 685.046 L1224.13 685.046 L1224.69 685.046 L1225.25 685.046 L1225.81 685.046 L1226.37 685.046 L1226.93 685.046 L1227.49 685.046 L1228.05 685.046 L1228.61 685.046 L1229.17 685.046 L1229.72 685.046 L1230.28 685.046 L1230.84 685.046 L1231.4 685.046 L1231.96 685.046 L1232.52 685.046 L1233.08 685.046 L1233.64 685.046 L1234.2 685.046 L1234.76 685.046 L1235.32 685.046 L1235.88 685.046 L1236.44 685.046 L1236.99 685.046 L1237.55 685.046 L1238.11 685.046 L1238.67 685.046 L1239.23 685.046 L1239.79 685.046 L1240.35 685.046 L1240.91 685.046 L1241.47 685.046 L1242.03 685.046 L1242.59 685.046 L1243.15 685.046 L1243.71 685.046 L1244.26 685.046 L1244.82 685.046 L1245.38 685.046 L1245.94 685.046 L1246.5 685.046 L1247.06 685.046 L1247.62 685.046 L1248.18 685.046 L1248.74 685.046 L1249.3 685.046 L1249.86 685.046 L1250.42 685.046 L1250.98 685.046 L1251.54 685.046 L1252.09 685.046 L1252.65 685.046 L1253.21 685.046 L1253.77 685.046 L1254.33 685.046 L1254.89 685.046 L1255.45 685.046 L1256.01 685.046 L1256.57 685.046 L1257.13 685.046 L1257.69 685.046 L1258.25 685.046 L1258.81 685.046 L1259.36 685.046 L1259.92 685.046 L1260.48 685.046 L1261.04 685.046 L1261.6 685.046 L1262.16 685.046 L1262.72 685.046 L1263.28 685.046 L1263.84 685.046 L1264.4 685.046 L1264.96 685.046 L1265.52 685.046 L1266.08 685.046 L1266.63 685.046 L1267.19 685.046 L1267.75 685.046 L1268.31 685.046 L1268.87 685.046 L1269.43 685.046 L1269.99 685.046 L1270.55 685.046 L1271.11 685.046 L1271.67 685.046 L1272.23 685.046 L1272.79 685.046 L1273.35 685.046 L1273.91 685.046 L1274.46 685.046 L1275.02 685.046 L1275.58 685.046 L1276.14 685.046 L1276.7 685.046 L1277.26 685.046 L1277.82 685.046 L1278.38 685.046 L1278.94 685.046 L1279.5 685.046 L1280.06 685.046 L1280.62 685.046 L1281.18 685.046 L1281.73 685.046 L1282.29 685.046 L1282.85 685.046 L1283.41 685.046 L1283.97 685.046 L1284.53 685.046 L1285.09 685.046 L1285.65 685.046 L1286.21 685.046 L1286.77 685.046 L1287.33 685.046 L1287.89 685.046 L1288.45 685.046 L1289 685.046 L1289.56 685.046 L1290.12 685.046 L1290.68 685.046 L1291.24 685.046 L1291.8 685.046 L1292.36 685.046 L1292.92 685.046 L1293.48 685.046 L1294.04 685.046 L1294.6 685.046 L1295.16 685.046 L1295.72 685.046 L1296.28 685.046 L1296.83 685.046 L1297.39 685.046 L1297.95 685.046 L1298.51 685.046 L1299.07 685.046 L1299.63 685.046 L1300.19 685.046 L1300.75 685.046 L1301.31 685.046 L1301.87 685.046 L1302.43 685.046 L1302.99 685.046 L1303.55 685.046 L1304.1 685.046 L1304.66 685.046 L1305.22 685.046 L1305.78 685.046 L1306.34 685.046 L1306.9 685.046 L1307.46 685.046 L1308.02 685.046 L1308.58 685.046 L1309.14 685.046 L1309.7 685.046 L1310.26 685.046 L1310.82 685.046 L1311.38 685.046 L1311.93 685.046 L1312.49 685.046 L1313.05 685.046 L1313.61 685.046 L1314.17 685.046 L1314.73 685.046 L1315.29 685.046 L1315.85 685.046 L1316.41 685.046 L1316.97 685.046 L1317.53 685.046 L1318.09 685.046 L1318.65 685.046 L1319.2 685.046 L1319.76 685.046 L1320.32 685.046 L1320.88 685.046 L1321.44 685.046 L1322 685.046 L1322.56 685.046 L1323.12 685.046 L1323.68 685.046 L1324.24 685.046 L1324.8 685.046 L1325.36 685.046 L1325.92 685.046 L1326.47 685.046 L1327.03 685.046 L1327.59 685.046 L1328.15 685.046 L1328.71 685.046 L1329.27 685.046 L1329.83 685.046 L1330.39 685.046 L1330.95 685.046 L1331.51 685.046 L1332.07 685.046 L1332.63 685.046 L1333.19 685.046 L1333.75 685.046 L1334.3 685.046 L1334.86 685.046 L1335.42 685.046 L1335.98 685.046 L1336.54 685.046 L1337.1 685.046 L1337.66 685.046 L1338.22 685.046 L1338.78 685.046 L1339.34 685.046 L1339.9 685.046 L1340.46 685.046 L1341.02 685.046 L1341.57 685.046 L1342.13 685.046 L1342.69 685.046 L1343.25 685.046 L1343.81 685.046 L1344.37 685.046 L1344.93 685.046 L1345.49 685.046 L1346.05 685.046 L1346.61 685.046 L1347.17 685.046 L1347.73 685.046 L1348.29 685.046 L1348.84 685.046 L1349.4 685.046 L1349.96 685.046 L1350.52 685.046 L1351.08 685.046 L1351.64 685.046 L1352.2 685.046 L1352.76 685.046 L1353.32 685.046 L1353.88 685.046 L1354.44 685.046 L1355 685.046 L1355.56 685.046 L1356.12 685.046 L1356.67 685.046 L1357.23 685.046 L1357.79 685.046 L1358.35 685.046 L1358.91 685.046 L1359.47 685.046 L1360.03 685.046 L1360.59 685.046 L1361.15 685.046 L1361.71 685.046 L1362.27 685.046 L1362.83 685.046 L1363.39 685.046 L1363.94 685.046 L1364.5 685.046 L1365.06 685.046 L1365.62 685.046 L1366.18 685.046 L1366.74 685.046 L1367.3 685.046 L1367.86 685.046 L1368.42 685.046 L1368.98 685.046 L1369.54 685.046 L1370.1 685.046 L1370.66 685.046 L1371.21 685.046 L1371.77 685.046 L1372.33 685.046 L1372.89 685.046 L1373.45 685.046 L1374.01 685.046 L1374.57 685.046 L1375.13 685.046 L1375.69 685.046 L1376.25 685.046 L1376.81 685.046 L1377.37 685.046 L1377.93 685.046 L1378.49 685.046 L1379.04 685.046 L1379.6 685.046 L1380.16 685.046 L1380.72 685.046 L1381.28 685.046 L1381.84 685.046 L1382.4 685.046 L1382.96 685.046 L1383.52 685.046 L1384.08 685.046 L1384.64 685.046 L1385.2 685.046 L1385.76 685.046 L1386.31 685.046 L1386.87 685.046 L1387.43 685.046 L1387.99 685.046 L1388.55 685.046 L1389.11 685.046 L1389.67 685.046 L1390.23 685.046 L1390.79 685.046 L1391.35 685.046 L1391.91 685.046 L1392.47 685.046 L1393.03 685.046 L1393.58 685.046 L1394.14 685.046 L1394.7 685.046 L1395.26 685.046 L1395.82 685.046 L1396.38 685.046 L1396.94 685.046 L1397.5 685.046 L1398.06 685.046 L1398.62 685.046 L1399.18 685.046 L1399.74 685.046 L1400.3 685.046 L1400.86 685.046 L1401.41 685.046 L1401.97 685.046 L1402.53 685.046 L1403.09 685.046 L1403.65 685.046 L1404.21 685.046 L1404.77 685.046 L1405.33 685.046 L1405.89 685.046 L1406.45 685.046 L1407.01 685.046 L1407.57 685.046 L1408.13 685.046 L1408.68 685.046 L1409.24 685.046 L1409.8 685.046 L1410.36 685.046 L1410.92 685.046 L1411.48 685.046 L1412.04 685.046 L1412.6 685.046 L1413.16 685.046 L1413.72 685.046 L1414.28 685.046 L1414.84 685.046 L1415.4 685.046 L1415.95 685.046 L1416.51 685.046 L1417.07 685.046 L1417.63 685.046 L1418.19 685.046 L1418.75 685.046 L1419.31 685.046 L1419.87 685.046 L1420.43 685.046 L1420.99 685.046 L1421.55 685.046 L1422.11 685.046 L1422.67 685.046 L1423.23 685.046 L1423.78 685.046 L1424.34 685.046 L1424.9 685.046 L1425.46 685.046 L1426.02 685.046 L1426.58 685.046 L1427.14 685.046 L1427.7 685.046 L1428.26 685.046 L1428.82 685.046 L1429.38 685.046 L1429.94 685.046 L1430.5 685.046 L1431.05 685.046 L1431.61 685.046 L1432.17 685.046 L1432.73 685.046 L1433.29 685.046 L1433.85 685.046 L1434.41 685.046 L1434.97 685.046 L1435.53 685.046 L1436.09 685.046 L1436.65 685.046 L1437.21 685.046 L1437.77 685.046 L1438.33 685.046 L1438.88 685.046 L1439.44 685.046 L1440 685.046 L1440.56 685.046 L1441.12 685.046 L1441.68 685.046 L1442.24 685.046 L1442.8 685.046 L1443.36 685.046 L1443.92 685.046 L1444.48 685.046 L1445.04 685.046 L1445.6 685.046 L1446.15 685.046 L1446.71 685.046 L1447.27 685.046 L1447.83 685.046 L1448.39 685.046 L1448.95 685.046 L1449.51 685.046 L1450.07 685.046 L1450.63 685.046 L1451.19 685.046 L1451.75 685.046 L1452.31 685.046 L1452.87 685.046 L1453.42 685.046 L1453.98 685.046 L1454.54 685.046 L1455.1 685.046 L1455.66 685.046 L1456.22 685.046 L1456.78 685.046 L1457.34 685.046 L1457.9 685.046 L1458.46 685.046 L1459.02 685.046 L1459.58 685.046 L1460.14 685.046 L1460.7 685.046 L1461.25 685.046 L1461.81 685.046 L1462.37 685.046 L1462.93 685.046 L1463.49 685.046 L1464.05 685.046 L1464.61 685.046 L1465.17 685.046 L1465.73 685.046 L1466.29 685.046 L1466.85 685.046 L1467.41 685.046 L1467.97 685.046 L1468.52 685.046 L1469.08 685.046 L1469.64 685.046 L1470.2 685.046 L1470.76 685.046 L1471.32 685.046 L1471.88 685.046 L1472.44 685.046 L1473 685.046 L1473.56 685.046 L1474.12 685.046 L1474.68 685.046 L1475.24 685.046 L1475.79 685.046 L1476.35 685.046 L1476.91 685.046 L1477.47 685.046 L1478.03 685.046 L1478.59 685.046 L1479.15 685.046 L1479.71 685.046 L1480.27 685.046 L1480.83 685.046 L1481.39 685.046 L1481.95 685.046 L1482.51 685.046 L1483.07 685.046 L1483.62 685.046 L1484.18 685.046 L1484.74 685.046 L1485.3 685.046 L1485.86 685.046 L1486.42 685.046 L1486.98 685.046 L1487.54 685.046 L1488.1 685.046 L1488.66 685.046 L1489.22 685.046 L1489.78 685.046 L1490.34 685.046 L1490.89 685.046 L1491.45 685.046 L1492.01 685.046 L1492.57 685.046 L1493.13 685.046 L1493.69 685.046 L1494.25 685.046 L1494.81 685.046 L1495.37 685.046 L1495.93 685.046 L1496.49 685.046 L1497.05 685.046 L1497.61 685.046 L1498.16 685.046 L1498.72 685.046 L1499.28 685.046 L1499.84 685.046 L1500.4 685.046 L1500.96 685.046 L1501.52 685.046 L1502.08 685.046 L1502.64 685.046 L1503.2 685.046 L1503.76 685.046 L1504.32 685.046 L1504.88 685.046 L1505.44 685.046 L1505.99 685.046 L1506.55 685.046 L1507.11 685.046 L1507.67 685.046 L1508.23 685.046 L1508.79 685.046 L1509.35 685.046 L1509.91 685.046 L1510.47 685.046 L1511.03 685.046 L1511.59 685.046 L1512.15 685.046 L1512.71 685.046 L1513.26 685.046 L1513.82 685.046 L1514.38 685.046 L1514.94 685.046 L1515.5 685.046 L1516.06 685.046 L1516.62 685.046 L1517.18 685.046 L1517.74 685.046 L1518.3 685.046 L1518.86 685.046 L1519.42 685.046 L1519.98 685.046 L1520.53 685.046 L1521.09 685.046 L1521.65 685.046 L1522.21 685.046 L1522.77 685.046 L1523.33 685.046 L1523.89 685.046 L1524.45 685.046 L1525.01 685.046 L1525.57 685.046 L1526.13 685.046 L1526.69 685.046 L1527.25 685.046 L1527.81 685.046 L1528.36 685.046 L1528.92 685.046 L1529.48 685.046 L1530.04 685.046 L1530.6 685.046 L1531.16 685.046 L1531.72 685.046 L1532.28 685.046 L1532.84 685.046 L1533.4 685.046 L1533.96 685.046 L1534.52 685.046 L1535.08 685.046 L1535.63 685.046 L1536.19 685.046 L1536.75 685.046 L1537.31 685.046 L1537.87 685.046 L1538.43 685.046 L1538.99 685.046 L1539.55 685.046 L1540.11 685.046 L1540.67 685.046 L1541.23 685.046 L1541.79 685.046 L1542.35 685.046 L1542.9 685.046 L1543.46 685.046 L1544.02 685.046 L1544.58 685.046 L1545.14 685.046 L1545.7 685.046 L1546.26 685.046 L1546.82 685.046 L1547.38 685.046 L1547.94 685.046 L1548.5 685.046 L1549.06 685.046 L1549.62 685.046 L1550.18 685.046 L1550.73 685.046 L1551.29 685.046 L1551.85 685.046 L1552.41 685.046 L1552.97 685.046 L1553.53 685.046 L1554.09 685.046 L1554.65 685.046 L1555.21 685.046 L1555.77 685.046 L1556.33 685.046 L1556.89 685.046 L1557.45 685.046 L1558 685.046 L1558.56 685.046 L1559.12 685.046 L1559.68 685.046 L1560.24 685.046 L1560.8 685.046 L1561.36 685.046 L1561.92 685.046 L1562.48 685.046 L1563.04 685.046 L1563.6 685.046 L1564.16 685.046 L1564.72 685.046 L1565.28 685.046 L1565.83 685.046 L1566.39 685.046 L1566.95 685.046 L1567.51 685.046 L1568.07 685.046 L1568.63 685.046 L1569.19 685.046 L1569.75 685.046 L1570.31 685.046 L1570.87 685.046 L1571.43 685.046 L1571.99 685.046 L1572.55 685.046 L1573.1 685.046 L1573.66 685.046 L1574.22 685.046 L1574.78 685.046 L1575.34 685.046 L1575.9 685.046 L1576.46 685.046 L1577.02 685.046 L1577.58 685.046 L1578.14 685.046 L1578.7 685.046 L1579.26 685.046 L1579.82 685.046 L1580.37 685.046 L1580.93 685.046 L1581.49 685.046 L1582.05 685.046 L1582.61 685.046 L1583.17 685.046 L1583.73 685.046 L1584.29 685.046 L1584.85 685.046 L1585.41 685.046 L1585.97 685.046 L1586.53 685.046 L1587.09 685.046 L1587.65 685.046 L1588.2 685.046 L1588.76 685.046 L1589.32 685.046 L1589.88 685.046 L1590.44 685.046 L1591 685.046 L1591.56 685.046 L1592.12 685.046 L1592.68 685.046 L1593.24 685.046 L1593.8 685.046 L1594.36 685.046 L1594.92 685.046 L1595.47 685.046 L1596.03 685.046 L1596.59 685.046 L1597.15 685.046 L1597.71 685.046 L1598.27 685.046 L1598.83 685.046 L1599.39 685.046 L1599.95 685.046 L1600.51 685.046 L1601.07 685.046 L1601.63 685.046 L1602.19 685.046 L1602.74 685.046 L1603.3 685.046 L1603.86 685.046 L1604.42 685.046 L1604.98 685.046 L1605.54 685.046 L1606.1 685.046 L1606.66 685.046 L1607.22 685.046 L1607.78 685.046 L1608.34 685.046 L1608.9 685.046 L1609.46 685.046 L1610.02 685.046 L1610.57 685.046 L1611.13 685.046 L1611.69 685.046 L1612.25 685.046 L1612.81 685.046 L1613.37 685.046 L1613.93 685.046 L1614.49 685.046 L1615.05 685.046 L1615.61 685.046 L1616.17 685.046 L1616.73 685.046 L1617.29 685.046 L1617.84 685.046 L1618.4 685.046 L1618.96 685.046 L1619.52 685.046 L1620.08 685.046 L1620.64 685.046 L1621.2 685.046 L1621.76 685.046 L1622.32 685.046 L1622.88 685.046 L1623.44 685.046 L1624 685.046 L1624.56 685.046 L1625.11 685.046 L1625.67 685.046 L1626.23 685.046 L1626.79 685.046 L1627.35 685.046 L1627.91 685.046 L1628.47 685.046 L1629.03 685.046 L1629.59 685.046 L1630.15 685.046 L1630.71 685.046 L1631.27 685.046 L1631.83 685.046 L1632.39 685.046 L1632.94 685.046 L1633.5 685.046 L1634.06 685.046 L1634.62 685.046 L1635.18 685.046 L1635.74 685.046 L1636.3 685.046 L1636.86 685.046 L1637.42 685.046 L1637.98 685.046 L1638.54 685.046 L1639.1 685.046 L1639.66 685.046 L1640.21 685.046 L1640.77 685.046 L1641.33 685.046 L1641.89 685.046 L1642.45 685.046 L1643.01 685.046 L1643.57 685.046 L1644.13 685.046 L1644.69 685.046 L1645.25 685.046 L1645.81 685.046 L1646.37 685.046 L1646.93 685.046 L1647.48 685.046 L1648.04 685.046 L1648.6 685.046 L1649.16 685.046 L1649.72 685.046 L1650.28 685.046 L1650.84 685.046 L1651.4 685.046 L1651.96 685.046 L1652.52 685.046 L1653.08 685.046 L1653.64 685.046 L1654.2 685.046 L1654.76 685.046 L1655.31 685.046 L1655.87 685.046 L1656.43 685.046 L1656.99 685.046 L1657.55 685.046 L1658.11 685.046 L1658.67 685.046 L1659.23 685.046 L1659.79 685.046 L1660.35 685.046 L1660.91 685.046 L1661.47 685.046 L1662.03 685.046 L1662.58 685.046 L1663.14 685.046 L1663.7 685.046 L1664.26 685.046 L1664.82 685.046 L1665.38 685.046 L1665.94 685.046 L1666.5 685.046 L1667.06 685.046 L1667.62 685.046 L1668.18 685.046 L1668.74 685.046 L1669.3 685.046 L1669.85 685.046 L1670.41 685.046 L1670.97 685.046 L1671.53 685.046 L1672.09 685.046 L1672.65 685.046 L1673.21 685.046 L1673.77 685.046 L1674.33 685.046 L1674.89 685.046 L1675.45 685.046 L1676.01 685.046 L1676.57 685.046 L1677.13 685.046 L1677.68 685.046 L1678.24 685.046 L1678.8 685.046 L1679.36 685.046 L1679.92 685.046 L1680.48 685.046 L1681.04 685.046 L1681.6 685.046 L1682.16 685.046 L1682.72 685.046 L1683.28 685.046 L1683.84 685.046 L1684.4 685.046 L1684.95 685.046 L1685.51 685.046 L1686.07 685.046 L1686.63 685.046 L1687.19 685.046 L1687.75 685.046 L1688.31 685.046 L1688.87 685.046 L1689.43 685.046 L1689.99 685.046 L1690.55 685.046 L1691.11 685.046 L1691.67 685.046 L1692.23 685.046 L1692.78 685.046 L1693.34 685.046 L1693.9 685.046 L1694.46 685.046 L1695.02 685.046 L1695.58 685.046 L1696.14 685.046 L1696.7 685.046 L1697.26 685.046 L1697.82 685.046 L1698.38 685.046 L1698.94 685.046 L1699.5 685.046 L1700.05 685.046 L1700.61 685.046 L1701.17 685.046 L1701.73 685.046 L1702.29 685.046 L1702.85 685.046 L1703.41 685.046 L1703.97 685.046 L1704.53 685.046 L1705.09 685.046 L1705.65 685.046 L1706.21 685.046 L1706.77 685.046 L1707.32 685.046 L1707.88 685.046 L1708.44 685.046 L1709 685.046 L1709.56 685.046 L1710.12 685.046 L1710.68 685.046 L1711.24 685.046 L1711.8 685.046 L1712.36 685.046 L1712.92 685.046 L1713.48 685.046 L1714.04 685.046 L1714.6 685.046 L1715.15 685.046 L1715.71 685.046 L1716.27 685.046 L1716.83 685.046 L1717.39 685.046 L1717.95 685.046 L1718.51 685.046 L1719.07 685.046 L1719.63 685.046 L1720.19 685.046 L1720.75 685.046 L1721.31 685.046 L1721.87 685.046 L1722.42 685.046 L1722.98 685.046 L1723.54 685.046 L1724.1 685.046 L1724.66 685.046 L1725.22 685.046 L1725.78 685.046 L1726.34 685.046 L1726.9 685.046 L1727.46 685.046 L1728.02 685.046 L1728.58 685.046 L1729.14 685.046 L1729.69 685.046 L1730.25 685.046 L1730.81 685.046 L1731.37 685.046 L1731.93 685.046 L1732.49 685.046 L1733.05 685.046 L1733.61 685.046 L1734.17 685.046 L1734.73 685.046 L1735.29 685.046 L1735.85 685.046 L1736.41 685.046 L1736.97 685.046 L1737.52 685.046 L1738.08 685.046 L1738.64 685.046 L1739.2 685.046 L1739.76 685.046 L1740.32 685.046 L1740.88 685.046 L1741.44 685.046 L1742 685.046 L1742.56 685.046 L1743.12 685.046 L1743.68 685.046 L1744.24 685.046 L1744.79 685.046 L1745.35 685.046 L1745.91 685.046 L1746.47 685.046 L1747.03 685.046 L1747.59 685.046 L1748.15 685.046 L1748.71 685.046 L1749.27 685.046 L1749.83 685.046 L1750.39 685.046 L1750.95 685.046 L1751.51 685.046 L1752.06 685.046 L1752.62 685.046 L1753.18 685.046 L1753.74 685.046 L1754.3 685.046 L1754.86 685.046 L1755.42 685.046 L1755.98 685.046 L1756.54 685.046 L1757.1 685.046 L1757.66 685.046 L1758.22 685.046 L1758.78 685.046 L1759.34 685.046 L1759.89 685.046 L1760.45 685.046 L1761.01 685.046 L1761.57 685.046 L1762.13 685.046 L1762.69 685.046 L1763.25 685.046 L1763.81 685.046 L1764.37 685.046 L1764.93 685.046 L1765.49 685.046 L1766.05 685.046 L1766.61 685.046 L1767.16 685.046 L1767.72 685.046 L1768.28 685.046 L1768.84 685.046 L1769.4 685.046 L1769.96 685.046 L1770.52 685.046 L1771.08 685.046 L1771.64 685.046 L1772.2 685.046 L1772.76 685.046 L1773.32 685.046 L1773.88 685.046 L1774.43 685.046 L1774.99 685.046 L1775.55 685.046 L1776.11 685.046 L1776.67 685.046 L1777.23 685.046 L1777.79 685.046 L1778.35 685.046 L1778.91 685.046 L1779.47 685.046 L1780.03 685.046 L1780.59 685.046 L1781.15 685.046 L1781.71 685.046 L1782.26 685.046 L1782.82 685.046 L1783.38 685.046 L1783.94 685.046 L1784.5 685.046 L1785.06 685.046 L1785.62 685.046 L1786.18 685.046 L1786.74 685.046 L1787.3 685.046 L1787.86 685.046 L1788.42 685.046 L1788.98 685.046 L1789.53 685.046 L1790.09 685.046 L1790.65 685.046 L1791.21 685.046 L1791.77 685.046 L1792.33 685.046 L1792.89 685.046 L1793.45 685.046 L1794.01 685.046 L1794.57 685.046 L1795.13 685.046 L1795.69 685.046 L1796.25 685.046 L1796.8 685.046 L1797.36 685.046 L1797.92 685.046 L1798.48 685.046 L1799.04 685.046 L1799.6 685.046 L1800.16 685.046 L1800.72 685.046 L1801.28 685.046 L1801.84 685.046 L1802.4 685.046 L1802.96 685.046 L1803.52 685.046 L1804.08 685.046 L1804.63 685.046 L1805.19 685.046 L1805.75 685.046 L1806.31 685.046 L1806.87 685.046 L1807.43 685.046 L1807.99 685.046 L1808.55 685.046 L1809.11 685.046 L1809.67 685.046 L1810.23 685.046 L1810.79 685.046 L1811.35 685.046 L1811.9 685.046 L1812.46 685.046 L1813.02 685.046 L1813.58 685.046 L1814.14 685.046 L1814.7 685.046 L1815.26 685.046 L1815.82 685.046 L1816.38 685.046 L1816.94 685.046 L1817.5 685.046 L1818.06 685.046 L1818.62 685.046 L1819.18 685.046 L1819.73 685.046 L1820.29 685.046 L1820.85 685.046 L1821.41 685.046 L1821.97 685.046 L1822.53 685.046 L1823.09 685.046 L1823.65 685.046 L1824.21 685.046 L1824.77 685.046 L1825.33 685.046 L1825.89 685.046 L1826.45 685.046 L1827 685.046 L1827.56 685.046 L1828.12 685.046 L1828.68 685.046 L1829.24 685.046 L1829.8 685.046 L1830.36 685.046 L1830.92 685.046 L1831.48 685.046 L1832.04 685.046 L1832.6 685.046 L1833.16 685.046 L1833.72 685.046 L1834.27 685.046 L1834.83 685.046 L1835.39 685.046 L1835.95 685.046 L1836.51 685.046 L1837.07 685.046 L1837.63 685.046 L1838.19 685.046 L1838.19 683.224 L1837.63 683.224 L1837.07 683.224 L1836.51 683.224 L1835.95 683.224 L1835.39 683.224 L1834.83 683.224 L1834.27 683.224 L1833.72 683.224 L1833.16 683.224 L1832.6 683.224 L1832.04 683.224 L1831.48 683.224 L1830.92 683.224 L1830.36 683.224 L1829.8 683.224 L1829.24 683.224 L1828.68 683.224 L1828.12 683.224 L1827.56 683.224 L1827 683.224 L1826.45 683.224 L1825.89 683.224 L1825.33 683.224 L1824.77 683.224 L1824.21 683.224 L1823.65 683.224 L1823.09 683.224 L1822.53 683.224 L1821.97 683.224 L1821.41 683.224 L1820.85 683.224 L1820.29 683.224 L1819.73 683.224 L1819.18 683.224 L1818.62 683.224 L1818.06 683.224 L1817.5 683.224 L1816.94 683.224 L1816.38 683.224 L1815.82 683.224 L1815.26 683.224 L1814.7 683.224 L1814.14 683.224 L1813.58 683.224 L1813.02 683.224 L1812.46 683.224 L1811.9 683.224 L1811.35 683.224 L1810.79 683.224 L1810.23 683.224 L1809.67 683.224 L1809.11 683.224 L1808.55 683.224 L1807.99 683.224 L1807.43 683.224 L1806.87 683.224 L1806.31 683.224 L1805.75 683.224 L1805.19 683.224 L1804.63 683.224 L1804.08 683.224 L1803.52 683.224 L1802.96 683.224 L1802.4 683.224 L1801.84 683.224 L1801.28 683.224 L1800.72 683.224 L1800.16 683.224 L1799.6 683.224 L1799.04 683.224 L1798.48 683.224 L1797.92 683.224 L1797.36 683.224 L1796.8 683.224 L1796.25 683.224 L1795.69 683.224 L1795.13 683.224 L1794.57 683.224 L1794.01 683.224 L1793.45 683.224 L1792.89 683.224 L1792.33 683.224 L1791.77 683.224 L1791.21 683.224 L1790.65 683.224 L1790.09 683.224 L1789.53 683.224 L1788.98 683.224 L1788.42 683.224 L1787.86 683.224 L1787.3 683.224 L1786.74 683.224 L1786.18 683.224 L1785.62 683.224 L1785.06 683.224 L1784.5 683.224 L1783.94 683.224 L1783.38 683.224 L1782.82 683.224 L1782.26 683.224 L1781.71 683.224 L1781.15 683.224 L1780.59 683.224 L1780.03 683.224 L1779.47 683.224 L1778.91 683.224 L1778.35 683.224 L1777.79 683.224 L1777.23 683.224 L1776.67 683.224 L1776.11 683.224 L1775.55 683.224 L1774.99 683.224 L1774.43 683.224 L1773.88 683.224 L1773.32 683.224 L1772.76 683.224 L1772.2 683.224 L1771.64 683.224 L1771.08 683.224 L1770.52 683.224 L1769.96 683.224 L1769.4 683.224 L1768.84 683.224 L1768.28 683.224 L1767.72 683.224 L1767.16 683.224 L1766.61 683.224 L1766.05 683.224 L1765.49 683.224 L1764.93 683.224 L1764.37 683.224 L1763.81 683.224 L1763.25 683.224 L1762.69 683.224 L1762.13 683.224 L1761.57 683.224 L1761.01 683.224 L1760.45 683.224 L1759.89 683.224 L1759.34 683.224 L1758.78 683.224 L1758.22 683.224 L1757.66 683.224 L1757.1 683.224 L1756.54 683.224 L1755.98 683.224 L1755.42 683.224 L1754.86 683.224 L1754.3 683.224 L1753.74 683.224 L1753.18 683.224 L1752.62 683.224 L1752.06 683.224 L1751.51 683.224 L1750.95 683.224 L1750.39 683.224 L1749.83 683.224 L1749.27 683.224 L1748.71 683.224 L1748.15 683.224 L1747.59 683.224 L1747.03 683.224 L1746.47 683.224 L1745.91 683.224 L1745.35 683.224 L1744.79 683.224 L1744.24 683.224 L1743.68 683.224 L1743.12 683.224 L1742.56 683.224 L1742 683.224 L1741.44 683.224 L1740.88 683.224 L1740.32 683.224 L1739.76 683.224 L1739.2 683.224 L1738.64 683.224 L1738.08 683.224 L1737.52 683.224 L1736.97 683.224 L1736.41 683.224 L1735.85 683.224 L1735.29 683.224 L1734.73 683.224 L1734.17 683.224 L1733.61 683.224 L1733.05 683.224 L1732.49 683.224 L1731.93 683.224 L1731.37 683.224 L1730.81 683.224 L1730.25 683.224 L1729.69 683.224 L1729.14 683.224 L1728.58 683.224 L1728.02 683.224 L1727.46 683.224 L1726.9 683.224 L1726.34 683.224 L1725.78 683.224 L1725.22 683.224 L1724.66 683.224 L1724.1 683.224 L1723.54 683.224 L1722.98 683.224 L1722.42 683.224 L1721.87 683.224 L1721.31 683.224 L1720.75 683.224 L1720.19 683.224 L1719.63 683.224 L1719.07 683.224 L1718.51 683.224 L1717.95 683.224 L1717.39 683.224 L1716.83 683.224 L1716.27 683.224 L1715.71 683.224 L1715.15 683.224 L1714.6 683.224 L1714.04 683.224 L1713.48 683.224 L1712.92 683.224 L1712.36 683.224 L1711.8 683.224 L1711.24 683.224 L1710.68 683.224 L1710.12 683.224 L1709.56 683.224 L1709 683.224 L1708.44 683.224 L1707.88 683.224 L1707.32 683.224 L1706.77 683.224 L1706.21 683.224 L1705.65 683.224 L1705.09 683.224 L1704.53 683.224 L1703.97 683.224 L1703.41 683.224 L1702.85 683.224 L1702.29 683.224 L1701.73 683.224 L1701.17 683.224 L1700.61 683.224 L1700.05 683.224 L1699.5 683.224 L1698.94 683.224 L1698.38 683.224 L1697.82 683.224 L1697.26 683.224 L1696.7 683.224 L1696.14 683.224 L1695.58 683.224 L1695.02 683.224 L1694.46 683.224 L1693.9 683.224 L1693.34 683.224 L1692.78 683.224 L1692.23 683.224 L1691.67 683.224 L1691.11 683.224 L1690.55 683.224 L1689.99 683.224 L1689.43 683.224 L1688.87 683.224 L1688.31 683.224 L1687.75 683.224 L1687.19 683.224 L1686.63 683.224 L1686.07 683.224 L1685.51 683.224 L1684.95 683.224 L1684.4 683.224 L1683.84 683.224 L1683.28 683.224 L1682.72 683.224 L1682.16 683.224 L1681.6 683.224 L1681.04 683.224 L1680.48 683.224 L1679.92 683.224 L1679.36 683.224 L1678.8 683.224 L1678.24 683.224 L1677.68 683.224 L1677.13 683.224 L1676.57 683.224 L1676.01 683.224 L1675.45 683.224 L1674.89 683.224 L1674.33 683.224 L1673.77 683.224 L1673.21 683.224 L1672.65 683.224 L1672.09 683.224 L1671.53 683.224 L1670.97 683.224 L1670.41 683.224 L1669.85 683.224 L1669.3 683.224 L1668.74 683.224 L1668.18 683.224 L1667.62 683.224 L1667.06 683.224 L1666.5 683.224 L1665.94 683.224 L1665.38 683.224 L1664.82 683.224 L1664.26 683.224 L1663.7 683.224 L1663.14 683.224 L1662.58 683.224 L1662.03 683.224 L1661.47 683.224 L1660.91 683.224 L1660.35 683.224 L1659.79 683.224 L1659.23 683.224 L1658.67 683.224 L1658.11 683.224 L1657.55 683.224 L1656.99 683.224 L1656.43 683.224 L1655.87 683.224 L1655.31 683.224 L1654.76 683.224 L1654.2 683.224 L1653.64 683.224 L1653.08 683.224 L1652.52 683.224 L1651.96 683.224 L1651.4 683.224 L1650.84 683.224 L1650.28 683.224 L1649.72 683.224 L1649.16 683.224 L1648.6 683.224 L1648.04 683.224 L1647.48 683.224 L1646.93 683.224 L1646.37 683.224 L1645.81 683.224 L1645.25 683.224 L1644.69 683.224 L1644.13 683.224 L1643.57 683.224 L1643.01 683.224 L1642.45 683.224 L1641.89 683.224 L1641.33 683.224 L1640.77 683.224 L1640.21 683.224 L1639.66 683.224 L1639.1 683.224 L1638.54 683.224 L1637.98 683.224 L1637.42 683.224 L1636.86 683.224 L1636.3 683.224 L1635.74 683.224 L1635.18 683.224 L1634.62 683.224 L1634.06 683.224 L1633.5 683.224 L1632.94 683.224 L1632.39 683.224 L1631.83 683.224 L1631.27 683.224 L1630.71 683.224 L1630.15 683.224 L1629.59 683.224 L1629.03 683.224 L1628.47 683.224 L1627.91 683.224 L1627.35 683.224 L1626.79 683.224 L1626.23 683.224 L1625.67 683.224 L1625.11 683.224 L1624.56 683.224 L1624 683.224 L1623.44 683.224 L1622.88 683.224 L1622.32 683.224 L1621.76 683.224 L1621.2 683.224 L1620.64 683.224 L1620.08 683.224 L1619.52 683.224 L1618.96 683.224 L1618.4 683.224 L1617.84 683.224 L1617.29 683.224 L1616.73 683.224 L1616.17 683.224 L1615.61 683.224 L1615.05 683.224 L1614.49 683.224 L1613.93 683.224 L1613.37 683.224 L1612.81 683.224 L1612.25 683.224 L1611.69 683.224 L1611.13 683.224 L1610.57 683.224 L1610.02 683.224 L1609.46 683.224 L1608.9 683.224 L1608.34 683.224 L1607.78 683.224 L1607.22 683.224 L1606.66 683.224 L1606.1 683.224 L1605.54 683.224 L1604.98 683.224 L1604.42 683.224 L1603.86 683.224 L1603.3 683.224 L1602.74 683.224 L1602.19 683.224 L1601.63 683.224 L1601.07 683.224 L1600.51 683.224 L1599.95 683.224 L1599.39 683.224 L1598.83 683.224 L1598.27 683.224 L1597.71 683.224 L1597.15 683.224 L1596.59 683.224 L1596.03 683.224 L1595.47 683.224 L1594.92 683.224 L1594.36 683.224 L1593.8 683.224 L1593.24 683.224 L1592.68 683.224 L1592.12 683.224 L1591.56 683.224 L1591 683.224 L1590.44 683.224 L1589.88 683.224 L1589.32 683.224 L1588.76 683.224 L1588.2 683.224 L1587.65 683.224 L1587.09 683.224 L1586.53 683.224 L1585.97 683.224 L1585.41 683.224 L1584.85 683.224 L1584.29 683.224 L1583.73 683.224 L1583.17 683.224 L1582.61 683.224 L1582.05 683.224 L1581.49 683.224 L1580.93 683.224 L1580.37 683.224 L1579.82 683.224 L1579.26 683.224 L1578.7 683.224 L1578.14 683.224 L1577.58 683.224 L1577.02 683.224 L1576.46 683.224 L1575.9 683.224 L1575.34 683.224 L1574.78 683.224 L1574.22 683.224 L1573.66 683.224 L1573.1 683.224 L1572.55 683.224 L1571.99 683.224 L1571.43 683.224 L1570.87 683.224 L1570.31 683.224 L1569.75 683.224 L1569.19 683.224 L1568.63 683.224 L1568.07 683.224 L1567.51 683.224 L1566.95 683.224 L1566.39 683.224 L1565.83 683.224 L1565.28 683.224 L1564.72 683.224 L1564.16 683.224 L1563.6 683.224 L1563.04 683.224 L1562.48 683.224 L1561.92 683.224 L1561.36 683.224 L1560.8 683.224 L1560.24 683.224 L1559.68 683.224 L1559.12 683.224 L1558.56 683.224 L1558 683.224 L1557.45 683.224 L1556.89 683.224 L1556.33 683.224 L1555.77 683.224 L1555.21 683.224 L1554.65 683.224 L1554.09 683.224 L1553.53 683.224 L1552.97 683.224 L1552.41 683.224 L1551.85 683.224 L1551.29 683.224 L1550.73 683.224 L1550.18 683.224 L1549.62 683.224 L1549.06 683.224 L1548.5 683.224 L1547.94 683.224 L1547.38 683.224 L1546.82 683.224 L1546.26 683.224 L1545.7 683.224 L1545.14 683.224 L1544.58 683.224 L1544.02 683.224 L1543.46 683.224 L1542.9 683.224 L1542.35 683.224 L1541.79 683.224 L1541.23 683.224 L1540.67 683.224 L1540.11 683.224 L1539.55 683.224 L1538.99 683.224 L1538.43 683.224 L1537.87 683.224 L1537.31 683.224 L1536.75 683.224 L1536.19 683.224 L1535.63 683.224 L1535.08 683.224 L1534.52 683.224 L1533.96 683.224 L1533.4 683.224 L1532.84 683.224 L1532.28 683.224 L1531.72 683.224 L1531.16 683.224 L1530.6 683.224 L1530.04 683.224 L1529.48 683.224 L1528.92 683.224 L1528.36 683.224 L1527.81 683.224 L1527.25 683.224 L1526.69 683.224 L1526.13 683.224 L1525.57 683.224 L1525.01 683.224 L1524.45 683.224 L1523.89 683.224 L1523.33 683.224 L1522.77 683.224 L1522.21 683.224 L1521.65 683.224 L1521.09 683.224 L1520.53 683.224 L1519.98 683.224 L1519.42 683.224 L1518.86 683.224 L1518.3 683.224 L1517.74 683.224 L1517.18 683.224 L1516.62 683.224 L1516.06 683.224 L1515.5 683.224 L1514.94 683.224 L1514.38 683.224 L1513.82 683.224 L1513.26 683.224 L1512.71 683.224 L1512.15 683.224 L1511.59 683.224 L1511.03 683.224 L1510.47 683.224 L1509.91 683.224 L1509.35 683.224 L1508.79 683.224 L1508.23 683.224 L1507.67 683.224 L1507.11 683.224 L1506.55 683.224 L1505.99 683.224 L1505.44 683.224 L1504.88 683.224 L1504.32 683.224 L1503.76 683.224 L1503.2 683.224 L1502.64 683.224 L1502.08 683.224 L1501.52 683.224 L1500.96 683.224 L1500.4 683.224 L1499.84 683.224 L1499.28 683.224 L1498.72 683.224 L1498.16 683.224 L1497.61 683.224 L1497.05 683.224 L1496.49 683.224 L1495.93 683.224 L1495.37 683.224 L1494.81 683.224 L1494.25 683.224 L1493.69 683.224 L1493.13 683.224 L1492.57 683.224 L1492.01 683.224 L1491.45 683.224 L1490.89 683.224 L1490.34 683.224 L1489.78 683.224 L1489.22 683.224 L1488.66 683.224 L1488.1 683.224 L1487.54 683.224 L1486.98 683.224 L1486.42 683.224 L1485.86 683.224 L1485.3 683.224 L1484.74 683.224 L1484.18 683.224 L1483.62 683.224 L1483.07 683.224 L1482.51 683.224 L1481.95 683.224 L1481.39 683.224 L1480.83 683.224 L1480.27 683.224 L1479.71 683.224 L1479.15 683.224 L1478.59 683.224 L1478.03 683.224 L1477.47 683.224 L1476.91 683.224 L1476.35 683.224 L1475.79 683.224 L1475.24 683.224 L1474.68 683.224 L1474.12 683.224 L1473.56 683.224 L1473 683.224 L1472.44 683.224 L1471.88 683.224 L1471.32 683.224 L1470.76 683.224 L1470.2 683.224 L1469.64 683.224 L1469.08 683.224 L1468.52 683.224 L1467.97 683.224 L1467.41 683.224 L1466.85 683.224 L1466.29 683.224 L1465.73 683.224 L1465.17 683.224 L1464.61 683.224 L1464.05 683.224 L1463.49 683.224 L1462.93 683.224 L1462.37 683.224 L1461.81 683.224 L1461.25 683.224 L1460.7 683.224 L1460.14 683.224 L1459.58 683.224 L1459.02 683.224 L1458.46 683.224 L1457.9 683.224 L1457.34 683.224 L1456.78 683.224 L1456.22 683.224 L1455.66 683.224 L1455.1 683.224 L1454.54 683.224 L1453.98 683.224 L1453.42 683.224 L1452.87 683.224 L1452.31 683.224 L1451.75 683.224 L1451.19 683.224 L1450.63 683.224 L1450.07 683.224 L1449.51 683.224 L1448.95 683.224 L1448.39 683.224 L1447.83 683.224 L1447.27 683.224 L1446.71 683.224 L1446.15 683.224 L1445.6 683.224 L1445.04 683.224 L1444.48 683.224 L1443.92 683.224 L1443.36 683.224 L1442.8 683.224 L1442.24 683.224 L1441.68 683.224 L1441.12 683.224 L1440.56 683.224 L1440 683.224 L1439.44 683.224 L1438.88 683.224 L1438.33 683.224 L1437.77 683.224 L1437.21 683.224 L1436.65 683.224 L1436.09 683.224 L1435.53 683.224 L1434.97 683.224 L1434.41 683.224 L1433.85 683.224 L1433.29 683.224 L1432.73 683.224 L1432.17 683.224 L1431.61 683.224 L1431.05 683.224 L1430.5 683.224 L1429.94 683.224 L1429.38 683.224 L1428.82 683.224 L1428.26 683.224 L1427.7 683.224 L1427.14 683.224 L1426.58 683.224 L1426.02 683.224 L1425.46 683.224 L1424.9 683.224 L1424.34 683.224 L1423.78 683.224 L1423.23 683.224 L1422.67 683.224 L1422.11 683.224 L1421.55 683.224 L1420.99 683.224 L1420.43 683.224 L1419.87 683.224 L1419.31 683.224 L1418.75 683.224 L1418.19 683.224 L1417.63 683.224 L1417.07 683.224 L1416.51 683.224 L1415.95 683.224 L1415.4 683.224 L1414.84 683.224 L1414.28 683.224 L1413.72 683.224 L1413.16 683.224 L1412.6 683.224 L1412.04 683.224 L1411.48 683.224 L1410.92 683.224 L1410.36 683.224 L1409.8 683.224 L1409.24 683.224 L1408.68 683.224 L1408.13 683.224 L1407.57 683.224 L1407.01 683.224 L1406.45 683.224 L1405.89 683.224 L1405.33 683.224 L1404.77 683.224 L1404.21 683.224 L1403.65 683.224 L1403.09 683.224 L1402.53 683.224 L1401.97 683.224 L1401.41 683.224 L1400.86 683.224 L1400.3 683.224 L1399.74 683.224 L1399.18 683.224 L1398.62 683.224 L1398.06 683.224 L1397.5 683.224 L1396.94 683.224 L1396.38 683.224 L1395.82 683.224 L1395.26 683.224 L1394.7 683.224 L1394.14 683.224 L1393.58 683.224 L1393.03 683.224 L1392.47 683.224 L1391.91 683.224 L1391.35 683.224 L1390.79 683.224 L1390.23 683.224 L1389.67 683.224 L1389.11 683.224 L1388.55 683.224 L1387.99 683.224 L1387.43 683.224 L1386.87 683.224 L1386.31 683.224 L1385.76 683.224 L1385.2 683.224 L1384.64 683.224 L1384.08 683.224 L1383.52 683.224 L1382.96 683.224 L1382.4 683.224 L1381.84 683.224 L1381.28 683.224 L1380.72 683.224 L1380.16 683.224 L1379.6 683.224 L1379.04 683.224 L1378.49 683.224 L1377.93 683.224 L1377.37 683.224 L1376.81 683.224 L1376.25 683.224 L1375.69 683.224 L1375.13 683.224 L1374.57 683.224 L1374.01 683.224 L1373.45 683.224 L1372.89 683.224 L1372.33 683.224 L1371.77 683.224 L1371.21 683.224 L1370.66 683.224 L1370.1 683.224 L1369.54 683.224 L1368.98 683.224 L1368.42 683.224 L1367.86 683.224 L1367.3 683.224 L1366.74 683.224 L1366.18 683.224 L1365.62 683.224 L1365.06 683.224 L1364.5 683.224 L1363.94 683.224 L1363.39 683.224 L1362.83 683.224 L1362.27 683.224 L1361.71 683.224 L1361.15 683.224 L1360.59 683.224 L1360.03 683.224 L1359.47 683.224 L1358.91 683.224 L1358.35 683.224 L1357.79 683.224 L1357.23 683.224 L1356.67 683.224 L1356.12 683.224 L1355.56 683.224 L1355 683.224 L1354.44 683.224 L1353.88 683.224 L1353.32 683.224 L1352.76 683.224 L1352.2 683.224 L1351.64 683.224 L1351.08 683.224 L1350.52 683.224 L1349.96 683.224 L1349.4 683.224 L1348.84 683.224 L1348.29 683.224 L1347.73 683.224 L1347.17 683.224 L1346.61 683.224 L1346.05 683.224 L1345.49 683.224 L1344.93 683.224 L1344.37 683.224 L1343.81 683.224 L1343.25 683.224 L1342.69 683.224 L1342.13 683.224 L1341.57 683.224 L1341.02 683.224 L1340.46 683.224 L1339.9 683.224 L1339.34 683.224 L1338.78 683.224 L1338.22 683.224 L1337.66 683.224 L1337.1 683.224 L1336.54 683.224 L1335.98 683.224 L1335.42 683.224 L1334.86 683.224 L1334.3 683.224 L1333.75 683.224 L1333.19 683.224 L1332.63 683.224 L1332.07 683.224 L1331.51 683.224 L1330.95 683.224 L1330.39 683.224 L1329.83 683.224 L1329.27 683.224 L1328.71 683.224 L1328.15 683.224 L1327.59 683.224 L1327.03 683.224 L1326.47 683.224 L1325.92 683.224 L1325.36 683.224 L1324.8 683.224 L1324.24 683.224 L1323.68 683.224 L1323.12 683.224 L1322.56 683.224 L1322 683.224 L1321.44 683.224 L1320.88 683.224 L1320.32 683.224 L1319.76 683.224 L1319.2 683.224 L1318.65 683.224 L1318.09 683.224 L1317.53 683.224 L1316.97 683.224 L1316.41 683.224 L1315.85 683.224 L1315.29 683.224 L1314.73 683.224 L1314.17 683.224 L1313.61 683.224 L1313.05 683.224 L1312.49 683.224 L1311.93 683.224 L1311.38 683.224 L1310.82 683.224 L1310.26 683.224 L1309.7 683.224 L1309.14 683.224 L1308.58 683.224 L1308.02 683.224 L1307.46 683.224 L1306.9 683.224 L1306.34 683.224 L1305.78 683.224 L1305.22 683.224 L1304.66 683.224 L1304.1 683.224 L1303.55 683.224 L1302.99 683.224 L1302.43 683.224 L1301.87 683.224 L1301.31 683.224 L1300.75 683.224 L1300.19 683.224 L1299.63 683.224 L1299.07 683.224 L1298.51 683.224 L1297.95 683.224 L1297.39 683.224 L1296.83 683.224 L1296.28 683.224 L1295.72 683.224 L1295.16 683.224 L1294.6 683.224 L1294.04 683.224 L1293.48 683.224 L1292.92 683.224 L1292.36 683.224 L1291.8 683.224 L1291.24 683.224 L1290.68 683.224 L1290.12 683.224 L1289.56 683.224 L1289 683.224 L1288.45 683.224 L1287.89 683.224 L1287.33 683.224 L1286.77 683.224 L1286.21 683.224 L1285.65 683.224 L1285.09 683.224 L1284.53 683.224 L1283.97 683.224 L1283.41 683.224 L1282.85 683.224 L1282.29 683.224 L1281.73 683.224 L1281.18 683.224 L1280.62 683.224 L1280.06 683.224 L1279.5 683.224 L1278.94 683.224 L1278.38 683.224 L1277.82 683.224 L1277.26 683.224 L1276.7 683.224 L1276.14 683.224 L1275.58 683.224 L1275.02 683.224 L1274.46 683.224 L1273.91 683.224 L1273.35 683.224 L1272.79 683.224 L1272.23 683.224 L1271.67 683.224 L1271.11 683.224 L1270.55 683.224 L1269.99 683.224 L1269.43 683.224 L1268.87 683.224 L1268.31 683.224 L1267.75 683.224 L1267.19 683.224 L1266.63 683.224 L1266.08 683.224 L1265.52 683.224 L1264.96 683.224 L1264.4 683.224 L1263.84 683.224 L1263.28 683.224 L1262.72 683.224 L1262.16 683.224 L1261.6 683.224 L1261.04 683.224 L1260.48 683.224 L1259.92 683.224 L1259.36 683.224 L1258.81 683.224 L1258.25 683.224 L1257.69 683.224 L1257.13 683.224 L1256.57 683.224 L1256.01 683.224 L1255.45 683.224 L1254.89 683.224 L1254.33 683.224 L1253.77 683.224 L1253.21 683.224 L1252.65 683.224 L1252.09 683.224 L1251.54 683.224 L1250.98 683.224 L1250.42 683.224 L1249.86 683.224 L1249.3 683.224 L1248.74 683.224 L1248.18 683.224 L1247.62 683.224 L1247.06 683.224 L1246.5 683.224 L1245.94 683.224 L1245.38 683.224 L1244.82 683.224 L1244.26 683.224 L1243.71 683.224 L1243.15 683.224 L1242.59 683.224 L1242.03 683.224 L1241.47 683.224 L1240.91 683.224 L1240.35 683.224 L1239.79 683.224 L1239.23 683.224 L1238.67 683.224 L1238.11 683.224 L1237.55 683.224 L1236.99 683.224 L1236.44 683.224 L1235.88 683.224 L1235.32 683.224 L1234.76 683.224 L1234.2 683.224 L1233.64 683.224 L1233.08 683.224 L1232.52 683.224 L1231.96 683.224 L1231.4 683.224 L1230.84 683.224 L1230.28 683.224 L1229.72 683.224 L1229.17 683.224 L1228.61 683.224 L1228.05 683.224 L1227.49 683.224 L1226.93 683.224 L1226.37 683.224 L1225.81 683.224 L1225.25 683.224 L1224.69 683.224 L1224.13 683.224 L1223.57 683.224 L1223.01 683.224 L1222.45 683.224 L1221.89 683.224 L1221.34 683.224 L1220.78 683.224 L1220.22 683.224 L1219.66 683.224 L1219.1 683.224 L1218.54 683.224 L1217.98 683.224 L1217.42 683.224 L1216.86 683.224 L1216.3 683.224 L1215.74 683.224 L1215.18 683.224 L1214.62 683.224 L1214.07 683.224 L1213.51 683.224 L1212.95 683.224 L1212.39 683.224 L1211.83 683.224 L1211.27 683.224 L1210.71 683.224 L1210.15 683.224 L1209.59 683.224 L1209.03 683.224 L1208.47 683.224 L1207.91 683.224 L1207.35 683.224 L1206.8 683.224 L1206.24 683.224 L1205.68 683.224 L1205.12 683.224 L1204.56 683.224 L1204 683.224 L1203.44 683.224 L1202.88 683.224 L1202.32 683.224 L1201.76 683.224 L1201.2 683.224 L1200.64 683.224 L1200.08 683.224 L1199.52 683.224 L1198.97 683.224 L1198.41 683.224 L1197.85 683.224 L1197.29 683.224 L1196.73 683.224 L1196.17 683.224 L1195.61 683.224 L1195.05 683.224 L1194.49 683.224 L1193.93 683.224 L1193.37 683.224 L1192.81 683.224 L1192.25 683.224 L1191.7 683.224 L1191.14 683.224 L1190.58 683.224 L1190.02 683.224 L1189.46 683.224 L1188.9 683.224 L1188.34 683.224 L1187.78 683.224 L1187.22 683.224 L1186.66 683.224 L1186.1 683.224 L1185.54 683.224 L1184.98 683.224 L1184.43 683.224 L1183.87 683.224 L1183.31 683.224 L1182.75 683.224 L1182.19 683.224 L1181.63 683.224 L1181.07 683.224 L1180.51 683.224 L1179.95 683.224 L1179.39 683.224 L1178.83 683.224 L1178.27 683.224 L1177.71 683.224 L1177.15 683.224 L1176.6 683.224 L1176.04 683.224 L1175.48 683.224 L1174.92 683.224 L1174.36 683.224 L1173.8 683.224 L1173.24 683.224 L1172.68 683.224 L1172.12 683.224 L1171.56 683.224 L1171 683.224 L1170.44 683.224 L1169.88 683.224 L1169.33 683.224 L1168.77 683.224 L1168.21 683.224 L1167.65 683.224 L1167.09 683.224 L1166.53 683.224 L1165.97 683.224 L1165.41 683.224 L1164.85 683.224 L1164.29 683.224 L1163.73 683.224 L1163.17 683.224 L1162.61 683.224 L1162.05 683.224 L1161.5 683.224 L1160.94 683.224 L1160.38 683.224 L1159.82 683.224 L1159.26 683.224 L1158.7 683.224 L1158.14 683.224 L1157.58 683.224 L1157.02 683.224 L1156.46 683.224 L1155.9 683.224 L1155.34 683.224 L1154.78 683.224 L1154.23 683.224 L1153.67 683.224 L1153.11 683.224 L1152.55 683.224 L1151.99 683.224 L1151.43 683.224 L1150.87 683.224 L1150.31 683.224 L1149.75 683.224 L1149.19 683.224 L1148.63 683.224 L1148.07 683.224 L1147.51 683.224 L1146.96 683.224 L1146.4 683.224 L1145.84 683.224 L1145.28 683.224 L1144.72 683.224 L1144.16 683.224 L1143.6 683.224 L1143.04 683.224 L1142.48 683.224 L1141.92 683.224 L1141.36 683.224 L1140.8 683.224 L1140.24 683.224 L1139.68 683.224 L1139.13 683.224 L1138.57 683.224 L1138.01 683.224 L1137.45 683.224 L1136.89 683.224 L1136.33 683.224 L1135.77 683.224 L1135.21 683.224 L1134.65 683.224 L1134.09 683.224 L1133.53 683.224 L1132.97 683.224 L1132.41 683.224 L1131.86 683.224 L1131.3 683.224 L1130.74 683.224 L1130.18 683.224 L1129.62 683.224 L1129.06 683.224 L1128.5 683.224 L1127.94 683.224 L1127.38 683.224 L1126.82 683.224 L1126.26 683.224 L1125.7 683.224 L1125.14 683.224 L1124.59 683.224 L1124.03 683.224 L1123.47 683.224 L1122.91 683.224 L1122.35 683.224 L1121.79 683.224 L1121.23 683.224 L1120.67 683.224 L1120.11 683.224 L1119.55 683.224 L1118.99 683.224 L1118.43 683.224 L1117.87 683.224 L1117.31 683.224 L1116.76 683.224 L1116.2 683.224 L1115.64 683.224 L1115.08 683.224 L1114.52 683.224 L1113.96 683.224 L1113.4 683.224 L1112.84 683.224 L1112.28 683.224 L1111.72 683.224 L1111.16 683.224 L1110.6 683.224 L1110.04 683.224 L1109.49 683.224 L1108.93 683.224 L1108.37 683.224 L1107.81 683.224 L1107.25 683.224 L1106.69 683.224 L1106.13 683.224 L1105.57 683.224 L1105.01 683.224 L1104.45 683.224 L1103.89 683.224 L1103.33 683.224 L1102.77 683.224 L1102.22 683.224 L1101.66 683.224 L1101.1 683.224 L1100.54 683.224 L1099.98 683.224 L1099.42 683.224 L1098.86 683.224 L1098.3 683.224 L1097.74 683.224 L1097.18 683.224 L1096.62 683.224 L1096.06 683.224 L1095.5 683.224 L1094.94 683.224 L1094.39 683.224 L1093.83 683.224 L1093.27 683.224 L1092.71 683.224 L1092.15 683.224 L1091.59 683.224 L1091.03 683.224 L1090.47 683.224 L1089.91 683.224 L1089.35 683.224 L1088.79 683.224 L1088.23 683.224 L1087.67 683.224 L1087.12 683.224 L1086.56 683.224 L1086 683.224 L1085.44 683.224 L1084.88 683.224 L1084.32 683.224 L1083.76 683.224 L1083.2 683.224 L1082.64 683.224 L1082.08 683.224 L1081.52 683.224 L1080.96 683.224 L1080.4 683.224 L1079.85 683.224 L1079.29 683.224 L1078.73 683.224 L1078.17 683.224 L1077.61 683.224 L1077.05 683.224 L1076.49 683.224 L1075.93 683.224 L1075.37 683.224 L1074.81 683.224 L1074.25 683.224 L1073.69 683.224 L1073.13 683.224 L1072.57 683.224 L1072.02 683.224 L1071.46 683.224 L1070.9 683.224 L1070.34 683.224 L1069.78 683.224 L1069.22 683.224 L1068.66 683.224 L1068.1 683.224 L1067.54 683.224 L1066.98 683.224 L1066.42 683.224 L1065.86 683.224 L1065.3 683.224 L1064.75 683.224 L1064.19 683.224 L1063.63 683.224 L1063.07 683.224 L1062.51 683.224 L1061.95 683.224 L1061.39 683.224 L1060.83 683.224 L1060.27 683.224 L1059.71 683.224 L1059.15 683.224 L1058.59 683.224 L1058.03 683.224 L1057.48 683.224 L1056.92 683.224 L1056.36 683.224 L1055.8 683.224 L1055.24 683.224 L1054.68 683.224 L1054.12 683.224 L1053.56 683.224 L1053 683.224 L1052.44 683.224 L1051.88 683.224 L1051.32 683.224 L1050.76 683.224 L1050.2 683.224 L1049.65 683.224 L1049.09 683.224 L1048.53 683.224 L1047.97 683.224 L1047.41 683.224 L1046.85 683.224 L1046.29 683.224 L1045.73 683.224 L1045.17 683.224 L1044.61 683.224 L1044.05 683.224 L1043.49 683.224 L1042.93 683.224 L1042.38 683.224 L1041.82 683.224 L1041.26 683.224 L1040.7 683.224 L1040.14 683.224 L1039.58 683.224 L1039.02 683.224 L1038.46 683.224 L1037.9 683.224 L1037.34 683.224 L1036.78 683.224 L1036.22 683.224 L1035.66 683.224 L1035.1 683.224 L1034.55 683.224 L1033.99 683.224 L1033.43 683.224 L1032.87 683.224 L1032.31 683.224 L1031.75 683.224 L1031.19 683.224 L1030.63 683.224 L1030.07 683.224 L1029.51 683.224 L1028.95 683.224 L1028.39 683.224 L1027.83 683.224 L1027.28 683.224 L1026.72 683.224 L1026.16 683.224 L1025.6 683.224 L1025.04 683.224 L1024.48 683.224 L1023.92 683.224 L1023.36 683.224 L1022.8 683.224 L1022.24 683.224 L1021.68 683.224 L1021.12 683.224 L1020.56 683.224 L1020.01 683.224 L1019.45 683.224 L1018.89 683.224 L1018.33 683.224 L1017.77 683.224 L1017.21 683.224 L1016.65 683.224 L1016.09 683.224 L1015.53 683.224 L1014.97 683.224 L1014.41 683.224 L1013.85 683.224 L1013.29 683.224 L1012.73 683.224 L1012.18 683.224 L1011.62 683.224 L1011.06 683.224 L1010.5 683.224 L1009.94 683.224 L1009.38 683.224 L1008.82 683.224 L1008.26 683.224 L1007.7 683.224 L1007.14 683.224 L1006.58 683.224 L1006.02 683.224 L1005.46 683.224 L1004.91 683.224 L1004.35 683.224 L1003.79 683.224 L1003.23 683.224 L1002.67 683.224 L1002.11 683.224 L1001.55 683.224 L1000.99 683.224 L1000.43 683.224 L999.872 683.224 L999.313 683.224 L998.754 683.224 L998.194 683.224 L997.635 683.224 L997.076 683.224 L996.517 683.224 L995.957 683.224 L995.398 683.224 L994.839 683.224 L994.28 683.224 L993.72 683.224 L993.161 683.224 L992.602 683.224 L992.043 683.224 L991.483 683.224 L990.924 683.224 L990.365 683.224 L989.806 683.224 L989.246 683.224 L988.687 683.224 L988.128 683.224 L987.569 683.224 L987.009 683.224 L986.45 683.224 L985.891 683.224 L985.332 683.224 L984.772 683.224 L984.213 683.224 L983.654 683.224 L983.095 683.224 L982.535 683.224 L981.976 683.224 L981.417 683.224 L980.858 683.224 L980.298 683.224 L979.739 683.224 L979.18 683.224 L978.621 683.224 L978.061 683.224 L977.502 683.224 L976.943 683.224 L976.384 683.224 L975.824 683.224 L975.265 683.224 L974.706 683.224 L974.147 683.224 L973.587 683.224 L973.028 683.224 L972.469 683.224 L971.91 683.224 L971.35 683.224 L970.791 683.224 L970.232 683.224 L969.673 683.224 L969.113 683.224 L968.554 683.224 L967.995 683.224 L967.436 683.224 L966.876 683.224 L966.317 683.224 L965.758 683.224 L965.199 683.224 L964.639 683.224 L964.08 683.224 L963.521 683.224 L962.962 683.224 L962.402 683.224 L961.843 683.224 L961.284 683.224 L960.725 683.224 L960.165 683.224 L959.606 683.224 L959.047 683.224 L958.488 683.224 L957.928 683.224 L957.369 683.224 L956.81 683.224 L956.251 683.224 L955.691 683.224 L955.132 683.224 L954.573 683.224 L954.014 683.224 L953.454 683.224 L952.895 683.224 L952.336 683.224 L951.777 683.224 L951.217 683.224 L950.658 683.224 L950.099 683.224 L949.54 683.224 L948.98 683.224 L948.421 683.224 L947.862 683.224 L947.303 683.224 L946.743 683.224 L946.184 683.224 L945.625 683.224 L945.066 683.224 L944.506 683.224 L943.947 683.224 L943.388 683.224 L942.829 683.224 L942.269 683.224 L941.71 683.224 L941.151 683.224 L940.592 683.224 L940.032 683.224 L939.473 683.224 L938.914 683.224 L938.355 683.224 L937.795 683.224 L937.236 683.224 L936.677 683.224 L936.118 683.224 L935.558 683.224 L934.999 683.224 L934.44 683.224 L933.881 683.224 L933.321 683.224 L932.762 683.224 L932.203 683.224 L931.644 683.224 L931.084 683.224 L930.525 683.224 L929.966 683.224 L929.406 683.224 L928.847 683.224 L928.288 683.224 L927.729 683.224 L927.169 683.224 L926.61 683.224 L926.051 683.224 L925.492 683.224 L924.932 683.224 L924.373 683.224 L923.814 683.224 L923.255 683.224 L922.695 683.224 L922.136 683.224 L921.577 683.224 L921.018 683.224 L920.458 683.224 L919.899 683.224 L919.34 683.224 L918.781 683.224 L918.221 683.224 L917.662 683.224 L917.103 683.224 L916.544 683.224 L915.984 683.224 L915.425 683.224 L914.866 683.224 L914.307 683.224 L913.747 683.224 L913.188 683.224 L912.629 683.224 L912.07 683.224 L911.51 683.224 L910.951 683.224 L910.392 683.224 L909.833 683.224 L909.273 683.224 L908.714 683.224 L908.155 683.224 L907.596 683.224 L907.036 683.224 L906.477 683.224 L905.918 683.224 L905.359 683.224 L904.799 683.224 L904.24 683.224 L903.681 683.224 L903.122 683.224 L902.562 683.224 L902.003 683.224 L901.444 683.224 L900.885 683.224 L900.325 683.224 L899.766 683.224 L899.207 683.224 L898.648 683.224 L898.088 683.224 L897.529 683.224 L896.97 683.224 L896.411 683.224 L895.851 683.224 L895.292 683.224 L894.733 683.224 L894.174 683.224 L893.614 683.224 L893.055 683.224 L892.496 683.224 L891.937 683.224 L891.377 683.224 L890.818 683.224 L890.259 683.224 L889.7 683.224 L889.14 683.224 L888.581 683.224 L888.022 683.224 L887.463 683.224 L886.903 683.224 L886.344 683.224 L885.785 683.224 L885.226 683.224 L884.666 683.224 L884.107 683.224 L883.548 683.224 L882.989 683.224 L882.429 683.224 L881.87 683.224 L881.311 683.224 L880.752 683.224 L880.192 683.224 L879.633 683.224 L879.074 683.224 L878.515 683.224 L877.955 683.224 L877.396 683.224 L876.837 683.224 L876.278 683.224 L875.718 683.224 L875.159 683.224 L874.6 683.224 L874.041 683.224 L873.481 683.224 L872.922 683.224 L872.363 683.224 L871.804 683.224 L871.244 683.224 L870.685 683.224 L870.126 683.224 L869.567 683.224 L869.007 683.224 L868.448 683.224 L867.889 683.224 L867.33 683.224 L866.77 683.224 L866.211 683.224 L865.652 683.224 L865.093 683.224 L864.533 683.224 L863.974 683.224 L863.415 683.224 L862.856 683.224 L862.296 683.224 L861.737 683.224 L861.178 683.224 L860.619 683.224 L860.059 683.224 L859.5 683.224 L858.941 683.224 L858.382 683.224 L857.822 683.224 L857.263 683.224 L856.704 683.224 L856.145 683.224 L855.585 683.224 L855.026 683.224 L854.467 683.224 L853.908 683.224 L853.348 683.224 L852.789 683.224 L852.23 683.224 L851.671 683.224 L851.111 683.224 L850.552 683.224 L849.993 683.224 L849.434 683.224 L848.874 683.224 L848.315 683.224 L847.756 683.224 L847.197 683.224 L846.637 683.224 L846.078 683.224 L845.519 683.224 L844.96 683.224 L844.4 683.224 L843.841 683.224 L843.282 683.224 L842.723 683.224 L842.163 683.224 L841.604 683.224 L841.045 683.224 L840.486 683.224 L839.926 683.224 L839.367 683.224 L838.808 683.224 L838.249 683.224 L837.689 683.224 L837.13 683.224 L836.571 683.224 L836.012 683.224 L835.452 683.224 L834.893 683.224 L834.334 683.224 L833.775 683.224 L833.215 683.224 L832.656 683.224 L832.097 683.224 L831.538 683.224 L830.978 683.224 L830.419 683.224 L829.86 683.224 L829.301 683.224 L828.741 683.224 L828.182 683.224 L827.623 683.224 L827.064 683.224 L826.504 683.224 L825.945 683.224 L825.386 683.224 L824.827 683.224 L824.267 683.224 L823.708 683.224 L823.149 683.224 L822.59 683.224 L822.03 683.224 L821.471 683.224 L820.912 683.224 L820.353 683.224 L819.793 683.224 L819.234 683.224 L818.675 683.224 L818.116 683.224 L817.556 683.224 L816.997 683.224 L816.438 683.224 L815.879 683.224 L815.319 683.224 L814.76 683.224 L814.201 683.224 L813.642 683.224 L813.082 683.224 L812.523 683.224 L811.964 683.224 L811.405 683.224 L810.845 683.224 L810.286 683.224 L809.727 683.224 L809.168 683.224 L808.608 683.224 L808.049 683.224 L807.49 683.224 L806.931 683.224 L806.371 683.224 L805.812 683.224 L805.253 683.224 L804.693 683.224 L804.134 683.224 L803.575 683.224 L803.016 683.224 L802.456 683.224 L801.897 683.224 L801.338 683.224 L800.779 683.224 L800.219 683.224 L799.66 683.224 L799.101 683.224 L798.542 683.224 L797.982 683.224 L797.423 683.224 L796.864 683.224 L796.305 683.224 L795.745 683.224 L795.186 683.224 L794.627 683.224 L794.068 683.224 L793.508 683.224 L792.949 683.224 L792.39 683.224 L791.831 683.224 L791.271 683.224 L790.712 683.224 L790.153 683.224 L789.594 683.224 L789.034 683.224 L788.475 683.224 L787.916 683.224 L787.357 683.224 L786.797 683.224 L786.238 683.224 L785.679 683.224 L785.12 683.224 L784.56 683.224 L784.001 683.224 L783.442 683.224 L782.883 683.224 L782.323 683.224 L781.764 683.224 L781.205 683.224 L780.646 683.224 L780.086 683.224 L779.527 683.224 L778.968 683.224 L778.409 683.224 L777.849 683.224 L777.29 683.224 L776.731 683.224 L776.172 683.224 L775.612 683.224 L775.053 683.224 L774.494 683.224 L773.935 683.224 L773.375 683.224 L772.816 683.224 L772.257 683.224 L771.698 683.224 L771.138 683.224 L770.579 683.224 L770.02 683.224 L769.461 683.224 L768.901 683.224 L768.342 683.224 L767.783 683.224 L767.224 683.224 L766.664 683.224 L766.105 683.224 L765.546 683.224 L764.987 683.224 L764.427 683.224 L763.868 683.224 L763.309 683.224 L762.75 683.224 L762.19 683.224 L761.631 683.224 L761.072 683.224 L760.513 683.224 L759.953 683.224 L759.394 683.224 L758.835 683.224 L758.276 683.224 L757.716 683.224 L757.157 683.224 L756.598 683.224 L756.039 683.224 L755.479 683.224 L754.92 683.224 L754.361 683.224 L753.802 683.224 L753.242 683.224 L752.683 683.224 L752.124 683.224 L751.565 683.224 L751.005 683.224 L750.446 683.224 L749.887 683.224 L749.328 683.224 L748.768 683.224 L748.209 683.224 L747.65 683.224 L747.091 683.224 L746.531 683.224 L745.972 683.224 L745.413 683.224 L744.854 683.224 L744.294 683.224 L743.735 683.224 L743.176 683.224 L742.617 683.224 L742.057 683.224 L741.498 683.224 L740.939 683.224 L740.38 683.224 L739.82 683.224 L739.261 683.224 L738.702 683.224 L738.143 683.224 L737.583 683.224 L737.024 683.224 L736.465 683.224 L735.906 683.224 L735.346 683.224 L734.787 683.224 L734.228 683.224 L733.669 683.224 L733.109 683.224 L732.55 683.224 L731.991 683.224 L731.432 683.224 L730.872 683.224 L730.313 683.224 L729.754 683.224 L729.195 683.224 L728.635 683.224 L728.076 683.224 L727.517 683.224 L726.958 683.224 L726.398 683.224 L725.839 683.224 L725.28 683.224 L724.721 683.224 L724.161 683.224 L723.602 683.224 L723.043 683.224 L722.484 683.224 L721.924 683.224 L721.365 683.224 L720.806 683.224 L720.247 683.224  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip533)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.109 720.806,684.109 721.365,684.109 721.924,684.109 722.484,684.109 723.043,684.109 723.602,684.109 724.161,684.109 724.721,684.109 725.28,684.109 725.839,684.109 726.398,684.109 726.958,684.109 727.517,684.109 728.076,684.109 728.635,684.109 729.195,684.109 729.754,684.109 730.313,684.109 730.872,684.109 731.432,684.109 731.991,684.109 732.55,684.109 733.109,684.109 733.669,684.109 734.228,684.109 734.787,684.109 735.346,684.109 735.906,684.109 736.465,684.109 737.024,684.109 737.583,684.109 738.143,684.109 738.702,684.109 739.261,684.109 739.82,684.109 740.38,684.109 740.939,684.109 741.498,684.109 742.057,684.109 742.617,684.109 743.176,684.109 743.735,684.109 744.294,684.109 744.854,684.109 745.413,684.109 745.972,684.109 746.531,684.109 747.091,684.109 747.65,684.109 748.209,684.109 748.768,684.109 749.328,684.109 749.887,684.109 750.446,684.109 751.005,684.109 751.565,684.109 752.124,684.109 752.683,684.109 753.242,684.109 753.802,684.109 754.361,684.109 754.92,684.109 755.479,684.109 756.039,684.109 756.598,684.109 757.157,684.109 757.716,684.109 758.276,684.109 758.835,684.109 759.394,684.109 759.953,684.109 760.513,684.109 761.072,684.109 761.631,684.109 762.19,684.109 762.75,684.109 763.309,684.109 763.868,684.109 764.427,684.109 764.987,684.109 765.546,684.109 766.105,684.109 766.664,684.109 767.224,684.109 767.783,684.109 768.342,684.109 768.901,684.109 769.461,684.109 770.02,684.109 770.579,684.109 771.138,684.109 771.698,684.109 772.257,684.109 772.816,684.109 773.375,684.109 773.935,684.109 774.494,684.109 775.053,684.109 775.612,684.109 776.172,684.109 776.731,684.109 777.29,684.109 777.849,684.109 778.409,684.109 778.968,684.109 779.527,684.109 780.086,684.109 780.646,684.109 781.205,684.109 781.764,684.109 782.323,684.109 782.883,684.109 783.442,684.109 784.001,684.109 784.56,684.109 785.12,684.109 785.679,684.109 786.238,684.109 786.797,684.109 787.357,684.109 787.916,684.109 788.475,684.109 789.034,684.109 789.594,684.109 790.153,684.109 790.712,684.109 791.271,684.109 791.831,684.109 792.39,684.109 792.949,684.109 793.508,684.109 794.068,684.109 794.627,684.109 795.186,684.109 795.745,684.109 796.305,684.109 796.864,684.109 797.423,684.109 797.982,684.109 798.542,684.109 799.101,684.109 799.66,684.109 800.219,684.109 800.779,684.109 801.338,684.109 801.897,684.109 802.456,684.109 803.016,684.109 803.575,684.109 804.134,684.109 804.693,684.109 805.253,684.109 805.812,684.109 806.371,684.109 806.931,684.109 807.49,684.109 808.049,684.109 808.608,684.109 809.168,684.109 809.727,684.109 810.286,684.109 810.845,684.109 811.405,684.109 811.964,684.109 812.523,684.109 813.082,684.109 813.642,684.109 814.201,684.109 814.76,684.109 815.319,684.109 815.879,684.109 816.438,684.109 816.997,684.109 817.556,684.109 818.116,684.109 818.675,684.109 819.234,684.109 819.793,684.109 820.353,684.109 820.912,684.109 821.471,684.109 822.03,684.109 822.59,684.109 823.149,684.109 823.708,684.109 824.267,684.109 824.827,684.109 825.386,684.109 825.945,684.109 826.504,684.109 827.064,684.109 827.623,684.109 828.182,684.109 828.741,684.109 829.301,684.109 829.86,684.109 830.419,684.109 830.978,684.109 831.538,684.109 832.097,684.109 832.656,684.109 833.215,684.109 833.775,684.109 834.334,684.109 834.893,684.109 835.452,684.109 836.012,684.109 836.571,684.109 837.13,684.109 837.689,684.109 838.249,684.109 838.808,684.109 839.367,684.109 839.926,684.109 840.486,684.109 841.045,684.109 841.604,684.109 842.163,684.109 842.723,684.109 843.282,684.109 843.841,684.109 844.4,684.109 844.96,684.109 845.519,684.109 846.078,684.109 846.637,684.109 847.197,684.109 847.756,684.109 848.315,684.109 848.874,684.109 849.434,684.109 849.993,684.109 850.552,684.109 851.111,684.109 851.671,684.109 852.23,684.109 852.789,684.109 853.348,684.109 853.908,684.109 854.467,684.109 855.026,684.109 855.585,684.109 856.145,684.109 856.704,684.109 857.263,684.109 857.822,684.109 858.382,684.109 858.941,684.109 859.5,684.109 860.059,684.109 860.619,684.109 861.178,684.109 861.737,684.109 862.296,684.109 862.856,684.109 863.415,684.109 863.974,684.109 864.533,684.109 865.093,684.109 865.652,684.109 866.211,684.109 866.77,684.109 867.33,684.109 867.889,684.109 868.448,684.109 869.007,684.109 869.567,684.109 870.126,684.109 870.685,684.109 871.244,684.109 871.804,684.109 872.363,684.109 872.922,684.109 873.481,684.109 874.041,684.109 874.6,684.109 875.159,684.109 875.718,684.109 876.278,684.109 876.837,684.109 877.396,684.109 877.955,684.109 878.515,684.109 879.074,684.109 879.633,684.109 880.192,684.109 880.752,684.109 881.311,684.109 881.87,684.109 882.429,684.109 882.989,684.109 883.548,684.109 884.107,684.109 884.666,684.109 885.226,684.109 885.785,684.109 886.344,684.109 886.903,684.109 887.463,684.109 888.022,684.109 888.581,684.109 889.14,684.109 889.7,684.109 890.259,684.109 890.818,684.109 891.377,684.109 891.937,684.109 892.496,684.109 893.055,684.109 893.614,684.109 894.174,684.109 894.733,684.109 895.292,684.109 895.851,684.109 896.411,684.109 896.97,684.109 897.529,684.109 898.088,684.109 898.648,684.109 899.207,684.109 899.766,684.109 900.325,684.109 900.885,684.109 901.444,684.109 902.003,684.109 902.562,684.109 903.122,684.109 903.681,684.109 904.24,684.109 904.799,684.109 905.359,684.109 905.918,684.109 906.477,684.109 907.036,684.109 907.596,684.109 908.155,684.109 908.714,684.109 909.273,684.109 909.833,684.109 910.392,684.109 910.951,684.109 911.51,684.109 912.07,684.109 912.629,684.109 913.188,684.109 913.747,684.109 914.307,684.109 914.866,684.109 915.425,684.109 915.984,684.109 916.544,684.109 917.103,684.109 917.662,684.109 918.221,684.109 918.781,684.109 919.34,684.109 919.899,684.109 920.458,684.109 921.018,684.109 921.577,684.109 922.136,684.109 922.695,684.109 923.255,684.109 923.814,684.109 924.373,684.109 924.932,684.109 925.492,684.109 926.051,684.109 926.61,684.109 927.169,684.109 927.729,684.109 928.288,684.109 928.847,684.109 929.406,684.109 929.966,684.109 930.525,684.109 931.084,684.109 931.644,684.109 932.203,684.109 932.762,684.109 933.321,684.109 933.881,684.109 934.44,684.109 934.999,684.109 935.558,684.109 936.118,684.109 936.677,684.109 937.236,684.109 937.795,684.109 938.355,684.109 938.914,684.109 939.473,684.109 940.032,684.109 940.592,684.109 941.151,684.109 941.71,684.109 942.269,684.109 942.829,684.109 943.388,684.109 943.947,684.109 944.506,684.109 945.066,684.109 945.625,684.109 946.184,684.109 946.743,684.109 947.303,684.109 947.862,684.109 948.421,684.109 948.98,684.109 949.54,684.109 950.099,684.109 950.658,684.109 951.217,684.109 951.777,684.109 952.336,684.109 952.895,684.109 953.454,684.109 954.014,684.109 954.573,684.109 955.132,684.109 955.691,684.109 956.251,684.109 956.81,684.109 957.369,684.109 957.928,684.109 958.488,684.109 959.047,684.109 959.606,684.109 960.165,684.109 960.725,684.109 961.284,684.109 961.843,684.109 962.402,684.109 962.962,684.109 963.521,684.109 964.08,684.109 964.639,684.109 965.199,684.109 965.758,684.109 966.317,684.109 966.876,684.109 967.436,684.109 967.995,684.109 968.554,684.109 969.113,684.109 969.673,684.109 970.232,684.109 970.791,684.109 971.35,684.109 971.91,684.109 972.469,684.109 973.028,684.109 973.587,684.109 974.147,684.109 974.706,684.109 975.265,684.109 975.824,684.109 976.384,684.109 976.943,684.109 977.502,684.109 978.061,684.109 978.621,684.109 979.18,684.109 979.739,684.109 980.298,684.109 980.858,684.109 981.417,684.109 981.976,684.109 982.535,684.109 983.095,684.109 983.654,684.109 984.213,684.109 984.772,684.109 985.332,684.109 985.891,684.109 986.45,684.109 987.009,684.109 987.569,684.109 988.128,684.109 988.687,684.109 989.246,684.109 989.806,684.109 990.365,684.109 990.924,684.109 991.483,684.109 992.043,684.109 992.602,684.109 993.161,684.109 993.72,684.109 994.28,684.109 994.839,684.109 995.398,684.109 995.957,684.109 996.517,684.109 997.076,684.109 997.635,684.109 998.194,684.109 998.754,684.109 999.313,684.109 999.872,684.109 1000.43,684.109 1000.99,684.109 1001.55,684.109 1002.11,684.109 1002.67,684.109 1003.23,684.109 1003.79,684.109 1004.35,684.109 1004.91,684.109 1005.46,684.109 1006.02,684.109 1006.58,684.109 1007.14,684.109 1007.7,684.109 1008.26,684.109 1008.82,684.109 1009.38,684.109 1009.94,684.109 1010.5,684.109 1011.06,684.109 1011.62,684.109 1012.18,684.109 1012.73,684.109 1013.29,684.109 1013.85,684.109 1014.41,684.109 1014.97,684.109 1015.53,684.109 1016.09,684.109 1016.65,684.109 1017.21,684.109 1017.77,684.109 1018.33,684.109 1018.89,684.109 1019.45,684.109 1020.01,684.109 1020.56,684.109 1021.12,684.109 1021.68,684.109 1022.24,684.109 1022.8,684.109 1023.36,684.109 1023.92,684.109 1024.48,684.109 1025.04,684.109 1025.6,684.109 1026.16,684.109 1026.72,684.109 1027.28,684.109 1027.83,684.109 1028.39,684.109 1028.95,684.109 1029.51,684.109 1030.07,684.109 1030.63,684.109 1031.19,684.109 1031.75,684.109 1032.31,684.109 1032.87,684.109 1033.43,684.109 1033.99,684.109 1034.55,684.109 1035.1,684.109 1035.66,684.109 1036.22,684.109 1036.78,684.109 1037.34,684.109 1037.9,684.109 1038.46,684.109 1039.02,684.109 1039.58,684.109 1040.14,684.109 1040.7,684.109 1041.26,684.109 1041.82,684.109 1042.38,684.109 1042.93,684.109 1043.49,684.109 1044.05,684.109 1044.61,684.109 1045.17,684.109 1045.73,684.109 1046.29,684.109 1046.85,684.109 1047.41,684.109 1047.97,684.109 1048.53,684.109 1049.09,684.109 1049.65,684.109 1050.2,684.109 1050.76,684.109 1051.32,684.109 1051.88,684.109 1052.44,684.109 1053,684.109 1053.56,684.109 1054.12,684.109 1054.68,684.109 1055.24,684.109 1055.8,684.109 1056.36,684.109 1056.92,684.109 1057.48,684.109 1058.03,684.109 1058.59,684.109 1059.15,684.109 1059.71,684.109 1060.27,684.109 1060.83,684.109 1061.39,684.109 1061.95,684.109 1062.51,684.109 1063.07,684.109 1063.63,684.109 1064.19,684.109 1064.75,684.109 1065.3,684.109 1065.86,684.109 1066.42,684.109 1066.98,684.109 1067.54,684.109 1068.1,684.109 1068.66,684.109 1069.22,684.109 1069.78,684.109 1070.34,684.109 1070.9,684.109 1071.46,684.109 1072.02,684.109 1072.57,684.109 1073.13,684.109 1073.69,684.109 1074.25,684.109 1074.81,684.109 1075.37,684.109 1075.93,684.109 1076.49,684.109 1077.05,684.109 1077.61,684.109 1078.17,684.109 1078.73,684.109 1079.29,684.109 1079.85,684.109 1080.4,684.109 1080.96,684.109 1081.52,684.109 1082.08,684.109 1082.64,684.109 1083.2,684.109 1083.76,684.109 1084.32,684.109 1084.88,684.109 1085.44,684.109 1086,684.109 1086.56,684.109 1087.12,684.109 1087.67,684.109 1088.23,684.109 1088.79,684.109 1089.35,684.109 1089.91,684.109 1090.47,684.109 1091.03,684.109 1091.59,684.109 1092.15,684.109 1092.71,684.109 1093.27,684.109 1093.83,684.109 1094.39,684.109 1094.94,684.109 1095.5,684.109 1096.06,684.109 1096.62,684.109 1097.18,684.109 1097.74,684.109 1098.3,684.109 1098.86,684.109 1099.42,684.109 1099.98,684.109 1100.54,684.109 1101.1,684.109 1101.66,684.109 1102.22,684.109 1102.77,684.109 1103.33,684.109 1103.89,684.109 1104.45,684.109 1105.01,684.109 1105.57,684.109 1106.13,684.109 1106.69,684.109 1107.25,684.109 1107.81,684.109 1108.37,684.109 1108.93,684.109 1109.49,684.109 1110.04,684.109 1110.6,684.109 1111.16,684.109 1111.72,684.109 1112.28,684.109 1112.84,684.109 1113.4,684.109 1113.96,684.109 1114.52,684.109 1115.08,684.109 1115.64,684.109 1116.2,684.109 1116.76,684.109 1117.31,684.109 1117.87,684.109 1118.43,684.109 1118.99,684.109 1119.55,684.109 1120.11,684.109 1120.67,684.109 1121.23,684.109 1121.79,684.109 1122.35,684.109 1122.91,684.109 1123.47,684.109 1124.03,684.109 1124.59,684.109 1125.14,684.109 1125.7,684.109 1126.26,684.109 1126.82,684.109 1127.38,684.109 1127.94,684.109 1128.5,684.109 1129.06,684.109 1129.62,684.109 1130.18,684.109 1130.74,684.109 1131.3,684.109 1131.86,684.109 1132.41,684.109 1132.97,684.109 1133.53,684.109 1134.09,684.109 1134.65,684.109 1135.21,684.109 1135.77,684.109 1136.33,684.109 1136.89,684.109 1137.45,684.109 1138.01,684.109 1138.57,684.109 1139.13,684.109 1139.68,684.109 1140.24,684.109 1140.8,684.109 1141.36,684.109 1141.92,684.109 1142.48,684.109 1143.04,684.109 1143.6,684.109 1144.16,684.109 1144.72,684.109 1145.28,684.109 1145.84,684.109 1146.4,684.109 1146.96,684.109 1147.51,684.109 1148.07,684.109 1148.63,684.109 1149.19,684.109 1149.75,684.109 1150.31,684.109 1150.87,684.109 1151.43,684.109 1151.99,684.109 1152.55,684.109 1153.11,684.109 1153.67,684.109 1154.23,684.109 1154.78,684.109 1155.34,684.109 1155.9,684.109 1156.46,684.109 1157.02,684.109 1157.58,684.109 1158.14,684.109 1158.7,684.109 1159.26,684.109 1159.82,684.109 1160.38,684.109 1160.94,684.109 1161.5,684.109 1162.05,684.109 1162.61,684.109 1163.17,684.109 1163.73,684.109 1164.29,684.109 1164.85,684.109 1165.41,684.109 1165.97,684.109 1166.53,684.109 1167.09,684.109 1167.65,684.109 1168.21,684.109 1168.77,684.109 1169.33,684.109 1169.88,684.109 1170.44,684.109 1171,684.109 1171.56,684.109 1172.12,684.109 1172.68,684.109 1173.24,684.109 1173.8,684.109 1174.36,684.109 1174.92,684.109 1175.48,684.109 1176.04,684.109 1176.6,684.109 1177.15,684.109 1177.71,684.109 1178.27,684.109 1178.83,684.109 1179.39,684.109 1179.95,684.109 1180.51,684.109 1181.07,684.109 1181.63,684.109 1182.19,684.109 1182.75,684.109 1183.31,684.109 1183.87,684.109 1184.43,684.109 1184.98,684.109 1185.54,684.109 1186.1,684.109 1186.66,684.109 1187.22,684.109 1187.78,684.109 1188.34,684.109 1188.9,684.109 1189.46,684.109 1190.02,684.109 1190.58,684.109 1191.14,684.109 1191.7,684.109 1192.25,684.109 1192.81,684.109 1193.37,684.109 1193.93,684.109 1194.49,684.109 1195.05,684.109 1195.61,684.109 1196.17,684.109 1196.73,684.109 1197.29,684.109 1197.85,684.109 1198.41,684.109 1198.97,684.109 1199.52,684.109 1200.08,684.109 1200.64,684.109 1201.2,684.109 1201.76,684.109 1202.32,684.109 1202.88,684.109 1203.44,684.109 1204,684.109 1204.56,684.109 1205.12,684.109 1205.68,684.109 1206.24,684.109 1206.8,684.109 1207.35,684.109 1207.91,684.109 1208.47,684.109 1209.03,684.109 1209.59,684.109 1210.15,684.109 1210.71,684.109 1211.27,684.109 1211.83,684.109 1212.39,684.109 1212.95,684.109 1213.51,684.109 1214.07,684.109 1214.62,684.109 1215.18,684.109 1215.74,684.109 1216.3,684.109 1216.86,684.109 1217.42,684.109 1217.98,684.109 1218.54,684.109 1219.1,684.109 1219.66,684.109 1220.22,684.109 1220.78,684.109 1221.34,684.109 1221.89,684.109 1222.45,684.109 1223.01,684.109 1223.57,684.109 1224.13,684.109 1224.69,684.109 1225.25,684.109 1225.81,684.109 1226.37,684.109 1226.93,684.109 1227.49,684.109 1228.05,684.109 1228.61,684.109 1229.17,684.109 1229.72,684.109 1230.28,684.109 1230.84,684.109 1231.4,684.109 1231.96,684.109 1232.52,684.109 1233.08,684.109 1233.64,684.109 1234.2,684.109 1234.76,684.109 1235.32,684.109 1235.88,684.109 1236.44,684.109 1236.99,684.109 1237.55,684.109 1238.11,684.109 1238.67,684.109 1239.23,684.109 1239.79,684.109 1240.35,684.109 1240.91,684.109 1241.47,684.109 1242.03,684.109 1242.59,684.109 1243.15,684.109 1243.71,684.109 1244.26,684.109 1244.82,684.109 1245.38,684.109 1245.94,684.109 1246.5,684.109 1247.06,684.109 1247.62,684.109 1248.18,684.109 1248.74,684.109 1249.3,684.109 1249.86,684.109 1250.42,684.109 1250.98,684.109 1251.54,684.109 1252.09,684.109 1252.65,684.109 1253.21,684.109 1253.77,684.109 1254.33,684.109 1254.89,684.109 1255.45,684.109 1256.01,684.109 1256.57,684.109 1257.13,684.109 1257.69,684.109 1258.25,684.109 1258.81,684.109 1259.36,684.109 1259.92,684.109 1260.48,684.109 1261.04,684.109 1261.6,684.109 1262.16,684.109 1262.72,684.109 1263.28,684.109 1263.84,684.109 1264.4,684.109 1264.96,684.109 1265.52,684.109 1266.08,684.109 1266.63,684.109 1267.19,684.109 1267.75,684.109 1268.31,684.109 1268.87,684.109 1269.43,684.109 1269.99,684.109 1270.55,684.109 1271.11,684.109 1271.67,684.109 1272.23,684.109 1272.79,684.109 1273.35,684.109 1273.91,684.109 1274.46,684.109 1275.02,684.109 1275.58,684.109 1276.14,684.109 1276.7,684.109 1277.26,684.109 1277.82,684.109 1278.38,684.109 1278.94,684.109 1279.5,684.109 1280.06,684.109 1280.62,684.109 1281.18,684.109 1281.73,684.109 1282.29,684.109 1282.85,684.109 1283.41,684.109 1283.97,684.109 1284.53,684.109 1285.09,684.109 1285.65,684.109 1286.21,684.109 1286.77,684.109 1287.33,684.109 1287.89,684.109 1288.45,684.109 1289,684.109 1289.56,684.109 1290.12,684.109 1290.68,684.109 1291.24,684.109 1291.8,684.109 1292.36,684.109 1292.92,684.109 1293.48,684.109 1294.04,684.109 1294.6,684.109 1295.16,684.109 1295.72,684.109 1296.28,684.109 1296.83,684.109 1297.39,684.109 1297.95,684.109 1298.51,684.109 1299.07,684.109 1299.63,684.109 1300.19,684.109 1300.75,684.109 1301.31,684.109 1301.87,684.109 1302.43,684.109 1302.99,684.109 1303.55,684.109 1304.1,684.109 1304.66,684.109 1305.22,684.109 1305.78,684.109 1306.34,684.109 1306.9,684.109 1307.46,684.109 1308.02,684.109 1308.58,684.109 1309.14,684.109 1309.7,684.109 1310.26,684.109 1310.82,684.109 1311.38,684.109 1311.93,684.109 1312.49,684.109 1313.05,684.109 1313.61,684.109 1314.17,684.109 1314.73,684.109 1315.29,684.109 1315.85,684.109 1316.41,684.109 1316.97,684.109 1317.53,684.109 1318.09,684.109 1318.65,684.109 1319.2,684.109 1319.76,684.109 1320.32,684.109 1320.88,684.109 1321.44,684.109 1322,684.109 1322.56,684.109 1323.12,684.109 1323.68,684.109 1324.24,684.109 1324.8,684.109 1325.36,684.109 1325.92,684.109 1326.47,684.109 1327.03,684.109 1327.59,684.109 1328.15,684.109 1328.71,684.109 1329.27,684.109 1329.83,684.109 1330.39,684.109 1330.95,684.109 1331.51,684.109 1332.07,684.109 1332.63,684.109 1333.19,684.109 1333.75,684.109 1334.3,684.109 1334.86,684.109 1335.42,684.109 1335.98,684.109 1336.54,684.109 1337.1,684.109 1337.66,684.109 1338.22,684.109 1338.78,684.109 1339.34,684.109 1339.9,684.109 1340.46,684.109 1341.02,684.109 1341.57,684.109 1342.13,684.109 1342.69,684.109 1343.25,684.109 1343.81,684.109 1344.37,684.109 1344.93,684.109 1345.49,684.109 1346.05,684.109 1346.61,684.109 1347.17,684.109 1347.73,684.109 1348.29,684.109 1348.84,684.109 1349.4,684.109 1349.96,684.109 1350.52,684.109 1351.08,684.109 1351.64,684.109 1352.2,684.109 1352.76,684.109 1353.32,684.109 1353.88,684.109 1354.44,684.109 1355,684.109 1355.56,684.109 1356.12,684.109 1356.67,684.109 1357.23,684.109 1357.79,684.109 1358.35,684.109 1358.91,684.109 1359.47,684.109 1360.03,684.109 1360.59,684.109 1361.15,684.109 1361.71,684.109 1362.27,684.109 1362.83,684.109 1363.39,684.109 1363.94,684.109 1364.5,684.109 1365.06,684.109 1365.62,684.109 1366.18,684.109 1366.74,684.109 1367.3,684.109 1367.86,684.109 1368.42,684.109 1368.98,684.109 1369.54,684.109 1370.1,684.109 1370.66,684.109 1371.21,684.109 1371.77,684.109 1372.33,684.109 1372.89,684.109 1373.45,684.109 1374.01,684.109 1374.57,684.109 1375.13,684.109 1375.69,684.109 1376.25,684.109 1376.81,684.109 1377.37,684.109 1377.93,684.109 1378.49,684.109 1379.04,684.109 1379.6,684.109 1380.16,684.109 1380.72,684.109 1381.28,684.109 1381.84,684.109 1382.4,684.109 1382.96,684.109 1383.52,684.109 1384.08,684.109 1384.64,684.109 1385.2,684.109 1385.76,684.109 1386.31,684.109 1386.87,684.109 1387.43,684.109 1387.99,684.109 1388.55,684.109 1389.11,684.109 1389.67,684.109 1390.23,684.109 1390.79,684.109 1391.35,684.109 1391.91,684.109 1392.47,684.109 1393.03,684.109 1393.58,684.109 1394.14,684.109 1394.7,684.109 1395.26,684.109 1395.82,684.109 1396.38,684.109 1396.94,684.109 1397.5,684.109 1398.06,684.109 1398.62,684.109 1399.18,684.109 1399.74,684.109 1400.3,684.109 1400.86,684.109 1401.41,684.109 1401.97,684.109 1402.53,684.109 1403.09,684.109 1403.65,684.109 1404.21,684.109 1404.77,684.109 1405.33,684.109 1405.89,684.109 1406.45,684.109 1407.01,684.109 1407.57,684.109 1408.13,684.109 1408.68,684.109 1409.24,684.109 1409.8,684.109 1410.36,684.109 1410.92,684.109 1411.48,684.109 1412.04,684.109 1412.6,684.109 1413.16,684.109 1413.72,684.109 1414.28,684.109 1414.84,684.109 1415.4,684.109 1415.95,684.109 1416.51,684.109 1417.07,684.109 1417.63,684.109 1418.19,684.109 1418.75,684.109 1419.31,684.109 1419.87,684.109 1420.43,684.109 1420.99,684.109 1421.55,684.109 1422.11,684.109 1422.67,684.109 1423.23,684.109 1423.78,684.109 1424.34,684.109 1424.9,684.109 1425.46,684.109 1426.02,684.109 1426.58,684.109 1427.14,684.109 1427.7,684.109 1428.26,684.109 1428.82,684.109 1429.38,684.109 1429.94,684.109 1430.5,684.109 1431.05,684.109 1431.61,684.109 1432.17,684.109 1432.73,684.109 1433.29,684.109 1433.85,684.109 1434.41,684.109 1434.97,684.109 1435.53,684.109 1436.09,684.109 1436.65,684.109 1437.21,684.109 1437.77,684.109 1438.33,684.109 1438.88,684.109 1439.44,684.109 1440,684.109 1440.56,684.109 1441.12,684.109 1441.68,684.109 1442.24,684.109 1442.8,684.109 1443.36,684.109 1443.92,684.109 1444.48,684.109 1445.04,684.109 1445.6,684.109 1446.15,684.109 1446.71,684.109 1447.27,684.109 1447.83,684.109 1448.39,684.109 1448.95,684.109 1449.51,684.109 1450.07,684.109 1450.63,684.109 1451.19,684.109 1451.75,684.109 1452.31,684.109 1452.87,684.109 1453.42,684.109 1453.98,684.109 1454.54,684.109 1455.1,684.109 1455.66,684.109 1456.22,684.109 1456.78,684.109 1457.34,684.109 1457.9,684.109 1458.46,684.109 1459.02,684.109 1459.58,684.109 1460.14,684.109 1460.7,684.109 1461.25,684.109 1461.81,684.109 1462.37,684.109 1462.93,684.109 1463.49,684.109 1464.05,684.109 1464.61,684.109 1465.17,684.109 1465.73,684.109 1466.29,684.109 1466.85,684.109 1467.41,684.109 1467.97,684.109 1468.52,684.109 1469.08,684.109 1469.64,684.109 1470.2,684.109 1470.76,684.109 1471.32,684.109 1471.88,684.109 1472.44,684.109 1473,684.109 1473.56,684.109 1474.12,684.109 1474.68,684.109 1475.24,684.109 1475.79,684.109 1476.35,684.109 1476.91,684.109 1477.47,684.109 1478.03,684.109 1478.59,684.109 1479.15,684.109 1479.71,684.109 1480.27,684.109 1480.83,684.109 1481.39,684.109 1481.95,684.109 1482.51,684.109 1483.07,684.109 1483.62,684.109 1484.18,684.109 1484.74,684.109 1485.3,684.109 1485.86,684.109 1486.42,684.109 1486.98,684.109 1487.54,684.109 1488.1,684.109 1488.66,684.109 1489.22,684.109 1489.78,684.109 1490.34,684.109 1490.89,684.109 1491.45,684.109 1492.01,684.109 1492.57,684.109 1493.13,684.109 1493.69,684.109 1494.25,684.109 1494.81,684.109 1495.37,684.109 1495.93,684.109 1496.49,684.109 1497.05,684.109 1497.61,684.109 1498.16,684.109 1498.72,684.109 1499.28,684.109 1499.84,684.109 1500.4,684.109 1500.96,684.109 1501.52,684.109 1502.08,684.109 1502.64,684.109 1503.2,684.109 1503.76,684.109 1504.32,684.109 1504.88,684.109 1505.44,684.109 1505.99,684.109 1506.55,684.109 1507.11,684.109 1507.67,684.109 1508.23,684.109 1508.79,684.109 1509.35,684.109 1509.91,684.109 1510.47,684.109 1511.03,684.109 1511.59,684.109 1512.15,684.109 1512.71,684.109 1513.26,684.109 1513.82,684.109 1514.38,684.109 1514.94,684.109 1515.5,684.109 1516.06,684.109 1516.62,684.109 1517.18,684.109 1517.74,684.109 1518.3,684.109 1518.86,684.109 1519.42,684.109 1519.98,684.109 1520.53,684.109 1521.09,684.109 1521.65,684.109 1522.21,684.109 1522.77,684.109 1523.33,684.109 1523.89,684.109 1524.45,684.109 1525.01,684.109 1525.57,684.109 1526.13,684.109 1526.69,684.109 1527.25,684.109 1527.81,684.109 1528.36,684.109 1528.92,684.109 1529.48,684.109 1530.04,684.109 1530.6,684.109 1531.16,684.109 1531.72,684.109 1532.28,684.109 1532.84,684.109 1533.4,684.109 1533.96,684.109 1534.52,684.109 1535.08,684.109 1535.63,684.109 1536.19,684.109 1536.75,684.109 1537.31,684.109 1537.87,684.109 1538.43,684.109 1538.99,684.109 1539.55,684.109 1540.11,684.109 1540.67,684.109 1541.23,684.109 1541.79,684.109 1542.35,684.109 1542.9,684.109 1543.46,684.109 1544.02,684.109 1544.58,684.109 1545.14,684.109 1545.7,684.109 1546.26,684.109 1546.82,684.109 1547.38,684.109 1547.94,684.109 1548.5,684.109 1549.06,684.109 1549.62,684.109 1550.18,684.109 1550.73,684.109 1551.29,684.109 1551.85,684.109 1552.41,684.109 1552.97,684.109 1553.53,684.109 1554.09,684.109 1554.65,684.109 1555.21,684.109 1555.77,684.109 1556.33,684.109 1556.89,684.109 1557.45,684.109 1558,684.109 1558.56,684.109 1559.12,684.109 1559.68,684.109 1560.24,684.109 1560.8,684.109 1561.36,684.109 1561.92,684.109 1562.48,684.109 1563.04,684.109 1563.6,684.109 1564.16,684.109 1564.72,684.109 1565.28,684.109 1565.83,684.109 1566.39,684.109 1566.95,684.109 1567.51,684.109 1568.07,684.109 1568.63,684.109 1569.19,684.109 1569.75,684.109 1570.31,684.109 1570.87,684.109 1571.43,684.109 1571.99,684.109 1572.55,684.109 1573.1,684.109 1573.66,684.109 1574.22,684.109 1574.78,684.109 1575.34,684.109 1575.9,684.109 1576.46,684.109 1577.02,684.109 1577.58,684.109 1578.14,684.109 1578.7,684.109 1579.26,684.109 1579.82,684.109 1580.37,684.109 1580.93,684.109 1581.49,684.109 1582.05,684.109 1582.61,684.109 1583.17,684.109 1583.73,684.109 1584.29,684.109 1584.85,684.109 1585.41,684.109 1585.97,684.109 1586.53,684.109 1587.09,684.109 1587.65,684.109 1588.2,684.109 1588.76,684.109 1589.32,684.109 1589.88,684.109 1590.44,684.109 1591,684.109 1591.56,684.109 1592.12,684.109 1592.68,684.109 1593.24,684.109 1593.8,684.109 1594.36,684.109 1594.92,684.109 1595.47,684.109 1596.03,684.109 1596.59,684.109 1597.15,684.109 1597.71,684.109 1598.27,684.109 1598.83,684.109 1599.39,684.109 1599.95,684.109 1600.51,684.109 1601.07,684.109 1601.63,684.109 1602.19,684.109 1602.74,684.109 1603.3,684.109 1603.86,684.109 1604.42,684.109 1604.98,684.109 1605.54,684.109 1606.1,684.109 1606.66,684.109 1607.22,684.109 1607.78,684.109 1608.34,684.109 1608.9,684.109 1609.46,684.109 1610.02,684.109 1610.57,684.109 1611.13,684.109 1611.69,684.109 1612.25,684.109 1612.81,684.109 1613.37,684.109 1613.93,684.109 1614.49,684.109 1615.05,684.109 1615.61,684.109 1616.17,684.109 1616.73,684.109 1617.29,684.109 1617.84,684.109 1618.4,684.109 1618.96,684.109 1619.52,684.109 1620.08,684.109 1620.64,684.109 1621.2,684.109 1621.76,684.109 1622.32,684.109 1622.88,684.109 1623.44,684.109 1624,684.109 1624.56,684.109 1625.11,684.109 1625.67,684.109 1626.23,684.109 1626.79,684.109 1627.35,684.109 1627.91,684.109 1628.47,684.109 1629.03,684.109 1629.59,684.109 1630.15,684.109 1630.71,684.109 1631.27,684.109 1631.83,684.109 1632.39,684.109 1632.94,684.109 1633.5,684.109 1634.06,684.109 1634.62,684.109 1635.18,684.109 1635.74,684.109 1636.3,684.109 1636.86,684.109 1637.42,684.109 1637.98,684.109 1638.54,684.109 1639.1,684.109 1639.66,684.109 1640.21,684.109 1640.77,684.109 1641.33,684.109 1641.89,684.109 1642.45,684.109 1643.01,684.109 1643.57,684.109 1644.13,684.109 1644.69,684.109 1645.25,684.109 1645.81,684.109 1646.37,684.109 1646.93,684.109 1647.48,684.109 1648.04,684.109 1648.6,684.109 1649.16,684.109 1649.72,684.109 1650.28,684.109 1650.84,684.109 1651.4,684.109 1651.96,684.109 1652.52,684.109 1653.08,684.109 1653.64,684.109 1654.2,684.109 1654.76,684.109 1655.31,684.109 1655.87,684.109 1656.43,684.109 1656.99,684.109 1657.55,684.109 1658.11,684.109 1658.67,684.109 1659.23,684.109 1659.79,684.109 1660.35,684.109 1660.91,684.109 1661.47,684.109 1662.03,684.109 1662.58,684.109 1663.14,684.109 1663.7,684.109 1664.26,684.109 1664.82,684.109 1665.38,684.109 1665.94,684.109 1666.5,684.109 1667.06,684.109 1667.62,684.109 1668.18,684.109 1668.74,684.109 1669.3,684.109 1669.85,684.109 1670.41,684.109 1670.97,684.109 1671.53,684.109 1672.09,684.109 1672.65,684.109 1673.21,684.109 1673.77,684.109 1674.33,684.109 1674.89,684.109 1675.45,684.109 1676.01,684.109 1676.57,684.109 1677.13,684.109 1677.68,684.109 1678.24,684.109 1678.8,684.109 1679.36,684.109 1679.92,684.109 1680.48,684.109 1681.04,684.109 1681.6,684.109 1682.16,684.109 1682.72,684.109 1683.28,684.109 1683.84,684.109 1684.4,684.109 1684.95,684.109 1685.51,684.109 1686.07,684.109 1686.63,684.109 1687.19,684.109 1687.75,684.109 1688.31,684.109 1688.87,684.109 1689.43,684.109 1689.99,684.109 1690.55,684.109 1691.11,684.109 1691.67,684.109 1692.23,684.109 1692.78,684.109 1693.34,684.109 1693.9,684.109 1694.46,684.109 1695.02,684.109 1695.58,684.109 1696.14,684.109 1696.7,684.109 1697.26,684.109 1697.82,684.109 1698.38,684.109 1698.94,684.109 1699.5,684.109 1700.05,684.109 1700.61,684.109 1701.17,684.109 1701.73,684.109 1702.29,684.109 1702.85,684.109 1703.41,684.109 1703.97,684.109 1704.53,684.109 1705.09,684.109 1705.65,684.109 1706.21,684.109 1706.77,684.109 1707.32,684.109 1707.88,684.109 1708.44,684.109 1709,684.109 1709.56,684.109 1710.12,684.109 1710.68,684.109 1711.24,684.109 1711.8,684.109 1712.36,684.109 1712.92,684.109 1713.48,684.109 1714.04,684.109 1714.6,684.109 1715.15,684.109 1715.71,684.109 1716.27,684.109 1716.83,684.109 1717.39,684.109 1717.95,684.109 1718.51,684.109 1719.07,684.109 1719.63,684.109 1720.19,684.109 1720.75,684.109 1721.31,684.109 1721.87,684.109 1722.42,684.109 1722.98,684.109 1723.54,684.109 1724.1,684.109 1724.66,684.109 1725.22,684.109 1725.78,684.109 1726.34,684.109 1726.9,684.109 1727.46,684.109 1728.02,684.109 1728.58,684.109 1729.14,684.109 1729.69,684.109 1730.25,684.109 1730.81,684.109 1731.37,684.109 1731.93,684.109 1732.49,684.109 1733.05,684.109 1733.61,684.109 1734.17,684.109 1734.73,684.109 1735.29,684.109 1735.85,684.109 1736.41,684.109 1736.97,684.109 1737.52,684.109 1738.08,684.109 1738.64,684.109 1739.2,684.109 1739.76,684.109 1740.32,684.109 1740.88,684.109 1741.44,684.109 1742,684.109 1742.56,684.109 1743.12,684.109 1743.68,684.109 1744.24,684.109 1744.79,684.109 1745.35,684.109 1745.91,684.109 1746.47,684.109 1747.03,684.109 1747.59,684.109 1748.15,684.109 1748.71,684.109 1749.27,684.109 1749.83,684.109 1750.39,684.109 1750.95,684.109 1751.51,684.109 1752.06,684.109 1752.62,684.109 1753.18,684.109 1753.74,684.109 1754.3,684.109 1754.86,684.109 1755.42,684.109 1755.98,684.109 1756.54,684.109 1757.1,684.109 1757.66,684.109 1758.22,684.109 1758.78,684.109 1759.34,684.109 1759.89,684.109 1760.45,684.109 1761.01,684.109 1761.57,684.109 1762.13,684.109 1762.69,684.109 1763.25,684.109 1763.81,684.109 1764.37,684.109 1764.93,684.109 1765.49,684.109 1766.05,684.109 1766.61,684.109 1767.16,684.109 1767.72,684.109 1768.28,684.109 1768.84,684.109 1769.4,684.109 1769.96,684.109 1770.52,684.109 1771.08,684.109 1771.64,684.109 1772.2,684.109 1772.76,684.109 1773.32,684.109 1773.88,684.109 1774.43,684.109 1774.99,684.109 1775.55,684.109 1776.11,684.109 1776.67,684.109 1777.23,684.109 1777.79,684.109 1778.35,684.109 1778.91,684.109 1779.47,684.109 1780.03,684.109 1780.59,684.109 1781.15,684.109 1781.71,684.109 1782.26,684.109 1782.82,684.109 1783.38,684.109 1783.94,684.109 1784.5,684.109 1785.06,684.109 1785.62,684.109 1786.18,684.109 1786.74,684.109 1787.3,684.109 1787.86,684.109 1788.42,684.109 1788.98,684.109 1789.53,684.109 1790.09,684.109 1790.65,684.109 1791.21,684.109 1791.77,684.109 1792.33,684.109 1792.89,684.109 1793.45,684.109 1794.01,684.109 1794.57,684.109 1795.13,684.109 1795.69,684.109 1796.25,684.109 1796.8,684.109 1797.36,684.109 1797.92,684.109 1798.48,684.109 1799.04,684.109 1799.6,684.109 1800.16,684.109 1800.72,684.109 1801.28,684.109 1801.84,684.109 1802.4,684.109 1802.96,684.109 1803.52,684.109 1804.08,684.109 1804.63,684.109 1805.19,684.109 1805.75,684.109 1806.31,684.109 1806.87,684.109 1807.43,684.109 1807.99,684.109 1808.55,684.109 1809.11,684.109 1809.67,684.109 1810.23,684.109 1810.79,684.109 1811.35,684.109 1811.9,684.109 1812.46,684.109 1813.02,684.109 1813.58,684.109 1814.14,684.109 1814.7,684.109 1815.26,684.109 1815.82,684.109 1816.38,684.109 1816.94,684.109 1817.5,684.109 1818.06,684.109 1818.62,684.109 1819.18,684.109 1819.73,684.109 1820.29,684.109 1820.85,684.109 1821.41,684.109 1821.97,684.109 1822.53,684.109 1823.09,684.109 1823.65,684.109 1824.21,684.109 1824.77,684.109 1825.33,684.109 1825.89,684.109 1826.45,684.109 1827,684.109 1827.56,684.109 1828.12,684.109 1828.68,684.109 1829.24,684.109 1829.8,684.109 1830.36,684.109 1830.92,684.109 1831.48,684.109 1832.04,684.109 1832.6,684.109 1833.16,684.109 1833.72,684.109 1834.27,684.109 1834.83,684.109 1835.39,684.109 1835.95,684.109 1836.51,684.109 1837.07,684.109 1837.63,684.109 1838.19,684.109 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.028668693756352 ± 0.02120203983982431\nProjected Energy: -4.0177253247094855 ± (0.004715033490287013, 0.004454552126727407)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.47423</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3836e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0199e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.816e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.272e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.715e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.944e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321591\n -3.3631242916133566\n -0.7590191922770817\n  0.13584182219621432\n  0.15789998694608798\n  0.8767114411781272\n  1.5305929970973384\n  1.5835732611867375\n  3.0728703303258644\n  3.1256726539518365\n  4.862107221562172\n  6.260694850380594\n  6.402671211183112\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor \nexp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the  Hamiltonian will have a complex eltype whereas otherwise the eltype is deterimed by the  type of the parameters t, u, and v.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
