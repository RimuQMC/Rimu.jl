var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip910\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip911\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip912\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.52 2211.02,1003.52 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.214 2211.02,746.214 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.911 2211.02,488.911 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.608 2211.02,231.608 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.52 423.181,1003.52 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.214 423.181,746.214 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.911 423.181,488.911 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.608 423.181,231.608 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.86 Q363.608 1253.73 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.52 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.86 Q344.395 1252.11 347.45 1247.52 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M290.043 1016.86 L306.363 1016.86 L306.363 1020.8 L284.418 1020.8 L284.418 1016.86 Q287.08 1014.11 291.664 1009.48 Q296.27 1004.83 297.451 1003.48 Q299.696 1000.96 300.576 999.224 Q301.478 997.464 301.478 995.775 Q301.478 993.02 299.534 991.284 Q297.613 989.548 294.511 989.548 Q292.312 989.548 289.858 990.312 Q287.427 991.075 284.65 992.626 L284.65 987.904 Q287.474 986.77 289.927 986.191 Q292.381 985.613 294.418 985.613 Q299.789 985.613 302.983 988.298 Q306.177 990.983 306.177 995.474 Q306.177 997.603 305.367 999.525 Q304.58 1001.42 302.474 1004.02 Q301.895 1004.69 298.793 1007.9 Q295.691 1011.1 290.043 1016.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 986.238 L334.58 986.238 L334.58 990.173 L320.506 990.173 L320.506 998.645 Q321.524 998.298 322.543 998.136 Q323.562 997.95 324.58 997.95 Q330.367 997.95 333.747 1001.12 Q337.126 1004.29 337.126 1009.71 Q337.126 1015.29 333.654 1018.39 Q330.182 1021.47 323.862 1021.47 Q321.687 1021.47 319.418 1021.1 Q317.173 1020.73 314.765 1019.99 L314.765 1015.29 Q316.849 1016.42 319.071 1016.98 Q321.293 1017.53 323.77 1017.53 Q327.774 1017.53 330.112 1015.43 Q332.45 1013.32 332.45 1009.71 Q332.45 1006.1 330.112 1003.99 Q327.774 1001.89 323.77 1001.89 Q321.895 1001.89 320.02 1002.3 Q318.168 1002.72 316.224 1003.6 L316.224 986.238 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 989.316 Q352.728 989.316 350.899 992.881 Q349.094 996.423 349.094 1003.55 Q349.094 1010.66 350.899 1014.22 Q352.728 1017.77 356.339 1017.77 Q359.973 1017.77 361.779 1014.22 Q363.608 1010.66 363.608 1003.55 Q363.608 996.423 361.779 992.881 Q359.973 989.316 356.339 989.316 M356.339 985.613 Q362.149 985.613 365.205 990.219 Q368.284 994.802 368.284 1003.55 Q368.284 1012.28 365.205 1016.89 Q362.149 1021.47 356.339 1021.47 Q350.529 1021.47 347.45 1016.89 Q344.395 1012.28 344.395 1003.55 Q344.395 994.802 347.45 990.219 Q350.529 985.613 356.339 985.613 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M286.062 728.934 L304.418 728.934 L304.418 732.87 L290.344 732.87 L290.344 741.342 Q291.363 740.995 292.381 740.832 Q293.4 740.647 294.418 740.647 Q300.205 740.647 303.585 743.819 Q306.964 746.99 306.964 752.406 Q306.964 757.985 303.492 761.087 Q300.02 764.166 293.701 764.166 Q291.525 764.166 289.256 763.795 Q287.011 763.425 284.603 762.684 L284.603 757.985 Q286.687 759.119 288.909 759.675 Q291.131 760.231 293.608 760.231 Q297.613 760.231 299.951 758.124 Q302.288 756.018 302.288 752.406 Q302.288 748.795 299.951 746.689 Q297.613 744.582 293.608 744.582 Q291.733 744.582 289.858 744.999 Q288.006 745.416 286.062 746.295 L286.062 728.934 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 732.013 Q322.566 732.013 320.737 735.578 Q318.932 739.12 318.932 746.249 Q318.932 753.356 320.737 756.92 Q322.566 760.462 326.177 760.462 Q329.811 760.462 331.617 756.92 Q333.446 753.356 333.446 746.249 Q333.446 739.12 331.617 735.578 Q329.811 732.013 326.177 732.013 M326.177 728.309 Q331.987 728.309 335.043 732.916 Q338.122 737.499 338.122 746.249 Q338.122 754.976 335.043 759.582 Q331.987 764.166 326.177 764.166 Q320.367 764.166 317.288 759.582 Q314.233 754.976 314.233 746.249 Q314.233 737.499 317.288 732.916 Q320.367 728.309 326.177 728.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 732.013 Q352.728 732.013 350.899 735.578 Q349.094 739.12 349.094 746.249 Q349.094 753.356 350.899 756.92 Q352.728 760.462 356.339 760.462 Q359.973 760.462 361.779 756.92 Q363.608 753.356 363.608 746.249 Q363.608 739.12 361.779 735.578 Q359.973 732.013 356.339 732.013 M356.339 728.309 Q362.149 728.309 365.205 732.916 Q368.284 737.499 368.284 746.249 Q368.284 754.976 365.205 759.582 Q362.149 764.166 356.339 764.166 Q350.529 764.166 347.45 759.582 Q344.395 754.976 344.395 746.249 Q344.395 737.499 347.45 732.916 Q350.529 728.309 356.339 728.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M284.835 471.631 L307.057 471.631 L307.057 473.622 L294.511 506.191 L289.627 506.191 L301.432 475.566 L284.835 475.566 L284.835 471.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 471.631 L334.58 471.631 L334.58 475.566 L320.506 475.566 L320.506 484.039 Q321.524 483.691 322.543 483.529 Q323.562 483.344 324.58 483.344 Q330.367 483.344 333.747 486.515 Q337.126 489.687 337.126 495.103 Q337.126 500.682 333.654 503.784 Q330.182 506.863 323.862 506.863 Q321.687 506.863 319.418 506.492 Q317.173 506.122 314.765 505.381 L314.765 500.682 Q316.849 501.816 319.071 502.372 Q321.293 502.927 323.77 502.927 Q327.774 502.927 330.112 500.821 Q332.45 498.714 332.45 495.103 Q332.45 491.492 330.112 489.386 Q327.774 487.279 323.77 487.279 Q321.895 487.279 320.02 487.696 Q318.168 488.113 316.224 488.992 L316.224 471.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 474.71 Q352.728 474.71 350.899 478.275 Q349.094 481.816 349.094 488.946 Q349.094 496.052 350.899 499.617 Q352.728 503.159 356.339 503.159 Q359.973 503.159 361.779 499.617 Q363.608 496.052 363.608 488.946 Q363.608 481.816 361.779 478.275 Q359.973 474.71 356.339 474.71 M356.339 471.006 Q362.149 471.006 365.205 475.613 Q368.284 480.196 368.284 488.946 Q368.284 497.673 365.205 502.279 Q362.149 506.863 356.339 506.863 Q350.529 506.863 347.45 502.279 Q344.395 497.673 344.395 488.946 Q344.395 480.196 347.45 475.613 Q350.529 471.006 356.339 471.006 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M256.664 244.953 L264.303 244.953 L264.303 218.587 L255.992 220.254 L255.992 215.995 L264.256 214.328 L268.932 214.328 L268.932 244.953 L276.571 244.953 L276.571 248.888 L256.664 248.888 L256.664 244.953 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M296.015 217.407 Q292.404 217.407 290.576 220.972 Q288.77 224.513 288.77 231.643 Q288.77 238.749 290.576 242.314 Q292.404 245.856 296.015 245.856 Q299.65 245.856 301.455 242.314 Q303.284 238.749 303.284 231.643 Q303.284 224.513 301.455 220.972 Q299.65 217.407 296.015 217.407 M296.015 213.703 Q301.826 213.703 304.881 218.31 Q307.96 222.893 307.96 231.643 Q307.96 240.37 304.881 244.976 Q301.826 249.559 296.015 249.559 Q290.205 249.559 287.127 244.976 Q284.071 240.37 284.071 231.643 Q284.071 222.893 287.127 218.31 Q290.205 213.703 296.015 213.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 217.407 Q322.566 217.407 320.737 220.972 Q318.932 224.513 318.932 231.643 Q318.932 238.749 320.737 242.314 Q322.566 245.856 326.177 245.856 Q329.811 245.856 331.617 242.314 Q333.446 238.749 333.446 231.643 Q333.446 224.513 331.617 220.972 Q329.811 217.407 326.177 217.407 M326.177 213.703 Q331.987 213.703 335.043 218.31 Q338.122 222.893 338.122 231.643 Q338.122 240.37 335.043 244.976 Q331.987 249.559 326.177 249.559 Q320.367 249.559 317.288 244.976 Q314.233 240.37 314.233 231.643 Q314.233 222.893 317.288 218.31 Q320.367 213.703 326.177 213.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 217.407 Q352.728 217.407 350.899 220.972 Q349.094 224.513 349.094 231.643 Q349.094 238.749 350.899 242.314 Q352.728 245.856 356.339 245.856 Q359.973 245.856 361.779 242.314 Q363.608 238.749 363.608 231.643 Q363.608 224.513 361.779 220.972 Q359.973 217.407 356.339 217.407 M356.339 213.703 Q362.149 213.703 365.205 218.31 Q368.284 222.893 368.284 231.643 Q368.284 240.37 365.205 244.976 Q362.149 249.559 356.339 249.559 Q350.529 249.559 347.45 244.976 Q344.395 240.37 344.395 231.643 Q344.395 222.893 347.45 218.31 Q350.529 213.703 356.339 213.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.608 4017.76,231.608 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1248.03 459.396,1247.61 459.964,1247.12 460.533,1245.5 461.101,1244.87 461.669,1243.13 462.238,1242.36 462.806,1240.47 463.375,1239.54 463.943,1238.5 464.511,1237.37 465.08,1236.12 465.648,1234.75 466.216,1230.2 466.785,1228.7 467.353,1226.01 467.921,1224.28 468.49,1222.42 469.058,1219.37 469.626,1217.18 470.195,1214.8 470.763,1211.27 471.331,1207.6 471.9,1204.81 472.468,1201.77 473.036,1198.58 473.605,1195.18 474.173,1189.6 474.741,1185.83 475.31,1181.84 475.878,1177.73 476.446,1173.37 477.015,1166.74 477.583,1159.91 478.152,1154.84 478.72,1149.67 479.288,1144.24 479.857,1136.5 480.425,1130.61 480.993,1124.57 481.562,1117.28 482.13,1110.81 482.698,1101.98 483.267,1095.16 483.835,1086.08 484.403,1077.93 484.972,1070.65 485.54,1063.17 486.108,1054.32 486.677,1046.44 487.245,1037.35 487.813,1029.11 488.382,1020.68 488.95,1011.11 489.518,998.333 490.087,988.573 490.655,979.859 491.224,966.894 491.792,956.953 492.36,946.927 492.929,935.832 493.497,924.788 494.065,915.691 494.634,904.37 495.202,894.146 495.77,884.865 496.339,873.34 496.907,861.04 497.475,850.742 498.044,837.439 498.612,826.5 499.18,815.444 499.749,803.518 500.317,793.643 500.885,783.829 501.454,772.013 502.022,762.409 502.59,750.623 503.159,740.314 503.727,730.894 504.295,720.57 504.864,712.194 505.432,701.902 506.001,691.799 506.569,680.724 507.137,669.891 507.706,658.183 508.274,647.557 508.842,639.102 509.411,626.835 509.979,619.889 510.547,611.887 511.116,604.757 511.684,595.61 512.252,585.556 512.821,576.9 513.389,568.425 513.957,561.133 514.526,554.967 515.094,548.992 515.662,539.853 516.231,532.042 516.799,524.401 517.367,519.727 517.936,512.236 518.504,506.952 519.072,499.636 519.641,494.462 520.209,489.134 520.778,482.833 521.346,476.585 521.914,469.666 522.483,462.73 523.051,457.304 523.619,453.024 524.188,446.723 524.756,440.453 525.324,434.319 525.893,430.29 526.461,428.556 527.029,423.621 527.598,419.818 528.166,414.856 528.734,408.994 529.303,406.418 529.871,402.863 530.439,399.227 531.008,395.889 531.576,390.507 532.144,387.161 532.713,385.839 533.281,380.446 533.85,376.234 534.418,371.107 534.986,366.43 535.555,362.743 536.123,357.102 536.691,352.543 537.26,350.525 537.828,346.47 538.396,343.268 538.965,341.009 539.533,338.991 540.101,337.997 540.67,336.211 541.238,332.268 541.806,332.517 542.375,330.612 542.943,325.595 543.511,326.936 544.08,321.998 544.648,317.25 545.216,314.921 545.785,313.447 546.353,310.895 546.921,308.51 547.49,305.282 548.058,303.202 548.627,302.312 549.195,300.326 549.763,300.693 550.332,299.617 550.9,298.716 551.468,295.316 552.037,293.23 552.605,290.422 553.173,290.627 553.742,287.985 554.31,286.423 554.878,283.557 555.447,281.211 556.015,280.847 556.583,279.491 557.152,278.403 557.72,276.095 558.288,277.037 558.857,274.635 559.425,275.371 559.993,275.3 560.562,277.077 561.13,276.491 561.698,276.07 562.267,272.778 562.835,271.252 563.404,272.078 563.972,268.502 564.54,267.35 565.109,266.128 565.677,264.775 566.245,262.804 566.814,260.858 567.382,258.947 567.95,258.299 568.519,258.748 569.087,260.022 569.655,258.244 570.224,258.524 570.792,258.75 571.36,257.937 571.929,259.339 572.497,259.418 573.065,257.621 573.634,256.686 574.202,257.772 574.77,256.949 575.339,257.078 575.907,261.219 576.476,262.019 577.044,262.763 577.612,260.363 578.181,259.236 578.749,258.889 579.317,257.607 579.886,255.611 580.454,257.729 581.022,257.329 581.591,259.23 582.159,258.716 582.727,260.448 583.296,258.935 583.864,256.504 584.432,256.056 585.001,257.782 585.569,258.396 586.137,258.926 586.706,257.507 587.274,256.877 587.842,256.433 588.411,256.659 588.979,256.312 589.547,255.865 590.116,256.259 590.684,255.679 591.253,253.065 591.821,254.711 592.389,255.146 592.958,255.588 593.526,254.891 594.094,253.062 594.663,252.545 595.231,253.014 595.799,250.535 596.368,250.179 596.936,248.982 597.504,249.523 598.073,248.193 598.641,246.848 599.209,246.66 599.778,245.503 600.346,246.501 600.914,246.539 601.483,245.308 602.051,246.302 602.619,242.943 603.188,242.114 603.756,241.189 604.325,240.136 604.893,240.224 605.461,240.299 606.03,240.449 606.598,242.687 607.166,242.611 607.735,241.572 608.303,242.598 608.871,243.63 609.44,241.398 610.008,241.338 610.576,241.444 611.145,241.451 611.713,242.676 612.281,241.5 612.85,241.538 613.418,242.438 613.986,242.358 614.555,240.362 615.123,238.367 615.691,238.275 616.26,236.193 616.828,236.542 617.396,237.7 617.965,238.856 618.533,239.043 619.102,239.262 619.67,238.315 620.238,238.246 620.807,235.347 621.375,235.799 621.943,236.335 622.512,235.616 623.08,235.808 623.648,236.079 624.217,238.665 624.785,238.888 625.353,237.897 625.922,239.925 626.49,236.719 627.058,238.102 627.627,234.246 628.195,233.765 628.763,235.234 629.332,235.604 629.9,236.733 630.468,234.85 631.037,231.095 631.605,234.979 632.173,235.271 632.742,233.512 633.31,234.93 633.879,236.472 634.447,235.568 635.015,234.865 635.584,234.152 636.152,235.358 636.72,234.683 637.289,234.149 637.857,235.641 638.425,235.227 638.994,235.498 639.562,238.797 640.13,238.797 640.699,238.866 641.267,239.933 641.835,238.683 642.404,239.709 642.972,240.744 643.54,241.717 644.109,240.678 644.677,241.448 645.245,241.436 645.814,240.247 646.382,238.093 646.951,239.053 647.519,238.035 648.087,238.044 648.656,238.02 649.224,238.098 649.792,237.084 650.361,235.299 650.929,234.662 651.497,235.886 652.066,236.101 652.634,237.325 653.202,238.463 653.771,237.274 654.339,237.336 654.907,235.42 655.476,236.457 656.044,235.383 656.612,234.535 657.181,234.738 657.749,236.208 658.317,236.393 658.886,236.342 659.454,235.41 660.022,235.425 660.591,234.577 661.159,234.8 661.728,236.198 662.296,236.885 662.864,235.866 663.433,237.072 664.001,236.198 664.569,236.459 665.138,232.464 665.706,235.958 666.274,234.866 666.843,235.942 667.411,236.009 667.979,235.975 668.548,236.058 669.116,234.017 669.684,235.225 670.253,235.339 670.821,234.548 671.389,233.392 671.958,231.632 672.526,231.1 673.094,231.555 673.663,227.781 674.231,227.794 674.799,227.295 675.368,229.211 675.936,229.724 676.505,230.282 677.073,227.81 677.641,230.61 678.21,230.371 678.778,230.973 679.346,233.443 679.915,234.789 680.483,236.068 681.051,235.29 681.62,236.65 682.188,232.509 682.756,235.082 683.325,236.25 683.893,235.293 684.461,235.315 685.03,233.657 685.598,234.112 686.166,235.364 686.735,234.371 687.303,231.537 687.871,233.983 688.44,235.225 689.008,235.337 689.577,235.616 690.145,235.799 690.713,236.091 691.282,236.278 691.85,236.585 692.418,234.441 692.987,235.647 693.555,234.842 694.123,235.033 694.692,236.26 695.26,236.313 695.828,235.318 696.397,235.317 696.965,235.384 697.533,235.613 698.102,234.699 698.67,235.871 699.238,237.323 699.807,238.261 700.375,241.328 700.943,238.915 701.512,240.992 702.08,240.92 702.648,239.753 703.217,239.541 703.785,238.152 704.354,238.064 704.922,237.026 705.49,237.974 706.059,238.826 706.627,239.788 707.195,238.323 707.764,237.242 708.332,237.12 708.9,237.854 709.469,237.848 710.037,235.614 710.605,235.532 711.174,231.408 711.742,229.675 712.31,230.096 712.879,230.531 713.447,228.754 714.015,227.968 714.584,227.725 715.152,227.157 715.72,227.768 716.289,229.324 716.857,231.614 717.425,231.836 717.994,232.308 718.562,233.654 719.131,229.661 719.699,230.166 720.267,230.361 720.836,230.909 721.404,229.091 721.972,232.492 722.541,231.654 723.109,233.074 723.677,234.266 724.246,235.476 724.814,235.517 725.382,238.497 725.951,238.46 726.519,237.151 727.087,236.91 727.656,238.943 728.224,237.703 728.792,238.39 729.361,238.195 729.929,235.982 730.497,232.794 731.066,235.982 731.634,234.979 732.203,236.073 732.771,236.245 733.339,237.22 733.908,237.476 734.476,237.337 735.044,234.948 735.613,237.131 736.181,233.855 736.749,230.827 737.318,231.983 737.886,230.995 738.454,232.319 739.023,232.389 739.591,234.578 740.159,233.473 740.728,232.782 741.296,233.025 741.864,233.07 742.433,236.024 743.001,235.042 743.569,235.845 744.138,235.613 744.706,235.584 745.274,238.517 745.843,235.07 746.411,235.947 746.98,235.784 747.548,235.55 748.116,236.404 748.685,237.273 749.253,237.972 749.821,237.775 750.39,237.58 750.958,235.089 751.526,234.943 752.095,233.882 752.663,236.048 753.231,235.793 753.8,235.647 754.368,232.594 754.936,231.94 755.505,231.156 756.073,231.394 756.641,231.656 757.21,232.981 757.778,234.084 758.346,233.98 758.915,234.013 759.483,231.775 760.052,231.94 760.62,231.965 761.188,230.827 761.757,232.031 762.325,232.365 762.893,235.625 763.462,235.412 764.03,235.21 764.598,235.081 765.167,235.056 765.735,235.172 766.303,235.934 766.872,233.86 767.44,235.979 768.008,234.801 768.577,232.505 769.145,231.555 769.713,230.348 770.282,231.32 770.85,232.491 771.418,233.704 771.987,231.814 772.555,232.995 773.123,233.367 773.692,232.281 774.26,230.399 774.829,231.52 775.397,231.405 775.965,228.248 776.534,230.62 777.102,229.873 777.67,231.123 778.239,231.34 778.807,229.358 779.375,230.666 779.944,234.044 780.512,233.817 781.08,235.782 781.649,236.483 782.217,237.52 782.785,236.294 783.354,234.854 783.922,233.455 784.49,232.683 785.059,231.787 785.627,232.932 786.195,232.928 786.764,231.874 787.332,231.955 787.9,233.881 788.469,235.602 789.037,235.386 789.606,237.192 790.174,236.922 790.742,235.476 791.311,236.197 791.879,235.858 792.447,237.783 793.016,236.675 793.584,237.318 794.152,236.095 794.721,235.835 795.289,235.638 795.857,235.188 796.426,235.944 796.994,235.514 797.562,235.268 798.131,236.233 798.699,234.992 799.267,235.936 799.836,234.729 800.404,234.349 800.972,234.252 801.541,232.259 802.109,233.021 802.678,235.158 803.246,234.962 803.814,235.757 804.383,235.364 804.951,237.299 805.519,233.777 806.088,231.706 806.656,233.906 807.224,232.661 807.793,233.796 808.361,232.711 808.929,232.38 809.498,230.186 810.066,230.349 810.634,230.114 811.203,230.127 811.771,229.275 812.339,231.467 812.908,230.53 813.476,228.224 814.044,229.276 814.613,228.504 815.181,229.085 815.749,228.55 816.318,226.812 816.886,227.132 817.455,224.406 818.023,222.717 818.591,223.491 819.16,226.075 819.728,226.599 820.296,229.041 820.865,228.326 821.433,228.619 822.001,227.909 822.57,228.311 823.138,230.793 823.706,227.879 824.275,228.23 824.843,229.843 825.411,231.081 825.98,231.369 826.548,232.591 827.116,234.731 827.685,234.704 828.253,234.819 828.821,232.66 829.39,230.353 829.958,230.493 830.526,229.514 831.095,226.652 831.663,228.141 832.232,229.723 832.8,231.036 833.368,232.115 833.937,231.108 834.505,231.156 835.073,231.233 835.642,230.506 836.21,232.835 836.778,231.721 837.347,228.788 837.915,231.065 838.483,230.177 839.052,231.612 839.62,231.576 840.188,233.046 840.757,233.219 841.325,234.252 841.893,234.602 842.462,233.41 843.03,234.526 843.598,234.337 844.167,232.223 844.735,233.406 845.304,232.393 845.872,232.503 846.44,231.652 847.009,233.781 847.577,232.798 848.145,235.895 848.714,236.592 849.282,238.546 849.85,238.252 850.419,238.844 850.987,238.243 851.555,238.776 852.124,234.324 852.692,236.156 853.26,234.756 853.829,235.619 854.397,235.334 854.965,234.221 855.534,232.016 856.102,231.793 856.67,230.841 857.239,229.992 857.807,232.191 858.375,233.241 858.944,233.206 859.512,235.217 860.081,233.007 860.649,235.923 861.217,234.623 861.786,235.284 862.354,236.962 862.922,236.629 863.491,236.326 864.059,236.892 864.627,237.591 865.196,239.405 865.764,238.967 866.332,237.455 866.901,236.816 867.469,236.489 868.037,235.983 868.606,232.501 869.174,229.127 869.742,229.331 870.311,229.547 870.879,228.622 871.447,225.712 872.016,226.16 872.584,226.799 873.152,228.355 873.721,227.531 874.289,229.795 874.858,232.023 875.426,231.153 875.994,231.095 876.563,233.066 877.131,232.978 877.699,233.766 878.268,233.574 878.836,234.447 879.404,234.155 879.973,233.826 880.541,231.568 881.109,232.525 881.678,232.22 882.246,232.01 882.814,233.044 883.383,232.922 883.951,233.979 884.519,233.713 885.088,230.466 885.656,229.561 886.224,226.735 886.793,229.19 887.361,228.551 887.93,228.929 888.498,231.351 889.066,230.37 889.635,229.205 890.203,229.443 890.771,229.6 891.34,229.558 891.908,230.863 892.476,230.86 893.045,232.845 893.613,230.583 894.181,230.782 894.75,228.791 895.318,229.925 895.886,230.975 896.455,229.097 897.023,228.691 897.591,227.058 898.16,226.324 898.728,225.807 899.296,226.304 899.865,227.936 900.433,227.213 901.001,228.643 901.57,229.896 902.138,230.244 902.707,232.54 903.275,233.805 903.843,233.6 904.412,234.714 904.98,235.534 905.548,233.217 906.117,233.226 906.685,234.235 907.253,233.092 907.822,231.933 908.39,233.063 908.958,234.971 909.527,235.7 910.095,237.632 910.663,237.34 911.232,236.762 911.8,236.462 912.368,235.172 912.937,230.947 913.505,231.131 914.073,229.175 914.642,228.487 915.21,227.932 915.779,228.396 916.347,229.866 916.915,228.039 917.484,228.148 918.052,227.296 918.62,229.549 919.189,229.903 919.757,230.058 920.325,229.487 920.894,227.531 921.462,227.851 922.03,229.171 922.599,231.519 923.167,230.606 923.735,230.782 924.304,229.753 924.872,233.328 925.44,234.405 926.009,235.212 926.577,235.051 927.145,234.776 927.714,233.706 928.282,232.807 928.85,231.741 929.419,231.823 929.987,232.843 930.556,230.793 931.124,229.677 931.692,230.895 932.261,231.113 932.829,232.356 933.397,232.324 933.966,235.2 934.534,235.08 935.102,232.949 935.671,233.034 936.239,231.968 936.807,232.205 937.376,232.048 937.944,231.094 938.512,231.2 939.081,231.227 939.649,230.173 940.217,231.364 940.786,230.638 941.354,231.789 941.922,231.862 942.491,228.837 943.059,229.269 943.627,230.511 944.196,232.856 944.764,233.987 945.333,231.972 945.901,234.042 946.469,235.134 947.038,230.883 947.606,230.848 948.174,229.768 948.743,231.155 949.311,232.289 949.879,232.339 950.448,233.252 951.016,231.984 951.584,232.038 952.153,227.92 952.721,229.415 953.289,231.82 953.858,231.005 954.426,231.167 954.994,231.248 955.563,229.259 956.131,230.434 956.699,230.661 957.268,230.606 957.836,231.709 958.405,231.551 958.973,231.524 959.541,228.529 960.11,227.029 960.678,225.359 961.246,226.958 961.815,227.058 962.383,227.309 962.951,228.735 963.52,231.038 964.088,230.951 964.656,230.96 965.225,229.979 965.793,230.001 966.361,231.468 966.93,232.674 967.498,234.827 968.066,235.542 968.635,235.493 969.203,234.407 969.771,235.383 970.34,235.394 970.908,234.186 971.476,230 972.045,230.32 972.613,232.674 973.182,232.834 973.75,236.043 974.318,235.781 974.887,234.622 975.455,236.624 976.023,236.337 976.592,237.365 977.16,238.149 977.728,237.763 978.297,239.445 978.865,238.945 979.433,239.411 980.002,239.914 980.57,239.376 981.138,239.051 981.707,240.593 982.275,239.991 982.843,238.475 983.412,236.976 983.98,236.777 984.548,235.203 985.117,235.969 985.685,236.739 986.253,236.36 986.822,235.949 987.39,235.494 987.959,234.999 988.527,235.684 989.095,234.467 989.664,233.037 990.232,231.823 990.8,231.542 991.369,232.782 991.937,232.693 992.505,231.42 993.074,232.295 993.642,231.02 994.21,232.996 994.779,233.75 995.347,232.734 995.915,234.441 996.484,235.048 997.052,233.559 997.62,233.495 998.189,233.287 998.757,232.016 999.325,231.436 999.894,229.267 1000.46,228.158 1001.03,227.16 1001.6,228.346 1002.17,227.46 1002.74,230.855 1003.3,231.76 1003.87,232.964 1004.44,232.754 1005.01,232.742 1005.58,233.884 1006.15,233.503 1006.71,235.538 1007.28,236.241 1007.85,235.847 1008.42,235.531 1008.99,236.227 1009.56,233.878 1010.12,233.602 1010.69,232.17 1011.26,233.044 1011.83,232.94 1012.4,230.601 1012.97,230.515 1013.53,232.447 1014.1,232.167 1014.67,233.141 1015.24,232.933 1015.81,236.855 1016.38,236.395 1016.94,234.037 1017.51,230.646 1018.08,228.661 1018.65,228.788 1019.22,227.912 1019.79,225.99 1020.35,225.08 1020.92,225.528 1021.49,226.931 1022.06,226.124 1022.63,224.489 1023.2,226.88 1023.76,227.117 1024.33,228.342 1024.9,227.392 1025.47,226.346 1026.04,227.654 1026.61,227.961 1027.17,228.094 1027.74,228.422 1028.31,225.702 1028.88,226.165 1029.45,226.595 1030.02,225.839 1030.58,227.457 1031.15,227.679 1031.72,227.915 1032.29,228.193 1032.86,228.344 1033.43,230.672 1033.99,231.888 1034.56,231.76 1035.13,232.576 1035.7,231.592 1036.27,229.465 1036.84,230.998 1037.4,229.967 1037.97,231.301 1038.54,231.279 1039.11,231.346 1039.68,232.521 1040.25,231.543 1040.81,232.641 1041.38,235.665 1041.95,235.462 1042.52,231.408 1043.09,231.47 1043.66,233.61 1044.22,233.582 1044.79,234.587 1045.36,236.592 1045.93,236.263 1046.5,236.922 1047.07,236.5 1047.63,236.213 1048.2,236.065 1048.77,237.795 1049.34,238.355 1049.91,237.836 1050.48,235.443 1051.05,233.753 1051.61,235.666 1052.18,237.304 1052.75,235.825 1053.32,235.43 1053.89,236.16 1054.46,235.818 1055.02,235.474 1055.59,234.133 1056.16,233.854 1056.73,231.428 1057.3,232.374 1057.87,231.205 1058.43,231.146 1059,230.007 1059.57,229.869 1060.14,231.165 1060.71,228.982 1061.28,229.035 1061.84,229.438 1062.41,226.321 1062.98,226.649 1063.55,224.92 1064.12,225.323 1064.69,224.734 1065.25,226.035 1065.82,226.232 1066.39,226.524 1066.96,227.896 1067.53,231.433 1068.1,229.327 1068.66,228.636 1069.23,229.008 1069.8,228.432 1070.37,229.644 1070.94,226.68 1071.51,228.076 1072.07,230.211 1072.64,231.251 1073.21,230.194 1073.78,231.184 1074.35,230.188 1074.92,228.09 1075.48,228.203 1076.05,230.351 1076.62,231.394 1077.19,232.313 1077.76,232.494 1078.33,231.565 1078.89,232.447 1079.46,233.406 1080.03,233.158 1080.6,233.019 1081.17,232.714 1081.74,229.671 1082.3,226.642 1082.87,227.999 1083.44,229.118 1084.01,229.433 1084.58,230.737 1085.15,228.873 1085.71,230.118 1086.28,228.216 1086.85,229.555 1087.42,228.649 1087.99,229.888 1088.56,230.117 1089.12,231.473 1089.69,232.584 1090.26,234.66 1090.83,233.412 1091.4,235.338 1091.97,235.124 1092.53,234.902 1093.1,233.576 1093.67,232.53 1094.24,231.491 1094.81,229.489 1095.38,229.709 1095.94,230.883 1096.51,230.929 1097.08,233.124 1097.65,232.908 1098.22,231.703 1098.79,230.692 1099.35,230.73 1099.92,227.796 1100.49,229.049 1101.06,227.136 1101.63,227.431 1102.2,229.927 1102.76,230.347 1103.33,229.465 1103.9,233.818 1104.47,232.687 1105.04,232.689 1105.61,231.815 1106.17,228.865 1106.74,230.26 1107.31,229.574 1107.88,230.015 1108.45,231.071 1109.02,230.038 1109.58,232.479 1110.15,232.469 1110.72,231.444 1111.29,232.623 1111.86,232.019 1112.43,231.221 1112.99,229.21 1113.56,229.347 1114.13,228.404 1114.7,229.81 1115.27,231.062 1115.84,232.149 1116.4,233.223 1116.97,231.198 1117.54,231.26 1118.11,232.118 1118.68,232.36 1119.25,233.387 1119.81,233.524 1120.38,233.353 1120.95,234.338 1121.52,233.372 1122.09,232.143 1122.66,233.296 1123.23,233.075 1123.79,233.012 1124.36,233.232 1124.93,232.137 1125.5,234.257 1126.07,234.473 1126.64,236.486 1127.2,235.137 1127.77,235.894 1128.34,233.677 1128.91,233.702 1129.48,233.581 1130.05,234.844 1130.61,237.872 1131.18,238.398 1131.75,238.905 1132.32,238.563 1132.89,236.83 1133.46,236.284 1134.02,235.773 1134.59,235.555 1135.16,233.36 1135.73,233.332 1136.3,234.088 1136.87,235.817 1137.43,233.36 1138,234.18 1138.57,234.82 1139.14,232.389 1139.71,229.206 1140.28,230.192 1140.84,229.277 1141.41,225.192 1141.98,226.653 1142.55,228.071 1143.12,228.178 1143.69,226.438 1144.25,226.885 1144.82,228.183 1145.39,228.436 1145.96,227.427 1146.53,227.643 1147.1,228.622 1147.66,229.812 1148.23,228.648 1148.8,229.081 1149.37,228.385 1149.94,227.634 1150.51,227.947 1151.07,227.151 1151.64,228.763 1152.21,229.064 1152.78,227.404 1153.35,228.749 1153.92,227.938 1154.48,230.347 1155.05,231.665 1155.62,231.579 1156.19,232.667 1156.76,231.694 1157.33,231.908 1157.89,235.004 1158.46,235.968 1159.03,237.922 1159.6,237.512 1160.17,238.318 1160.74,237.744 1161.3,238.285 1161.87,238.93 1162.44,239.49 1163.01,238.906 1163.58,239.499 1164.15,237.899 1164.71,238.59 1165.28,238.065 1165.85,235.395 1166.42,233.166 1166.99,232.921 1167.56,233.939 1168.12,232.674 1168.69,231.564 1169.26,230.493 1169.83,230.435 1170.4,231.234 1170.97,233.241 1171.53,236.01 1172.1,237.409 1172.67,236.863 1173.24,237.245 1173.81,234.835 1174.38,233.483 1174.94,232.342 1175.51,234.157 1176.08,234.878 1176.65,234.616 1177.22,231.396 1177.79,232.268 1178.35,232.161 1178.92,231.253 1179.49,229.968 1180.06,230.818 1180.63,231.794 1181.2,231.931 1181.76,229.649 1182.33,230.705 1182.9,228.926 1183.47,230.146 1184.04,232.411 1184.61,230.401 1185.17,231.303 1185.74,232.186 1186.31,228.944 1186.88,229.027 1187.45,228.158 1188.02,228.339 1188.58,229.654 1189.15,231.659 1189.72,232.403 1190.29,231.233 1190.86,229.454 1191.43,228.578 1192,228.761 1192.56,225.828 1193.13,227.363 1193.7,227.855 1194.27,227.149 1194.84,226.509 1195.41,225.894 1195.97,226.304 1196.54,226.738 1197.11,227.096 1197.68,224.405 1198.25,223.137 1198.82,222.98 1199.38,228.609 1199.95,228.836 1200.52,227.844 1201.09,228.098 1201.66,226.23 1202.23,224.649 1202.79,224.444 1203.36,227.04 1203.93,228.352 1204.5,228.75 1205.07,227.9 1205.64,226.127 1206.2,226.737 1206.77,227.139 1207.34,228.539 1207.91,227.861 1208.48,226.943 1209.05,226.273 1209.61,223.654 1210.18,224.534 1210.75,225.101 1211.32,225.77 1211.89,225.442 1212.46,227.195 1213.02,228.838 1213.59,231.402 1214.16,232.511 1214.73,233.581 1215.3,234.43 1215.87,237.513 1216.43,237.284 1217,233.049 1217.57,236.407 1218.14,236.195 1218.71,237.049 1219.28,237.638 1219.84,237.456 1220.41,237.271 1220.98,237.041 1221.55,235.691 1222.12,234.483 1222.69,232.27 1223.25,232.414 1223.82,232.543 1224.39,233.694 1224.96,236.602 1225.53,237.407 1226.1,235.051 1226.66,235.852 1227.23,236.888 1227.8,236.415 1228.37,234.003 1228.94,236.159 1229.51,235.875 1230.07,235.459 1230.64,233.048 1231.21,232.885 1231.78,234.489 1232.35,235.289 1232.92,235.957 1233.48,235.488 1234.05,234.159 1234.62,232.949 1235.19,235.699 1235.76,235.561 1236.33,235.185 1236.89,235.801 1237.46,235.72 1238.03,235.578 1238.6,233.299 1239.17,233.423 1239.74,234.235 1240.3,233.111 1240.87,231.189 1241.44,231.164 1242.01,235.069 1242.58,235.722 1243.15,234.55 1243.71,238.277 1244.28,235.728 1244.85,238.331 1245.42,235.784 1245.99,236.361 1246.56,233.834 1247.12,235.636 1247.69,235.309 1248.26,234.894 1248.83,234.579 1249.4,233.155 1249.97,233.87 1250.53,233.464 1251.1,232.166 1251.67,228.804 1252.24,229.991 1252.81,228.921 1253.38,228.989 1253.94,228.013 1254.51,229.364 1255.08,227.299 1255.65,226.315 1256.22,226.567 1256.79,226.666 1257.35,228.992 1257.92,229.13 1258.49,231.196 1259.06,231.116 1259.63,231.194 1260.2,229.325 1260.76,229.422 1261.33,227.48 1261.9,228.701 1262.47,226.745 1263.04,227.066 1263.61,227.427 1264.18,228.786 1264.74,228.99 1265.31,230.304 1265.88,228.422 1266.45,229.797 1267.02,228.867 1267.59,230.153 1268.15,228.278 1268.72,226.456 1269.29,226.662 1269.86,228.346 1270.43,228.462 1271,231.449 1271.56,231.361 1272.13,230.361 1272.7,231.241 1273.27,232.415 1273.84,233.295 1274.41,235.219 1274.97,233.824 1275.54,233.716 1276.11,233.694 1276.68,234.47 1277.25,236.17 1277.82,236.931 1278.38,236.507 1278.95,236.4 1279.52,236.007 1280.09,237.724 1280.66,239.249 1281.23,238.505 1281.79,237.077 1282.36,236.758 1282.93,236.314 1283.5,233.8 1284.07,232.703 1284.64,232.551 1285.2,232.554 1285.77,232.525 1286.34,232.338 1286.91,230.149 1287.48,229.354 1288.05,228.373 1288.61,227.662 1289.18,228.055 1289.75,228.252 1290.32,229.552 1290.89,229.741 1291.46,230.926 1292.02,228.175 1292.59,228.574 1293.16,228.777 1293.73,227.539 1294.3,225.687 1294.87,226.052 1295.43,227.4 1296,226.626 1296.57,226.966 1297.14,227.331 1297.71,228.728 1298.28,230.096 1298.84,231.434 1299.41,232.493 1299.98,233.602 1300.55,233.645 1301.12,233.61 1301.69,233.589 1302.25,232.734 1302.82,232.895 1303.39,231.931 1303.96,230.781 1304.53,227.759 1305.1,228.963 1305.66,229.408 1306.23,231.656 1306.8,231.725 1307.37,232.901 1307.94,233.739 1308.51,233.553 1309.07,233.361 1309.64,231.347 1310.21,231.241 1310.78,233.265 1311.35,233.144 1311.92,232.993 1312.48,232.82 1313.05,233.653 1313.62,233.375 1314.19,237.454 1314.76,239.1 1315.33,237.692 1315.89,236.122 1316.46,234.527 1317.03,236.321 1317.6,237.932 1318.17,236.404 1318.74,233.752 1319.3,232.614 1319.87,233.39 1320.44,234.268 1321.01,233.159 1321.58,232.89 1322.15,232.815 1322.71,231.72 1323.28,234.611 1323.85,232.312 1324.42,232.16 1324.99,230.047 1325.56,229.945 1326.12,228.991 1326.69,230.278 1327.26,231.34 1327.83,229.455 1328.4,230.581 1328.97,231.61 1329.53,232.57 1330.1,233.332 1330.67,229.173 1331.24,227.234 1331.81,228.398 1332.38,230.787 1332.94,229.626 1333.51,230.73 1334.08,229.609 1334.65,230.645 1335.22,230.823 1335.79,230.894 1336.36,229.849 1336.92,228.835 1337.49,230.15 1338.06,229.392 1338.63,229.57 1339.2,229.389 1339.77,230.578 1340.33,230.703 1340.9,230.529 1341.47,232.767 1342.04,231.579 1342.61,229.802 1343.18,229.835 1343.74,229.619 1344.31,229.87 1344.88,226.756 1345.45,227.269 1346.02,225.45 1346.59,226.93 1347.15,228.433 1347.72,229.608 1348.29,228.717 1348.86,230.235 1349.43,230.518 1350,230.598 1350.56,230.874 1351.13,230.927 1351.7,231.246 1352.27,231.337 1352.84,231.406 1353.41,230.309 1353.97,228.447 1354.54,230.758 1355.11,229.907 1355.68,229.083 1356.25,229.351 1356.82,227.39 1357.38,228.615 1357.95,228.968 1358.52,226.111 1359.09,225.742 1359.66,224.419 1360.23,225.914 1360.79,226.323 1361.36,225.816 1361.93,225.109 1362.5,226.582 1363.07,225.058 1363.64,224.617 1364.2,226.341 1364.77,226.766 1365.34,228.271 1365.91,228.586 1366.48,230.98 1367.05,229.886 1367.61,232.114 1368.18,231.381 1368.75,231.467 1369.32,230.597 1369.89,231.928 1370.46,229.79 1371.02,229.102 1371.59,230.357 1372.16,227.592 1372.73,227.818 1373.3,230.28 1373.87,229.558 1374.43,229.812 1375,230.181 1375.57,228.407 1376.14,229.691 1376.71,232.024 1377.28,231.949 1377.84,230.994 1378.41,232.142 1378.98,232.187 1379.55,235.336 1380.12,235.382 1380.69,235.211 1381.25,235.052 1381.82,232.785 1382.39,231.827 1382.96,232.02 1383.53,231.283 1384.1,231.313 1384.66,230.599 1385.23,233.922 1385.8,233.095 1386.37,232.908 1386.94,234.037 1387.51,233.98 1388.07,233.773 1388.64,236.012 1389.21,236.69 1389.78,234.225 1390.35,234.088 1390.92,234.199 1391.48,234.014 1392.05,233.053 1392.62,234.201 1393.19,233.026 1393.76,232.903 1394.33,233.862 1394.89,233.584 1395.46,231.365 1396.03,232.504 1396.6,232.427 1397.17,233.42 1397.74,231.615 1398.3,230.791 1398.87,232.831 1399.44,232.727 1400.01,232.91 1400.58,236.134 1401.15,234.719 1401.71,233.587 1402.28,235.734 1402.85,232.804 1403.42,233.81 1403.99,233.529 1404.56,234.496 1405.13,234.294 1405.69,234.937 1406.26,235.853 1406.83,233.527 1407.4,233.573 1407.97,232.314 1408.54,233.413 1409.1,234.314 1409.67,234.993 1410.24,235.874 1410.81,236.624 1411.38,236.313 1411.95,236.07 1412.51,234.648 1413.08,232.459 1413.65,232.533 1414.22,233.475 1414.79,233.621 1415.36,233.366 1415.92,237.313 1416.49,236.833 1417.06,237.546 1417.63,236.031 1418.2,235.551 1418.77,234.447 1419.33,236.237 1419.9,235.892 1420.47,234.312 1421.04,234.119 1421.61,236.088 1422.18,234.74 1422.74,234.451 1423.31,235.37 1423.88,235.027 1424.45,234.835 1425.02,234.668 1425.59,235.46 1426.15,233.327 1426.72,232.134 1427.29,232.085 1427.86,232.298 1428.43,231.295 1429,232.188 1429.56,230.11 1430.13,231.192 1430.7,231.052 1431.27,231.034 1431.84,232.278 1432.41,232.007 1432.97,230.98 1433.54,229.967 1434.11,231.026 1434.68,232.929 1435.25,232.794 1435.82,233.678 1436.38,233.344 1436.95,233.014 1437.52,234.85 1438.09,235.595 1438.66,234.053 1439.23,232.633 1439.79,231.658 1440.36,234.544 1440.93,233.998 1441.5,232.751 1442.07,234.534 1442.64,234.466 1443.2,234.019 1443.77,234.904 1444.34,235.605 1444.91,234.206 1445.48,235.939 1446.05,231.353 1446.61,231.429 1447.18,232.474 1447.75,233.296 1448.32,235.342 1448.89,233.797 1449.46,233.57 1450.02,231.373 1450.59,231.228 1451.16,231.103 1451.73,229.741 1452.3,231.577 1452.87,232.159 1453.43,230.866 1454,231.041 1454.57,231.892 1455.14,230.717 1455.71,230.559 1456.28,230.397 1456.84,231.427 1457.41,231.252 1457.98,232.186 1458.55,233.067 1459.12,231.958 1459.69,231.779 1460.25,233.565 1460.82,233.319 1461.39,231.23 1461.96,232.103 1462.53,231.689 1463.1,230.541 1463.66,230.533 1464.23,228.535 1464.8,228.635 1465.37,230.784 1465.94,231.846 1466.51,232.573 1467.07,232.366 1467.64,232.145 1468.21,230.801 1468.78,227.538 1469.35,228.865 1469.92,229.998 1470.48,229.997 1471.05,229.996 1471.62,229.041 1472.19,229.25 1472.76,228.305 1473.33,227.337 1473.89,228.497 1474.46,227.61 1475.03,229 1475.6,229.153 1476.17,229.43 1476.74,231.667 1477.31,231.755 1477.87,231.82 1478.44,233.741 1479.01,233.385 1479.58,232.07 1480.15,231.862 1480.72,232.838 1481.28,232.612 1481.85,233.431 1482.42,232.449 1482.99,233.11 1483.56,231.888 1484.13,231.795 1484.69,233.86 1485.26,230.638 1485.83,229.55 1486.4,229.358 1486.97,230.841 1487.54,231.868 1488.1,233.599 1488.67,233.373 1489.24,235.175 1489.81,231.803 1490.38,231.662 1490.95,230.503 1491.51,230.593 1492.08,229.663 1492.65,232.898 1493.22,232.718 1493.79,230.356 1494.36,227.229 1494.92,227.318 1495.49,226.647 1496.06,225.8 1496.63,227.109 1497.2,229.399 1497.77,228.539 1498.33,228.693 1498.9,228.033 1499.47,227.174 1500.04,223.347 1500.61,225.999 1501.18,224.682 1501.74,226.227 1502.31,224.615 1502.88,225.193 1503.45,224.368 1504.02,226.035 1504.59,225.351 1505.15,227.707 1505.72,227.214 1506.29,227.48 1506.86,227.687 1507.43,228.021 1508,223.141 1508.56,224.712 1509.13,225.169 1509.7,225.561 1510.27,226.957 1510.84,228.381 1511.41,229.751 1511.97,232.066 1512.54,232.929 1513.11,234.131 1513.68,233.143 1514.25,235.102 1514.82,235.794 1515.38,235.662 1515.95,236.421 1516.52,233.323 1517.09,232.386 1517.66,231.498 1518.23,229.41 1518.79,230.877 1519.36,229.972 1519.93,230.004 1520.5,230.095 1521.07,228.294 1521.64,230.526 1522.2,232.854 1522.77,231.678 1523.34,233.893 1523.91,232.767 1524.48,231.673 1525.05,230.811 1525.61,233.059 1526.18,232.93 1526.75,232.021 1527.32,232.008 1527.89,233.175 1528.46,232.034 1529.02,232.853 1529.59,230.744 1530.16,230.761 1530.73,232.909 1531.3,233.913 1531.87,233.125 1532.43,232.926 1533,230.989 1533.57,228.031 1534.14,229.508 1534.71,228.741 1535.28,229.136 1535.84,228.47 1536.41,228.902 1536.98,228.05 1537.55,228.393 1538.12,227.723 1538.69,228.124 1539.25,228.491 1539.82,226.583 1540.39,226.06 1540.96,225.397 1541.53,225.052 1542.1,226.683 1542.66,228.072 1543.23,229.527 1543.8,231.748 1544.37,234.992 1544.94,232.858 1545.51,232.846 1546.08,231.923 1546.64,230.946 1547.21,234.176 1547.78,233.089 1548.35,235.218 1548.92,233.674 1549.49,234.866 1550.05,233.666 1550.62,235.715 1551.19,236.636 1551.76,237.358 1552.33,236.927 1552.9,237.445 1553.46,237.965 1554.03,237.649 1554.6,240.638 1555.17,239.92 1555.74,240.142 1556.31,240.771 1556.87,241.151 1557.44,240.643 1558.01,238.173 1558.58,236.661 1559.15,234.226 1559.72,235.094 1560.28,235.772 1560.85,236.451 1561.42,237.988 1561.99,237.427 1562.56,234.805 1563.13,235.414 1563.69,237.076 1564.26,236.679 1564.83,237.302 1565.4,235.85 1565.97,235.45 1566.54,234.074 1567.1,232.793 1567.67,232.742 1568.24,231.539 1568.81,232.611 1569.38,235.547 1569.95,235.325 1570.51,236.2 1571.08,234.833 1571.65,235.485 1572.22,233.974 1572.79,233.892 1573.36,231.513 1573.92,230.196 1574.49,230.096 1575.06,230.022 1575.63,229.097 1576.2,228.028 1576.77,228.01 1577.33,229.106 1577.9,227.015 1578.47,222.27 1579.04,219.895 1579.61,220.535 1580.18,221.446 1580.74,222.09 1581.31,222.722 1581.88,223.141 1582.45,222.897 1583.02,222.424 1583.59,226.063 1584.15,228.374 1584.72,228.567 1585.29,228.904 1585.86,226.133 1586.43,226.716 1587,225.018 1587.56,226.608 1588.13,225.924 1588.7,225.302 1589.27,224.623 1589.84,225.194 1590.41,226.771 1590.97,228.958 1591.54,229.255 1592.11,230.842 1592.68,230.902 1593.25,231.046 1593.82,233.387 1594.38,232.401 1594.95,231.532 1595.52,233.487 1596.09,234.592 1596.66,234.385 1597.23,235.29 1597.79,233.014 1598.36,233.141 1598.93,230.916 1599.5,231.185 1600.07,230.207 1600.64,229.562 1601.2,228.867 1601.77,228.17 1602.34,227.64 1602.91,225.883 1603.48,226.493 1604.05,226.819 1604.61,227.287 1605.18,226.77 1605.75,227.308 1606.32,229.753 1606.89,233.22 1607.46,231.921 1608.02,232.023 1608.59,232.026 1609.16,231.115 1609.73,232.576 1610.3,233.574 1610.87,235.649 1611.43,235.614 1612,236.575 1612.57,235.331 1613.14,235.171 1613.71,236.03 1614.28,233.651 1614.84,234.85 1615.41,236.655 1615.98,235.267 1616.55,236.105 1617.12,236.915 1617.69,237.537 1618.26,238.245 1618.82,240.091 1619.39,238.359 1619.96,238.786 1620.53,238.233 1621.1,237.512 1621.67,238.113 1622.23,237.811 1622.8,237.412 1623.37,235.925 1623.94,236.749 1624.51,238.501 1625.08,237.966 1625.64,237.446 1626.21,237.224 1626.78,234.768 1627.35,236.594 1627.92,240.05 1628.49,239.288 1629.05,236.667 1629.62,236.262 1630.19,235.887 1630.76,237.721 1631.33,237.105 1631.9,238.767 1632.46,237.302 1633.03,235.601 1633.6,234.371 1634.17,235.04 1634.74,232.65 1635.31,232.436 1635.87,229.098 1636.44,228.3 1637.01,226.417 1637.58,225.689 1638.15,227.105 1638.72,225.131 1639.28,225.422 1639.85,225.895 1640.42,226.108 1640.99,230.109 1641.56,233.25 1642.13,232.098 1642.69,231.942 1643.26,232.065 1643.83,233.086 1644.4,233.008 1644.97,232.88 1645.54,232.675 1646.1,231.521 1646.67,231.462 1647.24,230.489 1647.81,229.647 1648.38,229.618 1648.95,231.618 1649.51,234.452 1650.08,233.27 1650.65,234.021 1651.22,232.738 1651.79,234.118 1652.36,233.884 1652.92,232.472 1653.49,233.376 1654.06,233.038 1654.63,230.908 1655.2,231.841 1655.77,233.528 1656.33,231.304 1656.9,232.165 1657.47,230.017 1658.04,230.974 1658.61,229.872 1659.18,230.683 1659.74,230.57 1660.31,231.448 1660.88,231.242 1661.45,230.118 1662.02,232.3 1662.59,230.12 1663.15,230.079 1663.72,229.061 1664.29,230.377 1664.86,230.557 1665.43,228.428 1666,227.56 1666.56,229.795 1667.13,227.873 1667.7,228.865 1668.27,226.917 1668.84,228.224 1669.41,228.641 1669.97,229.854 1670.54,228.983 1671.11,229.175 1671.68,229.361 1672.25,229.181 1672.82,229.055 1673.38,227.291 1673.95,225.602 1674.52,226.03 1675.09,226.301 1675.66,226.68 1676.23,225.855 1676.79,225.996 1677.36,227.24 1677.93,227.635 1678.5,227.954 1679.07,228.092 1679.64,229.285 1680.2,230.769 1680.77,230.899 1681.34,232.792 1681.91,232.772 1682.48,232.677 1683.05,231.582 1683.61,231.555 1684.18,233.609 1684.75,233.476 1685.32,234.399 1685.89,234.127 1686.46,233.878 1687.02,232.743 1687.59,234.507 1688.16,235.052 1688.73,233.575 1689.3,232.373 1689.87,233.199 1690.44,233.131 1691,231.001 1691.57,228.92 1692.14,232.287 1692.71,232.182 1693.28,230.106 1693.85,230.963 1694.41,231.005 1694.98,229.791 1695.55,226.976 1696.12,228.302 1696.69,227.491 1697.26,228.857 1697.82,228.185 1698.39,225.337 1698.96,225.956 1699.53,226.432 1700.1,227.892 1700.67,228.176 1701.23,228.416 1701.8,229.512 1702.37,229.023 1702.94,231.321 1703.51,229.369 1704.08,230.583 1704.64,230.713 1705.21,228.951 1705.78,230.383 1706.35,232.506 1706.92,232.499 1707.49,233.628 1708.05,234.616 1708.62,234.376 1709.19,232.989 1709.76,230.95 1710.33,231.088 1710.9,232.211 1711.46,231.287 1712.03,231.592 1712.6,231.548 1713.17,233.318 1713.74,234.241 1714.31,233.14 1714.87,232.998 1715.44,231.825 1716.01,231.63 1716.58,232.772 1717.15,233.704 1717.72,232.521 1718.28,232.507 1718.85,230.545 1719.42,230.556 1719.99,228.6 1720.56,228.759 1721.13,229.896 1721.69,231.038 1722.26,233.103 1722.83,230.937 1723.4,231.002 1723.97,230.142 1724.54,231.472 1725.1,230.59 1725.67,231.812 1726.24,232.881 1726.81,233.052 1727.38,234.318 1727.95,235.271 1728.51,236.069 1729.08,235.872 1729.65,234.695 1730.22,235.543 1730.79,235.208 1731.36,233.948 1731.92,232.757 1732.49,231.677 1733.06,230.65 1733.63,230.723 1734.2,230.986 1734.77,231.179 1735.33,232.268 1735.9,233.181 1736.47,233.172 1737.04,232.782 1737.61,232.669 1738.18,232.621 1738.74,231.581 1739.31,232.754 1739.88,231.587 1740.45,231.563 1741.02,230.527 1741.59,231.639 1742.15,232.786 1742.72,231.577 1743.29,231.495 1743.86,231.219 1744.43,231.12 1745,232.236 1745.56,233.226 1746.13,233.157 1746.7,233.013 1747.27,235.746 1747.84,235.353 1748.41,236.276 1748.97,235.94 1749.54,233.59 1750.11,231.553 1750.68,231.315 1751.25,231.415 1751.82,229.401 1752.38,229.694 1752.95,230.975 1753.52,232.917 1754.09,230.861 1754.66,230.972 1755.23,231.187 1755.79,231.305 1756.36,229.139 1756.93,229.308 1757.5,229.532 1758.07,226.709 1758.64,225.959 1759.21,227.288 1759.77,227.77 1760.34,228.058 1760.91,227.088 1761.48,228.489 1762.05,227.785 1762.62,229.1 1763.18,229.399 1763.75,229.636 1764.32,229.634 1764.89,229.753 1765.46,230.784 1766.03,228.762 1766.59,227.83 1767.16,229.396 1767.73,229.535 1768.3,227.801 1768.87,228.171 1769.44,229.429 1770,230.619 1770.57,231.936 1771.14,231.881 1771.71,230.123 1772.28,232.455 1772.85,230.562 1773.41,229.515 1773.98,231.631 1774.55,232.602 1775.12,229.541 1775.69,229.837 1776.26,229.852 1776.82,229.957 1777.39,230.218 1777.96,229.394 1778.53,230.785 1779.1,232.172 1779.67,229.079 1780.23,230.321 1780.8,232.511 1781.37,232.648 1781.94,231.689 1782.51,231.797 1783.08,230.983 1783.64,231.132 1784.21,231.262 1784.78,231.629 1785.35,230.72 1785.92,230.908 1786.49,231.109 1787.05,232.36 1787.62,232.253 1788.19,233.236 1788.76,233.177 1789.33,233.323 1789.9,233.118 1790.46,232.961 1791.03,234.917 1791.6,235.722 1792.17,235.343 1792.74,238.196 1793.31,235.85 1793.87,234.534 1794.44,235.641 1795.01,235.431 1795.58,235.063 1796.15,234.946 1796.72,232.88 1797.28,231.713 1797.85,229.85 1798.42,229.139 1798.99,229.433 1799.56,229.454 1800.13,228.66 1800.69,227.886 1801.26,229.226 1801.83,227.483 1802.4,227.75 1802.97,227.987 1803.54,229.375 1804.1,231.782 1804.67,231.95 1805.24,233.956 1805.81,236.992 1806.38,236.457 1806.95,234.236 1807.51,233.982 1808.08,233.846 1808.65,232.638 1809.22,232.447 1809.79,234.283 1810.36,236.213 1810.92,235.928 1811.49,234.892 1812.06,235.822 1812.63,238.57 1813.2,240.092 1813.77,240.594 1814.33,240.878 1814.9,241.404 1815.47,242.894 1816.04,241.823 1816.61,241.19 1817.18,238.606 1817.74,236.125 1818.31,234.448 1818.88,232.128 1819.45,231.034 1820.02,229.87 1820.59,231.921 1821.15,231.674 1821.72,231.555 1822.29,231.554 1822.86,228.605 1823.43,227.723 1824,227.834 1824.56,226.939 1825.13,225.986 1825.7,225.518 1826.27,224.689 1826.84,226.205 1827.41,225.423 1827.97,224.981 1828.54,226.364 1829.11,224.777 1829.68,225.362 1830.25,226.905 1830.82,228.176 1831.39,226.255 1831.95,226.822 1832.52,227.233 1833.09,228.625 1833.66,228.834 1834.23,229.095 1834.8,229.34 1835.36,230.511 1835.93,230.68 1836.5,231.606 1837.07,230.603 1837.64,229.666 1838.21,229.957 1838.77,231.084 1839.34,231.054 1839.91,231.98 1840.48,229.061 1841.05,229.321 1841.62,230.644 1842.18,231.982 1842.75,234.092 1843.32,235.896 1843.89,236.554 1844.46,236.369 1845.03,234.909 1845.59,234.437 1846.16,235.284 1846.73,234.844 1847.3,234.492 1847.87,233.015 1848.44,232.037 1849,233.04 1849.57,231.786 1850.14,232.764 1850.71,231.646 1851.28,233.968 1851.85,232.777 1852.41,232.716 1852.98,235.807 1853.55,235.461 1854.12,234.144 1854.69,235.07 1855.26,235.827 1855.82,238.586 1856.39,237.084 1856.96,234.549 1857.53,235.241 1858.1,234.837 1858.67,235.544 1859.23,235.271 1859.8,235.022 1860.37,234.894 1860.94,234.73 1861.51,233.605 1862.08,234.262 1862.64,232.797 1863.21,231.689 1863.78,232.419 1864.35,234.421 1864.92,233.013 1865.49,233.082 1866.05,230.585 1866.62,230.651 1867.19,231.556 1867.76,231.572 1868.33,234.429 1868.9,230.012 1869.46,228.981 1870.03,228.867 1870.6,227.834 1871.17,227.919 1871.74,228.152 1872.31,227.474 1872.87,228.641 1873.44,228.721 1874.01,230.034 1874.58,230.122 1875.15,230.391 1875.72,231.534 1876.28,230.487 1876.85,228.431 1877.42,227.646 1877.99,227.071 1878.56,228.634 1879.13,229.812 1879.69,229.951 1880.26,230.093 1880.83,228.995 1881.4,228.254 1881.97,225.667 1882.54,225.111 1883.1,227.415 1883.67,228.669 1884.24,231.046 1884.81,232.274 1885.38,231.102 1885.95,232.332 1886.51,231.314 1887.08,231.39 1887.65,230.539 1888.22,232.851 1888.79,232.733 1889.36,233.671 1889.92,232.382 1890.49,231.406 1891.06,232.317 1891.63,234.414 1892.2,234.299 1892.77,234.16 1893.33,233.987 1893.9,233.86 1894.47,235.83 1895.04,234.641 1895.61,234.427 1896.18,233.153 1896.74,231.016 1897.31,231.143 1897.88,231.279 1898.45,228.274 1899.02,228.707 1899.59,229.027 1900.16,229.322 1900.72,229.543 1901.29,232.742 1901.86,233.673 1902.43,232.28 1903,232.039 1903.57,231.099 1904.13,232.14 1904.7,233.366 1905.27,232.074 1905.84,232.904 1906.41,231.575 1906.98,231.514 1907.54,231.481 1908.11,232.492 1908.68,232.38 1909.25,234.301 1909.82,233.119 1910.39,232.985 1910.95,233.905 1911.52,236.832 1912.09,237.41 1912.66,235.972 1913.23,235.69 1913.8,235.449 1914.36,231.188 1914.93,232.269 1915.5,233.521 1916.07,234.412 1916.64,233.111 1917.21,234.11 1917.77,232.968 1918.34,233.925 1918.91,233.728 1919.48,235.578 1920.05,234.244 1920.62,235.25 1921.18,233.987 1921.75,234.742 1922.32,232.384 1922.89,229.09 1923.46,229.291 1924.03,229.432 1924.59,228.389 1925.16,228.494 1925.73,229.63 1926.3,226.578 1926.87,224.742 1927.44,223.377 1928,224.13 1928.57,225.622 1929.14,228.479 1929.71,229.877 1930.28,230.908 1930.85,231.131 1931.41,231.144 1931.98,230.947 1932.55,229.815 1933.12,230.961 1933.69,229.861 1934.26,233.051 1934.82,232.71 1935.39,231.605 1935.96,232.715 1936.53,229.544 1937.1,229.799 1937.67,230.878 1938.23,229.887 1938.8,230.904 1939.37,228.931 1939.94,227.12 1940.51,227.318 1941.08,227.709 1941.64,229.063 1942.21,230.228 1942.78,230.554 1943.35,233.677 1943.92,233.519 1944.49,234.318 1945.05,235.104 1945.62,233.097 1946.19,233.309 1946.76,233.071 1947.33,232.886 1947.9,231.875 1948.46,233.96 1949.03,233.595 1949.6,234.37 1950.17,233.015 1950.74,230.968 1951.31,228.147 1951.87,228.552 1952.44,227.618 1953.01,227.902 1953.58,227.973 1954.15,228.33 1954.72,228.535 1955.28,225.779 1955.85,227.264 1956.42,228.578 1956.99,225.762 1957.56,227.346 1958.13,227.755 1958.69,229.246 1959.26,230.47 1959.83,231.62 1960.4,231.757 1960.97,231.754 1961.54,232.791 1962.1,233.561 1962.67,234.32 1963.24,232.148 1963.81,233.325 1964.38,235.196 1964.95,236.13 1965.51,236.749 1966.08,236.28 1966.65,235.859 1967.22,233.316 1967.79,232.173 1968.36,232.16 1968.92,233.378 1969.49,233.436 1970.06,234.483 1970.63,233.218 1971.2,232.116 1971.77,233.088 1972.34,235.091 1972.9,235.982 1973.47,234.463 1974.04,232.295 1974.61,234.179 1975.18,232.823 1975.75,232.479 1976.31,231.321 1976.88,229.247 1977.45,228.206 1978.02,229.632 1978.59,228.839 1979.16,229.111 1979.72,231.173 1980.29,233.092 1980.86,233.883 1981.43,233.644 1982,232.491 1982.57,233.336 1983.13,230.859 1983.7,230.897 1984.27,230.017 1984.84,229.974 1985.41,230.988 1985.98,232.32 1986.54,233.342 1987.11,232.178 1987.68,235.387 1988.25,234.944 1988.82,234.572 1989.39,233.24 1989.95,233.209 1990.52,236.387 1991.09,236.167 1991.66,237.819 1992.23,237.237 1992.8,234.728 1993.36,235.635 1993.93,232.434 1994.5,233.379 1995.07,232.277 1995.64,233.051 1996.21,234.991 1996.77,232.628 1997.34,230.315 1997.91,230.374 1998.48,230.329 1999.05,230.318 1999.62,232.331 2000.18,231.281 2000.75,231.165 2001.32,230.302 2001.89,228.163 2002.46,228.309 2003.03,227.247 2003.59,227.24 2004.16,227.355 2004.73,227.611 2005.3,226.996 2005.87,228.297 2006.44,229.6 2007,229.589 2007.57,232.797 2008.14,233.637 2008.71,232.413 2009.28,233.395 2009.85,234.292 2010.41,231.939 2010.98,232.9 2011.55,232.635 2012.12,230.594 2012.69,229.534 2013.26,226.672 2013.82,229.327 2014.39,231.69 2014.96,231.613 2015.53,230.43 2016.1,228.557 2016.67,228.84 2017.23,227.058 2017.8,227.298 2018.37,226.675 2018.94,228.85 2019.51,227.964 2020.08,229.275 2020.64,229.361 2021.21,230.397 2021.78,231.554 2022.35,232.362 2022.92,232.113 2023.49,234.219 2024.05,233.994 2024.62,233.885 2025.19,234.784 2025.76,236.972 2026.33,237.535 2026.9,240.349 2027.46,239.703 2028.03,239.167 2028.6,237.614 2029.17,235.99 2029.74,234.674 2030.31,235.515 2030.87,234.138 2031.44,234.033 2032.01,233.608 2032.58,236.49 2033.15,237.137 2033.72,236.8 2034.28,236.309 2034.85,237.049 2035.42,235.408 2035.99,235 2036.56,234.597 2037.13,234.257 2037.69,231.842 2038.26,230.442 2038.83,229.645 2039.4,229.822 2039.97,230.104 2040.54,232.017 2041.11,231.78 2041.67,231.473 2042.24,231.379 2042.81,232.335 2043.38,234.209 2043.95,234.904 2044.52,233.354 2045.08,230.062 2045.65,230.969 2046.22,229.936 2046.79,230.074 2047.36,229.834 2047.93,230.062 2048.49,230.002 2049.06,228.96 2049.63,230.132 2050.2,230.22 2050.77,230.139 2051.34,232.05 2051.9,231.835 2052.47,233.92 2053.04,234.666 2053.61,234.154 2054.18,233.754 2054.75,231.507 2055.31,230.266 2055.88,229.269 2056.45,230.302 2057.02,230.384 2057.59,230.466 2058.16,231.524 2058.72,231.405 2059.29,232.438 2059.86,231.199 2060.43,228.114 2061,225.238 2061.57,224.415 2062.13,224.973 2062.7,223.277 2063.27,221.865 2063.84,222.421 2064.41,222.984 2064.98,222.605 2065.54,224.279 2066.11,227.875 2066.68,226.049 2067.25,226.234 2067.82,228.486 2068.39,230.946 2068.95,230.042 2069.52,231.225 2070.09,232.295 2070.66,232.332 2071.23,232.268 2071.8,231.332 2072.36,230.39 2072.93,231.303 2073.5,230.1 2074.07,229.25 2074.64,229.437 2075.21,228.651 2075.77,228.815 2076.34,227.89 2076.91,228.467 2077.48,227.69 2078.05,230.081 2078.62,229.93 2079.18,229.101 2079.75,229.233 2080.32,230.406 2080.89,228.284 2081.46,227.325 2082.03,227.712 2082.59,226.94 2083.16,226.298 2083.73,225.589 2084.3,225.918 2084.87,226.395 2085.44,226.874 2086,227.335 2086.57,228.795 2087.14,228.099 2087.71,227.256 2088.28,227.731 2088.85,228.424 2089.41,229.759 2089.98,230.153 2090.55,230.299 2091.12,230.59 2091.69,233.917 2092.26,233.892 2092.82,232.93 2093.39,230.822 2093.96,231.985 2094.53,234.987 2095.1,233.658 2095.67,232.651 2096.23,230.518 2096.8,230.635 2097.37,231.824 2097.94,233.199 2098.51,233.393 2099.08,235.307 2099.64,236.397 2100.21,238.133 2100.78,239.948 2101.35,239.612 2101.92,238.156 2102.49,237.777 2103.05,237.627 2103.62,239.207 2104.19,238.679 2104.76,239.201 2105.33,236.897 2105.9,230.457 2106.46,230.733 2107.03,233.818 2107.6,233.73 2108.17,233.573 2108.74,232.575 2109.31,232.395 2109.87,232.528 2110.44,232.514 2111.01,229.367 2111.58,227.588 2112.15,230.903 2112.72,230.12 2113.29,229.291 2113.85,228.722 2114.42,229.852 2114.99,227.799 2115.56,227.207 2116.13,226.638 2116.7,228.84 2117.26,227.856 2117.83,229.518 2118.4,228.761 2118.97,231.25 2119.54,233.275 2120.11,233.322 2120.67,233.309 2121.24,233.191 2121.81,232.958 2122.38,232.131 2122.95,231.305 2123.52,231.463 2124.08,233.485 2124.65,232.537 2125.22,233.397 2125.79,234.433 2126.36,233.153 2126.93,234.018 2127.49,235.562 2128.06,235.283 2128.63,233.124 2129.2,234.21 2129.77,234.122 2130.34,234.033 2130.9,233.013 2131.47,231.955 2132.04,230.924 2132.61,232 2133.18,230.923 2133.75,232.139 2134.31,230.014 2134.88,228.171 2135.45,226.456 2136.02,228.001 2136.59,227.215 2137.16,230.434 2137.72,231.395 2138.29,230.572 2138.86,231.804 2139.43,229.986 2140,230.009 2140.57,232.477 2141.13,233.258 2141.7,234.38 2142.27,234.011 2142.84,234.979 2143.41,235.835 2143.98,234.578 2144.54,233.304 2145.11,233.131 2145.68,231.047 2146.25,233.142 2146.82,230.903 2147.39,232.26 2147.95,233.408 2148.52,232.108 2149.09,233.042 2149.66,231.853 2150.23,232.946 2150.8,232.79 2151.36,231.678 2151.93,231.675 2152.5,231.577 2153.07,229.74 2153.64,230.868 2154.21,231.902 2154.77,231.818 2155.34,230.907 2155.91,232.107 2156.48,230.318 2157.05,229.405 2157.62,229.626 2158.18,230.888 2158.75,233.085 2159.32,235.026 2159.89,234.576 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.037 ± 0.024\n  with uncertainty of ± 0.0021580688440366405\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01811 ± (0.00259719, 0.00241578) (MC)\n  95% confidence interval: [-4.02279, -4.01308]) (MC)\n  linear error propagation: -4.01811 ± 0.00247172\n  |δ_y| = |0.00158494| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018109725792755, val_l = 0.004682710409771751, val_u = 0.005029491404492603)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip940\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip941\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip942\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1138.28 2211.02,1138.28 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,965.7 2211.02,965.7 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,793.116 2211.02,793.116 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,620.532 2211.02,620.532 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,447.947 2211.02,447.947 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,275.363 2211.02,275.363 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1138.28 365.751,1138.28 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,965.7 365.751,965.7 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,793.116 365.751,793.116 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,620.532 365.751,620.532 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,447.947 365.751,447.947 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,275.363 365.751,275.363 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M298.909 1124.08 Q295.298 1124.08 293.469 1127.65 Q291.664 1131.19 291.664 1138.32 Q291.664 1145.43 293.469 1148.99 Q295.298 1152.53 298.909 1152.53 Q302.543 1152.53 304.349 1148.99 Q306.177 1145.43 306.177 1138.32 Q306.177 1131.19 304.349 1127.65 Q302.543 1124.08 298.909 1124.08 M298.909 1120.38 Q304.719 1120.38 307.775 1124.99 Q310.853 1129.57 310.853 1138.32 Q310.853 1147.05 307.775 1151.65 Q304.719 1156.24 298.909 1156.24 Q293.099 1156.24 290.02 1151.65 Q286.964 1147.05 286.964 1138.32 Q286.964 1129.57 290.02 1124.99 Q293.099 1120.38 298.909 1120.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M259.557 979.045 L267.196 979.045 L267.196 952.679 L258.886 954.346 L258.886 950.087 L267.15 948.42 L271.826 948.42 L271.826 979.045 L279.465 979.045 L279.465 982.98 L259.557 982.98 L259.557 979.045 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 951.499 Q295.298 951.499 293.469 955.063 Q291.664 958.605 291.664 965.735 Q291.664 972.841 293.469 976.406 Q295.298 979.948 298.909 979.948 Q302.543 979.948 304.349 976.406 Q306.177 972.841 306.177 965.735 Q306.177 958.605 304.349 955.063 Q302.543 951.499 298.909 951.499 M298.909 947.795 Q304.719 947.795 307.775 952.401 Q310.853 956.985 310.853 965.735 Q310.853 974.461 307.775 979.068 Q304.719 983.651 298.909 983.651 Q293.099 983.651 290.02 979.068 Q286.964 974.461 286.964 965.735 Q286.964 956.985 290.02 952.401 Q293.099 947.795 298.909 947.795 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M262.775 806.461 L279.094 806.461 L279.094 810.396 L257.15 810.396 L257.15 806.461 Q259.812 803.706 264.395 799.076 Q269.002 794.424 270.182 793.081 Q272.428 790.558 273.307 788.822 Q274.21 787.063 274.21 785.373 Q274.21 782.618 272.266 780.882 Q270.344 779.146 267.242 779.146 Q265.043 779.146 262.59 779.91 Q260.159 780.674 257.381 782.225 L257.381 777.502 Q260.205 776.368 262.659 775.79 Q265.113 775.211 267.15 775.211 Q272.52 775.211 275.715 777.896 Q278.909 780.581 278.909 785.072 Q278.909 787.201 278.099 789.123 Q277.312 791.021 275.205 793.613 Q274.627 794.285 271.525 797.502 Q268.423 800.697 262.775 806.461 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 778.914 Q295.298 778.914 293.469 782.479 Q291.664 786.021 291.664 793.151 Q291.664 800.257 293.469 803.822 Q295.298 807.363 298.909 807.363 Q302.543 807.363 304.349 803.822 Q306.177 800.257 306.177 793.151 Q306.177 786.021 304.349 782.479 Q302.543 778.914 298.909 778.914 M298.909 775.211 Q304.719 775.211 307.775 779.817 Q310.853 784.401 310.853 793.151 Q310.853 801.877 307.775 806.484 Q304.719 811.067 298.909 811.067 Q293.099 811.067 290.02 806.484 Q286.964 801.877 286.964 793.151 Q286.964 784.401 290.02 779.817 Q293.099 775.211 298.909 775.211 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M272.914 619.177 Q276.27 619.895 278.145 622.164 Q280.043 624.432 280.043 627.765 Q280.043 632.881 276.525 635.682 Q273.006 638.483 266.525 638.483 Q264.349 638.483 262.034 638.043 Q259.742 637.626 257.289 636.77 L257.289 632.256 Q259.233 633.39 261.548 633.969 Q263.863 634.548 266.386 634.548 Q270.784 634.548 273.076 632.812 Q275.39 631.076 275.39 627.765 Q275.39 624.71 273.238 622.997 Q271.108 621.261 267.289 621.261 L263.261 621.261 L263.261 617.418 L267.474 617.418 Q270.923 617.418 272.752 616.052 Q274.58 614.664 274.58 612.071 Q274.58 609.409 272.682 607.997 Q270.807 606.562 267.289 606.562 Q265.367 606.562 263.168 606.978 Q260.969 607.395 258.33 608.275 L258.33 604.108 Q260.992 603.367 263.307 602.997 Q265.645 602.627 267.705 602.627 Q273.029 602.627 276.131 605.057 Q279.233 607.465 279.233 611.585 Q279.233 614.455 277.59 616.446 Q275.946 618.414 272.914 619.177 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 606.33 Q295.298 606.33 293.469 609.895 Q291.664 613.437 291.664 620.566 Q291.664 627.673 293.469 631.238 Q295.298 634.779 298.909 634.779 Q302.543 634.779 304.349 631.238 Q306.177 627.673 306.177 620.566 Q306.177 613.437 304.349 609.895 Q302.543 606.33 298.909 606.33 M298.909 602.627 Q304.719 602.627 307.775 607.233 Q310.853 611.816 310.853 620.566 Q310.853 629.293 307.775 633.9 Q304.719 638.483 298.909 638.483 Q293.099 638.483 290.02 633.9 Q286.964 629.293 286.964 620.566 Q286.964 611.816 290.02 607.233 Q293.099 602.627 298.909 602.627 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M271.594 434.742 L259.789 453.191 L271.594 453.191 L271.594 434.742 M270.367 430.667 L276.247 430.667 L276.247 453.191 L281.177 453.191 L281.177 457.079 L276.247 457.079 L276.247 465.227 L271.594 465.227 L271.594 457.079 L255.992 457.079 L255.992 452.566 L270.367 430.667 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 433.746 Q295.298 433.746 293.469 437.311 Q291.664 440.853 291.664 447.982 Q291.664 455.089 293.469 458.653 Q295.298 462.195 298.909 462.195 Q302.543 462.195 304.349 458.653 Q306.177 455.089 306.177 447.982 Q306.177 440.853 304.349 437.311 Q302.543 433.746 298.909 433.746 M298.909 430.042 Q304.719 430.042 307.775 434.649 Q310.853 439.232 310.853 447.982 Q310.853 456.709 307.775 461.315 Q304.719 465.899 298.909 465.899 Q293.099 465.899 290.02 461.315 Q286.964 456.709 286.964 447.982 Q286.964 439.232 290.02 434.649 Q293.099 430.042 298.909 430.042 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M258.793 258.083 L277.15 258.083 L277.15 262.018 L263.076 262.018 L263.076 270.491 Q264.094 270.143 265.113 269.981 Q266.131 269.796 267.15 269.796 Q272.937 269.796 276.316 272.967 Q279.696 276.139 279.696 281.555 Q279.696 287.134 276.224 290.236 Q272.752 293.315 266.432 293.315 Q264.256 293.315 261.988 292.944 Q259.742 292.574 257.335 291.833 L257.335 287.134 Q259.418 288.268 261.641 288.824 Q263.863 289.379 266.34 289.379 Q270.344 289.379 272.682 287.273 Q275.02 285.166 275.02 281.555 Q275.02 277.944 272.682 275.838 Q270.344 273.731 266.34 273.731 Q264.465 273.731 262.59 274.148 Q260.738 274.565 258.793 275.444 L258.793 258.083 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 261.162 Q295.298 261.162 293.469 264.727 Q291.664 268.268 291.664 275.398 Q291.664 282.504 293.469 286.069 Q295.298 289.611 298.909 289.611 Q302.543 289.611 304.349 286.069 Q306.177 282.504 306.177 275.398 Q306.177 268.268 304.349 264.727 Q302.543 261.162 298.909 261.162 M298.909 257.458 Q304.719 257.458 307.775 262.065 Q310.853 266.648 310.853 275.398 Q310.853 284.125 307.775 288.731 Q304.719 293.315 298.909 293.315 Q293.099 293.315 290.02 288.731 Q286.964 284.125 286.964 275.398 Q286.964 266.648 290.02 262.065 Q293.099 257.458 298.909 257.458 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1011.12 400.199,894.293 400.786,787.102 401.372,688.896 401.958,599.079 402.545,517.096 403.131,560.585 403.718,485.129 404.304,416.522 404.891,454.022 405.477,394.727 406.063,425.577 406.65,373.4 407.236,399.537 407.823,354.104 408.409,314.385 408.995,278.074 409.582,246.901 410.168,219.895 410.755,344.788 411.341,314.928 411.927,332.732 412.514,307.325 413.1,285.207 413.687,302.114 414.273,285.872 414.86,273.238 415.446,291.609 416.032,308.313 416.619,298.602 417.205,292.574 417.792,287.685 418.378,285.224 418.964,324.167 419.551,323.016 420.137,323.711 420.724,324.258 421.31,326.729 421.896,361.584 422.483,394.218 423.069,399.157 423.656,403.482 424.242,409.136 424.829,439.554 425.415,446.311 426.001,453.163 426.588,470.662 427.174,478.382 427.761,505.796 428.347,513.337 428.933,538.062 429.52,553.263 430.106,560.589 430.693,568.256 431.279,584.402 431.865,592.763 432.452,607.918 433.038,616.735 433.625,625.93 434.211,640.776 434.798,671.92 435.384,685.606 435.97,693.254 436.557,720.933 437.143,733.169 437.73,745.2 438.316,761.327 438.902,776.556 439.489,783.268 440.075,798.547 440.662,809.092 441.248,815.797 441.835,830.51 442.421,847.544 443.007,857.249 443.594,876.798 444.18,888.194 444.767,899.771 445.353,913.856 445.939,921.542 446.526,929.01 447.112,942.233 447.699,949.074 448.285,961.966 448.871,970.76 449.458,977.194 450.044,986.036 450.631,989.905 451.217,998.707 451.804,1007.08 452.39,1017.86 452.976,1028.08 453.563,1040.39 454.149,1050.23 454.736,1055.21 455.322,1068.81 455.908,1070.78 456.495,1075.17 457.081,1077.82 457.668,1084.89 458.254,1093.96 458.84,1100.26 459.427,1106.32 460.013,1110.13 460.6,1111.83 461.186,1113.28 461.773,1121.07 462.359,1126.42 462.945,1131.57 463.532,1131.24 464.118,1136.33 464.705,1137.45 465.291,1142.45 465.877,1143.66 466.464,1145.28 467.05,1148.78 467.637,1152.31 468.223,1157.18 468.809,1162.21 469.396,1164.73 469.982,1165.37 470.569,1169.62 471.155,1173.95 471.742,1178.18 472.328,1178.97 472.914,1175.99 473.501,1178.45 474.087,1179.13 474.674,1181.84 475.26,1186.15 475.846,1185.18 476.433,1185.88 477.019,1186.82 477.606,1187.35 478.192,1191.29 478.778,1192.06 479.365,1189.66 479.951,1193.83 480.538,1196.24 481.124,1200.2 481.711,1203.56 482.297,1205.48 482.883,1210.53 483.47,1214.03 484.056,1213.7 484.643,1216.57 485.229,1218.23 485.815,1218.52 486.402,1218.5 486.988,1216.98 487.575,1216.69 488.161,1219.72 488.748,1216.5 489.334,1216.54 489.92,1221.32 490.507,1216.66 491.093,1221.4 491.68,1225.96 492.266,1227.04 492.852,1226.9 493.439,1228.4 494.025,1229.72 494.612,1232.34 495.198,1233.35 495.784,1232.67 496.371,1233.62 496.957,1231.17 497.544,1230.83 498.13,1230.26 498.717,1233.37 499.303,1234.64 499.889,1237.02 500.476,1235.1 501.062,1237.29 501.649,1238 502.235,1240.62 502.821,1242.57 503.408,1241.73 503.994,1242.32 504.581,1242.57 505.167,1244.59 505.753,1242.02 506.34,1244.21 506.926,1241.98 507.513,1240.88 508.099,1237.14 508.686,1236.73 509.272,1236.1 509.858,1239.58 510.445,1240.63 511.031,1238.37 511.618,1242.34 512.204,1242.97 512.79,1243.72 513.377,1244.7 513.963,1246.58 514.55,1248.47 515.136,1250.36 515.722,1250.53 516.309,1249.17 516.895,1246.64 517.482,1248.37 518.068,1247.25 518.655,1246.2 519.241,1246.61 519.827,1243.92 520.414,1243.06 521,1244.82 521.587,1245.43 522.173,1243.22 522.759,1243.67 523.346,1242.8 523.932,1236.28 524.519,1234.35 525.105,1232.47 525.691,1235.01 526.278,1235.81 526.864,1235.55 527.451,1236.61 528.037,1238.7 528.624,1235.08 529.21,1234.93 529.796,1231.56 530.383,1231.53 530.969,1228.36 531.556,1229.7 532.142,1232.37 532.728,1232.32 533.315,1229.24 533.901,1227.66 534.488,1226.19 535.074,1227.44 535.661,1227.62 536.247,1227.56 536.833,1226.57 537.42,1226.37 538.006,1226.33 538.593,1225.12 539.179,1225.26 539.765,1228.26 540.352,1225.38 540.938,1224.15 541.525,1222.89 542.111,1223.21 542.697,1225.14 543.284,1225.28 543.87,1224.06 544.457,1226.94 545.043,1226.92 545.63,1228.08 546.216,1226.86 546.802,1228.23 547.389,1229.65 547.975,1229.5 548.562,1230.7 549.148,1228.94 549.734,1228.48 550.321,1229.79 550.907,1228.03 551.494,1232.29 552.08,1233.13 552.666,1234.13 553.253,1235.32 553.839,1234.97 554.426,1234.64 555.012,1234.2 555.599,1230.87 556.185,1230.67 556.771,1231.81 557.358,1230.12 557.944,1228.4 558.531,1231.16 559.117,1230.98 559.703,1230.57 560.29,1230.3 560.876,1228.34 561.463,1229.67 562.049,1229.35 562.635,1227.84 563.222,1227.65 563.808,1230.12 564.395,1232.64 564.981,1232.58 565.568,1235.27 566.154,1234.66 566.74,1232.94 567.327,1231.18 567.913,1230.73 568.5,1230.23 569.086,1231.32 569.672,1231.24 570.259,1235.05 570.845,1234.33 571.432,1233.48 572.018,1234.34 572.605,1233.97 573.191,1233.48 573.777,1229.8 574.364,1229.3 574.95,1230.47 575.537,1227.51 576.123,1231.7 576.709,1229.66 577.296,1234.79 577.882,1235.38 578.469,1233.3 579.055,1232.7 579.641,1231.04 580.228,1233.49 580.814,1238.54 581.401,1233.24 581.987,1232.74 582.574,1235.06 583.16,1233.06 583.746,1230.85 584.333,1231.97 584.919,1232.82 585.506,1233.72 586.092,1231.99 586.678,1232.82 587.265,1233.47 587.851,1231.35 588.438,1231.81 589.024,1231.34 589.61,1226.7 590.197,1226.51 590.783,1226.22 591.37,1224.55 591.956,1226.05 592.543,1224.44 593.129,1222.8 593.715,1221.21 594.302,1222.37 594.888,1221.06 595.475,1220.81 596.061,1222.19 596.647,1224.93 597.234,1223.43 597.82,1224.63 598.407,1224.45 598.993,1224.31 599.579,1224.03 600.166,1225.25 600.752,1227.55 601.339,1228.33 601.925,1226.57 602.512,1226.16 603.098,1224.35 603.684,1222.63 604.271,1224.08 604.857,1223.85 605.444,1226.33 606.03,1224.8 606.616,1226.14 607.203,1227.21 607.789,1226.85 608.376,1224.75 608.962,1224.37 609.548,1224.31 610.135,1225.46 610.721,1225.34 611.308,1226.4 611.894,1226.02 612.481,1224.01 613.067,1222.94 613.653,1224.2 614.24,1222.43 614.826,1223.48 615.413,1223 615.999,1228.35 616.585,1223.54 617.172,1224.92 617.758,1223.35 618.345,1223.14 618.931,1223.07 619.518,1222.84 620.104,1225.52 620.69,1223.8 621.277,1223.55 621.863,1224.53 622.45,1226.04 623.036,1228.4 623.622,1229.13 624.209,1228.52 624.795,1233.68 625.382,1233.76 625.968,1234.54 626.554,1232.05 627.141,1231.41 627.727,1230.7 628.314,1234.11 628.9,1230.39 629.487,1230.74 630.073,1229.95 630.659,1226.59 631.246,1224.69 631.832,1222.85 632.419,1223.8 633.005,1221.83 633.591,1227.38 634.178,1223.82 634.764,1222.13 635.351,1223.32 635.937,1223.19 636.523,1225.36 637.11,1224.68 637.696,1222.9 638.283,1224.16 638.869,1227.97 639.456,1224.62 640.042,1222.85 640.628,1222.6 641.215,1222.12 641.801,1221.76 642.388,1221.24 642.974,1220.87 643.56,1220.32 644.147,1223.13 644.733,1221.4 645.32,1222.39 645.906,1222.05 646.492,1220.27 647.079,1220.07 647.665,1221.31 648.252,1221.21 648.838,1221.02 649.425,1220.6 650.011,1221.75 650.597,1220.06 651.184,1217.95 651.77,1216.5 652.357,1212.09 652.943,1215.16 653.529,1212.1 654.116,1211.95 654.702,1213.31 655.289,1213.38 655.875,1215.08 656.462,1215.02 657.048,1216.28 657.634,1214.83 658.221,1213.48 658.807,1211.96 659.394,1213.76 659.98,1215.07 660.566,1215.08 661.153,1213.93 661.739,1213.77 662.326,1216.67 662.912,1216.68 663.498,1222.22 664.085,1224.6 664.671,1224.07 665.258,1223.52 665.844,1225.98 666.431,1227.12 667.017,1227.55 667.603,1228.43 668.19,1227.72 668.776,1225.7 669.363,1222.63 669.949,1222.33 670.535,1221.67 671.122,1219.81 671.708,1225.22 672.295,1224.58 672.881,1224.35 673.467,1223.64 674.054,1226.14 674.64,1221.56 675.227,1222.68 675.813,1220.74 676.4,1219.06 676.986,1217.33 677.572,1217.17 678.159,1212.97 678.745,1212.83 679.332,1214.45 679.918,1214.63 680.504,1211.69 681.091,1213.2 681.677,1212.09 682.264,1212.18 682.85,1215.04 683.436,1219.3 684.023,1214.89 684.609,1216.15 685.196,1214.56 685.782,1214.2 686.369,1212.74 686.955,1212.23 687.541,1212.27 688.128,1215.4 688.714,1212.31 689.301,1216.66 689.887,1220.75 690.473,1219.18 691.06,1220.53 691.646,1218.73 692.233,1218.62 692.819,1215.59 693.405,1217.03 693.992,1217.93 694.578,1217.56 695.165,1217.46 695.751,1213.37 696.338,1214.6 696.924,1213.4 697.51,1213.61 698.097,1213.54 698.683,1209.4 699.27,1213.95 699.856,1212.66 700.442,1212.76 701.029,1212.97 701.615,1211.69 702.202,1210.37 702.788,1209.26 703.375,1209.36 703.961,1209.46 704.547,1212.72 705.134,1212.83 705.72,1214.19 706.307,1211.16 706.893,1211.39 707.479,1211.48 708.066,1215.56 708.652,1216.43 709.239,1217.49 709.825,1217.18 710.411,1216.82 710.998,1215.01 711.584,1213.46 712.171,1213.54 712.757,1213.43 713.344,1216.43 713.93,1216.2 714.516,1216.16 715.103,1217.7 715.689,1216.08 716.276,1215.61 716.862,1211.12 717.448,1211.3 718.035,1211.48 718.621,1211.56 719.208,1211.5 719.794,1211.25 720.38,1210.1 720.967,1212.83 721.553,1209.86 722.14,1211.37 722.726,1214.43 723.313,1215.7 723.899,1217.36 724.485,1216.06 725.072,1214.47 725.658,1212.78 726.245,1215.31 726.831,1213.69 727.417,1213.14 728.004,1214.58 728.59,1217.14 729.177,1215.64 729.763,1215.8 730.349,1220.12 730.936,1216.97 731.522,1218.01 732.109,1216.35 732.695,1216.07 733.282,1218.78 733.868,1217.06 734.454,1212.46 735.041,1212.7 735.627,1209.95 736.214,1208.87 736.8,1207.31 737.386,1208.84 737.973,1210.69 738.559,1212.52 739.146,1213.53 739.732,1214.73 740.318,1213.16 740.905,1213.13 741.491,1214.54 742.078,1214.42 742.664,1211.77 743.251,1209.35 743.837,1209.54 744.423,1206.95 745.01,1207.17 745.596,1209.02 746.183,1207.92 746.769,1208.27 747.355,1205.5 747.942,1206.86 748.528,1205.84 749.115,1207.37 749.701,1207.61 750.288,1207.76 750.874,1208.27 751.46,1207.14 752.047,1207.61 752.633,1207.84 753.22,1206.42 753.806,1208 754.392,1206.61 754.979,1208.16 755.565,1208.59 756.152,1208.65 756.738,1211.31 757.324,1210.25 757.911,1207.28 758.497,1207.46 759.084,1206.27 759.67,1206.7 760.257,1203.94 760.843,1208.63 761.429,1211.41 762.016,1208.39 762.602,1210.03 763.189,1208.45 763.775,1209.88 764.361,1210.3 764.948,1213.28 765.534,1213.1 766.121,1213.45 766.707,1213.47 767.293,1214.68 767.88,1211.74 768.466,1213.03 769.053,1216.21 769.639,1214.86 770.226,1215.98 770.812,1215.27 771.398,1216.07 771.985,1218.52 772.571,1218.21 773.158,1222.04 773.744,1224.52 774.33,1223.71 774.917,1220.42 775.503,1219.85 776.09,1216.65 776.676,1217.7 777.262,1217.39 777.849,1218.44 778.435,1217.99 779.022,1214.69 779.608,1218.69 780.195,1218.31 780.781,1216.2 781.367,1214.55 781.954,1214.17 782.54,1212.51 783.127,1209.55 783.713,1209.5 784.299,1209.26 784.886,1212.13 785.472,1215.26 786.059,1215.1 786.645,1216.47 787.232,1220.43 787.818,1218.53 788.404,1216.47 788.991,1214.72 789.577,1213.26 790.164,1214.63 790.75,1214.57 791.336,1214.48 791.923,1215.48 792.509,1212.33 793.096,1213.82 793.682,1217.82 794.268,1214.79 794.855,1216.02 795.441,1214.09 796.028,1214.14 796.614,1212.13 797.201,1211.85 797.787,1210.4 798.373,1209.84 798.96,1211.4 799.546,1209.82 800.133,1210 800.719,1212.82 801.305,1211.19 801.892,1212.53 802.478,1212.36 803.065,1213.5 803.651,1210.58 804.237,1211.87 804.824,1207.59 805.41,1206.51 805.997,1203.69 806.583,1203.91 807.17,1202.91 807.756,1203.55 808.342,1202.63 808.929,1208.56 809.515,1205.97 810.102,1207.77 810.688,1206.51 811.274,1206.79 811.861,1208.22 812.447,1211.17 813.034,1211.46 813.62,1212.76 814.206,1213.94 814.793,1210.98 815.379,1209.52 815.966,1209.53 816.552,1206.72 817.139,1209.66 817.725,1205.62 818.311,1207.29 818.898,1206.3 819.484,1203.9 820.071,1204.21 820.657,1204.49 821.243,1203.59 821.83,1202.48 822.416,1199.82 823.003,1200.22 823.589,1202.1 824.175,1202.82 824.762,1203.13 825.348,1203.7 825.935,1208.35 826.521,1212.94 827.108,1212.73 827.694,1212.5 828.28,1213.82 828.867,1217.86 829.453,1217.41 830.04,1216.68 830.626,1214.69 831.212,1215.9 831.799,1212.92 832.385,1209.92 832.972,1211.1 833.558,1211.2 834.145,1208.51 834.731,1208.59 835.317,1207.48 835.904,1207.68 836.49,1206.43 837.077,1206.76 837.663,1207.14 838.249,1210.17 838.836,1208.86 839.422,1209.26 840.009,1209.53 840.595,1208.1 841.181,1208.23 841.768,1206.75 842.354,1207.05 842.941,1211.43 843.527,1212.7 844.114,1216.61 844.7,1213.39 845.286,1214.33 845.873,1213.9 846.459,1210.66 847.046,1212.01 847.632,1213.63 848.218,1213.37 848.805,1213.21 849.391,1213.33 849.978,1211.6 850.564,1211.62 851.15,1208.92 851.737,1211.99 852.323,1211.74 852.91,1214.48 853.496,1213.01 854.083,1211.62 854.669,1214.2 855.255,1214.83 855.842,1217.13 856.428,1218.25 857.015,1219.1 857.601,1218.57 858.187,1216.49 858.774,1217.58 859.36,1215.74 859.947,1214.11 860.533,1213.68 861.119,1210.58 861.706,1208.82 862.292,1209.04 862.879,1207.46 863.465,1206.25 864.052,1209.33 864.638,1209.27 865.224,1207.84 865.811,1209.34 866.397,1210.89 866.984,1209.33 867.57,1206.67 868.156,1205.58 868.743,1202.82 869.329,1203.06 869.916,1203.7 870.502,1203.97 871.089,1205.61 871.675,1211.31 872.261,1211.07 872.848,1213.76 873.434,1214.76 874.021,1215.6 874.607,1215.07 875.193,1213.15 875.78,1215.69 876.366,1215.63 876.953,1216.89 877.539,1213.93 878.125,1213.5 878.712,1213.34 879.298,1214.16 879.885,1216.88 880.471,1216.56 881.058,1214.86 881.644,1211.71 882.23,1212.96 882.817,1212.75 883.403,1214.18 883.99,1209.34 884.576,1207.81 885.162,1206.63 885.749,1206.76 886.335,1207.04 886.922,1208.42 887.508,1209.6 888.094,1211.03 888.681,1210.91 889.267,1209.51 889.854,1212.28 890.44,1213.83 891.027,1212.22 891.613,1211.94 892.199,1210.25 892.786,1210.27 893.372,1206.31 893.959,1206.38 894.545,1209.21 895.131,1209.05 895.718,1210.48 896.304,1210.14 896.891,1210.34 897.477,1211.63 898.063,1211.5 898.65,1211.48 899.236,1212.93 899.823,1211.34 900.409,1212.34 900.996,1210.79 901.582,1210.68 902.168,1214.81 902.755,1214.3 903.341,1212.66 903.928,1209.48 904.514,1207.9 905.1,1210.6 905.687,1207.75 906.273,1206.19 906.86,1211.92 907.446,1211.98 908.032,1213.48 908.619,1211.63 909.205,1210.09 909.792,1210.01 910.378,1208.74 910.965,1210.43 911.551,1210.35 912.137,1215.96 912.724,1214.02 913.31,1210.79 913.897,1211.9 914.483,1211.69 915.069,1211.6 915.656,1214.32 916.242,1212.78 916.829,1212.5 917.415,1212.6 918.002,1211.12 918.588,1211.33 919.174,1211.37 919.761,1215.47 920.347,1217.59 920.934,1219.99 921.52,1217.98 922.106,1217.97 922.693,1217.75 923.279,1215.92 923.866,1212.85 924.452,1212.98 925.038,1212.99 925.625,1214.35 926.211,1214.36 926.798,1212.4 927.384,1210.75 927.971,1207.77 928.557,1206.7 929.143,1206.66 929.73,1208.05 930.316,1206.64 930.903,1206.52 931.489,1208.08 932.075,1213.74 932.662,1213.34 933.248,1210.16 933.835,1209.91 934.421,1205.47 935.007,1205.71 935.594,1207.19 936.18,1204.36 936.767,1204.62 937.353,1203.08 937.94,1201.85 938.526,1202.2 939.112,1199.72 939.699,1200.2 940.285,1199.36 940.872,1198.45 941.458,1198.97 942.044,1199.21 942.631,1196.88 943.217,1197.47 943.804,1199.33 944.39,1201.21 944.976,1201.34 945.563,1203.37 946.149,1202.22 946.736,1201.04 947.322,1201.43 947.909,1201.86 948.495,1202.37 949.081,1202.95 949.668,1201.91 950.254,1203.48 950.841,1205.36 951.427,1206.98 952.013,1207.36 952.6,1205.67 953.186,1205.76 953.773,1207.47 954.359,1206.28 954.945,1208 955.532,1205.32 956.118,1204.24 956.705,1205.58 957.291,1203.21 957.878,1202.3 958.464,1204.25 959.05,1204.28 959.637,1204.52 960.223,1206.21 960.81,1207 961.396,1209.97 961.982,1211.54 962.569,1213 963.155,1211.5 963.742,1212.79 964.328,1208.27 964.915,1207.05 965.501,1205.4 966.087,1205.65 966.674,1205.64 967.26,1204.04 967.847,1204.5 968.433,1201.66 969.019,1200.59 969.606,1201 970.192,1201.32 970.779,1200.26 971.365,1203.36 971.951,1203.68 972.538,1205.59 973.124,1204.38 973.711,1204.48 974.297,1207.65 974.884,1207.79 975.47,1205.18 976.056,1205.54 976.643,1204.19 977.229,1204.43 977.816,1199.01 978.402,1199.51 978.988,1202.61 979.575,1207.19 980.161,1209.93 980.748,1209.83 981.334,1211.11 981.92,1213.82 982.507,1215.21 983.093,1214.78 983.68,1213.03 984.266,1214.25 984.853,1216.62 985.439,1213.56 986.025,1213.36 986.612,1211.81 987.198,1213.2 987.785,1214.73 988.371,1213.09 988.957,1212.78 989.544,1212.7 990.13,1212.34 990.717,1216.13 991.303,1215.66 991.889,1215.22 992.476,1216.39 993.062,1214.34 993.649,1214.15 994.235,1213.93 994.822,1213.65 995.408,1213.53 995.994,1210.44 996.581,1208.8 997.167,1208.97 997.754,1207.85 998.34,1209.17 998.926,1212.08 999.513,1210.04 1000.1,1211.47 1000.69,1209.69 1001.27,1209.73 1001.86,1209.64 1002.44,1208.04 1003.03,1209.36 1003.62,1207.86 1004.2,1203.68 1004.79,1203.85 1005.38,1209.3 1005.96,1209.22 1006.55,1206.3 1007.14,1206.28 1007.72,1204.85 1008.31,1202.02 1008.9,1202.33 1009.48,1201.3 1010.07,1201.74 1010.65,1202 1011.24,1202.08 1011.83,1199.58 1012.41,1198.65 1013,1199.18 1013.59,1202.3 1014.17,1204.52 1014.76,1201.83 1015.35,1199.47 1015.93,1201.35 1016.52,1201.78 1017.11,1200.68 1017.69,1201.02 1018.28,1201.38 1018.86,1203.12 1019.45,1203.44 1020.04,1206.7 1020.62,1205.41 1021.21,1206.99 1021.8,1207.08 1022.38,1208.65 1022.97,1208.88 1023.56,1207.15 1024.14,1210.15 1024.73,1210.15 1025.32,1209.67 1025.9,1213.97 1026.49,1213.67 1027.07,1216.15 1027.66,1215.79 1028.25,1216.75 1028.83,1215.17 1029.42,1215.05 1030.01,1214.8 1030.59,1213.06 1031.18,1208.33 1031.77,1211.21 1032.35,1212.22 1032.94,1211.79 1033.52,1212.65 1034.11,1211.08 1034.7,1215.17 1035.28,1213.4 1035.87,1210.58 1036.46,1209.2 1037.04,1210.65 1037.63,1209.34 1038.22,1210.71 1038.8,1213.61 1039.39,1213.55 1039.98,1210.71 1040.56,1209.32 1041.15,1208.07 1041.73,1207.8 1042.32,1209.05 1042.91,1207.84 1043.49,1206.5 1044.08,1206.8 1044.67,1206.94 1045.25,1207.32 1045.84,1211.46 1046.43,1215.64 1047.01,1213.92 1047.6,1212.49 1048.19,1212.13 1048.77,1210.41 1049.36,1212.98 1049.94,1211.35 1050.53,1213.99 1051.12,1212.25 1051.7,1213.54 1052.29,1211.93 1052.88,1211.66 1053.46,1209.85 1054.05,1208.33 1054.64,1205.46 1055.22,1207.09 1055.81,1204.4 1056.39,1204.59 1056.98,1204.8 1057.57,1206.53 1058.15,1207.91 1058.74,1209.31 1059.33,1212.05 1059.91,1211.81 1060.5,1210.25 1061.09,1210.21 1061.67,1207.22 1062.26,1207.48 1062.85,1209.09 1063.43,1210.47 1064.02,1210.44 1064.6,1214.47 1065.19,1212.87 1065.78,1215.54 1066.36,1215.26 1066.95,1211.97 1067.54,1211.44 1068.12,1212.68 1068.71,1206.78 1069.3,1208.27 1069.88,1208.24 1070.47,1209.41 1071.06,1213.43 1071.64,1211.6 1072.23,1212.57 1072.81,1212.03 1073.4,1210.62 1073.99,1212.05 1074.57,1208.75 1075.16,1208.74 1075.75,1210.13 1076.33,1208.52 1076.92,1209.31 1077.51,1210.4 1078.09,1213.15 1078.68,1213.03 1079.26,1214.38 1079.85,1212.55 1080.44,1210.88 1081.02,1209.41 1081.61,1207.92 1082.2,1210.65 1082.78,1210.58 1083.37,1209.41 1083.96,1209.07 1084.54,1207.64 1085.13,1207.41 1085.72,1207.59 1086.3,1206.19 1086.89,1207.44 1087.47,1209.08 1088.06,1207.49 1088.65,1207.74 1089.23,1207.79 1089.82,1207.45 1090.41,1208.91 1090.99,1205.99 1091.58,1205.62 1092.17,1202.78 1092.75,1204.5 1093.34,1203.37 1093.93,1206.3 1094.51,1206.2 1095.1,1206.31 1095.68,1204.53 1096.27,1200.28 1096.86,1199.39 1097.44,1198.51 1098.03,1198.78 1098.62,1200.98 1099.2,1201.59 1099.79,1202.16 1100.38,1202.35 1100.96,1205.26 1101.55,1205.25 1102.14,1204.17 1102.72,1201.73 1103.31,1204.99 1103.89,1203.81 1104.48,1202.87 1105.07,1206.11 1105.65,1210.44 1106.24,1209.16 1106.83,1210.45 1107.41,1216.08 1108,1214.26 1108.59,1212.46 1109.17,1212.41 1109.76,1214.87 1110.34,1214.4 1110.93,1212.76 1111.52,1212.51 1112.1,1213.97 1112.69,1213.78 1113.28,1212.56 1113.86,1211.01 1114.45,1212.65 1115.04,1212.14 1115.62,1213.16 1116.21,1214.27 1116.8,1213.95 1117.38,1215.13 1117.97,1213.05 1118.55,1212.71 1119.14,1215.05 1119.73,1213.32 1120.31,1214.51 1120.9,1211.32 1121.49,1209.55 1122.07,1209.66 1122.66,1208.18 1123.25,1209.48 1123.83,1209.18 1124.42,1204.93 1125.01,1203.52 1125.59,1200.71 1126.18,1201.11 1126.76,1199.84 1127.35,1200.45 1127.94,1199.54 1128.52,1198.47 1129.11,1197.5 1129.7,1198.09 1130.28,1197.08 1130.87,1199.07 1131.46,1197.95 1132.04,1198.49 1132.63,1201.98 1133.21,1204.94 1133.8,1205.23 1134.39,1203.8 1134.97,1205.48 1135.56,1206.97 1136.15,1208.43 1136.73,1208.54 1137.32,1207.48 1137.91,1204.74 1138.49,1200.9 1139.08,1198.86 1139.67,1199.45 1140.25,1198.78 1140.84,1201.94 1141.42,1203.71 1142.01,1205.23 1142.6,1202.72 1143.18,1201.66 1143.77,1201.93 1144.36,1206.26 1144.94,1205.08 1145.53,1205.2 1146.12,1206.43 1146.7,1208.2 1147.29,1207.08 1147.88,1205.77 1148.46,1205.57 1149.05,1208.68 1149.63,1207.29 1150.22,1209.75 1150.81,1208.15 1151.39,1205.1 1151.98,1207.82 1152.57,1206.62 1153.15,1205.42 1153.74,1209.84 1154.33,1209.8 1154.91,1211.05 1155.5,1210.9 1156.09,1209.19 1156.67,1206.5 1157.26,1205.48 1157.84,1207.06 1158.43,1209.5 1159.02,1210.76 1159.6,1210.59 1160.19,1214.66 1160.78,1212.72 1161.36,1212.17 1161.95,1213.23 1162.54,1214.22 1163.12,1215.2 1163.71,1214.79 1164.29,1214.34 1164.88,1213.98 1165.47,1217.77 1166.05,1219.68 1166.64,1220.12 1167.23,1212.69 1167.81,1212.46 1168.4,1213.89 1168.99,1213.64 1169.57,1216.28 1170.16,1218.58 1170.75,1219.04 1171.33,1215.7 1171.92,1214.04 1172.5,1213.58 1173.09,1214.81 1173.68,1217.33 1174.26,1216.65 1174.85,1216.23 1175.44,1214.44 1176.02,1215.45 1176.61,1216.8 1177.2,1217.84 1177.78,1221.54 1178.37,1220.56 1178.96,1219.97 1179.54,1219.24 1180.13,1219.84 1180.71,1217.62 1181.3,1215.5 1181.89,1212.07 1182.47,1210.56 1183.06,1209.07 1183.65,1207.85 1184.23,1203.54 1184.82,1203.69 1185.41,1209.35 1185.99,1204.71 1186.58,1204.87 1187.16,1203.57 1187.75,1202.61 1188.34,1202.7 1188.92,1202.8 1189.51,1202.96 1190.1,1204.67 1190.68,1206.22 1191.27,1209.18 1191.86,1208.96 1192.44,1208.76 1193.03,1207.16 1193.62,1203.11 1194.2,1201.87 1194.79,1204.96 1195.37,1203.76 1195.96,1202.22 1196.55,1202.73 1197.13,1205.91 1197.72,1202.89 1198.31,1203.16 1198.89,1203.61 1199.48,1206.82 1200.07,1207 1200.65,1204.77 1201.24,1203.59 1201.83,1202.58 1202.41,1203.11 1203,1204.83 1203.58,1206.42 1204.17,1202.61 1204.76,1202.69 1205.34,1203.1 1205.93,1202.15 1206.52,1202.15 1207.1,1202.24 1207.69,1205.26 1208.28,1205.04 1208.86,1203.88 1209.45,1205.35 1210.03,1207.94 1210.62,1207.99 1211.21,1202.65 1211.79,1201.66 1212.38,1203.16 1212.97,1197.95 1213.55,1201.28 1214.14,1197.59 1214.73,1200.91 1215.31,1200.01 1215.9,1203.35 1216.49,1200.82 1217.07,1201.16 1217.66,1201.63 1218.24,1201.97 1218.83,1203.84 1219.42,1202.82 1220,1203.32 1220.59,1205.05 1221.18,1209.63 1221.76,1208.08 1222.35,1209.59 1222.94,1209.56 1223.52,1210.97 1224.11,1209.22 1224.7,1212.1 1225.28,1213.55 1225.87,1213.35 1226.45,1213.35 1227.04,1210.31 1227.63,1210.19 1228.21,1207.44 1228.8,1207.56 1229.39,1207.46 1229.97,1210.03 1230.56,1209.96 1231.15,1212.67 1231.73,1211.11 1232.32,1213.85 1232.91,1213.55 1233.49,1213.18 1234.08,1211.44 1234.66,1211.23 1235.25,1209.51 1235.84,1212.11 1236.42,1210.32 1237.01,1211.64 1237.6,1209.96 1238.18,1212.56 1238.77,1215.13 1239.36,1214.99 1239.94,1212.82 1240.53,1212.75 1241.11,1208.76 1241.7,1208.88 1242.29,1210.25 1242.87,1209.08 1243.46,1207.49 1244.05,1206.26 1244.63,1203.58 1245.22,1205.39 1245.81,1205.48 1246.39,1205.45 1246.98,1204.33 1247.57,1201.92 1248.15,1200.75 1248.74,1201.19 1249.32,1201.21 1249.91,1201.62 1250.5,1199.14 1251.08,1196.88 1251.67,1197.7 1252.26,1199.47 1252.84,1199.77 1253.43,1200.24 1254.02,1203.56 1254.6,1205.01 1255.19,1205.19 1255.78,1205.16 1256.36,1205.17 1256.95,1205.4 1257.53,1208.38 1258.12,1209.5 1258.71,1210.9 1259.29,1211.96 1259.88,1211.53 1260.47,1211.36 1261.05,1209.67 1261.64,1209.47 1262.23,1207.9 1262.81,1211.67 1263.4,1211.22 1263.98,1211.03 1264.57,1212.79 1265.16,1215.42 1265.74,1215.08 1266.33,1213.4 1266.92,1214.56 1267.5,1214.23 1268.09,1213.86 1268.68,1212.07 1269.26,1210.28 1269.85,1208.49 1270.44,1207.04 1271.02,1205.5 1271.61,1205.39 1272.19,1205.38 1272.78,1205.36 1273.37,1206.47 1273.95,1206.22 1274.54,1207.51 1275.13,1209.07 1275.71,1213.22 1276.3,1211.68 1276.89,1211.15 1277.47,1208.13 1278.06,1208.04 1278.65,1206.42 1279.23,1205.24 1279.82,1205.44 1280.4,1205.65 1280.99,1208.36 1281.58,1208.51 1282.16,1205.75 1282.75,1205.87 1283.34,1206.04 1283.92,1206.24 1284.51,1205.06 1285.1,1205.39 1285.68,1199.74 1286.27,1197.32 1286.86,1199.05 1287.44,1201.05 1288.03,1203.12 1288.61,1200.58 1289.2,1198.23 1289.79,1200.17 1290.37,1203.68 1290.96,1205.18 1291.55,1204.09 1292.13,1202.84 1292.72,1204.29 1293.31,1204.61 1293.89,1204.68 1294.48,1206.15 1295.06,1202.18 1295.65,1205.25 1296.24,1205.44 1296.82,1208.32 1297.41,1208.5 1298,1209.85 1298.58,1208.16 1299.17,1206.74 1299.76,1209.33 1300.34,1207.85 1300.93,1206.47 1301.52,1205.15 1302.1,1204.08 1302.69,1209.72 1303.27,1212.43 1303.86,1210.96 1304.45,1207.79 1305.03,1209.4 1305.62,1207.94 1306.21,1209.5 1306.79,1208.13 1307.38,1207.92 1307.97,1207.84 1308.55,1209.29 1309.14,1210.72 1309.73,1209 1310.31,1210.07 1310.9,1209.89 1311.48,1210.19 1312.07,1208.63 1312.66,1208.48 1313.24,1208.74 1313.83,1205.71 1314.42,1207.31 1315,1209.74 1315.59,1209.74 1316.18,1210.08 1316.76,1209.79 1317.35,1214.09 1317.93,1213.52 1318.52,1216.11 1319.11,1214.26 1319.69,1212.34 1320.28,1210.82 1320.87,1212.09 1321.45,1210.09 1322.04,1209.74 1322.63,1209.66 1323.21,1209.31 1323.8,1209.26 1324.39,1208.84 1324.97,1208.73 1325.56,1208.64 1326.14,1210.15 1326.73,1212.72 1327.32,1209.65 1327.9,1210.84 1328.49,1212.01 1329.08,1211.71 1329.66,1214.44 1330.25,1212.89 1330.84,1212.49 1331.42,1216.45 1332.01,1217.1 1332.6,1219.06 1333.18,1217.21 1333.77,1216.81 1334.35,1217.64 1334.94,1218.76 1335.53,1216.93 1336.11,1219.14 1336.7,1219.91 1337.29,1217.75 1337.87,1217.32 1338.46,1215.39 1339.05,1215.05 1339.63,1211.86 1340.22,1213.38 1340.8,1210.38 1341.39,1211.36 1341.98,1211.25 1342.56,1212.45 1343.15,1210.65 1343.74,1213.57 1344.32,1214.56 1344.91,1212.91 1345.5,1216.72 1346.08,1216.52 1346.67,1213.26 1347.26,1214.28 1347.84,1213.99 1348.43,1213.53 1349.01,1215.99 1349.6,1214.32 1350.19,1211.19 1350.77,1211.28 1351.36,1212.57 1351.95,1211.02 1352.53,1210.94 1353.12,1206.61 1353.71,1206.45 1354.29,1206.58 1354.88,1206.7 1355.47,1209.72 1356.05,1211 1356.64,1210.73 1357.22,1211.73 1357.81,1211.7 1358.4,1212.68 1358.98,1208.16 1359.57,1209.23 1360.16,1209.44 1360.74,1207.86 1361.33,1207.88 1361.92,1208.1 1362.5,1204.96 1363.09,1203.91 1363.68,1207.16 1364.26,1207.28 1364.85,1207.06 1365.43,1207.24 1366.02,1208.5 1366.61,1206.88 1367.19,1208.43 1367.78,1208.56 1368.37,1207.21 1368.95,1207.53 1369.54,1210.51 1370.13,1208.96 1370.71,1209.04 1371.3,1207.66 1371.88,1210.08 1372.47,1211.21 1373.06,1208.44 1373.64,1208.55 1374.23,1208.27 1374.82,1203.81 1375.4,1205.63 1375.99,1207.1 1376.58,1204.1 1377.16,1208.01 1377.75,1206.6 1378.34,1206.93 1378.92,1205.55 1379.51,1205.75 1380.09,1204.79 1380.68,1203.44 1381.27,1206.52 1381.85,1206.41 1382.44,1208.08 1383.03,1206.56 1383.61,1205.27 1384.2,1204.27 1384.79,1202.97 1385.37,1201.82 1385.96,1202.11 1386.55,1202.32 1387.13,1204.15 1387.72,1207.07 1388.3,1206.95 1388.89,1205.63 1389.48,1205.38 1390.06,1205.68 1390.65,1200.21 1391.24,1200.72 1391.82,1199.6 1392.41,1201.52 1393,1202.06 1393.58,1203.47 1394.17,1200.94 1394.75,1201.29 1395.34,1203.34 1395.93,1203.53 1396.51,1200.76 1397.1,1202.49 1397.69,1202.8 1398.27,1201.47 1398.86,1201.84 1399.45,1202.01 1400.03,1202.15 1400.62,1200.98 1401.21,1203.8 1401.79,1205.39 1402.38,1205.44 1402.96,1205.14 1403.55,1206.49 1404.14,1205.28 1404.72,1208.11 1405.31,1206.67 1405.9,1206.87 1406.48,1206.91 1407.07,1205.22 1407.66,1205.58 1408.24,1206.97 1408.83,1208.37 1409.42,1206.97 1410,1204.38 1410.59,1204.53 1411.17,1203.29 1411.76,1203.69 1412.35,1204.09 1412.93,1201.54 1413.52,1200.43 1414.11,1202.44 1414.69,1204.32 1415.28,1205.63 1415.87,1201.67 1416.45,1202.34 1417.04,1203.99 1417.63,1201.51 1418.21,1201.52 1418.8,1202.06 1419.38,1200.78 1419.97,1199.73 1420.56,1201.54 1421.14,1199.09 1421.73,1205.26 1422.32,1205.17 1422.9,1203.74 1423.49,1202.59 1424.08,1199.74 1424.66,1201.76 1425.25,1202.01 1425.83,1204.97 1426.42,1205.17 1427.01,1205.35 1427.59,1207.23 1428.18,1204.77 1428.77,1203.97 1429.35,1205.73 1429.94,1205.51 1430.53,1204.36 1431.11,1205.96 1431.7,1206.2 1432.29,1206.45 1432.87,1205.07 1433.46,1205.32 1434.04,1204.05 1434.63,1202.83 1435.22,1204.31 1435.8,1204.54 1436.39,1202.09 1436.98,1202.38 1437.56,1205.19 1438.15,1204.01 1438.74,1204.56 1439.32,1206.13 1439.91,1206.17 1440.5,1208.92 1441.08,1208.87 1441.67,1206.01 1442.25,1204.58 1442.84,1203.58 1443.43,1203.84 1444.01,1204.12 1444.6,1205.95 1445.19,1210.42 1445.77,1208.72 1446.36,1207.25 1446.95,1207.29 1447.53,1207.34 1448.12,1208.68 1448.7,1208.47 1449.29,1209.82 1449.88,1211.23 1450.46,1209.76 1451.05,1211.05 1451.64,1209.27 1452.22,1209.13 1452.81,1208.81 1453.4,1205.82 1453.98,1205.69 1454.57,1205.6 1455.16,1202.96 1455.74,1203.39 1456.33,1205.15 1456.91,1205.42 1457.5,1204.08 1458.09,1204.35 1458.67,1203.2 1459.26,1204.5 1459.85,1203.57 1460.43,1205.21 1461.02,1205.33 1461.61,1202.49 1462.19,1206.84 1462.78,1208.35 1463.37,1208.67 1463.95,1206.71 1464.54,1205.32 1465.12,1202.94 1465.71,1203.2 1466.3,1200.68 1466.88,1205.21 1467.47,1205.39 1468.06,1206.98 1468.64,1206.88 1469.23,1208.18 1469.82,1203.81 1470.4,1204.02 1470.99,1207.22 1471.57,1211.52 1472.16,1211.52 1472.75,1212.55 1473.33,1213.83 1473.92,1212.21 1474.51,1209.21 1475.09,1210.44 1475.68,1210.31 1476.27,1211.29 1476.85,1212.56 1477.44,1217.88 1478.03,1214.49 1478.61,1216.44 1479.2,1214.52 1479.78,1216.86 1480.37,1216.26 1480.96,1217.55 1481.54,1215.48 1482.13,1216.56 1482.72,1213.52 1483.3,1214.29 1483.89,1214.05 1484.48,1213.88 1485.06,1213.53 1485.65,1220.26 1486.24,1218.35 1486.82,1217.92 1487.41,1217.56 1487.99,1215.82 1488.58,1214 1489.17,1212.22 1489.75,1209.1 1490.34,1207.91 1490.93,1206.22 1491.51,1207.51 1492.1,1204.78 1492.69,1203.74 1493.27,1203.81 1493.86,1202.65 1494.45,1206.78 1495.03,1208.01 1495.62,1209.21 1496.2,1212.07 1496.79,1210.12 1497.38,1211.38 1497.96,1211.38 1498.55,1211.3 1499.14,1213.79 1499.72,1210.84 1500.31,1207.68 1500.9,1209.26 1501.48,1206.22 1502.07,1207.7 1502.65,1209.17 1503.24,1210.35 1503.83,1207.29 1504.41,1207.43 1505,1208.64 1505.59,1208.64 1506.17,1207.04 1506.76,1208.56 1507.35,1207.42 1507.93,1210.28 1508.52,1210.28 1509.11,1207.36 1509.69,1205.95 1510.28,1206.97 1510.86,1207.2 1511.45,1209.81 1512.04,1213.87 1512.62,1211.95 1513.21,1213.05 1513.8,1212.59 1514.38,1213.57 1514.97,1213.06 1515.56,1214.3 1516.14,1213.92 1516.73,1214.92 1517.32,1214.48 1517.9,1214.07 1518.49,1216.76 1519.07,1217.6 1519.66,1218.65 1520.25,1219.29 1520.83,1217.24 1521.42,1215.48 1522.01,1213.59 1522.59,1210.61 1523.18,1206.16 1523.77,1209 1524.35,1208.98 1524.94,1210.21 1525.52,1211.54 1526.11,1207.13 1526.7,1208.56 1527.28,1205.6 1527.87,1207.62 1528.46,1205.93 1529.04,1207.48 1529.63,1204.62 1530.22,1203.24 1530.8,1202.11 1531.39,1202.55 1531.98,1201.69 1532.56,1200.82 1533.15,1201.09 1533.73,1196.8 1534.32,1197.55 1534.91,1197.02 1535.49,1195.92 1536.08,1195.15 1536.67,1195.6 1537.25,1198.76 1537.84,1200.66 1538.43,1203.87 1539.01,1202.61 1539.6,1201.58 1540.19,1200.54 1540.77,1198.29 1541.36,1198.89 1541.94,1202.34 1542.53,1201.42 1543.12,1199.03 1543.7,1199.43 1544.29,1198.44 1544.88,1200.28 1545.46,1200.72 1546.05,1202.5 1546.64,1204.19 1547.22,1204.23 1547.81,1205.85 1548.4,1204.38 1548.98,1200.33 1549.57,1200.53 1550.15,1199.22 1550.74,1200.98 1551.33,1200 1551.91,1201.97 1552.5,1202.01 1553.09,1205.21 1553.67,1207.01 1554.26,1207.19 1554.85,1207.33 1555.43,1208.64 1556.02,1210.16 1556.6,1210.28 1557.19,1208.88 1557.78,1211.8 1558.36,1218.37 1558.95,1221.84 1559.54,1221.29 1560.12,1220.35 1560.71,1219.75 1561.3,1219.14 1561.88,1218.81 1562.47,1219.37 1563.06,1220.24 1563.64,1215.55 1564.23,1212.55 1564.81,1212.37 1565.4,1211.99 1565.99,1215.84 1566.57,1215.19 1567.16,1217.63 1567.75,1215.65 1568.33,1216.71 1568.92,1217.71 1569.51,1218.8 1570.09,1218.21 1570.68,1216.24 1571.27,1213.39 1571.85,1213.05 1572.44,1210.95 1573.02,1210.88 1573.61,1210.71 1574.2,1207.52 1574.78,1208.82 1575.37,1209.99 1575.96,1207.31 1576.54,1205.75 1577.13,1205.95 1577.72,1204.63 1578.3,1207.66 1578.89,1207.44 1579.47,1210.45 1580.06,1210.1 1580.65,1211.45 1581.23,1212.37 1581.82,1213.37 1582.41,1214.39 1582.99,1215.21 1583.58,1217.71 1584.17,1217.03 1584.75,1216.72 1585.34,1216.21 1585.93,1217.04 1586.51,1216.43 1587.1,1213.21 1587.68,1208.52 1588.27,1210.25 1588.86,1210.11 1589.44,1210.09 1590.03,1211.33 1590.62,1209.34 1591.2,1207.95 1591.79,1205.04 1592.38,1204.98 1592.96,1203.56 1593.55,1205.13 1594.14,1205.25 1594.72,1203.98 1595.31,1207.12 1595.89,1205.42 1596.48,1202.86 1597.07,1204.63 1597.65,1203.38 1598.24,1202.14 1598.83,1201.14 1599.41,1200.01 1600,1197.29 1600.59,1199.45 1601.17,1198.68 1601.76,1199.24 1602.34,1200.06 1602.93,1199.07 1603.52,1199.31 1604.1,1199.7 1604.69,1201.58 1605.28,1200.34 1605.86,1197.79 1606.45,1198.34 1607.04,1198.88 1607.62,1199.03 1608.21,1202.25 1608.8,1199.66 1609.38,1194.77 1609.97,1195.59 1610.55,1198.99 1611.14,1199.41 1611.73,1199.8 1612.31,1197.17 1612.9,1197.85 1613.49,1195.41 1614.07,1197.24 1614.66,1199.42 1615.25,1201 1615.83,1200.01 1616.42,1203.2 1617.01,1203.46 1617.59,1208 1618.18,1209.16 1618.76,1211.81 1619.35,1212.94 1619.94,1211.18 1620.52,1213.98 1621.11,1213.76 1621.7,1213.28 1622.28,1213.14 1622.87,1207.84 1623.46,1203.58 1624.04,1205.11 1624.63,1205.31 1625.22,1205.13 1625.8,1203.72 1626.39,1203.79 1626.97,1203.93 1627.56,1204.18 1628.15,1205.73 1628.73,1205.81 1629.32,1207.14 1629.91,1208.33 1630.49,1208.42 1631.08,1205.74 1631.67,1201.85 1632.25,1203.4 1632.84,1202.32 1633.42,1204.02 1634.01,1202.09 1634.6,1202.35 1635.18,1204.22 1635.77,1202.96 1636.36,1203.38 1636.94,1206.25 1637.53,1205 1638.12,1202.68 1638.7,1205.67 1639.29,1204.5 1639.88,1207.42 1640.46,1206.16 1641.05,1207.68 1641.63,1206.62 1642.22,1206.8 1642.81,1205.63 1643.39,1205.91 1643.98,1207.46 1644.57,1204.52 1645.15,1207.48 1645.74,1207.57 1646.33,1209.01 1646.91,1207.28 1647.5,1207.06 1648.09,1210 1648.67,1211.27 1649.26,1208.33 1649.84,1211 1650.43,1209.74 1651.02,1212.47 1651.6,1210.82 1652.19,1210.34 1652.78,1208.76 1653.36,1210 1653.95,1209.81 1654.54,1209.62 1655.12,1209.93 1655.71,1210.16 1656.29,1212.64 1656.88,1215.05 1657.47,1214.63 1658.05,1214.41 1658.64,1214.04 1659.23,1215.29 1659.81,1215.25 1660.4,1213.71 1660.99,1213.29 1661.57,1212.96 1662.16,1212.87 1662.75,1211.34 1663.33,1209.37 1663.92,1209.22 1664.5,1206.64 1665.09,1206.64 1665.68,1206.74 1666.26,1208.21 1666.85,1208.25 1667.44,1205.44 1668.02,1205.56 1668.61,1204.25 1669.2,1204.54 1669.78,1204.82 1670.37,1206.31 1670.96,1203.87 1671.54,1203.04 1672.13,1204.97 1672.71,1206.57 1673.3,1205.41 1673.89,1205.46 1674.47,1208.34 1675.06,1211.2 1675.65,1206.67 1676.23,1206.79 1676.82,1209.62 1677.41,1208.49 1677.99,1208.45 1678.58,1210.12 1679.17,1214.01 1679.75,1212.33 1680.34,1213.52 1680.92,1211.77 1681.51,1212.76 1682.1,1216.73 1682.68,1216.06 1683.27,1215.56 1683.86,1213.71 1684.44,1213.42 1685.03,1213.19 1685.62,1211.78 1686.2,1212.5 1686.79,1209.43 1687.37,1212.1 1687.96,1210.5 1688.55,1210.35 1689.13,1212.78 1689.72,1210.9 1690.31,1208.03 1690.89,1208.01 1691.48,1206.44 1692.07,1205.03 1692.65,1205.28 1693.24,1207.11 1693.83,1209.86 1694.41,1209.69 1695,1208.17 1695.58,1209.42 1696.17,1209.01 1696.76,1209.07 1697.34,1206.65 1697.93,1205.34 1698.52,1206.78 1699.1,1206.93 1699.69,1208.5 1700.28,1208.76 1700.86,1207.2 1701.45,1205.89 1702.04,1207.45 1702.62,1207.45 1703.21,1210.11 1703.79,1210.12 1704.38,1212.82 1704.97,1212.68 1705.55,1211.21 1706.14,1209.69 1706.73,1206.88 1707.31,1209.8 1707.9,1209.73 1708.49,1210.93 1709.07,1209.15 1709.66,1210.36 1710.24,1208.71 1710.83,1207.24 1711.42,1206.97 1712,1205.2 1712.59,1203.82 1713.18,1202.62 1713.76,1202.78 1714.35,1204.28 1714.94,1203.03 1715.52,1203.38 1716.11,1205.02 1716.7,1206.59 1717.28,1208.03 1717.87,1209.44 1718.45,1209.36 1719.04,1209.03 1719.63,1208.78 1720.21,1207.3 1720.8,1206.03 1721.39,1206 1721.97,1206.49 1722.56,1206.62 1723.15,1206.65 1723.73,1208.05 1724.32,1206.45 1724.91,1208.01 1725.49,1208.05 1726.08,1209.46 1726.66,1207.97 1727.25,1206.4 1727.84,1208.03 1728.42,1208.14 1729.01,1208.52 1729.6,1208.67 1730.18,1207.15 1730.77,1205.78 1731.36,1205.83 1731.94,1205.98 1732.53,1202.2 1733.11,1202.63 1733.7,1201.26 1734.29,1201.59 1734.87,1204.7 1735.46,1207.44 1736.05,1207.77 1736.63,1207.64 1737.22,1210.39 1737.81,1210.05 1738.39,1208.36 1738.98,1205.71 1739.57,1208.49 1740.15,1208.36 1740.74,1208.08 1741.32,1207.93 1741.91,1210.9 1742.5,1210.74 1743.08,1210.49 1743.67,1214.4 1744.26,1215.55 1744.84,1213.89 1745.43,1213.35 1746.02,1213.06 1746.6,1214.48 1747.19,1212.69 1747.78,1213.73 1748.36,1212.04 1748.95,1211.7 1749.53,1211.44 1750.12,1211.49 1750.71,1211.38 1751.29,1210.02 1751.88,1212.81 1752.47,1214.15 1753.05,1212.12 1753.64,1211.99 1754.23,1214.41 1754.81,1214.01 1755.4,1212.38 1755.99,1210.81 1756.57,1209.04 1757.16,1209.11 1757.74,1211.5 1758.33,1208.35 1758.92,1210.92 1759.5,1212.38 1760.09,1209.54 1760.68,1208.21 1761.26,1212.37 1761.85,1212.02 1762.44,1212.05 1763.02,1211.95 1763.61,1211.64 1764.19,1212.8 1764.78,1210.96 1765.37,1209.09 1765.95,1213.3 1766.54,1211.67 1767.13,1208.71 1767.71,1208.5 1768.3,1209.78 1768.89,1209.63 1769.47,1210.74 1770.06,1210.55 1770.65,1210.39 1771.23,1209.9 1771.82,1211.14 1772.4,1210.91 1772.99,1210.65 1773.58,1208.95 1774.16,1209.08 1774.75,1207.71 1775.34,1207.75 1775.92,1207.51 1776.51,1207.74 1777.1,1207.92 1777.68,1205.2 1778.27,1204.01 1778.86,1204.42 1779.44,1200.39 1780.03,1203.44 1780.61,1205.14 1781.2,1203.54 1781.79,1203.72 1782.37,1204.12 1782.96,1204.19 1783.55,1206.93 1784.13,1208.49 1784.72,1211.04 1785.31,1212.06 1785.89,1211.72 1786.48,1211.75 1787.06,1212.89 1787.65,1214.03 1788.24,1212.3 1788.82,1214.74 1789.41,1214.49 1790,1214.27 1790.58,1212.47 1791.17,1209.24 1791.76,1209 1792.34,1206.25 1792.93,1202.01 1793.52,1202.6 1794.1,1205.52 1794.69,1205.8 1795.27,1205.92 1795.86,1207.52 1796.45,1207.75 1797.03,1205.22 1797.62,1202.49 1798.21,1202.76 1798.79,1204.07 1799.38,1202.7 1799.97,1198.81 1800.55,1196.52 1801.14,1195.6 1801.73,1194.97 1802.31,1193.99 1802.9,1191.67 1803.48,1192.84 1804.07,1193.44 1804.66,1196.75 1805.24,1199.97 1805.83,1202.16 1806.42,1205.26 1807,1206.74 1807.59,1208.35 1808.18,1205.59 1808.76,1205.92 1809.35,1206.08 1809.94,1206.08 1810.52,1210.11 1811.11,1211.4 1811.69,1211.35 1812.28,1212.67 1812.87,1214.09 1813.45,1214.88 1814.04,1216.17 1814.63,1214.29 1815.21,1215.5 1815.8,1216.27 1816.39,1214.56 1816.97,1216.86 1817.56,1216.25 1818.14,1214.32 1818.73,1212.71 1819.32,1215.42 1819.9,1214.79 1820.49,1214.36 1821.08,1212.58 1821.66,1212.37 1822.25,1212.09 1822.84,1211.83 1823.42,1210.29 1824.01,1210.08 1824.6,1208.84 1825.18,1210.21 1825.77,1211.52 1826.35,1211.18 1826.94,1209.68 1827.53,1209.74 1828.11,1208.48 1828.7,1212.46 1829.29,1212.18 1829.87,1210.43 1830.46,1208.63 1831.05,1205.73 1831.63,1203.18 1832.22,1202.16 1832.81,1202.28 1833.39,1204.16 1833.98,1204.72 1834.56,1203.48 1835.15,1203.99 1835.74,1204.38 1836.32,1206.33 1836.91,1207.63 1837.5,1206.25 1838.08,1207.93 1838.67,1206.58 1839.26,1208.08 1839.84,1204.9 1840.43,1206.47 1841.01,1206.52 1841.6,1202.25 1842.19,1202.61 1842.77,1204.32 1843.36,1202.98 1843.95,1201.85 1844.53,1197.94 1845.12,1199.82 1845.71,1203.15 1846.29,1202.12 1846.88,1202.58 1847.47,1201.52 1848.05,1201.79 1848.64,1202.03 1849.22,1202.12 1849.81,1202.26 1850.4,1203.72 1850.98,1202.76 1851.57,1204.7 1852.16,1206.18 1852.74,1205.18 1853.33,1202.42 1853.92,1204.27 1854.5,1204.14 1855.09,1207.52 1855.68,1207.45 1856.26,1206.24 1856.85,1206.22 1857.43,1202.31 1858.02,1208.28 1858.61,1209.73 1859.19,1209.96 1859.78,1211.44 1860.37,1211.42 1860.95,1211.2 1861.54,1212.22 1862.13,1210.74 1862.71,1210.71 1863.3,1209 1863.88,1208.92 1864.47,1208.59 1865.06,1207.06 1865.64,1208.49 1866.23,1211.33 1866.82,1212.49 1867.4,1213.38 1867.99,1211.37 1868.58,1209.84 1869.16,1209.7 1869.75,1209.55 1870.34,1211.09 1870.92,1212.17 1871.51,1215.78 1872.09,1216.7 1872.68,1213.73 1873.27,1212.14 1873.85,1208.97 1874.44,1207.3 1875.03,1208.89 1875.61,1207.22 1876.2,1208.59 1876.79,1208.5 1877.37,1209.67 1877.96,1206.53 1878.55,1206.66 1879.13,1205.34 1879.72,1207.05 1880.3,1208.37 1880.89,1207.13 1881.48,1204.23 1882.06,1204.32 1882.65,1204.44 1883.24,1204.6 1883.82,1204.71 1884.41,1201.95 1885,1203.47 1885.58,1203.68 1886.17,1205.35 1886.76,1208.24 1887.34,1208.08 1887.93,1207.9 1888.51,1212.02 1889.1,1211.52 1889.69,1211.16 1890.27,1210.82 1890.86,1210.58 1891.45,1206.26 1892.03,1204.96 1892.62,1206.81 1893.21,1207.12 1893.79,1208.4 1894.38,1206.99 1894.96,1205.29 1895.55,1207.02 1896.14,1205.87 1896.72,1207.65 1897.31,1207.74 1897.9,1207.78 1898.48,1206.4 1899.07,1206.53 1899.66,1203.88 1900.24,1205.43 1900.83,1205.57 1901.42,1204.27 1902,1200.19 1902.59,1199.26 1903.17,1201.08 1903.76,1201.35 1904.35,1201.57 1904.93,1207.3 1905.52,1205.84 1906.11,1204.1 1906.69,1202.83 1907.28,1204.54 1907.87,1203.13 1908.45,1204.63 1909.04,1203.28 1909.63,1203.49 1910.21,1200.89 1910.8,1202.62 1911.38,1201.16 1911.97,1202.8 1912.56,1201.7 1913.14,1204.85 1913.73,1209.33 1914.32,1209.12 1914.9,1208.99 1915.49,1210.47 1916.08,1210.42 1916.66,1208.95 1917.25,1213.16 1917.83,1215.8 1918.42,1217.84 1919.01,1217.03 1919.59,1215.2 1920.18,1211.47 1920.77,1209.65 1921.35,1208.29 1921.94,1208 1922.53,1207.99 1923.11,1208.28 1923.7,1209.84 1924.29,1208.32 1924.87,1209.84 1925.46,1205.53 1926.04,1205.95 1926.63,1207.44 1927.22,1205.92 1927.8,1210.23 1928.39,1209.93 1928.98,1208.51 1929.56,1209.88 1930.15,1208.54 1930.74,1211.25 1931.32,1213.79 1931.91,1213.64 1932.5,1213.22 1933.08,1211.48 1933.67,1209.96 1934.25,1209.55 1934.84,1205.3 1935.43,1205.46 1936.01,1204.32 1936.6,1203.17 1937.19,1205.82 1937.77,1205.49 1938.36,1205.77 1938.95,1205.99 1939.53,1207.34 1940.12,1204.47 1940.71,1204.91 1941.29,1203.8 1941.88,1205.58 1942.46,1208.34 1943.05,1212.21 1943.64,1211.75 1944.22,1213.11 1944.81,1212.83 1945.4,1212.83 1945.98,1212.44 1946.57,1212.25 1947.16,1216.09 1947.74,1214.22 1948.33,1212.55 1948.91,1216.46 1949.5,1214.46 1950.09,1214.02 1950.67,1212.09 1951.26,1210.48 1951.85,1208.94 1952.43,1208.75 1953.02,1208.75 1953.61,1207.33 1954.19,1206.24 1954.78,1205.15 1955.37,1208.05 1955.95,1206.42 1956.54,1203.81 1957.12,1202.43 1957.71,1201.46 1958.3,1201.97 1958.88,1202.42 1959.47,1205.79 1960.06,1207.31 1960.64,1207.32 1961.23,1205.63 1961.82,1205.51 1962.4,1204.02 1962.99,1205.68 1963.58,1207.15 1964.16,1205.8 1964.75,1203.01 1965.33,1201.7 1965.92,1203.66 1966.51,1206.56 1967.09,1203.96 1967.68,1205.75 1968.27,1206.19 1968.85,1207.75 1969.44,1210.59 1970.03,1212.07 1970.61,1210.22 1971.2,1211.35 1971.78,1211.06 1972.37,1208.31 1972.96,1205.69 1973.54,1204.57 1974.13,1204.83 1974.72,1206.36 1975.3,1205.18 1975.89,1208.52 1976.48,1208.49 1977.06,1209.71 1977.65,1209.81 1978.24,1208.47 1978.82,1206.66 1979.41,1205.25 1979.99,1206.79 1980.58,1202.38 1981.17,1202.88 1981.75,1203.31 1982.34,1205.05 1982.93,1205.05 1983.51,1200.65 1984.1,1200.82 1984.69,1198.43 1985.27,1199.06 1985.86,1202.36 1986.45,1201.03 1987.03,1205.31 1987.62,1203.99 1988.2,1205.45 1988.79,1204.38 1989.38,1201.68 1989.96,1204.83 1990.55,1207.96 1991.14,1207.92 1991.72,1208.01 1992.31,1208.06 1992.9,1205.34 1993.48,1206.76 1994.07,1206.93 1994.65,1208.12 1995.24,1211.07 1995.83,1210.97 1996.41,1212.5 1997,1212.63 1997.59,1212.59 1998.17,1212.35 1998.76,1213.3 1999.35,1211.65 1999.93,1209.96 2000.52,1210.03 2001.11,1205.69 2001.69,1204.51 2002.28,1206.13 2002.86,1204.77 2003.45,1203.49 2004.04,1206.64 2004.62,1205.32 2005.21,1205.65 2005.8,1208.41 2006.38,1209.89 2006.97,1213.84 2007.56,1210.36 2008.14,1207.19 2008.73,1207.29 2009.32,1208.91 2009.9,1211.5 2010.49,1211.19 2011.07,1213.7 2011.66,1213.49 2012.25,1214.46 2012.83,1211.62 2013.42,1212.91 2014.01,1211.21 2014.59,1211.16 2015.18,1209.8 2015.77,1208.25 2016.35,1207.15 2016.94,1207.47 2017.53,1204.57 2018.11,1204.81 2018.7,1204.89 2019.28,1203.6 2019.87,1200.51 2020.46,1199.59 2021.04,1195.55 2021.63,1196.21 2022.22,1196.73 2022.8,1198.67 2023.39,1200.74 2023.98,1202.43 2024.56,1201.19 2025.15,1202.97 2025.73,1203.05 2026.32,1203.57 2026.91,1199.56 2027.49,1198.54 2028.08,1198.85 2028.67,1199.39 2029.25,1198.24 2029.84,1200.35 2030.43,1200.81 2031.01,1201.27 2031.6,1201.66 2032.19,1204.9 2032.77,1206.8 2033.36,1207.92 2033.94,1207.74 2034.53,1207.4 2035.12,1204.82 2035.7,1205.13 2036.29,1205.55 2036.88,1205.68 2037.46,1204.38 2038.05,1201.79 2038.64,1200.77 2039.22,1202.81 2039.81,1207.26 2040.4,1206.07 2040.98,1207.5 2041.57,1207.35 2042.15,1207.72 2042.74,1207.46 2043.33,1207.58 2043.91,1209.05 2044.5,1207.52 2045.09,1207.44 2045.67,1207.58 2046.26,1205.01 2046.85,1205.29 2047.43,1202.43 2048.02,1201.34 2048.6,1201.96 2049.19,1202.44 2049.78,1205.46 2050.36,1207.16 2050.95,1208.56 2051.54,1207.21 2052.12,1207.14 2052.71,1207.06 2053.3,1205.64 2053.88,1205.81 2054.47,1204.4 2055.06,1206.07 2055.64,1210.3 2056.23,1214.31 2056.81,1215.59 2057.4,1215.03 2057.99,1217.51 2058.57,1219.65 2059.16,1219.15 2059.75,1218.64 2060.33,1219.38 2060.92,1217.35 2061.51,1212.65 2062.09,1215.24 2062.68,1215.13 2063.27,1212.21 2063.85,1208.93 2064.44,1210.19 2065.02,1208.61 2065.61,1207.16 2066.2,1207.09 2066.78,1207.16 2067.37,1208.42 2067.96,1209.72 2068.54,1208.5 2069.13,1210.15 2069.72,1211.35 2070.3,1211.16 2070.89,1212.29 2071.48,1212.15 2072.06,1213.48 2072.65,1212.8 2073.23,1213.94 2073.82,1210.78 2074.41,1211.03 2074.99,1212.21 2075.58,1212.09 2076.17,1210.55 2076.75,1213.48 2077.34,1214.88 2077.93,1214.47 2078.51,1215.62 2079.1,1216.62 2079.68,1217.73 2080.27,1217.44 2080.86,1216.95 2081.44,1216.43 2082.03,1215.93 2082.62,1214.06 2083.2,1215.08 2083.79,1216.32 2084.38,1215.79 2084.96,1214.95 2085.55,1213.22 2086.14,1212.73 2086.72,1212.57 2087.31,1212.2 2087.89,1207.68 2088.48,1207.65 2089.07,1208.91 2089.65,1211.76 2090.24,1210.19 2090.83,1206.06 2091.41,1207.79 2092,1209.12 2092.59,1212.01 2093.17,1211.88 2093.76,1210.28 2094.35,1208.39 2094.93,1208.08 2095.52,1205.41 2096.1,1203.81 2096.69,1201.29 2097.28,1198.61 2097.86,1198.85 2098.45,1200.64 2099.04,1200.99 2099.62,1201.03 2100.21,1198.69 2100.8,1199.21 2101.38,1198.3 2101.97,1201.27 2102.55,1209.96 2103.14,1209.61 2103.73,1205.41 2104.31,1205.47 2104.9,1205.63 2105.49,1206.95 2106.07,1207.17 2106.66,1206.96 2107.25,1206.96 2107.83,1211.24 2108.42,1213.73 2109.01,1209.31 2109.59,1210.4 2110.18,1211.57 2110.76,1212.41 2111.35,1210.94 2111.94,1213.79 2112.52,1214.7 2113.11,1215.59 2113.7,1212.72 2114.28,1214.14 2114.87,1211.97 2115.46,1213.06 2116.04,1209.74 2116.63,1206.98 2117.22,1206.87 2117.8,1206.84 2118.39,1206.95 2118.97,1207.23 2119.56,1208.33 2120.15,1209.44 2120.73,1209.24 2121.32,1206.47 2121.91,1207.72 2122.49,1206.52 2123.08,1205.05 2123.67,1206.73 2124.25,1205.5 2124.84,1203.31 2125.42,1203.59 2126.01,1206.45 2126.6,1204.92 2127.18,1204.98 2127.77,1205.03 2128.36,1206.36 2128.94,1207.77 2129.53,1209.18 2130.12,1207.72 2130.7,1209.19 2131.29,1207.54 2131.88,1210.43 2132.46,1212.99 2133.05,1215.42 2133.63,1213.45 2134.22,1214.62 2134.81,1210.34 2135.39,1209.06 2135.98,1210.19 2136.57,1208.53 2137.15,1211.02 2137.74,1211.03 2138.33,1207.7 2138.91,1206.6 2139.5,1205.02 2140.09,1205.45 2140.67,1204.06 2141.26,1202.79 2141.84,1204.4 2142.43,1206.07 2143.02,1206.26 2143.6,1209.07 2144.19,1206.22 2144.78,1209.25 2145.36,1207.41 2145.95,1205.82 2146.54,1207.55 2147.12,1206.26 2147.71,1207.85 2148.3,1206.34 2148.88,1206.52 2149.47,1208.01 2150.05,1208.02 2150.64,1208.15 2151.23,1210.66 2151.81,1209.17 2152.4,1207.77 2152.99,1207.88 2153.57,1209.12 2154.16,1207.5 2154.75,1209.93 2155.33,1211.21 2155.92,1210.97 2156.5,1209.3 2157.09,1206.31 2157.68,1203.61 2158.26,1204.14 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1208.36 L986.612 1208.36 L987.198 1208.36 L987.785 1208.36 L988.371 1208.36 L988.957 1208.36 L989.544 1208.36 L990.13 1208.36 L990.717 1208.36 L991.303 1208.36 L991.889 1208.36 L992.476 1208.36 L993.062 1208.36 L993.649 1208.36 L994.235 1208.36 L994.822 1208.36 L995.408 1208.36 L995.994 1208.36 L996.581 1208.36 L997.167 1208.36 L997.754 1208.36 L998.34 1208.36 L998.926 1208.36 L999.513 1208.36 L1000.1 1208.36 L1000.69 1208.36 L1001.27 1208.36 L1001.86 1208.36 L1002.44 1208.36 L1003.03 1208.36 L1003.62 1208.36 L1004.2 1208.36 L1004.79 1208.36 L1005.38 1208.36 L1005.96 1208.36 L1006.55 1208.36 L1007.14 1208.36 L1007.72 1208.36 L1008.31 1208.36 L1008.9 1208.36 L1009.48 1208.36 L1010.07 1208.36 L1010.65 1208.36 L1011.24 1208.36 L1011.83 1208.36 L1012.41 1208.36 L1013 1208.36 L1013.59 1208.36 L1014.17 1208.36 L1014.76 1208.36 L1015.35 1208.36 L1015.93 1208.36 L1016.52 1208.36 L1017.11 1208.36 L1017.69 1208.36 L1018.28 1208.36 L1018.86 1208.36 L1019.45 1208.36 L1020.04 1208.36 L1020.62 1208.36 L1021.21 1208.36 L1021.8 1208.36 L1022.38 1208.36 L1022.97 1208.36 L1023.56 1208.36 L1024.14 1208.36 L1024.73 1208.36 L1025.32 1208.36 L1025.9 1208.36 L1026.49 1208.36 L1027.07 1208.36 L1027.66 1208.36 L1028.25 1208.36 L1028.83 1208.36 L1029.42 1208.36 L1030.01 1208.36 L1030.59 1208.36 L1031.18 1208.36 L1031.77 1208.36 L1032.35 1208.36 L1032.94 1208.36 L1033.52 1208.36 L1034.11 1208.36 L1034.7 1208.36 L1035.28 1208.36 L1035.87 1208.36 L1036.46 1208.36 L1037.04 1208.36 L1037.63 1208.36 L1038.22 1208.36 L1038.8 1208.36 L1039.39 1208.36 L1039.98 1208.36 L1040.56 1208.36 L1041.15 1208.36 L1041.73 1208.36 L1042.32 1208.36 L1042.91 1208.36 L1043.49 1208.36 L1044.08 1208.36 L1044.67 1208.36 L1045.25 1208.36 L1045.84 1208.36 L1046.43 1208.36 L1047.01 1208.36 L1047.6 1208.36 L1048.19 1208.36 L1048.77 1208.36 L1049.36 1208.36 L1049.94 1208.36 L1050.53 1208.36 L1051.12 1208.36 L1051.7 1208.36 L1052.29 1208.36 L1052.88 1208.36 L1053.46 1208.36 L1054.05 1208.36 L1054.64 1208.36 L1055.22 1208.36 L1055.81 1208.36 L1056.39 1208.36 L1056.98 1208.36 L1057.57 1208.36 L1058.15 1208.36 L1058.74 1208.36 L1059.33 1208.36 L1059.91 1208.36 L1060.5 1208.36 L1061.09 1208.36 L1061.67 1208.36 L1062.26 1208.36 L1062.85 1208.36 L1063.43 1208.36 L1064.02 1208.36 L1064.6 1208.36 L1065.19 1208.36 L1065.78 1208.36 L1066.36 1208.36 L1066.95 1208.36 L1067.54 1208.36 L1068.12 1208.36 L1068.71 1208.36 L1069.3 1208.36 L1069.88 1208.36 L1070.47 1208.36 L1071.06 1208.36 L1071.64 1208.36 L1072.23 1208.36 L1072.81 1208.36 L1073.4 1208.36 L1073.99 1208.36 L1074.57 1208.36 L1075.16 1208.36 L1075.75 1208.36 L1076.33 1208.36 L1076.92 1208.36 L1077.51 1208.36 L1078.09 1208.36 L1078.68 1208.36 L1079.26 1208.36 L1079.85 1208.36 L1080.44 1208.36 L1081.02 1208.36 L1081.61 1208.36 L1082.2 1208.36 L1082.78 1208.36 L1083.37 1208.36 L1083.96 1208.36 L1084.54 1208.36 L1085.13 1208.36 L1085.72 1208.36 L1086.3 1208.36 L1086.89 1208.36 L1087.47 1208.36 L1088.06 1208.36 L1088.65 1208.36 L1089.23 1208.36 L1089.82 1208.36 L1090.41 1208.36 L1090.99 1208.36 L1091.58 1208.36 L1092.17 1208.36 L1092.75 1208.36 L1093.34 1208.36 L1093.93 1208.36 L1094.51 1208.36 L1095.1 1208.36 L1095.68 1208.36 L1096.27 1208.36 L1096.86 1208.36 L1097.44 1208.36 L1098.03 1208.36 L1098.62 1208.36 L1099.2 1208.36 L1099.79 1208.36 L1100.38 1208.36 L1100.96 1208.36 L1101.55 1208.36 L1102.14 1208.36 L1102.72 1208.36 L1103.31 1208.36 L1103.89 1208.36 L1104.48 1208.36 L1105.07 1208.36 L1105.65 1208.36 L1106.24 1208.36 L1106.83 1208.36 L1107.41 1208.36 L1108 1208.36 L1108.59 1208.36 L1109.17 1208.36 L1109.76 1208.36 L1110.34 1208.36 L1110.93 1208.36 L1111.52 1208.36 L1112.1 1208.36 L1112.69 1208.36 L1113.28 1208.36 L1113.86 1208.36 L1114.45 1208.36 L1115.04 1208.36 L1115.62 1208.36 L1116.21 1208.36 L1116.8 1208.36 L1117.38 1208.36 L1117.97 1208.36 L1118.55 1208.36 L1119.14 1208.36 L1119.73 1208.36 L1120.31 1208.36 L1120.9 1208.36 L1121.49 1208.36 L1122.07 1208.36 L1122.66 1208.36 L1123.25 1208.36 L1123.83 1208.36 L1124.42 1208.36 L1125.01 1208.36 L1125.59 1208.36 L1126.18 1208.36 L1126.76 1208.36 L1127.35 1208.36 L1127.94 1208.36 L1128.52 1208.36 L1129.11 1208.36 L1129.7 1208.36 L1130.28 1208.36 L1130.87 1208.36 L1131.46 1208.36 L1132.04 1208.36 L1132.63 1208.36 L1133.21 1208.36 L1133.8 1208.36 L1134.39 1208.36 L1134.97 1208.36 L1135.56 1208.36 L1136.15 1208.36 L1136.73 1208.36 L1137.32 1208.36 L1137.91 1208.36 L1138.49 1208.36 L1139.08 1208.36 L1139.67 1208.36 L1140.25 1208.36 L1140.84 1208.36 L1141.42 1208.36 L1142.01 1208.36 L1142.6 1208.36 L1143.18 1208.36 L1143.77 1208.36 L1144.36 1208.36 L1144.94 1208.36 L1145.53 1208.36 L1146.12 1208.36 L1146.7 1208.36 L1147.29 1208.36 L1147.88 1208.36 L1148.46 1208.36 L1149.05 1208.36 L1149.63 1208.36 L1150.22 1208.36 L1150.81 1208.36 L1151.39 1208.36 L1151.98 1208.36 L1152.57 1208.36 L1153.15 1208.36 L1153.74 1208.36 L1154.33 1208.36 L1154.91 1208.36 L1155.5 1208.36 L1156.09 1208.36 L1156.67 1208.36 L1157.26 1208.36 L1157.84 1208.36 L1158.43 1208.36 L1159.02 1208.36 L1159.6 1208.36 L1160.19 1208.36 L1160.78 1208.36 L1161.36 1208.36 L1161.95 1208.36 L1162.54 1208.36 L1163.12 1208.36 L1163.71 1208.36 L1164.29 1208.36 L1164.88 1208.36 L1165.47 1208.36 L1166.05 1208.36 L1166.64 1208.36 L1167.23 1208.36 L1167.81 1208.36 L1168.4 1208.36 L1168.99 1208.36 L1169.57 1208.36 L1170.16 1208.36 L1170.75 1208.36 L1171.33 1208.36 L1171.92 1208.36 L1172.5 1208.36 L1173.09 1208.36 L1173.68 1208.36 L1174.26 1208.36 L1174.85 1208.36 L1175.44 1208.36 L1176.02 1208.36 L1176.61 1208.36 L1177.2 1208.36 L1177.78 1208.36 L1178.37 1208.36 L1178.96 1208.36 L1179.54 1208.36 L1180.13 1208.36 L1180.71 1208.36 L1181.3 1208.36 L1181.89 1208.36 L1182.47 1208.36 L1183.06 1208.36 L1183.65 1208.36 L1184.23 1208.36 L1184.82 1208.36 L1185.41 1208.36 L1185.99 1208.36 L1186.58 1208.36 L1187.16 1208.36 L1187.75 1208.36 L1188.34 1208.36 L1188.92 1208.36 L1189.51 1208.36 L1190.1 1208.36 L1190.68 1208.36 L1191.27 1208.36 L1191.86 1208.36 L1192.44 1208.36 L1193.03 1208.36 L1193.62 1208.36 L1194.2 1208.36 L1194.79 1208.36 L1195.37 1208.36 L1195.96 1208.36 L1196.55 1208.36 L1197.13 1208.36 L1197.72 1208.36 L1198.31 1208.36 L1198.89 1208.36 L1199.48 1208.36 L1200.07 1208.36 L1200.65 1208.36 L1201.24 1208.36 L1201.83 1208.36 L1202.41 1208.36 L1203 1208.36 L1203.58 1208.36 L1204.17 1208.36 L1204.76 1208.36 L1205.34 1208.36 L1205.93 1208.36 L1206.52 1208.36 L1207.1 1208.36 L1207.69 1208.36 L1208.28 1208.36 L1208.86 1208.36 L1209.45 1208.36 L1210.03 1208.36 L1210.62 1208.36 L1211.21 1208.36 L1211.79 1208.36 L1212.38 1208.36 L1212.97 1208.36 L1213.55 1208.36 L1214.14 1208.36 L1214.73 1208.36 L1215.31 1208.36 L1215.9 1208.36 L1216.49 1208.36 L1217.07 1208.36 L1217.66 1208.36 L1218.24 1208.36 L1218.83 1208.36 L1219.42 1208.36 L1220 1208.36 L1220.59 1208.36 L1221.18 1208.36 L1221.76 1208.36 L1222.35 1208.36 L1222.94 1208.36 L1223.52 1208.36 L1224.11 1208.36 L1224.7 1208.36 L1225.28 1208.36 L1225.87 1208.36 L1226.45 1208.36 L1227.04 1208.36 L1227.63 1208.36 L1228.21 1208.36 L1228.8 1208.36 L1229.39 1208.36 L1229.97 1208.36 L1230.56 1208.36 L1231.15 1208.36 L1231.73 1208.36 L1232.32 1208.36 L1232.91 1208.36 L1233.49 1208.36 L1234.08 1208.36 L1234.66 1208.36 L1235.25 1208.36 L1235.84 1208.36 L1236.42 1208.36 L1237.01 1208.36 L1237.6 1208.36 L1238.18 1208.36 L1238.77 1208.36 L1239.36 1208.36 L1239.94 1208.36 L1240.53 1208.36 L1241.11 1208.36 L1241.7 1208.36 L1242.29 1208.36 L1242.87 1208.36 L1243.46 1208.36 L1244.05 1208.36 L1244.63 1208.36 L1245.22 1208.36 L1245.81 1208.36 L1246.39 1208.36 L1246.98 1208.36 L1247.57 1208.36 L1248.15 1208.36 L1248.74 1208.36 L1249.32 1208.36 L1249.91 1208.36 L1250.5 1208.36 L1251.08 1208.36 L1251.67 1208.36 L1252.26 1208.36 L1252.84 1208.36 L1253.43 1208.36 L1254.02 1208.36 L1254.6 1208.36 L1255.19 1208.36 L1255.78 1208.36 L1256.36 1208.36 L1256.95 1208.36 L1257.53 1208.36 L1258.12 1208.36 L1258.71 1208.36 L1259.29 1208.36 L1259.88 1208.36 L1260.47 1208.36 L1261.05 1208.36 L1261.64 1208.36 L1262.23 1208.36 L1262.81 1208.36 L1263.4 1208.36 L1263.98 1208.36 L1264.57 1208.36 L1265.16 1208.36 L1265.74 1208.36 L1266.33 1208.36 L1266.92 1208.36 L1267.5 1208.36 L1268.09 1208.36 L1268.68 1208.36 L1269.26 1208.36 L1269.85 1208.36 L1270.44 1208.36 L1271.02 1208.36 L1271.61 1208.36 L1272.19 1208.36 L1272.78 1208.36 L1273.37 1208.36 L1273.95 1208.36 L1274.54 1208.36 L1275.13 1208.36 L1275.71 1208.36 L1276.3 1208.36 L1276.89 1208.36 L1277.47 1208.36 L1278.06 1208.36 L1278.65 1208.36 L1279.23 1208.36 L1279.82 1208.36 L1280.4 1208.36 L1280.99 1208.36 L1281.58 1208.36 L1282.16 1208.36 L1282.75 1208.36 L1283.34 1208.36 L1283.92 1208.36 L1284.51 1208.36 L1285.1 1208.36 L1285.68 1208.36 L1286.27 1208.36 L1286.86 1208.36 L1287.44 1208.36 L1288.03 1208.36 L1288.61 1208.36 L1289.2 1208.36 L1289.79 1208.36 L1290.37 1208.36 L1290.96 1208.36 L1291.55 1208.36 L1292.13 1208.36 L1292.72 1208.36 L1293.31 1208.36 L1293.89 1208.36 L1294.48 1208.36 L1295.06 1208.36 L1295.65 1208.36 L1296.24 1208.36 L1296.82 1208.36 L1297.41 1208.36 L1298 1208.36 L1298.58 1208.36 L1299.17 1208.36 L1299.76 1208.36 L1300.34 1208.36 L1300.93 1208.36 L1301.52 1208.36 L1302.1 1208.36 L1302.69 1208.36 L1303.27 1208.36 L1303.86 1208.36 L1304.45 1208.36 L1305.03 1208.36 L1305.62 1208.36 L1306.21 1208.36 L1306.79 1208.36 L1307.38 1208.36 L1307.97 1208.36 L1308.55 1208.36 L1309.14 1208.36 L1309.73 1208.36 L1310.31 1208.36 L1310.9 1208.36 L1311.48 1208.36 L1312.07 1208.36 L1312.66 1208.36 L1313.24 1208.36 L1313.83 1208.36 L1314.42 1208.36 L1315 1208.36 L1315.59 1208.36 L1316.18 1208.36 L1316.76 1208.36 L1317.35 1208.36 L1317.93 1208.36 L1318.52 1208.36 L1319.11 1208.36 L1319.69 1208.36 L1320.28 1208.36 L1320.87 1208.36 L1321.45 1208.36 L1322.04 1208.36 L1322.63 1208.36 L1323.21 1208.36 L1323.8 1208.36 L1324.39 1208.36 L1324.97 1208.36 L1325.56 1208.36 L1326.14 1208.36 L1326.73 1208.36 L1327.32 1208.36 L1327.9 1208.36 L1328.49 1208.36 L1329.08 1208.36 L1329.66 1208.36 L1330.25 1208.36 L1330.84 1208.36 L1331.42 1208.36 L1332.01 1208.36 L1332.6 1208.36 L1333.18 1208.36 L1333.77 1208.36 L1334.35 1208.36 L1334.94 1208.36 L1335.53 1208.36 L1336.11 1208.36 L1336.7 1208.36 L1337.29 1208.36 L1337.87 1208.36 L1338.46 1208.36 L1339.05 1208.36 L1339.63 1208.36 L1340.22 1208.36 L1340.8 1208.36 L1341.39 1208.36 L1341.98 1208.36 L1342.56 1208.36 L1343.15 1208.36 L1343.74 1208.36 L1344.32 1208.36 L1344.91 1208.36 L1345.5 1208.36 L1346.08 1208.36 L1346.67 1208.36 L1347.26 1208.36 L1347.84 1208.36 L1348.43 1208.36 L1349.01 1208.36 L1349.6 1208.36 L1350.19 1208.36 L1350.77 1208.36 L1351.36 1208.36 L1351.95 1208.36 L1352.53 1208.36 L1353.12 1208.36 L1353.71 1208.36 L1354.29 1208.36 L1354.88 1208.36 L1355.47 1208.36 L1356.05 1208.36 L1356.64 1208.36 L1357.22 1208.36 L1357.81 1208.36 L1358.4 1208.36 L1358.98 1208.36 L1359.57 1208.36 L1360.16 1208.36 L1360.74 1208.36 L1361.33 1208.36 L1361.92 1208.36 L1362.5 1208.36 L1363.09 1208.36 L1363.68 1208.36 L1364.26 1208.36 L1364.85 1208.36 L1365.43 1208.36 L1366.02 1208.36 L1366.61 1208.36 L1367.19 1208.36 L1367.78 1208.36 L1368.37 1208.36 L1368.95 1208.36 L1369.54 1208.36 L1370.13 1208.36 L1370.71 1208.36 L1371.3 1208.36 L1371.88 1208.36 L1372.47 1208.36 L1373.06 1208.36 L1373.64 1208.36 L1374.23 1208.36 L1374.82 1208.36 L1375.4 1208.36 L1375.99 1208.36 L1376.58 1208.36 L1377.16 1208.36 L1377.75 1208.36 L1378.34 1208.36 L1378.92 1208.36 L1379.51 1208.36 L1380.09 1208.36 L1380.68 1208.36 L1381.27 1208.36 L1381.85 1208.36 L1382.44 1208.36 L1383.03 1208.36 L1383.61 1208.36 L1384.2 1208.36 L1384.79 1208.36 L1385.37 1208.36 L1385.96 1208.36 L1386.55 1208.36 L1387.13 1208.36 L1387.72 1208.36 L1388.3 1208.36 L1388.89 1208.36 L1389.48 1208.36 L1390.06 1208.36 L1390.65 1208.36 L1391.24 1208.36 L1391.82 1208.36 L1392.41 1208.36 L1393 1208.36 L1393.58 1208.36 L1394.17 1208.36 L1394.75 1208.36 L1395.34 1208.36 L1395.93 1208.36 L1396.51 1208.36 L1397.1 1208.36 L1397.69 1208.36 L1398.27 1208.36 L1398.86 1208.36 L1399.45 1208.36 L1400.03 1208.36 L1400.62 1208.36 L1401.21 1208.36 L1401.79 1208.36 L1402.38 1208.36 L1402.96 1208.36 L1403.55 1208.36 L1404.14 1208.36 L1404.72 1208.36 L1405.31 1208.36 L1405.9 1208.36 L1406.48 1208.36 L1407.07 1208.36 L1407.66 1208.36 L1408.24 1208.36 L1408.83 1208.36 L1409.42 1208.36 L1410 1208.36 L1410.59 1208.36 L1411.17 1208.36 L1411.76 1208.36 L1412.35 1208.36 L1412.93 1208.36 L1413.52 1208.36 L1414.11 1208.36 L1414.69 1208.36 L1415.28 1208.36 L1415.87 1208.36 L1416.45 1208.36 L1417.04 1208.36 L1417.63 1208.36 L1418.21 1208.36 L1418.8 1208.36 L1419.38 1208.36 L1419.97 1208.36 L1420.56 1208.36 L1421.14 1208.36 L1421.73 1208.36 L1422.32 1208.36 L1422.9 1208.36 L1423.49 1208.36 L1424.08 1208.36 L1424.66 1208.36 L1425.25 1208.36 L1425.83 1208.36 L1426.42 1208.36 L1427.01 1208.36 L1427.59 1208.36 L1428.18 1208.36 L1428.77 1208.36 L1429.35 1208.36 L1429.94 1208.36 L1430.53 1208.36 L1431.11 1208.36 L1431.7 1208.36 L1432.29 1208.36 L1432.87 1208.36 L1433.46 1208.36 L1434.04 1208.36 L1434.63 1208.36 L1435.22 1208.36 L1435.8 1208.36 L1436.39 1208.36 L1436.98 1208.36 L1437.56 1208.36 L1438.15 1208.36 L1438.74 1208.36 L1439.32 1208.36 L1439.91 1208.36 L1440.5 1208.36 L1441.08 1208.36 L1441.67 1208.36 L1442.25 1208.36 L1442.84 1208.36 L1443.43 1208.36 L1444.01 1208.36 L1444.6 1208.36 L1445.19 1208.36 L1445.77 1208.36 L1446.36 1208.36 L1446.95 1208.36 L1447.53 1208.36 L1448.12 1208.36 L1448.7 1208.36 L1449.29 1208.36 L1449.88 1208.36 L1450.46 1208.36 L1451.05 1208.36 L1451.64 1208.36 L1452.22 1208.36 L1452.81 1208.36 L1453.4 1208.36 L1453.98 1208.36 L1454.57 1208.36 L1455.16 1208.36 L1455.74 1208.36 L1456.33 1208.36 L1456.91 1208.36 L1457.5 1208.36 L1458.09 1208.36 L1458.67 1208.36 L1459.26 1208.36 L1459.85 1208.36 L1460.43 1208.36 L1461.02 1208.36 L1461.61 1208.36 L1462.19 1208.36 L1462.78 1208.36 L1463.37 1208.36 L1463.95 1208.36 L1464.54 1208.36 L1465.12 1208.36 L1465.71 1208.36 L1466.3 1208.36 L1466.88 1208.36 L1467.47 1208.36 L1468.06 1208.36 L1468.64 1208.36 L1469.23 1208.36 L1469.82 1208.36 L1470.4 1208.36 L1470.99 1208.36 L1471.57 1208.36 L1472.16 1208.36 L1472.75 1208.36 L1473.33 1208.36 L1473.92 1208.36 L1474.51 1208.36 L1475.09 1208.36 L1475.68 1208.36 L1476.27 1208.36 L1476.85 1208.36 L1477.44 1208.36 L1478.03 1208.36 L1478.61 1208.36 L1479.2 1208.36 L1479.78 1208.36 L1480.37 1208.36 L1480.96 1208.36 L1481.54 1208.36 L1482.13 1208.36 L1482.72 1208.36 L1483.3 1208.36 L1483.89 1208.36 L1484.48 1208.36 L1485.06 1208.36 L1485.65 1208.36 L1486.24 1208.36 L1486.82 1208.36 L1487.41 1208.36 L1487.99 1208.36 L1488.58 1208.36 L1489.17 1208.36 L1489.75 1208.36 L1490.34 1208.36 L1490.93 1208.36 L1491.51 1208.36 L1492.1 1208.36 L1492.69 1208.36 L1493.27 1208.36 L1493.86 1208.36 L1494.45 1208.36 L1495.03 1208.36 L1495.62 1208.36 L1496.2 1208.36 L1496.79 1208.36 L1497.38 1208.36 L1497.96 1208.36 L1498.55 1208.36 L1499.14 1208.36 L1499.72 1208.36 L1500.31 1208.36 L1500.9 1208.36 L1501.48 1208.36 L1502.07 1208.36 L1502.65 1208.36 L1503.24 1208.36 L1503.83 1208.36 L1504.41 1208.36 L1505 1208.36 L1505.59 1208.36 L1506.17 1208.36 L1506.76 1208.36 L1507.35 1208.36 L1507.93 1208.36 L1508.52 1208.36 L1509.11 1208.36 L1509.69 1208.36 L1510.28 1208.36 L1510.86 1208.36 L1511.45 1208.36 L1512.04 1208.36 L1512.62 1208.36 L1513.21 1208.36 L1513.8 1208.36 L1514.38 1208.36 L1514.97 1208.36 L1515.56 1208.36 L1516.14 1208.36 L1516.73 1208.36 L1517.32 1208.36 L1517.9 1208.36 L1518.49 1208.36 L1519.07 1208.36 L1519.66 1208.36 L1520.25 1208.36 L1520.83 1208.36 L1521.42 1208.36 L1522.01 1208.36 L1522.59 1208.36 L1523.18 1208.36 L1523.77 1208.36 L1524.35 1208.36 L1524.94 1208.36 L1525.52 1208.36 L1526.11 1208.36 L1526.7 1208.36 L1527.28 1208.36 L1527.87 1208.36 L1528.46 1208.36 L1529.04 1208.36 L1529.63 1208.36 L1530.22 1208.36 L1530.8 1208.36 L1531.39 1208.36 L1531.98 1208.36 L1532.56 1208.36 L1533.15 1208.36 L1533.73 1208.36 L1534.32 1208.36 L1534.91 1208.36 L1535.49 1208.36 L1536.08 1208.36 L1536.67 1208.36 L1537.25 1208.36 L1537.84 1208.36 L1538.43 1208.36 L1539.01 1208.36 L1539.6 1208.36 L1540.19 1208.36 L1540.77 1208.36 L1541.36 1208.36 L1541.94 1208.36 L1542.53 1208.36 L1543.12 1208.36 L1543.7 1208.36 L1544.29 1208.36 L1544.88 1208.36 L1545.46 1208.36 L1546.05 1208.36 L1546.64 1208.36 L1547.22 1208.36 L1547.81 1208.36 L1548.4 1208.36 L1548.98 1208.36 L1549.57 1208.36 L1550.15 1208.36 L1550.74 1208.36 L1551.33 1208.36 L1551.91 1208.36 L1552.5 1208.36 L1553.09 1208.36 L1553.67 1208.36 L1554.26 1208.36 L1554.85 1208.36 L1555.43 1208.36 L1556.02 1208.36 L1556.6 1208.36 L1557.19 1208.36 L1557.78 1208.36 L1558.36 1208.36 L1558.95 1208.36 L1559.54 1208.36 L1560.12 1208.36 L1560.71 1208.36 L1561.3 1208.36 L1561.88 1208.36 L1562.47 1208.36 L1563.06 1208.36 L1563.64 1208.36 L1564.23 1208.36 L1564.81 1208.36 L1565.4 1208.36 L1565.99 1208.36 L1566.57 1208.36 L1567.16 1208.36 L1567.75 1208.36 L1568.33 1208.36 L1568.92 1208.36 L1569.51 1208.36 L1570.09 1208.36 L1570.68 1208.36 L1571.27 1208.36 L1571.85 1208.36 L1572.44 1208.36 L1573.02 1208.36 L1573.61 1208.36 L1574.2 1208.36 L1574.78 1208.36 L1575.37 1208.36 L1575.96 1208.36 L1576.54 1208.36 L1577.13 1208.36 L1577.72 1208.36 L1578.3 1208.36 L1578.89 1208.36 L1579.47 1208.36 L1580.06 1208.36 L1580.65 1208.36 L1581.23 1208.36 L1581.82 1208.36 L1582.41 1208.36 L1582.99 1208.36 L1583.58 1208.36 L1584.17 1208.36 L1584.75 1208.36 L1585.34 1208.36 L1585.93 1208.36 L1586.51 1208.36 L1587.1 1208.36 L1587.68 1208.36 L1588.27 1208.36 L1588.86 1208.36 L1589.44 1208.36 L1590.03 1208.36 L1590.62 1208.36 L1591.2 1208.36 L1591.79 1208.36 L1592.38 1208.36 L1592.96 1208.36 L1593.55 1208.36 L1594.14 1208.36 L1594.72 1208.36 L1595.31 1208.36 L1595.89 1208.36 L1596.48 1208.36 L1597.07 1208.36 L1597.65 1208.36 L1598.24 1208.36 L1598.83 1208.36 L1599.41 1208.36 L1600 1208.36 L1600.59 1208.36 L1601.17 1208.36 L1601.76 1208.36 L1602.34 1208.36 L1602.93 1208.36 L1603.52 1208.36 L1604.1 1208.36 L1604.69 1208.36 L1605.28 1208.36 L1605.86 1208.36 L1606.45 1208.36 L1607.04 1208.36 L1607.62 1208.36 L1608.21 1208.36 L1608.8 1208.36 L1609.38 1208.36 L1609.97 1208.36 L1610.55 1208.36 L1611.14 1208.36 L1611.73 1208.36 L1612.31 1208.36 L1612.9 1208.36 L1613.49 1208.36 L1614.07 1208.36 L1614.66 1208.36 L1615.25 1208.36 L1615.83 1208.36 L1616.42 1208.36 L1617.01 1208.36 L1617.59 1208.36 L1618.18 1208.36 L1618.76 1208.36 L1619.35 1208.36 L1619.94 1208.36 L1620.52 1208.36 L1621.11 1208.36 L1621.7 1208.36 L1622.28 1208.36 L1622.87 1208.36 L1623.46 1208.36 L1624.04 1208.36 L1624.63 1208.36 L1625.22 1208.36 L1625.8 1208.36 L1626.39 1208.36 L1626.97 1208.36 L1627.56 1208.36 L1628.15 1208.36 L1628.73 1208.36 L1629.32 1208.36 L1629.91 1208.36 L1630.49 1208.36 L1631.08 1208.36 L1631.67 1208.36 L1632.25 1208.36 L1632.84 1208.36 L1633.42 1208.36 L1634.01 1208.36 L1634.6 1208.36 L1635.18 1208.36 L1635.77 1208.36 L1636.36 1208.36 L1636.94 1208.36 L1637.53 1208.36 L1638.12 1208.36 L1638.7 1208.36 L1639.29 1208.36 L1639.88 1208.36 L1640.46 1208.36 L1641.05 1208.36 L1641.63 1208.36 L1642.22 1208.36 L1642.81 1208.36 L1643.39 1208.36 L1643.98 1208.36 L1644.57 1208.36 L1645.15 1208.36 L1645.74 1208.36 L1646.33 1208.36 L1646.91 1208.36 L1647.5 1208.36 L1648.09 1208.36 L1648.67 1208.36 L1649.26 1208.36 L1649.84 1208.36 L1650.43 1208.36 L1651.02 1208.36 L1651.6 1208.36 L1652.19 1208.36 L1652.78 1208.36 L1653.36 1208.36 L1653.95 1208.36 L1654.54 1208.36 L1655.12 1208.36 L1655.71 1208.36 L1656.29 1208.36 L1656.88 1208.36 L1657.47 1208.36 L1658.05 1208.36 L1658.64 1208.36 L1659.23 1208.36 L1659.81 1208.36 L1660.4 1208.36 L1660.99 1208.36 L1661.57 1208.36 L1662.16 1208.36 L1662.75 1208.36 L1663.33 1208.36 L1663.92 1208.36 L1664.5 1208.36 L1665.09 1208.36 L1665.68 1208.36 L1666.26 1208.36 L1666.85 1208.36 L1667.44 1208.36 L1668.02 1208.36 L1668.61 1208.36 L1669.2 1208.36 L1669.78 1208.36 L1670.37 1208.36 L1670.96 1208.36 L1671.54 1208.36 L1672.13 1208.36 L1672.71 1208.36 L1673.3 1208.36 L1673.89 1208.36 L1674.47 1208.36 L1675.06 1208.36 L1675.65 1208.36 L1676.23 1208.36 L1676.82 1208.36 L1677.41 1208.36 L1677.99 1208.36 L1678.58 1208.36 L1679.17 1208.36 L1679.75 1208.36 L1680.34 1208.36 L1680.92 1208.36 L1681.51 1208.36 L1682.1 1208.36 L1682.68 1208.36 L1683.27 1208.36 L1683.86 1208.36 L1684.44 1208.36 L1685.03 1208.36 L1685.62 1208.36 L1686.2 1208.36 L1686.79 1208.36 L1687.37 1208.36 L1687.96 1208.36 L1688.55 1208.36 L1689.13 1208.36 L1689.72 1208.36 L1690.31 1208.36 L1690.89 1208.36 L1691.48 1208.36 L1692.07 1208.36 L1692.65 1208.36 L1693.24 1208.36 L1693.83 1208.36 L1694.41 1208.36 L1695 1208.36 L1695.58 1208.36 L1696.17 1208.36 L1696.76 1208.36 L1697.34 1208.36 L1697.93 1208.36 L1698.52 1208.36 L1699.1 1208.36 L1699.69 1208.36 L1700.28 1208.36 L1700.86 1208.36 L1701.45 1208.36 L1702.04 1208.36 L1702.62 1208.36 L1703.21 1208.36 L1703.79 1208.36 L1704.38 1208.36 L1704.97 1208.36 L1705.55 1208.36 L1706.14 1208.36 L1706.73 1208.36 L1707.31 1208.36 L1707.9 1208.36 L1708.49 1208.36 L1709.07 1208.36 L1709.66 1208.36 L1710.24 1208.36 L1710.83 1208.36 L1711.42 1208.36 L1712 1208.36 L1712.59 1208.36 L1713.18 1208.36 L1713.76 1208.36 L1714.35 1208.36 L1714.94 1208.36 L1715.52 1208.36 L1716.11 1208.36 L1716.7 1208.36 L1717.28 1208.36 L1717.87 1208.36 L1718.45 1208.36 L1719.04 1208.36 L1719.63 1208.36 L1720.21 1208.36 L1720.8 1208.36 L1721.39 1208.36 L1721.97 1208.36 L1722.56 1208.36 L1723.15 1208.36 L1723.73 1208.36 L1724.32 1208.36 L1724.91 1208.36 L1725.49 1208.36 L1726.08 1208.36 L1726.66 1208.36 L1727.25 1208.36 L1727.84 1208.36 L1728.42 1208.36 L1729.01 1208.36 L1729.6 1208.36 L1730.18 1208.36 L1730.77 1208.36 L1731.36 1208.36 L1731.94 1208.36 L1732.53 1208.36 L1733.11 1208.36 L1733.7 1208.36 L1734.29 1208.36 L1734.87 1208.36 L1735.46 1208.36 L1736.05 1208.36 L1736.63 1208.36 L1737.22 1208.36 L1737.81 1208.36 L1738.39 1208.36 L1738.98 1208.36 L1739.57 1208.36 L1740.15 1208.36 L1740.74 1208.36 L1741.32 1208.36 L1741.91 1208.36 L1742.5 1208.36 L1743.08 1208.36 L1743.67 1208.36 L1744.26 1208.36 L1744.84 1208.36 L1745.43 1208.36 L1746.02 1208.36 L1746.6 1208.36 L1747.19 1208.36 L1747.78 1208.36 L1748.36 1208.36 L1748.95 1208.36 L1749.53 1208.36 L1750.12 1208.36 L1750.71 1208.36 L1751.29 1208.36 L1751.88 1208.36 L1752.47 1208.36 L1753.05 1208.36 L1753.64 1208.36 L1754.23 1208.36 L1754.81 1208.36 L1755.4 1208.36 L1755.99 1208.36 L1756.57 1208.36 L1757.16 1208.36 L1757.74 1208.36 L1758.33 1208.36 L1758.92 1208.36 L1759.5 1208.36 L1760.09 1208.36 L1760.68 1208.36 L1761.26 1208.36 L1761.85 1208.36 L1762.44 1208.36 L1763.02 1208.36 L1763.61 1208.36 L1764.19 1208.36 L1764.78 1208.36 L1765.37 1208.36 L1765.95 1208.36 L1766.54 1208.36 L1767.13 1208.36 L1767.71 1208.36 L1768.3 1208.36 L1768.89 1208.36 L1769.47 1208.36 L1770.06 1208.36 L1770.65 1208.36 L1771.23 1208.36 L1771.82 1208.36 L1772.4 1208.36 L1772.99 1208.36 L1773.58 1208.36 L1774.16 1208.36 L1774.75 1208.36 L1775.34 1208.36 L1775.92 1208.36 L1776.51 1208.36 L1777.1 1208.36 L1777.68 1208.36 L1778.27 1208.36 L1778.86 1208.36 L1779.44 1208.36 L1780.03 1208.36 L1780.61 1208.36 L1781.2 1208.36 L1781.79 1208.36 L1782.37 1208.36 L1782.96 1208.36 L1783.55 1208.36 L1784.13 1208.36 L1784.72 1208.36 L1785.31 1208.36 L1785.89 1208.36 L1786.48 1208.36 L1787.06 1208.36 L1787.65 1208.36 L1788.24 1208.36 L1788.82 1208.36 L1789.41 1208.36 L1790 1208.36 L1790.58 1208.36 L1791.17 1208.36 L1791.76 1208.36 L1792.34 1208.36 L1792.93 1208.36 L1793.52 1208.36 L1794.1 1208.36 L1794.69 1208.36 L1795.27 1208.36 L1795.86 1208.36 L1796.45 1208.36 L1797.03 1208.36 L1797.62 1208.36 L1798.21 1208.36 L1798.79 1208.36 L1799.38 1208.36 L1799.97 1208.36 L1800.55 1208.36 L1801.14 1208.36 L1801.73 1208.36 L1802.31 1208.36 L1802.9 1208.36 L1803.48 1208.36 L1804.07 1208.36 L1804.66 1208.36 L1805.24 1208.36 L1805.83 1208.36 L1806.42 1208.36 L1807 1208.36 L1807.59 1208.36 L1808.18 1208.36 L1808.76 1208.36 L1809.35 1208.36 L1809.94 1208.36 L1810.52 1208.36 L1811.11 1208.36 L1811.69 1208.36 L1812.28 1208.36 L1812.87 1208.36 L1813.45 1208.36 L1814.04 1208.36 L1814.63 1208.36 L1815.21 1208.36 L1815.8 1208.36 L1816.39 1208.36 L1816.97 1208.36 L1817.56 1208.36 L1818.14 1208.36 L1818.73 1208.36 L1819.32 1208.36 L1819.9 1208.36 L1820.49 1208.36 L1821.08 1208.36 L1821.66 1208.36 L1822.25 1208.36 L1822.84 1208.36 L1823.42 1208.36 L1824.01 1208.36 L1824.6 1208.36 L1825.18 1208.36 L1825.77 1208.36 L1826.35 1208.36 L1826.94 1208.36 L1827.53 1208.36 L1828.11 1208.36 L1828.7 1208.36 L1829.29 1208.36 L1829.87 1208.36 L1830.46 1208.36 L1831.05 1208.36 L1831.63 1208.36 L1832.22 1208.36 L1832.81 1208.36 L1833.39 1208.36 L1833.98 1208.36 L1834.56 1208.36 L1835.15 1208.36 L1835.74 1208.36 L1836.32 1208.36 L1836.91 1208.36 L1837.5 1208.36 L1838.08 1208.36 L1838.67 1208.36 L1839.26 1208.36 L1839.84 1208.36 L1840.43 1208.36 L1841.01 1208.36 L1841.6 1208.36 L1842.19 1208.36 L1842.77 1208.36 L1843.36 1208.36 L1843.95 1208.36 L1844.53 1208.36 L1845.12 1208.36 L1845.71 1208.36 L1846.29 1208.36 L1846.88 1208.36 L1847.47 1208.36 L1848.05 1208.36 L1848.64 1208.36 L1849.22 1208.36 L1849.81 1208.36 L1850.4 1208.36 L1850.98 1208.36 L1851.57 1208.36 L1852.16 1208.36 L1852.74 1208.36 L1853.33 1208.36 L1853.92 1208.36 L1854.5 1208.36 L1855.09 1208.36 L1855.68 1208.36 L1856.26 1208.36 L1856.85 1208.36 L1857.43 1208.36 L1858.02 1208.36 L1858.61 1208.36 L1859.19 1208.36 L1859.78 1208.36 L1860.37 1208.36 L1860.95 1208.36 L1861.54 1208.36 L1862.13 1208.36 L1862.71 1208.36 L1863.3 1208.36 L1863.88 1208.36 L1864.47 1208.36 L1865.06 1208.36 L1865.64 1208.36 L1866.23 1208.36 L1866.82 1208.36 L1867.4 1208.36 L1867.99 1208.36 L1868.58 1208.36 L1869.16 1208.36 L1869.75 1208.36 L1870.34 1208.36 L1870.92 1208.36 L1871.51 1208.36 L1872.09 1208.36 L1872.68 1208.36 L1873.27 1208.36 L1873.85 1208.36 L1874.44 1208.36 L1875.03 1208.36 L1875.61 1208.36 L1876.2 1208.36 L1876.79 1208.36 L1877.37 1208.36 L1877.96 1208.36 L1878.55 1208.36 L1879.13 1208.36 L1879.72 1208.36 L1880.3 1208.36 L1880.89 1208.36 L1881.48 1208.36 L1882.06 1208.36 L1882.65 1208.36 L1883.24 1208.36 L1883.82 1208.36 L1884.41 1208.36 L1885 1208.36 L1885.58 1208.36 L1886.17 1208.36 L1886.76 1208.36 L1887.34 1208.36 L1887.93 1208.36 L1888.51 1208.36 L1889.1 1208.36 L1889.69 1208.36 L1890.27 1208.36 L1890.86 1208.36 L1891.45 1208.36 L1892.03 1208.36 L1892.62 1208.36 L1893.21 1208.36 L1893.79 1208.36 L1894.38 1208.36 L1894.96 1208.36 L1895.55 1208.36 L1896.14 1208.36 L1896.72 1208.36 L1897.31 1208.36 L1897.9 1208.36 L1898.48 1208.36 L1899.07 1208.36 L1899.66 1208.36 L1900.24 1208.36 L1900.83 1208.36 L1901.42 1208.36 L1902 1208.36 L1902.59 1208.36 L1903.17 1208.36 L1903.76 1208.36 L1904.35 1208.36 L1904.93 1208.36 L1905.52 1208.36 L1906.11 1208.36 L1906.69 1208.36 L1907.28 1208.36 L1907.87 1208.36 L1908.45 1208.36 L1909.04 1208.36 L1909.63 1208.36 L1910.21 1208.36 L1910.8 1208.36 L1911.38 1208.36 L1911.97 1208.36 L1912.56 1208.36 L1913.14 1208.36 L1913.73 1208.36 L1914.32 1208.36 L1914.9 1208.36 L1915.49 1208.36 L1916.08 1208.36 L1916.66 1208.36 L1917.25 1208.36 L1917.83 1208.36 L1918.42 1208.36 L1919.01 1208.36 L1919.59 1208.36 L1920.18 1208.36 L1920.77 1208.36 L1921.35 1208.36 L1921.94 1208.36 L1922.53 1208.36 L1923.11 1208.36 L1923.7 1208.36 L1924.29 1208.36 L1924.87 1208.36 L1925.46 1208.36 L1926.04 1208.36 L1926.63 1208.36 L1927.22 1208.36 L1927.8 1208.36 L1928.39 1208.36 L1928.98 1208.36 L1929.56 1208.36 L1930.15 1208.36 L1930.74 1208.36 L1931.32 1208.36 L1931.91 1208.36 L1932.5 1208.36 L1933.08 1208.36 L1933.67 1208.36 L1934.25 1208.36 L1934.84 1208.36 L1935.43 1208.36 L1936.01 1208.36 L1936.6 1208.36 L1937.19 1208.36 L1937.77 1208.36 L1938.36 1208.36 L1938.95 1208.36 L1939.53 1208.36 L1940.12 1208.36 L1940.71 1208.36 L1941.29 1208.36 L1941.88 1208.36 L1942.46 1208.36 L1943.05 1208.36 L1943.64 1208.36 L1944.22 1208.36 L1944.81 1208.36 L1945.4 1208.36 L1945.98 1208.36 L1946.57 1208.36 L1947.16 1208.36 L1947.74 1208.36 L1948.33 1208.36 L1948.91 1208.36 L1949.5 1208.36 L1950.09 1208.36 L1950.67 1208.36 L1951.26 1208.36 L1951.85 1208.36 L1952.43 1208.36 L1953.02 1208.36 L1953.61 1208.36 L1954.19 1208.36 L1954.78 1208.36 L1955.37 1208.36 L1955.95 1208.36 L1956.54 1208.36 L1957.12 1208.36 L1957.71 1208.36 L1958.3 1208.36 L1958.88 1208.36 L1959.47 1208.36 L1960.06 1208.36 L1960.64 1208.36 L1961.23 1208.36 L1961.82 1208.36 L1962.4 1208.36 L1962.99 1208.36 L1963.58 1208.36 L1964.16 1208.36 L1964.75 1208.36 L1965.33 1208.36 L1965.92 1208.36 L1966.51 1208.36 L1967.09 1208.36 L1967.68 1208.36 L1968.27 1208.36 L1968.85 1208.36 L1969.44 1208.36 L1970.03 1208.36 L1970.61 1208.36 L1971.2 1208.36 L1971.78 1208.36 L1972.37 1208.36 L1972.96 1208.36 L1973.54 1208.36 L1974.13 1208.36 L1974.72 1208.36 L1975.3 1208.36 L1975.89 1208.36 L1976.48 1208.36 L1977.06 1208.36 L1977.65 1208.36 L1978.24 1208.36 L1978.82 1208.36 L1979.41 1208.36 L1979.99 1208.36 L1980.58 1208.36 L1981.17 1208.36 L1981.75 1208.36 L1982.34 1208.36 L1982.93 1208.36 L1983.51 1208.36 L1984.1 1208.36 L1984.69 1208.36 L1985.27 1208.36 L1985.86 1208.36 L1986.45 1208.36 L1987.03 1208.36 L1987.62 1208.36 L1988.2 1208.36 L1988.79 1208.36 L1989.38 1208.36 L1989.96 1208.36 L1990.55 1208.36 L1991.14 1208.36 L1991.72 1208.36 L1992.31 1208.36 L1992.9 1208.36 L1993.48 1208.36 L1994.07 1208.36 L1994.65 1208.36 L1995.24 1208.36 L1995.83 1208.36 L1996.41 1208.36 L1997 1208.36 L1997.59 1208.36 L1998.17 1208.36 L1998.76 1208.36 L1999.35 1208.36 L1999.93 1208.36 L2000.52 1208.36 L2001.11 1208.36 L2001.69 1208.36 L2002.28 1208.36 L2002.86 1208.36 L2003.45 1208.36 L2004.04 1208.36 L2004.62 1208.36 L2005.21 1208.36 L2005.8 1208.36 L2006.38 1208.36 L2006.97 1208.36 L2007.56 1208.36 L2008.14 1208.36 L2008.73 1208.36 L2009.32 1208.36 L2009.9 1208.36 L2010.49 1208.36 L2011.07 1208.36 L2011.66 1208.36 L2012.25 1208.36 L2012.83 1208.36 L2013.42 1208.36 L2014.01 1208.36 L2014.59 1208.36 L2015.18 1208.36 L2015.77 1208.36 L2016.35 1208.36 L2016.94 1208.36 L2017.53 1208.36 L2018.11 1208.36 L2018.7 1208.36 L2019.28 1208.36 L2019.87 1208.36 L2020.46 1208.36 L2021.04 1208.36 L2021.63 1208.36 L2022.22 1208.36 L2022.8 1208.36 L2023.39 1208.36 L2023.98 1208.36 L2024.56 1208.36 L2025.15 1208.36 L2025.73 1208.36 L2026.32 1208.36 L2026.91 1208.36 L2027.49 1208.36 L2028.08 1208.36 L2028.67 1208.36 L2029.25 1208.36 L2029.84 1208.36 L2030.43 1208.36 L2031.01 1208.36 L2031.6 1208.36 L2032.19 1208.36 L2032.77 1208.36 L2033.36 1208.36 L2033.94 1208.36 L2034.53 1208.36 L2035.12 1208.36 L2035.7 1208.36 L2036.29 1208.36 L2036.88 1208.36 L2037.46 1208.36 L2038.05 1208.36 L2038.64 1208.36 L2039.22 1208.36 L2039.81 1208.36 L2040.4 1208.36 L2040.98 1208.36 L2041.57 1208.36 L2042.15 1208.36 L2042.74 1208.36 L2043.33 1208.36 L2043.91 1208.36 L2044.5 1208.36 L2045.09 1208.36 L2045.67 1208.36 L2046.26 1208.36 L2046.85 1208.36 L2047.43 1208.36 L2048.02 1208.36 L2048.6 1208.36 L2049.19 1208.36 L2049.78 1208.36 L2050.36 1208.36 L2050.95 1208.36 L2051.54 1208.36 L2052.12 1208.36 L2052.71 1208.36 L2053.3 1208.36 L2053.88 1208.36 L2054.47 1208.36 L2055.06 1208.36 L2055.64 1208.36 L2056.23 1208.36 L2056.81 1208.36 L2057.4 1208.36 L2057.99 1208.36 L2058.57 1208.36 L2059.16 1208.36 L2059.75 1208.36 L2060.33 1208.36 L2060.92 1208.36 L2061.51 1208.36 L2062.09 1208.36 L2062.68 1208.36 L2063.27 1208.36 L2063.85 1208.36 L2064.44 1208.36 L2065.02 1208.36 L2065.61 1208.36 L2066.2 1208.36 L2066.78 1208.36 L2067.37 1208.36 L2067.96 1208.36 L2068.54 1208.36 L2069.13 1208.36 L2069.72 1208.36 L2070.3 1208.36 L2070.89 1208.36 L2071.48 1208.36 L2072.06 1208.36 L2072.65 1208.36 L2073.23 1208.36 L2073.82 1208.36 L2074.41 1208.36 L2074.99 1208.36 L2075.58 1208.36 L2076.17 1208.36 L2076.75 1208.36 L2077.34 1208.36 L2077.93 1208.36 L2078.51 1208.36 L2079.1 1208.36 L2079.68 1208.36 L2080.27 1208.36 L2080.86 1208.36 L2081.44 1208.36 L2082.03 1208.36 L2082.62 1208.36 L2083.2 1208.36 L2083.79 1208.36 L2084.38 1208.36 L2084.96 1208.36 L2085.55 1208.36 L2086.14 1208.36 L2086.72 1208.36 L2087.31 1208.36 L2087.89 1208.36 L2088.48 1208.36 L2089.07 1208.36 L2089.65 1208.36 L2090.24 1208.36 L2090.83 1208.36 L2091.41 1208.36 L2092 1208.36 L2092.59 1208.36 L2093.17 1208.36 L2093.76 1208.36 L2094.35 1208.36 L2094.93 1208.36 L2095.52 1208.36 L2096.1 1208.36 L2096.69 1208.36 L2097.28 1208.36 L2097.86 1208.36 L2098.45 1208.36 L2099.04 1208.36 L2099.62 1208.36 L2100.21 1208.36 L2100.8 1208.36 L2101.38 1208.36 L2101.97 1208.36 L2102.55 1208.36 L2103.14 1208.36 L2103.73 1208.36 L2104.31 1208.36 L2104.9 1208.36 L2105.49 1208.36 L2106.07 1208.36 L2106.66 1208.36 L2107.25 1208.36 L2107.83 1208.36 L2108.42 1208.36 L2109.01 1208.36 L2109.59 1208.36 L2110.18 1208.36 L2110.76 1208.36 L2111.35 1208.36 L2111.94 1208.36 L2112.52 1208.36 L2113.11 1208.36 L2113.7 1208.36 L2114.28 1208.36 L2114.87 1208.36 L2115.46 1208.36 L2116.04 1208.36 L2116.63 1208.36 L2117.22 1208.36 L2117.8 1208.36 L2118.39 1208.36 L2118.97 1208.36 L2119.56 1208.36 L2120.15 1208.36 L2120.73 1208.36 L2121.32 1208.36 L2121.91 1208.36 L2122.49 1208.36 L2123.08 1208.36 L2123.67 1208.36 L2124.25 1208.36 L2124.84 1208.36 L2125.42 1208.36 L2126.01 1208.36 L2126.6 1208.36 L2127.18 1208.36 L2127.77 1208.36 L2128.36 1208.36 L2128.94 1208.36 L2129.53 1208.36 L2130.12 1208.36 L2130.7 1208.36 L2131.29 1208.36 L2131.88 1208.36 L2132.46 1208.36 L2133.05 1208.36 L2133.63 1208.36 L2134.22 1208.36 L2134.81 1208.36 L2135.39 1208.36 L2135.98 1208.36 L2136.57 1208.36 L2137.15 1208.36 L2137.74 1208.36 L2138.33 1208.36 L2138.91 1208.36 L2139.5 1208.36 L2140.09 1208.36 L2140.67 1208.36 L2141.26 1208.36 L2141.84 1208.36 L2142.43 1208.36 L2143.02 1208.36 L2143.6 1208.36 L2144.19 1208.36 L2144.78 1208.36 L2145.36 1208.36 L2145.95 1208.36 L2146.54 1208.36 L2147.12 1208.36 L2147.71 1208.36 L2148.3 1208.36 L2148.88 1208.36 L2149.47 1208.36 L2150.05 1208.36 L2150.64 1208.36 L2151.23 1208.36 L2151.81 1208.36 L2152.4 1208.36 L2152.99 1208.36 L2153.57 1208.36 L2154.16 1208.36 L2154.75 1208.36 L2155.33 1208.36 L2155.92 1208.36 L2156.5 1208.36 L2157.09 1208.36 L2157.68 1208.36 L2158.26 1208.36 L2158.26 1207.54 L2157.68 1207.54 L2157.09 1207.54 L2156.5 1207.54 L2155.92 1207.54 L2155.33 1207.54 L2154.75 1207.54 L2154.16 1207.54 L2153.57 1207.54 L2152.99 1207.54 L2152.4 1207.54 L2151.81 1207.54 L2151.23 1207.54 L2150.64 1207.54 L2150.05 1207.54 L2149.47 1207.54 L2148.88 1207.54 L2148.3 1207.54 L2147.71 1207.54 L2147.12 1207.54 L2146.54 1207.54 L2145.95 1207.54 L2145.36 1207.54 L2144.78 1207.54 L2144.19 1207.54 L2143.6 1207.54 L2143.02 1207.54 L2142.43 1207.54 L2141.84 1207.54 L2141.26 1207.54 L2140.67 1207.54 L2140.09 1207.54 L2139.5 1207.54 L2138.91 1207.54 L2138.33 1207.54 L2137.74 1207.54 L2137.15 1207.54 L2136.57 1207.54 L2135.98 1207.54 L2135.39 1207.54 L2134.81 1207.54 L2134.22 1207.54 L2133.63 1207.54 L2133.05 1207.54 L2132.46 1207.54 L2131.88 1207.54 L2131.29 1207.54 L2130.7 1207.54 L2130.12 1207.54 L2129.53 1207.54 L2128.94 1207.54 L2128.36 1207.54 L2127.77 1207.54 L2127.18 1207.54 L2126.6 1207.54 L2126.01 1207.54 L2125.42 1207.54 L2124.84 1207.54 L2124.25 1207.54 L2123.67 1207.54 L2123.08 1207.54 L2122.49 1207.54 L2121.91 1207.54 L2121.32 1207.54 L2120.73 1207.54 L2120.15 1207.54 L2119.56 1207.54 L2118.97 1207.54 L2118.39 1207.54 L2117.8 1207.54 L2117.22 1207.54 L2116.63 1207.54 L2116.04 1207.54 L2115.46 1207.54 L2114.87 1207.54 L2114.28 1207.54 L2113.7 1207.54 L2113.11 1207.54 L2112.52 1207.54 L2111.94 1207.54 L2111.35 1207.54 L2110.76 1207.54 L2110.18 1207.54 L2109.59 1207.54 L2109.01 1207.54 L2108.42 1207.54 L2107.83 1207.54 L2107.25 1207.54 L2106.66 1207.54 L2106.07 1207.54 L2105.49 1207.54 L2104.9 1207.54 L2104.31 1207.54 L2103.73 1207.54 L2103.14 1207.54 L2102.55 1207.54 L2101.97 1207.54 L2101.38 1207.54 L2100.8 1207.54 L2100.21 1207.54 L2099.62 1207.54 L2099.04 1207.54 L2098.45 1207.54 L2097.86 1207.54 L2097.28 1207.54 L2096.69 1207.54 L2096.1 1207.54 L2095.52 1207.54 L2094.93 1207.54 L2094.35 1207.54 L2093.76 1207.54 L2093.17 1207.54 L2092.59 1207.54 L2092 1207.54 L2091.41 1207.54 L2090.83 1207.54 L2090.24 1207.54 L2089.65 1207.54 L2089.07 1207.54 L2088.48 1207.54 L2087.89 1207.54 L2087.31 1207.54 L2086.72 1207.54 L2086.14 1207.54 L2085.55 1207.54 L2084.96 1207.54 L2084.38 1207.54 L2083.79 1207.54 L2083.2 1207.54 L2082.62 1207.54 L2082.03 1207.54 L2081.44 1207.54 L2080.86 1207.54 L2080.27 1207.54 L2079.68 1207.54 L2079.1 1207.54 L2078.51 1207.54 L2077.93 1207.54 L2077.34 1207.54 L2076.75 1207.54 L2076.17 1207.54 L2075.58 1207.54 L2074.99 1207.54 L2074.41 1207.54 L2073.82 1207.54 L2073.23 1207.54 L2072.65 1207.54 L2072.06 1207.54 L2071.48 1207.54 L2070.89 1207.54 L2070.3 1207.54 L2069.72 1207.54 L2069.13 1207.54 L2068.54 1207.54 L2067.96 1207.54 L2067.37 1207.54 L2066.78 1207.54 L2066.2 1207.54 L2065.61 1207.54 L2065.02 1207.54 L2064.44 1207.54 L2063.85 1207.54 L2063.27 1207.54 L2062.68 1207.54 L2062.09 1207.54 L2061.51 1207.54 L2060.92 1207.54 L2060.33 1207.54 L2059.75 1207.54 L2059.16 1207.54 L2058.57 1207.54 L2057.99 1207.54 L2057.4 1207.54 L2056.81 1207.54 L2056.23 1207.54 L2055.64 1207.54 L2055.06 1207.54 L2054.47 1207.54 L2053.88 1207.54 L2053.3 1207.54 L2052.71 1207.54 L2052.12 1207.54 L2051.54 1207.54 L2050.95 1207.54 L2050.36 1207.54 L2049.78 1207.54 L2049.19 1207.54 L2048.6 1207.54 L2048.02 1207.54 L2047.43 1207.54 L2046.85 1207.54 L2046.26 1207.54 L2045.67 1207.54 L2045.09 1207.54 L2044.5 1207.54 L2043.91 1207.54 L2043.33 1207.54 L2042.74 1207.54 L2042.15 1207.54 L2041.57 1207.54 L2040.98 1207.54 L2040.4 1207.54 L2039.81 1207.54 L2039.22 1207.54 L2038.64 1207.54 L2038.05 1207.54 L2037.46 1207.54 L2036.88 1207.54 L2036.29 1207.54 L2035.7 1207.54 L2035.12 1207.54 L2034.53 1207.54 L2033.94 1207.54 L2033.36 1207.54 L2032.77 1207.54 L2032.19 1207.54 L2031.6 1207.54 L2031.01 1207.54 L2030.43 1207.54 L2029.84 1207.54 L2029.25 1207.54 L2028.67 1207.54 L2028.08 1207.54 L2027.49 1207.54 L2026.91 1207.54 L2026.32 1207.54 L2025.73 1207.54 L2025.15 1207.54 L2024.56 1207.54 L2023.98 1207.54 L2023.39 1207.54 L2022.8 1207.54 L2022.22 1207.54 L2021.63 1207.54 L2021.04 1207.54 L2020.46 1207.54 L2019.87 1207.54 L2019.28 1207.54 L2018.7 1207.54 L2018.11 1207.54 L2017.53 1207.54 L2016.94 1207.54 L2016.35 1207.54 L2015.77 1207.54 L2015.18 1207.54 L2014.59 1207.54 L2014.01 1207.54 L2013.42 1207.54 L2012.83 1207.54 L2012.25 1207.54 L2011.66 1207.54 L2011.07 1207.54 L2010.49 1207.54 L2009.9 1207.54 L2009.32 1207.54 L2008.73 1207.54 L2008.14 1207.54 L2007.56 1207.54 L2006.97 1207.54 L2006.38 1207.54 L2005.8 1207.54 L2005.21 1207.54 L2004.62 1207.54 L2004.04 1207.54 L2003.45 1207.54 L2002.86 1207.54 L2002.28 1207.54 L2001.69 1207.54 L2001.11 1207.54 L2000.52 1207.54 L1999.93 1207.54 L1999.35 1207.54 L1998.76 1207.54 L1998.17 1207.54 L1997.59 1207.54 L1997 1207.54 L1996.41 1207.54 L1995.83 1207.54 L1995.24 1207.54 L1994.65 1207.54 L1994.07 1207.54 L1993.48 1207.54 L1992.9 1207.54 L1992.31 1207.54 L1991.72 1207.54 L1991.14 1207.54 L1990.55 1207.54 L1989.96 1207.54 L1989.38 1207.54 L1988.79 1207.54 L1988.2 1207.54 L1987.62 1207.54 L1987.03 1207.54 L1986.45 1207.54 L1985.86 1207.54 L1985.27 1207.54 L1984.69 1207.54 L1984.1 1207.54 L1983.51 1207.54 L1982.93 1207.54 L1982.34 1207.54 L1981.75 1207.54 L1981.17 1207.54 L1980.58 1207.54 L1979.99 1207.54 L1979.41 1207.54 L1978.82 1207.54 L1978.24 1207.54 L1977.65 1207.54 L1977.06 1207.54 L1976.48 1207.54 L1975.89 1207.54 L1975.3 1207.54 L1974.72 1207.54 L1974.13 1207.54 L1973.54 1207.54 L1972.96 1207.54 L1972.37 1207.54 L1971.78 1207.54 L1971.2 1207.54 L1970.61 1207.54 L1970.03 1207.54 L1969.44 1207.54 L1968.85 1207.54 L1968.27 1207.54 L1967.68 1207.54 L1967.09 1207.54 L1966.51 1207.54 L1965.92 1207.54 L1965.33 1207.54 L1964.75 1207.54 L1964.16 1207.54 L1963.58 1207.54 L1962.99 1207.54 L1962.4 1207.54 L1961.82 1207.54 L1961.23 1207.54 L1960.64 1207.54 L1960.06 1207.54 L1959.47 1207.54 L1958.88 1207.54 L1958.3 1207.54 L1957.71 1207.54 L1957.12 1207.54 L1956.54 1207.54 L1955.95 1207.54 L1955.37 1207.54 L1954.78 1207.54 L1954.19 1207.54 L1953.61 1207.54 L1953.02 1207.54 L1952.43 1207.54 L1951.85 1207.54 L1951.26 1207.54 L1950.67 1207.54 L1950.09 1207.54 L1949.5 1207.54 L1948.91 1207.54 L1948.33 1207.54 L1947.74 1207.54 L1947.16 1207.54 L1946.57 1207.54 L1945.98 1207.54 L1945.4 1207.54 L1944.81 1207.54 L1944.22 1207.54 L1943.64 1207.54 L1943.05 1207.54 L1942.46 1207.54 L1941.88 1207.54 L1941.29 1207.54 L1940.71 1207.54 L1940.12 1207.54 L1939.53 1207.54 L1938.95 1207.54 L1938.36 1207.54 L1937.77 1207.54 L1937.19 1207.54 L1936.6 1207.54 L1936.01 1207.54 L1935.43 1207.54 L1934.84 1207.54 L1934.25 1207.54 L1933.67 1207.54 L1933.08 1207.54 L1932.5 1207.54 L1931.91 1207.54 L1931.32 1207.54 L1930.74 1207.54 L1930.15 1207.54 L1929.56 1207.54 L1928.98 1207.54 L1928.39 1207.54 L1927.8 1207.54 L1927.22 1207.54 L1926.63 1207.54 L1926.04 1207.54 L1925.46 1207.54 L1924.87 1207.54 L1924.29 1207.54 L1923.7 1207.54 L1923.11 1207.54 L1922.53 1207.54 L1921.94 1207.54 L1921.35 1207.54 L1920.77 1207.54 L1920.18 1207.54 L1919.59 1207.54 L1919.01 1207.54 L1918.42 1207.54 L1917.83 1207.54 L1917.25 1207.54 L1916.66 1207.54 L1916.08 1207.54 L1915.49 1207.54 L1914.9 1207.54 L1914.32 1207.54 L1913.73 1207.54 L1913.14 1207.54 L1912.56 1207.54 L1911.97 1207.54 L1911.38 1207.54 L1910.8 1207.54 L1910.21 1207.54 L1909.63 1207.54 L1909.04 1207.54 L1908.45 1207.54 L1907.87 1207.54 L1907.28 1207.54 L1906.69 1207.54 L1906.11 1207.54 L1905.52 1207.54 L1904.93 1207.54 L1904.35 1207.54 L1903.76 1207.54 L1903.17 1207.54 L1902.59 1207.54 L1902 1207.54 L1901.42 1207.54 L1900.83 1207.54 L1900.24 1207.54 L1899.66 1207.54 L1899.07 1207.54 L1898.48 1207.54 L1897.9 1207.54 L1897.31 1207.54 L1896.72 1207.54 L1896.14 1207.54 L1895.55 1207.54 L1894.96 1207.54 L1894.38 1207.54 L1893.79 1207.54 L1893.21 1207.54 L1892.62 1207.54 L1892.03 1207.54 L1891.45 1207.54 L1890.86 1207.54 L1890.27 1207.54 L1889.69 1207.54 L1889.1 1207.54 L1888.51 1207.54 L1887.93 1207.54 L1887.34 1207.54 L1886.76 1207.54 L1886.17 1207.54 L1885.58 1207.54 L1885 1207.54 L1884.41 1207.54 L1883.82 1207.54 L1883.24 1207.54 L1882.65 1207.54 L1882.06 1207.54 L1881.48 1207.54 L1880.89 1207.54 L1880.3 1207.54 L1879.72 1207.54 L1879.13 1207.54 L1878.55 1207.54 L1877.96 1207.54 L1877.37 1207.54 L1876.79 1207.54 L1876.2 1207.54 L1875.61 1207.54 L1875.03 1207.54 L1874.44 1207.54 L1873.85 1207.54 L1873.27 1207.54 L1872.68 1207.54 L1872.09 1207.54 L1871.51 1207.54 L1870.92 1207.54 L1870.34 1207.54 L1869.75 1207.54 L1869.16 1207.54 L1868.58 1207.54 L1867.99 1207.54 L1867.4 1207.54 L1866.82 1207.54 L1866.23 1207.54 L1865.64 1207.54 L1865.06 1207.54 L1864.47 1207.54 L1863.88 1207.54 L1863.3 1207.54 L1862.71 1207.54 L1862.13 1207.54 L1861.54 1207.54 L1860.95 1207.54 L1860.37 1207.54 L1859.78 1207.54 L1859.19 1207.54 L1858.61 1207.54 L1858.02 1207.54 L1857.43 1207.54 L1856.85 1207.54 L1856.26 1207.54 L1855.68 1207.54 L1855.09 1207.54 L1854.5 1207.54 L1853.92 1207.54 L1853.33 1207.54 L1852.74 1207.54 L1852.16 1207.54 L1851.57 1207.54 L1850.98 1207.54 L1850.4 1207.54 L1849.81 1207.54 L1849.22 1207.54 L1848.64 1207.54 L1848.05 1207.54 L1847.47 1207.54 L1846.88 1207.54 L1846.29 1207.54 L1845.71 1207.54 L1845.12 1207.54 L1844.53 1207.54 L1843.95 1207.54 L1843.36 1207.54 L1842.77 1207.54 L1842.19 1207.54 L1841.6 1207.54 L1841.01 1207.54 L1840.43 1207.54 L1839.84 1207.54 L1839.26 1207.54 L1838.67 1207.54 L1838.08 1207.54 L1837.5 1207.54 L1836.91 1207.54 L1836.32 1207.54 L1835.74 1207.54 L1835.15 1207.54 L1834.56 1207.54 L1833.98 1207.54 L1833.39 1207.54 L1832.81 1207.54 L1832.22 1207.54 L1831.63 1207.54 L1831.05 1207.54 L1830.46 1207.54 L1829.87 1207.54 L1829.29 1207.54 L1828.7 1207.54 L1828.11 1207.54 L1827.53 1207.54 L1826.94 1207.54 L1826.35 1207.54 L1825.77 1207.54 L1825.18 1207.54 L1824.6 1207.54 L1824.01 1207.54 L1823.42 1207.54 L1822.84 1207.54 L1822.25 1207.54 L1821.66 1207.54 L1821.08 1207.54 L1820.49 1207.54 L1819.9 1207.54 L1819.32 1207.54 L1818.73 1207.54 L1818.14 1207.54 L1817.56 1207.54 L1816.97 1207.54 L1816.39 1207.54 L1815.8 1207.54 L1815.21 1207.54 L1814.63 1207.54 L1814.04 1207.54 L1813.45 1207.54 L1812.87 1207.54 L1812.28 1207.54 L1811.69 1207.54 L1811.11 1207.54 L1810.52 1207.54 L1809.94 1207.54 L1809.35 1207.54 L1808.76 1207.54 L1808.18 1207.54 L1807.59 1207.54 L1807 1207.54 L1806.42 1207.54 L1805.83 1207.54 L1805.24 1207.54 L1804.66 1207.54 L1804.07 1207.54 L1803.48 1207.54 L1802.9 1207.54 L1802.31 1207.54 L1801.73 1207.54 L1801.14 1207.54 L1800.55 1207.54 L1799.97 1207.54 L1799.38 1207.54 L1798.79 1207.54 L1798.21 1207.54 L1797.62 1207.54 L1797.03 1207.54 L1796.45 1207.54 L1795.86 1207.54 L1795.27 1207.54 L1794.69 1207.54 L1794.1 1207.54 L1793.52 1207.54 L1792.93 1207.54 L1792.34 1207.54 L1791.76 1207.54 L1791.17 1207.54 L1790.58 1207.54 L1790 1207.54 L1789.41 1207.54 L1788.82 1207.54 L1788.24 1207.54 L1787.65 1207.54 L1787.06 1207.54 L1786.48 1207.54 L1785.89 1207.54 L1785.31 1207.54 L1784.72 1207.54 L1784.13 1207.54 L1783.55 1207.54 L1782.96 1207.54 L1782.37 1207.54 L1781.79 1207.54 L1781.2 1207.54 L1780.61 1207.54 L1780.03 1207.54 L1779.44 1207.54 L1778.86 1207.54 L1778.27 1207.54 L1777.68 1207.54 L1777.1 1207.54 L1776.51 1207.54 L1775.92 1207.54 L1775.34 1207.54 L1774.75 1207.54 L1774.16 1207.54 L1773.58 1207.54 L1772.99 1207.54 L1772.4 1207.54 L1771.82 1207.54 L1771.23 1207.54 L1770.65 1207.54 L1770.06 1207.54 L1769.47 1207.54 L1768.89 1207.54 L1768.3 1207.54 L1767.71 1207.54 L1767.13 1207.54 L1766.54 1207.54 L1765.95 1207.54 L1765.37 1207.54 L1764.78 1207.54 L1764.19 1207.54 L1763.61 1207.54 L1763.02 1207.54 L1762.44 1207.54 L1761.85 1207.54 L1761.26 1207.54 L1760.68 1207.54 L1760.09 1207.54 L1759.5 1207.54 L1758.92 1207.54 L1758.33 1207.54 L1757.74 1207.54 L1757.16 1207.54 L1756.57 1207.54 L1755.99 1207.54 L1755.4 1207.54 L1754.81 1207.54 L1754.23 1207.54 L1753.64 1207.54 L1753.05 1207.54 L1752.47 1207.54 L1751.88 1207.54 L1751.29 1207.54 L1750.71 1207.54 L1750.12 1207.54 L1749.53 1207.54 L1748.95 1207.54 L1748.36 1207.54 L1747.78 1207.54 L1747.19 1207.54 L1746.6 1207.54 L1746.02 1207.54 L1745.43 1207.54 L1744.84 1207.54 L1744.26 1207.54 L1743.67 1207.54 L1743.08 1207.54 L1742.5 1207.54 L1741.91 1207.54 L1741.32 1207.54 L1740.74 1207.54 L1740.15 1207.54 L1739.57 1207.54 L1738.98 1207.54 L1738.39 1207.54 L1737.81 1207.54 L1737.22 1207.54 L1736.63 1207.54 L1736.05 1207.54 L1735.46 1207.54 L1734.87 1207.54 L1734.29 1207.54 L1733.7 1207.54 L1733.11 1207.54 L1732.53 1207.54 L1731.94 1207.54 L1731.36 1207.54 L1730.77 1207.54 L1730.18 1207.54 L1729.6 1207.54 L1729.01 1207.54 L1728.42 1207.54 L1727.84 1207.54 L1727.25 1207.54 L1726.66 1207.54 L1726.08 1207.54 L1725.49 1207.54 L1724.91 1207.54 L1724.32 1207.54 L1723.73 1207.54 L1723.15 1207.54 L1722.56 1207.54 L1721.97 1207.54 L1721.39 1207.54 L1720.8 1207.54 L1720.21 1207.54 L1719.63 1207.54 L1719.04 1207.54 L1718.45 1207.54 L1717.87 1207.54 L1717.28 1207.54 L1716.7 1207.54 L1716.11 1207.54 L1715.52 1207.54 L1714.94 1207.54 L1714.35 1207.54 L1713.76 1207.54 L1713.18 1207.54 L1712.59 1207.54 L1712 1207.54 L1711.42 1207.54 L1710.83 1207.54 L1710.24 1207.54 L1709.66 1207.54 L1709.07 1207.54 L1708.49 1207.54 L1707.9 1207.54 L1707.31 1207.54 L1706.73 1207.54 L1706.14 1207.54 L1705.55 1207.54 L1704.97 1207.54 L1704.38 1207.54 L1703.79 1207.54 L1703.21 1207.54 L1702.62 1207.54 L1702.04 1207.54 L1701.45 1207.54 L1700.86 1207.54 L1700.28 1207.54 L1699.69 1207.54 L1699.1 1207.54 L1698.52 1207.54 L1697.93 1207.54 L1697.34 1207.54 L1696.76 1207.54 L1696.17 1207.54 L1695.58 1207.54 L1695 1207.54 L1694.41 1207.54 L1693.83 1207.54 L1693.24 1207.54 L1692.65 1207.54 L1692.07 1207.54 L1691.48 1207.54 L1690.89 1207.54 L1690.31 1207.54 L1689.72 1207.54 L1689.13 1207.54 L1688.55 1207.54 L1687.96 1207.54 L1687.37 1207.54 L1686.79 1207.54 L1686.2 1207.54 L1685.62 1207.54 L1685.03 1207.54 L1684.44 1207.54 L1683.86 1207.54 L1683.27 1207.54 L1682.68 1207.54 L1682.1 1207.54 L1681.51 1207.54 L1680.92 1207.54 L1680.34 1207.54 L1679.75 1207.54 L1679.17 1207.54 L1678.58 1207.54 L1677.99 1207.54 L1677.41 1207.54 L1676.82 1207.54 L1676.23 1207.54 L1675.65 1207.54 L1675.06 1207.54 L1674.47 1207.54 L1673.89 1207.54 L1673.3 1207.54 L1672.71 1207.54 L1672.13 1207.54 L1671.54 1207.54 L1670.96 1207.54 L1670.37 1207.54 L1669.78 1207.54 L1669.2 1207.54 L1668.61 1207.54 L1668.02 1207.54 L1667.44 1207.54 L1666.85 1207.54 L1666.26 1207.54 L1665.68 1207.54 L1665.09 1207.54 L1664.5 1207.54 L1663.92 1207.54 L1663.33 1207.54 L1662.75 1207.54 L1662.16 1207.54 L1661.57 1207.54 L1660.99 1207.54 L1660.4 1207.54 L1659.81 1207.54 L1659.23 1207.54 L1658.64 1207.54 L1658.05 1207.54 L1657.47 1207.54 L1656.88 1207.54 L1656.29 1207.54 L1655.71 1207.54 L1655.12 1207.54 L1654.54 1207.54 L1653.95 1207.54 L1653.36 1207.54 L1652.78 1207.54 L1652.19 1207.54 L1651.6 1207.54 L1651.02 1207.54 L1650.43 1207.54 L1649.84 1207.54 L1649.26 1207.54 L1648.67 1207.54 L1648.09 1207.54 L1647.5 1207.54 L1646.91 1207.54 L1646.33 1207.54 L1645.74 1207.54 L1645.15 1207.54 L1644.57 1207.54 L1643.98 1207.54 L1643.39 1207.54 L1642.81 1207.54 L1642.22 1207.54 L1641.63 1207.54 L1641.05 1207.54 L1640.46 1207.54 L1639.88 1207.54 L1639.29 1207.54 L1638.7 1207.54 L1638.12 1207.54 L1637.53 1207.54 L1636.94 1207.54 L1636.36 1207.54 L1635.77 1207.54 L1635.18 1207.54 L1634.6 1207.54 L1634.01 1207.54 L1633.42 1207.54 L1632.84 1207.54 L1632.25 1207.54 L1631.67 1207.54 L1631.08 1207.54 L1630.49 1207.54 L1629.91 1207.54 L1629.32 1207.54 L1628.73 1207.54 L1628.15 1207.54 L1627.56 1207.54 L1626.97 1207.54 L1626.39 1207.54 L1625.8 1207.54 L1625.22 1207.54 L1624.63 1207.54 L1624.04 1207.54 L1623.46 1207.54 L1622.87 1207.54 L1622.28 1207.54 L1621.7 1207.54 L1621.11 1207.54 L1620.52 1207.54 L1619.94 1207.54 L1619.35 1207.54 L1618.76 1207.54 L1618.18 1207.54 L1617.59 1207.54 L1617.01 1207.54 L1616.42 1207.54 L1615.83 1207.54 L1615.25 1207.54 L1614.66 1207.54 L1614.07 1207.54 L1613.49 1207.54 L1612.9 1207.54 L1612.31 1207.54 L1611.73 1207.54 L1611.14 1207.54 L1610.55 1207.54 L1609.97 1207.54 L1609.38 1207.54 L1608.8 1207.54 L1608.21 1207.54 L1607.62 1207.54 L1607.04 1207.54 L1606.45 1207.54 L1605.86 1207.54 L1605.28 1207.54 L1604.69 1207.54 L1604.1 1207.54 L1603.52 1207.54 L1602.93 1207.54 L1602.34 1207.54 L1601.76 1207.54 L1601.17 1207.54 L1600.59 1207.54 L1600 1207.54 L1599.41 1207.54 L1598.83 1207.54 L1598.24 1207.54 L1597.65 1207.54 L1597.07 1207.54 L1596.48 1207.54 L1595.89 1207.54 L1595.31 1207.54 L1594.72 1207.54 L1594.14 1207.54 L1593.55 1207.54 L1592.96 1207.54 L1592.38 1207.54 L1591.79 1207.54 L1591.2 1207.54 L1590.62 1207.54 L1590.03 1207.54 L1589.44 1207.54 L1588.86 1207.54 L1588.27 1207.54 L1587.68 1207.54 L1587.1 1207.54 L1586.51 1207.54 L1585.93 1207.54 L1585.34 1207.54 L1584.75 1207.54 L1584.17 1207.54 L1583.58 1207.54 L1582.99 1207.54 L1582.41 1207.54 L1581.82 1207.54 L1581.23 1207.54 L1580.65 1207.54 L1580.06 1207.54 L1579.47 1207.54 L1578.89 1207.54 L1578.3 1207.54 L1577.72 1207.54 L1577.13 1207.54 L1576.54 1207.54 L1575.96 1207.54 L1575.37 1207.54 L1574.78 1207.54 L1574.2 1207.54 L1573.61 1207.54 L1573.02 1207.54 L1572.44 1207.54 L1571.85 1207.54 L1571.27 1207.54 L1570.68 1207.54 L1570.09 1207.54 L1569.51 1207.54 L1568.92 1207.54 L1568.33 1207.54 L1567.75 1207.54 L1567.16 1207.54 L1566.57 1207.54 L1565.99 1207.54 L1565.4 1207.54 L1564.81 1207.54 L1564.23 1207.54 L1563.64 1207.54 L1563.06 1207.54 L1562.47 1207.54 L1561.88 1207.54 L1561.3 1207.54 L1560.71 1207.54 L1560.12 1207.54 L1559.54 1207.54 L1558.95 1207.54 L1558.36 1207.54 L1557.78 1207.54 L1557.19 1207.54 L1556.6 1207.54 L1556.02 1207.54 L1555.43 1207.54 L1554.85 1207.54 L1554.26 1207.54 L1553.67 1207.54 L1553.09 1207.54 L1552.5 1207.54 L1551.91 1207.54 L1551.33 1207.54 L1550.74 1207.54 L1550.15 1207.54 L1549.57 1207.54 L1548.98 1207.54 L1548.4 1207.54 L1547.81 1207.54 L1547.22 1207.54 L1546.64 1207.54 L1546.05 1207.54 L1545.46 1207.54 L1544.88 1207.54 L1544.29 1207.54 L1543.7 1207.54 L1543.12 1207.54 L1542.53 1207.54 L1541.94 1207.54 L1541.36 1207.54 L1540.77 1207.54 L1540.19 1207.54 L1539.6 1207.54 L1539.01 1207.54 L1538.43 1207.54 L1537.84 1207.54 L1537.25 1207.54 L1536.67 1207.54 L1536.08 1207.54 L1535.49 1207.54 L1534.91 1207.54 L1534.32 1207.54 L1533.73 1207.54 L1533.15 1207.54 L1532.56 1207.54 L1531.98 1207.54 L1531.39 1207.54 L1530.8 1207.54 L1530.22 1207.54 L1529.63 1207.54 L1529.04 1207.54 L1528.46 1207.54 L1527.87 1207.54 L1527.28 1207.54 L1526.7 1207.54 L1526.11 1207.54 L1525.52 1207.54 L1524.94 1207.54 L1524.35 1207.54 L1523.77 1207.54 L1523.18 1207.54 L1522.59 1207.54 L1522.01 1207.54 L1521.42 1207.54 L1520.83 1207.54 L1520.25 1207.54 L1519.66 1207.54 L1519.07 1207.54 L1518.49 1207.54 L1517.9 1207.54 L1517.32 1207.54 L1516.73 1207.54 L1516.14 1207.54 L1515.56 1207.54 L1514.97 1207.54 L1514.38 1207.54 L1513.8 1207.54 L1513.21 1207.54 L1512.62 1207.54 L1512.04 1207.54 L1511.45 1207.54 L1510.86 1207.54 L1510.28 1207.54 L1509.69 1207.54 L1509.11 1207.54 L1508.52 1207.54 L1507.93 1207.54 L1507.35 1207.54 L1506.76 1207.54 L1506.17 1207.54 L1505.59 1207.54 L1505 1207.54 L1504.41 1207.54 L1503.83 1207.54 L1503.24 1207.54 L1502.65 1207.54 L1502.07 1207.54 L1501.48 1207.54 L1500.9 1207.54 L1500.31 1207.54 L1499.72 1207.54 L1499.14 1207.54 L1498.55 1207.54 L1497.96 1207.54 L1497.38 1207.54 L1496.79 1207.54 L1496.2 1207.54 L1495.62 1207.54 L1495.03 1207.54 L1494.45 1207.54 L1493.86 1207.54 L1493.27 1207.54 L1492.69 1207.54 L1492.1 1207.54 L1491.51 1207.54 L1490.93 1207.54 L1490.34 1207.54 L1489.75 1207.54 L1489.17 1207.54 L1488.58 1207.54 L1487.99 1207.54 L1487.41 1207.54 L1486.82 1207.54 L1486.24 1207.54 L1485.65 1207.54 L1485.06 1207.54 L1484.48 1207.54 L1483.89 1207.54 L1483.3 1207.54 L1482.72 1207.54 L1482.13 1207.54 L1481.54 1207.54 L1480.96 1207.54 L1480.37 1207.54 L1479.78 1207.54 L1479.2 1207.54 L1478.61 1207.54 L1478.03 1207.54 L1477.44 1207.54 L1476.85 1207.54 L1476.27 1207.54 L1475.68 1207.54 L1475.09 1207.54 L1474.51 1207.54 L1473.92 1207.54 L1473.33 1207.54 L1472.75 1207.54 L1472.16 1207.54 L1471.57 1207.54 L1470.99 1207.54 L1470.4 1207.54 L1469.82 1207.54 L1469.23 1207.54 L1468.64 1207.54 L1468.06 1207.54 L1467.47 1207.54 L1466.88 1207.54 L1466.3 1207.54 L1465.71 1207.54 L1465.12 1207.54 L1464.54 1207.54 L1463.95 1207.54 L1463.37 1207.54 L1462.78 1207.54 L1462.19 1207.54 L1461.61 1207.54 L1461.02 1207.54 L1460.43 1207.54 L1459.85 1207.54 L1459.26 1207.54 L1458.67 1207.54 L1458.09 1207.54 L1457.5 1207.54 L1456.91 1207.54 L1456.33 1207.54 L1455.74 1207.54 L1455.16 1207.54 L1454.57 1207.54 L1453.98 1207.54 L1453.4 1207.54 L1452.81 1207.54 L1452.22 1207.54 L1451.64 1207.54 L1451.05 1207.54 L1450.46 1207.54 L1449.88 1207.54 L1449.29 1207.54 L1448.7 1207.54 L1448.12 1207.54 L1447.53 1207.54 L1446.95 1207.54 L1446.36 1207.54 L1445.77 1207.54 L1445.19 1207.54 L1444.6 1207.54 L1444.01 1207.54 L1443.43 1207.54 L1442.84 1207.54 L1442.25 1207.54 L1441.67 1207.54 L1441.08 1207.54 L1440.5 1207.54 L1439.91 1207.54 L1439.32 1207.54 L1438.74 1207.54 L1438.15 1207.54 L1437.56 1207.54 L1436.98 1207.54 L1436.39 1207.54 L1435.8 1207.54 L1435.22 1207.54 L1434.63 1207.54 L1434.04 1207.54 L1433.46 1207.54 L1432.87 1207.54 L1432.29 1207.54 L1431.7 1207.54 L1431.11 1207.54 L1430.53 1207.54 L1429.94 1207.54 L1429.35 1207.54 L1428.77 1207.54 L1428.18 1207.54 L1427.59 1207.54 L1427.01 1207.54 L1426.42 1207.54 L1425.83 1207.54 L1425.25 1207.54 L1424.66 1207.54 L1424.08 1207.54 L1423.49 1207.54 L1422.9 1207.54 L1422.32 1207.54 L1421.73 1207.54 L1421.14 1207.54 L1420.56 1207.54 L1419.97 1207.54 L1419.38 1207.54 L1418.8 1207.54 L1418.21 1207.54 L1417.63 1207.54 L1417.04 1207.54 L1416.45 1207.54 L1415.87 1207.54 L1415.28 1207.54 L1414.69 1207.54 L1414.11 1207.54 L1413.52 1207.54 L1412.93 1207.54 L1412.35 1207.54 L1411.76 1207.54 L1411.17 1207.54 L1410.59 1207.54 L1410 1207.54 L1409.42 1207.54 L1408.83 1207.54 L1408.24 1207.54 L1407.66 1207.54 L1407.07 1207.54 L1406.48 1207.54 L1405.9 1207.54 L1405.31 1207.54 L1404.72 1207.54 L1404.14 1207.54 L1403.55 1207.54 L1402.96 1207.54 L1402.38 1207.54 L1401.79 1207.54 L1401.21 1207.54 L1400.62 1207.54 L1400.03 1207.54 L1399.45 1207.54 L1398.86 1207.54 L1398.27 1207.54 L1397.69 1207.54 L1397.1 1207.54 L1396.51 1207.54 L1395.93 1207.54 L1395.34 1207.54 L1394.75 1207.54 L1394.17 1207.54 L1393.58 1207.54 L1393 1207.54 L1392.41 1207.54 L1391.82 1207.54 L1391.24 1207.54 L1390.65 1207.54 L1390.06 1207.54 L1389.48 1207.54 L1388.89 1207.54 L1388.3 1207.54 L1387.72 1207.54 L1387.13 1207.54 L1386.55 1207.54 L1385.96 1207.54 L1385.37 1207.54 L1384.79 1207.54 L1384.2 1207.54 L1383.61 1207.54 L1383.03 1207.54 L1382.44 1207.54 L1381.85 1207.54 L1381.27 1207.54 L1380.68 1207.54 L1380.09 1207.54 L1379.51 1207.54 L1378.92 1207.54 L1378.34 1207.54 L1377.75 1207.54 L1377.16 1207.54 L1376.58 1207.54 L1375.99 1207.54 L1375.4 1207.54 L1374.82 1207.54 L1374.23 1207.54 L1373.64 1207.54 L1373.06 1207.54 L1372.47 1207.54 L1371.88 1207.54 L1371.3 1207.54 L1370.71 1207.54 L1370.13 1207.54 L1369.54 1207.54 L1368.95 1207.54 L1368.37 1207.54 L1367.78 1207.54 L1367.19 1207.54 L1366.61 1207.54 L1366.02 1207.54 L1365.43 1207.54 L1364.85 1207.54 L1364.26 1207.54 L1363.68 1207.54 L1363.09 1207.54 L1362.5 1207.54 L1361.92 1207.54 L1361.33 1207.54 L1360.74 1207.54 L1360.16 1207.54 L1359.57 1207.54 L1358.98 1207.54 L1358.4 1207.54 L1357.81 1207.54 L1357.22 1207.54 L1356.64 1207.54 L1356.05 1207.54 L1355.47 1207.54 L1354.88 1207.54 L1354.29 1207.54 L1353.71 1207.54 L1353.12 1207.54 L1352.53 1207.54 L1351.95 1207.54 L1351.36 1207.54 L1350.77 1207.54 L1350.19 1207.54 L1349.6 1207.54 L1349.01 1207.54 L1348.43 1207.54 L1347.84 1207.54 L1347.26 1207.54 L1346.67 1207.54 L1346.08 1207.54 L1345.5 1207.54 L1344.91 1207.54 L1344.32 1207.54 L1343.74 1207.54 L1343.15 1207.54 L1342.56 1207.54 L1341.98 1207.54 L1341.39 1207.54 L1340.8 1207.54 L1340.22 1207.54 L1339.63 1207.54 L1339.05 1207.54 L1338.46 1207.54 L1337.87 1207.54 L1337.29 1207.54 L1336.7 1207.54 L1336.11 1207.54 L1335.53 1207.54 L1334.94 1207.54 L1334.35 1207.54 L1333.77 1207.54 L1333.18 1207.54 L1332.6 1207.54 L1332.01 1207.54 L1331.42 1207.54 L1330.84 1207.54 L1330.25 1207.54 L1329.66 1207.54 L1329.08 1207.54 L1328.49 1207.54 L1327.9 1207.54 L1327.32 1207.54 L1326.73 1207.54 L1326.14 1207.54 L1325.56 1207.54 L1324.97 1207.54 L1324.39 1207.54 L1323.8 1207.54 L1323.21 1207.54 L1322.63 1207.54 L1322.04 1207.54 L1321.45 1207.54 L1320.87 1207.54 L1320.28 1207.54 L1319.69 1207.54 L1319.11 1207.54 L1318.52 1207.54 L1317.93 1207.54 L1317.35 1207.54 L1316.76 1207.54 L1316.18 1207.54 L1315.59 1207.54 L1315 1207.54 L1314.42 1207.54 L1313.83 1207.54 L1313.24 1207.54 L1312.66 1207.54 L1312.07 1207.54 L1311.48 1207.54 L1310.9 1207.54 L1310.31 1207.54 L1309.73 1207.54 L1309.14 1207.54 L1308.55 1207.54 L1307.97 1207.54 L1307.38 1207.54 L1306.79 1207.54 L1306.21 1207.54 L1305.62 1207.54 L1305.03 1207.54 L1304.45 1207.54 L1303.86 1207.54 L1303.27 1207.54 L1302.69 1207.54 L1302.1 1207.54 L1301.52 1207.54 L1300.93 1207.54 L1300.34 1207.54 L1299.76 1207.54 L1299.17 1207.54 L1298.58 1207.54 L1298 1207.54 L1297.41 1207.54 L1296.82 1207.54 L1296.24 1207.54 L1295.65 1207.54 L1295.06 1207.54 L1294.48 1207.54 L1293.89 1207.54 L1293.31 1207.54 L1292.72 1207.54 L1292.13 1207.54 L1291.55 1207.54 L1290.96 1207.54 L1290.37 1207.54 L1289.79 1207.54 L1289.2 1207.54 L1288.61 1207.54 L1288.03 1207.54 L1287.44 1207.54 L1286.86 1207.54 L1286.27 1207.54 L1285.68 1207.54 L1285.1 1207.54 L1284.51 1207.54 L1283.92 1207.54 L1283.34 1207.54 L1282.75 1207.54 L1282.16 1207.54 L1281.58 1207.54 L1280.99 1207.54 L1280.4 1207.54 L1279.82 1207.54 L1279.23 1207.54 L1278.65 1207.54 L1278.06 1207.54 L1277.47 1207.54 L1276.89 1207.54 L1276.3 1207.54 L1275.71 1207.54 L1275.13 1207.54 L1274.54 1207.54 L1273.95 1207.54 L1273.37 1207.54 L1272.78 1207.54 L1272.19 1207.54 L1271.61 1207.54 L1271.02 1207.54 L1270.44 1207.54 L1269.85 1207.54 L1269.26 1207.54 L1268.68 1207.54 L1268.09 1207.54 L1267.5 1207.54 L1266.92 1207.54 L1266.33 1207.54 L1265.74 1207.54 L1265.16 1207.54 L1264.57 1207.54 L1263.98 1207.54 L1263.4 1207.54 L1262.81 1207.54 L1262.23 1207.54 L1261.64 1207.54 L1261.05 1207.54 L1260.47 1207.54 L1259.88 1207.54 L1259.29 1207.54 L1258.71 1207.54 L1258.12 1207.54 L1257.53 1207.54 L1256.95 1207.54 L1256.36 1207.54 L1255.78 1207.54 L1255.19 1207.54 L1254.6 1207.54 L1254.02 1207.54 L1253.43 1207.54 L1252.84 1207.54 L1252.26 1207.54 L1251.67 1207.54 L1251.08 1207.54 L1250.5 1207.54 L1249.91 1207.54 L1249.32 1207.54 L1248.74 1207.54 L1248.15 1207.54 L1247.57 1207.54 L1246.98 1207.54 L1246.39 1207.54 L1245.81 1207.54 L1245.22 1207.54 L1244.63 1207.54 L1244.05 1207.54 L1243.46 1207.54 L1242.87 1207.54 L1242.29 1207.54 L1241.7 1207.54 L1241.11 1207.54 L1240.53 1207.54 L1239.94 1207.54 L1239.36 1207.54 L1238.77 1207.54 L1238.18 1207.54 L1237.6 1207.54 L1237.01 1207.54 L1236.42 1207.54 L1235.84 1207.54 L1235.25 1207.54 L1234.66 1207.54 L1234.08 1207.54 L1233.49 1207.54 L1232.91 1207.54 L1232.32 1207.54 L1231.73 1207.54 L1231.15 1207.54 L1230.56 1207.54 L1229.97 1207.54 L1229.39 1207.54 L1228.8 1207.54 L1228.21 1207.54 L1227.63 1207.54 L1227.04 1207.54 L1226.45 1207.54 L1225.87 1207.54 L1225.28 1207.54 L1224.7 1207.54 L1224.11 1207.54 L1223.52 1207.54 L1222.94 1207.54 L1222.35 1207.54 L1221.76 1207.54 L1221.18 1207.54 L1220.59 1207.54 L1220 1207.54 L1219.42 1207.54 L1218.83 1207.54 L1218.24 1207.54 L1217.66 1207.54 L1217.07 1207.54 L1216.49 1207.54 L1215.9 1207.54 L1215.31 1207.54 L1214.73 1207.54 L1214.14 1207.54 L1213.55 1207.54 L1212.97 1207.54 L1212.38 1207.54 L1211.79 1207.54 L1211.21 1207.54 L1210.62 1207.54 L1210.03 1207.54 L1209.45 1207.54 L1208.86 1207.54 L1208.28 1207.54 L1207.69 1207.54 L1207.1 1207.54 L1206.52 1207.54 L1205.93 1207.54 L1205.34 1207.54 L1204.76 1207.54 L1204.17 1207.54 L1203.58 1207.54 L1203 1207.54 L1202.41 1207.54 L1201.83 1207.54 L1201.24 1207.54 L1200.65 1207.54 L1200.07 1207.54 L1199.48 1207.54 L1198.89 1207.54 L1198.31 1207.54 L1197.72 1207.54 L1197.13 1207.54 L1196.55 1207.54 L1195.96 1207.54 L1195.37 1207.54 L1194.79 1207.54 L1194.2 1207.54 L1193.62 1207.54 L1193.03 1207.54 L1192.44 1207.54 L1191.86 1207.54 L1191.27 1207.54 L1190.68 1207.54 L1190.1 1207.54 L1189.51 1207.54 L1188.92 1207.54 L1188.34 1207.54 L1187.75 1207.54 L1187.16 1207.54 L1186.58 1207.54 L1185.99 1207.54 L1185.41 1207.54 L1184.82 1207.54 L1184.23 1207.54 L1183.65 1207.54 L1183.06 1207.54 L1182.47 1207.54 L1181.89 1207.54 L1181.3 1207.54 L1180.71 1207.54 L1180.13 1207.54 L1179.54 1207.54 L1178.96 1207.54 L1178.37 1207.54 L1177.78 1207.54 L1177.2 1207.54 L1176.61 1207.54 L1176.02 1207.54 L1175.44 1207.54 L1174.85 1207.54 L1174.26 1207.54 L1173.68 1207.54 L1173.09 1207.54 L1172.5 1207.54 L1171.92 1207.54 L1171.33 1207.54 L1170.75 1207.54 L1170.16 1207.54 L1169.57 1207.54 L1168.99 1207.54 L1168.4 1207.54 L1167.81 1207.54 L1167.23 1207.54 L1166.64 1207.54 L1166.05 1207.54 L1165.47 1207.54 L1164.88 1207.54 L1164.29 1207.54 L1163.71 1207.54 L1163.12 1207.54 L1162.54 1207.54 L1161.95 1207.54 L1161.36 1207.54 L1160.78 1207.54 L1160.19 1207.54 L1159.6 1207.54 L1159.02 1207.54 L1158.43 1207.54 L1157.84 1207.54 L1157.26 1207.54 L1156.67 1207.54 L1156.09 1207.54 L1155.5 1207.54 L1154.91 1207.54 L1154.33 1207.54 L1153.74 1207.54 L1153.15 1207.54 L1152.57 1207.54 L1151.98 1207.54 L1151.39 1207.54 L1150.81 1207.54 L1150.22 1207.54 L1149.63 1207.54 L1149.05 1207.54 L1148.46 1207.54 L1147.88 1207.54 L1147.29 1207.54 L1146.7 1207.54 L1146.12 1207.54 L1145.53 1207.54 L1144.94 1207.54 L1144.36 1207.54 L1143.77 1207.54 L1143.18 1207.54 L1142.6 1207.54 L1142.01 1207.54 L1141.42 1207.54 L1140.84 1207.54 L1140.25 1207.54 L1139.67 1207.54 L1139.08 1207.54 L1138.49 1207.54 L1137.91 1207.54 L1137.32 1207.54 L1136.73 1207.54 L1136.15 1207.54 L1135.56 1207.54 L1134.97 1207.54 L1134.39 1207.54 L1133.8 1207.54 L1133.21 1207.54 L1132.63 1207.54 L1132.04 1207.54 L1131.46 1207.54 L1130.87 1207.54 L1130.28 1207.54 L1129.7 1207.54 L1129.11 1207.54 L1128.52 1207.54 L1127.94 1207.54 L1127.35 1207.54 L1126.76 1207.54 L1126.18 1207.54 L1125.59 1207.54 L1125.01 1207.54 L1124.42 1207.54 L1123.83 1207.54 L1123.25 1207.54 L1122.66 1207.54 L1122.07 1207.54 L1121.49 1207.54 L1120.9 1207.54 L1120.31 1207.54 L1119.73 1207.54 L1119.14 1207.54 L1118.55 1207.54 L1117.97 1207.54 L1117.38 1207.54 L1116.8 1207.54 L1116.21 1207.54 L1115.62 1207.54 L1115.04 1207.54 L1114.45 1207.54 L1113.86 1207.54 L1113.28 1207.54 L1112.69 1207.54 L1112.1 1207.54 L1111.52 1207.54 L1110.93 1207.54 L1110.34 1207.54 L1109.76 1207.54 L1109.17 1207.54 L1108.59 1207.54 L1108 1207.54 L1107.41 1207.54 L1106.83 1207.54 L1106.24 1207.54 L1105.65 1207.54 L1105.07 1207.54 L1104.48 1207.54 L1103.89 1207.54 L1103.31 1207.54 L1102.72 1207.54 L1102.14 1207.54 L1101.55 1207.54 L1100.96 1207.54 L1100.38 1207.54 L1099.79 1207.54 L1099.2 1207.54 L1098.62 1207.54 L1098.03 1207.54 L1097.44 1207.54 L1096.86 1207.54 L1096.27 1207.54 L1095.68 1207.54 L1095.1 1207.54 L1094.51 1207.54 L1093.93 1207.54 L1093.34 1207.54 L1092.75 1207.54 L1092.17 1207.54 L1091.58 1207.54 L1090.99 1207.54 L1090.41 1207.54 L1089.82 1207.54 L1089.23 1207.54 L1088.65 1207.54 L1088.06 1207.54 L1087.47 1207.54 L1086.89 1207.54 L1086.3 1207.54 L1085.72 1207.54 L1085.13 1207.54 L1084.54 1207.54 L1083.96 1207.54 L1083.37 1207.54 L1082.78 1207.54 L1082.2 1207.54 L1081.61 1207.54 L1081.02 1207.54 L1080.44 1207.54 L1079.85 1207.54 L1079.26 1207.54 L1078.68 1207.54 L1078.09 1207.54 L1077.51 1207.54 L1076.92 1207.54 L1076.33 1207.54 L1075.75 1207.54 L1075.16 1207.54 L1074.57 1207.54 L1073.99 1207.54 L1073.4 1207.54 L1072.81 1207.54 L1072.23 1207.54 L1071.64 1207.54 L1071.06 1207.54 L1070.47 1207.54 L1069.88 1207.54 L1069.3 1207.54 L1068.71 1207.54 L1068.12 1207.54 L1067.54 1207.54 L1066.95 1207.54 L1066.36 1207.54 L1065.78 1207.54 L1065.19 1207.54 L1064.6 1207.54 L1064.02 1207.54 L1063.43 1207.54 L1062.85 1207.54 L1062.26 1207.54 L1061.67 1207.54 L1061.09 1207.54 L1060.5 1207.54 L1059.91 1207.54 L1059.33 1207.54 L1058.74 1207.54 L1058.15 1207.54 L1057.57 1207.54 L1056.98 1207.54 L1056.39 1207.54 L1055.81 1207.54 L1055.22 1207.54 L1054.64 1207.54 L1054.05 1207.54 L1053.46 1207.54 L1052.88 1207.54 L1052.29 1207.54 L1051.7 1207.54 L1051.12 1207.54 L1050.53 1207.54 L1049.94 1207.54 L1049.36 1207.54 L1048.77 1207.54 L1048.19 1207.54 L1047.6 1207.54 L1047.01 1207.54 L1046.43 1207.54 L1045.84 1207.54 L1045.25 1207.54 L1044.67 1207.54 L1044.08 1207.54 L1043.49 1207.54 L1042.91 1207.54 L1042.32 1207.54 L1041.73 1207.54 L1041.15 1207.54 L1040.56 1207.54 L1039.98 1207.54 L1039.39 1207.54 L1038.8 1207.54 L1038.22 1207.54 L1037.63 1207.54 L1037.04 1207.54 L1036.46 1207.54 L1035.87 1207.54 L1035.28 1207.54 L1034.7 1207.54 L1034.11 1207.54 L1033.52 1207.54 L1032.94 1207.54 L1032.35 1207.54 L1031.77 1207.54 L1031.18 1207.54 L1030.59 1207.54 L1030.01 1207.54 L1029.42 1207.54 L1028.83 1207.54 L1028.25 1207.54 L1027.66 1207.54 L1027.07 1207.54 L1026.49 1207.54 L1025.9 1207.54 L1025.32 1207.54 L1024.73 1207.54 L1024.14 1207.54 L1023.56 1207.54 L1022.97 1207.54 L1022.38 1207.54 L1021.8 1207.54 L1021.21 1207.54 L1020.62 1207.54 L1020.04 1207.54 L1019.45 1207.54 L1018.86 1207.54 L1018.28 1207.54 L1017.69 1207.54 L1017.11 1207.54 L1016.52 1207.54 L1015.93 1207.54 L1015.35 1207.54 L1014.76 1207.54 L1014.17 1207.54 L1013.59 1207.54 L1013 1207.54 L1012.41 1207.54 L1011.83 1207.54 L1011.24 1207.54 L1010.65 1207.54 L1010.07 1207.54 L1009.48 1207.54 L1008.9 1207.54 L1008.31 1207.54 L1007.72 1207.54 L1007.14 1207.54 L1006.55 1207.54 L1005.96 1207.54 L1005.38 1207.54 L1004.79 1207.54 L1004.2 1207.54 L1003.62 1207.54 L1003.03 1207.54 L1002.44 1207.54 L1001.86 1207.54 L1001.27 1207.54 L1000.69 1207.54 L1000.1 1207.54 L999.513 1207.54 L998.926 1207.54 L998.34 1207.54 L997.754 1207.54 L997.167 1207.54 L996.581 1207.54 L995.994 1207.54 L995.408 1207.54 L994.822 1207.54 L994.235 1207.54 L993.649 1207.54 L993.062 1207.54 L992.476 1207.54 L991.889 1207.54 L991.303 1207.54 L990.717 1207.54 L990.13 1207.54 L989.544 1207.54 L988.957 1207.54 L988.371 1207.54 L987.785 1207.54 L987.198 1207.54 L986.612 1207.54 L986.025 1207.54  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.95 986.612,1207.95 987.198,1207.95 987.785,1207.95 988.371,1207.95 988.957,1207.95 989.544,1207.95 990.13,1207.95 990.717,1207.95 991.303,1207.95 991.889,1207.95 992.476,1207.95 993.062,1207.95 993.649,1207.95 994.235,1207.95 994.822,1207.95 995.408,1207.95 995.994,1207.95 996.581,1207.95 997.167,1207.95 997.754,1207.95 998.34,1207.95 998.926,1207.95 999.513,1207.95 1000.1,1207.95 1000.69,1207.95 1001.27,1207.95 1001.86,1207.95 1002.44,1207.95 1003.03,1207.95 1003.62,1207.95 1004.2,1207.95 1004.79,1207.95 1005.38,1207.95 1005.96,1207.95 1006.55,1207.95 1007.14,1207.95 1007.72,1207.95 1008.31,1207.95 1008.9,1207.95 1009.48,1207.95 1010.07,1207.95 1010.65,1207.95 1011.24,1207.95 1011.83,1207.95 1012.41,1207.95 1013,1207.95 1013.59,1207.95 1014.17,1207.95 1014.76,1207.95 1015.35,1207.95 1015.93,1207.95 1016.52,1207.95 1017.11,1207.95 1017.69,1207.95 1018.28,1207.95 1018.86,1207.95 1019.45,1207.95 1020.04,1207.95 1020.62,1207.95 1021.21,1207.95 1021.8,1207.95 1022.38,1207.95 1022.97,1207.95 1023.56,1207.95 1024.14,1207.95 1024.73,1207.95 1025.32,1207.95 1025.9,1207.95 1026.49,1207.95 1027.07,1207.95 1027.66,1207.95 1028.25,1207.95 1028.83,1207.95 1029.42,1207.95 1030.01,1207.95 1030.59,1207.95 1031.18,1207.95 1031.77,1207.95 1032.35,1207.95 1032.94,1207.95 1033.52,1207.95 1034.11,1207.95 1034.7,1207.95 1035.28,1207.95 1035.87,1207.95 1036.46,1207.95 1037.04,1207.95 1037.63,1207.95 1038.22,1207.95 1038.8,1207.95 1039.39,1207.95 1039.98,1207.95 1040.56,1207.95 1041.15,1207.95 1041.73,1207.95 1042.32,1207.95 1042.91,1207.95 1043.49,1207.95 1044.08,1207.95 1044.67,1207.95 1045.25,1207.95 1045.84,1207.95 1046.43,1207.95 1047.01,1207.95 1047.6,1207.95 1048.19,1207.95 1048.77,1207.95 1049.36,1207.95 1049.94,1207.95 1050.53,1207.95 1051.12,1207.95 1051.7,1207.95 1052.29,1207.95 1052.88,1207.95 1053.46,1207.95 1054.05,1207.95 1054.64,1207.95 1055.22,1207.95 1055.81,1207.95 1056.39,1207.95 1056.98,1207.95 1057.57,1207.95 1058.15,1207.95 1058.74,1207.95 1059.33,1207.95 1059.91,1207.95 1060.5,1207.95 1061.09,1207.95 1061.67,1207.95 1062.26,1207.95 1062.85,1207.95 1063.43,1207.95 1064.02,1207.95 1064.6,1207.95 1065.19,1207.95 1065.78,1207.95 1066.36,1207.95 1066.95,1207.95 1067.54,1207.95 1068.12,1207.95 1068.71,1207.95 1069.3,1207.95 1069.88,1207.95 1070.47,1207.95 1071.06,1207.95 1071.64,1207.95 1072.23,1207.95 1072.81,1207.95 1073.4,1207.95 1073.99,1207.95 1074.57,1207.95 1075.16,1207.95 1075.75,1207.95 1076.33,1207.95 1076.92,1207.95 1077.51,1207.95 1078.09,1207.95 1078.68,1207.95 1079.26,1207.95 1079.85,1207.95 1080.44,1207.95 1081.02,1207.95 1081.61,1207.95 1082.2,1207.95 1082.78,1207.95 1083.37,1207.95 1083.96,1207.95 1084.54,1207.95 1085.13,1207.95 1085.72,1207.95 1086.3,1207.95 1086.89,1207.95 1087.47,1207.95 1088.06,1207.95 1088.65,1207.95 1089.23,1207.95 1089.82,1207.95 1090.41,1207.95 1090.99,1207.95 1091.58,1207.95 1092.17,1207.95 1092.75,1207.95 1093.34,1207.95 1093.93,1207.95 1094.51,1207.95 1095.1,1207.95 1095.68,1207.95 1096.27,1207.95 1096.86,1207.95 1097.44,1207.95 1098.03,1207.95 1098.62,1207.95 1099.2,1207.95 1099.79,1207.95 1100.38,1207.95 1100.96,1207.95 1101.55,1207.95 1102.14,1207.95 1102.72,1207.95 1103.31,1207.95 1103.89,1207.95 1104.48,1207.95 1105.07,1207.95 1105.65,1207.95 1106.24,1207.95 1106.83,1207.95 1107.41,1207.95 1108,1207.95 1108.59,1207.95 1109.17,1207.95 1109.76,1207.95 1110.34,1207.95 1110.93,1207.95 1111.52,1207.95 1112.1,1207.95 1112.69,1207.95 1113.28,1207.95 1113.86,1207.95 1114.45,1207.95 1115.04,1207.95 1115.62,1207.95 1116.21,1207.95 1116.8,1207.95 1117.38,1207.95 1117.97,1207.95 1118.55,1207.95 1119.14,1207.95 1119.73,1207.95 1120.31,1207.95 1120.9,1207.95 1121.49,1207.95 1122.07,1207.95 1122.66,1207.95 1123.25,1207.95 1123.83,1207.95 1124.42,1207.95 1125.01,1207.95 1125.59,1207.95 1126.18,1207.95 1126.76,1207.95 1127.35,1207.95 1127.94,1207.95 1128.52,1207.95 1129.11,1207.95 1129.7,1207.95 1130.28,1207.95 1130.87,1207.95 1131.46,1207.95 1132.04,1207.95 1132.63,1207.95 1133.21,1207.95 1133.8,1207.95 1134.39,1207.95 1134.97,1207.95 1135.56,1207.95 1136.15,1207.95 1136.73,1207.95 1137.32,1207.95 1137.91,1207.95 1138.49,1207.95 1139.08,1207.95 1139.67,1207.95 1140.25,1207.95 1140.84,1207.95 1141.42,1207.95 1142.01,1207.95 1142.6,1207.95 1143.18,1207.95 1143.77,1207.95 1144.36,1207.95 1144.94,1207.95 1145.53,1207.95 1146.12,1207.95 1146.7,1207.95 1147.29,1207.95 1147.88,1207.95 1148.46,1207.95 1149.05,1207.95 1149.63,1207.95 1150.22,1207.95 1150.81,1207.95 1151.39,1207.95 1151.98,1207.95 1152.57,1207.95 1153.15,1207.95 1153.74,1207.95 1154.33,1207.95 1154.91,1207.95 1155.5,1207.95 1156.09,1207.95 1156.67,1207.95 1157.26,1207.95 1157.84,1207.95 1158.43,1207.95 1159.02,1207.95 1159.6,1207.95 1160.19,1207.95 1160.78,1207.95 1161.36,1207.95 1161.95,1207.95 1162.54,1207.95 1163.12,1207.95 1163.71,1207.95 1164.29,1207.95 1164.88,1207.95 1165.47,1207.95 1166.05,1207.95 1166.64,1207.95 1167.23,1207.95 1167.81,1207.95 1168.4,1207.95 1168.99,1207.95 1169.57,1207.95 1170.16,1207.95 1170.75,1207.95 1171.33,1207.95 1171.92,1207.95 1172.5,1207.95 1173.09,1207.95 1173.68,1207.95 1174.26,1207.95 1174.85,1207.95 1175.44,1207.95 1176.02,1207.95 1176.61,1207.95 1177.2,1207.95 1177.78,1207.95 1178.37,1207.95 1178.96,1207.95 1179.54,1207.95 1180.13,1207.95 1180.71,1207.95 1181.3,1207.95 1181.89,1207.95 1182.47,1207.95 1183.06,1207.95 1183.65,1207.95 1184.23,1207.95 1184.82,1207.95 1185.41,1207.95 1185.99,1207.95 1186.58,1207.95 1187.16,1207.95 1187.75,1207.95 1188.34,1207.95 1188.92,1207.95 1189.51,1207.95 1190.1,1207.95 1190.68,1207.95 1191.27,1207.95 1191.86,1207.95 1192.44,1207.95 1193.03,1207.95 1193.62,1207.95 1194.2,1207.95 1194.79,1207.95 1195.37,1207.95 1195.96,1207.95 1196.55,1207.95 1197.13,1207.95 1197.72,1207.95 1198.31,1207.95 1198.89,1207.95 1199.48,1207.95 1200.07,1207.95 1200.65,1207.95 1201.24,1207.95 1201.83,1207.95 1202.41,1207.95 1203,1207.95 1203.58,1207.95 1204.17,1207.95 1204.76,1207.95 1205.34,1207.95 1205.93,1207.95 1206.52,1207.95 1207.1,1207.95 1207.69,1207.95 1208.28,1207.95 1208.86,1207.95 1209.45,1207.95 1210.03,1207.95 1210.62,1207.95 1211.21,1207.95 1211.79,1207.95 1212.38,1207.95 1212.97,1207.95 1213.55,1207.95 1214.14,1207.95 1214.73,1207.95 1215.31,1207.95 1215.9,1207.95 1216.49,1207.95 1217.07,1207.95 1217.66,1207.95 1218.24,1207.95 1218.83,1207.95 1219.42,1207.95 1220,1207.95 1220.59,1207.95 1221.18,1207.95 1221.76,1207.95 1222.35,1207.95 1222.94,1207.95 1223.52,1207.95 1224.11,1207.95 1224.7,1207.95 1225.28,1207.95 1225.87,1207.95 1226.45,1207.95 1227.04,1207.95 1227.63,1207.95 1228.21,1207.95 1228.8,1207.95 1229.39,1207.95 1229.97,1207.95 1230.56,1207.95 1231.15,1207.95 1231.73,1207.95 1232.32,1207.95 1232.91,1207.95 1233.49,1207.95 1234.08,1207.95 1234.66,1207.95 1235.25,1207.95 1235.84,1207.95 1236.42,1207.95 1237.01,1207.95 1237.6,1207.95 1238.18,1207.95 1238.77,1207.95 1239.36,1207.95 1239.94,1207.95 1240.53,1207.95 1241.11,1207.95 1241.7,1207.95 1242.29,1207.95 1242.87,1207.95 1243.46,1207.95 1244.05,1207.95 1244.63,1207.95 1245.22,1207.95 1245.81,1207.95 1246.39,1207.95 1246.98,1207.95 1247.57,1207.95 1248.15,1207.95 1248.74,1207.95 1249.32,1207.95 1249.91,1207.95 1250.5,1207.95 1251.08,1207.95 1251.67,1207.95 1252.26,1207.95 1252.84,1207.95 1253.43,1207.95 1254.02,1207.95 1254.6,1207.95 1255.19,1207.95 1255.78,1207.95 1256.36,1207.95 1256.95,1207.95 1257.53,1207.95 1258.12,1207.95 1258.71,1207.95 1259.29,1207.95 1259.88,1207.95 1260.47,1207.95 1261.05,1207.95 1261.64,1207.95 1262.23,1207.95 1262.81,1207.95 1263.4,1207.95 1263.98,1207.95 1264.57,1207.95 1265.16,1207.95 1265.74,1207.95 1266.33,1207.95 1266.92,1207.95 1267.5,1207.95 1268.09,1207.95 1268.68,1207.95 1269.26,1207.95 1269.85,1207.95 1270.44,1207.95 1271.02,1207.95 1271.61,1207.95 1272.19,1207.95 1272.78,1207.95 1273.37,1207.95 1273.95,1207.95 1274.54,1207.95 1275.13,1207.95 1275.71,1207.95 1276.3,1207.95 1276.89,1207.95 1277.47,1207.95 1278.06,1207.95 1278.65,1207.95 1279.23,1207.95 1279.82,1207.95 1280.4,1207.95 1280.99,1207.95 1281.58,1207.95 1282.16,1207.95 1282.75,1207.95 1283.34,1207.95 1283.92,1207.95 1284.51,1207.95 1285.1,1207.95 1285.68,1207.95 1286.27,1207.95 1286.86,1207.95 1287.44,1207.95 1288.03,1207.95 1288.61,1207.95 1289.2,1207.95 1289.79,1207.95 1290.37,1207.95 1290.96,1207.95 1291.55,1207.95 1292.13,1207.95 1292.72,1207.95 1293.31,1207.95 1293.89,1207.95 1294.48,1207.95 1295.06,1207.95 1295.65,1207.95 1296.24,1207.95 1296.82,1207.95 1297.41,1207.95 1298,1207.95 1298.58,1207.95 1299.17,1207.95 1299.76,1207.95 1300.34,1207.95 1300.93,1207.95 1301.52,1207.95 1302.1,1207.95 1302.69,1207.95 1303.27,1207.95 1303.86,1207.95 1304.45,1207.95 1305.03,1207.95 1305.62,1207.95 1306.21,1207.95 1306.79,1207.95 1307.38,1207.95 1307.97,1207.95 1308.55,1207.95 1309.14,1207.95 1309.73,1207.95 1310.31,1207.95 1310.9,1207.95 1311.48,1207.95 1312.07,1207.95 1312.66,1207.95 1313.24,1207.95 1313.83,1207.95 1314.42,1207.95 1315,1207.95 1315.59,1207.95 1316.18,1207.95 1316.76,1207.95 1317.35,1207.95 1317.93,1207.95 1318.52,1207.95 1319.11,1207.95 1319.69,1207.95 1320.28,1207.95 1320.87,1207.95 1321.45,1207.95 1322.04,1207.95 1322.63,1207.95 1323.21,1207.95 1323.8,1207.95 1324.39,1207.95 1324.97,1207.95 1325.56,1207.95 1326.14,1207.95 1326.73,1207.95 1327.32,1207.95 1327.9,1207.95 1328.49,1207.95 1329.08,1207.95 1329.66,1207.95 1330.25,1207.95 1330.84,1207.95 1331.42,1207.95 1332.01,1207.95 1332.6,1207.95 1333.18,1207.95 1333.77,1207.95 1334.35,1207.95 1334.94,1207.95 1335.53,1207.95 1336.11,1207.95 1336.7,1207.95 1337.29,1207.95 1337.87,1207.95 1338.46,1207.95 1339.05,1207.95 1339.63,1207.95 1340.22,1207.95 1340.8,1207.95 1341.39,1207.95 1341.98,1207.95 1342.56,1207.95 1343.15,1207.95 1343.74,1207.95 1344.32,1207.95 1344.91,1207.95 1345.5,1207.95 1346.08,1207.95 1346.67,1207.95 1347.26,1207.95 1347.84,1207.95 1348.43,1207.95 1349.01,1207.95 1349.6,1207.95 1350.19,1207.95 1350.77,1207.95 1351.36,1207.95 1351.95,1207.95 1352.53,1207.95 1353.12,1207.95 1353.71,1207.95 1354.29,1207.95 1354.88,1207.95 1355.47,1207.95 1356.05,1207.95 1356.64,1207.95 1357.22,1207.95 1357.81,1207.95 1358.4,1207.95 1358.98,1207.95 1359.57,1207.95 1360.16,1207.95 1360.74,1207.95 1361.33,1207.95 1361.92,1207.95 1362.5,1207.95 1363.09,1207.95 1363.68,1207.95 1364.26,1207.95 1364.85,1207.95 1365.43,1207.95 1366.02,1207.95 1366.61,1207.95 1367.19,1207.95 1367.78,1207.95 1368.37,1207.95 1368.95,1207.95 1369.54,1207.95 1370.13,1207.95 1370.71,1207.95 1371.3,1207.95 1371.88,1207.95 1372.47,1207.95 1373.06,1207.95 1373.64,1207.95 1374.23,1207.95 1374.82,1207.95 1375.4,1207.95 1375.99,1207.95 1376.58,1207.95 1377.16,1207.95 1377.75,1207.95 1378.34,1207.95 1378.92,1207.95 1379.51,1207.95 1380.09,1207.95 1380.68,1207.95 1381.27,1207.95 1381.85,1207.95 1382.44,1207.95 1383.03,1207.95 1383.61,1207.95 1384.2,1207.95 1384.79,1207.95 1385.37,1207.95 1385.96,1207.95 1386.55,1207.95 1387.13,1207.95 1387.72,1207.95 1388.3,1207.95 1388.89,1207.95 1389.48,1207.95 1390.06,1207.95 1390.65,1207.95 1391.24,1207.95 1391.82,1207.95 1392.41,1207.95 1393,1207.95 1393.58,1207.95 1394.17,1207.95 1394.75,1207.95 1395.34,1207.95 1395.93,1207.95 1396.51,1207.95 1397.1,1207.95 1397.69,1207.95 1398.27,1207.95 1398.86,1207.95 1399.45,1207.95 1400.03,1207.95 1400.62,1207.95 1401.21,1207.95 1401.79,1207.95 1402.38,1207.95 1402.96,1207.95 1403.55,1207.95 1404.14,1207.95 1404.72,1207.95 1405.31,1207.95 1405.9,1207.95 1406.48,1207.95 1407.07,1207.95 1407.66,1207.95 1408.24,1207.95 1408.83,1207.95 1409.42,1207.95 1410,1207.95 1410.59,1207.95 1411.17,1207.95 1411.76,1207.95 1412.35,1207.95 1412.93,1207.95 1413.52,1207.95 1414.11,1207.95 1414.69,1207.95 1415.28,1207.95 1415.87,1207.95 1416.45,1207.95 1417.04,1207.95 1417.63,1207.95 1418.21,1207.95 1418.8,1207.95 1419.38,1207.95 1419.97,1207.95 1420.56,1207.95 1421.14,1207.95 1421.73,1207.95 1422.32,1207.95 1422.9,1207.95 1423.49,1207.95 1424.08,1207.95 1424.66,1207.95 1425.25,1207.95 1425.83,1207.95 1426.42,1207.95 1427.01,1207.95 1427.59,1207.95 1428.18,1207.95 1428.77,1207.95 1429.35,1207.95 1429.94,1207.95 1430.53,1207.95 1431.11,1207.95 1431.7,1207.95 1432.29,1207.95 1432.87,1207.95 1433.46,1207.95 1434.04,1207.95 1434.63,1207.95 1435.22,1207.95 1435.8,1207.95 1436.39,1207.95 1436.98,1207.95 1437.56,1207.95 1438.15,1207.95 1438.74,1207.95 1439.32,1207.95 1439.91,1207.95 1440.5,1207.95 1441.08,1207.95 1441.67,1207.95 1442.25,1207.95 1442.84,1207.95 1443.43,1207.95 1444.01,1207.95 1444.6,1207.95 1445.19,1207.95 1445.77,1207.95 1446.36,1207.95 1446.95,1207.95 1447.53,1207.95 1448.12,1207.95 1448.7,1207.95 1449.29,1207.95 1449.88,1207.95 1450.46,1207.95 1451.05,1207.95 1451.64,1207.95 1452.22,1207.95 1452.81,1207.95 1453.4,1207.95 1453.98,1207.95 1454.57,1207.95 1455.16,1207.95 1455.74,1207.95 1456.33,1207.95 1456.91,1207.95 1457.5,1207.95 1458.09,1207.95 1458.67,1207.95 1459.26,1207.95 1459.85,1207.95 1460.43,1207.95 1461.02,1207.95 1461.61,1207.95 1462.19,1207.95 1462.78,1207.95 1463.37,1207.95 1463.95,1207.95 1464.54,1207.95 1465.12,1207.95 1465.71,1207.95 1466.3,1207.95 1466.88,1207.95 1467.47,1207.95 1468.06,1207.95 1468.64,1207.95 1469.23,1207.95 1469.82,1207.95 1470.4,1207.95 1470.99,1207.95 1471.57,1207.95 1472.16,1207.95 1472.75,1207.95 1473.33,1207.95 1473.92,1207.95 1474.51,1207.95 1475.09,1207.95 1475.68,1207.95 1476.27,1207.95 1476.85,1207.95 1477.44,1207.95 1478.03,1207.95 1478.61,1207.95 1479.2,1207.95 1479.78,1207.95 1480.37,1207.95 1480.96,1207.95 1481.54,1207.95 1482.13,1207.95 1482.72,1207.95 1483.3,1207.95 1483.89,1207.95 1484.48,1207.95 1485.06,1207.95 1485.65,1207.95 1486.24,1207.95 1486.82,1207.95 1487.41,1207.95 1487.99,1207.95 1488.58,1207.95 1489.17,1207.95 1489.75,1207.95 1490.34,1207.95 1490.93,1207.95 1491.51,1207.95 1492.1,1207.95 1492.69,1207.95 1493.27,1207.95 1493.86,1207.95 1494.45,1207.95 1495.03,1207.95 1495.62,1207.95 1496.2,1207.95 1496.79,1207.95 1497.38,1207.95 1497.96,1207.95 1498.55,1207.95 1499.14,1207.95 1499.72,1207.95 1500.31,1207.95 1500.9,1207.95 1501.48,1207.95 1502.07,1207.95 1502.65,1207.95 1503.24,1207.95 1503.83,1207.95 1504.41,1207.95 1505,1207.95 1505.59,1207.95 1506.17,1207.95 1506.76,1207.95 1507.35,1207.95 1507.93,1207.95 1508.52,1207.95 1509.11,1207.95 1509.69,1207.95 1510.28,1207.95 1510.86,1207.95 1511.45,1207.95 1512.04,1207.95 1512.62,1207.95 1513.21,1207.95 1513.8,1207.95 1514.38,1207.95 1514.97,1207.95 1515.56,1207.95 1516.14,1207.95 1516.73,1207.95 1517.32,1207.95 1517.9,1207.95 1518.49,1207.95 1519.07,1207.95 1519.66,1207.95 1520.25,1207.95 1520.83,1207.95 1521.42,1207.95 1522.01,1207.95 1522.59,1207.95 1523.18,1207.95 1523.77,1207.95 1524.35,1207.95 1524.94,1207.95 1525.52,1207.95 1526.11,1207.95 1526.7,1207.95 1527.28,1207.95 1527.87,1207.95 1528.46,1207.95 1529.04,1207.95 1529.63,1207.95 1530.22,1207.95 1530.8,1207.95 1531.39,1207.95 1531.98,1207.95 1532.56,1207.95 1533.15,1207.95 1533.73,1207.95 1534.32,1207.95 1534.91,1207.95 1535.49,1207.95 1536.08,1207.95 1536.67,1207.95 1537.25,1207.95 1537.84,1207.95 1538.43,1207.95 1539.01,1207.95 1539.6,1207.95 1540.19,1207.95 1540.77,1207.95 1541.36,1207.95 1541.94,1207.95 1542.53,1207.95 1543.12,1207.95 1543.7,1207.95 1544.29,1207.95 1544.88,1207.95 1545.46,1207.95 1546.05,1207.95 1546.64,1207.95 1547.22,1207.95 1547.81,1207.95 1548.4,1207.95 1548.98,1207.95 1549.57,1207.95 1550.15,1207.95 1550.74,1207.95 1551.33,1207.95 1551.91,1207.95 1552.5,1207.95 1553.09,1207.95 1553.67,1207.95 1554.26,1207.95 1554.85,1207.95 1555.43,1207.95 1556.02,1207.95 1556.6,1207.95 1557.19,1207.95 1557.78,1207.95 1558.36,1207.95 1558.95,1207.95 1559.54,1207.95 1560.12,1207.95 1560.71,1207.95 1561.3,1207.95 1561.88,1207.95 1562.47,1207.95 1563.06,1207.95 1563.64,1207.95 1564.23,1207.95 1564.81,1207.95 1565.4,1207.95 1565.99,1207.95 1566.57,1207.95 1567.16,1207.95 1567.75,1207.95 1568.33,1207.95 1568.92,1207.95 1569.51,1207.95 1570.09,1207.95 1570.68,1207.95 1571.27,1207.95 1571.85,1207.95 1572.44,1207.95 1573.02,1207.95 1573.61,1207.95 1574.2,1207.95 1574.78,1207.95 1575.37,1207.95 1575.96,1207.95 1576.54,1207.95 1577.13,1207.95 1577.72,1207.95 1578.3,1207.95 1578.89,1207.95 1579.47,1207.95 1580.06,1207.95 1580.65,1207.95 1581.23,1207.95 1581.82,1207.95 1582.41,1207.95 1582.99,1207.95 1583.58,1207.95 1584.17,1207.95 1584.75,1207.95 1585.34,1207.95 1585.93,1207.95 1586.51,1207.95 1587.1,1207.95 1587.68,1207.95 1588.27,1207.95 1588.86,1207.95 1589.44,1207.95 1590.03,1207.95 1590.62,1207.95 1591.2,1207.95 1591.79,1207.95 1592.38,1207.95 1592.96,1207.95 1593.55,1207.95 1594.14,1207.95 1594.72,1207.95 1595.31,1207.95 1595.89,1207.95 1596.48,1207.95 1597.07,1207.95 1597.65,1207.95 1598.24,1207.95 1598.83,1207.95 1599.41,1207.95 1600,1207.95 1600.59,1207.95 1601.17,1207.95 1601.76,1207.95 1602.34,1207.95 1602.93,1207.95 1603.52,1207.95 1604.1,1207.95 1604.69,1207.95 1605.28,1207.95 1605.86,1207.95 1606.45,1207.95 1607.04,1207.95 1607.62,1207.95 1608.21,1207.95 1608.8,1207.95 1609.38,1207.95 1609.97,1207.95 1610.55,1207.95 1611.14,1207.95 1611.73,1207.95 1612.31,1207.95 1612.9,1207.95 1613.49,1207.95 1614.07,1207.95 1614.66,1207.95 1615.25,1207.95 1615.83,1207.95 1616.42,1207.95 1617.01,1207.95 1617.59,1207.95 1618.18,1207.95 1618.76,1207.95 1619.35,1207.95 1619.94,1207.95 1620.52,1207.95 1621.11,1207.95 1621.7,1207.95 1622.28,1207.95 1622.87,1207.95 1623.46,1207.95 1624.04,1207.95 1624.63,1207.95 1625.22,1207.95 1625.8,1207.95 1626.39,1207.95 1626.97,1207.95 1627.56,1207.95 1628.15,1207.95 1628.73,1207.95 1629.32,1207.95 1629.91,1207.95 1630.49,1207.95 1631.08,1207.95 1631.67,1207.95 1632.25,1207.95 1632.84,1207.95 1633.42,1207.95 1634.01,1207.95 1634.6,1207.95 1635.18,1207.95 1635.77,1207.95 1636.36,1207.95 1636.94,1207.95 1637.53,1207.95 1638.12,1207.95 1638.7,1207.95 1639.29,1207.95 1639.88,1207.95 1640.46,1207.95 1641.05,1207.95 1641.63,1207.95 1642.22,1207.95 1642.81,1207.95 1643.39,1207.95 1643.98,1207.95 1644.57,1207.95 1645.15,1207.95 1645.74,1207.95 1646.33,1207.95 1646.91,1207.95 1647.5,1207.95 1648.09,1207.95 1648.67,1207.95 1649.26,1207.95 1649.84,1207.95 1650.43,1207.95 1651.02,1207.95 1651.6,1207.95 1652.19,1207.95 1652.78,1207.95 1653.36,1207.95 1653.95,1207.95 1654.54,1207.95 1655.12,1207.95 1655.71,1207.95 1656.29,1207.95 1656.88,1207.95 1657.47,1207.95 1658.05,1207.95 1658.64,1207.95 1659.23,1207.95 1659.81,1207.95 1660.4,1207.95 1660.99,1207.95 1661.57,1207.95 1662.16,1207.95 1662.75,1207.95 1663.33,1207.95 1663.92,1207.95 1664.5,1207.95 1665.09,1207.95 1665.68,1207.95 1666.26,1207.95 1666.85,1207.95 1667.44,1207.95 1668.02,1207.95 1668.61,1207.95 1669.2,1207.95 1669.78,1207.95 1670.37,1207.95 1670.96,1207.95 1671.54,1207.95 1672.13,1207.95 1672.71,1207.95 1673.3,1207.95 1673.89,1207.95 1674.47,1207.95 1675.06,1207.95 1675.65,1207.95 1676.23,1207.95 1676.82,1207.95 1677.41,1207.95 1677.99,1207.95 1678.58,1207.95 1679.17,1207.95 1679.75,1207.95 1680.34,1207.95 1680.92,1207.95 1681.51,1207.95 1682.1,1207.95 1682.68,1207.95 1683.27,1207.95 1683.86,1207.95 1684.44,1207.95 1685.03,1207.95 1685.62,1207.95 1686.2,1207.95 1686.79,1207.95 1687.37,1207.95 1687.96,1207.95 1688.55,1207.95 1689.13,1207.95 1689.72,1207.95 1690.31,1207.95 1690.89,1207.95 1691.48,1207.95 1692.07,1207.95 1692.65,1207.95 1693.24,1207.95 1693.83,1207.95 1694.41,1207.95 1695,1207.95 1695.58,1207.95 1696.17,1207.95 1696.76,1207.95 1697.34,1207.95 1697.93,1207.95 1698.52,1207.95 1699.1,1207.95 1699.69,1207.95 1700.28,1207.95 1700.86,1207.95 1701.45,1207.95 1702.04,1207.95 1702.62,1207.95 1703.21,1207.95 1703.79,1207.95 1704.38,1207.95 1704.97,1207.95 1705.55,1207.95 1706.14,1207.95 1706.73,1207.95 1707.31,1207.95 1707.9,1207.95 1708.49,1207.95 1709.07,1207.95 1709.66,1207.95 1710.24,1207.95 1710.83,1207.95 1711.42,1207.95 1712,1207.95 1712.59,1207.95 1713.18,1207.95 1713.76,1207.95 1714.35,1207.95 1714.94,1207.95 1715.52,1207.95 1716.11,1207.95 1716.7,1207.95 1717.28,1207.95 1717.87,1207.95 1718.45,1207.95 1719.04,1207.95 1719.63,1207.95 1720.21,1207.95 1720.8,1207.95 1721.39,1207.95 1721.97,1207.95 1722.56,1207.95 1723.15,1207.95 1723.73,1207.95 1724.32,1207.95 1724.91,1207.95 1725.49,1207.95 1726.08,1207.95 1726.66,1207.95 1727.25,1207.95 1727.84,1207.95 1728.42,1207.95 1729.01,1207.95 1729.6,1207.95 1730.18,1207.95 1730.77,1207.95 1731.36,1207.95 1731.94,1207.95 1732.53,1207.95 1733.11,1207.95 1733.7,1207.95 1734.29,1207.95 1734.87,1207.95 1735.46,1207.95 1736.05,1207.95 1736.63,1207.95 1737.22,1207.95 1737.81,1207.95 1738.39,1207.95 1738.98,1207.95 1739.57,1207.95 1740.15,1207.95 1740.74,1207.95 1741.32,1207.95 1741.91,1207.95 1742.5,1207.95 1743.08,1207.95 1743.67,1207.95 1744.26,1207.95 1744.84,1207.95 1745.43,1207.95 1746.02,1207.95 1746.6,1207.95 1747.19,1207.95 1747.78,1207.95 1748.36,1207.95 1748.95,1207.95 1749.53,1207.95 1750.12,1207.95 1750.71,1207.95 1751.29,1207.95 1751.88,1207.95 1752.47,1207.95 1753.05,1207.95 1753.64,1207.95 1754.23,1207.95 1754.81,1207.95 1755.4,1207.95 1755.99,1207.95 1756.57,1207.95 1757.16,1207.95 1757.74,1207.95 1758.33,1207.95 1758.92,1207.95 1759.5,1207.95 1760.09,1207.95 1760.68,1207.95 1761.26,1207.95 1761.85,1207.95 1762.44,1207.95 1763.02,1207.95 1763.61,1207.95 1764.19,1207.95 1764.78,1207.95 1765.37,1207.95 1765.95,1207.95 1766.54,1207.95 1767.13,1207.95 1767.71,1207.95 1768.3,1207.95 1768.89,1207.95 1769.47,1207.95 1770.06,1207.95 1770.65,1207.95 1771.23,1207.95 1771.82,1207.95 1772.4,1207.95 1772.99,1207.95 1773.58,1207.95 1774.16,1207.95 1774.75,1207.95 1775.34,1207.95 1775.92,1207.95 1776.51,1207.95 1777.1,1207.95 1777.68,1207.95 1778.27,1207.95 1778.86,1207.95 1779.44,1207.95 1780.03,1207.95 1780.61,1207.95 1781.2,1207.95 1781.79,1207.95 1782.37,1207.95 1782.96,1207.95 1783.55,1207.95 1784.13,1207.95 1784.72,1207.95 1785.31,1207.95 1785.89,1207.95 1786.48,1207.95 1787.06,1207.95 1787.65,1207.95 1788.24,1207.95 1788.82,1207.95 1789.41,1207.95 1790,1207.95 1790.58,1207.95 1791.17,1207.95 1791.76,1207.95 1792.34,1207.95 1792.93,1207.95 1793.52,1207.95 1794.1,1207.95 1794.69,1207.95 1795.27,1207.95 1795.86,1207.95 1796.45,1207.95 1797.03,1207.95 1797.62,1207.95 1798.21,1207.95 1798.79,1207.95 1799.38,1207.95 1799.97,1207.95 1800.55,1207.95 1801.14,1207.95 1801.73,1207.95 1802.31,1207.95 1802.9,1207.95 1803.48,1207.95 1804.07,1207.95 1804.66,1207.95 1805.24,1207.95 1805.83,1207.95 1806.42,1207.95 1807,1207.95 1807.59,1207.95 1808.18,1207.95 1808.76,1207.95 1809.35,1207.95 1809.94,1207.95 1810.52,1207.95 1811.11,1207.95 1811.69,1207.95 1812.28,1207.95 1812.87,1207.95 1813.45,1207.95 1814.04,1207.95 1814.63,1207.95 1815.21,1207.95 1815.8,1207.95 1816.39,1207.95 1816.97,1207.95 1817.56,1207.95 1818.14,1207.95 1818.73,1207.95 1819.32,1207.95 1819.9,1207.95 1820.49,1207.95 1821.08,1207.95 1821.66,1207.95 1822.25,1207.95 1822.84,1207.95 1823.42,1207.95 1824.01,1207.95 1824.6,1207.95 1825.18,1207.95 1825.77,1207.95 1826.35,1207.95 1826.94,1207.95 1827.53,1207.95 1828.11,1207.95 1828.7,1207.95 1829.29,1207.95 1829.87,1207.95 1830.46,1207.95 1831.05,1207.95 1831.63,1207.95 1832.22,1207.95 1832.81,1207.95 1833.39,1207.95 1833.98,1207.95 1834.56,1207.95 1835.15,1207.95 1835.74,1207.95 1836.32,1207.95 1836.91,1207.95 1837.5,1207.95 1838.08,1207.95 1838.67,1207.95 1839.26,1207.95 1839.84,1207.95 1840.43,1207.95 1841.01,1207.95 1841.6,1207.95 1842.19,1207.95 1842.77,1207.95 1843.36,1207.95 1843.95,1207.95 1844.53,1207.95 1845.12,1207.95 1845.71,1207.95 1846.29,1207.95 1846.88,1207.95 1847.47,1207.95 1848.05,1207.95 1848.64,1207.95 1849.22,1207.95 1849.81,1207.95 1850.4,1207.95 1850.98,1207.95 1851.57,1207.95 1852.16,1207.95 1852.74,1207.95 1853.33,1207.95 1853.92,1207.95 1854.5,1207.95 1855.09,1207.95 1855.68,1207.95 1856.26,1207.95 1856.85,1207.95 1857.43,1207.95 1858.02,1207.95 1858.61,1207.95 1859.19,1207.95 1859.78,1207.95 1860.37,1207.95 1860.95,1207.95 1861.54,1207.95 1862.13,1207.95 1862.71,1207.95 1863.3,1207.95 1863.88,1207.95 1864.47,1207.95 1865.06,1207.95 1865.64,1207.95 1866.23,1207.95 1866.82,1207.95 1867.4,1207.95 1867.99,1207.95 1868.58,1207.95 1869.16,1207.95 1869.75,1207.95 1870.34,1207.95 1870.92,1207.95 1871.51,1207.95 1872.09,1207.95 1872.68,1207.95 1873.27,1207.95 1873.85,1207.95 1874.44,1207.95 1875.03,1207.95 1875.61,1207.95 1876.2,1207.95 1876.79,1207.95 1877.37,1207.95 1877.96,1207.95 1878.55,1207.95 1879.13,1207.95 1879.72,1207.95 1880.3,1207.95 1880.89,1207.95 1881.48,1207.95 1882.06,1207.95 1882.65,1207.95 1883.24,1207.95 1883.82,1207.95 1884.41,1207.95 1885,1207.95 1885.58,1207.95 1886.17,1207.95 1886.76,1207.95 1887.34,1207.95 1887.93,1207.95 1888.51,1207.95 1889.1,1207.95 1889.69,1207.95 1890.27,1207.95 1890.86,1207.95 1891.45,1207.95 1892.03,1207.95 1892.62,1207.95 1893.21,1207.95 1893.79,1207.95 1894.38,1207.95 1894.96,1207.95 1895.55,1207.95 1896.14,1207.95 1896.72,1207.95 1897.31,1207.95 1897.9,1207.95 1898.48,1207.95 1899.07,1207.95 1899.66,1207.95 1900.24,1207.95 1900.83,1207.95 1901.42,1207.95 1902,1207.95 1902.59,1207.95 1903.17,1207.95 1903.76,1207.95 1904.35,1207.95 1904.93,1207.95 1905.52,1207.95 1906.11,1207.95 1906.69,1207.95 1907.28,1207.95 1907.87,1207.95 1908.45,1207.95 1909.04,1207.95 1909.63,1207.95 1910.21,1207.95 1910.8,1207.95 1911.38,1207.95 1911.97,1207.95 1912.56,1207.95 1913.14,1207.95 1913.73,1207.95 1914.32,1207.95 1914.9,1207.95 1915.49,1207.95 1916.08,1207.95 1916.66,1207.95 1917.25,1207.95 1917.83,1207.95 1918.42,1207.95 1919.01,1207.95 1919.59,1207.95 1920.18,1207.95 1920.77,1207.95 1921.35,1207.95 1921.94,1207.95 1922.53,1207.95 1923.11,1207.95 1923.7,1207.95 1924.29,1207.95 1924.87,1207.95 1925.46,1207.95 1926.04,1207.95 1926.63,1207.95 1927.22,1207.95 1927.8,1207.95 1928.39,1207.95 1928.98,1207.95 1929.56,1207.95 1930.15,1207.95 1930.74,1207.95 1931.32,1207.95 1931.91,1207.95 1932.5,1207.95 1933.08,1207.95 1933.67,1207.95 1934.25,1207.95 1934.84,1207.95 1935.43,1207.95 1936.01,1207.95 1936.6,1207.95 1937.19,1207.95 1937.77,1207.95 1938.36,1207.95 1938.95,1207.95 1939.53,1207.95 1940.12,1207.95 1940.71,1207.95 1941.29,1207.95 1941.88,1207.95 1942.46,1207.95 1943.05,1207.95 1943.64,1207.95 1944.22,1207.95 1944.81,1207.95 1945.4,1207.95 1945.98,1207.95 1946.57,1207.95 1947.16,1207.95 1947.74,1207.95 1948.33,1207.95 1948.91,1207.95 1949.5,1207.95 1950.09,1207.95 1950.67,1207.95 1951.26,1207.95 1951.85,1207.95 1952.43,1207.95 1953.02,1207.95 1953.61,1207.95 1954.19,1207.95 1954.78,1207.95 1955.37,1207.95 1955.95,1207.95 1956.54,1207.95 1957.12,1207.95 1957.71,1207.95 1958.3,1207.95 1958.88,1207.95 1959.47,1207.95 1960.06,1207.95 1960.64,1207.95 1961.23,1207.95 1961.82,1207.95 1962.4,1207.95 1962.99,1207.95 1963.58,1207.95 1964.16,1207.95 1964.75,1207.95 1965.33,1207.95 1965.92,1207.95 1966.51,1207.95 1967.09,1207.95 1967.68,1207.95 1968.27,1207.95 1968.85,1207.95 1969.44,1207.95 1970.03,1207.95 1970.61,1207.95 1971.2,1207.95 1971.78,1207.95 1972.37,1207.95 1972.96,1207.95 1973.54,1207.95 1974.13,1207.95 1974.72,1207.95 1975.3,1207.95 1975.89,1207.95 1976.48,1207.95 1977.06,1207.95 1977.65,1207.95 1978.24,1207.95 1978.82,1207.95 1979.41,1207.95 1979.99,1207.95 1980.58,1207.95 1981.17,1207.95 1981.75,1207.95 1982.34,1207.95 1982.93,1207.95 1983.51,1207.95 1984.1,1207.95 1984.69,1207.95 1985.27,1207.95 1985.86,1207.95 1986.45,1207.95 1987.03,1207.95 1987.62,1207.95 1988.2,1207.95 1988.79,1207.95 1989.38,1207.95 1989.96,1207.95 1990.55,1207.95 1991.14,1207.95 1991.72,1207.95 1992.31,1207.95 1992.9,1207.95 1993.48,1207.95 1994.07,1207.95 1994.65,1207.95 1995.24,1207.95 1995.83,1207.95 1996.41,1207.95 1997,1207.95 1997.59,1207.95 1998.17,1207.95 1998.76,1207.95 1999.35,1207.95 1999.93,1207.95 2000.52,1207.95 2001.11,1207.95 2001.69,1207.95 2002.28,1207.95 2002.86,1207.95 2003.45,1207.95 2004.04,1207.95 2004.62,1207.95 2005.21,1207.95 2005.8,1207.95 2006.38,1207.95 2006.97,1207.95 2007.56,1207.95 2008.14,1207.95 2008.73,1207.95 2009.32,1207.95 2009.9,1207.95 2010.49,1207.95 2011.07,1207.95 2011.66,1207.95 2012.25,1207.95 2012.83,1207.95 2013.42,1207.95 2014.01,1207.95 2014.59,1207.95 2015.18,1207.95 2015.77,1207.95 2016.35,1207.95 2016.94,1207.95 2017.53,1207.95 2018.11,1207.95 2018.7,1207.95 2019.28,1207.95 2019.87,1207.95 2020.46,1207.95 2021.04,1207.95 2021.63,1207.95 2022.22,1207.95 2022.8,1207.95 2023.39,1207.95 2023.98,1207.95 2024.56,1207.95 2025.15,1207.95 2025.73,1207.95 2026.32,1207.95 2026.91,1207.95 2027.49,1207.95 2028.08,1207.95 2028.67,1207.95 2029.25,1207.95 2029.84,1207.95 2030.43,1207.95 2031.01,1207.95 2031.6,1207.95 2032.19,1207.95 2032.77,1207.95 2033.36,1207.95 2033.94,1207.95 2034.53,1207.95 2035.12,1207.95 2035.7,1207.95 2036.29,1207.95 2036.88,1207.95 2037.46,1207.95 2038.05,1207.95 2038.64,1207.95 2039.22,1207.95 2039.81,1207.95 2040.4,1207.95 2040.98,1207.95 2041.57,1207.95 2042.15,1207.95 2042.74,1207.95 2043.33,1207.95 2043.91,1207.95 2044.5,1207.95 2045.09,1207.95 2045.67,1207.95 2046.26,1207.95 2046.85,1207.95 2047.43,1207.95 2048.02,1207.95 2048.6,1207.95 2049.19,1207.95 2049.78,1207.95 2050.36,1207.95 2050.95,1207.95 2051.54,1207.95 2052.12,1207.95 2052.71,1207.95 2053.3,1207.95 2053.88,1207.95 2054.47,1207.95 2055.06,1207.95 2055.64,1207.95 2056.23,1207.95 2056.81,1207.95 2057.4,1207.95 2057.99,1207.95 2058.57,1207.95 2059.16,1207.95 2059.75,1207.95 2060.33,1207.95 2060.92,1207.95 2061.51,1207.95 2062.09,1207.95 2062.68,1207.95 2063.27,1207.95 2063.85,1207.95 2064.44,1207.95 2065.02,1207.95 2065.61,1207.95 2066.2,1207.95 2066.78,1207.95 2067.37,1207.95 2067.96,1207.95 2068.54,1207.95 2069.13,1207.95 2069.72,1207.95 2070.3,1207.95 2070.89,1207.95 2071.48,1207.95 2072.06,1207.95 2072.65,1207.95 2073.23,1207.95 2073.82,1207.95 2074.41,1207.95 2074.99,1207.95 2075.58,1207.95 2076.17,1207.95 2076.75,1207.95 2077.34,1207.95 2077.93,1207.95 2078.51,1207.95 2079.1,1207.95 2079.68,1207.95 2080.27,1207.95 2080.86,1207.95 2081.44,1207.95 2082.03,1207.95 2082.62,1207.95 2083.2,1207.95 2083.79,1207.95 2084.38,1207.95 2084.96,1207.95 2085.55,1207.95 2086.14,1207.95 2086.72,1207.95 2087.31,1207.95 2087.89,1207.95 2088.48,1207.95 2089.07,1207.95 2089.65,1207.95 2090.24,1207.95 2090.83,1207.95 2091.41,1207.95 2092,1207.95 2092.59,1207.95 2093.17,1207.95 2093.76,1207.95 2094.35,1207.95 2094.93,1207.95 2095.52,1207.95 2096.1,1207.95 2096.69,1207.95 2097.28,1207.95 2097.86,1207.95 2098.45,1207.95 2099.04,1207.95 2099.62,1207.95 2100.21,1207.95 2100.8,1207.95 2101.38,1207.95 2101.97,1207.95 2102.55,1207.95 2103.14,1207.95 2103.73,1207.95 2104.31,1207.95 2104.9,1207.95 2105.49,1207.95 2106.07,1207.95 2106.66,1207.95 2107.25,1207.95 2107.83,1207.95 2108.42,1207.95 2109.01,1207.95 2109.59,1207.95 2110.18,1207.95 2110.76,1207.95 2111.35,1207.95 2111.94,1207.95 2112.52,1207.95 2113.11,1207.95 2113.7,1207.95 2114.28,1207.95 2114.87,1207.95 2115.46,1207.95 2116.04,1207.95 2116.63,1207.95 2117.22,1207.95 2117.8,1207.95 2118.39,1207.95 2118.97,1207.95 2119.56,1207.95 2120.15,1207.95 2120.73,1207.95 2121.32,1207.95 2121.91,1207.95 2122.49,1207.95 2123.08,1207.95 2123.67,1207.95 2124.25,1207.95 2124.84,1207.95 2125.42,1207.95 2126.01,1207.95 2126.6,1207.95 2127.18,1207.95 2127.77,1207.95 2128.36,1207.95 2128.94,1207.95 2129.53,1207.95 2130.12,1207.95 2130.7,1207.95 2131.29,1207.95 2131.88,1207.95 2132.46,1207.95 2133.05,1207.95 2133.63,1207.95 2134.22,1207.95 2134.81,1207.95 2135.39,1207.95 2135.98,1207.95 2136.57,1207.95 2137.15,1207.95 2137.74,1207.95 2138.33,1207.95 2138.91,1207.95 2139.5,1207.95 2140.09,1207.95 2140.67,1207.95 2141.26,1207.95 2141.84,1207.95 2142.43,1207.95 2143.02,1207.95 2143.6,1207.95 2144.19,1207.95 2144.78,1207.95 2145.36,1207.95 2145.95,1207.95 2146.54,1207.95 2147.12,1207.95 2147.71,1207.95 2148.3,1207.95 2148.88,1207.95 2149.47,1207.95 2150.05,1207.95 2150.64,1207.95 2151.23,1207.95 2151.81,1207.95 2152.4,1207.95 2152.99,1207.95 2153.57,1207.95 2154.16,1207.95 2154.75,1207.95 2155.33,1207.95 2155.92,1207.95 2156.5,1207.95 2157.09,1207.95 2157.68,1207.95 2158.26,1207.95 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1207.71 L986.612 1207.71 L987.198 1207.71 L987.785 1207.71 L988.371 1207.71 L988.957 1207.71 L989.544 1207.71 L990.13 1207.71 L990.717 1207.71 L991.303 1207.71 L991.889 1207.71 L992.476 1207.71 L993.062 1207.71 L993.649 1207.71 L994.235 1207.71 L994.822 1207.71 L995.408 1207.71 L995.994 1207.71 L996.581 1207.71 L997.167 1207.71 L997.754 1207.71 L998.34 1207.71 L998.926 1207.71 L999.513 1207.71 L1000.1 1207.71 L1000.69 1207.71 L1001.27 1207.71 L1001.86 1207.71 L1002.44 1207.71 L1003.03 1207.71 L1003.62 1207.71 L1004.2 1207.71 L1004.79 1207.71 L1005.38 1207.71 L1005.96 1207.71 L1006.55 1207.71 L1007.14 1207.71 L1007.72 1207.71 L1008.31 1207.71 L1008.9 1207.71 L1009.48 1207.71 L1010.07 1207.71 L1010.65 1207.71 L1011.24 1207.71 L1011.83 1207.71 L1012.41 1207.71 L1013 1207.71 L1013.59 1207.71 L1014.17 1207.71 L1014.76 1207.71 L1015.35 1207.71 L1015.93 1207.71 L1016.52 1207.71 L1017.11 1207.71 L1017.69 1207.71 L1018.28 1207.71 L1018.86 1207.71 L1019.45 1207.71 L1020.04 1207.71 L1020.62 1207.71 L1021.21 1207.71 L1021.8 1207.71 L1022.38 1207.71 L1022.97 1207.71 L1023.56 1207.71 L1024.14 1207.71 L1024.73 1207.71 L1025.32 1207.71 L1025.9 1207.71 L1026.49 1207.71 L1027.07 1207.71 L1027.66 1207.71 L1028.25 1207.71 L1028.83 1207.71 L1029.42 1207.71 L1030.01 1207.71 L1030.59 1207.71 L1031.18 1207.71 L1031.77 1207.71 L1032.35 1207.71 L1032.94 1207.71 L1033.52 1207.71 L1034.11 1207.71 L1034.7 1207.71 L1035.28 1207.71 L1035.87 1207.71 L1036.46 1207.71 L1037.04 1207.71 L1037.63 1207.71 L1038.22 1207.71 L1038.8 1207.71 L1039.39 1207.71 L1039.98 1207.71 L1040.56 1207.71 L1041.15 1207.71 L1041.73 1207.71 L1042.32 1207.71 L1042.91 1207.71 L1043.49 1207.71 L1044.08 1207.71 L1044.67 1207.71 L1045.25 1207.71 L1045.84 1207.71 L1046.43 1207.71 L1047.01 1207.71 L1047.6 1207.71 L1048.19 1207.71 L1048.77 1207.71 L1049.36 1207.71 L1049.94 1207.71 L1050.53 1207.71 L1051.12 1207.71 L1051.7 1207.71 L1052.29 1207.71 L1052.88 1207.71 L1053.46 1207.71 L1054.05 1207.71 L1054.64 1207.71 L1055.22 1207.71 L1055.81 1207.71 L1056.39 1207.71 L1056.98 1207.71 L1057.57 1207.71 L1058.15 1207.71 L1058.74 1207.71 L1059.33 1207.71 L1059.91 1207.71 L1060.5 1207.71 L1061.09 1207.71 L1061.67 1207.71 L1062.26 1207.71 L1062.85 1207.71 L1063.43 1207.71 L1064.02 1207.71 L1064.6 1207.71 L1065.19 1207.71 L1065.78 1207.71 L1066.36 1207.71 L1066.95 1207.71 L1067.54 1207.71 L1068.12 1207.71 L1068.71 1207.71 L1069.3 1207.71 L1069.88 1207.71 L1070.47 1207.71 L1071.06 1207.71 L1071.64 1207.71 L1072.23 1207.71 L1072.81 1207.71 L1073.4 1207.71 L1073.99 1207.71 L1074.57 1207.71 L1075.16 1207.71 L1075.75 1207.71 L1076.33 1207.71 L1076.92 1207.71 L1077.51 1207.71 L1078.09 1207.71 L1078.68 1207.71 L1079.26 1207.71 L1079.85 1207.71 L1080.44 1207.71 L1081.02 1207.71 L1081.61 1207.71 L1082.2 1207.71 L1082.78 1207.71 L1083.37 1207.71 L1083.96 1207.71 L1084.54 1207.71 L1085.13 1207.71 L1085.72 1207.71 L1086.3 1207.71 L1086.89 1207.71 L1087.47 1207.71 L1088.06 1207.71 L1088.65 1207.71 L1089.23 1207.71 L1089.82 1207.71 L1090.41 1207.71 L1090.99 1207.71 L1091.58 1207.71 L1092.17 1207.71 L1092.75 1207.71 L1093.34 1207.71 L1093.93 1207.71 L1094.51 1207.71 L1095.1 1207.71 L1095.68 1207.71 L1096.27 1207.71 L1096.86 1207.71 L1097.44 1207.71 L1098.03 1207.71 L1098.62 1207.71 L1099.2 1207.71 L1099.79 1207.71 L1100.38 1207.71 L1100.96 1207.71 L1101.55 1207.71 L1102.14 1207.71 L1102.72 1207.71 L1103.31 1207.71 L1103.89 1207.71 L1104.48 1207.71 L1105.07 1207.71 L1105.65 1207.71 L1106.24 1207.71 L1106.83 1207.71 L1107.41 1207.71 L1108 1207.71 L1108.59 1207.71 L1109.17 1207.71 L1109.76 1207.71 L1110.34 1207.71 L1110.93 1207.71 L1111.52 1207.71 L1112.1 1207.71 L1112.69 1207.71 L1113.28 1207.71 L1113.86 1207.71 L1114.45 1207.71 L1115.04 1207.71 L1115.62 1207.71 L1116.21 1207.71 L1116.8 1207.71 L1117.38 1207.71 L1117.97 1207.71 L1118.55 1207.71 L1119.14 1207.71 L1119.73 1207.71 L1120.31 1207.71 L1120.9 1207.71 L1121.49 1207.71 L1122.07 1207.71 L1122.66 1207.71 L1123.25 1207.71 L1123.83 1207.71 L1124.42 1207.71 L1125.01 1207.71 L1125.59 1207.71 L1126.18 1207.71 L1126.76 1207.71 L1127.35 1207.71 L1127.94 1207.71 L1128.52 1207.71 L1129.11 1207.71 L1129.7 1207.71 L1130.28 1207.71 L1130.87 1207.71 L1131.46 1207.71 L1132.04 1207.71 L1132.63 1207.71 L1133.21 1207.71 L1133.8 1207.71 L1134.39 1207.71 L1134.97 1207.71 L1135.56 1207.71 L1136.15 1207.71 L1136.73 1207.71 L1137.32 1207.71 L1137.91 1207.71 L1138.49 1207.71 L1139.08 1207.71 L1139.67 1207.71 L1140.25 1207.71 L1140.84 1207.71 L1141.42 1207.71 L1142.01 1207.71 L1142.6 1207.71 L1143.18 1207.71 L1143.77 1207.71 L1144.36 1207.71 L1144.94 1207.71 L1145.53 1207.71 L1146.12 1207.71 L1146.7 1207.71 L1147.29 1207.71 L1147.88 1207.71 L1148.46 1207.71 L1149.05 1207.71 L1149.63 1207.71 L1150.22 1207.71 L1150.81 1207.71 L1151.39 1207.71 L1151.98 1207.71 L1152.57 1207.71 L1153.15 1207.71 L1153.74 1207.71 L1154.33 1207.71 L1154.91 1207.71 L1155.5 1207.71 L1156.09 1207.71 L1156.67 1207.71 L1157.26 1207.71 L1157.84 1207.71 L1158.43 1207.71 L1159.02 1207.71 L1159.6 1207.71 L1160.19 1207.71 L1160.78 1207.71 L1161.36 1207.71 L1161.95 1207.71 L1162.54 1207.71 L1163.12 1207.71 L1163.71 1207.71 L1164.29 1207.71 L1164.88 1207.71 L1165.47 1207.71 L1166.05 1207.71 L1166.64 1207.71 L1167.23 1207.71 L1167.81 1207.71 L1168.4 1207.71 L1168.99 1207.71 L1169.57 1207.71 L1170.16 1207.71 L1170.75 1207.71 L1171.33 1207.71 L1171.92 1207.71 L1172.5 1207.71 L1173.09 1207.71 L1173.68 1207.71 L1174.26 1207.71 L1174.85 1207.71 L1175.44 1207.71 L1176.02 1207.71 L1176.61 1207.71 L1177.2 1207.71 L1177.78 1207.71 L1178.37 1207.71 L1178.96 1207.71 L1179.54 1207.71 L1180.13 1207.71 L1180.71 1207.71 L1181.3 1207.71 L1181.89 1207.71 L1182.47 1207.71 L1183.06 1207.71 L1183.65 1207.71 L1184.23 1207.71 L1184.82 1207.71 L1185.41 1207.71 L1185.99 1207.71 L1186.58 1207.71 L1187.16 1207.71 L1187.75 1207.71 L1188.34 1207.71 L1188.92 1207.71 L1189.51 1207.71 L1190.1 1207.71 L1190.68 1207.71 L1191.27 1207.71 L1191.86 1207.71 L1192.44 1207.71 L1193.03 1207.71 L1193.62 1207.71 L1194.2 1207.71 L1194.79 1207.71 L1195.37 1207.71 L1195.96 1207.71 L1196.55 1207.71 L1197.13 1207.71 L1197.72 1207.71 L1198.31 1207.71 L1198.89 1207.71 L1199.48 1207.71 L1200.07 1207.71 L1200.65 1207.71 L1201.24 1207.71 L1201.83 1207.71 L1202.41 1207.71 L1203 1207.71 L1203.58 1207.71 L1204.17 1207.71 L1204.76 1207.71 L1205.34 1207.71 L1205.93 1207.71 L1206.52 1207.71 L1207.1 1207.71 L1207.69 1207.71 L1208.28 1207.71 L1208.86 1207.71 L1209.45 1207.71 L1210.03 1207.71 L1210.62 1207.71 L1211.21 1207.71 L1211.79 1207.71 L1212.38 1207.71 L1212.97 1207.71 L1213.55 1207.71 L1214.14 1207.71 L1214.73 1207.71 L1215.31 1207.71 L1215.9 1207.71 L1216.49 1207.71 L1217.07 1207.71 L1217.66 1207.71 L1218.24 1207.71 L1218.83 1207.71 L1219.42 1207.71 L1220 1207.71 L1220.59 1207.71 L1221.18 1207.71 L1221.76 1207.71 L1222.35 1207.71 L1222.94 1207.71 L1223.52 1207.71 L1224.11 1207.71 L1224.7 1207.71 L1225.28 1207.71 L1225.87 1207.71 L1226.45 1207.71 L1227.04 1207.71 L1227.63 1207.71 L1228.21 1207.71 L1228.8 1207.71 L1229.39 1207.71 L1229.97 1207.71 L1230.56 1207.71 L1231.15 1207.71 L1231.73 1207.71 L1232.32 1207.71 L1232.91 1207.71 L1233.49 1207.71 L1234.08 1207.71 L1234.66 1207.71 L1235.25 1207.71 L1235.84 1207.71 L1236.42 1207.71 L1237.01 1207.71 L1237.6 1207.71 L1238.18 1207.71 L1238.77 1207.71 L1239.36 1207.71 L1239.94 1207.71 L1240.53 1207.71 L1241.11 1207.71 L1241.7 1207.71 L1242.29 1207.71 L1242.87 1207.71 L1243.46 1207.71 L1244.05 1207.71 L1244.63 1207.71 L1245.22 1207.71 L1245.81 1207.71 L1246.39 1207.71 L1246.98 1207.71 L1247.57 1207.71 L1248.15 1207.71 L1248.74 1207.71 L1249.32 1207.71 L1249.91 1207.71 L1250.5 1207.71 L1251.08 1207.71 L1251.67 1207.71 L1252.26 1207.71 L1252.84 1207.71 L1253.43 1207.71 L1254.02 1207.71 L1254.6 1207.71 L1255.19 1207.71 L1255.78 1207.71 L1256.36 1207.71 L1256.95 1207.71 L1257.53 1207.71 L1258.12 1207.71 L1258.71 1207.71 L1259.29 1207.71 L1259.88 1207.71 L1260.47 1207.71 L1261.05 1207.71 L1261.64 1207.71 L1262.23 1207.71 L1262.81 1207.71 L1263.4 1207.71 L1263.98 1207.71 L1264.57 1207.71 L1265.16 1207.71 L1265.74 1207.71 L1266.33 1207.71 L1266.92 1207.71 L1267.5 1207.71 L1268.09 1207.71 L1268.68 1207.71 L1269.26 1207.71 L1269.85 1207.71 L1270.44 1207.71 L1271.02 1207.71 L1271.61 1207.71 L1272.19 1207.71 L1272.78 1207.71 L1273.37 1207.71 L1273.95 1207.71 L1274.54 1207.71 L1275.13 1207.71 L1275.71 1207.71 L1276.3 1207.71 L1276.89 1207.71 L1277.47 1207.71 L1278.06 1207.71 L1278.65 1207.71 L1279.23 1207.71 L1279.82 1207.71 L1280.4 1207.71 L1280.99 1207.71 L1281.58 1207.71 L1282.16 1207.71 L1282.75 1207.71 L1283.34 1207.71 L1283.92 1207.71 L1284.51 1207.71 L1285.1 1207.71 L1285.68 1207.71 L1286.27 1207.71 L1286.86 1207.71 L1287.44 1207.71 L1288.03 1207.71 L1288.61 1207.71 L1289.2 1207.71 L1289.79 1207.71 L1290.37 1207.71 L1290.96 1207.71 L1291.55 1207.71 L1292.13 1207.71 L1292.72 1207.71 L1293.31 1207.71 L1293.89 1207.71 L1294.48 1207.71 L1295.06 1207.71 L1295.65 1207.71 L1296.24 1207.71 L1296.82 1207.71 L1297.41 1207.71 L1298 1207.71 L1298.58 1207.71 L1299.17 1207.71 L1299.76 1207.71 L1300.34 1207.71 L1300.93 1207.71 L1301.52 1207.71 L1302.1 1207.71 L1302.69 1207.71 L1303.27 1207.71 L1303.86 1207.71 L1304.45 1207.71 L1305.03 1207.71 L1305.62 1207.71 L1306.21 1207.71 L1306.79 1207.71 L1307.38 1207.71 L1307.97 1207.71 L1308.55 1207.71 L1309.14 1207.71 L1309.73 1207.71 L1310.31 1207.71 L1310.9 1207.71 L1311.48 1207.71 L1312.07 1207.71 L1312.66 1207.71 L1313.24 1207.71 L1313.83 1207.71 L1314.42 1207.71 L1315 1207.71 L1315.59 1207.71 L1316.18 1207.71 L1316.76 1207.71 L1317.35 1207.71 L1317.93 1207.71 L1318.52 1207.71 L1319.11 1207.71 L1319.69 1207.71 L1320.28 1207.71 L1320.87 1207.71 L1321.45 1207.71 L1322.04 1207.71 L1322.63 1207.71 L1323.21 1207.71 L1323.8 1207.71 L1324.39 1207.71 L1324.97 1207.71 L1325.56 1207.71 L1326.14 1207.71 L1326.73 1207.71 L1327.32 1207.71 L1327.9 1207.71 L1328.49 1207.71 L1329.08 1207.71 L1329.66 1207.71 L1330.25 1207.71 L1330.84 1207.71 L1331.42 1207.71 L1332.01 1207.71 L1332.6 1207.71 L1333.18 1207.71 L1333.77 1207.71 L1334.35 1207.71 L1334.94 1207.71 L1335.53 1207.71 L1336.11 1207.71 L1336.7 1207.71 L1337.29 1207.71 L1337.87 1207.71 L1338.46 1207.71 L1339.05 1207.71 L1339.63 1207.71 L1340.22 1207.71 L1340.8 1207.71 L1341.39 1207.71 L1341.98 1207.71 L1342.56 1207.71 L1343.15 1207.71 L1343.74 1207.71 L1344.32 1207.71 L1344.91 1207.71 L1345.5 1207.71 L1346.08 1207.71 L1346.67 1207.71 L1347.26 1207.71 L1347.84 1207.71 L1348.43 1207.71 L1349.01 1207.71 L1349.6 1207.71 L1350.19 1207.71 L1350.77 1207.71 L1351.36 1207.71 L1351.95 1207.71 L1352.53 1207.71 L1353.12 1207.71 L1353.71 1207.71 L1354.29 1207.71 L1354.88 1207.71 L1355.47 1207.71 L1356.05 1207.71 L1356.64 1207.71 L1357.22 1207.71 L1357.81 1207.71 L1358.4 1207.71 L1358.98 1207.71 L1359.57 1207.71 L1360.16 1207.71 L1360.74 1207.71 L1361.33 1207.71 L1361.92 1207.71 L1362.5 1207.71 L1363.09 1207.71 L1363.68 1207.71 L1364.26 1207.71 L1364.85 1207.71 L1365.43 1207.71 L1366.02 1207.71 L1366.61 1207.71 L1367.19 1207.71 L1367.78 1207.71 L1368.37 1207.71 L1368.95 1207.71 L1369.54 1207.71 L1370.13 1207.71 L1370.71 1207.71 L1371.3 1207.71 L1371.88 1207.71 L1372.47 1207.71 L1373.06 1207.71 L1373.64 1207.71 L1374.23 1207.71 L1374.82 1207.71 L1375.4 1207.71 L1375.99 1207.71 L1376.58 1207.71 L1377.16 1207.71 L1377.75 1207.71 L1378.34 1207.71 L1378.92 1207.71 L1379.51 1207.71 L1380.09 1207.71 L1380.68 1207.71 L1381.27 1207.71 L1381.85 1207.71 L1382.44 1207.71 L1383.03 1207.71 L1383.61 1207.71 L1384.2 1207.71 L1384.79 1207.71 L1385.37 1207.71 L1385.96 1207.71 L1386.55 1207.71 L1387.13 1207.71 L1387.72 1207.71 L1388.3 1207.71 L1388.89 1207.71 L1389.48 1207.71 L1390.06 1207.71 L1390.65 1207.71 L1391.24 1207.71 L1391.82 1207.71 L1392.41 1207.71 L1393 1207.71 L1393.58 1207.71 L1394.17 1207.71 L1394.75 1207.71 L1395.34 1207.71 L1395.93 1207.71 L1396.51 1207.71 L1397.1 1207.71 L1397.69 1207.71 L1398.27 1207.71 L1398.86 1207.71 L1399.45 1207.71 L1400.03 1207.71 L1400.62 1207.71 L1401.21 1207.71 L1401.79 1207.71 L1402.38 1207.71 L1402.96 1207.71 L1403.55 1207.71 L1404.14 1207.71 L1404.72 1207.71 L1405.31 1207.71 L1405.9 1207.71 L1406.48 1207.71 L1407.07 1207.71 L1407.66 1207.71 L1408.24 1207.71 L1408.83 1207.71 L1409.42 1207.71 L1410 1207.71 L1410.59 1207.71 L1411.17 1207.71 L1411.76 1207.71 L1412.35 1207.71 L1412.93 1207.71 L1413.52 1207.71 L1414.11 1207.71 L1414.69 1207.71 L1415.28 1207.71 L1415.87 1207.71 L1416.45 1207.71 L1417.04 1207.71 L1417.63 1207.71 L1418.21 1207.71 L1418.8 1207.71 L1419.38 1207.71 L1419.97 1207.71 L1420.56 1207.71 L1421.14 1207.71 L1421.73 1207.71 L1422.32 1207.71 L1422.9 1207.71 L1423.49 1207.71 L1424.08 1207.71 L1424.66 1207.71 L1425.25 1207.71 L1425.83 1207.71 L1426.42 1207.71 L1427.01 1207.71 L1427.59 1207.71 L1428.18 1207.71 L1428.77 1207.71 L1429.35 1207.71 L1429.94 1207.71 L1430.53 1207.71 L1431.11 1207.71 L1431.7 1207.71 L1432.29 1207.71 L1432.87 1207.71 L1433.46 1207.71 L1434.04 1207.71 L1434.63 1207.71 L1435.22 1207.71 L1435.8 1207.71 L1436.39 1207.71 L1436.98 1207.71 L1437.56 1207.71 L1438.15 1207.71 L1438.74 1207.71 L1439.32 1207.71 L1439.91 1207.71 L1440.5 1207.71 L1441.08 1207.71 L1441.67 1207.71 L1442.25 1207.71 L1442.84 1207.71 L1443.43 1207.71 L1444.01 1207.71 L1444.6 1207.71 L1445.19 1207.71 L1445.77 1207.71 L1446.36 1207.71 L1446.95 1207.71 L1447.53 1207.71 L1448.12 1207.71 L1448.7 1207.71 L1449.29 1207.71 L1449.88 1207.71 L1450.46 1207.71 L1451.05 1207.71 L1451.64 1207.71 L1452.22 1207.71 L1452.81 1207.71 L1453.4 1207.71 L1453.98 1207.71 L1454.57 1207.71 L1455.16 1207.71 L1455.74 1207.71 L1456.33 1207.71 L1456.91 1207.71 L1457.5 1207.71 L1458.09 1207.71 L1458.67 1207.71 L1459.26 1207.71 L1459.85 1207.71 L1460.43 1207.71 L1461.02 1207.71 L1461.61 1207.71 L1462.19 1207.71 L1462.78 1207.71 L1463.37 1207.71 L1463.95 1207.71 L1464.54 1207.71 L1465.12 1207.71 L1465.71 1207.71 L1466.3 1207.71 L1466.88 1207.71 L1467.47 1207.71 L1468.06 1207.71 L1468.64 1207.71 L1469.23 1207.71 L1469.82 1207.71 L1470.4 1207.71 L1470.99 1207.71 L1471.57 1207.71 L1472.16 1207.71 L1472.75 1207.71 L1473.33 1207.71 L1473.92 1207.71 L1474.51 1207.71 L1475.09 1207.71 L1475.68 1207.71 L1476.27 1207.71 L1476.85 1207.71 L1477.44 1207.71 L1478.03 1207.71 L1478.61 1207.71 L1479.2 1207.71 L1479.78 1207.71 L1480.37 1207.71 L1480.96 1207.71 L1481.54 1207.71 L1482.13 1207.71 L1482.72 1207.71 L1483.3 1207.71 L1483.89 1207.71 L1484.48 1207.71 L1485.06 1207.71 L1485.65 1207.71 L1486.24 1207.71 L1486.82 1207.71 L1487.41 1207.71 L1487.99 1207.71 L1488.58 1207.71 L1489.17 1207.71 L1489.75 1207.71 L1490.34 1207.71 L1490.93 1207.71 L1491.51 1207.71 L1492.1 1207.71 L1492.69 1207.71 L1493.27 1207.71 L1493.86 1207.71 L1494.45 1207.71 L1495.03 1207.71 L1495.62 1207.71 L1496.2 1207.71 L1496.79 1207.71 L1497.38 1207.71 L1497.96 1207.71 L1498.55 1207.71 L1499.14 1207.71 L1499.72 1207.71 L1500.31 1207.71 L1500.9 1207.71 L1501.48 1207.71 L1502.07 1207.71 L1502.65 1207.71 L1503.24 1207.71 L1503.83 1207.71 L1504.41 1207.71 L1505 1207.71 L1505.59 1207.71 L1506.17 1207.71 L1506.76 1207.71 L1507.35 1207.71 L1507.93 1207.71 L1508.52 1207.71 L1509.11 1207.71 L1509.69 1207.71 L1510.28 1207.71 L1510.86 1207.71 L1511.45 1207.71 L1512.04 1207.71 L1512.62 1207.71 L1513.21 1207.71 L1513.8 1207.71 L1514.38 1207.71 L1514.97 1207.71 L1515.56 1207.71 L1516.14 1207.71 L1516.73 1207.71 L1517.32 1207.71 L1517.9 1207.71 L1518.49 1207.71 L1519.07 1207.71 L1519.66 1207.71 L1520.25 1207.71 L1520.83 1207.71 L1521.42 1207.71 L1522.01 1207.71 L1522.59 1207.71 L1523.18 1207.71 L1523.77 1207.71 L1524.35 1207.71 L1524.94 1207.71 L1525.52 1207.71 L1526.11 1207.71 L1526.7 1207.71 L1527.28 1207.71 L1527.87 1207.71 L1528.46 1207.71 L1529.04 1207.71 L1529.63 1207.71 L1530.22 1207.71 L1530.8 1207.71 L1531.39 1207.71 L1531.98 1207.71 L1532.56 1207.71 L1533.15 1207.71 L1533.73 1207.71 L1534.32 1207.71 L1534.91 1207.71 L1535.49 1207.71 L1536.08 1207.71 L1536.67 1207.71 L1537.25 1207.71 L1537.84 1207.71 L1538.43 1207.71 L1539.01 1207.71 L1539.6 1207.71 L1540.19 1207.71 L1540.77 1207.71 L1541.36 1207.71 L1541.94 1207.71 L1542.53 1207.71 L1543.12 1207.71 L1543.7 1207.71 L1544.29 1207.71 L1544.88 1207.71 L1545.46 1207.71 L1546.05 1207.71 L1546.64 1207.71 L1547.22 1207.71 L1547.81 1207.71 L1548.4 1207.71 L1548.98 1207.71 L1549.57 1207.71 L1550.15 1207.71 L1550.74 1207.71 L1551.33 1207.71 L1551.91 1207.71 L1552.5 1207.71 L1553.09 1207.71 L1553.67 1207.71 L1554.26 1207.71 L1554.85 1207.71 L1555.43 1207.71 L1556.02 1207.71 L1556.6 1207.71 L1557.19 1207.71 L1557.78 1207.71 L1558.36 1207.71 L1558.95 1207.71 L1559.54 1207.71 L1560.12 1207.71 L1560.71 1207.71 L1561.3 1207.71 L1561.88 1207.71 L1562.47 1207.71 L1563.06 1207.71 L1563.64 1207.71 L1564.23 1207.71 L1564.81 1207.71 L1565.4 1207.71 L1565.99 1207.71 L1566.57 1207.71 L1567.16 1207.71 L1567.75 1207.71 L1568.33 1207.71 L1568.92 1207.71 L1569.51 1207.71 L1570.09 1207.71 L1570.68 1207.71 L1571.27 1207.71 L1571.85 1207.71 L1572.44 1207.71 L1573.02 1207.71 L1573.61 1207.71 L1574.2 1207.71 L1574.78 1207.71 L1575.37 1207.71 L1575.96 1207.71 L1576.54 1207.71 L1577.13 1207.71 L1577.72 1207.71 L1578.3 1207.71 L1578.89 1207.71 L1579.47 1207.71 L1580.06 1207.71 L1580.65 1207.71 L1581.23 1207.71 L1581.82 1207.71 L1582.41 1207.71 L1582.99 1207.71 L1583.58 1207.71 L1584.17 1207.71 L1584.75 1207.71 L1585.34 1207.71 L1585.93 1207.71 L1586.51 1207.71 L1587.1 1207.71 L1587.68 1207.71 L1588.27 1207.71 L1588.86 1207.71 L1589.44 1207.71 L1590.03 1207.71 L1590.62 1207.71 L1591.2 1207.71 L1591.79 1207.71 L1592.38 1207.71 L1592.96 1207.71 L1593.55 1207.71 L1594.14 1207.71 L1594.72 1207.71 L1595.31 1207.71 L1595.89 1207.71 L1596.48 1207.71 L1597.07 1207.71 L1597.65 1207.71 L1598.24 1207.71 L1598.83 1207.71 L1599.41 1207.71 L1600 1207.71 L1600.59 1207.71 L1601.17 1207.71 L1601.76 1207.71 L1602.34 1207.71 L1602.93 1207.71 L1603.52 1207.71 L1604.1 1207.71 L1604.69 1207.71 L1605.28 1207.71 L1605.86 1207.71 L1606.45 1207.71 L1607.04 1207.71 L1607.62 1207.71 L1608.21 1207.71 L1608.8 1207.71 L1609.38 1207.71 L1609.97 1207.71 L1610.55 1207.71 L1611.14 1207.71 L1611.73 1207.71 L1612.31 1207.71 L1612.9 1207.71 L1613.49 1207.71 L1614.07 1207.71 L1614.66 1207.71 L1615.25 1207.71 L1615.83 1207.71 L1616.42 1207.71 L1617.01 1207.71 L1617.59 1207.71 L1618.18 1207.71 L1618.76 1207.71 L1619.35 1207.71 L1619.94 1207.71 L1620.52 1207.71 L1621.11 1207.71 L1621.7 1207.71 L1622.28 1207.71 L1622.87 1207.71 L1623.46 1207.71 L1624.04 1207.71 L1624.63 1207.71 L1625.22 1207.71 L1625.8 1207.71 L1626.39 1207.71 L1626.97 1207.71 L1627.56 1207.71 L1628.15 1207.71 L1628.73 1207.71 L1629.32 1207.71 L1629.91 1207.71 L1630.49 1207.71 L1631.08 1207.71 L1631.67 1207.71 L1632.25 1207.71 L1632.84 1207.71 L1633.42 1207.71 L1634.01 1207.71 L1634.6 1207.71 L1635.18 1207.71 L1635.77 1207.71 L1636.36 1207.71 L1636.94 1207.71 L1637.53 1207.71 L1638.12 1207.71 L1638.7 1207.71 L1639.29 1207.71 L1639.88 1207.71 L1640.46 1207.71 L1641.05 1207.71 L1641.63 1207.71 L1642.22 1207.71 L1642.81 1207.71 L1643.39 1207.71 L1643.98 1207.71 L1644.57 1207.71 L1645.15 1207.71 L1645.74 1207.71 L1646.33 1207.71 L1646.91 1207.71 L1647.5 1207.71 L1648.09 1207.71 L1648.67 1207.71 L1649.26 1207.71 L1649.84 1207.71 L1650.43 1207.71 L1651.02 1207.71 L1651.6 1207.71 L1652.19 1207.71 L1652.78 1207.71 L1653.36 1207.71 L1653.95 1207.71 L1654.54 1207.71 L1655.12 1207.71 L1655.71 1207.71 L1656.29 1207.71 L1656.88 1207.71 L1657.47 1207.71 L1658.05 1207.71 L1658.64 1207.71 L1659.23 1207.71 L1659.81 1207.71 L1660.4 1207.71 L1660.99 1207.71 L1661.57 1207.71 L1662.16 1207.71 L1662.75 1207.71 L1663.33 1207.71 L1663.92 1207.71 L1664.5 1207.71 L1665.09 1207.71 L1665.68 1207.71 L1666.26 1207.71 L1666.85 1207.71 L1667.44 1207.71 L1668.02 1207.71 L1668.61 1207.71 L1669.2 1207.71 L1669.78 1207.71 L1670.37 1207.71 L1670.96 1207.71 L1671.54 1207.71 L1672.13 1207.71 L1672.71 1207.71 L1673.3 1207.71 L1673.89 1207.71 L1674.47 1207.71 L1675.06 1207.71 L1675.65 1207.71 L1676.23 1207.71 L1676.82 1207.71 L1677.41 1207.71 L1677.99 1207.71 L1678.58 1207.71 L1679.17 1207.71 L1679.75 1207.71 L1680.34 1207.71 L1680.92 1207.71 L1681.51 1207.71 L1682.1 1207.71 L1682.68 1207.71 L1683.27 1207.71 L1683.86 1207.71 L1684.44 1207.71 L1685.03 1207.71 L1685.62 1207.71 L1686.2 1207.71 L1686.79 1207.71 L1687.37 1207.71 L1687.96 1207.71 L1688.55 1207.71 L1689.13 1207.71 L1689.72 1207.71 L1690.31 1207.71 L1690.89 1207.71 L1691.48 1207.71 L1692.07 1207.71 L1692.65 1207.71 L1693.24 1207.71 L1693.83 1207.71 L1694.41 1207.71 L1695 1207.71 L1695.58 1207.71 L1696.17 1207.71 L1696.76 1207.71 L1697.34 1207.71 L1697.93 1207.71 L1698.52 1207.71 L1699.1 1207.71 L1699.69 1207.71 L1700.28 1207.71 L1700.86 1207.71 L1701.45 1207.71 L1702.04 1207.71 L1702.62 1207.71 L1703.21 1207.71 L1703.79 1207.71 L1704.38 1207.71 L1704.97 1207.71 L1705.55 1207.71 L1706.14 1207.71 L1706.73 1207.71 L1707.31 1207.71 L1707.9 1207.71 L1708.49 1207.71 L1709.07 1207.71 L1709.66 1207.71 L1710.24 1207.71 L1710.83 1207.71 L1711.42 1207.71 L1712 1207.71 L1712.59 1207.71 L1713.18 1207.71 L1713.76 1207.71 L1714.35 1207.71 L1714.94 1207.71 L1715.52 1207.71 L1716.11 1207.71 L1716.7 1207.71 L1717.28 1207.71 L1717.87 1207.71 L1718.45 1207.71 L1719.04 1207.71 L1719.63 1207.71 L1720.21 1207.71 L1720.8 1207.71 L1721.39 1207.71 L1721.97 1207.71 L1722.56 1207.71 L1723.15 1207.71 L1723.73 1207.71 L1724.32 1207.71 L1724.91 1207.71 L1725.49 1207.71 L1726.08 1207.71 L1726.66 1207.71 L1727.25 1207.71 L1727.84 1207.71 L1728.42 1207.71 L1729.01 1207.71 L1729.6 1207.71 L1730.18 1207.71 L1730.77 1207.71 L1731.36 1207.71 L1731.94 1207.71 L1732.53 1207.71 L1733.11 1207.71 L1733.7 1207.71 L1734.29 1207.71 L1734.87 1207.71 L1735.46 1207.71 L1736.05 1207.71 L1736.63 1207.71 L1737.22 1207.71 L1737.81 1207.71 L1738.39 1207.71 L1738.98 1207.71 L1739.57 1207.71 L1740.15 1207.71 L1740.74 1207.71 L1741.32 1207.71 L1741.91 1207.71 L1742.5 1207.71 L1743.08 1207.71 L1743.67 1207.71 L1744.26 1207.71 L1744.84 1207.71 L1745.43 1207.71 L1746.02 1207.71 L1746.6 1207.71 L1747.19 1207.71 L1747.78 1207.71 L1748.36 1207.71 L1748.95 1207.71 L1749.53 1207.71 L1750.12 1207.71 L1750.71 1207.71 L1751.29 1207.71 L1751.88 1207.71 L1752.47 1207.71 L1753.05 1207.71 L1753.64 1207.71 L1754.23 1207.71 L1754.81 1207.71 L1755.4 1207.71 L1755.99 1207.71 L1756.57 1207.71 L1757.16 1207.71 L1757.74 1207.71 L1758.33 1207.71 L1758.92 1207.71 L1759.5 1207.71 L1760.09 1207.71 L1760.68 1207.71 L1761.26 1207.71 L1761.85 1207.71 L1762.44 1207.71 L1763.02 1207.71 L1763.61 1207.71 L1764.19 1207.71 L1764.78 1207.71 L1765.37 1207.71 L1765.95 1207.71 L1766.54 1207.71 L1767.13 1207.71 L1767.71 1207.71 L1768.3 1207.71 L1768.89 1207.71 L1769.47 1207.71 L1770.06 1207.71 L1770.65 1207.71 L1771.23 1207.71 L1771.82 1207.71 L1772.4 1207.71 L1772.99 1207.71 L1773.58 1207.71 L1774.16 1207.71 L1774.75 1207.71 L1775.34 1207.71 L1775.92 1207.71 L1776.51 1207.71 L1777.1 1207.71 L1777.68 1207.71 L1778.27 1207.71 L1778.86 1207.71 L1779.44 1207.71 L1780.03 1207.71 L1780.61 1207.71 L1781.2 1207.71 L1781.79 1207.71 L1782.37 1207.71 L1782.96 1207.71 L1783.55 1207.71 L1784.13 1207.71 L1784.72 1207.71 L1785.31 1207.71 L1785.89 1207.71 L1786.48 1207.71 L1787.06 1207.71 L1787.65 1207.71 L1788.24 1207.71 L1788.82 1207.71 L1789.41 1207.71 L1790 1207.71 L1790.58 1207.71 L1791.17 1207.71 L1791.76 1207.71 L1792.34 1207.71 L1792.93 1207.71 L1793.52 1207.71 L1794.1 1207.71 L1794.69 1207.71 L1795.27 1207.71 L1795.86 1207.71 L1796.45 1207.71 L1797.03 1207.71 L1797.62 1207.71 L1798.21 1207.71 L1798.79 1207.71 L1799.38 1207.71 L1799.97 1207.71 L1800.55 1207.71 L1801.14 1207.71 L1801.73 1207.71 L1802.31 1207.71 L1802.9 1207.71 L1803.48 1207.71 L1804.07 1207.71 L1804.66 1207.71 L1805.24 1207.71 L1805.83 1207.71 L1806.42 1207.71 L1807 1207.71 L1807.59 1207.71 L1808.18 1207.71 L1808.76 1207.71 L1809.35 1207.71 L1809.94 1207.71 L1810.52 1207.71 L1811.11 1207.71 L1811.69 1207.71 L1812.28 1207.71 L1812.87 1207.71 L1813.45 1207.71 L1814.04 1207.71 L1814.63 1207.71 L1815.21 1207.71 L1815.8 1207.71 L1816.39 1207.71 L1816.97 1207.71 L1817.56 1207.71 L1818.14 1207.71 L1818.73 1207.71 L1819.32 1207.71 L1819.9 1207.71 L1820.49 1207.71 L1821.08 1207.71 L1821.66 1207.71 L1822.25 1207.71 L1822.84 1207.71 L1823.42 1207.71 L1824.01 1207.71 L1824.6 1207.71 L1825.18 1207.71 L1825.77 1207.71 L1826.35 1207.71 L1826.94 1207.71 L1827.53 1207.71 L1828.11 1207.71 L1828.7 1207.71 L1829.29 1207.71 L1829.87 1207.71 L1830.46 1207.71 L1831.05 1207.71 L1831.63 1207.71 L1832.22 1207.71 L1832.81 1207.71 L1833.39 1207.71 L1833.98 1207.71 L1834.56 1207.71 L1835.15 1207.71 L1835.74 1207.71 L1836.32 1207.71 L1836.91 1207.71 L1837.5 1207.71 L1838.08 1207.71 L1838.67 1207.71 L1839.26 1207.71 L1839.84 1207.71 L1840.43 1207.71 L1841.01 1207.71 L1841.6 1207.71 L1842.19 1207.71 L1842.77 1207.71 L1843.36 1207.71 L1843.95 1207.71 L1844.53 1207.71 L1845.12 1207.71 L1845.71 1207.71 L1846.29 1207.71 L1846.88 1207.71 L1847.47 1207.71 L1848.05 1207.71 L1848.64 1207.71 L1849.22 1207.71 L1849.81 1207.71 L1850.4 1207.71 L1850.98 1207.71 L1851.57 1207.71 L1852.16 1207.71 L1852.74 1207.71 L1853.33 1207.71 L1853.92 1207.71 L1854.5 1207.71 L1855.09 1207.71 L1855.68 1207.71 L1856.26 1207.71 L1856.85 1207.71 L1857.43 1207.71 L1858.02 1207.71 L1858.61 1207.71 L1859.19 1207.71 L1859.78 1207.71 L1860.37 1207.71 L1860.95 1207.71 L1861.54 1207.71 L1862.13 1207.71 L1862.71 1207.71 L1863.3 1207.71 L1863.88 1207.71 L1864.47 1207.71 L1865.06 1207.71 L1865.64 1207.71 L1866.23 1207.71 L1866.82 1207.71 L1867.4 1207.71 L1867.99 1207.71 L1868.58 1207.71 L1869.16 1207.71 L1869.75 1207.71 L1870.34 1207.71 L1870.92 1207.71 L1871.51 1207.71 L1872.09 1207.71 L1872.68 1207.71 L1873.27 1207.71 L1873.85 1207.71 L1874.44 1207.71 L1875.03 1207.71 L1875.61 1207.71 L1876.2 1207.71 L1876.79 1207.71 L1877.37 1207.71 L1877.96 1207.71 L1878.55 1207.71 L1879.13 1207.71 L1879.72 1207.71 L1880.3 1207.71 L1880.89 1207.71 L1881.48 1207.71 L1882.06 1207.71 L1882.65 1207.71 L1883.24 1207.71 L1883.82 1207.71 L1884.41 1207.71 L1885 1207.71 L1885.58 1207.71 L1886.17 1207.71 L1886.76 1207.71 L1887.34 1207.71 L1887.93 1207.71 L1888.51 1207.71 L1889.1 1207.71 L1889.69 1207.71 L1890.27 1207.71 L1890.86 1207.71 L1891.45 1207.71 L1892.03 1207.71 L1892.62 1207.71 L1893.21 1207.71 L1893.79 1207.71 L1894.38 1207.71 L1894.96 1207.71 L1895.55 1207.71 L1896.14 1207.71 L1896.72 1207.71 L1897.31 1207.71 L1897.9 1207.71 L1898.48 1207.71 L1899.07 1207.71 L1899.66 1207.71 L1900.24 1207.71 L1900.83 1207.71 L1901.42 1207.71 L1902 1207.71 L1902.59 1207.71 L1903.17 1207.71 L1903.76 1207.71 L1904.35 1207.71 L1904.93 1207.71 L1905.52 1207.71 L1906.11 1207.71 L1906.69 1207.71 L1907.28 1207.71 L1907.87 1207.71 L1908.45 1207.71 L1909.04 1207.71 L1909.63 1207.71 L1910.21 1207.71 L1910.8 1207.71 L1911.38 1207.71 L1911.97 1207.71 L1912.56 1207.71 L1913.14 1207.71 L1913.73 1207.71 L1914.32 1207.71 L1914.9 1207.71 L1915.49 1207.71 L1916.08 1207.71 L1916.66 1207.71 L1917.25 1207.71 L1917.83 1207.71 L1918.42 1207.71 L1919.01 1207.71 L1919.59 1207.71 L1920.18 1207.71 L1920.77 1207.71 L1921.35 1207.71 L1921.94 1207.71 L1922.53 1207.71 L1923.11 1207.71 L1923.7 1207.71 L1924.29 1207.71 L1924.87 1207.71 L1925.46 1207.71 L1926.04 1207.71 L1926.63 1207.71 L1927.22 1207.71 L1927.8 1207.71 L1928.39 1207.71 L1928.98 1207.71 L1929.56 1207.71 L1930.15 1207.71 L1930.74 1207.71 L1931.32 1207.71 L1931.91 1207.71 L1932.5 1207.71 L1933.08 1207.71 L1933.67 1207.71 L1934.25 1207.71 L1934.84 1207.71 L1935.43 1207.71 L1936.01 1207.71 L1936.6 1207.71 L1937.19 1207.71 L1937.77 1207.71 L1938.36 1207.71 L1938.95 1207.71 L1939.53 1207.71 L1940.12 1207.71 L1940.71 1207.71 L1941.29 1207.71 L1941.88 1207.71 L1942.46 1207.71 L1943.05 1207.71 L1943.64 1207.71 L1944.22 1207.71 L1944.81 1207.71 L1945.4 1207.71 L1945.98 1207.71 L1946.57 1207.71 L1947.16 1207.71 L1947.74 1207.71 L1948.33 1207.71 L1948.91 1207.71 L1949.5 1207.71 L1950.09 1207.71 L1950.67 1207.71 L1951.26 1207.71 L1951.85 1207.71 L1952.43 1207.71 L1953.02 1207.71 L1953.61 1207.71 L1954.19 1207.71 L1954.78 1207.71 L1955.37 1207.71 L1955.95 1207.71 L1956.54 1207.71 L1957.12 1207.71 L1957.71 1207.71 L1958.3 1207.71 L1958.88 1207.71 L1959.47 1207.71 L1960.06 1207.71 L1960.64 1207.71 L1961.23 1207.71 L1961.82 1207.71 L1962.4 1207.71 L1962.99 1207.71 L1963.58 1207.71 L1964.16 1207.71 L1964.75 1207.71 L1965.33 1207.71 L1965.92 1207.71 L1966.51 1207.71 L1967.09 1207.71 L1967.68 1207.71 L1968.27 1207.71 L1968.85 1207.71 L1969.44 1207.71 L1970.03 1207.71 L1970.61 1207.71 L1971.2 1207.71 L1971.78 1207.71 L1972.37 1207.71 L1972.96 1207.71 L1973.54 1207.71 L1974.13 1207.71 L1974.72 1207.71 L1975.3 1207.71 L1975.89 1207.71 L1976.48 1207.71 L1977.06 1207.71 L1977.65 1207.71 L1978.24 1207.71 L1978.82 1207.71 L1979.41 1207.71 L1979.99 1207.71 L1980.58 1207.71 L1981.17 1207.71 L1981.75 1207.71 L1982.34 1207.71 L1982.93 1207.71 L1983.51 1207.71 L1984.1 1207.71 L1984.69 1207.71 L1985.27 1207.71 L1985.86 1207.71 L1986.45 1207.71 L1987.03 1207.71 L1987.62 1207.71 L1988.2 1207.71 L1988.79 1207.71 L1989.38 1207.71 L1989.96 1207.71 L1990.55 1207.71 L1991.14 1207.71 L1991.72 1207.71 L1992.31 1207.71 L1992.9 1207.71 L1993.48 1207.71 L1994.07 1207.71 L1994.65 1207.71 L1995.24 1207.71 L1995.83 1207.71 L1996.41 1207.71 L1997 1207.71 L1997.59 1207.71 L1998.17 1207.71 L1998.76 1207.71 L1999.35 1207.71 L1999.93 1207.71 L2000.52 1207.71 L2001.11 1207.71 L2001.69 1207.71 L2002.28 1207.71 L2002.86 1207.71 L2003.45 1207.71 L2004.04 1207.71 L2004.62 1207.71 L2005.21 1207.71 L2005.8 1207.71 L2006.38 1207.71 L2006.97 1207.71 L2007.56 1207.71 L2008.14 1207.71 L2008.73 1207.71 L2009.32 1207.71 L2009.9 1207.71 L2010.49 1207.71 L2011.07 1207.71 L2011.66 1207.71 L2012.25 1207.71 L2012.83 1207.71 L2013.42 1207.71 L2014.01 1207.71 L2014.59 1207.71 L2015.18 1207.71 L2015.77 1207.71 L2016.35 1207.71 L2016.94 1207.71 L2017.53 1207.71 L2018.11 1207.71 L2018.7 1207.71 L2019.28 1207.71 L2019.87 1207.71 L2020.46 1207.71 L2021.04 1207.71 L2021.63 1207.71 L2022.22 1207.71 L2022.8 1207.71 L2023.39 1207.71 L2023.98 1207.71 L2024.56 1207.71 L2025.15 1207.71 L2025.73 1207.71 L2026.32 1207.71 L2026.91 1207.71 L2027.49 1207.71 L2028.08 1207.71 L2028.67 1207.71 L2029.25 1207.71 L2029.84 1207.71 L2030.43 1207.71 L2031.01 1207.71 L2031.6 1207.71 L2032.19 1207.71 L2032.77 1207.71 L2033.36 1207.71 L2033.94 1207.71 L2034.53 1207.71 L2035.12 1207.71 L2035.7 1207.71 L2036.29 1207.71 L2036.88 1207.71 L2037.46 1207.71 L2038.05 1207.71 L2038.64 1207.71 L2039.22 1207.71 L2039.81 1207.71 L2040.4 1207.71 L2040.98 1207.71 L2041.57 1207.71 L2042.15 1207.71 L2042.74 1207.71 L2043.33 1207.71 L2043.91 1207.71 L2044.5 1207.71 L2045.09 1207.71 L2045.67 1207.71 L2046.26 1207.71 L2046.85 1207.71 L2047.43 1207.71 L2048.02 1207.71 L2048.6 1207.71 L2049.19 1207.71 L2049.78 1207.71 L2050.36 1207.71 L2050.95 1207.71 L2051.54 1207.71 L2052.12 1207.71 L2052.71 1207.71 L2053.3 1207.71 L2053.88 1207.71 L2054.47 1207.71 L2055.06 1207.71 L2055.64 1207.71 L2056.23 1207.71 L2056.81 1207.71 L2057.4 1207.71 L2057.99 1207.71 L2058.57 1207.71 L2059.16 1207.71 L2059.75 1207.71 L2060.33 1207.71 L2060.92 1207.71 L2061.51 1207.71 L2062.09 1207.71 L2062.68 1207.71 L2063.27 1207.71 L2063.85 1207.71 L2064.44 1207.71 L2065.02 1207.71 L2065.61 1207.71 L2066.2 1207.71 L2066.78 1207.71 L2067.37 1207.71 L2067.96 1207.71 L2068.54 1207.71 L2069.13 1207.71 L2069.72 1207.71 L2070.3 1207.71 L2070.89 1207.71 L2071.48 1207.71 L2072.06 1207.71 L2072.65 1207.71 L2073.23 1207.71 L2073.82 1207.71 L2074.41 1207.71 L2074.99 1207.71 L2075.58 1207.71 L2076.17 1207.71 L2076.75 1207.71 L2077.34 1207.71 L2077.93 1207.71 L2078.51 1207.71 L2079.1 1207.71 L2079.68 1207.71 L2080.27 1207.71 L2080.86 1207.71 L2081.44 1207.71 L2082.03 1207.71 L2082.62 1207.71 L2083.2 1207.71 L2083.79 1207.71 L2084.38 1207.71 L2084.96 1207.71 L2085.55 1207.71 L2086.14 1207.71 L2086.72 1207.71 L2087.31 1207.71 L2087.89 1207.71 L2088.48 1207.71 L2089.07 1207.71 L2089.65 1207.71 L2090.24 1207.71 L2090.83 1207.71 L2091.41 1207.71 L2092 1207.71 L2092.59 1207.71 L2093.17 1207.71 L2093.76 1207.71 L2094.35 1207.71 L2094.93 1207.71 L2095.52 1207.71 L2096.1 1207.71 L2096.69 1207.71 L2097.28 1207.71 L2097.86 1207.71 L2098.45 1207.71 L2099.04 1207.71 L2099.62 1207.71 L2100.21 1207.71 L2100.8 1207.71 L2101.38 1207.71 L2101.97 1207.71 L2102.55 1207.71 L2103.14 1207.71 L2103.73 1207.71 L2104.31 1207.71 L2104.9 1207.71 L2105.49 1207.71 L2106.07 1207.71 L2106.66 1207.71 L2107.25 1207.71 L2107.83 1207.71 L2108.42 1207.71 L2109.01 1207.71 L2109.59 1207.71 L2110.18 1207.71 L2110.76 1207.71 L2111.35 1207.71 L2111.94 1207.71 L2112.52 1207.71 L2113.11 1207.71 L2113.7 1207.71 L2114.28 1207.71 L2114.87 1207.71 L2115.46 1207.71 L2116.04 1207.71 L2116.63 1207.71 L2117.22 1207.71 L2117.8 1207.71 L2118.39 1207.71 L2118.97 1207.71 L2119.56 1207.71 L2120.15 1207.71 L2120.73 1207.71 L2121.32 1207.71 L2121.91 1207.71 L2122.49 1207.71 L2123.08 1207.71 L2123.67 1207.71 L2124.25 1207.71 L2124.84 1207.71 L2125.42 1207.71 L2126.01 1207.71 L2126.6 1207.71 L2127.18 1207.71 L2127.77 1207.71 L2128.36 1207.71 L2128.94 1207.71 L2129.53 1207.71 L2130.12 1207.71 L2130.7 1207.71 L2131.29 1207.71 L2131.88 1207.71 L2132.46 1207.71 L2133.05 1207.71 L2133.63 1207.71 L2134.22 1207.71 L2134.81 1207.71 L2135.39 1207.71 L2135.98 1207.71 L2136.57 1207.71 L2137.15 1207.71 L2137.74 1207.71 L2138.33 1207.71 L2138.91 1207.71 L2139.5 1207.71 L2140.09 1207.71 L2140.67 1207.71 L2141.26 1207.71 L2141.84 1207.71 L2142.43 1207.71 L2143.02 1207.71 L2143.6 1207.71 L2144.19 1207.71 L2144.78 1207.71 L2145.36 1207.71 L2145.95 1207.71 L2146.54 1207.71 L2147.12 1207.71 L2147.71 1207.71 L2148.3 1207.71 L2148.88 1207.71 L2149.47 1207.71 L2150.05 1207.71 L2150.64 1207.71 L2151.23 1207.71 L2151.81 1207.71 L2152.4 1207.71 L2152.99 1207.71 L2153.57 1207.71 L2154.16 1207.71 L2154.75 1207.71 L2155.33 1207.71 L2155.92 1207.71 L2156.5 1207.71 L2157.09 1207.71 L2157.68 1207.71 L2158.26 1207.71 L2158.26 1207.54 L2157.68 1207.54 L2157.09 1207.54 L2156.5 1207.54 L2155.92 1207.54 L2155.33 1207.54 L2154.75 1207.54 L2154.16 1207.54 L2153.57 1207.54 L2152.99 1207.54 L2152.4 1207.54 L2151.81 1207.54 L2151.23 1207.54 L2150.64 1207.54 L2150.05 1207.54 L2149.47 1207.54 L2148.88 1207.54 L2148.3 1207.54 L2147.71 1207.54 L2147.12 1207.54 L2146.54 1207.54 L2145.95 1207.54 L2145.36 1207.54 L2144.78 1207.54 L2144.19 1207.54 L2143.6 1207.54 L2143.02 1207.54 L2142.43 1207.54 L2141.84 1207.54 L2141.26 1207.54 L2140.67 1207.54 L2140.09 1207.54 L2139.5 1207.54 L2138.91 1207.54 L2138.33 1207.54 L2137.74 1207.54 L2137.15 1207.54 L2136.57 1207.54 L2135.98 1207.54 L2135.39 1207.54 L2134.81 1207.54 L2134.22 1207.54 L2133.63 1207.54 L2133.05 1207.54 L2132.46 1207.54 L2131.88 1207.54 L2131.29 1207.54 L2130.7 1207.54 L2130.12 1207.54 L2129.53 1207.54 L2128.94 1207.54 L2128.36 1207.54 L2127.77 1207.54 L2127.18 1207.54 L2126.6 1207.54 L2126.01 1207.54 L2125.42 1207.54 L2124.84 1207.54 L2124.25 1207.54 L2123.67 1207.54 L2123.08 1207.54 L2122.49 1207.54 L2121.91 1207.54 L2121.32 1207.54 L2120.73 1207.54 L2120.15 1207.54 L2119.56 1207.54 L2118.97 1207.54 L2118.39 1207.54 L2117.8 1207.54 L2117.22 1207.54 L2116.63 1207.54 L2116.04 1207.54 L2115.46 1207.54 L2114.87 1207.54 L2114.28 1207.54 L2113.7 1207.54 L2113.11 1207.54 L2112.52 1207.54 L2111.94 1207.54 L2111.35 1207.54 L2110.76 1207.54 L2110.18 1207.54 L2109.59 1207.54 L2109.01 1207.54 L2108.42 1207.54 L2107.83 1207.54 L2107.25 1207.54 L2106.66 1207.54 L2106.07 1207.54 L2105.49 1207.54 L2104.9 1207.54 L2104.31 1207.54 L2103.73 1207.54 L2103.14 1207.54 L2102.55 1207.54 L2101.97 1207.54 L2101.38 1207.54 L2100.8 1207.54 L2100.21 1207.54 L2099.62 1207.54 L2099.04 1207.54 L2098.45 1207.54 L2097.86 1207.54 L2097.28 1207.54 L2096.69 1207.54 L2096.1 1207.54 L2095.52 1207.54 L2094.93 1207.54 L2094.35 1207.54 L2093.76 1207.54 L2093.17 1207.54 L2092.59 1207.54 L2092 1207.54 L2091.41 1207.54 L2090.83 1207.54 L2090.24 1207.54 L2089.65 1207.54 L2089.07 1207.54 L2088.48 1207.54 L2087.89 1207.54 L2087.31 1207.54 L2086.72 1207.54 L2086.14 1207.54 L2085.55 1207.54 L2084.96 1207.54 L2084.38 1207.54 L2083.79 1207.54 L2083.2 1207.54 L2082.62 1207.54 L2082.03 1207.54 L2081.44 1207.54 L2080.86 1207.54 L2080.27 1207.54 L2079.68 1207.54 L2079.1 1207.54 L2078.51 1207.54 L2077.93 1207.54 L2077.34 1207.54 L2076.75 1207.54 L2076.17 1207.54 L2075.58 1207.54 L2074.99 1207.54 L2074.41 1207.54 L2073.82 1207.54 L2073.23 1207.54 L2072.65 1207.54 L2072.06 1207.54 L2071.48 1207.54 L2070.89 1207.54 L2070.3 1207.54 L2069.72 1207.54 L2069.13 1207.54 L2068.54 1207.54 L2067.96 1207.54 L2067.37 1207.54 L2066.78 1207.54 L2066.2 1207.54 L2065.61 1207.54 L2065.02 1207.54 L2064.44 1207.54 L2063.85 1207.54 L2063.27 1207.54 L2062.68 1207.54 L2062.09 1207.54 L2061.51 1207.54 L2060.92 1207.54 L2060.33 1207.54 L2059.75 1207.54 L2059.16 1207.54 L2058.57 1207.54 L2057.99 1207.54 L2057.4 1207.54 L2056.81 1207.54 L2056.23 1207.54 L2055.64 1207.54 L2055.06 1207.54 L2054.47 1207.54 L2053.88 1207.54 L2053.3 1207.54 L2052.71 1207.54 L2052.12 1207.54 L2051.54 1207.54 L2050.95 1207.54 L2050.36 1207.54 L2049.78 1207.54 L2049.19 1207.54 L2048.6 1207.54 L2048.02 1207.54 L2047.43 1207.54 L2046.85 1207.54 L2046.26 1207.54 L2045.67 1207.54 L2045.09 1207.54 L2044.5 1207.54 L2043.91 1207.54 L2043.33 1207.54 L2042.74 1207.54 L2042.15 1207.54 L2041.57 1207.54 L2040.98 1207.54 L2040.4 1207.54 L2039.81 1207.54 L2039.22 1207.54 L2038.64 1207.54 L2038.05 1207.54 L2037.46 1207.54 L2036.88 1207.54 L2036.29 1207.54 L2035.7 1207.54 L2035.12 1207.54 L2034.53 1207.54 L2033.94 1207.54 L2033.36 1207.54 L2032.77 1207.54 L2032.19 1207.54 L2031.6 1207.54 L2031.01 1207.54 L2030.43 1207.54 L2029.84 1207.54 L2029.25 1207.54 L2028.67 1207.54 L2028.08 1207.54 L2027.49 1207.54 L2026.91 1207.54 L2026.32 1207.54 L2025.73 1207.54 L2025.15 1207.54 L2024.56 1207.54 L2023.98 1207.54 L2023.39 1207.54 L2022.8 1207.54 L2022.22 1207.54 L2021.63 1207.54 L2021.04 1207.54 L2020.46 1207.54 L2019.87 1207.54 L2019.28 1207.54 L2018.7 1207.54 L2018.11 1207.54 L2017.53 1207.54 L2016.94 1207.54 L2016.35 1207.54 L2015.77 1207.54 L2015.18 1207.54 L2014.59 1207.54 L2014.01 1207.54 L2013.42 1207.54 L2012.83 1207.54 L2012.25 1207.54 L2011.66 1207.54 L2011.07 1207.54 L2010.49 1207.54 L2009.9 1207.54 L2009.32 1207.54 L2008.73 1207.54 L2008.14 1207.54 L2007.56 1207.54 L2006.97 1207.54 L2006.38 1207.54 L2005.8 1207.54 L2005.21 1207.54 L2004.62 1207.54 L2004.04 1207.54 L2003.45 1207.54 L2002.86 1207.54 L2002.28 1207.54 L2001.69 1207.54 L2001.11 1207.54 L2000.52 1207.54 L1999.93 1207.54 L1999.35 1207.54 L1998.76 1207.54 L1998.17 1207.54 L1997.59 1207.54 L1997 1207.54 L1996.41 1207.54 L1995.83 1207.54 L1995.24 1207.54 L1994.65 1207.54 L1994.07 1207.54 L1993.48 1207.54 L1992.9 1207.54 L1992.31 1207.54 L1991.72 1207.54 L1991.14 1207.54 L1990.55 1207.54 L1989.96 1207.54 L1989.38 1207.54 L1988.79 1207.54 L1988.2 1207.54 L1987.62 1207.54 L1987.03 1207.54 L1986.45 1207.54 L1985.86 1207.54 L1985.27 1207.54 L1984.69 1207.54 L1984.1 1207.54 L1983.51 1207.54 L1982.93 1207.54 L1982.34 1207.54 L1981.75 1207.54 L1981.17 1207.54 L1980.58 1207.54 L1979.99 1207.54 L1979.41 1207.54 L1978.82 1207.54 L1978.24 1207.54 L1977.65 1207.54 L1977.06 1207.54 L1976.48 1207.54 L1975.89 1207.54 L1975.3 1207.54 L1974.72 1207.54 L1974.13 1207.54 L1973.54 1207.54 L1972.96 1207.54 L1972.37 1207.54 L1971.78 1207.54 L1971.2 1207.54 L1970.61 1207.54 L1970.03 1207.54 L1969.44 1207.54 L1968.85 1207.54 L1968.27 1207.54 L1967.68 1207.54 L1967.09 1207.54 L1966.51 1207.54 L1965.92 1207.54 L1965.33 1207.54 L1964.75 1207.54 L1964.16 1207.54 L1963.58 1207.54 L1962.99 1207.54 L1962.4 1207.54 L1961.82 1207.54 L1961.23 1207.54 L1960.64 1207.54 L1960.06 1207.54 L1959.47 1207.54 L1958.88 1207.54 L1958.3 1207.54 L1957.71 1207.54 L1957.12 1207.54 L1956.54 1207.54 L1955.95 1207.54 L1955.37 1207.54 L1954.78 1207.54 L1954.19 1207.54 L1953.61 1207.54 L1953.02 1207.54 L1952.43 1207.54 L1951.85 1207.54 L1951.26 1207.54 L1950.67 1207.54 L1950.09 1207.54 L1949.5 1207.54 L1948.91 1207.54 L1948.33 1207.54 L1947.74 1207.54 L1947.16 1207.54 L1946.57 1207.54 L1945.98 1207.54 L1945.4 1207.54 L1944.81 1207.54 L1944.22 1207.54 L1943.64 1207.54 L1943.05 1207.54 L1942.46 1207.54 L1941.88 1207.54 L1941.29 1207.54 L1940.71 1207.54 L1940.12 1207.54 L1939.53 1207.54 L1938.95 1207.54 L1938.36 1207.54 L1937.77 1207.54 L1937.19 1207.54 L1936.6 1207.54 L1936.01 1207.54 L1935.43 1207.54 L1934.84 1207.54 L1934.25 1207.54 L1933.67 1207.54 L1933.08 1207.54 L1932.5 1207.54 L1931.91 1207.54 L1931.32 1207.54 L1930.74 1207.54 L1930.15 1207.54 L1929.56 1207.54 L1928.98 1207.54 L1928.39 1207.54 L1927.8 1207.54 L1927.22 1207.54 L1926.63 1207.54 L1926.04 1207.54 L1925.46 1207.54 L1924.87 1207.54 L1924.29 1207.54 L1923.7 1207.54 L1923.11 1207.54 L1922.53 1207.54 L1921.94 1207.54 L1921.35 1207.54 L1920.77 1207.54 L1920.18 1207.54 L1919.59 1207.54 L1919.01 1207.54 L1918.42 1207.54 L1917.83 1207.54 L1917.25 1207.54 L1916.66 1207.54 L1916.08 1207.54 L1915.49 1207.54 L1914.9 1207.54 L1914.32 1207.54 L1913.73 1207.54 L1913.14 1207.54 L1912.56 1207.54 L1911.97 1207.54 L1911.38 1207.54 L1910.8 1207.54 L1910.21 1207.54 L1909.63 1207.54 L1909.04 1207.54 L1908.45 1207.54 L1907.87 1207.54 L1907.28 1207.54 L1906.69 1207.54 L1906.11 1207.54 L1905.52 1207.54 L1904.93 1207.54 L1904.35 1207.54 L1903.76 1207.54 L1903.17 1207.54 L1902.59 1207.54 L1902 1207.54 L1901.42 1207.54 L1900.83 1207.54 L1900.24 1207.54 L1899.66 1207.54 L1899.07 1207.54 L1898.48 1207.54 L1897.9 1207.54 L1897.31 1207.54 L1896.72 1207.54 L1896.14 1207.54 L1895.55 1207.54 L1894.96 1207.54 L1894.38 1207.54 L1893.79 1207.54 L1893.21 1207.54 L1892.62 1207.54 L1892.03 1207.54 L1891.45 1207.54 L1890.86 1207.54 L1890.27 1207.54 L1889.69 1207.54 L1889.1 1207.54 L1888.51 1207.54 L1887.93 1207.54 L1887.34 1207.54 L1886.76 1207.54 L1886.17 1207.54 L1885.58 1207.54 L1885 1207.54 L1884.41 1207.54 L1883.82 1207.54 L1883.24 1207.54 L1882.65 1207.54 L1882.06 1207.54 L1881.48 1207.54 L1880.89 1207.54 L1880.3 1207.54 L1879.72 1207.54 L1879.13 1207.54 L1878.55 1207.54 L1877.96 1207.54 L1877.37 1207.54 L1876.79 1207.54 L1876.2 1207.54 L1875.61 1207.54 L1875.03 1207.54 L1874.44 1207.54 L1873.85 1207.54 L1873.27 1207.54 L1872.68 1207.54 L1872.09 1207.54 L1871.51 1207.54 L1870.92 1207.54 L1870.34 1207.54 L1869.75 1207.54 L1869.16 1207.54 L1868.58 1207.54 L1867.99 1207.54 L1867.4 1207.54 L1866.82 1207.54 L1866.23 1207.54 L1865.64 1207.54 L1865.06 1207.54 L1864.47 1207.54 L1863.88 1207.54 L1863.3 1207.54 L1862.71 1207.54 L1862.13 1207.54 L1861.54 1207.54 L1860.95 1207.54 L1860.37 1207.54 L1859.78 1207.54 L1859.19 1207.54 L1858.61 1207.54 L1858.02 1207.54 L1857.43 1207.54 L1856.85 1207.54 L1856.26 1207.54 L1855.68 1207.54 L1855.09 1207.54 L1854.5 1207.54 L1853.92 1207.54 L1853.33 1207.54 L1852.74 1207.54 L1852.16 1207.54 L1851.57 1207.54 L1850.98 1207.54 L1850.4 1207.54 L1849.81 1207.54 L1849.22 1207.54 L1848.64 1207.54 L1848.05 1207.54 L1847.47 1207.54 L1846.88 1207.54 L1846.29 1207.54 L1845.71 1207.54 L1845.12 1207.54 L1844.53 1207.54 L1843.95 1207.54 L1843.36 1207.54 L1842.77 1207.54 L1842.19 1207.54 L1841.6 1207.54 L1841.01 1207.54 L1840.43 1207.54 L1839.84 1207.54 L1839.26 1207.54 L1838.67 1207.54 L1838.08 1207.54 L1837.5 1207.54 L1836.91 1207.54 L1836.32 1207.54 L1835.74 1207.54 L1835.15 1207.54 L1834.56 1207.54 L1833.98 1207.54 L1833.39 1207.54 L1832.81 1207.54 L1832.22 1207.54 L1831.63 1207.54 L1831.05 1207.54 L1830.46 1207.54 L1829.87 1207.54 L1829.29 1207.54 L1828.7 1207.54 L1828.11 1207.54 L1827.53 1207.54 L1826.94 1207.54 L1826.35 1207.54 L1825.77 1207.54 L1825.18 1207.54 L1824.6 1207.54 L1824.01 1207.54 L1823.42 1207.54 L1822.84 1207.54 L1822.25 1207.54 L1821.66 1207.54 L1821.08 1207.54 L1820.49 1207.54 L1819.9 1207.54 L1819.32 1207.54 L1818.73 1207.54 L1818.14 1207.54 L1817.56 1207.54 L1816.97 1207.54 L1816.39 1207.54 L1815.8 1207.54 L1815.21 1207.54 L1814.63 1207.54 L1814.04 1207.54 L1813.45 1207.54 L1812.87 1207.54 L1812.28 1207.54 L1811.69 1207.54 L1811.11 1207.54 L1810.52 1207.54 L1809.94 1207.54 L1809.35 1207.54 L1808.76 1207.54 L1808.18 1207.54 L1807.59 1207.54 L1807 1207.54 L1806.42 1207.54 L1805.83 1207.54 L1805.24 1207.54 L1804.66 1207.54 L1804.07 1207.54 L1803.48 1207.54 L1802.9 1207.54 L1802.31 1207.54 L1801.73 1207.54 L1801.14 1207.54 L1800.55 1207.54 L1799.97 1207.54 L1799.38 1207.54 L1798.79 1207.54 L1798.21 1207.54 L1797.62 1207.54 L1797.03 1207.54 L1796.45 1207.54 L1795.86 1207.54 L1795.27 1207.54 L1794.69 1207.54 L1794.1 1207.54 L1793.52 1207.54 L1792.93 1207.54 L1792.34 1207.54 L1791.76 1207.54 L1791.17 1207.54 L1790.58 1207.54 L1790 1207.54 L1789.41 1207.54 L1788.82 1207.54 L1788.24 1207.54 L1787.65 1207.54 L1787.06 1207.54 L1786.48 1207.54 L1785.89 1207.54 L1785.31 1207.54 L1784.72 1207.54 L1784.13 1207.54 L1783.55 1207.54 L1782.96 1207.54 L1782.37 1207.54 L1781.79 1207.54 L1781.2 1207.54 L1780.61 1207.54 L1780.03 1207.54 L1779.44 1207.54 L1778.86 1207.54 L1778.27 1207.54 L1777.68 1207.54 L1777.1 1207.54 L1776.51 1207.54 L1775.92 1207.54 L1775.34 1207.54 L1774.75 1207.54 L1774.16 1207.54 L1773.58 1207.54 L1772.99 1207.54 L1772.4 1207.54 L1771.82 1207.54 L1771.23 1207.54 L1770.65 1207.54 L1770.06 1207.54 L1769.47 1207.54 L1768.89 1207.54 L1768.3 1207.54 L1767.71 1207.54 L1767.13 1207.54 L1766.54 1207.54 L1765.95 1207.54 L1765.37 1207.54 L1764.78 1207.54 L1764.19 1207.54 L1763.61 1207.54 L1763.02 1207.54 L1762.44 1207.54 L1761.85 1207.54 L1761.26 1207.54 L1760.68 1207.54 L1760.09 1207.54 L1759.5 1207.54 L1758.92 1207.54 L1758.33 1207.54 L1757.74 1207.54 L1757.16 1207.54 L1756.57 1207.54 L1755.99 1207.54 L1755.4 1207.54 L1754.81 1207.54 L1754.23 1207.54 L1753.64 1207.54 L1753.05 1207.54 L1752.47 1207.54 L1751.88 1207.54 L1751.29 1207.54 L1750.71 1207.54 L1750.12 1207.54 L1749.53 1207.54 L1748.95 1207.54 L1748.36 1207.54 L1747.78 1207.54 L1747.19 1207.54 L1746.6 1207.54 L1746.02 1207.54 L1745.43 1207.54 L1744.84 1207.54 L1744.26 1207.54 L1743.67 1207.54 L1743.08 1207.54 L1742.5 1207.54 L1741.91 1207.54 L1741.32 1207.54 L1740.74 1207.54 L1740.15 1207.54 L1739.57 1207.54 L1738.98 1207.54 L1738.39 1207.54 L1737.81 1207.54 L1737.22 1207.54 L1736.63 1207.54 L1736.05 1207.54 L1735.46 1207.54 L1734.87 1207.54 L1734.29 1207.54 L1733.7 1207.54 L1733.11 1207.54 L1732.53 1207.54 L1731.94 1207.54 L1731.36 1207.54 L1730.77 1207.54 L1730.18 1207.54 L1729.6 1207.54 L1729.01 1207.54 L1728.42 1207.54 L1727.84 1207.54 L1727.25 1207.54 L1726.66 1207.54 L1726.08 1207.54 L1725.49 1207.54 L1724.91 1207.54 L1724.32 1207.54 L1723.73 1207.54 L1723.15 1207.54 L1722.56 1207.54 L1721.97 1207.54 L1721.39 1207.54 L1720.8 1207.54 L1720.21 1207.54 L1719.63 1207.54 L1719.04 1207.54 L1718.45 1207.54 L1717.87 1207.54 L1717.28 1207.54 L1716.7 1207.54 L1716.11 1207.54 L1715.52 1207.54 L1714.94 1207.54 L1714.35 1207.54 L1713.76 1207.54 L1713.18 1207.54 L1712.59 1207.54 L1712 1207.54 L1711.42 1207.54 L1710.83 1207.54 L1710.24 1207.54 L1709.66 1207.54 L1709.07 1207.54 L1708.49 1207.54 L1707.9 1207.54 L1707.31 1207.54 L1706.73 1207.54 L1706.14 1207.54 L1705.55 1207.54 L1704.97 1207.54 L1704.38 1207.54 L1703.79 1207.54 L1703.21 1207.54 L1702.62 1207.54 L1702.04 1207.54 L1701.45 1207.54 L1700.86 1207.54 L1700.28 1207.54 L1699.69 1207.54 L1699.1 1207.54 L1698.52 1207.54 L1697.93 1207.54 L1697.34 1207.54 L1696.76 1207.54 L1696.17 1207.54 L1695.58 1207.54 L1695 1207.54 L1694.41 1207.54 L1693.83 1207.54 L1693.24 1207.54 L1692.65 1207.54 L1692.07 1207.54 L1691.48 1207.54 L1690.89 1207.54 L1690.31 1207.54 L1689.72 1207.54 L1689.13 1207.54 L1688.55 1207.54 L1687.96 1207.54 L1687.37 1207.54 L1686.79 1207.54 L1686.2 1207.54 L1685.62 1207.54 L1685.03 1207.54 L1684.44 1207.54 L1683.86 1207.54 L1683.27 1207.54 L1682.68 1207.54 L1682.1 1207.54 L1681.51 1207.54 L1680.92 1207.54 L1680.34 1207.54 L1679.75 1207.54 L1679.17 1207.54 L1678.58 1207.54 L1677.99 1207.54 L1677.41 1207.54 L1676.82 1207.54 L1676.23 1207.54 L1675.65 1207.54 L1675.06 1207.54 L1674.47 1207.54 L1673.89 1207.54 L1673.3 1207.54 L1672.71 1207.54 L1672.13 1207.54 L1671.54 1207.54 L1670.96 1207.54 L1670.37 1207.54 L1669.78 1207.54 L1669.2 1207.54 L1668.61 1207.54 L1668.02 1207.54 L1667.44 1207.54 L1666.85 1207.54 L1666.26 1207.54 L1665.68 1207.54 L1665.09 1207.54 L1664.5 1207.54 L1663.92 1207.54 L1663.33 1207.54 L1662.75 1207.54 L1662.16 1207.54 L1661.57 1207.54 L1660.99 1207.54 L1660.4 1207.54 L1659.81 1207.54 L1659.23 1207.54 L1658.64 1207.54 L1658.05 1207.54 L1657.47 1207.54 L1656.88 1207.54 L1656.29 1207.54 L1655.71 1207.54 L1655.12 1207.54 L1654.54 1207.54 L1653.95 1207.54 L1653.36 1207.54 L1652.78 1207.54 L1652.19 1207.54 L1651.6 1207.54 L1651.02 1207.54 L1650.43 1207.54 L1649.84 1207.54 L1649.26 1207.54 L1648.67 1207.54 L1648.09 1207.54 L1647.5 1207.54 L1646.91 1207.54 L1646.33 1207.54 L1645.74 1207.54 L1645.15 1207.54 L1644.57 1207.54 L1643.98 1207.54 L1643.39 1207.54 L1642.81 1207.54 L1642.22 1207.54 L1641.63 1207.54 L1641.05 1207.54 L1640.46 1207.54 L1639.88 1207.54 L1639.29 1207.54 L1638.7 1207.54 L1638.12 1207.54 L1637.53 1207.54 L1636.94 1207.54 L1636.36 1207.54 L1635.77 1207.54 L1635.18 1207.54 L1634.6 1207.54 L1634.01 1207.54 L1633.42 1207.54 L1632.84 1207.54 L1632.25 1207.54 L1631.67 1207.54 L1631.08 1207.54 L1630.49 1207.54 L1629.91 1207.54 L1629.32 1207.54 L1628.73 1207.54 L1628.15 1207.54 L1627.56 1207.54 L1626.97 1207.54 L1626.39 1207.54 L1625.8 1207.54 L1625.22 1207.54 L1624.63 1207.54 L1624.04 1207.54 L1623.46 1207.54 L1622.87 1207.54 L1622.28 1207.54 L1621.7 1207.54 L1621.11 1207.54 L1620.52 1207.54 L1619.94 1207.54 L1619.35 1207.54 L1618.76 1207.54 L1618.18 1207.54 L1617.59 1207.54 L1617.01 1207.54 L1616.42 1207.54 L1615.83 1207.54 L1615.25 1207.54 L1614.66 1207.54 L1614.07 1207.54 L1613.49 1207.54 L1612.9 1207.54 L1612.31 1207.54 L1611.73 1207.54 L1611.14 1207.54 L1610.55 1207.54 L1609.97 1207.54 L1609.38 1207.54 L1608.8 1207.54 L1608.21 1207.54 L1607.62 1207.54 L1607.04 1207.54 L1606.45 1207.54 L1605.86 1207.54 L1605.28 1207.54 L1604.69 1207.54 L1604.1 1207.54 L1603.52 1207.54 L1602.93 1207.54 L1602.34 1207.54 L1601.76 1207.54 L1601.17 1207.54 L1600.59 1207.54 L1600 1207.54 L1599.41 1207.54 L1598.83 1207.54 L1598.24 1207.54 L1597.65 1207.54 L1597.07 1207.54 L1596.48 1207.54 L1595.89 1207.54 L1595.31 1207.54 L1594.72 1207.54 L1594.14 1207.54 L1593.55 1207.54 L1592.96 1207.54 L1592.38 1207.54 L1591.79 1207.54 L1591.2 1207.54 L1590.62 1207.54 L1590.03 1207.54 L1589.44 1207.54 L1588.86 1207.54 L1588.27 1207.54 L1587.68 1207.54 L1587.1 1207.54 L1586.51 1207.54 L1585.93 1207.54 L1585.34 1207.54 L1584.75 1207.54 L1584.17 1207.54 L1583.58 1207.54 L1582.99 1207.54 L1582.41 1207.54 L1581.82 1207.54 L1581.23 1207.54 L1580.65 1207.54 L1580.06 1207.54 L1579.47 1207.54 L1578.89 1207.54 L1578.3 1207.54 L1577.72 1207.54 L1577.13 1207.54 L1576.54 1207.54 L1575.96 1207.54 L1575.37 1207.54 L1574.78 1207.54 L1574.2 1207.54 L1573.61 1207.54 L1573.02 1207.54 L1572.44 1207.54 L1571.85 1207.54 L1571.27 1207.54 L1570.68 1207.54 L1570.09 1207.54 L1569.51 1207.54 L1568.92 1207.54 L1568.33 1207.54 L1567.75 1207.54 L1567.16 1207.54 L1566.57 1207.54 L1565.99 1207.54 L1565.4 1207.54 L1564.81 1207.54 L1564.23 1207.54 L1563.64 1207.54 L1563.06 1207.54 L1562.47 1207.54 L1561.88 1207.54 L1561.3 1207.54 L1560.71 1207.54 L1560.12 1207.54 L1559.54 1207.54 L1558.95 1207.54 L1558.36 1207.54 L1557.78 1207.54 L1557.19 1207.54 L1556.6 1207.54 L1556.02 1207.54 L1555.43 1207.54 L1554.85 1207.54 L1554.26 1207.54 L1553.67 1207.54 L1553.09 1207.54 L1552.5 1207.54 L1551.91 1207.54 L1551.33 1207.54 L1550.74 1207.54 L1550.15 1207.54 L1549.57 1207.54 L1548.98 1207.54 L1548.4 1207.54 L1547.81 1207.54 L1547.22 1207.54 L1546.64 1207.54 L1546.05 1207.54 L1545.46 1207.54 L1544.88 1207.54 L1544.29 1207.54 L1543.7 1207.54 L1543.12 1207.54 L1542.53 1207.54 L1541.94 1207.54 L1541.36 1207.54 L1540.77 1207.54 L1540.19 1207.54 L1539.6 1207.54 L1539.01 1207.54 L1538.43 1207.54 L1537.84 1207.54 L1537.25 1207.54 L1536.67 1207.54 L1536.08 1207.54 L1535.49 1207.54 L1534.91 1207.54 L1534.32 1207.54 L1533.73 1207.54 L1533.15 1207.54 L1532.56 1207.54 L1531.98 1207.54 L1531.39 1207.54 L1530.8 1207.54 L1530.22 1207.54 L1529.63 1207.54 L1529.04 1207.54 L1528.46 1207.54 L1527.87 1207.54 L1527.28 1207.54 L1526.7 1207.54 L1526.11 1207.54 L1525.52 1207.54 L1524.94 1207.54 L1524.35 1207.54 L1523.77 1207.54 L1523.18 1207.54 L1522.59 1207.54 L1522.01 1207.54 L1521.42 1207.54 L1520.83 1207.54 L1520.25 1207.54 L1519.66 1207.54 L1519.07 1207.54 L1518.49 1207.54 L1517.9 1207.54 L1517.32 1207.54 L1516.73 1207.54 L1516.14 1207.54 L1515.56 1207.54 L1514.97 1207.54 L1514.38 1207.54 L1513.8 1207.54 L1513.21 1207.54 L1512.62 1207.54 L1512.04 1207.54 L1511.45 1207.54 L1510.86 1207.54 L1510.28 1207.54 L1509.69 1207.54 L1509.11 1207.54 L1508.52 1207.54 L1507.93 1207.54 L1507.35 1207.54 L1506.76 1207.54 L1506.17 1207.54 L1505.59 1207.54 L1505 1207.54 L1504.41 1207.54 L1503.83 1207.54 L1503.24 1207.54 L1502.65 1207.54 L1502.07 1207.54 L1501.48 1207.54 L1500.9 1207.54 L1500.31 1207.54 L1499.72 1207.54 L1499.14 1207.54 L1498.55 1207.54 L1497.96 1207.54 L1497.38 1207.54 L1496.79 1207.54 L1496.2 1207.54 L1495.62 1207.54 L1495.03 1207.54 L1494.45 1207.54 L1493.86 1207.54 L1493.27 1207.54 L1492.69 1207.54 L1492.1 1207.54 L1491.51 1207.54 L1490.93 1207.54 L1490.34 1207.54 L1489.75 1207.54 L1489.17 1207.54 L1488.58 1207.54 L1487.99 1207.54 L1487.41 1207.54 L1486.82 1207.54 L1486.24 1207.54 L1485.65 1207.54 L1485.06 1207.54 L1484.48 1207.54 L1483.89 1207.54 L1483.3 1207.54 L1482.72 1207.54 L1482.13 1207.54 L1481.54 1207.54 L1480.96 1207.54 L1480.37 1207.54 L1479.78 1207.54 L1479.2 1207.54 L1478.61 1207.54 L1478.03 1207.54 L1477.44 1207.54 L1476.85 1207.54 L1476.27 1207.54 L1475.68 1207.54 L1475.09 1207.54 L1474.51 1207.54 L1473.92 1207.54 L1473.33 1207.54 L1472.75 1207.54 L1472.16 1207.54 L1471.57 1207.54 L1470.99 1207.54 L1470.4 1207.54 L1469.82 1207.54 L1469.23 1207.54 L1468.64 1207.54 L1468.06 1207.54 L1467.47 1207.54 L1466.88 1207.54 L1466.3 1207.54 L1465.71 1207.54 L1465.12 1207.54 L1464.54 1207.54 L1463.95 1207.54 L1463.37 1207.54 L1462.78 1207.54 L1462.19 1207.54 L1461.61 1207.54 L1461.02 1207.54 L1460.43 1207.54 L1459.85 1207.54 L1459.26 1207.54 L1458.67 1207.54 L1458.09 1207.54 L1457.5 1207.54 L1456.91 1207.54 L1456.33 1207.54 L1455.74 1207.54 L1455.16 1207.54 L1454.57 1207.54 L1453.98 1207.54 L1453.4 1207.54 L1452.81 1207.54 L1452.22 1207.54 L1451.64 1207.54 L1451.05 1207.54 L1450.46 1207.54 L1449.88 1207.54 L1449.29 1207.54 L1448.7 1207.54 L1448.12 1207.54 L1447.53 1207.54 L1446.95 1207.54 L1446.36 1207.54 L1445.77 1207.54 L1445.19 1207.54 L1444.6 1207.54 L1444.01 1207.54 L1443.43 1207.54 L1442.84 1207.54 L1442.25 1207.54 L1441.67 1207.54 L1441.08 1207.54 L1440.5 1207.54 L1439.91 1207.54 L1439.32 1207.54 L1438.74 1207.54 L1438.15 1207.54 L1437.56 1207.54 L1436.98 1207.54 L1436.39 1207.54 L1435.8 1207.54 L1435.22 1207.54 L1434.63 1207.54 L1434.04 1207.54 L1433.46 1207.54 L1432.87 1207.54 L1432.29 1207.54 L1431.7 1207.54 L1431.11 1207.54 L1430.53 1207.54 L1429.94 1207.54 L1429.35 1207.54 L1428.77 1207.54 L1428.18 1207.54 L1427.59 1207.54 L1427.01 1207.54 L1426.42 1207.54 L1425.83 1207.54 L1425.25 1207.54 L1424.66 1207.54 L1424.08 1207.54 L1423.49 1207.54 L1422.9 1207.54 L1422.32 1207.54 L1421.73 1207.54 L1421.14 1207.54 L1420.56 1207.54 L1419.97 1207.54 L1419.38 1207.54 L1418.8 1207.54 L1418.21 1207.54 L1417.63 1207.54 L1417.04 1207.54 L1416.45 1207.54 L1415.87 1207.54 L1415.28 1207.54 L1414.69 1207.54 L1414.11 1207.54 L1413.52 1207.54 L1412.93 1207.54 L1412.35 1207.54 L1411.76 1207.54 L1411.17 1207.54 L1410.59 1207.54 L1410 1207.54 L1409.42 1207.54 L1408.83 1207.54 L1408.24 1207.54 L1407.66 1207.54 L1407.07 1207.54 L1406.48 1207.54 L1405.9 1207.54 L1405.31 1207.54 L1404.72 1207.54 L1404.14 1207.54 L1403.55 1207.54 L1402.96 1207.54 L1402.38 1207.54 L1401.79 1207.54 L1401.21 1207.54 L1400.62 1207.54 L1400.03 1207.54 L1399.45 1207.54 L1398.86 1207.54 L1398.27 1207.54 L1397.69 1207.54 L1397.1 1207.54 L1396.51 1207.54 L1395.93 1207.54 L1395.34 1207.54 L1394.75 1207.54 L1394.17 1207.54 L1393.58 1207.54 L1393 1207.54 L1392.41 1207.54 L1391.82 1207.54 L1391.24 1207.54 L1390.65 1207.54 L1390.06 1207.54 L1389.48 1207.54 L1388.89 1207.54 L1388.3 1207.54 L1387.72 1207.54 L1387.13 1207.54 L1386.55 1207.54 L1385.96 1207.54 L1385.37 1207.54 L1384.79 1207.54 L1384.2 1207.54 L1383.61 1207.54 L1383.03 1207.54 L1382.44 1207.54 L1381.85 1207.54 L1381.27 1207.54 L1380.68 1207.54 L1380.09 1207.54 L1379.51 1207.54 L1378.92 1207.54 L1378.34 1207.54 L1377.75 1207.54 L1377.16 1207.54 L1376.58 1207.54 L1375.99 1207.54 L1375.4 1207.54 L1374.82 1207.54 L1374.23 1207.54 L1373.64 1207.54 L1373.06 1207.54 L1372.47 1207.54 L1371.88 1207.54 L1371.3 1207.54 L1370.71 1207.54 L1370.13 1207.54 L1369.54 1207.54 L1368.95 1207.54 L1368.37 1207.54 L1367.78 1207.54 L1367.19 1207.54 L1366.61 1207.54 L1366.02 1207.54 L1365.43 1207.54 L1364.85 1207.54 L1364.26 1207.54 L1363.68 1207.54 L1363.09 1207.54 L1362.5 1207.54 L1361.92 1207.54 L1361.33 1207.54 L1360.74 1207.54 L1360.16 1207.54 L1359.57 1207.54 L1358.98 1207.54 L1358.4 1207.54 L1357.81 1207.54 L1357.22 1207.54 L1356.64 1207.54 L1356.05 1207.54 L1355.47 1207.54 L1354.88 1207.54 L1354.29 1207.54 L1353.71 1207.54 L1353.12 1207.54 L1352.53 1207.54 L1351.95 1207.54 L1351.36 1207.54 L1350.77 1207.54 L1350.19 1207.54 L1349.6 1207.54 L1349.01 1207.54 L1348.43 1207.54 L1347.84 1207.54 L1347.26 1207.54 L1346.67 1207.54 L1346.08 1207.54 L1345.5 1207.54 L1344.91 1207.54 L1344.32 1207.54 L1343.74 1207.54 L1343.15 1207.54 L1342.56 1207.54 L1341.98 1207.54 L1341.39 1207.54 L1340.8 1207.54 L1340.22 1207.54 L1339.63 1207.54 L1339.05 1207.54 L1338.46 1207.54 L1337.87 1207.54 L1337.29 1207.54 L1336.7 1207.54 L1336.11 1207.54 L1335.53 1207.54 L1334.94 1207.54 L1334.35 1207.54 L1333.77 1207.54 L1333.18 1207.54 L1332.6 1207.54 L1332.01 1207.54 L1331.42 1207.54 L1330.84 1207.54 L1330.25 1207.54 L1329.66 1207.54 L1329.08 1207.54 L1328.49 1207.54 L1327.9 1207.54 L1327.32 1207.54 L1326.73 1207.54 L1326.14 1207.54 L1325.56 1207.54 L1324.97 1207.54 L1324.39 1207.54 L1323.8 1207.54 L1323.21 1207.54 L1322.63 1207.54 L1322.04 1207.54 L1321.45 1207.54 L1320.87 1207.54 L1320.28 1207.54 L1319.69 1207.54 L1319.11 1207.54 L1318.52 1207.54 L1317.93 1207.54 L1317.35 1207.54 L1316.76 1207.54 L1316.18 1207.54 L1315.59 1207.54 L1315 1207.54 L1314.42 1207.54 L1313.83 1207.54 L1313.24 1207.54 L1312.66 1207.54 L1312.07 1207.54 L1311.48 1207.54 L1310.9 1207.54 L1310.31 1207.54 L1309.73 1207.54 L1309.14 1207.54 L1308.55 1207.54 L1307.97 1207.54 L1307.38 1207.54 L1306.79 1207.54 L1306.21 1207.54 L1305.62 1207.54 L1305.03 1207.54 L1304.45 1207.54 L1303.86 1207.54 L1303.27 1207.54 L1302.69 1207.54 L1302.1 1207.54 L1301.52 1207.54 L1300.93 1207.54 L1300.34 1207.54 L1299.76 1207.54 L1299.17 1207.54 L1298.58 1207.54 L1298 1207.54 L1297.41 1207.54 L1296.82 1207.54 L1296.24 1207.54 L1295.65 1207.54 L1295.06 1207.54 L1294.48 1207.54 L1293.89 1207.54 L1293.31 1207.54 L1292.72 1207.54 L1292.13 1207.54 L1291.55 1207.54 L1290.96 1207.54 L1290.37 1207.54 L1289.79 1207.54 L1289.2 1207.54 L1288.61 1207.54 L1288.03 1207.54 L1287.44 1207.54 L1286.86 1207.54 L1286.27 1207.54 L1285.68 1207.54 L1285.1 1207.54 L1284.51 1207.54 L1283.92 1207.54 L1283.34 1207.54 L1282.75 1207.54 L1282.16 1207.54 L1281.58 1207.54 L1280.99 1207.54 L1280.4 1207.54 L1279.82 1207.54 L1279.23 1207.54 L1278.65 1207.54 L1278.06 1207.54 L1277.47 1207.54 L1276.89 1207.54 L1276.3 1207.54 L1275.71 1207.54 L1275.13 1207.54 L1274.54 1207.54 L1273.95 1207.54 L1273.37 1207.54 L1272.78 1207.54 L1272.19 1207.54 L1271.61 1207.54 L1271.02 1207.54 L1270.44 1207.54 L1269.85 1207.54 L1269.26 1207.54 L1268.68 1207.54 L1268.09 1207.54 L1267.5 1207.54 L1266.92 1207.54 L1266.33 1207.54 L1265.74 1207.54 L1265.16 1207.54 L1264.57 1207.54 L1263.98 1207.54 L1263.4 1207.54 L1262.81 1207.54 L1262.23 1207.54 L1261.64 1207.54 L1261.05 1207.54 L1260.47 1207.54 L1259.88 1207.54 L1259.29 1207.54 L1258.71 1207.54 L1258.12 1207.54 L1257.53 1207.54 L1256.95 1207.54 L1256.36 1207.54 L1255.78 1207.54 L1255.19 1207.54 L1254.6 1207.54 L1254.02 1207.54 L1253.43 1207.54 L1252.84 1207.54 L1252.26 1207.54 L1251.67 1207.54 L1251.08 1207.54 L1250.5 1207.54 L1249.91 1207.54 L1249.32 1207.54 L1248.74 1207.54 L1248.15 1207.54 L1247.57 1207.54 L1246.98 1207.54 L1246.39 1207.54 L1245.81 1207.54 L1245.22 1207.54 L1244.63 1207.54 L1244.05 1207.54 L1243.46 1207.54 L1242.87 1207.54 L1242.29 1207.54 L1241.7 1207.54 L1241.11 1207.54 L1240.53 1207.54 L1239.94 1207.54 L1239.36 1207.54 L1238.77 1207.54 L1238.18 1207.54 L1237.6 1207.54 L1237.01 1207.54 L1236.42 1207.54 L1235.84 1207.54 L1235.25 1207.54 L1234.66 1207.54 L1234.08 1207.54 L1233.49 1207.54 L1232.91 1207.54 L1232.32 1207.54 L1231.73 1207.54 L1231.15 1207.54 L1230.56 1207.54 L1229.97 1207.54 L1229.39 1207.54 L1228.8 1207.54 L1228.21 1207.54 L1227.63 1207.54 L1227.04 1207.54 L1226.45 1207.54 L1225.87 1207.54 L1225.28 1207.54 L1224.7 1207.54 L1224.11 1207.54 L1223.52 1207.54 L1222.94 1207.54 L1222.35 1207.54 L1221.76 1207.54 L1221.18 1207.54 L1220.59 1207.54 L1220 1207.54 L1219.42 1207.54 L1218.83 1207.54 L1218.24 1207.54 L1217.66 1207.54 L1217.07 1207.54 L1216.49 1207.54 L1215.9 1207.54 L1215.31 1207.54 L1214.73 1207.54 L1214.14 1207.54 L1213.55 1207.54 L1212.97 1207.54 L1212.38 1207.54 L1211.79 1207.54 L1211.21 1207.54 L1210.62 1207.54 L1210.03 1207.54 L1209.45 1207.54 L1208.86 1207.54 L1208.28 1207.54 L1207.69 1207.54 L1207.1 1207.54 L1206.52 1207.54 L1205.93 1207.54 L1205.34 1207.54 L1204.76 1207.54 L1204.17 1207.54 L1203.58 1207.54 L1203 1207.54 L1202.41 1207.54 L1201.83 1207.54 L1201.24 1207.54 L1200.65 1207.54 L1200.07 1207.54 L1199.48 1207.54 L1198.89 1207.54 L1198.31 1207.54 L1197.72 1207.54 L1197.13 1207.54 L1196.55 1207.54 L1195.96 1207.54 L1195.37 1207.54 L1194.79 1207.54 L1194.2 1207.54 L1193.62 1207.54 L1193.03 1207.54 L1192.44 1207.54 L1191.86 1207.54 L1191.27 1207.54 L1190.68 1207.54 L1190.1 1207.54 L1189.51 1207.54 L1188.92 1207.54 L1188.34 1207.54 L1187.75 1207.54 L1187.16 1207.54 L1186.58 1207.54 L1185.99 1207.54 L1185.41 1207.54 L1184.82 1207.54 L1184.23 1207.54 L1183.65 1207.54 L1183.06 1207.54 L1182.47 1207.54 L1181.89 1207.54 L1181.3 1207.54 L1180.71 1207.54 L1180.13 1207.54 L1179.54 1207.54 L1178.96 1207.54 L1178.37 1207.54 L1177.78 1207.54 L1177.2 1207.54 L1176.61 1207.54 L1176.02 1207.54 L1175.44 1207.54 L1174.85 1207.54 L1174.26 1207.54 L1173.68 1207.54 L1173.09 1207.54 L1172.5 1207.54 L1171.92 1207.54 L1171.33 1207.54 L1170.75 1207.54 L1170.16 1207.54 L1169.57 1207.54 L1168.99 1207.54 L1168.4 1207.54 L1167.81 1207.54 L1167.23 1207.54 L1166.64 1207.54 L1166.05 1207.54 L1165.47 1207.54 L1164.88 1207.54 L1164.29 1207.54 L1163.71 1207.54 L1163.12 1207.54 L1162.54 1207.54 L1161.95 1207.54 L1161.36 1207.54 L1160.78 1207.54 L1160.19 1207.54 L1159.6 1207.54 L1159.02 1207.54 L1158.43 1207.54 L1157.84 1207.54 L1157.26 1207.54 L1156.67 1207.54 L1156.09 1207.54 L1155.5 1207.54 L1154.91 1207.54 L1154.33 1207.54 L1153.74 1207.54 L1153.15 1207.54 L1152.57 1207.54 L1151.98 1207.54 L1151.39 1207.54 L1150.81 1207.54 L1150.22 1207.54 L1149.63 1207.54 L1149.05 1207.54 L1148.46 1207.54 L1147.88 1207.54 L1147.29 1207.54 L1146.7 1207.54 L1146.12 1207.54 L1145.53 1207.54 L1144.94 1207.54 L1144.36 1207.54 L1143.77 1207.54 L1143.18 1207.54 L1142.6 1207.54 L1142.01 1207.54 L1141.42 1207.54 L1140.84 1207.54 L1140.25 1207.54 L1139.67 1207.54 L1139.08 1207.54 L1138.49 1207.54 L1137.91 1207.54 L1137.32 1207.54 L1136.73 1207.54 L1136.15 1207.54 L1135.56 1207.54 L1134.97 1207.54 L1134.39 1207.54 L1133.8 1207.54 L1133.21 1207.54 L1132.63 1207.54 L1132.04 1207.54 L1131.46 1207.54 L1130.87 1207.54 L1130.28 1207.54 L1129.7 1207.54 L1129.11 1207.54 L1128.52 1207.54 L1127.94 1207.54 L1127.35 1207.54 L1126.76 1207.54 L1126.18 1207.54 L1125.59 1207.54 L1125.01 1207.54 L1124.42 1207.54 L1123.83 1207.54 L1123.25 1207.54 L1122.66 1207.54 L1122.07 1207.54 L1121.49 1207.54 L1120.9 1207.54 L1120.31 1207.54 L1119.73 1207.54 L1119.14 1207.54 L1118.55 1207.54 L1117.97 1207.54 L1117.38 1207.54 L1116.8 1207.54 L1116.21 1207.54 L1115.62 1207.54 L1115.04 1207.54 L1114.45 1207.54 L1113.86 1207.54 L1113.28 1207.54 L1112.69 1207.54 L1112.1 1207.54 L1111.52 1207.54 L1110.93 1207.54 L1110.34 1207.54 L1109.76 1207.54 L1109.17 1207.54 L1108.59 1207.54 L1108 1207.54 L1107.41 1207.54 L1106.83 1207.54 L1106.24 1207.54 L1105.65 1207.54 L1105.07 1207.54 L1104.48 1207.54 L1103.89 1207.54 L1103.31 1207.54 L1102.72 1207.54 L1102.14 1207.54 L1101.55 1207.54 L1100.96 1207.54 L1100.38 1207.54 L1099.79 1207.54 L1099.2 1207.54 L1098.62 1207.54 L1098.03 1207.54 L1097.44 1207.54 L1096.86 1207.54 L1096.27 1207.54 L1095.68 1207.54 L1095.1 1207.54 L1094.51 1207.54 L1093.93 1207.54 L1093.34 1207.54 L1092.75 1207.54 L1092.17 1207.54 L1091.58 1207.54 L1090.99 1207.54 L1090.41 1207.54 L1089.82 1207.54 L1089.23 1207.54 L1088.65 1207.54 L1088.06 1207.54 L1087.47 1207.54 L1086.89 1207.54 L1086.3 1207.54 L1085.72 1207.54 L1085.13 1207.54 L1084.54 1207.54 L1083.96 1207.54 L1083.37 1207.54 L1082.78 1207.54 L1082.2 1207.54 L1081.61 1207.54 L1081.02 1207.54 L1080.44 1207.54 L1079.85 1207.54 L1079.26 1207.54 L1078.68 1207.54 L1078.09 1207.54 L1077.51 1207.54 L1076.92 1207.54 L1076.33 1207.54 L1075.75 1207.54 L1075.16 1207.54 L1074.57 1207.54 L1073.99 1207.54 L1073.4 1207.54 L1072.81 1207.54 L1072.23 1207.54 L1071.64 1207.54 L1071.06 1207.54 L1070.47 1207.54 L1069.88 1207.54 L1069.3 1207.54 L1068.71 1207.54 L1068.12 1207.54 L1067.54 1207.54 L1066.95 1207.54 L1066.36 1207.54 L1065.78 1207.54 L1065.19 1207.54 L1064.6 1207.54 L1064.02 1207.54 L1063.43 1207.54 L1062.85 1207.54 L1062.26 1207.54 L1061.67 1207.54 L1061.09 1207.54 L1060.5 1207.54 L1059.91 1207.54 L1059.33 1207.54 L1058.74 1207.54 L1058.15 1207.54 L1057.57 1207.54 L1056.98 1207.54 L1056.39 1207.54 L1055.81 1207.54 L1055.22 1207.54 L1054.64 1207.54 L1054.05 1207.54 L1053.46 1207.54 L1052.88 1207.54 L1052.29 1207.54 L1051.7 1207.54 L1051.12 1207.54 L1050.53 1207.54 L1049.94 1207.54 L1049.36 1207.54 L1048.77 1207.54 L1048.19 1207.54 L1047.6 1207.54 L1047.01 1207.54 L1046.43 1207.54 L1045.84 1207.54 L1045.25 1207.54 L1044.67 1207.54 L1044.08 1207.54 L1043.49 1207.54 L1042.91 1207.54 L1042.32 1207.54 L1041.73 1207.54 L1041.15 1207.54 L1040.56 1207.54 L1039.98 1207.54 L1039.39 1207.54 L1038.8 1207.54 L1038.22 1207.54 L1037.63 1207.54 L1037.04 1207.54 L1036.46 1207.54 L1035.87 1207.54 L1035.28 1207.54 L1034.7 1207.54 L1034.11 1207.54 L1033.52 1207.54 L1032.94 1207.54 L1032.35 1207.54 L1031.77 1207.54 L1031.18 1207.54 L1030.59 1207.54 L1030.01 1207.54 L1029.42 1207.54 L1028.83 1207.54 L1028.25 1207.54 L1027.66 1207.54 L1027.07 1207.54 L1026.49 1207.54 L1025.9 1207.54 L1025.32 1207.54 L1024.73 1207.54 L1024.14 1207.54 L1023.56 1207.54 L1022.97 1207.54 L1022.38 1207.54 L1021.8 1207.54 L1021.21 1207.54 L1020.62 1207.54 L1020.04 1207.54 L1019.45 1207.54 L1018.86 1207.54 L1018.28 1207.54 L1017.69 1207.54 L1017.11 1207.54 L1016.52 1207.54 L1015.93 1207.54 L1015.35 1207.54 L1014.76 1207.54 L1014.17 1207.54 L1013.59 1207.54 L1013 1207.54 L1012.41 1207.54 L1011.83 1207.54 L1011.24 1207.54 L1010.65 1207.54 L1010.07 1207.54 L1009.48 1207.54 L1008.9 1207.54 L1008.31 1207.54 L1007.72 1207.54 L1007.14 1207.54 L1006.55 1207.54 L1005.96 1207.54 L1005.38 1207.54 L1004.79 1207.54 L1004.2 1207.54 L1003.62 1207.54 L1003.03 1207.54 L1002.44 1207.54 L1001.86 1207.54 L1001.27 1207.54 L1000.69 1207.54 L1000.1 1207.54 L999.513 1207.54 L998.926 1207.54 L998.34 1207.54 L997.754 1207.54 L997.167 1207.54 L996.581 1207.54 L995.994 1207.54 L995.408 1207.54 L994.822 1207.54 L994.235 1207.54 L993.649 1207.54 L993.062 1207.54 L992.476 1207.54 L991.889 1207.54 L991.303 1207.54 L990.717 1207.54 L990.13 1207.54 L989.544 1207.54 L988.957 1207.54 L988.371 1207.54 L987.785 1207.54 L987.198 1207.54 L986.612 1207.54 L986.025 1207.54  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.63 986.612,1207.63 987.198,1207.63 987.785,1207.63 988.371,1207.63 988.957,1207.63 989.544,1207.63 990.13,1207.63 990.717,1207.63 991.303,1207.63 991.889,1207.63 992.476,1207.63 993.062,1207.63 993.649,1207.63 994.235,1207.63 994.822,1207.63 995.408,1207.63 995.994,1207.63 996.581,1207.63 997.167,1207.63 997.754,1207.63 998.34,1207.63 998.926,1207.63 999.513,1207.63 1000.1,1207.63 1000.69,1207.63 1001.27,1207.63 1001.86,1207.63 1002.44,1207.63 1003.03,1207.63 1003.62,1207.63 1004.2,1207.63 1004.79,1207.63 1005.38,1207.63 1005.96,1207.63 1006.55,1207.63 1007.14,1207.63 1007.72,1207.63 1008.31,1207.63 1008.9,1207.63 1009.48,1207.63 1010.07,1207.63 1010.65,1207.63 1011.24,1207.63 1011.83,1207.63 1012.41,1207.63 1013,1207.63 1013.59,1207.63 1014.17,1207.63 1014.76,1207.63 1015.35,1207.63 1015.93,1207.63 1016.52,1207.63 1017.11,1207.63 1017.69,1207.63 1018.28,1207.63 1018.86,1207.63 1019.45,1207.63 1020.04,1207.63 1020.62,1207.63 1021.21,1207.63 1021.8,1207.63 1022.38,1207.63 1022.97,1207.63 1023.56,1207.63 1024.14,1207.63 1024.73,1207.63 1025.32,1207.63 1025.9,1207.63 1026.49,1207.63 1027.07,1207.63 1027.66,1207.63 1028.25,1207.63 1028.83,1207.63 1029.42,1207.63 1030.01,1207.63 1030.59,1207.63 1031.18,1207.63 1031.77,1207.63 1032.35,1207.63 1032.94,1207.63 1033.52,1207.63 1034.11,1207.63 1034.7,1207.63 1035.28,1207.63 1035.87,1207.63 1036.46,1207.63 1037.04,1207.63 1037.63,1207.63 1038.22,1207.63 1038.8,1207.63 1039.39,1207.63 1039.98,1207.63 1040.56,1207.63 1041.15,1207.63 1041.73,1207.63 1042.32,1207.63 1042.91,1207.63 1043.49,1207.63 1044.08,1207.63 1044.67,1207.63 1045.25,1207.63 1045.84,1207.63 1046.43,1207.63 1047.01,1207.63 1047.6,1207.63 1048.19,1207.63 1048.77,1207.63 1049.36,1207.63 1049.94,1207.63 1050.53,1207.63 1051.12,1207.63 1051.7,1207.63 1052.29,1207.63 1052.88,1207.63 1053.46,1207.63 1054.05,1207.63 1054.64,1207.63 1055.22,1207.63 1055.81,1207.63 1056.39,1207.63 1056.98,1207.63 1057.57,1207.63 1058.15,1207.63 1058.74,1207.63 1059.33,1207.63 1059.91,1207.63 1060.5,1207.63 1061.09,1207.63 1061.67,1207.63 1062.26,1207.63 1062.85,1207.63 1063.43,1207.63 1064.02,1207.63 1064.6,1207.63 1065.19,1207.63 1065.78,1207.63 1066.36,1207.63 1066.95,1207.63 1067.54,1207.63 1068.12,1207.63 1068.71,1207.63 1069.3,1207.63 1069.88,1207.63 1070.47,1207.63 1071.06,1207.63 1071.64,1207.63 1072.23,1207.63 1072.81,1207.63 1073.4,1207.63 1073.99,1207.63 1074.57,1207.63 1075.16,1207.63 1075.75,1207.63 1076.33,1207.63 1076.92,1207.63 1077.51,1207.63 1078.09,1207.63 1078.68,1207.63 1079.26,1207.63 1079.85,1207.63 1080.44,1207.63 1081.02,1207.63 1081.61,1207.63 1082.2,1207.63 1082.78,1207.63 1083.37,1207.63 1083.96,1207.63 1084.54,1207.63 1085.13,1207.63 1085.72,1207.63 1086.3,1207.63 1086.89,1207.63 1087.47,1207.63 1088.06,1207.63 1088.65,1207.63 1089.23,1207.63 1089.82,1207.63 1090.41,1207.63 1090.99,1207.63 1091.58,1207.63 1092.17,1207.63 1092.75,1207.63 1093.34,1207.63 1093.93,1207.63 1094.51,1207.63 1095.1,1207.63 1095.68,1207.63 1096.27,1207.63 1096.86,1207.63 1097.44,1207.63 1098.03,1207.63 1098.62,1207.63 1099.2,1207.63 1099.79,1207.63 1100.38,1207.63 1100.96,1207.63 1101.55,1207.63 1102.14,1207.63 1102.72,1207.63 1103.31,1207.63 1103.89,1207.63 1104.48,1207.63 1105.07,1207.63 1105.65,1207.63 1106.24,1207.63 1106.83,1207.63 1107.41,1207.63 1108,1207.63 1108.59,1207.63 1109.17,1207.63 1109.76,1207.63 1110.34,1207.63 1110.93,1207.63 1111.52,1207.63 1112.1,1207.63 1112.69,1207.63 1113.28,1207.63 1113.86,1207.63 1114.45,1207.63 1115.04,1207.63 1115.62,1207.63 1116.21,1207.63 1116.8,1207.63 1117.38,1207.63 1117.97,1207.63 1118.55,1207.63 1119.14,1207.63 1119.73,1207.63 1120.31,1207.63 1120.9,1207.63 1121.49,1207.63 1122.07,1207.63 1122.66,1207.63 1123.25,1207.63 1123.83,1207.63 1124.42,1207.63 1125.01,1207.63 1125.59,1207.63 1126.18,1207.63 1126.76,1207.63 1127.35,1207.63 1127.94,1207.63 1128.52,1207.63 1129.11,1207.63 1129.7,1207.63 1130.28,1207.63 1130.87,1207.63 1131.46,1207.63 1132.04,1207.63 1132.63,1207.63 1133.21,1207.63 1133.8,1207.63 1134.39,1207.63 1134.97,1207.63 1135.56,1207.63 1136.15,1207.63 1136.73,1207.63 1137.32,1207.63 1137.91,1207.63 1138.49,1207.63 1139.08,1207.63 1139.67,1207.63 1140.25,1207.63 1140.84,1207.63 1141.42,1207.63 1142.01,1207.63 1142.6,1207.63 1143.18,1207.63 1143.77,1207.63 1144.36,1207.63 1144.94,1207.63 1145.53,1207.63 1146.12,1207.63 1146.7,1207.63 1147.29,1207.63 1147.88,1207.63 1148.46,1207.63 1149.05,1207.63 1149.63,1207.63 1150.22,1207.63 1150.81,1207.63 1151.39,1207.63 1151.98,1207.63 1152.57,1207.63 1153.15,1207.63 1153.74,1207.63 1154.33,1207.63 1154.91,1207.63 1155.5,1207.63 1156.09,1207.63 1156.67,1207.63 1157.26,1207.63 1157.84,1207.63 1158.43,1207.63 1159.02,1207.63 1159.6,1207.63 1160.19,1207.63 1160.78,1207.63 1161.36,1207.63 1161.95,1207.63 1162.54,1207.63 1163.12,1207.63 1163.71,1207.63 1164.29,1207.63 1164.88,1207.63 1165.47,1207.63 1166.05,1207.63 1166.64,1207.63 1167.23,1207.63 1167.81,1207.63 1168.4,1207.63 1168.99,1207.63 1169.57,1207.63 1170.16,1207.63 1170.75,1207.63 1171.33,1207.63 1171.92,1207.63 1172.5,1207.63 1173.09,1207.63 1173.68,1207.63 1174.26,1207.63 1174.85,1207.63 1175.44,1207.63 1176.02,1207.63 1176.61,1207.63 1177.2,1207.63 1177.78,1207.63 1178.37,1207.63 1178.96,1207.63 1179.54,1207.63 1180.13,1207.63 1180.71,1207.63 1181.3,1207.63 1181.89,1207.63 1182.47,1207.63 1183.06,1207.63 1183.65,1207.63 1184.23,1207.63 1184.82,1207.63 1185.41,1207.63 1185.99,1207.63 1186.58,1207.63 1187.16,1207.63 1187.75,1207.63 1188.34,1207.63 1188.92,1207.63 1189.51,1207.63 1190.1,1207.63 1190.68,1207.63 1191.27,1207.63 1191.86,1207.63 1192.44,1207.63 1193.03,1207.63 1193.62,1207.63 1194.2,1207.63 1194.79,1207.63 1195.37,1207.63 1195.96,1207.63 1196.55,1207.63 1197.13,1207.63 1197.72,1207.63 1198.31,1207.63 1198.89,1207.63 1199.48,1207.63 1200.07,1207.63 1200.65,1207.63 1201.24,1207.63 1201.83,1207.63 1202.41,1207.63 1203,1207.63 1203.58,1207.63 1204.17,1207.63 1204.76,1207.63 1205.34,1207.63 1205.93,1207.63 1206.52,1207.63 1207.1,1207.63 1207.69,1207.63 1208.28,1207.63 1208.86,1207.63 1209.45,1207.63 1210.03,1207.63 1210.62,1207.63 1211.21,1207.63 1211.79,1207.63 1212.38,1207.63 1212.97,1207.63 1213.55,1207.63 1214.14,1207.63 1214.73,1207.63 1215.31,1207.63 1215.9,1207.63 1216.49,1207.63 1217.07,1207.63 1217.66,1207.63 1218.24,1207.63 1218.83,1207.63 1219.42,1207.63 1220,1207.63 1220.59,1207.63 1221.18,1207.63 1221.76,1207.63 1222.35,1207.63 1222.94,1207.63 1223.52,1207.63 1224.11,1207.63 1224.7,1207.63 1225.28,1207.63 1225.87,1207.63 1226.45,1207.63 1227.04,1207.63 1227.63,1207.63 1228.21,1207.63 1228.8,1207.63 1229.39,1207.63 1229.97,1207.63 1230.56,1207.63 1231.15,1207.63 1231.73,1207.63 1232.32,1207.63 1232.91,1207.63 1233.49,1207.63 1234.08,1207.63 1234.66,1207.63 1235.25,1207.63 1235.84,1207.63 1236.42,1207.63 1237.01,1207.63 1237.6,1207.63 1238.18,1207.63 1238.77,1207.63 1239.36,1207.63 1239.94,1207.63 1240.53,1207.63 1241.11,1207.63 1241.7,1207.63 1242.29,1207.63 1242.87,1207.63 1243.46,1207.63 1244.05,1207.63 1244.63,1207.63 1245.22,1207.63 1245.81,1207.63 1246.39,1207.63 1246.98,1207.63 1247.57,1207.63 1248.15,1207.63 1248.74,1207.63 1249.32,1207.63 1249.91,1207.63 1250.5,1207.63 1251.08,1207.63 1251.67,1207.63 1252.26,1207.63 1252.84,1207.63 1253.43,1207.63 1254.02,1207.63 1254.6,1207.63 1255.19,1207.63 1255.78,1207.63 1256.36,1207.63 1256.95,1207.63 1257.53,1207.63 1258.12,1207.63 1258.71,1207.63 1259.29,1207.63 1259.88,1207.63 1260.47,1207.63 1261.05,1207.63 1261.64,1207.63 1262.23,1207.63 1262.81,1207.63 1263.4,1207.63 1263.98,1207.63 1264.57,1207.63 1265.16,1207.63 1265.74,1207.63 1266.33,1207.63 1266.92,1207.63 1267.5,1207.63 1268.09,1207.63 1268.68,1207.63 1269.26,1207.63 1269.85,1207.63 1270.44,1207.63 1271.02,1207.63 1271.61,1207.63 1272.19,1207.63 1272.78,1207.63 1273.37,1207.63 1273.95,1207.63 1274.54,1207.63 1275.13,1207.63 1275.71,1207.63 1276.3,1207.63 1276.89,1207.63 1277.47,1207.63 1278.06,1207.63 1278.65,1207.63 1279.23,1207.63 1279.82,1207.63 1280.4,1207.63 1280.99,1207.63 1281.58,1207.63 1282.16,1207.63 1282.75,1207.63 1283.34,1207.63 1283.92,1207.63 1284.51,1207.63 1285.1,1207.63 1285.68,1207.63 1286.27,1207.63 1286.86,1207.63 1287.44,1207.63 1288.03,1207.63 1288.61,1207.63 1289.2,1207.63 1289.79,1207.63 1290.37,1207.63 1290.96,1207.63 1291.55,1207.63 1292.13,1207.63 1292.72,1207.63 1293.31,1207.63 1293.89,1207.63 1294.48,1207.63 1295.06,1207.63 1295.65,1207.63 1296.24,1207.63 1296.82,1207.63 1297.41,1207.63 1298,1207.63 1298.58,1207.63 1299.17,1207.63 1299.76,1207.63 1300.34,1207.63 1300.93,1207.63 1301.52,1207.63 1302.1,1207.63 1302.69,1207.63 1303.27,1207.63 1303.86,1207.63 1304.45,1207.63 1305.03,1207.63 1305.62,1207.63 1306.21,1207.63 1306.79,1207.63 1307.38,1207.63 1307.97,1207.63 1308.55,1207.63 1309.14,1207.63 1309.73,1207.63 1310.31,1207.63 1310.9,1207.63 1311.48,1207.63 1312.07,1207.63 1312.66,1207.63 1313.24,1207.63 1313.83,1207.63 1314.42,1207.63 1315,1207.63 1315.59,1207.63 1316.18,1207.63 1316.76,1207.63 1317.35,1207.63 1317.93,1207.63 1318.52,1207.63 1319.11,1207.63 1319.69,1207.63 1320.28,1207.63 1320.87,1207.63 1321.45,1207.63 1322.04,1207.63 1322.63,1207.63 1323.21,1207.63 1323.8,1207.63 1324.39,1207.63 1324.97,1207.63 1325.56,1207.63 1326.14,1207.63 1326.73,1207.63 1327.32,1207.63 1327.9,1207.63 1328.49,1207.63 1329.08,1207.63 1329.66,1207.63 1330.25,1207.63 1330.84,1207.63 1331.42,1207.63 1332.01,1207.63 1332.6,1207.63 1333.18,1207.63 1333.77,1207.63 1334.35,1207.63 1334.94,1207.63 1335.53,1207.63 1336.11,1207.63 1336.7,1207.63 1337.29,1207.63 1337.87,1207.63 1338.46,1207.63 1339.05,1207.63 1339.63,1207.63 1340.22,1207.63 1340.8,1207.63 1341.39,1207.63 1341.98,1207.63 1342.56,1207.63 1343.15,1207.63 1343.74,1207.63 1344.32,1207.63 1344.91,1207.63 1345.5,1207.63 1346.08,1207.63 1346.67,1207.63 1347.26,1207.63 1347.84,1207.63 1348.43,1207.63 1349.01,1207.63 1349.6,1207.63 1350.19,1207.63 1350.77,1207.63 1351.36,1207.63 1351.95,1207.63 1352.53,1207.63 1353.12,1207.63 1353.71,1207.63 1354.29,1207.63 1354.88,1207.63 1355.47,1207.63 1356.05,1207.63 1356.64,1207.63 1357.22,1207.63 1357.81,1207.63 1358.4,1207.63 1358.98,1207.63 1359.57,1207.63 1360.16,1207.63 1360.74,1207.63 1361.33,1207.63 1361.92,1207.63 1362.5,1207.63 1363.09,1207.63 1363.68,1207.63 1364.26,1207.63 1364.85,1207.63 1365.43,1207.63 1366.02,1207.63 1366.61,1207.63 1367.19,1207.63 1367.78,1207.63 1368.37,1207.63 1368.95,1207.63 1369.54,1207.63 1370.13,1207.63 1370.71,1207.63 1371.3,1207.63 1371.88,1207.63 1372.47,1207.63 1373.06,1207.63 1373.64,1207.63 1374.23,1207.63 1374.82,1207.63 1375.4,1207.63 1375.99,1207.63 1376.58,1207.63 1377.16,1207.63 1377.75,1207.63 1378.34,1207.63 1378.92,1207.63 1379.51,1207.63 1380.09,1207.63 1380.68,1207.63 1381.27,1207.63 1381.85,1207.63 1382.44,1207.63 1383.03,1207.63 1383.61,1207.63 1384.2,1207.63 1384.79,1207.63 1385.37,1207.63 1385.96,1207.63 1386.55,1207.63 1387.13,1207.63 1387.72,1207.63 1388.3,1207.63 1388.89,1207.63 1389.48,1207.63 1390.06,1207.63 1390.65,1207.63 1391.24,1207.63 1391.82,1207.63 1392.41,1207.63 1393,1207.63 1393.58,1207.63 1394.17,1207.63 1394.75,1207.63 1395.34,1207.63 1395.93,1207.63 1396.51,1207.63 1397.1,1207.63 1397.69,1207.63 1398.27,1207.63 1398.86,1207.63 1399.45,1207.63 1400.03,1207.63 1400.62,1207.63 1401.21,1207.63 1401.79,1207.63 1402.38,1207.63 1402.96,1207.63 1403.55,1207.63 1404.14,1207.63 1404.72,1207.63 1405.31,1207.63 1405.9,1207.63 1406.48,1207.63 1407.07,1207.63 1407.66,1207.63 1408.24,1207.63 1408.83,1207.63 1409.42,1207.63 1410,1207.63 1410.59,1207.63 1411.17,1207.63 1411.76,1207.63 1412.35,1207.63 1412.93,1207.63 1413.52,1207.63 1414.11,1207.63 1414.69,1207.63 1415.28,1207.63 1415.87,1207.63 1416.45,1207.63 1417.04,1207.63 1417.63,1207.63 1418.21,1207.63 1418.8,1207.63 1419.38,1207.63 1419.97,1207.63 1420.56,1207.63 1421.14,1207.63 1421.73,1207.63 1422.32,1207.63 1422.9,1207.63 1423.49,1207.63 1424.08,1207.63 1424.66,1207.63 1425.25,1207.63 1425.83,1207.63 1426.42,1207.63 1427.01,1207.63 1427.59,1207.63 1428.18,1207.63 1428.77,1207.63 1429.35,1207.63 1429.94,1207.63 1430.53,1207.63 1431.11,1207.63 1431.7,1207.63 1432.29,1207.63 1432.87,1207.63 1433.46,1207.63 1434.04,1207.63 1434.63,1207.63 1435.22,1207.63 1435.8,1207.63 1436.39,1207.63 1436.98,1207.63 1437.56,1207.63 1438.15,1207.63 1438.74,1207.63 1439.32,1207.63 1439.91,1207.63 1440.5,1207.63 1441.08,1207.63 1441.67,1207.63 1442.25,1207.63 1442.84,1207.63 1443.43,1207.63 1444.01,1207.63 1444.6,1207.63 1445.19,1207.63 1445.77,1207.63 1446.36,1207.63 1446.95,1207.63 1447.53,1207.63 1448.12,1207.63 1448.7,1207.63 1449.29,1207.63 1449.88,1207.63 1450.46,1207.63 1451.05,1207.63 1451.64,1207.63 1452.22,1207.63 1452.81,1207.63 1453.4,1207.63 1453.98,1207.63 1454.57,1207.63 1455.16,1207.63 1455.74,1207.63 1456.33,1207.63 1456.91,1207.63 1457.5,1207.63 1458.09,1207.63 1458.67,1207.63 1459.26,1207.63 1459.85,1207.63 1460.43,1207.63 1461.02,1207.63 1461.61,1207.63 1462.19,1207.63 1462.78,1207.63 1463.37,1207.63 1463.95,1207.63 1464.54,1207.63 1465.12,1207.63 1465.71,1207.63 1466.3,1207.63 1466.88,1207.63 1467.47,1207.63 1468.06,1207.63 1468.64,1207.63 1469.23,1207.63 1469.82,1207.63 1470.4,1207.63 1470.99,1207.63 1471.57,1207.63 1472.16,1207.63 1472.75,1207.63 1473.33,1207.63 1473.92,1207.63 1474.51,1207.63 1475.09,1207.63 1475.68,1207.63 1476.27,1207.63 1476.85,1207.63 1477.44,1207.63 1478.03,1207.63 1478.61,1207.63 1479.2,1207.63 1479.78,1207.63 1480.37,1207.63 1480.96,1207.63 1481.54,1207.63 1482.13,1207.63 1482.72,1207.63 1483.3,1207.63 1483.89,1207.63 1484.48,1207.63 1485.06,1207.63 1485.65,1207.63 1486.24,1207.63 1486.82,1207.63 1487.41,1207.63 1487.99,1207.63 1488.58,1207.63 1489.17,1207.63 1489.75,1207.63 1490.34,1207.63 1490.93,1207.63 1491.51,1207.63 1492.1,1207.63 1492.69,1207.63 1493.27,1207.63 1493.86,1207.63 1494.45,1207.63 1495.03,1207.63 1495.62,1207.63 1496.2,1207.63 1496.79,1207.63 1497.38,1207.63 1497.96,1207.63 1498.55,1207.63 1499.14,1207.63 1499.72,1207.63 1500.31,1207.63 1500.9,1207.63 1501.48,1207.63 1502.07,1207.63 1502.65,1207.63 1503.24,1207.63 1503.83,1207.63 1504.41,1207.63 1505,1207.63 1505.59,1207.63 1506.17,1207.63 1506.76,1207.63 1507.35,1207.63 1507.93,1207.63 1508.52,1207.63 1509.11,1207.63 1509.69,1207.63 1510.28,1207.63 1510.86,1207.63 1511.45,1207.63 1512.04,1207.63 1512.62,1207.63 1513.21,1207.63 1513.8,1207.63 1514.38,1207.63 1514.97,1207.63 1515.56,1207.63 1516.14,1207.63 1516.73,1207.63 1517.32,1207.63 1517.9,1207.63 1518.49,1207.63 1519.07,1207.63 1519.66,1207.63 1520.25,1207.63 1520.83,1207.63 1521.42,1207.63 1522.01,1207.63 1522.59,1207.63 1523.18,1207.63 1523.77,1207.63 1524.35,1207.63 1524.94,1207.63 1525.52,1207.63 1526.11,1207.63 1526.7,1207.63 1527.28,1207.63 1527.87,1207.63 1528.46,1207.63 1529.04,1207.63 1529.63,1207.63 1530.22,1207.63 1530.8,1207.63 1531.39,1207.63 1531.98,1207.63 1532.56,1207.63 1533.15,1207.63 1533.73,1207.63 1534.32,1207.63 1534.91,1207.63 1535.49,1207.63 1536.08,1207.63 1536.67,1207.63 1537.25,1207.63 1537.84,1207.63 1538.43,1207.63 1539.01,1207.63 1539.6,1207.63 1540.19,1207.63 1540.77,1207.63 1541.36,1207.63 1541.94,1207.63 1542.53,1207.63 1543.12,1207.63 1543.7,1207.63 1544.29,1207.63 1544.88,1207.63 1545.46,1207.63 1546.05,1207.63 1546.64,1207.63 1547.22,1207.63 1547.81,1207.63 1548.4,1207.63 1548.98,1207.63 1549.57,1207.63 1550.15,1207.63 1550.74,1207.63 1551.33,1207.63 1551.91,1207.63 1552.5,1207.63 1553.09,1207.63 1553.67,1207.63 1554.26,1207.63 1554.85,1207.63 1555.43,1207.63 1556.02,1207.63 1556.6,1207.63 1557.19,1207.63 1557.78,1207.63 1558.36,1207.63 1558.95,1207.63 1559.54,1207.63 1560.12,1207.63 1560.71,1207.63 1561.3,1207.63 1561.88,1207.63 1562.47,1207.63 1563.06,1207.63 1563.64,1207.63 1564.23,1207.63 1564.81,1207.63 1565.4,1207.63 1565.99,1207.63 1566.57,1207.63 1567.16,1207.63 1567.75,1207.63 1568.33,1207.63 1568.92,1207.63 1569.51,1207.63 1570.09,1207.63 1570.68,1207.63 1571.27,1207.63 1571.85,1207.63 1572.44,1207.63 1573.02,1207.63 1573.61,1207.63 1574.2,1207.63 1574.78,1207.63 1575.37,1207.63 1575.96,1207.63 1576.54,1207.63 1577.13,1207.63 1577.72,1207.63 1578.3,1207.63 1578.89,1207.63 1579.47,1207.63 1580.06,1207.63 1580.65,1207.63 1581.23,1207.63 1581.82,1207.63 1582.41,1207.63 1582.99,1207.63 1583.58,1207.63 1584.17,1207.63 1584.75,1207.63 1585.34,1207.63 1585.93,1207.63 1586.51,1207.63 1587.1,1207.63 1587.68,1207.63 1588.27,1207.63 1588.86,1207.63 1589.44,1207.63 1590.03,1207.63 1590.62,1207.63 1591.2,1207.63 1591.79,1207.63 1592.38,1207.63 1592.96,1207.63 1593.55,1207.63 1594.14,1207.63 1594.72,1207.63 1595.31,1207.63 1595.89,1207.63 1596.48,1207.63 1597.07,1207.63 1597.65,1207.63 1598.24,1207.63 1598.83,1207.63 1599.41,1207.63 1600,1207.63 1600.59,1207.63 1601.17,1207.63 1601.76,1207.63 1602.34,1207.63 1602.93,1207.63 1603.52,1207.63 1604.1,1207.63 1604.69,1207.63 1605.28,1207.63 1605.86,1207.63 1606.45,1207.63 1607.04,1207.63 1607.62,1207.63 1608.21,1207.63 1608.8,1207.63 1609.38,1207.63 1609.97,1207.63 1610.55,1207.63 1611.14,1207.63 1611.73,1207.63 1612.31,1207.63 1612.9,1207.63 1613.49,1207.63 1614.07,1207.63 1614.66,1207.63 1615.25,1207.63 1615.83,1207.63 1616.42,1207.63 1617.01,1207.63 1617.59,1207.63 1618.18,1207.63 1618.76,1207.63 1619.35,1207.63 1619.94,1207.63 1620.52,1207.63 1621.11,1207.63 1621.7,1207.63 1622.28,1207.63 1622.87,1207.63 1623.46,1207.63 1624.04,1207.63 1624.63,1207.63 1625.22,1207.63 1625.8,1207.63 1626.39,1207.63 1626.97,1207.63 1627.56,1207.63 1628.15,1207.63 1628.73,1207.63 1629.32,1207.63 1629.91,1207.63 1630.49,1207.63 1631.08,1207.63 1631.67,1207.63 1632.25,1207.63 1632.84,1207.63 1633.42,1207.63 1634.01,1207.63 1634.6,1207.63 1635.18,1207.63 1635.77,1207.63 1636.36,1207.63 1636.94,1207.63 1637.53,1207.63 1638.12,1207.63 1638.7,1207.63 1639.29,1207.63 1639.88,1207.63 1640.46,1207.63 1641.05,1207.63 1641.63,1207.63 1642.22,1207.63 1642.81,1207.63 1643.39,1207.63 1643.98,1207.63 1644.57,1207.63 1645.15,1207.63 1645.74,1207.63 1646.33,1207.63 1646.91,1207.63 1647.5,1207.63 1648.09,1207.63 1648.67,1207.63 1649.26,1207.63 1649.84,1207.63 1650.43,1207.63 1651.02,1207.63 1651.6,1207.63 1652.19,1207.63 1652.78,1207.63 1653.36,1207.63 1653.95,1207.63 1654.54,1207.63 1655.12,1207.63 1655.71,1207.63 1656.29,1207.63 1656.88,1207.63 1657.47,1207.63 1658.05,1207.63 1658.64,1207.63 1659.23,1207.63 1659.81,1207.63 1660.4,1207.63 1660.99,1207.63 1661.57,1207.63 1662.16,1207.63 1662.75,1207.63 1663.33,1207.63 1663.92,1207.63 1664.5,1207.63 1665.09,1207.63 1665.68,1207.63 1666.26,1207.63 1666.85,1207.63 1667.44,1207.63 1668.02,1207.63 1668.61,1207.63 1669.2,1207.63 1669.78,1207.63 1670.37,1207.63 1670.96,1207.63 1671.54,1207.63 1672.13,1207.63 1672.71,1207.63 1673.3,1207.63 1673.89,1207.63 1674.47,1207.63 1675.06,1207.63 1675.65,1207.63 1676.23,1207.63 1676.82,1207.63 1677.41,1207.63 1677.99,1207.63 1678.58,1207.63 1679.17,1207.63 1679.75,1207.63 1680.34,1207.63 1680.92,1207.63 1681.51,1207.63 1682.1,1207.63 1682.68,1207.63 1683.27,1207.63 1683.86,1207.63 1684.44,1207.63 1685.03,1207.63 1685.62,1207.63 1686.2,1207.63 1686.79,1207.63 1687.37,1207.63 1687.96,1207.63 1688.55,1207.63 1689.13,1207.63 1689.72,1207.63 1690.31,1207.63 1690.89,1207.63 1691.48,1207.63 1692.07,1207.63 1692.65,1207.63 1693.24,1207.63 1693.83,1207.63 1694.41,1207.63 1695,1207.63 1695.58,1207.63 1696.17,1207.63 1696.76,1207.63 1697.34,1207.63 1697.93,1207.63 1698.52,1207.63 1699.1,1207.63 1699.69,1207.63 1700.28,1207.63 1700.86,1207.63 1701.45,1207.63 1702.04,1207.63 1702.62,1207.63 1703.21,1207.63 1703.79,1207.63 1704.38,1207.63 1704.97,1207.63 1705.55,1207.63 1706.14,1207.63 1706.73,1207.63 1707.31,1207.63 1707.9,1207.63 1708.49,1207.63 1709.07,1207.63 1709.66,1207.63 1710.24,1207.63 1710.83,1207.63 1711.42,1207.63 1712,1207.63 1712.59,1207.63 1713.18,1207.63 1713.76,1207.63 1714.35,1207.63 1714.94,1207.63 1715.52,1207.63 1716.11,1207.63 1716.7,1207.63 1717.28,1207.63 1717.87,1207.63 1718.45,1207.63 1719.04,1207.63 1719.63,1207.63 1720.21,1207.63 1720.8,1207.63 1721.39,1207.63 1721.97,1207.63 1722.56,1207.63 1723.15,1207.63 1723.73,1207.63 1724.32,1207.63 1724.91,1207.63 1725.49,1207.63 1726.08,1207.63 1726.66,1207.63 1727.25,1207.63 1727.84,1207.63 1728.42,1207.63 1729.01,1207.63 1729.6,1207.63 1730.18,1207.63 1730.77,1207.63 1731.36,1207.63 1731.94,1207.63 1732.53,1207.63 1733.11,1207.63 1733.7,1207.63 1734.29,1207.63 1734.87,1207.63 1735.46,1207.63 1736.05,1207.63 1736.63,1207.63 1737.22,1207.63 1737.81,1207.63 1738.39,1207.63 1738.98,1207.63 1739.57,1207.63 1740.15,1207.63 1740.74,1207.63 1741.32,1207.63 1741.91,1207.63 1742.5,1207.63 1743.08,1207.63 1743.67,1207.63 1744.26,1207.63 1744.84,1207.63 1745.43,1207.63 1746.02,1207.63 1746.6,1207.63 1747.19,1207.63 1747.78,1207.63 1748.36,1207.63 1748.95,1207.63 1749.53,1207.63 1750.12,1207.63 1750.71,1207.63 1751.29,1207.63 1751.88,1207.63 1752.47,1207.63 1753.05,1207.63 1753.64,1207.63 1754.23,1207.63 1754.81,1207.63 1755.4,1207.63 1755.99,1207.63 1756.57,1207.63 1757.16,1207.63 1757.74,1207.63 1758.33,1207.63 1758.92,1207.63 1759.5,1207.63 1760.09,1207.63 1760.68,1207.63 1761.26,1207.63 1761.85,1207.63 1762.44,1207.63 1763.02,1207.63 1763.61,1207.63 1764.19,1207.63 1764.78,1207.63 1765.37,1207.63 1765.95,1207.63 1766.54,1207.63 1767.13,1207.63 1767.71,1207.63 1768.3,1207.63 1768.89,1207.63 1769.47,1207.63 1770.06,1207.63 1770.65,1207.63 1771.23,1207.63 1771.82,1207.63 1772.4,1207.63 1772.99,1207.63 1773.58,1207.63 1774.16,1207.63 1774.75,1207.63 1775.34,1207.63 1775.92,1207.63 1776.51,1207.63 1777.1,1207.63 1777.68,1207.63 1778.27,1207.63 1778.86,1207.63 1779.44,1207.63 1780.03,1207.63 1780.61,1207.63 1781.2,1207.63 1781.79,1207.63 1782.37,1207.63 1782.96,1207.63 1783.55,1207.63 1784.13,1207.63 1784.72,1207.63 1785.31,1207.63 1785.89,1207.63 1786.48,1207.63 1787.06,1207.63 1787.65,1207.63 1788.24,1207.63 1788.82,1207.63 1789.41,1207.63 1790,1207.63 1790.58,1207.63 1791.17,1207.63 1791.76,1207.63 1792.34,1207.63 1792.93,1207.63 1793.52,1207.63 1794.1,1207.63 1794.69,1207.63 1795.27,1207.63 1795.86,1207.63 1796.45,1207.63 1797.03,1207.63 1797.62,1207.63 1798.21,1207.63 1798.79,1207.63 1799.38,1207.63 1799.97,1207.63 1800.55,1207.63 1801.14,1207.63 1801.73,1207.63 1802.31,1207.63 1802.9,1207.63 1803.48,1207.63 1804.07,1207.63 1804.66,1207.63 1805.24,1207.63 1805.83,1207.63 1806.42,1207.63 1807,1207.63 1807.59,1207.63 1808.18,1207.63 1808.76,1207.63 1809.35,1207.63 1809.94,1207.63 1810.52,1207.63 1811.11,1207.63 1811.69,1207.63 1812.28,1207.63 1812.87,1207.63 1813.45,1207.63 1814.04,1207.63 1814.63,1207.63 1815.21,1207.63 1815.8,1207.63 1816.39,1207.63 1816.97,1207.63 1817.56,1207.63 1818.14,1207.63 1818.73,1207.63 1819.32,1207.63 1819.9,1207.63 1820.49,1207.63 1821.08,1207.63 1821.66,1207.63 1822.25,1207.63 1822.84,1207.63 1823.42,1207.63 1824.01,1207.63 1824.6,1207.63 1825.18,1207.63 1825.77,1207.63 1826.35,1207.63 1826.94,1207.63 1827.53,1207.63 1828.11,1207.63 1828.7,1207.63 1829.29,1207.63 1829.87,1207.63 1830.46,1207.63 1831.05,1207.63 1831.63,1207.63 1832.22,1207.63 1832.81,1207.63 1833.39,1207.63 1833.98,1207.63 1834.56,1207.63 1835.15,1207.63 1835.74,1207.63 1836.32,1207.63 1836.91,1207.63 1837.5,1207.63 1838.08,1207.63 1838.67,1207.63 1839.26,1207.63 1839.84,1207.63 1840.43,1207.63 1841.01,1207.63 1841.6,1207.63 1842.19,1207.63 1842.77,1207.63 1843.36,1207.63 1843.95,1207.63 1844.53,1207.63 1845.12,1207.63 1845.71,1207.63 1846.29,1207.63 1846.88,1207.63 1847.47,1207.63 1848.05,1207.63 1848.64,1207.63 1849.22,1207.63 1849.81,1207.63 1850.4,1207.63 1850.98,1207.63 1851.57,1207.63 1852.16,1207.63 1852.74,1207.63 1853.33,1207.63 1853.92,1207.63 1854.5,1207.63 1855.09,1207.63 1855.68,1207.63 1856.26,1207.63 1856.85,1207.63 1857.43,1207.63 1858.02,1207.63 1858.61,1207.63 1859.19,1207.63 1859.78,1207.63 1860.37,1207.63 1860.95,1207.63 1861.54,1207.63 1862.13,1207.63 1862.71,1207.63 1863.3,1207.63 1863.88,1207.63 1864.47,1207.63 1865.06,1207.63 1865.64,1207.63 1866.23,1207.63 1866.82,1207.63 1867.4,1207.63 1867.99,1207.63 1868.58,1207.63 1869.16,1207.63 1869.75,1207.63 1870.34,1207.63 1870.92,1207.63 1871.51,1207.63 1872.09,1207.63 1872.68,1207.63 1873.27,1207.63 1873.85,1207.63 1874.44,1207.63 1875.03,1207.63 1875.61,1207.63 1876.2,1207.63 1876.79,1207.63 1877.37,1207.63 1877.96,1207.63 1878.55,1207.63 1879.13,1207.63 1879.72,1207.63 1880.3,1207.63 1880.89,1207.63 1881.48,1207.63 1882.06,1207.63 1882.65,1207.63 1883.24,1207.63 1883.82,1207.63 1884.41,1207.63 1885,1207.63 1885.58,1207.63 1886.17,1207.63 1886.76,1207.63 1887.34,1207.63 1887.93,1207.63 1888.51,1207.63 1889.1,1207.63 1889.69,1207.63 1890.27,1207.63 1890.86,1207.63 1891.45,1207.63 1892.03,1207.63 1892.62,1207.63 1893.21,1207.63 1893.79,1207.63 1894.38,1207.63 1894.96,1207.63 1895.55,1207.63 1896.14,1207.63 1896.72,1207.63 1897.31,1207.63 1897.9,1207.63 1898.48,1207.63 1899.07,1207.63 1899.66,1207.63 1900.24,1207.63 1900.83,1207.63 1901.42,1207.63 1902,1207.63 1902.59,1207.63 1903.17,1207.63 1903.76,1207.63 1904.35,1207.63 1904.93,1207.63 1905.52,1207.63 1906.11,1207.63 1906.69,1207.63 1907.28,1207.63 1907.87,1207.63 1908.45,1207.63 1909.04,1207.63 1909.63,1207.63 1910.21,1207.63 1910.8,1207.63 1911.38,1207.63 1911.97,1207.63 1912.56,1207.63 1913.14,1207.63 1913.73,1207.63 1914.32,1207.63 1914.9,1207.63 1915.49,1207.63 1916.08,1207.63 1916.66,1207.63 1917.25,1207.63 1917.83,1207.63 1918.42,1207.63 1919.01,1207.63 1919.59,1207.63 1920.18,1207.63 1920.77,1207.63 1921.35,1207.63 1921.94,1207.63 1922.53,1207.63 1923.11,1207.63 1923.7,1207.63 1924.29,1207.63 1924.87,1207.63 1925.46,1207.63 1926.04,1207.63 1926.63,1207.63 1927.22,1207.63 1927.8,1207.63 1928.39,1207.63 1928.98,1207.63 1929.56,1207.63 1930.15,1207.63 1930.74,1207.63 1931.32,1207.63 1931.91,1207.63 1932.5,1207.63 1933.08,1207.63 1933.67,1207.63 1934.25,1207.63 1934.84,1207.63 1935.43,1207.63 1936.01,1207.63 1936.6,1207.63 1937.19,1207.63 1937.77,1207.63 1938.36,1207.63 1938.95,1207.63 1939.53,1207.63 1940.12,1207.63 1940.71,1207.63 1941.29,1207.63 1941.88,1207.63 1942.46,1207.63 1943.05,1207.63 1943.64,1207.63 1944.22,1207.63 1944.81,1207.63 1945.4,1207.63 1945.98,1207.63 1946.57,1207.63 1947.16,1207.63 1947.74,1207.63 1948.33,1207.63 1948.91,1207.63 1949.5,1207.63 1950.09,1207.63 1950.67,1207.63 1951.26,1207.63 1951.85,1207.63 1952.43,1207.63 1953.02,1207.63 1953.61,1207.63 1954.19,1207.63 1954.78,1207.63 1955.37,1207.63 1955.95,1207.63 1956.54,1207.63 1957.12,1207.63 1957.71,1207.63 1958.3,1207.63 1958.88,1207.63 1959.47,1207.63 1960.06,1207.63 1960.64,1207.63 1961.23,1207.63 1961.82,1207.63 1962.4,1207.63 1962.99,1207.63 1963.58,1207.63 1964.16,1207.63 1964.75,1207.63 1965.33,1207.63 1965.92,1207.63 1966.51,1207.63 1967.09,1207.63 1967.68,1207.63 1968.27,1207.63 1968.85,1207.63 1969.44,1207.63 1970.03,1207.63 1970.61,1207.63 1971.2,1207.63 1971.78,1207.63 1972.37,1207.63 1972.96,1207.63 1973.54,1207.63 1974.13,1207.63 1974.72,1207.63 1975.3,1207.63 1975.89,1207.63 1976.48,1207.63 1977.06,1207.63 1977.65,1207.63 1978.24,1207.63 1978.82,1207.63 1979.41,1207.63 1979.99,1207.63 1980.58,1207.63 1981.17,1207.63 1981.75,1207.63 1982.34,1207.63 1982.93,1207.63 1983.51,1207.63 1984.1,1207.63 1984.69,1207.63 1985.27,1207.63 1985.86,1207.63 1986.45,1207.63 1987.03,1207.63 1987.62,1207.63 1988.2,1207.63 1988.79,1207.63 1989.38,1207.63 1989.96,1207.63 1990.55,1207.63 1991.14,1207.63 1991.72,1207.63 1992.31,1207.63 1992.9,1207.63 1993.48,1207.63 1994.07,1207.63 1994.65,1207.63 1995.24,1207.63 1995.83,1207.63 1996.41,1207.63 1997,1207.63 1997.59,1207.63 1998.17,1207.63 1998.76,1207.63 1999.35,1207.63 1999.93,1207.63 2000.52,1207.63 2001.11,1207.63 2001.69,1207.63 2002.28,1207.63 2002.86,1207.63 2003.45,1207.63 2004.04,1207.63 2004.62,1207.63 2005.21,1207.63 2005.8,1207.63 2006.38,1207.63 2006.97,1207.63 2007.56,1207.63 2008.14,1207.63 2008.73,1207.63 2009.32,1207.63 2009.9,1207.63 2010.49,1207.63 2011.07,1207.63 2011.66,1207.63 2012.25,1207.63 2012.83,1207.63 2013.42,1207.63 2014.01,1207.63 2014.59,1207.63 2015.18,1207.63 2015.77,1207.63 2016.35,1207.63 2016.94,1207.63 2017.53,1207.63 2018.11,1207.63 2018.7,1207.63 2019.28,1207.63 2019.87,1207.63 2020.46,1207.63 2021.04,1207.63 2021.63,1207.63 2022.22,1207.63 2022.8,1207.63 2023.39,1207.63 2023.98,1207.63 2024.56,1207.63 2025.15,1207.63 2025.73,1207.63 2026.32,1207.63 2026.91,1207.63 2027.49,1207.63 2028.08,1207.63 2028.67,1207.63 2029.25,1207.63 2029.84,1207.63 2030.43,1207.63 2031.01,1207.63 2031.6,1207.63 2032.19,1207.63 2032.77,1207.63 2033.36,1207.63 2033.94,1207.63 2034.53,1207.63 2035.12,1207.63 2035.7,1207.63 2036.29,1207.63 2036.88,1207.63 2037.46,1207.63 2038.05,1207.63 2038.64,1207.63 2039.22,1207.63 2039.81,1207.63 2040.4,1207.63 2040.98,1207.63 2041.57,1207.63 2042.15,1207.63 2042.74,1207.63 2043.33,1207.63 2043.91,1207.63 2044.5,1207.63 2045.09,1207.63 2045.67,1207.63 2046.26,1207.63 2046.85,1207.63 2047.43,1207.63 2048.02,1207.63 2048.6,1207.63 2049.19,1207.63 2049.78,1207.63 2050.36,1207.63 2050.95,1207.63 2051.54,1207.63 2052.12,1207.63 2052.71,1207.63 2053.3,1207.63 2053.88,1207.63 2054.47,1207.63 2055.06,1207.63 2055.64,1207.63 2056.23,1207.63 2056.81,1207.63 2057.4,1207.63 2057.99,1207.63 2058.57,1207.63 2059.16,1207.63 2059.75,1207.63 2060.33,1207.63 2060.92,1207.63 2061.51,1207.63 2062.09,1207.63 2062.68,1207.63 2063.27,1207.63 2063.85,1207.63 2064.44,1207.63 2065.02,1207.63 2065.61,1207.63 2066.2,1207.63 2066.78,1207.63 2067.37,1207.63 2067.96,1207.63 2068.54,1207.63 2069.13,1207.63 2069.72,1207.63 2070.3,1207.63 2070.89,1207.63 2071.48,1207.63 2072.06,1207.63 2072.65,1207.63 2073.23,1207.63 2073.82,1207.63 2074.41,1207.63 2074.99,1207.63 2075.58,1207.63 2076.17,1207.63 2076.75,1207.63 2077.34,1207.63 2077.93,1207.63 2078.51,1207.63 2079.1,1207.63 2079.68,1207.63 2080.27,1207.63 2080.86,1207.63 2081.44,1207.63 2082.03,1207.63 2082.62,1207.63 2083.2,1207.63 2083.79,1207.63 2084.38,1207.63 2084.96,1207.63 2085.55,1207.63 2086.14,1207.63 2086.72,1207.63 2087.31,1207.63 2087.89,1207.63 2088.48,1207.63 2089.07,1207.63 2089.65,1207.63 2090.24,1207.63 2090.83,1207.63 2091.41,1207.63 2092,1207.63 2092.59,1207.63 2093.17,1207.63 2093.76,1207.63 2094.35,1207.63 2094.93,1207.63 2095.52,1207.63 2096.1,1207.63 2096.69,1207.63 2097.28,1207.63 2097.86,1207.63 2098.45,1207.63 2099.04,1207.63 2099.62,1207.63 2100.21,1207.63 2100.8,1207.63 2101.38,1207.63 2101.97,1207.63 2102.55,1207.63 2103.14,1207.63 2103.73,1207.63 2104.31,1207.63 2104.9,1207.63 2105.49,1207.63 2106.07,1207.63 2106.66,1207.63 2107.25,1207.63 2107.83,1207.63 2108.42,1207.63 2109.01,1207.63 2109.59,1207.63 2110.18,1207.63 2110.76,1207.63 2111.35,1207.63 2111.94,1207.63 2112.52,1207.63 2113.11,1207.63 2113.7,1207.63 2114.28,1207.63 2114.87,1207.63 2115.46,1207.63 2116.04,1207.63 2116.63,1207.63 2117.22,1207.63 2117.8,1207.63 2118.39,1207.63 2118.97,1207.63 2119.56,1207.63 2120.15,1207.63 2120.73,1207.63 2121.32,1207.63 2121.91,1207.63 2122.49,1207.63 2123.08,1207.63 2123.67,1207.63 2124.25,1207.63 2124.84,1207.63 2125.42,1207.63 2126.01,1207.63 2126.6,1207.63 2127.18,1207.63 2127.77,1207.63 2128.36,1207.63 2128.94,1207.63 2129.53,1207.63 2130.12,1207.63 2130.7,1207.63 2131.29,1207.63 2131.88,1207.63 2132.46,1207.63 2133.05,1207.63 2133.63,1207.63 2134.22,1207.63 2134.81,1207.63 2135.39,1207.63 2135.98,1207.63 2136.57,1207.63 2137.15,1207.63 2137.74,1207.63 2138.33,1207.63 2138.91,1207.63 2139.5,1207.63 2140.09,1207.63 2140.67,1207.63 2141.26,1207.63 2141.84,1207.63 2142.43,1207.63 2143.02,1207.63 2143.6,1207.63 2144.19,1207.63 2144.78,1207.63 2145.36,1207.63 2145.95,1207.63 2146.54,1207.63 2147.12,1207.63 2147.71,1207.63 2148.3,1207.63 2148.88,1207.63 2149.47,1207.63 2150.05,1207.63 2150.64,1207.63 2151.23,1207.63 2151.81,1207.63 2152.4,1207.63 2152.99,1207.63 2153.57,1207.63 2154.16,1207.63 2154.75,1207.63 2155.33,1207.63 2155.92,1207.63 2156.5,1207.63 2157.09,1207.63 2157.68,1207.63 2158.26,1207.63 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.29,1188.33 1400.44,899.083 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.3 985.439,1188.33 2158.26,1188.33 2158.26,1226.3 985.439,1226.3 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip943\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip943)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-6762.81 164.91,-7631.25 165.469,-8420.87 166.029,-7989.27 166.588,-8671.71 167.147,-8316.64 167.706,-8917.16 168.266,-8616.35 168.825,-9139.25 169.384,-9596.38 169.943,-10014.3 170.503,-10373.1 171.062,-10683.9 171.621,-9246.46 172.18,-9590.14 172.74,-9385.22 173.299,-9677.64 173.858,-9932.2 174.417,-9737.61 174.977,-9924.54 175.536,-10069.9 176.095,-9858.51 176.655,-9666.27 177.214,-9778.04 177.773,-9847.41 178.332,-9903.68 178.892,-9932 179.451,-9483.8 180.01,-9497.05 180.569,-9489.05 181.129,-9482.76 181.688,-9454.32 182.247,-9053.15 182.806,-8677.56 183.366,-8620.72 183.925,-8570.95 184.484,-8505.87 185.043,-8155.78 185.603,-8078.01 186.162,-7999.15 186.721,-7797.75 187.28,-7708.91 187.84,-7393.39 188.399,-7306.6 188.958,-7022.03 189.517,-6847.08 190.077,-6762.76 190.636,-6674.52 191.195,-6488.69 191.754,-6392.47 192.314,-6218.05 192.873,-6116.57 193.432,-6010.74 193.991,-5839.87 194.551,-5481.43 195.11,-5323.91 195.669,-5235.89 196.228,-4917.33 196.788,-4776.5 197.347,-4638.03 197.906,-4452.43 198.465,-4277.15 199.025,-4199.9 199.584,-4024.05 200.143,-3902.69 200.702,-3825.51 201.262,-3656.18 201.821,-3460.14 202.38,-3348.44 202.939,-3123.44 203.499,-2992.28 204.058,-2859.04 204.617,-2696.93 205.176,-2608.48 205.736,-2522.52 206.295,-2370.33 206.854,-2291.6 207.413,-2143.22 207.973,-2042.01 208.532,-1967.95 209.091,-1866.2 209.65,-1821.67 210.21,-1720.36 210.769,-1624.05 211.328,-1499.95 211.887,-1382.27 212.447,-1240.63 213.006,-1127.41 213.565,-1070.03 214.124,-913.528 214.684,-890.9 215.243,-840.339 215.802,-809.797 216.361,-728.483 216.921,-624.049 217.48,-551.548 218.039,-481.822 218.598,-437.981 219.158,-418.426 219.717,-401.661 220.276,-312.062 220.835,-250.534 221.395,-191.179 221.954,-195.025 222.513,-136.38 223.072,-123.57 223.632,-65.9761 224.191,-52.0359 224.75,-33.4593 225.309,6.81306 225.869,47.5399 226.428,103.521 226.987,161.382 227.546,190.378 228.106,197.816 228.665,246.769 229.224,296.597 229.783,345.276 230.343,354.379 230.902,320.014 231.461,348.332 232.02,356.17 232.58,387.344 233.139,436.945 233.698,425.78 234.257,433.913 234.817,444.625 235.376,450.795 235.935,496.076 236.494,504.975 237.054,477.398 237.613,525.411 238.172,553.116 238.731,598.674 239.291,637.365 239.85,659.408 240.409,717.597 240.968,757.823 241.528,754.065 242.087,787.093 242.646,806.14 243.205,809.508 243.765,809.317 244.324,791.759 244.883,788.426 245.442,823.331 246.002,786.272 246.561,786.715 247.12,841.744 247.679,788.056 248.239,842.642 248.798,895.196 249.357,907.534 249.916,905.954 250.476,923.22 251.035,938.385 251.594,968.556 252.153,980.194 252.713,972.338 253.272,983.271 253.831,955.113 254.39,951.19 254.95,944.636 255.509,980.398 256.068,995.071 256.627,1022.42 257.187,1000.28 257.746,1025.59 258.305,1033.69 258.864,1063.91 259.424,1086.31 259.983,1076.62 260.542,1083.47 261.101,1086.28 261.661,1109.53 262.22,1079.98 262.779,1105.15 263.338,1079.48 263.898,1066.84 264.457,1023.8 265.016,1019.09 265.575,1011.85 266.135,1051.91 266.694,1063.95 267.253,1037.93 267.812,1083.7 268.372,1090.9 268.931,1099.59 269.49,1110.79 270.049,1132.42 270.609,1154.21 271.168,1175.99 271.727,1177.91 272.286,1162.3 272.846,1133.19 273.405,1153.07 273.964,1140.21 274.523,1128.13 275.083,1132.78 275.642,1101.86 276.201,1091.9 276.76,1112.26 277.32,1119.23 277.879,1093.84 278.438,1098.95 278.997,1088.95 279.557,1013.98 280.116,991.731 280.675,970.113 281.234,999.277 281.794,1008.52 282.353,1005.49 282.912,1017.68 283.471,1041.76 284.031,1000.08 284.59,998.369 285.149,959.582 285.708,959.252 286.268,922.732 286.827,938.203 287.386,968.929 287.945,968.379 288.505,932.861 289.064,914.756 289.623,897.796 290.182,912.187 290.742,914.262 291.301,913.528 291.86,902.119 292.419,899.886 292.979,899.374 293.538,885.448 294.097,887.094 294.656,921.672 295.216,888.484 295.775,874.258 296.334,859.784 296.893,863.517 297.453,885.687 298.012,887.315 298.571,873.244 299.13,906.381 299.69,906.195 300.249,919.587 300.808,905.503 301.368,921.23 301.927,937.588 302.486,935.842 303.045,949.644 303.605,929.389 304.164,924.152 304.723,939.169 305.282,919.025 305.842,968.029 306.401,977.708 306.96,989.16 307.519,1002.92 308.079,998.878 308.638,995.008 309.197,989.931 309.756,951.606 310.316,949.375 310.875,962.493 311.434,943.074 311.993,923.225 312.553,955.023 313.112,952.93 313.671,948.239 314.23,945.077 314.79,922.52 315.349,937.806 315.908,934.133 316.467,916.735 317.027,914.639 317.586,943.04 318.145,971.978 318.704,971.35 319.264,1002.24 319.823,995.311 320.382,975.45 320.941,955.226 321.501,950.024 322.06,944.235 322.619,956.884 323.178,955.9 323.738,999.741 324.297,991.424 324.856,981.662 325.415,991.567 325.975,987.288 326.534,981.698 327.093,939.362 327.652,933.641 328.212,947.089 328.771,912.979 329.33,961.23 329.889,937.745 330.449,996.718 331.008,1003.51 331.567,979.632 332.126,972.671 332.686,953.576 333.245,981.765 333.804,1039.96 334.363,978.876 334.923,973.216 335.482,999.859 336.041,976.891 336.6,951.475 337.16,964.277 337.719,974.15 338.278,984.415 338.837,964.574 339.397,974.075 339.956,981.554 340.515,957.198 341.074,962.489 341.634,957.099 342.193,903.655 342.752,901.436 343.311,898.102 343.871,878.924 344.43,896.17 344.989,877.707 345.548,858.757 346.108,840.464 346.667,853.843 347.226,838.794 347.785,835.92 348.345,851.772 348.904,883.27 349.463,866.034 350.022,879.866 350.582,877.727 351.141,876.12 351.7,872.902 352.259,886.943 352.819,913.495 353.378,922.418 353.937,902.119 354.496,897.398 355.056,876.642 355.615,856.836 356.174,873.55 356.733,870.809 357.293,899.359 357.852,881.774 358.411,897.257 358.97,909.492 359.53,905.384 360.089,881.172 360.648,876.831 361.207,876.142 361.767,889.422 362.326,888.01 362.885,900.229 363.444,895.783 364.004,872.706 364.563,860.41 365.122,874.894 365.681,854.496 366.241,866.635 366.8,861.094 367.359,922.668 367.918,867.252 368.478,883.166 369.037,865.146 369.596,862.744 370.155,861.929 370.715,859.258 371.274,890.126 371.833,870.305 372.392,867.38 372.952,878.724 373.511,896.06 374.07,923.259 374.629,931.619 375.189,924.618 375.748,983.951 376.307,984.937 376.866,993.936 377.426,965.185 377.985,957.873 378.544,949.679 379.103,988.922 379.663,946.1 380.222,950.165 380.781,941.067 381.34,902.345 381.9,880.531 382.459,859.328 383.018,870.254 383.577,847.61 384.137,911.443 384.696,870.553 385.255,851.018 385.814,864.71 386.374,863.231 386.933,888.263 387.492,880.444 388.051,859.893 388.611,874.424 389.17,918.262 389.729,879.71 390.288,859.37 390.848,856.485 391.407,850.92 391.966,846.779 392.525,840.868 393.085,836.526 393.644,830.222 394.203,862.564 394.762,842.643 395.322,854.105 395.881,850.094 396.44,829.634 396.999,827.357 397.559,841.626 398.118,840.496 398.677,838.302 399.236,833.507 399.796,846.704 400.355,827.237 400.914,802.938 401.473,786.308 402.033,735.55 402.592,770.857 403.151,735.61 403.71,733.85 404.27,749.505 404.829,750.337 405.388,769.914 405.947,769.281 406.507,783.725 407.066,767.029 407.625,751.541 408.184,734.049 408.744,754.744 409.303,769.797 409.862,769.981 410.421,756.655 410.981,754.809 411.54,788.24 412.099,788.293 412.658,852.136 413.218,879.468 413.777,873.445 414.336,867.063 414.895,895.336 415.455,908.553 416.014,913.495 416.573,923.592 417.132,915.388 417.692,892.14 418.251,856.815 418.81,853.313 419.369,845.815 419.929,824.365 420.488,886.624 421.047,879.285 421.606,876.656 422.166,868.422 422.725,897.22 423.284,844.487 423.843,857.409 424.403,835.018 424.962,815.758 425.521,795.825 426.08,793.968 426.64,745.588 427.199,744.036 427.758,762.659 428.318,764.749 428.877,730.902 429.436,748.277 429.995,735.516 430.555,736.492 431.114,769.49 431.673,818.488 432.232,767.769 432.792,782.27 433.351,763.943 433.91,759.838 434.469,742.979 435.029,737.176 435.588,737.571 436.147,773.583 436.706,738.023 437.266,788.092 437.825,835.128 438.384,817.157 438.943,832.596 439.503,811.942 440.062,810.612 440.621,775.847 441.18,792.371 441.74,802.684 442.299,798.498 442.858,797.339 443.417,750.233 443.977,764.4 444.536,750.647 445.095,753.005 445.654,752.219 446.214,704.554 446.773,756.97 447.332,742.038 447.891,743.274 448.451,745.678 449.01,730.947 449.569,715.72 450.128,702.887 450.688,704.043 451.247,705.213 451.806,742.77 452.365,744.002 452.925,759.73 453.484,724.804 454.043,727.461 454.602,728.479 455.162,775.432 455.721,785.423 456.28,797.664 456.839,794.055 457.399,789.996 457.958,769.109 458.517,751.283 459.076,752.154 459.636,750.91 460.195,785.453 460.754,782.797 461.313,782.299 461.873,800.103 462.432,781.389 462.991,776.005 463.55,724.298 464.11,726.423 464.669,728.443 465.228,729.37 465.787,728.698 466.347,725.797 466.906,712.646 467.465,744.073 468.024,709.897 468.584,727.169 469.143,762.413 469.702,777.095 470.261,796.115 470.821,781.204 471.38,762.851 471.939,743.436 472.498,772.594 473.058,753.916 473.617,747.622 474.176,764.195 474.735,793.613 475.295,776.357 475.854,778.184 476.413,827.89 476.972,791.642 477.532,803.689 478.091,784.569 478.65,781.3 479.209,812.559 479.769,792.683 480.328,739.744 480.887,742.573 481.446,710.844 482.006,698.473 482.565,680.536 483.124,698.12 483.683,719.43 484.243,740.507 484.802,752.125 485.361,765.899 485.92,747.807 486.48,747.463 487.039,763.665 487.598,762.312 488.157,731.826 488.717,703.933 489.276,706.117 489.835,676.381 490.394,678.93 490.954,700.156 491.513,687.56 492.072,691.495 492.631,659.708 493.191,675.342 493.75,663.592 494.309,681.177 494.868,683.915 495.428,685.716 495.987,691.579 496.546,678.517 497.105,683.983 497.665,686.652 498.224,670.273 498.783,688.456 499.342,672.49 499.902,690.231 500.461,695.265 501.02,695.944 501.579,726.571 502.139,714.359 502.698,680.186 503.257,682.179 503.816,668.582 504.376,673.502 504.935,641.73 505.494,695.652 506.053,727.629 506.613,692.916 507.172,711.832 507.731,693.616 508.29,710.056 508.85,714.929 509.409,749.222 509.968,747.108 510.527,751.195 511.087,751.442 511.646,765.302 512.205,731.535 512.764,746.332 513.324,782.897 513.883,767.414 514.442,780.256 515.001,772.096 515.561,781.269 516.12,809.49 516.679,805.947 517.238,850.017 517.798,878.628 518.357,869.272 518.916,831.339 519.475,824.824 520.035,788.051 520.594,800.074 521.153,796.491 521.712,808.562 522.272,803.387 522.831,765.394 523.39,811.427 523.949,807.07 524.509,782.771 525.068,763.85 525.627,759.481 526.186,740.292 526.746,706.233 527.305,705.687 527.864,702.921 528.423,735.994 528.983,771.993 529.542,770.18 530.101,785.918 530.66,831.486 531.22,809.661 531.779,785.874 532.338,765.81 532.897,748.995 533.457,764.689 534.016,764.095 534.575,763.009 535.134,774.576 535.694,738.239 536.253,755.413 536.812,801.503 537.371,766.571 537.931,780.719 538.49,758.568 539.049,759.142 539.608,735.977 540.168,732.806 540.727,716.014 541.286,709.669 541.845,727.55 542.405,709.378 542.964,711.465 543.523,743.967 544.082,725.116 544.642,740.541 545.201,738.569 545.76,751.694 546.319,718.125 546.879,732.953 547.438,683.685 547.997,671.326 548.556,638.838 549.116,641.342 549.675,629.898 550.234,637.186 550.793,626.688 551.353,694.904 551.912,665.118 552.471,685.84 553.031,671.237 553.59,674.502 554.149,690.925 554.708,724.894 555.268,728.271 555.827,743.207 556.386,756.806 556.945,722.69 557.505,705.961 558.064,705.994 558.623,673.759 559.182,707.53 559.742,661.047 560.301,680.259 560.86,668.889 561.419,641.197 561.979,644.813 562.538,648.063 563.097,637.632 563.656,624.933 564.216,594.325 564.775,598.85 565.334,620.543 565.893,628.85 566.453,632.413 567.012,638.898 567.571,692.518 568.13,745.348 568.69,742.91 569.249,740.207 569.808,755.383 570.367,801.924 570.927,796.726 571.486,788.397 572.045,765.462 572.604,779.402 573.164,745.107 573.723,710.592 574.282,724.167 574.841,725.22 575.401,694.328 575.96,695.268 576.519,682.412 577.078,684.772 577.638,670.387 578.197,674.121 578.756,678.528 579.315,713.434 579.875,698.374 580.434,702.896 580.993,706.008 581.552,689.588 582.112,691.076 582.671,673.999 583.23,677.464 583.789,727.968 584.349,742.545 584.908,787.527 585.467,750.513 586.026,761.284 586.586,756.292 587.145,719.032 587.704,734.547 588.263,753.243 588.823,750.245 589.382,748.454 589.941,749.733 590.5,729.836 591.06,730.119 591.619,699.084 592.178,734.331 592.737,731.516 593.297,763.071 593.856,746.115 594.415,730.115 594.974,759.845 595.534,766.999 596.093,793.514 596.652,806.424 597.211,816.153 597.771,810.15 598.33,786.187 598.889,798.67 599.448,777.575 600.008,758.812 600.567,753.867 601.126,718.127 601.685,697.9 602.245,700.455 602.804,682.247 603.363,668.336 603.922,703.704 604.482,703.057 605.041,686.636 605.6,703.865 606.159,721.678 606.719,703.77 607.278,673.189 607.837,660.627 608.396,628.796 608.956,631.557 609.515,638.924 610.074,642.074 610.633,660.972 611.193,726.51 611.752,723.808 612.311,754.721 612.87,766.269 613.43,775.95 613.989,769.794 614.548,747.692 615.107,776.926 615.667,776.311 616.226,790.758 616.785,756.71 617.344,751.779 617.904,749.864 618.463,759.329 619.022,790.691 619.581,786.93 620.141,767.351 620.7,731.176 621.259,745.581 621.818,743.112 622.378,759.553 622.937,703.832 623.496,686.306 624.055,672.694 624.615,674.116 625.174,677.394 625.733,693.316 626.292,706.85 626.852,723.275 627.411,721.932 627.97,705.798 628.529,737.703 629.089,755.515 629.648,736.956 630.207,733.737 630.766,714.311 631.326,714.59 631.885,668.973 632.444,669.758 633.003,702.325 633.563,700.566 634.122,716.928 634.681,713.097 635.24,715.382 635.8,730.271 636.359,728.754 636.918,728.452 637.477,745.161 638.037,726.854 638.596,738.361 639.155,720.543 639.714,719.338 640.274,766.847 640.833,760.913 641.392,742.103 641.951,705.508 642.511,687.286 643.07,718.317 643.629,685.568 644.188,667.572 644.748,733.509 645.307,734.285 645.866,751.514 646.425,730.258 646.985,712.535 647.544,711.532 648.103,696.913 648.662,716.4 649.222,715.431 649.781,780.052 650.34,757.7 650.899,720.543 651.459,733.316 652.018,730.952 652.577,729.817 653.136,761.202 653.696,743.462 654.255,740.253 654.814,741.407 655.373,724.344 655.933,726.81 656.492,727.247 657.051,774.375 657.61,798.849 658.17,826.43 658.729,803.298 659.288,803.163 659.847,800.631 660.407,779.574 660.966,744.251 661.525,745.804 662.084,745.863 662.644,761.499 663.203,761.654 663.762,739.067 664.321,720.113 664.881,685.804 665.44,673.51 665.999,673.07 666.558,689.02 667.118,672.731 667.677,671.39 668.236,689.304 668.795,754.47 669.355,749.92 669.914,713.263 670.473,710.399 671.032,659.342 671.592,662.125 672.151,679.138 672.71,646.568 673.269,649.551 673.829,631.817 674.388,617.606 674.947,621.699 675.506,593.12 676.066,598.625 676.625,588.956 677.184,578.561 677.743,584.528 678.303,587.272 678.862,560.492 679.421,567.265 679.981,588.709 680.54,610.339 681.099,611.821 681.658,635.118 682.218,621.897 682.777,608.368 683.336,612.773 683.895,617.799 684.455,623.661 685.014,630.271 685.573,618.406 686.132,636.375 686.692,658.05 687.251,676.751 687.81,681.102 688.369,661.591 688.929,662.633 689.488,682.344 690.047,668.62 690.606,688.482 691.166,657.544 691.725,645.21 692.284,660.585 692.843,633.292 693.403,622.84 693.962,645.275 694.521,645.68 695.08,648.385 695.64,667.896 696.199,676.914 696.758,711.088 697.317,729.213 697.877,745.939 698.436,728.696 698.995,743.605 699.554,691.558 700.114,677.536 700.673,658.514 701.232,661.408 701.791,661.244 702.351,642.883 702.91,648.18 703.469,615.464 704.028,603.12 704.588,607.93 705.147,611.61 705.706,599.392 706.265,635.07 706.825,638.731 707.384,660.689 707.943,646.745 708.502,647.942 709.062,684.37 709.621,686.039 710.18,655.941 710.739,660.109 711.299,644.578 711.858,647.386 712.417,585.016 712.976,590.672 713.536,626.45 714.095,679.142 714.654,710.632 715.213,709.552 715.773,724.179 716.332,755.446 716.891,771.418 717.45,766.422 718.01,746.311 718.569,760.391 719.128,787.679 719.687,752.426 720.247,750.169 720.806,732.33 721.365,748.243 721.924,765.94 722.484,747.053 723.043,743.459 723.602,742.492 724.161,738.426 724.721,782.059 725.28,776.624 725.839,771.572 726.398,784.948 726.958,761.374 727.517,759.174 728.076,756.683 728.635,753.459 729.195,752.132 729.754,716.56 730.313,697.7 730.872,699.631 731.432,686.725 731.991,701.924 732.55,735.389 733.109,711.942 733.669,728.347 734.228,707.873 734.787,708.31 735.346,707.368 735.906,688.937 736.465,704.062 737.024,686.772 737.583,638.723 738.143,640.675 738.702,703.433 739.261,702.525 739.82,668.839 740.38,668.656 740.939,652.187 741.498,619.565 742.057,623.224 742.617,611.362 743.176,616.382 743.735,619.421 744.294,620.325 744.854,591.571 745.413,580.777 745.972,586.917 746.531,622.848 747.091,648.36 747.65,617.478 748.209,590.301 748.768,611.947 749.328,616.883 749.887,604.154 750.446,608.153 751.005,612.298 751.565,632.284 752.124,635.913 752.683,673.454 753.242,658.615 753.802,676.78 754.361,677.845 754.92,695.904 755.479,698.57 756.039,678.709 756.598,713.179 757.157,713.157 757.716,707.622 758.276,757.189 758.835,753.692 759.394,782.283 759.953,778.041 760.513,789.189 761.072,770.936 761.631,769.579 762.19,766.653 762.75,746.702 763.309,692.244 763.868,725.438 764.427,736.982 764.987,732.061 765.546,741.913 766.105,723.85 766.664,770.982 767.224,750.597 767.783,718.15 768.342,702.208 768.901,718.955 769.461,703.824 770.02,719.624 770.579,753.011 771.138,752.326 771.698,719.629 772.257,703.602 772.816,689.198 773.375,686.115 773.935,700.49 774.494,686.609 775.053,671.229 775.612,674.584 776.172,676.291 776.731,680.659 777.29,728.22 777.849,776.358 778.409,756.618 778.968,740.154 779.527,735.979 780.086,716.14 780.646,745.705 781.205,726.986 781.764,757.327 782.323,737.343 782.883,752.205 783.442,733.653 784.001,730.584 784.56,709.711 785.12,692.253 785.679,659.183 786.238,677.936 786.797,646.97 787.357,649.2 787.916,651.627 788.475,671.535 789.034,687.424 789.594,703.515 790.153,735.041 790.712,732.243 791.271,714.358 791.831,713.853 792.39,679.485 792.949,682.419 793.508,701.011 794.068,716.896 794.627,716.576 795.186,762.947 795.745,744.46 796.305,775.267 796.864,772.018 797.423,734.108 797.982,728.031 798.542,742.28 799.101,674.391 799.66,691.552 800.219,691.178 800.779,704.619 801.338,750.962 801.897,729.875 802.456,741.071 803.016,734.772 803.575,718.65 804.134,735.073 804.693,697.128 805.253,697.008 805.812,712.897 806.371,694.375 806.931,703.57 807.49,716.008 808.049,747.761 808.608,746.35 809.168,761.85 809.727,740.764 810.286,721.624 810.845,704.662 811.405,687.567 811.964,718.978 812.523,718.135 813.082,704.72 813.642,700.756 814.201,684.332 814.76,681.61 815.319,683.715 815.879,667.635 816.438,682.041 816.997,700.877 817.556,682.533 818.116,685.498 818.675,686.04 819.234,682.127 819.793,698.883 820.353,665.283 820.912,661.064 821.471,628.35 822.03,648.168 822.59,635.114 823.149,668.817 823.708,667.768 824.267,669.036 824.827,648.483 825.386,599.581 825.945,589.298 826.504,579.166 827.064,582.318 827.623,607.618 828.182,614.644 828.741,621.283 829.301,623.44 829.86,656.88 830.419,656.786 830.978,644.317 831.538,616.241 832.097,653.745 832.656,640.256 833.215,629.35 833.775,666.725 834.334,716.569 834.893,701.813 835.452,716.63 836.012,781.413 836.571,760.494 837.13,739.786 837.689,739.192 838.249,767.547 838.808,762.128 839.367,743.217 839.926,740.313 840.486,757.117 841.045,755.014 841.604,740.881 842.163,723.099 842.723,741.941 843.282,736.052 843.841,747.771 844.4,760.549 844.96,756.864 845.519,770.476 846.078,746.545 846.637,742.699 847.197,769.542 847.756,749.72 848.315,763.334 848.874,726.624 849.434,706.263 849.993,707.598 850.552,690.465 851.111,705.471 851.671,702.078 852.23,653.145 852.789,636.846 853.348,604.578 853.908,609.109 854.467,594.513 855.026,601.526 855.585,591.059 856.145,578.761 856.704,567.605 857.263,574.434 857.822,562.763 858.382,585.678 858.941,572.778 859.5,578.948 860.059,619.208 860.619,653.228 861.178,656.604 861.737,640.142 862.296,659.38 862.856,676.538 863.415,693.405 863.974,694.667 864.533,682.453 865.093,650.942 865.652,606.692 866.211,583.198 866.77,590.05 867.33,582.368 867.889,618.736 868.448,639.085 869.007,656.502 869.567,627.643 870.126,615.475 870.685,618.59 871.244,668.449 871.804,654.783 872.363,656.259 872.922,670.395 873.481,690.711 874.041,677.844 874.6,662.731 875.159,660.509 875.718,696.314 876.278,680.313 876.837,708.562 877.396,690.219 877.955,655.008 878.515,686.406 879.074,672.591 879.633,658.775 880.192,709.599 880.752,709.111 881.311,723.562 881.87,721.782 882.429,702.137 882.989,671.192 883.548,659.452 884.107,677.633 884.666,705.727 885.226,720.162 885.785,718.221 886.344,765.091 886.903,742.813 887.463,736.413 888.022,748.632 888.581,760.039 889.14,771.251 889.7,766.587 890.259,761.428 890.818,757.303 891.377,800.835 891.937,822.871 892.496,827.935 893.055,742.434 893.614,739.792 894.174,756.218 894.733,753.387 895.292,783.771 895.851,810.171 896.411,815.52 896.97,777.075 897.529,757.899 898.088,752.65 898.648,766.875 899.207,795.824 899.766,787.942 900.325,783.143 900.885,762.565 901.444,774.138 902.003,789.705 902.562,801.643 903.122,844.257 903.681,832.95 904.24,826.262 904.799,817.779 905.359,824.717 905.918,799.154 906.477,774.72 907.036,735.255 907.596,717.851 908.155,700.706 908.714,686.686 909.273,637.059 909.833,638.851 910.392,704.016 910.951,650.542 911.51,652.404 912.07,637.468 912.629,626.455 913.188,627.471 913.747,628.595 914.307,630.472 914.866,650.151 915.425,667.98 915.984,702 916.544,699.522 917.103,697.244 917.662,678.806 918.221,632.206 918.781,617.915 919.34,653.398 919.899,639.672 920.458,621.966 921.018,627.804 921.577,664.44 922.136,629.632 922.695,632.722 923.255,637.967 923.814,674.848 924.373,676.979 924.932,651.271 925.492,637.74 926.051,626.042 926.61,632.114 927.169,651.904 927.729,670.212 928.288,626.363 928.847,627.288 929.406,632.004 929.966,621.163 930.525,621.144 931.084,622.117 931.644,656.884 932.203,654.402 932.762,641.025 933.321,657.948 933.881,687.769 934.44,688.289 934.999,626.834 935.558,615.445 936.118,632.698 936.677,572.819 937.236,611.107 937.795,568.618 938.355,606.858 938.914,596.447 939.473,634.903 940.032,605.747 940.592,609.682 941.151,615.086 941.71,619.042 942.269,640.596 942.829,628.837 943.388,634.548 943.947,654.441 944.506,707.161 945.066,689.366 945.625,706.686 946.184,706.442 946.743,722.574 947.303,702.471 947.862,735.576 948.421,752.33 948.98,750.02 949.54,750.012 950.099,715.044 950.658,713.682 951.217,681.953 951.777,683.334 952.336,682.258 952.895,711.786 953.454,710.968 954.014,742.132 954.573,724.241 955.132,755.823 955.691,752.287 956.251,748.034 956.81,727.989 957.369,725.656 957.928,705.81 958.488,735.783 959.047,715.171 959.606,730.332 960.165,710.972 960.725,740.885 961.284,770.475 961.843,768.833 962.402,743.941 962.962,743.139 963.521,697.142 964.08,698.58 964.639,714.391 965.199,700.921 965.758,682.537 966.317,668.425 966.876,637.517 967.436,658.434 967.995,659.457 968.554,659.149 969.113,646.254 969.673,618.504 970.232,605.051 970.791,610.11 971.35,610.288 971.91,615.022 972.469,586.486 973.028,560.408 973.587,569.847 974.147,590.323 974.706,593.691 975.265,599.111 975.824,637.389 976.384,654.008 976.943,656.068 977.502,655.73 978.061,655.902 978.621,658.561 979.18,692.795 979.739,705.743 980.298,721.842 980.858,734.001 981.417,729.054 981.976,727.055 982.535,707.663 983.095,705.33 983.654,687.277 984.213,730.71 984.772,725.516 985.332,723.263 985.891,743.558 986.45,773.848 987.009,769.943 987.569,750.538 988.128,763.959 988.687,760.163 989.246,755.875 989.806,735.268 990.365,714.657 990.924,694.067 991.483,677.446 992.043,659.681 992.602,658.383 993.161,658.307 993.72,658.025 994.28,670.888 994.839,668.011 995.398,682.797 995.957,700.808 996.517,748.541 997.076,730.836 997.635,724.655 998.194,689.963 998.754,688.876 999.313,670.301 999.872,656.688 1000.43,658.953 1000.99,661.379 1001.55,692.582 1002.11,694.335 1002.67,662.559 1003.23,663.944 1003.79,665.854 1004.35,668.162 1004.91,654.645 1005.46,658.4 1006.02,593.375 1006.58,565.469 1007.14,585.475 1007.7,608.443 1008.26,632.258 1008.82,602.993 1009.38,576.021 1009.94,598.27 1010.5,638.682 1011.06,655.972 1011.62,643.419 1012.18,629.016 1012.73,645.7 1013.29,649.455 1013.85,650.248 1014.41,667.131 1014.97,621.5 1015.53,656.841 1016.09,659.007 1016.65,692.106 1017.21,694.185 1017.77,709.7 1018.33,690.28 1018.89,673.974 1019.45,703.703 1020.01,686.661 1020.56,670.789 1021.12,655.653 1021.68,643.341 1022.24,708.283 1022.8,739.475 1023.36,722.555 1023.92,686.003 1024.48,704.511 1025.04,687.754 1025.6,705.665 1026.16,689.99 1026.72,687.486 1027.28,686.613 1027.83,703.266 1028.39,719.745 1028.95,699.925 1029.51,712.294 1030.07,710.178 1030.63,713.66 1031.19,695.636 1031.75,693.987 1032.31,697.013 1032.87,662.097 1033.43,680.455 1033.99,708.422 1034.55,708.462 1035.1,712.406 1035.66,709.082 1036.22,758.497 1036.78,751.954 1037.34,781.791 1037.9,760.499 1038.46,738.354 1039.02,720.875 1039.58,735.488 1040.14,712.522 1040.7,708.502 1041.26,707.577 1041.82,703.544 1042.38,702.936 1042.93,698.134 1043.49,696.817 1044.05,695.803 1044.61,713.136 1045.17,742.793 1045.73,707.441 1046.29,721.085 1046.85,734.565 1047.41,731.135 1047.97,762.612 1048.53,744.689 1049.09,740.068 1049.65,785.7 1050.2,793.17 1050.76,815.678 1051.32,794.494 1051.88,789.839 1052.44,799.411 1053,812.263 1053.56,791.196 1054.12,816.606 1054.68,825.526 1055.24,800.689 1055.8,795.656 1056.36,773.533 1056.92,769.62 1057.48,732.911 1058.03,750.313 1058.59,715.777 1059.15,727.167 1059.71,725.884 1060.27,739.627 1060.83,718.982 1061.39,752.535 1061.95,763.907 1062.51,744.95 1063.07,788.762 1063.63,786.467 1064.19,748.95 1064.75,760.709 1065.3,757.353 1065.86,752.112 1066.42,780.421 1066.98,761.235 1067.54,725.106 1068.1,726.171 1068.66,741.092 1069.22,723.214 1069.78,722.33 1070.34,672.468 1070.9,670.579 1071.46,672.113 1072.02,673.516 1072.57,708.224 1073.13,722.968 1073.69,719.856 1074.25,731.33 1074.81,730.971 1075.37,742.295 1075.93,690.247 1076.49,702.574 1077.05,705.055 1077.61,686.852 1078.17,687.002 1078.73,689.534 1079.29,653.494 1079.85,641.398 1080.4,678.791 1080.96,680.145 1081.52,677.633 1082.08,679.742 1082.64,694.171 1083.2,675.604 1083.76,693.343 1084.32,694.839 1084.88,679.308 1085.44,683.012 1086,717.376 1086.56,699.502 1087.12,700.444 1087.67,684.529 1088.23,712.424 1088.79,725.381 1089.35,693.502 1089.91,694.773 1090.47,691.53 1091.03,640.211 1091.59,661.188 1092.15,678.092 1092.71,643.566 1093.27,688.549 1093.83,672.322 1094.39,676.068 1094.94,660.216 1095.5,662.516 1096.06,651.516 1096.62,636.01 1097.18,671.443 1097.74,670.118 1098.3,689.376 1098.86,671.825 1099.42,657.041 1099.98,645.488 1100.54,630.514 1101.1,617.318 1101.66,620.697 1102.22,623.078 1102.77,644.168 1103.33,677.768 1103.89,676.347 1104.45,661.205 1105.01,658.317 1105.57,661.73 1106.13,598.8 1106.69,604.622 1107.25,591.723 1107.81,613.865 1108.37,620.086 1108.93,636.301 1109.49,607.142 1110.04,611.169 1110.6,634.808 1111.16,637.012 1111.72,605.127 1112.28,625.051 1112.84,628.643 1113.4,613.244 1113.96,617.498 1114.52,619.482 1115.08,621.119 1115.64,607.656 1116.2,640.142 1116.76,658.427 1117.31,659.026 1117.87,655.524 1118.43,671.112 1118.99,657.148 1119.55,689.681 1120.11,673.116 1120.67,675.449 1121.23,675.899 1121.79,656.484 1122.35,660.554 1122.91,676.601 1123.47,692.722 1124.03,676.579 1124.59,646.779 1125.14,648.494 1125.7,634.186 1126.26,638.809 1126.82,643.488 1127.38,614.072 1127.94,601.302 1128.5,624.428 1129.06,646.066 1129.62,661.118 1130.18,615.578 1130.74,623.298 1131.3,642.232 1131.86,613.731 1132.41,613.91 1132.97,620.08 1133.53,605.368 1134.09,593.269 1134.65,614.128 1135.21,585.949 1135.77,656.959 1136.33,655.844 1136.89,639.442 1137.45,626.22 1138.01,593.393 1138.57,616.625 1139.13,619.541 1139.68,653.558 1140.24,655.91 1140.8,657.992 1141.36,679.584 1141.92,651.274 1142.48,642.106 1143.04,662.304 1143.6,659.779 1144.16,646.547 1144.72,664.969 1145.28,667.728 1145.84,670.597 1146.4,654.757 1146.96,657.566 1147.51,642.967 1148.07,628.908 1148.63,645.928 1149.19,648.65 1149.75,620.428 1150.31,623.716 1150.87,656.103 1151.43,642.477 1151.99,648.841 1152.55,666.892 1153.11,667.34 1153.67,699.079 1154.23,698.454 1154.78,665.583 1155.34,649.123 1155.9,637.593 1156.46,640.56 1157.02,643.804 1157.58,664.805 1158.14,716.321 1158.7,696.749 1159.26,679.777 1159.82,680.289 1160.38,680.809 1160.94,696.317 1161.5,693.816 1162.05,709.393 1162.61,725.603 1163.17,708.705 1163.73,723.595 1164.29,703.007 1164.85,701.398 1165.41,697.804 1165.97,663.293 1166.53,661.883 1167.09,660.809 1167.65,630.462 1168.21,635.42 1168.77,655.597 1169.33,658.738 1169.88,643.274 1170.44,646.453 1171,633.231 1171.56,648.16 1172.12,637.475 1172.68,656.276 1173.24,657.654 1173.8,625.041 1174.36,675.106 1174.92,692.517 1175.48,696.163 1176.04,673.54 1176.6,657.613 1177.15,630.246 1177.71,633.195 1178.27,604.197 1178.83,656.285 1179.39,658.449 1179.95,676.685 1180.51,675.596 1181.07,690.535 1181.63,640.217 1182.19,642.645 1182.75,679.495 1183.31,728.993 1183.87,728.957 1184.43,740.792 1184.98,755.595 1185.54,736.869 1186.1,702.309 1186.66,716.494 1187.22,715.023 1187.78,726.294 1188.34,740.871 1188.9,802.13 1189.46,763.183 1190.02,785.532 1190.58,763.468 1191.14,790.359 1191.7,783.468 1192.25,798.358 1192.81,774.49 1193.37,786.916 1193.93,751.924 1194.49,760.854 1195.05,758.039 1195.61,756.071 1196.17,752.037 1196.73,829.541 1197.29,807.588 1197.85,802.56 1198.41,798.413 1198.97,778.396 1199.52,757.492 1200.08,736.969 1200.64,701.101 1201.2,687.355 1201.76,667.997 1202.32,682.802 1202.88,651.395 1203.44,639.385 1204,640.173 1204.56,626.915 1205.12,674.359 1205.68,688.608 1206.24,702.359 1206.8,735.242 1207.35,712.847 1207.91,727.304 1208.47,727.303 1209.03,726.369 1209.59,755.135 1210.15,721.084 1210.71,684.748 1211.27,702.903 1211.83,667.961 1212.39,685.006 1212.95,701.89 1213.51,715.437 1214.07,680.276 1214.62,681.861 1215.18,695.78 1215.74,695.852 1216.3,677.342 1216.86,694.833 1217.42,681.797 1217.98,714.639 1218.54,714.637 1219.1,681.059 1219.66,664.824 1220.22,676.535 1220.78,679.21 1221.34,709.313 1221.89,755.99 1222.45,733.897 1223.01,746.604 1223.57,741.281 1224.13,752.502 1224.69,746.679 1225.25,760.902 1225.81,756.614 1226.37,768.111 1226.93,763.02 1227.49,758.33 1228.05,789.216 1228.61,798.963 1229.17,811.061 1229.72,818.367 1230.28,794.84 1230.84,774.573 1231.4,752.81 1231.96,718.518 1232.52,667.29 1233.08,699.929 1233.64,699.732 1234.2,713.894 1234.76,729.181 1235.32,678.469 1235.88,694.83 1236.44,660.77 1236.99,684.029 1237.55,664.563 1238.11,682.508 1238.67,649.501 1239.23,633.672 1239.79,620.677 1240.35,625.72 1240.91,615.871 1241.47,605.837 1242.03,608.872 1242.59,559.584 1243.15,568.182 1243.71,562.083 1244.26,549.446 1244.82,540.567 1245.38,545.673 1245.94,582.067 1246.5,603.987 1247.06,640.912 1247.62,626.393 1248.18,614.584 1248.74,602.565 1249.3,576.727 1249.86,583.645 1250.42,623.316 1250.98,612.698 1251.54,585.221 1252.09,589.82 1252.65,578.384 1253.21,599.606 1253.77,604.609 1254.33,625.166 1254.89,644.609 1255.45,645.044 1256.01,663.647 1256.57,646.783 1257.13,600.116 1257.69,602.413 1258.25,587.433 1258.81,607.61 1259.36,596.317 1259.92,618.991 1260.48,619.544 1261.04,656.352 1261.6,677.101 1262.16,679.107 1262.72,680.739 1263.28,695.766 1263.84,713.332 1264.4,714.713 1264.96,698.612 1265.52,732.195 1266.08,807.838 1266.63,847.728 1267.19,841.356 1267.75,830.558 1268.31,823.632 1268.87,816.693 1269.43,812.896 1269.99,819.304 1270.55,829.362 1271.11,775.286 1271.67,740.763 1272.23,738.722 1272.79,734.365 1273.35,778.667 1273.91,771.213 1274.46,799.323 1275.02,776.444 1275.58,788.704 1276.14,800.192 1276.7,812.759 1277.26,805.981 1277.82,783.251 1278.38,750.426 1278.94,746.572 1279.5,722.345 1280.06,721.63 1280.62,719.592 1281.18,682.876 1281.73,697.87 1282.29,711.322 1282.85,680.524 1283.41,662.503 1283.97,664.849 1284.53,649.691 1285.09,684.482 1285.65,682.047 1286.21,716.63 1286.77,712.613 1287.33,728.132 1287.89,738.707 1288.45,750.245 1289,762.033 1289.56,771.416 1290.12,800.174 1290.68,792.384 1291.24,788.855 1291.8,782.985 1292.36,792.426 1292.92,785.476 1293.48,748.414 1294.04,694.395 1294.6,714.379 1295.16,712.678 1295.72,712.492 1296.28,726.718 1296.83,703.853 1297.39,687.812 1297.95,654.43 1298.51,653.737 1299.07,637.3 1299.63,655.426 1300.19,656.803 1300.75,642.128 1301.31,678.338 1301.87,658.778 1302.43,629.239 1302.99,649.619 1303.55,635.249 1304.1,621.032 1304.66,609.537 1305.22,596.495 1305.78,565.145 1306.34,590.002 1306.9,581.135 1307.46,587.672 1308.02,597.055 1308.58,585.703 1309.14,588.467 1309.7,592.863 1310.26,614.602 1310.82,600.227 1311.38,570.889 1311.93,577.228 1312.49,583.495 1313.05,585.201 1313.61,622.316 1314.17,592.471 1314.73,536.134 1315.29,545.623 1315.85,584.767 1316.41,589.615 1316.97,594.098 1317.53,563.753 1318.09,571.612 1318.65,543.582 1319.2,564.569 1319.76,589.724 1320.32,607.924 1320.88,596.501 1321.44,633.161 1322,636.213 1322.56,688.479 1323.12,701.792 1323.68,732.337 1324.24,745.341 1324.8,724.982 1325.36,757.29 1325.92,754.724 1326.47,749.223 1327.03,747.638 1327.59,686.545 1328.15,637.533 1328.71,655.193 1329.27,657.497 1329.83,655.462 1330.39,639.227 1330.95,640.002 1331.51,641.588 1332.07,644.423 1332.63,662.277 1333.19,663.226 1333.75,678.585 1334.3,692.181 1334.86,693.235 1335.42,662.381 1335.98,617.686 1336.54,635.466 1337.1,623.098 1337.66,642.593 1338.22,620.464 1338.78,623.392 1339.34,644.949 1339.9,630.438 1340.46,635.225 1341.02,668.329 1341.57,653.858 1342.13,627.2 1342.69,661.648 1343.25,648.189 1343.81,681.816 1344.37,667.259 1344.93,684.79 1345.49,672.564 1346.05,674.631 1346.61,661.133 1347.17,664.434 1347.73,682.229 1348.29,648.332 1348.84,682.432 1349.4,683.54 1349.96,700.009 1350.52,680.12 1351.08,677.661 1351.64,711.442 1352.2,726.049 1352.76,692.203 1353.32,722.952 1353.88,708.517 1354.44,739.93 1355,720.874 1355.56,715.377 1356.12,697.234 1356.67,711.456 1357.23,709.258 1357.79,707.081 1358.35,710.596 1358.91,713.329 1359.47,741.8 1360.03,769.602 1360.59,764.752 1361.15,762.228 1361.71,757.921 1362.27,772.361 1362.83,771.927 1363.39,754.163 1363.94,749.302 1364.5,745.523 1365.06,744.483 1365.62,726.836 1366.18,704.222 1366.74,702.43 1367.3,672.827 1367.86,672.784 1368.42,673.914 1368.98,690.834 1369.54,691.268 1370.1,658.921 1370.66,660.396 1371.21,645.249 1371.77,648.675 1372.33,651.826 1372.89,669.033 1373.45,640.851 1374.01,631.344 1374.57,653.602 1375.13,671.942 1375.69,658.681 1376.25,659.262 1376.81,692.358 1377.37,725.269 1377.93,673.119 1378.49,674.559 1379.04,707.064 1379.6,694.046 1380.16,693.584 1380.72,712.871 1381.28,757.619 1381.84,738.25 1382.4,751.995 1382.96,731.825 1383.52,743.223 1384.08,788.913 1384.64,781.16 1385.2,775.443 1385.76,754.141 1386.31,750.827 1386.87,748.122 1387.43,731.891 1387.99,740.222 1388.55,704.869 1389.11,735.665 1389.67,717.268 1390.23,715.543 1390.79,743.51 1391.35,721.819 1391.91,688.781 1392.47,688.609 1393.03,670.532 1393.58,654.305 1394.14,657.172 1394.7,678.191 1395.26,709.888 1395.82,707.922 1396.38,690.396 1396.94,704.77 1397.5,700.064 1398.06,700.765 1398.62,672.878 1399.18,657.791 1399.74,674.344 1400.3,676.114 1400.86,694.173 1401.41,697.168 1401.97,679.181 1402.53,664.116 1403.09,682.122 1403.65,682.067 1404.21,712.678 1404.77,712.843 1405.33,743.909 1405.89,742.337 1406.45,725.343 1407.01,707.908 1407.57,675.543 1408.13,709.206 1408.68,708.4 1409.24,722.11 1409.8,701.638 1410.36,715.557 1410.92,696.646 1411.48,679.722 1412.04,676.633 1412.6,656.222 1413.16,640.316 1413.72,626.573 1414.28,628.31 1414.84,645.593 1415.4,631.243 1415.95,635.318 1416.51,654.098 1417.07,672.163 1417.63,688.835 1418.19,704.972 1418.75,704.113 1419.31,700.261 1419.87,697.416 1420.43,680.393 1420.99,665.797 1421.55,665.441 1422.11,671.117 1422.67,672.54 1423.23,672.957 1423.78,689.03 1424.34,670.567 1424.9,688.592 1425.46,688.984 1426.02,705.3 1426.58,688.138 1427.14,670.053 1427.7,688.728 1428.26,690.028 1428.82,694.422 1429.38,696.099 1429.94,678.666 1430.5,662.868 1431.05,663.45 1431.61,665.247 1432.17,621.657 1432.73,626.592 1433.29,610.842 1433.85,614.709 1434.41,650.493 1434.97,681.978 1435.53,685.75 1436.09,684.269 1436.65,716.004 1437.21,712.086 1437.77,692.529 1438.33,662.117 1438.88,694.103 1439.44,692.594 1440,689.396 1440.56,687.681 1441.12,721.841 1441.68,719.937 1442.24,717.124 1442.8,762.079 1443.36,775.334 1443.92,756.253 1444.48,750.016 1445.04,746.683 1445.6,762.997 1446.15,742.4 1446.71,754.423 1447.27,734.941 1447.83,731.032 1448.39,727.987 1448.95,728.62 1449.51,727.356 1450.07,711.713 1450.63,743.764 1451.19,759.263 1451.75,735.843 1452.31,734.337 1452.87,762.207 1453.42,757.57 1453.98,738.883 1454.54,720.828 1455.1,700.415 1455.66,701.167 1456.22,728.753 1456.78,692.494 1457.34,722.052 1457.9,738.829 1458.46,706.193 1459.02,690.885 1459.58,738.755 1460.14,734.739 1460.7,735.049 1461.25,733.951 1461.81,730.346 1462.37,743.739 1462.93,722.547 1463.49,700.95 1464.05,749.452 1464.61,730.694 1465.17,696.612 1465.73,694.175 1466.29,708.973 1466.85,707.245 1467.41,719.995 1467.97,717.844 1468.52,715.95 1469.08,710.271 1469.64,724.58 1470.2,721.901 1470.76,718.947 1471.32,699.393 1471.88,700.848 1472.44,685.151 1473,685.587 1473.56,682.801 1474.12,685.498 1474.68,687.51 1475.24,656.209 1475.79,642.462 1476.35,647.186 1476.91,600.882 1477.47,635.974 1478.03,655.466 1478.59,637.066 1479.15,639.132 1479.71,643.763 1480.27,644.554 1480.83,676.118 1481.39,694.122 1481.95,723.413 1482.51,735.128 1483.07,731.268 1483.62,731.61 1484.18,744.744 1484.74,757.804 1485.3,737.909 1485.86,766.004 1486.42,763.085 1486.98,760.563 1487.54,739.872 1488.1,702.696 1488.66,700.001 1489.22,668.256 1489.78,619.547 1490.34,626.341 1490.89,659.941 1491.45,663.138 1492.01,664.552 1492.57,682.922 1493.13,685.609 1493.69,656.396 1494.25,625.057 1494.81,628.14 1495.37,643.176 1495.93,627.472 1496.49,582.651 1497.05,556.349 1497.61,545.735 1498.16,538.448 1498.72,527.206 1499.28,500.464 1499.84,513.993 1500.4,520.887 1500.96,558.947 1501.52,596.07 1502.08,621.172 1502.64,656.889 1503.2,673.954 1503.76,692.446 1504.32,660.702 1504.88,664.498 1505.44,666.347 1505.99,666.379 1506.55,712.778 1507.11,727.55 1507.67,726.996 1508.23,742.208 1508.79,758.573 1509.35,767.627 1509.91,782.479 1510.47,760.87 1511.03,774.788 1511.59,783.613 1512.15,763.992 1512.71,790.454 1513.26,783.411 1513.82,761.149 1514.38,742.661 1514.94,773.848 1515.5,766.608 1516.06,761.64 1516.62,741.141 1517.18,738.784 1517.74,735.538 1518.3,732.464 1518.86,714.761 1519.42,712.434 1519.98,698.138 1520.53,713.933 1521.09,728.974 1521.65,725.004 1522.21,707.776 1522.77,708.415 1523.33,694.012 1523.89,739.81 1524.45,736.511 1525.01,716.409 1525.57,695.649 1526.13,662.259 1526.69,632.981 1527.25,621.246 1527.81,622.643 1528.36,644.252 1528.92,650.697 1529.48,636.433 1530.04,642.258 1530.6,646.805 1531.16,669.232 1531.72,684.203 1532.28,668.266 1532.84,687.589 1533.4,672.124 1533.96,689.384 1534.52,652.751 1535.08,670.817 1535.63,671.414 1536.19,622.265 1536.75,626.449 1537.31,646.06 1537.87,630.64 1538.43,617.614 1538.99,572.615 1539.55,594.245 1540.11,632.649 1540.67,620.807 1541.23,626.053 1541.79,613.891 1542.35,616.988 1542.9,619.781 1543.46,620.756 1544.02,622.326 1544.58,639.129 1545.14,628.132 1545.7,650.438 1546.26,667.525 1546.82,655.997 1547.38,624.165 1547.94,645.507 1548.5,643.982 1549.06,682.863 1549.62,682.148 1550.18,668.194 1550.73,667.955 1551.29,622.917 1551.85,691.648 1552.41,708.343 1552.97,710.945 1553.53,728.007 1554.09,727.83 1554.65,725.306 1555.21,737.016 1555.77,719.978 1556.33,719.633 1556.89,699.895 1557.45,698.994 1558,695.215 1558.56,677.603 1559.12,694.115 1559.68,726.761 1560.24,740.067 1560.8,750.306 1561.36,727.183 1561.92,709.58 1562.48,707.953 1563.04,706.234 1563.6,723.952 1564.16,736.397 1564.72,777.999 1565.28,788.517 1565.83,754.427 1566.39,736.044 1566.95,699.579 1567.51,680.407 1568.07,698.658 1568.63,679.44 1569.19,695.259 1569.75,694.153 1570.31,707.608 1570.87,671.521 1571.43,673.012 1571.99,657.857 1572.55,677.548 1573.1,692.692 1573.66,678.403 1574.22,645.098 1574.78,646.042 1575.34,647.412 1575.9,649.362 1576.46,650.625 1577.02,618.807 1577.58,636.292 1578.14,638.729 1578.7,657.967 1579.26,691.159 1579.82,689.344 1580.37,687.339 1580.93,734.683 1581.49,728.919 1582.05,724.785 1582.61,720.941 1583.17,718.18 1583.73,668.455 1584.29,653.415 1584.85,674.754 1585.41,678.337 1585.97,693.017 1586.53,676.777 1587.09,657.288 1587.65,677.107 1588.2,663.881 1588.76,684.418 1589.32,685.398 1589.88,685.938 1590.44,670.057 1591,671.549 1591.56,641.002 1592.12,658.832 1592.68,660.467 1593.24,645.536 1593.8,598.561 1594.36,587.792 1594.92,608.75 1595.47,611.86 1596.03,614.402 1596.59,680.427 1597.15,663.539 1597.71,643.594 1598.27,628.93 1598.83,648.596 1599.39,632.365 1599.95,649.624 1600.51,634.104 1601.07,636.495 1601.63,606.611 1602.19,626.466 1602.74,609.75 1603.3,628.583 1603.86,615.923 1604.42,652.165 1604.98,703.753 1605.54,701.375 1606.1,699.866 1606.66,716.923 1607.22,716.27 1607.78,699.383 1608.34,747.885 1608.9,778.181 1609.46,801.647 1610.02,792.395 1610.57,771.357 1611.13,728.402 1611.69,707.407 1612.25,691.731 1612.81,688.434 1613.37,688.371 1613.93,691.615 1614.49,709.626 1615.05,692.151 1615.61,709.651 1616.17,659.964 1616.73,664.898 1617.29,681.97 1617.84,664.481 1618.4,714.056 1618.96,710.687 1619.52,694.272 1620.08,710.087 1620.64,694.621 1621.2,725.856 1621.76,755.096 1622.32,753.382 1622.88,748.574 1623.44,728.513 1624,710.99 1624.56,706.279 1625.11,657.409 1625.67,659.249 1626.23,646.062 1626.79,632.802 1627.35,663.401 1627.91,659.598 1628.47,662.823 1629.03,665.291 1629.59,680.831 1630.15,647.869 1630.71,652.908 1631.27,640.065 1631.83,660.582 1632.39,692.395 1632.94,736.937 1633.5,731.64 1634.06,747.238 1634.62,744.014 1635.18,744.045 1635.74,739.569 1636.3,737.357 1636.86,781.512 1637.42,760.047 1637.98,740.756 1638.54,785.846 1639.1,762.834 1639.66,757.733 1640.21,735.498 1640.77,716.985 1641.33,699.241 1641.89,697.079 1642.45,697.088 1643.01,680.69 1643.57,668.183 1644.13,655.598 1644.69,689.02 1645.25,670.296 1645.81,640.23 1646.37,624.344 1646.93,613.16 1647.48,618.993 1648.04,624.201 1648.6,663.056 1649.16,680.543 1649.72,680.575 1650.28,661.197 1650.84,659.731 1651.4,642.651 1651.96,661.722 1652.52,678.6 1653.08,663.117 1653.64,631.032 1654.2,615.875 1654.76,638.532 1655.31,671.849 1655.87,641.916 1656.43,662.513 1656.99,667.566 1657.55,685.53 1658.11,718.248 1658.67,735.32 1659.23,713.973 1659.79,727.044 1660.35,723.624 1660.91,691.972 1661.47,661.862 1662.03,648.928 1662.58,651.994 1663.14,669.556 1663.7,655.96 1664.26,694.441 1664.82,694.073 1665.38,708.146 1665.94,709.316 1666.5,693.861 1667.06,673.074 1667.62,656.743 1668.18,674.552 1668.74,623.738 1669.3,629.563 1669.85,634.42 1670.41,654.527 1670.97,654.509 1671.53,603.801 1672.09,605.803 1672.65,578.246 1673.21,585.54 1673.77,623.47 1674.33,608.175 1674.89,657.465 1675.45,642.307 1676.01,659.142 1676.57,646.723 1677.13,615.651 1677.68,651.909 1678.24,688.003 1678.8,687.484 1679.36,688.568 1679.92,689.13 1680.48,657.842 1681.04,674.163 1681.6,676.089 1682.16,689.802 1682.72,723.812 1683.28,722.579 1683.84,740.264 1684.4,741.71 1684.95,741.256 1685.51,738.551 1686.07,749.437 1686.63,730.438 1687.19,710.997 1687.75,711.78 1688.31,661.907 1688.87,648.285 1689.43,666.971 1689.99,651.231 1690.55,636.531 1691.11,672.808 1691.67,657.564 1692.23,661.343 1692.78,693.157 1693.34,710.146 1693.9,755.697 1694.46,715.553 1695.02,679.088 1695.58,680.269 1696.14,698.891 1696.7,728.693 1697.26,725.187 1697.82,754.007 1698.38,751.649 1698.94,762.733 1699.5,730.141 1700.05,744.893 1700.61,725.439 1701.17,724.808 1701.73,709.207 1702.29,691.373 1702.85,678.66 1703.41,682.341 1703.97,648.975 1704.53,651.729 1705.09,652.701 1705.65,637.813 1706.21,602.218 1706.77,591.649 1707.32,545.176 1707.88,552.72 1708.44,558.722 1709,581.002 1709.56,604.836 1710.12,624.28 1710.68,610.042 1711.24,630.595 1711.8,631.472 1712.36,637.434 1712.92,591.276 1713.48,579.515 1714.04,583.147 1714.6,589.301 1715.15,576.134 1715.71,600.415 1716.27,605.688 1716.83,610.995 1717.39,615.451 1717.95,652.71 1718.51,674.672 1719.07,687.565 1719.63,685.393 1720.19,681.514 1720.75,651.86 1721.31,655.465 1721.87,660.249 1722.42,661.779 1722.98,646.792 1723.54,617 1724.1,605.227 1724.66,628.667 1725.22,679.973 1725.78,666.187 1726.34,682.633 1726.9,680.987 1727.46,685.227 1728.02,682.19 1728.58,683.619 1729.14,700.477 1729.69,682.887 1730.25,681.946 1730.81,683.649 1731.37,654.019 1731.93,657.278 1732.49,624.326 1733.05,611.843 1733.61,618.98 1734.17,624.498 1734.73,659.26 1735.29,678.82 1735.85,694.913 1736.41,679.395 1736.97,678.5 1737.52,677.586 1738.08,661.29 1738.64,663.191 1739.2,646.987 1739.76,666.249 1740.32,714.86 1740.88,761.018 1741.44,775.846 1742,769.336 1742.56,797.89 1743.12,822.492 1743.68,816.822 1744.24,810.844 1744.79,819.416 1745.35,796.029 1745.91,741.955 1746.47,771.746 1747.03,770.549 1747.59,736.887 1748.15,699.185 1748.71,713.613 1749.27,695.48 1749.83,678.74 1750.39,677.955 1750.95,678.728 1751.51,693.275 1752.06,708.187 1752.62,694.183 1753.18,713.211 1753.74,727.031 1754.3,724.828 1754.86,737.842 1755.42,736.178 1755.98,751.557 1756.54,743.657 1757.1,756.819 1757.66,720.467 1758.22,723.313 1758.78,736.856 1759.34,735.557 1759.89,717.845 1760.45,751.567 1761.01,767.643 1761.57,762.896 1762.13,776.192 1762.69,787.702 1763.25,800.437 1763.81,797.135 1764.37,791.425 1764.93,785.516 1765.49,779.741 1766.05,758.148 1766.61,769.942 1767.16,784.248 1767.72,778.136 1768.28,768.455 1768.84,748.474 1769.4,742.845 1769.96,740.995 1770.52,736.83 1771.08,684.716 1771.64,684.396 1772.2,698.857 1772.76,731.658 1773.32,713.591 1773.88,666.115 1774.43,686.054 1774.99,701.308 1775.55,734.562 1776.11,733.061 1776.67,714.653 1777.23,692.907 1777.79,689.352 1778.35,658.58 1778.91,640.208 1779.47,611.222 1780.03,580.423 1780.59,583.168 1781.15,603.772 1781.71,607.746 1782.26,608.215 1782.82,581.298 1783.38,587.32 1783.94,576.849 1784.5,611.012 1785.06,711.002 1785.62,707.006 1786.18,658.674 1786.74,659.374 1787.3,661.188 1787.86,676.322 1788.42,678.862 1788.98,676.519 1789.53,676.46 1790.09,725.712 1790.65,754.34 1791.21,703.49 1791.77,716.022 1792.33,729.513 1792.89,739.167 1793.45,722.302 1794.01,755.081 1794.57,765.545 1795.13,775.817 1795.69,742.803 1796.25,759.099 1796.8,734.155 1797.36,746.695 1797.92,708.448 1798.48,676.646 1799.04,675.389 1799.6,675.065 1800.16,676.39 1800.72,679.58 1801.28,692.202 1801.84,705.043 1802.4,702.654 1802.96,670.825 1803.52,685.196 1804.08,671.353 1804.63,654.45 1805.19,673.78 1805.75,659.653 1806.31,634.51 1806.87,637.7 1807.43,670.646 1807.99,653.048 1808.55,653.631 1809.11,654.262 1809.67,669.602 1810.23,685.843 1810.79,701.964 1811.35,685.234 1811.9,702.079 1812.46,683.137 1813.02,716.423 1813.58,745.869 1814.14,773.819 1814.7,751.179 1815.26,764.62 1815.82,715.425 1816.38,700.657 1816.94,713.671 1817.5,694.595 1818.06,723.155 1818.62,723.285 1819.18,684.938 1819.73,672.342 1820.29,654.133 1820.85,659.1 1821.41,643.067 1821.97,628.492 1822.53,647.053 1823.09,666.239 1823.65,668.445 1824.21,700.809 1824.77,667.98 1825.33,702.777 1825.89,681.622 1826.45,663.318 1827,683.26 1827.56,668.39 1828.12,686.676 1828.68,669.377 1829.24,671.434 1829.8,688.592 1830.36,688.618 1830.92,690.139 1831.48,719.05 1832.04,701.883 1832.6,685.834 1833.16,687.066 1833.72,701.347 1834.27,682.662 1834.83,710.675 1835.39,725.429 1835.95,722.622 1836.51,703.387 1837.07,668.998 1837.63,637.898 1838.19,643.957 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 692.637 L720.806 692.637 L721.365 692.637 L721.924 692.637 L722.484 692.637 L723.043 692.637 L723.602 692.637 L724.161 692.637 L724.721 692.637 L725.28 692.637 L725.839 692.637 L726.398 692.637 L726.958 692.637 L727.517 692.637 L728.076 692.637 L728.635 692.637 L729.195 692.637 L729.754 692.637 L730.313 692.637 L730.872 692.637 L731.432 692.637 L731.991 692.637 L732.55 692.637 L733.109 692.637 L733.669 692.637 L734.228 692.637 L734.787 692.637 L735.346 692.637 L735.906 692.637 L736.465 692.637 L737.024 692.637 L737.583 692.637 L738.143 692.637 L738.702 692.637 L739.261 692.637 L739.82 692.637 L740.38 692.637 L740.939 692.637 L741.498 692.637 L742.057 692.637 L742.617 692.637 L743.176 692.637 L743.735 692.637 L744.294 692.637 L744.854 692.637 L745.413 692.637 L745.972 692.637 L746.531 692.637 L747.091 692.637 L747.65 692.637 L748.209 692.637 L748.768 692.637 L749.328 692.637 L749.887 692.637 L750.446 692.637 L751.005 692.637 L751.565 692.637 L752.124 692.637 L752.683 692.637 L753.242 692.637 L753.802 692.637 L754.361 692.637 L754.92 692.637 L755.479 692.637 L756.039 692.637 L756.598 692.637 L757.157 692.637 L757.716 692.637 L758.276 692.637 L758.835 692.637 L759.394 692.637 L759.953 692.637 L760.513 692.637 L761.072 692.637 L761.631 692.637 L762.19 692.637 L762.75 692.637 L763.309 692.637 L763.868 692.637 L764.427 692.637 L764.987 692.637 L765.546 692.637 L766.105 692.637 L766.664 692.637 L767.224 692.637 L767.783 692.637 L768.342 692.637 L768.901 692.637 L769.461 692.637 L770.02 692.637 L770.579 692.637 L771.138 692.637 L771.698 692.637 L772.257 692.637 L772.816 692.637 L773.375 692.637 L773.935 692.637 L774.494 692.637 L775.053 692.637 L775.612 692.637 L776.172 692.637 L776.731 692.637 L777.29 692.637 L777.849 692.637 L778.409 692.637 L778.968 692.637 L779.527 692.637 L780.086 692.637 L780.646 692.637 L781.205 692.637 L781.764 692.637 L782.323 692.637 L782.883 692.637 L783.442 692.637 L784.001 692.637 L784.56 692.637 L785.12 692.637 L785.679 692.637 L786.238 692.637 L786.797 692.637 L787.357 692.637 L787.916 692.637 L788.475 692.637 L789.034 692.637 L789.594 692.637 L790.153 692.637 L790.712 692.637 L791.271 692.637 L791.831 692.637 L792.39 692.637 L792.949 692.637 L793.508 692.637 L794.068 692.637 L794.627 692.637 L795.186 692.637 L795.745 692.637 L796.305 692.637 L796.864 692.637 L797.423 692.637 L797.982 692.637 L798.542 692.637 L799.101 692.637 L799.66 692.637 L800.219 692.637 L800.779 692.637 L801.338 692.637 L801.897 692.637 L802.456 692.637 L803.016 692.637 L803.575 692.637 L804.134 692.637 L804.693 692.637 L805.253 692.637 L805.812 692.637 L806.371 692.637 L806.931 692.637 L807.49 692.637 L808.049 692.637 L808.608 692.637 L809.168 692.637 L809.727 692.637 L810.286 692.637 L810.845 692.637 L811.405 692.637 L811.964 692.637 L812.523 692.637 L813.082 692.637 L813.642 692.637 L814.201 692.637 L814.76 692.637 L815.319 692.637 L815.879 692.637 L816.438 692.637 L816.997 692.637 L817.556 692.637 L818.116 692.637 L818.675 692.637 L819.234 692.637 L819.793 692.637 L820.353 692.637 L820.912 692.637 L821.471 692.637 L822.03 692.637 L822.59 692.637 L823.149 692.637 L823.708 692.637 L824.267 692.637 L824.827 692.637 L825.386 692.637 L825.945 692.637 L826.504 692.637 L827.064 692.637 L827.623 692.637 L828.182 692.637 L828.741 692.637 L829.301 692.637 L829.86 692.637 L830.419 692.637 L830.978 692.637 L831.538 692.637 L832.097 692.637 L832.656 692.637 L833.215 692.637 L833.775 692.637 L834.334 692.637 L834.893 692.637 L835.452 692.637 L836.012 692.637 L836.571 692.637 L837.13 692.637 L837.689 692.637 L838.249 692.637 L838.808 692.637 L839.367 692.637 L839.926 692.637 L840.486 692.637 L841.045 692.637 L841.604 692.637 L842.163 692.637 L842.723 692.637 L843.282 692.637 L843.841 692.637 L844.4 692.637 L844.96 692.637 L845.519 692.637 L846.078 692.637 L846.637 692.637 L847.197 692.637 L847.756 692.637 L848.315 692.637 L848.874 692.637 L849.434 692.637 L849.993 692.637 L850.552 692.637 L851.111 692.637 L851.671 692.637 L852.23 692.637 L852.789 692.637 L853.348 692.637 L853.908 692.637 L854.467 692.637 L855.026 692.637 L855.585 692.637 L856.145 692.637 L856.704 692.637 L857.263 692.637 L857.822 692.637 L858.382 692.637 L858.941 692.637 L859.5 692.637 L860.059 692.637 L860.619 692.637 L861.178 692.637 L861.737 692.637 L862.296 692.637 L862.856 692.637 L863.415 692.637 L863.974 692.637 L864.533 692.637 L865.093 692.637 L865.652 692.637 L866.211 692.637 L866.77 692.637 L867.33 692.637 L867.889 692.637 L868.448 692.637 L869.007 692.637 L869.567 692.637 L870.126 692.637 L870.685 692.637 L871.244 692.637 L871.804 692.637 L872.363 692.637 L872.922 692.637 L873.481 692.637 L874.041 692.637 L874.6 692.637 L875.159 692.637 L875.718 692.637 L876.278 692.637 L876.837 692.637 L877.396 692.637 L877.955 692.637 L878.515 692.637 L879.074 692.637 L879.633 692.637 L880.192 692.637 L880.752 692.637 L881.311 692.637 L881.87 692.637 L882.429 692.637 L882.989 692.637 L883.548 692.637 L884.107 692.637 L884.666 692.637 L885.226 692.637 L885.785 692.637 L886.344 692.637 L886.903 692.637 L887.463 692.637 L888.022 692.637 L888.581 692.637 L889.14 692.637 L889.7 692.637 L890.259 692.637 L890.818 692.637 L891.377 692.637 L891.937 692.637 L892.496 692.637 L893.055 692.637 L893.614 692.637 L894.174 692.637 L894.733 692.637 L895.292 692.637 L895.851 692.637 L896.411 692.637 L896.97 692.637 L897.529 692.637 L898.088 692.637 L898.648 692.637 L899.207 692.637 L899.766 692.637 L900.325 692.637 L900.885 692.637 L901.444 692.637 L902.003 692.637 L902.562 692.637 L903.122 692.637 L903.681 692.637 L904.24 692.637 L904.799 692.637 L905.359 692.637 L905.918 692.637 L906.477 692.637 L907.036 692.637 L907.596 692.637 L908.155 692.637 L908.714 692.637 L909.273 692.637 L909.833 692.637 L910.392 692.637 L910.951 692.637 L911.51 692.637 L912.07 692.637 L912.629 692.637 L913.188 692.637 L913.747 692.637 L914.307 692.637 L914.866 692.637 L915.425 692.637 L915.984 692.637 L916.544 692.637 L917.103 692.637 L917.662 692.637 L918.221 692.637 L918.781 692.637 L919.34 692.637 L919.899 692.637 L920.458 692.637 L921.018 692.637 L921.577 692.637 L922.136 692.637 L922.695 692.637 L923.255 692.637 L923.814 692.637 L924.373 692.637 L924.932 692.637 L925.492 692.637 L926.051 692.637 L926.61 692.637 L927.169 692.637 L927.729 692.637 L928.288 692.637 L928.847 692.637 L929.406 692.637 L929.966 692.637 L930.525 692.637 L931.084 692.637 L931.644 692.637 L932.203 692.637 L932.762 692.637 L933.321 692.637 L933.881 692.637 L934.44 692.637 L934.999 692.637 L935.558 692.637 L936.118 692.637 L936.677 692.637 L937.236 692.637 L937.795 692.637 L938.355 692.637 L938.914 692.637 L939.473 692.637 L940.032 692.637 L940.592 692.637 L941.151 692.637 L941.71 692.637 L942.269 692.637 L942.829 692.637 L943.388 692.637 L943.947 692.637 L944.506 692.637 L945.066 692.637 L945.625 692.637 L946.184 692.637 L946.743 692.637 L947.303 692.637 L947.862 692.637 L948.421 692.637 L948.98 692.637 L949.54 692.637 L950.099 692.637 L950.658 692.637 L951.217 692.637 L951.777 692.637 L952.336 692.637 L952.895 692.637 L953.454 692.637 L954.014 692.637 L954.573 692.637 L955.132 692.637 L955.691 692.637 L956.251 692.637 L956.81 692.637 L957.369 692.637 L957.928 692.637 L958.488 692.637 L959.047 692.637 L959.606 692.637 L960.165 692.637 L960.725 692.637 L961.284 692.637 L961.843 692.637 L962.402 692.637 L962.962 692.637 L963.521 692.637 L964.08 692.637 L964.639 692.637 L965.199 692.637 L965.758 692.637 L966.317 692.637 L966.876 692.637 L967.436 692.637 L967.995 692.637 L968.554 692.637 L969.113 692.637 L969.673 692.637 L970.232 692.637 L970.791 692.637 L971.35 692.637 L971.91 692.637 L972.469 692.637 L973.028 692.637 L973.587 692.637 L974.147 692.637 L974.706 692.637 L975.265 692.637 L975.824 692.637 L976.384 692.637 L976.943 692.637 L977.502 692.637 L978.061 692.637 L978.621 692.637 L979.18 692.637 L979.739 692.637 L980.298 692.637 L980.858 692.637 L981.417 692.637 L981.976 692.637 L982.535 692.637 L983.095 692.637 L983.654 692.637 L984.213 692.637 L984.772 692.637 L985.332 692.637 L985.891 692.637 L986.45 692.637 L987.009 692.637 L987.569 692.637 L988.128 692.637 L988.687 692.637 L989.246 692.637 L989.806 692.637 L990.365 692.637 L990.924 692.637 L991.483 692.637 L992.043 692.637 L992.602 692.637 L993.161 692.637 L993.72 692.637 L994.28 692.637 L994.839 692.637 L995.398 692.637 L995.957 692.637 L996.517 692.637 L997.076 692.637 L997.635 692.637 L998.194 692.637 L998.754 692.637 L999.313 692.637 L999.872 692.637 L1000.43 692.637 L1000.99 692.637 L1001.55 692.637 L1002.11 692.637 L1002.67 692.637 L1003.23 692.637 L1003.79 692.637 L1004.35 692.637 L1004.91 692.637 L1005.46 692.637 L1006.02 692.637 L1006.58 692.637 L1007.14 692.637 L1007.7 692.637 L1008.26 692.637 L1008.82 692.637 L1009.38 692.637 L1009.94 692.637 L1010.5 692.637 L1011.06 692.637 L1011.62 692.637 L1012.18 692.637 L1012.73 692.637 L1013.29 692.637 L1013.85 692.637 L1014.41 692.637 L1014.97 692.637 L1015.53 692.637 L1016.09 692.637 L1016.65 692.637 L1017.21 692.637 L1017.77 692.637 L1018.33 692.637 L1018.89 692.637 L1019.45 692.637 L1020.01 692.637 L1020.56 692.637 L1021.12 692.637 L1021.68 692.637 L1022.24 692.637 L1022.8 692.637 L1023.36 692.637 L1023.92 692.637 L1024.48 692.637 L1025.04 692.637 L1025.6 692.637 L1026.16 692.637 L1026.72 692.637 L1027.28 692.637 L1027.83 692.637 L1028.39 692.637 L1028.95 692.637 L1029.51 692.637 L1030.07 692.637 L1030.63 692.637 L1031.19 692.637 L1031.75 692.637 L1032.31 692.637 L1032.87 692.637 L1033.43 692.637 L1033.99 692.637 L1034.55 692.637 L1035.1 692.637 L1035.66 692.637 L1036.22 692.637 L1036.78 692.637 L1037.34 692.637 L1037.9 692.637 L1038.46 692.637 L1039.02 692.637 L1039.58 692.637 L1040.14 692.637 L1040.7 692.637 L1041.26 692.637 L1041.82 692.637 L1042.38 692.637 L1042.93 692.637 L1043.49 692.637 L1044.05 692.637 L1044.61 692.637 L1045.17 692.637 L1045.73 692.637 L1046.29 692.637 L1046.85 692.637 L1047.41 692.637 L1047.97 692.637 L1048.53 692.637 L1049.09 692.637 L1049.65 692.637 L1050.2 692.637 L1050.76 692.637 L1051.32 692.637 L1051.88 692.637 L1052.44 692.637 L1053 692.637 L1053.56 692.637 L1054.12 692.637 L1054.68 692.637 L1055.24 692.637 L1055.8 692.637 L1056.36 692.637 L1056.92 692.637 L1057.48 692.637 L1058.03 692.637 L1058.59 692.637 L1059.15 692.637 L1059.71 692.637 L1060.27 692.637 L1060.83 692.637 L1061.39 692.637 L1061.95 692.637 L1062.51 692.637 L1063.07 692.637 L1063.63 692.637 L1064.19 692.637 L1064.75 692.637 L1065.3 692.637 L1065.86 692.637 L1066.42 692.637 L1066.98 692.637 L1067.54 692.637 L1068.1 692.637 L1068.66 692.637 L1069.22 692.637 L1069.78 692.637 L1070.34 692.637 L1070.9 692.637 L1071.46 692.637 L1072.02 692.637 L1072.57 692.637 L1073.13 692.637 L1073.69 692.637 L1074.25 692.637 L1074.81 692.637 L1075.37 692.637 L1075.93 692.637 L1076.49 692.637 L1077.05 692.637 L1077.61 692.637 L1078.17 692.637 L1078.73 692.637 L1079.29 692.637 L1079.85 692.637 L1080.4 692.637 L1080.96 692.637 L1081.52 692.637 L1082.08 692.637 L1082.64 692.637 L1083.2 692.637 L1083.76 692.637 L1084.32 692.637 L1084.88 692.637 L1085.44 692.637 L1086 692.637 L1086.56 692.637 L1087.12 692.637 L1087.67 692.637 L1088.23 692.637 L1088.79 692.637 L1089.35 692.637 L1089.91 692.637 L1090.47 692.637 L1091.03 692.637 L1091.59 692.637 L1092.15 692.637 L1092.71 692.637 L1093.27 692.637 L1093.83 692.637 L1094.39 692.637 L1094.94 692.637 L1095.5 692.637 L1096.06 692.637 L1096.62 692.637 L1097.18 692.637 L1097.74 692.637 L1098.3 692.637 L1098.86 692.637 L1099.42 692.637 L1099.98 692.637 L1100.54 692.637 L1101.1 692.637 L1101.66 692.637 L1102.22 692.637 L1102.77 692.637 L1103.33 692.637 L1103.89 692.637 L1104.45 692.637 L1105.01 692.637 L1105.57 692.637 L1106.13 692.637 L1106.69 692.637 L1107.25 692.637 L1107.81 692.637 L1108.37 692.637 L1108.93 692.637 L1109.49 692.637 L1110.04 692.637 L1110.6 692.637 L1111.16 692.637 L1111.72 692.637 L1112.28 692.637 L1112.84 692.637 L1113.4 692.637 L1113.96 692.637 L1114.52 692.637 L1115.08 692.637 L1115.64 692.637 L1116.2 692.637 L1116.76 692.637 L1117.31 692.637 L1117.87 692.637 L1118.43 692.637 L1118.99 692.637 L1119.55 692.637 L1120.11 692.637 L1120.67 692.637 L1121.23 692.637 L1121.79 692.637 L1122.35 692.637 L1122.91 692.637 L1123.47 692.637 L1124.03 692.637 L1124.59 692.637 L1125.14 692.637 L1125.7 692.637 L1126.26 692.637 L1126.82 692.637 L1127.38 692.637 L1127.94 692.637 L1128.5 692.637 L1129.06 692.637 L1129.62 692.637 L1130.18 692.637 L1130.74 692.637 L1131.3 692.637 L1131.86 692.637 L1132.41 692.637 L1132.97 692.637 L1133.53 692.637 L1134.09 692.637 L1134.65 692.637 L1135.21 692.637 L1135.77 692.637 L1136.33 692.637 L1136.89 692.637 L1137.45 692.637 L1138.01 692.637 L1138.57 692.637 L1139.13 692.637 L1139.68 692.637 L1140.24 692.637 L1140.8 692.637 L1141.36 692.637 L1141.92 692.637 L1142.48 692.637 L1143.04 692.637 L1143.6 692.637 L1144.16 692.637 L1144.72 692.637 L1145.28 692.637 L1145.84 692.637 L1146.4 692.637 L1146.96 692.637 L1147.51 692.637 L1148.07 692.637 L1148.63 692.637 L1149.19 692.637 L1149.75 692.637 L1150.31 692.637 L1150.87 692.637 L1151.43 692.637 L1151.99 692.637 L1152.55 692.637 L1153.11 692.637 L1153.67 692.637 L1154.23 692.637 L1154.78 692.637 L1155.34 692.637 L1155.9 692.637 L1156.46 692.637 L1157.02 692.637 L1157.58 692.637 L1158.14 692.637 L1158.7 692.637 L1159.26 692.637 L1159.82 692.637 L1160.38 692.637 L1160.94 692.637 L1161.5 692.637 L1162.05 692.637 L1162.61 692.637 L1163.17 692.637 L1163.73 692.637 L1164.29 692.637 L1164.85 692.637 L1165.41 692.637 L1165.97 692.637 L1166.53 692.637 L1167.09 692.637 L1167.65 692.637 L1168.21 692.637 L1168.77 692.637 L1169.33 692.637 L1169.88 692.637 L1170.44 692.637 L1171 692.637 L1171.56 692.637 L1172.12 692.637 L1172.68 692.637 L1173.24 692.637 L1173.8 692.637 L1174.36 692.637 L1174.92 692.637 L1175.48 692.637 L1176.04 692.637 L1176.6 692.637 L1177.15 692.637 L1177.71 692.637 L1178.27 692.637 L1178.83 692.637 L1179.39 692.637 L1179.95 692.637 L1180.51 692.637 L1181.07 692.637 L1181.63 692.637 L1182.19 692.637 L1182.75 692.637 L1183.31 692.637 L1183.87 692.637 L1184.43 692.637 L1184.98 692.637 L1185.54 692.637 L1186.1 692.637 L1186.66 692.637 L1187.22 692.637 L1187.78 692.637 L1188.34 692.637 L1188.9 692.637 L1189.46 692.637 L1190.02 692.637 L1190.58 692.637 L1191.14 692.637 L1191.7 692.637 L1192.25 692.637 L1192.81 692.637 L1193.37 692.637 L1193.93 692.637 L1194.49 692.637 L1195.05 692.637 L1195.61 692.637 L1196.17 692.637 L1196.73 692.637 L1197.29 692.637 L1197.85 692.637 L1198.41 692.637 L1198.97 692.637 L1199.52 692.637 L1200.08 692.637 L1200.64 692.637 L1201.2 692.637 L1201.76 692.637 L1202.32 692.637 L1202.88 692.637 L1203.44 692.637 L1204 692.637 L1204.56 692.637 L1205.12 692.637 L1205.68 692.637 L1206.24 692.637 L1206.8 692.637 L1207.35 692.637 L1207.91 692.637 L1208.47 692.637 L1209.03 692.637 L1209.59 692.637 L1210.15 692.637 L1210.71 692.637 L1211.27 692.637 L1211.83 692.637 L1212.39 692.637 L1212.95 692.637 L1213.51 692.637 L1214.07 692.637 L1214.62 692.637 L1215.18 692.637 L1215.74 692.637 L1216.3 692.637 L1216.86 692.637 L1217.42 692.637 L1217.98 692.637 L1218.54 692.637 L1219.1 692.637 L1219.66 692.637 L1220.22 692.637 L1220.78 692.637 L1221.34 692.637 L1221.89 692.637 L1222.45 692.637 L1223.01 692.637 L1223.57 692.637 L1224.13 692.637 L1224.69 692.637 L1225.25 692.637 L1225.81 692.637 L1226.37 692.637 L1226.93 692.637 L1227.49 692.637 L1228.05 692.637 L1228.61 692.637 L1229.17 692.637 L1229.72 692.637 L1230.28 692.637 L1230.84 692.637 L1231.4 692.637 L1231.96 692.637 L1232.52 692.637 L1233.08 692.637 L1233.64 692.637 L1234.2 692.637 L1234.76 692.637 L1235.32 692.637 L1235.88 692.637 L1236.44 692.637 L1236.99 692.637 L1237.55 692.637 L1238.11 692.637 L1238.67 692.637 L1239.23 692.637 L1239.79 692.637 L1240.35 692.637 L1240.91 692.637 L1241.47 692.637 L1242.03 692.637 L1242.59 692.637 L1243.15 692.637 L1243.71 692.637 L1244.26 692.637 L1244.82 692.637 L1245.38 692.637 L1245.94 692.637 L1246.5 692.637 L1247.06 692.637 L1247.62 692.637 L1248.18 692.637 L1248.74 692.637 L1249.3 692.637 L1249.86 692.637 L1250.42 692.637 L1250.98 692.637 L1251.54 692.637 L1252.09 692.637 L1252.65 692.637 L1253.21 692.637 L1253.77 692.637 L1254.33 692.637 L1254.89 692.637 L1255.45 692.637 L1256.01 692.637 L1256.57 692.637 L1257.13 692.637 L1257.69 692.637 L1258.25 692.637 L1258.81 692.637 L1259.36 692.637 L1259.92 692.637 L1260.48 692.637 L1261.04 692.637 L1261.6 692.637 L1262.16 692.637 L1262.72 692.637 L1263.28 692.637 L1263.84 692.637 L1264.4 692.637 L1264.96 692.637 L1265.52 692.637 L1266.08 692.637 L1266.63 692.637 L1267.19 692.637 L1267.75 692.637 L1268.31 692.637 L1268.87 692.637 L1269.43 692.637 L1269.99 692.637 L1270.55 692.637 L1271.11 692.637 L1271.67 692.637 L1272.23 692.637 L1272.79 692.637 L1273.35 692.637 L1273.91 692.637 L1274.46 692.637 L1275.02 692.637 L1275.58 692.637 L1276.14 692.637 L1276.7 692.637 L1277.26 692.637 L1277.82 692.637 L1278.38 692.637 L1278.94 692.637 L1279.5 692.637 L1280.06 692.637 L1280.62 692.637 L1281.18 692.637 L1281.73 692.637 L1282.29 692.637 L1282.85 692.637 L1283.41 692.637 L1283.97 692.637 L1284.53 692.637 L1285.09 692.637 L1285.65 692.637 L1286.21 692.637 L1286.77 692.637 L1287.33 692.637 L1287.89 692.637 L1288.45 692.637 L1289 692.637 L1289.56 692.637 L1290.12 692.637 L1290.68 692.637 L1291.24 692.637 L1291.8 692.637 L1292.36 692.637 L1292.92 692.637 L1293.48 692.637 L1294.04 692.637 L1294.6 692.637 L1295.16 692.637 L1295.72 692.637 L1296.28 692.637 L1296.83 692.637 L1297.39 692.637 L1297.95 692.637 L1298.51 692.637 L1299.07 692.637 L1299.63 692.637 L1300.19 692.637 L1300.75 692.637 L1301.31 692.637 L1301.87 692.637 L1302.43 692.637 L1302.99 692.637 L1303.55 692.637 L1304.1 692.637 L1304.66 692.637 L1305.22 692.637 L1305.78 692.637 L1306.34 692.637 L1306.9 692.637 L1307.46 692.637 L1308.02 692.637 L1308.58 692.637 L1309.14 692.637 L1309.7 692.637 L1310.26 692.637 L1310.82 692.637 L1311.38 692.637 L1311.93 692.637 L1312.49 692.637 L1313.05 692.637 L1313.61 692.637 L1314.17 692.637 L1314.73 692.637 L1315.29 692.637 L1315.85 692.637 L1316.41 692.637 L1316.97 692.637 L1317.53 692.637 L1318.09 692.637 L1318.65 692.637 L1319.2 692.637 L1319.76 692.637 L1320.32 692.637 L1320.88 692.637 L1321.44 692.637 L1322 692.637 L1322.56 692.637 L1323.12 692.637 L1323.68 692.637 L1324.24 692.637 L1324.8 692.637 L1325.36 692.637 L1325.92 692.637 L1326.47 692.637 L1327.03 692.637 L1327.59 692.637 L1328.15 692.637 L1328.71 692.637 L1329.27 692.637 L1329.83 692.637 L1330.39 692.637 L1330.95 692.637 L1331.51 692.637 L1332.07 692.637 L1332.63 692.637 L1333.19 692.637 L1333.75 692.637 L1334.3 692.637 L1334.86 692.637 L1335.42 692.637 L1335.98 692.637 L1336.54 692.637 L1337.1 692.637 L1337.66 692.637 L1338.22 692.637 L1338.78 692.637 L1339.34 692.637 L1339.9 692.637 L1340.46 692.637 L1341.02 692.637 L1341.57 692.637 L1342.13 692.637 L1342.69 692.637 L1343.25 692.637 L1343.81 692.637 L1344.37 692.637 L1344.93 692.637 L1345.49 692.637 L1346.05 692.637 L1346.61 692.637 L1347.17 692.637 L1347.73 692.637 L1348.29 692.637 L1348.84 692.637 L1349.4 692.637 L1349.96 692.637 L1350.52 692.637 L1351.08 692.637 L1351.64 692.637 L1352.2 692.637 L1352.76 692.637 L1353.32 692.637 L1353.88 692.637 L1354.44 692.637 L1355 692.637 L1355.56 692.637 L1356.12 692.637 L1356.67 692.637 L1357.23 692.637 L1357.79 692.637 L1358.35 692.637 L1358.91 692.637 L1359.47 692.637 L1360.03 692.637 L1360.59 692.637 L1361.15 692.637 L1361.71 692.637 L1362.27 692.637 L1362.83 692.637 L1363.39 692.637 L1363.94 692.637 L1364.5 692.637 L1365.06 692.637 L1365.62 692.637 L1366.18 692.637 L1366.74 692.637 L1367.3 692.637 L1367.86 692.637 L1368.42 692.637 L1368.98 692.637 L1369.54 692.637 L1370.1 692.637 L1370.66 692.637 L1371.21 692.637 L1371.77 692.637 L1372.33 692.637 L1372.89 692.637 L1373.45 692.637 L1374.01 692.637 L1374.57 692.637 L1375.13 692.637 L1375.69 692.637 L1376.25 692.637 L1376.81 692.637 L1377.37 692.637 L1377.93 692.637 L1378.49 692.637 L1379.04 692.637 L1379.6 692.637 L1380.16 692.637 L1380.72 692.637 L1381.28 692.637 L1381.84 692.637 L1382.4 692.637 L1382.96 692.637 L1383.52 692.637 L1384.08 692.637 L1384.64 692.637 L1385.2 692.637 L1385.76 692.637 L1386.31 692.637 L1386.87 692.637 L1387.43 692.637 L1387.99 692.637 L1388.55 692.637 L1389.11 692.637 L1389.67 692.637 L1390.23 692.637 L1390.79 692.637 L1391.35 692.637 L1391.91 692.637 L1392.47 692.637 L1393.03 692.637 L1393.58 692.637 L1394.14 692.637 L1394.7 692.637 L1395.26 692.637 L1395.82 692.637 L1396.38 692.637 L1396.94 692.637 L1397.5 692.637 L1398.06 692.637 L1398.62 692.637 L1399.18 692.637 L1399.74 692.637 L1400.3 692.637 L1400.86 692.637 L1401.41 692.637 L1401.97 692.637 L1402.53 692.637 L1403.09 692.637 L1403.65 692.637 L1404.21 692.637 L1404.77 692.637 L1405.33 692.637 L1405.89 692.637 L1406.45 692.637 L1407.01 692.637 L1407.57 692.637 L1408.13 692.637 L1408.68 692.637 L1409.24 692.637 L1409.8 692.637 L1410.36 692.637 L1410.92 692.637 L1411.48 692.637 L1412.04 692.637 L1412.6 692.637 L1413.16 692.637 L1413.72 692.637 L1414.28 692.637 L1414.84 692.637 L1415.4 692.637 L1415.95 692.637 L1416.51 692.637 L1417.07 692.637 L1417.63 692.637 L1418.19 692.637 L1418.75 692.637 L1419.31 692.637 L1419.87 692.637 L1420.43 692.637 L1420.99 692.637 L1421.55 692.637 L1422.11 692.637 L1422.67 692.637 L1423.23 692.637 L1423.78 692.637 L1424.34 692.637 L1424.9 692.637 L1425.46 692.637 L1426.02 692.637 L1426.58 692.637 L1427.14 692.637 L1427.7 692.637 L1428.26 692.637 L1428.82 692.637 L1429.38 692.637 L1429.94 692.637 L1430.5 692.637 L1431.05 692.637 L1431.61 692.637 L1432.17 692.637 L1432.73 692.637 L1433.29 692.637 L1433.85 692.637 L1434.41 692.637 L1434.97 692.637 L1435.53 692.637 L1436.09 692.637 L1436.65 692.637 L1437.21 692.637 L1437.77 692.637 L1438.33 692.637 L1438.88 692.637 L1439.44 692.637 L1440 692.637 L1440.56 692.637 L1441.12 692.637 L1441.68 692.637 L1442.24 692.637 L1442.8 692.637 L1443.36 692.637 L1443.92 692.637 L1444.48 692.637 L1445.04 692.637 L1445.6 692.637 L1446.15 692.637 L1446.71 692.637 L1447.27 692.637 L1447.83 692.637 L1448.39 692.637 L1448.95 692.637 L1449.51 692.637 L1450.07 692.637 L1450.63 692.637 L1451.19 692.637 L1451.75 692.637 L1452.31 692.637 L1452.87 692.637 L1453.42 692.637 L1453.98 692.637 L1454.54 692.637 L1455.1 692.637 L1455.66 692.637 L1456.22 692.637 L1456.78 692.637 L1457.34 692.637 L1457.9 692.637 L1458.46 692.637 L1459.02 692.637 L1459.58 692.637 L1460.14 692.637 L1460.7 692.637 L1461.25 692.637 L1461.81 692.637 L1462.37 692.637 L1462.93 692.637 L1463.49 692.637 L1464.05 692.637 L1464.61 692.637 L1465.17 692.637 L1465.73 692.637 L1466.29 692.637 L1466.85 692.637 L1467.41 692.637 L1467.97 692.637 L1468.52 692.637 L1469.08 692.637 L1469.64 692.637 L1470.2 692.637 L1470.76 692.637 L1471.32 692.637 L1471.88 692.637 L1472.44 692.637 L1473 692.637 L1473.56 692.637 L1474.12 692.637 L1474.68 692.637 L1475.24 692.637 L1475.79 692.637 L1476.35 692.637 L1476.91 692.637 L1477.47 692.637 L1478.03 692.637 L1478.59 692.637 L1479.15 692.637 L1479.71 692.637 L1480.27 692.637 L1480.83 692.637 L1481.39 692.637 L1481.95 692.637 L1482.51 692.637 L1483.07 692.637 L1483.62 692.637 L1484.18 692.637 L1484.74 692.637 L1485.3 692.637 L1485.86 692.637 L1486.42 692.637 L1486.98 692.637 L1487.54 692.637 L1488.1 692.637 L1488.66 692.637 L1489.22 692.637 L1489.78 692.637 L1490.34 692.637 L1490.89 692.637 L1491.45 692.637 L1492.01 692.637 L1492.57 692.637 L1493.13 692.637 L1493.69 692.637 L1494.25 692.637 L1494.81 692.637 L1495.37 692.637 L1495.93 692.637 L1496.49 692.637 L1497.05 692.637 L1497.61 692.637 L1498.16 692.637 L1498.72 692.637 L1499.28 692.637 L1499.84 692.637 L1500.4 692.637 L1500.96 692.637 L1501.52 692.637 L1502.08 692.637 L1502.64 692.637 L1503.2 692.637 L1503.76 692.637 L1504.32 692.637 L1504.88 692.637 L1505.44 692.637 L1505.99 692.637 L1506.55 692.637 L1507.11 692.637 L1507.67 692.637 L1508.23 692.637 L1508.79 692.637 L1509.35 692.637 L1509.91 692.637 L1510.47 692.637 L1511.03 692.637 L1511.59 692.637 L1512.15 692.637 L1512.71 692.637 L1513.26 692.637 L1513.82 692.637 L1514.38 692.637 L1514.94 692.637 L1515.5 692.637 L1516.06 692.637 L1516.62 692.637 L1517.18 692.637 L1517.74 692.637 L1518.3 692.637 L1518.86 692.637 L1519.42 692.637 L1519.98 692.637 L1520.53 692.637 L1521.09 692.637 L1521.65 692.637 L1522.21 692.637 L1522.77 692.637 L1523.33 692.637 L1523.89 692.637 L1524.45 692.637 L1525.01 692.637 L1525.57 692.637 L1526.13 692.637 L1526.69 692.637 L1527.25 692.637 L1527.81 692.637 L1528.36 692.637 L1528.92 692.637 L1529.48 692.637 L1530.04 692.637 L1530.6 692.637 L1531.16 692.637 L1531.72 692.637 L1532.28 692.637 L1532.84 692.637 L1533.4 692.637 L1533.96 692.637 L1534.52 692.637 L1535.08 692.637 L1535.63 692.637 L1536.19 692.637 L1536.75 692.637 L1537.31 692.637 L1537.87 692.637 L1538.43 692.637 L1538.99 692.637 L1539.55 692.637 L1540.11 692.637 L1540.67 692.637 L1541.23 692.637 L1541.79 692.637 L1542.35 692.637 L1542.9 692.637 L1543.46 692.637 L1544.02 692.637 L1544.58 692.637 L1545.14 692.637 L1545.7 692.637 L1546.26 692.637 L1546.82 692.637 L1547.38 692.637 L1547.94 692.637 L1548.5 692.637 L1549.06 692.637 L1549.62 692.637 L1550.18 692.637 L1550.73 692.637 L1551.29 692.637 L1551.85 692.637 L1552.41 692.637 L1552.97 692.637 L1553.53 692.637 L1554.09 692.637 L1554.65 692.637 L1555.21 692.637 L1555.77 692.637 L1556.33 692.637 L1556.89 692.637 L1557.45 692.637 L1558 692.637 L1558.56 692.637 L1559.12 692.637 L1559.68 692.637 L1560.24 692.637 L1560.8 692.637 L1561.36 692.637 L1561.92 692.637 L1562.48 692.637 L1563.04 692.637 L1563.6 692.637 L1564.16 692.637 L1564.72 692.637 L1565.28 692.637 L1565.83 692.637 L1566.39 692.637 L1566.95 692.637 L1567.51 692.637 L1568.07 692.637 L1568.63 692.637 L1569.19 692.637 L1569.75 692.637 L1570.31 692.637 L1570.87 692.637 L1571.43 692.637 L1571.99 692.637 L1572.55 692.637 L1573.1 692.637 L1573.66 692.637 L1574.22 692.637 L1574.78 692.637 L1575.34 692.637 L1575.9 692.637 L1576.46 692.637 L1577.02 692.637 L1577.58 692.637 L1578.14 692.637 L1578.7 692.637 L1579.26 692.637 L1579.82 692.637 L1580.37 692.637 L1580.93 692.637 L1581.49 692.637 L1582.05 692.637 L1582.61 692.637 L1583.17 692.637 L1583.73 692.637 L1584.29 692.637 L1584.85 692.637 L1585.41 692.637 L1585.97 692.637 L1586.53 692.637 L1587.09 692.637 L1587.65 692.637 L1588.2 692.637 L1588.76 692.637 L1589.32 692.637 L1589.88 692.637 L1590.44 692.637 L1591 692.637 L1591.56 692.637 L1592.12 692.637 L1592.68 692.637 L1593.24 692.637 L1593.8 692.637 L1594.36 692.637 L1594.92 692.637 L1595.47 692.637 L1596.03 692.637 L1596.59 692.637 L1597.15 692.637 L1597.71 692.637 L1598.27 692.637 L1598.83 692.637 L1599.39 692.637 L1599.95 692.637 L1600.51 692.637 L1601.07 692.637 L1601.63 692.637 L1602.19 692.637 L1602.74 692.637 L1603.3 692.637 L1603.86 692.637 L1604.42 692.637 L1604.98 692.637 L1605.54 692.637 L1606.1 692.637 L1606.66 692.637 L1607.22 692.637 L1607.78 692.637 L1608.34 692.637 L1608.9 692.637 L1609.46 692.637 L1610.02 692.637 L1610.57 692.637 L1611.13 692.637 L1611.69 692.637 L1612.25 692.637 L1612.81 692.637 L1613.37 692.637 L1613.93 692.637 L1614.49 692.637 L1615.05 692.637 L1615.61 692.637 L1616.17 692.637 L1616.73 692.637 L1617.29 692.637 L1617.84 692.637 L1618.4 692.637 L1618.96 692.637 L1619.52 692.637 L1620.08 692.637 L1620.64 692.637 L1621.2 692.637 L1621.76 692.637 L1622.32 692.637 L1622.88 692.637 L1623.44 692.637 L1624 692.637 L1624.56 692.637 L1625.11 692.637 L1625.67 692.637 L1626.23 692.637 L1626.79 692.637 L1627.35 692.637 L1627.91 692.637 L1628.47 692.637 L1629.03 692.637 L1629.59 692.637 L1630.15 692.637 L1630.71 692.637 L1631.27 692.637 L1631.83 692.637 L1632.39 692.637 L1632.94 692.637 L1633.5 692.637 L1634.06 692.637 L1634.62 692.637 L1635.18 692.637 L1635.74 692.637 L1636.3 692.637 L1636.86 692.637 L1637.42 692.637 L1637.98 692.637 L1638.54 692.637 L1639.1 692.637 L1639.66 692.637 L1640.21 692.637 L1640.77 692.637 L1641.33 692.637 L1641.89 692.637 L1642.45 692.637 L1643.01 692.637 L1643.57 692.637 L1644.13 692.637 L1644.69 692.637 L1645.25 692.637 L1645.81 692.637 L1646.37 692.637 L1646.93 692.637 L1647.48 692.637 L1648.04 692.637 L1648.6 692.637 L1649.16 692.637 L1649.72 692.637 L1650.28 692.637 L1650.84 692.637 L1651.4 692.637 L1651.96 692.637 L1652.52 692.637 L1653.08 692.637 L1653.64 692.637 L1654.2 692.637 L1654.76 692.637 L1655.31 692.637 L1655.87 692.637 L1656.43 692.637 L1656.99 692.637 L1657.55 692.637 L1658.11 692.637 L1658.67 692.637 L1659.23 692.637 L1659.79 692.637 L1660.35 692.637 L1660.91 692.637 L1661.47 692.637 L1662.03 692.637 L1662.58 692.637 L1663.14 692.637 L1663.7 692.637 L1664.26 692.637 L1664.82 692.637 L1665.38 692.637 L1665.94 692.637 L1666.5 692.637 L1667.06 692.637 L1667.62 692.637 L1668.18 692.637 L1668.74 692.637 L1669.3 692.637 L1669.85 692.637 L1670.41 692.637 L1670.97 692.637 L1671.53 692.637 L1672.09 692.637 L1672.65 692.637 L1673.21 692.637 L1673.77 692.637 L1674.33 692.637 L1674.89 692.637 L1675.45 692.637 L1676.01 692.637 L1676.57 692.637 L1677.13 692.637 L1677.68 692.637 L1678.24 692.637 L1678.8 692.637 L1679.36 692.637 L1679.92 692.637 L1680.48 692.637 L1681.04 692.637 L1681.6 692.637 L1682.16 692.637 L1682.72 692.637 L1683.28 692.637 L1683.84 692.637 L1684.4 692.637 L1684.95 692.637 L1685.51 692.637 L1686.07 692.637 L1686.63 692.637 L1687.19 692.637 L1687.75 692.637 L1688.31 692.637 L1688.87 692.637 L1689.43 692.637 L1689.99 692.637 L1690.55 692.637 L1691.11 692.637 L1691.67 692.637 L1692.23 692.637 L1692.78 692.637 L1693.34 692.637 L1693.9 692.637 L1694.46 692.637 L1695.02 692.637 L1695.58 692.637 L1696.14 692.637 L1696.7 692.637 L1697.26 692.637 L1697.82 692.637 L1698.38 692.637 L1698.94 692.637 L1699.5 692.637 L1700.05 692.637 L1700.61 692.637 L1701.17 692.637 L1701.73 692.637 L1702.29 692.637 L1702.85 692.637 L1703.41 692.637 L1703.97 692.637 L1704.53 692.637 L1705.09 692.637 L1705.65 692.637 L1706.21 692.637 L1706.77 692.637 L1707.32 692.637 L1707.88 692.637 L1708.44 692.637 L1709 692.637 L1709.56 692.637 L1710.12 692.637 L1710.68 692.637 L1711.24 692.637 L1711.8 692.637 L1712.36 692.637 L1712.92 692.637 L1713.48 692.637 L1714.04 692.637 L1714.6 692.637 L1715.15 692.637 L1715.71 692.637 L1716.27 692.637 L1716.83 692.637 L1717.39 692.637 L1717.95 692.637 L1718.51 692.637 L1719.07 692.637 L1719.63 692.637 L1720.19 692.637 L1720.75 692.637 L1721.31 692.637 L1721.87 692.637 L1722.42 692.637 L1722.98 692.637 L1723.54 692.637 L1724.1 692.637 L1724.66 692.637 L1725.22 692.637 L1725.78 692.637 L1726.34 692.637 L1726.9 692.637 L1727.46 692.637 L1728.02 692.637 L1728.58 692.637 L1729.14 692.637 L1729.69 692.637 L1730.25 692.637 L1730.81 692.637 L1731.37 692.637 L1731.93 692.637 L1732.49 692.637 L1733.05 692.637 L1733.61 692.637 L1734.17 692.637 L1734.73 692.637 L1735.29 692.637 L1735.85 692.637 L1736.41 692.637 L1736.97 692.637 L1737.52 692.637 L1738.08 692.637 L1738.64 692.637 L1739.2 692.637 L1739.76 692.637 L1740.32 692.637 L1740.88 692.637 L1741.44 692.637 L1742 692.637 L1742.56 692.637 L1743.12 692.637 L1743.68 692.637 L1744.24 692.637 L1744.79 692.637 L1745.35 692.637 L1745.91 692.637 L1746.47 692.637 L1747.03 692.637 L1747.59 692.637 L1748.15 692.637 L1748.71 692.637 L1749.27 692.637 L1749.83 692.637 L1750.39 692.637 L1750.95 692.637 L1751.51 692.637 L1752.06 692.637 L1752.62 692.637 L1753.18 692.637 L1753.74 692.637 L1754.3 692.637 L1754.86 692.637 L1755.42 692.637 L1755.98 692.637 L1756.54 692.637 L1757.1 692.637 L1757.66 692.637 L1758.22 692.637 L1758.78 692.637 L1759.34 692.637 L1759.89 692.637 L1760.45 692.637 L1761.01 692.637 L1761.57 692.637 L1762.13 692.637 L1762.69 692.637 L1763.25 692.637 L1763.81 692.637 L1764.37 692.637 L1764.93 692.637 L1765.49 692.637 L1766.05 692.637 L1766.61 692.637 L1767.16 692.637 L1767.72 692.637 L1768.28 692.637 L1768.84 692.637 L1769.4 692.637 L1769.96 692.637 L1770.52 692.637 L1771.08 692.637 L1771.64 692.637 L1772.2 692.637 L1772.76 692.637 L1773.32 692.637 L1773.88 692.637 L1774.43 692.637 L1774.99 692.637 L1775.55 692.637 L1776.11 692.637 L1776.67 692.637 L1777.23 692.637 L1777.79 692.637 L1778.35 692.637 L1778.91 692.637 L1779.47 692.637 L1780.03 692.637 L1780.59 692.637 L1781.15 692.637 L1781.71 692.637 L1782.26 692.637 L1782.82 692.637 L1783.38 692.637 L1783.94 692.637 L1784.5 692.637 L1785.06 692.637 L1785.62 692.637 L1786.18 692.637 L1786.74 692.637 L1787.3 692.637 L1787.86 692.637 L1788.42 692.637 L1788.98 692.637 L1789.53 692.637 L1790.09 692.637 L1790.65 692.637 L1791.21 692.637 L1791.77 692.637 L1792.33 692.637 L1792.89 692.637 L1793.45 692.637 L1794.01 692.637 L1794.57 692.637 L1795.13 692.637 L1795.69 692.637 L1796.25 692.637 L1796.8 692.637 L1797.36 692.637 L1797.92 692.637 L1798.48 692.637 L1799.04 692.637 L1799.6 692.637 L1800.16 692.637 L1800.72 692.637 L1801.28 692.637 L1801.84 692.637 L1802.4 692.637 L1802.96 692.637 L1803.52 692.637 L1804.08 692.637 L1804.63 692.637 L1805.19 692.637 L1805.75 692.637 L1806.31 692.637 L1806.87 692.637 L1807.43 692.637 L1807.99 692.637 L1808.55 692.637 L1809.11 692.637 L1809.67 692.637 L1810.23 692.637 L1810.79 692.637 L1811.35 692.637 L1811.9 692.637 L1812.46 692.637 L1813.02 692.637 L1813.58 692.637 L1814.14 692.637 L1814.7 692.637 L1815.26 692.637 L1815.82 692.637 L1816.38 692.637 L1816.94 692.637 L1817.5 692.637 L1818.06 692.637 L1818.62 692.637 L1819.18 692.637 L1819.73 692.637 L1820.29 692.637 L1820.85 692.637 L1821.41 692.637 L1821.97 692.637 L1822.53 692.637 L1823.09 692.637 L1823.65 692.637 L1824.21 692.637 L1824.77 692.637 L1825.33 692.637 L1825.89 692.637 L1826.45 692.637 L1827 692.637 L1827.56 692.637 L1828.12 692.637 L1828.68 692.637 L1829.24 692.637 L1829.8 692.637 L1830.36 692.637 L1830.92 692.637 L1831.48 692.637 L1832.04 692.637 L1832.6 692.637 L1833.16 692.637 L1833.72 692.637 L1834.27 692.637 L1834.83 692.637 L1835.39 692.637 L1835.95 692.637 L1836.51 692.637 L1837.07 692.637 L1837.63 692.637 L1838.19 692.637 L1838.19 683.168 L1837.63 683.168 L1837.07 683.168 L1836.51 683.168 L1835.95 683.168 L1835.39 683.168 L1834.83 683.168 L1834.27 683.168 L1833.72 683.168 L1833.16 683.168 L1832.6 683.168 L1832.04 683.168 L1831.48 683.168 L1830.92 683.168 L1830.36 683.168 L1829.8 683.168 L1829.24 683.168 L1828.68 683.168 L1828.12 683.168 L1827.56 683.168 L1827 683.168 L1826.45 683.168 L1825.89 683.168 L1825.33 683.168 L1824.77 683.168 L1824.21 683.168 L1823.65 683.168 L1823.09 683.168 L1822.53 683.168 L1821.97 683.168 L1821.41 683.168 L1820.85 683.168 L1820.29 683.168 L1819.73 683.168 L1819.18 683.168 L1818.62 683.168 L1818.06 683.168 L1817.5 683.168 L1816.94 683.168 L1816.38 683.168 L1815.82 683.168 L1815.26 683.168 L1814.7 683.168 L1814.14 683.168 L1813.58 683.168 L1813.02 683.168 L1812.46 683.168 L1811.9 683.168 L1811.35 683.168 L1810.79 683.168 L1810.23 683.168 L1809.67 683.168 L1809.11 683.168 L1808.55 683.168 L1807.99 683.168 L1807.43 683.168 L1806.87 683.168 L1806.31 683.168 L1805.75 683.168 L1805.19 683.168 L1804.63 683.168 L1804.08 683.168 L1803.52 683.168 L1802.96 683.168 L1802.4 683.168 L1801.84 683.168 L1801.28 683.168 L1800.72 683.168 L1800.16 683.168 L1799.6 683.168 L1799.04 683.168 L1798.48 683.168 L1797.92 683.168 L1797.36 683.168 L1796.8 683.168 L1796.25 683.168 L1795.69 683.168 L1795.13 683.168 L1794.57 683.168 L1794.01 683.168 L1793.45 683.168 L1792.89 683.168 L1792.33 683.168 L1791.77 683.168 L1791.21 683.168 L1790.65 683.168 L1790.09 683.168 L1789.53 683.168 L1788.98 683.168 L1788.42 683.168 L1787.86 683.168 L1787.3 683.168 L1786.74 683.168 L1786.18 683.168 L1785.62 683.168 L1785.06 683.168 L1784.5 683.168 L1783.94 683.168 L1783.38 683.168 L1782.82 683.168 L1782.26 683.168 L1781.71 683.168 L1781.15 683.168 L1780.59 683.168 L1780.03 683.168 L1779.47 683.168 L1778.91 683.168 L1778.35 683.168 L1777.79 683.168 L1777.23 683.168 L1776.67 683.168 L1776.11 683.168 L1775.55 683.168 L1774.99 683.168 L1774.43 683.168 L1773.88 683.168 L1773.32 683.168 L1772.76 683.168 L1772.2 683.168 L1771.64 683.168 L1771.08 683.168 L1770.52 683.168 L1769.96 683.168 L1769.4 683.168 L1768.84 683.168 L1768.28 683.168 L1767.72 683.168 L1767.16 683.168 L1766.61 683.168 L1766.05 683.168 L1765.49 683.168 L1764.93 683.168 L1764.37 683.168 L1763.81 683.168 L1763.25 683.168 L1762.69 683.168 L1762.13 683.168 L1761.57 683.168 L1761.01 683.168 L1760.45 683.168 L1759.89 683.168 L1759.34 683.168 L1758.78 683.168 L1758.22 683.168 L1757.66 683.168 L1757.1 683.168 L1756.54 683.168 L1755.98 683.168 L1755.42 683.168 L1754.86 683.168 L1754.3 683.168 L1753.74 683.168 L1753.18 683.168 L1752.62 683.168 L1752.06 683.168 L1751.51 683.168 L1750.95 683.168 L1750.39 683.168 L1749.83 683.168 L1749.27 683.168 L1748.71 683.168 L1748.15 683.168 L1747.59 683.168 L1747.03 683.168 L1746.47 683.168 L1745.91 683.168 L1745.35 683.168 L1744.79 683.168 L1744.24 683.168 L1743.68 683.168 L1743.12 683.168 L1742.56 683.168 L1742 683.168 L1741.44 683.168 L1740.88 683.168 L1740.32 683.168 L1739.76 683.168 L1739.2 683.168 L1738.64 683.168 L1738.08 683.168 L1737.52 683.168 L1736.97 683.168 L1736.41 683.168 L1735.85 683.168 L1735.29 683.168 L1734.73 683.168 L1734.17 683.168 L1733.61 683.168 L1733.05 683.168 L1732.49 683.168 L1731.93 683.168 L1731.37 683.168 L1730.81 683.168 L1730.25 683.168 L1729.69 683.168 L1729.14 683.168 L1728.58 683.168 L1728.02 683.168 L1727.46 683.168 L1726.9 683.168 L1726.34 683.168 L1725.78 683.168 L1725.22 683.168 L1724.66 683.168 L1724.1 683.168 L1723.54 683.168 L1722.98 683.168 L1722.42 683.168 L1721.87 683.168 L1721.31 683.168 L1720.75 683.168 L1720.19 683.168 L1719.63 683.168 L1719.07 683.168 L1718.51 683.168 L1717.95 683.168 L1717.39 683.168 L1716.83 683.168 L1716.27 683.168 L1715.71 683.168 L1715.15 683.168 L1714.6 683.168 L1714.04 683.168 L1713.48 683.168 L1712.92 683.168 L1712.36 683.168 L1711.8 683.168 L1711.24 683.168 L1710.68 683.168 L1710.12 683.168 L1709.56 683.168 L1709 683.168 L1708.44 683.168 L1707.88 683.168 L1707.32 683.168 L1706.77 683.168 L1706.21 683.168 L1705.65 683.168 L1705.09 683.168 L1704.53 683.168 L1703.97 683.168 L1703.41 683.168 L1702.85 683.168 L1702.29 683.168 L1701.73 683.168 L1701.17 683.168 L1700.61 683.168 L1700.05 683.168 L1699.5 683.168 L1698.94 683.168 L1698.38 683.168 L1697.82 683.168 L1697.26 683.168 L1696.7 683.168 L1696.14 683.168 L1695.58 683.168 L1695.02 683.168 L1694.46 683.168 L1693.9 683.168 L1693.34 683.168 L1692.78 683.168 L1692.23 683.168 L1691.67 683.168 L1691.11 683.168 L1690.55 683.168 L1689.99 683.168 L1689.43 683.168 L1688.87 683.168 L1688.31 683.168 L1687.75 683.168 L1687.19 683.168 L1686.63 683.168 L1686.07 683.168 L1685.51 683.168 L1684.95 683.168 L1684.4 683.168 L1683.84 683.168 L1683.28 683.168 L1682.72 683.168 L1682.16 683.168 L1681.6 683.168 L1681.04 683.168 L1680.48 683.168 L1679.92 683.168 L1679.36 683.168 L1678.8 683.168 L1678.24 683.168 L1677.68 683.168 L1677.13 683.168 L1676.57 683.168 L1676.01 683.168 L1675.45 683.168 L1674.89 683.168 L1674.33 683.168 L1673.77 683.168 L1673.21 683.168 L1672.65 683.168 L1672.09 683.168 L1671.53 683.168 L1670.97 683.168 L1670.41 683.168 L1669.85 683.168 L1669.3 683.168 L1668.74 683.168 L1668.18 683.168 L1667.62 683.168 L1667.06 683.168 L1666.5 683.168 L1665.94 683.168 L1665.38 683.168 L1664.82 683.168 L1664.26 683.168 L1663.7 683.168 L1663.14 683.168 L1662.58 683.168 L1662.03 683.168 L1661.47 683.168 L1660.91 683.168 L1660.35 683.168 L1659.79 683.168 L1659.23 683.168 L1658.67 683.168 L1658.11 683.168 L1657.55 683.168 L1656.99 683.168 L1656.43 683.168 L1655.87 683.168 L1655.31 683.168 L1654.76 683.168 L1654.2 683.168 L1653.64 683.168 L1653.08 683.168 L1652.52 683.168 L1651.96 683.168 L1651.4 683.168 L1650.84 683.168 L1650.28 683.168 L1649.72 683.168 L1649.16 683.168 L1648.6 683.168 L1648.04 683.168 L1647.48 683.168 L1646.93 683.168 L1646.37 683.168 L1645.81 683.168 L1645.25 683.168 L1644.69 683.168 L1644.13 683.168 L1643.57 683.168 L1643.01 683.168 L1642.45 683.168 L1641.89 683.168 L1641.33 683.168 L1640.77 683.168 L1640.21 683.168 L1639.66 683.168 L1639.1 683.168 L1638.54 683.168 L1637.98 683.168 L1637.42 683.168 L1636.86 683.168 L1636.3 683.168 L1635.74 683.168 L1635.18 683.168 L1634.62 683.168 L1634.06 683.168 L1633.5 683.168 L1632.94 683.168 L1632.39 683.168 L1631.83 683.168 L1631.27 683.168 L1630.71 683.168 L1630.15 683.168 L1629.59 683.168 L1629.03 683.168 L1628.47 683.168 L1627.91 683.168 L1627.35 683.168 L1626.79 683.168 L1626.23 683.168 L1625.67 683.168 L1625.11 683.168 L1624.56 683.168 L1624 683.168 L1623.44 683.168 L1622.88 683.168 L1622.32 683.168 L1621.76 683.168 L1621.2 683.168 L1620.64 683.168 L1620.08 683.168 L1619.52 683.168 L1618.96 683.168 L1618.4 683.168 L1617.84 683.168 L1617.29 683.168 L1616.73 683.168 L1616.17 683.168 L1615.61 683.168 L1615.05 683.168 L1614.49 683.168 L1613.93 683.168 L1613.37 683.168 L1612.81 683.168 L1612.25 683.168 L1611.69 683.168 L1611.13 683.168 L1610.57 683.168 L1610.02 683.168 L1609.46 683.168 L1608.9 683.168 L1608.34 683.168 L1607.78 683.168 L1607.22 683.168 L1606.66 683.168 L1606.1 683.168 L1605.54 683.168 L1604.98 683.168 L1604.42 683.168 L1603.86 683.168 L1603.3 683.168 L1602.74 683.168 L1602.19 683.168 L1601.63 683.168 L1601.07 683.168 L1600.51 683.168 L1599.95 683.168 L1599.39 683.168 L1598.83 683.168 L1598.27 683.168 L1597.71 683.168 L1597.15 683.168 L1596.59 683.168 L1596.03 683.168 L1595.47 683.168 L1594.92 683.168 L1594.36 683.168 L1593.8 683.168 L1593.24 683.168 L1592.68 683.168 L1592.12 683.168 L1591.56 683.168 L1591 683.168 L1590.44 683.168 L1589.88 683.168 L1589.32 683.168 L1588.76 683.168 L1588.2 683.168 L1587.65 683.168 L1587.09 683.168 L1586.53 683.168 L1585.97 683.168 L1585.41 683.168 L1584.85 683.168 L1584.29 683.168 L1583.73 683.168 L1583.17 683.168 L1582.61 683.168 L1582.05 683.168 L1581.49 683.168 L1580.93 683.168 L1580.37 683.168 L1579.82 683.168 L1579.26 683.168 L1578.7 683.168 L1578.14 683.168 L1577.58 683.168 L1577.02 683.168 L1576.46 683.168 L1575.9 683.168 L1575.34 683.168 L1574.78 683.168 L1574.22 683.168 L1573.66 683.168 L1573.1 683.168 L1572.55 683.168 L1571.99 683.168 L1571.43 683.168 L1570.87 683.168 L1570.31 683.168 L1569.75 683.168 L1569.19 683.168 L1568.63 683.168 L1568.07 683.168 L1567.51 683.168 L1566.95 683.168 L1566.39 683.168 L1565.83 683.168 L1565.28 683.168 L1564.72 683.168 L1564.16 683.168 L1563.6 683.168 L1563.04 683.168 L1562.48 683.168 L1561.92 683.168 L1561.36 683.168 L1560.8 683.168 L1560.24 683.168 L1559.68 683.168 L1559.12 683.168 L1558.56 683.168 L1558 683.168 L1557.45 683.168 L1556.89 683.168 L1556.33 683.168 L1555.77 683.168 L1555.21 683.168 L1554.65 683.168 L1554.09 683.168 L1553.53 683.168 L1552.97 683.168 L1552.41 683.168 L1551.85 683.168 L1551.29 683.168 L1550.73 683.168 L1550.18 683.168 L1549.62 683.168 L1549.06 683.168 L1548.5 683.168 L1547.94 683.168 L1547.38 683.168 L1546.82 683.168 L1546.26 683.168 L1545.7 683.168 L1545.14 683.168 L1544.58 683.168 L1544.02 683.168 L1543.46 683.168 L1542.9 683.168 L1542.35 683.168 L1541.79 683.168 L1541.23 683.168 L1540.67 683.168 L1540.11 683.168 L1539.55 683.168 L1538.99 683.168 L1538.43 683.168 L1537.87 683.168 L1537.31 683.168 L1536.75 683.168 L1536.19 683.168 L1535.63 683.168 L1535.08 683.168 L1534.52 683.168 L1533.96 683.168 L1533.4 683.168 L1532.84 683.168 L1532.28 683.168 L1531.72 683.168 L1531.16 683.168 L1530.6 683.168 L1530.04 683.168 L1529.48 683.168 L1528.92 683.168 L1528.36 683.168 L1527.81 683.168 L1527.25 683.168 L1526.69 683.168 L1526.13 683.168 L1525.57 683.168 L1525.01 683.168 L1524.45 683.168 L1523.89 683.168 L1523.33 683.168 L1522.77 683.168 L1522.21 683.168 L1521.65 683.168 L1521.09 683.168 L1520.53 683.168 L1519.98 683.168 L1519.42 683.168 L1518.86 683.168 L1518.3 683.168 L1517.74 683.168 L1517.18 683.168 L1516.62 683.168 L1516.06 683.168 L1515.5 683.168 L1514.94 683.168 L1514.38 683.168 L1513.82 683.168 L1513.26 683.168 L1512.71 683.168 L1512.15 683.168 L1511.59 683.168 L1511.03 683.168 L1510.47 683.168 L1509.91 683.168 L1509.35 683.168 L1508.79 683.168 L1508.23 683.168 L1507.67 683.168 L1507.11 683.168 L1506.55 683.168 L1505.99 683.168 L1505.44 683.168 L1504.88 683.168 L1504.32 683.168 L1503.76 683.168 L1503.2 683.168 L1502.64 683.168 L1502.08 683.168 L1501.52 683.168 L1500.96 683.168 L1500.4 683.168 L1499.84 683.168 L1499.28 683.168 L1498.72 683.168 L1498.16 683.168 L1497.61 683.168 L1497.05 683.168 L1496.49 683.168 L1495.93 683.168 L1495.37 683.168 L1494.81 683.168 L1494.25 683.168 L1493.69 683.168 L1493.13 683.168 L1492.57 683.168 L1492.01 683.168 L1491.45 683.168 L1490.89 683.168 L1490.34 683.168 L1489.78 683.168 L1489.22 683.168 L1488.66 683.168 L1488.1 683.168 L1487.54 683.168 L1486.98 683.168 L1486.42 683.168 L1485.86 683.168 L1485.3 683.168 L1484.74 683.168 L1484.18 683.168 L1483.62 683.168 L1483.07 683.168 L1482.51 683.168 L1481.95 683.168 L1481.39 683.168 L1480.83 683.168 L1480.27 683.168 L1479.71 683.168 L1479.15 683.168 L1478.59 683.168 L1478.03 683.168 L1477.47 683.168 L1476.91 683.168 L1476.35 683.168 L1475.79 683.168 L1475.24 683.168 L1474.68 683.168 L1474.12 683.168 L1473.56 683.168 L1473 683.168 L1472.44 683.168 L1471.88 683.168 L1471.32 683.168 L1470.76 683.168 L1470.2 683.168 L1469.64 683.168 L1469.08 683.168 L1468.52 683.168 L1467.97 683.168 L1467.41 683.168 L1466.85 683.168 L1466.29 683.168 L1465.73 683.168 L1465.17 683.168 L1464.61 683.168 L1464.05 683.168 L1463.49 683.168 L1462.93 683.168 L1462.37 683.168 L1461.81 683.168 L1461.25 683.168 L1460.7 683.168 L1460.14 683.168 L1459.58 683.168 L1459.02 683.168 L1458.46 683.168 L1457.9 683.168 L1457.34 683.168 L1456.78 683.168 L1456.22 683.168 L1455.66 683.168 L1455.1 683.168 L1454.54 683.168 L1453.98 683.168 L1453.42 683.168 L1452.87 683.168 L1452.31 683.168 L1451.75 683.168 L1451.19 683.168 L1450.63 683.168 L1450.07 683.168 L1449.51 683.168 L1448.95 683.168 L1448.39 683.168 L1447.83 683.168 L1447.27 683.168 L1446.71 683.168 L1446.15 683.168 L1445.6 683.168 L1445.04 683.168 L1444.48 683.168 L1443.92 683.168 L1443.36 683.168 L1442.8 683.168 L1442.24 683.168 L1441.68 683.168 L1441.12 683.168 L1440.56 683.168 L1440 683.168 L1439.44 683.168 L1438.88 683.168 L1438.33 683.168 L1437.77 683.168 L1437.21 683.168 L1436.65 683.168 L1436.09 683.168 L1435.53 683.168 L1434.97 683.168 L1434.41 683.168 L1433.85 683.168 L1433.29 683.168 L1432.73 683.168 L1432.17 683.168 L1431.61 683.168 L1431.05 683.168 L1430.5 683.168 L1429.94 683.168 L1429.38 683.168 L1428.82 683.168 L1428.26 683.168 L1427.7 683.168 L1427.14 683.168 L1426.58 683.168 L1426.02 683.168 L1425.46 683.168 L1424.9 683.168 L1424.34 683.168 L1423.78 683.168 L1423.23 683.168 L1422.67 683.168 L1422.11 683.168 L1421.55 683.168 L1420.99 683.168 L1420.43 683.168 L1419.87 683.168 L1419.31 683.168 L1418.75 683.168 L1418.19 683.168 L1417.63 683.168 L1417.07 683.168 L1416.51 683.168 L1415.95 683.168 L1415.4 683.168 L1414.84 683.168 L1414.28 683.168 L1413.72 683.168 L1413.16 683.168 L1412.6 683.168 L1412.04 683.168 L1411.48 683.168 L1410.92 683.168 L1410.36 683.168 L1409.8 683.168 L1409.24 683.168 L1408.68 683.168 L1408.13 683.168 L1407.57 683.168 L1407.01 683.168 L1406.45 683.168 L1405.89 683.168 L1405.33 683.168 L1404.77 683.168 L1404.21 683.168 L1403.65 683.168 L1403.09 683.168 L1402.53 683.168 L1401.97 683.168 L1401.41 683.168 L1400.86 683.168 L1400.3 683.168 L1399.74 683.168 L1399.18 683.168 L1398.62 683.168 L1398.06 683.168 L1397.5 683.168 L1396.94 683.168 L1396.38 683.168 L1395.82 683.168 L1395.26 683.168 L1394.7 683.168 L1394.14 683.168 L1393.58 683.168 L1393.03 683.168 L1392.47 683.168 L1391.91 683.168 L1391.35 683.168 L1390.79 683.168 L1390.23 683.168 L1389.67 683.168 L1389.11 683.168 L1388.55 683.168 L1387.99 683.168 L1387.43 683.168 L1386.87 683.168 L1386.31 683.168 L1385.76 683.168 L1385.2 683.168 L1384.64 683.168 L1384.08 683.168 L1383.52 683.168 L1382.96 683.168 L1382.4 683.168 L1381.84 683.168 L1381.28 683.168 L1380.72 683.168 L1380.16 683.168 L1379.6 683.168 L1379.04 683.168 L1378.49 683.168 L1377.93 683.168 L1377.37 683.168 L1376.81 683.168 L1376.25 683.168 L1375.69 683.168 L1375.13 683.168 L1374.57 683.168 L1374.01 683.168 L1373.45 683.168 L1372.89 683.168 L1372.33 683.168 L1371.77 683.168 L1371.21 683.168 L1370.66 683.168 L1370.1 683.168 L1369.54 683.168 L1368.98 683.168 L1368.42 683.168 L1367.86 683.168 L1367.3 683.168 L1366.74 683.168 L1366.18 683.168 L1365.62 683.168 L1365.06 683.168 L1364.5 683.168 L1363.94 683.168 L1363.39 683.168 L1362.83 683.168 L1362.27 683.168 L1361.71 683.168 L1361.15 683.168 L1360.59 683.168 L1360.03 683.168 L1359.47 683.168 L1358.91 683.168 L1358.35 683.168 L1357.79 683.168 L1357.23 683.168 L1356.67 683.168 L1356.12 683.168 L1355.56 683.168 L1355 683.168 L1354.44 683.168 L1353.88 683.168 L1353.32 683.168 L1352.76 683.168 L1352.2 683.168 L1351.64 683.168 L1351.08 683.168 L1350.52 683.168 L1349.96 683.168 L1349.4 683.168 L1348.84 683.168 L1348.29 683.168 L1347.73 683.168 L1347.17 683.168 L1346.61 683.168 L1346.05 683.168 L1345.49 683.168 L1344.93 683.168 L1344.37 683.168 L1343.81 683.168 L1343.25 683.168 L1342.69 683.168 L1342.13 683.168 L1341.57 683.168 L1341.02 683.168 L1340.46 683.168 L1339.9 683.168 L1339.34 683.168 L1338.78 683.168 L1338.22 683.168 L1337.66 683.168 L1337.1 683.168 L1336.54 683.168 L1335.98 683.168 L1335.42 683.168 L1334.86 683.168 L1334.3 683.168 L1333.75 683.168 L1333.19 683.168 L1332.63 683.168 L1332.07 683.168 L1331.51 683.168 L1330.95 683.168 L1330.39 683.168 L1329.83 683.168 L1329.27 683.168 L1328.71 683.168 L1328.15 683.168 L1327.59 683.168 L1327.03 683.168 L1326.47 683.168 L1325.92 683.168 L1325.36 683.168 L1324.8 683.168 L1324.24 683.168 L1323.68 683.168 L1323.12 683.168 L1322.56 683.168 L1322 683.168 L1321.44 683.168 L1320.88 683.168 L1320.32 683.168 L1319.76 683.168 L1319.2 683.168 L1318.65 683.168 L1318.09 683.168 L1317.53 683.168 L1316.97 683.168 L1316.41 683.168 L1315.85 683.168 L1315.29 683.168 L1314.73 683.168 L1314.17 683.168 L1313.61 683.168 L1313.05 683.168 L1312.49 683.168 L1311.93 683.168 L1311.38 683.168 L1310.82 683.168 L1310.26 683.168 L1309.7 683.168 L1309.14 683.168 L1308.58 683.168 L1308.02 683.168 L1307.46 683.168 L1306.9 683.168 L1306.34 683.168 L1305.78 683.168 L1305.22 683.168 L1304.66 683.168 L1304.1 683.168 L1303.55 683.168 L1302.99 683.168 L1302.43 683.168 L1301.87 683.168 L1301.31 683.168 L1300.75 683.168 L1300.19 683.168 L1299.63 683.168 L1299.07 683.168 L1298.51 683.168 L1297.95 683.168 L1297.39 683.168 L1296.83 683.168 L1296.28 683.168 L1295.72 683.168 L1295.16 683.168 L1294.6 683.168 L1294.04 683.168 L1293.48 683.168 L1292.92 683.168 L1292.36 683.168 L1291.8 683.168 L1291.24 683.168 L1290.68 683.168 L1290.12 683.168 L1289.56 683.168 L1289 683.168 L1288.45 683.168 L1287.89 683.168 L1287.33 683.168 L1286.77 683.168 L1286.21 683.168 L1285.65 683.168 L1285.09 683.168 L1284.53 683.168 L1283.97 683.168 L1283.41 683.168 L1282.85 683.168 L1282.29 683.168 L1281.73 683.168 L1281.18 683.168 L1280.62 683.168 L1280.06 683.168 L1279.5 683.168 L1278.94 683.168 L1278.38 683.168 L1277.82 683.168 L1277.26 683.168 L1276.7 683.168 L1276.14 683.168 L1275.58 683.168 L1275.02 683.168 L1274.46 683.168 L1273.91 683.168 L1273.35 683.168 L1272.79 683.168 L1272.23 683.168 L1271.67 683.168 L1271.11 683.168 L1270.55 683.168 L1269.99 683.168 L1269.43 683.168 L1268.87 683.168 L1268.31 683.168 L1267.75 683.168 L1267.19 683.168 L1266.63 683.168 L1266.08 683.168 L1265.52 683.168 L1264.96 683.168 L1264.4 683.168 L1263.84 683.168 L1263.28 683.168 L1262.72 683.168 L1262.16 683.168 L1261.6 683.168 L1261.04 683.168 L1260.48 683.168 L1259.92 683.168 L1259.36 683.168 L1258.81 683.168 L1258.25 683.168 L1257.69 683.168 L1257.13 683.168 L1256.57 683.168 L1256.01 683.168 L1255.45 683.168 L1254.89 683.168 L1254.33 683.168 L1253.77 683.168 L1253.21 683.168 L1252.65 683.168 L1252.09 683.168 L1251.54 683.168 L1250.98 683.168 L1250.42 683.168 L1249.86 683.168 L1249.3 683.168 L1248.74 683.168 L1248.18 683.168 L1247.62 683.168 L1247.06 683.168 L1246.5 683.168 L1245.94 683.168 L1245.38 683.168 L1244.82 683.168 L1244.26 683.168 L1243.71 683.168 L1243.15 683.168 L1242.59 683.168 L1242.03 683.168 L1241.47 683.168 L1240.91 683.168 L1240.35 683.168 L1239.79 683.168 L1239.23 683.168 L1238.67 683.168 L1238.11 683.168 L1237.55 683.168 L1236.99 683.168 L1236.44 683.168 L1235.88 683.168 L1235.32 683.168 L1234.76 683.168 L1234.2 683.168 L1233.64 683.168 L1233.08 683.168 L1232.52 683.168 L1231.96 683.168 L1231.4 683.168 L1230.84 683.168 L1230.28 683.168 L1229.72 683.168 L1229.17 683.168 L1228.61 683.168 L1228.05 683.168 L1227.49 683.168 L1226.93 683.168 L1226.37 683.168 L1225.81 683.168 L1225.25 683.168 L1224.69 683.168 L1224.13 683.168 L1223.57 683.168 L1223.01 683.168 L1222.45 683.168 L1221.89 683.168 L1221.34 683.168 L1220.78 683.168 L1220.22 683.168 L1219.66 683.168 L1219.1 683.168 L1218.54 683.168 L1217.98 683.168 L1217.42 683.168 L1216.86 683.168 L1216.3 683.168 L1215.74 683.168 L1215.18 683.168 L1214.62 683.168 L1214.07 683.168 L1213.51 683.168 L1212.95 683.168 L1212.39 683.168 L1211.83 683.168 L1211.27 683.168 L1210.71 683.168 L1210.15 683.168 L1209.59 683.168 L1209.03 683.168 L1208.47 683.168 L1207.91 683.168 L1207.35 683.168 L1206.8 683.168 L1206.24 683.168 L1205.68 683.168 L1205.12 683.168 L1204.56 683.168 L1204 683.168 L1203.44 683.168 L1202.88 683.168 L1202.32 683.168 L1201.76 683.168 L1201.2 683.168 L1200.64 683.168 L1200.08 683.168 L1199.52 683.168 L1198.97 683.168 L1198.41 683.168 L1197.85 683.168 L1197.29 683.168 L1196.73 683.168 L1196.17 683.168 L1195.61 683.168 L1195.05 683.168 L1194.49 683.168 L1193.93 683.168 L1193.37 683.168 L1192.81 683.168 L1192.25 683.168 L1191.7 683.168 L1191.14 683.168 L1190.58 683.168 L1190.02 683.168 L1189.46 683.168 L1188.9 683.168 L1188.34 683.168 L1187.78 683.168 L1187.22 683.168 L1186.66 683.168 L1186.1 683.168 L1185.54 683.168 L1184.98 683.168 L1184.43 683.168 L1183.87 683.168 L1183.31 683.168 L1182.75 683.168 L1182.19 683.168 L1181.63 683.168 L1181.07 683.168 L1180.51 683.168 L1179.95 683.168 L1179.39 683.168 L1178.83 683.168 L1178.27 683.168 L1177.71 683.168 L1177.15 683.168 L1176.6 683.168 L1176.04 683.168 L1175.48 683.168 L1174.92 683.168 L1174.36 683.168 L1173.8 683.168 L1173.24 683.168 L1172.68 683.168 L1172.12 683.168 L1171.56 683.168 L1171 683.168 L1170.44 683.168 L1169.88 683.168 L1169.33 683.168 L1168.77 683.168 L1168.21 683.168 L1167.65 683.168 L1167.09 683.168 L1166.53 683.168 L1165.97 683.168 L1165.41 683.168 L1164.85 683.168 L1164.29 683.168 L1163.73 683.168 L1163.17 683.168 L1162.61 683.168 L1162.05 683.168 L1161.5 683.168 L1160.94 683.168 L1160.38 683.168 L1159.82 683.168 L1159.26 683.168 L1158.7 683.168 L1158.14 683.168 L1157.58 683.168 L1157.02 683.168 L1156.46 683.168 L1155.9 683.168 L1155.34 683.168 L1154.78 683.168 L1154.23 683.168 L1153.67 683.168 L1153.11 683.168 L1152.55 683.168 L1151.99 683.168 L1151.43 683.168 L1150.87 683.168 L1150.31 683.168 L1149.75 683.168 L1149.19 683.168 L1148.63 683.168 L1148.07 683.168 L1147.51 683.168 L1146.96 683.168 L1146.4 683.168 L1145.84 683.168 L1145.28 683.168 L1144.72 683.168 L1144.16 683.168 L1143.6 683.168 L1143.04 683.168 L1142.48 683.168 L1141.92 683.168 L1141.36 683.168 L1140.8 683.168 L1140.24 683.168 L1139.68 683.168 L1139.13 683.168 L1138.57 683.168 L1138.01 683.168 L1137.45 683.168 L1136.89 683.168 L1136.33 683.168 L1135.77 683.168 L1135.21 683.168 L1134.65 683.168 L1134.09 683.168 L1133.53 683.168 L1132.97 683.168 L1132.41 683.168 L1131.86 683.168 L1131.3 683.168 L1130.74 683.168 L1130.18 683.168 L1129.62 683.168 L1129.06 683.168 L1128.5 683.168 L1127.94 683.168 L1127.38 683.168 L1126.82 683.168 L1126.26 683.168 L1125.7 683.168 L1125.14 683.168 L1124.59 683.168 L1124.03 683.168 L1123.47 683.168 L1122.91 683.168 L1122.35 683.168 L1121.79 683.168 L1121.23 683.168 L1120.67 683.168 L1120.11 683.168 L1119.55 683.168 L1118.99 683.168 L1118.43 683.168 L1117.87 683.168 L1117.31 683.168 L1116.76 683.168 L1116.2 683.168 L1115.64 683.168 L1115.08 683.168 L1114.52 683.168 L1113.96 683.168 L1113.4 683.168 L1112.84 683.168 L1112.28 683.168 L1111.72 683.168 L1111.16 683.168 L1110.6 683.168 L1110.04 683.168 L1109.49 683.168 L1108.93 683.168 L1108.37 683.168 L1107.81 683.168 L1107.25 683.168 L1106.69 683.168 L1106.13 683.168 L1105.57 683.168 L1105.01 683.168 L1104.45 683.168 L1103.89 683.168 L1103.33 683.168 L1102.77 683.168 L1102.22 683.168 L1101.66 683.168 L1101.1 683.168 L1100.54 683.168 L1099.98 683.168 L1099.42 683.168 L1098.86 683.168 L1098.3 683.168 L1097.74 683.168 L1097.18 683.168 L1096.62 683.168 L1096.06 683.168 L1095.5 683.168 L1094.94 683.168 L1094.39 683.168 L1093.83 683.168 L1093.27 683.168 L1092.71 683.168 L1092.15 683.168 L1091.59 683.168 L1091.03 683.168 L1090.47 683.168 L1089.91 683.168 L1089.35 683.168 L1088.79 683.168 L1088.23 683.168 L1087.67 683.168 L1087.12 683.168 L1086.56 683.168 L1086 683.168 L1085.44 683.168 L1084.88 683.168 L1084.32 683.168 L1083.76 683.168 L1083.2 683.168 L1082.64 683.168 L1082.08 683.168 L1081.52 683.168 L1080.96 683.168 L1080.4 683.168 L1079.85 683.168 L1079.29 683.168 L1078.73 683.168 L1078.17 683.168 L1077.61 683.168 L1077.05 683.168 L1076.49 683.168 L1075.93 683.168 L1075.37 683.168 L1074.81 683.168 L1074.25 683.168 L1073.69 683.168 L1073.13 683.168 L1072.57 683.168 L1072.02 683.168 L1071.46 683.168 L1070.9 683.168 L1070.34 683.168 L1069.78 683.168 L1069.22 683.168 L1068.66 683.168 L1068.1 683.168 L1067.54 683.168 L1066.98 683.168 L1066.42 683.168 L1065.86 683.168 L1065.3 683.168 L1064.75 683.168 L1064.19 683.168 L1063.63 683.168 L1063.07 683.168 L1062.51 683.168 L1061.95 683.168 L1061.39 683.168 L1060.83 683.168 L1060.27 683.168 L1059.71 683.168 L1059.15 683.168 L1058.59 683.168 L1058.03 683.168 L1057.48 683.168 L1056.92 683.168 L1056.36 683.168 L1055.8 683.168 L1055.24 683.168 L1054.68 683.168 L1054.12 683.168 L1053.56 683.168 L1053 683.168 L1052.44 683.168 L1051.88 683.168 L1051.32 683.168 L1050.76 683.168 L1050.2 683.168 L1049.65 683.168 L1049.09 683.168 L1048.53 683.168 L1047.97 683.168 L1047.41 683.168 L1046.85 683.168 L1046.29 683.168 L1045.73 683.168 L1045.17 683.168 L1044.61 683.168 L1044.05 683.168 L1043.49 683.168 L1042.93 683.168 L1042.38 683.168 L1041.82 683.168 L1041.26 683.168 L1040.7 683.168 L1040.14 683.168 L1039.58 683.168 L1039.02 683.168 L1038.46 683.168 L1037.9 683.168 L1037.34 683.168 L1036.78 683.168 L1036.22 683.168 L1035.66 683.168 L1035.1 683.168 L1034.55 683.168 L1033.99 683.168 L1033.43 683.168 L1032.87 683.168 L1032.31 683.168 L1031.75 683.168 L1031.19 683.168 L1030.63 683.168 L1030.07 683.168 L1029.51 683.168 L1028.95 683.168 L1028.39 683.168 L1027.83 683.168 L1027.28 683.168 L1026.72 683.168 L1026.16 683.168 L1025.6 683.168 L1025.04 683.168 L1024.48 683.168 L1023.92 683.168 L1023.36 683.168 L1022.8 683.168 L1022.24 683.168 L1021.68 683.168 L1021.12 683.168 L1020.56 683.168 L1020.01 683.168 L1019.45 683.168 L1018.89 683.168 L1018.33 683.168 L1017.77 683.168 L1017.21 683.168 L1016.65 683.168 L1016.09 683.168 L1015.53 683.168 L1014.97 683.168 L1014.41 683.168 L1013.85 683.168 L1013.29 683.168 L1012.73 683.168 L1012.18 683.168 L1011.62 683.168 L1011.06 683.168 L1010.5 683.168 L1009.94 683.168 L1009.38 683.168 L1008.82 683.168 L1008.26 683.168 L1007.7 683.168 L1007.14 683.168 L1006.58 683.168 L1006.02 683.168 L1005.46 683.168 L1004.91 683.168 L1004.35 683.168 L1003.79 683.168 L1003.23 683.168 L1002.67 683.168 L1002.11 683.168 L1001.55 683.168 L1000.99 683.168 L1000.43 683.168 L999.872 683.168 L999.313 683.168 L998.754 683.168 L998.194 683.168 L997.635 683.168 L997.076 683.168 L996.517 683.168 L995.957 683.168 L995.398 683.168 L994.839 683.168 L994.28 683.168 L993.72 683.168 L993.161 683.168 L992.602 683.168 L992.043 683.168 L991.483 683.168 L990.924 683.168 L990.365 683.168 L989.806 683.168 L989.246 683.168 L988.687 683.168 L988.128 683.168 L987.569 683.168 L987.009 683.168 L986.45 683.168 L985.891 683.168 L985.332 683.168 L984.772 683.168 L984.213 683.168 L983.654 683.168 L983.095 683.168 L982.535 683.168 L981.976 683.168 L981.417 683.168 L980.858 683.168 L980.298 683.168 L979.739 683.168 L979.18 683.168 L978.621 683.168 L978.061 683.168 L977.502 683.168 L976.943 683.168 L976.384 683.168 L975.824 683.168 L975.265 683.168 L974.706 683.168 L974.147 683.168 L973.587 683.168 L973.028 683.168 L972.469 683.168 L971.91 683.168 L971.35 683.168 L970.791 683.168 L970.232 683.168 L969.673 683.168 L969.113 683.168 L968.554 683.168 L967.995 683.168 L967.436 683.168 L966.876 683.168 L966.317 683.168 L965.758 683.168 L965.199 683.168 L964.639 683.168 L964.08 683.168 L963.521 683.168 L962.962 683.168 L962.402 683.168 L961.843 683.168 L961.284 683.168 L960.725 683.168 L960.165 683.168 L959.606 683.168 L959.047 683.168 L958.488 683.168 L957.928 683.168 L957.369 683.168 L956.81 683.168 L956.251 683.168 L955.691 683.168 L955.132 683.168 L954.573 683.168 L954.014 683.168 L953.454 683.168 L952.895 683.168 L952.336 683.168 L951.777 683.168 L951.217 683.168 L950.658 683.168 L950.099 683.168 L949.54 683.168 L948.98 683.168 L948.421 683.168 L947.862 683.168 L947.303 683.168 L946.743 683.168 L946.184 683.168 L945.625 683.168 L945.066 683.168 L944.506 683.168 L943.947 683.168 L943.388 683.168 L942.829 683.168 L942.269 683.168 L941.71 683.168 L941.151 683.168 L940.592 683.168 L940.032 683.168 L939.473 683.168 L938.914 683.168 L938.355 683.168 L937.795 683.168 L937.236 683.168 L936.677 683.168 L936.118 683.168 L935.558 683.168 L934.999 683.168 L934.44 683.168 L933.881 683.168 L933.321 683.168 L932.762 683.168 L932.203 683.168 L931.644 683.168 L931.084 683.168 L930.525 683.168 L929.966 683.168 L929.406 683.168 L928.847 683.168 L928.288 683.168 L927.729 683.168 L927.169 683.168 L926.61 683.168 L926.051 683.168 L925.492 683.168 L924.932 683.168 L924.373 683.168 L923.814 683.168 L923.255 683.168 L922.695 683.168 L922.136 683.168 L921.577 683.168 L921.018 683.168 L920.458 683.168 L919.899 683.168 L919.34 683.168 L918.781 683.168 L918.221 683.168 L917.662 683.168 L917.103 683.168 L916.544 683.168 L915.984 683.168 L915.425 683.168 L914.866 683.168 L914.307 683.168 L913.747 683.168 L913.188 683.168 L912.629 683.168 L912.07 683.168 L911.51 683.168 L910.951 683.168 L910.392 683.168 L909.833 683.168 L909.273 683.168 L908.714 683.168 L908.155 683.168 L907.596 683.168 L907.036 683.168 L906.477 683.168 L905.918 683.168 L905.359 683.168 L904.799 683.168 L904.24 683.168 L903.681 683.168 L903.122 683.168 L902.562 683.168 L902.003 683.168 L901.444 683.168 L900.885 683.168 L900.325 683.168 L899.766 683.168 L899.207 683.168 L898.648 683.168 L898.088 683.168 L897.529 683.168 L896.97 683.168 L896.411 683.168 L895.851 683.168 L895.292 683.168 L894.733 683.168 L894.174 683.168 L893.614 683.168 L893.055 683.168 L892.496 683.168 L891.937 683.168 L891.377 683.168 L890.818 683.168 L890.259 683.168 L889.7 683.168 L889.14 683.168 L888.581 683.168 L888.022 683.168 L887.463 683.168 L886.903 683.168 L886.344 683.168 L885.785 683.168 L885.226 683.168 L884.666 683.168 L884.107 683.168 L883.548 683.168 L882.989 683.168 L882.429 683.168 L881.87 683.168 L881.311 683.168 L880.752 683.168 L880.192 683.168 L879.633 683.168 L879.074 683.168 L878.515 683.168 L877.955 683.168 L877.396 683.168 L876.837 683.168 L876.278 683.168 L875.718 683.168 L875.159 683.168 L874.6 683.168 L874.041 683.168 L873.481 683.168 L872.922 683.168 L872.363 683.168 L871.804 683.168 L871.244 683.168 L870.685 683.168 L870.126 683.168 L869.567 683.168 L869.007 683.168 L868.448 683.168 L867.889 683.168 L867.33 683.168 L866.77 683.168 L866.211 683.168 L865.652 683.168 L865.093 683.168 L864.533 683.168 L863.974 683.168 L863.415 683.168 L862.856 683.168 L862.296 683.168 L861.737 683.168 L861.178 683.168 L860.619 683.168 L860.059 683.168 L859.5 683.168 L858.941 683.168 L858.382 683.168 L857.822 683.168 L857.263 683.168 L856.704 683.168 L856.145 683.168 L855.585 683.168 L855.026 683.168 L854.467 683.168 L853.908 683.168 L853.348 683.168 L852.789 683.168 L852.23 683.168 L851.671 683.168 L851.111 683.168 L850.552 683.168 L849.993 683.168 L849.434 683.168 L848.874 683.168 L848.315 683.168 L847.756 683.168 L847.197 683.168 L846.637 683.168 L846.078 683.168 L845.519 683.168 L844.96 683.168 L844.4 683.168 L843.841 683.168 L843.282 683.168 L842.723 683.168 L842.163 683.168 L841.604 683.168 L841.045 683.168 L840.486 683.168 L839.926 683.168 L839.367 683.168 L838.808 683.168 L838.249 683.168 L837.689 683.168 L837.13 683.168 L836.571 683.168 L836.012 683.168 L835.452 683.168 L834.893 683.168 L834.334 683.168 L833.775 683.168 L833.215 683.168 L832.656 683.168 L832.097 683.168 L831.538 683.168 L830.978 683.168 L830.419 683.168 L829.86 683.168 L829.301 683.168 L828.741 683.168 L828.182 683.168 L827.623 683.168 L827.064 683.168 L826.504 683.168 L825.945 683.168 L825.386 683.168 L824.827 683.168 L824.267 683.168 L823.708 683.168 L823.149 683.168 L822.59 683.168 L822.03 683.168 L821.471 683.168 L820.912 683.168 L820.353 683.168 L819.793 683.168 L819.234 683.168 L818.675 683.168 L818.116 683.168 L817.556 683.168 L816.997 683.168 L816.438 683.168 L815.879 683.168 L815.319 683.168 L814.76 683.168 L814.201 683.168 L813.642 683.168 L813.082 683.168 L812.523 683.168 L811.964 683.168 L811.405 683.168 L810.845 683.168 L810.286 683.168 L809.727 683.168 L809.168 683.168 L808.608 683.168 L808.049 683.168 L807.49 683.168 L806.931 683.168 L806.371 683.168 L805.812 683.168 L805.253 683.168 L804.693 683.168 L804.134 683.168 L803.575 683.168 L803.016 683.168 L802.456 683.168 L801.897 683.168 L801.338 683.168 L800.779 683.168 L800.219 683.168 L799.66 683.168 L799.101 683.168 L798.542 683.168 L797.982 683.168 L797.423 683.168 L796.864 683.168 L796.305 683.168 L795.745 683.168 L795.186 683.168 L794.627 683.168 L794.068 683.168 L793.508 683.168 L792.949 683.168 L792.39 683.168 L791.831 683.168 L791.271 683.168 L790.712 683.168 L790.153 683.168 L789.594 683.168 L789.034 683.168 L788.475 683.168 L787.916 683.168 L787.357 683.168 L786.797 683.168 L786.238 683.168 L785.679 683.168 L785.12 683.168 L784.56 683.168 L784.001 683.168 L783.442 683.168 L782.883 683.168 L782.323 683.168 L781.764 683.168 L781.205 683.168 L780.646 683.168 L780.086 683.168 L779.527 683.168 L778.968 683.168 L778.409 683.168 L777.849 683.168 L777.29 683.168 L776.731 683.168 L776.172 683.168 L775.612 683.168 L775.053 683.168 L774.494 683.168 L773.935 683.168 L773.375 683.168 L772.816 683.168 L772.257 683.168 L771.698 683.168 L771.138 683.168 L770.579 683.168 L770.02 683.168 L769.461 683.168 L768.901 683.168 L768.342 683.168 L767.783 683.168 L767.224 683.168 L766.664 683.168 L766.105 683.168 L765.546 683.168 L764.987 683.168 L764.427 683.168 L763.868 683.168 L763.309 683.168 L762.75 683.168 L762.19 683.168 L761.631 683.168 L761.072 683.168 L760.513 683.168 L759.953 683.168 L759.394 683.168 L758.835 683.168 L758.276 683.168 L757.716 683.168 L757.157 683.168 L756.598 683.168 L756.039 683.168 L755.479 683.168 L754.92 683.168 L754.361 683.168 L753.802 683.168 L753.242 683.168 L752.683 683.168 L752.124 683.168 L751.565 683.168 L751.005 683.168 L750.446 683.168 L749.887 683.168 L749.328 683.168 L748.768 683.168 L748.209 683.168 L747.65 683.168 L747.091 683.168 L746.531 683.168 L745.972 683.168 L745.413 683.168 L744.854 683.168 L744.294 683.168 L743.735 683.168 L743.176 683.168 L742.617 683.168 L742.057 683.168 L741.498 683.168 L740.939 683.168 L740.38 683.168 L739.82 683.168 L739.261 683.168 L738.702 683.168 L738.143 683.168 L737.583 683.168 L737.024 683.168 L736.465 683.168 L735.906 683.168 L735.346 683.168 L734.787 683.168 L734.228 683.168 L733.669 683.168 L733.109 683.168 L732.55 683.168 L731.991 683.168 L731.432 683.168 L730.872 683.168 L730.313 683.168 L729.754 683.168 L729.195 683.168 L728.635 683.168 L728.076 683.168 L727.517 683.168 L726.958 683.168 L726.398 683.168 L725.839 683.168 L725.28 683.168 L724.721 683.168 L724.161 683.168 L723.602 683.168 L723.043 683.168 L722.484 683.168 L721.924 683.168 L721.365 683.168 L720.806 683.168 L720.247 683.168  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.903 720.806,687.903 721.365,687.903 721.924,687.903 722.484,687.903 723.043,687.903 723.602,687.903 724.161,687.903 724.721,687.903 725.28,687.903 725.839,687.903 726.398,687.903 726.958,687.903 727.517,687.903 728.076,687.903 728.635,687.903 729.195,687.903 729.754,687.903 730.313,687.903 730.872,687.903 731.432,687.903 731.991,687.903 732.55,687.903 733.109,687.903 733.669,687.903 734.228,687.903 734.787,687.903 735.346,687.903 735.906,687.903 736.465,687.903 737.024,687.903 737.583,687.903 738.143,687.903 738.702,687.903 739.261,687.903 739.82,687.903 740.38,687.903 740.939,687.903 741.498,687.903 742.057,687.903 742.617,687.903 743.176,687.903 743.735,687.903 744.294,687.903 744.854,687.903 745.413,687.903 745.972,687.903 746.531,687.903 747.091,687.903 747.65,687.903 748.209,687.903 748.768,687.903 749.328,687.903 749.887,687.903 750.446,687.903 751.005,687.903 751.565,687.903 752.124,687.903 752.683,687.903 753.242,687.903 753.802,687.903 754.361,687.903 754.92,687.903 755.479,687.903 756.039,687.903 756.598,687.903 757.157,687.903 757.716,687.903 758.276,687.903 758.835,687.903 759.394,687.903 759.953,687.903 760.513,687.903 761.072,687.903 761.631,687.903 762.19,687.903 762.75,687.903 763.309,687.903 763.868,687.903 764.427,687.903 764.987,687.903 765.546,687.903 766.105,687.903 766.664,687.903 767.224,687.903 767.783,687.903 768.342,687.903 768.901,687.903 769.461,687.903 770.02,687.903 770.579,687.903 771.138,687.903 771.698,687.903 772.257,687.903 772.816,687.903 773.375,687.903 773.935,687.903 774.494,687.903 775.053,687.903 775.612,687.903 776.172,687.903 776.731,687.903 777.29,687.903 777.849,687.903 778.409,687.903 778.968,687.903 779.527,687.903 780.086,687.903 780.646,687.903 781.205,687.903 781.764,687.903 782.323,687.903 782.883,687.903 783.442,687.903 784.001,687.903 784.56,687.903 785.12,687.903 785.679,687.903 786.238,687.903 786.797,687.903 787.357,687.903 787.916,687.903 788.475,687.903 789.034,687.903 789.594,687.903 790.153,687.903 790.712,687.903 791.271,687.903 791.831,687.903 792.39,687.903 792.949,687.903 793.508,687.903 794.068,687.903 794.627,687.903 795.186,687.903 795.745,687.903 796.305,687.903 796.864,687.903 797.423,687.903 797.982,687.903 798.542,687.903 799.101,687.903 799.66,687.903 800.219,687.903 800.779,687.903 801.338,687.903 801.897,687.903 802.456,687.903 803.016,687.903 803.575,687.903 804.134,687.903 804.693,687.903 805.253,687.903 805.812,687.903 806.371,687.903 806.931,687.903 807.49,687.903 808.049,687.903 808.608,687.903 809.168,687.903 809.727,687.903 810.286,687.903 810.845,687.903 811.405,687.903 811.964,687.903 812.523,687.903 813.082,687.903 813.642,687.903 814.201,687.903 814.76,687.903 815.319,687.903 815.879,687.903 816.438,687.903 816.997,687.903 817.556,687.903 818.116,687.903 818.675,687.903 819.234,687.903 819.793,687.903 820.353,687.903 820.912,687.903 821.471,687.903 822.03,687.903 822.59,687.903 823.149,687.903 823.708,687.903 824.267,687.903 824.827,687.903 825.386,687.903 825.945,687.903 826.504,687.903 827.064,687.903 827.623,687.903 828.182,687.903 828.741,687.903 829.301,687.903 829.86,687.903 830.419,687.903 830.978,687.903 831.538,687.903 832.097,687.903 832.656,687.903 833.215,687.903 833.775,687.903 834.334,687.903 834.893,687.903 835.452,687.903 836.012,687.903 836.571,687.903 837.13,687.903 837.689,687.903 838.249,687.903 838.808,687.903 839.367,687.903 839.926,687.903 840.486,687.903 841.045,687.903 841.604,687.903 842.163,687.903 842.723,687.903 843.282,687.903 843.841,687.903 844.4,687.903 844.96,687.903 845.519,687.903 846.078,687.903 846.637,687.903 847.197,687.903 847.756,687.903 848.315,687.903 848.874,687.903 849.434,687.903 849.993,687.903 850.552,687.903 851.111,687.903 851.671,687.903 852.23,687.903 852.789,687.903 853.348,687.903 853.908,687.903 854.467,687.903 855.026,687.903 855.585,687.903 856.145,687.903 856.704,687.903 857.263,687.903 857.822,687.903 858.382,687.903 858.941,687.903 859.5,687.903 860.059,687.903 860.619,687.903 861.178,687.903 861.737,687.903 862.296,687.903 862.856,687.903 863.415,687.903 863.974,687.903 864.533,687.903 865.093,687.903 865.652,687.903 866.211,687.903 866.77,687.903 867.33,687.903 867.889,687.903 868.448,687.903 869.007,687.903 869.567,687.903 870.126,687.903 870.685,687.903 871.244,687.903 871.804,687.903 872.363,687.903 872.922,687.903 873.481,687.903 874.041,687.903 874.6,687.903 875.159,687.903 875.718,687.903 876.278,687.903 876.837,687.903 877.396,687.903 877.955,687.903 878.515,687.903 879.074,687.903 879.633,687.903 880.192,687.903 880.752,687.903 881.311,687.903 881.87,687.903 882.429,687.903 882.989,687.903 883.548,687.903 884.107,687.903 884.666,687.903 885.226,687.903 885.785,687.903 886.344,687.903 886.903,687.903 887.463,687.903 888.022,687.903 888.581,687.903 889.14,687.903 889.7,687.903 890.259,687.903 890.818,687.903 891.377,687.903 891.937,687.903 892.496,687.903 893.055,687.903 893.614,687.903 894.174,687.903 894.733,687.903 895.292,687.903 895.851,687.903 896.411,687.903 896.97,687.903 897.529,687.903 898.088,687.903 898.648,687.903 899.207,687.903 899.766,687.903 900.325,687.903 900.885,687.903 901.444,687.903 902.003,687.903 902.562,687.903 903.122,687.903 903.681,687.903 904.24,687.903 904.799,687.903 905.359,687.903 905.918,687.903 906.477,687.903 907.036,687.903 907.596,687.903 908.155,687.903 908.714,687.903 909.273,687.903 909.833,687.903 910.392,687.903 910.951,687.903 911.51,687.903 912.07,687.903 912.629,687.903 913.188,687.903 913.747,687.903 914.307,687.903 914.866,687.903 915.425,687.903 915.984,687.903 916.544,687.903 917.103,687.903 917.662,687.903 918.221,687.903 918.781,687.903 919.34,687.903 919.899,687.903 920.458,687.903 921.018,687.903 921.577,687.903 922.136,687.903 922.695,687.903 923.255,687.903 923.814,687.903 924.373,687.903 924.932,687.903 925.492,687.903 926.051,687.903 926.61,687.903 927.169,687.903 927.729,687.903 928.288,687.903 928.847,687.903 929.406,687.903 929.966,687.903 930.525,687.903 931.084,687.903 931.644,687.903 932.203,687.903 932.762,687.903 933.321,687.903 933.881,687.903 934.44,687.903 934.999,687.903 935.558,687.903 936.118,687.903 936.677,687.903 937.236,687.903 937.795,687.903 938.355,687.903 938.914,687.903 939.473,687.903 940.032,687.903 940.592,687.903 941.151,687.903 941.71,687.903 942.269,687.903 942.829,687.903 943.388,687.903 943.947,687.903 944.506,687.903 945.066,687.903 945.625,687.903 946.184,687.903 946.743,687.903 947.303,687.903 947.862,687.903 948.421,687.903 948.98,687.903 949.54,687.903 950.099,687.903 950.658,687.903 951.217,687.903 951.777,687.903 952.336,687.903 952.895,687.903 953.454,687.903 954.014,687.903 954.573,687.903 955.132,687.903 955.691,687.903 956.251,687.903 956.81,687.903 957.369,687.903 957.928,687.903 958.488,687.903 959.047,687.903 959.606,687.903 960.165,687.903 960.725,687.903 961.284,687.903 961.843,687.903 962.402,687.903 962.962,687.903 963.521,687.903 964.08,687.903 964.639,687.903 965.199,687.903 965.758,687.903 966.317,687.903 966.876,687.903 967.436,687.903 967.995,687.903 968.554,687.903 969.113,687.903 969.673,687.903 970.232,687.903 970.791,687.903 971.35,687.903 971.91,687.903 972.469,687.903 973.028,687.903 973.587,687.903 974.147,687.903 974.706,687.903 975.265,687.903 975.824,687.903 976.384,687.903 976.943,687.903 977.502,687.903 978.061,687.903 978.621,687.903 979.18,687.903 979.739,687.903 980.298,687.903 980.858,687.903 981.417,687.903 981.976,687.903 982.535,687.903 983.095,687.903 983.654,687.903 984.213,687.903 984.772,687.903 985.332,687.903 985.891,687.903 986.45,687.903 987.009,687.903 987.569,687.903 988.128,687.903 988.687,687.903 989.246,687.903 989.806,687.903 990.365,687.903 990.924,687.903 991.483,687.903 992.043,687.903 992.602,687.903 993.161,687.903 993.72,687.903 994.28,687.903 994.839,687.903 995.398,687.903 995.957,687.903 996.517,687.903 997.076,687.903 997.635,687.903 998.194,687.903 998.754,687.903 999.313,687.903 999.872,687.903 1000.43,687.903 1000.99,687.903 1001.55,687.903 1002.11,687.903 1002.67,687.903 1003.23,687.903 1003.79,687.903 1004.35,687.903 1004.91,687.903 1005.46,687.903 1006.02,687.903 1006.58,687.903 1007.14,687.903 1007.7,687.903 1008.26,687.903 1008.82,687.903 1009.38,687.903 1009.94,687.903 1010.5,687.903 1011.06,687.903 1011.62,687.903 1012.18,687.903 1012.73,687.903 1013.29,687.903 1013.85,687.903 1014.41,687.903 1014.97,687.903 1015.53,687.903 1016.09,687.903 1016.65,687.903 1017.21,687.903 1017.77,687.903 1018.33,687.903 1018.89,687.903 1019.45,687.903 1020.01,687.903 1020.56,687.903 1021.12,687.903 1021.68,687.903 1022.24,687.903 1022.8,687.903 1023.36,687.903 1023.92,687.903 1024.48,687.903 1025.04,687.903 1025.6,687.903 1026.16,687.903 1026.72,687.903 1027.28,687.903 1027.83,687.903 1028.39,687.903 1028.95,687.903 1029.51,687.903 1030.07,687.903 1030.63,687.903 1031.19,687.903 1031.75,687.903 1032.31,687.903 1032.87,687.903 1033.43,687.903 1033.99,687.903 1034.55,687.903 1035.1,687.903 1035.66,687.903 1036.22,687.903 1036.78,687.903 1037.34,687.903 1037.9,687.903 1038.46,687.903 1039.02,687.903 1039.58,687.903 1040.14,687.903 1040.7,687.903 1041.26,687.903 1041.82,687.903 1042.38,687.903 1042.93,687.903 1043.49,687.903 1044.05,687.903 1044.61,687.903 1045.17,687.903 1045.73,687.903 1046.29,687.903 1046.85,687.903 1047.41,687.903 1047.97,687.903 1048.53,687.903 1049.09,687.903 1049.65,687.903 1050.2,687.903 1050.76,687.903 1051.32,687.903 1051.88,687.903 1052.44,687.903 1053,687.903 1053.56,687.903 1054.12,687.903 1054.68,687.903 1055.24,687.903 1055.8,687.903 1056.36,687.903 1056.92,687.903 1057.48,687.903 1058.03,687.903 1058.59,687.903 1059.15,687.903 1059.71,687.903 1060.27,687.903 1060.83,687.903 1061.39,687.903 1061.95,687.903 1062.51,687.903 1063.07,687.903 1063.63,687.903 1064.19,687.903 1064.75,687.903 1065.3,687.903 1065.86,687.903 1066.42,687.903 1066.98,687.903 1067.54,687.903 1068.1,687.903 1068.66,687.903 1069.22,687.903 1069.78,687.903 1070.34,687.903 1070.9,687.903 1071.46,687.903 1072.02,687.903 1072.57,687.903 1073.13,687.903 1073.69,687.903 1074.25,687.903 1074.81,687.903 1075.37,687.903 1075.93,687.903 1076.49,687.903 1077.05,687.903 1077.61,687.903 1078.17,687.903 1078.73,687.903 1079.29,687.903 1079.85,687.903 1080.4,687.903 1080.96,687.903 1081.52,687.903 1082.08,687.903 1082.64,687.903 1083.2,687.903 1083.76,687.903 1084.32,687.903 1084.88,687.903 1085.44,687.903 1086,687.903 1086.56,687.903 1087.12,687.903 1087.67,687.903 1088.23,687.903 1088.79,687.903 1089.35,687.903 1089.91,687.903 1090.47,687.903 1091.03,687.903 1091.59,687.903 1092.15,687.903 1092.71,687.903 1093.27,687.903 1093.83,687.903 1094.39,687.903 1094.94,687.903 1095.5,687.903 1096.06,687.903 1096.62,687.903 1097.18,687.903 1097.74,687.903 1098.3,687.903 1098.86,687.903 1099.42,687.903 1099.98,687.903 1100.54,687.903 1101.1,687.903 1101.66,687.903 1102.22,687.903 1102.77,687.903 1103.33,687.903 1103.89,687.903 1104.45,687.903 1105.01,687.903 1105.57,687.903 1106.13,687.903 1106.69,687.903 1107.25,687.903 1107.81,687.903 1108.37,687.903 1108.93,687.903 1109.49,687.903 1110.04,687.903 1110.6,687.903 1111.16,687.903 1111.72,687.903 1112.28,687.903 1112.84,687.903 1113.4,687.903 1113.96,687.903 1114.52,687.903 1115.08,687.903 1115.64,687.903 1116.2,687.903 1116.76,687.903 1117.31,687.903 1117.87,687.903 1118.43,687.903 1118.99,687.903 1119.55,687.903 1120.11,687.903 1120.67,687.903 1121.23,687.903 1121.79,687.903 1122.35,687.903 1122.91,687.903 1123.47,687.903 1124.03,687.903 1124.59,687.903 1125.14,687.903 1125.7,687.903 1126.26,687.903 1126.82,687.903 1127.38,687.903 1127.94,687.903 1128.5,687.903 1129.06,687.903 1129.62,687.903 1130.18,687.903 1130.74,687.903 1131.3,687.903 1131.86,687.903 1132.41,687.903 1132.97,687.903 1133.53,687.903 1134.09,687.903 1134.65,687.903 1135.21,687.903 1135.77,687.903 1136.33,687.903 1136.89,687.903 1137.45,687.903 1138.01,687.903 1138.57,687.903 1139.13,687.903 1139.68,687.903 1140.24,687.903 1140.8,687.903 1141.36,687.903 1141.92,687.903 1142.48,687.903 1143.04,687.903 1143.6,687.903 1144.16,687.903 1144.72,687.903 1145.28,687.903 1145.84,687.903 1146.4,687.903 1146.96,687.903 1147.51,687.903 1148.07,687.903 1148.63,687.903 1149.19,687.903 1149.75,687.903 1150.31,687.903 1150.87,687.903 1151.43,687.903 1151.99,687.903 1152.55,687.903 1153.11,687.903 1153.67,687.903 1154.23,687.903 1154.78,687.903 1155.34,687.903 1155.9,687.903 1156.46,687.903 1157.02,687.903 1157.58,687.903 1158.14,687.903 1158.7,687.903 1159.26,687.903 1159.82,687.903 1160.38,687.903 1160.94,687.903 1161.5,687.903 1162.05,687.903 1162.61,687.903 1163.17,687.903 1163.73,687.903 1164.29,687.903 1164.85,687.903 1165.41,687.903 1165.97,687.903 1166.53,687.903 1167.09,687.903 1167.65,687.903 1168.21,687.903 1168.77,687.903 1169.33,687.903 1169.88,687.903 1170.44,687.903 1171,687.903 1171.56,687.903 1172.12,687.903 1172.68,687.903 1173.24,687.903 1173.8,687.903 1174.36,687.903 1174.92,687.903 1175.48,687.903 1176.04,687.903 1176.6,687.903 1177.15,687.903 1177.71,687.903 1178.27,687.903 1178.83,687.903 1179.39,687.903 1179.95,687.903 1180.51,687.903 1181.07,687.903 1181.63,687.903 1182.19,687.903 1182.75,687.903 1183.31,687.903 1183.87,687.903 1184.43,687.903 1184.98,687.903 1185.54,687.903 1186.1,687.903 1186.66,687.903 1187.22,687.903 1187.78,687.903 1188.34,687.903 1188.9,687.903 1189.46,687.903 1190.02,687.903 1190.58,687.903 1191.14,687.903 1191.7,687.903 1192.25,687.903 1192.81,687.903 1193.37,687.903 1193.93,687.903 1194.49,687.903 1195.05,687.903 1195.61,687.903 1196.17,687.903 1196.73,687.903 1197.29,687.903 1197.85,687.903 1198.41,687.903 1198.97,687.903 1199.52,687.903 1200.08,687.903 1200.64,687.903 1201.2,687.903 1201.76,687.903 1202.32,687.903 1202.88,687.903 1203.44,687.903 1204,687.903 1204.56,687.903 1205.12,687.903 1205.68,687.903 1206.24,687.903 1206.8,687.903 1207.35,687.903 1207.91,687.903 1208.47,687.903 1209.03,687.903 1209.59,687.903 1210.15,687.903 1210.71,687.903 1211.27,687.903 1211.83,687.903 1212.39,687.903 1212.95,687.903 1213.51,687.903 1214.07,687.903 1214.62,687.903 1215.18,687.903 1215.74,687.903 1216.3,687.903 1216.86,687.903 1217.42,687.903 1217.98,687.903 1218.54,687.903 1219.1,687.903 1219.66,687.903 1220.22,687.903 1220.78,687.903 1221.34,687.903 1221.89,687.903 1222.45,687.903 1223.01,687.903 1223.57,687.903 1224.13,687.903 1224.69,687.903 1225.25,687.903 1225.81,687.903 1226.37,687.903 1226.93,687.903 1227.49,687.903 1228.05,687.903 1228.61,687.903 1229.17,687.903 1229.72,687.903 1230.28,687.903 1230.84,687.903 1231.4,687.903 1231.96,687.903 1232.52,687.903 1233.08,687.903 1233.64,687.903 1234.2,687.903 1234.76,687.903 1235.32,687.903 1235.88,687.903 1236.44,687.903 1236.99,687.903 1237.55,687.903 1238.11,687.903 1238.67,687.903 1239.23,687.903 1239.79,687.903 1240.35,687.903 1240.91,687.903 1241.47,687.903 1242.03,687.903 1242.59,687.903 1243.15,687.903 1243.71,687.903 1244.26,687.903 1244.82,687.903 1245.38,687.903 1245.94,687.903 1246.5,687.903 1247.06,687.903 1247.62,687.903 1248.18,687.903 1248.74,687.903 1249.3,687.903 1249.86,687.903 1250.42,687.903 1250.98,687.903 1251.54,687.903 1252.09,687.903 1252.65,687.903 1253.21,687.903 1253.77,687.903 1254.33,687.903 1254.89,687.903 1255.45,687.903 1256.01,687.903 1256.57,687.903 1257.13,687.903 1257.69,687.903 1258.25,687.903 1258.81,687.903 1259.36,687.903 1259.92,687.903 1260.48,687.903 1261.04,687.903 1261.6,687.903 1262.16,687.903 1262.72,687.903 1263.28,687.903 1263.84,687.903 1264.4,687.903 1264.96,687.903 1265.52,687.903 1266.08,687.903 1266.63,687.903 1267.19,687.903 1267.75,687.903 1268.31,687.903 1268.87,687.903 1269.43,687.903 1269.99,687.903 1270.55,687.903 1271.11,687.903 1271.67,687.903 1272.23,687.903 1272.79,687.903 1273.35,687.903 1273.91,687.903 1274.46,687.903 1275.02,687.903 1275.58,687.903 1276.14,687.903 1276.7,687.903 1277.26,687.903 1277.82,687.903 1278.38,687.903 1278.94,687.903 1279.5,687.903 1280.06,687.903 1280.62,687.903 1281.18,687.903 1281.73,687.903 1282.29,687.903 1282.85,687.903 1283.41,687.903 1283.97,687.903 1284.53,687.903 1285.09,687.903 1285.65,687.903 1286.21,687.903 1286.77,687.903 1287.33,687.903 1287.89,687.903 1288.45,687.903 1289,687.903 1289.56,687.903 1290.12,687.903 1290.68,687.903 1291.24,687.903 1291.8,687.903 1292.36,687.903 1292.92,687.903 1293.48,687.903 1294.04,687.903 1294.6,687.903 1295.16,687.903 1295.72,687.903 1296.28,687.903 1296.83,687.903 1297.39,687.903 1297.95,687.903 1298.51,687.903 1299.07,687.903 1299.63,687.903 1300.19,687.903 1300.75,687.903 1301.31,687.903 1301.87,687.903 1302.43,687.903 1302.99,687.903 1303.55,687.903 1304.1,687.903 1304.66,687.903 1305.22,687.903 1305.78,687.903 1306.34,687.903 1306.9,687.903 1307.46,687.903 1308.02,687.903 1308.58,687.903 1309.14,687.903 1309.7,687.903 1310.26,687.903 1310.82,687.903 1311.38,687.903 1311.93,687.903 1312.49,687.903 1313.05,687.903 1313.61,687.903 1314.17,687.903 1314.73,687.903 1315.29,687.903 1315.85,687.903 1316.41,687.903 1316.97,687.903 1317.53,687.903 1318.09,687.903 1318.65,687.903 1319.2,687.903 1319.76,687.903 1320.32,687.903 1320.88,687.903 1321.44,687.903 1322,687.903 1322.56,687.903 1323.12,687.903 1323.68,687.903 1324.24,687.903 1324.8,687.903 1325.36,687.903 1325.92,687.903 1326.47,687.903 1327.03,687.903 1327.59,687.903 1328.15,687.903 1328.71,687.903 1329.27,687.903 1329.83,687.903 1330.39,687.903 1330.95,687.903 1331.51,687.903 1332.07,687.903 1332.63,687.903 1333.19,687.903 1333.75,687.903 1334.3,687.903 1334.86,687.903 1335.42,687.903 1335.98,687.903 1336.54,687.903 1337.1,687.903 1337.66,687.903 1338.22,687.903 1338.78,687.903 1339.34,687.903 1339.9,687.903 1340.46,687.903 1341.02,687.903 1341.57,687.903 1342.13,687.903 1342.69,687.903 1343.25,687.903 1343.81,687.903 1344.37,687.903 1344.93,687.903 1345.49,687.903 1346.05,687.903 1346.61,687.903 1347.17,687.903 1347.73,687.903 1348.29,687.903 1348.84,687.903 1349.4,687.903 1349.96,687.903 1350.52,687.903 1351.08,687.903 1351.64,687.903 1352.2,687.903 1352.76,687.903 1353.32,687.903 1353.88,687.903 1354.44,687.903 1355,687.903 1355.56,687.903 1356.12,687.903 1356.67,687.903 1357.23,687.903 1357.79,687.903 1358.35,687.903 1358.91,687.903 1359.47,687.903 1360.03,687.903 1360.59,687.903 1361.15,687.903 1361.71,687.903 1362.27,687.903 1362.83,687.903 1363.39,687.903 1363.94,687.903 1364.5,687.903 1365.06,687.903 1365.62,687.903 1366.18,687.903 1366.74,687.903 1367.3,687.903 1367.86,687.903 1368.42,687.903 1368.98,687.903 1369.54,687.903 1370.1,687.903 1370.66,687.903 1371.21,687.903 1371.77,687.903 1372.33,687.903 1372.89,687.903 1373.45,687.903 1374.01,687.903 1374.57,687.903 1375.13,687.903 1375.69,687.903 1376.25,687.903 1376.81,687.903 1377.37,687.903 1377.93,687.903 1378.49,687.903 1379.04,687.903 1379.6,687.903 1380.16,687.903 1380.72,687.903 1381.28,687.903 1381.84,687.903 1382.4,687.903 1382.96,687.903 1383.52,687.903 1384.08,687.903 1384.64,687.903 1385.2,687.903 1385.76,687.903 1386.31,687.903 1386.87,687.903 1387.43,687.903 1387.99,687.903 1388.55,687.903 1389.11,687.903 1389.67,687.903 1390.23,687.903 1390.79,687.903 1391.35,687.903 1391.91,687.903 1392.47,687.903 1393.03,687.903 1393.58,687.903 1394.14,687.903 1394.7,687.903 1395.26,687.903 1395.82,687.903 1396.38,687.903 1396.94,687.903 1397.5,687.903 1398.06,687.903 1398.62,687.903 1399.18,687.903 1399.74,687.903 1400.3,687.903 1400.86,687.903 1401.41,687.903 1401.97,687.903 1402.53,687.903 1403.09,687.903 1403.65,687.903 1404.21,687.903 1404.77,687.903 1405.33,687.903 1405.89,687.903 1406.45,687.903 1407.01,687.903 1407.57,687.903 1408.13,687.903 1408.68,687.903 1409.24,687.903 1409.8,687.903 1410.36,687.903 1410.92,687.903 1411.48,687.903 1412.04,687.903 1412.6,687.903 1413.16,687.903 1413.72,687.903 1414.28,687.903 1414.84,687.903 1415.4,687.903 1415.95,687.903 1416.51,687.903 1417.07,687.903 1417.63,687.903 1418.19,687.903 1418.75,687.903 1419.31,687.903 1419.87,687.903 1420.43,687.903 1420.99,687.903 1421.55,687.903 1422.11,687.903 1422.67,687.903 1423.23,687.903 1423.78,687.903 1424.34,687.903 1424.9,687.903 1425.46,687.903 1426.02,687.903 1426.58,687.903 1427.14,687.903 1427.7,687.903 1428.26,687.903 1428.82,687.903 1429.38,687.903 1429.94,687.903 1430.5,687.903 1431.05,687.903 1431.61,687.903 1432.17,687.903 1432.73,687.903 1433.29,687.903 1433.85,687.903 1434.41,687.903 1434.97,687.903 1435.53,687.903 1436.09,687.903 1436.65,687.903 1437.21,687.903 1437.77,687.903 1438.33,687.903 1438.88,687.903 1439.44,687.903 1440,687.903 1440.56,687.903 1441.12,687.903 1441.68,687.903 1442.24,687.903 1442.8,687.903 1443.36,687.903 1443.92,687.903 1444.48,687.903 1445.04,687.903 1445.6,687.903 1446.15,687.903 1446.71,687.903 1447.27,687.903 1447.83,687.903 1448.39,687.903 1448.95,687.903 1449.51,687.903 1450.07,687.903 1450.63,687.903 1451.19,687.903 1451.75,687.903 1452.31,687.903 1452.87,687.903 1453.42,687.903 1453.98,687.903 1454.54,687.903 1455.1,687.903 1455.66,687.903 1456.22,687.903 1456.78,687.903 1457.34,687.903 1457.9,687.903 1458.46,687.903 1459.02,687.903 1459.58,687.903 1460.14,687.903 1460.7,687.903 1461.25,687.903 1461.81,687.903 1462.37,687.903 1462.93,687.903 1463.49,687.903 1464.05,687.903 1464.61,687.903 1465.17,687.903 1465.73,687.903 1466.29,687.903 1466.85,687.903 1467.41,687.903 1467.97,687.903 1468.52,687.903 1469.08,687.903 1469.64,687.903 1470.2,687.903 1470.76,687.903 1471.32,687.903 1471.88,687.903 1472.44,687.903 1473,687.903 1473.56,687.903 1474.12,687.903 1474.68,687.903 1475.24,687.903 1475.79,687.903 1476.35,687.903 1476.91,687.903 1477.47,687.903 1478.03,687.903 1478.59,687.903 1479.15,687.903 1479.71,687.903 1480.27,687.903 1480.83,687.903 1481.39,687.903 1481.95,687.903 1482.51,687.903 1483.07,687.903 1483.62,687.903 1484.18,687.903 1484.74,687.903 1485.3,687.903 1485.86,687.903 1486.42,687.903 1486.98,687.903 1487.54,687.903 1488.1,687.903 1488.66,687.903 1489.22,687.903 1489.78,687.903 1490.34,687.903 1490.89,687.903 1491.45,687.903 1492.01,687.903 1492.57,687.903 1493.13,687.903 1493.69,687.903 1494.25,687.903 1494.81,687.903 1495.37,687.903 1495.93,687.903 1496.49,687.903 1497.05,687.903 1497.61,687.903 1498.16,687.903 1498.72,687.903 1499.28,687.903 1499.84,687.903 1500.4,687.903 1500.96,687.903 1501.52,687.903 1502.08,687.903 1502.64,687.903 1503.2,687.903 1503.76,687.903 1504.32,687.903 1504.88,687.903 1505.44,687.903 1505.99,687.903 1506.55,687.903 1507.11,687.903 1507.67,687.903 1508.23,687.903 1508.79,687.903 1509.35,687.903 1509.91,687.903 1510.47,687.903 1511.03,687.903 1511.59,687.903 1512.15,687.903 1512.71,687.903 1513.26,687.903 1513.82,687.903 1514.38,687.903 1514.94,687.903 1515.5,687.903 1516.06,687.903 1516.62,687.903 1517.18,687.903 1517.74,687.903 1518.3,687.903 1518.86,687.903 1519.42,687.903 1519.98,687.903 1520.53,687.903 1521.09,687.903 1521.65,687.903 1522.21,687.903 1522.77,687.903 1523.33,687.903 1523.89,687.903 1524.45,687.903 1525.01,687.903 1525.57,687.903 1526.13,687.903 1526.69,687.903 1527.25,687.903 1527.81,687.903 1528.36,687.903 1528.92,687.903 1529.48,687.903 1530.04,687.903 1530.6,687.903 1531.16,687.903 1531.72,687.903 1532.28,687.903 1532.84,687.903 1533.4,687.903 1533.96,687.903 1534.52,687.903 1535.08,687.903 1535.63,687.903 1536.19,687.903 1536.75,687.903 1537.31,687.903 1537.87,687.903 1538.43,687.903 1538.99,687.903 1539.55,687.903 1540.11,687.903 1540.67,687.903 1541.23,687.903 1541.79,687.903 1542.35,687.903 1542.9,687.903 1543.46,687.903 1544.02,687.903 1544.58,687.903 1545.14,687.903 1545.7,687.903 1546.26,687.903 1546.82,687.903 1547.38,687.903 1547.94,687.903 1548.5,687.903 1549.06,687.903 1549.62,687.903 1550.18,687.903 1550.73,687.903 1551.29,687.903 1551.85,687.903 1552.41,687.903 1552.97,687.903 1553.53,687.903 1554.09,687.903 1554.65,687.903 1555.21,687.903 1555.77,687.903 1556.33,687.903 1556.89,687.903 1557.45,687.903 1558,687.903 1558.56,687.903 1559.12,687.903 1559.68,687.903 1560.24,687.903 1560.8,687.903 1561.36,687.903 1561.92,687.903 1562.48,687.903 1563.04,687.903 1563.6,687.903 1564.16,687.903 1564.72,687.903 1565.28,687.903 1565.83,687.903 1566.39,687.903 1566.95,687.903 1567.51,687.903 1568.07,687.903 1568.63,687.903 1569.19,687.903 1569.75,687.903 1570.31,687.903 1570.87,687.903 1571.43,687.903 1571.99,687.903 1572.55,687.903 1573.1,687.903 1573.66,687.903 1574.22,687.903 1574.78,687.903 1575.34,687.903 1575.9,687.903 1576.46,687.903 1577.02,687.903 1577.58,687.903 1578.14,687.903 1578.7,687.903 1579.26,687.903 1579.82,687.903 1580.37,687.903 1580.93,687.903 1581.49,687.903 1582.05,687.903 1582.61,687.903 1583.17,687.903 1583.73,687.903 1584.29,687.903 1584.85,687.903 1585.41,687.903 1585.97,687.903 1586.53,687.903 1587.09,687.903 1587.65,687.903 1588.2,687.903 1588.76,687.903 1589.32,687.903 1589.88,687.903 1590.44,687.903 1591,687.903 1591.56,687.903 1592.12,687.903 1592.68,687.903 1593.24,687.903 1593.8,687.903 1594.36,687.903 1594.92,687.903 1595.47,687.903 1596.03,687.903 1596.59,687.903 1597.15,687.903 1597.71,687.903 1598.27,687.903 1598.83,687.903 1599.39,687.903 1599.95,687.903 1600.51,687.903 1601.07,687.903 1601.63,687.903 1602.19,687.903 1602.74,687.903 1603.3,687.903 1603.86,687.903 1604.42,687.903 1604.98,687.903 1605.54,687.903 1606.1,687.903 1606.66,687.903 1607.22,687.903 1607.78,687.903 1608.34,687.903 1608.9,687.903 1609.46,687.903 1610.02,687.903 1610.57,687.903 1611.13,687.903 1611.69,687.903 1612.25,687.903 1612.81,687.903 1613.37,687.903 1613.93,687.903 1614.49,687.903 1615.05,687.903 1615.61,687.903 1616.17,687.903 1616.73,687.903 1617.29,687.903 1617.84,687.903 1618.4,687.903 1618.96,687.903 1619.52,687.903 1620.08,687.903 1620.64,687.903 1621.2,687.903 1621.76,687.903 1622.32,687.903 1622.88,687.903 1623.44,687.903 1624,687.903 1624.56,687.903 1625.11,687.903 1625.67,687.903 1626.23,687.903 1626.79,687.903 1627.35,687.903 1627.91,687.903 1628.47,687.903 1629.03,687.903 1629.59,687.903 1630.15,687.903 1630.71,687.903 1631.27,687.903 1631.83,687.903 1632.39,687.903 1632.94,687.903 1633.5,687.903 1634.06,687.903 1634.62,687.903 1635.18,687.903 1635.74,687.903 1636.3,687.903 1636.86,687.903 1637.42,687.903 1637.98,687.903 1638.54,687.903 1639.1,687.903 1639.66,687.903 1640.21,687.903 1640.77,687.903 1641.33,687.903 1641.89,687.903 1642.45,687.903 1643.01,687.903 1643.57,687.903 1644.13,687.903 1644.69,687.903 1645.25,687.903 1645.81,687.903 1646.37,687.903 1646.93,687.903 1647.48,687.903 1648.04,687.903 1648.6,687.903 1649.16,687.903 1649.72,687.903 1650.28,687.903 1650.84,687.903 1651.4,687.903 1651.96,687.903 1652.52,687.903 1653.08,687.903 1653.64,687.903 1654.2,687.903 1654.76,687.903 1655.31,687.903 1655.87,687.903 1656.43,687.903 1656.99,687.903 1657.55,687.903 1658.11,687.903 1658.67,687.903 1659.23,687.903 1659.79,687.903 1660.35,687.903 1660.91,687.903 1661.47,687.903 1662.03,687.903 1662.58,687.903 1663.14,687.903 1663.7,687.903 1664.26,687.903 1664.82,687.903 1665.38,687.903 1665.94,687.903 1666.5,687.903 1667.06,687.903 1667.62,687.903 1668.18,687.903 1668.74,687.903 1669.3,687.903 1669.85,687.903 1670.41,687.903 1670.97,687.903 1671.53,687.903 1672.09,687.903 1672.65,687.903 1673.21,687.903 1673.77,687.903 1674.33,687.903 1674.89,687.903 1675.45,687.903 1676.01,687.903 1676.57,687.903 1677.13,687.903 1677.68,687.903 1678.24,687.903 1678.8,687.903 1679.36,687.903 1679.92,687.903 1680.48,687.903 1681.04,687.903 1681.6,687.903 1682.16,687.903 1682.72,687.903 1683.28,687.903 1683.84,687.903 1684.4,687.903 1684.95,687.903 1685.51,687.903 1686.07,687.903 1686.63,687.903 1687.19,687.903 1687.75,687.903 1688.31,687.903 1688.87,687.903 1689.43,687.903 1689.99,687.903 1690.55,687.903 1691.11,687.903 1691.67,687.903 1692.23,687.903 1692.78,687.903 1693.34,687.903 1693.9,687.903 1694.46,687.903 1695.02,687.903 1695.58,687.903 1696.14,687.903 1696.7,687.903 1697.26,687.903 1697.82,687.903 1698.38,687.903 1698.94,687.903 1699.5,687.903 1700.05,687.903 1700.61,687.903 1701.17,687.903 1701.73,687.903 1702.29,687.903 1702.85,687.903 1703.41,687.903 1703.97,687.903 1704.53,687.903 1705.09,687.903 1705.65,687.903 1706.21,687.903 1706.77,687.903 1707.32,687.903 1707.88,687.903 1708.44,687.903 1709,687.903 1709.56,687.903 1710.12,687.903 1710.68,687.903 1711.24,687.903 1711.8,687.903 1712.36,687.903 1712.92,687.903 1713.48,687.903 1714.04,687.903 1714.6,687.903 1715.15,687.903 1715.71,687.903 1716.27,687.903 1716.83,687.903 1717.39,687.903 1717.95,687.903 1718.51,687.903 1719.07,687.903 1719.63,687.903 1720.19,687.903 1720.75,687.903 1721.31,687.903 1721.87,687.903 1722.42,687.903 1722.98,687.903 1723.54,687.903 1724.1,687.903 1724.66,687.903 1725.22,687.903 1725.78,687.903 1726.34,687.903 1726.9,687.903 1727.46,687.903 1728.02,687.903 1728.58,687.903 1729.14,687.903 1729.69,687.903 1730.25,687.903 1730.81,687.903 1731.37,687.903 1731.93,687.903 1732.49,687.903 1733.05,687.903 1733.61,687.903 1734.17,687.903 1734.73,687.903 1735.29,687.903 1735.85,687.903 1736.41,687.903 1736.97,687.903 1737.52,687.903 1738.08,687.903 1738.64,687.903 1739.2,687.903 1739.76,687.903 1740.32,687.903 1740.88,687.903 1741.44,687.903 1742,687.903 1742.56,687.903 1743.12,687.903 1743.68,687.903 1744.24,687.903 1744.79,687.903 1745.35,687.903 1745.91,687.903 1746.47,687.903 1747.03,687.903 1747.59,687.903 1748.15,687.903 1748.71,687.903 1749.27,687.903 1749.83,687.903 1750.39,687.903 1750.95,687.903 1751.51,687.903 1752.06,687.903 1752.62,687.903 1753.18,687.903 1753.74,687.903 1754.3,687.903 1754.86,687.903 1755.42,687.903 1755.98,687.903 1756.54,687.903 1757.1,687.903 1757.66,687.903 1758.22,687.903 1758.78,687.903 1759.34,687.903 1759.89,687.903 1760.45,687.903 1761.01,687.903 1761.57,687.903 1762.13,687.903 1762.69,687.903 1763.25,687.903 1763.81,687.903 1764.37,687.903 1764.93,687.903 1765.49,687.903 1766.05,687.903 1766.61,687.903 1767.16,687.903 1767.72,687.903 1768.28,687.903 1768.84,687.903 1769.4,687.903 1769.96,687.903 1770.52,687.903 1771.08,687.903 1771.64,687.903 1772.2,687.903 1772.76,687.903 1773.32,687.903 1773.88,687.903 1774.43,687.903 1774.99,687.903 1775.55,687.903 1776.11,687.903 1776.67,687.903 1777.23,687.903 1777.79,687.903 1778.35,687.903 1778.91,687.903 1779.47,687.903 1780.03,687.903 1780.59,687.903 1781.15,687.903 1781.71,687.903 1782.26,687.903 1782.82,687.903 1783.38,687.903 1783.94,687.903 1784.5,687.903 1785.06,687.903 1785.62,687.903 1786.18,687.903 1786.74,687.903 1787.3,687.903 1787.86,687.903 1788.42,687.903 1788.98,687.903 1789.53,687.903 1790.09,687.903 1790.65,687.903 1791.21,687.903 1791.77,687.903 1792.33,687.903 1792.89,687.903 1793.45,687.903 1794.01,687.903 1794.57,687.903 1795.13,687.903 1795.69,687.903 1796.25,687.903 1796.8,687.903 1797.36,687.903 1797.92,687.903 1798.48,687.903 1799.04,687.903 1799.6,687.903 1800.16,687.903 1800.72,687.903 1801.28,687.903 1801.84,687.903 1802.4,687.903 1802.96,687.903 1803.52,687.903 1804.08,687.903 1804.63,687.903 1805.19,687.903 1805.75,687.903 1806.31,687.903 1806.87,687.903 1807.43,687.903 1807.99,687.903 1808.55,687.903 1809.11,687.903 1809.67,687.903 1810.23,687.903 1810.79,687.903 1811.35,687.903 1811.9,687.903 1812.46,687.903 1813.02,687.903 1813.58,687.903 1814.14,687.903 1814.7,687.903 1815.26,687.903 1815.82,687.903 1816.38,687.903 1816.94,687.903 1817.5,687.903 1818.06,687.903 1818.62,687.903 1819.18,687.903 1819.73,687.903 1820.29,687.903 1820.85,687.903 1821.41,687.903 1821.97,687.903 1822.53,687.903 1823.09,687.903 1823.65,687.903 1824.21,687.903 1824.77,687.903 1825.33,687.903 1825.89,687.903 1826.45,687.903 1827,687.903 1827.56,687.903 1828.12,687.903 1828.68,687.903 1829.24,687.903 1829.8,687.903 1830.36,687.903 1830.92,687.903 1831.48,687.903 1832.04,687.903 1832.6,687.903 1833.16,687.903 1833.72,687.903 1834.27,687.903 1834.83,687.903 1835.39,687.903 1835.95,687.903 1836.51,687.903 1837.07,687.903 1837.63,687.903 1838.19,687.903 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 685.116 L720.806 685.116 L721.365 685.116 L721.924 685.116 L722.484 685.116 L723.043 685.116 L723.602 685.116 L724.161 685.116 L724.721 685.116 L725.28 685.116 L725.839 685.116 L726.398 685.116 L726.958 685.116 L727.517 685.116 L728.076 685.116 L728.635 685.116 L729.195 685.116 L729.754 685.116 L730.313 685.116 L730.872 685.116 L731.432 685.116 L731.991 685.116 L732.55 685.116 L733.109 685.116 L733.669 685.116 L734.228 685.116 L734.787 685.116 L735.346 685.116 L735.906 685.116 L736.465 685.116 L737.024 685.116 L737.583 685.116 L738.143 685.116 L738.702 685.116 L739.261 685.116 L739.82 685.116 L740.38 685.116 L740.939 685.116 L741.498 685.116 L742.057 685.116 L742.617 685.116 L743.176 685.116 L743.735 685.116 L744.294 685.116 L744.854 685.116 L745.413 685.116 L745.972 685.116 L746.531 685.116 L747.091 685.116 L747.65 685.116 L748.209 685.116 L748.768 685.116 L749.328 685.116 L749.887 685.116 L750.446 685.116 L751.005 685.116 L751.565 685.116 L752.124 685.116 L752.683 685.116 L753.242 685.116 L753.802 685.116 L754.361 685.116 L754.92 685.116 L755.479 685.116 L756.039 685.116 L756.598 685.116 L757.157 685.116 L757.716 685.116 L758.276 685.116 L758.835 685.116 L759.394 685.116 L759.953 685.116 L760.513 685.116 L761.072 685.116 L761.631 685.116 L762.19 685.116 L762.75 685.116 L763.309 685.116 L763.868 685.116 L764.427 685.116 L764.987 685.116 L765.546 685.116 L766.105 685.116 L766.664 685.116 L767.224 685.116 L767.783 685.116 L768.342 685.116 L768.901 685.116 L769.461 685.116 L770.02 685.116 L770.579 685.116 L771.138 685.116 L771.698 685.116 L772.257 685.116 L772.816 685.116 L773.375 685.116 L773.935 685.116 L774.494 685.116 L775.053 685.116 L775.612 685.116 L776.172 685.116 L776.731 685.116 L777.29 685.116 L777.849 685.116 L778.409 685.116 L778.968 685.116 L779.527 685.116 L780.086 685.116 L780.646 685.116 L781.205 685.116 L781.764 685.116 L782.323 685.116 L782.883 685.116 L783.442 685.116 L784.001 685.116 L784.56 685.116 L785.12 685.116 L785.679 685.116 L786.238 685.116 L786.797 685.116 L787.357 685.116 L787.916 685.116 L788.475 685.116 L789.034 685.116 L789.594 685.116 L790.153 685.116 L790.712 685.116 L791.271 685.116 L791.831 685.116 L792.39 685.116 L792.949 685.116 L793.508 685.116 L794.068 685.116 L794.627 685.116 L795.186 685.116 L795.745 685.116 L796.305 685.116 L796.864 685.116 L797.423 685.116 L797.982 685.116 L798.542 685.116 L799.101 685.116 L799.66 685.116 L800.219 685.116 L800.779 685.116 L801.338 685.116 L801.897 685.116 L802.456 685.116 L803.016 685.116 L803.575 685.116 L804.134 685.116 L804.693 685.116 L805.253 685.116 L805.812 685.116 L806.371 685.116 L806.931 685.116 L807.49 685.116 L808.049 685.116 L808.608 685.116 L809.168 685.116 L809.727 685.116 L810.286 685.116 L810.845 685.116 L811.405 685.116 L811.964 685.116 L812.523 685.116 L813.082 685.116 L813.642 685.116 L814.201 685.116 L814.76 685.116 L815.319 685.116 L815.879 685.116 L816.438 685.116 L816.997 685.116 L817.556 685.116 L818.116 685.116 L818.675 685.116 L819.234 685.116 L819.793 685.116 L820.353 685.116 L820.912 685.116 L821.471 685.116 L822.03 685.116 L822.59 685.116 L823.149 685.116 L823.708 685.116 L824.267 685.116 L824.827 685.116 L825.386 685.116 L825.945 685.116 L826.504 685.116 L827.064 685.116 L827.623 685.116 L828.182 685.116 L828.741 685.116 L829.301 685.116 L829.86 685.116 L830.419 685.116 L830.978 685.116 L831.538 685.116 L832.097 685.116 L832.656 685.116 L833.215 685.116 L833.775 685.116 L834.334 685.116 L834.893 685.116 L835.452 685.116 L836.012 685.116 L836.571 685.116 L837.13 685.116 L837.689 685.116 L838.249 685.116 L838.808 685.116 L839.367 685.116 L839.926 685.116 L840.486 685.116 L841.045 685.116 L841.604 685.116 L842.163 685.116 L842.723 685.116 L843.282 685.116 L843.841 685.116 L844.4 685.116 L844.96 685.116 L845.519 685.116 L846.078 685.116 L846.637 685.116 L847.197 685.116 L847.756 685.116 L848.315 685.116 L848.874 685.116 L849.434 685.116 L849.993 685.116 L850.552 685.116 L851.111 685.116 L851.671 685.116 L852.23 685.116 L852.789 685.116 L853.348 685.116 L853.908 685.116 L854.467 685.116 L855.026 685.116 L855.585 685.116 L856.145 685.116 L856.704 685.116 L857.263 685.116 L857.822 685.116 L858.382 685.116 L858.941 685.116 L859.5 685.116 L860.059 685.116 L860.619 685.116 L861.178 685.116 L861.737 685.116 L862.296 685.116 L862.856 685.116 L863.415 685.116 L863.974 685.116 L864.533 685.116 L865.093 685.116 L865.652 685.116 L866.211 685.116 L866.77 685.116 L867.33 685.116 L867.889 685.116 L868.448 685.116 L869.007 685.116 L869.567 685.116 L870.126 685.116 L870.685 685.116 L871.244 685.116 L871.804 685.116 L872.363 685.116 L872.922 685.116 L873.481 685.116 L874.041 685.116 L874.6 685.116 L875.159 685.116 L875.718 685.116 L876.278 685.116 L876.837 685.116 L877.396 685.116 L877.955 685.116 L878.515 685.116 L879.074 685.116 L879.633 685.116 L880.192 685.116 L880.752 685.116 L881.311 685.116 L881.87 685.116 L882.429 685.116 L882.989 685.116 L883.548 685.116 L884.107 685.116 L884.666 685.116 L885.226 685.116 L885.785 685.116 L886.344 685.116 L886.903 685.116 L887.463 685.116 L888.022 685.116 L888.581 685.116 L889.14 685.116 L889.7 685.116 L890.259 685.116 L890.818 685.116 L891.377 685.116 L891.937 685.116 L892.496 685.116 L893.055 685.116 L893.614 685.116 L894.174 685.116 L894.733 685.116 L895.292 685.116 L895.851 685.116 L896.411 685.116 L896.97 685.116 L897.529 685.116 L898.088 685.116 L898.648 685.116 L899.207 685.116 L899.766 685.116 L900.325 685.116 L900.885 685.116 L901.444 685.116 L902.003 685.116 L902.562 685.116 L903.122 685.116 L903.681 685.116 L904.24 685.116 L904.799 685.116 L905.359 685.116 L905.918 685.116 L906.477 685.116 L907.036 685.116 L907.596 685.116 L908.155 685.116 L908.714 685.116 L909.273 685.116 L909.833 685.116 L910.392 685.116 L910.951 685.116 L911.51 685.116 L912.07 685.116 L912.629 685.116 L913.188 685.116 L913.747 685.116 L914.307 685.116 L914.866 685.116 L915.425 685.116 L915.984 685.116 L916.544 685.116 L917.103 685.116 L917.662 685.116 L918.221 685.116 L918.781 685.116 L919.34 685.116 L919.899 685.116 L920.458 685.116 L921.018 685.116 L921.577 685.116 L922.136 685.116 L922.695 685.116 L923.255 685.116 L923.814 685.116 L924.373 685.116 L924.932 685.116 L925.492 685.116 L926.051 685.116 L926.61 685.116 L927.169 685.116 L927.729 685.116 L928.288 685.116 L928.847 685.116 L929.406 685.116 L929.966 685.116 L930.525 685.116 L931.084 685.116 L931.644 685.116 L932.203 685.116 L932.762 685.116 L933.321 685.116 L933.881 685.116 L934.44 685.116 L934.999 685.116 L935.558 685.116 L936.118 685.116 L936.677 685.116 L937.236 685.116 L937.795 685.116 L938.355 685.116 L938.914 685.116 L939.473 685.116 L940.032 685.116 L940.592 685.116 L941.151 685.116 L941.71 685.116 L942.269 685.116 L942.829 685.116 L943.388 685.116 L943.947 685.116 L944.506 685.116 L945.066 685.116 L945.625 685.116 L946.184 685.116 L946.743 685.116 L947.303 685.116 L947.862 685.116 L948.421 685.116 L948.98 685.116 L949.54 685.116 L950.099 685.116 L950.658 685.116 L951.217 685.116 L951.777 685.116 L952.336 685.116 L952.895 685.116 L953.454 685.116 L954.014 685.116 L954.573 685.116 L955.132 685.116 L955.691 685.116 L956.251 685.116 L956.81 685.116 L957.369 685.116 L957.928 685.116 L958.488 685.116 L959.047 685.116 L959.606 685.116 L960.165 685.116 L960.725 685.116 L961.284 685.116 L961.843 685.116 L962.402 685.116 L962.962 685.116 L963.521 685.116 L964.08 685.116 L964.639 685.116 L965.199 685.116 L965.758 685.116 L966.317 685.116 L966.876 685.116 L967.436 685.116 L967.995 685.116 L968.554 685.116 L969.113 685.116 L969.673 685.116 L970.232 685.116 L970.791 685.116 L971.35 685.116 L971.91 685.116 L972.469 685.116 L973.028 685.116 L973.587 685.116 L974.147 685.116 L974.706 685.116 L975.265 685.116 L975.824 685.116 L976.384 685.116 L976.943 685.116 L977.502 685.116 L978.061 685.116 L978.621 685.116 L979.18 685.116 L979.739 685.116 L980.298 685.116 L980.858 685.116 L981.417 685.116 L981.976 685.116 L982.535 685.116 L983.095 685.116 L983.654 685.116 L984.213 685.116 L984.772 685.116 L985.332 685.116 L985.891 685.116 L986.45 685.116 L987.009 685.116 L987.569 685.116 L988.128 685.116 L988.687 685.116 L989.246 685.116 L989.806 685.116 L990.365 685.116 L990.924 685.116 L991.483 685.116 L992.043 685.116 L992.602 685.116 L993.161 685.116 L993.72 685.116 L994.28 685.116 L994.839 685.116 L995.398 685.116 L995.957 685.116 L996.517 685.116 L997.076 685.116 L997.635 685.116 L998.194 685.116 L998.754 685.116 L999.313 685.116 L999.872 685.116 L1000.43 685.116 L1000.99 685.116 L1001.55 685.116 L1002.11 685.116 L1002.67 685.116 L1003.23 685.116 L1003.79 685.116 L1004.35 685.116 L1004.91 685.116 L1005.46 685.116 L1006.02 685.116 L1006.58 685.116 L1007.14 685.116 L1007.7 685.116 L1008.26 685.116 L1008.82 685.116 L1009.38 685.116 L1009.94 685.116 L1010.5 685.116 L1011.06 685.116 L1011.62 685.116 L1012.18 685.116 L1012.73 685.116 L1013.29 685.116 L1013.85 685.116 L1014.41 685.116 L1014.97 685.116 L1015.53 685.116 L1016.09 685.116 L1016.65 685.116 L1017.21 685.116 L1017.77 685.116 L1018.33 685.116 L1018.89 685.116 L1019.45 685.116 L1020.01 685.116 L1020.56 685.116 L1021.12 685.116 L1021.68 685.116 L1022.24 685.116 L1022.8 685.116 L1023.36 685.116 L1023.92 685.116 L1024.48 685.116 L1025.04 685.116 L1025.6 685.116 L1026.16 685.116 L1026.72 685.116 L1027.28 685.116 L1027.83 685.116 L1028.39 685.116 L1028.95 685.116 L1029.51 685.116 L1030.07 685.116 L1030.63 685.116 L1031.19 685.116 L1031.75 685.116 L1032.31 685.116 L1032.87 685.116 L1033.43 685.116 L1033.99 685.116 L1034.55 685.116 L1035.1 685.116 L1035.66 685.116 L1036.22 685.116 L1036.78 685.116 L1037.34 685.116 L1037.9 685.116 L1038.46 685.116 L1039.02 685.116 L1039.58 685.116 L1040.14 685.116 L1040.7 685.116 L1041.26 685.116 L1041.82 685.116 L1042.38 685.116 L1042.93 685.116 L1043.49 685.116 L1044.05 685.116 L1044.61 685.116 L1045.17 685.116 L1045.73 685.116 L1046.29 685.116 L1046.85 685.116 L1047.41 685.116 L1047.97 685.116 L1048.53 685.116 L1049.09 685.116 L1049.65 685.116 L1050.2 685.116 L1050.76 685.116 L1051.32 685.116 L1051.88 685.116 L1052.44 685.116 L1053 685.116 L1053.56 685.116 L1054.12 685.116 L1054.68 685.116 L1055.24 685.116 L1055.8 685.116 L1056.36 685.116 L1056.92 685.116 L1057.48 685.116 L1058.03 685.116 L1058.59 685.116 L1059.15 685.116 L1059.71 685.116 L1060.27 685.116 L1060.83 685.116 L1061.39 685.116 L1061.95 685.116 L1062.51 685.116 L1063.07 685.116 L1063.63 685.116 L1064.19 685.116 L1064.75 685.116 L1065.3 685.116 L1065.86 685.116 L1066.42 685.116 L1066.98 685.116 L1067.54 685.116 L1068.1 685.116 L1068.66 685.116 L1069.22 685.116 L1069.78 685.116 L1070.34 685.116 L1070.9 685.116 L1071.46 685.116 L1072.02 685.116 L1072.57 685.116 L1073.13 685.116 L1073.69 685.116 L1074.25 685.116 L1074.81 685.116 L1075.37 685.116 L1075.93 685.116 L1076.49 685.116 L1077.05 685.116 L1077.61 685.116 L1078.17 685.116 L1078.73 685.116 L1079.29 685.116 L1079.85 685.116 L1080.4 685.116 L1080.96 685.116 L1081.52 685.116 L1082.08 685.116 L1082.64 685.116 L1083.2 685.116 L1083.76 685.116 L1084.32 685.116 L1084.88 685.116 L1085.44 685.116 L1086 685.116 L1086.56 685.116 L1087.12 685.116 L1087.67 685.116 L1088.23 685.116 L1088.79 685.116 L1089.35 685.116 L1089.91 685.116 L1090.47 685.116 L1091.03 685.116 L1091.59 685.116 L1092.15 685.116 L1092.71 685.116 L1093.27 685.116 L1093.83 685.116 L1094.39 685.116 L1094.94 685.116 L1095.5 685.116 L1096.06 685.116 L1096.62 685.116 L1097.18 685.116 L1097.74 685.116 L1098.3 685.116 L1098.86 685.116 L1099.42 685.116 L1099.98 685.116 L1100.54 685.116 L1101.1 685.116 L1101.66 685.116 L1102.22 685.116 L1102.77 685.116 L1103.33 685.116 L1103.89 685.116 L1104.45 685.116 L1105.01 685.116 L1105.57 685.116 L1106.13 685.116 L1106.69 685.116 L1107.25 685.116 L1107.81 685.116 L1108.37 685.116 L1108.93 685.116 L1109.49 685.116 L1110.04 685.116 L1110.6 685.116 L1111.16 685.116 L1111.72 685.116 L1112.28 685.116 L1112.84 685.116 L1113.4 685.116 L1113.96 685.116 L1114.52 685.116 L1115.08 685.116 L1115.64 685.116 L1116.2 685.116 L1116.76 685.116 L1117.31 685.116 L1117.87 685.116 L1118.43 685.116 L1118.99 685.116 L1119.55 685.116 L1120.11 685.116 L1120.67 685.116 L1121.23 685.116 L1121.79 685.116 L1122.35 685.116 L1122.91 685.116 L1123.47 685.116 L1124.03 685.116 L1124.59 685.116 L1125.14 685.116 L1125.7 685.116 L1126.26 685.116 L1126.82 685.116 L1127.38 685.116 L1127.94 685.116 L1128.5 685.116 L1129.06 685.116 L1129.62 685.116 L1130.18 685.116 L1130.74 685.116 L1131.3 685.116 L1131.86 685.116 L1132.41 685.116 L1132.97 685.116 L1133.53 685.116 L1134.09 685.116 L1134.65 685.116 L1135.21 685.116 L1135.77 685.116 L1136.33 685.116 L1136.89 685.116 L1137.45 685.116 L1138.01 685.116 L1138.57 685.116 L1139.13 685.116 L1139.68 685.116 L1140.24 685.116 L1140.8 685.116 L1141.36 685.116 L1141.92 685.116 L1142.48 685.116 L1143.04 685.116 L1143.6 685.116 L1144.16 685.116 L1144.72 685.116 L1145.28 685.116 L1145.84 685.116 L1146.4 685.116 L1146.96 685.116 L1147.51 685.116 L1148.07 685.116 L1148.63 685.116 L1149.19 685.116 L1149.75 685.116 L1150.31 685.116 L1150.87 685.116 L1151.43 685.116 L1151.99 685.116 L1152.55 685.116 L1153.11 685.116 L1153.67 685.116 L1154.23 685.116 L1154.78 685.116 L1155.34 685.116 L1155.9 685.116 L1156.46 685.116 L1157.02 685.116 L1157.58 685.116 L1158.14 685.116 L1158.7 685.116 L1159.26 685.116 L1159.82 685.116 L1160.38 685.116 L1160.94 685.116 L1161.5 685.116 L1162.05 685.116 L1162.61 685.116 L1163.17 685.116 L1163.73 685.116 L1164.29 685.116 L1164.85 685.116 L1165.41 685.116 L1165.97 685.116 L1166.53 685.116 L1167.09 685.116 L1167.65 685.116 L1168.21 685.116 L1168.77 685.116 L1169.33 685.116 L1169.88 685.116 L1170.44 685.116 L1171 685.116 L1171.56 685.116 L1172.12 685.116 L1172.68 685.116 L1173.24 685.116 L1173.8 685.116 L1174.36 685.116 L1174.92 685.116 L1175.48 685.116 L1176.04 685.116 L1176.6 685.116 L1177.15 685.116 L1177.71 685.116 L1178.27 685.116 L1178.83 685.116 L1179.39 685.116 L1179.95 685.116 L1180.51 685.116 L1181.07 685.116 L1181.63 685.116 L1182.19 685.116 L1182.75 685.116 L1183.31 685.116 L1183.87 685.116 L1184.43 685.116 L1184.98 685.116 L1185.54 685.116 L1186.1 685.116 L1186.66 685.116 L1187.22 685.116 L1187.78 685.116 L1188.34 685.116 L1188.9 685.116 L1189.46 685.116 L1190.02 685.116 L1190.58 685.116 L1191.14 685.116 L1191.7 685.116 L1192.25 685.116 L1192.81 685.116 L1193.37 685.116 L1193.93 685.116 L1194.49 685.116 L1195.05 685.116 L1195.61 685.116 L1196.17 685.116 L1196.73 685.116 L1197.29 685.116 L1197.85 685.116 L1198.41 685.116 L1198.97 685.116 L1199.52 685.116 L1200.08 685.116 L1200.64 685.116 L1201.2 685.116 L1201.76 685.116 L1202.32 685.116 L1202.88 685.116 L1203.44 685.116 L1204 685.116 L1204.56 685.116 L1205.12 685.116 L1205.68 685.116 L1206.24 685.116 L1206.8 685.116 L1207.35 685.116 L1207.91 685.116 L1208.47 685.116 L1209.03 685.116 L1209.59 685.116 L1210.15 685.116 L1210.71 685.116 L1211.27 685.116 L1211.83 685.116 L1212.39 685.116 L1212.95 685.116 L1213.51 685.116 L1214.07 685.116 L1214.62 685.116 L1215.18 685.116 L1215.74 685.116 L1216.3 685.116 L1216.86 685.116 L1217.42 685.116 L1217.98 685.116 L1218.54 685.116 L1219.1 685.116 L1219.66 685.116 L1220.22 685.116 L1220.78 685.116 L1221.34 685.116 L1221.89 685.116 L1222.45 685.116 L1223.01 685.116 L1223.57 685.116 L1224.13 685.116 L1224.69 685.116 L1225.25 685.116 L1225.81 685.116 L1226.37 685.116 L1226.93 685.116 L1227.49 685.116 L1228.05 685.116 L1228.61 685.116 L1229.17 685.116 L1229.72 685.116 L1230.28 685.116 L1230.84 685.116 L1231.4 685.116 L1231.96 685.116 L1232.52 685.116 L1233.08 685.116 L1233.64 685.116 L1234.2 685.116 L1234.76 685.116 L1235.32 685.116 L1235.88 685.116 L1236.44 685.116 L1236.99 685.116 L1237.55 685.116 L1238.11 685.116 L1238.67 685.116 L1239.23 685.116 L1239.79 685.116 L1240.35 685.116 L1240.91 685.116 L1241.47 685.116 L1242.03 685.116 L1242.59 685.116 L1243.15 685.116 L1243.71 685.116 L1244.26 685.116 L1244.82 685.116 L1245.38 685.116 L1245.94 685.116 L1246.5 685.116 L1247.06 685.116 L1247.62 685.116 L1248.18 685.116 L1248.74 685.116 L1249.3 685.116 L1249.86 685.116 L1250.42 685.116 L1250.98 685.116 L1251.54 685.116 L1252.09 685.116 L1252.65 685.116 L1253.21 685.116 L1253.77 685.116 L1254.33 685.116 L1254.89 685.116 L1255.45 685.116 L1256.01 685.116 L1256.57 685.116 L1257.13 685.116 L1257.69 685.116 L1258.25 685.116 L1258.81 685.116 L1259.36 685.116 L1259.92 685.116 L1260.48 685.116 L1261.04 685.116 L1261.6 685.116 L1262.16 685.116 L1262.72 685.116 L1263.28 685.116 L1263.84 685.116 L1264.4 685.116 L1264.96 685.116 L1265.52 685.116 L1266.08 685.116 L1266.63 685.116 L1267.19 685.116 L1267.75 685.116 L1268.31 685.116 L1268.87 685.116 L1269.43 685.116 L1269.99 685.116 L1270.55 685.116 L1271.11 685.116 L1271.67 685.116 L1272.23 685.116 L1272.79 685.116 L1273.35 685.116 L1273.91 685.116 L1274.46 685.116 L1275.02 685.116 L1275.58 685.116 L1276.14 685.116 L1276.7 685.116 L1277.26 685.116 L1277.82 685.116 L1278.38 685.116 L1278.94 685.116 L1279.5 685.116 L1280.06 685.116 L1280.62 685.116 L1281.18 685.116 L1281.73 685.116 L1282.29 685.116 L1282.85 685.116 L1283.41 685.116 L1283.97 685.116 L1284.53 685.116 L1285.09 685.116 L1285.65 685.116 L1286.21 685.116 L1286.77 685.116 L1287.33 685.116 L1287.89 685.116 L1288.45 685.116 L1289 685.116 L1289.56 685.116 L1290.12 685.116 L1290.68 685.116 L1291.24 685.116 L1291.8 685.116 L1292.36 685.116 L1292.92 685.116 L1293.48 685.116 L1294.04 685.116 L1294.6 685.116 L1295.16 685.116 L1295.72 685.116 L1296.28 685.116 L1296.83 685.116 L1297.39 685.116 L1297.95 685.116 L1298.51 685.116 L1299.07 685.116 L1299.63 685.116 L1300.19 685.116 L1300.75 685.116 L1301.31 685.116 L1301.87 685.116 L1302.43 685.116 L1302.99 685.116 L1303.55 685.116 L1304.1 685.116 L1304.66 685.116 L1305.22 685.116 L1305.78 685.116 L1306.34 685.116 L1306.9 685.116 L1307.46 685.116 L1308.02 685.116 L1308.58 685.116 L1309.14 685.116 L1309.7 685.116 L1310.26 685.116 L1310.82 685.116 L1311.38 685.116 L1311.93 685.116 L1312.49 685.116 L1313.05 685.116 L1313.61 685.116 L1314.17 685.116 L1314.73 685.116 L1315.29 685.116 L1315.85 685.116 L1316.41 685.116 L1316.97 685.116 L1317.53 685.116 L1318.09 685.116 L1318.65 685.116 L1319.2 685.116 L1319.76 685.116 L1320.32 685.116 L1320.88 685.116 L1321.44 685.116 L1322 685.116 L1322.56 685.116 L1323.12 685.116 L1323.68 685.116 L1324.24 685.116 L1324.8 685.116 L1325.36 685.116 L1325.92 685.116 L1326.47 685.116 L1327.03 685.116 L1327.59 685.116 L1328.15 685.116 L1328.71 685.116 L1329.27 685.116 L1329.83 685.116 L1330.39 685.116 L1330.95 685.116 L1331.51 685.116 L1332.07 685.116 L1332.63 685.116 L1333.19 685.116 L1333.75 685.116 L1334.3 685.116 L1334.86 685.116 L1335.42 685.116 L1335.98 685.116 L1336.54 685.116 L1337.1 685.116 L1337.66 685.116 L1338.22 685.116 L1338.78 685.116 L1339.34 685.116 L1339.9 685.116 L1340.46 685.116 L1341.02 685.116 L1341.57 685.116 L1342.13 685.116 L1342.69 685.116 L1343.25 685.116 L1343.81 685.116 L1344.37 685.116 L1344.93 685.116 L1345.49 685.116 L1346.05 685.116 L1346.61 685.116 L1347.17 685.116 L1347.73 685.116 L1348.29 685.116 L1348.84 685.116 L1349.4 685.116 L1349.96 685.116 L1350.52 685.116 L1351.08 685.116 L1351.64 685.116 L1352.2 685.116 L1352.76 685.116 L1353.32 685.116 L1353.88 685.116 L1354.44 685.116 L1355 685.116 L1355.56 685.116 L1356.12 685.116 L1356.67 685.116 L1357.23 685.116 L1357.79 685.116 L1358.35 685.116 L1358.91 685.116 L1359.47 685.116 L1360.03 685.116 L1360.59 685.116 L1361.15 685.116 L1361.71 685.116 L1362.27 685.116 L1362.83 685.116 L1363.39 685.116 L1363.94 685.116 L1364.5 685.116 L1365.06 685.116 L1365.62 685.116 L1366.18 685.116 L1366.74 685.116 L1367.3 685.116 L1367.86 685.116 L1368.42 685.116 L1368.98 685.116 L1369.54 685.116 L1370.1 685.116 L1370.66 685.116 L1371.21 685.116 L1371.77 685.116 L1372.33 685.116 L1372.89 685.116 L1373.45 685.116 L1374.01 685.116 L1374.57 685.116 L1375.13 685.116 L1375.69 685.116 L1376.25 685.116 L1376.81 685.116 L1377.37 685.116 L1377.93 685.116 L1378.49 685.116 L1379.04 685.116 L1379.6 685.116 L1380.16 685.116 L1380.72 685.116 L1381.28 685.116 L1381.84 685.116 L1382.4 685.116 L1382.96 685.116 L1383.52 685.116 L1384.08 685.116 L1384.64 685.116 L1385.2 685.116 L1385.76 685.116 L1386.31 685.116 L1386.87 685.116 L1387.43 685.116 L1387.99 685.116 L1388.55 685.116 L1389.11 685.116 L1389.67 685.116 L1390.23 685.116 L1390.79 685.116 L1391.35 685.116 L1391.91 685.116 L1392.47 685.116 L1393.03 685.116 L1393.58 685.116 L1394.14 685.116 L1394.7 685.116 L1395.26 685.116 L1395.82 685.116 L1396.38 685.116 L1396.94 685.116 L1397.5 685.116 L1398.06 685.116 L1398.62 685.116 L1399.18 685.116 L1399.74 685.116 L1400.3 685.116 L1400.86 685.116 L1401.41 685.116 L1401.97 685.116 L1402.53 685.116 L1403.09 685.116 L1403.65 685.116 L1404.21 685.116 L1404.77 685.116 L1405.33 685.116 L1405.89 685.116 L1406.45 685.116 L1407.01 685.116 L1407.57 685.116 L1408.13 685.116 L1408.68 685.116 L1409.24 685.116 L1409.8 685.116 L1410.36 685.116 L1410.92 685.116 L1411.48 685.116 L1412.04 685.116 L1412.6 685.116 L1413.16 685.116 L1413.72 685.116 L1414.28 685.116 L1414.84 685.116 L1415.4 685.116 L1415.95 685.116 L1416.51 685.116 L1417.07 685.116 L1417.63 685.116 L1418.19 685.116 L1418.75 685.116 L1419.31 685.116 L1419.87 685.116 L1420.43 685.116 L1420.99 685.116 L1421.55 685.116 L1422.11 685.116 L1422.67 685.116 L1423.23 685.116 L1423.78 685.116 L1424.34 685.116 L1424.9 685.116 L1425.46 685.116 L1426.02 685.116 L1426.58 685.116 L1427.14 685.116 L1427.7 685.116 L1428.26 685.116 L1428.82 685.116 L1429.38 685.116 L1429.94 685.116 L1430.5 685.116 L1431.05 685.116 L1431.61 685.116 L1432.17 685.116 L1432.73 685.116 L1433.29 685.116 L1433.85 685.116 L1434.41 685.116 L1434.97 685.116 L1435.53 685.116 L1436.09 685.116 L1436.65 685.116 L1437.21 685.116 L1437.77 685.116 L1438.33 685.116 L1438.88 685.116 L1439.44 685.116 L1440 685.116 L1440.56 685.116 L1441.12 685.116 L1441.68 685.116 L1442.24 685.116 L1442.8 685.116 L1443.36 685.116 L1443.92 685.116 L1444.48 685.116 L1445.04 685.116 L1445.6 685.116 L1446.15 685.116 L1446.71 685.116 L1447.27 685.116 L1447.83 685.116 L1448.39 685.116 L1448.95 685.116 L1449.51 685.116 L1450.07 685.116 L1450.63 685.116 L1451.19 685.116 L1451.75 685.116 L1452.31 685.116 L1452.87 685.116 L1453.42 685.116 L1453.98 685.116 L1454.54 685.116 L1455.1 685.116 L1455.66 685.116 L1456.22 685.116 L1456.78 685.116 L1457.34 685.116 L1457.9 685.116 L1458.46 685.116 L1459.02 685.116 L1459.58 685.116 L1460.14 685.116 L1460.7 685.116 L1461.25 685.116 L1461.81 685.116 L1462.37 685.116 L1462.93 685.116 L1463.49 685.116 L1464.05 685.116 L1464.61 685.116 L1465.17 685.116 L1465.73 685.116 L1466.29 685.116 L1466.85 685.116 L1467.41 685.116 L1467.97 685.116 L1468.52 685.116 L1469.08 685.116 L1469.64 685.116 L1470.2 685.116 L1470.76 685.116 L1471.32 685.116 L1471.88 685.116 L1472.44 685.116 L1473 685.116 L1473.56 685.116 L1474.12 685.116 L1474.68 685.116 L1475.24 685.116 L1475.79 685.116 L1476.35 685.116 L1476.91 685.116 L1477.47 685.116 L1478.03 685.116 L1478.59 685.116 L1479.15 685.116 L1479.71 685.116 L1480.27 685.116 L1480.83 685.116 L1481.39 685.116 L1481.95 685.116 L1482.51 685.116 L1483.07 685.116 L1483.62 685.116 L1484.18 685.116 L1484.74 685.116 L1485.3 685.116 L1485.86 685.116 L1486.42 685.116 L1486.98 685.116 L1487.54 685.116 L1488.1 685.116 L1488.66 685.116 L1489.22 685.116 L1489.78 685.116 L1490.34 685.116 L1490.89 685.116 L1491.45 685.116 L1492.01 685.116 L1492.57 685.116 L1493.13 685.116 L1493.69 685.116 L1494.25 685.116 L1494.81 685.116 L1495.37 685.116 L1495.93 685.116 L1496.49 685.116 L1497.05 685.116 L1497.61 685.116 L1498.16 685.116 L1498.72 685.116 L1499.28 685.116 L1499.84 685.116 L1500.4 685.116 L1500.96 685.116 L1501.52 685.116 L1502.08 685.116 L1502.64 685.116 L1503.2 685.116 L1503.76 685.116 L1504.32 685.116 L1504.88 685.116 L1505.44 685.116 L1505.99 685.116 L1506.55 685.116 L1507.11 685.116 L1507.67 685.116 L1508.23 685.116 L1508.79 685.116 L1509.35 685.116 L1509.91 685.116 L1510.47 685.116 L1511.03 685.116 L1511.59 685.116 L1512.15 685.116 L1512.71 685.116 L1513.26 685.116 L1513.82 685.116 L1514.38 685.116 L1514.94 685.116 L1515.5 685.116 L1516.06 685.116 L1516.62 685.116 L1517.18 685.116 L1517.74 685.116 L1518.3 685.116 L1518.86 685.116 L1519.42 685.116 L1519.98 685.116 L1520.53 685.116 L1521.09 685.116 L1521.65 685.116 L1522.21 685.116 L1522.77 685.116 L1523.33 685.116 L1523.89 685.116 L1524.45 685.116 L1525.01 685.116 L1525.57 685.116 L1526.13 685.116 L1526.69 685.116 L1527.25 685.116 L1527.81 685.116 L1528.36 685.116 L1528.92 685.116 L1529.48 685.116 L1530.04 685.116 L1530.6 685.116 L1531.16 685.116 L1531.72 685.116 L1532.28 685.116 L1532.84 685.116 L1533.4 685.116 L1533.96 685.116 L1534.52 685.116 L1535.08 685.116 L1535.63 685.116 L1536.19 685.116 L1536.75 685.116 L1537.31 685.116 L1537.87 685.116 L1538.43 685.116 L1538.99 685.116 L1539.55 685.116 L1540.11 685.116 L1540.67 685.116 L1541.23 685.116 L1541.79 685.116 L1542.35 685.116 L1542.9 685.116 L1543.46 685.116 L1544.02 685.116 L1544.58 685.116 L1545.14 685.116 L1545.7 685.116 L1546.26 685.116 L1546.82 685.116 L1547.38 685.116 L1547.94 685.116 L1548.5 685.116 L1549.06 685.116 L1549.62 685.116 L1550.18 685.116 L1550.73 685.116 L1551.29 685.116 L1551.85 685.116 L1552.41 685.116 L1552.97 685.116 L1553.53 685.116 L1554.09 685.116 L1554.65 685.116 L1555.21 685.116 L1555.77 685.116 L1556.33 685.116 L1556.89 685.116 L1557.45 685.116 L1558 685.116 L1558.56 685.116 L1559.12 685.116 L1559.68 685.116 L1560.24 685.116 L1560.8 685.116 L1561.36 685.116 L1561.92 685.116 L1562.48 685.116 L1563.04 685.116 L1563.6 685.116 L1564.16 685.116 L1564.72 685.116 L1565.28 685.116 L1565.83 685.116 L1566.39 685.116 L1566.95 685.116 L1567.51 685.116 L1568.07 685.116 L1568.63 685.116 L1569.19 685.116 L1569.75 685.116 L1570.31 685.116 L1570.87 685.116 L1571.43 685.116 L1571.99 685.116 L1572.55 685.116 L1573.1 685.116 L1573.66 685.116 L1574.22 685.116 L1574.78 685.116 L1575.34 685.116 L1575.9 685.116 L1576.46 685.116 L1577.02 685.116 L1577.58 685.116 L1578.14 685.116 L1578.7 685.116 L1579.26 685.116 L1579.82 685.116 L1580.37 685.116 L1580.93 685.116 L1581.49 685.116 L1582.05 685.116 L1582.61 685.116 L1583.17 685.116 L1583.73 685.116 L1584.29 685.116 L1584.85 685.116 L1585.41 685.116 L1585.97 685.116 L1586.53 685.116 L1587.09 685.116 L1587.65 685.116 L1588.2 685.116 L1588.76 685.116 L1589.32 685.116 L1589.88 685.116 L1590.44 685.116 L1591 685.116 L1591.56 685.116 L1592.12 685.116 L1592.68 685.116 L1593.24 685.116 L1593.8 685.116 L1594.36 685.116 L1594.92 685.116 L1595.47 685.116 L1596.03 685.116 L1596.59 685.116 L1597.15 685.116 L1597.71 685.116 L1598.27 685.116 L1598.83 685.116 L1599.39 685.116 L1599.95 685.116 L1600.51 685.116 L1601.07 685.116 L1601.63 685.116 L1602.19 685.116 L1602.74 685.116 L1603.3 685.116 L1603.86 685.116 L1604.42 685.116 L1604.98 685.116 L1605.54 685.116 L1606.1 685.116 L1606.66 685.116 L1607.22 685.116 L1607.78 685.116 L1608.34 685.116 L1608.9 685.116 L1609.46 685.116 L1610.02 685.116 L1610.57 685.116 L1611.13 685.116 L1611.69 685.116 L1612.25 685.116 L1612.81 685.116 L1613.37 685.116 L1613.93 685.116 L1614.49 685.116 L1615.05 685.116 L1615.61 685.116 L1616.17 685.116 L1616.73 685.116 L1617.29 685.116 L1617.84 685.116 L1618.4 685.116 L1618.96 685.116 L1619.52 685.116 L1620.08 685.116 L1620.64 685.116 L1621.2 685.116 L1621.76 685.116 L1622.32 685.116 L1622.88 685.116 L1623.44 685.116 L1624 685.116 L1624.56 685.116 L1625.11 685.116 L1625.67 685.116 L1626.23 685.116 L1626.79 685.116 L1627.35 685.116 L1627.91 685.116 L1628.47 685.116 L1629.03 685.116 L1629.59 685.116 L1630.15 685.116 L1630.71 685.116 L1631.27 685.116 L1631.83 685.116 L1632.39 685.116 L1632.94 685.116 L1633.5 685.116 L1634.06 685.116 L1634.62 685.116 L1635.18 685.116 L1635.74 685.116 L1636.3 685.116 L1636.86 685.116 L1637.42 685.116 L1637.98 685.116 L1638.54 685.116 L1639.1 685.116 L1639.66 685.116 L1640.21 685.116 L1640.77 685.116 L1641.33 685.116 L1641.89 685.116 L1642.45 685.116 L1643.01 685.116 L1643.57 685.116 L1644.13 685.116 L1644.69 685.116 L1645.25 685.116 L1645.81 685.116 L1646.37 685.116 L1646.93 685.116 L1647.48 685.116 L1648.04 685.116 L1648.6 685.116 L1649.16 685.116 L1649.72 685.116 L1650.28 685.116 L1650.84 685.116 L1651.4 685.116 L1651.96 685.116 L1652.52 685.116 L1653.08 685.116 L1653.64 685.116 L1654.2 685.116 L1654.76 685.116 L1655.31 685.116 L1655.87 685.116 L1656.43 685.116 L1656.99 685.116 L1657.55 685.116 L1658.11 685.116 L1658.67 685.116 L1659.23 685.116 L1659.79 685.116 L1660.35 685.116 L1660.91 685.116 L1661.47 685.116 L1662.03 685.116 L1662.58 685.116 L1663.14 685.116 L1663.7 685.116 L1664.26 685.116 L1664.82 685.116 L1665.38 685.116 L1665.94 685.116 L1666.5 685.116 L1667.06 685.116 L1667.62 685.116 L1668.18 685.116 L1668.74 685.116 L1669.3 685.116 L1669.85 685.116 L1670.41 685.116 L1670.97 685.116 L1671.53 685.116 L1672.09 685.116 L1672.65 685.116 L1673.21 685.116 L1673.77 685.116 L1674.33 685.116 L1674.89 685.116 L1675.45 685.116 L1676.01 685.116 L1676.57 685.116 L1677.13 685.116 L1677.68 685.116 L1678.24 685.116 L1678.8 685.116 L1679.36 685.116 L1679.92 685.116 L1680.48 685.116 L1681.04 685.116 L1681.6 685.116 L1682.16 685.116 L1682.72 685.116 L1683.28 685.116 L1683.84 685.116 L1684.4 685.116 L1684.95 685.116 L1685.51 685.116 L1686.07 685.116 L1686.63 685.116 L1687.19 685.116 L1687.75 685.116 L1688.31 685.116 L1688.87 685.116 L1689.43 685.116 L1689.99 685.116 L1690.55 685.116 L1691.11 685.116 L1691.67 685.116 L1692.23 685.116 L1692.78 685.116 L1693.34 685.116 L1693.9 685.116 L1694.46 685.116 L1695.02 685.116 L1695.58 685.116 L1696.14 685.116 L1696.7 685.116 L1697.26 685.116 L1697.82 685.116 L1698.38 685.116 L1698.94 685.116 L1699.5 685.116 L1700.05 685.116 L1700.61 685.116 L1701.17 685.116 L1701.73 685.116 L1702.29 685.116 L1702.85 685.116 L1703.41 685.116 L1703.97 685.116 L1704.53 685.116 L1705.09 685.116 L1705.65 685.116 L1706.21 685.116 L1706.77 685.116 L1707.32 685.116 L1707.88 685.116 L1708.44 685.116 L1709 685.116 L1709.56 685.116 L1710.12 685.116 L1710.68 685.116 L1711.24 685.116 L1711.8 685.116 L1712.36 685.116 L1712.92 685.116 L1713.48 685.116 L1714.04 685.116 L1714.6 685.116 L1715.15 685.116 L1715.71 685.116 L1716.27 685.116 L1716.83 685.116 L1717.39 685.116 L1717.95 685.116 L1718.51 685.116 L1719.07 685.116 L1719.63 685.116 L1720.19 685.116 L1720.75 685.116 L1721.31 685.116 L1721.87 685.116 L1722.42 685.116 L1722.98 685.116 L1723.54 685.116 L1724.1 685.116 L1724.66 685.116 L1725.22 685.116 L1725.78 685.116 L1726.34 685.116 L1726.9 685.116 L1727.46 685.116 L1728.02 685.116 L1728.58 685.116 L1729.14 685.116 L1729.69 685.116 L1730.25 685.116 L1730.81 685.116 L1731.37 685.116 L1731.93 685.116 L1732.49 685.116 L1733.05 685.116 L1733.61 685.116 L1734.17 685.116 L1734.73 685.116 L1735.29 685.116 L1735.85 685.116 L1736.41 685.116 L1736.97 685.116 L1737.52 685.116 L1738.08 685.116 L1738.64 685.116 L1739.2 685.116 L1739.76 685.116 L1740.32 685.116 L1740.88 685.116 L1741.44 685.116 L1742 685.116 L1742.56 685.116 L1743.12 685.116 L1743.68 685.116 L1744.24 685.116 L1744.79 685.116 L1745.35 685.116 L1745.91 685.116 L1746.47 685.116 L1747.03 685.116 L1747.59 685.116 L1748.15 685.116 L1748.71 685.116 L1749.27 685.116 L1749.83 685.116 L1750.39 685.116 L1750.95 685.116 L1751.51 685.116 L1752.06 685.116 L1752.62 685.116 L1753.18 685.116 L1753.74 685.116 L1754.3 685.116 L1754.86 685.116 L1755.42 685.116 L1755.98 685.116 L1756.54 685.116 L1757.1 685.116 L1757.66 685.116 L1758.22 685.116 L1758.78 685.116 L1759.34 685.116 L1759.89 685.116 L1760.45 685.116 L1761.01 685.116 L1761.57 685.116 L1762.13 685.116 L1762.69 685.116 L1763.25 685.116 L1763.81 685.116 L1764.37 685.116 L1764.93 685.116 L1765.49 685.116 L1766.05 685.116 L1766.61 685.116 L1767.16 685.116 L1767.72 685.116 L1768.28 685.116 L1768.84 685.116 L1769.4 685.116 L1769.96 685.116 L1770.52 685.116 L1771.08 685.116 L1771.64 685.116 L1772.2 685.116 L1772.76 685.116 L1773.32 685.116 L1773.88 685.116 L1774.43 685.116 L1774.99 685.116 L1775.55 685.116 L1776.11 685.116 L1776.67 685.116 L1777.23 685.116 L1777.79 685.116 L1778.35 685.116 L1778.91 685.116 L1779.47 685.116 L1780.03 685.116 L1780.59 685.116 L1781.15 685.116 L1781.71 685.116 L1782.26 685.116 L1782.82 685.116 L1783.38 685.116 L1783.94 685.116 L1784.5 685.116 L1785.06 685.116 L1785.62 685.116 L1786.18 685.116 L1786.74 685.116 L1787.3 685.116 L1787.86 685.116 L1788.42 685.116 L1788.98 685.116 L1789.53 685.116 L1790.09 685.116 L1790.65 685.116 L1791.21 685.116 L1791.77 685.116 L1792.33 685.116 L1792.89 685.116 L1793.45 685.116 L1794.01 685.116 L1794.57 685.116 L1795.13 685.116 L1795.69 685.116 L1796.25 685.116 L1796.8 685.116 L1797.36 685.116 L1797.92 685.116 L1798.48 685.116 L1799.04 685.116 L1799.6 685.116 L1800.16 685.116 L1800.72 685.116 L1801.28 685.116 L1801.84 685.116 L1802.4 685.116 L1802.96 685.116 L1803.52 685.116 L1804.08 685.116 L1804.63 685.116 L1805.19 685.116 L1805.75 685.116 L1806.31 685.116 L1806.87 685.116 L1807.43 685.116 L1807.99 685.116 L1808.55 685.116 L1809.11 685.116 L1809.67 685.116 L1810.23 685.116 L1810.79 685.116 L1811.35 685.116 L1811.9 685.116 L1812.46 685.116 L1813.02 685.116 L1813.58 685.116 L1814.14 685.116 L1814.7 685.116 L1815.26 685.116 L1815.82 685.116 L1816.38 685.116 L1816.94 685.116 L1817.5 685.116 L1818.06 685.116 L1818.62 685.116 L1819.18 685.116 L1819.73 685.116 L1820.29 685.116 L1820.85 685.116 L1821.41 685.116 L1821.97 685.116 L1822.53 685.116 L1823.09 685.116 L1823.65 685.116 L1824.21 685.116 L1824.77 685.116 L1825.33 685.116 L1825.89 685.116 L1826.45 685.116 L1827 685.116 L1827.56 685.116 L1828.12 685.116 L1828.68 685.116 L1829.24 685.116 L1829.8 685.116 L1830.36 685.116 L1830.92 685.116 L1831.48 685.116 L1832.04 685.116 L1832.6 685.116 L1833.16 685.116 L1833.72 685.116 L1834.27 685.116 L1834.83 685.116 L1835.39 685.116 L1835.95 685.116 L1836.51 685.116 L1837.07 685.116 L1837.63 685.116 L1838.19 685.116 L1838.19 683.187 L1837.63 683.187 L1837.07 683.187 L1836.51 683.187 L1835.95 683.187 L1835.39 683.187 L1834.83 683.187 L1834.27 683.187 L1833.72 683.187 L1833.16 683.187 L1832.6 683.187 L1832.04 683.187 L1831.48 683.187 L1830.92 683.187 L1830.36 683.187 L1829.8 683.187 L1829.24 683.187 L1828.68 683.187 L1828.12 683.187 L1827.56 683.187 L1827 683.187 L1826.45 683.187 L1825.89 683.187 L1825.33 683.187 L1824.77 683.187 L1824.21 683.187 L1823.65 683.187 L1823.09 683.187 L1822.53 683.187 L1821.97 683.187 L1821.41 683.187 L1820.85 683.187 L1820.29 683.187 L1819.73 683.187 L1819.18 683.187 L1818.62 683.187 L1818.06 683.187 L1817.5 683.187 L1816.94 683.187 L1816.38 683.187 L1815.82 683.187 L1815.26 683.187 L1814.7 683.187 L1814.14 683.187 L1813.58 683.187 L1813.02 683.187 L1812.46 683.187 L1811.9 683.187 L1811.35 683.187 L1810.79 683.187 L1810.23 683.187 L1809.67 683.187 L1809.11 683.187 L1808.55 683.187 L1807.99 683.187 L1807.43 683.187 L1806.87 683.187 L1806.31 683.187 L1805.75 683.187 L1805.19 683.187 L1804.63 683.187 L1804.08 683.187 L1803.52 683.187 L1802.96 683.187 L1802.4 683.187 L1801.84 683.187 L1801.28 683.187 L1800.72 683.187 L1800.16 683.187 L1799.6 683.187 L1799.04 683.187 L1798.48 683.187 L1797.92 683.187 L1797.36 683.187 L1796.8 683.187 L1796.25 683.187 L1795.69 683.187 L1795.13 683.187 L1794.57 683.187 L1794.01 683.187 L1793.45 683.187 L1792.89 683.187 L1792.33 683.187 L1791.77 683.187 L1791.21 683.187 L1790.65 683.187 L1790.09 683.187 L1789.53 683.187 L1788.98 683.187 L1788.42 683.187 L1787.86 683.187 L1787.3 683.187 L1786.74 683.187 L1786.18 683.187 L1785.62 683.187 L1785.06 683.187 L1784.5 683.187 L1783.94 683.187 L1783.38 683.187 L1782.82 683.187 L1782.26 683.187 L1781.71 683.187 L1781.15 683.187 L1780.59 683.187 L1780.03 683.187 L1779.47 683.187 L1778.91 683.187 L1778.35 683.187 L1777.79 683.187 L1777.23 683.187 L1776.67 683.187 L1776.11 683.187 L1775.55 683.187 L1774.99 683.187 L1774.43 683.187 L1773.88 683.187 L1773.32 683.187 L1772.76 683.187 L1772.2 683.187 L1771.64 683.187 L1771.08 683.187 L1770.52 683.187 L1769.96 683.187 L1769.4 683.187 L1768.84 683.187 L1768.28 683.187 L1767.72 683.187 L1767.16 683.187 L1766.61 683.187 L1766.05 683.187 L1765.49 683.187 L1764.93 683.187 L1764.37 683.187 L1763.81 683.187 L1763.25 683.187 L1762.69 683.187 L1762.13 683.187 L1761.57 683.187 L1761.01 683.187 L1760.45 683.187 L1759.89 683.187 L1759.34 683.187 L1758.78 683.187 L1758.22 683.187 L1757.66 683.187 L1757.1 683.187 L1756.54 683.187 L1755.98 683.187 L1755.42 683.187 L1754.86 683.187 L1754.3 683.187 L1753.74 683.187 L1753.18 683.187 L1752.62 683.187 L1752.06 683.187 L1751.51 683.187 L1750.95 683.187 L1750.39 683.187 L1749.83 683.187 L1749.27 683.187 L1748.71 683.187 L1748.15 683.187 L1747.59 683.187 L1747.03 683.187 L1746.47 683.187 L1745.91 683.187 L1745.35 683.187 L1744.79 683.187 L1744.24 683.187 L1743.68 683.187 L1743.12 683.187 L1742.56 683.187 L1742 683.187 L1741.44 683.187 L1740.88 683.187 L1740.32 683.187 L1739.76 683.187 L1739.2 683.187 L1738.64 683.187 L1738.08 683.187 L1737.52 683.187 L1736.97 683.187 L1736.41 683.187 L1735.85 683.187 L1735.29 683.187 L1734.73 683.187 L1734.17 683.187 L1733.61 683.187 L1733.05 683.187 L1732.49 683.187 L1731.93 683.187 L1731.37 683.187 L1730.81 683.187 L1730.25 683.187 L1729.69 683.187 L1729.14 683.187 L1728.58 683.187 L1728.02 683.187 L1727.46 683.187 L1726.9 683.187 L1726.34 683.187 L1725.78 683.187 L1725.22 683.187 L1724.66 683.187 L1724.1 683.187 L1723.54 683.187 L1722.98 683.187 L1722.42 683.187 L1721.87 683.187 L1721.31 683.187 L1720.75 683.187 L1720.19 683.187 L1719.63 683.187 L1719.07 683.187 L1718.51 683.187 L1717.95 683.187 L1717.39 683.187 L1716.83 683.187 L1716.27 683.187 L1715.71 683.187 L1715.15 683.187 L1714.6 683.187 L1714.04 683.187 L1713.48 683.187 L1712.92 683.187 L1712.36 683.187 L1711.8 683.187 L1711.24 683.187 L1710.68 683.187 L1710.12 683.187 L1709.56 683.187 L1709 683.187 L1708.44 683.187 L1707.88 683.187 L1707.32 683.187 L1706.77 683.187 L1706.21 683.187 L1705.65 683.187 L1705.09 683.187 L1704.53 683.187 L1703.97 683.187 L1703.41 683.187 L1702.85 683.187 L1702.29 683.187 L1701.73 683.187 L1701.17 683.187 L1700.61 683.187 L1700.05 683.187 L1699.5 683.187 L1698.94 683.187 L1698.38 683.187 L1697.82 683.187 L1697.26 683.187 L1696.7 683.187 L1696.14 683.187 L1695.58 683.187 L1695.02 683.187 L1694.46 683.187 L1693.9 683.187 L1693.34 683.187 L1692.78 683.187 L1692.23 683.187 L1691.67 683.187 L1691.11 683.187 L1690.55 683.187 L1689.99 683.187 L1689.43 683.187 L1688.87 683.187 L1688.31 683.187 L1687.75 683.187 L1687.19 683.187 L1686.63 683.187 L1686.07 683.187 L1685.51 683.187 L1684.95 683.187 L1684.4 683.187 L1683.84 683.187 L1683.28 683.187 L1682.72 683.187 L1682.16 683.187 L1681.6 683.187 L1681.04 683.187 L1680.48 683.187 L1679.92 683.187 L1679.36 683.187 L1678.8 683.187 L1678.24 683.187 L1677.68 683.187 L1677.13 683.187 L1676.57 683.187 L1676.01 683.187 L1675.45 683.187 L1674.89 683.187 L1674.33 683.187 L1673.77 683.187 L1673.21 683.187 L1672.65 683.187 L1672.09 683.187 L1671.53 683.187 L1670.97 683.187 L1670.41 683.187 L1669.85 683.187 L1669.3 683.187 L1668.74 683.187 L1668.18 683.187 L1667.62 683.187 L1667.06 683.187 L1666.5 683.187 L1665.94 683.187 L1665.38 683.187 L1664.82 683.187 L1664.26 683.187 L1663.7 683.187 L1663.14 683.187 L1662.58 683.187 L1662.03 683.187 L1661.47 683.187 L1660.91 683.187 L1660.35 683.187 L1659.79 683.187 L1659.23 683.187 L1658.67 683.187 L1658.11 683.187 L1657.55 683.187 L1656.99 683.187 L1656.43 683.187 L1655.87 683.187 L1655.31 683.187 L1654.76 683.187 L1654.2 683.187 L1653.64 683.187 L1653.08 683.187 L1652.52 683.187 L1651.96 683.187 L1651.4 683.187 L1650.84 683.187 L1650.28 683.187 L1649.72 683.187 L1649.16 683.187 L1648.6 683.187 L1648.04 683.187 L1647.48 683.187 L1646.93 683.187 L1646.37 683.187 L1645.81 683.187 L1645.25 683.187 L1644.69 683.187 L1644.13 683.187 L1643.57 683.187 L1643.01 683.187 L1642.45 683.187 L1641.89 683.187 L1641.33 683.187 L1640.77 683.187 L1640.21 683.187 L1639.66 683.187 L1639.1 683.187 L1638.54 683.187 L1637.98 683.187 L1637.42 683.187 L1636.86 683.187 L1636.3 683.187 L1635.74 683.187 L1635.18 683.187 L1634.62 683.187 L1634.06 683.187 L1633.5 683.187 L1632.94 683.187 L1632.39 683.187 L1631.83 683.187 L1631.27 683.187 L1630.71 683.187 L1630.15 683.187 L1629.59 683.187 L1629.03 683.187 L1628.47 683.187 L1627.91 683.187 L1627.35 683.187 L1626.79 683.187 L1626.23 683.187 L1625.67 683.187 L1625.11 683.187 L1624.56 683.187 L1624 683.187 L1623.44 683.187 L1622.88 683.187 L1622.32 683.187 L1621.76 683.187 L1621.2 683.187 L1620.64 683.187 L1620.08 683.187 L1619.52 683.187 L1618.96 683.187 L1618.4 683.187 L1617.84 683.187 L1617.29 683.187 L1616.73 683.187 L1616.17 683.187 L1615.61 683.187 L1615.05 683.187 L1614.49 683.187 L1613.93 683.187 L1613.37 683.187 L1612.81 683.187 L1612.25 683.187 L1611.69 683.187 L1611.13 683.187 L1610.57 683.187 L1610.02 683.187 L1609.46 683.187 L1608.9 683.187 L1608.34 683.187 L1607.78 683.187 L1607.22 683.187 L1606.66 683.187 L1606.1 683.187 L1605.54 683.187 L1604.98 683.187 L1604.42 683.187 L1603.86 683.187 L1603.3 683.187 L1602.74 683.187 L1602.19 683.187 L1601.63 683.187 L1601.07 683.187 L1600.51 683.187 L1599.95 683.187 L1599.39 683.187 L1598.83 683.187 L1598.27 683.187 L1597.71 683.187 L1597.15 683.187 L1596.59 683.187 L1596.03 683.187 L1595.47 683.187 L1594.92 683.187 L1594.36 683.187 L1593.8 683.187 L1593.24 683.187 L1592.68 683.187 L1592.12 683.187 L1591.56 683.187 L1591 683.187 L1590.44 683.187 L1589.88 683.187 L1589.32 683.187 L1588.76 683.187 L1588.2 683.187 L1587.65 683.187 L1587.09 683.187 L1586.53 683.187 L1585.97 683.187 L1585.41 683.187 L1584.85 683.187 L1584.29 683.187 L1583.73 683.187 L1583.17 683.187 L1582.61 683.187 L1582.05 683.187 L1581.49 683.187 L1580.93 683.187 L1580.37 683.187 L1579.82 683.187 L1579.26 683.187 L1578.7 683.187 L1578.14 683.187 L1577.58 683.187 L1577.02 683.187 L1576.46 683.187 L1575.9 683.187 L1575.34 683.187 L1574.78 683.187 L1574.22 683.187 L1573.66 683.187 L1573.1 683.187 L1572.55 683.187 L1571.99 683.187 L1571.43 683.187 L1570.87 683.187 L1570.31 683.187 L1569.75 683.187 L1569.19 683.187 L1568.63 683.187 L1568.07 683.187 L1567.51 683.187 L1566.95 683.187 L1566.39 683.187 L1565.83 683.187 L1565.28 683.187 L1564.72 683.187 L1564.16 683.187 L1563.6 683.187 L1563.04 683.187 L1562.48 683.187 L1561.92 683.187 L1561.36 683.187 L1560.8 683.187 L1560.24 683.187 L1559.68 683.187 L1559.12 683.187 L1558.56 683.187 L1558 683.187 L1557.45 683.187 L1556.89 683.187 L1556.33 683.187 L1555.77 683.187 L1555.21 683.187 L1554.65 683.187 L1554.09 683.187 L1553.53 683.187 L1552.97 683.187 L1552.41 683.187 L1551.85 683.187 L1551.29 683.187 L1550.73 683.187 L1550.18 683.187 L1549.62 683.187 L1549.06 683.187 L1548.5 683.187 L1547.94 683.187 L1547.38 683.187 L1546.82 683.187 L1546.26 683.187 L1545.7 683.187 L1545.14 683.187 L1544.58 683.187 L1544.02 683.187 L1543.46 683.187 L1542.9 683.187 L1542.35 683.187 L1541.79 683.187 L1541.23 683.187 L1540.67 683.187 L1540.11 683.187 L1539.55 683.187 L1538.99 683.187 L1538.43 683.187 L1537.87 683.187 L1537.31 683.187 L1536.75 683.187 L1536.19 683.187 L1535.63 683.187 L1535.08 683.187 L1534.52 683.187 L1533.96 683.187 L1533.4 683.187 L1532.84 683.187 L1532.28 683.187 L1531.72 683.187 L1531.16 683.187 L1530.6 683.187 L1530.04 683.187 L1529.48 683.187 L1528.92 683.187 L1528.36 683.187 L1527.81 683.187 L1527.25 683.187 L1526.69 683.187 L1526.13 683.187 L1525.57 683.187 L1525.01 683.187 L1524.45 683.187 L1523.89 683.187 L1523.33 683.187 L1522.77 683.187 L1522.21 683.187 L1521.65 683.187 L1521.09 683.187 L1520.53 683.187 L1519.98 683.187 L1519.42 683.187 L1518.86 683.187 L1518.3 683.187 L1517.74 683.187 L1517.18 683.187 L1516.62 683.187 L1516.06 683.187 L1515.5 683.187 L1514.94 683.187 L1514.38 683.187 L1513.82 683.187 L1513.26 683.187 L1512.71 683.187 L1512.15 683.187 L1511.59 683.187 L1511.03 683.187 L1510.47 683.187 L1509.91 683.187 L1509.35 683.187 L1508.79 683.187 L1508.23 683.187 L1507.67 683.187 L1507.11 683.187 L1506.55 683.187 L1505.99 683.187 L1505.44 683.187 L1504.88 683.187 L1504.32 683.187 L1503.76 683.187 L1503.2 683.187 L1502.64 683.187 L1502.08 683.187 L1501.52 683.187 L1500.96 683.187 L1500.4 683.187 L1499.84 683.187 L1499.28 683.187 L1498.72 683.187 L1498.16 683.187 L1497.61 683.187 L1497.05 683.187 L1496.49 683.187 L1495.93 683.187 L1495.37 683.187 L1494.81 683.187 L1494.25 683.187 L1493.69 683.187 L1493.13 683.187 L1492.57 683.187 L1492.01 683.187 L1491.45 683.187 L1490.89 683.187 L1490.34 683.187 L1489.78 683.187 L1489.22 683.187 L1488.66 683.187 L1488.1 683.187 L1487.54 683.187 L1486.98 683.187 L1486.42 683.187 L1485.86 683.187 L1485.3 683.187 L1484.74 683.187 L1484.18 683.187 L1483.62 683.187 L1483.07 683.187 L1482.51 683.187 L1481.95 683.187 L1481.39 683.187 L1480.83 683.187 L1480.27 683.187 L1479.71 683.187 L1479.15 683.187 L1478.59 683.187 L1478.03 683.187 L1477.47 683.187 L1476.91 683.187 L1476.35 683.187 L1475.79 683.187 L1475.24 683.187 L1474.68 683.187 L1474.12 683.187 L1473.56 683.187 L1473 683.187 L1472.44 683.187 L1471.88 683.187 L1471.32 683.187 L1470.76 683.187 L1470.2 683.187 L1469.64 683.187 L1469.08 683.187 L1468.52 683.187 L1467.97 683.187 L1467.41 683.187 L1466.85 683.187 L1466.29 683.187 L1465.73 683.187 L1465.17 683.187 L1464.61 683.187 L1464.05 683.187 L1463.49 683.187 L1462.93 683.187 L1462.37 683.187 L1461.81 683.187 L1461.25 683.187 L1460.7 683.187 L1460.14 683.187 L1459.58 683.187 L1459.02 683.187 L1458.46 683.187 L1457.9 683.187 L1457.34 683.187 L1456.78 683.187 L1456.22 683.187 L1455.66 683.187 L1455.1 683.187 L1454.54 683.187 L1453.98 683.187 L1453.42 683.187 L1452.87 683.187 L1452.31 683.187 L1451.75 683.187 L1451.19 683.187 L1450.63 683.187 L1450.07 683.187 L1449.51 683.187 L1448.95 683.187 L1448.39 683.187 L1447.83 683.187 L1447.27 683.187 L1446.71 683.187 L1446.15 683.187 L1445.6 683.187 L1445.04 683.187 L1444.48 683.187 L1443.92 683.187 L1443.36 683.187 L1442.8 683.187 L1442.24 683.187 L1441.68 683.187 L1441.12 683.187 L1440.56 683.187 L1440 683.187 L1439.44 683.187 L1438.88 683.187 L1438.33 683.187 L1437.77 683.187 L1437.21 683.187 L1436.65 683.187 L1436.09 683.187 L1435.53 683.187 L1434.97 683.187 L1434.41 683.187 L1433.85 683.187 L1433.29 683.187 L1432.73 683.187 L1432.17 683.187 L1431.61 683.187 L1431.05 683.187 L1430.5 683.187 L1429.94 683.187 L1429.38 683.187 L1428.82 683.187 L1428.26 683.187 L1427.7 683.187 L1427.14 683.187 L1426.58 683.187 L1426.02 683.187 L1425.46 683.187 L1424.9 683.187 L1424.34 683.187 L1423.78 683.187 L1423.23 683.187 L1422.67 683.187 L1422.11 683.187 L1421.55 683.187 L1420.99 683.187 L1420.43 683.187 L1419.87 683.187 L1419.31 683.187 L1418.75 683.187 L1418.19 683.187 L1417.63 683.187 L1417.07 683.187 L1416.51 683.187 L1415.95 683.187 L1415.4 683.187 L1414.84 683.187 L1414.28 683.187 L1413.72 683.187 L1413.16 683.187 L1412.6 683.187 L1412.04 683.187 L1411.48 683.187 L1410.92 683.187 L1410.36 683.187 L1409.8 683.187 L1409.24 683.187 L1408.68 683.187 L1408.13 683.187 L1407.57 683.187 L1407.01 683.187 L1406.45 683.187 L1405.89 683.187 L1405.33 683.187 L1404.77 683.187 L1404.21 683.187 L1403.65 683.187 L1403.09 683.187 L1402.53 683.187 L1401.97 683.187 L1401.41 683.187 L1400.86 683.187 L1400.3 683.187 L1399.74 683.187 L1399.18 683.187 L1398.62 683.187 L1398.06 683.187 L1397.5 683.187 L1396.94 683.187 L1396.38 683.187 L1395.82 683.187 L1395.26 683.187 L1394.7 683.187 L1394.14 683.187 L1393.58 683.187 L1393.03 683.187 L1392.47 683.187 L1391.91 683.187 L1391.35 683.187 L1390.79 683.187 L1390.23 683.187 L1389.67 683.187 L1389.11 683.187 L1388.55 683.187 L1387.99 683.187 L1387.43 683.187 L1386.87 683.187 L1386.31 683.187 L1385.76 683.187 L1385.2 683.187 L1384.64 683.187 L1384.08 683.187 L1383.52 683.187 L1382.96 683.187 L1382.4 683.187 L1381.84 683.187 L1381.28 683.187 L1380.72 683.187 L1380.16 683.187 L1379.6 683.187 L1379.04 683.187 L1378.49 683.187 L1377.93 683.187 L1377.37 683.187 L1376.81 683.187 L1376.25 683.187 L1375.69 683.187 L1375.13 683.187 L1374.57 683.187 L1374.01 683.187 L1373.45 683.187 L1372.89 683.187 L1372.33 683.187 L1371.77 683.187 L1371.21 683.187 L1370.66 683.187 L1370.1 683.187 L1369.54 683.187 L1368.98 683.187 L1368.42 683.187 L1367.86 683.187 L1367.3 683.187 L1366.74 683.187 L1366.18 683.187 L1365.62 683.187 L1365.06 683.187 L1364.5 683.187 L1363.94 683.187 L1363.39 683.187 L1362.83 683.187 L1362.27 683.187 L1361.71 683.187 L1361.15 683.187 L1360.59 683.187 L1360.03 683.187 L1359.47 683.187 L1358.91 683.187 L1358.35 683.187 L1357.79 683.187 L1357.23 683.187 L1356.67 683.187 L1356.12 683.187 L1355.56 683.187 L1355 683.187 L1354.44 683.187 L1353.88 683.187 L1353.32 683.187 L1352.76 683.187 L1352.2 683.187 L1351.64 683.187 L1351.08 683.187 L1350.52 683.187 L1349.96 683.187 L1349.4 683.187 L1348.84 683.187 L1348.29 683.187 L1347.73 683.187 L1347.17 683.187 L1346.61 683.187 L1346.05 683.187 L1345.49 683.187 L1344.93 683.187 L1344.37 683.187 L1343.81 683.187 L1343.25 683.187 L1342.69 683.187 L1342.13 683.187 L1341.57 683.187 L1341.02 683.187 L1340.46 683.187 L1339.9 683.187 L1339.34 683.187 L1338.78 683.187 L1338.22 683.187 L1337.66 683.187 L1337.1 683.187 L1336.54 683.187 L1335.98 683.187 L1335.42 683.187 L1334.86 683.187 L1334.3 683.187 L1333.75 683.187 L1333.19 683.187 L1332.63 683.187 L1332.07 683.187 L1331.51 683.187 L1330.95 683.187 L1330.39 683.187 L1329.83 683.187 L1329.27 683.187 L1328.71 683.187 L1328.15 683.187 L1327.59 683.187 L1327.03 683.187 L1326.47 683.187 L1325.92 683.187 L1325.36 683.187 L1324.8 683.187 L1324.24 683.187 L1323.68 683.187 L1323.12 683.187 L1322.56 683.187 L1322 683.187 L1321.44 683.187 L1320.88 683.187 L1320.32 683.187 L1319.76 683.187 L1319.2 683.187 L1318.65 683.187 L1318.09 683.187 L1317.53 683.187 L1316.97 683.187 L1316.41 683.187 L1315.85 683.187 L1315.29 683.187 L1314.73 683.187 L1314.17 683.187 L1313.61 683.187 L1313.05 683.187 L1312.49 683.187 L1311.93 683.187 L1311.38 683.187 L1310.82 683.187 L1310.26 683.187 L1309.7 683.187 L1309.14 683.187 L1308.58 683.187 L1308.02 683.187 L1307.46 683.187 L1306.9 683.187 L1306.34 683.187 L1305.78 683.187 L1305.22 683.187 L1304.66 683.187 L1304.1 683.187 L1303.55 683.187 L1302.99 683.187 L1302.43 683.187 L1301.87 683.187 L1301.31 683.187 L1300.75 683.187 L1300.19 683.187 L1299.63 683.187 L1299.07 683.187 L1298.51 683.187 L1297.95 683.187 L1297.39 683.187 L1296.83 683.187 L1296.28 683.187 L1295.72 683.187 L1295.16 683.187 L1294.6 683.187 L1294.04 683.187 L1293.48 683.187 L1292.92 683.187 L1292.36 683.187 L1291.8 683.187 L1291.24 683.187 L1290.68 683.187 L1290.12 683.187 L1289.56 683.187 L1289 683.187 L1288.45 683.187 L1287.89 683.187 L1287.33 683.187 L1286.77 683.187 L1286.21 683.187 L1285.65 683.187 L1285.09 683.187 L1284.53 683.187 L1283.97 683.187 L1283.41 683.187 L1282.85 683.187 L1282.29 683.187 L1281.73 683.187 L1281.18 683.187 L1280.62 683.187 L1280.06 683.187 L1279.5 683.187 L1278.94 683.187 L1278.38 683.187 L1277.82 683.187 L1277.26 683.187 L1276.7 683.187 L1276.14 683.187 L1275.58 683.187 L1275.02 683.187 L1274.46 683.187 L1273.91 683.187 L1273.35 683.187 L1272.79 683.187 L1272.23 683.187 L1271.67 683.187 L1271.11 683.187 L1270.55 683.187 L1269.99 683.187 L1269.43 683.187 L1268.87 683.187 L1268.31 683.187 L1267.75 683.187 L1267.19 683.187 L1266.63 683.187 L1266.08 683.187 L1265.52 683.187 L1264.96 683.187 L1264.4 683.187 L1263.84 683.187 L1263.28 683.187 L1262.72 683.187 L1262.16 683.187 L1261.6 683.187 L1261.04 683.187 L1260.48 683.187 L1259.92 683.187 L1259.36 683.187 L1258.81 683.187 L1258.25 683.187 L1257.69 683.187 L1257.13 683.187 L1256.57 683.187 L1256.01 683.187 L1255.45 683.187 L1254.89 683.187 L1254.33 683.187 L1253.77 683.187 L1253.21 683.187 L1252.65 683.187 L1252.09 683.187 L1251.54 683.187 L1250.98 683.187 L1250.42 683.187 L1249.86 683.187 L1249.3 683.187 L1248.74 683.187 L1248.18 683.187 L1247.62 683.187 L1247.06 683.187 L1246.5 683.187 L1245.94 683.187 L1245.38 683.187 L1244.82 683.187 L1244.26 683.187 L1243.71 683.187 L1243.15 683.187 L1242.59 683.187 L1242.03 683.187 L1241.47 683.187 L1240.91 683.187 L1240.35 683.187 L1239.79 683.187 L1239.23 683.187 L1238.67 683.187 L1238.11 683.187 L1237.55 683.187 L1236.99 683.187 L1236.44 683.187 L1235.88 683.187 L1235.32 683.187 L1234.76 683.187 L1234.2 683.187 L1233.64 683.187 L1233.08 683.187 L1232.52 683.187 L1231.96 683.187 L1231.4 683.187 L1230.84 683.187 L1230.28 683.187 L1229.72 683.187 L1229.17 683.187 L1228.61 683.187 L1228.05 683.187 L1227.49 683.187 L1226.93 683.187 L1226.37 683.187 L1225.81 683.187 L1225.25 683.187 L1224.69 683.187 L1224.13 683.187 L1223.57 683.187 L1223.01 683.187 L1222.45 683.187 L1221.89 683.187 L1221.34 683.187 L1220.78 683.187 L1220.22 683.187 L1219.66 683.187 L1219.1 683.187 L1218.54 683.187 L1217.98 683.187 L1217.42 683.187 L1216.86 683.187 L1216.3 683.187 L1215.74 683.187 L1215.18 683.187 L1214.62 683.187 L1214.07 683.187 L1213.51 683.187 L1212.95 683.187 L1212.39 683.187 L1211.83 683.187 L1211.27 683.187 L1210.71 683.187 L1210.15 683.187 L1209.59 683.187 L1209.03 683.187 L1208.47 683.187 L1207.91 683.187 L1207.35 683.187 L1206.8 683.187 L1206.24 683.187 L1205.68 683.187 L1205.12 683.187 L1204.56 683.187 L1204 683.187 L1203.44 683.187 L1202.88 683.187 L1202.32 683.187 L1201.76 683.187 L1201.2 683.187 L1200.64 683.187 L1200.08 683.187 L1199.52 683.187 L1198.97 683.187 L1198.41 683.187 L1197.85 683.187 L1197.29 683.187 L1196.73 683.187 L1196.17 683.187 L1195.61 683.187 L1195.05 683.187 L1194.49 683.187 L1193.93 683.187 L1193.37 683.187 L1192.81 683.187 L1192.25 683.187 L1191.7 683.187 L1191.14 683.187 L1190.58 683.187 L1190.02 683.187 L1189.46 683.187 L1188.9 683.187 L1188.34 683.187 L1187.78 683.187 L1187.22 683.187 L1186.66 683.187 L1186.1 683.187 L1185.54 683.187 L1184.98 683.187 L1184.43 683.187 L1183.87 683.187 L1183.31 683.187 L1182.75 683.187 L1182.19 683.187 L1181.63 683.187 L1181.07 683.187 L1180.51 683.187 L1179.95 683.187 L1179.39 683.187 L1178.83 683.187 L1178.27 683.187 L1177.71 683.187 L1177.15 683.187 L1176.6 683.187 L1176.04 683.187 L1175.48 683.187 L1174.92 683.187 L1174.36 683.187 L1173.8 683.187 L1173.24 683.187 L1172.68 683.187 L1172.12 683.187 L1171.56 683.187 L1171 683.187 L1170.44 683.187 L1169.88 683.187 L1169.33 683.187 L1168.77 683.187 L1168.21 683.187 L1167.65 683.187 L1167.09 683.187 L1166.53 683.187 L1165.97 683.187 L1165.41 683.187 L1164.85 683.187 L1164.29 683.187 L1163.73 683.187 L1163.17 683.187 L1162.61 683.187 L1162.05 683.187 L1161.5 683.187 L1160.94 683.187 L1160.38 683.187 L1159.82 683.187 L1159.26 683.187 L1158.7 683.187 L1158.14 683.187 L1157.58 683.187 L1157.02 683.187 L1156.46 683.187 L1155.9 683.187 L1155.34 683.187 L1154.78 683.187 L1154.23 683.187 L1153.67 683.187 L1153.11 683.187 L1152.55 683.187 L1151.99 683.187 L1151.43 683.187 L1150.87 683.187 L1150.31 683.187 L1149.75 683.187 L1149.19 683.187 L1148.63 683.187 L1148.07 683.187 L1147.51 683.187 L1146.96 683.187 L1146.4 683.187 L1145.84 683.187 L1145.28 683.187 L1144.72 683.187 L1144.16 683.187 L1143.6 683.187 L1143.04 683.187 L1142.48 683.187 L1141.92 683.187 L1141.36 683.187 L1140.8 683.187 L1140.24 683.187 L1139.68 683.187 L1139.13 683.187 L1138.57 683.187 L1138.01 683.187 L1137.45 683.187 L1136.89 683.187 L1136.33 683.187 L1135.77 683.187 L1135.21 683.187 L1134.65 683.187 L1134.09 683.187 L1133.53 683.187 L1132.97 683.187 L1132.41 683.187 L1131.86 683.187 L1131.3 683.187 L1130.74 683.187 L1130.18 683.187 L1129.62 683.187 L1129.06 683.187 L1128.5 683.187 L1127.94 683.187 L1127.38 683.187 L1126.82 683.187 L1126.26 683.187 L1125.7 683.187 L1125.14 683.187 L1124.59 683.187 L1124.03 683.187 L1123.47 683.187 L1122.91 683.187 L1122.35 683.187 L1121.79 683.187 L1121.23 683.187 L1120.67 683.187 L1120.11 683.187 L1119.55 683.187 L1118.99 683.187 L1118.43 683.187 L1117.87 683.187 L1117.31 683.187 L1116.76 683.187 L1116.2 683.187 L1115.64 683.187 L1115.08 683.187 L1114.52 683.187 L1113.96 683.187 L1113.4 683.187 L1112.84 683.187 L1112.28 683.187 L1111.72 683.187 L1111.16 683.187 L1110.6 683.187 L1110.04 683.187 L1109.49 683.187 L1108.93 683.187 L1108.37 683.187 L1107.81 683.187 L1107.25 683.187 L1106.69 683.187 L1106.13 683.187 L1105.57 683.187 L1105.01 683.187 L1104.45 683.187 L1103.89 683.187 L1103.33 683.187 L1102.77 683.187 L1102.22 683.187 L1101.66 683.187 L1101.1 683.187 L1100.54 683.187 L1099.98 683.187 L1099.42 683.187 L1098.86 683.187 L1098.3 683.187 L1097.74 683.187 L1097.18 683.187 L1096.62 683.187 L1096.06 683.187 L1095.5 683.187 L1094.94 683.187 L1094.39 683.187 L1093.83 683.187 L1093.27 683.187 L1092.71 683.187 L1092.15 683.187 L1091.59 683.187 L1091.03 683.187 L1090.47 683.187 L1089.91 683.187 L1089.35 683.187 L1088.79 683.187 L1088.23 683.187 L1087.67 683.187 L1087.12 683.187 L1086.56 683.187 L1086 683.187 L1085.44 683.187 L1084.88 683.187 L1084.32 683.187 L1083.76 683.187 L1083.2 683.187 L1082.64 683.187 L1082.08 683.187 L1081.52 683.187 L1080.96 683.187 L1080.4 683.187 L1079.85 683.187 L1079.29 683.187 L1078.73 683.187 L1078.17 683.187 L1077.61 683.187 L1077.05 683.187 L1076.49 683.187 L1075.93 683.187 L1075.37 683.187 L1074.81 683.187 L1074.25 683.187 L1073.69 683.187 L1073.13 683.187 L1072.57 683.187 L1072.02 683.187 L1071.46 683.187 L1070.9 683.187 L1070.34 683.187 L1069.78 683.187 L1069.22 683.187 L1068.66 683.187 L1068.1 683.187 L1067.54 683.187 L1066.98 683.187 L1066.42 683.187 L1065.86 683.187 L1065.3 683.187 L1064.75 683.187 L1064.19 683.187 L1063.63 683.187 L1063.07 683.187 L1062.51 683.187 L1061.95 683.187 L1061.39 683.187 L1060.83 683.187 L1060.27 683.187 L1059.71 683.187 L1059.15 683.187 L1058.59 683.187 L1058.03 683.187 L1057.48 683.187 L1056.92 683.187 L1056.36 683.187 L1055.8 683.187 L1055.24 683.187 L1054.68 683.187 L1054.12 683.187 L1053.56 683.187 L1053 683.187 L1052.44 683.187 L1051.88 683.187 L1051.32 683.187 L1050.76 683.187 L1050.2 683.187 L1049.65 683.187 L1049.09 683.187 L1048.53 683.187 L1047.97 683.187 L1047.41 683.187 L1046.85 683.187 L1046.29 683.187 L1045.73 683.187 L1045.17 683.187 L1044.61 683.187 L1044.05 683.187 L1043.49 683.187 L1042.93 683.187 L1042.38 683.187 L1041.82 683.187 L1041.26 683.187 L1040.7 683.187 L1040.14 683.187 L1039.58 683.187 L1039.02 683.187 L1038.46 683.187 L1037.9 683.187 L1037.34 683.187 L1036.78 683.187 L1036.22 683.187 L1035.66 683.187 L1035.1 683.187 L1034.55 683.187 L1033.99 683.187 L1033.43 683.187 L1032.87 683.187 L1032.31 683.187 L1031.75 683.187 L1031.19 683.187 L1030.63 683.187 L1030.07 683.187 L1029.51 683.187 L1028.95 683.187 L1028.39 683.187 L1027.83 683.187 L1027.28 683.187 L1026.72 683.187 L1026.16 683.187 L1025.6 683.187 L1025.04 683.187 L1024.48 683.187 L1023.92 683.187 L1023.36 683.187 L1022.8 683.187 L1022.24 683.187 L1021.68 683.187 L1021.12 683.187 L1020.56 683.187 L1020.01 683.187 L1019.45 683.187 L1018.89 683.187 L1018.33 683.187 L1017.77 683.187 L1017.21 683.187 L1016.65 683.187 L1016.09 683.187 L1015.53 683.187 L1014.97 683.187 L1014.41 683.187 L1013.85 683.187 L1013.29 683.187 L1012.73 683.187 L1012.18 683.187 L1011.62 683.187 L1011.06 683.187 L1010.5 683.187 L1009.94 683.187 L1009.38 683.187 L1008.82 683.187 L1008.26 683.187 L1007.7 683.187 L1007.14 683.187 L1006.58 683.187 L1006.02 683.187 L1005.46 683.187 L1004.91 683.187 L1004.35 683.187 L1003.79 683.187 L1003.23 683.187 L1002.67 683.187 L1002.11 683.187 L1001.55 683.187 L1000.99 683.187 L1000.43 683.187 L999.872 683.187 L999.313 683.187 L998.754 683.187 L998.194 683.187 L997.635 683.187 L997.076 683.187 L996.517 683.187 L995.957 683.187 L995.398 683.187 L994.839 683.187 L994.28 683.187 L993.72 683.187 L993.161 683.187 L992.602 683.187 L992.043 683.187 L991.483 683.187 L990.924 683.187 L990.365 683.187 L989.806 683.187 L989.246 683.187 L988.687 683.187 L988.128 683.187 L987.569 683.187 L987.009 683.187 L986.45 683.187 L985.891 683.187 L985.332 683.187 L984.772 683.187 L984.213 683.187 L983.654 683.187 L983.095 683.187 L982.535 683.187 L981.976 683.187 L981.417 683.187 L980.858 683.187 L980.298 683.187 L979.739 683.187 L979.18 683.187 L978.621 683.187 L978.061 683.187 L977.502 683.187 L976.943 683.187 L976.384 683.187 L975.824 683.187 L975.265 683.187 L974.706 683.187 L974.147 683.187 L973.587 683.187 L973.028 683.187 L972.469 683.187 L971.91 683.187 L971.35 683.187 L970.791 683.187 L970.232 683.187 L969.673 683.187 L969.113 683.187 L968.554 683.187 L967.995 683.187 L967.436 683.187 L966.876 683.187 L966.317 683.187 L965.758 683.187 L965.199 683.187 L964.639 683.187 L964.08 683.187 L963.521 683.187 L962.962 683.187 L962.402 683.187 L961.843 683.187 L961.284 683.187 L960.725 683.187 L960.165 683.187 L959.606 683.187 L959.047 683.187 L958.488 683.187 L957.928 683.187 L957.369 683.187 L956.81 683.187 L956.251 683.187 L955.691 683.187 L955.132 683.187 L954.573 683.187 L954.014 683.187 L953.454 683.187 L952.895 683.187 L952.336 683.187 L951.777 683.187 L951.217 683.187 L950.658 683.187 L950.099 683.187 L949.54 683.187 L948.98 683.187 L948.421 683.187 L947.862 683.187 L947.303 683.187 L946.743 683.187 L946.184 683.187 L945.625 683.187 L945.066 683.187 L944.506 683.187 L943.947 683.187 L943.388 683.187 L942.829 683.187 L942.269 683.187 L941.71 683.187 L941.151 683.187 L940.592 683.187 L940.032 683.187 L939.473 683.187 L938.914 683.187 L938.355 683.187 L937.795 683.187 L937.236 683.187 L936.677 683.187 L936.118 683.187 L935.558 683.187 L934.999 683.187 L934.44 683.187 L933.881 683.187 L933.321 683.187 L932.762 683.187 L932.203 683.187 L931.644 683.187 L931.084 683.187 L930.525 683.187 L929.966 683.187 L929.406 683.187 L928.847 683.187 L928.288 683.187 L927.729 683.187 L927.169 683.187 L926.61 683.187 L926.051 683.187 L925.492 683.187 L924.932 683.187 L924.373 683.187 L923.814 683.187 L923.255 683.187 L922.695 683.187 L922.136 683.187 L921.577 683.187 L921.018 683.187 L920.458 683.187 L919.899 683.187 L919.34 683.187 L918.781 683.187 L918.221 683.187 L917.662 683.187 L917.103 683.187 L916.544 683.187 L915.984 683.187 L915.425 683.187 L914.866 683.187 L914.307 683.187 L913.747 683.187 L913.188 683.187 L912.629 683.187 L912.07 683.187 L911.51 683.187 L910.951 683.187 L910.392 683.187 L909.833 683.187 L909.273 683.187 L908.714 683.187 L908.155 683.187 L907.596 683.187 L907.036 683.187 L906.477 683.187 L905.918 683.187 L905.359 683.187 L904.799 683.187 L904.24 683.187 L903.681 683.187 L903.122 683.187 L902.562 683.187 L902.003 683.187 L901.444 683.187 L900.885 683.187 L900.325 683.187 L899.766 683.187 L899.207 683.187 L898.648 683.187 L898.088 683.187 L897.529 683.187 L896.97 683.187 L896.411 683.187 L895.851 683.187 L895.292 683.187 L894.733 683.187 L894.174 683.187 L893.614 683.187 L893.055 683.187 L892.496 683.187 L891.937 683.187 L891.377 683.187 L890.818 683.187 L890.259 683.187 L889.7 683.187 L889.14 683.187 L888.581 683.187 L888.022 683.187 L887.463 683.187 L886.903 683.187 L886.344 683.187 L885.785 683.187 L885.226 683.187 L884.666 683.187 L884.107 683.187 L883.548 683.187 L882.989 683.187 L882.429 683.187 L881.87 683.187 L881.311 683.187 L880.752 683.187 L880.192 683.187 L879.633 683.187 L879.074 683.187 L878.515 683.187 L877.955 683.187 L877.396 683.187 L876.837 683.187 L876.278 683.187 L875.718 683.187 L875.159 683.187 L874.6 683.187 L874.041 683.187 L873.481 683.187 L872.922 683.187 L872.363 683.187 L871.804 683.187 L871.244 683.187 L870.685 683.187 L870.126 683.187 L869.567 683.187 L869.007 683.187 L868.448 683.187 L867.889 683.187 L867.33 683.187 L866.77 683.187 L866.211 683.187 L865.652 683.187 L865.093 683.187 L864.533 683.187 L863.974 683.187 L863.415 683.187 L862.856 683.187 L862.296 683.187 L861.737 683.187 L861.178 683.187 L860.619 683.187 L860.059 683.187 L859.5 683.187 L858.941 683.187 L858.382 683.187 L857.822 683.187 L857.263 683.187 L856.704 683.187 L856.145 683.187 L855.585 683.187 L855.026 683.187 L854.467 683.187 L853.908 683.187 L853.348 683.187 L852.789 683.187 L852.23 683.187 L851.671 683.187 L851.111 683.187 L850.552 683.187 L849.993 683.187 L849.434 683.187 L848.874 683.187 L848.315 683.187 L847.756 683.187 L847.197 683.187 L846.637 683.187 L846.078 683.187 L845.519 683.187 L844.96 683.187 L844.4 683.187 L843.841 683.187 L843.282 683.187 L842.723 683.187 L842.163 683.187 L841.604 683.187 L841.045 683.187 L840.486 683.187 L839.926 683.187 L839.367 683.187 L838.808 683.187 L838.249 683.187 L837.689 683.187 L837.13 683.187 L836.571 683.187 L836.012 683.187 L835.452 683.187 L834.893 683.187 L834.334 683.187 L833.775 683.187 L833.215 683.187 L832.656 683.187 L832.097 683.187 L831.538 683.187 L830.978 683.187 L830.419 683.187 L829.86 683.187 L829.301 683.187 L828.741 683.187 L828.182 683.187 L827.623 683.187 L827.064 683.187 L826.504 683.187 L825.945 683.187 L825.386 683.187 L824.827 683.187 L824.267 683.187 L823.708 683.187 L823.149 683.187 L822.59 683.187 L822.03 683.187 L821.471 683.187 L820.912 683.187 L820.353 683.187 L819.793 683.187 L819.234 683.187 L818.675 683.187 L818.116 683.187 L817.556 683.187 L816.997 683.187 L816.438 683.187 L815.879 683.187 L815.319 683.187 L814.76 683.187 L814.201 683.187 L813.642 683.187 L813.082 683.187 L812.523 683.187 L811.964 683.187 L811.405 683.187 L810.845 683.187 L810.286 683.187 L809.727 683.187 L809.168 683.187 L808.608 683.187 L808.049 683.187 L807.49 683.187 L806.931 683.187 L806.371 683.187 L805.812 683.187 L805.253 683.187 L804.693 683.187 L804.134 683.187 L803.575 683.187 L803.016 683.187 L802.456 683.187 L801.897 683.187 L801.338 683.187 L800.779 683.187 L800.219 683.187 L799.66 683.187 L799.101 683.187 L798.542 683.187 L797.982 683.187 L797.423 683.187 L796.864 683.187 L796.305 683.187 L795.745 683.187 L795.186 683.187 L794.627 683.187 L794.068 683.187 L793.508 683.187 L792.949 683.187 L792.39 683.187 L791.831 683.187 L791.271 683.187 L790.712 683.187 L790.153 683.187 L789.594 683.187 L789.034 683.187 L788.475 683.187 L787.916 683.187 L787.357 683.187 L786.797 683.187 L786.238 683.187 L785.679 683.187 L785.12 683.187 L784.56 683.187 L784.001 683.187 L783.442 683.187 L782.883 683.187 L782.323 683.187 L781.764 683.187 L781.205 683.187 L780.646 683.187 L780.086 683.187 L779.527 683.187 L778.968 683.187 L778.409 683.187 L777.849 683.187 L777.29 683.187 L776.731 683.187 L776.172 683.187 L775.612 683.187 L775.053 683.187 L774.494 683.187 L773.935 683.187 L773.375 683.187 L772.816 683.187 L772.257 683.187 L771.698 683.187 L771.138 683.187 L770.579 683.187 L770.02 683.187 L769.461 683.187 L768.901 683.187 L768.342 683.187 L767.783 683.187 L767.224 683.187 L766.664 683.187 L766.105 683.187 L765.546 683.187 L764.987 683.187 L764.427 683.187 L763.868 683.187 L763.309 683.187 L762.75 683.187 L762.19 683.187 L761.631 683.187 L761.072 683.187 L760.513 683.187 L759.953 683.187 L759.394 683.187 L758.835 683.187 L758.276 683.187 L757.716 683.187 L757.157 683.187 L756.598 683.187 L756.039 683.187 L755.479 683.187 L754.92 683.187 L754.361 683.187 L753.802 683.187 L753.242 683.187 L752.683 683.187 L752.124 683.187 L751.565 683.187 L751.005 683.187 L750.446 683.187 L749.887 683.187 L749.328 683.187 L748.768 683.187 L748.209 683.187 L747.65 683.187 L747.091 683.187 L746.531 683.187 L745.972 683.187 L745.413 683.187 L744.854 683.187 L744.294 683.187 L743.735 683.187 L743.176 683.187 L742.617 683.187 L742.057 683.187 L741.498 683.187 L740.939 683.187 L740.38 683.187 L739.82 683.187 L739.261 683.187 L738.702 683.187 L738.143 683.187 L737.583 683.187 L737.024 683.187 L736.465 683.187 L735.906 683.187 L735.346 683.187 L734.787 683.187 L734.228 683.187 L733.669 683.187 L733.109 683.187 L732.55 683.187 L731.991 683.187 L731.432 683.187 L730.872 683.187 L730.313 683.187 L729.754 683.187 L729.195 683.187 L728.635 683.187 L728.076 683.187 L727.517 683.187 L726.958 683.187 L726.398 683.187 L725.839 683.187 L725.28 683.187 L724.721 683.187 L724.161 683.187 L723.602 683.187 L723.043 683.187 L722.484 683.187 L721.924 683.187 L721.365 683.187 L720.806 683.187 L720.247 683.187  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.186 720.806,684.186 721.365,684.186 721.924,684.186 722.484,684.186 723.043,684.186 723.602,684.186 724.161,684.186 724.721,684.186 725.28,684.186 725.839,684.186 726.398,684.186 726.958,684.186 727.517,684.186 728.076,684.186 728.635,684.186 729.195,684.186 729.754,684.186 730.313,684.186 730.872,684.186 731.432,684.186 731.991,684.186 732.55,684.186 733.109,684.186 733.669,684.186 734.228,684.186 734.787,684.186 735.346,684.186 735.906,684.186 736.465,684.186 737.024,684.186 737.583,684.186 738.143,684.186 738.702,684.186 739.261,684.186 739.82,684.186 740.38,684.186 740.939,684.186 741.498,684.186 742.057,684.186 742.617,684.186 743.176,684.186 743.735,684.186 744.294,684.186 744.854,684.186 745.413,684.186 745.972,684.186 746.531,684.186 747.091,684.186 747.65,684.186 748.209,684.186 748.768,684.186 749.328,684.186 749.887,684.186 750.446,684.186 751.005,684.186 751.565,684.186 752.124,684.186 752.683,684.186 753.242,684.186 753.802,684.186 754.361,684.186 754.92,684.186 755.479,684.186 756.039,684.186 756.598,684.186 757.157,684.186 757.716,684.186 758.276,684.186 758.835,684.186 759.394,684.186 759.953,684.186 760.513,684.186 761.072,684.186 761.631,684.186 762.19,684.186 762.75,684.186 763.309,684.186 763.868,684.186 764.427,684.186 764.987,684.186 765.546,684.186 766.105,684.186 766.664,684.186 767.224,684.186 767.783,684.186 768.342,684.186 768.901,684.186 769.461,684.186 770.02,684.186 770.579,684.186 771.138,684.186 771.698,684.186 772.257,684.186 772.816,684.186 773.375,684.186 773.935,684.186 774.494,684.186 775.053,684.186 775.612,684.186 776.172,684.186 776.731,684.186 777.29,684.186 777.849,684.186 778.409,684.186 778.968,684.186 779.527,684.186 780.086,684.186 780.646,684.186 781.205,684.186 781.764,684.186 782.323,684.186 782.883,684.186 783.442,684.186 784.001,684.186 784.56,684.186 785.12,684.186 785.679,684.186 786.238,684.186 786.797,684.186 787.357,684.186 787.916,684.186 788.475,684.186 789.034,684.186 789.594,684.186 790.153,684.186 790.712,684.186 791.271,684.186 791.831,684.186 792.39,684.186 792.949,684.186 793.508,684.186 794.068,684.186 794.627,684.186 795.186,684.186 795.745,684.186 796.305,684.186 796.864,684.186 797.423,684.186 797.982,684.186 798.542,684.186 799.101,684.186 799.66,684.186 800.219,684.186 800.779,684.186 801.338,684.186 801.897,684.186 802.456,684.186 803.016,684.186 803.575,684.186 804.134,684.186 804.693,684.186 805.253,684.186 805.812,684.186 806.371,684.186 806.931,684.186 807.49,684.186 808.049,684.186 808.608,684.186 809.168,684.186 809.727,684.186 810.286,684.186 810.845,684.186 811.405,684.186 811.964,684.186 812.523,684.186 813.082,684.186 813.642,684.186 814.201,684.186 814.76,684.186 815.319,684.186 815.879,684.186 816.438,684.186 816.997,684.186 817.556,684.186 818.116,684.186 818.675,684.186 819.234,684.186 819.793,684.186 820.353,684.186 820.912,684.186 821.471,684.186 822.03,684.186 822.59,684.186 823.149,684.186 823.708,684.186 824.267,684.186 824.827,684.186 825.386,684.186 825.945,684.186 826.504,684.186 827.064,684.186 827.623,684.186 828.182,684.186 828.741,684.186 829.301,684.186 829.86,684.186 830.419,684.186 830.978,684.186 831.538,684.186 832.097,684.186 832.656,684.186 833.215,684.186 833.775,684.186 834.334,684.186 834.893,684.186 835.452,684.186 836.012,684.186 836.571,684.186 837.13,684.186 837.689,684.186 838.249,684.186 838.808,684.186 839.367,684.186 839.926,684.186 840.486,684.186 841.045,684.186 841.604,684.186 842.163,684.186 842.723,684.186 843.282,684.186 843.841,684.186 844.4,684.186 844.96,684.186 845.519,684.186 846.078,684.186 846.637,684.186 847.197,684.186 847.756,684.186 848.315,684.186 848.874,684.186 849.434,684.186 849.993,684.186 850.552,684.186 851.111,684.186 851.671,684.186 852.23,684.186 852.789,684.186 853.348,684.186 853.908,684.186 854.467,684.186 855.026,684.186 855.585,684.186 856.145,684.186 856.704,684.186 857.263,684.186 857.822,684.186 858.382,684.186 858.941,684.186 859.5,684.186 860.059,684.186 860.619,684.186 861.178,684.186 861.737,684.186 862.296,684.186 862.856,684.186 863.415,684.186 863.974,684.186 864.533,684.186 865.093,684.186 865.652,684.186 866.211,684.186 866.77,684.186 867.33,684.186 867.889,684.186 868.448,684.186 869.007,684.186 869.567,684.186 870.126,684.186 870.685,684.186 871.244,684.186 871.804,684.186 872.363,684.186 872.922,684.186 873.481,684.186 874.041,684.186 874.6,684.186 875.159,684.186 875.718,684.186 876.278,684.186 876.837,684.186 877.396,684.186 877.955,684.186 878.515,684.186 879.074,684.186 879.633,684.186 880.192,684.186 880.752,684.186 881.311,684.186 881.87,684.186 882.429,684.186 882.989,684.186 883.548,684.186 884.107,684.186 884.666,684.186 885.226,684.186 885.785,684.186 886.344,684.186 886.903,684.186 887.463,684.186 888.022,684.186 888.581,684.186 889.14,684.186 889.7,684.186 890.259,684.186 890.818,684.186 891.377,684.186 891.937,684.186 892.496,684.186 893.055,684.186 893.614,684.186 894.174,684.186 894.733,684.186 895.292,684.186 895.851,684.186 896.411,684.186 896.97,684.186 897.529,684.186 898.088,684.186 898.648,684.186 899.207,684.186 899.766,684.186 900.325,684.186 900.885,684.186 901.444,684.186 902.003,684.186 902.562,684.186 903.122,684.186 903.681,684.186 904.24,684.186 904.799,684.186 905.359,684.186 905.918,684.186 906.477,684.186 907.036,684.186 907.596,684.186 908.155,684.186 908.714,684.186 909.273,684.186 909.833,684.186 910.392,684.186 910.951,684.186 911.51,684.186 912.07,684.186 912.629,684.186 913.188,684.186 913.747,684.186 914.307,684.186 914.866,684.186 915.425,684.186 915.984,684.186 916.544,684.186 917.103,684.186 917.662,684.186 918.221,684.186 918.781,684.186 919.34,684.186 919.899,684.186 920.458,684.186 921.018,684.186 921.577,684.186 922.136,684.186 922.695,684.186 923.255,684.186 923.814,684.186 924.373,684.186 924.932,684.186 925.492,684.186 926.051,684.186 926.61,684.186 927.169,684.186 927.729,684.186 928.288,684.186 928.847,684.186 929.406,684.186 929.966,684.186 930.525,684.186 931.084,684.186 931.644,684.186 932.203,684.186 932.762,684.186 933.321,684.186 933.881,684.186 934.44,684.186 934.999,684.186 935.558,684.186 936.118,684.186 936.677,684.186 937.236,684.186 937.795,684.186 938.355,684.186 938.914,684.186 939.473,684.186 940.032,684.186 940.592,684.186 941.151,684.186 941.71,684.186 942.269,684.186 942.829,684.186 943.388,684.186 943.947,684.186 944.506,684.186 945.066,684.186 945.625,684.186 946.184,684.186 946.743,684.186 947.303,684.186 947.862,684.186 948.421,684.186 948.98,684.186 949.54,684.186 950.099,684.186 950.658,684.186 951.217,684.186 951.777,684.186 952.336,684.186 952.895,684.186 953.454,684.186 954.014,684.186 954.573,684.186 955.132,684.186 955.691,684.186 956.251,684.186 956.81,684.186 957.369,684.186 957.928,684.186 958.488,684.186 959.047,684.186 959.606,684.186 960.165,684.186 960.725,684.186 961.284,684.186 961.843,684.186 962.402,684.186 962.962,684.186 963.521,684.186 964.08,684.186 964.639,684.186 965.199,684.186 965.758,684.186 966.317,684.186 966.876,684.186 967.436,684.186 967.995,684.186 968.554,684.186 969.113,684.186 969.673,684.186 970.232,684.186 970.791,684.186 971.35,684.186 971.91,684.186 972.469,684.186 973.028,684.186 973.587,684.186 974.147,684.186 974.706,684.186 975.265,684.186 975.824,684.186 976.384,684.186 976.943,684.186 977.502,684.186 978.061,684.186 978.621,684.186 979.18,684.186 979.739,684.186 980.298,684.186 980.858,684.186 981.417,684.186 981.976,684.186 982.535,684.186 983.095,684.186 983.654,684.186 984.213,684.186 984.772,684.186 985.332,684.186 985.891,684.186 986.45,684.186 987.009,684.186 987.569,684.186 988.128,684.186 988.687,684.186 989.246,684.186 989.806,684.186 990.365,684.186 990.924,684.186 991.483,684.186 992.043,684.186 992.602,684.186 993.161,684.186 993.72,684.186 994.28,684.186 994.839,684.186 995.398,684.186 995.957,684.186 996.517,684.186 997.076,684.186 997.635,684.186 998.194,684.186 998.754,684.186 999.313,684.186 999.872,684.186 1000.43,684.186 1000.99,684.186 1001.55,684.186 1002.11,684.186 1002.67,684.186 1003.23,684.186 1003.79,684.186 1004.35,684.186 1004.91,684.186 1005.46,684.186 1006.02,684.186 1006.58,684.186 1007.14,684.186 1007.7,684.186 1008.26,684.186 1008.82,684.186 1009.38,684.186 1009.94,684.186 1010.5,684.186 1011.06,684.186 1011.62,684.186 1012.18,684.186 1012.73,684.186 1013.29,684.186 1013.85,684.186 1014.41,684.186 1014.97,684.186 1015.53,684.186 1016.09,684.186 1016.65,684.186 1017.21,684.186 1017.77,684.186 1018.33,684.186 1018.89,684.186 1019.45,684.186 1020.01,684.186 1020.56,684.186 1021.12,684.186 1021.68,684.186 1022.24,684.186 1022.8,684.186 1023.36,684.186 1023.92,684.186 1024.48,684.186 1025.04,684.186 1025.6,684.186 1026.16,684.186 1026.72,684.186 1027.28,684.186 1027.83,684.186 1028.39,684.186 1028.95,684.186 1029.51,684.186 1030.07,684.186 1030.63,684.186 1031.19,684.186 1031.75,684.186 1032.31,684.186 1032.87,684.186 1033.43,684.186 1033.99,684.186 1034.55,684.186 1035.1,684.186 1035.66,684.186 1036.22,684.186 1036.78,684.186 1037.34,684.186 1037.9,684.186 1038.46,684.186 1039.02,684.186 1039.58,684.186 1040.14,684.186 1040.7,684.186 1041.26,684.186 1041.82,684.186 1042.38,684.186 1042.93,684.186 1043.49,684.186 1044.05,684.186 1044.61,684.186 1045.17,684.186 1045.73,684.186 1046.29,684.186 1046.85,684.186 1047.41,684.186 1047.97,684.186 1048.53,684.186 1049.09,684.186 1049.65,684.186 1050.2,684.186 1050.76,684.186 1051.32,684.186 1051.88,684.186 1052.44,684.186 1053,684.186 1053.56,684.186 1054.12,684.186 1054.68,684.186 1055.24,684.186 1055.8,684.186 1056.36,684.186 1056.92,684.186 1057.48,684.186 1058.03,684.186 1058.59,684.186 1059.15,684.186 1059.71,684.186 1060.27,684.186 1060.83,684.186 1061.39,684.186 1061.95,684.186 1062.51,684.186 1063.07,684.186 1063.63,684.186 1064.19,684.186 1064.75,684.186 1065.3,684.186 1065.86,684.186 1066.42,684.186 1066.98,684.186 1067.54,684.186 1068.1,684.186 1068.66,684.186 1069.22,684.186 1069.78,684.186 1070.34,684.186 1070.9,684.186 1071.46,684.186 1072.02,684.186 1072.57,684.186 1073.13,684.186 1073.69,684.186 1074.25,684.186 1074.81,684.186 1075.37,684.186 1075.93,684.186 1076.49,684.186 1077.05,684.186 1077.61,684.186 1078.17,684.186 1078.73,684.186 1079.29,684.186 1079.85,684.186 1080.4,684.186 1080.96,684.186 1081.52,684.186 1082.08,684.186 1082.64,684.186 1083.2,684.186 1083.76,684.186 1084.32,684.186 1084.88,684.186 1085.44,684.186 1086,684.186 1086.56,684.186 1087.12,684.186 1087.67,684.186 1088.23,684.186 1088.79,684.186 1089.35,684.186 1089.91,684.186 1090.47,684.186 1091.03,684.186 1091.59,684.186 1092.15,684.186 1092.71,684.186 1093.27,684.186 1093.83,684.186 1094.39,684.186 1094.94,684.186 1095.5,684.186 1096.06,684.186 1096.62,684.186 1097.18,684.186 1097.74,684.186 1098.3,684.186 1098.86,684.186 1099.42,684.186 1099.98,684.186 1100.54,684.186 1101.1,684.186 1101.66,684.186 1102.22,684.186 1102.77,684.186 1103.33,684.186 1103.89,684.186 1104.45,684.186 1105.01,684.186 1105.57,684.186 1106.13,684.186 1106.69,684.186 1107.25,684.186 1107.81,684.186 1108.37,684.186 1108.93,684.186 1109.49,684.186 1110.04,684.186 1110.6,684.186 1111.16,684.186 1111.72,684.186 1112.28,684.186 1112.84,684.186 1113.4,684.186 1113.96,684.186 1114.52,684.186 1115.08,684.186 1115.64,684.186 1116.2,684.186 1116.76,684.186 1117.31,684.186 1117.87,684.186 1118.43,684.186 1118.99,684.186 1119.55,684.186 1120.11,684.186 1120.67,684.186 1121.23,684.186 1121.79,684.186 1122.35,684.186 1122.91,684.186 1123.47,684.186 1124.03,684.186 1124.59,684.186 1125.14,684.186 1125.7,684.186 1126.26,684.186 1126.82,684.186 1127.38,684.186 1127.94,684.186 1128.5,684.186 1129.06,684.186 1129.62,684.186 1130.18,684.186 1130.74,684.186 1131.3,684.186 1131.86,684.186 1132.41,684.186 1132.97,684.186 1133.53,684.186 1134.09,684.186 1134.65,684.186 1135.21,684.186 1135.77,684.186 1136.33,684.186 1136.89,684.186 1137.45,684.186 1138.01,684.186 1138.57,684.186 1139.13,684.186 1139.68,684.186 1140.24,684.186 1140.8,684.186 1141.36,684.186 1141.92,684.186 1142.48,684.186 1143.04,684.186 1143.6,684.186 1144.16,684.186 1144.72,684.186 1145.28,684.186 1145.84,684.186 1146.4,684.186 1146.96,684.186 1147.51,684.186 1148.07,684.186 1148.63,684.186 1149.19,684.186 1149.75,684.186 1150.31,684.186 1150.87,684.186 1151.43,684.186 1151.99,684.186 1152.55,684.186 1153.11,684.186 1153.67,684.186 1154.23,684.186 1154.78,684.186 1155.34,684.186 1155.9,684.186 1156.46,684.186 1157.02,684.186 1157.58,684.186 1158.14,684.186 1158.7,684.186 1159.26,684.186 1159.82,684.186 1160.38,684.186 1160.94,684.186 1161.5,684.186 1162.05,684.186 1162.61,684.186 1163.17,684.186 1163.73,684.186 1164.29,684.186 1164.85,684.186 1165.41,684.186 1165.97,684.186 1166.53,684.186 1167.09,684.186 1167.65,684.186 1168.21,684.186 1168.77,684.186 1169.33,684.186 1169.88,684.186 1170.44,684.186 1171,684.186 1171.56,684.186 1172.12,684.186 1172.68,684.186 1173.24,684.186 1173.8,684.186 1174.36,684.186 1174.92,684.186 1175.48,684.186 1176.04,684.186 1176.6,684.186 1177.15,684.186 1177.71,684.186 1178.27,684.186 1178.83,684.186 1179.39,684.186 1179.95,684.186 1180.51,684.186 1181.07,684.186 1181.63,684.186 1182.19,684.186 1182.75,684.186 1183.31,684.186 1183.87,684.186 1184.43,684.186 1184.98,684.186 1185.54,684.186 1186.1,684.186 1186.66,684.186 1187.22,684.186 1187.78,684.186 1188.34,684.186 1188.9,684.186 1189.46,684.186 1190.02,684.186 1190.58,684.186 1191.14,684.186 1191.7,684.186 1192.25,684.186 1192.81,684.186 1193.37,684.186 1193.93,684.186 1194.49,684.186 1195.05,684.186 1195.61,684.186 1196.17,684.186 1196.73,684.186 1197.29,684.186 1197.85,684.186 1198.41,684.186 1198.97,684.186 1199.52,684.186 1200.08,684.186 1200.64,684.186 1201.2,684.186 1201.76,684.186 1202.32,684.186 1202.88,684.186 1203.44,684.186 1204,684.186 1204.56,684.186 1205.12,684.186 1205.68,684.186 1206.24,684.186 1206.8,684.186 1207.35,684.186 1207.91,684.186 1208.47,684.186 1209.03,684.186 1209.59,684.186 1210.15,684.186 1210.71,684.186 1211.27,684.186 1211.83,684.186 1212.39,684.186 1212.95,684.186 1213.51,684.186 1214.07,684.186 1214.62,684.186 1215.18,684.186 1215.74,684.186 1216.3,684.186 1216.86,684.186 1217.42,684.186 1217.98,684.186 1218.54,684.186 1219.1,684.186 1219.66,684.186 1220.22,684.186 1220.78,684.186 1221.34,684.186 1221.89,684.186 1222.45,684.186 1223.01,684.186 1223.57,684.186 1224.13,684.186 1224.69,684.186 1225.25,684.186 1225.81,684.186 1226.37,684.186 1226.93,684.186 1227.49,684.186 1228.05,684.186 1228.61,684.186 1229.17,684.186 1229.72,684.186 1230.28,684.186 1230.84,684.186 1231.4,684.186 1231.96,684.186 1232.52,684.186 1233.08,684.186 1233.64,684.186 1234.2,684.186 1234.76,684.186 1235.32,684.186 1235.88,684.186 1236.44,684.186 1236.99,684.186 1237.55,684.186 1238.11,684.186 1238.67,684.186 1239.23,684.186 1239.79,684.186 1240.35,684.186 1240.91,684.186 1241.47,684.186 1242.03,684.186 1242.59,684.186 1243.15,684.186 1243.71,684.186 1244.26,684.186 1244.82,684.186 1245.38,684.186 1245.94,684.186 1246.5,684.186 1247.06,684.186 1247.62,684.186 1248.18,684.186 1248.74,684.186 1249.3,684.186 1249.86,684.186 1250.42,684.186 1250.98,684.186 1251.54,684.186 1252.09,684.186 1252.65,684.186 1253.21,684.186 1253.77,684.186 1254.33,684.186 1254.89,684.186 1255.45,684.186 1256.01,684.186 1256.57,684.186 1257.13,684.186 1257.69,684.186 1258.25,684.186 1258.81,684.186 1259.36,684.186 1259.92,684.186 1260.48,684.186 1261.04,684.186 1261.6,684.186 1262.16,684.186 1262.72,684.186 1263.28,684.186 1263.84,684.186 1264.4,684.186 1264.96,684.186 1265.52,684.186 1266.08,684.186 1266.63,684.186 1267.19,684.186 1267.75,684.186 1268.31,684.186 1268.87,684.186 1269.43,684.186 1269.99,684.186 1270.55,684.186 1271.11,684.186 1271.67,684.186 1272.23,684.186 1272.79,684.186 1273.35,684.186 1273.91,684.186 1274.46,684.186 1275.02,684.186 1275.58,684.186 1276.14,684.186 1276.7,684.186 1277.26,684.186 1277.82,684.186 1278.38,684.186 1278.94,684.186 1279.5,684.186 1280.06,684.186 1280.62,684.186 1281.18,684.186 1281.73,684.186 1282.29,684.186 1282.85,684.186 1283.41,684.186 1283.97,684.186 1284.53,684.186 1285.09,684.186 1285.65,684.186 1286.21,684.186 1286.77,684.186 1287.33,684.186 1287.89,684.186 1288.45,684.186 1289,684.186 1289.56,684.186 1290.12,684.186 1290.68,684.186 1291.24,684.186 1291.8,684.186 1292.36,684.186 1292.92,684.186 1293.48,684.186 1294.04,684.186 1294.6,684.186 1295.16,684.186 1295.72,684.186 1296.28,684.186 1296.83,684.186 1297.39,684.186 1297.95,684.186 1298.51,684.186 1299.07,684.186 1299.63,684.186 1300.19,684.186 1300.75,684.186 1301.31,684.186 1301.87,684.186 1302.43,684.186 1302.99,684.186 1303.55,684.186 1304.1,684.186 1304.66,684.186 1305.22,684.186 1305.78,684.186 1306.34,684.186 1306.9,684.186 1307.46,684.186 1308.02,684.186 1308.58,684.186 1309.14,684.186 1309.7,684.186 1310.26,684.186 1310.82,684.186 1311.38,684.186 1311.93,684.186 1312.49,684.186 1313.05,684.186 1313.61,684.186 1314.17,684.186 1314.73,684.186 1315.29,684.186 1315.85,684.186 1316.41,684.186 1316.97,684.186 1317.53,684.186 1318.09,684.186 1318.65,684.186 1319.2,684.186 1319.76,684.186 1320.32,684.186 1320.88,684.186 1321.44,684.186 1322,684.186 1322.56,684.186 1323.12,684.186 1323.68,684.186 1324.24,684.186 1324.8,684.186 1325.36,684.186 1325.92,684.186 1326.47,684.186 1327.03,684.186 1327.59,684.186 1328.15,684.186 1328.71,684.186 1329.27,684.186 1329.83,684.186 1330.39,684.186 1330.95,684.186 1331.51,684.186 1332.07,684.186 1332.63,684.186 1333.19,684.186 1333.75,684.186 1334.3,684.186 1334.86,684.186 1335.42,684.186 1335.98,684.186 1336.54,684.186 1337.1,684.186 1337.66,684.186 1338.22,684.186 1338.78,684.186 1339.34,684.186 1339.9,684.186 1340.46,684.186 1341.02,684.186 1341.57,684.186 1342.13,684.186 1342.69,684.186 1343.25,684.186 1343.81,684.186 1344.37,684.186 1344.93,684.186 1345.49,684.186 1346.05,684.186 1346.61,684.186 1347.17,684.186 1347.73,684.186 1348.29,684.186 1348.84,684.186 1349.4,684.186 1349.96,684.186 1350.52,684.186 1351.08,684.186 1351.64,684.186 1352.2,684.186 1352.76,684.186 1353.32,684.186 1353.88,684.186 1354.44,684.186 1355,684.186 1355.56,684.186 1356.12,684.186 1356.67,684.186 1357.23,684.186 1357.79,684.186 1358.35,684.186 1358.91,684.186 1359.47,684.186 1360.03,684.186 1360.59,684.186 1361.15,684.186 1361.71,684.186 1362.27,684.186 1362.83,684.186 1363.39,684.186 1363.94,684.186 1364.5,684.186 1365.06,684.186 1365.62,684.186 1366.18,684.186 1366.74,684.186 1367.3,684.186 1367.86,684.186 1368.42,684.186 1368.98,684.186 1369.54,684.186 1370.1,684.186 1370.66,684.186 1371.21,684.186 1371.77,684.186 1372.33,684.186 1372.89,684.186 1373.45,684.186 1374.01,684.186 1374.57,684.186 1375.13,684.186 1375.69,684.186 1376.25,684.186 1376.81,684.186 1377.37,684.186 1377.93,684.186 1378.49,684.186 1379.04,684.186 1379.6,684.186 1380.16,684.186 1380.72,684.186 1381.28,684.186 1381.84,684.186 1382.4,684.186 1382.96,684.186 1383.52,684.186 1384.08,684.186 1384.64,684.186 1385.2,684.186 1385.76,684.186 1386.31,684.186 1386.87,684.186 1387.43,684.186 1387.99,684.186 1388.55,684.186 1389.11,684.186 1389.67,684.186 1390.23,684.186 1390.79,684.186 1391.35,684.186 1391.91,684.186 1392.47,684.186 1393.03,684.186 1393.58,684.186 1394.14,684.186 1394.7,684.186 1395.26,684.186 1395.82,684.186 1396.38,684.186 1396.94,684.186 1397.5,684.186 1398.06,684.186 1398.62,684.186 1399.18,684.186 1399.74,684.186 1400.3,684.186 1400.86,684.186 1401.41,684.186 1401.97,684.186 1402.53,684.186 1403.09,684.186 1403.65,684.186 1404.21,684.186 1404.77,684.186 1405.33,684.186 1405.89,684.186 1406.45,684.186 1407.01,684.186 1407.57,684.186 1408.13,684.186 1408.68,684.186 1409.24,684.186 1409.8,684.186 1410.36,684.186 1410.92,684.186 1411.48,684.186 1412.04,684.186 1412.6,684.186 1413.16,684.186 1413.72,684.186 1414.28,684.186 1414.84,684.186 1415.4,684.186 1415.95,684.186 1416.51,684.186 1417.07,684.186 1417.63,684.186 1418.19,684.186 1418.75,684.186 1419.31,684.186 1419.87,684.186 1420.43,684.186 1420.99,684.186 1421.55,684.186 1422.11,684.186 1422.67,684.186 1423.23,684.186 1423.78,684.186 1424.34,684.186 1424.9,684.186 1425.46,684.186 1426.02,684.186 1426.58,684.186 1427.14,684.186 1427.7,684.186 1428.26,684.186 1428.82,684.186 1429.38,684.186 1429.94,684.186 1430.5,684.186 1431.05,684.186 1431.61,684.186 1432.17,684.186 1432.73,684.186 1433.29,684.186 1433.85,684.186 1434.41,684.186 1434.97,684.186 1435.53,684.186 1436.09,684.186 1436.65,684.186 1437.21,684.186 1437.77,684.186 1438.33,684.186 1438.88,684.186 1439.44,684.186 1440,684.186 1440.56,684.186 1441.12,684.186 1441.68,684.186 1442.24,684.186 1442.8,684.186 1443.36,684.186 1443.92,684.186 1444.48,684.186 1445.04,684.186 1445.6,684.186 1446.15,684.186 1446.71,684.186 1447.27,684.186 1447.83,684.186 1448.39,684.186 1448.95,684.186 1449.51,684.186 1450.07,684.186 1450.63,684.186 1451.19,684.186 1451.75,684.186 1452.31,684.186 1452.87,684.186 1453.42,684.186 1453.98,684.186 1454.54,684.186 1455.1,684.186 1455.66,684.186 1456.22,684.186 1456.78,684.186 1457.34,684.186 1457.9,684.186 1458.46,684.186 1459.02,684.186 1459.58,684.186 1460.14,684.186 1460.7,684.186 1461.25,684.186 1461.81,684.186 1462.37,684.186 1462.93,684.186 1463.49,684.186 1464.05,684.186 1464.61,684.186 1465.17,684.186 1465.73,684.186 1466.29,684.186 1466.85,684.186 1467.41,684.186 1467.97,684.186 1468.52,684.186 1469.08,684.186 1469.64,684.186 1470.2,684.186 1470.76,684.186 1471.32,684.186 1471.88,684.186 1472.44,684.186 1473,684.186 1473.56,684.186 1474.12,684.186 1474.68,684.186 1475.24,684.186 1475.79,684.186 1476.35,684.186 1476.91,684.186 1477.47,684.186 1478.03,684.186 1478.59,684.186 1479.15,684.186 1479.71,684.186 1480.27,684.186 1480.83,684.186 1481.39,684.186 1481.95,684.186 1482.51,684.186 1483.07,684.186 1483.62,684.186 1484.18,684.186 1484.74,684.186 1485.3,684.186 1485.86,684.186 1486.42,684.186 1486.98,684.186 1487.54,684.186 1488.1,684.186 1488.66,684.186 1489.22,684.186 1489.78,684.186 1490.34,684.186 1490.89,684.186 1491.45,684.186 1492.01,684.186 1492.57,684.186 1493.13,684.186 1493.69,684.186 1494.25,684.186 1494.81,684.186 1495.37,684.186 1495.93,684.186 1496.49,684.186 1497.05,684.186 1497.61,684.186 1498.16,684.186 1498.72,684.186 1499.28,684.186 1499.84,684.186 1500.4,684.186 1500.96,684.186 1501.52,684.186 1502.08,684.186 1502.64,684.186 1503.2,684.186 1503.76,684.186 1504.32,684.186 1504.88,684.186 1505.44,684.186 1505.99,684.186 1506.55,684.186 1507.11,684.186 1507.67,684.186 1508.23,684.186 1508.79,684.186 1509.35,684.186 1509.91,684.186 1510.47,684.186 1511.03,684.186 1511.59,684.186 1512.15,684.186 1512.71,684.186 1513.26,684.186 1513.82,684.186 1514.38,684.186 1514.94,684.186 1515.5,684.186 1516.06,684.186 1516.62,684.186 1517.18,684.186 1517.74,684.186 1518.3,684.186 1518.86,684.186 1519.42,684.186 1519.98,684.186 1520.53,684.186 1521.09,684.186 1521.65,684.186 1522.21,684.186 1522.77,684.186 1523.33,684.186 1523.89,684.186 1524.45,684.186 1525.01,684.186 1525.57,684.186 1526.13,684.186 1526.69,684.186 1527.25,684.186 1527.81,684.186 1528.36,684.186 1528.92,684.186 1529.48,684.186 1530.04,684.186 1530.6,684.186 1531.16,684.186 1531.72,684.186 1532.28,684.186 1532.84,684.186 1533.4,684.186 1533.96,684.186 1534.52,684.186 1535.08,684.186 1535.63,684.186 1536.19,684.186 1536.75,684.186 1537.31,684.186 1537.87,684.186 1538.43,684.186 1538.99,684.186 1539.55,684.186 1540.11,684.186 1540.67,684.186 1541.23,684.186 1541.79,684.186 1542.35,684.186 1542.9,684.186 1543.46,684.186 1544.02,684.186 1544.58,684.186 1545.14,684.186 1545.7,684.186 1546.26,684.186 1546.82,684.186 1547.38,684.186 1547.94,684.186 1548.5,684.186 1549.06,684.186 1549.62,684.186 1550.18,684.186 1550.73,684.186 1551.29,684.186 1551.85,684.186 1552.41,684.186 1552.97,684.186 1553.53,684.186 1554.09,684.186 1554.65,684.186 1555.21,684.186 1555.77,684.186 1556.33,684.186 1556.89,684.186 1557.45,684.186 1558,684.186 1558.56,684.186 1559.12,684.186 1559.68,684.186 1560.24,684.186 1560.8,684.186 1561.36,684.186 1561.92,684.186 1562.48,684.186 1563.04,684.186 1563.6,684.186 1564.16,684.186 1564.72,684.186 1565.28,684.186 1565.83,684.186 1566.39,684.186 1566.95,684.186 1567.51,684.186 1568.07,684.186 1568.63,684.186 1569.19,684.186 1569.75,684.186 1570.31,684.186 1570.87,684.186 1571.43,684.186 1571.99,684.186 1572.55,684.186 1573.1,684.186 1573.66,684.186 1574.22,684.186 1574.78,684.186 1575.34,684.186 1575.9,684.186 1576.46,684.186 1577.02,684.186 1577.58,684.186 1578.14,684.186 1578.7,684.186 1579.26,684.186 1579.82,684.186 1580.37,684.186 1580.93,684.186 1581.49,684.186 1582.05,684.186 1582.61,684.186 1583.17,684.186 1583.73,684.186 1584.29,684.186 1584.85,684.186 1585.41,684.186 1585.97,684.186 1586.53,684.186 1587.09,684.186 1587.65,684.186 1588.2,684.186 1588.76,684.186 1589.32,684.186 1589.88,684.186 1590.44,684.186 1591,684.186 1591.56,684.186 1592.12,684.186 1592.68,684.186 1593.24,684.186 1593.8,684.186 1594.36,684.186 1594.92,684.186 1595.47,684.186 1596.03,684.186 1596.59,684.186 1597.15,684.186 1597.71,684.186 1598.27,684.186 1598.83,684.186 1599.39,684.186 1599.95,684.186 1600.51,684.186 1601.07,684.186 1601.63,684.186 1602.19,684.186 1602.74,684.186 1603.3,684.186 1603.86,684.186 1604.42,684.186 1604.98,684.186 1605.54,684.186 1606.1,684.186 1606.66,684.186 1607.22,684.186 1607.78,684.186 1608.34,684.186 1608.9,684.186 1609.46,684.186 1610.02,684.186 1610.57,684.186 1611.13,684.186 1611.69,684.186 1612.25,684.186 1612.81,684.186 1613.37,684.186 1613.93,684.186 1614.49,684.186 1615.05,684.186 1615.61,684.186 1616.17,684.186 1616.73,684.186 1617.29,684.186 1617.84,684.186 1618.4,684.186 1618.96,684.186 1619.52,684.186 1620.08,684.186 1620.64,684.186 1621.2,684.186 1621.76,684.186 1622.32,684.186 1622.88,684.186 1623.44,684.186 1624,684.186 1624.56,684.186 1625.11,684.186 1625.67,684.186 1626.23,684.186 1626.79,684.186 1627.35,684.186 1627.91,684.186 1628.47,684.186 1629.03,684.186 1629.59,684.186 1630.15,684.186 1630.71,684.186 1631.27,684.186 1631.83,684.186 1632.39,684.186 1632.94,684.186 1633.5,684.186 1634.06,684.186 1634.62,684.186 1635.18,684.186 1635.74,684.186 1636.3,684.186 1636.86,684.186 1637.42,684.186 1637.98,684.186 1638.54,684.186 1639.1,684.186 1639.66,684.186 1640.21,684.186 1640.77,684.186 1641.33,684.186 1641.89,684.186 1642.45,684.186 1643.01,684.186 1643.57,684.186 1644.13,684.186 1644.69,684.186 1645.25,684.186 1645.81,684.186 1646.37,684.186 1646.93,684.186 1647.48,684.186 1648.04,684.186 1648.6,684.186 1649.16,684.186 1649.72,684.186 1650.28,684.186 1650.84,684.186 1651.4,684.186 1651.96,684.186 1652.52,684.186 1653.08,684.186 1653.64,684.186 1654.2,684.186 1654.76,684.186 1655.31,684.186 1655.87,684.186 1656.43,684.186 1656.99,684.186 1657.55,684.186 1658.11,684.186 1658.67,684.186 1659.23,684.186 1659.79,684.186 1660.35,684.186 1660.91,684.186 1661.47,684.186 1662.03,684.186 1662.58,684.186 1663.14,684.186 1663.7,684.186 1664.26,684.186 1664.82,684.186 1665.38,684.186 1665.94,684.186 1666.5,684.186 1667.06,684.186 1667.62,684.186 1668.18,684.186 1668.74,684.186 1669.3,684.186 1669.85,684.186 1670.41,684.186 1670.97,684.186 1671.53,684.186 1672.09,684.186 1672.65,684.186 1673.21,684.186 1673.77,684.186 1674.33,684.186 1674.89,684.186 1675.45,684.186 1676.01,684.186 1676.57,684.186 1677.13,684.186 1677.68,684.186 1678.24,684.186 1678.8,684.186 1679.36,684.186 1679.92,684.186 1680.48,684.186 1681.04,684.186 1681.6,684.186 1682.16,684.186 1682.72,684.186 1683.28,684.186 1683.84,684.186 1684.4,684.186 1684.95,684.186 1685.51,684.186 1686.07,684.186 1686.63,684.186 1687.19,684.186 1687.75,684.186 1688.31,684.186 1688.87,684.186 1689.43,684.186 1689.99,684.186 1690.55,684.186 1691.11,684.186 1691.67,684.186 1692.23,684.186 1692.78,684.186 1693.34,684.186 1693.9,684.186 1694.46,684.186 1695.02,684.186 1695.58,684.186 1696.14,684.186 1696.7,684.186 1697.26,684.186 1697.82,684.186 1698.38,684.186 1698.94,684.186 1699.5,684.186 1700.05,684.186 1700.61,684.186 1701.17,684.186 1701.73,684.186 1702.29,684.186 1702.85,684.186 1703.41,684.186 1703.97,684.186 1704.53,684.186 1705.09,684.186 1705.65,684.186 1706.21,684.186 1706.77,684.186 1707.32,684.186 1707.88,684.186 1708.44,684.186 1709,684.186 1709.56,684.186 1710.12,684.186 1710.68,684.186 1711.24,684.186 1711.8,684.186 1712.36,684.186 1712.92,684.186 1713.48,684.186 1714.04,684.186 1714.6,684.186 1715.15,684.186 1715.71,684.186 1716.27,684.186 1716.83,684.186 1717.39,684.186 1717.95,684.186 1718.51,684.186 1719.07,684.186 1719.63,684.186 1720.19,684.186 1720.75,684.186 1721.31,684.186 1721.87,684.186 1722.42,684.186 1722.98,684.186 1723.54,684.186 1724.1,684.186 1724.66,684.186 1725.22,684.186 1725.78,684.186 1726.34,684.186 1726.9,684.186 1727.46,684.186 1728.02,684.186 1728.58,684.186 1729.14,684.186 1729.69,684.186 1730.25,684.186 1730.81,684.186 1731.37,684.186 1731.93,684.186 1732.49,684.186 1733.05,684.186 1733.61,684.186 1734.17,684.186 1734.73,684.186 1735.29,684.186 1735.85,684.186 1736.41,684.186 1736.97,684.186 1737.52,684.186 1738.08,684.186 1738.64,684.186 1739.2,684.186 1739.76,684.186 1740.32,684.186 1740.88,684.186 1741.44,684.186 1742,684.186 1742.56,684.186 1743.12,684.186 1743.68,684.186 1744.24,684.186 1744.79,684.186 1745.35,684.186 1745.91,684.186 1746.47,684.186 1747.03,684.186 1747.59,684.186 1748.15,684.186 1748.71,684.186 1749.27,684.186 1749.83,684.186 1750.39,684.186 1750.95,684.186 1751.51,684.186 1752.06,684.186 1752.62,684.186 1753.18,684.186 1753.74,684.186 1754.3,684.186 1754.86,684.186 1755.42,684.186 1755.98,684.186 1756.54,684.186 1757.1,684.186 1757.66,684.186 1758.22,684.186 1758.78,684.186 1759.34,684.186 1759.89,684.186 1760.45,684.186 1761.01,684.186 1761.57,684.186 1762.13,684.186 1762.69,684.186 1763.25,684.186 1763.81,684.186 1764.37,684.186 1764.93,684.186 1765.49,684.186 1766.05,684.186 1766.61,684.186 1767.16,684.186 1767.72,684.186 1768.28,684.186 1768.84,684.186 1769.4,684.186 1769.96,684.186 1770.52,684.186 1771.08,684.186 1771.64,684.186 1772.2,684.186 1772.76,684.186 1773.32,684.186 1773.88,684.186 1774.43,684.186 1774.99,684.186 1775.55,684.186 1776.11,684.186 1776.67,684.186 1777.23,684.186 1777.79,684.186 1778.35,684.186 1778.91,684.186 1779.47,684.186 1780.03,684.186 1780.59,684.186 1781.15,684.186 1781.71,684.186 1782.26,684.186 1782.82,684.186 1783.38,684.186 1783.94,684.186 1784.5,684.186 1785.06,684.186 1785.62,684.186 1786.18,684.186 1786.74,684.186 1787.3,684.186 1787.86,684.186 1788.42,684.186 1788.98,684.186 1789.53,684.186 1790.09,684.186 1790.65,684.186 1791.21,684.186 1791.77,684.186 1792.33,684.186 1792.89,684.186 1793.45,684.186 1794.01,684.186 1794.57,684.186 1795.13,684.186 1795.69,684.186 1796.25,684.186 1796.8,684.186 1797.36,684.186 1797.92,684.186 1798.48,684.186 1799.04,684.186 1799.6,684.186 1800.16,684.186 1800.72,684.186 1801.28,684.186 1801.84,684.186 1802.4,684.186 1802.96,684.186 1803.52,684.186 1804.08,684.186 1804.63,684.186 1805.19,684.186 1805.75,684.186 1806.31,684.186 1806.87,684.186 1807.43,684.186 1807.99,684.186 1808.55,684.186 1809.11,684.186 1809.67,684.186 1810.23,684.186 1810.79,684.186 1811.35,684.186 1811.9,684.186 1812.46,684.186 1813.02,684.186 1813.58,684.186 1814.14,684.186 1814.7,684.186 1815.26,684.186 1815.82,684.186 1816.38,684.186 1816.94,684.186 1817.5,684.186 1818.06,684.186 1818.62,684.186 1819.18,684.186 1819.73,684.186 1820.29,684.186 1820.85,684.186 1821.41,684.186 1821.97,684.186 1822.53,684.186 1823.09,684.186 1823.65,684.186 1824.21,684.186 1824.77,684.186 1825.33,684.186 1825.89,684.186 1826.45,684.186 1827,684.186 1827.56,684.186 1828.12,684.186 1828.68,684.186 1829.24,684.186 1829.8,684.186 1830.36,684.186 1830.92,684.186 1831.48,684.186 1832.04,684.186 1832.6,684.186 1833.16,684.186 1833.72,684.186 1834.27,684.186 1834.83,684.186 1835.39,684.186 1835.95,684.186 1836.51,684.186 1837.07,684.186 1837.63,684.186 1838.19,684.186 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.036822549723086 ± 0.023836649482328682\nProjected Energy: -4.018109725792755 ± (0.004682710409771751, 0.005029491404492603)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.476964</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4137e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1111e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.157e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.283e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.596e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.995e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition : applied boundray condition \n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{HARDWALL}, Tuple{PITWISTED}, Tuple{SingleComponentFockAddress, Any, Val{PITWISTED}, Val{HARDWALL}}} where {PITWISTED, HARDWALL}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen, Val(pitwisted), Val(hard-wall))\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic, pi-twisted and hard-wall.\nShow pi-twisted when pitwested=true and hard-wall=false and vice-versa for hard-wall else periodic\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(true),Val(false))\n(BoseFS{2,4}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(false),Val(true))\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
