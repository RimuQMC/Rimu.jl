var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip670\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip671\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip672\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.01 2211.02,1003.01 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.184 2211.02,745.184 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.355 2211.02,487.355 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.526 2211.02,229.526 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.01 423.181,1003.01 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.184 423.181,745.184 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.355 423.181,487.355 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.526 423.181,229.526 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.88 Q344.395 1252.13 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M290.043 1016.36 L306.363 1016.36 L306.363 1020.29 L284.418 1020.29 L284.418 1016.36 Q287.08 1013.6 291.664 1008.97 Q296.27 1004.32 297.451 1002.98 Q299.696 1000.45 300.576 998.719 Q301.478 996.96 301.478 995.27 Q301.478 992.515 299.534 990.779 Q297.613 989.043 294.511 989.043 Q292.312 989.043 289.858 989.807 Q287.427 990.571 284.65 992.122 L284.65 987.399 Q287.474 986.265 289.927 985.686 Q292.381 985.108 294.418 985.108 Q299.789 985.108 302.983 987.793 Q306.177 990.478 306.177 994.969 Q306.177 997.098 305.367 999.02 Q304.58 1000.92 302.474 1003.51 Q301.895 1004.18 298.793 1007.4 Q295.691 1010.59 290.043 1016.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M316.224 985.733 L334.58 985.733 L334.58 989.668 L320.506 989.668 L320.506 998.14 Q321.524 997.793 322.543 997.631 Q323.562 997.446 324.58 997.446 Q330.367 997.446 333.747 1000.62 Q337.126 1003.79 337.126 1009.2 Q337.126 1014.78 333.654 1017.89 Q330.182 1020.96 323.862 1020.96 Q321.687 1020.96 319.418 1020.59 Q317.173 1020.22 314.765 1019.48 L314.765 1014.78 Q316.849 1015.92 319.071 1016.47 Q321.293 1017.03 323.77 1017.03 Q327.774 1017.03 330.112 1014.92 Q332.45 1012.82 332.45 1009.2 Q332.45 1005.59 330.112 1003.49 Q327.774 1001.38 323.77 1001.38 Q321.895 1001.38 320.02 1001.8 Q318.168 1002.21 316.224 1003.09 L316.224 985.733 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 988.811 Q352.728 988.811 350.899 992.376 Q349.094 995.918 349.094 1003.05 Q349.094 1010.15 350.899 1013.72 Q352.728 1017.26 356.339 1017.26 Q359.973 1017.26 361.779 1013.72 Q363.608 1010.15 363.608 1003.05 Q363.608 995.918 361.779 992.376 Q359.973 988.811 356.339 988.811 M356.339 985.108 Q362.149 985.108 365.205 989.714 Q368.284 994.298 368.284 1003.05 Q368.284 1011.77 365.205 1016.38 Q362.149 1020.96 356.339 1020.96 Q350.529 1020.96 347.45 1016.38 Q344.395 1011.77 344.395 1003.05 Q344.395 994.298 347.45 989.714 Q350.529 985.108 356.339 985.108 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M286.062 727.904 L304.418 727.904 L304.418 731.839 L290.344 731.839 L290.344 740.311 Q291.363 739.964 292.381 739.802 Q293.4 739.617 294.418 739.617 Q300.205 739.617 303.585 742.788 Q306.964 745.959 306.964 751.376 Q306.964 756.955 303.492 760.056 Q300.02 763.135 293.701 763.135 Q291.525 763.135 289.256 762.765 Q287.011 762.394 284.603 761.654 L284.603 756.955 Q286.687 758.089 288.909 758.644 Q291.131 759.2 293.608 759.2 Q297.613 759.2 299.951 757.093 Q302.288 754.987 302.288 751.376 Q302.288 747.765 299.951 745.658 Q297.613 743.552 293.608 743.552 Q291.733 743.552 289.858 743.968 Q288.006 744.385 286.062 745.265 L286.062 727.904 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M326.177 730.982 Q322.566 730.982 320.737 734.547 Q318.932 738.089 318.932 745.218 Q318.932 752.325 320.737 755.89 Q322.566 759.431 326.177 759.431 Q329.811 759.431 331.617 755.89 Q333.446 752.325 333.446 745.218 Q333.446 738.089 331.617 734.547 Q329.811 730.982 326.177 730.982 M326.177 727.279 Q331.987 727.279 335.043 731.885 Q338.122 736.469 338.122 745.218 Q338.122 753.945 335.043 758.552 Q331.987 763.135 326.177 763.135 Q320.367 763.135 317.288 758.552 Q314.233 753.945 314.233 745.218 Q314.233 736.469 317.288 731.885 Q320.367 727.279 326.177 727.279 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 730.982 Q352.728 730.982 350.899 734.547 Q349.094 738.089 349.094 745.218 Q349.094 752.325 350.899 755.89 Q352.728 759.431 356.339 759.431 Q359.973 759.431 361.779 755.89 Q363.608 752.325 363.608 745.218 Q363.608 738.089 361.779 734.547 Q359.973 730.982 356.339 730.982 M356.339 727.279 Q362.149 727.279 365.205 731.885 Q368.284 736.469 368.284 745.218 Q368.284 753.945 365.205 758.552 Q362.149 763.135 356.339 763.135 Q350.529 763.135 347.45 758.552 Q344.395 753.945 344.395 745.218 Q344.395 736.469 347.45 731.885 Q350.529 727.279 356.339 727.279 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M284.835 470.075 L307.057 470.075 L307.057 472.065 L294.511 504.635 L289.627 504.635 L301.432 474.01 L284.835 474.01 L284.835 470.075 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M316.224 470.075 L334.58 470.075 L334.58 474.01 L320.506 474.01 L320.506 482.482 Q321.524 482.135 322.543 481.973 Q323.562 481.788 324.58 481.788 Q330.367 481.788 333.747 484.959 Q337.126 488.13 337.126 493.547 Q337.126 499.126 333.654 502.227 Q330.182 505.306 323.862 505.306 Q321.687 505.306 319.418 504.936 Q317.173 504.565 314.765 503.825 L314.765 499.126 Q316.849 500.26 319.071 500.815 Q321.293 501.371 323.77 501.371 Q327.774 501.371 330.112 499.264 Q332.45 497.158 332.45 493.547 Q332.45 489.936 330.112 487.829 Q327.774 485.723 323.77 485.723 Q321.895 485.723 320.02 486.139 Q318.168 486.556 316.224 487.436 L316.224 470.075 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 473.153 Q352.728 473.153 350.899 476.718 Q349.094 480.26 349.094 487.389 Q349.094 494.496 350.899 498.061 Q352.728 501.602 356.339 501.602 Q359.973 501.602 361.779 498.061 Q363.608 494.496 363.608 487.389 Q363.608 480.26 361.779 476.718 Q359.973 473.153 356.339 473.153 M356.339 469.45 Q362.149 469.45 365.205 474.056 Q368.284 478.64 368.284 487.389 Q368.284 496.116 365.205 500.723 Q362.149 505.306 356.339 505.306 Q350.529 505.306 347.45 500.723 Q344.395 496.116 344.395 487.389 Q344.395 478.64 347.45 474.056 Q350.529 469.45 356.339 469.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M256.664 242.871 L264.303 242.871 L264.303 216.505 L255.992 218.172 L255.992 213.912 L264.256 212.246 L268.932 212.246 L268.932 242.871 L276.571 242.871 L276.571 246.806 L256.664 246.806 L256.664 242.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M296.015 215.324 Q292.404 215.324 290.576 218.889 Q288.77 222.431 288.77 229.561 Q288.77 236.667 290.576 240.232 Q292.404 243.773 296.015 243.773 Q299.65 243.773 301.455 240.232 Q303.284 236.667 303.284 229.561 Q303.284 222.431 301.455 218.889 Q299.65 215.324 296.015 215.324 M296.015 211.621 Q301.826 211.621 304.881 216.227 Q307.96 220.811 307.96 229.561 Q307.96 238.287 304.881 242.894 Q301.826 247.477 296.015 247.477 Q290.205 247.477 287.127 242.894 Q284.071 238.287 284.071 229.561 Q284.071 220.811 287.127 216.227 Q290.205 211.621 296.015 211.621 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M326.177 215.324 Q322.566 215.324 320.737 218.889 Q318.932 222.431 318.932 229.561 Q318.932 236.667 320.737 240.232 Q322.566 243.773 326.177 243.773 Q329.811 243.773 331.617 240.232 Q333.446 236.667 333.446 229.561 Q333.446 222.431 331.617 218.889 Q329.811 215.324 326.177 215.324 M326.177 211.621 Q331.987 211.621 335.043 216.227 Q338.122 220.811 338.122 229.561 Q338.122 238.287 335.043 242.894 Q331.987 247.477 326.177 247.477 Q320.367 247.477 317.288 242.894 Q314.233 238.287 314.233 229.561 Q314.233 220.811 317.288 216.227 Q320.367 211.621 326.177 211.621 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 215.324 Q352.728 215.324 350.899 218.889 Q349.094 222.431 349.094 229.561 Q349.094 236.667 350.899 240.232 Q352.728 243.773 356.339 243.773 Q359.973 243.773 361.779 240.232 Q363.608 236.667 363.608 229.561 Q363.608 222.431 361.779 218.889 Q359.973 215.324 356.339 215.324 M356.339 211.621 Q362.149 211.621 365.205 216.227 Q368.284 220.811 368.284 229.561 Q368.284 238.287 365.205 242.894 Q362.149 247.477 356.339 247.477 Q350.529 247.477 347.45 242.894 Q344.395 238.287 344.395 229.561 Q344.395 220.811 347.45 216.227 Q350.529 211.621 356.339 211.621 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip672)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.526 4017.76,229.526 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.53 458.828,1248.16 459.396,1247.72 459.964,1247.19 460.533,1246.6 461.101,1245.95 461.669,1245.21 462.238,1244.4 462.806,1243.48 463.375,1242.49 463.943,1239.34 464.511,1238.18 465.08,1236.91 465.648,1235.53 466.216,1233.01 466.785,1231.43 467.353,1228.69 467.921,1226.84 468.49,1223.83 469.058,1221.7 469.626,1218.41 470.195,1216.04 470.763,1213.45 471.331,1210.74 471.9,1206.81 472.468,1203.71 473.036,1200.48 473.605,1197.05 474.173,1193.36 474.741,1189.46 475.31,1185.39 475.878,1177.98 476.446,1171.43 477.015,1166.61 477.583,1161.61 478.152,1155.33 478.72,1149.78 479.288,1143.06 479.857,1134.98 480.425,1128.79 480.993,1121.29 481.562,1113.68 482.13,1104.73 482.698,1095.79 483.267,1087.51 483.835,1078.01 484.403,1067.31 484.972,1059.76 485.54,1050.86 486.108,1041.74 486.677,1033.71 487.245,1023.44 487.813,1014.08 488.382,1004.71 488.95,996.254 489.518,986.571 490.087,977.877 490.655,968.884 491.224,959.845 491.792,945.364 492.36,936.287 492.929,924.959 493.497,913.645 494.065,901.277 494.634,892.223 495.202,880.922 495.77,870.617 496.339,859.249 496.907,847.992 497.475,837.737 498.044,826.476 498.612,814.48 499.18,805.534 499.749,794.431 500.317,785.404 500.885,774.413 501.454,764.476 502.022,755.423 502.59,745.396 503.159,735.512 503.727,726.764 504.295,717.078 504.864,706.248 505.432,696.792 506.001,688.386 506.569,675.816 507.137,665.734 507.706,655.67 508.274,647.931 508.842,640.11 509.411,631.367 509.979,622.766 510.547,614.097 511.116,602.504 511.684,594.282 512.252,585.072 512.821,577.13 513.389,569.231 513.957,562.433 514.526,554.844 515.094,546.098 515.662,538.78 516.231,531.572 516.799,524.422 517.367,518.511 517.936,509.509 518.504,504.924 519.072,496.112 519.641,488.404 520.209,482.197 520.778,476.021 521.346,470.987 521.914,461.935 522.483,459.423 523.051,454.815 523.619,448.03 524.188,442.287 524.756,437.912 525.324,433.597 525.893,430.549 526.461,424.174 527.029,415.082 527.598,410.35 528.166,404.768 528.734,401.301 529.303,396.846 529.871,394.555 530.439,393.077 531.008,389.688 531.576,386.159 532.144,380.844 532.713,376.571 533.281,370.415 533.85,366.656 534.418,362.983 534.986,359.221 535.555,355.918 536.123,352.468 536.691,353.254 537.26,349.696 537.828,347.219 538.396,343.717 538.965,339.341 539.533,337.311 540.101,335.409 540.67,328.425 541.238,324.72 541.806,321.348 542.375,316.783 542.943,312.616 543.511,308.829 544.08,309.054 544.648,307.158 545.216,304.187 545.785,303.507 546.353,301.803 546.921,301.018 547.49,298.031 548.058,295.44 548.627,292.994 549.195,294.518 549.763,295.015 550.332,293.311 550.9,291.587 551.468,291.025 552.037,288.453 552.605,288.022 553.173,286.41 553.742,287.038 554.31,285.334 554.878,283.894 555.447,281.116 556.015,278.817 556.583,277.605 557.152,277.403 557.72,276.936 558.288,275.419 558.857,275.055 559.425,274.876 559.993,272.707 560.562,272.636 561.13,272.464 561.698,272.073 562.267,270.892 562.835,271.819 563.404,269.659 563.972,267.476 564.54,264.355 565.109,263.468 565.677,263.736 566.245,263.865 566.814,266.005 567.382,267.867 567.95,266.625 568.519,268.58 569.087,266.051 569.655,264.649 570.224,264.662 570.792,263.507 571.36,263.351 571.929,264.075 572.497,262.927 573.065,262.66 573.634,262.619 574.202,262.293 574.77,259.958 575.339,256.799 575.907,257.822 576.476,257.816 577.044,257.652 577.612,257.534 578.181,255.214 578.749,252.136 579.317,253.433 579.886,253.342 580.454,255.416 581.022,252.341 581.591,252.454 582.159,251.573 582.727,250.694 583.296,250.897 583.864,250.969 584.432,251.928 585.001,250.793 585.569,251.934 586.137,251.83 586.706,252.903 587.274,248.526 587.842,249.842 588.411,249.056 588.979,250.265 589.547,250.14 590.116,251.149 590.684,247.153 591.253,247.364 591.821,246.184 592.389,246.347 592.958,243.518 593.526,243.723 594.094,243.142 594.663,243.243 595.231,243.357 595.799,244.433 596.368,244.52 596.936,244.472 597.504,241.768 598.073,240.046 598.641,240.347 599.209,238.624 599.778,238.278 600.346,237.707 600.914,235.289 601.483,239.059 602.051,241.799 602.619,241.379 603.188,243.671 603.756,244.78 604.325,243.69 604.893,242.845 605.461,242.995 606.03,243.09 606.598,245.24 607.166,244.025 607.735,242.978 608.303,244.123 608.871,242.991 609.44,243.09 610.008,244.341 610.576,241.224 611.145,242.372 611.713,241.42 612.281,241.384 612.85,242.348 613.418,241.341 613.986,241.423 614.555,242.391 615.123,241.355 615.691,240.15 616.26,239.383 616.828,239.192 617.396,240.524 617.965,242.558 618.533,241.434 619.102,241.391 619.67,241.472 620.238,239.578 620.807,240.777 621.375,240.53 621.943,240.678 622.512,240.638 623.08,240.288 623.648,237.178 624.217,238.459 624.785,239.48 625.353,238.53 625.922,238.521 626.49,238.876 627.058,236.811 627.627,236.982 628.195,238.081 628.763,237.148 629.332,236.245 629.9,238.485 630.468,238.606 631.037,238.561 631.605,238.555 632.173,239.5 632.742,236.223 633.31,237.189 633.879,239.418 634.447,239.44 635.015,240.287 635.584,242.364 636.152,242.171 636.72,240.817 637.289,241.473 637.857,238.085 638.425,242.109 638.994,243.803 639.562,244.216 640.13,242.752 640.699,242.288 641.267,241.988 641.835,242.661 642.404,241.368 642.972,242.123 643.54,241.536 644.109,240.107 644.677,239.792 645.245,237.176 645.814,237.097 646.382,237.942 646.951,237.444 647.519,237.469 648.087,236.72 648.656,235.692 649.224,236.773 649.792,238.528 650.361,237.24 650.929,236.035 651.497,236.971 652.066,235.783 652.634,235.819 653.202,232.62 653.771,233.733 654.339,232.819 654.907,229.803 655.476,227.089 656.044,227.689 656.612,228.433 657.181,227.942 657.749,227.395 658.317,228.71 658.886,229.088 659.454,228.342 660.022,226.827 660.591,229.753 661.159,232.268 661.728,230.284 662.296,229.732 662.864,229.176 663.433,229.357 664.001,228.855 664.569,230.299 665.138,227.742 665.706,225.258 666.274,224.088 666.843,225.138 667.411,225.824 667.979,226.335 668.548,225.104 669.116,228.255 669.684,228.711 670.253,228.251 670.821,226.951 671.389,226.754 671.958,226.52 672.526,230.402 673.094,231.893 673.663,234.098 674.231,233.303 674.799,234.641 675.368,233.687 675.936,232.745 676.505,231.941 677.073,232.368 677.641,231.429 678.21,231.81 678.778,231.836 679.346,230.246 679.915,230.744 680.483,229.839 681.051,230.49 681.62,232.901 682.188,233.311 682.756,233.513 683.325,233.679 683.893,231.714 684.461,232.919 685.03,232.998 685.598,231.213 686.166,232.545 686.735,234.856 687.303,236.833 687.871,234.803 688.44,232.913 689.008,233.023 689.577,233.214 690.145,235.446 690.713,234.524 691.282,234.619 691.85,233.788 692.418,233.853 692.987,235.009 693.555,235.949 694.123,235.875 694.692,236.808 695.26,237.768 695.828,238.621 696.397,238.424 696.965,237.082 697.533,236.703 698.102,236.769 698.67,236.641 699.238,233.427 699.807,233.516 700.375,231.71 700.943,231.942 701.512,231.984 702.08,232.019 702.648,232.111 703.217,233.334 703.785,233.306 704.354,232.606 704.922,230.697 705.49,231.046 706.059,231.462 706.627,232.905 707.195,232.963 707.764,231.106 708.332,231.324 708.9,232.734 709.469,234.858 710.037,233.775 710.605,233.567 711.174,233.481 711.742,234.545 712.31,231.494 712.879,233.733 713.447,233.882 714.015,231.91 714.584,233.113 715.152,233.024 715.72,231.994 716.289,231.038 716.857,232.244 717.425,229.377 717.994,229.53 718.562,227.885 719.131,228.498 719.699,230.143 720.267,232.365 720.836,231.39 721.404,228.75 721.972,231.312 722.541,230.523 723.109,229.674 723.677,230.903 724.246,230.917 724.814,230.971 725.382,230.156 725.951,229.275 726.519,230.702 727.087,230.902 727.656,229.075 728.224,229.38 728.792,229.772 729.361,232.229 729.929,232.54 730.497,232.794 731.066,232.884 731.634,232.031 732.203,232.045 732.771,231.13 733.339,231.494 733.908,232.688 734.476,231.852 735.044,235.047 735.613,235.685 736.181,235.56 736.749,233.404 737.318,233.189 737.886,234.399 738.454,233.5 739.023,234.739 739.591,233.503 740.159,233.706 740.728,233.989 741.296,231.949 741.864,233.276 742.433,233.519 743.001,235.782 743.569,234.516 744.138,234.496 744.706,234.564 745.274,234.459 745.843,234.312 746.411,235.274 746.98,235.99 747.548,234.646 748.116,236.864 748.685,235.738 749.253,234.278 749.821,233.066 750.39,234.093 750.958,236.18 751.526,232.764 752.095,231.765 752.663,234.82 753.231,235.674 753.8,236.702 754.368,235.388 754.936,235.995 755.505,235.78 756.073,235.399 756.641,234.215 757.21,231.887 757.778,230.667 758.346,229.76 758.915,230.819 759.483,230.96 760.052,230.955 760.62,230.875 761.188,232.023 761.757,232.855 762.325,232.807 762.893,232.765 763.462,229.489 764.03,228.934 764.598,226.796 765.167,227.286 765.735,226.672 766.303,226.887 766.872,228.169 767.44,229.605 768.008,229.939 768.577,230.167 769.145,230.295 769.713,232.536 770.282,232.567 770.85,234.625 771.418,235.557 771.987,234.233 772.555,232.788 773.123,232.767 773.692,229.609 774.26,229.59 774.829,230.781 775.397,229.748 775.965,230.783 776.534,228.748 777.102,227.745 777.67,227.83 778.239,228.153 778.807,227.431 779.375,223.864 779.944,220.319 780.512,221.183 781.08,223.914 781.649,222.398 782.217,222.255 782.785,225.867 783.354,227.499 783.922,227.771 784.49,230.137 785.059,230.468 785.627,231.784 786.195,229.911 786.764,228.835 787.332,230.202 787.9,231.342 788.469,230.304 789.037,231.612 789.606,231.547 790.174,230.686 790.742,230.804 791.311,227.768 791.879,228.263 792.447,231.546 793.016,234.93 793.584,234.748 794.152,236.547 794.721,232.166 795.289,232.226 795.857,233.059 796.426,236.227 796.994,235.11 797.562,235.796 798.131,236.475 798.699,235.95 799.267,234.62 799.836,236.439 800.404,235.849 800.972,233.542 801.541,234.466 802.109,234.201 802.678,237.219 803.246,238.716 803.814,238.1 804.383,236.447 804.951,236.88 805.519,234.413 806.088,235.107 806.656,233.873 807.224,233.611 807.793,233.327 808.361,231.085 808.929,232.089 809.498,230.874 810.066,231.02 810.634,231.858 811.203,228.499 811.771,229.747 812.339,229.682 812.908,230.622 813.476,230.505 814.044,230.566 814.613,231.341 815.181,229.195 815.749,228.314 816.318,229.346 816.886,229.362 817.455,227.316 818.023,228.523 818.591,227.734 819.16,226.771 819.728,225.972 820.296,229.322 820.865,230.261 821.433,232.149 822.001,229.77 822.57,229.559 823.138,229.397 823.706,231.151 824.275,231.187 824.843,231.14 825.411,232.306 825.98,233.113 826.548,234.914 827.116,234.803 827.685,234.703 828.253,235.5 828.821,235.286 829.39,234.638 829.958,235.38 830.526,234.982 831.095,235.772 831.663,237.289 832.232,235.656 832.8,235.332 833.368,234.71 833.937,233.239 834.505,233.731 835.073,233.377 835.642,233.933 836.21,234.705 836.778,235.205 837.347,234.532 837.915,232.974 838.483,233.793 839.052,235.412 839.62,235.031 840.188,233.522 840.757,233.319 841.325,231.845 841.893,231.594 842.462,230.242 843.03,230.03 843.598,228.966 844.167,229.931 844.735,228.798 845.304,228.726 845.872,227.7 846.44,227.771 847.009,230.107 847.577,228.772 848.145,226.712 848.714,231.161 849.282,230.98 849.85,230.533 850.419,229.314 850.987,230.453 851.555,231.504 852.124,231.178 852.692,232.067 853.26,231.83 853.829,231.651 854.397,230.447 854.965,229.211 855.534,228.164 856.102,229.251 856.67,231.236 857.239,230.949 857.807,230.777 858.375,230.394 858.944,225.007 859.512,225.034 860.081,224.029 860.649,224.364 861.217,224.439 861.786,225.681 862.354,225.901 862.922,228.158 863.491,228.428 864.059,226.548 864.627,226.616 865.196,225.653 865.764,226.611 866.332,225.933 866.901,228.147 867.469,225.214 868.037,224.511 868.606,223.929 869.174,225.182 869.742,227.482 870.311,227.43 870.879,226.531 871.447,229.642 872.016,229.582 872.584,227.424 873.152,226.599 873.721,226.999 874.289,226.233 874.858,225.589 875.426,224.841 875.994,225.269 876.563,224.383 877.131,226.579 877.699,226.757 878.268,231.125 878.836,232.131 879.404,231.756 879.973,232.885 880.541,233.574 881.109,233.402 881.678,231.913 882.246,230.836 882.814,231.899 883.383,230.709 883.951,230.663 884.519,232.868 885.088,229.449 885.656,229.238 886.224,228.09 886.793,229.969 887.361,229.888 887.93,231.903 888.498,232.825 889.066,231.314 889.635,232.161 890.203,229.959 890.771,231.141 891.34,228.981 891.908,229.081 892.476,228.135 893.045,229.419 893.613,231.448 894.181,230.25 894.75,230.344 895.318,229.154 895.886,229.132 896.455,230.16 897.023,230.241 897.591,228.161 898.16,229.418 898.728,228.641 899.296,225.714 899.865,227.163 900.433,228.396 901.001,228.535 901.57,229.636 902.138,228.369 902.707,226.653 903.275,226.791 903.843,229.181 904.412,228.224 904.98,229.267 905.548,229.589 906.117,229.947 906.685,230.114 907.253,230.274 907.822,229.447 908.39,228.528 908.958,229.51 909.527,232.743 910.095,232.628 910.663,232.653 911.232,233.277 911.8,234.203 912.368,233.691 912.937,234.354 913.505,232.99 914.073,231.661 914.642,229.463 915.21,229.632 915.779,230.577 916.347,230.447 916.915,229.396 917.484,227.116 918.052,228.321 918.62,228.597 919.189,229.598 919.757,228.593 920.325,228.586 920.894,228.582 921.462,225.442 922.03,225.776 922.599,226.965 923.167,224.156 923.735,222.623 924.304,226.447 924.872,227.504 925.44,229.722 926.009,229.843 926.577,229.897 927.145,229.084 927.714,226.894 928.282,227.109 928.85,227.48 929.419,227.791 929.987,228.022 930.556,228.331 931.124,226.66 931.692,229.23 932.261,230.516 932.829,232.572 933.397,234.496 933.966,232.255 934.534,231.211 935.102,231.153 935.671,231.155 936.239,232.108 936.807,231.988 937.376,232.807 937.944,232.58 938.512,230.594 939.081,230.693 939.649,231.736 940.217,231.763 940.786,230.515 941.354,232.695 941.922,232.526 942.491,233.242 943.059,235.167 943.627,233.759 944.196,232.428 944.764,231.004 945.333,230.932 945.901,231.904 946.469,232.831 947.038,232.531 947.606,231.234 948.174,230.191 948.743,229.112 949.311,228.076 949.879,229.305 950.448,228.491 951.016,229.804 951.584,226.624 952.153,225.777 952.721,223.958 953.289,223.22 953.858,224.629 954.426,223.917 954.994,224.465 955.563,224.017 956.131,225.46 956.699,226.603 957.268,225.924 957.836,227.038 958.405,227.332 958.973,225.344 959.541,225.913 960.11,226.213 960.678,225.486 961.246,224.757 961.815,223.034 962.383,227.836 962.951,226.053 963.52,227.455 964.088,225.742 964.656,225.996 965.225,225.529 965.793,226.078 966.361,225.444 966.93,224.966 967.498,224.496 968.066,228.286 968.635,229.52 969.203,230.746 969.771,230.768 970.34,231.887 970.908,232.043 971.476,229.967 972.045,229.995 972.613,230.122 973.182,231.293 973.75,230.356 974.318,229.299 974.887,229.492 975.455,229.33 976.023,229.382 976.592,229.537 977.16,230.837 977.728,232.871 978.297,234.974 978.865,234.602 979.433,234.427 980.002,233.955 980.57,233.853 981.138,231.556 981.707,230.487 982.275,230.428 982.843,228.327 983.412,228.548 983.98,229.467 984.548,229.605 985.117,231.715 985.685,233.687 986.253,232.467 986.822,233.264 987.39,232.945 987.959,233.526 988.527,234.42 989.095,234.121 989.664,231.816 990.232,232.771 990.8,233.698 991.369,231.316 991.937,233.151 992.505,234.173 993.074,233.993 993.642,232.565 994.21,232.244 994.779,233.158 995.347,233.87 995.915,234.609 996.484,234.253 997.052,234.144 997.62,231.78 998.189,232.824 998.757,232.561 999.325,232.39 999.894,232.331 1000.46,233.281 1001.03,233.157 1001.6,232.793 1002.17,233.464 1002.74,233.136 1003.3,227.572 1003.87,226.638 1004.44,226.702 1005.01,226.727 1005.58,225.827 1006.15,227.09 1006.71,225.146 1007.28,226.359 1007.85,225.529 1008.42,226.713 1008.99,226.867 1009.56,226.043 1010.12,226.188 1010.69,223.132 1011.26,221.545 1011.83,222.98 1012.4,223.351 1012.97,224.948 1013.53,226.222 1014.1,227.604 1014.67,228.869 1015.24,231.147 1015.81,231.245 1016.38,231.221 1016.94,233.162 1017.51,233.045 1018.08,231.949 1018.65,232.693 1019.22,233.56 1019.79,233.3 1020.35,236.079 1020.92,236.542 1021.49,234.104 1022.06,231.964 1022.63,232.729 1023.2,234.379 1023.76,233.794 1024.33,232.452 1024.9,234.101 1025.47,234.839 1026.04,234.337 1026.61,233.938 1027.17,231.373 1027.74,232.488 1028.31,232.345 1028.88,232.299 1029.45,232.035 1030.02,227.867 1030.58,228.793 1031.15,225.65 1031.72,223.836 1032.29,224.246 1032.86,227.831 1033.43,224.854 1033.99,224.012 1034.56,224.232 1035.13,223.425 1035.7,226.843 1036.27,224.944 1036.84,226.341 1037.4,226.543 1037.97,228.801 1038.54,229.933 1039.11,229.16 1039.68,228.973 1040.25,225.85 1040.81,226.25 1041.38,227.693 1041.95,225.967 1042.52,229.493 1043.09,229.505 1043.66,229.541 1044.22,227.538 1044.79,228.889 1045.36,226.914 1045.93,228.161 1046.5,227.109 1047.07,229.567 1047.63,226.798 1048.2,227.085 1048.77,227.495 1049.34,227.786 1049.91,228.013 1050.48,227.998 1051.05,230.548 1051.61,231.707 1052.18,230.731 1052.75,233.686 1053.32,236.417 1053.89,235.99 1054.46,234.393 1055.02,234.283 1055.59,235.946 1056.16,236.571 1056.73,235.027 1057.3,234.771 1057.87,235.379 1058.43,234.107 1059,234.613 1059.57,234.445 1060.14,233.047 1060.71,231.76 1061.28,232.71 1061.84,233.413 1062.41,233.15 1062.98,229.82 1063.55,229.765 1064.12,231.971 1064.69,229.634 1065.25,229.741 1065.82,229.673 1066.39,230.487 1066.96,231.335 1067.53,231.934 1068.1,231.682 1068.66,230.433 1069.23,229.313 1069.8,228.205 1070.37,228.132 1070.94,224.268 1071.51,224.546 1072.07,225.841 1072.64,224.123 1073.21,223.234 1073.78,224.701 1074.35,228.195 1074.92,228.189 1075.48,227.357 1076.05,228.227 1076.62,229.333 1077.19,229.374 1077.76,227.174 1078.33,227.42 1078.89,226.683 1079.46,225.848 1080.03,228.243 1080.6,230.497 1081.17,228.212 1081.74,228.142 1082.3,228.189 1082.87,228.517 1083.44,226.71 1084.01,227.938 1084.58,228.206 1085.15,226.274 1085.71,227.528 1086.28,229.651 1086.85,230.956 1087.42,230.587 1087.99,230.286 1088.56,230.221 1089.12,229.197 1089.69,228.354 1090.26,229.45 1090.83,230.688 1091.4,229.669 1091.97,229.48 1092.53,229.508 1093.1,229.723 1093.67,229.775 1094.24,228.985 1094.81,229.206 1095.38,230.291 1095.94,231.32 1096.51,229.165 1097.08,228.193 1097.65,227.389 1098.22,227.35 1098.79,226.477 1099.35,226.82 1099.92,226.092 1100.49,226.491 1101.06,227.756 1101.63,229.722 1102.2,230.739 1102.76,229.783 1103.33,229.743 1103.9,231.997 1104.47,233.044 1105.04,234.836 1105.61,233.513 1106.17,231.198 1106.74,231.04 1107.31,231.058 1107.88,228.885 1108.45,228.904 1109.02,227.978 1109.58,229.07 1110.15,228.235 1110.72,228.295 1111.29,228.13 1111.86,228.166 1112.43,227.304 1112.99,232.585 1113.56,234.674 1114.13,233.296 1114.7,233.036 1115.27,230.651 1115.84,230.811 1116.4,231.964 1116.97,233.855 1117.54,233.414 1118.11,233.329 1118.68,236.075 1119.25,237.827 1119.81,237.134 1120.38,237.63 1120.95,237.013 1121.52,236.262 1122.09,235.92 1122.66,234.425 1123.23,235.231 1123.79,235.685 1124.36,235.226 1124.93,233.615 1125.5,233.273 1126.07,231.919 1126.64,231.664 1127.2,231.358 1127.77,231.165 1128.34,230.015 1128.91,233.1 1129.48,232.956 1130.05,230.534 1130.61,232.375 1131.18,233.225 1131.75,233.618 1132.32,229.166 1132.89,228.939 1133.46,228.874 1134.02,229.683 1134.59,230.548 1135.16,227.333 1135.73,225.177 1136.3,225.467 1136.87,228.712 1137.43,226.604 1138,226.653 1138.57,226.623 1139.14,227.919 1139.71,227.665 1140.28,225.651 1140.84,225.742 1141.41,223.774 1141.98,226.293 1142.55,226.528 1143.12,226.892 1143.69,226.956 1144.25,225.069 1144.82,224.217 1145.39,223.562 1145.96,222.908 1146.53,224.304 1147.1,225.74 1147.66,228.049 1148.23,228.889 1148.8,229.077 1149.37,229.323 1149.94,229.418 1150.51,229.357 1151.07,228.464 1151.64,227.601 1152.21,226.753 1152.78,228.074 1153.35,226.291 1153.92,226.517 1154.48,228.718 1155.05,228.787 1155.62,228.854 1156.19,228.829 1156.76,228.775 1157.33,229.831 1157.89,229.748 1158.46,229.881 1159.03,227.9 1159.6,230.059 1160.17,231.215 1160.74,231.078 1161.3,231.046 1161.87,230.882 1162.44,230.877 1163.01,229.809 1163.58,229.97 1164.15,229.951 1164.71,229.863 1165.28,232.055 1165.85,231.833 1166.42,231.492 1166.99,230.229 1167.56,227.233 1168.12,227.397 1168.69,227.442 1169.26,227.784 1169.83,225.718 1170.4,223.758 1170.97,225.294 1171.53,225.429 1172.1,224.464 1172.67,223.821 1173.24,223.122 1173.81,222.565 1174.38,224.294 1174.94,223.656 1175.51,226.114 1176.08,226.393 1176.65,227.696 1177.22,229.698 1177.79,230.922 1178.35,231.923 1178.92,229.869 1179.49,229.773 1180.06,231.812 1180.63,230.831 1181.2,228.75 1181.76,227.891 1182.33,228.105 1182.9,228.189 1183.47,227.166 1184.04,227.525 1184.61,227.64 1185.17,226.61 1185.74,226.001 1186.31,223.347 1186.88,223.871 1187.45,224.444 1188.02,224.783 1188.58,224.014 1189.15,224.649 1189.72,224.952 1190.29,227.684 1190.86,227.97 1191.43,229.258 1192,230.491 1192.56,230.571 1193.13,229.505 1193.7,229.496 1194.27,225.322 1194.84,224.792 1195.41,226.426 1195.97,226.768 1196.54,227.091 1197.11,229.481 1197.68,229.833 1198.25,230.128 1198.82,229.983 1199.38,229.878 1199.95,230.036 1200.52,229.055 1201.09,228.306 1201.66,230.569 1202.23,231.611 1202.79,232.443 1203.36,230.271 1203.93,230.405 1204.5,229.341 1205.07,229.595 1205.64,227.608 1206.2,230.018 1206.77,233.084 1207.34,233.918 1207.91,233.74 1208.48,233.535 1209.05,233.282 1209.61,233.042 1210.18,231.805 1210.75,230.715 1211.32,231.617 1211.89,232.64 1212.46,233.611 1213.02,233.365 1213.59,234.188 1214.16,231.933 1214.73,230.765 1215.3,230.947 1215.87,229.856 1216.43,231.893 1217,232.755 1217.57,230.469 1218.14,231.667 1218.71,232.546 1219.28,234.498 1219.84,237.179 1220.41,236.881 1220.98,235.461 1221.55,235.984 1222.12,235.76 1222.69,236.354 1223.25,234.78 1223.82,237.537 1224.39,235.8 1224.96,234.28 1225.53,230.924 1226.1,231.924 1226.66,232.561 1227.23,232.275 1227.8,233.134 1228.37,231.908 1228.94,231.676 1229.51,231.543 1230.07,232.646 1230.64,231.496 1231.21,229.137 1231.78,229.373 1232.35,229.396 1232.92,231.369 1233.48,230.945 1234.05,228.531 1234.62,228.24 1235.19,227.132 1235.76,226.311 1236.33,227.451 1236.89,227.445 1237.46,228.557 1238.03,226.459 1238.6,226.688 1239.17,226.819 1239.74,226.934 1240.3,224.1 1240.87,222.582 1241.44,226.083 1242.01,226.339 1242.58,228.723 1243.15,228.837 1243.71,227.974 1244.28,228.16 1244.85,230.247 1245.42,229.946 1245.99,231.03 1246.56,232.112 1247.12,233.138 1247.69,231.032 1248.26,231.161 1248.83,228.996 1249.4,229.06 1249.97,231.043 1250.53,229.123 1251.1,227.242 1251.67,229.703 1252.24,230.722 1252.81,232.724 1253.38,228.38 1253.94,228.748 1254.51,226.673 1255.08,227.845 1255.65,228.002 1256.22,230.255 1256.79,229.291 1257.35,229.255 1257.92,230.348 1258.49,231.282 1259.06,233.126 1259.63,232.693 1260.2,233.431 1260.76,233.129 1261.33,233.788 1261.9,231.861 1262.47,230.988 1263.04,229.925 1263.61,230.794 1264.18,230.676 1264.74,230.497 1265.31,230.553 1265.88,230.303 1266.45,231.423 1267.02,230.32 1267.59,231.186 1268.15,230.111 1268.72,229.153 1269.29,229.2 1269.86,230.34 1270.43,231.277 1271,232.1 1271.56,232.824 1272.13,232.743 1272.7,231.151 1273.27,232.135 1273.84,231.764 1274.41,231.756 1274.97,231.476 1275.54,231.17 1276.11,230.793 1276.68,230.69 1277.25,229.495 1277.82,229.353 1278.38,228.222 1278.95,228.119 1279.52,227.179 1280.09,226.299 1280.66,225.371 1281.23,226.484 1281.79,225.742 1282.36,224.022 1282.93,223.399 1283.5,225.743 1284.07,224.829 1284.64,226.161 1285.2,226.29 1285.77,227.624 1286.34,228.93 1286.91,230.93 1287.48,231.891 1288.05,230.722 1288.61,234.45 1289.18,231.215 1289.75,232.976 1290.32,233.787 1290.89,233.516 1291.46,232.27 1292.02,231.098 1292.59,234.145 1293.16,236.718 1293.73,234.185 1294.3,230.598 1294.87,232.589 1295.43,231.346 1296,231.13 1296.57,227.802 1297.14,230.006 1297.71,230.778 1298.28,229.466 1298.84,229.749 1299.41,228.712 1299.98,228.566 1300.55,229.501 1301.12,230.52 1301.69,230.501 1302.25,231.293 1302.82,232.227 1303.39,231.895 1303.96,230.693 1304.53,232.491 1305.1,231.125 1305.66,230.927 1306.23,229.643 1306.8,227.431 1307.37,228.496 1307.94,229.384 1308.51,228.238 1309.07,229.161 1309.64,229.262 1310.21,229.184 1310.78,230.321 1311.35,230.242 1311.92,229.113 1312.48,229.981 1313.05,228.764 1313.62,228.607 1314.19,226.572 1314.76,226.918 1315.33,227.067 1315.89,228.258 1316.46,228.23 1317.03,227.569 1317.6,227.721 1318.17,224.658 1318.74,225.985 1319.3,223.875 1319.87,224.255 1320.44,223.842 1321.01,227.228 1321.58,228.413 1322.15,231.487 1322.71,230.246 1323.28,230.171 1323.85,230.989 1324.42,230.823 1324.99,229.636 1325.56,229.516 1326.12,229.576 1326.69,228.551 1327.26,228.818 1327.83,228.916 1328.4,228.914 1328.97,229.948 1329.53,228.861 1330.1,229.058 1330.67,226.039 1331.24,224.28 1331.81,223.641 1332.38,224.23 1332.94,226.63 1333.51,226.857 1334.08,229.111 1334.65,229.148 1335.22,228.242 1335.79,225.119 1336.36,227.623 1336.92,228.552 1337.49,228.728 1338.06,228.781 1338.63,229.897 1339.2,227.837 1339.77,228.072 1340.33,228.332 1340.9,227.496 1341.47,226.57 1342.04,228.835 1342.61,229.922 1343.18,228.815 1343.74,227.905 1344.31,229.093 1344.88,230.274 1345.45,230.544 1346.02,229.464 1346.59,230.488 1347.15,229.59 1347.72,230.625 1348.29,231.418 1348.86,230.091 1349.43,228.975 1350,227.799 1350.56,228 1351.13,228.85 1351.7,228.809 1352.27,228.947 1352.84,226.949 1353.41,224.233 1353.97,224.672 1354.54,224.01 1355.11,225.707 1355.68,226.078 1356.25,225.56 1356.82,227.071 1357.38,227.455 1357.95,226.786 1358.52,228.021 1359.09,229.411 1359.66,228.56 1360.23,228.82 1360.79,228.694 1361.36,227.991 1361.93,228.275 1362.5,230.378 1363.07,230.217 1363.64,232.372 1364.2,230.924 1364.77,231.877 1365.34,230.774 1365.91,231.069 1366.48,227.952 1367.05,231.476 1367.61,231.461 1368.18,230.345 1368.75,230.434 1369.32,229.307 1369.89,230.582 1370.46,230.38 1371.02,231.481 1371.59,229.255 1372.16,230.489 1372.73,230.4 1373.3,230.334 1373.87,231.45 1374.43,231.484 1375,231.459 1375.57,231.099 1376.14,230.064 1376.71,228.821 1377.28,228.718 1377.84,231.085 1378.41,231.202 1378.98,230.121 1379.55,228.131 1380.12,228.325 1380.69,228.357 1381.25,231.661 1381.82,229.376 1382.39,229.33 1382.96,229.394 1383.53,230.313 1384.1,230.277 1384.66,228.202 1385.23,229.528 1385.8,229.443 1386.37,228.459 1386.94,227.609 1387.51,229.912 1388.07,230.156 1388.64,230.101 1389.21,230.962 1389.78,231.093 1390.35,233.247 1390.92,230.898 1391.48,232.033 1392.05,234.091 1392.62,234.65 1393.19,236.451 1393.76,239.183 1394.33,236.283 1394.89,233.68 1395.46,235.564 1396.03,235.308 1396.6,236.835 1397.17,237.269 1397.74,239.864 1398.3,237.906 1398.87,239.389 1399.44,235.347 1400.01,235.041 1400.58,235.576 1401.15,235.12 1401.71,235.564 1402.28,232.991 1402.85,232.716 1403.42,232.588 1403.99,232.37 1404.56,232.044 1405.13,231.601 1405.69,232.321 1406.26,231.865 1406.83,229.379 1407.4,229.193 1407.97,230.157 1408.54,227.873 1409.1,227.9 1409.67,227.867 1410.24,226.681 1410.81,225.478 1411.38,226.552 1411.95,227.606 1412.51,227.646 1413.08,225.368 1413.65,226.285 1414.22,228.428 1414.79,228.491 1415.36,228.36 1415.92,230.405 1416.49,230.326 1417.06,232.263 1417.63,231.8 1418.2,230.494 1418.77,230.281 1419.33,230.243 1419.9,228.006 1420.47,227.833 1421.04,227.893 1421.61,226.733 1422.18,225.793 1422.74,222.844 1423.31,223.241 1423.88,225.735 1424.45,223.721 1425.02,223.986 1425.59,221.99 1426.15,222.082 1426.72,223.727 1427.29,222.983 1427.86,224.525 1428.43,224.761 1429,226.994 1429.56,224.863 1430.13,225.165 1430.7,223.602 1431.27,223.958 1431.84,227.264 1432.41,228.376 1432.97,227.284 1433.54,228.566 1434.11,225.441 1434.68,227.762 1435.25,229.015 1435.82,228.996 1436.38,230.247 1436.95,227.121 1437.52,229.274 1438.09,228.286 1438.66,230.692 1439.23,227.54 1439.79,226.55 1440.36,226.907 1440.93,227.112 1441.5,228.632 1442.07,228.552 1442.64,228.67 1443.2,226.654 1443.77,224.904 1444.34,225.066 1444.91,229.566 1445.48,230.602 1446.05,231.711 1446.61,235.725 1447.18,235.429 1447.75,236.105 1448.32,233.482 1448.89,233.033 1449.46,232.692 1450.02,230.371 1450.59,229.113 1451.16,230.002 1451.73,232.031 1452.3,232.851 1452.87,232.608 1453.43,232.285 1454,231.132 1454.57,230.83 1455.14,230.674 1455.71,231.547 1456.28,230.644 1456.84,230.4 1457.41,232.334 1457.98,232.071 1458.55,230.75 1459.12,231.578 1459.69,231.372 1460.25,231.997 1460.82,231.679 1461.39,231.443 1461.96,232.057 1462.53,229.825 1463.1,232.018 1463.66,232.716 1464.23,232.47 1464.8,230.084 1465.37,230.928 1465.94,230.674 1466.51,230.564 1467.07,229.534 1467.64,229.503 1468.21,228.265 1468.78,225.799 1469.35,226.116 1469.92,224.338 1470.48,226.715 1471.05,225.844 1471.62,225.923 1472.19,225.219 1472.76,225.843 1473.33,227.045 1473.89,226.175 1474.46,225.52 1475.03,225.09 1475.6,226.345 1476.17,224.751 1476.74,225.183 1477.31,225.428 1477.87,227.849 1478.44,227.973 1479.01,230.085 1479.58,230.312 1480.15,229.261 1480.72,230.403 1481.28,229.372 1481.85,229.197 1482.42,229.364 1482.99,229.455 1483.56,229.386 1484.13,229.352 1484.69,229.233 1485.26,227.269 1485.83,227.508 1486.4,227.622 1486.97,224.991 1487.54,223.319 1488.1,221.888 1488.67,223.456 1489.24,222.004 1489.81,225.723 1490.38,225.06 1490.95,225.622 1491.51,226.178 1492.08,227.585 1492.65,227.887 1493.22,227.23 1493.79,229.484 1494.36,229.559 1494.92,230.812 1495.49,229.949 1496.06,228.845 1496.63,231.735 1497.2,234.864 1497.77,234.752 1498.33,235.448 1498.9,233.051 1499.47,232.946 1500.04,233.835 1500.61,234.575 1501.18,234.333 1501.74,235.106 1502.31,233.86 1502.88,233.633 1503.45,231.411 1504.02,232.327 1504.59,233.301 1505.15,234.03 1505.72,234.782 1506.29,235.314 1506.86,236.118 1507.43,238.962 1508,238.171 1508.56,238.526 1509.13,238.94 1509.7,239.159 1510.27,237.611 1510.84,238.996 1511.41,237.059 1511.97,236.267 1512.54,236.655 1513.11,234.009 1513.68,231.642 1514.25,233.387 1514.82,233.915 1515.38,233.604 1515.95,233.125 1516.52,230.688 1517.09,228.185 1517.66,229.249 1518.23,228.362 1518.79,228.222 1519.36,228.095 1519.93,229.123 1520.5,228.119 1521.07,231.039 1521.64,227.645 1522.2,226.633 1522.77,225.609 1523.34,223.677 1523.91,222.784 1524.48,222.408 1525.05,227.108 1525.61,228.262 1526.18,228.216 1526.75,227.275 1527.32,227.47 1527.89,225.489 1528.46,227.778 1529.02,228.972 1529.59,229.923 1530.16,228.851 1530.73,228.662 1531.3,230.801 1531.87,232.527 1532.43,232.227 1533,230.925 1533.57,231.86 1534.14,229.741 1534.71,232.717 1535.28,233.314 1535.84,233.136 1536.41,233.952 1536.98,235.608 1537.55,233.706 1538.12,232.309 1538.69,229.907 1539.25,229.66 1539.82,227.523 1540.39,224.706 1540.96,225.874 1541.53,224.923 1542.1,224.219 1542.66,225.419 1543.23,226.703 1543.8,223.669 1544.37,225.076 1544.94,225.439 1545.51,225.689 1546.08,226.981 1546.64,228.023 1547.21,228.129 1547.78,227.223 1548.35,227.413 1548.92,226.339 1549.49,226.585 1550.05,227.688 1550.62,227.686 1551.19,227.843 1551.76,226.993 1552.33,227.09 1552.9,226.271 1553.46,227.429 1554.03,227.469 1554.6,229.519 1555.17,231.695 1555.74,231.237 1556.31,231.082 1556.87,227.923 1557.44,227.716 1558.01,227.696 1558.58,227.661 1559.15,227.762 1559.72,225.993 1560.28,223.235 1560.85,225.834 1561.42,226.036 1561.99,227.409 1562.56,229.59 1563.13,229.761 1563.69,229.876 1564.26,229.699 1564.83,228.701 1565.4,228.665 1565.97,226.645 1566.54,227.902 1567.1,228.222 1567.67,228.488 1568.24,228.569 1568.81,229.638 1569.38,229.63 1569.95,229.447 1570.51,229.456 1571.08,231.494 1571.65,230.257 1572.22,229.044 1572.79,227.991 1573.36,228.103 1573.92,228.388 1574.49,229.618 1575.06,229.675 1575.63,231.81 1576.2,231.75 1576.77,232.698 1577.33,234.564 1577.9,231.158 1578.47,231.024 1579.04,231.834 1579.61,233.654 1580.18,233.328 1580.74,232.05 1581.31,232.773 1581.88,231.434 1582.45,230.083 1583.02,231.837 1583.59,231.742 1584.15,230.372 1584.72,231.141 1585.29,230.997 1585.86,231.842 1586.43,230.818 1587,230.641 1587.56,229.5 1588.13,230.261 1588.7,229.275 1589.27,227.092 1589.84,229.442 1590.41,229.321 1590.97,228.408 1591.54,226.39 1592.11,227.698 1592.68,229.955 1593.25,228.998 1593.82,226.869 1594.38,225.027 1594.95,223.981 1595.52,224.458 1596.09,223.754 1596.66,224.018 1597.23,224.579 1597.79,224.935 1598.36,224.299 1598.93,224.939 1599.5,222.251 1600.07,221.712 1600.64,222.133 1601.2,222.844 1601.77,224.48 1602.34,225.132 1602.91,223.504 1603.48,224.968 1604.05,223.321 1604.61,222.842 1605.18,224.374 1605.75,223.059 1606.32,224.566 1606.89,224.047 1607.46,225.85 1608.02,227.248 1608.59,227.647 1609.16,228.809 1609.73,229.188 1610.3,233.435 1610.87,234.321 1611.43,232.982 1612,232.761 1612.57,232.454 1613.14,231.106 1613.71,232.158 1614.28,229.94 1614.84,231.945 1615.41,232.835 1615.98,232.693 1616.55,232.472 1617.12,234.453 1617.69,234.022 1618.26,235.79 1618.82,236.392 1619.39,237.203 1619.96,235.742 1620.53,236.446 1621.1,236.851 1621.67,236.541 1622.23,235.991 1622.8,235.847 1623.37,232.352 1623.94,232.036 1624.51,232.084 1625.08,230.832 1625.64,229.479 1626.21,228.428 1626.78,228.487 1627.35,228.38 1627.92,226.13 1628.49,225.231 1629.05,226.418 1629.62,225.748 1630.19,226.174 1630.76,225.397 1631.33,226.119 1631.9,226.494 1632.46,226.742 1633.03,225.582 1633.6,224.895 1634.17,223.365 1634.74,223.029 1635.31,225.524 1635.87,227.88 1636.44,228.017 1637.01,225.229 1637.58,224.803 1638.15,223.136 1638.72,225.608 1639.28,226.141 1639.85,229.456 1640.42,229.456 1640.99,231.405 1641.56,231.395 1642.13,229.308 1642.69,230.459 1643.26,228.409 1643.83,228.475 1644.4,228.681 1644.97,227.675 1645.54,228.839 1646.1,229.106 1646.67,230.411 1647.24,229.469 1647.81,226.412 1648.38,224.37 1648.95,224.926 1649.51,225.457 1650.08,229.148 1650.65,230.446 1651.22,228.59 1651.79,227.821 1652.36,228.07 1652.92,228.424 1653.49,226.692 1654.06,229.262 1654.63,230.417 1655.2,228.636 1655.77,228.625 1656.33,229.789 1656.9,229.876 1657.47,230.993 1658.04,228.723 1658.61,227.869 1659.18,227.207 1659.74,229.646 1660.31,228.684 1660.88,228.842 1661.45,229.264 1662.02,230.595 1662.59,232.997 1663.15,231.725 1663.72,230.649 1664.29,235.801 1664.86,236.599 1665.43,237.119 1666,239.746 1666.56,238.06 1667.13,235.332 1667.7,236.059 1668.27,236.685 1668.84,236.066 1669.41,237.675 1669.97,238.174 1670.54,236.604 1671.11,236.178 1671.68,236.775 1672.25,237.38 1672.82,236.771 1673.38,236.053 1673.95,233.352 1674.52,235.375 1675.09,234.976 1675.66,235.522 1676.23,236.064 1676.79,236.65 1677.36,232.844 1677.93,233.656 1678.5,233.222 1679.07,232.824 1679.64,233.369 1680.2,233.036 1680.77,232.685 1681.34,232.179 1681.91,231.783 1682.48,231.525 1683.05,231.198 1683.61,230.999 1684.18,230.733 1684.75,227.463 1685.32,227.395 1685.89,226.382 1686.46,228.709 1687.02,229.408 1687.59,230.073 1688.16,231.194 1688.73,230.867 1689.3,231.563 1689.87,227.235 1690.44,225.436 1691,225.546 1691.57,224.642 1692.14,225.85 1692.71,227.133 1693.28,226.949 1693.85,224.936 1694.41,226.312 1694.98,222.432 1695.55,221.97 1696.12,220.373 1696.69,224.221 1697.26,228.596 1697.82,228.677 1698.39,229.875 1698.96,228.569 1699.53,229.481 1700.1,228.355 1700.67,229.45 1701.23,229.378 1701.8,227.459 1702.37,228.493 1702.94,228.566 1703.51,227.63 1704.08,226.894 1704.64,227.145 1705.21,225.197 1705.78,225.395 1706.35,224.479 1706.92,222.62 1707.49,222.042 1708.05,223.579 1708.62,224.061 1709.19,223.366 1709.76,226.962 1710.33,228.095 1710.9,228.332 1711.46,227.399 1712.03,225.503 1712.6,225.787 1713.17,227.223 1713.74,226.232 1714.31,228.544 1714.87,228.444 1715.44,229.529 1716.01,229.437 1716.58,229.449 1717.15,228.506 1717.72,233.778 1718.28,233.533 1718.85,234.22 1719.42,231.87 1719.99,232.888 1720.56,231.892 1721.13,233.085 1721.69,233.933 1722.26,233.894 1722.83,233.595 1723.4,233.069 1723.97,232.917 1724.54,232.518 1725.1,232.167 1725.67,230.745 1726.24,230.515 1726.81,230.354 1727.38,231.339 1727.95,230.09 1728.51,229.068 1729.08,233.122 1729.65,234.067 1730.22,232.643 1730.79,232.398 1731.36,233.258 1731.92,233.968 1732.49,232.56 1733.06,229.234 1733.63,228.306 1734.2,229.039 1734.77,228.063 1735.33,229.092 1735.9,227.909 1736.47,227.923 1737.04,227.06 1737.61,229.512 1738.18,230.558 1738.74,229.351 1739.31,231.42 1739.88,231.175 1740.45,232.084 1741.02,232.054 1741.59,232.702 1742.15,229.03 1742.72,229.975 1743.29,230.138 1743.86,232.101 1744.43,234.092 1745,232.864 1745.56,233.622 1746.13,232.578 1746.7,231.452 1747.27,230.278 1747.84,230.213 1748.41,229.107 1748.97,227.808 1749.54,231.69 1750.11,232.616 1750.68,233.428 1751.25,232.167 1751.82,231.855 1752.38,231.576 1752.95,230.27 1753.52,230.071 1754.09,229.04 1754.66,229.18 1755.23,230.311 1755.79,228.158 1756.36,230.338 1756.93,228.959 1757.5,228.837 1758.07,227.915 1758.64,228.945 1759.21,228.647 1759.77,227.801 1760.34,228.526 1760.91,228.709 1761.48,226.645 1762.05,224.754 1762.62,223.877 1763.18,224.278 1763.75,224.462 1764.32,224.768 1764.89,225.012 1765.46,227.36 1766.03,228.685 1766.59,227.592 1767.16,226.481 1767.73,226.564 1768.3,225.521 1768.87,225.76 1769.44,227.026 1770,228.199 1770.57,230.388 1771.14,230.299 1771.71,229.284 1772.28,229.134 1772.85,230.291 1773.41,228.264 1773.98,228.373 1774.55,226.394 1775.12,226.764 1775.69,224.926 1776.26,220.096 1776.82,220.795 1777.39,220.567 1777.96,220.211 1778.53,221.139 1779.1,221.828 1779.67,222.423 1780.23,223.212 1780.8,223.656 1781.37,223.217 1781.94,224.702 1782.51,224.091 1783.08,224.463 1783.64,223.873 1784.21,226.547 1784.78,226.797 1785.35,226.884 1785.92,225.172 1786.49,224.804 1787.05,225.402 1787.62,225.946 1788.19,225.374 1788.76,226.992 1789.33,228.514 1789.9,229.73 1790.46,228.044 1791.03,229.444 1791.6,229.499 1792.17,230.832 1792.74,229.696 1793.31,230.869 1793.87,229.69 1794.44,231.035 1795.01,233.041 1795.58,233.107 1796.15,230.899 1796.72,231.724 1797.28,230.6 1797.85,228.631 1798.42,229.025 1798.99,232.308 1799.56,231.168 1800.13,233.27 1800.69,235.282 1801.26,234.181 1801.83,234.939 1802.4,232.493 1802.97,232.369 1803.54,229.393 1804.1,229.506 1804.67,229.559 1805.24,228.691 1805.81,228.752 1806.38,227.872 1806.95,230.263 1807.51,230.234 1808.08,230.282 1808.65,229.973 1809.22,230.155 1809.79,233.357 1810.36,232.165 1810.92,233.014 1811.49,232.875 1812.06,233.649 1812.63,233.631 1813.2,233.672 1813.77,231.328 1814.33,232.584 1814.9,234.579 1815.47,232.092 1816.04,232.107 1816.61,232.95 1817.18,230.579 1817.74,230.416 1818.31,231.507 1818.88,231.448 1819.45,232.488 1820.02,233.104 1820.59,232.816 1821.15,232.69 1821.72,233.82 1822.29,232.552 1822.86,233.505 1823.43,233.251 1824,234.133 1824.56,237.058 1825.13,235.402 1825.7,236.044 1826.27,234.713 1826.84,233.156 1827.41,231.876 1827.97,230.729 1828.54,230.44 1829.11,230.213 1829.68,229.268 1830.25,230.233 1830.82,228.066 1831.39,231.201 1831.95,231.99 1832.52,233.77 1833.09,233.444 1833.66,233.347 1834.23,233.157 1834.8,230.887 1835.36,230.764 1835.93,229.887 1836.5,229.845 1837.07,228.571 1837.64,227.661 1838.21,226.788 1838.77,225.013 1839.34,227.41 1839.91,229.474 1840.48,229.577 1841.05,228.512 1841.62,228.785 1842.18,229.855 1842.75,230.935 1843.32,229.697 1843.89,231.802 1844.46,233.564 1845.03,232.158 1845.59,234.266 1846.16,235.93 1846.73,237.305 1847.3,235.532 1847.87,233.876 1848.44,235.531 1849,234.908 1849.57,234.596 1850.14,233.984 1850.71,231.075 1851.28,232.077 1851.85,229.709 1852.41,229.578 1852.98,225.383 1853.55,225.451 1854.12,226.544 1854.69,223.492 1855.26,224.765 1855.82,226.022 1856.39,227.19 1856.96,228.412 1857.53,229.407 1858.1,228.492 1858.67,228.545 1859.23,230.691 1859.8,227.425 1860.37,228.641 1860.94,229.647 1861.51,228.475 1862.08,228.723 1862.64,228.791 1863.21,228.647 1863.78,230.703 1864.35,229.683 1864.92,228.573 1865.49,227.319 1866.05,226.397 1866.62,226.695 1867.19,225.783 1867.76,225.022 1868.33,226.407 1868.9,224.544 1869.46,224.813 1870.03,225.114 1870.6,225.47 1871.17,226.928 1871.74,227.162 1872.31,227.146 1872.87,228.508 1873.44,228.774 1874.01,227.86 1874.58,229.136 1875.15,231.288 1875.72,231.954 1876.28,231.859 1876.85,232.598 1877.42,234.434 1877.99,235.084 1878.56,233.439 1879.13,232.845 1879.69,234.523 1880.26,232.102 1880.83,232.958 1881.4,233.755 1881.97,236.822 1882.54,235.028 1883.1,233.45 1883.67,235.569 1884.24,235.274 1884.81,233.56 1885.38,231.139 1885.95,229.857 1886.51,228.284 1887.08,229.421 1887.65,230.545 1888.22,231.629 1888.79,231.44 1889.36,231.255 1889.92,229.014 1890.49,228.009 1891.06,229.168 1891.63,228.032 1892.2,229.237 1892.77,229.367 1893.33,229.245 1893.9,229.354 1894.47,227.271 1895.04,226.25 1895.61,226.397 1896.18,225.396 1896.74,225.757 1897.31,229.009 1897.88,227.893 1898.45,225.857 1899.02,225.089 1899.59,224.106 1900.16,225.565 1900.72,225.976 1901.29,225.97 1901.86,226.188 1902.43,226.405 1903,225.55 1903.57,227.756 1904.13,227.895 1904.7,227.838 1905.27,226.036 1905.84,227.375 1906.41,227.596 1906.98,224.637 1907.54,224.155 1908.11,226.672 1908.68,228.747 1909.25,231.055 1909.82,232.034 1910.39,230.984 1910.95,229.941 1911.52,230.067 1912.09,228.856 1912.66,227.714 1913.23,224.879 1913.8,227.201 1914.36,227.312 1914.93,229.364 1915.5,230.449 1916.07,230.47 1916.64,229.58 1917.21,228.468 1917.77,228.731 1918.34,231.899 1918.91,232.83 1919.48,233.66 1920.05,234.488 1920.62,234.161 1921.18,233.737 1921.75,233.365 1922.32,232.964 1922.89,235.887 1923.46,234.278 1924.03,232.878 1924.59,231.629 1925.16,231.422 1925.73,230.307 1926.3,228.299 1926.87,228.431 1927.44,228.617 1928,227.84 1928.57,228.001 1929.14,230.085 1929.71,229.838 1930.28,229.846 1930.85,227.7 1931.41,227.735 1931.98,228.675 1932.55,227.747 1933.12,229.851 1933.69,228.514 1934.26,229.396 1934.82,228.181 1935.39,228.025 1935.96,227.068 1936.53,228.245 1937.1,229.061 1937.67,228.801 1938.23,225.805 1938.8,223.961 1939.37,220.263 1939.94,220.136 1940.51,221.933 1941.08,222.479 1941.64,224.015 1942.21,225.588 1942.78,225.869 1943.35,226.074 1943.92,225.557 1944.49,221.778 1945.05,222.42 1945.62,219.975 1946.19,221.679 1946.76,224.433 1947.33,223.767 1947.9,223.415 1948.46,223.742 1949.03,224.325 1949.6,223.673 1950.17,225.437 1950.74,224.905 1951.31,228.42 1951.87,227.615 1952.44,231.059 1953.01,231.143 1953.58,231.071 1954.15,231.226 1954.72,231.262 1955.28,230.276 1955.85,230.309 1956.42,230.54 1956.99,230.875 1957.56,232.901 1958.13,233.735 1958.69,233.798 1959.26,232.593 1959.83,232.482 1960.4,233.375 1960.97,234.094 1961.54,234.906 1962.1,232.369 1962.67,231.009 1963.24,232.108 1963.81,231.071 1964.38,229.912 1964.95,229.935 1965.51,227.994 1966.08,230.276 1966.65,231.574 1967.22,232.678 1967.79,234.666 1968.36,234.265 1968.92,232.872 1969.49,231.504 1970.06,231.168 1970.63,233.188 1971.2,234.121 1971.77,234.833 1972.34,233.323 1972.9,233.978 1973.47,233.802 1974.04,231.444 1974.61,227.3 1975.18,227.483 1975.75,227.733 1976.31,228.889 1976.88,227.819 1977.45,227.967 1978.02,227.909 1978.59,231.163 1979.16,231.869 1979.72,229.824 1980.29,228.779 1980.86,227.661 1981.43,228.592 1982,228.452 1982.57,230.778 1983.13,231.794 1983.7,230.385 1984.27,229.279 1984.84,229.097 1985.41,229.315 1985.98,229.221 1986.54,231.253 1987.11,230.137 1987.68,229.062 1988.25,231.085 1988.82,231.004 1989.39,230.731 1989.95,229.428 1990.52,231.489 1991.09,231.337 1991.66,232.241 1992.23,232.248 1992.8,232.949 1993.36,233.578 1993.93,232.379 1994.5,231.318 1995.07,230.239 1995.64,229.083 1996.21,229.861 1996.77,230.821 1997.34,231.789 1997.91,230.739 1998.48,229.758 1999.05,229.649 1999.62,227.555 2000.18,227.66 2000.75,226.745 2001.32,225.71 2001.89,225.996 2002.46,225.445 2003.03,225.658 2003.59,226.03 2004.16,225.087 2004.73,221.561 2005.3,223.152 2005.87,225.697 2006.44,225.058 2007,223.383 2007.57,224.061 2008.14,221.24 2008.71,221.721 2009.28,222.224 2009.85,223.827 2010.41,227.717 2010.98,228.983 2011.55,228.09 2012.12,229.498 2012.69,229.469 2013.26,229.59 2013.82,230.628 2014.39,230.702 2014.96,231.69 2015.53,231.414 2016.1,231.278 2016.67,231.049 2017.23,232.142 2017.8,231.867 2018.37,230.948 2018.94,231.886 2019.51,229.904 2020.08,230.153 2020.64,230.33 2021.21,229.158 2021.78,231.407 2022.35,231.446 2022.92,231.504 2023.49,230.574 2024.05,232.593 2024.62,233.614 2025.19,233.276 2025.76,232.154 2026.33,231 2026.9,232.104 2027.46,230.972 2028.03,231.015 2028.6,232.096 2029.17,233.078 2029.74,234.802 2030.31,233.243 2030.87,233.819 2031.44,234.653 2032.01,236.413 2032.58,234.919 2033.15,235.611 2033.72,234.272 2034.28,232.995 2034.85,232.713 2035.42,234.342 2035.99,233.87 2036.56,234.578 2037.13,235.236 2037.69,232.705 2038.26,230.306 2038.83,230.353 2039.4,231.135 2039.97,232.015 2040.54,231.764 2041.11,230.377 2041.67,227.995 2042.24,227.28 2042.81,227.412 2043.38,228.427 2043.95,228.257 2044.52,230.324 2045.08,231.037 2045.65,231.098 2046.22,233.114 2046.79,232.687 2047.36,231.712 2047.93,231.326 2048.49,230.269 2049.06,230.093 2049.63,228.756 2050.2,229.843 2050.77,229.691 2051.34,229.541 2051.9,228.528 2052.47,228.487 2053.04,228.452 2053.61,230.504 2054.18,230.396 2054.75,231.054 2055.31,230.188 2055.88,230.12 2056.45,230.081 2057.02,231.872 2057.59,232.541 2058.16,233.082 2058.72,235.904 2059.29,235.319 2059.86,235.009 2060.43,233.396 2061,233.205 2061.57,233.877 2062.13,235.508 2062.7,234.071 2063.27,232.623 2063.84,232.398 2064.41,235.192 2064.98,234.438 2065.54,232.921 2066.11,233.742 2066.68,234.31 2067.25,234.766 2067.82,233.221 2068.39,233.879 2068.95,234.358 2069.52,233.948 2070.09,233.505 2070.66,230.784 2071.23,230.497 2071.8,229.237 2072.36,231.128 2072.93,230.851 2073.5,230.481 2074.07,231.139 2074.64,231.792 2075.21,231.464 2075.77,230.172 2076.34,230.143 2076.91,229.573 2077.48,229.247 2078.05,231.224 2078.62,229.938 2079.18,228.859 2079.75,228.632 2080.32,227.773 2080.89,228.726 2081.46,228.715 2082.03,229.423 2082.59,230.132 2083.16,228.795 2083.73,226.6 2084.3,226.761 2084.87,223.7 2085.44,222.576 2086,220.743 2086.57,224.411 2087.14,224.522 2087.71,225.507 2088.28,224.784 2088.85,222.841 2089.41,219.895 2089.98,221.681 2090.55,221.994 2091.12,223.477 2091.69,222.787 2092.26,223.247 2092.82,223.455 2093.39,221.597 2093.96,221.937 2094.53,222.156 2095.1,222.504 2095.67,221.162 2096.23,222.819 2096.8,222.932 2097.37,223.332 2097.94,225.772 2098.51,227.152 2099.08,226.299 2099.64,225.693 2100.21,225.02 2100.78,224.248 2101.35,224.391 2101.92,225.821 2102.49,225.176 2103.05,223.47 2103.62,224.894 2104.19,225.143 2104.76,226.607 2105.33,226.856 2105.9,227.067 2106.46,228.24 2107.03,227.282 2107.6,224.189 2108.17,224.713 2108.74,228.017 2109.31,229.141 2109.87,229.362 2110.44,229.566 2111.01,229.706 2111.58,228.846 2112.15,229.875 2112.72,229.947 2113.29,229.977 2113.85,229.881 2114.42,231.076 2114.99,231.238 2115.56,232.319 2116.13,233.972 2116.7,232.696 2117.26,232.458 2117.83,231.175 2118.4,232.096 2118.97,231.904 2119.54,231.918 2120.11,234.883 2120.67,233.634 2121.24,231.283 2121.81,230.205 2122.38,229.17 2122.95,226.013 2123.52,226.441 2124.08,225.464 2124.65,225.9 2125.22,227.299 2125.79,227.351 2126.36,227.48 2126.93,226.901 2127.49,230.22 2128.06,228.457 2128.63,229.618 2129.2,227.543 2129.77,227.635 2130.34,225.65 2130.9,225.945 2131.47,227.255 2132.04,227.523 2132.61,227.846 2133.18,229.004 2133.75,228.135 2134.31,231.275 2134.88,233.193 2135.45,233.879 2136.02,232.664 2136.59,231.508 2137.16,230.389 2137.72,229.415 2138.29,229.524 2138.86,229.758 2139.43,229.874 2140,229.793 2140.57,230.951 2141.13,230.94 2141.7,231.763 2142.27,230.749 2142.84,231.871 2143.41,232.019 2143.98,232.046 2144.54,232.819 2145.11,233.85 2145.68,234.731 2146.25,234.414 2146.82,230.068 2147.39,231.244 2147.95,231.084 2148.52,230.125 2149.09,229.199 2149.66,231.521 2150.23,230.333 2150.8,231.223 2151.36,230.239 2151.93,228.242 2152.5,227.436 2153.07,228.71 2153.64,228.966 2154.21,229.08 2154.77,229.278 2155.34,228.337 2155.91,228.541 2156.48,230.717 2157.05,230.52 2157.62,231.547 2158.18,232.546 2158.75,233.465 2159.32,232.082 2159.89,231.956 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip670)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.025\n  with uncertainty of ± 0.0022567953773238187\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01867 ± (0.00176646, 0.0018733) (MC)\n  95% confidence interval: [-4.02242, -4.01515]) (MC)\n  linear error propagation: -4.01874 ± 0.0018616\n  |δ_y| = |0.00131497| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018665695757707, val_l = 0.0037587521142858904, val_u = 0.0035201643335973642)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip700\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip700)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip701\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip700)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip702\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.29 2211.02,1147.29 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,987.904 2211.02,987.904 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,828.517 2211.02,828.517 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,669.13 2211.02,669.13 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,509.743 2211.02,509.743 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,350.356 2211.02,350.356 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,190.97 2211.02,190.97 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.29 365.751,1147.29 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,987.904 365.751,987.904 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,828.517 365.751,828.517 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,669.13 365.751,669.13 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,509.743 365.751,509.743 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,350.356 365.751,350.356 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,190.97 365.751,190.97 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M298.909 1133.09 Q295.298 1133.09 293.469 1136.65 Q291.664 1140.2 291.664 1147.33 Q291.664 1154.43 293.469 1158 Q295.298 1161.54 298.909 1161.54 Q302.543 1161.54 304.349 1158 Q306.177 1154.43 306.177 1147.33 Q306.177 1140.2 304.349 1136.65 Q302.543 1133.09 298.909 1133.09 M298.909 1129.39 Q304.719 1129.39 307.775 1133.99 Q310.853 1138.58 310.853 1147.33 Q310.853 1156.05 307.775 1160.66 Q304.719 1165.24 298.909 1165.24 Q293.099 1165.24 290.02 1160.66 Q286.964 1156.05 286.964 1147.33 Q286.964 1138.58 290.02 1133.99 Q293.099 1129.39 298.909 1129.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M259.557 1001.25 L267.196 1001.25 L267.196 974.883 L258.886 976.55 L258.886 972.291 L267.15 970.624 L271.826 970.624 L271.826 1001.25 L279.465 1001.25 L279.465 1005.18 L259.557 1005.18 L259.557 1001.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 973.703 Q295.298 973.703 293.469 977.268 Q291.664 980.809 291.664 987.939 Q291.664 995.045 293.469 998.61 Q295.298 1002.15 298.909 1002.15 Q302.543 1002.15 304.349 998.61 Q306.177 995.045 306.177 987.939 Q306.177 980.809 304.349 977.268 Q302.543 973.703 298.909 973.703 M298.909 969.999 Q304.719 969.999 307.775 974.606 Q310.853 979.189 310.853 987.939 Q310.853 996.666 307.775 1001.27 Q304.719 1005.86 298.909 1005.86 Q293.099 1005.86 290.02 1001.27 Q286.964 996.666 286.964 987.939 Q286.964 979.189 290.02 974.606 Q293.099 969.999 298.909 969.999 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M262.775 841.862 L279.094 841.862 L279.094 845.797 L257.15 845.797 L257.15 841.862 Q259.812 839.107 264.395 834.478 Q269.002 829.825 270.182 828.482 Q272.428 825.959 273.307 824.223 Q274.21 822.464 274.21 820.774 Q274.21 818.02 272.266 816.283 Q270.344 814.547 267.242 814.547 Q265.043 814.547 262.59 815.311 Q260.159 816.075 257.381 817.626 L257.381 812.904 Q260.205 811.77 262.659 811.191 Q265.113 810.612 267.15 810.612 Q272.52 810.612 275.715 813.297 Q278.909 815.983 278.909 820.473 Q278.909 822.603 278.099 824.524 Q277.312 826.422 275.205 829.015 Q274.627 829.686 271.525 832.904 Q268.423 836.098 262.775 841.862 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 814.316 Q295.298 814.316 293.469 817.881 Q291.664 821.422 291.664 828.552 Q291.664 835.658 293.469 839.223 Q295.298 842.765 298.909 842.765 Q302.543 842.765 304.349 839.223 Q306.177 835.658 306.177 828.552 Q306.177 821.422 304.349 817.881 Q302.543 814.316 298.909 814.316 M298.909 810.612 Q304.719 810.612 307.775 815.219 Q310.853 819.802 310.853 828.552 Q310.853 837.279 307.775 841.885 Q304.719 846.468 298.909 846.468 Q293.099 846.468 290.02 841.885 Q286.964 837.279 286.964 828.552 Q286.964 819.802 290.02 815.219 Q293.099 810.612 298.909 810.612 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M272.914 667.776 Q276.27 668.494 278.145 670.762 Q280.043 673.031 280.043 676.364 Q280.043 681.48 276.525 684.281 Q273.006 687.082 266.525 687.082 Q264.349 687.082 262.034 686.642 Q259.742 686.225 257.289 685.369 L257.289 680.855 Q259.233 681.989 261.548 682.568 Q263.863 683.146 266.386 683.146 Q270.784 683.146 273.076 681.41 Q275.39 679.674 275.39 676.364 Q275.39 673.308 273.238 671.596 Q271.108 669.859 267.289 669.859 L263.261 669.859 L263.261 666.017 L267.474 666.017 Q270.923 666.017 272.752 664.651 Q274.58 663.262 274.58 660.67 Q274.58 658.008 272.682 656.596 Q270.807 655.16 267.289 655.16 Q265.367 655.16 263.168 655.577 Q260.969 655.994 258.33 656.873 L258.33 652.707 Q260.992 651.966 263.307 651.596 Q265.645 651.225 267.705 651.225 Q273.029 651.225 276.131 653.656 Q279.233 656.063 279.233 660.184 Q279.233 663.054 277.59 665.045 Q275.946 667.012 272.914 667.776 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 654.929 Q295.298 654.929 293.469 658.494 Q291.664 662.035 291.664 669.165 Q291.664 676.271 293.469 679.836 Q295.298 683.378 298.909 683.378 Q302.543 683.378 304.349 679.836 Q306.177 676.271 306.177 669.165 Q306.177 662.035 304.349 658.494 Q302.543 654.929 298.909 654.929 M298.909 651.225 Q304.719 651.225 307.775 655.832 Q310.853 660.415 310.853 669.165 Q310.853 677.892 307.775 682.498 Q304.719 687.082 298.909 687.082 Q293.099 687.082 290.02 682.498 Q286.964 677.892 286.964 669.165 Q286.964 660.415 290.02 655.832 Q293.099 651.225 298.909 651.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M271.594 496.537 L259.789 514.986 L271.594 514.986 L271.594 496.537 M270.367 492.463 L276.247 492.463 L276.247 514.986 L281.177 514.986 L281.177 518.875 L276.247 518.875 L276.247 527.023 L271.594 527.023 L271.594 518.875 L255.992 518.875 L255.992 514.361 L270.367 492.463 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 495.542 Q295.298 495.542 293.469 499.107 Q291.664 502.648 291.664 509.778 Q291.664 516.885 293.469 520.449 Q295.298 523.991 298.909 523.991 Q302.543 523.991 304.349 520.449 Q306.177 516.885 306.177 509.778 Q306.177 502.648 304.349 499.107 Q302.543 495.542 298.909 495.542 M298.909 491.838 Q304.719 491.838 307.775 496.445 Q310.853 501.028 310.853 509.778 Q310.853 518.505 307.775 523.111 Q304.719 527.695 298.909 527.695 Q293.099 527.695 290.02 523.111 Q286.964 518.505 286.964 509.778 Q286.964 501.028 290.02 496.445 Q293.099 491.838 298.909 491.838 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M258.793 333.076 L277.15 333.076 L277.15 337.012 L263.076 337.012 L263.076 345.484 Q264.094 345.137 265.113 344.975 Q266.131 344.789 267.15 344.789 Q272.937 344.789 276.316 347.961 Q279.696 351.132 279.696 356.549 Q279.696 362.127 276.224 365.229 Q272.752 368.308 266.432 368.308 Q264.256 368.308 261.988 367.937 Q259.742 367.567 257.335 366.826 L257.335 362.127 Q259.418 363.261 261.641 363.817 Q263.863 364.373 266.34 364.373 Q270.344 364.373 272.682 362.266 Q275.02 360.16 275.02 356.549 Q275.02 352.937 272.682 350.831 Q270.344 348.725 266.34 348.725 Q264.465 348.725 262.59 349.141 Q260.738 349.558 258.793 350.437 L258.793 333.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 336.155 Q295.298 336.155 293.469 339.72 Q291.664 343.262 291.664 350.391 Q291.664 357.498 293.469 361.062 Q295.298 364.604 298.909 364.604 Q302.543 364.604 304.349 361.062 Q306.177 357.498 306.177 350.391 Q306.177 343.262 304.349 339.72 Q302.543 336.155 298.909 336.155 M298.909 332.451 Q304.719 332.451 307.775 337.058 Q310.853 341.641 310.853 350.391 Q310.853 359.118 307.775 363.724 Q304.719 368.308 298.909 368.308 Q293.099 368.308 290.02 363.724 Q286.964 359.118 286.964 350.391 Q286.964 341.641 290.02 337.058 Q293.099 332.451 298.909 332.451 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M269.326 189.106 Q266.178 189.106 264.326 191.259 Q262.497 193.412 262.497 197.162 Q262.497 200.888 264.326 203.064 Q266.178 205.217 269.326 205.217 Q272.474 205.217 274.303 203.064 Q276.154 200.888 276.154 197.162 Q276.154 193.412 274.303 191.259 Q272.474 189.106 269.326 189.106 M278.608 174.453 L278.608 178.713 Q276.849 177.879 275.043 177.44 Q273.261 177 271.502 177 Q266.872 177 264.418 180.125 Q261.988 183.25 261.641 189.569 Q263.006 187.555 265.066 186.49 Q267.127 185.402 269.603 185.402 Q274.812 185.402 277.821 188.574 Q280.853 191.722 280.853 197.162 Q280.853 202.486 277.705 205.703 Q274.557 208.921 269.326 208.921 Q263.33 208.921 260.159 204.338 Q256.988 199.731 256.988 191.004 Q256.988 182.81 260.877 177.949 Q264.766 173.065 271.316 173.065 Q273.076 173.065 274.858 173.412 Q276.664 173.759 278.608 174.453 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 176.768 Q295.298 176.768 293.469 180.333 Q291.664 183.875 291.664 191.004 Q291.664 198.111 293.469 201.675 Q295.298 205.217 298.909 205.217 Q302.543 205.217 304.349 201.675 Q306.177 198.111 306.177 191.004 Q306.177 183.875 304.349 180.333 Q302.543 176.768 298.909 176.768 M298.909 173.065 Q304.719 173.065 307.775 177.671 Q310.853 182.254 310.853 191.004 Q310.853 199.731 307.775 204.338 Q304.719 208.921 298.909 208.921 Q293.099 208.921 290.02 204.338 Q286.964 199.731 286.964 191.004 Q286.964 182.254 290.02 177.671 Q293.099 173.065 298.909 173.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip702)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1029.85 400.199,921.958 400.786,822.963 401.372,851.409 401.958,762.196 402.545,680.992 403.131,606.861 403.718,539.163 404.304,479.415 404.891,423.439 405.477,372.896 406.063,327.434 406.65,286.725 407.236,252.099 407.823,219.895 408.409,322.768 408.995,292.589 409.582,266.065 410.168,242.955 410.755,272.138 411.341,251.717 411.927,276.673 412.514,261.276 413.1,284.511 413.687,272.461 414.273,294.006 414.86,283.279 415.446,276.407 416.032,270.135 416.619,291.284 417.205,288.551 417.792,286.303 418.378,285.921 418.964,288.063 419.551,291.498 420.137,295.469 420.724,350.664 421.31,385.348 421.896,391.334 422.483,397.431 423.069,417.584 423.656,426.138 424.242,445.699 424.829,476.658 425.415,485.444 426.001,504.924 426.588,522.915 427.174,550.084 427.761,574.322 428.347,591.273 428.933,615.204 429.52,645.055 430.106,652.173 430.693,666.83 431.279,681.494 431.865,688.8 432.452,707.743 433.038,720.611 433.625,732.577 434.211,739.309 434.798,751.361 435.384,758.175 435.97,765.884 436.557,773.358 437.143,803.063 437.73,809.75 438.316,824.887 438.902,839.368 439.489,857.129 440.075,862.602 440.662,875.639 441.248,884.977 441.835,897.541 442.421,909.443 443.007,918.008 443.594,929.449 444.18,942.83 444.767,947.284 445.353,957.767 445.939,962.463 446.526,972.44 447.112,979.576 447.699,984.434 448.285,991.797 448.871,998.812 449.458,1003.09 450.044,1009.68 450.631,1019.01 451.217,1025.18 451.804,1029.03 452.39,1042.27 452.976,1050.03 453.563,1057.82 454.149,1060.75 454.736,1063.97 455.322,1069.22 455.908,1074.28 456.495,1079.58 457.081,1090.79 457.668,1095.49 458.254,1102.2 458.84,1106.62 459.427,1111.08 460.013,1113.61 460.6,1117.72 461.186,1124.07 461.773,1127.97 462.359,1131.8 462.945,1135.65 463.532,1137.46 464.118,1144.75 464.705,1144.59 465.291,1151.74 465.877,1157.16 466.464,1160.19 467.05,1163.3 467.637,1164.65 468.223,1172.67 468.809,1170.24 469.396,1171.27 469.982,1175.88 470.569,1178.97 471.155,1180.01 471.742,1181.05 472.328,1180.21 472.914,1184.63 473.501,1193.36 474.087,1195.55 474.674,1199.15 475.26,1199.65 475.846,1201.73 476.433,1200.66 477.019,1198.43 477.606,1199.1 478.192,1200.05 478.778,1203.73 479.365,1205.98 479.951,1211.08 480.538,1212.82 481.124,1214.51 481.711,1216.41 482.297,1217.74 482.883,1219.36 483.47,1214.99 484.056,1216.82 484.643,1217.2 485.229,1219.08 485.815,1222.28 486.402,1222.27 486.988,1222.13 487.575,1229.15 488.161,1231.73 488.748,1233.94 489.334,1237.87 489.92,1241.34 490.507,1244.38 491.093,1242.03 491.68,1242.58 492.266,1244.63 492.852,1243.63 493.439,1244.05 494.025,1243.26 494.612,1245.47 495.198,1247.21 495.784,1248.82 496.371,1245.15 496.957,1242.82 497.544,1243.44 498.13,1244.13 498.717,1243.3 499.303,1245.17 499.889,1244.25 500.476,1244.91 501.062,1242.63 501.649,1243.44 502.235,1243.94 502.821,1246.25 503.408,1247.99 503.994,1248.35 504.581,1247.39 505.167,1246.8 505.753,1247.6 506.34,1246.92 506.926,1246.01 507.513,1247.72 508.099,1246.72 508.686,1245.86 509.272,1245.29 509.858,1245.77 510.445,1243.5 511.031,1245.27 511.618,1247.12 512.204,1250.25 512.79,1250.53 513.377,1249.33 513.963,1248.3 514.55,1244.64 515.136,1241.28 515.722,1241.94 516.309,1238.45 516.895,1240.78 517.482,1241.69 518.068,1240.79 518.655,1241.41 519.241,1240.76 519.827,1238.96 520.414,1239.59 521,1239.1 521.587,1238.32 522.173,1237.91 522.759,1240.13 523.346,1243.46 523.932,1241.45 524.519,1240.75 525.105,1240.26 525.691,1239.7 526.278,1242.01 526.864,1245.34 527.451,1243.1 528.037,1242.62 528.624,1239.34 529.21,1242.66 529.796,1241.95 530.383,1242.51 530.969,1243.09 531.556,1242.3 532.142,1241.68 532.728,1239.9 533.315,1240.81 533.901,1238.8 534.488,1238.38 535.074,1236.44 535.661,1241.49 536.247,1239.32 536.833,1239.83 537.42,1237.78 538.006,1237.43 538.593,1235.61 539.179,1240.21 539.765,1239.5 540.352,1240.57 540.938,1239.94 541.525,1243.14 542.111,1242.53 542.697,1242.92 543.284,1242.45 543.87,1241.97 544.457,1240.25 545.043,1239.76 545.63,1239.45 546.216,1242.54 546.802,1244.43 547.389,1243.78 547.975,1245.71 548.562,1245.92 549.148,1246.43 549.734,1249.3 550.321,1244.36 550.907,1240.64 551.494,1240.87 552.08,1237.64 552.666,1235.87 553.253,1236.89 553.839,1237.61 554.426,1237.09 555.012,1236.63 555.599,1233.55 556.185,1234.71 556.771,1235.69 557.358,1233.89 557.944,1234.97 558.531,1234.51 559.117,1232.57 559.703,1236.19 560.29,1234.43 560.876,1235.33 561.463,1235.08 562.049,1233.55 562.635,1234.52 563.222,1234.12 563.808,1232.59 564.395,1233.59 564.981,1234.83 565.568,1235.54 566.154,1235.54 566.74,1233.61 567.327,1230.74 567.913,1231.85 568.5,1231.61 569.086,1231.21 569.672,1233.33 570.259,1231.55 570.845,1231.58 571.432,1231.12 572.018,1230.89 572.605,1231.06 573.191,1234.75 573.777,1232.93 574.364,1231.41 574.95,1232.38 575.537,1232.16 576.123,1231.49 576.709,1233.88 577.296,1233.48 577.882,1231.9 578.469,1232.88 579.055,1233.83 579.641,1230.82 580.228,1230.44 580.814,1230.27 581.401,1230.06 581.987,1228.63 582.574,1232.55 583.16,1231.16 583.746,1228.13 584.333,1227.86 584.919,1226.53 585.506,1223.62 586.092,1223.54 586.678,1224.95 587.265,1223.84 587.851,1227.86 588.438,1222.52 589.024,1220.04 589.61,1219.15 590.197,1220.66 590.783,1220.92 591.37,1220.99 591.956,1219.82 592.543,1221.14 593.129,1219.89 593.715,1220.32 594.302,1221.84 594.888,1221.98 595.475,1225.06 596.061,1224.97 596.647,1223.7 597.234,1224.13 597.82,1223.9 598.407,1224.65 598.993,1225.78 599.579,1224.26 600.166,1221.84 600.752,1223.26 601.339,1224.6 601.925,1223.25 602.512,1224.57 603.098,1224.37 603.684,1228.27 604.271,1226.78 604.857,1227.83 605.444,1231.56 606.03,1234.97 606.616,1234.28 607.203,1233.39 607.789,1234.03 608.376,1234.76 608.962,1233.16 609.548,1232.7 610.135,1233.65 610.721,1235.59 611.308,1231.97 611.894,1228.79 612.481,1231.23 613.067,1231.9 613.653,1232.6 614.24,1232.38 614.826,1233.02 615.413,1231.21 615.999,1234.42 616.585,1237.59 617.172,1239.16 617.758,1237.98 618.345,1237.22 618.931,1236.67 619.518,1238.3 620.104,1234.44 620.69,1233.9 621.277,1234.5 621.863,1236.17 622.45,1236.48 623.036,1236.84 623.622,1232.03 624.209,1230.12 624.795,1227.27 625.382,1228.16 625.968,1226.38 626.554,1227.46 627.141,1228.55 627.727,1229.48 628.314,1228.88 628.9,1230 629.487,1229.47 630.073,1229.38 630.659,1231.33 631.246,1230.69 631.832,1231.8 632.419,1230.97 633.005,1227.9 633.591,1227.3 634.178,1226.95 634.764,1226.64 635.351,1229.02 635.937,1227.44 636.523,1227.26 637.11,1229.43 637.696,1227.7 638.283,1224.7 638.869,1222.06 639.456,1224.46 640.042,1226.72 640.628,1226.5 641.215,1226.17 641.801,1223.25 642.388,1224.27 642.974,1224.03 643.56,1224.95 644.147,1224.77 644.733,1223.19 645.32,1221.87 645.906,1221.8 646.492,1220.46 647.079,1219.06 647.665,1217.77 648.252,1217.79 648.838,1219.28 649.425,1219.57 650.011,1219.31 650.597,1219.29 651.184,1223.19 651.77,1222.98 652.357,1225.17 652.943,1224.82 653.529,1224.71 654.116,1224.6 654.702,1224.42 655.289,1222.81 655.875,1222.75 656.462,1223.55 657.048,1225.88 657.634,1225.41 658.221,1224.85 658.807,1222.98 659.394,1222.82 659.98,1225.08 660.566,1224.77 661.153,1222.94 661.739,1220.17 662.326,1221.41 662.912,1221.57 663.498,1221.58 664.085,1220.13 664.671,1223.87 665.258,1220.99 665.844,1220.7 666.431,1223.08 667.017,1221.5 667.603,1221.53 668.19,1222.74 668.776,1223.89 669.363,1222.33 669.949,1225.88 670.535,1225.69 671.122,1227.76 671.708,1227.03 672.295,1224.98 672.881,1222.16 673.467,1223.32 674.054,1226.61 674.64,1223.39 675.227,1224.35 675.813,1225.39 676.4,1223.84 676.986,1223.79 677.572,1223.68 678.159,1224.68 678.745,1225.77 679.332,1223.98 679.918,1223.7 680.504,1225.97 681.091,1225.59 681.677,1225.1 682.264,1221.99 682.85,1221.54 683.436,1221.14 684.023,1220.94 684.609,1221.94 685.196,1221.86 685.782,1222.95 686.369,1222.45 686.955,1220.9 687.541,1221.87 688.128,1217.77 688.714,1216.83 689.301,1216.83 689.887,1219.41 690.473,1219.59 691.06,1217.97 691.646,1218.99 692.233,1217.32 692.819,1218.75 693.405,1218.4 693.992,1217.94 694.578,1220.41 695.165,1218.67 695.751,1218.27 696.338,1215.3 696.924,1216.75 697.51,1216.65 698.097,1216.44 698.683,1216.45 699.27,1216.52 699.856,1215.18 700.442,1214.13 701.029,1215.67 701.615,1212.73 702.202,1213.98 702.788,1215.67 703.375,1217.09 703.961,1215.7 704.547,1212.94 705.134,1217.11 705.72,1218.29 706.307,1214.37 706.893,1213.15 707.479,1211.7 708.066,1213.19 708.652,1212.27 709.239,1212.38 709.825,1212.71 710.411,1214.07 710.998,1216.9 711.584,1218.38 712.171,1219.5 712.757,1218.15 713.344,1217.94 713.93,1217.91 714.516,1217.98 715.103,1216.5 715.689,1215.38 716.276,1215.36 716.862,1215.33 717.448,1219.39 718.035,1220.09 718.621,1222.8 719.208,1222.25 719.794,1223.07 720.38,1222.87 720.967,1221.33 721.553,1219.55 722.14,1219.13 722.726,1218.83 723.313,1218.65 723.899,1215.8 724.485,1215.69 725.072,1213.01 725.658,1211.7 726.245,1213.23 726.831,1214.94 727.417,1214.89 728.004,1218.79 728.59,1218.82 729.177,1217.31 729.763,1218.59 730.349,1217.27 730.936,1219.81 731.522,1221.09 732.109,1221.03 732.695,1220.66 733.282,1221.61 733.868,1226.14 734.454,1230.72 735.041,1229.86 735.627,1226.65 736.214,1228.69 736.8,1229.04 737.386,1224.69 737.973,1222.73 738.559,1222.43 739.146,1219.5 739.732,1219.06 740.318,1217.38 740.905,1219.69 741.491,1221.03 742.078,1219.33 742.664,1217.87 743.251,1219.14 743.837,1217.47 744.423,1217.5 745.01,1218.53 745.596,1218.36 746.183,1222.15 746.769,1221.57 747.355,1217.46 747.942,1213.13 748.528,1213.23 749.115,1210.81 749.701,1216.19 750.288,1216.05 750.874,1214.93 751.46,1210.83 752.047,1212.08 752.633,1211.07 753.22,1210.05 753.806,1210.54 754.392,1212.07 754.979,1209.64 755.565,1210.22 756.152,1212.98 756.738,1211.71 757.324,1211.93 757.911,1207.98 758.497,1205.89 759.084,1206.44 759.67,1208.33 760.257,1207.61 760.843,1210.56 761.429,1209.56 762.016,1210.98 762.602,1211.2 763.189,1211.46 763.775,1214.2 764.361,1212.9 764.948,1214.37 765.534,1214.15 766.121,1213.05 766.707,1217.24 767.293,1215.69 767.88,1215.76 768.466,1214.57 769.053,1214.7 769.639,1214.59 770.226,1213.59 770.812,1216.25 771.398,1217.37 771.985,1216.1 772.571,1216.08 773.158,1218.67 773.744,1217.2 774.33,1218.22 774.917,1219.48 775.503,1220.55 776.09,1216.42 776.676,1215.24 777.262,1212.84 777.849,1215.78 778.435,1216.04 779.022,1216.24 779.608,1214.03 780.195,1213.94 780.781,1213.96 781.367,1212.45 781.954,1211.36 782.54,1208.99 783.127,1208.99 783.713,1208.99 784.299,1207.85 784.886,1207.98 785.472,1208.65 786.059,1207.59 786.645,1207.95 787.232,1206.81 787.818,1204.73 788.404,1206.61 788.991,1206.87 789.577,1207.51 790.164,1209.25 790.75,1208.53 791.336,1208.88 791.923,1208.08 792.509,1206.99 793.096,1206.23 793.682,1206.94 794.268,1208.79 794.855,1207.67 795.441,1205.51 796.028,1205.85 796.614,1207.62 797.201,1207.78 797.787,1209.55 798.373,1209.81 798.96,1211.46 799.546,1211.71 800.133,1213.04 800.719,1211.84 801.305,1213.26 801.892,1213.37 802.478,1214.68 803.065,1214.64 803.651,1211.74 804.237,1213.4 804.824,1216.02 805.41,1210.48 805.997,1210.67 806.583,1211.2 807.17,1212.71 807.756,1211.28 808.342,1209.93 808.929,1210.29 809.515,1209.12 810.102,1209.36 810.688,1209.53 811.274,1211 811.861,1212.53 812.447,1213.86 813.034,1212.53 813.62,1210.03 814.206,1210.35 814.793,1210.53 815.379,1210.98 815.966,1217.74 816.552,1217.82 817.139,1219.19 817.725,1218.91 818.311,1218.94 818.898,1217.51 819.484,1217.32 820.071,1214.57 820.657,1214.27 821.243,1216.66 821.83,1216.65 822.416,1217.93 823.003,1216.82 823.589,1217.75 824.175,1215.05 824.762,1218.77 825.348,1219.76 825.935,1220.62 826.521,1219.18 827.108,1216.4 827.694,1216.51 828.28,1217.7 828.867,1213.85 829.453,1213.93 830.04,1216.64 830.626,1217.73 831.212,1217.3 831.799,1218.33 832.385,1219.22 832.972,1220.25 833.558,1219.83 834.145,1221.05 834.731,1218.42 835.317,1218.27 835.904,1212.83 836.49,1211.52 837.077,1211.93 837.663,1210.45 838.249,1209.49 838.836,1209.61 839.422,1211.4 840.009,1212.7 840.595,1211.32 841.181,1212.77 841.768,1212.8 842.354,1209.98 842.941,1214.22 843.527,1214.48 844.114,1215.94 844.7,1213.61 845.286,1213.7 845.873,1211.14 846.459,1209.92 847.046,1211.75 847.632,1210.63 848.218,1213.35 848.805,1211.84 849.391,1214.53 849.978,1214.42 850.564,1215.62 851.15,1214.04 851.737,1211.48 852.323,1212.94 852.91,1212.81 853.496,1214.29 854.083,1214.32 854.669,1213.04 855.255,1212.92 855.842,1215.52 856.428,1213.97 857.015,1214.96 857.601,1218.66 858.187,1216.93 858.774,1215.44 859.36,1215.29 859.947,1213.93 860.533,1215.52 861.119,1217.71 861.706,1217.61 862.292,1214.67 862.879,1215.88 863.465,1214.6 864.052,1214.2 864.638,1213.75 865.224,1213.52 865.811,1213.31 866.397,1214.33 866.984,1215.49 867.57,1214.28 868.156,1210.2 868.743,1210.26 869.329,1210.16 869.916,1209.29 870.502,1208.02 871.089,1208.55 871.675,1207.61 872.261,1209.22 872.848,1210.81 873.434,1213.54 874.021,1213.32 874.607,1212.13 875.193,1212.27 875.78,1213.57 876.366,1216.44 876.953,1214.99 877.539,1214.67 878.125,1213.43 878.712,1214.7 879.298,1214.73 879.885,1214.76 880.471,1218.73 881.058,1218.41 881.644,1217.01 882.23,1220.6 882.817,1222.66 883.403,1218.03 883.99,1216.77 884.576,1214.03 885.162,1213.87 885.749,1213.79 886.335,1214.81 886.922,1217.58 887.508,1217.37 888.094,1216.97 888.681,1216.63 889.267,1216.38 889.854,1216.03 890.44,1218.16 891.027,1214.99 891.613,1213.38 892.199,1210.75 892.786,1208.24 893.372,1210.96 893.959,1212.21 894.545,1212.24 895.131,1212.2 895.718,1210.95 896.304,1211.04 896.891,1209.94 897.477,1210.15 898.063,1212.58 898.65,1212.43 899.236,1211.09 899.823,1211 900.409,1212.52 900.996,1209.74 901.582,1209.87 902.168,1208.89 902.755,1206.36 903.341,1208.01 903.928,1209.59 904.514,1211.32 905.1,1211.37 905.687,1210.11 906.273,1208.88 906.86,1209.17 907.446,1210.74 908.032,1212.01 908.619,1213.36 909.205,1214.67 909.792,1213.16 910.378,1214.19 910.965,1212.56 911.551,1216.56 912.137,1217.7 912.724,1220.07 913.31,1221.14 913.897,1219.52 914.483,1220.54 915.069,1219.99 915.656,1220.67 916.242,1219 916.829,1217.66 917.415,1218.59 918.002,1217.28 918.588,1216.97 919.174,1219.52 919.761,1218.91 920.347,1218.62 920.934,1219.62 921.52,1220.63 922.106,1222.91 922.693,1217.04 923.279,1219.33 923.866,1217.65 924.452,1219.85 925.038,1219.63 925.625,1220.3 926.211,1219.71 926.798,1220.59 927.384,1221.29 927.971,1221.99 928.557,1217.35 929.143,1215.83 929.73,1214.28 930.316,1214.22 930.903,1212.78 931.489,1212.52 932.075,1215.08 932.662,1215.04 933.248,1214.87 933.835,1213.37 934.421,1214.51 935.007,1215.82 935.594,1215.59 936.18,1215.79 936.767,1215.73 937.353,1215.54 937.94,1213.9 938.526,1211.3 939.112,1208.55 939.699,1208.89 940.285,1208.98 940.872,1209.46 941.458,1209.48 942.044,1212.28 942.631,1213.57 943.217,1213.63 943.804,1216.25 944.39,1216 944.976,1214.87 945.563,1214.7 946.149,1212.03 946.736,1209.48 947.322,1210.92 947.909,1209.84 948.495,1210.15 949.081,1209.33 949.668,1208.1 950.254,1208.36 950.841,1211.16 951.427,1209.9 952.013,1208.64 952.6,1211.55 953.186,1209.19 953.773,1207.81 954.359,1207.92 954.945,1209.62 955.532,1209.95 956.118,1208.72 956.705,1207.73 957.291,1206.69 957.878,1207.01 958.464,1207.03 959.05,1209.91 959.637,1208.53 960.223,1208.78 960.81,1208.93 961.396,1208.93 961.982,1207.66 962.569,1207.72 963.155,1208.09 963.742,1207.16 964.328,1207.48 964.915,1214.41 965.501,1215.64 966.087,1215.63 966.674,1215.67 967.26,1216.87 967.847,1215.37 968.433,1217.87 969.019,1216.46 969.606,1217.58 970.192,1216.19 970.779,1216.07 971.365,1217.17 971.951,1217.07 972.538,1220.99 973.124,1223.13 973.711,1221.53 974.297,1221.23 974.884,1219.38 975.47,1217.89 976.056,1216.23 976.643,1214.69 977.229,1211.83 977.816,1211.67 978.402,1211.65 978.988,1209.16 979.575,1209.22 980.161,1210.51 980.748,1209.51 981.334,1208.34 981.92,1208.57 982.507,1204.95 983.093,1204.2 983.68,1207.12 984.266,1209.71 984.853,1208.69 985.439,1206.52 986.025,1207.14 986.612,1208.73 987.198,1206.57 987.785,1205.52 988.371,1206.03 988.957,1206.41 989.544,1209.55 990.13,1208.09 990.717,1208.2 991.303,1208.19 991.889,1208.45 992.476,1213.65 993.062,1212.53 993.649,1216.5 994.235,1218.87 994.822,1218.5 995.408,1214.12 995.994,1217.91 996.581,1219.08 997.167,1218.94 997.754,1220.08 998.34,1215.94 998.926,1218.39 999.513,1216.75 1000.1,1216.57 1000.69,1213.8 1001.27,1212.4 1001.86,1213.36 1002.44,1213.61 1003.03,1217.55 1003.62,1217.14 1004.2,1215.4 1004.79,1217.62 1005.38,1213.27 1005.96,1213.25 1006.55,1213.21 1007.14,1215.73 1007.72,1214.08 1008.31,1216.58 1008.9,1215.08 1009.48,1216.43 1010.07,1213.4 1010.65,1216.89 1011.24,1216.59 1011.83,1216.14 1012.41,1215.82 1013,1215.58 1013.59,1215.63 1014.17,1212.46 1014.76,1210.97 1015.35,1212.15 1015.93,1208.38 1016.52,1204.81 1017.11,1205.19 1017.69,1207.05 1018.28,1207.07 1018.86,1204.84 1019.45,1203.89 1020.04,1205.67 1020.62,1205.86 1021.21,1204.96 1021.8,1206.43 1022.38,1205.67 1022.97,1205.76 1023.56,1207.41 1024.14,1208.95 1024.73,1207.69 1025.32,1206.72 1025.9,1206.96 1026.49,1211.08 1027.07,1211.14 1027.66,1208.35 1028.25,1211.24 1028.83,1211.1 1029.42,1211.18 1030.01,1210.15 1030.59,1209.06 1031.18,1208.25 1031.77,1208.51 1032.35,1210.04 1032.94,1211.43 1033.52,1212.83 1034.11,1212.95 1034.7,1217.85 1035.28,1217.63 1035.87,1216.12 1036.46,1218.37 1037.04,1219.62 1037.63,1217.93 1038.22,1213.66 1038.8,1213.7 1039.39,1214.78 1039.98,1213.74 1040.56,1212.38 1041.15,1212.33 1041.73,1215.1 1042.32,1214.85 1042.91,1215.83 1043.49,1216.95 1044.08,1214.03 1044.67,1211.22 1045.25,1214.08 1045.84,1214.2 1046.43,1214.17 1047.01,1213.79 1047.6,1216.09 1048.19,1214.62 1048.77,1214.32 1049.36,1216.78 1049.94,1215.28 1050.53,1212.66 1051.12,1211.01 1051.7,1211.44 1052.29,1211.79 1052.88,1211.86 1053.46,1213.13 1054.05,1214.2 1054.64,1212.85 1055.22,1211.29 1055.81,1212.55 1056.39,1212.78 1056.98,1212.75 1057.57,1212.48 1058.15,1212.41 1058.74,1213.39 1059.33,1213.13 1059.91,1211.77 1060.5,1210.45 1061.09,1213.13 1061.67,1214.36 1062.26,1215.41 1062.85,1215.51 1063.43,1216.66 1064.02,1216.3 1064.6,1217.29 1065.19,1216.87 1065.78,1215.35 1066.36,1212.92 1066.95,1211.63 1067.54,1212.81 1068.12,1212.85 1068.71,1210 1069.3,1208.61 1069.88,1206.26 1070.47,1207.8 1071.06,1210.63 1071.64,1210.79 1072.23,1210.73 1072.81,1213.43 1073.4,1213.42 1073.99,1214.61 1074.57,1213.27 1075.16,1214.33 1075.75,1214.29 1076.33,1214.53 1076.92,1214.51 1077.51,1215.63 1078.09,1209.03 1078.68,1206.3 1079.26,1207.92 1079.85,1208.16 1080.44,1211.09 1081.02,1210.86 1081.61,1209.37 1082.2,1206.91 1082.78,1207.36 1083.37,1207.38 1083.96,1203.8 1084.54,1201.41 1085.13,1202.09 1085.72,1201.27 1086.3,1201.85 1086.89,1202.62 1087.47,1202.89 1088.06,1204.62 1088.65,1203.48 1089.23,1202.76 1089.82,1203.19 1090.41,1205.09 1090.99,1205.42 1091.58,1207.04 1092.17,1207.31 1092.75,1207.64 1093.34,1207.84 1093.93,1209.25 1094.51,1205.34 1095.1,1205.43 1095.68,1208.41 1096.27,1206.06 1096.86,1204.91 1097.44,1204.32 1098.03,1209.85 1098.62,1210.14 1099.2,1210.24 1099.79,1209.24 1100.38,1208.14 1100.96,1212.17 1101.55,1214.93 1102.14,1214.67 1102.72,1210.69 1103.31,1213.37 1103.89,1213.38 1104.48,1213.48 1105.07,1211.93 1105.65,1212.28 1106.24,1214.86 1106.83,1214.85 1107.41,1217.41 1108,1214.39 1108.59,1214.17 1109.17,1213.79 1109.76,1213.77 1110.34,1216.21 1110.93,1217.39 1111.52,1218.34 1112.1,1219.31 1112.69,1217.72 1113.28,1216.05 1113.86,1213.23 1114.45,1212.21 1115.04,1211.99 1115.62,1211.69 1116.21,1211.58 1116.8,1211.66 1117.38,1212.79 1117.97,1213.9 1118.55,1215.01 1119.14,1213.42 1119.73,1215.7 1120.31,1215.5 1120.9,1212.8 1121.49,1212.73 1122.07,1212.67 1122.66,1212.71 1123.25,1212.8 1123.83,1211.49 1124.42,1211.58 1125.01,1211.41 1125.59,1213.9 1126.18,1211.22 1126.76,1209.74 1127.35,1209.88 1127.94,1209.88 1128.52,1210.05 1129.11,1210.02 1129.7,1211.34 1130.28,1211.12 1130.87,1211.14 1131.46,1211.24 1132.04,1208.46 1132.63,1208.68 1133.21,1209.05 1133.8,1210.6 1134.39,1214.36 1134.97,1214.21 1135.56,1214.2 1136.15,1213.82 1136.73,1216.47 1137.32,1219.02 1137.91,1217.23 1138.49,1217.17 1139.08,1218.48 1139.67,1219.41 1140.25,1220.43 1140.84,1221.29 1141.42,1219.29 1142.01,1220.22 1142.6,1217.28 1143.18,1217.01 1143.77,1215.45 1144.36,1212.97 1144.94,1211.42 1145.53,1210.12 1146.12,1212.66 1146.7,1212.77 1147.29,1210.19 1147.88,1211.37 1148.46,1213.97 1149.05,1215.07 1149.63,1214.84 1150.22,1214.77 1150.81,1216.09 1151.39,1215.69 1151.98,1215.6 1152.57,1216.94 1153.15,1217.78 1153.74,1221.2 1154.33,1220.69 1154.91,1220.11 1155.5,1219.81 1156.09,1220.9 1156.67,1220.23 1157.26,1219.97 1157.84,1216.65 1158.43,1216.34 1159.02,1214.75 1159.6,1213.21 1160.19,1213.08 1160.78,1214.4 1161.36,1214.41 1161.95,1219.67 1162.54,1220.43 1163.12,1218.5 1163.71,1218.15 1164.29,1217.81 1164.88,1214.86 1165.47,1214.41 1166.05,1214.03 1166.64,1214.2 1167.23,1214.32 1167.81,1214.11 1168.4,1215.34 1168.99,1216.29 1169.57,1213.47 1170.16,1212.13 1170.75,1211.03 1171.33,1213.7 1171.92,1213.51 1172.5,1214.83 1173.09,1214.52 1173.68,1217.02 1174.26,1214.03 1174.85,1210.14 1175.44,1209 1176.02,1209.11 1176.61,1209.27 1177.2,1209.49 1177.78,1209.7 1178.37,1211.18 1178.96,1212.5 1179.54,1211.33 1180.13,1209.98 1180.71,1208.68 1181.3,1208.89 1181.89,1207.75 1182.47,1210.49 1183.06,1211.91 1183.65,1211.64 1184.23,1212.99 1184.82,1210.41 1185.41,1209.26 1185.99,1212.07 1186.58,1210.53 1187.16,1209.37 1187.75,1206.82 1188.34,1203.29 1188.92,1203.48 1189.51,1205.1 1190.1,1204.29 1190.68,1204.42 1191.27,1203.51 1191.86,1205.33 1192.44,1201.71 1193.03,1203.71 1193.62,1205.48 1194.2,1209.61 1194.79,1208.31 1195.37,1207.45 1195.96,1207.74 1196.55,1206.58 1197.13,1208.04 1197.72,1208.28 1198.31,1208.39 1198.89,1206.95 1199.48,1208.32 1200.07,1211.25 1200.65,1210.96 1201.24,1210.94 1201.83,1208.45 1202.41,1208.94 1203,1211.95 1203.58,1212.34 1204.17,1213.77 1204.76,1214.86 1205.34,1213.51 1205.93,1213.56 1206.52,1212.21 1207.1,1214.88 1207.69,1214.67 1208.28,1214.57 1208.86,1214.5 1209.45,1218.12 1210.03,1220.16 1210.62,1215.93 1211.21,1215.7 1211.79,1212.78 1212.38,1212.65 1212.97,1213.76 1213.55,1213.56 1214.14,1210.96 1214.73,1211.32 1215.31,1209.95 1215.9,1208.54 1216.49,1207.18 1217.07,1209.75 1217.66,1209.55 1218.24,1212.24 1218.83,1212.18 1219.42,1209.68 1220,1212.07 1220.59,1214.45 1221.18,1211.41 1221.76,1210.12 1222.35,1207.56 1222.94,1212.96 1223.52,1212.52 1224.11,1215.16 1224.7,1213.75 1225.28,1213.6 1225.87,1210.79 1226.45,1211.99 1227.04,1212.04 1227.63,1210.67 1228.21,1209.47 1228.8,1207.1 1229.39,1207.55 1229.97,1206.54 1230.56,1206.83 1231.15,1205.9 1231.73,1208.24 1232.32,1209.28 1232.91,1210.59 1233.49,1209.48 1234.08,1209.6 1234.66,1209.79 1235.25,1209.7 1235.84,1209.99 1236.42,1208.56 1237.01,1209.9 1237.6,1208.79 1238.18,1210.11 1238.77,1211.3 1239.36,1211.25 1239.94,1209.82 1240.53,1208.62 1241.11,1207.53 1241.7,1206.55 1242.29,1206.57 1242.87,1208.51 1243.46,1207.22 1244.05,1207.63 1244.63,1207.58 1245.22,1207.88 1245.81,1208.22 1246.39,1208.66 1246.98,1208.75 1247.57,1210.23 1248.15,1210.41 1248.74,1211.84 1249.32,1212 1249.91,1213.22 1250.5,1214.39 1251.08,1215.63 1251.67,1214.34 1252.26,1215.34 1252.84,1217.6 1253.43,1218.51 1254.02,1215.72 1254.6,1216.97 1255.19,1215.41 1255.78,1215.33 1256.36,1213.73 1256.95,1212.13 1257.53,1209.62 1258.12,1208.37 1258.71,1209.79 1259.29,1205.05 1259.88,1209.02 1260.47,1206.75 1261.05,1205.64 1261.64,1205.88 1262.23,1207.35 1262.81,1208.77 1263.4,1204.87 1263.98,1201.5 1264.57,1204.53 1265.16,1208.95 1265.74,1206.41 1266.33,1207.9 1266.92,1208.13 1267.5,1212.29 1268.09,1209.55 1268.68,1208.57 1269.26,1210.19 1269.85,1209.84 1270.44,1211.14 1271.02,1211.34 1271.61,1210.19 1272.19,1208.9 1272.78,1208.9 1273.37,1207.88 1273.95,1206.65 1274.54,1207.01 1275.13,1208.47 1275.71,1206.16 1276.3,1207.82 1276.89,1208.03 1277.47,1209.61 1278.06,1212.4 1278.65,1211.11 1279.23,1210.02 1279.82,1211.46 1280.4,1210.33 1280.99,1210.21 1281.58,1210.32 1282.16,1208.89 1282.75,1208.97 1283.34,1210.38 1283.92,1209.29 1284.51,1210.82 1285.1,1211.03 1285.68,1213.62 1286.27,1213.26 1286.86,1213.13 1287.44,1211.69 1288.03,1211.76 1288.61,1212.63 1289.2,1212.48 1289.79,1216.38 1290.37,1214.83 1290.96,1217.57 1291.55,1217.23 1292.13,1217.88 1292.72,1213.76 1293.31,1212.33 1293.89,1208.48 1294.48,1210 1295.06,1210.07 1295.65,1209.02 1296.24,1209.2 1296.82,1210.66 1297.41,1210.81 1298,1210.74 1298.58,1212.03 1299.17,1211.72 1299.76,1211.61 1300.34,1211.63 1300.93,1210.34 1301.52,1211.7 1302.1,1211.47 1302.69,1215.28 1303.27,1217.57 1303.86,1218.5 1304.45,1217.91 1305.03,1215.03 1305.62,1214.81 1306.21,1212.04 1306.79,1212 1307.38,1213.16 1307.97,1217.11 1308.55,1214.07 1309.14,1212.95 1309.73,1212.75 1310.31,1212.71 1310.9,1211.32 1311.48,1213.91 1312.07,1213.65 1312.66,1213.36 1313.24,1214.44 1313.83,1215.66 1314.42,1212.88 1315,1211.53 1315.59,1212.91 1316.18,1214.07 1316.76,1212.62 1317.35,1211.14 1317.93,1210.78 1318.52,1212.12 1319.11,1210.83 1319.69,1211.94 1320.28,1210.63 1320.87,1209.6 1321.45,1211.23 1322.04,1212.62 1322.63,1214.12 1323.21,1213.91 1323.8,1212.87 1324.39,1212.94 1324.97,1212.79 1325.56,1215.32 1326.14,1218.79 1326.73,1218.37 1327.32,1219.32 1327.9,1217.33 1328.49,1216.96 1329.08,1217.69 1329.66,1215.89 1330.25,1215.47 1330.84,1216.36 1331.42,1214.87 1332.01,1213.16 1332.6,1214.23 1333.18,1213.93 1333.77,1214.11 1334.35,1215.01 1334.94,1214.69 1335.53,1212.07 1336.11,1212.25 1336.7,1209.52 1337.29,1211.27 1337.87,1210.04 1338.46,1211.37 1339.05,1210.97 1339.63,1214.86 1340.22,1210.45 1340.8,1210.43 1341.39,1211.79 1341.98,1211.65 1342.56,1213.05 1343.15,1211.45 1343.74,1211.68 1344.32,1210.27 1344.91,1213.03 1345.5,1211.48 1346.08,1211.57 1346.67,1211.63 1347.26,1210.2 1347.84,1210.11 1348.43,1210.09 1349.01,1210.5 1349.6,1211.77 1350.19,1213.32 1350.77,1213.47 1351.36,1210.5 1351.95,1210.32 1352.53,1211.64 1353.12,1214.13 1353.71,1213.92 1354.29,1213.91 1354.88,1209.77 1355.47,1212.6 1356.05,1212.67 1356.64,1212.59 1357.22,1211.43 1357.81,1211.46 1358.4,1214.06 1358.98,1212.42 1359.57,1212.53 1360.16,1213.77 1360.74,1214.86 1361.33,1212.01 1361.92,1211.69 1362.5,1211.75 1363.09,1210.65 1363.68,1210.44 1364.26,1207.68 1364.85,1210.56 1365.43,1209.09 1366.02,1206.43 1366.61,1205.6 1367.19,1203.19 1367.78,1199.55 1368.37,1202.99 1368.95,1206.13 1369.54,1203.64 1370.13,1203.81 1370.71,1201.73 1371.3,1201 1371.88,1197.5 1372.47,1199.74 1373.06,1197.64 1373.64,1202.53 1374.23,1202.78 1374.82,1201.96 1375.4,1202.39 1375.99,1201.69 1376.58,1204.8 1377.16,1205.06 1377.75,1205.14 1378.34,1205.34 1378.92,1205.69 1379.51,1206.18 1380.09,1205.22 1380.68,1205.73 1381.27,1208.81 1381.85,1209.05 1382.44,1207.84 1383.03,1210.7 1383.61,1210.71 1384.2,1210.79 1384.79,1212.33 1385.37,1213.91 1385.96,1212.66 1386.55,1211.4 1387.13,1211.4 1387.72,1214.31 1388.3,1213.26 1388.89,1210.65 1389.48,1210.59 1390.06,1210.78 1390.65,1208.24 1391.24,1208.31 1391.82,1205.85 1392.41,1206.36 1393,1207.96 1393.58,1208.2 1394.17,1208.23 1394.75,1211.03 1395.34,1211.29 1395.93,1211.26 1396.51,1212.75 1397.1,1214.01 1397.69,1217.8 1398.27,1217.47 1398.86,1214.49 1399.45,1217.11 1400.03,1216.92 1400.62,1219.56 1401.21,1219.63 1401.79,1217.75 1402.38,1218.83 1402.96,1217.06 1403.55,1216.88 1404.14,1214.2 1404.72,1216.94 1405.31,1216.67 1405.9,1218.74 1406.48,1218.44 1407.07,1214.42 1407.66,1213.08 1408.24,1214.48 1408.83,1212.92 1409.42,1216.88 1410,1214.06 1410.59,1212.53 1411.17,1212.56 1411.76,1211 1412.35,1214.92 1412.93,1212.27 1413.52,1213.52 1414.11,1210.52 1414.69,1214.46 1415.28,1215.75 1415.87,1215.38 1416.45,1215.19 1417.04,1213.33 1417.63,1213.45 1418.21,1213.33 1418.8,1215.89 1419.38,1218.16 1419.97,1218.07 1420.56,1212.52 1421.14,1211.21 1421.73,1209.78 1422.32,1204.64 1422.9,1204.87 1423.49,1203.86 1424.08,1207.02 1424.66,1207.49 1425.25,1207.84 1425.83,1210.69 1426.42,1212.26 1427.01,1211.15 1427.59,1208.57 1428.18,1207.47 1428.77,1207.7 1429.35,1208.03 1429.94,1209.42 1430.53,1209.76 1431.11,1209.93 1431.7,1208.79 1432.29,1209.89 1432.87,1210.17 1433.46,1207.7 1434.04,1207.96 1434.63,1209.57 1435.22,1208.49 1435.8,1208.7 1436.39,1207.87 1436.98,1208.21 1437.56,1208.45 1438.15,1207.63 1438.74,1210.39 1439.32,1207.61 1439.91,1206.66 1440.5,1206.9 1441.08,1209.84 1441.67,1208.76 1442.25,1209.05 1442.84,1209.16 1443.43,1210.43 1444.01,1210.47 1444.6,1212.03 1445.19,1215.16 1445.77,1214.86 1446.36,1217.17 1446.95,1214.32 1447.53,1215.48 1448.12,1215.47 1448.7,1216.44 1449.29,1215.77 1449.88,1214.35 1450.46,1215.5 1451.05,1216.41 1451.64,1217.05 1452.22,1215.58 1452.81,1217.66 1453.4,1217.24 1453.98,1217.04 1454.57,1214.09 1455.16,1213.98 1455.74,1211.35 1456.33,1211.05 1456.91,1212.36 1457.5,1210.93 1458.09,1212.2 1458.67,1212.43 1459.26,1212.23 1459.85,1212.12 1460.43,1212.2 1461.02,1212.25 1461.61,1212.4 1462.19,1214.89 1462.78,1214.64 1463.37,1214.55 1463.95,1217.9 1464.54,1220.11 1465.12,1222.06 1465.71,1220.28 1466.3,1222.25 1466.88,1217.77 1467.47,1218.7 1468.06,1218.1 1468.64,1217.5 1469.23,1215.81 1469.82,1215.48 1470.4,1216.35 1470.99,1213.56 1471.57,1213.47 1472.16,1211.89 1472.75,1212.95 1473.33,1214.33 1473.92,1210.7 1474.51,1206.68 1475.09,1206.69 1475.68,1205.68 1476.27,1208.57 1476.85,1208.61 1477.44,1207.41 1478.03,1206.36 1478.61,1206.54 1479.2,1205.44 1479.78,1206.88 1480.37,1207.06 1480.96,1209.77 1481.54,1208.57 1482.13,1207.27 1482.72,1206.25 1483.3,1205.19 1483.89,1204.38 1484.48,1203.22 1485.06,1199.44 1485.65,1200.21 1486.24,1199.54 1486.82,1198.8 1487.41,1198.28 1487.99,1200.01 1488.58,1198.05 1489.17,1200.28 1489.75,1201.1 1490.34,1200.44 1490.93,1203.62 1491.51,1206.5 1492.1,1204.24 1492.69,1203.48 1493.27,1203.76 1493.86,1204.27 1494.45,1207.26 1495.03,1210.38 1495.62,1209.08 1496.2,1210.2 1496.79,1210.41 1497.38,1210.6 1497.96,1209.34 1498.55,1210.61 1499.14,1206.96 1499.72,1211.21 1500.31,1212.53 1500.9,1213.89 1501.48,1216.41 1502.07,1217.67 1502.65,1218.31 1503.24,1212.58 1503.83,1211.19 1504.41,1211.28 1505,1212.5 1505.59,1212.31 1506.17,1214.85 1506.76,1212.07 1507.35,1210.61 1507.93,1209.42 1508.52,1210.77 1509.11,1211.02 1509.69,1208.34 1510.28,1206.13 1510.86,1206.44 1511.45,1208.01 1512.04,1206.8 1512.62,1209.42 1513.21,1205.65 1513.8,1204.82 1514.38,1204.95 1514.97,1203.83 1515.56,1201.62 1516.14,1203.88 1516.73,1205.54 1517.32,1208.51 1517.9,1208.81 1518.49,1211.5 1519.07,1215.09 1519.66,1213.74 1520.25,1215.02 1520.83,1216.02 1521.42,1214.65 1522.01,1213.13 1522.59,1217.01 1523.18,1215.39 1523.77,1215.05 1524.35,1214.83 1524.94,1213.3 1525.52,1212.05 1526.11,1211.96 1526.7,1213.13 1527.28,1212.95 1527.87,1214.35 1528.46,1214.12 1529.04,1212.81 1529.63,1212.86 1530.22,1212.7 1530.8,1213.82 1531.39,1213.76 1531.98,1214.85 1532.56,1213.47 1533.15,1213.47 1533.73,1210.94 1534.32,1208.19 1534.91,1208.72 1535.49,1208.87 1536.08,1212.82 1536.67,1213.12 1537.25,1213.19 1537.84,1213.28 1538.43,1213.19 1539.01,1215.46 1539.6,1219.01 1540.19,1215.91 1540.77,1215.74 1541.36,1214.1 1541.94,1211.41 1542.53,1211.19 1543.12,1211.04 1543.7,1211.25 1544.29,1212.51 1544.88,1212.57 1545.46,1215.14 1546.05,1213.63 1546.64,1213.26 1547.22,1212.96 1547.81,1212.88 1548.4,1211.56 1548.98,1211.57 1549.57,1211.8 1550.15,1211.79 1550.74,1209.21 1551.33,1210.73 1551.91,1212.24 1552.5,1213.58 1553.09,1213.48 1553.67,1213.15 1554.26,1211.63 1554.85,1211.56 1555.43,1208.86 1556.02,1208.87 1556.6,1207.62 1557.19,1205.18 1557.78,1209.37 1558.36,1209.49 1558.95,1208.43 1559.54,1206.07 1560.12,1206.38 1560.71,1207.91 1561.3,1206.93 1561.88,1208.54 1562.47,1210.2 1563.06,1207.97 1563.64,1208.04 1564.23,1209.71 1564.81,1208.72 1565.4,1208.86 1565.99,1207.76 1566.57,1208.99 1567.16,1209.18 1567.75,1210.6 1568.33,1209.64 1568.92,1210.86 1569.51,1213.62 1570.09,1210.72 1570.68,1210.87 1571.27,1212.03 1571.85,1214.6 1572.44,1213.03 1573.02,1210.23 1573.61,1211.42 1574.2,1214.12 1574.78,1216.5 1575.37,1217.92 1575.96,1217.46 1576.54,1218.47 1577.13,1218.28 1577.72,1217.71 1578.3,1217.39 1578.89,1218.3 1579.47,1217.62 1580.06,1221.11 1580.65,1221.96 1581.23,1221.63 1581.82,1220.92 1582.41,1219.03 1582.99,1218.34 1583.58,1220.49 1584.17,1218.8 1584.75,1220.98 1585.34,1221.73 1585.93,1219.98 1586.51,1221.75 1587.1,1220.02 1587.68,1220.8 1588.27,1218.67 1588.86,1217 1589.44,1216.55 1590.03,1215.14 1590.62,1214.68 1591.2,1209.32 1591.79,1208.1 1592.38,1209.68 1592.96,1209.87 1593.55,1210.18 1594.14,1211.81 1594.72,1210.44 1595.31,1213.18 1595.89,1210.64 1596.48,1209.45 1597.07,1209.55 1597.65,1209.75 1598.24,1207.17 1598.83,1207.59 1599.41,1205.24 1600,1204.32 1600.59,1203.12 1601.17,1204.79 1601.76,1203.74 1602.34,1203.05 1602.93,1203.26 1603.52,1203.79 1604.1,1203.81 1604.69,1208.08 1605.28,1208.41 1605.86,1208.29 1606.45,1209.81 1607.04,1211.48 1607.62,1212.81 1608.21,1212.76 1608.8,1212.92 1609.38,1215.78 1609.97,1216.99 1610.55,1215.61 1611.14,1216.53 1611.73,1216.08 1612.31,1217.14 1612.9,1216.34 1613.49,1215.95 1614.07,1215.71 1614.66,1217.24 1615.25,1218.2 1615.83,1220.23 1616.42,1220.81 1617.01,1217.84 1617.59,1214.97 1618.18,1214.84 1618.76,1218.38 1619.35,1219.02 1619.94,1221.23 1620.52,1218.29 1621.11,1217.71 1621.7,1213.62 1622.28,1213.63 1622.87,1211.17 1623.46,1211.13 1624.04,1213.72 1624.63,1212.28 1625.22,1214.84 1625.8,1214.78 1626.39,1214.55 1626.97,1215.84 1627.56,1214.42 1628.15,1214.1 1628.73,1212.46 1629.32,1213.63 1629.91,1217.48 1630.49,1220.12 1631.08,1219.55 1631.67,1219 1632.25,1214.45 1632.84,1212.82 1633.42,1215.14 1634.01,1216.13 1634.6,1215.86 1635.18,1215.45 1635.77,1217.66 1636.36,1214.49 1636.94,1213.04 1637.53,1215.27 1638.12,1215.3 1638.7,1213.86 1639.29,1213.74 1639.88,1212.32 1640.46,1215.15 1641.05,1216.24 1641.63,1217.12 1642.22,1214.1 1642.81,1215.31 1643.39,1215.13 1643.98,1214.62 1644.57,1212.95 1645.15,1209.88 1645.74,1211.41 1646.33,1212.71 1646.91,1206.16 1647.5,1205 1648.09,1204.16 1648.67,1200.63 1649.26,1202.52 1649.84,1205.77 1650.43,1204.71 1651.02,1203.75 1651.6,1204.36 1652.19,1202.15 1652.78,1201.32 1653.36,1203.1 1653.95,1203.46 1654.54,1202.54 1655.12,1201.59 1655.71,1202.17 1656.29,1202.9 1656.88,1206.16 1657.47,1203.5 1658.05,1203.86 1658.64,1203.04 1659.23,1202.2 1659.81,1201.29 1660.4,1205.94 1660.99,1204.83 1661.57,1205.28 1662.16,1205.69 1662.75,1204.92 1663.33,1205.25 1663.92,1205.6 1664.5,1206.17 1665.09,1206.6 1665.68,1206.87 1666.26,1207.23 1666.85,1207.44 1667.44,1207.74 1668.02,1211.84 1668.61,1211.97 1669.2,1213.3 1669.78,1210.45 1670.37,1209.59 1670.96,1208.75 1671.54,1207.32 1672.13,1207.69 1672.71,1206.78 1673.3,1212.19 1673.89,1214.51 1674.47,1214.47 1675.06,1215.7 1675.65,1214.31 1676.23,1212.78 1676.82,1213.07 1677.41,1215.67 1677.99,1214.05 1678.58,1219 1679.17,1219.75 1679.75,1221.94 1680.34,1217.34 1680.92,1211.97 1681.51,1211.89 1682.1,1210.4 1682.68,1212.04 1683.27,1210.92 1683.86,1212.34 1684.44,1210.99 1685.03,1211.08 1685.62,1213.5 1686.2,1212.25 1686.79,1212.18 1687.37,1213.38 1687.96,1214.36 1688.55,1214.11 1689.13,1216.61 1689.72,1216.47 1690.31,1217.72 1690.89,1220.18 1691.48,1221.07 1692.07,1219.33 1692.65,1218.87 1693.24,1219.88 1693.83,1215.52 1694.41,1214.15 1695,1213.89 1695.58,1215.1 1696.17,1217.53 1696.76,1217.27 1697.34,1215.56 1697.93,1216.86 1698.52,1214.04 1699.1,1214.19 1699.69,1212.85 1700.28,1212.96 1700.86,1212.95 1701.45,1214.14 1702.04,1207.51 1702.62,1207.71 1703.21,1206.74 1703.79,1209.6 1704.38,1208.25 1704.97,1209.43 1705.55,1207.86 1706.14,1206.7 1706.73,1206.64 1707.31,1206.91 1707.9,1207.48 1708.49,1207.58 1709.07,1208 1709.66,1208.37 1710.24,1210.1 1710.83,1210.36 1711.42,1210.54 1712,1209.28 1712.59,1210.81 1713.18,1212.08 1713.76,1206.97 1714.35,1205.69 1714.94,1207.38 1715.52,1207.61 1716.11,1206.45 1716.7,1205.46 1717.28,1207.13 1717.87,1211.26 1718.45,1212.43 1719.04,1211.54 1719.63,1212.78 1720.21,1211.52 1720.8,1213.02 1721.39,1213.05 1721.97,1214.17 1722.56,1211.14 1723.15,1209.82 1723.73,1211.32 1724.32,1208.71 1724.91,1208.98 1725.49,1207.79 1726.08,1207.76 1726.66,1206.88 1727.25,1211.44 1727.84,1210.26 1728.42,1210.04 1729.01,1207.55 1729.6,1204.96 1730.18,1206.41 1730.77,1205.36 1731.36,1206.58 1731.94,1207.93 1732.53,1209.37 1733.11,1209.43 1733.7,1210.81 1734.29,1212.45 1734.87,1207.6 1735.46,1206.38 1736.05,1205.27 1736.63,1206.77 1737.22,1207.1 1737.81,1207.39 1738.39,1208.99 1738.98,1209.23 1739.57,1210.51 1740.15,1210.35 1740.74,1208.93 1741.32,1211.62 1741.91,1208.91 1742.5,1210.63 1743.08,1210.8 1743.67,1211.98 1744.26,1210.72 1744.84,1211.11 1745.43,1212.19 1746.02,1211.32 1746.6,1211.12 1747.19,1213.74 1747.78,1216.18 1748.36,1217.4 1748.95,1217.04 1749.53,1216.94 1750.12,1216.68 1750.71,1216.49 1751.29,1213.65 1751.88,1212.03 1752.47,1213.43 1753.05,1214.88 1753.64,1214.85 1754.23,1216.23 1754.81,1216.03 1755.4,1214.53 1755.99,1213.12 1756.57,1210.39 1757.16,1210.48 1757.74,1211.74 1758.33,1211.94 1758.92,1210.49 1759.5,1213.02 1760.09,1212.92 1760.68,1215.44 1761.26,1215.05 1761.85,1217.43 1762.44,1223.59 1763.02,1222.95 1763.61,1223.45 1764.19,1224.11 1764.78,1223.18 1765.37,1222.53 1765.95,1221.97 1766.54,1221.16 1767.13,1220.76 1767.71,1221.45 1768.3,1219.75 1768.89,1220.63 1769.47,1220.3 1770.06,1221.16 1770.65,1217.94 1771.23,1217.7 1771.82,1217.66 1772.4,1219.88 1772.99,1220.45 1773.58,1219.81 1774.16,1219.23 1774.75,1220.04 1775.34,1218.11 1775.92,1216.25 1776.51,1214.75 1777.1,1216.87 1777.68,1215.14 1778.27,1215.07 1778.86,1213.39 1779.44,1214.79 1780.03,1213.31 1780.61,1214.76 1781.2,1213.06 1781.79,1210.49 1782.37,1210.31 1782.96,1213.02 1783.55,1211.94 1784.13,1213.31 1784.72,1215.76 1785.31,1215.29 1785.89,1211.16 1786.48,1212.53 1787.06,1209.83 1787.65,1207.19 1788.24,1208.44 1788.82,1207.36 1789.41,1210.33 1790,1210.41 1790.58,1214.1 1791.17,1213.96 1791.76,1213.89 1792.34,1214.99 1792.93,1214.93 1793.52,1216.06 1794.1,1213.09 1794.69,1213.1 1795.27,1213.03 1795.86,1213.4 1796.45,1213.16 1797.03,1209.09 1797.62,1210.51 1798.21,1209.37 1798.79,1209.46 1799.38,1208.4 1799.97,1208.32 1800.55,1208.16 1801.14,1211.02 1801.73,1209.39 1802.31,1206.79 1802.9,1209.81 1803.48,1209.73 1804.07,1208.6 1804.66,1211.51 1805.24,1211.69 1805.83,1210.29 1806.42,1210.32 1807,1208.95 1807.59,1208.1 1808.18,1208.38 1808.76,1208.46 1809.35,1206.95 1809.94,1208.45 1810.52,1207.16 1811.11,1207.39 1811.69,1206.18 1812.28,1202.35 1812.87,1204.27 1813.45,1203.31 1814.04,1204.83 1814.63,1206.68 1815.21,1208.21 1815.8,1209.6 1816.39,1209.93 1816.97,1210.2 1817.56,1211.37 1818.14,1210.16 1818.73,1212.88 1819.32,1208.96 1819.9,1207.92 1820.49,1205.61 1821.08,1205.91 1821.66,1205.94 1822.25,1206.09 1822.84,1208.87 1823.42,1208.99 1824.01,1210.06 1824.6,1210.11 1825.18,1211.71 1825.77,1212.88 1826.35,1214.02 1826.94,1216.32 1827.53,1213.42 1828.11,1210.87 1828.7,1210.74 1829.29,1212.08 1829.87,1211.76 1830.46,1210.43 1831.05,1209.06 1831.63,1210.59 1832.22,1207.93 1832.81,1205.64 1833.39,1207.32 1833.98,1204.58 1834.56,1202.36 1835.15,1200.45 1835.74,1202.51 1836.32,1204.46 1836.91,1202.26 1837.5,1202.9 1838.08,1203.16 1838.67,1203.81 1839.26,1207.38 1839.84,1206.07 1840.43,1209 1841.01,1209.16 1841.6,1214.44 1842.19,1214.46 1842.77,1213.18 1843.36,1217.09 1843.95,1215.64 1844.53,1214.18 1845.12,1212.8 1845.71,1211.32 1846.29,1210.09 1846.88,1211.25 1847.47,1211.2 1848.05,1208.52 1848.64,1212.61 1849.22,1211.13 1849.81,1209.88 1850.4,1211.36 1850.98,1211.07 1851.57,1211.01 1852.16,1211.21 1852.74,1208.63 1853.33,1209.89 1853.92,1211.29 1854.5,1212.89 1855.09,1214.1 1855.68,1213.81 1856.26,1215.02 1856.85,1216.07 1857.43,1214.44 1858.02,1216.86 1858.61,1216.65 1859.19,1216.38 1859.78,1216.05 1860.37,1214.31 1860.95,1214.08 1861.54,1214.16 1862.13,1212.5 1862.71,1212.19 1863.3,1213.36 1863.88,1211.8 1864.47,1209.09 1865.06,1208.21 1865.64,1208.27 1866.23,1207.28 1866.82,1204.87 1867.4,1203.93 1867.99,1205.87 1868.58,1206.53 1869.16,1204.32 1869.75,1207.26 1870.34,1206.12 1870.92,1205.02 1871.51,1201.03 1872.09,1203.12 1872.68,1204.99 1873.27,1202.2 1873.85,1202.43 1874.44,1204.46 1875.03,1207.42 1875.61,1209 1876.2,1210.97 1876.79,1209.57 1877.37,1208.16 1877.96,1206.76 1878.55,1206.95 1879.13,1207.13 1879.72,1209.92 1880.3,1211.2 1880.89,1209.77 1881.48,1211.22 1882.06,1209.73 1882.65,1209.58 1883.24,1209.73 1883.82,1209.6 1884.41,1212.23 1885,1213.57 1885.58,1213.47 1886.17,1214.8 1886.76,1214.45 1887.34,1210.45 1887.93,1211.87 1888.51,1214.47 1889.1,1215.53 1889.69,1216.87 1890.27,1215.17 1890.86,1214.75 1891.45,1214.85 1892.03,1214.66 1892.62,1214.47 1893.21,1215.62 1893.79,1212.95 1894.38,1212.82 1894.96,1212.93 1895.55,1215.24 1896.14,1213.64 1896.72,1213.41 1897.31,1217.18 1897.9,1217.91 1898.48,1214.88 1899.07,1212.34 1899.66,1209.44 1900.24,1208.17 1900.83,1209.43 1901.42,1210.71 1902,1210.54 1902.59,1212.06 1903.17,1213.51 1903.76,1217.12 1904.35,1214.32 1904.93,1214.24 1905.52,1211.71 1906.11,1210.34 1906.69,1210.29 1907.28,1211.39 1907.87,1212.79 1908.45,1212.49 1909.04,1208.51 1909.63,1207.27 1910.21,1206.14 1910.8,1204.99 1911.38,1205.28 1911.97,1205.7 1912.56,1206.07 1913.14,1206.48 1913.73,1202.69 1914.32,1204.57 1914.9,1206.23 1915.49,1207.72 1916.08,1207.93 1916.66,1209.3 1917.25,1211.81 1917.83,1211.67 1918.42,1211.46 1919.01,1212.47 1919.59,1212.3 1920.18,1209.72 1920.77,1210.01 1921.35,1210 1921.94,1212.69 1922.53,1212.69 1923.11,1211.55 1923.7,1212.74 1924.29,1210.13 1924.87,1211.81 1925.46,1210.73 1926.04,1212.26 1926.63,1212.49 1927.22,1213.73 1927.8,1212.31 1928.39,1211.31 1928.98,1211.65 1929.56,1215.44 1930.15,1217.85 1930.74,1222.62 1931.32,1223 1931.91,1220.99 1932.5,1220.49 1933.08,1218.74 1933.67,1216.9 1934.25,1216.64 1934.84,1216.48 1935.43,1217.21 1936.01,1222.05 1936.6,1221.43 1937.19,1224.67 1937.77,1222.77 1938.36,1219.51 1938.95,1220.48 1939.53,1221.06 1940.12,1220.8 1940.71,1220.21 1941.29,1221.16 1941.88,1219.09 1942.46,1219.86 1943.05,1215.55 1943.64,1216.59 1944.22,1212.3 1944.81,1212.15 1945.4,1212.2 1945.98,1211.97 1946.57,1211.88 1947.16,1213.08 1947.74,1213.02 1948.33,1212.71 1948.91,1212.26 1949.5,1209.67 1950.09,1208.53 1950.67,1208.35 1951.26,1209.77 1951.85,1209.83 1952.43,1208.63 1953.02,1207.62 1953.61,1206.48 1954.19,1209.56 1954.78,1211.21 1955.37,1209.78 1955.95,1211.03 1956.54,1212.45 1957.12,1212.41 1957.71,1214.85 1958.3,1212.01 1958.88,1210.35 1959.47,1208.91 1960.06,1206.31 1960.64,1206.69 1961.23,1208.34 1961.82,1209.99 1962.4,1210.36 1962.99,1207.77 1963.58,1206.49 1964.16,1205.48 1964.75,1207.26 1965.33,1206.34 1965.92,1206.45 1966.51,1209.32 1967.09,1214.5 1967.68,1214.33 1968.27,1214.06 1968.85,1212.65 1969.44,1214.01 1970.03,1213.87 1970.61,1213.98 1971.2,1209.92 1971.78,1208.99 1972.37,1211.51 1972.96,1212.82 1973.54,1214.25 1974.13,1213.12 1974.72,1213.32 1975.3,1210.41 1975.89,1209.1 1976.48,1210.82 1977.06,1212.2 1977.65,1212.43 1978.24,1212.17 1978.82,1212.29 1979.41,1209.73 1979.99,1211.1 1980.58,1212.44 1981.17,1209.9 1981.75,1209.96 1982.34,1210.27 1982.93,1211.89 1983.51,1209.29 1984.1,1209.43 1984.69,1208.24 1985.27,1208.17 1985.86,1207.21 1986.45,1206.33 1987.03,1207.75 1987.62,1209.02 1988.2,1210.34 1988.79,1211.78 1989.38,1210.81 1989.96,1209.59 1990.55,1208.33 1991.14,1209.6 1991.72,1210.81 1992.31,1210.94 1992.9,1213.58 1993.48,1213.49 1994.07,1214.69 1994.65,1216.06 1995.24,1215.8 1995.83,1216.58 1996.41,1216.41 1997,1216.04 1997.59,1217.31 1998.17,1221.84 1998.76,1220.04 1999.35,1217 1999.93,1217.9 2000.52,1220.11 2001.11,1219.41 2001.69,1223.08 2002.28,1222.68 2002.86,1222.25 2003.45,1220.42 2004.04,1215.67 2004.62,1214.12 2005.21,1215.26 2005.8,1213.52 2006.38,1213.56 2006.97,1213.41 2007.56,1212.1 2008.14,1211.97 2008.73,1210.7 2009.32,1210.99 2009.9,1211.12 2010.49,1211.36 2011.07,1209.94 2011.66,1210.23 2012.25,1211.33 2012.83,1210.11 2013.42,1212.56 2014.01,1212.23 2014.59,1211.99 2015.18,1213.45 2015.77,1210.62 2016.35,1210.53 2016.94,1210.41 2017.53,1211.53 2018.11,1208.95 2018.7,1207.59 2019.28,1207.91 2019.87,1209.24 2020.46,1210.63 2021.04,1209.2 2021.63,1210.57 2022.22,1210.48 2022.8,1209.07 2023.39,1207.77 2023.98,1205.5 2024.56,1207.34 2025.15,1206.52 2025.73,1205.36 2026.32,1203 2026.91,1204.72 2027.49,1203.71 2028.08,1205.26 2028.67,1206.76 2029.25,1207.03 2029.84,1204.89 2030.43,1205.36 2031.01,1204.36 2031.6,1203.4 2032.19,1206.46 2032.77,1209.42 2033.36,1209.34 2033.94,1208.33 2034.53,1207.18 2035.12,1207.43 2035.7,1209.13 2036.29,1212.11 2036.88,1213.05 2037.46,1212.94 2038.05,1211.71 2038.64,1211.96 2039.22,1209.38 2039.81,1208.46 2040.4,1208.35 2040.98,1205.76 2041.57,1206.21 2042.15,1207.36 2042.74,1207.8 2043.33,1209.09 2043.91,1209.29 2044.5,1210.96 2045.09,1209.61 2045.67,1209.8 2046.26,1209.98 2046.85,1211.26 2047.43,1211.33 2048.02,1211.4 2048.6,1208.84 2049.19,1208.96 2049.78,1208.1 2050.36,1209.16 2050.95,1209.23 2051.54,1209.26 2052.12,1206.99 2052.71,1206.08 2053.3,1205.32 2053.88,1201.66 2054.47,1202.24 2055.06,1202.49 2055.64,1204.4 2056.23,1204.54 2056.81,1203.6 2057.4,1201.43 2057.99,1203.1 2058.57,1204.82 2059.16,1205.03 2059.75,1201.42 2060.33,1202.24 2060.92,1204.04 2061.51,1202.91 2062.09,1202.09 2062.68,1201.39 2063.27,1203.22 2063.85,1202.29 2064.44,1201.58 2065.02,1201.98 2065.61,1202.43 2066.2,1205.77 2066.78,1206.1 2067.37,1207.67 2067.96,1205.29 2068.54,1205.6 2069.13,1206.03 2069.72,1205.18 2070.3,1204.31 2070.89,1204.67 2071.48,1206.26 2072.06,1206.28 2072.65,1206.98 2073.23,1207.39 2073.82,1204.9 2074.41,1206.48 2074.99,1207.83 2075.58,1208.14 2076.17,1209.24 2076.75,1208.08 2077.34,1208.12 2077.93,1207.25 2078.51,1206.35 2079.1,1208.02 2079.68,1210.8 2080.27,1210.67 2080.86,1214.59 2081.44,1216.14 2082.03,1218.61 2082.62,1214.23 2083.2,1214.21 2083.79,1213.1 2084.38,1214.11 2084.96,1216.66 2085.55,1220.51 2086.14,1218.52 2086.72,1218.32 2087.31,1216.64 2087.89,1217.66 2088.48,1217.25 2089.07,1217.14 2089.65,1219.62 2090.24,1219.39 2090.83,1219.3 2091.41,1219.05 2092,1220.9 2092.59,1219.03 2093.17,1219.06 2093.76,1218.72 2094.35,1215.81 2094.93,1214.16 2095.52,1215.3 2096.1,1216.14 2096.69,1217.08 2097.28,1218.16 2097.86,1218.11 2098.45,1216.44 2099.04,1217.34 2099.62,1219.59 2100.21,1217.95 2100.8,1217.75 2101.38,1216.02 2101.97,1215.78 2102.55,1215.58 2103.14,1214.16 2103.73,1215.4 2104.31,1219.34 2104.9,1218.82 2105.49,1214.78 2106.07,1213.4 2106.66,1213.14 2107.25,1212.88 2107.83,1212.7 2108.42,1213.78 2109.01,1212.5 2109.59,1212.4 2110.18,1212.36 2110.76,1212.47 2111.35,1210.95 2111.94,1210.71 2112.52,1209.3 2113.11,1207.14 2113.7,1208.64 2114.28,1208.86 2114.87,1210.41 2115.46,1209.21 2116.04,1209.39 2116.63,1209.31 2117.22,1205.5 2117.8,1206.95 2118.39,1209.82 2118.97,1211.14 2119.56,1212.43 2120.15,1216.41 2120.73,1215.96 2121.32,1217.26 2121.91,1216.81 2122.49,1215.14 2123.08,1215.13 2123.67,1215.02 2124.25,1215.8 2124.84,1211.69 2125.42,1213.89 2126.01,1212.46 2126.6,1215.07 2127.18,1215 2127.77,1217.54 2128.36,1217.27 2128.94,1215.71 2129.53,1215.43 2130.12,1215.07 2130.7,1213.65 2131.29,1214.76 2131.88,1210.84 2132.46,1208.37 2133.05,1207.41 2133.63,1208.84 2134.22,1210.22 2134.81,1211.59 2135.39,1212.79 2135.98,1212.66 2136.57,1212.36 2137.15,1212.21 2137.74,1212.31 2138.33,1210.84 2138.91,1210.81 2139.5,1209.74 2140.09,1210.97 2140.67,1209.52 2141.26,1209.27 2141.84,1209.18 2142.43,1208.14 2143.02,1206.75 2143.6,1205.53 2144.19,1205.8 2144.78,1211.17 2145.36,1209.68 2145.95,1209.84 2146.54,1211.01 2147.12,1212.16 2147.71,1209.24 2148.3,1210.69 2148.88,1209.55 2149.47,1210.75 2150.05,1213.25 2150.64,1214.29 2151.23,1212.74 2151.81,1212.44 2152.4,1212.31 2152.99,1212.07 2153.57,1213.26 2154.16,1213.03 2154.75,1210.31 2155.33,1210.53 2155.92,1209.21 2156.5,1207.9 2157.09,1206.66 2157.68,1208.31 2158.26,1208.41 \"/>\n<path clip-path=\"url(#clip702)\" d=\"M986.025 1211.92 L986.612 1211.92 L987.198 1211.92 L987.785 1211.92 L988.371 1211.92 L988.957 1211.92 L989.544 1211.92 L990.13 1211.92 L990.717 1211.92 L991.303 1211.92 L991.889 1211.92 L992.476 1211.92 L993.062 1211.92 L993.649 1211.92 L994.235 1211.92 L994.822 1211.92 L995.408 1211.92 L995.994 1211.92 L996.581 1211.92 L997.167 1211.92 L997.754 1211.92 L998.34 1211.92 L998.926 1211.92 L999.513 1211.92 L1000.1 1211.92 L1000.69 1211.92 L1001.27 1211.92 L1001.86 1211.92 L1002.44 1211.92 L1003.03 1211.92 L1003.62 1211.92 L1004.2 1211.92 L1004.79 1211.92 L1005.38 1211.92 L1005.96 1211.92 L1006.55 1211.92 L1007.14 1211.92 L1007.72 1211.92 L1008.31 1211.92 L1008.9 1211.92 L1009.48 1211.92 L1010.07 1211.92 L1010.65 1211.92 L1011.24 1211.92 L1011.83 1211.92 L1012.41 1211.92 L1013 1211.92 L1013.59 1211.92 L1014.17 1211.92 L1014.76 1211.92 L1015.35 1211.92 L1015.93 1211.92 L1016.52 1211.92 L1017.11 1211.92 L1017.69 1211.92 L1018.28 1211.92 L1018.86 1211.92 L1019.45 1211.92 L1020.04 1211.92 L1020.62 1211.92 L1021.21 1211.92 L1021.8 1211.92 L1022.38 1211.92 L1022.97 1211.92 L1023.56 1211.92 L1024.14 1211.92 L1024.73 1211.92 L1025.32 1211.92 L1025.9 1211.92 L1026.49 1211.92 L1027.07 1211.92 L1027.66 1211.92 L1028.25 1211.92 L1028.83 1211.92 L1029.42 1211.92 L1030.01 1211.92 L1030.59 1211.92 L1031.18 1211.92 L1031.77 1211.92 L1032.35 1211.92 L1032.94 1211.92 L1033.52 1211.92 L1034.11 1211.92 L1034.7 1211.92 L1035.28 1211.92 L1035.87 1211.92 L1036.46 1211.92 L1037.04 1211.92 L1037.63 1211.92 L1038.22 1211.92 L1038.8 1211.92 L1039.39 1211.92 L1039.98 1211.92 L1040.56 1211.92 L1041.15 1211.92 L1041.73 1211.92 L1042.32 1211.92 L1042.91 1211.92 L1043.49 1211.92 L1044.08 1211.92 L1044.67 1211.92 L1045.25 1211.92 L1045.84 1211.92 L1046.43 1211.92 L1047.01 1211.92 L1047.6 1211.92 L1048.19 1211.92 L1048.77 1211.92 L1049.36 1211.92 L1049.94 1211.92 L1050.53 1211.92 L1051.12 1211.92 L1051.7 1211.92 L1052.29 1211.92 L1052.88 1211.92 L1053.46 1211.92 L1054.05 1211.92 L1054.64 1211.92 L1055.22 1211.92 L1055.81 1211.92 L1056.39 1211.92 L1056.98 1211.92 L1057.57 1211.92 L1058.15 1211.92 L1058.74 1211.92 L1059.33 1211.92 L1059.91 1211.92 L1060.5 1211.92 L1061.09 1211.92 L1061.67 1211.92 L1062.26 1211.92 L1062.85 1211.92 L1063.43 1211.92 L1064.02 1211.92 L1064.6 1211.92 L1065.19 1211.92 L1065.78 1211.92 L1066.36 1211.92 L1066.95 1211.92 L1067.54 1211.92 L1068.12 1211.92 L1068.71 1211.92 L1069.3 1211.92 L1069.88 1211.92 L1070.47 1211.92 L1071.06 1211.92 L1071.64 1211.92 L1072.23 1211.92 L1072.81 1211.92 L1073.4 1211.92 L1073.99 1211.92 L1074.57 1211.92 L1075.16 1211.92 L1075.75 1211.92 L1076.33 1211.92 L1076.92 1211.92 L1077.51 1211.92 L1078.09 1211.92 L1078.68 1211.92 L1079.26 1211.92 L1079.85 1211.92 L1080.44 1211.92 L1081.02 1211.92 L1081.61 1211.92 L1082.2 1211.92 L1082.78 1211.92 L1083.37 1211.92 L1083.96 1211.92 L1084.54 1211.92 L1085.13 1211.92 L1085.72 1211.92 L1086.3 1211.92 L1086.89 1211.92 L1087.47 1211.92 L1088.06 1211.92 L1088.65 1211.92 L1089.23 1211.92 L1089.82 1211.92 L1090.41 1211.92 L1090.99 1211.92 L1091.58 1211.92 L1092.17 1211.92 L1092.75 1211.92 L1093.34 1211.92 L1093.93 1211.92 L1094.51 1211.92 L1095.1 1211.92 L1095.68 1211.92 L1096.27 1211.92 L1096.86 1211.92 L1097.44 1211.92 L1098.03 1211.92 L1098.62 1211.92 L1099.2 1211.92 L1099.79 1211.92 L1100.38 1211.92 L1100.96 1211.92 L1101.55 1211.92 L1102.14 1211.92 L1102.72 1211.92 L1103.31 1211.92 L1103.89 1211.92 L1104.48 1211.92 L1105.07 1211.92 L1105.65 1211.92 L1106.24 1211.92 L1106.83 1211.92 L1107.41 1211.92 L1108 1211.92 L1108.59 1211.92 L1109.17 1211.92 L1109.76 1211.92 L1110.34 1211.92 L1110.93 1211.92 L1111.52 1211.92 L1112.1 1211.92 L1112.69 1211.92 L1113.28 1211.92 L1113.86 1211.92 L1114.45 1211.92 L1115.04 1211.92 L1115.62 1211.92 L1116.21 1211.92 L1116.8 1211.92 L1117.38 1211.92 L1117.97 1211.92 L1118.55 1211.92 L1119.14 1211.92 L1119.73 1211.92 L1120.31 1211.92 L1120.9 1211.92 L1121.49 1211.92 L1122.07 1211.92 L1122.66 1211.92 L1123.25 1211.92 L1123.83 1211.92 L1124.42 1211.92 L1125.01 1211.92 L1125.59 1211.92 L1126.18 1211.92 L1126.76 1211.92 L1127.35 1211.92 L1127.94 1211.92 L1128.52 1211.92 L1129.11 1211.92 L1129.7 1211.92 L1130.28 1211.92 L1130.87 1211.92 L1131.46 1211.92 L1132.04 1211.92 L1132.63 1211.92 L1133.21 1211.92 L1133.8 1211.92 L1134.39 1211.92 L1134.97 1211.92 L1135.56 1211.92 L1136.15 1211.92 L1136.73 1211.92 L1137.32 1211.92 L1137.91 1211.92 L1138.49 1211.92 L1139.08 1211.92 L1139.67 1211.92 L1140.25 1211.92 L1140.84 1211.92 L1141.42 1211.92 L1142.01 1211.92 L1142.6 1211.92 L1143.18 1211.92 L1143.77 1211.92 L1144.36 1211.92 L1144.94 1211.92 L1145.53 1211.92 L1146.12 1211.92 L1146.7 1211.92 L1147.29 1211.92 L1147.88 1211.92 L1148.46 1211.92 L1149.05 1211.92 L1149.63 1211.92 L1150.22 1211.92 L1150.81 1211.92 L1151.39 1211.92 L1151.98 1211.92 L1152.57 1211.92 L1153.15 1211.92 L1153.74 1211.92 L1154.33 1211.92 L1154.91 1211.92 L1155.5 1211.92 L1156.09 1211.92 L1156.67 1211.92 L1157.26 1211.92 L1157.84 1211.92 L1158.43 1211.92 L1159.02 1211.92 L1159.6 1211.92 L1160.19 1211.92 L1160.78 1211.92 L1161.36 1211.92 L1161.95 1211.92 L1162.54 1211.92 L1163.12 1211.92 L1163.71 1211.92 L1164.29 1211.92 L1164.88 1211.92 L1165.47 1211.92 L1166.05 1211.92 L1166.64 1211.92 L1167.23 1211.92 L1167.81 1211.92 L1168.4 1211.92 L1168.99 1211.92 L1169.57 1211.92 L1170.16 1211.92 L1170.75 1211.92 L1171.33 1211.92 L1171.92 1211.92 L1172.5 1211.92 L1173.09 1211.92 L1173.68 1211.92 L1174.26 1211.92 L1174.85 1211.92 L1175.44 1211.92 L1176.02 1211.92 L1176.61 1211.92 L1177.2 1211.92 L1177.78 1211.92 L1178.37 1211.92 L1178.96 1211.92 L1179.54 1211.92 L1180.13 1211.92 L1180.71 1211.92 L1181.3 1211.92 L1181.89 1211.92 L1182.47 1211.92 L1183.06 1211.92 L1183.65 1211.92 L1184.23 1211.92 L1184.82 1211.92 L1185.41 1211.92 L1185.99 1211.92 L1186.58 1211.92 L1187.16 1211.92 L1187.75 1211.92 L1188.34 1211.92 L1188.92 1211.92 L1189.51 1211.92 L1190.1 1211.92 L1190.68 1211.92 L1191.27 1211.92 L1191.86 1211.92 L1192.44 1211.92 L1193.03 1211.92 L1193.62 1211.92 L1194.2 1211.92 L1194.79 1211.92 L1195.37 1211.92 L1195.96 1211.92 L1196.55 1211.92 L1197.13 1211.92 L1197.72 1211.92 L1198.31 1211.92 L1198.89 1211.92 L1199.48 1211.92 L1200.07 1211.92 L1200.65 1211.92 L1201.24 1211.92 L1201.83 1211.92 L1202.41 1211.92 L1203 1211.92 L1203.58 1211.92 L1204.17 1211.92 L1204.76 1211.92 L1205.34 1211.92 L1205.93 1211.92 L1206.52 1211.92 L1207.1 1211.92 L1207.69 1211.92 L1208.28 1211.92 L1208.86 1211.92 L1209.45 1211.92 L1210.03 1211.92 L1210.62 1211.92 L1211.21 1211.92 L1211.79 1211.92 L1212.38 1211.92 L1212.97 1211.92 L1213.55 1211.92 L1214.14 1211.92 L1214.73 1211.92 L1215.31 1211.92 L1215.9 1211.92 L1216.49 1211.92 L1217.07 1211.92 L1217.66 1211.92 L1218.24 1211.92 L1218.83 1211.92 L1219.42 1211.92 L1220 1211.92 L1220.59 1211.92 L1221.18 1211.92 L1221.76 1211.92 L1222.35 1211.92 L1222.94 1211.92 L1223.52 1211.92 L1224.11 1211.92 L1224.7 1211.92 L1225.28 1211.92 L1225.87 1211.92 L1226.45 1211.92 L1227.04 1211.92 L1227.63 1211.92 L1228.21 1211.92 L1228.8 1211.92 L1229.39 1211.92 L1229.97 1211.92 L1230.56 1211.92 L1231.15 1211.92 L1231.73 1211.92 L1232.32 1211.92 L1232.91 1211.92 L1233.49 1211.92 L1234.08 1211.92 L1234.66 1211.92 L1235.25 1211.92 L1235.84 1211.92 L1236.42 1211.92 L1237.01 1211.92 L1237.6 1211.92 L1238.18 1211.92 L1238.77 1211.92 L1239.36 1211.92 L1239.94 1211.92 L1240.53 1211.92 L1241.11 1211.92 L1241.7 1211.92 L1242.29 1211.92 L1242.87 1211.92 L1243.46 1211.92 L1244.05 1211.92 L1244.63 1211.92 L1245.22 1211.92 L1245.81 1211.92 L1246.39 1211.92 L1246.98 1211.92 L1247.57 1211.92 L1248.15 1211.92 L1248.74 1211.92 L1249.32 1211.92 L1249.91 1211.92 L1250.5 1211.92 L1251.08 1211.92 L1251.67 1211.92 L1252.26 1211.92 L1252.84 1211.92 L1253.43 1211.92 L1254.02 1211.92 L1254.6 1211.92 L1255.19 1211.92 L1255.78 1211.92 L1256.36 1211.92 L1256.95 1211.92 L1257.53 1211.92 L1258.12 1211.92 L1258.71 1211.92 L1259.29 1211.92 L1259.88 1211.92 L1260.47 1211.92 L1261.05 1211.92 L1261.64 1211.92 L1262.23 1211.92 L1262.81 1211.92 L1263.4 1211.92 L1263.98 1211.92 L1264.57 1211.92 L1265.16 1211.92 L1265.74 1211.92 L1266.33 1211.92 L1266.92 1211.92 L1267.5 1211.92 L1268.09 1211.92 L1268.68 1211.92 L1269.26 1211.92 L1269.85 1211.92 L1270.44 1211.92 L1271.02 1211.92 L1271.61 1211.92 L1272.19 1211.92 L1272.78 1211.92 L1273.37 1211.92 L1273.95 1211.92 L1274.54 1211.92 L1275.13 1211.92 L1275.71 1211.92 L1276.3 1211.92 L1276.89 1211.92 L1277.47 1211.92 L1278.06 1211.92 L1278.65 1211.92 L1279.23 1211.92 L1279.82 1211.92 L1280.4 1211.92 L1280.99 1211.92 L1281.58 1211.92 L1282.16 1211.92 L1282.75 1211.92 L1283.34 1211.92 L1283.92 1211.92 L1284.51 1211.92 L1285.1 1211.92 L1285.68 1211.92 L1286.27 1211.92 L1286.86 1211.92 L1287.44 1211.92 L1288.03 1211.92 L1288.61 1211.92 L1289.2 1211.92 L1289.79 1211.92 L1290.37 1211.92 L1290.96 1211.92 L1291.55 1211.92 L1292.13 1211.92 L1292.72 1211.92 L1293.31 1211.92 L1293.89 1211.92 L1294.48 1211.92 L1295.06 1211.92 L1295.65 1211.92 L1296.24 1211.92 L1296.82 1211.92 L1297.41 1211.92 L1298 1211.92 L1298.58 1211.92 L1299.17 1211.92 L1299.76 1211.92 L1300.34 1211.92 L1300.93 1211.92 L1301.52 1211.92 L1302.1 1211.92 L1302.69 1211.92 L1303.27 1211.92 L1303.86 1211.92 L1304.45 1211.92 L1305.03 1211.92 L1305.62 1211.92 L1306.21 1211.92 L1306.79 1211.92 L1307.38 1211.92 L1307.97 1211.92 L1308.55 1211.92 L1309.14 1211.92 L1309.73 1211.92 L1310.31 1211.92 L1310.9 1211.92 L1311.48 1211.92 L1312.07 1211.92 L1312.66 1211.92 L1313.24 1211.92 L1313.83 1211.92 L1314.42 1211.92 L1315 1211.92 L1315.59 1211.92 L1316.18 1211.92 L1316.76 1211.92 L1317.35 1211.92 L1317.93 1211.92 L1318.52 1211.92 L1319.11 1211.92 L1319.69 1211.92 L1320.28 1211.92 L1320.87 1211.92 L1321.45 1211.92 L1322.04 1211.92 L1322.63 1211.92 L1323.21 1211.92 L1323.8 1211.92 L1324.39 1211.92 L1324.97 1211.92 L1325.56 1211.92 L1326.14 1211.92 L1326.73 1211.92 L1327.32 1211.92 L1327.9 1211.92 L1328.49 1211.92 L1329.08 1211.92 L1329.66 1211.92 L1330.25 1211.92 L1330.84 1211.92 L1331.42 1211.92 L1332.01 1211.92 L1332.6 1211.92 L1333.18 1211.92 L1333.77 1211.92 L1334.35 1211.92 L1334.94 1211.92 L1335.53 1211.92 L1336.11 1211.92 L1336.7 1211.92 L1337.29 1211.92 L1337.87 1211.92 L1338.46 1211.92 L1339.05 1211.92 L1339.63 1211.92 L1340.22 1211.92 L1340.8 1211.92 L1341.39 1211.92 L1341.98 1211.92 L1342.56 1211.92 L1343.15 1211.92 L1343.74 1211.92 L1344.32 1211.92 L1344.91 1211.92 L1345.5 1211.92 L1346.08 1211.92 L1346.67 1211.92 L1347.26 1211.92 L1347.84 1211.92 L1348.43 1211.92 L1349.01 1211.92 L1349.6 1211.92 L1350.19 1211.92 L1350.77 1211.92 L1351.36 1211.92 L1351.95 1211.92 L1352.53 1211.92 L1353.12 1211.92 L1353.71 1211.92 L1354.29 1211.92 L1354.88 1211.92 L1355.47 1211.92 L1356.05 1211.92 L1356.64 1211.92 L1357.22 1211.92 L1357.81 1211.92 L1358.4 1211.92 L1358.98 1211.92 L1359.57 1211.92 L1360.16 1211.92 L1360.74 1211.92 L1361.33 1211.92 L1361.92 1211.92 L1362.5 1211.92 L1363.09 1211.92 L1363.68 1211.92 L1364.26 1211.92 L1364.85 1211.92 L1365.43 1211.92 L1366.02 1211.92 L1366.61 1211.92 L1367.19 1211.92 L1367.78 1211.92 L1368.37 1211.92 L1368.95 1211.92 L1369.54 1211.92 L1370.13 1211.92 L1370.71 1211.92 L1371.3 1211.92 L1371.88 1211.92 L1372.47 1211.92 L1373.06 1211.92 L1373.64 1211.92 L1374.23 1211.92 L1374.82 1211.92 L1375.4 1211.92 L1375.99 1211.92 L1376.58 1211.92 L1377.16 1211.92 L1377.75 1211.92 L1378.34 1211.92 L1378.92 1211.92 L1379.51 1211.92 L1380.09 1211.92 L1380.68 1211.92 L1381.27 1211.92 L1381.85 1211.92 L1382.44 1211.92 L1383.03 1211.92 L1383.61 1211.92 L1384.2 1211.92 L1384.79 1211.92 L1385.37 1211.92 L1385.96 1211.92 L1386.55 1211.92 L1387.13 1211.92 L1387.72 1211.92 L1388.3 1211.92 L1388.89 1211.92 L1389.48 1211.92 L1390.06 1211.92 L1390.65 1211.92 L1391.24 1211.92 L1391.82 1211.92 L1392.41 1211.92 L1393 1211.92 L1393.58 1211.92 L1394.17 1211.92 L1394.75 1211.92 L1395.34 1211.92 L1395.93 1211.92 L1396.51 1211.92 L1397.1 1211.92 L1397.69 1211.92 L1398.27 1211.92 L1398.86 1211.92 L1399.45 1211.92 L1400.03 1211.92 L1400.62 1211.92 L1401.21 1211.92 L1401.79 1211.92 L1402.38 1211.92 L1402.96 1211.92 L1403.55 1211.92 L1404.14 1211.92 L1404.72 1211.92 L1405.31 1211.92 L1405.9 1211.92 L1406.48 1211.92 L1407.07 1211.92 L1407.66 1211.92 L1408.24 1211.92 L1408.83 1211.92 L1409.42 1211.92 L1410 1211.92 L1410.59 1211.92 L1411.17 1211.92 L1411.76 1211.92 L1412.35 1211.92 L1412.93 1211.92 L1413.52 1211.92 L1414.11 1211.92 L1414.69 1211.92 L1415.28 1211.92 L1415.87 1211.92 L1416.45 1211.92 L1417.04 1211.92 L1417.63 1211.92 L1418.21 1211.92 L1418.8 1211.92 L1419.38 1211.92 L1419.97 1211.92 L1420.56 1211.92 L1421.14 1211.92 L1421.73 1211.92 L1422.32 1211.92 L1422.9 1211.92 L1423.49 1211.92 L1424.08 1211.92 L1424.66 1211.92 L1425.25 1211.92 L1425.83 1211.92 L1426.42 1211.92 L1427.01 1211.92 L1427.59 1211.92 L1428.18 1211.92 L1428.77 1211.92 L1429.35 1211.92 L1429.94 1211.92 L1430.53 1211.92 L1431.11 1211.92 L1431.7 1211.92 L1432.29 1211.92 L1432.87 1211.92 L1433.46 1211.92 L1434.04 1211.92 L1434.63 1211.92 L1435.22 1211.92 L1435.8 1211.92 L1436.39 1211.92 L1436.98 1211.92 L1437.56 1211.92 L1438.15 1211.92 L1438.74 1211.92 L1439.32 1211.92 L1439.91 1211.92 L1440.5 1211.92 L1441.08 1211.92 L1441.67 1211.92 L1442.25 1211.92 L1442.84 1211.92 L1443.43 1211.92 L1444.01 1211.92 L1444.6 1211.92 L1445.19 1211.92 L1445.77 1211.92 L1446.36 1211.92 L1446.95 1211.92 L1447.53 1211.92 L1448.12 1211.92 L1448.7 1211.92 L1449.29 1211.92 L1449.88 1211.92 L1450.46 1211.92 L1451.05 1211.92 L1451.64 1211.92 L1452.22 1211.92 L1452.81 1211.92 L1453.4 1211.92 L1453.98 1211.92 L1454.57 1211.92 L1455.16 1211.92 L1455.74 1211.92 L1456.33 1211.92 L1456.91 1211.92 L1457.5 1211.92 L1458.09 1211.92 L1458.67 1211.92 L1459.26 1211.92 L1459.85 1211.92 L1460.43 1211.92 L1461.02 1211.92 L1461.61 1211.92 L1462.19 1211.92 L1462.78 1211.92 L1463.37 1211.92 L1463.95 1211.92 L1464.54 1211.92 L1465.12 1211.92 L1465.71 1211.92 L1466.3 1211.92 L1466.88 1211.92 L1467.47 1211.92 L1468.06 1211.92 L1468.64 1211.92 L1469.23 1211.92 L1469.82 1211.92 L1470.4 1211.92 L1470.99 1211.92 L1471.57 1211.92 L1472.16 1211.92 L1472.75 1211.92 L1473.33 1211.92 L1473.92 1211.92 L1474.51 1211.92 L1475.09 1211.92 L1475.68 1211.92 L1476.27 1211.92 L1476.85 1211.92 L1477.44 1211.92 L1478.03 1211.92 L1478.61 1211.92 L1479.2 1211.92 L1479.78 1211.92 L1480.37 1211.92 L1480.96 1211.92 L1481.54 1211.92 L1482.13 1211.92 L1482.72 1211.92 L1483.3 1211.92 L1483.89 1211.92 L1484.48 1211.92 L1485.06 1211.92 L1485.65 1211.92 L1486.24 1211.92 L1486.82 1211.92 L1487.41 1211.92 L1487.99 1211.92 L1488.58 1211.92 L1489.17 1211.92 L1489.75 1211.92 L1490.34 1211.92 L1490.93 1211.92 L1491.51 1211.92 L1492.1 1211.92 L1492.69 1211.92 L1493.27 1211.92 L1493.86 1211.92 L1494.45 1211.92 L1495.03 1211.92 L1495.62 1211.92 L1496.2 1211.92 L1496.79 1211.92 L1497.38 1211.92 L1497.96 1211.92 L1498.55 1211.92 L1499.14 1211.92 L1499.72 1211.92 L1500.31 1211.92 L1500.9 1211.92 L1501.48 1211.92 L1502.07 1211.92 L1502.65 1211.92 L1503.24 1211.92 L1503.83 1211.92 L1504.41 1211.92 L1505 1211.92 L1505.59 1211.92 L1506.17 1211.92 L1506.76 1211.92 L1507.35 1211.92 L1507.93 1211.92 L1508.52 1211.92 L1509.11 1211.92 L1509.69 1211.92 L1510.28 1211.92 L1510.86 1211.92 L1511.45 1211.92 L1512.04 1211.92 L1512.62 1211.92 L1513.21 1211.92 L1513.8 1211.92 L1514.38 1211.92 L1514.97 1211.92 L1515.56 1211.92 L1516.14 1211.92 L1516.73 1211.92 L1517.32 1211.92 L1517.9 1211.92 L1518.49 1211.92 L1519.07 1211.92 L1519.66 1211.92 L1520.25 1211.92 L1520.83 1211.92 L1521.42 1211.92 L1522.01 1211.92 L1522.59 1211.92 L1523.18 1211.92 L1523.77 1211.92 L1524.35 1211.92 L1524.94 1211.92 L1525.52 1211.92 L1526.11 1211.92 L1526.7 1211.92 L1527.28 1211.92 L1527.87 1211.92 L1528.46 1211.92 L1529.04 1211.92 L1529.63 1211.92 L1530.22 1211.92 L1530.8 1211.92 L1531.39 1211.92 L1531.98 1211.92 L1532.56 1211.92 L1533.15 1211.92 L1533.73 1211.92 L1534.32 1211.92 L1534.91 1211.92 L1535.49 1211.92 L1536.08 1211.92 L1536.67 1211.92 L1537.25 1211.92 L1537.84 1211.92 L1538.43 1211.92 L1539.01 1211.92 L1539.6 1211.92 L1540.19 1211.92 L1540.77 1211.92 L1541.36 1211.92 L1541.94 1211.92 L1542.53 1211.92 L1543.12 1211.92 L1543.7 1211.92 L1544.29 1211.92 L1544.88 1211.92 L1545.46 1211.92 L1546.05 1211.92 L1546.64 1211.92 L1547.22 1211.92 L1547.81 1211.92 L1548.4 1211.92 L1548.98 1211.92 L1549.57 1211.92 L1550.15 1211.92 L1550.74 1211.92 L1551.33 1211.92 L1551.91 1211.92 L1552.5 1211.92 L1553.09 1211.92 L1553.67 1211.92 L1554.26 1211.92 L1554.85 1211.92 L1555.43 1211.92 L1556.02 1211.92 L1556.6 1211.92 L1557.19 1211.92 L1557.78 1211.92 L1558.36 1211.92 L1558.95 1211.92 L1559.54 1211.92 L1560.12 1211.92 L1560.71 1211.92 L1561.3 1211.92 L1561.88 1211.92 L1562.47 1211.92 L1563.06 1211.92 L1563.64 1211.92 L1564.23 1211.92 L1564.81 1211.92 L1565.4 1211.92 L1565.99 1211.92 L1566.57 1211.92 L1567.16 1211.92 L1567.75 1211.92 L1568.33 1211.92 L1568.92 1211.92 L1569.51 1211.92 L1570.09 1211.92 L1570.68 1211.92 L1571.27 1211.92 L1571.85 1211.92 L1572.44 1211.92 L1573.02 1211.92 L1573.61 1211.92 L1574.2 1211.92 L1574.78 1211.92 L1575.37 1211.92 L1575.96 1211.92 L1576.54 1211.92 L1577.13 1211.92 L1577.72 1211.92 L1578.3 1211.92 L1578.89 1211.92 L1579.47 1211.92 L1580.06 1211.92 L1580.65 1211.92 L1581.23 1211.92 L1581.82 1211.92 L1582.41 1211.92 L1582.99 1211.92 L1583.58 1211.92 L1584.17 1211.92 L1584.75 1211.92 L1585.34 1211.92 L1585.93 1211.92 L1586.51 1211.92 L1587.1 1211.92 L1587.68 1211.92 L1588.27 1211.92 L1588.86 1211.92 L1589.44 1211.92 L1590.03 1211.92 L1590.62 1211.92 L1591.2 1211.92 L1591.79 1211.92 L1592.38 1211.92 L1592.96 1211.92 L1593.55 1211.92 L1594.14 1211.92 L1594.72 1211.92 L1595.31 1211.92 L1595.89 1211.92 L1596.48 1211.92 L1597.07 1211.92 L1597.65 1211.92 L1598.24 1211.92 L1598.83 1211.92 L1599.41 1211.92 L1600 1211.92 L1600.59 1211.92 L1601.17 1211.92 L1601.76 1211.92 L1602.34 1211.92 L1602.93 1211.92 L1603.52 1211.92 L1604.1 1211.92 L1604.69 1211.92 L1605.28 1211.92 L1605.86 1211.92 L1606.45 1211.92 L1607.04 1211.92 L1607.62 1211.92 L1608.21 1211.92 L1608.8 1211.92 L1609.38 1211.92 L1609.97 1211.92 L1610.55 1211.92 L1611.14 1211.92 L1611.73 1211.92 L1612.31 1211.92 L1612.9 1211.92 L1613.49 1211.92 L1614.07 1211.92 L1614.66 1211.92 L1615.25 1211.92 L1615.83 1211.92 L1616.42 1211.92 L1617.01 1211.92 L1617.59 1211.92 L1618.18 1211.92 L1618.76 1211.92 L1619.35 1211.92 L1619.94 1211.92 L1620.52 1211.92 L1621.11 1211.92 L1621.7 1211.92 L1622.28 1211.92 L1622.87 1211.92 L1623.46 1211.92 L1624.04 1211.92 L1624.63 1211.92 L1625.22 1211.92 L1625.8 1211.92 L1626.39 1211.92 L1626.97 1211.92 L1627.56 1211.92 L1628.15 1211.92 L1628.73 1211.92 L1629.32 1211.92 L1629.91 1211.92 L1630.49 1211.92 L1631.08 1211.92 L1631.67 1211.92 L1632.25 1211.92 L1632.84 1211.92 L1633.42 1211.92 L1634.01 1211.92 L1634.6 1211.92 L1635.18 1211.92 L1635.77 1211.92 L1636.36 1211.92 L1636.94 1211.92 L1637.53 1211.92 L1638.12 1211.92 L1638.7 1211.92 L1639.29 1211.92 L1639.88 1211.92 L1640.46 1211.92 L1641.05 1211.92 L1641.63 1211.92 L1642.22 1211.92 L1642.81 1211.92 L1643.39 1211.92 L1643.98 1211.92 L1644.57 1211.92 L1645.15 1211.92 L1645.74 1211.92 L1646.33 1211.92 L1646.91 1211.92 L1647.5 1211.92 L1648.09 1211.92 L1648.67 1211.92 L1649.26 1211.92 L1649.84 1211.92 L1650.43 1211.92 L1651.02 1211.92 L1651.6 1211.92 L1652.19 1211.92 L1652.78 1211.92 L1653.36 1211.92 L1653.95 1211.92 L1654.54 1211.92 L1655.12 1211.92 L1655.71 1211.92 L1656.29 1211.92 L1656.88 1211.92 L1657.47 1211.92 L1658.05 1211.92 L1658.64 1211.92 L1659.23 1211.92 L1659.81 1211.92 L1660.4 1211.92 L1660.99 1211.92 L1661.57 1211.92 L1662.16 1211.92 L1662.75 1211.92 L1663.33 1211.92 L1663.92 1211.92 L1664.5 1211.92 L1665.09 1211.92 L1665.68 1211.92 L1666.26 1211.92 L1666.85 1211.92 L1667.44 1211.92 L1668.02 1211.92 L1668.61 1211.92 L1669.2 1211.92 L1669.78 1211.92 L1670.37 1211.92 L1670.96 1211.92 L1671.54 1211.92 L1672.13 1211.92 L1672.71 1211.92 L1673.3 1211.92 L1673.89 1211.92 L1674.47 1211.92 L1675.06 1211.92 L1675.65 1211.92 L1676.23 1211.92 L1676.82 1211.92 L1677.41 1211.92 L1677.99 1211.92 L1678.58 1211.92 L1679.17 1211.92 L1679.75 1211.92 L1680.34 1211.92 L1680.92 1211.92 L1681.51 1211.92 L1682.1 1211.92 L1682.68 1211.92 L1683.27 1211.92 L1683.86 1211.92 L1684.44 1211.92 L1685.03 1211.92 L1685.62 1211.92 L1686.2 1211.92 L1686.79 1211.92 L1687.37 1211.92 L1687.96 1211.92 L1688.55 1211.92 L1689.13 1211.92 L1689.72 1211.92 L1690.31 1211.92 L1690.89 1211.92 L1691.48 1211.92 L1692.07 1211.92 L1692.65 1211.92 L1693.24 1211.92 L1693.83 1211.92 L1694.41 1211.92 L1695 1211.92 L1695.58 1211.92 L1696.17 1211.92 L1696.76 1211.92 L1697.34 1211.92 L1697.93 1211.92 L1698.52 1211.92 L1699.1 1211.92 L1699.69 1211.92 L1700.28 1211.92 L1700.86 1211.92 L1701.45 1211.92 L1702.04 1211.92 L1702.62 1211.92 L1703.21 1211.92 L1703.79 1211.92 L1704.38 1211.92 L1704.97 1211.92 L1705.55 1211.92 L1706.14 1211.92 L1706.73 1211.92 L1707.31 1211.92 L1707.9 1211.92 L1708.49 1211.92 L1709.07 1211.92 L1709.66 1211.92 L1710.24 1211.92 L1710.83 1211.92 L1711.42 1211.92 L1712 1211.92 L1712.59 1211.92 L1713.18 1211.92 L1713.76 1211.92 L1714.35 1211.92 L1714.94 1211.92 L1715.52 1211.92 L1716.11 1211.92 L1716.7 1211.92 L1717.28 1211.92 L1717.87 1211.92 L1718.45 1211.92 L1719.04 1211.92 L1719.63 1211.92 L1720.21 1211.92 L1720.8 1211.92 L1721.39 1211.92 L1721.97 1211.92 L1722.56 1211.92 L1723.15 1211.92 L1723.73 1211.92 L1724.32 1211.92 L1724.91 1211.92 L1725.49 1211.92 L1726.08 1211.92 L1726.66 1211.92 L1727.25 1211.92 L1727.84 1211.92 L1728.42 1211.92 L1729.01 1211.92 L1729.6 1211.92 L1730.18 1211.92 L1730.77 1211.92 L1731.36 1211.92 L1731.94 1211.92 L1732.53 1211.92 L1733.11 1211.92 L1733.7 1211.92 L1734.29 1211.92 L1734.87 1211.92 L1735.46 1211.92 L1736.05 1211.92 L1736.63 1211.92 L1737.22 1211.92 L1737.81 1211.92 L1738.39 1211.92 L1738.98 1211.92 L1739.57 1211.92 L1740.15 1211.92 L1740.74 1211.92 L1741.32 1211.92 L1741.91 1211.92 L1742.5 1211.92 L1743.08 1211.92 L1743.67 1211.92 L1744.26 1211.92 L1744.84 1211.92 L1745.43 1211.92 L1746.02 1211.92 L1746.6 1211.92 L1747.19 1211.92 L1747.78 1211.92 L1748.36 1211.92 L1748.95 1211.92 L1749.53 1211.92 L1750.12 1211.92 L1750.71 1211.92 L1751.29 1211.92 L1751.88 1211.92 L1752.47 1211.92 L1753.05 1211.92 L1753.64 1211.92 L1754.23 1211.92 L1754.81 1211.92 L1755.4 1211.92 L1755.99 1211.92 L1756.57 1211.92 L1757.16 1211.92 L1757.74 1211.92 L1758.33 1211.92 L1758.92 1211.92 L1759.5 1211.92 L1760.09 1211.92 L1760.68 1211.92 L1761.26 1211.92 L1761.85 1211.92 L1762.44 1211.92 L1763.02 1211.92 L1763.61 1211.92 L1764.19 1211.92 L1764.78 1211.92 L1765.37 1211.92 L1765.95 1211.92 L1766.54 1211.92 L1767.13 1211.92 L1767.71 1211.92 L1768.3 1211.92 L1768.89 1211.92 L1769.47 1211.92 L1770.06 1211.92 L1770.65 1211.92 L1771.23 1211.92 L1771.82 1211.92 L1772.4 1211.92 L1772.99 1211.92 L1773.58 1211.92 L1774.16 1211.92 L1774.75 1211.92 L1775.34 1211.92 L1775.92 1211.92 L1776.51 1211.92 L1777.1 1211.92 L1777.68 1211.92 L1778.27 1211.92 L1778.86 1211.92 L1779.44 1211.92 L1780.03 1211.92 L1780.61 1211.92 L1781.2 1211.92 L1781.79 1211.92 L1782.37 1211.92 L1782.96 1211.92 L1783.55 1211.92 L1784.13 1211.92 L1784.72 1211.92 L1785.31 1211.92 L1785.89 1211.92 L1786.48 1211.92 L1787.06 1211.92 L1787.65 1211.92 L1788.24 1211.92 L1788.82 1211.92 L1789.41 1211.92 L1790 1211.92 L1790.58 1211.92 L1791.17 1211.92 L1791.76 1211.92 L1792.34 1211.92 L1792.93 1211.92 L1793.52 1211.92 L1794.1 1211.92 L1794.69 1211.92 L1795.27 1211.92 L1795.86 1211.92 L1796.45 1211.92 L1797.03 1211.92 L1797.62 1211.92 L1798.21 1211.92 L1798.79 1211.92 L1799.38 1211.92 L1799.97 1211.92 L1800.55 1211.92 L1801.14 1211.92 L1801.73 1211.92 L1802.31 1211.92 L1802.9 1211.92 L1803.48 1211.92 L1804.07 1211.92 L1804.66 1211.92 L1805.24 1211.92 L1805.83 1211.92 L1806.42 1211.92 L1807 1211.92 L1807.59 1211.92 L1808.18 1211.92 L1808.76 1211.92 L1809.35 1211.92 L1809.94 1211.92 L1810.52 1211.92 L1811.11 1211.92 L1811.69 1211.92 L1812.28 1211.92 L1812.87 1211.92 L1813.45 1211.92 L1814.04 1211.92 L1814.63 1211.92 L1815.21 1211.92 L1815.8 1211.92 L1816.39 1211.92 L1816.97 1211.92 L1817.56 1211.92 L1818.14 1211.92 L1818.73 1211.92 L1819.32 1211.92 L1819.9 1211.92 L1820.49 1211.92 L1821.08 1211.92 L1821.66 1211.92 L1822.25 1211.92 L1822.84 1211.92 L1823.42 1211.92 L1824.01 1211.92 L1824.6 1211.92 L1825.18 1211.92 L1825.77 1211.92 L1826.35 1211.92 L1826.94 1211.92 L1827.53 1211.92 L1828.11 1211.92 L1828.7 1211.92 L1829.29 1211.92 L1829.87 1211.92 L1830.46 1211.92 L1831.05 1211.92 L1831.63 1211.92 L1832.22 1211.92 L1832.81 1211.92 L1833.39 1211.92 L1833.98 1211.92 L1834.56 1211.92 L1835.15 1211.92 L1835.74 1211.92 L1836.32 1211.92 L1836.91 1211.92 L1837.5 1211.92 L1838.08 1211.92 L1838.67 1211.92 L1839.26 1211.92 L1839.84 1211.92 L1840.43 1211.92 L1841.01 1211.92 L1841.6 1211.92 L1842.19 1211.92 L1842.77 1211.92 L1843.36 1211.92 L1843.95 1211.92 L1844.53 1211.92 L1845.12 1211.92 L1845.71 1211.92 L1846.29 1211.92 L1846.88 1211.92 L1847.47 1211.92 L1848.05 1211.92 L1848.64 1211.92 L1849.22 1211.92 L1849.81 1211.92 L1850.4 1211.92 L1850.98 1211.92 L1851.57 1211.92 L1852.16 1211.92 L1852.74 1211.92 L1853.33 1211.92 L1853.92 1211.92 L1854.5 1211.92 L1855.09 1211.92 L1855.68 1211.92 L1856.26 1211.92 L1856.85 1211.92 L1857.43 1211.92 L1858.02 1211.92 L1858.61 1211.92 L1859.19 1211.92 L1859.78 1211.92 L1860.37 1211.92 L1860.95 1211.92 L1861.54 1211.92 L1862.13 1211.92 L1862.71 1211.92 L1863.3 1211.92 L1863.88 1211.92 L1864.47 1211.92 L1865.06 1211.92 L1865.64 1211.92 L1866.23 1211.92 L1866.82 1211.92 L1867.4 1211.92 L1867.99 1211.92 L1868.58 1211.92 L1869.16 1211.92 L1869.75 1211.92 L1870.34 1211.92 L1870.92 1211.92 L1871.51 1211.92 L1872.09 1211.92 L1872.68 1211.92 L1873.27 1211.92 L1873.85 1211.92 L1874.44 1211.92 L1875.03 1211.92 L1875.61 1211.92 L1876.2 1211.92 L1876.79 1211.92 L1877.37 1211.92 L1877.96 1211.92 L1878.55 1211.92 L1879.13 1211.92 L1879.72 1211.92 L1880.3 1211.92 L1880.89 1211.92 L1881.48 1211.92 L1882.06 1211.92 L1882.65 1211.92 L1883.24 1211.92 L1883.82 1211.92 L1884.41 1211.92 L1885 1211.92 L1885.58 1211.92 L1886.17 1211.92 L1886.76 1211.92 L1887.34 1211.92 L1887.93 1211.92 L1888.51 1211.92 L1889.1 1211.92 L1889.69 1211.92 L1890.27 1211.92 L1890.86 1211.92 L1891.45 1211.92 L1892.03 1211.92 L1892.62 1211.92 L1893.21 1211.92 L1893.79 1211.92 L1894.38 1211.92 L1894.96 1211.92 L1895.55 1211.92 L1896.14 1211.92 L1896.72 1211.92 L1897.31 1211.92 L1897.9 1211.92 L1898.48 1211.92 L1899.07 1211.92 L1899.66 1211.92 L1900.24 1211.92 L1900.83 1211.92 L1901.42 1211.92 L1902 1211.92 L1902.59 1211.92 L1903.17 1211.92 L1903.76 1211.92 L1904.35 1211.92 L1904.93 1211.92 L1905.52 1211.92 L1906.11 1211.92 L1906.69 1211.92 L1907.28 1211.92 L1907.87 1211.92 L1908.45 1211.92 L1909.04 1211.92 L1909.63 1211.92 L1910.21 1211.92 L1910.8 1211.92 L1911.38 1211.92 L1911.97 1211.92 L1912.56 1211.92 L1913.14 1211.92 L1913.73 1211.92 L1914.32 1211.92 L1914.9 1211.92 L1915.49 1211.92 L1916.08 1211.92 L1916.66 1211.92 L1917.25 1211.92 L1917.83 1211.92 L1918.42 1211.92 L1919.01 1211.92 L1919.59 1211.92 L1920.18 1211.92 L1920.77 1211.92 L1921.35 1211.92 L1921.94 1211.92 L1922.53 1211.92 L1923.11 1211.92 L1923.7 1211.92 L1924.29 1211.92 L1924.87 1211.92 L1925.46 1211.92 L1926.04 1211.92 L1926.63 1211.92 L1927.22 1211.92 L1927.8 1211.92 L1928.39 1211.92 L1928.98 1211.92 L1929.56 1211.92 L1930.15 1211.92 L1930.74 1211.92 L1931.32 1211.92 L1931.91 1211.92 L1932.5 1211.92 L1933.08 1211.92 L1933.67 1211.92 L1934.25 1211.92 L1934.84 1211.92 L1935.43 1211.92 L1936.01 1211.92 L1936.6 1211.92 L1937.19 1211.92 L1937.77 1211.92 L1938.36 1211.92 L1938.95 1211.92 L1939.53 1211.92 L1940.12 1211.92 L1940.71 1211.92 L1941.29 1211.92 L1941.88 1211.92 L1942.46 1211.92 L1943.05 1211.92 L1943.64 1211.92 L1944.22 1211.92 L1944.81 1211.92 L1945.4 1211.92 L1945.98 1211.92 L1946.57 1211.92 L1947.16 1211.92 L1947.74 1211.92 L1948.33 1211.92 L1948.91 1211.92 L1949.5 1211.92 L1950.09 1211.92 L1950.67 1211.92 L1951.26 1211.92 L1951.85 1211.92 L1952.43 1211.92 L1953.02 1211.92 L1953.61 1211.92 L1954.19 1211.92 L1954.78 1211.92 L1955.37 1211.92 L1955.95 1211.92 L1956.54 1211.92 L1957.12 1211.92 L1957.71 1211.92 L1958.3 1211.92 L1958.88 1211.92 L1959.47 1211.92 L1960.06 1211.92 L1960.64 1211.92 L1961.23 1211.92 L1961.82 1211.92 L1962.4 1211.92 L1962.99 1211.92 L1963.58 1211.92 L1964.16 1211.92 L1964.75 1211.92 L1965.33 1211.92 L1965.92 1211.92 L1966.51 1211.92 L1967.09 1211.92 L1967.68 1211.92 L1968.27 1211.92 L1968.85 1211.92 L1969.44 1211.92 L1970.03 1211.92 L1970.61 1211.92 L1971.2 1211.92 L1971.78 1211.92 L1972.37 1211.92 L1972.96 1211.92 L1973.54 1211.92 L1974.13 1211.92 L1974.72 1211.92 L1975.3 1211.92 L1975.89 1211.92 L1976.48 1211.92 L1977.06 1211.92 L1977.65 1211.92 L1978.24 1211.92 L1978.82 1211.92 L1979.41 1211.92 L1979.99 1211.92 L1980.58 1211.92 L1981.17 1211.92 L1981.75 1211.92 L1982.34 1211.92 L1982.93 1211.92 L1983.51 1211.92 L1984.1 1211.92 L1984.69 1211.92 L1985.27 1211.92 L1985.86 1211.92 L1986.45 1211.92 L1987.03 1211.92 L1987.62 1211.92 L1988.2 1211.92 L1988.79 1211.92 L1989.38 1211.92 L1989.96 1211.92 L1990.55 1211.92 L1991.14 1211.92 L1991.72 1211.92 L1992.31 1211.92 L1992.9 1211.92 L1993.48 1211.92 L1994.07 1211.92 L1994.65 1211.92 L1995.24 1211.92 L1995.83 1211.92 L1996.41 1211.92 L1997 1211.92 L1997.59 1211.92 L1998.17 1211.92 L1998.76 1211.92 L1999.35 1211.92 L1999.93 1211.92 L2000.52 1211.92 L2001.11 1211.92 L2001.69 1211.92 L2002.28 1211.92 L2002.86 1211.92 L2003.45 1211.92 L2004.04 1211.92 L2004.62 1211.92 L2005.21 1211.92 L2005.8 1211.92 L2006.38 1211.92 L2006.97 1211.92 L2007.56 1211.92 L2008.14 1211.92 L2008.73 1211.92 L2009.32 1211.92 L2009.9 1211.92 L2010.49 1211.92 L2011.07 1211.92 L2011.66 1211.92 L2012.25 1211.92 L2012.83 1211.92 L2013.42 1211.92 L2014.01 1211.92 L2014.59 1211.92 L2015.18 1211.92 L2015.77 1211.92 L2016.35 1211.92 L2016.94 1211.92 L2017.53 1211.92 L2018.11 1211.92 L2018.7 1211.92 L2019.28 1211.92 L2019.87 1211.92 L2020.46 1211.92 L2021.04 1211.92 L2021.63 1211.92 L2022.22 1211.92 L2022.8 1211.92 L2023.39 1211.92 L2023.98 1211.92 L2024.56 1211.92 L2025.15 1211.92 L2025.73 1211.92 L2026.32 1211.92 L2026.91 1211.92 L2027.49 1211.92 L2028.08 1211.92 L2028.67 1211.92 L2029.25 1211.92 L2029.84 1211.92 L2030.43 1211.92 L2031.01 1211.92 L2031.6 1211.92 L2032.19 1211.92 L2032.77 1211.92 L2033.36 1211.92 L2033.94 1211.92 L2034.53 1211.92 L2035.12 1211.92 L2035.7 1211.92 L2036.29 1211.92 L2036.88 1211.92 L2037.46 1211.92 L2038.05 1211.92 L2038.64 1211.92 L2039.22 1211.92 L2039.81 1211.92 L2040.4 1211.92 L2040.98 1211.92 L2041.57 1211.92 L2042.15 1211.92 L2042.74 1211.92 L2043.33 1211.92 L2043.91 1211.92 L2044.5 1211.92 L2045.09 1211.92 L2045.67 1211.92 L2046.26 1211.92 L2046.85 1211.92 L2047.43 1211.92 L2048.02 1211.92 L2048.6 1211.92 L2049.19 1211.92 L2049.78 1211.92 L2050.36 1211.92 L2050.95 1211.92 L2051.54 1211.92 L2052.12 1211.92 L2052.71 1211.92 L2053.3 1211.92 L2053.88 1211.92 L2054.47 1211.92 L2055.06 1211.92 L2055.64 1211.92 L2056.23 1211.92 L2056.81 1211.92 L2057.4 1211.92 L2057.99 1211.92 L2058.57 1211.92 L2059.16 1211.92 L2059.75 1211.92 L2060.33 1211.92 L2060.92 1211.92 L2061.51 1211.92 L2062.09 1211.92 L2062.68 1211.92 L2063.27 1211.92 L2063.85 1211.92 L2064.44 1211.92 L2065.02 1211.92 L2065.61 1211.92 L2066.2 1211.92 L2066.78 1211.92 L2067.37 1211.92 L2067.96 1211.92 L2068.54 1211.92 L2069.13 1211.92 L2069.72 1211.92 L2070.3 1211.92 L2070.89 1211.92 L2071.48 1211.92 L2072.06 1211.92 L2072.65 1211.92 L2073.23 1211.92 L2073.82 1211.92 L2074.41 1211.92 L2074.99 1211.92 L2075.58 1211.92 L2076.17 1211.92 L2076.75 1211.92 L2077.34 1211.92 L2077.93 1211.92 L2078.51 1211.92 L2079.1 1211.92 L2079.68 1211.92 L2080.27 1211.92 L2080.86 1211.92 L2081.44 1211.92 L2082.03 1211.92 L2082.62 1211.92 L2083.2 1211.92 L2083.79 1211.92 L2084.38 1211.92 L2084.96 1211.92 L2085.55 1211.92 L2086.14 1211.92 L2086.72 1211.92 L2087.31 1211.92 L2087.89 1211.92 L2088.48 1211.92 L2089.07 1211.92 L2089.65 1211.92 L2090.24 1211.92 L2090.83 1211.92 L2091.41 1211.92 L2092 1211.92 L2092.59 1211.92 L2093.17 1211.92 L2093.76 1211.92 L2094.35 1211.92 L2094.93 1211.92 L2095.52 1211.92 L2096.1 1211.92 L2096.69 1211.92 L2097.28 1211.92 L2097.86 1211.92 L2098.45 1211.92 L2099.04 1211.92 L2099.62 1211.92 L2100.21 1211.92 L2100.8 1211.92 L2101.38 1211.92 L2101.97 1211.92 L2102.55 1211.92 L2103.14 1211.92 L2103.73 1211.92 L2104.31 1211.92 L2104.9 1211.92 L2105.49 1211.92 L2106.07 1211.92 L2106.66 1211.92 L2107.25 1211.92 L2107.83 1211.92 L2108.42 1211.92 L2109.01 1211.92 L2109.59 1211.92 L2110.18 1211.92 L2110.76 1211.92 L2111.35 1211.92 L2111.94 1211.92 L2112.52 1211.92 L2113.11 1211.92 L2113.7 1211.92 L2114.28 1211.92 L2114.87 1211.92 L2115.46 1211.92 L2116.04 1211.92 L2116.63 1211.92 L2117.22 1211.92 L2117.8 1211.92 L2118.39 1211.92 L2118.97 1211.92 L2119.56 1211.92 L2120.15 1211.92 L2120.73 1211.92 L2121.32 1211.92 L2121.91 1211.92 L2122.49 1211.92 L2123.08 1211.92 L2123.67 1211.92 L2124.25 1211.92 L2124.84 1211.92 L2125.42 1211.92 L2126.01 1211.92 L2126.6 1211.92 L2127.18 1211.92 L2127.77 1211.92 L2128.36 1211.92 L2128.94 1211.92 L2129.53 1211.92 L2130.12 1211.92 L2130.7 1211.92 L2131.29 1211.92 L2131.88 1211.92 L2132.46 1211.92 L2133.05 1211.92 L2133.63 1211.92 L2134.22 1211.92 L2134.81 1211.92 L2135.39 1211.92 L2135.98 1211.92 L2136.57 1211.92 L2137.15 1211.92 L2137.74 1211.92 L2138.33 1211.92 L2138.91 1211.92 L2139.5 1211.92 L2140.09 1211.92 L2140.67 1211.92 L2141.26 1211.92 L2141.84 1211.92 L2142.43 1211.92 L2143.02 1211.92 L2143.6 1211.92 L2144.19 1211.92 L2144.78 1211.92 L2145.36 1211.92 L2145.95 1211.92 L2146.54 1211.92 L2147.12 1211.92 L2147.71 1211.92 L2148.3 1211.92 L2148.88 1211.92 L2149.47 1211.92 L2150.05 1211.92 L2150.64 1211.92 L2151.23 1211.92 L2151.81 1211.92 L2152.4 1211.92 L2152.99 1211.92 L2153.57 1211.92 L2154.16 1211.92 L2154.75 1211.92 L2155.33 1211.92 L2155.92 1211.92 L2156.5 1211.92 L2157.09 1211.92 L2157.68 1211.92 L2158.26 1211.92 L2158.26 1211.12 L2157.68 1211.12 L2157.09 1211.12 L2156.5 1211.12 L2155.92 1211.12 L2155.33 1211.12 L2154.75 1211.12 L2154.16 1211.12 L2153.57 1211.12 L2152.99 1211.12 L2152.4 1211.12 L2151.81 1211.12 L2151.23 1211.12 L2150.64 1211.12 L2150.05 1211.12 L2149.47 1211.12 L2148.88 1211.12 L2148.3 1211.12 L2147.71 1211.12 L2147.12 1211.12 L2146.54 1211.12 L2145.95 1211.12 L2145.36 1211.12 L2144.78 1211.12 L2144.19 1211.12 L2143.6 1211.12 L2143.02 1211.12 L2142.43 1211.12 L2141.84 1211.12 L2141.26 1211.12 L2140.67 1211.12 L2140.09 1211.12 L2139.5 1211.12 L2138.91 1211.12 L2138.33 1211.12 L2137.74 1211.12 L2137.15 1211.12 L2136.57 1211.12 L2135.98 1211.12 L2135.39 1211.12 L2134.81 1211.12 L2134.22 1211.12 L2133.63 1211.12 L2133.05 1211.12 L2132.46 1211.12 L2131.88 1211.12 L2131.29 1211.12 L2130.7 1211.12 L2130.12 1211.12 L2129.53 1211.12 L2128.94 1211.12 L2128.36 1211.12 L2127.77 1211.12 L2127.18 1211.12 L2126.6 1211.12 L2126.01 1211.12 L2125.42 1211.12 L2124.84 1211.12 L2124.25 1211.12 L2123.67 1211.12 L2123.08 1211.12 L2122.49 1211.12 L2121.91 1211.12 L2121.32 1211.12 L2120.73 1211.12 L2120.15 1211.12 L2119.56 1211.12 L2118.97 1211.12 L2118.39 1211.12 L2117.8 1211.12 L2117.22 1211.12 L2116.63 1211.12 L2116.04 1211.12 L2115.46 1211.12 L2114.87 1211.12 L2114.28 1211.12 L2113.7 1211.12 L2113.11 1211.12 L2112.52 1211.12 L2111.94 1211.12 L2111.35 1211.12 L2110.76 1211.12 L2110.18 1211.12 L2109.59 1211.12 L2109.01 1211.12 L2108.42 1211.12 L2107.83 1211.12 L2107.25 1211.12 L2106.66 1211.12 L2106.07 1211.12 L2105.49 1211.12 L2104.9 1211.12 L2104.31 1211.12 L2103.73 1211.12 L2103.14 1211.12 L2102.55 1211.12 L2101.97 1211.12 L2101.38 1211.12 L2100.8 1211.12 L2100.21 1211.12 L2099.62 1211.12 L2099.04 1211.12 L2098.45 1211.12 L2097.86 1211.12 L2097.28 1211.12 L2096.69 1211.12 L2096.1 1211.12 L2095.52 1211.12 L2094.93 1211.12 L2094.35 1211.12 L2093.76 1211.12 L2093.17 1211.12 L2092.59 1211.12 L2092 1211.12 L2091.41 1211.12 L2090.83 1211.12 L2090.24 1211.12 L2089.65 1211.12 L2089.07 1211.12 L2088.48 1211.12 L2087.89 1211.12 L2087.31 1211.12 L2086.72 1211.12 L2086.14 1211.12 L2085.55 1211.12 L2084.96 1211.12 L2084.38 1211.12 L2083.79 1211.12 L2083.2 1211.12 L2082.62 1211.12 L2082.03 1211.12 L2081.44 1211.12 L2080.86 1211.12 L2080.27 1211.12 L2079.68 1211.12 L2079.1 1211.12 L2078.51 1211.12 L2077.93 1211.12 L2077.34 1211.12 L2076.75 1211.12 L2076.17 1211.12 L2075.58 1211.12 L2074.99 1211.12 L2074.41 1211.12 L2073.82 1211.12 L2073.23 1211.12 L2072.65 1211.12 L2072.06 1211.12 L2071.48 1211.12 L2070.89 1211.12 L2070.3 1211.12 L2069.72 1211.12 L2069.13 1211.12 L2068.54 1211.12 L2067.96 1211.12 L2067.37 1211.12 L2066.78 1211.12 L2066.2 1211.12 L2065.61 1211.12 L2065.02 1211.12 L2064.44 1211.12 L2063.85 1211.12 L2063.27 1211.12 L2062.68 1211.12 L2062.09 1211.12 L2061.51 1211.12 L2060.92 1211.12 L2060.33 1211.12 L2059.75 1211.12 L2059.16 1211.12 L2058.57 1211.12 L2057.99 1211.12 L2057.4 1211.12 L2056.81 1211.12 L2056.23 1211.12 L2055.64 1211.12 L2055.06 1211.12 L2054.47 1211.12 L2053.88 1211.12 L2053.3 1211.12 L2052.71 1211.12 L2052.12 1211.12 L2051.54 1211.12 L2050.95 1211.12 L2050.36 1211.12 L2049.78 1211.12 L2049.19 1211.12 L2048.6 1211.12 L2048.02 1211.12 L2047.43 1211.12 L2046.85 1211.12 L2046.26 1211.12 L2045.67 1211.12 L2045.09 1211.12 L2044.5 1211.12 L2043.91 1211.12 L2043.33 1211.12 L2042.74 1211.12 L2042.15 1211.12 L2041.57 1211.12 L2040.98 1211.12 L2040.4 1211.12 L2039.81 1211.12 L2039.22 1211.12 L2038.64 1211.12 L2038.05 1211.12 L2037.46 1211.12 L2036.88 1211.12 L2036.29 1211.12 L2035.7 1211.12 L2035.12 1211.12 L2034.53 1211.12 L2033.94 1211.12 L2033.36 1211.12 L2032.77 1211.12 L2032.19 1211.12 L2031.6 1211.12 L2031.01 1211.12 L2030.43 1211.12 L2029.84 1211.12 L2029.25 1211.12 L2028.67 1211.12 L2028.08 1211.12 L2027.49 1211.12 L2026.91 1211.12 L2026.32 1211.12 L2025.73 1211.12 L2025.15 1211.12 L2024.56 1211.12 L2023.98 1211.12 L2023.39 1211.12 L2022.8 1211.12 L2022.22 1211.12 L2021.63 1211.12 L2021.04 1211.12 L2020.46 1211.12 L2019.87 1211.12 L2019.28 1211.12 L2018.7 1211.12 L2018.11 1211.12 L2017.53 1211.12 L2016.94 1211.12 L2016.35 1211.12 L2015.77 1211.12 L2015.18 1211.12 L2014.59 1211.12 L2014.01 1211.12 L2013.42 1211.12 L2012.83 1211.12 L2012.25 1211.12 L2011.66 1211.12 L2011.07 1211.12 L2010.49 1211.12 L2009.9 1211.12 L2009.32 1211.12 L2008.73 1211.12 L2008.14 1211.12 L2007.56 1211.12 L2006.97 1211.12 L2006.38 1211.12 L2005.8 1211.12 L2005.21 1211.12 L2004.62 1211.12 L2004.04 1211.12 L2003.45 1211.12 L2002.86 1211.12 L2002.28 1211.12 L2001.69 1211.12 L2001.11 1211.12 L2000.52 1211.12 L1999.93 1211.12 L1999.35 1211.12 L1998.76 1211.12 L1998.17 1211.12 L1997.59 1211.12 L1997 1211.12 L1996.41 1211.12 L1995.83 1211.12 L1995.24 1211.12 L1994.65 1211.12 L1994.07 1211.12 L1993.48 1211.12 L1992.9 1211.12 L1992.31 1211.12 L1991.72 1211.12 L1991.14 1211.12 L1990.55 1211.12 L1989.96 1211.12 L1989.38 1211.12 L1988.79 1211.12 L1988.2 1211.12 L1987.62 1211.12 L1987.03 1211.12 L1986.45 1211.12 L1985.86 1211.12 L1985.27 1211.12 L1984.69 1211.12 L1984.1 1211.12 L1983.51 1211.12 L1982.93 1211.12 L1982.34 1211.12 L1981.75 1211.12 L1981.17 1211.12 L1980.58 1211.12 L1979.99 1211.12 L1979.41 1211.12 L1978.82 1211.12 L1978.24 1211.12 L1977.65 1211.12 L1977.06 1211.12 L1976.48 1211.12 L1975.89 1211.12 L1975.3 1211.12 L1974.72 1211.12 L1974.13 1211.12 L1973.54 1211.12 L1972.96 1211.12 L1972.37 1211.12 L1971.78 1211.12 L1971.2 1211.12 L1970.61 1211.12 L1970.03 1211.12 L1969.44 1211.12 L1968.85 1211.12 L1968.27 1211.12 L1967.68 1211.12 L1967.09 1211.12 L1966.51 1211.12 L1965.92 1211.12 L1965.33 1211.12 L1964.75 1211.12 L1964.16 1211.12 L1963.58 1211.12 L1962.99 1211.12 L1962.4 1211.12 L1961.82 1211.12 L1961.23 1211.12 L1960.64 1211.12 L1960.06 1211.12 L1959.47 1211.12 L1958.88 1211.12 L1958.3 1211.12 L1957.71 1211.12 L1957.12 1211.12 L1956.54 1211.12 L1955.95 1211.12 L1955.37 1211.12 L1954.78 1211.12 L1954.19 1211.12 L1953.61 1211.12 L1953.02 1211.12 L1952.43 1211.12 L1951.85 1211.12 L1951.26 1211.12 L1950.67 1211.12 L1950.09 1211.12 L1949.5 1211.12 L1948.91 1211.12 L1948.33 1211.12 L1947.74 1211.12 L1947.16 1211.12 L1946.57 1211.12 L1945.98 1211.12 L1945.4 1211.12 L1944.81 1211.12 L1944.22 1211.12 L1943.64 1211.12 L1943.05 1211.12 L1942.46 1211.12 L1941.88 1211.12 L1941.29 1211.12 L1940.71 1211.12 L1940.12 1211.12 L1939.53 1211.12 L1938.95 1211.12 L1938.36 1211.12 L1937.77 1211.12 L1937.19 1211.12 L1936.6 1211.12 L1936.01 1211.12 L1935.43 1211.12 L1934.84 1211.12 L1934.25 1211.12 L1933.67 1211.12 L1933.08 1211.12 L1932.5 1211.12 L1931.91 1211.12 L1931.32 1211.12 L1930.74 1211.12 L1930.15 1211.12 L1929.56 1211.12 L1928.98 1211.12 L1928.39 1211.12 L1927.8 1211.12 L1927.22 1211.12 L1926.63 1211.12 L1926.04 1211.12 L1925.46 1211.12 L1924.87 1211.12 L1924.29 1211.12 L1923.7 1211.12 L1923.11 1211.12 L1922.53 1211.12 L1921.94 1211.12 L1921.35 1211.12 L1920.77 1211.12 L1920.18 1211.12 L1919.59 1211.12 L1919.01 1211.12 L1918.42 1211.12 L1917.83 1211.12 L1917.25 1211.12 L1916.66 1211.12 L1916.08 1211.12 L1915.49 1211.12 L1914.9 1211.12 L1914.32 1211.12 L1913.73 1211.12 L1913.14 1211.12 L1912.56 1211.12 L1911.97 1211.12 L1911.38 1211.12 L1910.8 1211.12 L1910.21 1211.12 L1909.63 1211.12 L1909.04 1211.12 L1908.45 1211.12 L1907.87 1211.12 L1907.28 1211.12 L1906.69 1211.12 L1906.11 1211.12 L1905.52 1211.12 L1904.93 1211.12 L1904.35 1211.12 L1903.76 1211.12 L1903.17 1211.12 L1902.59 1211.12 L1902 1211.12 L1901.42 1211.12 L1900.83 1211.12 L1900.24 1211.12 L1899.66 1211.12 L1899.07 1211.12 L1898.48 1211.12 L1897.9 1211.12 L1897.31 1211.12 L1896.72 1211.12 L1896.14 1211.12 L1895.55 1211.12 L1894.96 1211.12 L1894.38 1211.12 L1893.79 1211.12 L1893.21 1211.12 L1892.62 1211.12 L1892.03 1211.12 L1891.45 1211.12 L1890.86 1211.12 L1890.27 1211.12 L1889.69 1211.12 L1889.1 1211.12 L1888.51 1211.12 L1887.93 1211.12 L1887.34 1211.12 L1886.76 1211.12 L1886.17 1211.12 L1885.58 1211.12 L1885 1211.12 L1884.41 1211.12 L1883.82 1211.12 L1883.24 1211.12 L1882.65 1211.12 L1882.06 1211.12 L1881.48 1211.12 L1880.89 1211.12 L1880.3 1211.12 L1879.72 1211.12 L1879.13 1211.12 L1878.55 1211.12 L1877.96 1211.12 L1877.37 1211.12 L1876.79 1211.12 L1876.2 1211.12 L1875.61 1211.12 L1875.03 1211.12 L1874.44 1211.12 L1873.85 1211.12 L1873.27 1211.12 L1872.68 1211.12 L1872.09 1211.12 L1871.51 1211.12 L1870.92 1211.12 L1870.34 1211.12 L1869.75 1211.12 L1869.16 1211.12 L1868.58 1211.12 L1867.99 1211.12 L1867.4 1211.12 L1866.82 1211.12 L1866.23 1211.12 L1865.64 1211.12 L1865.06 1211.12 L1864.47 1211.12 L1863.88 1211.12 L1863.3 1211.12 L1862.71 1211.12 L1862.13 1211.12 L1861.54 1211.12 L1860.95 1211.12 L1860.37 1211.12 L1859.78 1211.12 L1859.19 1211.12 L1858.61 1211.12 L1858.02 1211.12 L1857.43 1211.12 L1856.85 1211.12 L1856.26 1211.12 L1855.68 1211.12 L1855.09 1211.12 L1854.5 1211.12 L1853.92 1211.12 L1853.33 1211.12 L1852.74 1211.12 L1852.16 1211.12 L1851.57 1211.12 L1850.98 1211.12 L1850.4 1211.12 L1849.81 1211.12 L1849.22 1211.12 L1848.64 1211.12 L1848.05 1211.12 L1847.47 1211.12 L1846.88 1211.12 L1846.29 1211.12 L1845.71 1211.12 L1845.12 1211.12 L1844.53 1211.12 L1843.95 1211.12 L1843.36 1211.12 L1842.77 1211.12 L1842.19 1211.12 L1841.6 1211.12 L1841.01 1211.12 L1840.43 1211.12 L1839.84 1211.12 L1839.26 1211.12 L1838.67 1211.12 L1838.08 1211.12 L1837.5 1211.12 L1836.91 1211.12 L1836.32 1211.12 L1835.74 1211.12 L1835.15 1211.12 L1834.56 1211.12 L1833.98 1211.12 L1833.39 1211.12 L1832.81 1211.12 L1832.22 1211.12 L1831.63 1211.12 L1831.05 1211.12 L1830.46 1211.12 L1829.87 1211.12 L1829.29 1211.12 L1828.7 1211.12 L1828.11 1211.12 L1827.53 1211.12 L1826.94 1211.12 L1826.35 1211.12 L1825.77 1211.12 L1825.18 1211.12 L1824.6 1211.12 L1824.01 1211.12 L1823.42 1211.12 L1822.84 1211.12 L1822.25 1211.12 L1821.66 1211.12 L1821.08 1211.12 L1820.49 1211.12 L1819.9 1211.12 L1819.32 1211.12 L1818.73 1211.12 L1818.14 1211.12 L1817.56 1211.12 L1816.97 1211.12 L1816.39 1211.12 L1815.8 1211.12 L1815.21 1211.12 L1814.63 1211.12 L1814.04 1211.12 L1813.45 1211.12 L1812.87 1211.12 L1812.28 1211.12 L1811.69 1211.12 L1811.11 1211.12 L1810.52 1211.12 L1809.94 1211.12 L1809.35 1211.12 L1808.76 1211.12 L1808.18 1211.12 L1807.59 1211.12 L1807 1211.12 L1806.42 1211.12 L1805.83 1211.12 L1805.24 1211.12 L1804.66 1211.12 L1804.07 1211.12 L1803.48 1211.12 L1802.9 1211.12 L1802.31 1211.12 L1801.73 1211.12 L1801.14 1211.12 L1800.55 1211.12 L1799.97 1211.12 L1799.38 1211.12 L1798.79 1211.12 L1798.21 1211.12 L1797.62 1211.12 L1797.03 1211.12 L1796.45 1211.12 L1795.86 1211.12 L1795.27 1211.12 L1794.69 1211.12 L1794.1 1211.12 L1793.52 1211.12 L1792.93 1211.12 L1792.34 1211.12 L1791.76 1211.12 L1791.17 1211.12 L1790.58 1211.12 L1790 1211.12 L1789.41 1211.12 L1788.82 1211.12 L1788.24 1211.12 L1787.65 1211.12 L1787.06 1211.12 L1786.48 1211.12 L1785.89 1211.12 L1785.31 1211.12 L1784.72 1211.12 L1784.13 1211.12 L1783.55 1211.12 L1782.96 1211.12 L1782.37 1211.12 L1781.79 1211.12 L1781.2 1211.12 L1780.61 1211.12 L1780.03 1211.12 L1779.44 1211.12 L1778.86 1211.12 L1778.27 1211.12 L1777.68 1211.12 L1777.1 1211.12 L1776.51 1211.12 L1775.92 1211.12 L1775.34 1211.12 L1774.75 1211.12 L1774.16 1211.12 L1773.58 1211.12 L1772.99 1211.12 L1772.4 1211.12 L1771.82 1211.12 L1771.23 1211.12 L1770.65 1211.12 L1770.06 1211.12 L1769.47 1211.12 L1768.89 1211.12 L1768.3 1211.12 L1767.71 1211.12 L1767.13 1211.12 L1766.54 1211.12 L1765.95 1211.12 L1765.37 1211.12 L1764.78 1211.12 L1764.19 1211.12 L1763.61 1211.12 L1763.02 1211.12 L1762.44 1211.12 L1761.85 1211.12 L1761.26 1211.12 L1760.68 1211.12 L1760.09 1211.12 L1759.5 1211.12 L1758.92 1211.12 L1758.33 1211.12 L1757.74 1211.12 L1757.16 1211.12 L1756.57 1211.12 L1755.99 1211.12 L1755.4 1211.12 L1754.81 1211.12 L1754.23 1211.12 L1753.64 1211.12 L1753.05 1211.12 L1752.47 1211.12 L1751.88 1211.12 L1751.29 1211.12 L1750.71 1211.12 L1750.12 1211.12 L1749.53 1211.12 L1748.95 1211.12 L1748.36 1211.12 L1747.78 1211.12 L1747.19 1211.12 L1746.6 1211.12 L1746.02 1211.12 L1745.43 1211.12 L1744.84 1211.12 L1744.26 1211.12 L1743.67 1211.12 L1743.08 1211.12 L1742.5 1211.12 L1741.91 1211.12 L1741.32 1211.12 L1740.74 1211.12 L1740.15 1211.12 L1739.57 1211.12 L1738.98 1211.12 L1738.39 1211.12 L1737.81 1211.12 L1737.22 1211.12 L1736.63 1211.12 L1736.05 1211.12 L1735.46 1211.12 L1734.87 1211.12 L1734.29 1211.12 L1733.7 1211.12 L1733.11 1211.12 L1732.53 1211.12 L1731.94 1211.12 L1731.36 1211.12 L1730.77 1211.12 L1730.18 1211.12 L1729.6 1211.12 L1729.01 1211.12 L1728.42 1211.12 L1727.84 1211.12 L1727.25 1211.12 L1726.66 1211.12 L1726.08 1211.12 L1725.49 1211.12 L1724.91 1211.12 L1724.32 1211.12 L1723.73 1211.12 L1723.15 1211.12 L1722.56 1211.12 L1721.97 1211.12 L1721.39 1211.12 L1720.8 1211.12 L1720.21 1211.12 L1719.63 1211.12 L1719.04 1211.12 L1718.45 1211.12 L1717.87 1211.12 L1717.28 1211.12 L1716.7 1211.12 L1716.11 1211.12 L1715.52 1211.12 L1714.94 1211.12 L1714.35 1211.12 L1713.76 1211.12 L1713.18 1211.12 L1712.59 1211.12 L1712 1211.12 L1711.42 1211.12 L1710.83 1211.12 L1710.24 1211.12 L1709.66 1211.12 L1709.07 1211.12 L1708.49 1211.12 L1707.9 1211.12 L1707.31 1211.12 L1706.73 1211.12 L1706.14 1211.12 L1705.55 1211.12 L1704.97 1211.12 L1704.38 1211.12 L1703.79 1211.12 L1703.21 1211.12 L1702.62 1211.12 L1702.04 1211.12 L1701.45 1211.12 L1700.86 1211.12 L1700.28 1211.12 L1699.69 1211.12 L1699.1 1211.12 L1698.52 1211.12 L1697.93 1211.12 L1697.34 1211.12 L1696.76 1211.12 L1696.17 1211.12 L1695.58 1211.12 L1695 1211.12 L1694.41 1211.12 L1693.83 1211.12 L1693.24 1211.12 L1692.65 1211.12 L1692.07 1211.12 L1691.48 1211.12 L1690.89 1211.12 L1690.31 1211.12 L1689.72 1211.12 L1689.13 1211.12 L1688.55 1211.12 L1687.96 1211.12 L1687.37 1211.12 L1686.79 1211.12 L1686.2 1211.12 L1685.62 1211.12 L1685.03 1211.12 L1684.44 1211.12 L1683.86 1211.12 L1683.27 1211.12 L1682.68 1211.12 L1682.1 1211.12 L1681.51 1211.12 L1680.92 1211.12 L1680.34 1211.12 L1679.75 1211.12 L1679.17 1211.12 L1678.58 1211.12 L1677.99 1211.12 L1677.41 1211.12 L1676.82 1211.12 L1676.23 1211.12 L1675.65 1211.12 L1675.06 1211.12 L1674.47 1211.12 L1673.89 1211.12 L1673.3 1211.12 L1672.71 1211.12 L1672.13 1211.12 L1671.54 1211.12 L1670.96 1211.12 L1670.37 1211.12 L1669.78 1211.12 L1669.2 1211.12 L1668.61 1211.12 L1668.02 1211.12 L1667.44 1211.12 L1666.85 1211.12 L1666.26 1211.12 L1665.68 1211.12 L1665.09 1211.12 L1664.5 1211.12 L1663.92 1211.12 L1663.33 1211.12 L1662.75 1211.12 L1662.16 1211.12 L1661.57 1211.12 L1660.99 1211.12 L1660.4 1211.12 L1659.81 1211.12 L1659.23 1211.12 L1658.64 1211.12 L1658.05 1211.12 L1657.47 1211.12 L1656.88 1211.12 L1656.29 1211.12 L1655.71 1211.12 L1655.12 1211.12 L1654.54 1211.12 L1653.95 1211.12 L1653.36 1211.12 L1652.78 1211.12 L1652.19 1211.12 L1651.6 1211.12 L1651.02 1211.12 L1650.43 1211.12 L1649.84 1211.12 L1649.26 1211.12 L1648.67 1211.12 L1648.09 1211.12 L1647.5 1211.12 L1646.91 1211.12 L1646.33 1211.12 L1645.74 1211.12 L1645.15 1211.12 L1644.57 1211.12 L1643.98 1211.12 L1643.39 1211.12 L1642.81 1211.12 L1642.22 1211.12 L1641.63 1211.12 L1641.05 1211.12 L1640.46 1211.12 L1639.88 1211.12 L1639.29 1211.12 L1638.7 1211.12 L1638.12 1211.12 L1637.53 1211.12 L1636.94 1211.12 L1636.36 1211.12 L1635.77 1211.12 L1635.18 1211.12 L1634.6 1211.12 L1634.01 1211.12 L1633.42 1211.12 L1632.84 1211.12 L1632.25 1211.12 L1631.67 1211.12 L1631.08 1211.12 L1630.49 1211.12 L1629.91 1211.12 L1629.32 1211.12 L1628.73 1211.12 L1628.15 1211.12 L1627.56 1211.12 L1626.97 1211.12 L1626.39 1211.12 L1625.8 1211.12 L1625.22 1211.12 L1624.63 1211.12 L1624.04 1211.12 L1623.46 1211.12 L1622.87 1211.12 L1622.28 1211.12 L1621.7 1211.12 L1621.11 1211.12 L1620.52 1211.12 L1619.94 1211.12 L1619.35 1211.12 L1618.76 1211.12 L1618.18 1211.12 L1617.59 1211.12 L1617.01 1211.12 L1616.42 1211.12 L1615.83 1211.12 L1615.25 1211.12 L1614.66 1211.12 L1614.07 1211.12 L1613.49 1211.12 L1612.9 1211.12 L1612.31 1211.12 L1611.73 1211.12 L1611.14 1211.12 L1610.55 1211.12 L1609.97 1211.12 L1609.38 1211.12 L1608.8 1211.12 L1608.21 1211.12 L1607.62 1211.12 L1607.04 1211.12 L1606.45 1211.12 L1605.86 1211.12 L1605.28 1211.12 L1604.69 1211.12 L1604.1 1211.12 L1603.52 1211.12 L1602.93 1211.12 L1602.34 1211.12 L1601.76 1211.12 L1601.17 1211.12 L1600.59 1211.12 L1600 1211.12 L1599.41 1211.12 L1598.83 1211.12 L1598.24 1211.12 L1597.65 1211.12 L1597.07 1211.12 L1596.48 1211.12 L1595.89 1211.12 L1595.31 1211.12 L1594.72 1211.12 L1594.14 1211.12 L1593.55 1211.12 L1592.96 1211.12 L1592.38 1211.12 L1591.79 1211.12 L1591.2 1211.12 L1590.62 1211.12 L1590.03 1211.12 L1589.44 1211.12 L1588.86 1211.12 L1588.27 1211.12 L1587.68 1211.12 L1587.1 1211.12 L1586.51 1211.12 L1585.93 1211.12 L1585.34 1211.12 L1584.75 1211.12 L1584.17 1211.12 L1583.58 1211.12 L1582.99 1211.12 L1582.41 1211.12 L1581.82 1211.12 L1581.23 1211.12 L1580.65 1211.12 L1580.06 1211.12 L1579.47 1211.12 L1578.89 1211.12 L1578.3 1211.12 L1577.72 1211.12 L1577.13 1211.12 L1576.54 1211.12 L1575.96 1211.12 L1575.37 1211.12 L1574.78 1211.12 L1574.2 1211.12 L1573.61 1211.12 L1573.02 1211.12 L1572.44 1211.12 L1571.85 1211.12 L1571.27 1211.12 L1570.68 1211.12 L1570.09 1211.12 L1569.51 1211.12 L1568.92 1211.12 L1568.33 1211.12 L1567.75 1211.12 L1567.16 1211.12 L1566.57 1211.12 L1565.99 1211.12 L1565.4 1211.12 L1564.81 1211.12 L1564.23 1211.12 L1563.64 1211.12 L1563.06 1211.12 L1562.47 1211.12 L1561.88 1211.12 L1561.3 1211.12 L1560.71 1211.12 L1560.12 1211.12 L1559.54 1211.12 L1558.95 1211.12 L1558.36 1211.12 L1557.78 1211.12 L1557.19 1211.12 L1556.6 1211.12 L1556.02 1211.12 L1555.43 1211.12 L1554.85 1211.12 L1554.26 1211.12 L1553.67 1211.12 L1553.09 1211.12 L1552.5 1211.12 L1551.91 1211.12 L1551.33 1211.12 L1550.74 1211.12 L1550.15 1211.12 L1549.57 1211.12 L1548.98 1211.12 L1548.4 1211.12 L1547.81 1211.12 L1547.22 1211.12 L1546.64 1211.12 L1546.05 1211.12 L1545.46 1211.12 L1544.88 1211.12 L1544.29 1211.12 L1543.7 1211.12 L1543.12 1211.12 L1542.53 1211.12 L1541.94 1211.12 L1541.36 1211.12 L1540.77 1211.12 L1540.19 1211.12 L1539.6 1211.12 L1539.01 1211.12 L1538.43 1211.12 L1537.84 1211.12 L1537.25 1211.12 L1536.67 1211.12 L1536.08 1211.12 L1535.49 1211.12 L1534.91 1211.12 L1534.32 1211.12 L1533.73 1211.12 L1533.15 1211.12 L1532.56 1211.12 L1531.98 1211.12 L1531.39 1211.12 L1530.8 1211.12 L1530.22 1211.12 L1529.63 1211.12 L1529.04 1211.12 L1528.46 1211.12 L1527.87 1211.12 L1527.28 1211.12 L1526.7 1211.12 L1526.11 1211.12 L1525.52 1211.12 L1524.94 1211.12 L1524.35 1211.12 L1523.77 1211.12 L1523.18 1211.12 L1522.59 1211.12 L1522.01 1211.12 L1521.42 1211.12 L1520.83 1211.12 L1520.25 1211.12 L1519.66 1211.12 L1519.07 1211.12 L1518.49 1211.12 L1517.9 1211.12 L1517.32 1211.12 L1516.73 1211.12 L1516.14 1211.12 L1515.56 1211.12 L1514.97 1211.12 L1514.38 1211.12 L1513.8 1211.12 L1513.21 1211.12 L1512.62 1211.12 L1512.04 1211.12 L1511.45 1211.12 L1510.86 1211.12 L1510.28 1211.12 L1509.69 1211.12 L1509.11 1211.12 L1508.52 1211.12 L1507.93 1211.12 L1507.35 1211.12 L1506.76 1211.12 L1506.17 1211.12 L1505.59 1211.12 L1505 1211.12 L1504.41 1211.12 L1503.83 1211.12 L1503.24 1211.12 L1502.65 1211.12 L1502.07 1211.12 L1501.48 1211.12 L1500.9 1211.12 L1500.31 1211.12 L1499.72 1211.12 L1499.14 1211.12 L1498.55 1211.12 L1497.96 1211.12 L1497.38 1211.12 L1496.79 1211.12 L1496.2 1211.12 L1495.62 1211.12 L1495.03 1211.12 L1494.45 1211.12 L1493.86 1211.12 L1493.27 1211.12 L1492.69 1211.12 L1492.1 1211.12 L1491.51 1211.12 L1490.93 1211.12 L1490.34 1211.12 L1489.75 1211.12 L1489.17 1211.12 L1488.58 1211.12 L1487.99 1211.12 L1487.41 1211.12 L1486.82 1211.12 L1486.24 1211.12 L1485.65 1211.12 L1485.06 1211.12 L1484.48 1211.12 L1483.89 1211.12 L1483.3 1211.12 L1482.72 1211.12 L1482.13 1211.12 L1481.54 1211.12 L1480.96 1211.12 L1480.37 1211.12 L1479.78 1211.12 L1479.2 1211.12 L1478.61 1211.12 L1478.03 1211.12 L1477.44 1211.12 L1476.85 1211.12 L1476.27 1211.12 L1475.68 1211.12 L1475.09 1211.12 L1474.51 1211.12 L1473.92 1211.12 L1473.33 1211.12 L1472.75 1211.12 L1472.16 1211.12 L1471.57 1211.12 L1470.99 1211.12 L1470.4 1211.12 L1469.82 1211.12 L1469.23 1211.12 L1468.64 1211.12 L1468.06 1211.12 L1467.47 1211.12 L1466.88 1211.12 L1466.3 1211.12 L1465.71 1211.12 L1465.12 1211.12 L1464.54 1211.12 L1463.95 1211.12 L1463.37 1211.12 L1462.78 1211.12 L1462.19 1211.12 L1461.61 1211.12 L1461.02 1211.12 L1460.43 1211.12 L1459.85 1211.12 L1459.26 1211.12 L1458.67 1211.12 L1458.09 1211.12 L1457.5 1211.12 L1456.91 1211.12 L1456.33 1211.12 L1455.74 1211.12 L1455.16 1211.12 L1454.57 1211.12 L1453.98 1211.12 L1453.4 1211.12 L1452.81 1211.12 L1452.22 1211.12 L1451.64 1211.12 L1451.05 1211.12 L1450.46 1211.12 L1449.88 1211.12 L1449.29 1211.12 L1448.7 1211.12 L1448.12 1211.12 L1447.53 1211.12 L1446.95 1211.12 L1446.36 1211.12 L1445.77 1211.12 L1445.19 1211.12 L1444.6 1211.12 L1444.01 1211.12 L1443.43 1211.12 L1442.84 1211.12 L1442.25 1211.12 L1441.67 1211.12 L1441.08 1211.12 L1440.5 1211.12 L1439.91 1211.12 L1439.32 1211.12 L1438.74 1211.12 L1438.15 1211.12 L1437.56 1211.12 L1436.98 1211.12 L1436.39 1211.12 L1435.8 1211.12 L1435.22 1211.12 L1434.63 1211.12 L1434.04 1211.12 L1433.46 1211.12 L1432.87 1211.12 L1432.29 1211.12 L1431.7 1211.12 L1431.11 1211.12 L1430.53 1211.12 L1429.94 1211.12 L1429.35 1211.12 L1428.77 1211.12 L1428.18 1211.12 L1427.59 1211.12 L1427.01 1211.12 L1426.42 1211.12 L1425.83 1211.12 L1425.25 1211.12 L1424.66 1211.12 L1424.08 1211.12 L1423.49 1211.12 L1422.9 1211.12 L1422.32 1211.12 L1421.73 1211.12 L1421.14 1211.12 L1420.56 1211.12 L1419.97 1211.12 L1419.38 1211.12 L1418.8 1211.12 L1418.21 1211.12 L1417.63 1211.12 L1417.04 1211.12 L1416.45 1211.12 L1415.87 1211.12 L1415.28 1211.12 L1414.69 1211.12 L1414.11 1211.12 L1413.52 1211.12 L1412.93 1211.12 L1412.35 1211.12 L1411.76 1211.12 L1411.17 1211.12 L1410.59 1211.12 L1410 1211.12 L1409.42 1211.12 L1408.83 1211.12 L1408.24 1211.12 L1407.66 1211.12 L1407.07 1211.12 L1406.48 1211.12 L1405.9 1211.12 L1405.31 1211.12 L1404.72 1211.12 L1404.14 1211.12 L1403.55 1211.12 L1402.96 1211.12 L1402.38 1211.12 L1401.79 1211.12 L1401.21 1211.12 L1400.62 1211.12 L1400.03 1211.12 L1399.45 1211.12 L1398.86 1211.12 L1398.27 1211.12 L1397.69 1211.12 L1397.1 1211.12 L1396.51 1211.12 L1395.93 1211.12 L1395.34 1211.12 L1394.75 1211.12 L1394.17 1211.12 L1393.58 1211.12 L1393 1211.12 L1392.41 1211.12 L1391.82 1211.12 L1391.24 1211.12 L1390.65 1211.12 L1390.06 1211.12 L1389.48 1211.12 L1388.89 1211.12 L1388.3 1211.12 L1387.72 1211.12 L1387.13 1211.12 L1386.55 1211.12 L1385.96 1211.12 L1385.37 1211.12 L1384.79 1211.12 L1384.2 1211.12 L1383.61 1211.12 L1383.03 1211.12 L1382.44 1211.12 L1381.85 1211.12 L1381.27 1211.12 L1380.68 1211.12 L1380.09 1211.12 L1379.51 1211.12 L1378.92 1211.12 L1378.34 1211.12 L1377.75 1211.12 L1377.16 1211.12 L1376.58 1211.12 L1375.99 1211.12 L1375.4 1211.12 L1374.82 1211.12 L1374.23 1211.12 L1373.64 1211.12 L1373.06 1211.12 L1372.47 1211.12 L1371.88 1211.12 L1371.3 1211.12 L1370.71 1211.12 L1370.13 1211.12 L1369.54 1211.12 L1368.95 1211.12 L1368.37 1211.12 L1367.78 1211.12 L1367.19 1211.12 L1366.61 1211.12 L1366.02 1211.12 L1365.43 1211.12 L1364.85 1211.12 L1364.26 1211.12 L1363.68 1211.12 L1363.09 1211.12 L1362.5 1211.12 L1361.92 1211.12 L1361.33 1211.12 L1360.74 1211.12 L1360.16 1211.12 L1359.57 1211.12 L1358.98 1211.12 L1358.4 1211.12 L1357.81 1211.12 L1357.22 1211.12 L1356.64 1211.12 L1356.05 1211.12 L1355.47 1211.12 L1354.88 1211.12 L1354.29 1211.12 L1353.71 1211.12 L1353.12 1211.12 L1352.53 1211.12 L1351.95 1211.12 L1351.36 1211.12 L1350.77 1211.12 L1350.19 1211.12 L1349.6 1211.12 L1349.01 1211.12 L1348.43 1211.12 L1347.84 1211.12 L1347.26 1211.12 L1346.67 1211.12 L1346.08 1211.12 L1345.5 1211.12 L1344.91 1211.12 L1344.32 1211.12 L1343.74 1211.12 L1343.15 1211.12 L1342.56 1211.12 L1341.98 1211.12 L1341.39 1211.12 L1340.8 1211.12 L1340.22 1211.12 L1339.63 1211.12 L1339.05 1211.12 L1338.46 1211.12 L1337.87 1211.12 L1337.29 1211.12 L1336.7 1211.12 L1336.11 1211.12 L1335.53 1211.12 L1334.94 1211.12 L1334.35 1211.12 L1333.77 1211.12 L1333.18 1211.12 L1332.6 1211.12 L1332.01 1211.12 L1331.42 1211.12 L1330.84 1211.12 L1330.25 1211.12 L1329.66 1211.12 L1329.08 1211.12 L1328.49 1211.12 L1327.9 1211.12 L1327.32 1211.12 L1326.73 1211.12 L1326.14 1211.12 L1325.56 1211.12 L1324.97 1211.12 L1324.39 1211.12 L1323.8 1211.12 L1323.21 1211.12 L1322.63 1211.12 L1322.04 1211.12 L1321.45 1211.12 L1320.87 1211.12 L1320.28 1211.12 L1319.69 1211.12 L1319.11 1211.12 L1318.52 1211.12 L1317.93 1211.12 L1317.35 1211.12 L1316.76 1211.12 L1316.18 1211.12 L1315.59 1211.12 L1315 1211.12 L1314.42 1211.12 L1313.83 1211.12 L1313.24 1211.12 L1312.66 1211.12 L1312.07 1211.12 L1311.48 1211.12 L1310.9 1211.12 L1310.31 1211.12 L1309.73 1211.12 L1309.14 1211.12 L1308.55 1211.12 L1307.97 1211.12 L1307.38 1211.12 L1306.79 1211.12 L1306.21 1211.12 L1305.62 1211.12 L1305.03 1211.12 L1304.45 1211.12 L1303.86 1211.12 L1303.27 1211.12 L1302.69 1211.12 L1302.1 1211.12 L1301.52 1211.12 L1300.93 1211.12 L1300.34 1211.12 L1299.76 1211.12 L1299.17 1211.12 L1298.58 1211.12 L1298 1211.12 L1297.41 1211.12 L1296.82 1211.12 L1296.24 1211.12 L1295.65 1211.12 L1295.06 1211.12 L1294.48 1211.12 L1293.89 1211.12 L1293.31 1211.12 L1292.72 1211.12 L1292.13 1211.12 L1291.55 1211.12 L1290.96 1211.12 L1290.37 1211.12 L1289.79 1211.12 L1289.2 1211.12 L1288.61 1211.12 L1288.03 1211.12 L1287.44 1211.12 L1286.86 1211.12 L1286.27 1211.12 L1285.68 1211.12 L1285.1 1211.12 L1284.51 1211.12 L1283.92 1211.12 L1283.34 1211.12 L1282.75 1211.12 L1282.16 1211.12 L1281.58 1211.12 L1280.99 1211.12 L1280.4 1211.12 L1279.82 1211.12 L1279.23 1211.12 L1278.65 1211.12 L1278.06 1211.12 L1277.47 1211.12 L1276.89 1211.12 L1276.3 1211.12 L1275.71 1211.12 L1275.13 1211.12 L1274.54 1211.12 L1273.95 1211.12 L1273.37 1211.12 L1272.78 1211.12 L1272.19 1211.12 L1271.61 1211.12 L1271.02 1211.12 L1270.44 1211.12 L1269.85 1211.12 L1269.26 1211.12 L1268.68 1211.12 L1268.09 1211.12 L1267.5 1211.12 L1266.92 1211.12 L1266.33 1211.12 L1265.74 1211.12 L1265.16 1211.12 L1264.57 1211.12 L1263.98 1211.12 L1263.4 1211.12 L1262.81 1211.12 L1262.23 1211.12 L1261.64 1211.12 L1261.05 1211.12 L1260.47 1211.12 L1259.88 1211.12 L1259.29 1211.12 L1258.71 1211.12 L1258.12 1211.12 L1257.53 1211.12 L1256.95 1211.12 L1256.36 1211.12 L1255.78 1211.12 L1255.19 1211.12 L1254.6 1211.12 L1254.02 1211.12 L1253.43 1211.12 L1252.84 1211.12 L1252.26 1211.12 L1251.67 1211.12 L1251.08 1211.12 L1250.5 1211.12 L1249.91 1211.12 L1249.32 1211.12 L1248.74 1211.12 L1248.15 1211.12 L1247.57 1211.12 L1246.98 1211.12 L1246.39 1211.12 L1245.81 1211.12 L1245.22 1211.12 L1244.63 1211.12 L1244.05 1211.12 L1243.46 1211.12 L1242.87 1211.12 L1242.29 1211.12 L1241.7 1211.12 L1241.11 1211.12 L1240.53 1211.12 L1239.94 1211.12 L1239.36 1211.12 L1238.77 1211.12 L1238.18 1211.12 L1237.6 1211.12 L1237.01 1211.12 L1236.42 1211.12 L1235.84 1211.12 L1235.25 1211.12 L1234.66 1211.12 L1234.08 1211.12 L1233.49 1211.12 L1232.91 1211.12 L1232.32 1211.12 L1231.73 1211.12 L1231.15 1211.12 L1230.56 1211.12 L1229.97 1211.12 L1229.39 1211.12 L1228.8 1211.12 L1228.21 1211.12 L1227.63 1211.12 L1227.04 1211.12 L1226.45 1211.12 L1225.87 1211.12 L1225.28 1211.12 L1224.7 1211.12 L1224.11 1211.12 L1223.52 1211.12 L1222.94 1211.12 L1222.35 1211.12 L1221.76 1211.12 L1221.18 1211.12 L1220.59 1211.12 L1220 1211.12 L1219.42 1211.12 L1218.83 1211.12 L1218.24 1211.12 L1217.66 1211.12 L1217.07 1211.12 L1216.49 1211.12 L1215.9 1211.12 L1215.31 1211.12 L1214.73 1211.12 L1214.14 1211.12 L1213.55 1211.12 L1212.97 1211.12 L1212.38 1211.12 L1211.79 1211.12 L1211.21 1211.12 L1210.62 1211.12 L1210.03 1211.12 L1209.45 1211.12 L1208.86 1211.12 L1208.28 1211.12 L1207.69 1211.12 L1207.1 1211.12 L1206.52 1211.12 L1205.93 1211.12 L1205.34 1211.12 L1204.76 1211.12 L1204.17 1211.12 L1203.58 1211.12 L1203 1211.12 L1202.41 1211.12 L1201.83 1211.12 L1201.24 1211.12 L1200.65 1211.12 L1200.07 1211.12 L1199.48 1211.12 L1198.89 1211.12 L1198.31 1211.12 L1197.72 1211.12 L1197.13 1211.12 L1196.55 1211.12 L1195.96 1211.12 L1195.37 1211.12 L1194.79 1211.12 L1194.2 1211.12 L1193.62 1211.12 L1193.03 1211.12 L1192.44 1211.12 L1191.86 1211.12 L1191.27 1211.12 L1190.68 1211.12 L1190.1 1211.12 L1189.51 1211.12 L1188.92 1211.12 L1188.34 1211.12 L1187.75 1211.12 L1187.16 1211.12 L1186.58 1211.12 L1185.99 1211.12 L1185.41 1211.12 L1184.82 1211.12 L1184.23 1211.12 L1183.65 1211.12 L1183.06 1211.12 L1182.47 1211.12 L1181.89 1211.12 L1181.3 1211.12 L1180.71 1211.12 L1180.13 1211.12 L1179.54 1211.12 L1178.96 1211.12 L1178.37 1211.12 L1177.78 1211.12 L1177.2 1211.12 L1176.61 1211.12 L1176.02 1211.12 L1175.44 1211.12 L1174.85 1211.12 L1174.26 1211.12 L1173.68 1211.12 L1173.09 1211.12 L1172.5 1211.12 L1171.92 1211.12 L1171.33 1211.12 L1170.75 1211.12 L1170.16 1211.12 L1169.57 1211.12 L1168.99 1211.12 L1168.4 1211.12 L1167.81 1211.12 L1167.23 1211.12 L1166.64 1211.12 L1166.05 1211.12 L1165.47 1211.12 L1164.88 1211.12 L1164.29 1211.12 L1163.71 1211.12 L1163.12 1211.12 L1162.54 1211.12 L1161.95 1211.12 L1161.36 1211.12 L1160.78 1211.12 L1160.19 1211.12 L1159.6 1211.12 L1159.02 1211.12 L1158.43 1211.12 L1157.84 1211.12 L1157.26 1211.12 L1156.67 1211.12 L1156.09 1211.12 L1155.5 1211.12 L1154.91 1211.12 L1154.33 1211.12 L1153.74 1211.12 L1153.15 1211.12 L1152.57 1211.12 L1151.98 1211.12 L1151.39 1211.12 L1150.81 1211.12 L1150.22 1211.12 L1149.63 1211.12 L1149.05 1211.12 L1148.46 1211.12 L1147.88 1211.12 L1147.29 1211.12 L1146.7 1211.12 L1146.12 1211.12 L1145.53 1211.12 L1144.94 1211.12 L1144.36 1211.12 L1143.77 1211.12 L1143.18 1211.12 L1142.6 1211.12 L1142.01 1211.12 L1141.42 1211.12 L1140.84 1211.12 L1140.25 1211.12 L1139.67 1211.12 L1139.08 1211.12 L1138.49 1211.12 L1137.91 1211.12 L1137.32 1211.12 L1136.73 1211.12 L1136.15 1211.12 L1135.56 1211.12 L1134.97 1211.12 L1134.39 1211.12 L1133.8 1211.12 L1133.21 1211.12 L1132.63 1211.12 L1132.04 1211.12 L1131.46 1211.12 L1130.87 1211.12 L1130.28 1211.12 L1129.7 1211.12 L1129.11 1211.12 L1128.52 1211.12 L1127.94 1211.12 L1127.35 1211.12 L1126.76 1211.12 L1126.18 1211.12 L1125.59 1211.12 L1125.01 1211.12 L1124.42 1211.12 L1123.83 1211.12 L1123.25 1211.12 L1122.66 1211.12 L1122.07 1211.12 L1121.49 1211.12 L1120.9 1211.12 L1120.31 1211.12 L1119.73 1211.12 L1119.14 1211.12 L1118.55 1211.12 L1117.97 1211.12 L1117.38 1211.12 L1116.8 1211.12 L1116.21 1211.12 L1115.62 1211.12 L1115.04 1211.12 L1114.45 1211.12 L1113.86 1211.12 L1113.28 1211.12 L1112.69 1211.12 L1112.1 1211.12 L1111.52 1211.12 L1110.93 1211.12 L1110.34 1211.12 L1109.76 1211.12 L1109.17 1211.12 L1108.59 1211.12 L1108 1211.12 L1107.41 1211.12 L1106.83 1211.12 L1106.24 1211.12 L1105.65 1211.12 L1105.07 1211.12 L1104.48 1211.12 L1103.89 1211.12 L1103.31 1211.12 L1102.72 1211.12 L1102.14 1211.12 L1101.55 1211.12 L1100.96 1211.12 L1100.38 1211.12 L1099.79 1211.12 L1099.2 1211.12 L1098.62 1211.12 L1098.03 1211.12 L1097.44 1211.12 L1096.86 1211.12 L1096.27 1211.12 L1095.68 1211.12 L1095.1 1211.12 L1094.51 1211.12 L1093.93 1211.12 L1093.34 1211.12 L1092.75 1211.12 L1092.17 1211.12 L1091.58 1211.12 L1090.99 1211.12 L1090.41 1211.12 L1089.82 1211.12 L1089.23 1211.12 L1088.65 1211.12 L1088.06 1211.12 L1087.47 1211.12 L1086.89 1211.12 L1086.3 1211.12 L1085.72 1211.12 L1085.13 1211.12 L1084.54 1211.12 L1083.96 1211.12 L1083.37 1211.12 L1082.78 1211.12 L1082.2 1211.12 L1081.61 1211.12 L1081.02 1211.12 L1080.44 1211.12 L1079.85 1211.12 L1079.26 1211.12 L1078.68 1211.12 L1078.09 1211.12 L1077.51 1211.12 L1076.92 1211.12 L1076.33 1211.12 L1075.75 1211.12 L1075.16 1211.12 L1074.57 1211.12 L1073.99 1211.12 L1073.4 1211.12 L1072.81 1211.12 L1072.23 1211.12 L1071.64 1211.12 L1071.06 1211.12 L1070.47 1211.12 L1069.88 1211.12 L1069.3 1211.12 L1068.71 1211.12 L1068.12 1211.12 L1067.54 1211.12 L1066.95 1211.12 L1066.36 1211.12 L1065.78 1211.12 L1065.19 1211.12 L1064.6 1211.12 L1064.02 1211.12 L1063.43 1211.12 L1062.85 1211.12 L1062.26 1211.12 L1061.67 1211.12 L1061.09 1211.12 L1060.5 1211.12 L1059.91 1211.12 L1059.33 1211.12 L1058.74 1211.12 L1058.15 1211.12 L1057.57 1211.12 L1056.98 1211.12 L1056.39 1211.12 L1055.81 1211.12 L1055.22 1211.12 L1054.64 1211.12 L1054.05 1211.12 L1053.46 1211.12 L1052.88 1211.12 L1052.29 1211.12 L1051.7 1211.12 L1051.12 1211.12 L1050.53 1211.12 L1049.94 1211.12 L1049.36 1211.12 L1048.77 1211.12 L1048.19 1211.12 L1047.6 1211.12 L1047.01 1211.12 L1046.43 1211.12 L1045.84 1211.12 L1045.25 1211.12 L1044.67 1211.12 L1044.08 1211.12 L1043.49 1211.12 L1042.91 1211.12 L1042.32 1211.12 L1041.73 1211.12 L1041.15 1211.12 L1040.56 1211.12 L1039.98 1211.12 L1039.39 1211.12 L1038.8 1211.12 L1038.22 1211.12 L1037.63 1211.12 L1037.04 1211.12 L1036.46 1211.12 L1035.87 1211.12 L1035.28 1211.12 L1034.7 1211.12 L1034.11 1211.12 L1033.52 1211.12 L1032.94 1211.12 L1032.35 1211.12 L1031.77 1211.12 L1031.18 1211.12 L1030.59 1211.12 L1030.01 1211.12 L1029.42 1211.12 L1028.83 1211.12 L1028.25 1211.12 L1027.66 1211.12 L1027.07 1211.12 L1026.49 1211.12 L1025.9 1211.12 L1025.32 1211.12 L1024.73 1211.12 L1024.14 1211.12 L1023.56 1211.12 L1022.97 1211.12 L1022.38 1211.12 L1021.8 1211.12 L1021.21 1211.12 L1020.62 1211.12 L1020.04 1211.12 L1019.45 1211.12 L1018.86 1211.12 L1018.28 1211.12 L1017.69 1211.12 L1017.11 1211.12 L1016.52 1211.12 L1015.93 1211.12 L1015.35 1211.12 L1014.76 1211.12 L1014.17 1211.12 L1013.59 1211.12 L1013 1211.12 L1012.41 1211.12 L1011.83 1211.12 L1011.24 1211.12 L1010.65 1211.12 L1010.07 1211.12 L1009.48 1211.12 L1008.9 1211.12 L1008.31 1211.12 L1007.72 1211.12 L1007.14 1211.12 L1006.55 1211.12 L1005.96 1211.12 L1005.38 1211.12 L1004.79 1211.12 L1004.2 1211.12 L1003.62 1211.12 L1003.03 1211.12 L1002.44 1211.12 L1001.86 1211.12 L1001.27 1211.12 L1000.69 1211.12 L1000.1 1211.12 L999.513 1211.12 L998.926 1211.12 L998.34 1211.12 L997.754 1211.12 L997.167 1211.12 L996.581 1211.12 L995.994 1211.12 L995.408 1211.12 L994.822 1211.12 L994.235 1211.12 L993.649 1211.12 L993.062 1211.12 L992.476 1211.12 L991.889 1211.12 L991.303 1211.12 L990.717 1211.12 L990.13 1211.12 L989.544 1211.12 L988.957 1211.12 L988.371 1211.12 L987.785 1211.12 L987.198 1211.12 L986.612 1211.12 L986.025 1211.12  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.52 986.612,1211.52 987.198,1211.52 987.785,1211.52 988.371,1211.52 988.957,1211.52 989.544,1211.52 990.13,1211.52 990.717,1211.52 991.303,1211.52 991.889,1211.52 992.476,1211.52 993.062,1211.52 993.649,1211.52 994.235,1211.52 994.822,1211.52 995.408,1211.52 995.994,1211.52 996.581,1211.52 997.167,1211.52 997.754,1211.52 998.34,1211.52 998.926,1211.52 999.513,1211.52 1000.1,1211.52 1000.69,1211.52 1001.27,1211.52 1001.86,1211.52 1002.44,1211.52 1003.03,1211.52 1003.62,1211.52 1004.2,1211.52 1004.79,1211.52 1005.38,1211.52 1005.96,1211.52 1006.55,1211.52 1007.14,1211.52 1007.72,1211.52 1008.31,1211.52 1008.9,1211.52 1009.48,1211.52 1010.07,1211.52 1010.65,1211.52 1011.24,1211.52 1011.83,1211.52 1012.41,1211.52 1013,1211.52 1013.59,1211.52 1014.17,1211.52 1014.76,1211.52 1015.35,1211.52 1015.93,1211.52 1016.52,1211.52 1017.11,1211.52 1017.69,1211.52 1018.28,1211.52 1018.86,1211.52 1019.45,1211.52 1020.04,1211.52 1020.62,1211.52 1021.21,1211.52 1021.8,1211.52 1022.38,1211.52 1022.97,1211.52 1023.56,1211.52 1024.14,1211.52 1024.73,1211.52 1025.32,1211.52 1025.9,1211.52 1026.49,1211.52 1027.07,1211.52 1027.66,1211.52 1028.25,1211.52 1028.83,1211.52 1029.42,1211.52 1030.01,1211.52 1030.59,1211.52 1031.18,1211.52 1031.77,1211.52 1032.35,1211.52 1032.94,1211.52 1033.52,1211.52 1034.11,1211.52 1034.7,1211.52 1035.28,1211.52 1035.87,1211.52 1036.46,1211.52 1037.04,1211.52 1037.63,1211.52 1038.22,1211.52 1038.8,1211.52 1039.39,1211.52 1039.98,1211.52 1040.56,1211.52 1041.15,1211.52 1041.73,1211.52 1042.32,1211.52 1042.91,1211.52 1043.49,1211.52 1044.08,1211.52 1044.67,1211.52 1045.25,1211.52 1045.84,1211.52 1046.43,1211.52 1047.01,1211.52 1047.6,1211.52 1048.19,1211.52 1048.77,1211.52 1049.36,1211.52 1049.94,1211.52 1050.53,1211.52 1051.12,1211.52 1051.7,1211.52 1052.29,1211.52 1052.88,1211.52 1053.46,1211.52 1054.05,1211.52 1054.64,1211.52 1055.22,1211.52 1055.81,1211.52 1056.39,1211.52 1056.98,1211.52 1057.57,1211.52 1058.15,1211.52 1058.74,1211.52 1059.33,1211.52 1059.91,1211.52 1060.5,1211.52 1061.09,1211.52 1061.67,1211.52 1062.26,1211.52 1062.85,1211.52 1063.43,1211.52 1064.02,1211.52 1064.6,1211.52 1065.19,1211.52 1065.78,1211.52 1066.36,1211.52 1066.95,1211.52 1067.54,1211.52 1068.12,1211.52 1068.71,1211.52 1069.3,1211.52 1069.88,1211.52 1070.47,1211.52 1071.06,1211.52 1071.64,1211.52 1072.23,1211.52 1072.81,1211.52 1073.4,1211.52 1073.99,1211.52 1074.57,1211.52 1075.16,1211.52 1075.75,1211.52 1076.33,1211.52 1076.92,1211.52 1077.51,1211.52 1078.09,1211.52 1078.68,1211.52 1079.26,1211.52 1079.85,1211.52 1080.44,1211.52 1081.02,1211.52 1081.61,1211.52 1082.2,1211.52 1082.78,1211.52 1083.37,1211.52 1083.96,1211.52 1084.54,1211.52 1085.13,1211.52 1085.72,1211.52 1086.3,1211.52 1086.89,1211.52 1087.47,1211.52 1088.06,1211.52 1088.65,1211.52 1089.23,1211.52 1089.82,1211.52 1090.41,1211.52 1090.99,1211.52 1091.58,1211.52 1092.17,1211.52 1092.75,1211.52 1093.34,1211.52 1093.93,1211.52 1094.51,1211.52 1095.1,1211.52 1095.68,1211.52 1096.27,1211.52 1096.86,1211.52 1097.44,1211.52 1098.03,1211.52 1098.62,1211.52 1099.2,1211.52 1099.79,1211.52 1100.38,1211.52 1100.96,1211.52 1101.55,1211.52 1102.14,1211.52 1102.72,1211.52 1103.31,1211.52 1103.89,1211.52 1104.48,1211.52 1105.07,1211.52 1105.65,1211.52 1106.24,1211.52 1106.83,1211.52 1107.41,1211.52 1108,1211.52 1108.59,1211.52 1109.17,1211.52 1109.76,1211.52 1110.34,1211.52 1110.93,1211.52 1111.52,1211.52 1112.1,1211.52 1112.69,1211.52 1113.28,1211.52 1113.86,1211.52 1114.45,1211.52 1115.04,1211.52 1115.62,1211.52 1116.21,1211.52 1116.8,1211.52 1117.38,1211.52 1117.97,1211.52 1118.55,1211.52 1119.14,1211.52 1119.73,1211.52 1120.31,1211.52 1120.9,1211.52 1121.49,1211.52 1122.07,1211.52 1122.66,1211.52 1123.25,1211.52 1123.83,1211.52 1124.42,1211.52 1125.01,1211.52 1125.59,1211.52 1126.18,1211.52 1126.76,1211.52 1127.35,1211.52 1127.94,1211.52 1128.52,1211.52 1129.11,1211.52 1129.7,1211.52 1130.28,1211.52 1130.87,1211.52 1131.46,1211.52 1132.04,1211.52 1132.63,1211.52 1133.21,1211.52 1133.8,1211.52 1134.39,1211.52 1134.97,1211.52 1135.56,1211.52 1136.15,1211.52 1136.73,1211.52 1137.32,1211.52 1137.91,1211.52 1138.49,1211.52 1139.08,1211.52 1139.67,1211.52 1140.25,1211.52 1140.84,1211.52 1141.42,1211.52 1142.01,1211.52 1142.6,1211.52 1143.18,1211.52 1143.77,1211.52 1144.36,1211.52 1144.94,1211.52 1145.53,1211.52 1146.12,1211.52 1146.7,1211.52 1147.29,1211.52 1147.88,1211.52 1148.46,1211.52 1149.05,1211.52 1149.63,1211.52 1150.22,1211.52 1150.81,1211.52 1151.39,1211.52 1151.98,1211.52 1152.57,1211.52 1153.15,1211.52 1153.74,1211.52 1154.33,1211.52 1154.91,1211.52 1155.5,1211.52 1156.09,1211.52 1156.67,1211.52 1157.26,1211.52 1157.84,1211.52 1158.43,1211.52 1159.02,1211.52 1159.6,1211.52 1160.19,1211.52 1160.78,1211.52 1161.36,1211.52 1161.95,1211.52 1162.54,1211.52 1163.12,1211.52 1163.71,1211.52 1164.29,1211.52 1164.88,1211.52 1165.47,1211.52 1166.05,1211.52 1166.64,1211.52 1167.23,1211.52 1167.81,1211.52 1168.4,1211.52 1168.99,1211.52 1169.57,1211.52 1170.16,1211.52 1170.75,1211.52 1171.33,1211.52 1171.92,1211.52 1172.5,1211.52 1173.09,1211.52 1173.68,1211.52 1174.26,1211.52 1174.85,1211.52 1175.44,1211.52 1176.02,1211.52 1176.61,1211.52 1177.2,1211.52 1177.78,1211.52 1178.37,1211.52 1178.96,1211.52 1179.54,1211.52 1180.13,1211.52 1180.71,1211.52 1181.3,1211.52 1181.89,1211.52 1182.47,1211.52 1183.06,1211.52 1183.65,1211.52 1184.23,1211.52 1184.82,1211.52 1185.41,1211.52 1185.99,1211.52 1186.58,1211.52 1187.16,1211.52 1187.75,1211.52 1188.34,1211.52 1188.92,1211.52 1189.51,1211.52 1190.1,1211.52 1190.68,1211.52 1191.27,1211.52 1191.86,1211.52 1192.44,1211.52 1193.03,1211.52 1193.62,1211.52 1194.2,1211.52 1194.79,1211.52 1195.37,1211.52 1195.96,1211.52 1196.55,1211.52 1197.13,1211.52 1197.72,1211.52 1198.31,1211.52 1198.89,1211.52 1199.48,1211.52 1200.07,1211.52 1200.65,1211.52 1201.24,1211.52 1201.83,1211.52 1202.41,1211.52 1203,1211.52 1203.58,1211.52 1204.17,1211.52 1204.76,1211.52 1205.34,1211.52 1205.93,1211.52 1206.52,1211.52 1207.1,1211.52 1207.69,1211.52 1208.28,1211.52 1208.86,1211.52 1209.45,1211.52 1210.03,1211.52 1210.62,1211.52 1211.21,1211.52 1211.79,1211.52 1212.38,1211.52 1212.97,1211.52 1213.55,1211.52 1214.14,1211.52 1214.73,1211.52 1215.31,1211.52 1215.9,1211.52 1216.49,1211.52 1217.07,1211.52 1217.66,1211.52 1218.24,1211.52 1218.83,1211.52 1219.42,1211.52 1220,1211.52 1220.59,1211.52 1221.18,1211.52 1221.76,1211.52 1222.35,1211.52 1222.94,1211.52 1223.52,1211.52 1224.11,1211.52 1224.7,1211.52 1225.28,1211.52 1225.87,1211.52 1226.45,1211.52 1227.04,1211.52 1227.63,1211.52 1228.21,1211.52 1228.8,1211.52 1229.39,1211.52 1229.97,1211.52 1230.56,1211.52 1231.15,1211.52 1231.73,1211.52 1232.32,1211.52 1232.91,1211.52 1233.49,1211.52 1234.08,1211.52 1234.66,1211.52 1235.25,1211.52 1235.84,1211.52 1236.42,1211.52 1237.01,1211.52 1237.6,1211.52 1238.18,1211.52 1238.77,1211.52 1239.36,1211.52 1239.94,1211.52 1240.53,1211.52 1241.11,1211.52 1241.7,1211.52 1242.29,1211.52 1242.87,1211.52 1243.46,1211.52 1244.05,1211.52 1244.63,1211.52 1245.22,1211.52 1245.81,1211.52 1246.39,1211.52 1246.98,1211.52 1247.57,1211.52 1248.15,1211.52 1248.74,1211.52 1249.32,1211.52 1249.91,1211.52 1250.5,1211.52 1251.08,1211.52 1251.67,1211.52 1252.26,1211.52 1252.84,1211.52 1253.43,1211.52 1254.02,1211.52 1254.6,1211.52 1255.19,1211.52 1255.78,1211.52 1256.36,1211.52 1256.95,1211.52 1257.53,1211.52 1258.12,1211.52 1258.71,1211.52 1259.29,1211.52 1259.88,1211.52 1260.47,1211.52 1261.05,1211.52 1261.64,1211.52 1262.23,1211.52 1262.81,1211.52 1263.4,1211.52 1263.98,1211.52 1264.57,1211.52 1265.16,1211.52 1265.74,1211.52 1266.33,1211.52 1266.92,1211.52 1267.5,1211.52 1268.09,1211.52 1268.68,1211.52 1269.26,1211.52 1269.85,1211.52 1270.44,1211.52 1271.02,1211.52 1271.61,1211.52 1272.19,1211.52 1272.78,1211.52 1273.37,1211.52 1273.95,1211.52 1274.54,1211.52 1275.13,1211.52 1275.71,1211.52 1276.3,1211.52 1276.89,1211.52 1277.47,1211.52 1278.06,1211.52 1278.65,1211.52 1279.23,1211.52 1279.82,1211.52 1280.4,1211.52 1280.99,1211.52 1281.58,1211.52 1282.16,1211.52 1282.75,1211.52 1283.34,1211.52 1283.92,1211.52 1284.51,1211.52 1285.1,1211.52 1285.68,1211.52 1286.27,1211.52 1286.86,1211.52 1287.44,1211.52 1288.03,1211.52 1288.61,1211.52 1289.2,1211.52 1289.79,1211.52 1290.37,1211.52 1290.96,1211.52 1291.55,1211.52 1292.13,1211.52 1292.72,1211.52 1293.31,1211.52 1293.89,1211.52 1294.48,1211.52 1295.06,1211.52 1295.65,1211.52 1296.24,1211.52 1296.82,1211.52 1297.41,1211.52 1298,1211.52 1298.58,1211.52 1299.17,1211.52 1299.76,1211.52 1300.34,1211.52 1300.93,1211.52 1301.52,1211.52 1302.1,1211.52 1302.69,1211.52 1303.27,1211.52 1303.86,1211.52 1304.45,1211.52 1305.03,1211.52 1305.62,1211.52 1306.21,1211.52 1306.79,1211.52 1307.38,1211.52 1307.97,1211.52 1308.55,1211.52 1309.14,1211.52 1309.73,1211.52 1310.31,1211.52 1310.9,1211.52 1311.48,1211.52 1312.07,1211.52 1312.66,1211.52 1313.24,1211.52 1313.83,1211.52 1314.42,1211.52 1315,1211.52 1315.59,1211.52 1316.18,1211.52 1316.76,1211.52 1317.35,1211.52 1317.93,1211.52 1318.52,1211.52 1319.11,1211.52 1319.69,1211.52 1320.28,1211.52 1320.87,1211.52 1321.45,1211.52 1322.04,1211.52 1322.63,1211.52 1323.21,1211.52 1323.8,1211.52 1324.39,1211.52 1324.97,1211.52 1325.56,1211.52 1326.14,1211.52 1326.73,1211.52 1327.32,1211.52 1327.9,1211.52 1328.49,1211.52 1329.08,1211.52 1329.66,1211.52 1330.25,1211.52 1330.84,1211.52 1331.42,1211.52 1332.01,1211.52 1332.6,1211.52 1333.18,1211.52 1333.77,1211.52 1334.35,1211.52 1334.94,1211.52 1335.53,1211.52 1336.11,1211.52 1336.7,1211.52 1337.29,1211.52 1337.87,1211.52 1338.46,1211.52 1339.05,1211.52 1339.63,1211.52 1340.22,1211.52 1340.8,1211.52 1341.39,1211.52 1341.98,1211.52 1342.56,1211.52 1343.15,1211.52 1343.74,1211.52 1344.32,1211.52 1344.91,1211.52 1345.5,1211.52 1346.08,1211.52 1346.67,1211.52 1347.26,1211.52 1347.84,1211.52 1348.43,1211.52 1349.01,1211.52 1349.6,1211.52 1350.19,1211.52 1350.77,1211.52 1351.36,1211.52 1351.95,1211.52 1352.53,1211.52 1353.12,1211.52 1353.71,1211.52 1354.29,1211.52 1354.88,1211.52 1355.47,1211.52 1356.05,1211.52 1356.64,1211.52 1357.22,1211.52 1357.81,1211.52 1358.4,1211.52 1358.98,1211.52 1359.57,1211.52 1360.16,1211.52 1360.74,1211.52 1361.33,1211.52 1361.92,1211.52 1362.5,1211.52 1363.09,1211.52 1363.68,1211.52 1364.26,1211.52 1364.85,1211.52 1365.43,1211.52 1366.02,1211.52 1366.61,1211.52 1367.19,1211.52 1367.78,1211.52 1368.37,1211.52 1368.95,1211.52 1369.54,1211.52 1370.13,1211.52 1370.71,1211.52 1371.3,1211.52 1371.88,1211.52 1372.47,1211.52 1373.06,1211.52 1373.64,1211.52 1374.23,1211.52 1374.82,1211.52 1375.4,1211.52 1375.99,1211.52 1376.58,1211.52 1377.16,1211.52 1377.75,1211.52 1378.34,1211.52 1378.92,1211.52 1379.51,1211.52 1380.09,1211.52 1380.68,1211.52 1381.27,1211.52 1381.85,1211.52 1382.44,1211.52 1383.03,1211.52 1383.61,1211.52 1384.2,1211.52 1384.79,1211.52 1385.37,1211.52 1385.96,1211.52 1386.55,1211.52 1387.13,1211.52 1387.72,1211.52 1388.3,1211.52 1388.89,1211.52 1389.48,1211.52 1390.06,1211.52 1390.65,1211.52 1391.24,1211.52 1391.82,1211.52 1392.41,1211.52 1393,1211.52 1393.58,1211.52 1394.17,1211.52 1394.75,1211.52 1395.34,1211.52 1395.93,1211.52 1396.51,1211.52 1397.1,1211.52 1397.69,1211.52 1398.27,1211.52 1398.86,1211.52 1399.45,1211.52 1400.03,1211.52 1400.62,1211.52 1401.21,1211.52 1401.79,1211.52 1402.38,1211.52 1402.96,1211.52 1403.55,1211.52 1404.14,1211.52 1404.72,1211.52 1405.31,1211.52 1405.9,1211.52 1406.48,1211.52 1407.07,1211.52 1407.66,1211.52 1408.24,1211.52 1408.83,1211.52 1409.42,1211.52 1410,1211.52 1410.59,1211.52 1411.17,1211.52 1411.76,1211.52 1412.35,1211.52 1412.93,1211.52 1413.52,1211.52 1414.11,1211.52 1414.69,1211.52 1415.28,1211.52 1415.87,1211.52 1416.45,1211.52 1417.04,1211.52 1417.63,1211.52 1418.21,1211.52 1418.8,1211.52 1419.38,1211.52 1419.97,1211.52 1420.56,1211.52 1421.14,1211.52 1421.73,1211.52 1422.32,1211.52 1422.9,1211.52 1423.49,1211.52 1424.08,1211.52 1424.66,1211.52 1425.25,1211.52 1425.83,1211.52 1426.42,1211.52 1427.01,1211.52 1427.59,1211.52 1428.18,1211.52 1428.77,1211.52 1429.35,1211.52 1429.94,1211.52 1430.53,1211.52 1431.11,1211.52 1431.7,1211.52 1432.29,1211.52 1432.87,1211.52 1433.46,1211.52 1434.04,1211.52 1434.63,1211.52 1435.22,1211.52 1435.8,1211.52 1436.39,1211.52 1436.98,1211.52 1437.56,1211.52 1438.15,1211.52 1438.74,1211.52 1439.32,1211.52 1439.91,1211.52 1440.5,1211.52 1441.08,1211.52 1441.67,1211.52 1442.25,1211.52 1442.84,1211.52 1443.43,1211.52 1444.01,1211.52 1444.6,1211.52 1445.19,1211.52 1445.77,1211.52 1446.36,1211.52 1446.95,1211.52 1447.53,1211.52 1448.12,1211.52 1448.7,1211.52 1449.29,1211.52 1449.88,1211.52 1450.46,1211.52 1451.05,1211.52 1451.64,1211.52 1452.22,1211.52 1452.81,1211.52 1453.4,1211.52 1453.98,1211.52 1454.57,1211.52 1455.16,1211.52 1455.74,1211.52 1456.33,1211.52 1456.91,1211.52 1457.5,1211.52 1458.09,1211.52 1458.67,1211.52 1459.26,1211.52 1459.85,1211.52 1460.43,1211.52 1461.02,1211.52 1461.61,1211.52 1462.19,1211.52 1462.78,1211.52 1463.37,1211.52 1463.95,1211.52 1464.54,1211.52 1465.12,1211.52 1465.71,1211.52 1466.3,1211.52 1466.88,1211.52 1467.47,1211.52 1468.06,1211.52 1468.64,1211.52 1469.23,1211.52 1469.82,1211.52 1470.4,1211.52 1470.99,1211.52 1471.57,1211.52 1472.16,1211.52 1472.75,1211.52 1473.33,1211.52 1473.92,1211.52 1474.51,1211.52 1475.09,1211.52 1475.68,1211.52 1476.27,1211.52 1476.85,1211.52 1477.44,1211.52 1478.03,1211.52 1478.61,1211.52 1479.2,1211.52 1479.78,1211.52 1480.37,1211.52 1480.96,1211.52 1481.54,1211.52 1482.13,1211.52 1482.72,1211.52 1483.3,1211.52 1483.89,1211.52 1484.48,1211.52 1485.06,1211.52 1485.65,1211.52 1486.24,1211.52 1486.82,1211.52 1487.41,1211.52 1487.99,1211.52 1488.58,1211.52 1489.17,1211.52 1489.75,1211.52 1490.34,1211.52 1490.93,1211.52 1491.51,1211.52 1492.1,1211.52 1492.69,1211.52 1493.27,1211.52 1493.86,1211.52 1494.45,1211.52 1495.03,1211.52 1495.62,1211.52 1496.2,1211.52 1496.79,1211.52 1497.38,1211.52 1497.96,1211.52 1498.55,1211.52 1499.14,1211.52 1499.72,1211.52 1500.31,1211.52 1500.9,1211.52 1501.48,1211.52 1502.07,1211.52 1502.65,1211.52 1503.24,1211.52 1503.83,1211.52 1504.41,1211.52 1505,1211.52 1505.59,1211.52 1506.17,1211.52 1506.76,1211.52 1507.35,1211.52 1507.93,1211.52 1508.52,1211.52 1509.11,1211.52 1509.69,1211.52 1510.28,1211.52 1510.86,1211.52 1511.45,1211.52 1512.04,1211.52 1512.62,1211.52 1513.21,1211.52 1513.8,1211.52 1514.38,1211.52 1514.97,1211.52 1515.56,1211.52 1516.14,1211.52 1516.73,1211.52 1517.32,1211.52 1517.9,1211.52 1518.49,1211.52 1519.07,1211.52 1519.66,1211.52 1520.25,1211.52 1520.83,1211.52 1521.42,1211.52 1522.01,1211.52 1522.59,1211.52 1523.18,1211.52 1523.77,1211.52 1524.35,1211.52 1524.94,1211.52 1525.52,1211.52 1526.11,1211.52 1526.7,1211.52 1527.28,1211.52 1527.87,1211.52 1528.46,1211.52 1529.04,1211.52 1529.63,1211.52 1530.22,1211.52 1530.8,1211.52 1531.39,1211.52 1531.98,1211.52 1532.56,1211.52 1533.15,1211.52 1533.73,1211.52 1534.32,1211.52 1534.91,1211.52 1535.49,1211.52 1536.08,1211.52 1536.67,1211.52 1537.25,1211.52 1537.84,1211.52 1538.43,1211.52 1539.01,1211.52 1539.6,1211.52 1540.19,1211.52 1540.77,1211.52 1541.36,1211.52 1541.94,1211.52 1542.53,1211.52 1543.12,1211.52 1543.7,1211.52 1544.29,1211.52 1544.88,1211.52 1545.46,1211.52 1546.05,1211.52 1546.64,1211.52 1547.22,1211.52 1547.81,1211.52 1548.4,1211.52 1548.98,1211.52 1549.57,1211.52 1550.15,1211.52 1550.74,1211.52 1551.33,1211.52 1551.91,1211.52 1552.5,1211.52 1553.09,1211.52 1553.67,1211.52 1554.26,1211.52 1554.85,1211.52 1555.43,1211.52 1556.02,1211.52 1556.6,1211.52 1557.19,1211.52 1557.78,1211.52 1558.36,1211.52 1558.95,1211.52 1559.54,1211.52 1560.12,1211.52 1560.71,1211.52 1561.3,1211.52 1561.88,1211.52 1562.47,1211.52 1563.06,1211.52 1563.64,1211.52 1564.23,1211.52 1564.81,1211.52 1565.4,1211.52 1565.99,1211.52 1566.57,1211.52 1567.16,1211.52 1567.75,1211.52 1568.33,1211.52 1568.92,1211.52 1569.51,1211.52 1570.09,1211.52 1570.68,1211.52 1571.27,1211.52 1571.85,1211.52 1572.44,1211.52 1573.02,1211.52 1573.61,1211.52 1574.2,1211.52 1574.78,1211.52 1575.37,1211.52 1575.96,1211.52 1576.54,1211.52 1577.13,1211.52 1577.72,1211.52 1578.3,1211.52 1578.89,1211.52 1579.47,1211.52 1580.06,1211.52 1580.65,1211.52 1581.23,1211.52 1581.82,1211.52 1582.41,1211.52 1582.99,1211.52 1583.58,1211.52 1584.17,1211.52 1584.75,1211.52 1585.34,1211.52 1585.93,1211.52 1586.51,1211.52 1587.1,1211.52 1587.68,1211.52 1588.27,1211.52 1588.86,1211.52 1589.44,1211.52 1590.03,1211.52 1590.62,1211.52 1591.2,1211.52 1591.79,1211.52 1592.38,1211.52 1592.96,1211.52 1593.55,1211.52 1594.14,1211.52 1594.72,1211.52 1595.31,1211.52 1595.89,1211.52 1596.48,1211.52 1597.07,1211.52 1597.65,1211.52 1598.24,1211.52 1598.83,1211.52 1599.41,1211.52 1600,1211.52 1600.59,1211.52 1601.17,1211.52 1601.76,1211.52 1602.34,1211.52 1602.93,1211.52 1603.52,1211.52 1604.1,1211.52 1604.69,1211.52 1605.28,1211.52 1605.86,1211.52 1606.45,1211.52 1607.04,1211.52 1607.62,1211.52 1608.21,1211.52 1608.8,1211.52 1609.38,1211.52 1609.97,1211.52 1610.55,1211.52 1611.14,1211.52 1611.73,1211.52 1612.31,1211.52 1612.9,1211.52 1613.49,1211.52 1614.07,1211.52 1614.66,1211.52 1615.25,1211.52 1615.83,1211.52 1616.42,1211.52 1617.01,1211.52 1617.59,1211.52 1618.18,1211.52 1618.76,1211.52 1619.35,1211.52 1619.94,1211.52 1620.52,1211.52 1621.11,1211.52 1621.7,1211.52 1622.28,1211.52 1622.87,1211.52 1623.46,1211.52 1624.04,1211.52 1624.63,1211.52 1625.22,1211.52 1625.8,1211.52 1626.39,1211.52 1626.97,1211.52 1627.56,1211.52 1628.15,1211.52 1628.73,1211.52 1629.32,1211.52 1629.91,1211.52 1630.49,1211.52 1631.08,1211.52 1631.67,1211.52 1632.25,1211.52 1632.84,1211.52 1633.42,1211.52 1634.01,1211.52 1634.6,1211.52 1635.18,1211.52 1635.77,1211.52 1636.36,1211.52 1636.94,1211.52 1637.53,1211.52 1638.12,1211.52 1638.7,1211.52 1639.29,1211.52 1639.88,1211.52 1640.46,1211.52 1641.05,1211.52 1641.63,1211.52 1642.22,1211.52 1642.81,1211.52 1643.39,1211.52 1643.98,1211.52 1644.57,1211.52 1645.15,1211.52 1645.74,1211.52 1646.33,1211.52 1646.91,1211.52 1647.5,1211.52 1648.09,1211.52 1648.67,1211.52 1649.26,1211.52 1649.84,1211.52 1650.43,1211.52 1651.02,1211.52 1651.6,1211.52 1652.19,1211.52 1652.78,1211.52 1653.36,1211.52 1653.95,1211.52 1654.54,1211.52 1655.12,1211.52 1655.71,1211.52 1656.29,1211.52 1656.88,1211.52 1657.47,1211.52 1658.05,1211.52 1658.64,1211.52 1659.23,1211.52 1659.81,1211.52 1660.4,1211.52 1660.99,1211.52 1661.57,1211.52 1662.16,1211.52 1662.75,1211.52 1663.33,1211.52 1663.92,1211.52 1664.5,1211.52 1665.09,1211.52 1665.68,1211.52 1666.26,1211.52 1666.85,1211.52 1667.44,1211.52 1668.02,1211.52 1668.61,1211.52 1669.2,1211.52 1669.78,1211.52 1670.37,1211.52 1670.96,1211.52 1671.54,1211.52 1672.13,1211.52 1672.71,1211.52 1673.3,1211.52 1673.89,1211.52 1674.47,1211.52 1675.06,1211.52 1675.65,1211.52 1676.23,1211.52 1676.82,1211.52 1677.41,1211.52 1677.99,1211.52 1678.58,1211.52 1679.17,1211.52 1679.75,1211.52 1680.34,1211.52 1680.92,1211.52 1681.51,1211.52 1682.1,1211.52 1682.68,1211.52 1683.27,1211.52 1683.86,1211.52 1684.44,1211.52 1685.03,1211.52 1685.62,1211.52 1686.2,1211.52 1686.79,1211.52 1687.37,1211.52 1687.96,1211.52 1688.55,1211.52 1689.13,1211.52 1689.72,1211.52 1690.31,1211.52 1690.89,1211.52 1691.48,1211.52 1692.07,1211.52 1692.65,1211.52 1693.24,1211.52 1693.83,1211.52 1694.41,1211.52 1695,1211.52 1695.58,1211.52 1696.17,1211.52 1696.76,1211.52 1697.34,1211.52 1697.93,1211.52 1698.52,1211.52 1699.1,1211.52 1699.69,1211.52 1700.28,1211.52 1700.86,1211.52 1701.45,1211.52 1702.04,1211.52 1702.62,1211.52 1703.21,1211.52 1703.79,1211.52 1704.38,1211.52 1704.97,1211.52 1705.55,1211.52 1706.14,1211.52 1706.73,1211.52 1707.31,1211.52 1707.9,1211.52 1708.49,1211.52 1709.07,1211.52 1709.66,1211.52 1710.24,1211.52 1710.83,1211.52 1711.42,1211.52 1712,1211.52 1712.59,1211.52 1713.18,1211.52 1713.76,1211.52 1714.35,1211.52 1714.94,1211.52 1715.52,1211.52 1716.11,1211.52 1716.7,1211.52 1717.28,1211.52 1717.87,1211.52 1718.45,1211.52 1719.04,1211.52 1719.63,1211.52 1720.21,1211.52 1720.8,1211.52 1721.39,1211.52 1721.97,1211.52 1722.56,1211.52 1723.15,1211.52 1723.73,1211.52 1724.32,1211.52 1724.91,1211.52 1725.49,1211.52 1726.08,1211.52 1726.66,1211.52 1727.25,1211.52 1727.84,1211.52 1728.42,1211.52 1729.01,1211.52 1729.6,1211.52 1730.18,1211.52 1730.77,1211.52 1731.36,1211.52 1731.94,1211.52 1732.53,1211.52 1733.11,1211.52 1733.7,1211.52 1734.29,1211.52 1734.87,1211.52 1735.46,1211.52 1736.05,1211.52 1736.63,1211.52 1737.22,1211.52 1737.81,1211.52 1738.39,1211.52 1738.98,1211.52 1739.57,1211.52 1740.15,1211.52 1740.74,1211.52 1741.32,1211.52 1741.91,1211.52 1742.5,1211.52 1743.08,1211.52 1743.67,1211.52 1744.26,1211.52 1744.84,1211.52 1745.43,1211.52 1746.02,1211.52 1746.6,1211.52 1747.19,1211.52 1747.78,1211.52 1748.36,1211.52 1748.95,1211.52 1749.53,1211.52 1750.12,1211.52 1750.71,1211.52 1751.29,1211.52 1751.88,1211.52 1752.47,1211.52 1753.05,1211.52 1753.64,1211.52 1754.23,1211.52 1754.81,1211.52 1755.4,1211.52 1755.99,1211.52 1756.57,1211.52 1757.16,1211.52 1757.74,1211.52 1758.33,1211.52 1758.92,1211.52 1759.5,1211.52 1760.09,1211.52 1760.68,1211.52 1761.26,1211.52 1761.85,1211.52 1762.44,1211.52 1763.02,1211.52 1763.61,1211.52 1764.19,1211.52 1764.78,1211.52 1765.37,1211.52 1765.95,1211.52 1766.54,1211.52 1767.13,1211.52 1767.71,1211.52 1768.3,1211.52 1768.89,1211.52 1769.47,1211.52 1770.06,1211.52 1770.65,1211.52 1771.23,1211.52 1771.82,1211.52 1772.4,1211.52 1772.99,1211.52 1773.58,1211.52 1774.16,1211.52 1774.75,1211.52 1775.34,1211.52 1775.92,1211.52 1776.51,1211.52 1777.1,1211.52 1777.68,1211.52 1778.27,1211.52 1778.86,1211.52 1779.44,1211.52 1780.03,1211.52 1780.61,1211.52 1781.2,1211.52 1781.79,1211.52 1782.37,1211.52 1782.96,1211.52 1783.55,1211.52 1784.13,1211.52 1784.72,1211.52 1785.31,1211.52 1785.89,1211.52 1786.48,1211.52 1787.06,1211.52 1787.65,1211.52 1788.24,1211.52 1788.82,1211.52 1789.41,1211.52 1790,1211.52 1790.58,1211.52 1791.17,1211.52 1791.76,1211.52 1792.34,1211.52 1792.93,1211.52 1793.52,1211.52 1794.1,1211.52 1794.69,1211.52 1795.27,1211.52 1795.86,1211.52 1796.45,1211.52 1797.03,1211.52 1797.62,1211.52 1798.21,1211.52 1798.79,1211.52 1799.38,1211.52 1799.97,1211.52 1800.55,1211.52 1801.14,1211.52 1801.73,1211.52 1802.31,1211.52 1802.9,1211.52 1803.48,1211.52 1804.07,1211.52 1804.66,1211.52 1805.24,1211.52 1805.83,1211.52 1806.42,1211.52 1807,1211.52 1807.59,1211.52 1808.18,1211.52 1808.76,1211.52 1809.35,1211.52 1809.94,1211.52 1810.52,1211.52 1811.11,1211.52 1811.69,1211.52 1812.28,1211.52 1812.87,1211.52 1813.45,1211.52 1814.04,1211.52 1814.63,1211.52 1815.21,1211.52 1815.8,1211.52 1816.39,1211.52 1816.97,1211.52 1817.56,1211.52 1818.14,1211.52 1818.73,1211.52 1819.32,1211.52 1819.9,1211.52 1820.49,1211.52 1821.08,1211.52 1821.66,1211.52 1822.25,1211.52 1822.84,1211.52 1823.42,1211.52 1824.01,1211.52 1824.6,1211.52 1825.18,1211.52 1825.77,1211.52 1826.35,1211.52 1826.94,1211.52 1827.53,1211.52 1828.11,1211.52 1828.7,1211.52 1829.29,1211.52 1829.87,1211.52 1830.46,1211.52 1831.05,1211.52 1831.63,1211.52 1832.22,1211.52 1832.81,1211.52 1833.39,1211.52 1833.98,1211.52 1834.56,1211.52 1835.15,1211.52 1835.74,1211.52 1836.32,1211.52 1836.91,1211.52 1837.5,1211.52 1838.08,1211.52 1838.67,1211.52 1839.26,1211.52 1839.84,1211.52 1840.43,1211.52 1841.01,1211.52 1841.6,1211.52 1842.19,1211.52 1842.77,1211.52 1843.36,1211.52 1843.95,1211.52 1844.53,1211.52 1845.12,1211.52 1845.71,1211.52 1846.29,1211.52 1846.88,1211.52 1847.47,1211.52 1848.05,1211.52 1848.64,1211.52 1849.22,1211.52 1849.81,1211.52 1850.4,1211.52 1850.98,1211.52 1851.57,1211.52 1852.16,1211.52 1852.74,1211.52 1853.33,1211.52 1853.92,1211.52 1854.5,1211.52 1855.09,1211.52 1855.68,1211.52 1856.26,1211.52 1856.85,1211.52 1857.43,1211.52 1858.02,1211.52 1858.61,1211.52 1859.19,1211.52 1859.78,1211.52 1860.37,1211.52 1860.95,1211.52 1861.54,1211.52 1862.13,1211.52 1862.71,1211.52 1863.3,1211.52 1863.88,1211.52 1864.47,1211.52 1865.06,1211.52 1865.64,1211.52 1866.23,1211.52 1866.82,1211.52 1867.4,1211.52 1867.99,1211.52 1868.58,1211.52 1869.16,1211.52 1869.75,1211.52 1870.34,1211.52 1870.92,1211.52 1871.51,1211.52 1872.09,1211.52 1872.68,1211.52 1873.27,1211.52 1873.85,1211.52 1874.44,1211.52 1875.03,1211.52 1875.61,1211.52 1876.2,1211.52 1876.79,1211.52 1877.37,1211.52 1877.96,1211.52 1878.55,1211.52 1879.13,1211.52 1879.72,1211.52 1880.3,1211.52 1880.89,1211.52 1881.48,1211.52 1882.06,1211.52 1882.65,1211.52 1883.24,1211.52 1883.82,1211.52 1884.41,1211.52 1885,1211.52 1885.58,1211.52 1886.17,1211.52 1886.76,1211.52 1887.34,1211.52 1887.93,1211.52 1888.51,1211.52 1889.1,1211.52 1889.69,1211.52 1890.27,1211.52 1890.86,1211.52 1891.45,1211.52 1892.03,1211.52 1892.62,1211.52 1893.21,1211.52 1893.79,1211.52 1894.38,1211.52 1894.96,1211.52 1895.55,1211.52 1896.14,1211.52 1896.72,1211.52 1897.31,1211.52 1897.9,1211.52 1898.48,1211.52 1899.07,1211.52 1899.66,1211.52 1900.24,1211.52 1900.83,1211.52 1901.42,1211.52 1902,1211.52 1902.59,1211.52 1903.17,1211.52 1903.76,1211.52 1904.35,1211.52 1904.93,1211.52 1905.52,1211.52 1906.11,1211.52 1906.69,1211.52 1907.28,1211.52 1907.87,1211.52 1908.45,1211.52 1909.04,1211.52 1909.63,1211.52 1910.21,1211.52 1910.8,1211.52 1911.38,1211.52 1911.97,1211.52 1912.56,1211.52 1913.14,1211.52 1913.73,1211.52 1914.32,1211.52 1914.9,1211.52 1915.49,1211.52 1916.08,1211.52 1916.66,1211.52 1917.25,1211.52 1917.83,1211.52 1918.42,1211.52 1919.01,1211.52 1919.59,1211.52 1920.18,1211.52 1920.77,1211.52 1921.35,1211.52 1921.94,1211.52 1922.53,1211.52 1923.11,1211.52 1923.7,1211.52 1924.29,1211.52 1924.87,1211.52 1925.46,1211.52 1926.04,1211.52 1926.63,1211.52 1927.22,1211.52 1927.8,1211.52 1928.39,1211.52 1928.98,1211.52 1929.56,1211.52 1930.15,1211.52 1930.74,1211.52 1931.32,1211.52 1931.91,1211.52 1932.5,1211.52 1933.08,1211.52 1933.67,1211.52 1934.25,1211.52 1934.84,1211.52 1935.43,1211.52 1936.01,1211.52 1936.6,1211.52 1937.19,1211.52 1937.77,1211.52 1938.36,1211.52 1938.95,1211.52 1939.53,1211.52 1940.12,1211.52 1940.71,1211.52 1941.29,1211.52 1941.88,1211.52 1942.46,1211.52 1943.05,1211.52 1943.64,1211.52 1944.22,1211.52 1944.81,1211.52 1945.4,1211.52 1945.98,1211.52 1946.57,1211.52 1947.16,1211.52 1947.74,1211.52 1948.33,1211.52 1948.91,1211.52 1949.5,1211.52 1950.09,1211.52 1950.67,1211.52 1951.26,1211.52 1951.85,1211.52 1952.43,1211.52 1953.02,1211.52 1953.61,1211.52 1954.19,1211.52 1954.78,1211.52 1955.37,1211.52 1955.95,1211.52 1956.54,1211.52 1957.12,1211.52 1957.71,1211.52 1958.3,1211.52 1958.88,1211.52 1959.47,1211.52 1960.06,1211.52 1960.64,1211.52 1961.23,1211.52 1961.82,1211.52 1962.4,1211.52 1962.99,1211.52 1963.58,1211.52 1964.16,1211.52 1964.75,1211.52 1965.33,1211.52 1965.92,1211.52 1966.51,1211.52 1967.09,1211.52 1967.68,1211.52 1968.27,1211.52 1968.85,1211.52 1969.44,1211.52 1970.03,1211.52 1970.61,1211.52 1971.2,1211.52 1971.78,1211.52 1972.37,1211.52 1972.96,1211.52 1973.54,1211.52 1974.13,1211.52 1974.72,1211.52 1975.3,1211.52 1975.89,1211.52 1976.48,1211.52 1977.06,1211.52 1977.65,1211.52 1978.24,1211.52 1978.82,1211.52 1979.41,1211.52 1979.99,1211.52 1980.58,1211.52 1981.17,1211.52 1981.75,1211.52 1982.34,1211.52 1982.93,1211.52 1983.51,1211.52 1984.1,1211.52 1984.69,1211.52 1985.27,1211.52 1985.86,1211.52 1986.45,1211.52 1987.03,1211.52 1987.62,1211.52 1988.2,1211.52 1988.79,1211.52 1989.38,1211.52 1989.96,1211.52 1990.55,1211.52 1991.14,1211.52 1991.72,1211.52 1992.31,1211.52 1992.9,1211.52 1993.48,1211.52 1994.07,1211.52 1994.65,1211.52 1995.24,1211.52 1995.83,1211.52 1996.41,1211.52 1997,1211.52 1997.59,1211.52 1998.17,1211.52 1998.76,1211.52 1999.35,1211.52 1999.93,1211.52 2000.52,1211.52 2001.11,1211.52 2001.69,1211.52 2002.28,1211.52 2002.86,1211.52 2003.45,1211.52 2004.04,1211.52 2004.62,1211.52 2005.21,1211.52 2005.8,1211.52 2006.38,1211.52 2006.97,1211.52 2007.56,1211.52 2008.14,1211.52 2008.73,1211.52 2009.32,1211.52 2009.9,1211.52 2010.49,1211.52 2011.07,1211.52 2011.66,1211.52 2012.25,1211.52 2012.83,1211.52 2013.42,1211.52 2014.01,1211.52 2014.59,1211.52 2015.18,1211.52 2015.77,1211.52 2016.35,1211.52 2016.94,1211.52 2017.53,1211.52 2018.11,1211.52 2018.7,1211.52 2019.28,1211.52 2019.87,1211.52 2020.46,1211.52 2021.04,1211.52 2021.63,1211.52 2022.22,1211.52 2022.8,1211.52 2023.39,1211.52 2023.98,1211.52 2024.56,1211.52 2025.15,1211.52 2025.73,1211.52 2026.32,1211.52 2026.91,1211.52 2027.49,1211.52 2028.08,1211.52 2028.67,1211.52 2029.25,1211.52 2029.84,1211.52 2030.43,1211.52 2031.01,1211.52 2031.6,1211.52 2032.19,1211.52 2032.77,1211.52 2033.36,1211.52 2033.94,1211.52 2034.53,1211.52 2035.12,1211.52 2035.7,1211.52 2036.29,1211.52 2036.88,1211.52 2037.46,1211.52 2038.05,1211.52 2038.64,1211.52 2039.22,1211.52 2039.81,1211.52 2040.4,1211.52 2040.98,1211.52 2041.57,1211.52 2042.15,1211.52 2042.74,1211.52 2043.33,1211.52 2043.91,1211.52 2044.5,1211.52 2045.09,1211.52 2045.67,1211.52 2046.26,1211.52 2046.85,1211.52 2047.43,1211.52 2048.02,1211.52 2048.6,1211.52 2049.19,1211.52 2049.78,1211.52 2050.36,1211.52 2050.95,1211.52 2051.54,1211.52 2052.12,1211.52 2052.71,1211.52 2053.3,1211.52 2053.88,1211.52 2054.47,1211.52 2055.06,1211.52 2055.64,1211.52 2056.23,1211.52 2056.81,1211.52 2057.4,1211.52 2057.99,1211.52 2058.57,1211.52 2059.16,1211.52 2059.75,1211.52 2060.33,1211.52 2060.92,1211.52 2061.51,1211.52 2062.09,1211.52 2062.68,1211.52 2063.27,1211.52 2063.85,1211.52 2064.44,1211.52 2065.02,1211.52 2065.61,1211.52 2066.2,1211.52 2066.78,1211.52 2067.37,1211.52 2067.96,1211.52 2068.54,1211.52 2069.13,1211.52 2069.72,1211.52 2070.3,1211.52 2070.89,1211.52 2071.48,1211.52 2072.06,1211.52 2072.65,1211.52 2073.23,1211.52 2073.82,1211.52 2074.41,1211.52 2074.99,1211.52 2075.58,1211.52 2076.17,1211.52 2076.75,1211.52 2077.34,1211.52 2077.93,1211.52 2078.51,1211.52 2079.1,1211.52 2079.68,1211.52 2080.27,1211.52 2080.86,1211.52 2081.44,1211.52 2082.03,1211.52 2082.62,1211.52 2083.2,1211.52 2083.79,1211.52 2084.38,1211.52 2084.96,1211.52 2085.55,1211.52 2086.14,1211.52 2086.72,1211.52 2087.31,1211.52 2087.89,1211.52 2088.48,1211.52 2089.07,1211.52 2089.65,1211.52 2090.24,1211.52 2090.83,1211.52 2091.41,1211.52 2092,1211.52 2092.59,1211.52 2093.17,1211.52 2093.76,1211.52 2094.35,1211.52 2094.93,1211.52 2095.52,1211.52 2096.1,1211.52 2096.69,1211.52 2097.28,1211.52 2097.86,1211.52 2098.45,1211.52 2099.04,1211.52 2099.62,1211.52 2100.21,1211.52 2100.8,1211.52 2101.38,1211.52 2101.97,1211.52 2102.55,1211.52 2103.14,1211.52 2103.73,1211.52 2104.31,1211.52 2104.9,1211.52 2105.49,1211.52 2106.07,1211.52 2106.66,1211.52 2107.25,1211.52 2107.83,1211.52 2108.42,1211.52 2109.01,1211.52 2109.59,1211.52 2110.18,1211.52 2110.76,1211.52 2111.35,1211.52 2111.94,1211.52 2112.52,1211.52 2113.11,1211.52 2113.7,1211.52 2114.28,1211.52 2114.87,1211.52 2115.46,1211.52 2116.04,1211.52 2116.63,1211.52 2117.22,1211.52 2117.8,1211.52 2118.39,1211.52 2118.97,1211.52 2119.56,1211.52 2120.15,1211.52 2120.73,1211.52 2121.32,1211.52 2121.91,1211.52 2122.49,1211.52 2123.08,1211.52 2123.67,1211.52 2124.25,1211.52 2124.84,1211.52 2125.42,1211.52 2126.01,1211.52 2126.6,1211.52 2127.18,1211.52 2127.77,1211.52 2128.36,1211.52 2128.94,1211.52 2129.53,1211.52 2130.12,1211.52 2130.7,1211.52 2131.29,1211.52 2131.88,1211.52 2132.46,1211.52 2133.05,1211.52 2133.63,1211.52 2134.22,1211.52 2134.81,1211.52 2135.39,1211.52 2135.98,1211.52 2136.57,1211.52 2137.15,1211.52 2137.74,1211.52 2138.33,1211.52 2138.91,1211.52 2139.5,1211.52 2140.09,1211.52 2140.67,1211.52 2141.26,1211.52 2141.84,1211.52 2142.43,1211.52 2143.02,1211.52 2143.6,1211.52 2144.19,1211.52 2144.78,1211.52 2145.36,1211.52 2145.95,1211.52 2146.54,1211.52 2147.12,1211.52 2147.71,1211.52 2148.3,1211.52 2148.88,1211.52 2149.47,1211.52 2150.05,1211.52 2150.64,1211.52 2151.23,1211.52 2151.81,1211.52 2152.4,1211.52 2152.99,1211.52 2153.57,1211.52 2154.16,1211.52 2154.75,1211.52 2155.33,1211.52 2155.92,1211.52 2156.5,1211.52 2157.09,1211.52 2157.68,1211.52 2158.26,1211.52 \"/>\n<path clip-path=\"url(#clip702)\" d=\"M986.025 1211.4 L986.612 1211.4 L987.198 1211.4 L987.785 1211.4 L988.371 1211.4 L988.957 1211.4 L989.544 1211.4 L990.13 1211.4 L990.717 1211.4 L991.303 1211.4 L991.889 1211.4 L992.476 1211.4 L993.062 1211.4 L993.649 1211.4 L994.235 1211.4 L994.822 1211.4 L995.408 1211.4 L995.994 1211.4 L996.581 1211.4 L997.167 1211.4 L997.754 1211.4 L998.34 1211.4 L998.926 1211.4 L999.513 1211.4 L1000.1 1211.4 L1000.69 1211.4 L1001.27 1211.4 L1001.86 1211.4 L1002.44 1211.4 L1003.03 1211.4 L1003.62 1211.4 L1004.2 1211.4 L1004.79 1211.4 L1005.38 1211.4 L1005.96 1211.4 L1006.55 1211.4 L1007.14 1211.4 L1007.72 1211.4 L1008.31 1211.4 L1008.9 1211.4 L1009.48 1211.4 L1010.07 1211.4 L1010.65 1211.4 L1011.24 1211.4 L1011.83 1211.4 L1012.41 1211.4 L1013 1211.4 L1013.59 1211.4 L1014.17 1211.4 L1014.76 1211.4 L1015.35 1211.4 L1015.93 1211.4 L1016.52 1211.4 L1017.11 1211.4 L1017.69 1211.4 L1018.28 1211.4 L1018.86 1211.4 L1019.45 1211.4 L1020.04 1211.4 L1020.62 1211.4 L1021.21 1211.4 L1021.8 1211.4 L1022.38 1211.4 L1022.97 1211.4 L1023.56 1211.4 L1024.14 1211.4 L1024.73 1211.4 L1025.32 1211.4 L1025.9 1211.4 L1026.49 1211.4 L1027.07 1211.4 L1027.66 1211.4 L1028.25 1211.4 L1028.83 1211.4 L1029.42 1211.4 L1030.01 1211.4 L1030.59 1211.4 L1031.18 1211.4 L1031.77 1211.4 L1032.35 1211.4 L1032.94 1211.4 L1033.52 1211.4 L1034.11 1211.4 L1034.7 1211.4 L1035.28 1211.4 L1035.87 1211.4 L1036.46 1211.4 L1037.04 1211.4 L1037.63 1211.4 L1038.22 1211.4 L1038.8 1211.4 L1039.39 1211.4 L1039.98 1211.4 L1040.56 1211.4 L1041.15 1211.4 L1041.73 1211.4 L1042.32 1211.4 L1042.91 1211.4 L1043.49 1211.4 L1044.08 1211.4 L1044.67 1211.4 L1045.25 1211.4 L1045.84 1211.4 L1046.43 1211.4 L1047.01 1211.4 L1047.6 1211.4 L1048.19 1211.4 L1048.77 1211.4 L1049.36 1211.4 L1049.94 1211.4 L1050.53 1211.4 L1051.12 1211.4 L1051.7 1211.4 L1052.29 1211.4 L1052.88 1211.4 L1053.46 1211.4 L1054.05 1211.4 L1054.64 1211.4 L1055.22 1211.4 L1055.81 1211.4 L1056.39 1211.4 L1056.98 1211.4 L1057.57 1211.4 L1058.15 1211.4 L1058.74 1211.4 L1059.33 1211.4 L1059.91 1211.4 L1060.5 1211.4 L1061.09 1211.4 L1061.67 1211.4 L1062.26 1211.4 L1062.85 1211.4 L1063.43 1211.4 L1064.02 1211.4 L1064.6 1211.4 L1065.19 1211.4 L1065.78 1211.4 L1066.36 1211.4 L1066.95 1211.4 L1067.54 1211.4 L1068.12 1211.4 L1068.71 1211.4 L1069.3 1211.4 L1069.88 1211.4 L1070.47 1211.4 L1071.06 1211.4 L1071.64 1211.4 L1072.23 1211.4 L1072.81 1211.4 L1073.4 1211.4 L1073.99 1211.4 L1074.57 1211.4 L1075.16 1211.4 L1075.75 1211.4 L1076.33 1211.4 L1076.92 1211.4 L1077.51 1211.4 L1078.09 1211.4 L1078.68 1211.4 L1079.26 1211.4 L1079.85 1211.4 L1080.44 1211.4 L1081.02 1211.4 L1081.61 1211.4 L1082.2 1211.4 L1082.78 1211.4 L1083.37 1211.4 L1083.96 1211.4 L1084.54 1211.4 L1085.13 1211.4 L1085.72 1211.4 L1086.3 1211.4 L1086.89 1211.4 L1087.47 1211.4 L1088.06 1211.4 L1088.65 1211.4 L1089.23 1211.4 L1089.82 1211.4 L1090.41 1211.4 L1090.99 1211.4 L1091.58 1211.4 L1092.17 1211.4 L1092.75 1211.4 L1093.34 1211.4 L1093.93 1211.4 L1094.51 1211.4 L1095.1 1211.4 L1095.68 1211.4 L1096.27 1211.4 L1096.86 1211.4 L1097.44 1211.4 L1098.03 1211.4 L1098.62 1211.4 L1099.2 1211.4 L1099.79 1211.4 L1100.38 1211.4 L1100.96 1211.4 L1101.55 1211.4 L1102.14 1211.4 L1102.72 1211.4 L1103.31 1211.4 L1103.89 1211.4 L1104.48 1211.4 L1105.07 1211.4 L1105.65 1211.4 L1106.24 1211.4 L1106.83 1211.4 L1107.41 1211.4 L1108 1211.4 L1108.59 1211.4 L1109.17 1211.4 L1109.76 1211.4 L1110.34 1211.4 L1110.93 1211.4 L1111.52 1211.4 L1112.1 1211.4 L1112.69 1211.4 L1113.28 1211.4 L1113.86 1211.4 L1114.45 1211.4 L1115.04 1211.4 L1115.62 1211.4 L1116.21 1211.4 L1116.8 1211.4 L1117.38 1211.4 L1117.97 1211.4 L1118.55 1211.4 L1119.14 1211.4 L1119.73 1211.4 L1120.31 1211.4 L1120.9 1211.4 L1121.49 1211.4 L1122.07 1211.4 L1122.66 1211.4 L1123.25 1211.4 L1123.83 1211.4 L1124.42 1211.4 L1125.01 1211.4 L1125.59 1211.4 L1126.18 1211.4 L1126.76 1211.4 L1127.35 1211.4 L1127.94 1211.4 L1128.52 1211.4 L1129.11 1211.4 L1129.7 1211.4 L1130.28 1211.4 L1130.87 1211.4 L1131.46 1211.4 L1132.04 1211.4 L1132.63 1211.4 L1133.21 1211.4 L1133.8 1211.4 L1134.39 1211.4 L1134.97 1211.4 L1135.56 1211.4 L1136.15 1211.4 L1136.73 1211.4 L1137.32 1211.4 L1137.91 1211.4 L1138.49 1211.4 L1139.08 1211.4 L1139.67 1211.4 L1140.25 1211.4 L1140.84 1211.4 L1141.42 1211.4 L1142.01 1211.4 L1142.6 1211.4 L1143.18 1211.4 L1143.77 1211.4 L1144.36 1211.4 L1144.94 1211.4 L1145.53 1211.4 L1146.12 1211.4 L1146.7 1211.4 L1147.29 1211.4 L1147.88 1211.4 L1148.46 1211.4 L1149.05 1211.4 L1149.63 1211.4 L1150.22 1211.4 L1150.81 1211.4 L1151.39 1211.4 L1151.98 1211.4 L1152.57 1211.4 L1153.15 1211.4 L1153.74 1211.4 L1154.33 1211.4 L1154.91 1211.4 L1155.5 1211.4 L1156.09 1211.4 L1156.67 1211.4 L1157.26 1211.4 L1157.84 1211.4 L1158.43 1211.4 L1159.02 1211.4 L1159.6 1211.4 L1160.19 1211.4 L1160.78 1211.4 L1161.36 1211.4 L1161.95 1211.4 L1162.54 1211.4 L1163.12 1211.4 L1163.71 1211.4 L1164.29 1211.4 L1164.88 1211.4 L1165.47 1211.4 L1166.05 1211.4 L1166.64 1211.4 L1167.23 1211.4 L1167.81 1211.4 L1168.4 1211.4 L1168.99 1211.4 L1169.57 1211.4 L1170.16 1211.4 L1170.75 1211.4 L1171.33 1211.4 L1171.92 1211.4 L1172.5 1211.4 L1173.09 1211.4 L1173.68 1211.4 L1174.26 1211.4 L1174.85 1211.4 L1175.44 1211.4 L1176.02 1211.4 L1176.61 1211.4 L1177.2 1211.4 L1177.78 1211.4 L1178.37 1211.4 L1178.96 1211.4 L1179.54 1211.4 L1180.13 1211.4 L1180.71 1211.4 L1181.3 1211.4 L1181.89 1211.4 L1182.47 1211.4 L1183.06 1211.4 L1183.65 1211.4 L1184.23 1211.4 L1184.82 1211.4 L1185.41 1211.4 L1185.99 1211.4 L1186.58 1211.4 L1187.16 1211.4 L1187.75 1211.4 L1188.34 1211.4 L1188.92 1211.4 L1189.51 1211.4 L1190.1 1211.4 L1190.68 1211.4 L1191.27 1211.4 L1191.86 1211.4 L1192.44 1211.4 L1193.03 1211.4 L1193.62 1211.4 L1194.2 1211.4 L1194.79 1211.4 L1195.37 1211.4 L1195.96 1211.4 L1196.55 1211.4 L1197.13 1211.4 L1197.72 1211.4 L1198.31 1211.4 L1198.89 1211.4 L1199.48 1211.4 L1200.07 1211.4 L1200.65 1211.4 L1201.24 1211.4 L1201.83 1211.4 L1202.41 1211.4 L1203 1211.4 L1203.58 1211.4 L1204.17 1211.4 L1204.76 1211.4 L1205.34 1211.4 L1205.93 1211.4 L1206.52 1211.4 L1207.1 1211.4 L1207.69 1211.4 L1208.28 1211.4 L1208.86 1211.4 L1209.45 1211.4 L1210.03 1211.4 L1210.62 1211.4 L1211.21 1211.4 L1211.79 1211.4 L1212.38 1211.4 L1212.97 1211.4 L1213.55 1211.4 L1214.14 1211.4 L1214.73 1211.4 L1215.31 1211.4 L1215.9 1211.4 L1216.49 1211.4 L1217.07 1211.4 L1217.66 1211.4 L1218.24 1211.4 L1218.83 1211.4 L1219.42 1211.4 L1220 1211.4 L1220.59 1211.4 L1221.18 1211.4 L1221.76 1211.4 L1222.35 1211.4 L1222.94 1211.4 L1223.52 1211.4 L1224.11 1211.4 L1224.7 1211.4 L1225.28 1211.4 L1225.87 1211.4 L1226.45 1211.4 L1227.04 1211.4 L1227.63 1211.4 L1228.21 1211.4 L1228.8 1211.4 L1229.39 1211.4 L1229.97 1211.4 L1230.56 1211.4 L1231.15 1211.4 L1231.73 1211.4 L1232.32 1211.4 L1232.91 1211.4 L1233.49 1211.4 L1234.08 1211.4 L1234.66 1211.4 L1235.25 1211.4 L1235.84 1211.4 L1236.42 1211.4 L1237.01 1211.4 L1237.6 1211.4 L1238.18 1211.4 L1238.77 1211.4 L1239.36 1211.4 L1239.94 1211.4 L1240.53 1211.4 L1241.11 1211.4 L1241.7 1211.4 L1242.29 1211.4 L1242.87 1211.4 L1243.46 1211.4 L1244.05 1211.4 L1244.63 1211.4 L1245.22 1211.4 L1245.81 1211.4 L1246.39 1211.4 L1246.98 1211.4 L1247.57 1211.4 L1248.15 1211.4 L1248.74 1211.4 L1249.32 1211.4 L1249.91 1211.4 L1250.5 1211.4 L1251.08 1211.4 L1251.67 1211.4 L1252.26 1211.4 L1252.84 1211.4 L1253.43 1211.4 L1254.02 1211.4 L1254.6 1211.4 L1255.19 1211.4 L1255.78 1211.4 L1256.36 1211.4 L1256.95 1211.4 L1257.53 1211.4 L1258.12 1211.4 L1258.71 1211.4 L1259.29 1211.4 L1259.88 1211.4 L1260.47 1211.4 L1261.05 1211.4 L1261.64 1211.4 L1262.23 1211.4 L1262.81 1211.4 L1263.4 1211.4 L1263.98 1211.4 L1264.57 1211.4 L1265.16 1211.4 L1265.74 1211.4 L1266.33 1211.4 L1266.92 1211.4 L1267.5 1211.4 L1268.09 1211.4 L1268.68 1211.4 L1269.26 1211.4 L1269.85 1211.4 L1270.44 1211.4 L1271.02 1211.4 L1271.61 1211.4 L1272.19 1211.4 L1272.78 1211.4 L1273.37 1211.4 L1273.95 1211.4 L1274.54 1211.4 L1275.13 1211.4 L1275.71 1211.4 L1276.3 1211.4 L1276.89 1211.4 L1277.47 1211.4 L1278.06 1211.4 L1278.65 1211.4 L1279.23 1211.4 L1279.82 1211.4 L1280.4 1211.4 L1280.99 1211.4 L1281.58 1211.4 L1282.16 1211.4 L1282.75 1211.4 L1283.34 1211.4 L1283.92 1211.4 L1284.51 1211.4 L1285.1 1211.4 L1285.68 1211.4 L1286.27 1211.4 L1286.86 1211.4 L1287.44 1211.4 L1288.03 1211.4 L1288.61 1211.4 L1289.2 1211.4 L1289.79 1211.4 L1290.37 1211.4 L1290.96 1211.4 L1291.55 1211.4 L1292.13 1211.4 L1292.72 1211.4 L1293.31 1211.4 L1293.89 1211.4 L1294.48 1211.4 L1295.06 1211.4 L1295.65 1211.4 L1296.24 1211.4 L1296.82 1211.4 L1297.41 1211.4 L1298 1211.4 L1298.58 1211.4 L1299.17 1211.4 L1299.76 1211.4 L1300.34 1211.4 L1300.93 1211.4 L1301.52 1211.4 L1302.1 1211.4 L1302.69 1211.4 L1303.27 1211.4 L1303.86 1211.4 L1304.45 1211.4 L1305.03 1211.4 L1305.62 1211.4 L1306.21 1211.4 L1306.79 1211.4 L1307.38 1211.4 L1307.97 1211.4 L1308.55 1211.4 L1309.14 1211.4 L1309.73 1211.4 L1310.31 1211.4 L1310.9 1211.4 L1311.48 1211.4 L1312.07 1211.4 L1312.66 1211.4 L1313.24 1211.4 L1313.83 1211.4 L1314.42 1211.4 L1315 1211.4 L1315.59 1211.4 L1316.18 1211.4 L1316.76 1211.4 L1317.35 1211.4 L1317.93 1211.4 L1318.52 1211.4 L1319.11 1211.4 L1319.69 1211.4 L1320.28 1211.4 L1320.87 1211.4 L1321.45 1211.4 L1322.04 1211.4 L1322.63 1211.4 L1323.21 1211.4 L1323.8 1211.4 L1324.39 1211.4 L1324.97 1211.4 L1325.56 1211.4 L1326.14 1211.4 L1326.73 1211.4 L1327.32 1211.4 L1327.9 1211.4 L1328.49 1211.4 L1329.08 1211.4 L1329.66 1211.4 L1330.25 1211.4 L1330.84 1211.4 L1331.42 1211.4 L1332.01 1211.4 L1332.6 1211.4 L1333.18 1211.4 L1333.77 1211.4 L1334.35 1211.4 L1334.94 1211.4 L1335.53 1211.4 L1336.11 1211.4 L1336.7 1211.4 L1337.29 1211.4 L1337.87 1211.4 L1338.46 1211.4 L1339.05 1211.4 L1339.63 1211.4 L1340.22 1211.4 L1340.8 1211.4 L1341.39 1211.4 L1341.98 1211.4 L1342.56 1211.4 L1343.15 1211.4 L1343.74 1211.4 L1344.32 1211.4 L1344.91 1211.4 L1345.5 1211.4 L1346.08 1211.4 L1346.67 1211.4 L1347.26 1211.4 L1347.84 1211.4 L1348.43 1211.4 L1349.01 1211.4 L1349.6 1211.4 L1350.19 1211.4 L1350.77 1211.4 L1351.36 1211.4 L1351.95 1211.4 L1352.53 1211.4 L1353.12 1211.4 L1353.71 1211.4 L1354.29 1211.4 L1354.88 1211.4 L1355.47 1211.4 L1356.05 1211.4 L1356.64 1211.4 L1357.22 1211.4 L1357.81 1211.4 L1358.4 1211.4 L1358.98 1211.4 L1359.57 1211.4 L1360.16 1211.4 L1360.74 1211.4 L1361.33 1211.4 L1361.92 1211.4 L1362.5 1211.4 L1363.09 1211.4 L1363.68 1211.4 L1364.26 1211.4 L1364.85 1211.4 L1365.43 1211.4 L1366.02 1211.4 L1366.61 1211.4 L1367.19 1211.4 L1367.78 1211.4 L1368.37 1211.4 L1368.95 1211.4 L1369.54 1211.4 L1370.13 1211.4 L1370.71 1211.4 L1371.3 1211.4 L1371.88 1211.4 L1372.47 1211.4 L1373.06 1211.4 L1373.64 1211.4 L1374.23 1211.4 L1374.82 1211.4 L1375.4 1211.4 L1375.99 1211.4 L1376.58 1211.4 L1377.16 1211.4 L1377.75 1211.4 L1378.34 1211.4 L1378.92 1211.4 L1379.51 1211.4 L1380.09 1211.4 L1380.68 1211.4 L1381.27 1211.4 L1381.85 1211.4 L1382.44 1211.4 L1383.03 1211.4 L1383.61 1211.4 L1384.2 1211.4 L1384.79 1211.4 L1385.37 1211.4 L1385.96 1211.4 L1386.55 1211.4 L1387.13 1211.4 L1387.72 1211.4 L1388.3 1211.4 L1388.89 1211.4 L1389.48 1211.4 L1390.06 1211.4 L1390.65 1211.4 L1391.24 1211.4 L1391.82 1211.4 L1392.41 1211.4 L1393 1211.4 L1393.58 1211.4 L1394.17 1211.4 L1394.75 1211.4 L1395.34 1211.4 L1395.93 1211.4 L1396.51 1211.4 L1397.1 1211.4 L1397.69 1211.4 L1398.27 1211.4 L1398.86 1211.4 L1399.45 1211.4 L1400.03 1211.4 L1400.62 1211.4 L1401.21 1211.4 L1401.79 1211.4 L1402.38 1211.4 L1402.96 1211.4 L1403.55 1211.4 L1404.14 1211.4 L1404.72 1211.4 L1405.31 1211.4 L1405.9 1211.4 L1406.48 1211.4 L1407.07 1211.4 L1407.66 1211.4 L1408.24 1211.4 L1408.83 1211.4 L1409.42 1211.4 L1410 1211.4 L1410.59 1211.4 L1411.17 1211.4 L1411.76 1211.4 L1412.35 1211.4 L1412.93 1211.4 L1413.52 1211.4 L1414.11 1211.4 L1414.69 1211.4 L1415.28 1211.4 L1415.87 1211.4 L1416.45 1211.4 L1417.04 1211.4 L1417.63 1211.4 L1418.21 1211.4 L1418.8 1211.4 L1419.38 1211.4 L1419.97 1211.4 L1420.56 1211.4 L1421.14 1211.4 L1421.73 1211.4 L1422.32 1211.4 L1422.9 1211.4 L1423.49 1211.4 L1424.08 1211.4 L1424.66 1211.4 L1425.25 1211.4 L1425.83 1211.4 L1426.42 1211.4 L1427.01 1211.4 L1427.59 1211.4 L1428.18 1211.4 L1428.77 1211.4 L1429.35 1211.4 L1429.94 1211.4 L1430.53 1211.4 L1431.11 1211.4 L1431.7 1211.4 L1432.29 1211.4 L1432.87 1211.4 L1433.46 1211.4 L1434.04 1211.4 L1434.63 1211.4 L1435.22 1211.4 L1435.8 1211.4 L1436.39 1211.4 L1436.98 1211.4 L1437.56 1211.4 L1438.15 1211.4 L1438.74 1211.4 L1439.32 1211.4 L1439.91 1211.4 L1440.5 1211.4 L1441.08 1211.4 L1441.67 1211.4 L1442.25 1211.4 L1442.84 1211.4 L1443.43 1211.4 L1444.01 1211.4 L1444.6 1211.4 L1445.19 1211.4 L1445.77 1211.4 L1446.36 1211.4 L1446.95 1211.4 L1447.53 1211.4 L1448.12 1211.4 L1448.7 1211.4 L1449.29 1211.4 L1449.88 1211.4 L1450.46 1211.4 L1451.05 1211.4 L1451.64 1211.4 L1452.22 1211.4 L1452.81 1211.4 L1453.4 1211.4 L1453.98 1211.4 L1454.57 1211.4 L1455.16 1211.4 L1455.74 1211.4 L1456.33 1211.4 L1456.91 1211.4 L1457.5 1211.4 L1458.09 1211.4 L1458.67 1211.4 L1459.26 1211.4 L1459.85 1211.4 L1460.43 1211.4 L1461.02 1211.4 L1461.61 1211.4 L1462.19 1211.4 L1462.78 1211.4 L1463.37 1211.4 L1463.95 1211.4 L1464.54 1211.4 L1465.12 1211.4 L1465.71 1211.4 L1466.3 1211.4 L1466.88 1211.4 L1467.47 1211.4 L1468.06 1211.4 L1468.64 1211.4 L1469.23 1211.4 L1469.82 1211.4 L1470.4 1211.4 L1470.99 1211.4 L1471.57 1211.4 L1472.16 1211.4 L1472.75 1211.4 L1473.33 1211.4 L1473.92 1211.4 L1474.51 1211.4 L1475.09 1211.4 L1475.68 1211.4 L1476.27 1211.4 L1476.85 1211.4 L1477.44 1211.4 L1478.03 1211.4 L1478.61 1211.4 L1479.2 1211.4 L1479.78 1211.4 L1480.37 1211.4 L1480.96 1211.4 L1481.54 1211.4 L1482.13 1211.4 L1482.72 1211.4 L1483.3 1211.4 L1483.89 1211.4 L1484.48 1211.4 L1485.06 1211.4 L1485.65 1211.4 L1486.24 1211.4 L1486.82 1211.4 L1487.41 1211.4 L1487.99 1211.4 L1488.58 1211.4 L1489.17 1211.4 L1489.75 1211.4 L1490.34 1211.4 L1490.93 1211.4 L1491.51 1211.4 L1492.1 1211.4 L1492.69 1211.4 L1493.27 1211.4 L1493.86 1211.4 L1494.45 1211.4 L1495.03 1211.4 L1495.62 1211.4 L1496.2 1211.4 L1496.79 1211.4 L1497.38 1211.4 L1497.96 1211.4 L1498.55 1211.4 L1499.14 1211.4 L1499.72 1211.4 L1500.31 1211.4 L1500.9 1211.4 L1501.48 1211.4 L1502.07 1211.4 L1502.65 1211.4 L1503.24 1211.4 L1503.83 1211.4 L1504.41 1211.4 L1505 1211.4 L1505.59 1211.4 L1506.17 1211.4 L1506.76 1211.4 L1507.35 1211.4 L1507.93 1211.4 L1508.52 1211.4 L1509.11 1211.4 L1509.69 1211.4 L1510.28 1211.4 L1510.86 1211.4 L1511.45 1211.4 L1512.04 1211.4 L1512.62 1211.4 L1513.21 1211.4 L1513.8 1211.4 L1514.38 1211.4 L1514.97 1211.4 L1515.56 1211.4 L1516.14 1211.4 L1516.73 1211.4 L1517.32 1211.4 L1517.9 1211.4 L1518.49 1211.4 L1519.07 1211.4 L1519.66 1211.4 L1520.25 1211.4 L1520.83 1211.4 L1521.42 1211.4 L1522.01 1211.4 L1522.59 1211.4 L1523.18 1211.4 L1523.77 1211.4 L1524.35 1211.4 L1524.94 1211.4 L1525.52 1211.4 L1526.11 1211.4 L1526.7 1211.4 L1527.28 1211.4 L1527.87 1211.4 L1528.46 1211.4 L1529.04 1211.4 L1529.63 1211.4 L1530.22 1211.4 L1530.8 1211.4 L1531.39 1211.4 L1531.98 1211.4 L1532.56 1211.4 L1533.15 1211.4 L1533.73 1211.4 L1534.32 1211.4 L1534.91 1211.4 L1535.49 1211.4 L1536.08 1211.4 L1536.67 1211.4 L1537.25 1211.4 L1537.84 1211.4 L1538.43 1211.4 L1539.01 1211.4 L1539.6 1211.4 L1540.19 1211.4 L1540.77 1211.4 L1541.36 1211.4 L1541.94 1211.4 L1542.53 1211.4 L1543.12 1211.4 L1543.7 1211.4 L1544.29 1211.4 L1544.88 1211.4 L1545.46 1211.4 L1546.05 1211.4 L1546.64 1211.4 L1547.22 1211.4 L1547.81 1211.4 L1548.4 1211.4 L1548.98 1211.4 L1549.57 1211.4 L1550.15 1211.4 L1550.74 1211.4 L1551.33 1211.4 L1551.91 1211.4 L1552.5 1211.4 L1553.09 1211.4 L1553.67 1211.4 L1554.26 1211.4 L1554.85 1211.4 L1555.43 1211.4 L1556.02 1211.4 L1556.6 1211.4 L1557.19 1211.4 L1557.78 1211.4 L1558.36 1211.4 L1558.95 1211.4 L1559.54 1211.4 L1560.12 1211.4 L1560.71 1211.4 L1561.3 1211.4 L1561.88 1211.4 L1562.47 1211.4 L1563.06 1211.4 L1563.64 1211.4 L1564.23 1211.4 L1564.81 1211.4 L1565.4 1211.4 L1565.99 1211.4 L1566.57 1211.4 L1567.16 1211.4 L1567.75 1211.4 L1568.33 1211.4 L1568.92 1211.4 L1569.51 1211.4 L1570.09 1211.4 L1570.68 1211.4 L1571.27 1211.4 L1571.85 1211.4 L1572.44 1211.4 L1573.02 1211.4 L1573.61 1211.4 L1574.2 1211.4 L1574.78 1211.4 L1575.37 1211.4 L1575.96 1211.4 L1576.54 1211.4 L1577.13 1211.4 L1577.72 1211.4 L1578.3 1211.4 L1578.89 1211.4 L1579.47 1211.4 L1580.06 1211.4 L1580.65 1211.4 L1581.23 1211.4 L1581.82 1211.4 L1582.41 1211.4 L1582.99 1211.4 L1583.58 1211.4 L1584.17 1211.4 L1584.75 1211.4 L1585.34 1211.4 L1585.93 1211.4 L1586.51 1211.4 L1587.1 1211.4 L1587.68 1211.4 L1588.27 1211.4 L1588.86 1211.4 L1589.44 1211.4 L1590.03 1211.4 L1590.62 1211.4 L1591.2 1211.4 L1591.79 1211.4 L1592.38 1211.4 L1592.96 1211.4 L1593.55 1211.4 L1594.14 1211.4 L1594.72 1211.4 L1595.31 1211.4 L1595.89 1211.4 L1596.48 1211.4 L1597.07 1211.4 L1597.65 1211.4 L1598.24 1211.4 L1598.83 1211.4 L1599.41 1211.4 L1600 1211.4 L1600.59 1211.4 L1601.17 1211.4 L1601.76 1211.4 L1602.34 1211.4 L1602.93 1211.4 L1603.52 1211.4 L1604.1 1211.4 L1604.69 1211.4 L1605.28 1211.4 L1605.86 1211.4 L1606.45 1211.4 L1607.04 1211.4 L1607.62 1211.4 L1608.21 1211.4 L1608.8 1211.4 L1609.38 1211.4 L1609.97 1211.4 L1610.55 1211.4 L1611.14 1211.4 L1611.73 1211.4 L1612.31 1211.4 L1612.9 1211.4 L1613.49 1211.4 L1614.07 1211.4 L1614.66 1211.4 L1615.25 1211.4 L1615.83 1211.4 L1616.42 1211.4 L1617.01 1211.4 L1617.59 1211.4 L1618.18 1211.4 L1618.76 1211.4 L1619.35 1211.4 L1619.94 1211.4 L1620.52 1211.4 L1621.11 1211.4 L1621.7 1211.4 L1622.28 1211.4 L1622.87 1211.4 L1623.46 1211.4 L1624.04 1211.4 L1624.63 1211.4 L1625.22 1211.4 L1625.8 1211.4 L1626.39 1211.4 L1626.97 1211.4 L1627.56 1211.4 L1628.15 1211.4 L1628.73 1211.4 L1629.32 1211.4 L1629.91 1211.4 L1630.49 1211.4 L1631.08 1211.4 L1631.67 1211.4 L1632.25 1211.4 L1632.84 1211.4 L1633.42 1211.4 L1634.01 1211.4 L1634.6 1211.4 L1635.18 1211.4 L1635.77 1211.4 L1636.36 1211.4 L1636.94 1211.4 L1637.53 1211.4 L1638.12 1211.4 L1638.7 1211.4 L1639.29 1211.4 L1639.88 1211.4 L1640.46 1211.4 L1641.05 1211.4 L1641.63 1211.4 L1642.22 1211.4 L1642.81 1211.4 L1643.39 1211.4 L1643.98 1211.4 L1644.57 1211.4 L1645.15 1211.4 L1645.74 1211.4 L1646.33 1211.4 L1646.91 1211.4 L1647.5 1211.4 L1648.09 1211.4 L1648.67 1211.4 L1649.26 1211.4 L1649.84 1211.4 L1650.43 1211.4 L1651.02 1211.4 L1651.6 1211.4 L1652.19 1211.4 L1652.78 1211.4 L1653.36 1211.4 L1653.95 1211.4 L1654.54 1211.4 L1655.12 1211.4 L1655.71 1211.4 L1656.29 1211.4 L1656.88 1211.4 L1657.47 1211.4 L1658.05 1211.4 L1658.64 1211.4 L1659.23 1211.4 L1659.81 1211.4 L1660.4 1211.4 L1660.99 1211.4 L1661.57 1211.4 L1662.16 1211.4 L1662.75 1211.4 L1663.33 1211.4 L1663.92 1211.4 L1664.5 1211.4 L1665.09 1211.4 L1665.68 1211.4 L1666.26 1211.4 L1666.85 1211.4 L1667.44 1211.4 L1668.02 1211.4 L1668.61 1211.4 L1669.2 1211.4 L1669.78 1211.4 L1670.37 1211.4 L1670.96 1211.4 L1671.54 1211.4 L1672.13 1211.4 L1672.71 1211.4 L1673.3 1211.4 L1673.89 1211.4 L1674.47 1211.4 L1675.06 1211.4 L1675.65 1211.4 L1676.23 1211.4 L1676.82 1211.4 L1677.41 1211.4 L1677.99 1211.4 L1678.58 1211.4 L1679.17 1211.4 L1679.75 1211.4 L1680.34 1211.4 L1680.92 1211.4 L1681.51 1211.4 L1682.1 1211.4 L1682.68 1211.4 L1683.27 1211.4 L1683.86 1211.4 L1684.44 1211.4 L1685.03 1211.4 L1685.62 1211.4 L1686.2 1211.4 L1686.79 1211.4 L1687.37 1211.4 L1687.96 1211.4 L1688.55 1211.4 L1689.13 1211.4 L1689.72 1211.4 L1690.31 1211.4 L1690.89 1211.4 L1691.48 1211.4 L1692.07 1211.4 L1692.65 1211.4 L1693.24 1211.4 L1693.83 1211.4 L1694.41 1211.4 L1695 1211.4 L1695.58 1211.4 L1696.17 1211.4 L1696.76 1211.4 L1697.34 1211.4 L1697.93 1211.4 L1698.52 1211.4 L1699.1 1211.4 L1699.69 1211.4 L1700.28 1211.4 L1700.86 1211.4 L1701.45 1211.4 L1702.04 1211.4 L1702.62 1211.4 L1703.21 1211.4 L1703.79 1211.4 L1704.38 1211.4 L1704.97 1211.4 L1705.55 1211.4 L1706.14 1211.4 L1706.73 1211.4 L1707.31 1211.4 L1707.9 1211.4 L1708.49 1211.4 L1709.07 1211.4 L1709.66 1211.4 L1710.24 1211.4 L1710.83 1211.4 L1711.42 1211.4 L1712 1211.4 L1712.59 1211.4 L1713.18 1211.4 L1713.76 1211.4 L1714.35 1211.4 L1714.94 1211.4 L1715.52 1211.4 L1716.11 1211.4 L1716.7 1211.4 L1717.28 1211.4 L1717.87 1211.4 L1718.45 1211.4 L1719.04 1211.4 L1719.63 1211.4 L1720.21 1211.4 L1720.8 1211.4 L1721.39 1211.4 L1721.97 1211.4 L1722.56 1211.4 L1723.15 1211.4 L1723.73 1211.4 L1724.32 1211.4 L1724.91 1211.4 L1725.49 1211.4 L1726.08 1211.4 L1726.66 1211.4 L1727.25 1211.4 L1727.84 1211.4 L1728.42 1211.4 L1729.01 1211.4 L1729.6 1211.4 L1730.18 1211.4 L1730.77 1211.4 L1731.36 1211.4 L1731.94 1211.4 L1732.53 1211.4 L1733.11 1211.4 L1733.7 1211.4 L1734.29 1211.4 L1734.87 1211.4 L1735.46 1211.4 L1736.05 1211.4 L1736.63 1211.4 L1737.22 1211.4 L1737.81 1211.4 L1738.39 1211.4 L1738.98 1211.4 L1739.57 1211.4 L1740.15 1211.4 L1740.74 1211.4 L1741.32 1211.4 L1741.91 1211.4 L1742.5 1211.4 L1743.08 1211.4 L1743.67 1211.4 L1744.26 1211.4 L1744.84 1211.4 L1745.43 1211.4 L1746.02 1211.4 L1746.6 1211.4 L1747.19 1211.4 L1747.78 1211.4 L1748.36 1211.4 L1748.95 1211.4 L1749.53 1211.4 L1750.12 1211.4 L1750.71 1211.4 L1751.29 1211.4 L1751.88 1211.4 L1752.47 1211.4 L1753.05 1211.4 L1753.64 1211.4 L1754.23 1211.4 L1754.81 1211.4 L1755.4 1211.4 L1755.99 1211.4 L1756.57 1211.4 L1757.16 1211.4 L1757.74 1211.4 L1758.33 1211.4 L1758.92 1211.4 L1759.5 1211.4 L1760.09 1211.4 L1760.68 1211.4 L1761.26 1211.4 L1761.85 1211.4 L1762.44 1211.4 L1763.02 1211.4 L1763.61 1211.4 L1764.19 1211.4 L1764.78 1211.4 L1765.37 1211.4 L1765.95 1211.4 L1766.54 1211.4 L1767.13 1211.4 L1767.71 1211.4 L1768.3 1211.4 L1768.89 1211.4 L1769.47 1211.4 L1770.06 1211.4 L1770.65 1211.4 L1771.23 1211.4 L1771.82 1211.4 L1772.4 1211.4 L1772.99 1211.4 L1773.58 1211.4 L1774.16 1211.4 L1774.75 1211.4 L1775.34 1211.4 L1775.92 1211.4 L1776.51 1211.4 L1777.1 1211.4 L1777.68 1211.4 L1778.27 1211.4 L1778.86 1211.4 L1779.44 1211.4 L1780.03 1211.4 L1780.61 1211.4 L1781.2 1211.4 L1781.79 1211.4 L1782.37 1211.4 L1782.96 1211.4 L1783.55 1211.4 L1784.13 1211.4 L1784.72 1211.4 L1785.31 1211.4 L1785.89 1211.4 L1786.48 1211.4 L1787.06 1211.4 L1787.65 1211.4 L1788.24 1211.4 L1788.82 1211.4 L1789.41 1211.4 L1790 1211.4 L1790.58 1211.4 L1791.17 1211.4 L1791.76 1211.4 L1792.34 1211.4 L1792.93 1211.4 L1793.52 1211.4 L1794.1 1211.4 L1794.69 1211.4 L1795.27 1211.4 L1795.86 1211.4 L1796.45 1211.4 L1797.03 1211.4 L1797.62 1211.4 L1798.21 1211.4 L1798.79 1211.4 L1799.38 1211.4 L1799.97 1211.4 L1800.55 1211.4 L1801.14 1211.4 L1801.73 1211.4 L1802.31 1211.4 L1802.9 1211.4 L1803.48 1211.4 L1804.07 1211.4 L1804.66 1211.4 L1805.24 1211.4 L1805.83 1211.4 L1806.42 1211.4 L1807 1211.4 L1807.59 1211.4 L1808.18 1211.4 L1808.76 1211.4 L1809.35 1211.4 L1809.94 1211.4 L1810.52 1211.4 L1811.11 1211.4 L1811.69 1211.4 L1812.28 1211.4 L1812.87 1211.4 L1813.45 1211.4 L1814.04 1211.4 L1814.63 1211.4 L1815.21 1211.4 L1815.8 1211.4 L1816.39 1211.4 L1816.97 1211.4 L1817.56 1211.4 L1818.14 1211.4 L1818.73 1211.4 L1819.32 1211.4 L1819.9 1211.4 L1820.49 1211.4 L1821.08 1211.4 L1821.66 1211.4 L1822.25 1211.4 L1822.84 1211.4 L1823.42 1211.4 L1824.01 1211.4 L1824.6 1211.4 L1825.18 1211.4 L1825.77 1211.4 L1826.35 1211.4 L1826.94 1211.4 L1827.53 1211.4 L1828.11 1211.4 L1828.7 1211.4 L1829.29 1211.4 L1829.87 1211.4 L1830.46 1211.4 L1831.05 1211.4 L1831.63 1211.4 L1832.22 1211.4 L1832.81 1211.4 L1833.39 1211.4 L1833.98 1211.4 L1834.56 1211.4 L1835.15 1211.4 L1835.74 1211.4 L1836.32 1211.4 L1836.91 1211.4 L1837.5 1211.4 L1838.08 1211.4 L1838.67 1211.4 L1839.26 1211.4 L1839.84 1211.4 L1840.43 1211.4 L1841.01 1211.4 L1841.6 1211.4 L1842.19 1211.4 L1842.77 1211.4 L1843.36 1211.4 L1843.95 1211.4 L1844.53 1211.4 L1845.12 1211.4 L1845.71 1211.4 L1846.29 1211.4 L1846.88 1211.4 L1847.47 1211.4 L1848.05 1211.4 L1848.64 1211.4 L1849.22 1211.4 L1849.81 1211.4 L1850.4 1211.4 L1850.98 1211.4 L1851.57 1211.4 L1852.16 1211.4 L1852.74 1211.4 L1853.33 1211.4 L1853.92 1211.4 L1854.5 1211.4 L1855.09 1211.4 L1855.68 1211.4 L1856.26 1211.4 L1856.85 1211.4 L1857.43 1211.4 L1858.02 1211.4 L1858.61 1211.4 L1859.19 1211.4 L1859.78 1211.4 L1860.37 1211.4 L1860.95 1211.4 L1861.54 1211.4 L1862.13 1211.4 L1862.71 1211.4 L1863.3 1211.4 L1863.88 1211.4 L1864.47 1211.4 L1865.06 1211.4 L1865.64 1211.4 L1866.23 1211.4 L1866.82 1211.4 L1867.4 1211.4 L1867.99 1211.4 L1868.58 1211.4 L1869.16 1211.4 L1869.75 1211.4 L1870.34 1211.4 L1870.92 1211.4 L1871.51 1211.4 L1872.09 1211.4 L1872.68 1211.4 L1873.27 1211.4 L1873.85 1211.4 L1874.44 1211.4 L1875.03 1211.4 L1875.61 1211.4 L1876.2 1211.4 L1876.79 1211.4 L1877.37 1211.4 L1877.96 1211.4 L1878.55 1211.4 L1879.13 1211.4 L1879.72 1211.4 L1880.3 1211.4 L1880.89 1211.4 L1881.48 1211.4 L1882.06 1211.4 L1882.65 1211.4 L1883.24 1211.4 L1883.82 1211.4 L1884.41 1211.4 L1885 1211.4 L1885.58 1211.4 L1886.17 1211.4 L1886.76 1211.4 L1887.34 1211.4 L1887.93 1211.4 L1888.51 1211.4 L1889.1 1211.4 L1889.69 1211.4 L1890.27 1211.4 L1890.86 1211.4 L1891.45 1211.4 L1892.03 1211.4 L1892.62 1211.4 L1893.21 1211.4 L1893.79 1211.4 L1894.38 1211.4 L1894.96 1211.4 L1895.55 1211.4 L1896.14 1211.4 L1896.72 1211.4 L1897.31 1211.4 L1897.9 1211.4 L1898.48 1211.4 L1899.07 1211.4 L1899.66 1211.4 L1900.24 1211.4 L1900.83 1211.4 L1901.42 1211.4 L1902 1211.4 L1902.59 1211.4 L1903.17 1211.4 L1903.76 1211.4 L1904.35 1211.4 L1904.93 1211.4 L1905.52 1211.4 L1906.11 1211.4 L1906.69 1211.4 L1907.28 1211.4 L1907.87 1211.4 L1908.45 1211.4 L1909.04 1211.4 L1909.63 1211.4 L1910.21 1211.4 L1910.8 1211.4 L1911.38 1211.4 L1911.97 1211.4 L1912.56 1211.4 L1913.14 1211.4 L1913.73 1211.4 L1914.32 1211.4 L1914.9 1211.4 L1915.49 1211.4 L1916.08 1211.4 L1916.66 1211.4 L1917.25 1211.4 L1917.83 1211.4 L1918.42 1211.4 L1919.01 1211.4 L1919.59 1211.4 L1920.18 1211.4 L1920.77 1211.4 L1921.35 1211.4 L1921.94 1211.4 L1922.53 1211.4 L1923.11 1211.4 L1923.7 1211.4 L1924.29 1211.4 L1924.87 1211.4 L1925.46 1211.4 L1926.04 1211.4 L1926.63 1211.4 L1927.22 1211.4 L1927.8 1211.4 L1928.39 1211.4 L1928.98 1211.4 L1929.56 1211.4 L1930.15 1211.4 L1930.74 1211.4 L1931.32 1211.4 L1931.91 1211.4 L1932.5 1211.4 L1933.08 1211.4 L1933.67 1211.4 L1934.25 1211.4 L1934.84 1211.4 L1935.43 1211.4 L1936.01 1211.4 L1936.6 1211.4 L1937.19 1211.4 L1937.77 1211.4 L1938.36 1211.4 L1938.95 1211.4 L1939.53 1211.4 L1940.12 1211.4 L1940.71 1211.4 L1941.29 1211.4 L1941.88 1211.4 L1942.46 1211.4 L1943.05 1211.4 L1943.64 1211.4 L1944.22 1211.4 L1944.81 1211.4 L1945.4 1211.4 L1945.98 1211.4 L1946.57 1211.4 L1947.16 1211.4 L1947.74 1211.4 L1948.33 1211.4 L1948.91 1211.4 L1949.5 1211.4 L1950.09 1211.4 L1950.67 1211.4 L1951.26 1211.4 L1951.85 1211.4 L1952.43 1211.4 L1953.02 1211.4 L1953.61 1211.4 L1954.19 1211.4 L1954.78 1211.4 L1955.37 1211.4 L1955.95 1211.4 L1956.54 1211.4 L1957.12 1211.4 L1957.71 1211.4 L1958.3 1211.4 L1958.88 1211.4 L1959.47 1211.4 L1960.06 1211.4 L1960.64 1211.4 L1961.23 1211.4 L1961.82 1211.4 L1962.4 1211.4 L1962.99 1211.4 L1963.58 1211.4 L1964.16 1211.4 L1964.75 1211.4 L1965.33 1211.4 L1965.92 1211.4 L1966.51 1211.4 L1967.09 1211.4 L1967.68 1211.4 L1968.27 1211.4 L1968.85 1211.4 L1969.44 1211.4 L1970.03 1211.4 L1970.61 1211.4 L1971.2 1211.4 L1971.78 1211.4 L1972.37 1211.4 L1972.96 1211.4 L1973.54 1211.4 L1974.13 1211.4 L1974.72 1211.4 L1975.3 1211.4 L1975.89 1211.4 L1976.48 1211.4 L1977.06 1211.4 L1977.65 1211.4 L1978.24 1211.4 L1978.82 1211.4 L1979.41 1211.4 L1979.99 1211.4 L1980.58 1211.4 L1981.17 1211.4 L1981.75 1211.4 L1982.34 1211.4 L1982.93 1211.4 L1983.51 1211.4 L1984.1 1211.4 L1984.69 1211.4 L1985.27 1211.4 L1985.86 1211.4 L1986.45 1211.4 L1987.03 1211.4 L1987.62 1211.4 L1988.2 1211.4 L1988.79 1211.4 L1989.38 1211.4 L1989.96 1211.4 L1990.55 1211.4 L1991.14 1211.4 L1991.72 1211.4 L1992.31 1211.4 L1992.9 1211.4 L1993.48 1211.4 L1994.07 1211.4 L1994.65 1211.4 L1995.24 1211.4 L1995.83 1211.4 L1996.41 1211.4 L1997 1211.4 L1997.59 1211.4 L1998.17 1211.4 L1998.76 1211.4 L1999.35 1211.4 L1999.93 1211.4 L2000.52 1211.4 L2001.11 1211.4 L2001.69 1211.4 L2002.28 1211.4 L2002.86 1211.4 L2003.45 1211.4 L2004.04 1211.4 L2004.62 1211.4 L2005.21 1211.4 L2005.8 1211.4 L2006.38 1211.4 L2006.97 1211.4 L2007.56 1211.4 L2008.14 1211.4 L2008.73 1211.4 L2009.32 1211.4 L2009.9 1211.4 L2010.49 1211.4 L2011.07 1211.4 L2011.66 1211.4 L2012.25 1211.4 L2012.83 1211.4 L2013.42 1211.4 L2014.01 1211.4 L2014.59 1211.4 L2015.18 1211.4 L2015.77 1211.4 L2016.35 1211.4 L2016.94 1211.4 L2017.53 1211.4 L2018.11 1211.4 L2018.7 1211.4 L2019.28 1211.4 L2019.87 1211.4 L2020.46 1211.4 L2021.04 1211.4 L2021.63 1211.4 L2022.22 1211.4 L2022.8 1211.4 L2023.39 1211.4 L2023.98 1211.4 L2024.56 1211.4 L2025.15 1211.4 L2025.73 1211.4 L2026.32 1211.4 L2026.91 1211.4 L2027.49 1211.4 L2028.08 1211.4 L2028.67 1211.4 L2029.25 1211.4 L2029.84 1211.4 L2030.43 1211.4 L2031.01 1211.4 L2031.6 1211.4 L2032.19 1211.4 L2032.77 1211.4 L2033.36 1211.4 L2033.94 1211.4 L2034.53 1211.4 L2035.12 1211.4 L2035.7 1211.4 L2036.29 1211.4 L2036.88 1211.4 L2037.46 1211.4 L2038.05 1211.4 L2038.64 1211.4 L2039.22 1211.4 L2039.81 1211.4 L2040.4 1211.4 L2040.98 1211.4 L2041.57 1211.4 L2042.15 1211.4 L2042.74 1211.4 L2043.33 1211.4 L2043.91 1211.4 L2044.5 1211.4 L2045.09 1211.4 L2045.67 1211.4 L2046.26 1211.4 L2046.85 1211.4 L2047.43 1211.4 L2048.02 1211.4 L2048.6 1211.4 L2049.19 1211.4 L2049.78 1211.4 L2050.36 1211.4 L2050.95 1211.4 L2051.54 1211.4 L2052.12 1211.4 L2052.71 1211.4 L2053.3 1211.4 L2053.88 1211.4 L2054.47 1211.4 L2055.06 1211.4 L2055.64 1211.4 L2056.23 1211.4 L2056.81 1211.4 L2057.4 1211.4 L2057.99 1211.4 L2058.57 1211.4 L2059.16 1211.4 L2059.75 1211.4 L2060.33 1211.4 L2060.92 1211.4 L2061.51 1211.4 L2062.09 1211.4 L2062.68 1211.4 L2063.27 1211.4 L2063.85 1211.4 L2064.44 1211.4 L2065.02 1211.4 L2065.61 1211.4 L2066.2 1211.4 L2066.78 1211.4 L2067.37 1211.4 L2067.96 1211.4 L2068.54 1211.4 L2069.13 1211.4 L2069.72 1211.4 L2070.3 1211.4 L2070.89 1211.4 L2071.48 1211.4 L2072.06 1211.4 L2072.65 1211.4 L2073.23 1211.4 L2073.82 1211.4 L2074.41 1211.4 L2074.99 1211.4 L2075.58 1211.4 L2076.17 1211.4 L2076.75 1211.4 L2077.34 1211.4 L2077.93 1211.4 L2078.51 1211.4 L2079.1 1211.4 L2079.68 1211.4 L2080.27 1211.4 L2080.86 1211.4 L2081.44 1211.4 L2082.03 1211.4 L2082.62 1211.4 L2083.2 1211.4 L2083.79 1211.4 L2084.38 1211.4 L2084.96 1211.4 L2085.55 1211.4 L2086.14 1211.4 L2086.72 1211.4 L2087.31 1211.4 L2087.89 1211.4 L2088.48 1211.4 L2089.07 1211.4 L2089.65 1211.4 L2090.24 1211.4 L2090.83 1211.4 L2091.41 1211.4 L2092 1211.4 L2092.59 1211.4 L2093.17 1211.4 L2093.76 1211.4 L2094.35 1211.4 L2094.93 1211.4 L2095.52 1211.4 L2096.1 1211.4 L2096.69 1211.4 L2097.28 1211.4 L2097.86 1211.4 L2098.45 1211.4 L2099.04 1211.4 L2099.62 1211.4 L2100.21 1211.4 L2100.8 1211.4 L2101.38 1211.4 L2101.97 1211.4 L2102.55 1211.4 L2103.14 1211.4 L2103.73 1211.4 L2104.31 1211.4 L2104.9 1211.4 L2105.49 1211.4 L2106.07 1211.4 L2106.66 1211.4 L2107.25 1211.4 L2107.83 1211.4 L2108.42 1211.4 L2109.01 1211.4 L2109.59 1211.4 L2110.18 1211.4 L2110.76 1211.4 L2111.35 1211.4 L2111.94 1211.4 L2112.52 1211.4 L2113.11 1211.4 L2113.7 1211.4 L2114.28 1211.4 L2114.87 1211.4 L2115.46 1211.4 L2116.04 1211.4 L2116.63 1211.4 L2117.22 1211.4 L2117.8 1211.4 L2118.39 1211.4 L2118.97 1211.4 L2119.56 1211.4 L2120.15 1211.4 L2120.73 1211.4 L2121.32 1211.4 L2121.91 1211.4 L2122.49 1211.4 L2123.08 1211.4 L2123.67 1211.4 L2124.25 1211.4 L2124.84 1211.4 L2125.42 1211.4 L2126.01 1211.4 L2126.6 1211.4 L2127.18 1211.4 L2127.77 1211.4 L2128.36 1211.4 L2128.94 1211.4 L2129.53 1211.4 L2130.12 1211.4 L2130.7 1211.4 L2131.29 1211.4 L2131.88 1211.4 L2132.46 1211.4 L2133.05 1211.4 L2133.63 1211.4 L2134.22 1211.4 L2134.81 1211.4 L2135.39 1211.4 L2135.98 1211.4 L2136.57 1211.4 L2137.15 1211.4 L2137.74 1211.4 L2138.33 1211.4 L2138.91 1211.4 L2139.5 1211.4 L2140.09 1211.4 L2140.67 1211.4 L2141.26 1211.4 L2141.84 1211.4 L2142.43 1211.4 L2143.02 1211.4 L2143.6 1211.4 L2144.19 1211.4 L2144.78 1211.4 L2145.36 1211.4 L2145.95 1211.4 L2146.54 1211.4 L2147.12 1211.4 L2147.71 1211.4 L2148.3 1211.4 L2148.88 1211.4 L2149.47 1211.4 L2150.05 1211.4 L2150.64 1211.4 L2151.23 1211.4 L2151.81 1211.4 L2152.4 1211.4 L2152.99 1211.4 L2153.57 1211.4 L2154.16 1211.4 L2154.75 1211.4 L2155.33 1211.4 L2155.92 1211.4 L2156.5 1211.4 L2157.09 1211.4 L2157.68 1211.4 L2158.26 1211.4 L2158.26 1211.29 L2157.68 1211.29 L2157.09 1211.29 L2156.5 1211.29 L2155.92 1211.29 L2155.33 1211.29 L2154.75 1211.29 L2154.16 1211.29 L2153.57 1211.29 L2152.99 1211.29 L2152.4 1211.29 L2151.81 1211.29 L2151.23 1211.29 L2150.64 1211.29 L2150.05 1211.29 L2149.47 1211.29 L2148.88 1211.29 L2148.3 1211.29 L2147.71 1211.29 L2147.12 1211.29 L2146.54 1211.29 L2145.95 1211.29 L2145.36 1211.29 L2144.78 1211.29 L2144.19 1211.29 L2143.6 1211.29 L2143.02 1211.29 L2142.43 1211.29 L2141.84 1211.29 L2141.26 1211.29 L2140.67 1211.29 L2140.09 1211.29 L2139.5 1211.29 L2138.91 1211.29 L2138.33 1211.29 L2137.74 1211.29 L2137.15 1211.29 L2136.57 1211.29 L2135.98 1211.29 L2135.39 1211.29 L2134.81 1211.29 L2134.22 1211.29 L2133.63 1211.29 L2133.05 1211.29 L2132.46 1211.29 L2131.88 1211.29 L2131.29 1211.29 L2130.7 1211.29 L2130.12 1211.29 L2129.53 1211.29 L2128.94 1211.29 L2128.36 1211.29 L2127.77 1211.29 L2127.18 1211.29 L2126.6 1211.29 L2126.01 1211.29 L2125.42 1211.29 L2124.84 1211.29 L2124.25 1211.29 L2123.67 1211.29 L2123.08 1211.29 L2122.49 1211.29 L2121.91 1211.29 L2121.32 1211.29 L2120.73 1211.29 L2120.15 1211.29 L2119.56 1211.29 L2118.97 1211.29 L2118.39 1211.29 L2117.8 1211.29 L2117.22 1211.29 L2116.63 1211.29 L2116.04 1211.29 L2115.46 1211.29 L2114.87 1211.29 L2114.28 1211.29 L2113.7 1211.29 L2113.11 1211.29 L2112.52 1211.29 L2111.94 1211.29 L2111.35 1211.29 L2110.76 1211.29 L2110.18 1211.29 L2109.59 1211.29 L2109.01 1211.29 L2108.42 1211.29 L2107.83 1211.29 L2107.25 1211.29 L2106.66 1211.29 L2106.07 1211.29 L2105.49 1211.29 L2104.9 1211.29 L2104.31 1211.29 L2103.73 1211.29 L2103.14 1211.29 L2102.55 1211.29 L2101.97 1211.29 L2101.38 1211.29 L2100.8 1211.29 L2100.21 1211.29 L2099.62 1211.29 L2099.04 1211.29 L2098.45 1211.29 L2097.86 1211.29 L2097.28 1211.29 L2096.69 1211.29 L2096.1 1211.29 L2095.52 1211.29 L2094.93 1211.29 L2094.35 1211.29 L2093.76 1211.29 L2093.17 1211.29 L2092.59 1211.29 L2092 1211.29 L2091.41 1211.29 L2090.83 1211.29 L2090.24 1211.29 L2089.65 1211.29 L2089.07 1211.29 L2088.48 1211.29 L2087.89 1211.29 L2087.31 1211.29 L2086.72 1211.29 L2086.14 1211.29 L2085.55 1211.29 L2084.96 1211.29 L2084.38 1211.29 L2083.79 1211.29 L2083.2 1211.29 L2082.62 1211.29 L2082.03 1211.29 L2081.44 1211.29 L2080.86 1211.29 L2080.27 1211.29 L2079.68 1211.29 L2079.1 1211.29 L2078.51 1211.29 L2077.93 1211.29 L2077.34 1211.29 L2076.75 1211.29 L2076.17 1211.29 L2075.58 1211.29 L2074.99 1211.29 L2074.41 1211.29 L2073.82 1211.29 L2073.23 1211.29 L2072.65 1211.29 L2072.06 1211.29 L2071.48 1211.29 L2070.89 1211.29 L2070.3 1211.29 L2069.72 1211.29 L2069.13 1211.29 L2068.54 1211.29 L2067.96 1211.29 L2067.37 1211.29 L2066.78 1211.29 L2066.2 1211.29 L2065.61 1211.29 L2065.02 1211.29 L2064.44 1211.29 L2063.85 1211.29 L2063.27 1211.29 L2062.68 1211.29 L2062.09 1211.29 L2061.51 1211.29 L2060.92 1211.29 L2060.33 1211.29 L2059.75 1211.29 L2059.16 1211.29 L2058.57 1211.29 L2057.99 1211.29 L2057.4 1211.29 L2056.81 1211.29 L2056.23 1211.29 L2055.64 1211.29 L2055.06 1211.29 L2054.47 1211.29 L2053.88 1211.29 L2053.3 1211.29 L2052.71 1211.29 L2052.12 1211.29 L2051.54 1211.29 L2050.95 1211.29 L2050.36 1211.29 L2049.78 1211.29 L2049.19 1211.29 L2048.6 1211.29 L2048.02 1211.29 L2047.43 1211.29 L2046.85 1211.29 L2046.26 1211.29 L2045.67 1211.29 L2045.09 1211.29 L2044.5 1211.29 L2043.91 1211.29 L2043.33 1211.29 L2042.74 1211.29 L2042.15 1211.29 L2041.57 1211.29 L2040.98 1211.29 L2040.4 1211.29 L2039.81 1211.29 L2039.22 1211.29 L2038.64 1211.29 L2038.05 1211.29 L2037.46 1211.29 L2036.88 1211.29 L2036.29 1211.29 L2035.7 1211.29 L2035.12 1211.29 L2034.53 1211.29 L2033.94 1211.29 L2033.36 1211.29 L2032.77 1211.29 L2032.19 1211.29 L2031.6 1211.29 L2031.01 1211.29 L2030.43 1211.29 L2029.84 1211.29 L2029.25 1211.29 L2028.67 1211.29 L2028.08 1211.29 L2027.49 1211.29 L2026.91 1211.29 L2026.32 1211.29 L2025.73 1211.29 L2025.15 1211.29 L2024.56 1211.29 L2023.98 1211.29 L2023.39 1211.29 L2022.8 1211.29 L2022.22 1211.29 L2021.63 1211.29 L2021.04 1211.29 L2020.46 1211.29 L2019.87 1211.29 L2019.28 1211.29 L2018.7 1211.29 L2018.11 1211.29 L2017.53 1211.29 L2016.94 1211.29 L2016.35 1211.29 L2015.77 1211.29 L2015.18 1211.29 L2014.59 1211.29 L2014.01 1211.29 L2013.42 1211.29 L2012.83 1211.29 L2012.25 1211.29 L2011.66 1211.29 L2011.07 1211.29 L2010.49 1211.29 L2009.9 1211.29 L2009.32 1211.29 L2008.73 1211.29 L2008.14 1211.29 L2007.56 1211.29 L2006.97 1211.29 L2006.38 1211.29 L2005.8 1211.29 L2005.21 1211.29 L2004.62 1211.29 L2004.04 1211.29 L2003.45 1211.29 L2002.86 1211.29 L2002.28 1211.29 L2001.69 1211.29 L2001.11 1211.29 L2000.52 1211.29 L1999.93 1211.29 L1999.35 1211.29 L1998.76 1211.29 L1998.17 1211.29 L1997.59 1211.29 L1997 1211.29 L1996.41 1211.29 L1995.83 1211.29 L1995.24 1211.29 L1994.65 1211.29 L1994.07 1211.29 L1993.48 1211.29 L1992.9 1211.29 L1992.31 1211.29 L1991.72 1211.29 L1991.14 1211.29 L1990.55 1211.29 L1989.96 1211.29 L1989.38 1211.29 L1988.79 1211.29 L1988.2 1211.29 L1987.62 1211.29 L1987.03 1211.29 L1986.45 1211.29 L1985.86 1211.29 L1985.27 1211.29 L1984.69 1211.29 L1984.1 1211.29 L1983.51 1211.29 L1982.93 1211.29 L1982.34 1211.29 L1981.75 1211.29 L1981.17 1211.29 L1980.58 1211.29 L1979.99 1211.29 L1979.41 1211.29 L1978.82 1211.29 L1978.24 1211.29 L1977.65 1211.29 L1977.06 1211.29 L1976.48 1211.29 L1975.89 1211.29 L1975.3 1211.29 L1974.72 1211.29 L1974.13 1211.29 L1973.54 1211.29 L1972.96 1211.29 L1972.37 1211.29 L1971.78 1211.29 L1971.2 1211.29 L1970.61 1211.29 L1970.03 1211.29 L1969.44 1211.29 L1968.85 1211.29 L1968.27 1211.29 L1967.68 1211.29 L1967.09 1211.29 L1966.51 1211.29 L1965.92 1211.29 L1965.33 1211.29 L1964.75 1211.29 L1964.16 1211.29 L1963.58 1211.29 L1962.99 1211.29 L1962.4 1211.29 L1961.82 1211.29 L1961.23 1211.29 L1960.64 1211.29 L1960.06 1211.29 L1959.47 1211.29 L1958.88 1211.29 L1958.3 1211.29 L1957.71 1211.29 L1957.12 1211.29 L1956.54 1211.29 L1955.95 1211.29 L1955.37 1211.29 L1954.78 1211.29 L1954.19 1211.29 L1953.61 1211.29 L1953.02 1211.29 L1952.43 1211.29 L1951.85 1211.29 L1951.26 1211.29 L1950.67 1211.29 L1950.09 1211.29 L1949.5 1211.29 L1948.91 1211.29 L1948.33 1211.29 L1947.74 1211.29 L1947.16 1211.29 L1946.57 1211.29 L1945.98 1211.29 L1945.4 1211.29 L1944.81 1211.29 L1944.22 1211.29 L1943.64 1211.29 L1943.05 1211.29 L1942.46 1211.29 L1941.88 1211.29 L1941.29 1211.29 L1940.71 1211.29 L1940.12 1211.29 L1939.53 1211.29 L1938.95 1211.29 L1938.36 1211.29 L1937.77 1211.29 L1937.19 1211.29 L1936.6 1211.29 L1936.01 1211.29 L1935.43 1211.29 L1934.84 1211.29 L1934.25 1211.29 L1933.67 1211.29 L1933.08 1211.29 L1932.5 1211.29 L1931.91 1211.29 L1931.32 1211.29 L1930.74 1211.29 L1930.15 1211.29 L1929.56 1211.29 L1928.98 1211.29 L1928.39 1211.29 L1927.8 1211.29 L1927.22 1211.29 L1926.63 1211.29 L1926.04 1211.29 L1925.46 1211.29 L1924.87 1211.29 L1924.29 1211.29 L1923.7 1211.29 L1923.11 1211.29 L1922.53 1211.29 L1921.94 1211.29 L1921.35 1211.29 L1920.77 1211.29 L1920.18 1211.29 L1919.59 1211.29 L1919.01 1211.29 L1918.42 1211.29 L1917.83 1211.29 L1917.25 1211.29 L1916.66 1211.29 L1916.08 1211.29 L1915.49 1211.29 L1914.9 1211.29 L1914.32 1211.29 L1913.73 1211.29 L1913.14 1211.29 L1912.56 1211.29 L1911.97 1211.29 L1911.38 1211.29 L1910.8 1211.29 L1910.21 1211.29 L1909.63 1211.29 L1909.04 1211.29 L1908.45 1211.29 L1907.87 1211.29 L1907.28 1211.29 L1906.69 1211.29 L1906.11 1211.29 L1905.52 1211.29 L1904.93 1211.29 L1904.35 1211.29 L1903.76 1211.29 L1903.17 1211.29 L1902.59 1211.29 L1902 1211.29 L1901.42 1211.29 L1900.83 1211.29 L1900.24 1211.29 L1899.66 1211.29 L1899.07 1211.29 L1898.48 1211.29 L1897.9 1211.29 L1897.31 1211.29 L1896.72 1211.29 L1896.14 1211.29 L1895.55 1211.29 L1894.96 1211.29 L1894.38 1211.29 L1893.79 1211.29 L1893.21 1211.29 L1892.62 1211.29 L1892.03 1211.29 L1891.45 1211.29 L1890.86 1211.29 L1890.27 1211.29 L1889.69 1211.29 L1889.1 1211.29 L1888.51 1211.29 L1887.93 1211.29 L1887.34 1211.29 L1886.76 1211.29 L1886.17 1211.29 L1885.58 1211.29 L1885 1211.29 L1884.41 1211.29 L1883.82 1211.29 L1883.24 1211.29 L1882.65 1211.29 L1882.06 1211.29 L1881.48 1211.29 L1880.89 1211.29 L1880.3 1211.29 L1879.72 1211.29 L1879.13 1211.29 L1878.55 1211.29 L1877.96 1211.29 L1877.37 1211.29 L1876.79 1211.29 L1876.2 1211.29 L1875.61 1211.29 L1875.03 1211.29 L1874.44 1211.29 L1873.85 1211.29 L1873.27 1211.29 L1872.68 1211.29 L1872.09 1211.29 L1871.51 1211.29 L1870.92 1211.29 L1870.34 1211.29 L1869.75 1211.29 L1869.16 1211.29 L1868.58 1211.29 L1867.99 1211.29 L1867.4 1211.29 L1866.82 1211.29 L1866.23 1211.29 L1865.64 1211.29 L1865.06 1211.29 L1864.47 1211.29 L1863.88 1211.29 L1863.3 1211.29 L1862.71 1211.29 L1862.13 1211.29 L1861.54 1211.29 L1860.95 1211.29 L1860.37 1211.29 L1859.78 1211.29 L1859.19 1211.29 L1858.61 1211.29 L1858.02 1211.29 L1857.43 1211.29 L1856.85 1211.29 L1856.26 1211.29 L1855.68 1211.29 L1855.09 1211.29 L1854.5 1211.29 L1853.92 1211.29 L1853.33 1211.29 L1852.74 1211.29 L1852.16 1211.29 L1851.57 1211.29 L1850.98 1211.29 L1850.4 1211.29 L1849.81 1211.29 L1849.22 1211.29 L1848.64 1211.29 L1848.05 1211.29 L1847.47 1211.29 L1846.88 1211.29 L1846.29 1211.29 L1845.71 1211.29 L1845.12 1211.29 L1844.53 1211.29 L1843.95 1211.29 L1843.36 1211.29 L1842.77 1211.29 L1842.19 1211.29 L1841.6 1211.29 L1841.01 1211.29 L1840.43 1211.29 L1839.84 1211.29 L1839.26 1211.29 L1838.67 1211.29 L1838.08 1211.29 L1837.5 1211.29 L1836.91 1211.29 L1836.32 1211.29 L1835.74 1211.29 L1835.15 1211.29 L1834.56 1211.29 L1833.98 1211.29 L1833.39 1211.29 L1832.81 1211.29 L1832.22 1211.29 L1831.63 1211.29 L1831.05 1211.29 L1830.46 1211.29 L1829.87 1211.29 L1829.29 1211.29 L1828.7 1211.29 L1828.11 1211.29 L1827.53 1211.29 L1826.94 1211.29 L1826.35 1211.29 L1825.77 1211.29 L1825.18 1211.29 L1824.6 1211.29 L1824.01 1211.29 L1823.42 1211.29 L1822.84 1211.29 L1822.25 1211.29 L1821.66 1211.29 L1821.08 1211.29 L1820.49 1211.29 L1819.9 1211.29 L1819.32 1211.29 L1818.73 1211.29 L1818.14 1211.29 L1817.56 1211.29 L1816.97 1211.29 L1816.39 1211.29 L1815.8 1211.29 L1815.21 1211.29 L1814.63 1211.29 L1814.04 1211.29 L1813.45 1211.29 L1812.87 1211.29 L1812.28 1211.29 L1811.69 1211.29 L1811.11 1211.29 L1810.52 1211.29 L1809.94 1211.29 L1809.35 1211.29 L1808.76 1211.29 L1808.18 1211.29 L1807.59 1211.29 L1807 1211.29 L1806.42 1211.29 L1805.83 1211.29 L1805.24 1211.29 L1804.66 1211.29 L1804.07 1211.29 L1803.48 1211.29 L1802.9 1211.29 L1802.31 1211.29 L1801.73 1211.29 L1801.14 1211.29 L1800.55 1211.29 L1799.97 1211.29 L1799.38 1211.29 L1798.79 1211.29 L1798.21 1211.29 L1797.62 1211.29 L1797.03 1211.29 L1796.45 1211.29 L1795.86 1211.29 L1795.27 1211.29 L1794.69 1211.29 L1794.1 1211.29 L1793.52 1211.29 L1792.93 1211.29 L1792.34 1211.29 L1791.76 1211.29 L1791.17 1211.29 L1790.58 1211.29 L1790 1211.29 L1789.41 1211.29 L1788.82 1211.29 L1788.24 1211.29 L1787.65 1211.29 L1787.06 1211.29 L1786.48 1211.29 L1785.89 1211.29 L1785.31 1211.29 L1784.72 1211.29 L1784.13 1211.29 L1783.55 1211.29 L1782.96 1211.29 L1782.37 1211.29 L1781.79 1211.29 L1781.2 1211.29 L1780.61 1211.29 L1780.03 1211.29 L1779.44 1211.29 L1778.86 1211.29 L1778.27 1211.29 L1777.68 1211.29 L1777.1 1211.29 L1776.51 1211.29 L1775.92 1211.29 L1775.34 1211.29 L1774.75 1211.29 L1774.16 1211.29 L1773.58 1211.29 L1772.99 1211.29 L1772.4 1211.29 L1771.82 1211.29 L1771.23 1211.29 L1770.65 1211.29 L1770.06 1211.29 L1769.47 1211.29 L1768.89 1211.29 L1768.3 1211.29 L1767.71 1211.29 L1767.13 1211.29 L1766.54 1211.29 L1765.95 1211.29 L1765.37 1211.29 L1764.78 1211.29 L1764.19 1211.29 L1763.61 1211.29 L1763.02 1211.29 L1762.44 1211.29 L1761.85 1211.29 L1761.26 1211.29 L1760.68 1211.29 L1760.09 1211.29 L1759.5 1211.29 L1758.92 1211.29 L1758.33 1211.29 L1757.74 1211.29 L1757.16 1211.29 L1756.57 1211.29 L1755.99 1211.29 L1755.4 1211.29 L1754.81 1211.29 L1754.23 1211.29 L1753.64 1211.29 L1753.05 1211.29 L1752.47 1211.29 L1751.88 1211.29 L1751.29 1211.29 L1750.71 1211.29 L1750.12 1211.29 L1749.53 1211.29 L1748.95 1211.29 L1748.36 1211.29 L1747.78 1211.29 L1747.19 1211.29 L1746.6 1211.29 L1746.02 1211.29 L1745.43 1211.29 L1744.84 1211.29 L1744.26 1211.29 L1743.67 1211.29 L1743.08 1211.29 L1742.5 1211.29 L1741.91 1211.29 L1741.32 1211.29 L1740.74 1211.29 L1740.15 1211.29 L1739.57 1211.29 L1738.98 1211.29 L1738.39 1211.29 L1737.81 1211.29 L1737.22 1211.29 L1736.63 1211.29 L1736.05 1211.29 L1735.46 1211.29 L1734.87 1211.29 L1734.29 1211.29 L1733.7 1211.29 L1733.11 1211.29 L1732.53 1211.29 L1731.94 1211.29 L1731.36 1211.29 L1730.77 1211.29 L1730.18 1211.29 L1729.6 1211.29 L1729.01 1211.29 L1728.42 1211.29 L1727.84 1211.29 L1727.25 1211.29 L1726.66 1211.29 L1726.08 1211.29 L1725.49 1211.29 L1724.91 1211.29 L1724.32 1211.29 L1723.73 1211.29 L1723.15 1211.29 L1722.56 1211.29 L1721.97 1211.29 L1721.39 1211.29 L1720.8 1211.29 L1720.21 1211.29 L1719.63 1211.29 L1719.04 1211.29 L1718.45 1211.29 L1717.87 1211.29 L1717.28 1211.29 L1716.7 1211.29 L1716.11 1211.29 L1715.52 1211.29 L1714.94 1211.29 L1714.35 1211.29 L1713.76 1211.29 L1713.18 1211.29 L1712.59 1211.29 L1712 1211.29 L1711.42 1211.29 L1710.83 1211.29 L1710.24 1211.29 L1709.66 1211.29 L1709.07 1211.29 L1708.49 1211.29 L1707.9 1211.29 L1707.31 1211.29 L1706.73 1211.29 L1706.14 1211.29 L1705.55 1211.29 L1704.97 1211.29 L1704.38 1211.29 L1703.79 1211.29 L1703.21 1211.29 L1702.62 1211.29 L1702.04 1211.29 L1701.45 1211.29 L1700.86 1211.29 L1700.28 1211.29 L1699.69 1211.29 L1699.1 1211.29 L1698.52 1211.29 L1697.93 1211.29 L1697.34 1211.29 L1696.76 1211.29 L1696.17 1211.29 L1695.58 1211.29 L1695 1211.29 L1694.41 1211.29 L1693.83 1211.29 L1693.24 1211.29 L1692.65 1211.29 L1692.07 1211.29 L1691.48 1211.29 L1690.89 1211.29 L1690.31 1211.29 L1689.72 1211.29 L1689.13 1211.29 L1688.55 1211.29 L1687.96 1211.29 L1687.37 1211.29 L1686.79 1211.29 L1686.2 1211.29 L1685.62 1211.29 L1685.03 1211.29 L1684.44 1211.29 L1683.86 1211.29 L1683.27 1211.29 L1682.68 1211.29 L1682.1 1211.29 L1681.51 1211.29 L1680.92 1211.29 L1680.34 1211.29 L1679.75 1211.29 L1679.17 1211.29 L1678.58 1211.29 L1677.99 1211.29 L1677.41 1211.29 L1676.82 1211.29 L1676.23 1211.29 L1675.65 1211.29 L1675.06 1211.29 L1674.47 1211.29 L1673.89 1211.29 L1673.3 1211.29 L1672.71 1211.29 L1672.13 1211.29 L1671.54 1211.29 L1670.96 1211.29 L1670.37 1211.29 L1669.78 1211.29 L1669.2 1211.29 L1668.61 1211.29 L1668.02 1211.29 L1667.44 1211.29 L1666.85 1211.29 L1666.26 1211.29 L1665.68 1211.29 L1665.09 1211.29 L1664.5 1211.29 L1663.92 1211.29 L1663.33 1211.29 L1662.75 1211.29 L1662.16 1211.29 L1661.57 1211.29 L1660.99 1211.29 L1660.4 1211.29 L1659.81 1211.29 L1659.23 1211.29 L1658.64 1211.29 L1658.05 1211.29 L1657.47 1211.29 L1656.88 1211.29 L1656.29 1211.29 L1655.71 1211.29 L1655.12 1211.29 L1654.54 1211.29 L1653.95 1211.29 L1653.36 1211.29 L1652.78 1211.29 L1652.19 1211.29 L1651.6 1211.29 L1651.02 1211.29 L1650.43 1211.29 L1649.84 1211.29 L1649.26 1211.29 L1648.67 1211.29 L1648.09 1211.29 L1647.5 1211.29 L1646.91 1211.29 L1646.33 1211.29 L1645.74 1211.29 L1645.15 1211.29 L1644.57 1211.29 L1643.98 1211.29 L1643.39 1211.29 L1642.81 1211.29 L1642.22 1211.29 L1641.63 1211.29 L1641.05 1211.29 L1640.46 1211.29 L1639.88 1211.29 L1639.29 1211.29 L1638.7 1211.29 L1638.12 1211.29 L1637.53 1211.29 L1636.94 1211.29 L1636.36 1211.29 L1635.77 1211.29 L1635.18 1211.29 L1634.6 1211.29 L1634.01 1211.29 L1633.42 1211.29 L1632.84 1211.29 L1632.25 1211.29 L1631.67 1211.29 L1631.08 1211.29 L1630.49 1211.29 L1629.91 1211.29 L1629.32 1211.29 L1628.73 1211.29 L1628.15 1211.29 L1627.56 1211.29 L1626.97 1211.29 L1626.39 1211.29 L1625.8 1211.29 L1625.22 1211.29 L1624.63 1211.29 L1624.04 1211.29 L1623.46 1211.29 L1622.87 1211.29 L1622.28 1211.29 L1621.7 1211.29 L1621.11 1211.29 L1620.52 1211.29 L1619.94 1211.29 L1619.35 1211.29 L1618.76 1211.29 L1618.18 1211.29 L1617.59 1211.29 L1617.01 1211.29 L1616.42 1211.29 L1615.83 1211.29 L1615.25 1211.29 L1614.66 1211.29 L1614.07 1211.29 L1613.49 1211.29 L1612.9 1211.29 L1612.31 1211.29 L1611.73 1211.29 L1611.14 1211.29 L1610.55 1211.29 L1609.97 1211.29 L1609.38 1211.29 L1608.8 1211.29 L1608.21 1211.29 L1607.62 1211.29 L1607.04 1211.29 L1606.45 1211.29 L1605.86 1211.29 L1605.28 1211.29 L1604.69 1211.29 L1604.1 1211.29 L1603.52 1211.29 L1602.93 1211.29 L1602.34 1211.29 L1601.76 1211.29 L1601.17 1211.29 L1600.59 1211.29 L1600 1211.29 L1599.41 1211.29 L1598.83 1211.29 L1598.24 1211.29 L1597.65 1211.29 L1597.07 1211.29 L1596.48 1211.29 L1595.89 1211.29 L1595.31 1211.29 L1594.72 1211.29 L1594.14 1211.29 L1593.55 1211.29 L1592.96 1211.29 L1592.38 1211.29 L1591.79 1211.29 L1591.2 1211.29 L1590.62 1211.29 L1590.03 1211.29 L1589.44 1211.29 L1588.86 1211.29 L1588.27 1211.29 L1587.68 1211.29 L1587.1 1211.29 L1586.51 1211.29 L1585.93 1211.29 L1585.34 1211.29 L1584.75 1211.29 L1584.17 1211.29 L1583.58 1211.29 L1582.99 1211.29 L1582.41 1211.29 L1581.82 1211.29 L1581.23 1211.29 L1580.65 1211.29 L1580.06 1211.29 L1579.47 1211.29 L1578.89 1211.29 L1578.3 1211.29 L1577.72 1211.29 L1577.13 1211.29 L1576.54 1211.29 L1575.96 1211.29 L1575.37 1211.29 L1574.78 1211.29 L1574.2 1211.29 L1573.61 1211.29 L1573.02 1211.29 L1572.44 1211.29 L1571.85 1211.29 L1571.27 1211.29 L1570.68 1211.29 L1570.09 1211.29 L1569.51 1211.29 L1568.92 1211.29 L1568.33 1211.29 L1567.75 1211.29 L1567.16 1211.29 L1566.57 1211.29 L1565.99 1211.29 L1565.4 1211.29 L1564.81 1211.29 L1564.23 1211.29 L1563.64 1211.29 L1563.06 1211.29 L1562.47 1211.29 L1561.88 1211.29 L1561.3 1211.29 L1560.71 1211.29 L1560.12 1211.29 L1559.54 1211.29 L1558.95 1211.29 L1558.36 1211.29 L1557.78 1211.29 L1557.19 1211.29 L1556.6 1211.29 L1556.02 1211.29 L1555.43 1211.29 L1554.85 1211.29 L1554.26 1211.29 L1553.67 1211.29 L1553.09 1211.29 L1552.5 1211.29 L1551.91 1211.29 L1551.33 1211.29 L1550.74 1211.29 L1550.15 1211.29 L1549.57 1211.29 L1548.98 1211.29 L1548.4 1211.29 L1547.81 1211.29 L1547.22 1211.29 L1546.64 1211.29 L1546.05 1211.29 L1545.46 1211.29 L1544.88 1211.29 L1544.29 1211.29 L1543.7 1211.29 L1543.12 1211.29 L1542.53 1211.29 L1541.94 1211.29 L1541.36 1211.29 L1540.77 1211.29 L1540.19 1211.29 L1539.6 1211.29 L1539.01 1211.29 L1538.43 1211.29 L1537.84 1211.29 L1537.25 1211.29 L1536.67 1211.29 L1536.08 1211.29 L1535.49 1211.29 L1534.91 1211.29 L1534.32 1211.29 L1533.73 1211.29 L1533.15 1211.29 L1532.56 1211.29 L1531.98 1211.29 L1531.39 1211.29 L1530.8 1211.29 L1530.22 1211.29 L1529.63 1211.29 L1529.04 1211.29 L1528.46 1211.29 L1527.87 1211.29 L1527.28 1211.29 L1526.7 1211.29 L1526.11 1211.29 L1525.52 1211.29 L1524.94 1211.29 L1524.35 1211.29 L1523.77 1211.29 L1523.18 1211.29 L1522.59 1211.29 L1522.01 1211.29 L1521.42 1211.29 L1520.83 1211.29 L1520.25 1211.29 L1519.66 1211.29 L1519.07 1211.29 L1518.49 1211.29 L1517.9 1211.29 L1517.32 1211.29 L1516.73 1211.29 L1516.14 1211.29 L1515.56 1211.29 L1514.97 1211.29 L1514.38 1211.29 L1513.8 1211.29 L1513.21 1211.29 L1512.62 1211.29 L1512.04 1211.29 L1511.45 1211.29 L1510.86 1211.29 L1510.28 1211.29 L1509.69 1211.29 L1509.11 1211.29 L1508.52 1211.29 L1507.93 1211.29 L1507.35 1211.29 L1506.76 1211.29 L1506.17 1211.29 L1505.59 1211.29 L1505 1211.29 L1504.41 1211.29 L1503.83 1211.29 L1503.24 1211.29 L1502.65 1211.29 L1502.07 1211.29 L1501.48 1211.29 L1500.9 1211.29 L1500.31 1211.29 L1499.72 1211.29 L1499.14 1211.29 L1498.55 1211.29 L1497.96 1211.29 L1497.38 1211.29 L1496.79 1211.29 L1496.2 1211.29 L1495.62 1211.29 L1495.03 1211.29 L1494.45 1211.29 L1493.86 1211.29 L1493.27 1211.29 L1492.69 1211.29 L1492.1 1211.29 L1491.51 1211.29 L1490.93 1211.29 L1490.34 1211.29 L1489.75 1211.29 L1489.17 1211.29 L1488.58 1211.29 L1487.99 1211.29 L1487.41 1211.29 L1486.82 1211.29 L1486.24 1211.29 L1485.65 1211.29 L1485.06 1211.29 L1484.48 1211.29 L1483.89 1211.29 L1483.3 1211.29 L1482.72 1211.29 L1482.13 1211.29 L1481.54 1211.29 L1480.96 1211.29 L1480.37 1211.29 L1479.78 1211.29 L1479.2 1211.29 L1478.61 1211.29 L1478.03 1211.29 L1477.44 1211.29 L1476.85 1211.29 L1476.27 1211.29 L1475.68 1211.29 L1475.09 1211.29 L1474.51 1211.29 L1473.92 1211.29 L1473.33 1211.29 L1472.75 1211.29 L1472.16 1211.29 L1471.57 1211.29 L1470.99 1211.29 L1470.4 1211.29 L1469.82 1211.29 L1469.23 1211.29 L1468.64 1211.29 L1468.06 1211.29 L1467.47 1211.29 L1466.88 1211.29 L1466.3 1211.29 L1465.71 1211.29 L1465.12 1211.29 L1464.54 1211.29 L1463.95 1211.29 L1463.37 1211.29 L1462.78 1211.29 L1462.19 1211.29 L1461.61 1211.29 L1461.02 1211.29 L1460.43 1211.29 L1459.85 1211.29 L1459.26 1211.29 L1458.67 1211.29 L1458.09 1211.29 L1457.5 1211.29 L1456.91 1211.29 L1456.33 1211.29 L1455.74 1211.29 L1455.16 1211.29 L1454.57 1211.29 L1453.98 1211.29 L1453.4 1211.29 L1452.81 1211.29 L1452.22 1211.29 L1451.64 1211.29 L1451.05 1211.29 L1450.46 1211.29 L1449.88 1211.29 L1449.29 1211.29 L1448.7 1211.29 L1448.12 1211.29 L1447.53 1211.29 L1446.95 1211.29 L1446.36 1211.29 L1445.77 1211.29 L1445.19 1211.29 L1444.6 1211.29 L1444.01 1211.29 L1443.43 1211.29 L1442.84 1211.29 L1442.25 1211.29 L1441.67 1211.29 L1441.08 1211.29 L1440.5 1211.29 L1439.91 1211.29 L1439.32 1211.29 L1438.74 1211.29 L1438.15 1211.29 L1437.56 1211.29 L1436.98 1211.29 L1436.39 1211.29 L1435.8 1211.29 L1435.22 1211.29 L1434.63 1211.29 L1434.04 1211.29 L1433.46 1211.29 L1432.87 1211.29 L1432.29 1211.29 L1431.7 1211.29 L1431.11 1211.29 L1430.53 1211.29 L1429.94 1211.29 L1429.35 1211.29 L1428.77 1211.29 L1428.18 1211.29 L1427.59 1211.29 L1427.01 1211.29 L1426.42 1211.29 L1425.83 1211.29 L1425.25 1211.29 L1424.66 1211.29 L1424.08 1211.29 L1423.49 1211.29 L1422.9 1211.29 L1422.32 1211.29 L1421.73 1211.29 L1421.14 1211.29 L1420.56 1211.29 L1419.97 1211.29 L1419.38 1211.29 L1418.8 1211.29 L1418.21 1211.29 L1417.63 1211.29 L1417.04 1211.29 L1416.45 1211.29 L1415.87 1211.29 L1415.28 1211.29 L1414.69 1211.29 L1414.11 1211.29 L1413.52 1211.29 L1412.93 1211.29 L1412.35 1211.29 L1411.76 1211.29 L1411.17 1211.29 L1410.59 1211.29 L1410 1211.29 L1409.42 1211.29 L1408.83 1211.29 L1408.24 1211.29 L1407.66 1211.29 L1407.07 1211.29 L1406.48 1211.29 L1405.9 1211.29 L1405.31 1211.29 L1404.72 1211.29 L1404.14 1211.29 L1403.55 1211.29 L1402.96 1211.29 L1402.38 1211.29 L1401.79 1211.29 L1401.21 1211.29 L1400.62 1211.29 L1400.03 1211.29 L1399.45 1211.29 L1398.86 1211.29 L1398.27 1211.29 L1397.69 1211.29 L1397.1 1211.29 L1396.51 1211.29 L1395.93 1211.29 L1395.34 1211.29 L1394.75 1211.29 L1394.17 1211.29 L1393.58 1211.29 L1393 1211.29 L1392.41 1211.29 L1391.82 1211.29 L1391.24 1211.29 L1390.65 1211.29 L1390.06 1211.29 L1389.48 1211.29 L1388.89 1211.29 L1388.3 1211.29 L1387.72 1211.29 L1387.13 1211.29 L1386.55 1211.29 L1385.96 1211.29 L1385.37 1211.29 L1384.79 1211.29 L1384.2 1211.29 L1383.61 1211.29 L1383.03 1211.29 L1382.44 1211.29 L1381.85 1211.29 L1381.27 1211.29 L1380.68 1211.29 L1380.09 1211.29 L1379.51 1211.29 L1378.92 1211.29 L1378.34 1211.29 L1377.75 1211.29 L1377.16 1211.29 L1376.58 1211.29 L1375.99 1211.29 L1375.4 1211.29 L1374.82 1211.29 L1374.23 1211.29 L1373.64 1211.29 L1373.06 1211.29 L1372.47 1211.29 L1371.88 1211.29 L1371.3 1211.29 L1370.71 1211.29 L1370.13 1211.29 L1369.54 1211.29 L1368.95 1211.29 L1368.37 1211.29 L1367.78 1211.29 L1367.19 1211.29 L1366.61 1211.29 L1366.02 1211.29 L1365.43 1211.29 L1364.85 1211.29 L1364.26 1211.29 L1363.68 1211.29 L1363.09 1211.29 L1362.5 1211.29 L1361.92 1211.29 L1361.33 1211.29 L1360.74 1211.29 L1360.16 1211.29 L1359.57 1211.29 L1358.98 1211.29 L1358.4 1211.29 L1357.81 1211.29 L1357.22 1211.29 L1356.64 1211.29 L1356.05 1211.29 L1355.47 1211.29 L1354.88 1211.29 L1354.29 1211.29 L1353.71 1211.29 L1353.12 1211.29 L1352.53 1211.29 L1351.95 1211.29 L1351.36 1211.29 L1350.77 1211.29 L1350.19 1211.29 L1349.6 1211.29 L1349.01 1211.29 L1348.43 1211.29 L1347.84 1211.29 L1347.26 1211.29 L1346.67 1211.29 L1346.08 1211.29 L1345.5 1211.29 L1344.91 1211.29 L1344.32 1211.29 L1343.74 1211.29 L1343.15 1211.29 L1342.56 1211.29 L1341.98 1211.29 L1341.39 1211.29 L1340.8 1211.29 L1340.22 1211.29 L1339.63 1211.29 L1339.05 1211.29 L1338.46 1211.29 L1337.87 1211.29 L1337.29 1211.29 L1336.7 1211.29 L1336.11 1211.29 L1335.53 1211.29 L1334.94 1211.29 L1334.35 1211.29 L1333.77 1211.29 L1333.18 1211.29 L1332.6 1211.29 L1332.01 1211.29 L1331.42 1211.29 L1330.84 1211.29 L1330.25 1211.29 L1329.66 1211.29 L1329.08 1211.29 L1328.49 1211.29 L1327.9 1211.29 L1327.32 1211.29 L1326.73 1211.29 L1326.14 1211.29 L1325.56 1211.29 L1324.97 1211.29 L1324.39 1211.29 L1323.8 1211.29 L1323.21 1211.29 L1322.63 1211.29 L1322.04 1211.29 L1321.45 1211.29 L1320.87 1211.29 L1320.28 1211.29 L1319.69 1211.29 L1319.11 1211.29 L1318.52 1211.29 L1317.93 1211.29 L1317.35 1211.29 L1316.76 1211.29 L1316.18 1211.29 L1315.59 1211.29 L1315 1211.29 L1314.42 1211.29 L1313.83 1211.29 L1313.24 1211.29 L1312.66 1211.29 L1312.07 1211.29 L1311.48 1211.29 L1310.9 1211.29 L1310.31 1211.29 L1309.73 1211.29 L1309.14 1211.29 L1308.55 1211.29 L1307.97 1211.29 L1307.38 1211.29 L1306.79 1211.29 L1306.21 1211.29 L1305.62 1211.29 L1305.03 1211.29 L1304.45 1211.29 L1303.86 1211.29 L1303.27 1211.29 L1302.69 1211.29 L1302.1 1211.29 L1301.52 1211.29 L1300.93 1211.29 L1300.34 1211.29 L1299.76 1211.29 L1299.17 1211.29 L1298.58 1211.29 L1298 1211.29 L1297.41 1211.29 L1296.82 1211.29 L1296.24 1211.29 L1295.65 1211.29 L1295.06 1211.29 L1294.48 1211.29 L1293.89 1211.29 L1293.31 1211.29 L1292.72 1211.29 L1292.13 1211.29 L1291.55 1211.29 L1290.96 1211.29 L1290.37 1211.29 L1289.79 1211.29 L1289.2 1211.29 L1288.61 1211.29 L1288.03 1211.29 L1287.44 1211.29 L1286.86 1211.29 L1286.27 1211.29 L1285.68 1211.29 L1285.1 1211.29 L1284.51 1211.29 L1283.92 1211.29 L1283.34 1211.29 L1282.75 1211.29 L1282.16 1211.29 L1281.58 1211.29 L1280.99 1211.29 L1280.4 1211.29 L1279.82 1211.29 L1279.23 1211.29 L1278.65 1211.29 L1278.06 1211.29 L1277.47 1211.29 L1276.89 1211.29 L1276.3 1211.29 L1275.71 1211.29 L1275.13 1211.29 L1274.54 1211.29 L1273.95 1211.29 L1273.37 1211.29 L1272.78 1211.29 L1272.19 1211.29 L1271.61 1211.29 L1271.02 1211.29 L1270.44 1211.29 L1269.85 1211.29 L1269.26 1211.29 L1268.68 1211.29 L1268.09 1211.29 L1267.5 1211.29 L1266.92 1211.29 L1266.33 1211.29 L1265.74 1211.29 L1265.16 1211.29 L1264.57 1211.29 L1263.98 1211.29 L1263.4 1211.29 L1262.81 1211.29 L1262.23 1211.29 L1261.64 1211.29 L1261.05 1211.29 L1260.47 1211.29 L1259.88 1211.29 L1259.29 1211.29 L1258.71 1211.29 L1258.12 1211.29 L1257.53 1211.29 L1256.95 1211.29 L1256.36 1211.29 L1255.78 1211.29 L1255.19 1211.29 L1254.6 1211.29 L1254.02 1211.29 L1253.43 1211.29 L1252.84 1211.29 L1252.26 1211.29 L1251.67 1211.29 L1251.08 1211.29 L1250.5 1211.29 L1249.91 1211.29 L1249.32 1211.29 L1248.74 1211.29 L1248.15 1211.29 L1247.57 1211.29 L1246.98 1211.29 L1246.39 1211.29 L1245.81 1211.29 L1245.22 1211.29 L1244.63 1211.29 L1244.05 1211.29 L1243.46 1211.29 L1242.87 1211.29 L1242.29 1211.29 L1241.7 1211.29 L1241.11 1211.29 L1240.53 1211.29 L1239.94 1211.29 L1239.36 1211.29 L1238.77 1211.29 L1238.18 1211.29 L1237.6 1211.29 L1237.01 1211.29 L1236.42 1211.29 L1235.84 1211.29 L1235.25 1211.29 L1234.66 1211.29 L1234.08 1211.29 L1233.49 1211.29 L1232.91 1211.29 L1232.32 1211.29 L1231.73 1211.29 L1231.15 1211.29 L1230.56 1211.29 L1229.97 1211.29 L1229.39 1211.29 L1228.8 1211.29 L1228.21 1211.29 L1227.63 1211.29 L1227.04 1211.29 L1226.45 1211.29 L1225.87 1211.29 L1225.28 1211.29 L1224.7 1211.29 L1224.11 1211.29 L1223.52 1211.29 L1222.94 1211.29 L1222.35 1211.29 L1221.76 1211.29 L1221.18 1211.29 L1220.59 1211.29 L1220 1211.29 L1219.42 1211.29 L1218.83 1211.29 L1218.24 1211.29 L1217.66 1211.29 L1217.07 1211.29 L1216.49 1211.29 L1215.9 1211.29 L1215.31 1211.29 L1214.73 1211.29 L1214.14 1211.29 L1213.55 1211.29 L1212.97 1211.29 L1212.38 1211.29 L1211.79 1211.29 L1211.21 1211.29 L1210.62 1211.29 L1210.03 1211.29 L1209.45 1211.29 L1208.86 1211.29 L1208.28 1211.29 L1207.69 1211.29 L1207.1 1211.29 L1206.52 1211.29 L1205.93 1211.29 L1205.34 1211.29 L1204.76 1211.29 L1204.17 1211.29 L1203.58 1211.29 L1203 1211.29 L1202.41 1211.29 L1201.83 1211.29 L1201.24 1211.29 L1200.65 1211.29 L1200.07 1211.29 L1199.48 1211.29 L1198.89 1211.29 L1198.31 1211.29 L1197.72 1211.29 L1197.13 1211.29 L1196.55 1211.29 L1195.96 1211.29 L1195.37 1211.29 L1194.79 1211.29 L1194.2 1211.29 L1193.62 1211.29 L1193.03 1211.29 L1192.44 1211.29 L1191.86 1211.29 L1191.27 1211.29 L1190.68 1211.29 L1190.1 1211.29 L1189.51 1211.29 L1188.92 1211.29 L1188.34 1211.29 L1187.75 1211.29 L1187.16 1211.29 L1186.58 1211.29 L1185.99 1211.29 L1185.41 1211.29 L1184.82 1211.29 L1184.23 1211.29 L1183.65 1211.29 L1183.06 1211.29 L1182.47 1211.29 L1181.89 1211.29 L1181.3 1211.29 L1180.71 1211.29 L1180.13 1211.29 L1179.54 1211.29 L1178.96 1211.29 L1178.37 1211.29 L1177.78 1211.29 L1177.2 1211.29 L1176.61 1211.29 L1176.02 1211.29 L1175.44 1211.29 L1174.85 1211.29 L1174.26 1211.29 L1173.68 1211.29 L1173.09 1211.29 L1172.5 1211.29 L1171.92 1211.29 L1171.33 1211.29 L1170.75 1211.29 L1170.16 1211.29 L1169.57 1211.29 L1168.99 1211.29 L1168.4 1211.29 L1167.81 1211.29 L1167.23 1211.29 L1166.64 1211.29 L1166.05 1211.29 L1165.47 1211.29 L1164.88 1211.29 L1164.29 1211.29 L1163.71 1211.29 L1163.12 1211.29 L1162.54 1211.29 L1161.95 1211.29 L1161.36 1211.29 L1160.78 1211.29 L1160.19 1211.29 L1159.6 1211.29 L1159.02 1211.29 L1158.43 1211.29 L1157.84 1211.29 L1157.26 1211.29 L1156.67 1211.29 L1156.09 1211.29 L1155.5 1211.29 L1154.91 1211.29 L1154.33 1211.29 L1153.74 1211.29 L1153.15 1211.29 L1152.57 1211.29 L1151.98 1211.29 L1151.39 1211.29 L1150.81 1211.29 L1150.22 1211.29 L1149.63 1211.29 L1149.05 1211.29 L1148.46 1211.29 L1147.88 1211.29 L1147.29 1211.29 L1146.7 1211.29 L1146.12 1211.29 L1145.53 1211.29 L1144.94 1211.29 L1144.36 1211.29 L1143.77 1211.29 L1143.18 1211.29 L1142.6 1211.29 L1142.01 1211.29 L1141.42 1211.29 L1140.84 1211.29 L1140.25 1211.29 L1139.67 1211.29 L1139.08 1211.29 L1138.49 1211.29 L1137.91 1211.29 L1137.32 1211.29 L1136.73 1211.29 L1136.15 1211.29 L1135.56 1211.29 L1134.97 1211.29 L1134.39 1211.29 L1133.8 1211.29 L1133.21 1211.29 L1132.63 1211.29 L1132.04 1211.29 L1131.46 1211.29 L1130.87 1211.29 L1130.28 1211.29 L1129.7 1211.29 L1129.11 1211.29 L1128.52 1211.29 L1127.94 1211.29 L1127.35 1211.29 L1126.76 1211.29 L1126.18 1211.29 L1125.59 1211.29 L1125.01 1211.29 L1124.42 1211.29 L1123.83 1211.29 L1123.25 1211.29 L1122.66 1211.29 L1122.07 1211.29 L1121.49 1211.29 L1120.9 1211.29 L1120.31 1211.29 L1119.73 1211.29 L1119.14 1211.29 L1118.55 1211.29 L1117.97 1211.29 L1117.38 1211.29 L1116.8 1211.29 L1116.21 1211.29 L1115.62 1211.29 L1115.04 1211.29 L1114.45 1211.29 L1113.86 1211.29 L1113.28 1211.29 L1112.69 1211.29 L1112.1 1211.29 L1111.52 1211.29 L1110.93 1211.29 L1110.34 1211.29 L1109.76 1211.29 L1109.17 1211.29 L1108.59 1211.29 L1108 1211.29 L1107.41 1211.29 L1106.83 1211.29 L1106.24 1211.29 L1105.65 1211.29 L1105.07 1211.29 L1104.48 1211.29 L1103.89 1211.29 L1103.31 1211.29 L1102.72 1211.29 L1102.14 1211.29 L1101.55 1211.29 L1100.96 1211.29 L1100.38 1211.29 L1099.79 1211.29 L1099.2 1211.29 L1098.62 1211.29 L1098.03 1211.29 L1097.44 1211.29 L1096.86 1211.29 L1096.27 1211.29 L1095.68 1211.29 L1095.1 1211.29 L1094.51 1211.29 L1093.93 1211.29 L1093.34 1211.29 L1092.75 1211.29 L1092.17 1211.29 L1091.58 1211.29 L1090.99 1211.29 L1090.41 1211.29 L1089.82 1211.29 L1089.23 1211.29 L1088.65 1211.29 L1088.06 1211.29 L1087.47 1211.29 L1086.89 1211.29 L1086.3 1211.29 L1085.72 1211.29 L1085.13 1211.29 L1084.54 1211.29 L1083.96 1211.29 L1083.37 1211.29 L1082.78 1211.29 L1082.2 1211.29 L1081.61 1211.29 L1081.02 1211.29 L1080.44 1211.29 L1079.85 1211.29 L1079.26 1211.29 L1078.68 1211.29 L1078.09 1211.29 L1077.51 1211.29 L1076.92 1211.29 L1076.33 1211.29 L1075.75 1211.29 L1075.16 1211.29 L1074.57 1211.29 L1073.99 1211.29 L1073.4 1211.29 L1072.81 1211.29 L1072.23 1211.29 L1071.64 1211.29 L1071.06 1211.29 L1070.47 1211.29 L1069.88 1211.29 L1069.3 1211.29 L1068.71 1211.29 L1068.12 1211.29 L1067.54 1211.29 L1066.95 1211.29 L1066.36 1211.29 L1065.78 1211.29 L1065.19 1211.29 L1064.6 1211.29 L1064.02 1211.29 L1063.43 1211.29 L1062.85 1211.29 L1062.26 1211.29 L1061.67 1211.29 L1061.09 1211.29 L1060.5 1211.29 L1059.91 1211.29 L1059.33 1211.29 L1058.74 1211.29 L1058.15 1211.29 L1057.57 1211.29 L1056.98 1211.29 L1056.39 1211.29 L1055.81 1211.29 L1055.22 1211.29 L1054.64 1211.29 L1054.05 1211.29 L1053.46 1211.29 L1052.88 1211.29 L1052.29 1211.29 L1051.7 1211.29 L1051.12 1211.29 L1050.53 1211.29 L1049.94 1211.29 L1049.36 1211.29 L1048.77 1211.29 L1048.19 1211.29 L1047.6 1211.29 L1047.01 1211.29 L1046.43 1211.29 L1045.84 1211.29 L1045.25 1211.29 L1044.67 1211.29 L1044.08 1211.29 L1043.49 1211.29 L1042.91 1211.29 L1042.32 1211.29 L1041.73 1211.29 L1041.15 1211.29 L1040.56 1211.29 L1039.98 1211.29 L1039.39 1211.29 L1038.8 1211.29 L1038.22 1211.29 L1037.63 1211.29 L1037.04 1211.29 L1036.46 1211.29 L1035.87 1211.29 L1035.28 1211.29 L1034.7 1211.29 L1034.11 1211.29 L1033.52 1211.29 L1032.94 1211.29 L1032.35 1211.29 L1031.77 1211.29 L1031.18 1211.29 L1030.59 1211.29 L1030.01 1211.29 L1029.42 1211.29 L1028.83 1211.29 L1028.25 1211.29 L1027.66 1211.29 L1027.07 1211.29 L1026.49 1211.29 L1025.9 1211.29 L1025.32 1211.29 L1024.73 1211.29 L1024.14 1211.29 L1023.56 1211.29 L1022.97 1211.29 L1022.38 1211.29 L1021.8 1211.29 L1021.21 1211.29 L1020.62 1211.29 L1020.04 1211.29 L1019.45 1211.29 L1018.86 1211.29 L1018.28 1211.29 L1017.69 1211.29 L1017.11 1211.29 L1016.52 1211.29 L1015.93 1211.29 L1015.35 1211.29 L1014.76 1211.29 L1014.17 1211.29 L1013.59 1211.29 L1013 1211.29 L1012.41 1211.29 L1011.83 1211.29 L1011.24 1211.29 L1010.65 1211.29 L1010.07 1211.29 L1009.48 1211.29 L1008.9 1211.29 L1008.31 1211.29 L1007.72 1211.29 L1007.14 1211.29 L1006.55 1211.29 L1005.96 1211.29 L1005.38 1211.29 L1004.79 1211.29 L1004.2 1211.29 L1003.62 1211.29 L1003.03 1211.29 L1002.44 1211.29 L1001.86 1211.29 L1001.27 1211.29 L1000.69 1211.29 L1000.1 1211.29 L999.513 1211.29 L998.926 1211.29 L998.34 1211.29 L997.754 1211.29 L997.167 1211.29 L996.581 1211.29 L995.994 1211.29 L995.408 1211.29 L994.822 1211.29 L994.235 1211.29 L993.649 1211.29 L993.062 1211.29 L992.476 1211.29 L991.889 1211.29 L991.303 1211.29 L990.717 1211.29 L990.13 1211.29 L989.544 1211.29 L988.957 1211.29 L988.371 1211.29 L987.785 1211.29 L987.198 1211.29 L986.612 1211.29 L986.025 1211.29  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.34 986.612,1211.34 987.198,1211.34 987.785,1211.34 988.371,1211.34 988.957,1211.34 989.544,1211.34 990.13,1211.34 990.717,1211.34 991.303,1211.34 991.889,1211.34 992.476,1211.34 993.062,1211.34 993.649,1211.34 994.235,1211.34 994.822,1211.34 995.408,1211.34 995.994,1211.34 996.581,1211.34 997.167,1211.34 997.754,1211.34 998.34,1211.34 998.926,1211.34 999.513,1211.34 1000.1,1211.34 1000.69,1211.34 1001.27,1211.34 1001.86,1211.34 1002.44,1211.34 1003.03,1211.34 1003.62,1211.34 1004.2,1211.34 1004.79,1211.34 1005.38,1211.34 1005.96,1211.34 1006.55,1211.34 1007.14,1211.34 1007.72,1211.34 1008.31,1211.34 1008.9,1211.34 1009.48,1211.34 1010.07,1211.34 1010.65,1211.34 1011.24,1211.34 1011.83,1211.34 1012.41,1211.34 1013,1211.34 1013.59,1211.34 1014.17,1211.34 1014.76,1211.34 1015.35,1211.34 1015.93,1211.34 1016.52,1211.34 1017.11,1211.34 1017.69,1211.34 1018.28,1211.34 1018.86,1211.34 1019.45,1211.34 1020.04,1211.34 1020.62,1211.34 1021.21,1211.34 1021.8,1211.34 1022.38,1211.34 1022.97,1211.34 1023.56,1211.34 1024.14,1211.34 1024.73,1211.34 1025.32,1211.34 1025.9,1211.34 1026.49,1211.34 1027.07,1211.34 1027.66,1211.34 1028.25,1211.34 1028.83,1211.34 1029.42,1211.34 1030.01,1211.34 1030.59,1211.34 1031.18,1211.34 1031.77,1211.34 1032.35,1211.34 1032.94,1211.34 1033.52,1211.34 1034.11,1211.34 1034.7,1211.34 1035.28,1211.34 1035.87,1211.34 1036.46,1211.34 1037.04,1211.34 1037.63,1211.34 1038.22,1211.34 1038.8,1211.34 1039.39,1211.34 1039.98,1211.34 1040.56,1211.34 1041.15,1211.34 1041.73,1211.34 1042.32,1211.34 1042.91,1211.34 1043.49,1211.34 1044.08,1211.34 1044.67,1211.34 1045.25,1211.34 1045.84,1211.34 1046.43,1211.34 1047.01,1211.34 1047.6,1211.34 1048.19,1211.34 1048.77,1211.34 1049.36,1211.34 1049.94,1211.34 1050.53,1211.34 1051.12,1211.34 1051.7,1211.34 1052.29,1211.34 1052.88,1211.34 1053.46,1211.34 1054.05,1211.34 1054.64,1211.34 1055.22,1211.34 1055.81,1211.34 1056.39,1211.34 1056.98,1211.34 1057.57,1211.34 1058.15,1211.34 1058.74,1211.34 1059.33,1211.34 1059.91,1211.34 1060.5,1211.34 1061.09,1211.34 1061.67,1211.34 1062.26,1211.34 1062.85,1211.34 1063.43,1211.34 1064.02,1211.34 1064.6,1211.34 1065.19,1211.34 1065.78,1211.34 1066.36,1211.34 1066.95,1211.34 1067.54,1211.34 1068.12,1211.34 1068.71,1211.34 1069.3,1211.34 1069.88,1211.34 1070.47,1211.34 1071.06,1211.34 1071.64,1211.34 1072.23,1211.34 1072.81,1211.34 1073.4,1211.34 1073.99,1211.34 1074.57,1211.34 1075.16,1211.34 1075.75,1211.34 1076.33,1211.34 1076.92,1211.34 1077.51,1211.34 1078.09,1211.34 1078.68,1211.34 1079.26,1211.34 1079.85,1211.34 1080.44,1211.34 1081.02,1211.34 1081.61,1211.34 1082.2,1211.34 1082.78,1211.34 1083.37,1211.34 1083.96,1211.34 1084.54,1211.34 1085.13,1211.34 1085.72,1211.34 1086.3,1211.34 1086.89,1211.34 1087.47,1211.34 1088.06,1211.34 1088.65,1211.34 1089.23,1211.34 1089.82,1211.34 1090.41,1211.34 1090.99,1211.34 1091.58,1211.34 1092.17,1211.34 1092.75,1211.34 1093.34,1211.34 1093.93,1211.34 1094.51,1211.34 1095.1,1211.34 1095.68,1211.34 1096.27,1211.34 1096.86,1211.34 1097.44,1211.34 1098.03,1211.34 1098.62,1211.34 1099.2,1211.34 1099.79,1211.34 1100.38,1211.34 1100.96,1211.34 1101.55,1211.34 1102.14,1211.34 1102.72,1211.34 1103.31,1211.34 1103.89,1211.34 1104.48,1211.34 1105.07,1211.34 1105.65,1211.34 1106.24,1211.34 1106.83,1211.34 1107.41,1211.34 1108,1211.34 1108.59,1211.34 1109.17,1211.34 1109.76,1211.34 1110.34,1211.34 1110.93,1211.34 1111.52,1211.34 1112.1,1211.34 1112.69,1211.34 1113.28,1211.34 1113.86,1211.34 1114.45,1211.34 1115.04,1211.34 1115.62,1211.34 1116.21,1211.34 1116.8,1211.34 1117.38,1211.34 1117.97,1211.34 1118.55,1211.34 1119.14,1211.34 1119.73,1211.34 1120.31,1211.34 1120.9,1211.34 1121.49,1211.34 1122.07,1211.34 1122.66,1211.34 1123.25,1211.34 1123.83,1211.34 1124.42,1211.34 1125.01,1211.34 1125.59,1211.34 1126.18,1211.34 1126.76,1211.34 1127.35,1211.34 1127.94,1211.34 1128.52,1211.34 1129.11,1211.34 1129.7,1211.34 1130.28,1211.34 1130.87,1211.34 1131.46,1211.34 1132.04,1211.34 1132.63,1211.34 1133.21,1211.34 1133.8,1211.34 1134.39,1211.34 1134.97,1211.34 1135.56,1211.34 1136.15,1211.34 1136.73,1211.34 1137.32,1211.34 1137.91,1211.34 1138.49,1211.34 1139.08,1211.34 1139.67,1211.34 1140.25,1211.34 1140.84,1211.34 1141.42,1211.34 1142.01,1211.34 1142.6,1211.34 1143.18,1211.34 1143.77,1211.34 1144.36,1211.34 1144.94,1211.34 1145.53,1211.34 1146.12,1211.34 1146.7,1211.34 1147.29,1211.34 1147.88,1211.34 1148.46,1211.34 1149.05,1211.34 1149.63,1211.34 1150.22,1211.34 1150.81,1211.34 1151.39,1211.34 1151.98,1211.34 1152.57,1211.34 1153.15,1211.34 1153.74,1211.34 1154.33,1211.34 1154.91,1211.34 1155.5,1211.34 1156.09,1211.34 1156.67,1211.34 1157.26,1211.34 1157.84,1211.34 1158.43,1211.34 1159.02,1211.34 1159.6,1211.34 1160.19,1211.34 1160.78,1211.34 1161.36,1211.34 1161.95,1211.34 1162.54,1211.34 1163.12,1211.34 1163.71,1211.34 1164.29,1211.34 1164.88,1211.34 1165.47,1211.34 1166.05,1211.34 1166.64,1211.34 1167.23,1211.34 1167.81,1211.34 1168.4,1211.34 1168.99,1211.34 1169.57,1211.34 1170.16,1211.34 1170.75,1211.34 1171.33,1211.34 1171.92,1211.34 1172.5,1211.34 1173.09,1211.34 1173.68,1211.34 1174.26,1211.34 1174.85,1211.34 1175.44,1211.34 1176.02,1211.34 1176.61,1211.34 1177.2,1211.34 1177.78,1211.34 1178.37,1211.34 1178.96,1211.34 1179.54,1211.34 1180.13,1211.34 1180.71,1211.34 1181.3,1211.34 1181.89,1211.34 1182.47,1211.34 1183.06,1211.34 1183.65,1211.34 1184.23,1211.34 1184.82,1211.34 1185.41,1211.34 1185.99,1211.34 1186.58,1211.34 1187.16,1211.34 1187.75,1211.34 1188.34,1211.34 1188.92,1211.34 1189.51,1211.34 1190.1,1211.34 1190.68,1211.34 1191.27,1211.34 1191.86,1211.34 1192.44,1211.34 1193.03,1211.34 1193.62,1211.34 1194.2,1211.34 1194.79,1211.34 1195.37,1211.34 1195.96,1211.34 1196.55,1211.34 1197.13,1211.34 1197.72,1211.34 1198.31,1211.34 1198.89,1211.34 1199.48,1211.34 1200.07,1211.34 1200.65,1211.34 1201.24,1211.34 1201.83,1211.34 1202.41,1211.34 1203,1211.34 1203.58,1211.34 1204.17,1211.34 1204.76,1211.34 1205.34,1211.34 1205.93,1211.34 1206.52,1211.34 1207.1,1211.34 1207.69,1211.34 1208.28,1211.34 1208.86,1211.34 1209.45,1211.34 1210.03,1211.34 1210.62,1211.34 1211.21,1211.34 1211.79,1211.34 1212.38,1211.34 1212.97,1211.34 1213.55,1211.34 1214.14,1211.34 1214.73,1211.34 1215.31,1211.34 1215.9,1211.34 1216.49,1211.34 1217.07,1211.34 1217.66,1211.34 1218.24,1211.34 1218.83,1211.34 1219.42,1211.34 1220,1211.34 1220.59,1211.34 1221.18,1211.34 1221.76,1211.34 1222.35,1211.34 1222.94,1211.34 1223.52,1211.34 1224.11,1211.34 1224.7,1211.34 1225.28,1211.34 1225.87,1211.34 1226.45,1211.34 1227.04,1211.34 1227.63,1211.34 1228.21,1211.34 1228.8,1211.34 1229.39,1211.34 1229.97,1211.34 1230.56,1211.34 1231.15,1211.34 1231.73,1211.34 1232.32,1211.34 1232.91,1211.34 1233.49,1211.34 1234.08,1211.34 1234.66,1211.34 1235.25,1211.34 1235.84,1211.34 1236.42,1211.34 1237.01,1211.34 1237.6,1211.34 1238.18,1211.34 1238.77,1211.34 1239.36,1211.34 1239.94,1211.34 1240.53,1211.34 1241.11,1211.34 1241.7,1211.34 1242.29,1211.34 1242.87,1211.34 1243.46,1211.34 1244.05,1211.34 1244.63,1211.34 1245.22,1211.34 1245.81,1211.34 1246.39,1211.34 1246.98,1211.34 1247.57,1211.34 1248.15,1211.34 1248.74,1211.34 1249.32,1211.34 1249.91,1211.34 1250.5,1211.34 1251.08,1211.34 1251.67,1211.34 1252.26,1211.34 1252.84,1211.34 1253.43,1211.34 1254.02,1211.34 1254.6,1211.34 1255.19,1211.34 1255.78,1211.34 1256.36,1211.34 1256.95,1211.34 1257.53,1211.34 1258.12,1211.34 1258.71,1211.34 1259.29,1211.34 1259.88,1211.34 1260.47,1211.34 1261.05,1211.34 1261.64,1211.34 1262.23,1211.34 1262.81,1211.34 1263.4,1211.34 1263.98,1211.34 1264.57,1211.34 1265.16,1211.34 1265.74,1211.34 1266.33,1211.34 1266.92,1211.34 1267.5,1211.34 1268.09,1211.34 1268.68,1211.34 1269.26,1211.34 1269.85,1211.34 1270.44,1211.34 1271.02,1211.34 1271.61,1211.34 1272.19,1211.34 1272.78,1211.34 1273.37,1211.34 1273.95,1211.34 1274.54,1211.34 1275.13,1211.34 1275.71,1211.34 1276.3,1211.34 1276.89,1211.34 1277.47,1211.34 1278.06,1211.34 1278.65,1211.34 1279.23,1211.34 1279.82,1211.34 1280.4,1211.34 1280.99,1211.34 1281.58,1211.34 1282.16,1211.34 1282.75,1211.34 1283.34,1211.34 1283.92,1211.34 1284.51,1211.34 1285.1,1211.34 1285.68,1211.34 1286.27,1211.34 1286.86,1211.34 1287.44,1211.34 1288.03,1211.34 1288.61,1211.34 1289.2,1211.34 1289.79,1211.34 1290.37,1211.34 1290.96,1211.34 1291.55,1211.34 1292.13,1211.34 1292.72,1211.34 1293.31,1211.34 1293.89,1211.34 1294.48,1211.34 1295.06,1211.34 1295.65,1211.34 1296.24,1211.34 1296.82,1211.34 1297.41,1211.34 1298,1211.34 1298.58,1211.34 1299.17,1211.34 1299.76,1211.34 1300.34,1211.34 1300.93,1211.34 1301.52,1211.34 1302.1,1211.34 1302.69,1211.34 1303.27,1211.34 1303.86,1211.34 1304.45,1211.34 1305.03,1211.34 1305.62,1211.34 1306.21,1211.34 1306.79,1211.34 1307.38,1211.34 1307.97,1211.34 1308.55,1211.34 1309.14,1211.34 1309.73,1211.34 1310.31,1211.34 1310.9,1211.34 1311.48,1211.34 1312.07,1211.34 1312.66,1211.34 1313.24,1211.34 1313.83,1211.34 1314.42,1211.34 1315,1211.34 1315.59,1211.34 1316.18,1211.34 1316.76,1211.34 1317.35,1211.34 1317.93,1211.34 1318.52,1211.34 1319.11,1211.34 1319.69,1211.34 1320.28,1211.34 1320.87,1211.34 1321.45,1211.34 1322.04,1211.34 1322.63,1211.34 1323.21,1211.34 1323.8,1211.34 1324.39,1211.34 1324.97,1211.34 1325.56,1211.34 1326.14,1211.34 1326.73,1211.34 1327.32,1211.34 1327.9,1211.34 1328.49,1211.34 1329.08,1211.34 1329.66,1211.34 1330.25,1211.34 1330.84,1211.34 1331.42,1211.34 1332.01,1211.34 1332.6,1211.34 1333.18,1211.34 1333.77,1211.34 1334.35,1211.34 1334.94,1211.34 1335.53,1211.34 1336.11,1211.34 1336.7,1211.34 1337.29,1211.34 1337.87,1211.34 1338.46,1211.34 1339.05,1211.34 1339.63,1211.34 1340.22,1211.34 1340.8,1211.34 1341.39,1211.34 1341.98,1211.34 1342.56,1211.34 1343.15,1211.34 1343.74,1211.34 1344.32,1211.34 1344.91,1211.34 1345.5,1211.34 1346.08,1211.34 1346.67,1211.34 1347.26,1211.34 1347.84,1211.34 1348.43,1211.34 1349.01,1211.34 1349.6,1211.34 1350.19,1211.34 1350.77,1211.34 1351.36,1211.34 1351.95,1211.34 1352.53,1211.34 1353.12,1211.34 1353.71,1211.34 1354.29,1211.34 1354.88,1211.34 1355.47,1211.34 1356.05,1211.34 1356.64,1211.34 1357.22,1211.34 1357.81,1211.34 1358.4,1211.34 1358.98,1211.34 1359.57,1211.34 1360.16,1211.34 1360.74,1211.34 1361.33,1211.34 1361.92,1211.34 1362.5,1211.34 1363.09,1211.34 1363.68,1211.34 1364.26,1211.34 1364.85,1211.34 1365.43,1211.34 1366.02,1211.34 1366.61,1211.34 1367.19,1211.34 1367.78,1211.34 1368.37,1211.34 1368.95,1211.34 1369.54,1211.34 1370.13,1211.34 1370.71,1211.34 1371.3,1211.34 1371.88,1211.34 1372.47,1211.34 1373.06,1211.34 1373.64,1211.34 1374.23,1211.34 1374.82,1211.34 1375.4,1211.34 1375.99,1211.34 1376.58,1211.34 1377.16,1211.34 1377.75,1211.34 1378.34,1211.34 1378.92,1211.34 1379.51,1211.34 1380.09,1211.34 1380.68,1211.34 1381.27,1211.34 1381.85,1211.34 1382.44,1211.34 1383.03,1211.34 1383.61,1211.34 1384.2,1211.34 1384.79,1211.34 1385.37,1211.34 1385.96,1211.34 1386.55,1211.34 1387.13,1211.34 1387.72,1211.34 1388.3,1211.34 1388.89,1211.34 1389.48,1211.34 1390.06,1211.34 1390.65,1211.34 1391.24,1211.34 1391.82,1211.34 1392.41,1211.34 1393,1211.34 1393.58,1211.34 1394.17,1211.34 1394.75,1211.34 1395.34,1211.34 1395.93,1211.34 1396.51,1211.34 1397.1,1211.34 1397.69,1211.34 1398.27,1211.34 1398.86,1211.34 1399.45,1211.34 1400.03,1211.34 1400.62,1211.34 1401.21,1211.34 1401.79,1211.34 1402.38,1211.34 1402.96,1211.34 1403.55,1211.34 1404.14,1211.34 1404.72,1211.34 1405.31,1211.34 1405.9,1211.34 1406.48,1211.34 1407.07,1211.34 1407.66,1211.34 1408.24,1211.34 1408.83,1211.34 1409.42,1211.34 1410,1211.34 1410.59,1211.34 1411.17,1211.34 1411.76,1211.34 1412.35,1211.34 1412.93,1211.34 1413.52,1211.34 1414.11,1211.34 1414.69,1211.34 1415.28,1211.34 1415.87,1211.34 1416.45,1211.34 1417.04,1211.34 1417.63,1211.34 1418.21,1211.34 1418.8,1211.34 1419.38,1211.34 1419.97,1211.34 1420.56,1211.34 1421.14,1211.34 1421.73,1211.34 1422.32,1211.34 1422.9,1211.34 1423.49,1211.34 1424.08,1211.34 1424.66,1211.34 1425.25,1211.34 1425.83,1211.34 1426.42,1211.34 1427.01,1211.34 1427.59,1211.34 1428.18,1211.34 1428.77,1211.34 1429.35,1211.34 1429.94,1211.34 1430.53,1211.34 1431.11,1211.34 1431.7,1211.34 1432.29,1211.34 1432.87,1211.34 1433.46,1211.34 1434.04,1211.34 1434.63,1211.34 1435.22,1211.34 1435.8,1211.34 1436.39,1211.34 1436.98,1211.34 1437.56,1211.34 1438.15,1211.34 1438.74,1211.34 1439.32,1211.34 1439.91,1211.34 1440.5,1211.34 1441.08,1211.34 1441.67,1211.34 1442.25,1211.34 1442.84,1211.34 1443.43,1211.34 1444.01,1211.34 1444.6,1211.34 1445.19,1211.34 1445.77,1211.34 1446.36,1211.34 1446.95,1211.34 1447.53,1211.34 1448.12,1211.34 1448.7,1211.34 1449.29,1211.34 1449.88,1211.34 1450.46,1211.34 1451.05,1211.34 1451.64,1211.34 1452.22,1211.34 1452.81,1211.34 1453.4,1211.34 1453.98,1211.34 1454.57,1211.34 1455.16,1211.34 1455.74,1211.34 1456.33,1211.34 1456.91,1211.34 1457.5,1211.34 1458.09,1211.34 1458.67,1211.34 1459.26,1211.34 1459.85,1211.34 1460.43,1211.34 1461.02,1211.34 1461.61,1211.34 1462.19,1211.34 1462.78,1211.34 1463.37,1211.34 1463.95,1211.34 1464.54,1211.34 1465.12,1211.34 1465.71,1211.34 1466.3,1211.34 1466.88,1211.34 1467.47,1211.34 1468.06,1211.34 1468.64,1211.34 1469.23,1211.34 1469.82,1211.34 1470.4,1211.34 1470.99,1211.34 1471.57,1211.34 1472.16,1211.34 1472.75,1211.34 1473.33,1211.34 1473.92,1211.34 1474.51,1211.34 1475.09,1211.34 1475.68,1211.34 1476.27,1211.34 1476.85,1211.34 1477.44,1211.34 1478.03,1211.34 1478.61,1211.34 1479.2,1211.34 1479.78,1211.34 1480.37,1211.34 1480.96,1211.34 1481.54,1211.34 1482.13,1211.34 1482.72,1211.34 1483.3,1211.34 1483.89,1211.34 1484.48,1211.34 1485.06,1211.34 1485.65,1211.34 1486.24,1211.34 1486.82,1211.34 1487.41,1211.34 1487.99,1211.34 1488.58,1211.34 1489.17,1211.34 1489.75,1211.34 1490.34,1211.34 1490.93,1211.34 1491.51,1211.34 1492.1,1211.34 1492.69,1211.34 1493.27,1211.34 1493.86,1211.34 1494.45,1211.34 1495.03,1211.34 1495.62,1211.34 1496.2,1211.34 1496.79,1211.34 1497.38,1211.34 1497.96,1211.34 1498.55,1211.34 1499.14,1211.34 1499.72,1211.34 1500.31,1211.34 1500.9,1211.34 1501.48,1211.34 1502.07,1211.34 1502.65,1211.34 1503.24,1211.34 1503.83,1211.34 1504.41,1211.34 1505,1211.34 1505.59,1211.34 1506.17,1211.34 1506.76,1211.34 1507.35,1211.34 1507.93,1211.34 1508.52,1211.34 1509.11,1211.34 1509.69,1211.34 1510.28,1211.34 1510.86,1211.34 1511.45,1211.34 1512.04,1211.34 1512.62,1211.34 1513.21,1211.34 1513.8,1211.34 1514.38,1211.34 1514.97,1211.34 1515.56,1211.34 1516.14,1211.34 1516.73,1211.34 1517.32,1211.34 1517.9,1211.34 1518.49,1211.34 1519.07,1211.34 1519.66,1211.34 1520.25,1211.34 1520.83,1211.34 1521.42,1211.34 1522.01,1211.34 1522.59,1211.34 1523.18,1211.34 1523.77,1211.34 1524.35,1211.34 1524.94,1211.34 1525.52,1211.34 1526.11,1211.34 1526.7,1211.34 1527.28,1211.34 1527.87,1211.34 1528.46,1211.34 1529.04,1211.34 1529.63,1211.34 1530.22,1211.34 1530.8,1211.34 1531.39,1211.34 1531.98,1211.34 1532.56,1211.34 1533.15,1211.34 1533.73,1211.34 1534.32,1211.34 1534.91,1211.34 1535.49,1211.34 1536.08,1211.34 1536.67,1211.34 1537.25,1211.34 1537.84,1211.34 1538.43,1211.34 1539.01,1211.34 1539.6,1211.34 1540.19,1211.34 1540.77,1211.34 1541.36,1211.34 1541.94,1211.34 1542.53,1211.34 1543.12,1211.34 1543.7,1211.34 1544.29,1211.34 1544.88,1211.34 1545.46,1211.34 1546.05,1211.34 1546.64,1211.34 1547.22,1211.34 1547.81,1211.34 1548.4,1211.34 1548.98,1211.34 1549.57,1211.34 1550.15,1211.34 1550.74,1211.34 1551.33,1211.34 1551.91,1211.34 1552.5,1211.34 1553.09,1211.34 1553.67,1211.34 1554.26,1211.34 1554.85,1211.34 1555.43,1211.34 1556.02,1211.34 1556.6,1211.34 1557.19,1211.34 1557.78,1211.34 1558.36,1211.34 1558.95,1211.34 1559.54,1211.34 1560.12,1211.34 1560.71,1211.34 1561.3,1211.34 1561.88,1211.34 1562.47,1211.34 1563.06,1211.34 1563.64,1211.34 1564.23,1211.34 1564.81,1211.34 1565.4,1211.34 1565.99,1211.34 1566.57,1211.34 1567.16,1211.34 1567.75,1211.34 1568.33,1211.34 1568.92,1211.34 1569.51,1211.34 1570.09,1211.34 1570.68,1211.34 1571.27,1211.34 1571.85,1211.34 1572.44,1211.34 1573.02,1211.34 1573.61,1211.34 1574.2,1211.34 1574.78,1211.34 1575.37,1211.34 1575.96,1211.34 1576.54,1211.34 1577.13,1211.34 1577.72,1211.34 1578.3,1211.34 1578.89,1211.34 1579.47,1211.34 1580.06,1211.34 1580.65,1211.34 1581.23,1211.34 1581.82,1211.34 1582.41,1211.34 1582.99,1211.34 1583.58,1211.34 1584.17,1211.34 1584.75,1211.34 1585.34,1211.34 1585.93,1211.34 1586.51,1211.34 1587.1,1211.34 1587.68,1211.34 1588.27,1211.34 1588.86,1211.34 1589.44,1211.34 1590.03,1211.34 1590.62,1211.34 1591.2,1211.34 1591.79,1211.34 1592.38,1211.34 1592.96,1211.34 1593.55,1211.34 1594.14,1211.34 1594.72,1211.34 1595.31,1211.34 1595.89,1211.34 1596.48,1211.34 1597.07,1211.34 1597.65,1211.34 1598.24,1211.34 1598.83,1211.34 1599.41,1211.34 1600,1211.34 1600.59,1211.34 1601.17,1211.34 1601.76,1211.34 1602.34,1211.34 1602.93,1211.34 1603.52,1211.34 1604.1,1211.34 1604.69,1211.34 1605.28,1211.34 1605.86,1211.34 1606.45,1211.34 1607.04,1211.34 1607.62,1211.34 1608.21,1211.34 1608.8,1211.34 1609.38,1211.34 1609.97,1211.34 1610.55,1211.34 1611.14,1211.34 1611.73,1211.34 1612.31,1211.34 1612.9,1211.34 1613.49,1211.34 1614.07,1211.34 1614.66,1211.34 1615.25,1211.34 1615.83,1211.34 1616.42,1211.34 1617.01,1211.34 1617.59,1211.34 1618.18,1211.34 1618.76,1211.34 1619.35,1211.34 1619.94,1211.34 1620.52,1211.34 1621.11,1211.34 1621.7,1211.34 1622.28,1211.34 1622.87,1211.34 1623.46,1211.34 1624.04,1211.34 1624.63,1211.34 1625.22,1211.34 1625.8,1211.34 1626.39,1211.34 1626.97,1211.34 1627.56,1211.34 1628.15,1211.34 1628.73,1211.34 1629.32,1211.34 1629.91,1211.34 1630.49,1211.34 1631.08,1211.34 1631.67,1211.34 1632.25,1211.34 1632.84,1211.34 1633.42,1211.34 1634.01,1211.34 1634.6,1211.34 1635.18,1211.34 1635.77,1211.34 1636.36,1211.34 1636.94,1211.34 1637.53,1211.34 1638.12,1211.34 1638.7,1211.34 1639.29,1211.34 1639.88,1211.34 1640.46,1211.34 1641.05,1211.34 1641.63,1211.34 1642.22,1211.34 1642.81,1211.34 1643.39,1211.34 1643.98,1211.34 1644.57,1211.34 1645.15,1211.34 1645.74,1211.34 1646.33,1211.34 1646.91,1211.34 1647.5,1211.34 1648.09,1211.34 1648.67,1211.34 1649.26,1211.34 1649.84,1211.34 1650.43,1211.34 1651.02,1211.34 1651.6,1211.34 1652.19,1211.34 1652.78,1211.34 1653.36,1211.34 1653.95,1211.34 1654.54,1211.34 1655.12,1211.34 1655.71,1211.34 1656.29,1211.34 1656.88,1211.34 1657.47,1211.34 1658.05,1211.34 1658.64,1211.34 1659.23,1211.34 1659.81,1211.34 1660.4,1211.34 1660.99,1211.34 1661.57,1211.34 1662.16,1211.34 1662.75,1211.34 1663.33,1211.34 1663.92,1211.34 1664.5,1211.34 1665.09,1211.34 1665.68,1211.34 1666.26,1211.34 1666.85,1211.34 1667.44,1211.34 1668.02,1211.34 1668.61,1211.34 1669.2,1211.34 1669.78,1211.34 1670.37,1211.34 1670.96,1211.34 1671.54,1211.34 1672.13,1211.34 1672.71,1211.34 1673.3,1211.34 1673.89,1211.34 1674.47,1211.34 1675.06,1211.34 1675.65,1211.34 1676.23,1211.34 1676.82,1211.34 1677.41,1211.34 1677.99,1211.34 1678.58,1211.34 1679.17,1211.34 1679.75,1211.34 1680.34,1211.34 1680.92,1211.34 1681.51,1211.34 1682.1,1211.34 1682.68,1211.34 1683.27,1211.34 1683.86,1211.34 1684.44,1211.34 1685.03,1211.34 1685.62,1211.34 1686.2,1211.34 1686.79,1211.34 1687.37,1211.34 1687.96,1211.34 1688.55,1211.34 1689.13,1211.34 1689.72,1211.34 1690.31,1211.34 1690.89,1211.34 1691.48,1211.34 1692.07,1211.34 1692.65,1211.34 1693.24,1211.34 1693.83,1211.34 1694.41,1211.34 1695,1211.34 1695.58,1211.34 1696.17,1211.34 1696.76,1211.34 1697.34,1211.34 1697.93,1211.34 1698.52,1211.34 1699.1,1211.34 1699.69,1211.34 1700.28,1211.34 1700.86,1211.34 1701.45,1211.34 1702.04,1211.34 1702.62,1211.34 1703.21,1211.34 1703.79,1211.34 1704.38,1211.34 1704.97,1211.34 1705.55,1211.34 1706.14,1211.34 1706.73,1211.34 1707.31,1211.34 1707.9,1211.34 1708.49,1211.34 1709.07,1211.34 1709.66,1211.34 1710.24,1211.34 1710.83,1211.34 1711.42,1211.34 1712,1211.34 1712.59,1211.34 1713.18,1211.34 1713.76,1211.34 1714.35,1211.34 1714.94,1211.34 1715.52,1211.34 1716.11,1211.34 1716.7,1211.34 1717.28,1211.34 1717.87,1211.34 1718.45,1211.34 1719.04,1211.34 1719.63,1211.34 1720.21,1211.34 1720.8,1211.34 1721.39,1211.34 1721.97,1211.34 1722.56,1211.34 1723.15,1211.34 1723.73,1211.34 1724.32,1211.34 1724.91,1211.34 1725.49,1211.34 1726.08,1211.34 1726.66,1211.34 1727.25,1211.34 1727.84,1211.34 1728.42,1211.34 1729.01,1211.34 1729.6,1211.34 1730.18,1211.34 1730.77,1211.34 1731.36,1211.34 1731.94,1211.34 1732.53,1211.34 1733.11,1211.34 1733.7,1211.34 1734.29,1211.34 1734.87,1211.34 1735.46,1211.34 1736.05,1211.34 1736.63,1211.34 1737.22,1211.34 1737.81,1211.34 1738.39,1211.34 1738.98,1211.34 1739.57,1211.34 1740.15,1211.34 1740.74,1211.34 1741.32,1211.34 1741.91,1211.34 1742.5,1211.34 1743.08,1211.34 1743.67,1211.34 1744.26,1211.34 1744.84,1211.34 1745.43,1211.34 1746.02,1211.34 1746.6,1211.34 1747.19,1211.34 1747.78,1211.34 1748.36,1211.34 1748.95,1211.34 1749.53,1211.34 1750.12,1211.34 1750.71,1211.34 1751.29,1211.34 1751.88,1211.34 1752.47,1211.34 1753.05,1211.34 1753.64,1211.34 1754.23,1211.34 1754.81,1211.34 1755.4,1211.34 1755.99,1211.34 1756.57,1211.34 1757.16,1211.34 1757.74,1211.34 1758.33,1211.34 1758.92,1211.34 1759.5,1211.34 1760.09,1211.34 1760.68,1211.34 1761.26,1211.34 1761.85,1211.34 1762.44,1211.34 1763.02,1211.34 1763.61,1211.34 1764.19,1211.34 1764.78,1211.34 1765.37,1211.34 1765.95,1211.34 1766.54,1211.34 1767.13,1211.34 1767.71,1211.34 1768.3,1211.34 1768.89,1211.34 1769.47,1211.34 1770.06,1211.34 1770.65,1211.34 1771.23,1211.34 1771.82,1211.34 1772.4,1211.34 1772.99,1211.34 1773.58,1211.34 1774.16,1211.34 1774.75,1211.34 1775.34,1211.34 1775.92,1211.34 1776.51,1211.34 1777.1,1211.34 1777.68,1211.34 1778.27,1211.34 1778.86,1211.34 1779.44,1211.34 1780.03,1211.34 1780.61,1211.34 1781.2,1211.34 1781.79,1211.34 1782.37,1211.34 1782.96,1211.34 1783.55,1211.34 1784.13,1211.34 1784.72,1211.34 1785.31,1211.34 1785.89,1211.34 1786.48,1211.34 1787.06,1211.34 1787.65,1211.34 1788.24,1211.34 1788.82,1211.34 1789.41,1211.34 1790,1211.34 1790.58,1211.34 1791.17,1211.34 1791.76,1211.34 1792.34,1211.34 1792.93,1211.34 1793.52,1211.34 1794.1,1211.34 1794.69,1211.34 1795.27,1211.34 1795.86,1211.34 1796.45,1211.34 1797.03,1211.34 1797.62,1211.34 1798.21,1211.34 1798.79,1211.34 1799.38,1211.34 1799.97,1211.34 1800.55,1211.34 1801.14,1211.34 1801.73,1211.34 1802.31,1211.34 1802.9,1211.34 1803.48,1211.34 1804.07,1211.34 1804.66,1211.34 1805.24,1211.34 1805.83,1211.34 1806.42,1211.34 1807,1211.34 1807.59,1211.34 1808.18,1211.34 1808.76,1211.34 1809.35,1211.34 1809.94,1211.34 1810.52,1211.34 1811.11,1211.34 1811.69,1211.34 1812.28,1211.34 1812.87,1211.34 1813.45,1211.34 1814.04,1211.34 1814.63,1211.34 1815.21,1211.34 1815.8,1211.34 1816.39,1211.34 1816.97,1211.34 1817.56,1211.34 1818.14,1211.34 1818.73,1211.34 1819.32,1211.34 1819.9,1211.34 1820.49,1211.34 1821.08,1211.34 1821.66,1211.34 1822.25,1211.34 1822.84,1211.34 1823.42,1211.34 1824.01,1211.34 1824.6,1211.34 1825.18,1211.34 1825.77,1211.34 1826.35,1211.34 1826.94,1211.34 1827.53,1211.34 1828.11,1211.34 1828.7,1211.34 1829.29,1211.34 1829.87,1211.34 1830.46,1211.34 1831.05,1211.34 1831.63,1211.34 1832.22,1211.34 1832.81,1211.34 1833.39,1211.34 1833.98,1211.34 1834.56,1211.34 1835.15,1211.34 1835.74,1211.34 1836.32,1211.34 1836.91,1211.34 1837.5,1211.34 1838.08,1211.34 1838.67,1211.34 1839.26,1211.34 1839.84,1211.34 1840.43,1211.34 1841.01,1211.34 1841.6,1211.34 1842.19,1211.34 1842.77,1211.34 1843.36,1211.34 1843.95,1211.34 1844.53,1211.34 1845.12,1211.34 1845.71,1211.34 1846.29,1211.34 1846.88,1211.34 1847.47,1211.34 1848.05,1211.34 1848.64,1211.34 1849.22,1211.34 1849.81,1211.34 1850.4,1211.34 1850.98,1211.34 1851.57,1211.34 1852.16,1211.34 1852.74,1211.34 1853.33,1211.34 1853.92,1211.34 1854.5,1211.34 1855.09,1211.34 1855.68,1211.34 1856.26,1211.34 1856.85,1211.34 1857.43,1211.34 1858.02,1211.34 1858.61,1211.34 1859.19,1211.34 1859.78,1211.34 1860.37,1211.34 1860.95,1211.34 1861.54,1211.34 1862.13,1211.34 1862.71,1211.34 1863.3,1211.34 1863.88,1211.34 1864.47,1211.34 1865.06,1211.34 1865.64,1211.34 1866.23,1211.34 1866.82,1211.34 1867.4,1211.34 1867.99,1211.34 1868.58,1211.34 1869.16,1211.34 1869.75,1211.34 1870.34,1211.34 1870.92,1211.34 1871.51,1211.34 1872.09,1211.34 1872.68,1211.34 1873.27,1211.34 1873.85,1211.34 1874.44,1211.34 1875.03,1211.34 1875.61,1211.34 1876.2,1211.34 1876.79,1211.34 1877.37,1211.34 1877.96,1211.34 1878.55,1211.34 1879.13,1211.34 1879.72,1211.34 1880.3,1211.34 1880.89,1211.34 1881.48,1211.34 1882.06,1211.34 1882.65,1211.34 1883.24,1211.34 1883.82,1211.34 1884.41,1211.34 1885,1211.34 1885.58,1211.34 1886.17,1211.34 1886.76,1211.34 1887.34,1211.34 1887.93,1211.34 1888.51,1211.34 1889.1,1211.34 1889.69,1211.34 1890.27,1211.34 1890.86,1211.34 1891.45,1211.34 1892.03,1211.34 1892.62,1211.34 1893.21,1211.34 1893.79,1211.34 1894.38,1211.34 1894.96,1211.34 1895.55,1211.34 1896.14,1211.34 1896.72,1211.34 1897.31,1211.34 1897.9,1211.34 1898.48,1211.34 1899.07,1211.34 1899.66,1211.34 1900.24,1211.34 1900.83,1211.34 1901.42,1211.34 1902,1211.34 1902.59,1211.34 1903.17,1211.34 1903.76,1211.34 1904.35,1211.34 1904.93,1211.34 1905.52,1211.34 1906.11,1211.34 1906.69,1211.34 1907.28,1211.34 1907.87,1211.34 1908.45,1211.34 1909.04,1211.34 1909.63,1211.34 1910.21,1211.34 1910.8,1211.34 1911.38,1211.34 1911.97,1211.34 1912.56,1211.34 1913.14,1211.34 1913.73,1211.34 1914.32,1211.34 1914.9,1211.34 1915.49,1211.34 1916.08,1211.34 1916.66,1211.34 1917.25,1211.34 1917.83,1211.34 1918.42,1211.34 1919.01,1211.34 1919.59,1211.34 1920.18,1211.34 1920.77,1211.34 1921.35,1211.34 1921.94,1211.34 1922.53,1211.34 1923.11,1211.34 1923.7,1211.34 1924.29,1211.34 1924.87,1211.34 1925.46,1211.34 1926.04,1211.34 1926.63,1211.34 1927.22,1211.34 1927.8,1211.34 1928.39,1211.34 1928.98,1211.34 1929.56,1211.34 1930.15,1211.34 1930.74,1211.34 1931.32,1211.34 1931.91,1211.34 1932.5,1211.34 1933.08,1211.34 1933.67,1211.34 1934.25,1211.34 1934.84,1211.34 1935.43,1211.34 1936.01,1211.34 1936.6,1211.34 1937.19,1211.34 1937.77,1211.34 1938.36,1211.34 1938.95,1211.34 1939.53,1211.34 1940.12,1211.34 1940.71,1211.34 1941.29,1211.34 1941.88,1211.34 1942.46,1211.34 1943.05,1211.34 1943.64,1211.34 1944.22,1211.34 1944.81,1211.34 1945.4,1211.34 1945.98,1211.34 1946.57,1211.34 1947.16,1211.34 1947.74,1211.34 1948.33,1211.34 1948.91,1211.34 1949.5,1211.34 1950.09,1211.34 1950.67,1211.34 1951.26,1211.34 1951.85,1211.34 1952.43,1211.34 1953.02,1211.34 1953.61,1211.34 1954.19,1211.34 1954.78,1211.34 1955.37,1211.34 1955.95,1211.34 1956.54,1211.34 1957.12,1211.34 1957.71,1211.34 1958.3,1211.34 1958.88,1211.34 1959.47,1211.34 1960.06,1211.34 1960.64,1211.34 1961.23,1211.34 1961.82,1211.34 1962.4,1211.34 1962.99,1211.34 1963.58,1211.34 1964.16,1211.34 1964.75,1211.34 1965.33,1211.34 1965.92,1211.34 1966.51,1211.34 1967.09,1211.34 1967.68,1211.34 1968.27,1211.34 1968.85,1211.34 1969.44,1211.34 1970.03,1211.34 1970.61,1211.34 1971.2,1211.34 1971.78,1211.34 1972.37,1211.34 1972.96,1211.34 1973.54,1211.34 1974.13,1211.34 1974.72,1211.34 1975.3,1211.34 1975.89,1211.34 1976.48,1211.34 1977.06,1211.34 1977.65,1211.34 1978.24,1211.34 1978.82,1211.34 1979.41,1211.34 1979.99,1211.34 1980.58,1211.34 1981.17,1211.34 1981.75,1211.34 1982.34,1211.34 1982.93,1211.34 1983.51,1211.34 1984.1,1211.34 1984.69,1211.34 1985.27,1211.34 1985.86,1211.34 1986.45,1211.34 1987.03,1211.34 1987.62,1211.34 1988.2,1211.34 1988.79,1211.34 1989.38,1211.34 1989.96,1211.34 1990.55,1211.34 1991.14,1211.34 1991.72,1211.34 1992.31,1211.34 1992.9,1211.34 1993.48,1211.34 1994.07,1211.34 1994.65,1211.34 1995.24,1211.34 1995.83,1211.34 1996.41,1211.34 1997,1211.34 1997.59,1211.34 1998.17,1211.34 1998.76,1211.34 1999.35,1211.34 1999.93,1211.34 2000.52,1211.34 2001.11,1211.34 2001.69,1211.34 2002.28,1211.34 2002.86,1211.34 2003.45,1211.34 2004.04,1211.34 2004.62,1211.34 2005.21,1211.34 2005.8,1211.34 2006.38,1211.34 2006.97,1211.34 2007.56,1211.34 2008.14,1211.34 2008.73,1211.34 2009.32,1211.34 2009.9,1211.34 2010.49,1211.34 2011.07,1211.34 2011.66,1211.34 2012.25,1211.34 2012.83,1211.34 2013.42,1211.34 2014.01,1211.34 2014.59,1211.34 2015.18,1211.34 2015.77,1211.34 2016.35,1211.34 2016.94,1211.34 2017.53,1211.34 2018.11,1211.34 2018.7,1211.34 2019.28,1211.34 2019.87,1211.34 2020.46,1211.34 2021.04,1211.34 2021.63,1211.34 2022.22,1211.34 2022.8,1211.34 2023.39,1211.34 2023.98,1211.34 2024.56,1211.34 2025.15,1211.34 2025.73,1211.34 2026.32,1211.34 2026.91,1211.34 2027.49,1211.34 2028.08,1211.34 2028.67,1211.34 2029.25,1211.34 2029.84,1211.34 2030.43,1211.34 2031.01,1211.34 2031.6,1211.34 2032.19,1211.34 2032.77,1211.34 2033.36,1211.34 2033.94,1211.34 2034.53,1211.34 2035.12,1211.34 2035.7,1211.34 2036.29,1211.34 2036.88,1211.34 2037.46,1211.34 2038.05,1211.34 2038.64,1211.34 2039.22,1211.34 2039.81,1211.34 2040.4,1211.34 2040.98,1211.34 2041.57,1211.34 2042.15,1211.34 2042.74,1211.34 2043.33,1211.34 2043.91,1211.34 2044.5,1211.34 2045.09,1211.34 2045.67,1211.34 2046.26,1211.34 2046.85,1211.34 2047.43,1211.34 2048.02,1211.34 2048.6,1211.34 2049.19,1211.34 2049.78,1211.34 2050.36,1211.34 2050.95,1211.34 2051.54,1211.34 2052.12,1211.34 2052.71,1211.34 2053.3,1211.34 2053.88,1211.34 2054.47,1211.34 2055.06,1211.34 2055.64,1211.34 2056.23,1211.34 2056.81,1211.34 2057.4,1211.34 2057.99,1211.34 2058.57,1211.34 2059.16,1211.34 2059.75,1211.34 2060.33,1211.34 2060.92,1211.34 2061.51,1211.34 2062.09,1211.34 2062.68,1211.34 2063.27,1211.34 2063.85,1211.34 2064.44,1211.34 2065.02,1211.34 2065.61,1211.34 2066.2,1211.34 2066.78,1211.34 2067.37,1211.34 2067.96,1211.34 2068.54,1211.34 2069.13,1211.34 2069.72,1211.34 2070.3,1211.34 2070.89,1211.34 2071.48,1211.34 2072.06,1211.34 2072.65,1211.34 2073.23,1211.34 2073.82,1211.34 2074.41,1211.34 2074.99,1211.34 2075.58,1211.34 2076.17,1211.34 2076.75,1211.34 2077.34,1211.34 2077.93,1211.34 2078.51,1211.34 2079.1,1211.34 2079.68,1211.34 2080.27,1211.34 2080.86,1211.34 2081.44,1211.34 2082.03,1211.34 2082.62,1211.34 2083.2,1211.34 2083.79,1211.34 2084.38,1211.34 2084.96,1211.34 2085.55,1211.34 2086.14,1211.34 2086.72,1211.34 2087.31,1211.34 2087.89,1211.34 2088.48,1211.34 2089.07,1211.34 2089.65,1211.34 2090.24,1211.34 2090.83,1211.34 2091.41,1211.34 2092,1211.34 2092.59,1211.34 2093.17,1211.34 2093.76,1211.34 2094.35,1211.34 2094.93,1211.34 2095.52,1211.34 2096.1,1211.34 2096.69,1211.34 2097.28,1211.34 2097.86,1211.34 2098.45,1211.34 2099.04,1211.34 2099.62,1211.34 2100.21,1211.34 2100.8,1211.34 2101.38,1211.34 2101.97,1211.34 2102.55,1211.34 2103.14,1211.34 2103.73,1211.34 2104.31,1211.34 2104.9,1211.34 2105.49,1211.34 2106.07,1211.34 2106.66,1211.34 2107.25,1211.34 2107.83,1211.34 2108.42,1211.34 2109.01,1211.34 2109.59,1211.34 2110.18,1211.34 2110.76,1211.34 2111.35,1211.34 2111.94,1211.34 2112.52,1211.34 2113.11,1211.34 2113.7,1211.34 2114.28,1211.34 2114.87,1211.34 2115.46,1211.34 2116.04,1211.34 2116.63,1211.34 2117.22,1211.34 2117.8,1211.34 2118.39,1211.34 2118.97,1211.34 2119.56,1211.34 2120.15,1211.34 2120.73,1211.34 2121.32,1211.34 2121.91,1211.34 2122.49,1211.34 2123.08,1211.34 2123.67,1211.34 2124.25,1211.34 2124.84,1211.34 2125.42,1211.34 2126.01,1211.34 2126.6,1211.34 2127.18,1211.34 2127.77,1211.34 2128.36,1211.34 2128.94,1211.34 2129.53,1211.34 2130.12,1211.34 2130.7,1211.34 2131.29,1211.34 2131.88,1211.34 2132.46,1211.34 2133.05,1211.34 2133.63,1211.34 2134.22,1211.34 2134.81,1211.34 2135.39,1211.34 2135.98,1211.34 2136.57,1211.34 2137.15,1211.34 2137.74,1211.34 2138.33,1211.34 2138.91,1211.34 2139.5,1211.34 2140.09,1211.34 2140.67,1211.34 2141.26,1211.34 2141.84,1211.34 2142.43,1211.34 2143.02,1211.34 2143.6,1211.34 2144.19,1211.34 2144.78,1211.34 2145.36,1211.34 2145.95,1211.34 2146.54,1211.34 2147.12,1211.34 2147.71,1211.34 2148.3,1211.34 2148.88,1211.34 2149.47,1211.34 2150.05,1211.34 2150.64,1211.34 2151.23,1211.34 2151.81,1211.34 2152.4,1211.34 2152.99,1211.34 2153.57,1211.34 2154.16,1211.34 2154.75,1211.34 2155.33,1211.34 2155.92,1211.34 2156.5,1211.34 2157.09,1211.34 2157.68,1211.34 2158.26,1211.34 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.17,1193.51 1399.59,899.083 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.58 985.439,1193.51 2158.26,1193.51 2158.26,1228.58 985.439,1228.58 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip703\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip703)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4913.07 163.792,-5925.05 164.351,-6848.88 164.91,-7692.55 165.469,-8437.14 166.029,-9134.72 166.588,-9764.6 167.147,-10331.2 167.706,-10838.5 168.266,-11270 168.825,-11671.3 169.384,-10389.3 169.943,-10765.4 170.503,-11095.9 171.062,-11384 171.621,-11020.3 172.18,-11274.8 172.74,-10963.7 173.299,-11155.6 173.858,-10866.1 174.417,-11016.2 174.977,-10747.7 175.536,-10881.4 176.095,-10967.1 176.655,-11045.2 177.214,-10781.7 177.773,-10815.7 178.332,-10843.7 178.892,-10848.5 179.451,-10821.8 180.01,-10779 180.569,-10729.5 181.129,-10041.7 181.688,-9609.42 182.247,-9534.82 182.806,-9458.83 183.366,-9207.68 183.925,-9101.08 184.484,-8857.31 185.043,-8471.5 185.603,-8362 186.162,-8119.23 186.721,-7895.03 187.28,-7556.44 187.84,-7254.39 188.399,-7043.14 188.958,-6744.91 189.517,-6372.9 190.077,-6284.19 190.636,-6101.53 191.195,-5918.79 191.754,-5827.74 192.314,-5591.68 192.873,-5431.31 193.432,-5282.18 193.991,-5198.29 194.551,-5048.09 195.11,-4963.17 195.669,-4867.11 196.228,-4773.96 196.788,-4403.77 197.347,-4320.44 197.906,-4131.8 198.465,-3951.34 199.025,-3729.99 199.584,-3661.79 200.143,-3499.32 200.702,-3382.95 201.262,-3226.37 201.821,-3078.04 202.38,-2971.31 202.939,-2828.72 203.499,-2661.97 204.058,-2606.46 204.617,-2475.82 205.176,-2417.3 205.736,-2292.97 206.295,-2204.03 206.854,-2143.5 207.413,-2051.74 207.973,-1964.31 208.532,-1910.99 209.091,-1828.82 209.65,-1712.6 210.21,-1635.72 210.769,-1587.72 211.328,-1422.76 211.887,-1326.01 212.447,-1228.92 213.006,-1192.39 213.565,-1152.27 214.124,-1086.91 214.684,-1023.85 215.243,-957.711 215.802,-818.036 216.361,-759.518 216.921,-675.81 217.48,-620.8 218.039,-565.25 218.598,-533.694 219.158,-482.402 219.717,-403.298 220.276,-354.703 220.835,-307.004 221.395,-259 221.954,-236.453 222.513,-145.587 223.072,-147.628 223.632,-58.507 224.191,8.99666 224.75,46.8548 225.309,85.6006 225.869,102.413 226.428,202.33 226.987,172.064 227.546,184.839 228.106,242.373 228.665,280.838 229.224,293.796 229.783,306.825 230.343,296.36 230.902,351.436 231.461,460.148 232.02,487.535 232.58,532.303 233.139,538.627 233.698,564.511 234.257,551.168 234.817,523.39 235.376,531.691 235.935,543.568 236.494,589.41 237.054,617.5 237.613,681.062 238.172,702.652 238.731,723.758 239.291,747.482 239.85,764.037 240.409,784.167 240.968,729.785 241.528,752.583 242.087,757.23 242.646,780.723 243.205,820.588 243.765,820.472 244.324,818.726 244.883,906.158 245.442,938.4 246.002,965.906 246.561,1014.83 247.12,1058.13 247.679,1096.03 248.239,1066.77 248.798,1073.52 249.357,1099.07 249.916,1086.7 250.476,1091.87 251.035,1082.03 251.594,1109.57 252.153,1131.28 252.713,1151.31 253.272,1105.57 253.831,1076.55 254.39,1084.27 254.95,1092.84 255.509,1082.5 256.068,1105.89 256.627,1094.37 257.187,1102.66 257.746,1074.17 258.305,1084.28 258.864,1090.51 259.424,1119.32 259.983,1141 260.542,1145.43 261.101,1133.58 261.661,1126.17 262.22,1136.19 262.779,1127.7 263.338,1116.29 263.898,1137.63 264.457,1125.19 265.016,1114.44 265.575,1107.34 266.135,1113.3 266.694,1085.1 267.253,1107.15 267.812,1130.2 268.372,1169.12 268.931,1172.63 269.49,1157.64 270.049,1144.82 270.609,1099.23 271.168,1057.41 271.727,1065.63 272.286,1022.09 272.846,1051.09 273.405,1062.44 273.964,1051.22 274.523,1058.99 275.083,1050.88 275.642,1028.52 276.201,1036.35 276.76,1030.22 277.32,1020.5 277.879,1015.43 278.438,1043.03 278.997,1084.58 279.557,1059.54 280.116,1050.79 280.675,1044.6 281.234,1037.73 281.794,1066.41 282.353,1107.92 282.912,1080.03 283.471,1074.04 284.031,1033.22 284.59,1074.63 285.149,1065.7 285.708,1072.71 286.268,1079.95 286.827,1070.11 287.386,1062.3 287.945,1040.21 288.505,1051.47 289.064,1026.51 289.623,1021.21 290.182,997.017 290.742,1059.97 291.301,1032.96 291.86,1039.25 292.419,1013.78 292.979,1009.34 293.538,986.729 294.097,1044.01 294.656,1035.17 295.216,1048.47 295.775,1040.7 296.334,1080.6 296.893,1073 297.453,1077.85 298.012,1072.01 298.571,1065.94 299.13,1044.5 299.69,1038.48 300.249,1034.59 300.808,1073.03 301.368,1096.6 301.927,1088.55 302.486,1112.55 303.045,1115.21 303.605,1121.56 304.164,1157.28 304.723,1095.81 305.282,1049.34 305.842,1052.22 306.401,1012.05 306.96,989.982 307.519,1002.62 308.079,1011.69 308.638,1005.17 309.197,999.484 309.756,960.998 310.316,975.497 310.875,987.681 311.434,965.264 311.993,978.771 312.553,973.022 313.112,948.874 313.671,993.898 314.23,972.012 314.79,983.171 315.349,980.052 315.908,961.052 316.467,973.086 317.027,968.124 317.586,949.032 318.145,961.529 318.704,977.006 319.264,985.893 319.823,985.875 320.382,961.738 320.941,925.982 321.501,939.822 322.06,936.808 322.619,931.855 323.178,958.24 323.738,936.087 324.297,936.527 324.856,930.757 325.415,927.945 325.975,930.055 326.534,976.038 327.093,953.372 327.652,934.417 328.212,946.403 328.771,943.759 329.33,935.339 329.889,965.174 330.449,960.212 331.008,940.497 331.567,952.634 332.126,964.562 332.686,927.008 333.245,922.316 333.804,920.223 334.363,917.527 334.923,899.732 335.482,948.574 336.041,931.203 336.6,893.511 337.16,890.101 337.719,873.581 338.278,837.233 338.837,836.309 339.397,853.923 339.956,840.002 340.515,890.079 341.074,823.524 341.634,792.651 342.193,781.641 342.752,800.408 343.311,803.694 343.871,804.509 344.43,789.938 344.989,806.435 345.548,790.746 346.108,796.188 346.667,815.16 347.226,816.891 347.785,855.185 348.345,854.064 348.904,838.334 349.463,843.634 350.022,840.786 350.582,850.176 351.141,864.216 351.7,845.218 352.259,815.168 352.819,832.796 353.378,849.479 353.937,832.651 354.496,849.152 355.056,846.648 355.615,895.209 356.174,876.693 356.733,889.813 357.293,936.275 357.852,978.798 358.411,970.142 358.97,959.036 359.53,967.077 360.089,976.144 360.648,956.161 361.207,950.48 361.767,962.326 362.326,986.449 362.885,941.362 363.444,901.707 364.004,932.09 364.563,940.528 365.122,949.214 365.681,946.468 366.241,954.414 366.8,931.926 367.359,971.852 367.918,1011.33 368.478,1030.94 369.037,1016.19 369.596,1006.79 370.155,999.933 370.715,1020.18 371.274,972.17 371.833,965.403 372.392,972.876 372.952,993.66 373.511,997.541 374.07,1002.05 374.629,942.04 375.189,918.288 375.748,882.785 376.307,893.918 376.866,871.636 377.426,885.123 377.985,898.693 378.544,910.367 379.103,902.9 379.663,916.807 380.222,910.217 380.781,909.114 381.34,933.429 381.9,925.365 382.459,939.231 383.018,928.898 383.577,890.619 384.137,883.117 384.696,878.757 385.255,874.901 385.814,904.597 386.374,884.936 386.933,882.641 387.492,909.694 388.051,888.198 388.611,850.798 389.17,817.883 389.729,847.733 390.288,875.93 390.848,873.137 391.407,869.048 391.966,832.671 392.525,845.415 393.085,842.363 393.644,853.918 394.203,851.564 394.762,831.985 395.322,815.427 395.881,814.61 396.44,797.887 396.999,780.425 397.559,764.368 398.118,764.679 398.677,783.172 399.236,786.845 399.796,783.58 400.355,783.357 400.914,831.942 401.473,829.333 402.033,856.577 402.592,852.248 403.151,850.843 403.71,849.531 404.27,847.312 404.829,827.235 405.388,826.499 405.947,836.372 406.507,865.482 407.066,859.634 407.625,852.612 408.184,829.272 408.744,827.32 409.303,855.52 409.862,851.601 410.421,828.827 410.981,794.319 411.54,809.771 412.099,811.735 412.658,811.852 413.218,793.836 413.777,840.392 414.336,804.496 414.895,800.848 415.455,830.592 416.014,810.902 416.573,811.197 417.132,826.35 417.692,840.638 418.251,821.176 418.81,865.448 419.369,863.098 419.929,888.925 420.488,879.81 421.047,854.286 421.606,819.113 422.166,833.592 422.725,874.53 423.284,834.477 423.843,846.356 424.403,859.39 424.962,840.016 425.521,839.368 426.08,838.097 426.64,850.462 427.199,864.129 427.758,841.76 428.318,838.248 428.877,866.555 429.436,861.899 429.995,855.783 430.555,817.04 431.114,811.313 431.673,806.374 432.232,803.94 432.792,816.357 433.351,815.356 433.91,828.982 434.469,822.768 435.029,803.342 435.588,815.536 436.147,764.419 436.706,752.625 437.266,752.704 437.825,784.879 438.384,787.082 438.943,766.847 439.503,779.53 440.062,758.755 440.621,776.65 441.18,772.221 441.74,766.471 442.299,797.249 442.858,775.591 443.417,770.601 443.977,733.628 444.536,751.692 445.095,750.464 445.654,747.85 446.214,747.963 446.773,748.764 447.332,732.085 447.891,718.991 448.451,738.234 449.01,701.577 449.569,717.122 450.128,738.276 450.688,755.927 451.247,738.63 451.806,704.245 452.365,756.122 452.925,770.871 453.484,721.986 454.043,706.853 454.602,688.692 455.162,707.263 455.721,695.846 456.28,697.25 456.839,701.341 457.399,718.227 457.958,753.495 458.517,771.973 459.076,785.888 459.636,769.164 460.195,766.532 460.754,766.174 461.313,766.997 461.873,748.499 462.432,734.626 462.991,734.354 463.55,733.997 464.11,784.569 464.669,793.295 465.228,827.026 465.787,820.184 466.347,830.49 466.906,827.999 467.465,808.712 468.024,786.576 468.584,781.299 469.143,777.581 469.702,775.382 470.261,739.85 470.821,738.435 471.38,705.018 471.939,688.72 472.498,707.767 473.058,729.115 473.617,728.445 474.176,777.155 474.735,777.423 475.295,758.681 475.854,774.545 476.413,758.186 476.972,789.796 477.532,805.784 478.091,804.984 478.65,800.444 479.209,812.189 479.769,868.696 480.328,925.745 480.887,915.099 481.446,875.04 482.006,900.435 482.565,904.866 483.124,850.625 483.683,826.164 484.243,822.52 484.802,785.908 485.361,780.506 485.92,759.507 486.48,788.284 487.039,805.066 487.598,783.802 488.157,765.653 488.717,781.424 489.276,760.595 489.835,760.978 490.394,773.906 490.954,771.697 491.513,818.998 492.072,811.784 492.631,760.558 493.191,706.552 493.75,707.758 494.309,677.705 494.868,744.703 495.428,742.941 495.987,728.988 496.546,677.858 497.105,693.442 497.665,680.877 498.224,668.195 498.783,674.346 499.342,693.38 499.902,663.057 500.461,670.249 501.02,704.735 501.579,688.916 502.139,691.571 502.698,642.412 503.257,616.303 503.816,623.224 504.376,646.753 504.935,637.764 505.494,674.493 506.053,662.012 506.613,679.775 507.172,682.565 507.731,685.792 508.29,719.949 508.85,703.66 509.409,721.995 509.968,719.281 510.527,705.627 511.087,757.729 511.646,738.44 512.205,739.398 512.764,724.568 513.324,726.068 513.883,724.812 514.442,712.286 515.001,745.473 515.561,759.409 516.12,743.577 516.679,743.385 517.238,775.545 517.798,757.297 518.357,769.98 518.916,785.641 519.475,799.005 520.035,747.548 520.594,732.849 521.153,702.894 521.712,739.529 522.272,742.775 522.831,745.312 523.39,717.757 523.949,716.699 524.509,716.916 525.068,698.059 525.627,684.474 526.186,654.945 526.746,655.027 527.305,654.979 527.864,640.795 528.423,642.321 528.983,650.774 529.542,637.473 530.101,641.962 530.66,627.786 531.22,601.845 531.779,625.282 532.338,628.508 532.897,636.548 533.457,658.161 534.016,649.262 534.575,653.544 535.134,643.587 535.694,630.038 536.253,620.534 536.812,629.411 537.371,652.445 537.931,638.461 538.49,611.576 539.049,615.785 539.608,637.902 540.168,639.864 540.727,661.937 541.286,665.179 541.845,685.812 542.405,688.923 542.964,705.486 543.523,690.504 544.082,708.173 544.642,709.526 545.201,725.876 545.76,725.328 546.319,689.183 546.879,709.984 547.438,742.533 547.997,673.514 548.556,675.855 549.116,682.45 549.675,701.299 550.234,683.452 550.793,666.631 551.353,671.16 551.912,656.637 552.471,659.588 553.031,661.694 553.59,679.99 554.149,699.141 554.708,715.675 555.268,699.03 555.827,667.897 556.386,671.884 556.945,674.147 557.505,679.797 558.064,764.04 558.623,765.008 559.182,782.099 559.742,778.554 560.301,778.965 560.86,761.094 561.419,758.838 561.979,724.561 562.538,720.756 563.097,750.573 563.656,750.426 564.216,766.403 564.775,752.591 565.334,764.117 565.893,730.504 566.453,776.902 567.012,789.229 567.571,799.856 568.13,781.99 568.69,747.29 569.249,748.737 569.808,763.47 570.367,715.573 570.927,716.474 571.486,750.34 572.045,763.917 572.604,758.557 573.164,771.336 573.723,782.429 574.282,795.348 574.841,790.086 575.401,805.264 575.96,772.465 576.519,770.58 577.078,702.833 577.638,686.493 578.197,691.591 578.756,673.12 579.315,661.212 579.875,662.674 580.434,684.954 580.993,701.174 581.552,684.033 582.112,702.036 582.671,702.389 583.23,667.31 583.789,720.102 584.349,723.444 584.908,741.546 585.467,712.482 586.026,713.612 586.586,681.789 587.145,666.528 587.704,689.313 588.263,675.421 588.823,709.276 589.382,690.537 589.941,724.009 590.5,722.612 591.06,737.604 591.619,717.856 592.178,685.975 592.737,704.243 593.297,702.542 593.856,720.981 594.415,721.448 594.974,705.405 595.534,703.95 596.093,736.408 596.652,717.077 597.211,729.317 597.771,775.496 598.33,753.951 598.889,735.34 599.448,733.498 600.008,716.514 600.567,736.375 601.126,763.659 601.685,762.37 602.245,725.709 602.804,740.844 603.363,724.86 603.922,719.886 604.482,714.246 605.041,711.48 605.6,708.787 606.159,721.565 606.719,736.01 607.278,720.896 607.837,670.01 608.396,670.841 608.956,669.49 609.515,658.678 610.074,642.908 610.633,649.536 611.193,637.795 611.752,657.819 612.311,677.696 612.87,711.611 613.43,708.978 613.989,694.083 614.548,695.809 615.107,712.057 615.667,747.872 616.226,729.708 616.785,725.745 617.344,710.307 617.904,726.071 618.463,726.479 619.022,726.826 619.581,776.349 620.141,772.371 620.7,754.895 621.259,799.666 621.818,825.268 622.378,767.574 622.937,751.957 623.496,717.743 624.055,715.783 624.615,714.844 625.174,727.497 625.733,762.008 626.292,759.443 626.852,754.362 627.411,750.122 627.97,747.032 628.529,742.642 629.089,769.213 629.648,729.773 630.207,709.642 630.766,676.961 631.326,645.666 631.885,679.483 632.444,695.093 633.003,695.482 633.563,694.948 634.122,679.433 634.681,680.532 635.24,666.855 635.8,669.435 636.359,699.753 636.918,697.877 637.477,681.091 638.037,679.985 638.596,698.95 639.155,664.306 639.714,665.993 640.274,653.783 640.833,622.236 641.392,642.736 641.951,662.409 642.511,683.945 643.07,684.623 643.629,668.883 644.188,653.549 644.748,657.253 645.307,676.762 645.866,692.644 646.425,709.397 646.985,725.784 647.544,706.943 648.103,719.785 648.662,699.475 649.222,749.303 649.781,763.463 650.34,793.077 650.899,806.33 651.459,786.242 652.018,798.876 652.577,792.038 653.136,800.587 653.696,779.705 654.255,763.06 654.814,774.59 655.373,758.255 655.933,754.402 656.492,786.232 657.051,778.609 657.61,775.01 658.17,787.422 658.729,800.073 659.288,828.477 659.847,755.3 660.407,783.771 660.966,762.852 661.525,790.346 662.084,787.526 662.644,795.919 663.203,788.563 663.762,799.544 664.321,808.289 664.881,817.033 665.44,759.205 665.999,740.206 666.558,720.922 667.118,720.202 667.677,702.193 668.236,699.021 668.795,730.906 669.355,730.338 669.914,728.193 670.473,709.583 671.032,723.776 671.592,740.145 672.151,737.175 672.71,739.732 673.269,738.977 673.829,736.592 674.388,716.144 674.947,683.703 675.506,649.469 676.066,653.662 676.625,654.859 677.184,660.793 677.743,661.045 678.303,695.914 678.862,712.108 679.421,712.751 679.981,745.482 680.54,742.382 681.099,728.255 681.658,726.106 682.218,692.873 682.777,661.113 683.336,679.068 683.895,665.587 684.455,669.475 685.014,659.258 685.573,643.903 686.132,647.109 686.692,682.044 687.251,666.286 687.81,650.661 688.369,686.92 688.929,657.453 689.488,640.206 690.047,641.616 690.606,662.759 691.166,666.881 691.725,651.628 692.284,639.27 692.843,626.272 693.403,630.314 693.962,630.579 694.521,666.428 695.08,649.286 695.64,652.413 696.199,654.167 696.758,654.208 697.317,638.366 697.877,639.172 698.436,643.793 698.995,632.193 699.554,636.159 700.114,722.554 700.673,737.808 701.232,737.682 701.791,738.158 702.351,753.126 702.91,734.476 703.469,765.672 704.028,748.022 704.588,762.005 705.147,744.688 705.706,743.141 706.265,756.857 706.825,755.663 707.384,804.499 707.943,831.234 708.502,811.287 709.062,807.504 709.621,784.424 710.18,765.888 710.739,745.234 711.299,725.983 711.858,690.354 712.417,688.313 712.976,688.161 713.536,657.058 714.095,657.773 714.654,673.968 715.213,661.498 715.773,646.838 716.332,649.697 716.891,604.641 717.45,595.294 718.01,631.649 718.569,663.987 719.128,651.175 719.687,624.161 720.247,631.895 720.806,651.732 721.365,624.819 721.924,611.763 722.484,618.043 723.043,622.865 723.602,661.923 724.161,643.801 724.721,645.13 725.28,644.995 725.839,648.3 726.398,713.054 726.958,699.025 727.517,748.531 728.076,778.114 728.635,773.445 729.195,718.923 729.754,766.085 730.313,780.684 730.872,778.94 731.432,793.186 731.991,741.561 732.55,772.128 733.109,751.672 733.669,749.487 734.228,714.972 734.787,697.413 735.346,709.443 735.906,712.493 736.465,761.643 737.024,756.498 737.583,734.892 738.143,762.5 738.702,708.283 739.261,708.106 739.82,707.545 740.38,738.985 740.939,718.396 741.498,749.591 742.057,730.834 742.617,747.749 743.176,709.906 743.735,753.362 744.294,749.703 744.854,744.022 745.413,740.082 745.972,737.049 746.531,737.761 747.091,698.157 747.65,679.597 748.209,694.295 748.768,647.36 749.328,602.928 749.887,607.552 750.446,630.781 751.005,631.018 751.565,603.268 752.124,591.406 752.683,613.637 753.242,615.975 753.802,604.757 754.361,623.035 754.92,613.634 755.479,614.706 756.039,635.259 756.598,654.456 757.157,638.788 757.716,626.721 758.276,629.664 758.835,680.992 759.394,681.758 759.953,646.976 760.513,682.987 761.072,681.272 761.631,682.277 762.19,669.429 762.75,655.797 763.309,645.806 763.868,649.029 764.427,668.026 764.987,685.341 765.546,702.808 766.105,704.366 766.664,765.329 767.224,762.604 767.783,743.865 768.342,771.872 768.901,787.426 769.461,766.423 770.02,713.158 770.579,713.661 771.138,727.134 771.698,714.145 772.257,697.176 772.816,696.591 773.375,731.174 773.935,728.043 774.494,740.248 775.053,754.201 775.612,717.777 776.172,682.76 776.731,718.366 777.29,719.873 777.849,719.559 778.409,714.823 778.968,743.482 779.527,725.086 780.086,721.371 780.646,752.069 781.205,733.41 781.764,700.689 782.323,680.128 782.883,685.494 783.442,689.898 784.001,690.697 784.56,706.567 785.12,719.911 785.679,703.062 786.238,683.624 786.797,699.288 787.357,702.21 787.916,701.791 788.475,698.413 789.034,697.536 789.594,709.865 790.153,706.57 790.712,689.603 791.271,673.185 791.831,706.512 792.39,721.899 792.949,734.923 793.508,736.18 794.068,750.538 794.627,746.11 795.186,758.348 795.745,753.149 796.305,734.243 796.864,703.914 797.423,687.858 797.982,702.529 798.542,703.07 799.101,667.54 799.66,650.266 800.219,620.905 800.779,640.141 801.338,675.398 801.897,677.367 802.456,676.625 803.016,710.321 803.575,710.21 804.134,724.949 804.693,708.269 805.253,721.525 805.812,720.981 806.371,723.949 806.931,723.822 807.49,737.753 808.049,655.409 808.608,621.497 809.168,641.668 809.727,644.61 810.286,681.091 810.845,678.217 811.405,659.676 811.964,629.101 812.523,634.718 813.082,634.864 813.642,590.319 814.201,560.55 814.76,568.958 815.319,558.764 815.879,566.012 816.438,575.581 816.997,578.92 817.556,600.571 818.116,586.317 818.675,577.371 819.234,582.722 819.793,606.404 820.353,610.534 820.912,630.725 821.471,634.004 822.03,638.166 822.59,640.631 823.149,658.223 823.708,609.498 824.267,610.661 824.827,647.748 825.386,618.453 825.945,604.174 826.504,596.82 827.064,665.654 827.623,669.334 828.182,670.543 828.741,658.032 829.301,644.377 829.86,694.552 830.419,729.006 830.978,725.808 831.538,676.186 832.097,709.507 832.656,709.635 833.215,710.98 833.775,691.553 834.334,696.028 834.893,728.18 835.452,727.938 836.012,759.895 836.571,722.242 837.13,719.558 837.689,714.778 838.249,714.582 838.808,744.917 839.367,759.626 839.926,771.497 840.486,783.543 841.045,763.76 841.604,742.895 842.163,707.862 842.723,695.132 843.282,692.378 843.841,688.647 844.4,687.221 844.96,688.207 845.519,702.283 846.078,716.15 846.637,730.044 847.197,710.181 847.756,738.583 848.315,736.042 848.874,702.439 849.434,701.603 849.993,700.771 850.552,701.379 851.111,702.439 851.671,686.077 852.23,687.292 852.789,685.135 853.348,716.129 853.908,682.725 854.467,664.369 855.026,666.01 855.585,666.025 856.145,668.147 856.704,667.799 857.263,684.193 857.822,681.566 858.382,681.732 858.941,682.98 859.5,648.387 860.059,651.103 860.619,655.757 861.178,675.029 861.737,721.862 862.296,719.986 862.856,719.937 863.415,715.215 863.974,748.129 864.533,779.972 865.093,757.711 865.652,756.911 866.211,773.257 866.77,784.867 867.33,797.544 867.889,808.218 868.448,783.33 869.007,794.92 869.567,758.258 870.126,754.945 870.685,735.48 871.244,704.596 871.804,685.302 872.363,669.107 872.922,700.697 873.481,702.091 874.041,669.927 874.6,684.678 875.159,716.98 875.718,730.707 876.278,727.852 876.837,726.968 877.396,743.428 877.955,738.522 878.515,737.332 879.074,754.077 879.633,764.505 880.192,807.105 880.752,800.813 881.311,793.595 881.87,789.852 882.429,803.337 882.989,795.098 883.548,791.861 884.107,750.473 884.666,746.548 885.226,726.805 885.785,707.498 886.344,705.948 886.903,722.381 887.463,722.531 888.022,788.008 888.581,797.59 889.14,773.47 889.7,769.061 890.259,764.848 890.818,728.075 891.377,722.564 891.937,717.825 892.496,719.926 893.055,721.435 893.614,718.836 894.174,734.095 894.733,745.999 895.292,710.822 895.851,694.091 896.411,680.342 896.97,713.635 897.529,711.302 898.088,727.761 898.648,723.827 899.207,755.006 899.766,717.74 900.325,669.306 900.885,655.051 901.444,656.508 902.003,658.44 902.562,661.196 903.122,663.814 903.681,682.229 904.24,698.69 904.799,684.126 905.359,667.352 905.918,651.084 906.477,653.709 907.036,639.529 907.596,673.65 908.155,691.305 908.714,688.052 909.273,704.774 909.833,672.619 910.392,658.306 910.951,693.309 911.51,674.164 912.07,659.649 912.629,627.924 913.188,583.989 913.747,586.342 914.307,606.521 914.866,596.421 915.425,597.975 915.984,586.651 916.544,609.419 917.103,564.186 917.662,589.199 918.221,611.276 918.781,662.705 919.34,646.536 919.899,635.75 920.458,639.332 921.018,624.938 921.577,643.141 922.136,646.066 922.695,647.497 923.255,629.496 923.814,646.643 924.373,683.15 924.932,679.553 925.492,679.249 926.051,648.248 926.61,654.349 927.169,691.859 927.729,696.738 928.288,714.515 928.847,728.123 929.406,711.237 929.966,711.971 930.525,695.155 931.084,728.362 931.644,725.718 932.203,724.548 932.762,723.574 933.321,768.731 933.881,794.12 934.44,741.504 934.999,738.551 935.558,702.14 936.118,700.603 936.677,714.359 937.236,711.924 937.795,679.548 938.355,684.054 938.914,666.883 939.473,649.381 940.032,632.399 940.592,664.472 941.151,661.97 941.71,695.521 942.269,694.679 942.829,663.628 943.388,693.365 943.947,723.006 944.506,685.076 945.066,668.997 945.625,637.092 946.184,704.437 946.743,699.022 947.303,731.808 947.862,714.314 948.421,712.362 948.98,677.445 949.54,692.37 950.099,693.008 950.658,675.904 951.217,660.954 951.777,631.355 952.336,637.069 952.895,624.462 953.454,628.02 954.014,616.505 954.573,645.581 955.132,658.604 955.691,674.862 956.251,661.08 956.81,662.54 957.369,665 957.928,663.822 958.488,667.44 959.047,649.569 959.606,666.343 960.165,652.479 960.725,668.876 961.284,683.761 961.843,683.137 962.402,665.308 962.962,650.316 963.521,636.819 964.08,624.612 964.639,624.867 965.199,648.959 965.758,632.961 966.317,637.998 966.876,637.425 967.436,641.148 967.995,645.37 968.554,650.802 969.113,652.032 969.673,670.465 970.232,672.693 970.791,690.519 971.35,692.529 971.91,707.717 972.469,722.222 973.028,737.746 973.587,721.595 974.147,734.163 974.706,762.239 975.265,773.662 975.824,738.882 976.384,754.356 976.943,734.948 977.502,733.953 978.061,714.036 978.621,694.126 979.18,662.857 979.739,647.298 980.298,664.978 980.858,605.834 981.417,655.331 981.976,627.059 982.535,613.196 983.095,616.155 983.654,634.573 984.213,652.184 984.772,603.672 985.332,561.578 985.891,599.388 986.45,654.484 987.009,622.8 987.569,641.423 988.128,644.276 988.687,696.068 989.246,661.993 989.806,649.704 990.365,669.94 990.924,665.511 991.483,681.732 992.043,684.279 992.602,669.89 993.161,653.88 993.72,653.864 994.28,641.099 994.839,625.839 995.398,630.237 995.957,648.439 996.517,619.757 997.076,640.357 997.635,642.986 998.194,662.74 998.754,697.442 999.313,681.37 999.872,667.751 1000.43,685.79 1000.99,671.68 1001.55,670.22 1002.11,671.513 1002.67,653.756 1003.23,654.754 1003.79,672.27 1004.35,658.765 1004.91,677.736 1005.46,680.439 1006.02,712.645 1006.58,708.141 1007.14,706.606 1007.7,688.671 1008.26,689.504 1008.82,700.275 1009.38,698.499 1009.94,747.038 1010.5,727.754 1011.06,761.867 1011.62,757.65 1012.18,765.733 1012.73,714.467 1013.29,696.583 1013.85,648.594 1014.41,667.514 1014.97,668.472 1015.53,655.405 1016.09,657.576 1016.65,675.832 1017.21,677.684 1017.77,676.748 1018.33,692.842 1018.89,688.939 1019.45,687.624 1020.01,687.847 1020.56,671.782 1021.12,688.727 1021.68,685.848 1022.24,733.343 1022.8,761.945 1023.36,773.542 1023.92,766.154 1024.48,730.199 1025.04,727.534 1025.6,692.994 1026.16,692.529 1026.72,706.88 1027.28,756.214 1027.83,718.336 1028.39,704.351 1028.95,701.877 1029.51,701.298 1030.07,683.996 1030.63,716.236 1031.19,713.056 1031.75,709.437 1032.31,722.912 1032.87,738.056 1033.43,703.429 1033.99,686.568 1034.55,703.84 1035.1,718.338 1035.66,700.188 1036.22,681.754 1036.78,677.275 1037.34,693.949 1037.9,677.87 1038.46,691.695 1039.02,675.398 1039.58,662.574 1040.14,682.88 1040.7,700.245 1041.26,718.866 1041.82,716.246 1042.38,703.376 1042.93,704.225 1043.49,702.273 1044.05,733.813 1044.61,777.126 1045.17,771.891 1045.73,783.725 1046.29,758.874 1046.85,754.24 1047.41,763.408 1047.97,740.952 1048.53,735.686 1049.09,746.824 1049.65,728.296 1050.2,706.921 1050.76,720.327 1051.32,716.541 1051.88,718.738 1052.44,730.038 1053,726.047 1053.56,693.395 1054.12,695.652 1054.68,661.518 1055.24,683.441 1055.8,668.014 1056.36,684.646 1056.92,679.623 1057.48,728.135 1058.03,673.224 1058.59,672.856 1059.15,689.822 1059.71,688.172 1060.27,705.603 1060.83,685.628 1061.39,688.482 1061.95,670.893 1062.51,705.304 1063.07,685.984 1063.63,687.088 1064.19,687.855 1064.75,670.044 1065.3,668.914 1065.86,668.709 1066.42,673.778 1066.98,689.577 1067.54,708.946 1068.1,710.775 1068.66,673.807 1069.22,671.491 1069.78,687.983 1070.34,719.066 1070.9,716.437 1071.46,716.317 1072.02,664.726 1072.57,700.015 1073.13,700.777 1073.69,699.83 1074.25,685.419 1074.81,685.753 1075.37,718.122 1075.93,697.702 1076.49,699.036 1077.05,714.514 1077.61,728.184 1078.17,692.604 1078.73,688.657 1079.29,689.317 1079.85,675.605 1080.4,673.097 1080.96,638.675 1081.52,674.529 1082.08,656.239 1082.64,623.007 1083.2,612.767 1083.76,582.723 1084.32,537.299 1084.88,580.252 1085.44,619.278 1086,588.24 1086.56,590.425 1087.12,564.487 1087.67,555.352 1088.23,511.817 1088.79,539.661 1089.35,513.562 1089.91,574.521 1090.47,577.555 1091.03,567.39 1091.59,572.724 1092.15,563.982 1092.71,602.739 1093.27,606.013 1093.83,607.036 1094.39,609.539 1094.94,613.785 1095.5,619.995 1096.06,608.004 1096.62,614.336 1097.18,652.723 1097.74,655.687 1098.3,640.639 1098.86,676.327 1099.42,676.409 1099.98,677.429 1100.54,696.536 1101.1,716.262 1101.66,700.673 1102.22,685.064 1102.77,685.033 1103.33,721.302 1103.89,708.23 1104.45,675.616 1105.01,674.963 1105.57,677.337 1106.13,645.568 1106.69,646.542 1107.25,615.79 1107.81,622.241 1108.37,642.102 1108.93,645.148 1109.49,645.511 1110.04,680.433 1110.6,683.616 1111.16,683.202 1111.72,701.888 1112.28,717.475 1112.84,764.743 1113.4,760.6 1113.96,723.518 1114.52,756.189 1115.08,753.826 1115.64,786.705 1116.2,787.588 1116.76,764.182 1117.31,777.589 1117.87,755.496 1118.43,753.351 1118.99,719.835 1119.55,753.994 1120.11,750.703 1120.67,776.477 1121.23,772.736 1121.79,722.696 1122.35,705.945 1122.91,723.434 1123.47,703.994 1124.03,753.294 1124.59,718.17 1125.14,699.038 1125.7,699.497 1126.26,680.007 1126.82,728.874 1127.38,695.817 1127.94,711.415 1128.5,673.984 1129.06,723.13 1129.62,739.266 1130.18,734.582 1130.74,732.187 1131.3,709.079 1131.86,710.604 1132.41,709.047 1132.97,740.943 1133.53,769.237 1134.09,768.117 1134.65,698.909 1135.21,682.607 1135.77,664.821 1136.33,600.809 1136.89,603.566 1137.45,591.052 1138.01,630.458 1138.57,636.324 1139.13,640.618 1139.68,676.187 1140.24,695.7 1140.8,681.856 1141.36,649.779 1141.92,636.069 1142.48,638.885 1143.04,643.021 1143.6,660.332 1144.16,664.585 1144.72,666.634 1145.28,652.538 1145.84,666.126 1146.4,669.632 1146.96,638.904 1147.51,642.18 1148.07,662.194 1148.63,648.79 1149.19,651.401 1149.75,640.983 1150.31,645.237 1150.87,648.283 1151.43,638.023 1151.99,672.374 1152.55,637.759 1153.11,625.991 1153.67,628.888 1154.23,665.548 1154.78,652.092 1155.34,655.656 1155.9,657.034 1156.46,672.902 1157.02,673.394 1157.58,692.84 1158.14,731.9 1158.7,728.083 1159.26,756.951 1159.82,721.338 1160.38,735.854 1160.94,735.741 1161.5,747.874 1162.05,739.428 1162.61,721.719 1163.17,736.125 1163.73,747.416 1164.29,755.379 1164.85,737.088 1165.41,763.016 1165.97,757.73 1166.53,755.231 1167.09,718.545 1167.65,717.127 1168.21,684.42 1168.77,680.676 1169.33,696.963 1169.88,679.093 1170.44,695.022 1171,697.819 1171.56,695.3 1172.12,693.923 1172.68,695.024 1173.24,695.606 1173.8,697.524 1174.36,728.441 1174.92,725.393 1175.48,724.227 1176.04,766.025 1176.6,793.566 1177.15,817.811 1177.71,795.681 1178.27,820.21 1178.83,764.395 1179.39,775.934 1179.95,768.521 1180.51,761.012 1181.07,739.984 1181.63,735.849 1182.19,746.652 1182.75,711.979 1183.31,710.811 1183.87,691.099 1184.43,704.267 1184.98,721.491 1185.54,676.244 1186.1,626.205 1186.66,626.337 1187.22,613.718 1187.78,649.728 1188.34,650.294 1188.9,635.227 1189.46,622.203 1190.02,624.464 1190.58,610.773 1191.14,628.734 1191.7,630.972 1192.25,664.724 1192.81,649.722 1193.37,633.488 1193.93,620.827 1194.49,607.565 1195.05,597.53 1195.61,583.031 1196.17,535.94 1196.73,545.56 1197.29,537.259 1197.85,527.918 1198.41,521.522 1198.97,543.079 1199.52,518.627 1200.08,546.388 1200.64,556.594 1201.2,548.365 1201.76,587.987 1202.32,623.926 1202.88,595.766 1203.44,586.243 1204,589.794 1204.56,596.086 1205.12,633.363 1205.68,672.334 1206.24,656.042 1206.8,670.055 1207.35,672.613 1207.91,675.015 1208.47,659.312 1209.03,675.199 1209.59,629.733 1210.15,682.599 1210.71,699.049 1211.27,715.974 1211.83,747.413 1212.39,763.145 1212.95,771.09 1213.51,699.754 1214.07,682.395 1214.62,683.499 1215.18,698.664 1215.74,696.311 1216.3,727.977 1216.86,693.348 1217.42,675.148 1217.98,660.374 1218.54,677.094 1219.1,680.27 1219.66,646.91 1220.22,619.34 1220.78,623.134 1221.34,642.81 1221.89,627.658 1222.45,660.279 1223.01,613.357 1223.57,602.964 1224.13,604.606 1224.69,590.613 1225.25,563.09 1225.81,591.249 1226.37,611.988 1226.93,648.929 1227.49,652.704 1228.05,686.216 1228.61,730.961 1229.17,714.151 1229.72,730.17 1230.28,742.598 1230.84,725.459 1231.4,706.597 1231.96,754.961 1232.52,734.756 1233.08,730.431 1233.64,727.781 1234.2,708.719 1234.76,693.157 1235.32,691.954 1235.88,706.608 1236.44,704.327 1236.99,721.818 1237.55,718.936 1238.11,702.554 1238.67,703.156 1239.23,701.251 1239.79,715.109 1240.35,714.365 1240.91,727.954 1241.47,710.796 1242.03,710.813 1242.59,679.258 1243.15,645.036 1243.71,651.574 1244.26,653.48 1244.82,702.644 1245.38,706.385 1245.94,707.261 1246.5,708.376 1247.06,707.369 1247.62,735.637 1248.18,779.868 1248.74,741.151 1249.3,739.115 1249.86,718.673 1250.42,685.083 1250.98,682.381 1251.54,680.488 1252.09,683.169 1252.65,698.794 1253.21,699.62 1253.77,731.567 1254.33,712.738 1254.89,708.215 1255.45,704.45 1256.01,703.495 1256.57,686.99 1257.13,687.081 1257.69,689.93 1258.25,689.819 1258.81,657.77 1259.36,676.634 1259.92,695.48 1260.48,712.151 1261.04,710.869 1261.6,706.832 1262.16,687.874 1262.72,686.94 1263.28,653.308 1263.84,653.536 1264.4,637.926 1264.96,607.497 1265.52,659.649 1266.08,661.245 1266.63,648.028 1267.19,618.623 1267.75,622.495 1268.31,641.471 1268.87,629.301 1269.43,649.383 1269.99,670.065 1270.55,642.277 1271.11,643.074 1271.67,663.945 1272.23,651.591 1272.79,653.348 1273.35,639.601 1273.91,654.997 1274.46,657.384 1275.02,674.994 1275.58,663.028 1276.14,678.301 1276.7,712.651 1277.26,676.509 1277.82,678.44 1278.38,692.834 1278.94,724.825 1279.5,705.291 1280.06,670.407 1280.62,685.304 1281.18,718.885 1281.73,748.554 1282.29,766.291 1282.85,760.53 1283.41,773.108 1283.97,770.751 1284.53,763.666 1285.09,759.614 1285.65,770.974 1286.21,762.578 1286.77,805.996 1287.33,816.637 1287.89,812.459 1288.45,803.63 1289,780.123 1289.56,771.478 1290.12,798.284 1290.68,777.235 1291.24,804.395 1291.8,813.779 1292.36,791.886 1292.92,814.027 1293.48,792.457 1294.04,802.095 1294.6,775.572 1295.16,754.8 1295.72,749.24 1296.28,731.58 1296.83,725.846 1297.39,659.079 1297.95,643.902 1298.51,663.549 1299.07,665.968 1299.63,669.797 1300.19,690.137 1300.75,673.073 1301.31,707.176 1301.87,675.488 1302.43,660.713 1302.99,661.931 1303.55,664.449 1304.1,632.28 1304.66,637.569 1305.22,608.237 1305.78,596.79 1306.34,581.829 1306.9,602.574 1307.46,589.518 1308.02,580.956 1308.58,583.608 1309.14,590.134 1309.7,590.406 1310.26,643.632 1310.82,647.738 1311.38,646.214 1311.93,665.134 1312.49,686.003 1313.05,702.532 1313.61,701.947 1314.17,703.935 1314.73,739.575 1315.29,754.695 1315.85,737.438 1316.41,748.885 1316.97,743.376 1317.53,756.577 1318.09,746.529 1318.65,741.711 1319.2,738.758 1319.76,757.784 1320.32,769.754 1320.88,795.098 1321.44,802.236 1322,765.22 1322.56,729.517 1323.12,727.875 1323.68,772.042 1324.24,780.026 1324.8,807.537 1325.36,770.841 1325.92,763.701 1326.47,712.73 1327.03,712.745 1327.59,682.109 1328.15,681.691 1328.71,713.937 1329.27,695.917 1329.83,727.832 1330.39,727.146 1330.95,724.234 1331.51,740.293 1332.07,722.585 1332.63,718.6 1333.19,698.221 1333.75,712.76 1334.3,760.739 1334.86,793.662 1335.42,786.554 1335.98,779.657 1336.54,723.019 1337.1,702.744 1337.66,731.625 1338.22,743.982 1338.78,740.603 1339.34,735.486 1339.9,762.996 1340.46,723.536 1341.02,705.461 1341.57,733.184 1342.13,733.629 1342.69,715.622 1343.25,714.163 1343.81,696.485 1344.37,731.718 1344.93,745.374 1345.49,756.266 1346.05,718.686 1346.61,733.765 1347.17,731.54 1347.73,725.134 1348.29,704.283 1348.84,666.121 1349.4,685.088 1349.96,701.346 1350.52,619.752 1351.08,605.187 1351.64,594.772 1352.2,550.775 1352.76,574.345 1353.32,614.875 1353.88,601.587 1354.44,589.66 1355,597.252 1355.56,569.756 1356.12,559.331 1356.67,581.517 1357.23,586.065 1357.79,574.568 1358.35,562.741 1358.91,569.95 1359.47,579.08 1360.03,619.727 1360.59,586.588 1361.15,591.087 1361.71,580.778 1362.27,570.352 1362.83,559.069 1363.39,616.978 1363.94,603.156 1364.5,608.718 1365.06,613.853 1365.62,604.243 1366.18,608.305 1366.74,612.764 1367.3,619.763 1367.86,625.172 1368.42,628.549 1368.98,633.079 1369.54,635.69 1370.1,639.423 1370.66,690.425 1371.21,692.128 1371.77,708.656 1372.33,673.119 1372.89,662.398 1373.45,651.988 1374.01,634.169 1374.57,638.81 1375.13,627.436 1375.69,694.819 1376.25,723.705 1376.81,723.253 1377.37,738.614 1377.93,721.218 1378.49,702.239 1379.04,705.855 1379.6,738.182 1380.16,718.053 1380.72,779.706 1381.28,789.105 1381.84,816.32 1382.4,759.067 1382.96,692.142 1383.52,691.165 1384.08,672.598 1384.64,693.022 1385.2,678.987 1385.76,696.684 1386.31,679.848 1386.87,680.999 1387.43,711.175 1387.99,695.581 1388.55,694.747 1389.11,709.734 1389.67,721.87 1390.23,718.741 1390.79,749.989 1391.35,748.224 1391.91,763.822 1392.47,794.426 1393.03,805.57 1393.58,783.867 1394.14,778.155 1394.7,790.692 1395.26,736.318 1395.82,719.333 1396.38,716.049 1396.94,731.065 1397.5,761.427 1398.06,758.208 1398.62,736.866 1399.18,753.098 1399.74,717.86 1400.3,719.728 1400.86,703.019 1401.41,704.455 1401.97,704.296 1402.53,719.141 1403.09,636.471 1403.65,639.013 1404.21,626.933 1404.77,662.54 1405.33,645.781 1405.89,660.442 1406.45,640.905 1407.01,626.436 1407.57,625.686 1408.13,629.055 1408.68,636.1 1409.24,637.393 1409.8,642.633 1410.36,647.251 1410.92,668.817 1411.48,672.061 1412.04,674.29 1412.6,658.531 1413.16,677.632 1413.72,693.517 1414.28,629.854 1414.84,613.829 1415.4,634.887 1415.95,637.791 1416.51,623.35 1417.07,610.991 1417.63,631.825 1418.19,683.234 1418.75,697.899 1419.31,686.758 1419.87,702.242 1420.43,686.528 1420.99,705.238 1421.55,705.519 1422.11,719.542 1422.67,681.815 1423.23,665.367 1423.78,684.025 1424.34,651.533 1424.9,654.805 1425.46,639.982 1426.02,639.665 1426.58,628.672 1427.14,685.489 1427.7,670.79 1428.26,668.078 1428.82,636.995 1429.38,604.807 1429.94,622.765 1430.5,609.775 1431.05,624.982 1431.61,641.778 1432.17,659.659 1432.73,660.443 1433.29,677.624 1433.85,698.147 1434.41,637.65 1434.97,622.383 1435.53,608.637 1436.09,627.309 1436.65,631.41 1437.21,635.087 1437.77,655.01 1438.33,657.904 1438.88,673.94 1439.44,671.888 1440,654.216 1440.56,687.803 1441.12,653.968 1441.68,675.403 1442.24,677.486 1442.8,692.175 1443.36,676.499 1443.92,681.352 1444.48,694.906 1445.04,684.054 1445.6,681.499 1446.15,714.12 1446.71,744.627 1447.27,759.798 1447.83,755.275 1448.39,754 1448.95,750.782 1449.51,748.429 1450.07,713.029 1450.63,692.893 1451.19,710.32 1451.75,728.323 1452.31,727.957 1452.87,745.204 1453.42,742.704 1453.98,724.026 1454.54,706.391 1455.1,672.412 1455.66,673.544 1456.22,689.254 1456.78,691.693 1457.34,673.62 1457.9,705.239 1458.46,703.909 1459.02,735.306 1459.58,730.47 1460.14,760.102 1460.7,836.914 1461.25,828.918 1461.81,835.15 1462.37,843.452 1462.93,831.845 1463.49,823.669 1464.05,816.754 1464.61,806.608 1465.17,801.614 1465.73,810.276 1466.29,789.007 1466.85,800.033 1467.41,795.891 1467.97,806.678 1468.52,766.555 1469.08,763.554 1469.64,763.044 1470.2,790.658 1470.76,797.762 1471.32,789.855 1471.88,782.607 1472.44,792.664 1473,768.597 1473.56,745.492 1474.12,726.707 1474.68,753.12 1475.24,731.585 1475.79,730.753 1476.35,709.793 1476.91,727.263 1477.47,708.763 1478.03,726.887 1478.59,705.677 1479.15,673.619 1479.71,671.48 1480.27,705.159 1480.83,691.761 1481.39,708.764 1481.95,739.387 1482.51,733.466 1483.07,681.976 1483.62,699.076 1484.18,665.445 1484.74,632.525 1485.3,648.133 1485.86,634.718 1486.42,671.647 1486.98,672.695 1487.54,718.651 1488.1,716.916 1488.66,716.086 1489.22,729.712 1489.78,729.01 1490.34,743.067 1490.89,706.004 1491.45,706.244 1492.01,705.264 1492.57,709.896 1493.13,706.898 1493.69,656.268 1494.25,673.867 1494.81,659.675 1495.37,660.799 1495.93,647.555 1496.49,646.566 1497.05,644.651 1497.61,680.307 1498.16,659.963 1498.72,627.555 1499.28,665.215 1499.84,664.191 1500.4,650.105 1500.96,686.399 1501.52,688.638 1502.08,671.185 1502.64,671.512 1503.2,654.532 1503.76,643.904 1504.32,647.333 1504.88,648.307 1505.44,629.512 1505.99,648.188 1506.55,632.219 1507.11,634.993 1507.67,619.929 1508.23,572.264 1508.79,596.13 1509.35,584.169 1509.91,603.188 1510.47,626.168 1511.03,645.221 1511.59,662.552 1512.15,666.729 1512.71,670.012 1513.26,684.657 1513.82,669.56 1514.38,703.386 1514.94,654.566 1515.5,641.619 1516.06,612.794 1516.62,616.637 1517.18,616.959 1517.74,618.773 1518.3,653.417 1518.86,654.932 1519.42,668.337 1519.98,668.893 1520.53,688.81 1521.09,703.387 1521.65,717.638 1522.21,746.291 1522.77,710.116 1523.33,678.37 1523.89,676.765 1524.45,693.479 1525.01,689.504 1525.57,672.925 1526.13,655.833 1526.69,674.873 1527.25,641.7 1527.81,613.212 1528.36,634.143 1528.92,600.071 1529.48,572.32 1530.04,548.585 1530.6,574.222 1531.16,598.525 1531.72,571.038 1532.28,579.036 1532.84,582.29 1533.4,590.389 1533.96,634.869 1534.52,618.613 1535.08,655.092 1535.63,657.088 1536.19,722.872 1536.75,723.087 1537.31,707.212 1537.87,755.888 1538.43,737.849 1538.99,719.628 1539.55,702.413 1540.11,683.95 1540.67,668.667 1541.23,683.08 1541.79,682.563 1542.35,649.133 1542.9,700.076 1543.46,681.644 1544.02,666.119 1544.58,684.489 1545.14,680.917 1545.7,680.091 1546.26,682.59 1546.82,650.543 1547.38,666.206 1547.94,683.602 1548.5,703.575 1549.06,718.705 1549.62,715.005 1550.18,730.157 1550.73,743.22 1551.29,722.913 1551.85,753.047 1552.41,750.374 1552.97,747.115 1553.53,742.894 1554.09,721.294 1554.65,718.427 1555.21,719.409 1555.77,698.77 1556.33,694.907 1556.89,709.49 1557.45,689.971 1558,656.245 1558.56,645.209 1559.12,645.958 1559.68,633.597 1560.24,603.678 1560.8,591.901 1561.36,616.143 1561.92,624.314 1562.48,596.81 1563.04,633.456 1563.6,619.171 1564.16,605.535 1564.72,555.748 1565.28,581.873 1565.83,605.078 1566.39,570.404 1566.95,573.197 1567.51,598.491 1568.07,635.404 1568.63,655.063 1569.19,679.685 1569.75,662.205 1570.31,644.566 1570.87,627.184 1571.43,629.516 1571.99,631.836 1572.55,666.537 1573.1,682.477 1573.66,664.741 1574.22,682.702 1574.78,664.23 1575.34,662.276 1575.9,664.249 1576.46,662.618 1577.02,695.378 1577.58,712.07 1578.14,710.775 1578.7,727.405 1579.26,723.029 1579.82,673.182 1580.37,690.863 1580.93,723.288 1581.49,736.431 1582.05,753.174 1582.61,732.01 1583.17,726.796 1583.73,727.982 1584.29,725.665 1584.85,723.291 1585.41,737.644 1585.97,704.288 1586.53,702.658 1587.09,704.059 1587.65,732.819 1588.2,712.906 1588.76,710.106 1589.32,757.042 1589.88,766.093 1590.44,728.339 1591,696.658 1591.56,660.625 1592.12,644.737 1592.68,660.496 1593.24,676.452 1593.8,674.342 1594.36,693.21 1594.92,711.338 1595.47,756.313 1596.03,721.373 1596.59,720.341 1597.15,688.815 1597.71,671.798 1598.27,671.194 1598.83,684.896 1599.39,702.347 1599.95,698.535 1600.51,648.951 1601.07,633.554 1601.63,619.446 1602.19,605.102 1602.74,608.721 1603.3,613.987 1603.86,618.552 1604.42,623.695 1604.98,576.478 1605.54,599.928 1606.1,620.548 1606.66,639.198 1607.22,641.819 1607.78,658.774 1608.34,690.084 1608.9,688.386 1609.46,685.806 1610.02,698.286 1610.57,696.281 1611.13,664.008 1611.69,667.724 1612.25,667.495 1612.81,701.1 1613.37,701.111 1613.93,686.908 1614.49,701.738 1615.05,669.238 1615.61,690.15 1616.17,676.603 1616.73,695.732 1617.29,698.597 1617.84,714.061 1618.4,696.358 1618.96,683.943 1619.52,688.17 1620.08,735.368 1620.64,765.373 1621.2,824.778 1621.76,829.607 1622.32,804.464 1622.88,798.284 1623.44,776.445 1624,753.538 1624.56,750.344 1625.11,748.257 1625.67,757.424 1626.23,817.689 1626.79,810.056 1627.35,850.363 1627.91,826.73 1628.47,786.121 1629.03,798.098 1629.59,805.371 1630.15,802.136 1630.71,794.808 1631.27,806.596 1631.83,780.8 1632.39,790.383 1632.94,736.723 1633.5,749.692 1634.06,696.166 1634.62,694.366 1635.18,694.997 1635.74,692.092 1636.3,690.997 1636.86,705.98 1637.42,705.23 1637.98,701.353 1638.54,695.76 1639.1,663.436 1639.66,649.232 1640.21,646.943 1640.77,664.631 1641.33,665.439 1641.89,650.434 1642.45,637.913 1643.01,623.67 1643.57,662.043 1644.13,682.589 1644.69,664.813 1645.25,680.352 1645.81,698.113 1646.37,697.625 1646.93,727.995 1647.48,692.615 1648.04,671.946 1648.6,653.919 1649.16,621.577 1649.72,626.322 1650.28,646.847 1650.84,667.37 1651.4,672.051 1651.96,639.714 1652.52,623.865 1653.08,611.187 1653.64,633.386 1654.2,621.889 1654.76,623.292 1655.31,659.131 1655.87,723.657 1656.43,721.482 1656.99,718.179 1657.55,700.596 1658.11,717.581 1658.67,715.782 1659.23,717.173 1659.79,666.537 1660.35,654.913 1660.91,686.372 1661.47,702.701 1662.03,720.479 1662.58,706.432 1663.14,708.921 1663.7,672.691 1664.26,656.317 1664.82,677.787 1665.38,694.921 1665.94,697.846 1666.5,694.552 1667.06,696.1 1667.62,664.24 1668.18,681.27 1668.74,697.973 1669.3,666.3 1669.85,667.103 1670.41,670.944 1670.97,691.052 1671.53,658.668 1672.09,660.452 1672.65,645.661 1673.21,644.704 1673.77,632.815 1674.33,621.839 1674.89,639.501 1675.45,655.324 1676.01,671.756 1676.57,689.707 1677.13,677.619 1677.68,662.403 1678.24,646.777 1678.8,662.596 1679.36,677.66 1679.92,679.304 1680.48,712.143 1681.04,711.1 1681.6,726.029 1682.16,743.088 1682.72,739.793 1683.28,749.508 1683.84,747.417 1684.4,742.783 1684.95,758.623 1685.51,815.078 1686.07,792.692 1686.63,754.847 1687.19,766.026 1687.75,793.595 1688.31,784.874 1688.87,830.601 1689.43,825.637 1689.99,820.189 1690.55,797.394 1691.11,738.242 1691.67,718.925 1692.23,733.103 1692.78,711.433 1693.34,711.905 1693.9,710.011 1694.46,693.678 1695.02,692.168 1695.58,676.247 1696.14,679.926 1696.7,681.496 1697.26,684.562 1697.82,666.868 1698.38,670.392 1698.94,684.141 1699.5,668.938 1700.05,699.407 1700.61,695.367 1701.17,692.386 1701.73,710.565 1702.29,675.316 1702.85,674.114 1703.41,672.614 1703.97,686.639 1704.53,654.513 1705.09,637.477 1705.65,641.544 1706.21,658.071 1706.77,675.426 1707.32,657.59 1707.88,674.621 1708.44,673.498 1709,656.014 1709.56,639.745 1710.12,611.434 1710.68,634.417 1711.24,624.186 1711.8,609.692 1712.36,580.279 1712.92,601.773 1713.48,589.168 1714.04,608.448 1714.6,627.129 1715.15,630.502 1715.71,603.826 1716.27,609.776 1716.83,597.259 1717.39,585.304 1717.95,623.496 1718.51,660.279 1719.07,659.311 1719.63,646.746 1720.19,632.389 1720.75,635.574 1721.31,656.721 1721.87,693.876 1722.42,705.565 1722.98,704.192 1723.54,688.907 1724.1,691.923 1724.66,659.831 1725.22,648.368 1725.78,646.94 1726.34,614.7 1726.9,620.317 1727.46,634.711 1728.02,640.106 1728.58,656.189 1729.14,658.722 1729.69,679.564 1730.25,662.715 1730.81,665.012 1731.37,667.32 1731.93,683.219 1732.49,684.17 1733.05,685.048 1733.61,653.136 1734.17,654.533 1734.73,643.911 1735.29,657.056 1735.85,657.93 1736.41,658.348 1736.97,629.992 1737.52,618.722 1738.08,609.269 1738.64,563.6 1739.2,570.885 1739.76,573.993 1740.32,597.764 1740.88,599.574 1741.44,587.84 1742,560.733 1742.56,581.582 1743.12,603.029 1743.68,605.616 1744.24,560.64 1744.79,570.798 1745.35,593.22 1745.91,579.222 1746.47,568.949 1747.03,560.266 1747.59,583.045 1748.15,571.515 1748.71,562.609 1749.27,567.583 1749.83,573.217 1750.39,614.853 1750.95,618.98 1751.51,638.496 1752.06,608.855 1752.62,612.718 1753.18,618.13 1753.74,607.47 1754.3,596.7 1754.86,601.158 1755.42,620.895 1755.98,621.158 1756.54,629.924 1757.1,635.029 1757.66,604.032 1758.22,623.728 1758.78,640.557 1759.34,644.326 1759.89,658.085 1760.45,643.675 1761.01,644.083 1761.57,633.224 1762.13,622.111 1762.69,642.934 1763.25,677.585 1763.81,675.961 1764.37,724.72 1764.93,744.069 1765.49,774.799 1766.05,720.235 1766.61,720.07 1767.16,706.199 1767.72,718.746 1768.28,750.569 1768.84,798.552 1769.4,773.677 1769.96,771.198 1770.52,750.366 1771.08,762.995 1771.64,757.877 1772.2,756.562 1772.76,787.425 1773.32,784.556 1773.88,783.479 1774.43,780.3 1774.99,803.404 1775.55,780.115 1776.11,780.408 1776.67,776.18 1777.23,739.932 1777.79,719.453 1778.35,733.551 1778.91,744.045 1779.47,755.749 1780.03,769.21 1780.59,768.6 1781.15,747.801 1781.71,759.039 1782.26,787.058 1782.82,766.647 1783.38,764.18 1783.94,742.595 1784.5,739.588 1785.06,737.104 1785.62,719.459 1786.18,734.893 1786.74,784.01 1787.3,777.451 1787.86,727.17 1788.42,709.985 1788.98,706.632 1789.53,703.469 1790.09,701.265 1790.65,714.716 1791.21,698.757 1791.77,697.515 1792.33,696.913 1792.89,698.288 1793.45,679.388 1794.01,676.353 1794.57,658.797 1795.13,631.86 1795.69,650.626 1796.25,653.394 1796.8,672.701 1797.36,657.689 1797.92,659.912 1798.48,658.969 1799.04,611.456 1799.6,629.511 1800.16,665.305 1800.72,681.728 1801.28,697.785 1801.84,747.409 1802.4,741.787 1802.96,758.042 1803.52,752.468 1804.08,731.653 1804.63,731.521 1805.19,730.176 1805.75,739.872 1806.31,688.579 1806.87,716.065 1807.43,698.16 1807.99,730.703 1808.55,729.873 1809.11,761.567 1809.67,758.129 1810.23,738.705 1810.79,735.197 1811.35,730.749 1811.9,713.096 1812.46,726.899 1813.02,677.971 1813.58,647.21 1814.14,635.245 1814.7,653.065 1815.26,670.309 1815.82,687.314 1816.38,702.354 1816.94,700.677 1817.5,697.009 1818.06,695.114 1818.62,696.282 1819.18,677.979 1819.73,677.708 1820.29,664.321 1820.85,679.598 1821.41,661.555 1821.97,658.496 1822.53,657.306 1823.09,644.347 1823.65,627.068 1824.21,611.819 1824.77,615.207 1825.33,682.182 1825.89,663.524 1826.45,665.503 1827,680.119 1827.56,694.487 1828.12,658.062 1828.68,676.143 1829.24,661.894 1829.8,676.855 1830.36,708.004 1830.92,721.049 1831.48,701.698 1832.04,697.934 1832.6,696.301 1833.16,693.337 1833.72,708.198 1834.27,705.348 1834.83,671.462 1835.39,674.193 1835.95,657.722 1836.51,641.36 1837.07,625.926 1837.63,646.526 1838.19,647.712 \"/>\n<path clip-path=\"url(#clip703)\" d=\"M720.247 691.44 L720.806 691.44 L721.365 691.44 L721.924 691.44 L722.484 691.44 L723.043 691.44 L723.602 691.44 L724.161 691.44 L724.721 691.44 L725.28 691.44 L725.839 691.44 L726.398 691.44 L726.958 691.44 L727.517 691.44 L728.076 691.44 L728.635 691.44 L729.195 691.44 L729.754 691.44 L730.313 691.44 L730.872 691.44 L731.432 691.44 L731.991 691.44 L732.55 691.44 L733.109 691.44 L733.669 691.44 L734.228 691.44 L734.787 691.44 L735.346 691.44 L735.906 691.44 L736.465 691.44 L737.024 691.44 L737.583 691.44 L738.143 691.44 L738.702 691.44 L739.261 691.44 L739.82 691.44 L740.38 691.44 L740.939 691.44 L741.498 691.44 L742.057 691.44 L742.617 691.44 L743.176 691.44 L743.735 691.44 L744.294 691.44 L744.854 691.44 L745.413 691.44 L745.972 691.44 L746.531 691.44 L747.091 691.44 L747.65 691.44 L748.209 691.44 L748.768 691.44 L749.328 691.44 L749.887 691.44 L750.446 691.44 L751.005 691.44 L751.565 691.44 L752.124 691.44 L752.683 691.44 L753.242 691.44 L753.802 691.44 L754.361 691.44 L754.92 691.44 L755.479 691.44 L756.039 691.44 L756.598 691.44 L757.157 691.44 L757.716 691.44 L758.276 691.44 L758.835 691.44 L759.394 691.44 L759.953 691.44 L760.513 691.44 L761.072 691.44 L761.631 691.44 L762.19 691.44 L762.75 691.44 L763.309 691.44 L763.868 691.44 L764.427 691.44 L764.987 691.44 L765.546 691.44 L766.105 691.44 L766.664 691.44 L767.224 691.44 L767.783 691.44 L768.342 691.44 L768.901 691.44 L769.461 691.44 L770.02 691.44 L770.579 691.44 L771.138 691.44 L771.698 691.44 L772.257 691.44 L772.816 691.44 L773.375 691.44 L773.935 691.44 L774.494 691.44 L775.053 691.44 L775.612 691.44 L776.172 691.44 L776.731 691.44 L777.29 691.44 L777.849 691.44 L778.409 691.44 L778.968 691.44 L779.527 691.44 L780.086 691.44 L780.646 691.44 L781.205 691.44 L781.764 691.44 L782.323 691.44 L782.883 691.44 L783.442 691.44 L784.001 691.44 L784.56 691.44 L785.12 691.44 L785.679 691.44 L786.238 691.44 L786.797 691.44 L787.357 691.44 L787.916 691.44 L788.475 691.44 L789.034 691.44 L789.594 691.44 L790.153 691.44 L790.712 691.44 L791.271 691.44 L791.831 691.44 L792.39 691.44 L792.949 691.44 L793.508 691.44 L794.068 691.44 L794.627 691.44 L795.186 691.44 L795.745 691.44 L796.305 691.44 L796.864 691.44 L797.423 691.44 L797.982 691.44 L798.542 691.44 L799.101 691.44 L799.66 691.44 L800.219 691.44 L800.779 691.44 L801.338 691.44 L801.897 691.44 L802.456 691.44 L803.016 691.44 L803.575 691.44 L804.134 691.44 L804.693 691.44 L805.253 691.44 L805.812 691.44 L806.371 691.44 L806.931 691.44 L807.49 691.44 L808.049 691.44 L808.608 691.44 L809.168 691.44 L809.727 691.44 L810.286 691.44 L810.845 691.44 L811.405 691.44 L811.964 691.44 L812.523 691.44 L813.082 691.44 L813.642 691.44 L814.201 691.44 L814.76 691.44 L815.319 691.44 L815.879 691.44 L816.438 691.44 L816.997 691.44 L817.556 691.44 L818.116 691.44 L818.675 691.44 L819.234 691.44 L819.793 691.44 L820.353 691.44 L820.912 691.44 L821.471 691.44 L822.03 691.44 L822.59 691.44 L823.149 691.44 L823.708 691.44 L824.267 691.44 L824.827 691.44 L825.386 691.44 L825.945 691.44 L826.504 691.44 L827.064 691.44 L827.623 691.44 L828.182 691.44 L828.741 691.44 L829.301 691.44 L829.86 691.44 L830.419 691.44 L830.978 691.44 L831.538 691.44 L832.097 691.44 L832.656 691.44 L833.215 691.44 L833.775 691.44 L834.334 691.44 L834.893 691.44 L835.452 691.44 L836.012 691.44 L836.571 691.44 L837.13 691.44 L837.689 691.44 L838.249 691.44 L838.808 691.44 L839.367 691.44 L839.926 691.44 L840.486 691.44 L841.045 691.44 L841.604 691.44 L842.163 691.44 L842.723 691.44 L843.282 691.44 L843.841 691.44 L844.4 691.44 L844.96 691.44 L845.519 691.44 L846.078 691.44 L846.637 691.44 L847.197 691.44 L847.756 691.44 L848.315 691.44 L848.874 691.44 L849.434 691.44 L849.993 691.44 L850.552 691.44 L851.111 691.44 L851.671 691.44 L852.23 691.44 L852.789 691.44 L853.348 691.44 L853.908 691.44 L854.467 691.44 L855.026 691.44 L855.585 691.44 L856.145 691.44 L856.704 691.44 L857.263 691.44 L857.822 691.44 L858.382 691.44 L858.941 691.44 L859.5 691.44 L860.059 691.44 L860.619 691.44 L861.178 691.44 L861.737 691.44 L862.296 691.44 L862.856 691.44 L863.415 691.44 L863.974 691.44 L864.533 691.44 L865.093 691.44 L865.652 691.44 L866.211 691.44 L866.77 691.44 L867.33 691.44 L867.889 691.44 L868.448 691.44 L869.007 691.44 L869.567 691.44 L870.126 691.44 L870.685 691.44 L871.244 691.44 L871.804 691.44 L872.363 691.44 L872.922 691.44 L873.481 691.44 L874.041 691.44 L874.6 691.44 L875.159 691.44 L875.718 691.44 L876.278 691.44 L876.837 691.44 L877.396 691.44 L877.955 691.44 L878.515 691.44 L879.074 691.44 L879.633 691.44 L880.192 691.44 L880.752 691.44 L881.311 691.44 L881.87 691.44 L882.429 691.44 L882.989 691.44 L883.548 691.44 L884.107 691.44 L884.666 691.44 L885.226 691.44 L885.785 691.44 L886.344 691.44 L886.903 691.44 L887.463 691.44 L888.022 691.44 L888.581 691.44 L889.14 691.44 L889.7 691.44 L890.259 691.44 L890.818 691.44 L891.377 691.44 L891.937 691.44 L892.496 691.44 L893.055 691.44 L893.614 691.44 L894.174 691.44 L894.733 691.44 L895.292 691.44 L895.851 691.44 L896.411 691.44 L896.97 691.44 L897.529 691.44 L898.088 691.44 L898.648 691.44 L899.207 691.44 L899.766 691.44 L900.325 691.44 L900.885 691.44 L901.444 691.44 L902.003 691.44 L902.562 691.44 L903.122 691.44 L903.681 691.44 L904.24 691.44 L904.799 691.44 L905.359 691.44 L905.918 691.44 L906.477 691.44 L907.036 691.44 L907.596 691.44 L908.155 691.44 L908.714 691.44 L909.273 691.44 L909.833 691.44 L910.392 691.44 L910.951 691.44 L911.51 691.44 L912.07 691.44 L912.629 691.44 L913.188 691.44 L913.747 691.44 L914.307 691.44 L914.866 691.44 L915.425 691.44 L915.984 691.44 L916.544 691.44 L917.103 691.44 L917.662 691.44 L918.221 691.44 L918.781 691.44 L919.34 691.44 L919.899 691.44 L920.458 691.44 L921.018 691.44 L921.577 691.44 L922.136 691.44 L922.695 691.44 L923.255 691.44 L923.814 691.44 L924.373 691.44 L924.932 691.44 L925.492 691.44 L926.051 691.44 L926.61 691.44 L927.169 691.44 L927.729 691.44 L928.288 691.44 L928.847 691.44 L929.406 691.44 L929.966 691.44 L930.525 691.44 L931.084 691.44 L931.644 691.44 L932.203 691.44 L932.762 691.44 L933.321 691.44 L933.881 691.44 L934.44 691.44 L934.999 691.44 L935.558 691.44 L936.118 691.44 L936.677 691.44 L937.236 691.44 L937.795 691.44 L938.355 691.44 L938.914 691.44 L939.473 691.44 L940.032 691.44 L940.592 691.44 L941.151 691.44 L941.71 691.44 L942.269 691.44 L942.829 691.44 L943.388 691.44 L943.947 691.44 L944.506 691.44 L945.066 691.44 L945.625 691.44 L946.184 691.44 L946.743 691.44 L947.303 691.44 L947.862 691.44 L948.421 691.44 L948.98 691.44 L949.54 691.44 L950.099 691.44 L950.658 691.44 L951.217 691.44 L951.777 691.44 L952.336 691.44 L952.895 691.44 L953.454 691.44 L954.014 691.44 L954.573 691.44 L955.132 691.44 L955.691 691.44 L956.251 691.44 L956.81 691.44 L957.369 691.44 L957.928 691.44 L958.488 691.44 L959.047 691.44 L959.606 691.44 L960.165 691.44 L960.725 691.44 L961.284 691.44 L961.843 691.44 L962.402 691.44 L962.962 691.44 L963.521 691.44 L964.08 691.44 L964.639 691.44 L965.199 691.44 L965.758 691.44 L966.317 691.44 L966.876 691.44 L967.436 691.44 L967.995 691.44 L968.554 691.44 L969.113 691.44 L969.673 691.44 L970.232 691.44 L970.791 691.44 L971.35 691.44 L971.91 691.44 L972.469 691.44 L973.028 691.44 L973.587 691.44 L974.147 691.44 L974.706 691.44 L975.265 691.44 L975.824 691.44 L976.384 691.44 L976.943 691.44 L977.502 691.44 L978.061 691.44 L978.621 691.44 L979.18 691.44 L979.739 691.44 L980.298 691.44 L980.858 691.44 L981.417 691.44 L981.976 691.44 L982.535 691.44 L983.095 691.44 L983.654 691.44 L984.213 691.44 L984.772 691.44 L985.332 691.44 L985.891 691.44 L986.45 691.44 L987.009 691.44 L987.569 691.44 L988.128 691.44 L988.687 691.44 L989.246 691.44 L989.806 691.44 L990.365 691.44 L990.924 691.44 L991.483 691.44 L992.043 691.44 L992.602 691.44 L993.161 691.44 L993.72 691.44 L994.28 691.44 L994.839 691.44 L995.398 691.44 L995.957 691.44 L996.517 691.44 L997.076 691.44 L997.635 691.44 L998.194 691.44 L998.754 691.44 L999.313 691.44 L999.872 691.44 L1000.43 691.44 L1000.99 691.44 L1001.55 691.44 L1002.11 691.44 L1002.67 691.44 L1003.23 691.44 L1003.79 691.44 L1004.35 691.44 L1004.91 691.44 L1005.46 691.44 L1006.02 691.44 L1006.58 691.44 L1007.14 691.44 L1007.7 691.44 L1008.26 691.44 L1008.82 691.44 L1009.38 691.44 L1009.94 691.44 L1010.5 691.44 L1011.06 691.44 L1011.62 691.44 L1012.18 691.44 L1012.73 691.44 L1013.29 691.44 L1013.85 691.44 L1014.41 691.44 L1014.97 691.44 L1015.53 691.44 L1016.09 691.44 L1016.65 691.44 L1017.21 691.44 L1017.77 691.44 L1018.33 691.44 L1018.89 691.44 L1019.45 691.44 L1020.01 691.44 L1020.56 691.44 L1021.12 691.44 L1021.68 691.44 L1022.24 691.44 L1022.8 691.44 L1023.36 691.44 L1023.92 691.44 L1024.48 691.44 L1025.04 691.44 L1025.6 691.44 L1026.16 691.44 L1026.72 691.44 L1027.28 691.44 L1027.83 691.44 L1028.39 691.44 L1028.95 691.44 L1029.51 691.44 L1030.07 691.44 L1030.63 691.44 L1031.19 691.44 L1031.75 691.44 L1032.31 691.44 L1032.87 691.44 L1033.43 691.44 L1033.99 691.44 L1034.55 691.44 L1035.1 691.44 L1035.66 691.44 L1036.22 691.44 L1036.78 691.44 L1037.34 691.44 L1037.9 691.44 L1038.46 691.44 L1039.02 691.44 L1039.58 691.44 L1040.14 691.44 L1040.7 691.44 L1041.26 691.44 L1041.82 691.44 L1042.38 691.44 L1042.93 691.44 L1043.49 691.44 L1044.05 691.44 L1044.61 691.44 L1045.17 691.44 L1045.73 691.44 L1046.29 691.44 L1046.85 691.44 L1047.41 691.44 L1047.97 691.44 L1048.53 691.44 L1049.09 691.44 L1049.65 691.44 L1050.2 691.44 L1050.76 691.44 L1051.32 691.44 L1051.88 691.44 L1052.44 691.44 L1053 691.44 L1053.56 691.44 L1054.12 691.44 L1054.68 691.44 L1055.24 691.44 L1055.8 691.44 L1056.36 691.44 L1056.92 691.44 L1057.48 691.44 L1058.03 691.44 L1058.59 691.44 L1059.15 691.44 L1059.71 691.44 L1060.27 691.44 L1060.83 691.44 L1061.39 691.44 L1061.95 691.44 L1062.51 691.44 L1063.07 691.44 L1063.63 691.44 L1064.19 691.44 L1064.75 691.44 L1065.3 691.44 L1065.86 691.44 L1066.42 691.44 L1066.98 691.44 L1067.54 691.44 L1068.1 691.44 L1068.66 691.44 L1069.22 691.44 L1069.78 691.44 L1070.34 691.44 L1070.9 691.44 L1071.46 691.44 L1072.02 691.44 L1072.57 691.44 L1073.13 691.44 L1073.69 691.44 L1074.25 691.44 L1074.81 691.44 L1075.37 691.44 L1075.93 691.44 L1076.49 691.44 L1077.05 691.44 L1077.61 691.44 L1078.17 691.44 L1078.73 691.44 L1079.29 691.44 L1079.85 691.44 L1080.4 691.44 L1080.96 691.44 L1081.52 691.44 L1082.08 691.44 L1082.64 691.44 L1083.2 691.44 L1083.76 691.44 L1084.32 691.44 L1084.88 691.44 L1085.44 691.44 L1086 691.44 L1086.56 691.44 L1087.12 691.44 L1087.67 691.44 L1088.23 691.44 L1088.79 691.44 L1089.35 691.44 L1089.91 691.44 L1090.47 691.44 L1091.03 691.44 L1091.59 691.44 L1092.15 691.44 L1092.71 691.44 L1093.27 691.44 L1093.83 691.44 L1094.39 691.44 L1094.94 691.44 L1095.5 691.44 L1096.06 691.44 L1096.62 691.44 L1097.18 691.44 L1097.74 691.44 L1098.3 691.44 L1098.86 691.44 L1099.42 691.44 L1099.98 691.44 L1100.54 691.44 L1101.1 691.44 L1101.66 691.44 L1102.22 691.44 L1102.77 691.44 L1103.33 691.44 L1103.89 691.44 L1104.45 691.44 L1105.01 691.44 L1105.57 691.44 L1106.13 691.44 L1106.69 691.44 L1107.25 691.44 L1107.81 691.44 L1108.37 691.44 L1108.93 691.44 L1109.49 691.44 L1110.04 691.44 L1110.6 691.44 L1111.16 691.44 L1111.72 691.44 L1112.28 691.44 L1112.84 691.44 L1113.4 691.44 L1113.96 691.44 L1114.52 691.44 L1115.08 691.44 L1115.64 691.44 L1116.2 691.44 L1116.76 691.44 L1117.31 691.44 L1117.87 691.44 L1118.43 691.44 L1118.99 691.44 L1119.55 691.44 L1120.11 691.44 L1120.67 691.44 L1121.23 691.44 L1121.79 691.44 L1122.35 691.44 L1122.91 691.44 L1123.47 691.44 L1124.03 691.44 L1124.59 691.44 L1125.14 691.44 L1125.7 691.44 L1126.26 691.44 L1126.82 691.44 L1127.38 691.44 L1127.94 691.44 L1128.5 691.44 L1129.06 691.44 L1129.62 691.44 L1130.18 691.44 L1130.74 691.44 L1131.3 691.44 L1131.86 691.44 L1132.41 691.44 L1132.97 691.44 L1133.53 691.44 L1134.09 691.44 L1134.65 691.44 L1135.21 691.44 L1135.77 691.44 L1136.33 691.44 L1136.89 691.44 L1137.45 691.44 L1138.01 691.44 L1138.57 691.44 L1139.13 691.44 L1139.68 691.44 L1140.24 691.44 L1140.8 691.44 L1141.36 691.44 L1141.92 691.44 L1142.48 691.44 L1143.04 691.44 L1143.6 691.44 L1144.16 691.44 L1144.72 691.44 L1145.28 691.44 L1145.84 691.44 L1146.4 691.44 L1146.96 691.44 L1147.51 691.44 L1148.07 691.44 L1148.63 691.44 L1149.19 691.44 L1149.75 691.44 L1150.31 691.44 L1150.87 691.44 L1151.43 691.44 L1151.99 691.44 L1152.55 691.44 L1153.11 691.44 L1153.67 691.44 L1154.23 691.44 L1154.78 691.44 L1155.34 691.44 L1155.9 691.44 L1156.46 691.44 L1157.02 691.44 L1157.58 691.44 L1158.14 691.44 L1158.7 691.44 L1159.26 691.44 L1159.82 691.44 L1160.38 691.44 L1160.94 691.44 L1161.5 691.44 L1162.05 691.44 L1162.61 691.44 L1163.17 691.44 L1163.73 691.44 L1164.29 691.44 L1164.85 691.44 L1165.41 691.44 L1165.97 691.44 L1166.53 691.44 L1167.09 691.44 L1167.65 691.44 L1168.21 691.44 L1168.77 691.44 L1169.33 691.44 L1169.88 691.44 L1170.44 691.44 L1171 691.44 L1171.56 691.44 L1172.12 691.44 L1172.68 691.44 L1173.24 691.44 L1173.8 691.44 L1174.36 691.44 L1174.92 691.44 L1175.48 691.44 L1176.04 691.44 L1176.6 691.44 L1177.15 691.44 L1177.71 691.44 L1178.27 691.44 L1178.83 691.44 L1179.39 691.44 L1179.95 691.44 L1180.51 691.44 L1181.07 691.44 L1181.63 691.44 L1182.19 691.44 L1182.75 691.44 L1183.31 691.44 L1183.87 691.44 L1184.43 691.44 L1184.98 691.44 L1185.54 691.44 L1186.1 691.44 L1186.66 691.44 L1187.22 691.44 L1187.78 691.44 L1188.34 691.44 L1188.9 691.44 L1189.46 691.44 L1190.02 691.44 L1190.58 691.44 L1191.14 691.44 L1191.7 691.44 L1192.25 691.44 L1192.81 691.44 L1193.37 691.44 L1193.93 691.44 L1194.49 691.44 L1195.05 691.44 L1195.61 691.44 L1196.17 691.44 L1196.73 691.44 L1197.29 691.44 L1197.85 691.44 L1198.41 691.44 L1198.97 691.44 L1199.52 691.44 L1200.08 691.44 L1200.64 691.44 L1201.2 691.44 L1201.76 691.44 L1202.32 691.44 L1202.88 691.44 L1203.44 691.44 L1204 691.44 L1204.56 691.44 L1205.12 691.44 L1205.68 691.44 L1206.24 691.44 L1206.8 691.44 L1207.35 691.44 L1207.91 691.44 L1208.47 691.44 L1209.03 691.44 L1209.59 691.44 L1210.15 691.44 L1210.71 691.44 L1211.27 691.44 L1211.83 691.44 L1212.39 691.44 L1212.95 691.44 L1213.51 691.44 L1214.07 691.44 L1214.62 691.44 L1215.18 691.44 L1215.74 691.44 L1216.3 691.44 L1216.86 691.44 L1217.42 691.44 L1217.98 691.44 L1218.54 691.44 L1219.1 691.44 L1219.66 691.44 L1220.22 691.44 L1220.78 691.44 L1221.34 691.44 L1221.89 691.44 L1222.45 691.44 L1223.01 691.44 L1223.57 691.44 L1224.13 691.44 L1224.69 691.44 L1225.25 691.44 L1225.81 691.44 L1226.37 691.44 L1226.93 691.44 L1227.49 691.44 L1228.05 691.44 L1228.61 691.44 L1229.17 691.44 L1229.72 691.44 L1230.28 691.44 L1230.84 691.44 L1231.4 691.44 L1231.96 691.44 L1232.52 691.44 L1233.08 691.44 L1233.64 691.44 L1234.2 691.44 L1234.76 691.44 L1235.32 691.44 L1235.88 691.44 L1236.44 691.44 L1236.99 691.44 L1237.55 691.44 L1238.11 691.44 L1238.67 691.44 L1239.23 691.44 L1239.79 691.44 L1240.35 691.44 L1240.91 691.44 L1241.47 691.44 L1242.03 691.44 L1242.59 691.44 L1243.15 691.44 L1243.71 691.44 L1244.26 691.44 L1244.82 691.44 L1245.38 691.44 L1245.94 691.44 L1246.5 691.44 L1247.06 691.44 L1247.62 691.44 L1248.18 691.44 L1248.74 691.44 L1249.3 691.44 L1249.86 691.44 L1250.42 691.44 L1250.98 691.44 L1251.54 691.44 L1252.09 691.44 L1252.65 691.44 L1253.21 691.44 L1253.77 691.44 L1254.33 691.44 L1254.89 691.44 L1255.45 691.44 L1256.01 691.44 L1256.57 691.44 L1257.13 691.44 L1257.69 691.44 L1258.25 691.44 L1258.81 691.44 L1259.36 691.44 L1259.92 691.44 L1260.48 691.44 L1261.04 691.44 L1261.6 691.44 L1262.16 691.44 L1262.72 691.44 L1263.28 691.44 L1263.84 691.44 L1264.4 691.44 L1264.96 691.44 L1265.52 691.44 L1266.08 691.44 L1266.63 691.44 L1267.19 691.44 L1267.75 691.44 L1268.31 691.44 L1268.87 691.44 L1269.43 691.44 L1269.99 691.44 L1270.55 691.44 L1271.11 691.44 L1271.67 691.44 L1272.23 691.44 L1272.79 691.44 L1273.35 691.44 L1273.91 691.44 L1274.46 691.44 L1275.02 691.44 L1275.58 691.44 L1276.14 691.44 L1276.7 691.44 L1277.26 691.44 L1277.82 691.44 L1278.38 691.44 L1278.94 691.44 L1279.5 691.44 L1280.06 691.44 L1280.62 691.44 L1281.18 691.44 L1281.73 691.44 L1282.29 691.44 L1282.85 691.44 L1283.41 691.44 L1283.97 691.44 L1284.53 691.44 L1285.09 691.44 L1285.65 691.44 L1286.21 691.44 L1286.77 691.44 L1287.33 691.44 L1287.89 691.44 L1288.45 691.44 L1289 691.44 L1289.56 691.44 L1290.12 691.44 L1290.68 691.44 L1291.24 691.44 L1291.8 691.44 L1292.36 691.44 L1292.92 691.44 L1293.48 691.44 L1294.04 691.44 L1294.6 691.44 L1295.16 691.44 L1295.72 691.44 L1296.28 691.44 L1296.83 691.44 L1297.39 691.44 L1297.95 691.44 L1298.51 691.44 L1299.07 691.44 L1299.63 691.44 L1300.19 691.44 L1300.75 691.44 L1301.31 691.44 L1301.87 691.44 L1302.43 691.44 L1302.99 691.44 L1303.55 691.44 L1304.1 691.44 L1304.66 691.44 L1305.22 691.44 L1305.78 691.44 L1306.34 691.44 L1306.9 691.44 L1307.46 691.44 L1308.02 691.44 L1308.58 691.44 L1309.14 691.44 L1309.7 691.44 L1310.26 691.44 L1310.82 691.44 L1311.38 691.44 L1311.93 691.44 L1312.49 691.44 L1313.05 691.44 L1313.61 691.44 L1314.17 691.44 L1314.73 691.44 L1315.29 691.44 L1315.85 691.44 L1316.41 691.44 L1316.97 691.44 L1317.53 691.44 L1318.09 691.44 L1318.65 691.44 L1319.2 691.44 L1319.76 691.44 L1320.32 691.44 L1320.88 691.44 L1321.44 691.44 L1322 691.44 L1322.56 691.44 L1323.12 691.44 L1323.68 691.44 L1324.24 691.44 L1324.8 691.44 L1325.36 691.44 L1325.92 691.44 L1326.47 691.44 L1327.03 691.44 L1327.59 691.44 L1328.15 691.44 L1328.71 691.44 L1329.27 691.44 L1329.83 691.44 L1330.39 691.44 L1330.95 691.44 L1331.51 691.44 L1332.07 691.44 L1332.63 691.44 L1333.19 691.44 L1333.75 691.44 L1334.3 691.44 L1334.86 691.44 L1335.42 691.44 L1335.98 691.44 L1336.54 691.44 L1337.1 691.44 L1337.66 691.44 L1338.22 691.44 L1338.78 691.44 L1339.34 691.44 L1339.9 691.44 L1340.46 691.44 L1341.02 691.44 L1341.57 691.44 L1342.13 691.44 L1342.69 691.44 L1343.25 691.44 L1343.81 691.44 L1344.37 691.44 L1344.93 691.44 L1345.49 691.44 L1346.05 691.44 L1346.61 691.44 L1347.17 691.44 L1347.73 691.44 L1348.29 691.44 L1348.84 691.44 L1349.4 691.44 L1349.96 691.44 L1350.52 691.44 L1351.08 691.44 L1351.64 691.44 L1352.2 691.44 L1352.76 691.44 L1353.32 691.44 L1353.88 691.44 L1354.44 691.44 L1355 691.44 L1355.56 691.44 L1356.12 691.44 L1356.67 691.44 L1357.23 691.44 L1357.79 691.44 L1358.35 691.44 L1358.91 691.44 L1359.47 691.44 L1360.03 691.44 L1360.59 691.44 L1361.15 691.44 L1361.71 691.44 L1362.27 691.44 L1362.83 691.44 L1363.39 691.44 L1363.94 691.44 L1364.5 691.44 L1365.06 691.44 L1365.62 691.44 L1366.18 691.44 L1366.74 691.44 L1367.3 691.44 L1367.86 691.44 L1368.42 691.44 L1368.98 691.44 L1369.54 691.44 L1370.1 691.44 L1370.66 691.44 L1371.21 691.44 L1371.77 691.44 L1372.33 691.44 L1372.89 691.44 L1373.45 691.44 L1374.01 691.44 L1374.57 691.44 L1375.13 691.44 L1375.69 691.44 L1376.25 691.44 L1376.81 691.44 L1377.37 691.44 L1377.93 691.44 L1378.49 691.44 L1379.04 691.44 L1379.6 691.44 L1380.16 691.44 L1380.72 691.44 L1381.28 691.44 L1381.84 691.44 L1382.4 691.44 L1382.96 691.44 L1383.52 691.44 L1384.08 691.44 L1384.64 691.44 L1385.2 691.44 L1385.76 691.44 L1386.31 691.44 L1386.87 691.44 L1387.43 691.44 L1387.99 691.44 L1388.55 691.44 L1389.11 691.44 L1389.67 691.44 L1390.23 691.44 L1390.79 691.44 L1391.35 691.44 L1391.91 691.44 L1392.47 691.44 L1393.03 691.44 L1393.58 691.44 L1394.14 691.44 L1394.7 691.44 L1395.26 691.44 L1395.82 691.44 L1396.38 691.44 L1396.94 691.44 L1397.5 691.44 L1398.06 691.44 L1398.62 691.44 L1399.18 691.44 L1399.74 691.44 L1400.3 691.44 L1400.86 691.44 L1401.41 691.44 L1401.97 691.44 L1402.53 691.44 L1403.09 691.44 L1403.65 691.44 L1404.21 691.44 L1404.77 691.44 L1405.33 691.44 L1405.89 691.44 L1406.45 691.44 L1407.01 691.44 L1407.57 691.44 L1408.13 691.44 L1408.68 691.44 L1409.24 691.44 L1409.8 691.44 L1410.36 691.44 L1410.92 691.44 L1411.48 691.44 L1412.04 691.44 L1412.6 691.44 L1413.16 691.44 L1413.72 691.44 L1414.28 691.44 L1414.84 691.44 L1415.4 691.44 L1415.95 691.44 L1416.51 691.44 L1417.07 691.44 L1417.63 691.44 L1418.19 691.44 L1418.75 691.44 L1419.31 691.44 L1419.87 691.44 L1420.43 691.44 L1420.99 691.44 L1421.55 691.44 L1422.11 691.44 L1422.67 691.44 L1423.23 691.44 L1423.78 691.44 L1424.34 691.44 L1424.9 691.44 L1425.46 691.44 L1426.02 691.44 L1426.58 691.44 L1427.14 691.44 L1427.7 691.44 L1428.26 691.44 L1428.82 691.44 L1429.38 691.44 L1429.94 691.44 L1430.5 691.44 L1431.05 691.44 L1431.61 691.44 L1432.17 691.44 L1432.73 691.44 L1433.29 691.44 L1433.85 691.44 L1434.41 691.44 L1434.97 691.44 L1435.53 691.44 L1436.09 691.44 L1436.65 691.44 L1437.21 691.44 L1437.77 691.44 L1438.33 691.44 L1438.88 691.44 L1439.44 691.44 L1440 691.44 L1440.56 691.44 L1441.12 691.44 L1441.68 691.44 L1442.24 691.44 L1442.8 691.44 L1443.36 691.44 L1443.92 691.44 L1444.48 691.44 L1445.04 691.44 L1445.6 691.44 L1446.15 691.44 L1446.71 691.44 L1447.27 691.44 L1447.83 691.44 L1448.39 691.44 L1448.95 691.44 L1449.51 691.44 L1450.07 691.44 L1450.63 691.44 L1451.19 691.44 L1451.75 691.44 L1452.31 691.44 L1452.87 691.44 L1453.42 691.44 L1453.98 691.44 L1454.54 691.44 L1455.1 691.44 L1455.66 691.44 L1456.22 691.44 L1456.78 691.44 L1457.34 691.44 L1457.9 691.44 L1458.46 691.44 L1459.02 691.44 L1459.58 691.44 L1460.14 691.44 L1460.7 691.44 L1461.25 691.44 L1461.81 691.44 L1462.37 691.44 L1462.93 691.44 L1463.49 691.44 L1464.05 691.44 L1464.61 691.44 L1465.17 691.44 L1465.73 691.44 L1466.29 691.44 L1466.85 691.44 L1467.41 691.44 L1467.97 691.44 L1468.52 691.44 L1469.08 691.44 L1469.64 691.44 L1470.2 691.44 L1470.76 691.44 L1471.32 691.44 L1471.88 691.44 L1472.44 691.44 L1473 691.44 L1473.56 691.44 L1474.12 691.44 L1474.68 691.44 L1475.24 691.44 L1475.79 691.44 L1476.35 691.44 L1476.91 691.44 L1477.47 691.44 L1478.03 691.44 L1478.59 691.44 L1479.15 691.44 L1479.71 691.44 L1480.27 691.44 L1480.83 691.44 L1481.39 691.44 L1481.95 691.44 L1482.51 691.44 L1483.07 691.44 L1483.62 691.44 L1484.18 691.44 L1484.74 691.44 L1485.3 691.44 L1485.86 691.44 L1486.42 691.44 L1486.98 691.44 L1487.54 691.44 L1488.1 691.44 L1488.66 691.44 L1489.22 691.44 L1489.78 691.44 L1490.34 691.44 L1490.89 691.44 L1491.45 691.44 L1492.01 691.44 L1492.57 691.44 L1493.13 691.44 L1493.69 691.44 L1494.25 691.44 L1494.81 691.44 L1495.37 691.44 L1495.93 691.44 L1496.49 691.44 L1497.05 691.44 L1497.61 691.44 L1498.16 691.44 L1498.72 691.44 L1499.28 691.44 L1499.84 691.44 L1500.4 691.44 L1500.96 691.44 L1501.52 691.44 L1502.08 691.44 L1502.64 691.44 L1503.2 691.44 L1503.76 691.44 L1504.32 691.44 L1504.88 691.44 L1505.44 691.44 L1505.99 691.44 L1506.55 691.44 L1507.11 691.44 L1507.67 691.44 L1508.23 691.44 L1508.79 691.44 L1509.35 691.44 L1509.91 691.44 L1510.47 691.44 L1511.03 691.44 L1511.59 691.44 L1512.15 691.44 L1512.71 691.44 L1513.26 691.44 L1513.82 691.44 L1514.38 691.44 L1514.94 691.44 L1515.5 691.44 L1516.06 691.44 L1516.62 691.44 L1517.18 691.44 L1517.74 691.44 L1518.3 691.44 L1518.86 691.44 L1519.42 691.44 L1519.98 691.44 L1520.53 691.44 L1521.09 691.44 L1521.65 691.44 L1522.21 691.44 L1522.77 691.44 L1523.33 691.44 L1523.89 691.44 L1524.45 691.44 L1525.01 691.44 L1525.57 691.44 L1526.13 691.44 L1526.69 691.44 L1527.25 691.44 L1527.81 691.44 L1528.36 691.44 L1528.92 691.44 L1529.48 691.44 L1530.04 691.44 L1530.6 691.44 L1531.16 691.44 L1531.72 691.44 L1532.28 691.44 L1532.84 691.44 L1533.4 691.44 L1533.96 691.44 L1534.52 691.44 L1535.08 691.44 L1535.63 691.44 L1536.19 691.44 L1536.75 691.44 L1537.31 691.44 L1537.87 691.44 L1538.43 691.44 L1538.99 691.44 L1539.55 691.44 L1540.11 691.44 L1540.67 691.44 L1541.23 691.44 L1541.79 691.44 L1542.35 691.44 L1542.9 691.44 L1543.46 691.44 L1544.02 691.44 L1544.58 691.44 L1545.14 691.44 L1545.7 691.44 L1546.26 691.44 L1546.82 691.44 L1547.38 691.44 L1547.94 691.44 L1548.5 691.44 L1549.06 691.44 L1549.62 691.44 L1550.18 691.44 L1550.73 691.44 L1551.29 691.44 L1551.85 691.44 L1552.41 691.44 L1552.97 691.44 L1553.53 691.44 L1554.09 691.44 L1554.65 691.44 L1555.21 691.44 L1555.77 691.44 L1556.33 691.44 L1556.89 691.44 L1557.45 691.44 L1558 691.44 L1558.56 691.44 L1559.12 691.44 L1559.68 691.44 L1560.24 691.44 L1560.8 691.44 L1561.36 691.44 L1561.92 691.44 L1562.48 691.44 L1563.04 691.44 L1563.6 691.44 L1564.16 691.44 L1564.72 691.44 L1565.28 691.44 L1565.83 691.44 L1566.39 691.44 L1566.95 691.44 L1567.51 691.44 L1568.07 691.44 L1568.63 691.44 L1569.19 691.44 L1569.75 691.44 L1570.31 691.44 L1570.87 691.44 L1571.43 691.44 L1571.99 691.44 L1572.55 691.44 L1573.1 691.44 L1573.66 691.44 L1574.22 691.44 L1574.78 691.44 L1575.34 691.44 L1575.9 691.44 L1576.46 691.44 L1577.02 691.44 L1577.58 691.44 L1578.14 691.44 L1578.7 691.44 L1579.26 691.44 L1579.82 691.44 L1580.37 691.44 L1580.93 691.44 L1581.49 691.44 L1582.05 691.44 L1582.61 691.44 L1583.17 691.44 L1583.73 691.44 L1584.29 691.44 L1584.85 691.44 L1585.41 691.44 L1585.97 691.44 L1586.53 691.44 L1587.09 691.44 L1587.65 691.44 L1588.2 691.44 L1588.76 691.44 L1589.32 691.44 L1589.88 691.44 L1590.44 691.44 L1591 691.44 L1591.56 691.44 L1592.12 691.44 L1592.68 691.44 L1593.24 691.44 L1593.8 691.44 L1594.36 691.44 L1594.92 691.44 L1595.47 691.44 L1596.03 691.44 L1596.59 691.44 L1597.15 691.44 L1597.71 691.44 L1598.27 691.44 L1598.83 691.44 L1599.39 691.44 L1599.95 691.44 L1600.51 691.44 L1601.07 691.44 L1601.63 691.44 L1602.19 691.44 L1602.74 691.44 L1603.3 691.44 L1603.86 691.44 L1604.42 691.44 L1604.98 691.44 L1605.54 691.44 L1606.1 691.44 L1606.66 691.44 L1607.22 691.44 L1607.78 691.44 L1608.34 691.44 L1608.9 691.44 L1609.46 691.44 L1610.02 691.44 L1610.57 691.44 L1611.13 691.44 L1611.69 691.44 L1612.25 691.44 L1612.81 691.44 L1613.37 691.44 L1613.93 691.44 L1614.49 691.44 L1615.05 691.44 L1615.61 691.44 L1616.17 691.44 L1616.73 691.44 L1617.29 691.44 L1617.84 691.44 L1618.4 691.44 L1618.96 691.44 L1619.52 691.44 L1620.08 691.44 L1620.64 691.44 L1621.2 691.44 L1621.76 691.44 L1622.32 691.44 L1622.88 691.44 L1623.44 691.44 L1624 691.44 L1624.56 691.44 L1625.11 691.44 L1625.67 691.44 L1626.23 691.44 L1626.79 691.44 L1627.35 691.44 L1627.91 691.44 L1628.47 691.44 L1629.03 691.44 L1629.59 691.44 L1630.15 691.44 L1630.71 691.44 L1631.27 691.44 L1631.83 691.44 L1632.39 691.44 L1632.94 691.44 L1633.5 691.44 L1634.06 691.44 L1634.62 691.44 L1635.18 691.44 L1635.74 691.44 L1636.3 691.44 L1636.86 691.44 L1637.42 691.44 L1637.98 691.44 L1638.54 691.44 L1639.1 691.44 L1639.66 691.44 L1640.21 691.44 L1640.77 691.44 L1641.33 691.44 L1641.89 691.44 L1642.45 691.44 L1643.01 691.44 L1643.57 691.44 L1644.13 691.44 L1644.69 691.44 L1645.25 691.44 L1645.81 691.44 L1646.37 691.44 L1646.93 691.44 L1647.48 691.44 L1648.04 691.44 L1648.6 691.44 L1649.16 691.44 L1649.72 691.44 L1650.28 691.44 L1650.84 691.44 L1651.4 691.44 L1651.96 691.44 L1652.52 691.44 L1653.08 691.44 L1653.64 691.44 L1654.2 691.44 L1654.76 691.44 L1655.31 691.44 L1655.87 691.44 L1656.43 691.44 L1656.99 691.44 L1657.55 691.44 L1658.11 691.44 L1658.67 691.44 L1659.23 691.44 L1659.79 691.44 L1660.35 691.44 L1660.91 691.44 L1661.47 691.44 L1662.03 691.44 L1662.58 691.44 L1663.14 691.44 L1663.7 691.44 L1664.26 691.44 L1664.82 691.44 L1665.38 691.44 L1665.94 691.44 L1666.5 691.44 L1667.06 691.44 L1667.62 691.44 L1668.18 691.44 L1668.74 691.44 L1669.3 691.44 L1669.85 691.44 L1670.41 691.44 L1670.97 691.44 L1671.53 691.44 L1672.09 691.44 L1672.65 691.44 L1673.21 691.44 L1673.77 691.44 L1674.33 691.44 L1674.89 691.44 L1675.45 691.44 L1676.01 691.44 L1676.57 691.44 L1677.13 691.44 L1677.68 691.44 L1678.24 691.44 L1678.8 691.44 L1679.36 691.44 L1679.92 691.44 L1680.48 691.44 L1681.04 691.44 L1681.6 691.44 L1682.16 691.44 L1682.72 691.44 L1683.28 691.44 L1683.84 691.44 L1684.4 691.44 L1684.95 691.44 L1685.51 691.44 L1686.07 691.44 L1686.63 691.44 L1687.19 691.44 L1687.75 691.44 L1688.31 691.44 L1688.87 691.44 L1689.43 691.44 L1689.99 691.44 L1690.55 691.44 L1691.11 691.44 L1691.67 691.44 L1692.23 691.44 L1692.78 691.44 L1693.34 691.44 L1693.9 691.44 L1694.46 691.44 L1695.02 691.44 L1695.58 691.44 L1696.14 691.44 L1696.7 691.44 L1697.26 691.44 L1697.82 691.44 L1698.38 691.44 L1698.94 691.44 L1699.5 691.44 L1700.05 691.44 L1700.61 691.44 L1701.17 691.44 L1701.73 691.44 L1702.29 691.44 L1702.85 691.44 L1703.41 691.44 L1703.97 691.44 L1704.53 691.44 L1705.09 691.44 L1705.65 691.44 L1706.21 691.44 L1706.77 691.44 L1707.32 691.44 L1707.88 691.44 L1708.44 691.44 L1709 691.44 L1709.56 691.44 L1710.12 691.44 L1710.68 691.44 L1711.24 691.44 L1711.8 691.44 L1712.36 691.44 L1712.92 691.44 L1713.48 691.44 L1714.04 691.44 L1714.6 691.44 L1715.15 691.44 L1715.71 691.44 L1716.27 691.44 L1716.83 691.44 L1717.39 691.44 L1717.95 691.44 L1718.51 691.44 L1719.07 691.44 L1719.63 691.44 L1720.19 691.44 L1720.75 691.44 L1721.31 691.44 L1721.87 691.44 L1722.42 691.44 L1722.98 691.44 L1723.54 691.44 L1724.1 691.44 L1724.66 691.44 L1725.22 691.44 L1725.78 691.44 L1726.34 691.44 L1726.9 691.44 L1727.46 691.44 L1728.02 691.44 L1728.58 691.44 L1729.14 691.44 L1729.69 691.44 L1730.25 691.44 L1730.81 691.44 L1731.37 691.44 L1731.93 691.44 L1732.49 691.44 L1733.05 691.44 L1733.61 691.44 L1734.17 691.44 L1734.73 691.44 L1735.29 691.44 L1735.85 691.44 L1736.41 691.44 L1736.97 691.44 L1737.52 691.44 L1738.08 691.44 L1738.64 691.44 L1739.2 691.44 L1739.76 691.44 L1740.32 691.44 L1740.88 691.44 L1741.44 691.44 L1742 691.44 L1742.56 691.44 L1743.12 691.44 L1743.68 691.44 L1744.24 691.44 L1744.79 691.44 L1745.35 691.44 L1745.91 691.44 L1746.47 691.44 L1747.03 691.44 L1747.59 691.44 L1748.15 691.44 L1748.71 691.44 L1749.27 691.44 L1749.83 691.44 L1750.39 691.44 L1750.95 691.44 L1751.51 691.44 L1752.06 691.44 L1752.62 691.44 L1753.18 691.44 L1753.74 691.44 L1754.3 691.44 L1754.86 691.44 L1755.42 691.44 L1755.98 691.44 L1756.54 691.44 L1757.1 691.44 L1757.66 691.44 L1758.22 691.44 L1758.78 691.44 L1759.34 691.44 L1759.89 691.44 L1760.45 691.44 L1761.01 691.44 L1761.57 691.44 L1762.13 691.44 L1762.69 691.44 L1763.25 691.44 L1763.81 691.44 L1764.37 691.44 L1764.93 691.44 L1765.49 691.44 L1766.05 691.44 L1766.61 691.44 L1767.16 691.44 L1767.72 691.44 L1768.28 691.44 L1768.84 691.44 L1769.4 691.44 L1769.96 691.44 L1770.52 691.44 L1771.08 691.44 L1771.64 691.44 L1772.2 691.44 L1772.76 691.44 L1773.32 691.44 L1773.88 691.44 L1774.43 691.44 L1774.99 691.44 L1775.55 691.44 L1776.11 691.44 L1776.67 691.44 L1777.23 691.44 L1777.79 691.44 L1778.35 691.44 L1778.91 691.44 L1779.47 691.44 L1780.03 691.44 L1780.59 691.44 L1781.15 691.44 L1781.71 691.44 L1782.26 691.44 L1782.82 691.44 L1783.38 691.44 L1783.94 691.44 L1784.5 691.44 L1785.06 691.44 L1785.62 691.44 L1786.18 691.44 L1786.74 691.44 L1787.3 691.44 L1787.86 691.44 L1788.42 691.44 L1788.98 691.44 L1789.53 691.44 L1790.09 691.44 L1790.65 691.44 L1791.21 691.44 L1791.77 691.44 L1792.33 691.44 L1792.89 691.44 L1793.45 691.44 L1794.01 691.44 L1794.57 691.44 L1795.13 691.44 L1795.69 691.44 L1796.25 691.44 L1796.8 691.44 L1797.36 691.44 L1797.92 691.44 L1798.48 691.44 L1799.04 691.44 L1799.6 691.44 L1800.16 691.44 L1800.72 691.44 L1801.28 691.44 L1801.84 691.44 L1802.4 691.44 L1802.96 691.44 L1803.52 691.44 L1804.08 691.44 L1804.63 691.44 L1805.19 691.44 L1805.75 691.44 L1806.31 691.44 L1806.87 691.44 L1807.43 691.44 L1807.99 691.44 L1808.55 691.44 L1809.11 691.44 L1809.67 691.44 L1810.23 691.44 L1810.79 691.44 L1811.35 691.44 L1811.9 691.44 L1812.46 691.44 L1813.02 691.44 L1813.58 691.44 L1814.14 691.44 L1814.7 691.44 L1815.26 691.44 L1815.82 691.44 L1816.38 691.44 L1816.94 691.44 L1817.5 691.44 L1818.06 691.44 L1818.62 691.44 L1819.18 691.44 L1819.73 691.44 L1820.29 691.44 L1820.85 691.44 L1821.41 691.44 L1821.97 691.44 L1822.53 691.44 L1823.09 691.44 L1823.65 691.44 L1824.21 691.44 L1824.77 691.44 L1825.33 691.44 L1825.89 691.44 L1826.45 691.44 L1827 691.44 L1827.56 691.44 L1828.12 691.44 L1828.68 691.44 L1829.24 691.44 L1829.8 691.44 L1830.36 691.44 L1830.92 691.44 L1831.48 691.44 L1832.04 691.44 L1832.6 691.44 L1833.16 691.44 L1833.72 691.44 L1834.27 691.44 L1834.83 691.44 L1835.39 691.44 L1835.95 691.44 L1836.51 691.44 L1837.07 691.44 L1837.63 691.44 L1838.19 691.44 L1838.19 681.538 L1837.63 681.538 L1837.07 681.538 L1836.51 681.538 L1835.95 681.538 L1835.39 681.538 L1834.83 681.538 L1834.27 681.538 L1833.72 681.538 L1833.16 681.538 L1832.6 681.538 L1832.04 681.538 L1831.48 681.538 L1830.92 681.538 L1830.36 681.538 L1829.8 681.538 L1829.24 681.538 L1828.68 681.538 L1828.12 681.538 L1827.56 681.538 L1827 681.538 L1826.45 681.538 L1825.89 681.538 L1825.33 681.538 L1824.77 681.538 L1824.21 681.538 L1823.65 681.538 L1823.09 681.538 L1822.53 681.538 L1821.97 681.538 L1821.41 681.538 L1820.85 681.538 L1820.29 681.538 L1819.73 681.538 L1819.18 681.538 L1818.62 681.538 L1818.06 681.538 L1817.5 681.538 L1816.94 681.538 L1816.38 681.538 L1815.82 681.538 L1815.26 681.538 L1814.7 681.538 L1814.14 681.538 L1813.58 681.538 L1813.02 681.538 L1812.46 681.538 L1811.9 681.538 L1811.35 681.538 L1810.79 681.538 L1810.23 681.538 L1809.67 681.538 L1809.11 681.538 L1808.55 681.538 L1807.99 681.538 L1807.43 681.538 L1806.87 681.538 L1806.31 681.538 L1805.75 681.538 L1805.19 681.538 L1804.63 681.538 L1804.08 681.538 L1803.52 681.538 L1802.96 681.538 L1802.4 681.538 L1801.84 681.538 L1801.28 681.538 L1800.72 681.538 L1800.16 681.538 L1799.6 681.538 L1799.04 681.538 L1798.48 681.538 L1797.92 681.538 L1797.36 681.538 L1796.8 681.538 L1796.25 681.538 L1795.69 681.538 L1795.13 681.538 L1794.57 681.538 L1794.01 681.538 L1793.45 681.538 L1792.89 681.538 L1792.33 681.538 L1791.77 681.538 L1791.21 681.538 L1790.65 681.538 L1790.09 681.538 L1789.53 681.538 L1788.98 681.538 L1788.42 681.538 L1787.86 681.538 L1787.3 681.538 L1786.74 681.538 L1786.18 681.538 L1785.62 681.538 L1785.06 681.538 L1784.5 681.538 L1783.94 681.538 L1783.38 681.538 L1782.82 681.538 L1782.26 681.538 L1781.71 681.538 L1781.15 681.538 L1780.59 681.538 L1780.03 681.538 L1779.47 681.538 L1778.91 681.538 L1778.35 681.538 L1777.79 681.538 L1777.23 681.538 L1776.67 681.538 L1776.11 681.538 L1775.55 681.538 L1774.99 681.538 L1774.43 681.538 L1773.88 681.538 L1773.32 681.538 L1772.76 681.538 L1772.2 681.538 L1771.64 681.538 L1771.08 681.538 L1770.52 681.538 L1769.96 681.538 L1769.4 681.538 L1768.84 681.538 L1768.28 681.538 L1767.72 681.538 L1767.16 681.538 L1766.61 681.538 L1766.05 681.538 L1765.49 681.538 L1764.93 681.538 L1764.37 681.538 L1763.81 681.538 L1763.25 681.538 L1762.69 681.538 L1762.13 681.538 L1761.57 681.538 L1761.01 681.538 L1760.45 681.538 L1759.89 681.538 L1759.34 681.538 L1758.78 681.538 L1758.22 681.538 L1757.66 681.538 L1757.1 681.538 L1756.54 681.538 L1755.98 681.538 L1755.42 681.538 L1754.86 681.538 L1754.3 681.538 L1753.74 681.538 L1753.18 681.538 L1752.62 681.538 L1752.06 681.538 L1751.51 681.538 L1750.95 681.538 L1750.39 681.538 L1749.83 681.538 L1749.27 681.538 L1748.71 681.538 L1748.15 681.538 L1747.59 681.538 L1747.03 681.538 L1746.47 681.538 L1745.91 681.538 L1745.35 681.538 L1744.79 681.538 L1744.24 681.538 L1743.68 681.538 L1743.12 681.538 L1742.56 681.538 L1742 681.538 L1741.44 681.538 L1740.88 681.538 L1740.32 681.538 L1739.76 681.538 L1739.2 681.538 L1738.64 681.538 L1738.08 681.538 L1737.52 681.538 L1736.97 681.538 L1736.41 681.538 L1735.85 681.538 L1735.29 681.538 L1734.73 681.538 L1734.17 681.538 L1733.61 681.538 L1733.05 681.538 L1732.49 681.538 L1731.93 681.538 L1731.37 681.538 L1730.81 681.538 L1730.25 681.538 L1729.69 681.538 L1729.14 681.538 L1728.58 681.538 L1728.02 681.538 L1727.46 681.538 L1726.9 681.538 L1726.34 681.538 L1725.78 681.538 L1725.22 681.538 L1724.66 681.538 L1724.1 681.538 L1723.54 681.538 L1722.98 681.538 L1722.42 681.538 L1721.87 681.538 L1721.31 681.538 L1720.75 681.538 L1720.19 681.538 L1719.63 681.538 L1719.07 681.538 L1718.51 681.538 L1717.95 681.538 L1717.39 681.538 L1716.83 681.538 L1716.27 681.538 L1715.71 681.538 L1715.15 681.538 L1714.6 681.538 L1714.04 681.538 L1713.48 681.538 L1712.92 681.538 L1712.36 681.538 L1711.8 681.538 L1711.24 681.538 L1710.68 681.538 L1710.12 681.538 L1709.56 681.538 L1709 681.538 L1708.44 681.538 L1707.88 681.538 L1707.32 681.538 L1706.77 681.538 L1706.21 681.538 L1705.65 681.538 L1705.09 681.538 L1704.53 681.538 L1703.97 681.538 L1703.41 681.538 L1702.85 681.538 L1702.29 681.538 L1701.73 681.538 L1701.17 681.538 L1700.61 681.538 L1700.05 681.538 L1699.5 681.538 L1698.94 681.538 L1698.38 681.538 L1697.82 681.538 L1697.26 681.538 L1696.7 681.538 L1696.14 681.538 L1695.58 681.538 L1695.02 681.538 L1694.46 681.538 L1693.9 681.538 L1693.34 681.538 L1692.78 681.538 L1692.23 681.538 L1691.67 681.538 L1691.11 681.538 L1690.55 681.538 L1689.99 681.538 L1689.43 681.538 L1688.87 681.538 L1688.31 681.538 L1687.75 681.538 L1687.19 681.538 L1686.63 681.538 L1686.07 681.538 L1685.51 681.538 L1684.95 681.538 L1684.4 681.538 L1683.84 681.538 L1683.28 681.538 L1682.72 681.538 L1682.16 681.538 L1681.6 681.538 L1681.04 681.538 L1680.48 681.538 L1679.92 681.538 L1679.36 681.538 L1678.8 681.538 L1678.24 681.538 L1677.68 681.538 L1677.13 681.538 L1676.57 681.538 L1676.01 681.538 L1675.45 681.538 L1674.89 681.538 L1674.33 681.538 L1673.77 681.538 L1673.21 681.538 L1672.65 681.538 L1672.09 681.538 L1671.53 681.538 L1670.97 681.538 L1670.41 681.538 L1669.85 681.538 L1669.3 681.538 L1668.74 681.538 L1668.18 681.538 L1667.62 681.538 L1667.06 681.538 L1666.5 681.538 L1665.94 681.538 L1665.38 681.538 L1664.82 681.538 L1664.26 681.538 L1663.7 681.538 L1663.14 681.538 L1662.58 681.538 L1662.03 681.538 L1661.47 681.538 L1660.91 681.538 L1660.35 681.538 L1659.79 681.538 L1659.23 681.538 L1658.67 681.538 L1658.11 681.538 L1657.55 681.538 L1656.99 681.538 L1656.43 681.538 L1655.87 681.538 L1655.31 681.538 L1654.76 681.538 L1654.2 681.538 L1653.64 681.538 L1653.08 681.538 L1652.52 681.538 L1651.96 681.538 L1651.4 681.538 L1650.84 681.538 L1650.28 681.538 L1649.72 681.538 L1649.16 681.538 L1648.6 681.538 L1648.04 681.538 L1647.48 681.538 L1646.93 681.538 L1646.37 681.538 L1645.81 681.538 L1645.25 681.538 L1644.69 681.538 L1644.13 681.538 L1643.57 681.538 L1643.01 681.538 L1642.45 681.538 L1641.89 681.538 L1641.33 681.538 L1640.77 681.538 L1640.21 681.538 L1639.66 681.538 L1639.1 681.538 L1638.54 681.538 L1637.98 681.538 L1637.42 681.538 L1636.86 681.538 L1636.3 681.538 L1635.74 681.538 L1635.18 681.538 L1634.62 681.538 L1634.06 681.538 L1633.5 681.538 L1632.94 681.538 L1632.39 681.538 L1631.83 681.538 L1631.27 681.538 L1630.71 681.538 L1630.15 681.538 L1629.59 681.538 L1629.03 681.538 L1628.47 681.538 L1627.91 681.538 L1627.35 681.538 L1626.79 681.538 L1626.23 681.538 L1625.67 681.538 L1625.11 681.538 L1624.56 681.538 L1624 681.538 L1623.44 681.538 L1622.88 681.538 L1622.32 681.538 L1621.76 681.538 L1621.2 681.538 L1620.64 681.538 L1620.08 681.538 L1619.52 681.538 L1618.96 681.538 L1618.4 681.538 L1617.84 681.538 L1617.29 681.538 L1616.73 681.538 L1616.17 681.538 L1615.61 681.538 L1615.05 681.538 L1614.49 681.538 L1613.93 681.538 L1613.37 681.538 L1612.81 681.538 L1612.25 681.538 L1611.69 681.538 L1611.13 681.538 L1610.57 681.538 L1610.02 681.538 L1609.46 681.538 L1608.9 681.538 L1608.34 681.538 L1607.78 681.538 L1607.22 681.538 L1606.66 681.538 L1606.1 681.538 L1605.54 681.538 L1604.98 681.538 L1604.42 681.538 L1603.86 681.538 L1603.3 681.538 L1602.74 681.538 L1602.19 681.538 L1601.63 681.538 L1601.07 681.538 L1600.51 681.538 L1599.95 681.538 L1599.39 681.538 L1598.83 681.538 L1598.27 681.538 L1597.71 681.538 L1597.15 681.538 L1596.59 681.538 L1596.03 681.538 L1595.47 681.538 L1594.92 681.538 L1594.36 681.538 L1593.8 681.538 L1593.24 681.538 L1592.68 681.538 L1592.12 681.538 L1591.56 681.538 L1591 681.538 L1590.44 681.538 L1589.88 681.538 L1589.32 681.538 L1588.76 681.538 L1588.2 681.538 L1587.65 681.538 L1587.09 681.538 L1586.53 681.538 L1585.97 681.538 L1585.41 681.538 L1584.85 681.538 L1584.29 681.538 L1583.73 681.538 L1583.17 681.538 L1582.61 681.538 L1582.05 681.538 L1581.49 681.538 L1580.93 681.538 L1580.37 681.538 L1579.82 681.538 L1579.26 681.538 L1578.7 681.538 L1578.14 681.538 L1577.58 681.538 L1577.02 681.538 L1576.46 681.538 L1575.9 681.538 L1575.34 681.538 L1574.78 681.538 L1574.22 681.538 L1573.66 681.538 L1573.1 681.538 L1572.55 681.538 L1571.99 681.538 L1571.43 681.538 L1570.87 681.538 L1570.31 681.538 L1569.75 681.538 L1569.19 681.538 L1568.63 681.538 L1568.07 681.538 L1567.51 681.538 L1566.95 681.538 L1566.39 681.538 L1565.83 681.538 L1565.28 681.538 L1564.72 681.538 L1564.16 681.538 L1563.6 681.538 L1563.04 681.538 L1562.48 681.538 L1561.92 681.538 L1561.36 681.538 L1560.8 681.538 L1560.24 681.538 L1559.68 681.538 L1559.12 681.538 L1558.56 681.538 L1558 681.538 L1557.45 681.538 L1556.89 681.538 L1556.33 681.538 L1555.77 681.538 L1555.21 681.538 L1554.65 681.538 L1554.09 681.538 L1553.53 681.538 L1552.97 681.538 L1552.41 681.538 L1551.85 681.538 L1551.29 681.538 L1550.73 681.538 L1550.18 681.538 L1549.62 681.538 L1549.06 681.538 L1548.5 681.538 L1547.94 681.538 L1547.38 681.538 L1546.82 681.538 L1546.26 681.538 L1545.7 681.538 L1545.14 681.538 L1544.58 681.538 L1544.02 681.538 L1543.46 681.538 L1542.9 681.538 L1542.35 681.538 L1541.79 681.538 L1541.23 681.538 L1540.67 681.538 L1540.11 681.538 L1539.55 681.538 L1538.99 681.538 L1538.43 681.538 L1537.87 681.538 L1537.31 681.538 L1536.75 681.538 L1536.19 681.538 L1535.63 681.538 L1535.08 681.538 L1534.52 681.538 L1533.96 681.538 L1533.4 681.538 L1532.84 681.538 L1532.28 681.538 L1531.72 681.538 L1531.16 681.538 L1530.6 681.538 L1530.04 681.538 L1529.48 681.538 L1528.92 681.538 L1528.36 681.538 L1527.81 681.538 L1527.25 681.538 L1526.69 681.538 L1526.13 681.538 L1525.57 681.538 L1525.01 681.538 L1524.45 681.538 L1523.89 681.538 L1523.33 681.538 L1522.77 681.538 L1522.21 681.538 L1521.65 681.538 L1521.09 681.538 L1520.53 681.538 L1519.98 681.538 L1519.42 681.538 L1518.86 681.538 L1518.3 681.538 L1517.74 681.538 L1517.18 681.538 L1516.62 681.538 L1516.06 681.538 L1515.5 681.538 L1514.94 681.538 L1514.38 681.538 L1513.82 681.538 L1513.26 681.538 L1512.71 681.538 L1512.15 681.538 L1511.59 681.538 L1511.03 681.538 L1510.47 681.538 L1509.91 681.538 L1509.35 681.538 L1508.79 681.538 L1508.23 681.538 L1507.67 681.538 L1507.11 681.538 L1506.55 681.538 L1505.99 681.538 L1505.44 681.538 L1504.88 681.538 L1504.32 681.538 L1503.76 681.538 L1503.2 681.538 L1502.64 681.538 L1502.08 681.538 L1501.52 681.538 L1500.96 681.538 L1500.4 681.538 L1499.84 681.538 L1499.28 681.538 L1498.72 681.538 L1498.16 681.538 L1497.61 681.538 L1497.05 681.538 L1496.49 681.538 L1495.93 681.538 L1495.37 681.538 L1494.81 681.538 L1494.25 681.538 L1493.69 681.538 L1493.13 681.538 L1492.57 681.538 L1492.01 681.538 L1491.45 681.538 L1490.89 681.538 L1490.34 681.538 L1489.78 681.538 L1489.22 681.538 L1488.66 681.538 L1488.1 681.538 L1487.54 681.538 L1486.98 681.538 L1486.42 681.538 L1485.86 681.538 L1485.3 681.538 L1484.74 681.538 L1484.18 681.538 L1483.62 681.538 L1483.07 681.538 L1482.51 681.538 L1481.95 681.538 L1481.39 681.538 L1480.83 681.538 L1480.27 681.538 L1479.71 681.538 L1479.15 681.538 L1478.59 681.538 L1478.03 681.538 L1477.47 681.538 L1476.91 681.538 L1476.35 681.538 L1475.79 681.538 L1475.24 681.538 L1474.68 681.538 L1474.12 681.538 L1473.56 681.538 L1473 681.538 L1472.44 681.538 L1471.88 681.538 L1471.32 681.538 L1470.76 681.538 L1470.2 681.538 L1469.64 681.538 L1469.08 681.538 L1468.52 681.538 L1467.97 681.538 L1467.41 681.538 L1466.85 681.538 L1466.29 681.538 L1465.73 681.538 L1465.17 681.538 L1464.61 681.538 L1464.05 681.538 L1463.49 681.538 L1462.93 681.538 L1462.37 681.538 L1461.81 681.538 L1461.25 681.538 L1460.7 681.538 L1460.14 681.538 L1459.58 681.538 L1459.02 681.538 L1458.46 681.538 L1457.9 681.538 L1457.34 681.538 L1456.78 681.538 L1456.22 681.538 L1455.66 681.538 L1455.1 681.538 L1454.54 681.538 L1453.98 681.538 L1453.42 681.538 L1452.87 681.538 L1452.31 681.538 L1451.75 681.538 L1451.19 681.538 L1450.63 681.538 L1450.07 681.538 L1449.51 681.538 L1448.95 681.538 L1448.39 681.538 L1447.83 681.538 L1447.27 681.538 L1446.71 681.538 L1446.15 681.538 L1445.6 681.538 L1445.04 681.538 L1444.48 681.538 L1443.92 681.538 L1443.36 681.538 L1442.8 681.538 L1442.24 681.538 L1441.68 681.538 L1441.12 681.538 L1440.56 681.538 L1440 681.538 L1439.44 681.538 L1438.88 681.538 L1438.33 681.538 L1437.77 681.538 L1437.21 681.538 L1436.65 681.538 L1436.09 681.538 L1435.53 681.538 L1434.97 681.538 L1434.41 681.538 L1433.85 681.538 L1433.29 681.538 L1432.73 681.538 L1432.17 681.538 L1431.61 681.538 L1431.05 681.538 L1430.5 681.538 L1429.94 681.538 L1429.38 681.538 L1428.82 681.538 L1428.26 681.538 L1427.7 681.538 L1427.14 681.538 L1426.58 681.538 L1426.02 681.538 L1425.46 681.538 L1424.9 681.538 L1424.34 681.538 L1423.78 681.538 L1423.23 681.538 L1422.67 681.538 L1422.11 681.538 L1421.55 681.538 L1420.99 681.538 L1420.43 681.538 L1419.87 681.538 L1419.31 681.538 L1418.75 681.538 L1418.19 681.538 L1417.63 681.538 L1417.07 681.538 L1416.51 681.538 L1415.95 681.538 L1415.4 681.538 L1414.84 681.538 L1414.28 681.538 L1413.72 681.538 L1413.16 681.538 L1412.6 681.538 L1412.04 681.538 L1411.48 681.538 L1410.92 681.538 L1410.36 681.538 L1409.8 681.538 L1409.24 681.538 L1408.68 681.538 L1408.13 681.538 L1407.57 681.538 L1407.01 681.538 L1406.45 681.538 L1405.89 681.538 L1405.33 681.538 L1404.77 681.538 L1404.21 681.538 L1403.65 681.538 L1403.09 681.538 L1402.53 681.538 L1401.97 681.538 L1401.41 681.538 L1400.86 681.538 L1400.3 681.538 L1399.74 681.538 L1399.18 681.538 L1398.62 681.538 L1398.06 681.538 L1397.5 681.538 L1396.94 681.538 L1396.38 681.538 L1395.82 681.538 L1395.26 681.538 L1394.7 681.538 L1394.14 681.538 L1393.58 681.538 L1393.03 681.538 L1392.47 681.538 L1391.91 681.538 L1391.35 681.538 L1390.79 681.538 L1390.23 681.538 L1389.67 681.538 L1389.11 681.538 L1388.55 681.538 L1387.99 681.538 L1387.43 681.538 L1386.87 681.538 L1386.31 681.538 L1385.76 681.538 L1385.2 681.538 L1384.64 681.538 L1384.08 681.538 L1383.52 681.538 L1382.96 681.538 L1382.4 681.538 L1381.84 681.538 L1381.28 681.538 L1380.72 681.538 L1380.16 681.538 L1379.6 681.538 L1379.04 681.538 L1378.49 681.538 L1377.93 681.538 L1377.37 681.538 L1376.81 681.538 L1376.25 681.538 L1375.69 681.538 L1375.13 681.538 L1374.57 681.538 L1374.01 681.538 L1373.45 681.538 L1372.89 681.538 L1372.33 681.538 L1371.77 681.538 L1371.21 681.538 L1370.66 681.538 L1370.1 681.538 L1369.54 681.538 L1368.98 681.538 L1368.42 681.538 L1367.86 681.538 L1367.3 681.538 L1366.74 681.538 L1366.18 681.538 L1365.62 681.538 L1365.06 681.538 L1364.5 681.538 L1363.94 681.538 L1363.39 681.538 L1362.83 681.538 L1362.27 681.538 L1361.71 681.538 L1361.15 681.538 L1360.59 681.538 L1360.03 681.538 L1359.47 681.538 L1358.91 681.538 L1358.35 681.538 L1357.79 681.538 L1357.23 681.538 L1356.67 681.538 L1356.12 681.538 L1355.56 681.538 L1355 681.538 L1354.44 681.538 L1353.88 681.538 L1353.32 681.538 L1352.76 681.538 L1352.2 681.538 L1351.64 681.538 L1351.08 681.538 L1350.52 681.538 L1349.96 681.538 L1349.4 681.538 L1348.84 681.538 L1348.29 681.538 L1347.73 681.538 L1347.17 681.538 L1346.61 681.538 L1346.05 681.538 L1345.49 681.538 L1344.93 681.538 L1344.37 681.538 L1343.81 681.538 L1343.25 681.538 L1342.69 681.538 L1342.13 681.538 L1341.57 681.538 L1341.02 681.538 L1340.46 681.538 L1339.9 681.538 L1339.34 681.538 L1338.78 681.538 L1338.22 681.538 L1337.66 681.538 L1337.1 681.538 L1336.54 681.538 L1335.98 681.538 L1335.42 681.538 L1334.86 681.538 L1334.3 681.538 L1333.75 681.538 L1333.19 681.538 L1332.63 681.538 L1332.07 681.538 L1331.51 681.538 L1330.95 681.538 L1330.39 681.538 L1329.83 681.538 L1329.27 681.538 L1328.71 681.538 L1328.15 681.538 L1327.59 681.538 L1327.03 681.538 L1326.47 681.538 L1325.92 681.538 L1325.36 681.538 L1324.8 681.538 L1324.24 681.538 L1323.68 681.538 L1323.12 681.538 L1322.56 681.538 L1322 681.538 L1321.44 681.538 L1320.88 681.538 L1320.32 681.538 L1319.76 681.538 L1319.2 681.538 L1318.65 681.538 L1318.09 681.538 L1317.53 681.538 L1316.97 681.538 L1316.41 681.538 L1315.85 681.538 L1315.29 681.538 L1314.73 681.538 L1314.17 681.538 L1313.61 681.538 L1313.05 681.538 L1312.49 681.538 L1311.93 681.538 L1311.38 681.538 L1310.82 681.538 L1310.26 681.538 L1309.7 681.538 L1309.14 681.538 L1308.58 681.538 L1308.02 681.538 L1307.46 681.538 L1306.9 681.538 L1306.34 681.538 L1305.78 681.538 L1305.22 681.538 L1304.66 681.538 L1304.1 681.538 L1303.55 681.538 L1302.99 681.538 L1302.43 681.538 L1301.87 681.538 L1301.31 681.538 L1300.75 681.538 L1300.19 681.538 L1299.63 681.538 L1299.07 681.538 L1298.51 681.538 L1297.95 681.538 L1297.39 681.538 L1296.83 681.538 L1296.28 681.538 L1295.72 681.538 L1295.16 681.538 L1294.6 681.538 L1294.04 681.538 L1293.48 681.538 L1292.92 681.538 L1292.36 681.538 L1291.8 681.538 L1291.24 681.538 L1290.68 681.538 L1290.12 681.538 L1289.56 681.538 L1289 681.538 L1288.45 681.538 L1287.89 681.538 L1287.33 681.538 L1286.77 681.538 L1286.21 681.538 L1285.65 681.538 L1285.09 681.538 L1284.53 681.538 L1283.97 681.538 L1283.41 681.538 L1282.85 681.538 L1282.29 681.538 L1281.73 681.538 L1281.18 681.538 L1280.62 681.538 L1280.06 681.538 L1279.5 681.538 L1278.94 681.538 L1278.38 681.538 L1277.82 681.538 L1277.26 681.538 L1276.7 681.538 L1276.14 681.538 L1275.58 681.538 L1275.02 681.538 L1274.46 681.538 L1273.91 681.538 L1273.35 681.538 L1272.79 681.538 L1272.23 681.538 L1271.67 681.538 L1271.11 681.538 L1270.55 681.538 L1269.99 681.538 L1269.43 681.538 L1268.87 681.538 L1268.31 681.538 L1267.75 681.538 L1267.19 681.538 L1266.63 681.538 L1266.08 681.538 L1265.52 681.538 L1264.96 681.538 L1264.4 681.538 L1263.84 681.538 L1263.28 681.538 L1262.72 681.538 L1262.16 681.538 L1261.6 681.538 L1261.04 681.538 L1260.48 681.538 L1259.92 681.538 L1259.36 681.538 L1258.81 681.538 L1258.25 681.538 L1257.69 681.538 L1257.13 681.538 L1256.57 681.538 L1256.01 681.538 L1255.45 681.538 L1254.89 681.538 L1254.33 681.538 L1253.77 681.538 L1253.21 681.538 L1252.65 681.538 L1252.09 681.538 L1251.54 681.538 L1250.98 681.538 L1250.42 681.538 L1249.86 681.538 L1249.3 681.538 L1248.74 681.538 L1248.18 681.538 L1247.62 681.538 L1247.06 681.538 L1246.5 681.538 L1245.94 681.538 L1245.38 681.538 L1244.82 681.538 L1244.26 681.538 L1243.71 681.538 L1243.15 681.538 L1242.59 681.538 L1242.03 681.538 L1241.47 681.538 L1240.91 681.538 L1240.35 681.538 L1239.79 681.538 L1239.23 681.538 L1238.67 681.538 L1238.11 681.538 L1237.55 681.538 L1236.99 681.538 L1236.44 681.538 L1235.88 681.538 L1235.32 681.538 L1234.76 681.538 L1234.2 681.538 L1233.64 681.538 L1233.08 681.538 L1232.52 681.538 L1231.96 681.538 L1231.4 681.538 L1230.84 681.538 L1230.28 681.538 L1229.72 681.538 L1229.17 681.538 L1228.61 681.538 L1228.05 681.538 L1227.49 681.538 L1226.93 681.538 L1226.37 681.538 L1225.81 681.538 L1225.25 681.538 L1224.69 681.538 L1224.13 681.538 L1223.57 681.538 L1223.01 681.538 L1222.45 681.538 L1221.89 681.538 L1221.34 681.538 L1220.78 681.538 L1220.22 681.538 L1219.66 681.538 L1219.1 681.538 L1218.54 681.538 L1217.98 681.538 L1217.42 681.538 L1216.86 681.538 L1216.3 681.538 L1215.74 681.538 L1215.18 681.538 L1214.62 681.538 L1214.07 681.538 L1213.51 681.538 L1212.95 681.538 L1212.39 681.538 L1211.83 681.538 L1211.27 681.538 L1210.71 681.538 L1210.15 681.538 L1209.59 681.538 L1209.03 681.538 L1208.47 681.538 L1207.91 681.538 L1207.35 681.538 L1206.8 681.538 L1206.24 681.538 L1205.68 681.538 L1205.12 681.538 L1204.56 681.538 L1204 681.538 L1203.44 681.538 L1202.88 681.538 L1202.32 681.538 L1201.76 681.538 L1201.2 681.538 L1200.64 681.538 L1200.08 681.538 L1199.52 681.538 L1198.97 681.538 L1198.41 681.538 L1197.85 681.538 L1197.29 681.538 L1196.73 681.538 L1196.17 681.538 L1195.61 681.538 L1195.05 681.538 L1194.49 681.538 L1193.93 681.538 L1193.37 681.538 L1192.81 681.538 L1192.25 681.538 L1191.7 681.538 L1191.14 681.538 L1190.58 681.538 L1190.02 681.538 L1189.46 681.538 L1188.9 681.538 L1188.34 681.538 L1187.78 681.538 L1187.22 681.538 L1186.66 681.538 L1186.1 681.538 L1185.54 681.538 L1184.98 681.538 L1184.43 681.538 L1183.87 681.538 L1183.31 681.538 L1182.75 681.538 L1182.19 681.538 L1181.63 681.538 L1181.07 681.538 L1180.51 681.538 L1179.95 681.538 L1179.39 681.538 L1178.83 681.538 L1178.27 681.538 L1177.71 681.538 L1177.15 681.538 L1176.6 681.538 L1176.04 681.538 L1175.48 681.538 L1174.92 681.538 L1174.36 681.538 L1173.8 681.538 L1173.24 681.538 L1172.68 681.538 L1172.12 681.538 L1171.56 681.538 L1171 681.538 L1170.44 681.538 L1169.88 681.538 L1169.33 681.538 L1168.77 681.538 L1168.21 681.538 L1167.65 681.538 L1167.09 681.538 L1166.53 681.538 L1165.97 681.538 L1165.41 681.538 L1164.85 681.538 L1164.29 681.538 L1163.73 681.538 L1163.17 681.538 L1162.61 681.538 L1162.05 681.538 L1161.5 681.538 L1160.94 681.538 L1160.38 681.538 L1159.82 681.538 L1159.26 681.538 L1158.7 681.538 L1158.14 681.538 L1157.58 681.538 L1157.02 681.538 L1156.46 681.538 L1155.9 681.538 L1155.34 681.538 L1154.78 681.538 L1154.23 681.538 L1153.67 681.538 L1153.11 681.538 L1152.55 681.538 L1151.99 681.538 L1151.43 681.538 L1150.87 681.538 L1150.31 681.538 L1149.75 681.538 L1149.19 681.538 L1148.63 681.538 L1148.07 681.538 L1147.51 681.538 L1146.96 681.538 L1146.4 681.538 L1145.84 681.538 L1145.28 681.538 L1144.72 681.538 L1144.16 681.538 L1143.6 681.538 L1143.04 681.538 L1142.48 681.538 L1141.92 681.538 L1141.36 681.538 L1140.8 681.538 L1140.24 681.538 L1139.68 681.538 L1139.13 681.538 L1138.57 681.538 L1138.01 681.538 L1137.45 681.538 L1136.89 681.538 L1136.33 681.538 L1135.77 681.538 L1135.21 681.538 L1134.65 681.538 L1134.09 681.538 L1133.53 681.538 L1132.97 681.538 L1132.41 681.538 L1131.86 681.538 L1131.3 681.538 L1130.74 681.538 L1130.18 681.538 L1129.62 681.538 L1129.06 681.538 L1128.5 681.538 L1127.94 681.538 L1127.38 681.538 L1126.82 681.538 L1126.26 681.538 L1125.7 681.538 L1125.14 681.538 L1124.59 681.538 L1124.03 681.538 L1123.47 681.538 L1122.91 681.538 L1122.35 681.538 L1121.79 681.538 L1121.23 681.538 L1120.67 681.538 L1120.11 681.538 L1119.55 681.538 L1118.99 681.538 L1118.43 681.538 L1117.87 681.538 L1117.31 681.538 L1116.76 681.538 L1116.2 681.538 L1115.64 681.538 L1115.08 681.538 L1114.52 681.538 L1113.96 681.538 L1113.4 681.538 L1112.84 681.538 L1112.28 681.538 L1111.72 681.538 L1111.16 681.538 L1110.6 681.538 L1110.04 681.538 L1109.49 681.538 L1108.93 681.538 L1108.37 681.538 L1107.81 681.538 L1107.25 681.538 L1106.69 681.538 L1106.13 681.538 L1105.57 681.538 L1105.01 681.538 L1104.45 681.538 L1103.89 681.538 L1103.33 681.538 L1102.77 681.538 L1102.22 681.538 L1101.66 681.538 L1101.1 681.538 L1100.54 681.538 L1099.98 681.538 L1099.42 681.538 L1098.86 681.538 L1098.3 681.538 L1097.74 681.538 L1097.18 681.538 L1096.62 681.538 L1096.06 681.538 L1095.5 681.538 L1094.94 681.538 L1094.39 681.538 L1093.83 681.538 L1093.27 681.538 L1092.71 681.538 L1092.15 681.538 L1091.59 681.538 L1091.03 681.538 L1090.47 681.538 L1089.91 681.538 L1089.35 681.538 L1088.79 681.538 L1088.23 681.538 L1087.67 681.538 L1087.12 681.538 L1086.56 681.538 L1086 681.538 L1085.44 681.538 L1084.88 681.538 L1084.32 681.538 L1083.76 681.538 L1083.2 681.538 L1082.64 681.538 L1082.08 681.538 L1081.52 681.538 L1080.96 681.538 L1080.4 681.538 L1079.85 681.538 L1079.29 681.538 L1078.73 681.538 L1078.17 681.538 L1077.61 681.538 L1077.05 681.538 L1076.49 681.538 L1075.93 681.538 L1075.37 681.538 L1074.81 681.538 L1074.25 681.538 L1073.69 681.538 L1073.13 681.538 L1072.57 681.538 L1072.02 681.538 L1071.46 681.538 L1070.9 681.538 L1070.34 681.538 L1069.78 681.538 L1069.22 681.538 L1068.66 681.538 L1068.1 681.538 L1067.54 681.538 L1066.98 681.538 L1066.42 681.538 L1065.86 681.538 L1065.3 681.538 L1064.75 681.538 L1064.19 681.538 L1063.63 681.538 L1063.07 681.538 L1062.51 681.538 L1061.95 681.538 L1061.39 681.538 L1060.83 681.538 L1060.27 681.538 L1059.71 681.538 L1059.15 681.538 L1058.59 681.538 L1058.03 681.538 L1057.48 681.538 L1056.92 681.538 L1056.36 681.538 L1055.8 681.538 L1055.24 681.538 L1054.68 681.538 L1054.12 681.538 L1053.56 681.538 L1053 681.538 L1052.44 681.538 L1051.88 681.538 L1051.32 681.538 L1050.76 681.538 L1050.2 681.538 L1049.65 681.538 L1049.09 681.538 L1048.53 681.538 L1047.97 681.538 L1047.41 681.538 L1046.85 681.538 L1046.29 681.538 L1045.73 681.538 L1045.17 681.538 L1044.61 681.538 L1044.05 681.538 L1043.49 681.538 L1042.93 681.538 L1042.38 681.538 L1041.82 681.538 L1041.26 681.538 L1040.7 681.538 L1040.14 681.538 L1039.58 681.538 L1039.02 681.538 L1038.46 681.538 L1037.9 681.538 L1037.34 681.538 L1036.78 681.538 L1036.22 681.538 L1035.66 681.538 L1035.1 681.538 L1034.55 681.538 L1033.99 681.538 L1033.43 681.538 L1032.87 681.538 L1032.31 681.538 L1031.75 681.538 L1031.19 681.538 L1030.63 681.538 L1030.07 681.538 L1029.51 681.538 L1028.95 681.538 L1028.39 681.538 L1027.83 681.538 L1027.28 681.538 L1026.72 681.538 L1026.16 681.538 L1025.6 681.538 L1025.04 681.538 L1024.48 681.538 L1023.92 681.538 L1023.36 681.538 L1022.8 681.538 L1022.24 681.538 L1021.68 681.538 L1021.12 681.538 L1020.56 681.538 L1020.01 681.538 L1019.45 681.538 L1018.89 681.538 L1018.33 681.538 L1017.77 681.538 L1017.21 681.538 L1016.65 681.538 L1016.09 681.538 L1015.53 681.538 L1014.97 681.538 L1014.41 681.538 L1013.85 681.538 L1013.29 681.538 L1012.73 681.538 L1012.18 681.538 L1011.62 681.538 L1011.06 681.538 L1010.5 681.538 L1009.94 681.538 L1009.38 681.538 L1008.82 681.538 L1008.26 681.538 L1007.7 681.538 L1007.14 681.538 L1006.58 681.538 L1006.02 681.538 L1005.46 681.538 L1004.91 681.538 L1004.35 681.538 L1003.79 681.538 L1003.23 681.538 L1002.67 681.538 L1002.11 681.538 L1001.55 681.538 L1000.99 681.538 L1000.43 681.538 L999.872 681.538 L999.313 681.538 L998.754 681.538 L998.194 681.538 L997.635 681.538 L997.076 681.538 L996.517 681.538 L995.957 681.538 L995.398 681.538 L994.839 681.538 L994.28 681.538 L993.72 681.538 L993.161 681.538 L992.602 681.538 L992.043 681.538 L991.483 681.538 L990.924 681.538 L990.365 681.538 L989.806 681.538 L989.246 681.538 L988.687 681.538 L988.128 681.538 L987.569 681.538 L987.009 681.538 L986.45 681.538 L985.891 681.538 L985.332 681.538 L984.772 681.538 L984.213 681.538 L983.654 681.538 L983.095 681.538 L982.535 681.538 L981.976 681.538 L981.417 681.538 L980.858 681.538 L980.298 681.538 L979.739 681.538 L979.18 681.538 L978.621 681.538 L978.061 681.538 L977.502 681.538 L976.943 681.538 L976.384 681.538 L975.824 681.538 L975.265 681.538 L974.706 681.538 L974.147 681.538 L973.587 681.538 L973.028 681.538 L972.469 681.538 L971.91 681.538 L971.35 681.538 L970.791 681.538 L970.232 681.538 L969.673 681.538 L969.113 681.538 L968.554 681.538 L967.995 681.538 L967.436 681.538 L966.876 681.538 L966.317 681.538 L965.758 681.538 L965.199 681.538 L964.639 681.538 L964.08 681.538 L963.521 681.538 L962.962 681.538 L962.402 681.538 L961.843 681.538 L961.284 681.538 L960.725 681.538 L960.165 681.538 L959.606 681.538 L959.047 681.538 L958.488 681.538 L957.928 681.538 L957.369 681.538 L956.81 681.538 L956.251 681.538 L955.691 681.538 L955.132 681.538 L954.573 681.538 L954.014 681.538 L953.454 681.538 L952.895 681.538 L952.336 681.538 L951.777 681.538 L951.217 681.538 L950.658 681.538 L950.099 681.538 L949.54 681.538 L948.98 681.538 L948.421 681.538 L947.862 681.538 L947.303 681.538 L946.743 681.538 L946.184 681.538 L945.625 681.538 L945.066 681.538 L944.506 681.538 L943.947 681.538 L943.388 681.538 L942.829 681.538 L942.269 681.538 L941.71 681.538 L941.151 681.538 L940.592 681.538 L940.032 681.538 L939.473 681.538 L938.914 681.538 L938.355 681.538 L937.795 681.538 L937.236 681.538 L936.677 681.538 L936.118 681.538 L935.558 681.538 L934.999 681.538 L934.44 681.538 L933.881 681.538 L933.321 681.538 L932.762 681.538 L932.203 681.538 L931.644 681.538 L931.084 681.538 L930.525 681.538 L929.966 681.538 L929.406 681.538 L928.847 681.538 L928.288 681.538 L927.729 681.538 L927.169 681.538 L926.61 681.538 L926.051 681.538 L925.492 681.538 L924.932 681.538 L924.373 681.538 L923.814 681.538 L923.255 681.538 L922.695 681.538 L922.136 681.538 L921.577 681.538 L921.018 681.538 L920.458 681.538 L919.899 681.538 L919.34 681.538 L918.781 681.538 L918.221 681.538 L917.662 681.538 L917.103 681.538 L916.544 681.538 L915.984 681.538 L915.425 681.538 L914.866 681.538 L914.307 681.538 L913.747 681.538 L913.188 681.538 L912.629 681.538 L912.07 681.538 L911.51 681.538 L910.951 681.538 L910.392 681.538 L909.833 681.538 L909.273 681.538 L908.714 681.538 L908.155 681.538 L907.596 681.538 L907.036 681.538 L906.477 681.538 L905.918 681.538 L905.359 681.538 L904.799 681.538 L904.24 681.538 L903.681 681.538 L903.122 681.538 L902.562 681.538 L902.003 681.538 L901.444 681.538 L900.885 681.538 L900.325 681.538 L899.766 681.538 L899.207 681.538 L898.648 681.538 L898.088 681.538 L897.529 681.538 L896.97 681.538 L896.411 681.538 L895.851 681.538 L895.292 681.538 L894.733 681.538 L894.174 681.538 L893.614 681.538 L893.055 681.538 L892.496 681.538 L891.937 681.538 L891.377 681.538 L890.818 681.538 L890.259 681.538 L889.7 681.538 L889.14 681.538 L888.581 681.538 L888.022 681.538 L887.463 681.538 L886.903 681.538 L886.344 681.538 L885.785 681.538 L885.226 681.538 L884.666 681.538 L884.107 681.538 L883.548 681.538 L882.989 681.538 L882.429 681.538 L881.87 681.538 L881.311 681.538 L880.752 681.538 L880.192 681.538 L879.633 681.538 L879.074 681.538 L878.515 681.538 L877.955 681.538 L877.396 681.538 L876.837 681.538 L876.278 681.538 L875.718 681.538 L875.159 681.538 L874.6 681.538 L874.041 681.538 L873.481 681.538 L872.922 681.538 L872.363 681.538 L871.804 681.538 L871.244 681.538 L870.685 681.538 L870.126 681.538 L869.567 681.538 L869.007 681.538 L868.448 681.538 L867.889 681.538 L867.33 681.538 L866.77 681.538 L866.211 681.538 L865.652 681.538 L865.093 681.538 L864.533 681.538 L863.974 681.538 L863.415 681.538 L862.856 681.538 L862.296 681.538 L861.737 681.538 L861.178 681.538 L860.619 681.538 L860.059 681.538 L859.5 681.538 L858.941 681.538 L858.382 681.538 L857.822 681.538 L857.263 681.538 L856.704 681.538 L856.145 681.538 L855.585 681.538 L855.026 681.538 L854.467 681.538 L853.908 681.538 L853.348 681.538 L852.789 681.538 L852.23 681.538 L851.671 681.538 L851.111 681.538 L850.552 681.538 L849.993 681.538 L849.434 681.538 L848.874 681.538 L848.315 681.538 L847.756 681.538 L847.197 681.538 L846.637 681.538 L846.078 681.538 L845.519 681.538 L844.96 681.538 L844.4 681.538 L843.841 681.538 L843.282 681.538 L842.723 681.538 L842.163 681.538 L841.604 681.538 L841.045 681.538 L840.486 681.538 L839.926 681.538 L839.367 681.538 L838.808 681.538 L838.249 681.538 L837.689 681.538 L837.13 681.538 L836.571 681.538 L836.012 681.538 L835.452 681.538 L834.893 681.538 L834.334 681.538 L833.775 681.538 L833.215 681.538 L832.656 681.538 L832.097 681.538 L831.538 681.538 L830.978 681.538 L830.419 681.538 L829.86 681.538 L829.301 681.538 L828.741 681.538 L828.182 681.538 L827.623 681.538 L827.064 681.538 L826.504 681.538 L825.945 681.538 L825.386 681.538 L824.827 681.538 L824.267 681.538 L823.708 681.538 L823.149 681.538 L822.59 681.538 L822.03 681.538 L821.471 681.538 L820.912 681.538 L820.353 681.538 L819.793 681.538 L819.234 681.538 L818.675 681.538 L818.116 681.538 L817.556 681.538 L816.997 681.538 L816.438 681.538 L815.879 681.538 L815.319 681.538 L814.76 681.538 L814.201 681.538 L813.642 681.538 L813.082 681.538 L812.523 681.538 L811.964 681.538 L811.405 681.538 L810.845 681.538 L810.286 681.538 L809.727 681.538 L809.168 681.538 L808.608 681.538 L808.049 681.538 L807.49 681.538 L806.931 681.538 L806.371 681.538 L805.812 681.538 L805.253 681.538 L804.693 681.538 L804.134 681.538 L803.575 681.538 L803.016 681.538 L802.456 681.538 L801.897 681.538 L801.338 681.538 L800.779 681.538 L800.219 681.538 L799.66 681.538 L799.101 681.538 L798.542 681.538 L797.982 681.538 L797.423 681.538 L796.864 681.538 L796.305 681.538 L795.745 681.538 L795.186 681.538 L794.627 681.538 L794.068 681.538 L793.508 681.538 L792.949 681.538 L792.39 681.538 L791.831 681.538 L791.271 681.538 L790.712 681.538 L790.153 681.538 L789.594 681.538 L789.034 681.538 L788.475 681.538 L787.916 681.538 L787.357 681.538 L786.797 681.538 L786.238 681.538 L785.679 681.538 L785.12 681.538 L784.56 681.538 L784.001 681.538 L783.442 681.538 L782.883 681.538 L782.323 681.538 L781.764 681.538 L781.205 681.538 L780.646 681.538 L780.086 681.538 L779.527 681.538 L778.968 681.538 L778.409 681.538 L777.849 681.538 L777.29 681.538 L776.731 681.538 L776.172 681.538 L775.612 681.538 L775.053 681.538 L774.494 681.538 L773.935 681.538 L773.375 681.538 L772.816 681.538 L772.257 681.538 L771.698 681.538 L771.138 681.538 L770.579 681.538 L770.02 681.538 L769.461 681.538 L768.901 681.538 L768.342 681.538 L767.783 681.538 L767.224 681.538 L766.664 681.538 L766.105 681.538 L765.546 681.538 L764.987 681.538 L764.427 681.538 L763.868 681.538 L763.309 681.538 L762.75 681.538 L762.19 681.538 L761.631 681.538 L761.072 681.538 L760.513 681.538 L759.953 681.538 L759.394 681.538 L758.835 681.538 L758.276 681.538 L757.716 681.538 L757.157 681.538 L756.598 681.538 L756.039 681.538 L755.479 681.538 L754.92 681.538 L754.361 681.538 L753.802 681.538 L753.242 681.538 L752.683 681.538 L752.124 681.538 L751.565 681.538 L751.005 681.538 L750.446 681.538 L749.887 681.538 L749.328 681.538 L748.768 681.538 L748.209 681.538 L747.65 681.538 L747.091 681.538 L746.531 681.538 L745.972 681.538 L745.413 681.538 L744.854 681.538 L744.294 681.538 L743.735 681.538 L743.176 681.538 L742.617 681.538 L742.057 681.538 L741.498 681.538 L740.939 681.538 L740.38 681.538 L739.82 681.538 L739.261 681.538 L738.702 681.538 L738.143 681.538 L737.583 681.538 L737.024 681.538 L736.465 681.538 L735.906 681.538 L735.346 681.538 L734.787 681.538 L734.228 681.538 L733.669 681.538 L733.109 681.538 L732.55 681.538 L731.991 681.538 L731.432 681.538 L730.872 681.538 L730.313 681.538 L729.754 681.538 L729.195 681.538 L728.635 681.538 L728.076 681.538 L727.517 681.538 L726.958 681.538 L726.398 681.538 L725.839 681.538 L725.28 681.538 L724.721 681.538 L724.161 681.538 L723.602 681.538 L723.043 681.538 L722.484 681.538 L721.924 681.538 L721.365 681.538 L720.806 681.538 L720.247 681.538  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.489 720.806,686.489 721.365,686.489 721.924,686.489 722.484,686.489 723.043,686.489 723.602,686.489 724.161,686.489 724.721,686.489 725.28,686.489 725.839,686.489 726.398,686.489 726.958,686.489 727.517,686.489 728.076,686.489 728.635,686.489 729.195,686.489 729.754,686.489 730.313,686.489 730.872,686.489 731.432,686.489 731.991,686.489 732.55,686.489 733.109,686.489 733.669,686.489 734.228,686.489 734.787,686.489 735.346,686.489 735.906,686.489 736.465,686.489 737.024,686.489 737.583,686.489 738.143,686.489 738.702,686.489 739.261,686.489 739.82,686.489 740.38,686.489 740.939,686.489 741.498,686.489 742.057,686.489 742.617,686.489 743.176,686.489 743.735,686.489 744.294,686.489 744.854,686.489 745.413,686.489 745.972,686.489 746.531,686.489 747.091,686.489 747.65,686.489 748.209,686.489 748.768,686.489 749.328,686.489 749.887,686.489 750.446,686.489 751.005,686.489 751.565,686.489 752.124,686.489 752.683,686.489 753.242,686.489 753.802,686.489 754.361,686.489 754.92,686.489 755.479,686.489 756.039,686.489 756.598,686.489 757.157,686.489 757.716,686.489 758.276,686.489 758.835,686.489 759.394,686.489 759.953,686.489 760.513,686.489 761.072,686.489 761.631,686.489 762.19,686.489 762.75,686.489 763.309,686.489 763.868,686.489 764.427,686.489 764.987,686.489 765.546,686.489 766.105,686.489 766.664,686.489 767.224,686.489 767.783,686.489 768.342,686.489 768.901,686.489 769.461,686.489 770.02,686.489 770.579,686.489 771.138,686.489 771.698,686.489 772.257,686.489 772.816,686.489 773.375,686.489 773.935,686.489 774.494,686.489 775.053,686.489 775.612,686.489 776.172,686.489 776.731,686.489 777.29,686.489 777.849,686.489 778.409,686.489 778.968,686.489 779.527,686.489 780.086,686.489 780.646,686.489 781.205,686.489 781.764,686.489 782.323,686.489 782.883,686.489 783.442,686.489 784.001,686.489 784.56,686.489 785.12,686.489 785.679,686.489 786.238,686.489 786.797,686.489 787.357,686.489 787.916,686.489 788.475,686.489 789.034,686.489 789.594,686.489 790.153,686.489 790.712,686.489 791.271,686.489 791.831,686.489 792.39,686.489 792.949,686.489 793.508,686.489 794.068,686.489 794.627,686.489 795.186,686.489 795.745,686.489 796.305,686.489 796.864,686.489 797.423,686.489 797.982,686.489 798.542,686.489 799.101,686.489 799.66,686.489 800.219,686.489 800.779,686.489 801.338,686.489 801.897,686.489 802.456,686.489 803.016,686.489 803.575,686.489 804.134,686.489 804.693,686.489 805.253,686.489 805.812,686.489 806.371,686.489 806.931,686.489 807.49,686.489 808.049,686.489 808.608,686.489 809.168,686.489 809.727,686.489 810.286,686.489 810.845,686.489 811.405,686.489 811.964,686.489 812.523,686.489 813.082,686.489 813.642,686.489 814.201,686.489 814.76,686.489 815.319,686.489 815.879,686.489 816.438,686.489 816.997,686.489 817.556,686.489 818.116,686.489 818.675,686.489 819.234,686.489 819.793,686.489 820.353,686.489 820.912,686.489 821.471,686.489 822.03,686.489 822.59,686.489 823.149,686.489 823.708,686.489 824.267,686.489 824.827,686.489 825.386,686.489 825.945,686.489 826.504,686.489 827.064,686.489 827.623,686.489 828.182,686.489 828.741,686.489 829.301,686.489 829.86,686.489 830.419,686.489 830.978,686.489 831.538,686.489 832.097,686.489 832.656,686.489 833.215,686.489 833.775,686.489 834.334,686.489 834.893,686.489 835.452,686.489 836.012,686.489 836.571,686.489 837.13,686.489 837.689,686.489 838.249,686.489 838.808,686.489 839.367,686.489 839.926,686.489 840.486,686.489 841.045,686.489 841.604,686.489 842.163,686.489 842.723,686.489 843.282,686.489 843.841,686.489 844.4,686.489 844.96,686.489 845.519,686.489 846.078,686.489 846.637,686.489 847.197,686.489 847.756,686.489 848.315,686.489 848.874,686.489 849.434,686.489 849.993,686.489 850.552,686.489 851.111,686.489 851.671,686.489 852.23,686.489 852.789,686.489 853.348,686.489 853.908,686.489 854.467,686.489 855.026,686.489 855.585,686.489 856.145,686.489 856.704,686.489 857.263,686.489 857.822,686.489 858.382,686.489 858.941,686.489 859.5,686.489 860.059,686.489 860.619,686.489 861.178,686.489 861.737,686.489 862.296,686.489 862.856,686.489 863.415,686.489 863.974,686.489 864.533,686.489 865.093,686.489 865.652,686.489 866.211,686.489 866.77,686.489 867.33,686.489 867.889,686.489 868.448,686.489 869.007,686.489 869.567,686.489 870.126,686.489 870.685,686.489 871.244,686.489 871.804,686.489 872.363,686.489 872.922,686.489 873.481,686.489 874.041,686.489 874.6,686.489 875.159,686.489 875.718,686.489 876.278,686.489 876.837,686.489 877.396,686.489 877.955,686.489 878.515,686.489 879.074,686.489 879.633,686.489 880.192,686.489 880.752,686.489 881.311,686.489 881.87,686.489 882.429,686.489 882.989,686.489 883.548,686.489 884.107,686.489 884.666,686.489 885.226,686.489 885.785,686.489 886.344,686.489 886.903,686.489 887.463,686.489 888.022,686.489 888.581,686.489 889.14,686.489 889.7,686.489 890.259,686.489 890.818,686.489 891.377,686.489 891.937,686.489 892.496,686.489 893.055,686.489 893.614,686.489 894.174,686.489 894.733,686.489 895.292,686.489 895.851,686.489 896.411,686.489 896.97,686.489 897.529,686.489 898.088,686.489 898.648,686.489 899.207,686.489 899.766,686.489 900.325,686.489 900.885,686.489 901.444,686.489 902.003,686.489 902.562,686.489 903.122,686.489 903.681,686.489 904.24,686.489 904.799,686.489 905.359,686.489 905.918,686.489 906.477,686.489 907.036,686.489 907.596,686.489 908.155,686.489 908.714,686.489 909.273,686.489 909.833,686.489 910.392,686.489 910.951,686.489 911.51,686.489 912.07,686.489 912.629,686.489 913.188,686.489 913.747,686.489 914.307,686.489 914.866,686.489 915.425,686.489 915.984,686.489 916.544,686.489 917.103,686.489 917.662,686.489 918.221,686.489 918.781,686.489 919.34,686.489 919.899,686.489 920.458,686.489 921.018,686.489 921.577,686.489 922.136,686.489 922.695,686.489 923.255,686.489 923.814,686.489 924.373,686.489 924.932,686.489 925.492,686.489 926.051,686.489 926.61,686.489 927.169,686.489 927.729,686.489 928.288,686.489 928.847,686.489 929.406,686.489 929.966,686.489 930.525,686.489 931.084,686.489 931.644,686.489 932.203,686.489 932.762,686.489 933.321,686.489 933.881,686.489 934.44,686.489 934.999,686.489 935.558,686.489 936.118,686.489 936.677,686.489 937.236,686.489 937.795,686.489 938.355,686.489 938.914,686.489 939.473,686.489 940.032,686.489 940.592,686.489 941.151,686.489 941.71,686.489 942.269,686.489 942.829,686.489 943.388,686.489 943.947,686.489 944.506,686.489 945.066,686.489 945.625,686.489 946.184,686.489 946.743,686.489 947.303,686.489 947.862,686.489 948.421,686.489 948.98,686.489 949.54,686.489 950.099,686.489 950.658,686.489 951.217,686.489 951.777,686.489 952.336,686.489 952.895,686.489 953.454,686.489 954.014,686.489 954.573,686.489 955.132,686.489 955.691,686.489 956.251,686.489 956.81,686.489 957.369,686.489 957.928,686.489 958.488,686.489 959.047,686.489 959.606,686.489 960.165,686.489 960.725,686.489 961.284,686.489 961.843,686.489 962.402,686.489 962.962,686.489 963.521,686.489 964.08,686.489 964.639,686.489 965.199,686.489 965.758,686.489 966.317,686.489 966.876,686.489 967.436,686.489 967.995,686.489 968.554,686.489 969.113,686.489 969.673,686.489 970.232,686.489 970.791,686.489 971.35,686.489 971.91,686.489 972.469,686.489 973.028,686.489 973.587,686.489 974.147,686.489 974.706,686.489 975.265,686.489 975.824,686.489 976.384,686.489 976.943,686.489 977.502,686.489 978.061,686.489 978.621,686.489 979.18,686.489 979.739,686.489 980.298,686.489 980.858,686.489 981.417,686.489 981.976,686.489 982.535,686.489 983.095,686.489 983.654,686.489 984.213,686.489 984.772,686.489 985.332,686.489 985.891,686.489 986.45,686.489 987.009,686.489 987.569,686.489 988.128,686.489 988.687,686.489 989.246,686.489 989.806,686.489 990.365,686.489 990.924,686.489 991.483,686.489 992.043,686.489 992.602,686.489 993.161,686.489 993.72,686.489 994.28,686.489 994.839,686.489 995.398,686.489 995.957,686.489 996.517,686.489 997.076,686.489 997.635,686.489 998.194,686.489 998.754,686.489 999.313,686.489 999.872,686.489 1000.43,686.489 1000.99,686.489 1001.55,686.489 1002.11,686.489 1002.67,686.489 1003.23,686.489 1003.79,686.489 1004.35,686.489 1004.91,686.489 1005.46,686.489 1006.02,686.489 1006.58,686.489 1007.14,686.489 1007.7,686.489 1008.26,686.489 1008.82,686.489 1009.38,686.489 1009.94,686.489 1010.5,686.489 1011.06,686.489 1011.62,686.489 1012.18,686.489 1012.73,686.489 1013.29,686.489 1013.85,686.489 1014.41,686.489 1014.97,686.489 1015.53,686.489 1016.09,686.489 1016.65,686.489 1017.21,686.489 1017.77,686.489 1018.33,686.489 1018.89,686.489 1019.45,686.489 1020.01,686.489 1020.56,686.489 1021.12,686.489 1021.68,686.489 1022.24,686.489 1022.8,686.489 1023.36,686.489 1023.92,686.489 1024.48,686.489 1025.04,686.489 1025.6,686.489 1026.16,686.489 1026.72,686.489 1027.28,686.489 1027.83,686.489 1028.39,686.489 1028.95,686.489 1029.51,686.489 1030.07,686.489 1030.63,686.489 1031.19,686.489 1031.75,686.489 1032.31,686.489 1032.87,686.489 1033.43,686.489 1033.99,686.489 1034.55,686.489 1035.1,686.489 1035.66,686.489 1036.22,686.489 1036.78,686.489 1037.34,686.489 1037.9,686.489 1038.46,686.489 1039.02,686.489 1039.58,686.489 1040.14,686.489 1040.7,686.489 1041.26,686.489 1041.82,686.489 1042.38,686.489 1042.93,686.489 1043.49,686.489 1044.05,686.489 1044.61,686.489 1045.17,686.489 1045.73,686.489 1046.29,686.489 1046.85,686.489 1047.41,686.489 1047.97,686.489 1048.53,686.489 1049.09,686.489 1049.65,686.489 1050.2,686.489 1050.76,686.489 1051.32,686.489 1051.88,686.489 1052.44,686.489 1053,686.489 1053.56,686.489 1054.12,686.489 1054.68,686.489 1055.24,686.489 1055.8,686.489 1056.36,686.489 1056.92,686.489 1057.48,686.489 1058.03,686.489 1058.59,686.489 1059.15,686.489 1059.71,686.489 1060.27,686.489 1060.83,686.489 1061.39,686.489 1061.95,686.489 1062.51,686.489 1063.07,686.489 1063.63,686.489 1064.19,686.489 1064.75,686.489 1065.3,686.489 1065.86,686.489 1066.42,686.489 1066.98,686.489 1067.54,686.489 1068.1,686.489 1068.66,686.489 1069.22,686.489 1069.78,686.489 1070.34,686.489 1070.9,686.489 1071.46,686.489 1072.02,686.489 1072.57,686.489 1073.13,686.489 1073.69,686.489 1074.25,686.489 1074.81,686.489 1075.37,686.489 1075.93,686.489 1076.49,686.489 1077.05,686.489 1077.61,686.489 1078.17,686.489 1078.73,686.489 1079.29,686.489 1079.85,686.489 1080.4,686.489 1080.96,686.489 1081.52,686.489 1082.08,686.489 1082.64,686.489 1083.2,686.489 1083.76,686.489 1084.32,686.489 1084.88,686.489 1085.44,686.489 1086,686.489 1086.56,686.489 1087.12,686.489 1087.67,686.489 1088.23,686.489 1088.79,686.489 1089.35,686.489 1089.91,686.489 1090.47,686.489 1091.03,686.489 1091.59,686.489 1092.15,686.489 1092.71,686.489 1093.27,686.489 1093.83,686.489 1094.39,686.489 1094.94,686.489 1095.5,686.489 1096.06,686.489 1096.62,686.489 1097.18,686.489 1097.74,686.489 1098.3,686.489 1098.86,686.489 1099.42,686.489 1099.98,686.489 1100.54,686.489 1101.1,686.489 1101.66,686.489 1102.22,686.489 1102.77,686.489 1103.33,686.489 1103.89,686.489 1104.45,686.489 1105.01,686.489 1105.57,686.489 1106.13,686.489 1106.69,686.489 1107.25,686.489 1107.81,686.489 1108.37,686.489 1108.93,686.489 1109.49,686.489 1110.04,686.489 1110.6,686.489 1111.16,686.489 1111.72,686.489 1112.28,686.489 1112.84,686.489 1113.4,686.489 1113.96,686.489 1114.52,686.489 1115.08,686.489 1115.64,686.489 1116.2,686.489 1116.76,686.489 1117.31,686.489 1117.87,686.489 1118.43,686.489 1118.99,686.489 1119.55,686.489 1120.11,686.489 1120.67,686.489 1121.23,686.489 1121.79,686.489 1122.35,686.489 1122.91,686.489 1123.47,686.489 1124.03,686.489 1124.59,686.489 1125.14,686.489 1125.7,686.489 1126.26,686.489 1126.82,686.489 1127.38,686.489 1127.94,686.489 1128.5,686.489 1129.06,686.489 1129.62,686.489 1130.18,686.489 1130.74,686.489 1131.3,686.489 1131.86,686.489 1132.41,686.489 1132.97,686.489 1133.53,686.489 1134.09,686.489 1134.65,686.489 1135.21,686.489 1135.77,686.489 1136.33,686.489 1136.89,686.489 1137.45,686.489 1138.01,686.489 1138.57,686.489 1139.13,686.489 1139.68,686.489 1140.24,686.489 1140.8,686.489 1141.36,686.489 1141.92,686.489 1142.48,686.489 1143.04,686.489 1143.6,686.489 1144.16,686.489 1144.72,686.489 1145.28,686.489 1145.84,686.489 1146.4,686.489 1146.96,686.489 1147.51,686.489 1148.07,686.489 1148.63,686.489 1149.19,686.489 1149.75,686.489 1150.31,686.489 1150.87,686.489 1151.43,686.489 1151.99,686.489 1152.55,686.489 1153.11,686.489 1153.67,686.489 1154.23,686.489 1154.78,686.489 1155.34,686.489 1155.9,686.489 1156.46,686.489 1157.02,686.489 1157.58,686.489 1158.14,686.489 1158.7,686.489 1159.26,686.489 1159.82,686.489 1160.38,686.489 1160.94,686.489 1161.5,686.489 1162.05,686.489 1162.61,686.489 1163.17,686.489 1163.73,686.489 1164.29,686.489 1164.85,686.489 1165.41,686.489 1165.97,686.489 1166.53,686.489 1167.09,686.489 1167.65,686.489 1168.21,686.489 1168.77,686.489 1169.33,686.489 1169.88,686.489 1170.44,686.489 1171,686.489 1171.56,686.489 1172.12,686.489 1172.68,686.489 1173.24,686.489 1173.8,686.489 1174.36,686.489 1174.92,686.489 1175.48,686.489 1176.04,686.489 1176.6,686.489 1177.15,686.489 1177.71,686.489 1178.27,686.489 1178.83,686.489 1179.39,686.489 1179.95,686.489 1180.51,686.489 1181.07,686.489 1181.63,686.489 1182.19,686.489 1182.75,686.489 1183.31,686.489 1183.87,686.489 1184.43,686.489 1184.98,686.489 1185.54,686.489 1186.1,686.489 1186.66,686.489 1187.22,686.489 1187.78,686.489 1188.34,686.489 1188.9,686.489 1189.46,686.489 1190.02,686.489 1190.58,686.489 1191.14,686.489 1191.7,686.489 1192.25,686.489 1192.81,686.489 1193.37,686.489 1193.93,686.489 1194.49,686.489 1195.05,686.489 1195.61,686.489 1196.17,686.489 1196.73,686.489 1197.29,686.489 1197.85,686.489 1198.41,686.489 1198.97,686.489 1199.52,686.489 1200.08,686.489 1200.64,686.489 1201.2,686.489 1201.76,686.489 1202.32,686.489 1202.88,686.489 1203.44,686.489 1204,686.489 1204.56,686.489 1205.12,686.489 1205.68,686.489 1206.24,686.489 1206.8,686.489 1207.35,686.489 1207.91,686.489 1208.47,686.489 1209.03,686.489 1209.59,686.489 1210.15,686.489 1210.71,686.489 1211.27,686.489 1211.83,686.489 1212.39,686.489 1212.95,686.489 1213.51,686.489 1214.07,686.489 1214.62,686.489 1215.18,686.489 1215.74,686.489 1216.3,686.489 1216.86,686.489 1217.42,686.489 1217.98,686.489 1218.54,686.489 1219.1,686.489 1219.66,686.489 1220.22,686.489 1220.78,686.489 1221.34,686.489 1221.89,686.489 1222.45,686.489 1223.01,686.489 1223.57,686.489 1224.13,686.489 1224.69,686.489 1225.25,686.489 1225.81,686.489 1226.37,686.489 1226.93,686.489 1227.49,686.489 1228.05,686.489 1228.61,686.489 1229.17,686.489 1229.72,686.489 1230.28,686.489 1230.84,686.489 1231.4,686.489 1231.96,686.489 1232.52,686.489 1233.08,686.489 1233.64,686.489 1234.2,686.489 1234.76,686.489 1235.32,686.489 1235.88,686.489 1236.44,686.489 1236.99,686.489 1237.55,686.489 1238.11,686.489 1238.67,686.489 1239.23,686.489 1239.79,686.489 1240.35,686.489 1240.91,686.489 1241.47,686.489 1242.03,686.489 1242.59,686.489 1243.15,686.489 1243.71,686.489 1244.26,686.489 1244.82,686.489 1245.38,686.489 1245.94,686.489 1246.5,686.489 1247.06,686.489 1247.62,686.489 1248.18,686.489 1248.74,686.489 1249.3,686.489 1249.86,686.489 1250.42,686.489 1250.98,686.489 1251.54,686.489 1252.09,686.489 1252.65,686.489 1253.21,686.489 1253.77,686.489 1254.33,686.489 1254.89,686.489 1255.45,686.489 1256.01,686.489 1256.57,686.489 1257.13,686.489 1257.69,686.489 1258.25,686.489 1258.81,686.489 1259.36,686.489 1259.92,686.489 1260.48,686.489 1261.04,686.489 1261.6,686.489 1262.16,686.489 1262.72,686.489 1263.28,686.489 1263.84,686.489 1264.4,686.489 1264.96,686.489 1265.52,686.489 1266.08,686.489 1266.63,686.489 1267.19,686.489 1267.75,686.489 1268.31,686.489 1268.87,686.489 1269.43,686.489 1269.99,686.489 1270.55,686.489 1271.11,686.489 1271.67,686.489 1272.23,686.489 1272.79,686.489 1273.35,686.489 1273.91,686.489 1274.46,686.489 1275.02,686.489 1275.58,686.489 1276.14,686.489 1276.7,686.489 1277.26,686.489 1277.82,686.489 1278.38,686.489 1278.94,686.489 1279.5,686.489 1280.06,686.489 1280.62,686.489 1281.18,686.489 1281.73,686.489 1282.29,686.489 1282.85,686.489 1283.41,686.489 1283.97,686.489 1284.53,686.489 1285.09,686.489 1285.65,686.489 1286.21,686.489 1286.77,686.489 1287.33,686.489 1287.89,686.489 1288.45,686.489 1289,686.489 1289.56,686.489 1290.12,686.489 1290.68,686.489 1291.24,686.489 1291.8,686.489 1292.36,686.489 1292.92,686.489 1293.48,686.489 1294.04,686.489 1294.6,686.489 1295.16,686.489 1295.72,686.489 1296.28,686.489 1296.83,686.489 1297.39,686.489 1297.95,686.489 1298.51,686.489 1299.07,686.489 1299.63,686.489 1300.19,686.489 1300.75,686.489 1301.31,686.489 1301.87,686.489 1302.43,686.489 1302.99,686.489 1303.55,686.489 1304.1,686.489 1304.66,686.489 1305.22,686.489 1305.78,686.489 1306.34,686.489 1306.9,686.489 1307.46,686.489 1308.02,686.489 1308.58,686.489 1309.14,686.489 1309.7,686.489 1310.26,686.489 1310.82,686.489 1311.38,686.489 1311.93,686.489 1312.49,686.489 1313.05,686.489 1313.61,686.489 1314.17,686.489 1314.73,686.489 1315.29,686.489 1315.85,686.489 1316.41,686.489 1316.97,686.489 1317.53,686.489 1318.09,686.489 1318.65,686.489 1319.2,686.489 1319.76,686.489 1320.32,686.489 1320.88,686.489 1321.44,686.489 1322,686.489 1322.56,686.489 1323.12,686.489 1323.68,686.489 1324.24,686.489 1324.8,686.489 1325.36,686.489 1325.92,686.489 1326.47,686.489 1327.03,686.489 1327.59,686.489 1328.15,686.489 1328.71,686.489 1329.27,686.489 1329.83,686.489 1330.39,686.489 1330.95,686.489 1331.51,686.489 1332.07,686.489 1332.63,686.489 1333.19,686.489 1333.75,686.489 1334.3,686.489 1334.86,686.489 1335.42,686.489 1335.98,686.489 1336.54,686.489 1337.1,686.489 1337.66,686.489 1338.22,686.489 1338.78,686.489 1339.34,686.489 1339.9,686.489 1340.46,686.489 1341.02,686.489 1341.57,686.489 1342.13,686.489 1342.69,686.489 1343.25,686.489 1343.81,686.489 1344.37,686.489 1344.93,686.489 1345.49,686.489 1346.05,686.489 1346.61,686.489 1347.17,686.489 1347.73,686.489 1348.29,686.489 1348.84,686.489 1349.4,686.489 1349.96,686.489 1350.52,686.489 1351.08,686.489 1351.64,686.489 1352.2,686.489 1352.76,686.489 1353.32,686.489 1353.88,686.489 1354.44,686.489 1355,686.489 1355.56,686.489 1356.12,686.489 1356.67,686.489 1357.23,686.489 1357.79,686.489 1358.35,686.489 1358.91,686.489 1359.47,686.489 1360.03,686.489 1360.59,686.489 1361.15,686.489 1361.71,686.489 1362.27,686.489 1362.83,686.489 1363.39,686.489 1363.94,686.489 1364.5,686.489 1365.06,686.489 1365.62,686.489 1366.18,686.489 1366.74,686.489 1367.3,686.489 1367.86,686.489 1368.42,686.489 1368.98,686.489 1369.54,686.489 1370.1,686.489 1370.66,686.489 1371.21,686.489 1371.77,686.489 1372.33,686.489 1372.89,686.489 1373.45,686.489 1374.01,686.489 1374.57,686.489 1375.13,686.489 1375.69,686.489 1376.25,686.489 1376.81,686.489 1377.37,686.489 1377.93,686.489 1378.49,686.489 1379.04,686.489 1379.6,686.489 1380.16,686.489 1380.72,686.489 1381.28,686.489 1381.84,686.489 1382.4,686.489 1382.96,686.489 1383.52,686.489 1384.08,686.489 1384.64,686.489 1385.2,686.489 1385.76,686.489 1386.31,686.489 1386.87,686.489 1387.43,686.489 1387.99,686.489 1388.55,686.489 1389.11,686.489 1389.67,686.489 1390.23,686.489 1390.79,686.489 1391.35,686.489 1391.91,686.489 1392.47,686.489 1393.03,686.489 1393.58,686.489 1394.14,686.489 1394.7,686.489 1395.26,686.489 1395.82,686.489 1396.38,686.489 1396.94,686.489 1397.5,686.489 1398.06,686.489 1398.62,686.489 1399.18,686.489 1399.74,686.489 1400.3,686.489 1400.86,686.489 1401.41,686.489 1401.97,686.489 1402.53,686.489 1403.09,686.489 1403.65,686.489 1404.21,686.489 1404.77,686.489 1405.33,686.489 1405.89,686.489 1406.45,686.489 1407.01,686.489 1407.57,686.489 1408.13,686.489 1408.68,686.489 1409.24,686.489 1409.8,686.489 1410.36,686.489 1410.92,686.489 1411.48,686.489 1412.04,686.489 1412.6,686.489 1413.16,686.489 1413.72,686.489 1414.28,686.489 1414.84,686.489 1415.4,686.489 1415.95,686.489 1416.51,686.489 1417.07,686.489 1417.63,686.489 1418.19,686.489 1418.75,686.489 1419.31,686.489 1419.87,686.489 1420.43,686.489 1420.99,686.489 1421.55,686.489 1422.11,686.489 1422.67,686.489 1423.23,686.489 1423.78,686.489 1424.34,686.489 1424.9,686.489 1425.46,686.489 1426.02,686.489 1426.58,686.489 1427.14,686.489 1427.7,686.489 1428.26,686.489 1428.82,686.489 1429.38,686.489 1429.94,686.489 1430.5,686.489 1431.05,686.489 1431.61,686.489 1432.17,686.489 1432.73,686.489 1433.29,686.489 1433.85,686.489 1434.41,686.489 1434.97,686.489 1435.53,686.489 1436.09,686.489 1436.65,686.489 1437.21,686.489 1437.77,686.489 1438.33,686.489 1438.88,686.489 1439.44,686.489 1440,686.489 1440.56,686.489 1441.12,686.489 1441.68,686.489 1442.24,686.489 1442.8,686.489 1443.36,686.489 1443.92,686.489 1444.48,686.489 1445.04,686.489 1445.6,686.489 1446.15,686.489 1446.71,686.489 1447.27,686.489 1447.83,686.489 1448.39,686.489 1448.95,686.489 1449.51,686.489 1450.07,686.489 1450.63,686.489 1451.19,686.489 1451.75,686.489 1452.31,686.489 1452.87,686.489 1453.42,686.489 1453.98,686.489 1454.54,686.489 1455.1,686.489 1455.66,686.489 1456.22,686.489 1456.78,686.489 1457.34,686.489 1457.9,686.489 1458.46,686.489 1459.02,686.489 1459.58,686.489 1460.14,686.489 1460.7,686.489 1461.25,686.489 1461.81,686.489 1462.37,686.489 1462.93,686.489 1463.49,686.489 1464.05,686.489 1464.61,686.489 1465.17,686.489 1465.73,686.489 1466.29,686.489 1466.85,686.489 1467.41,686.489 1467.97,686.489 1468.52,686.489 1469.08,686.489 1469.64,686.489 1470.2,686.489 1470.76,686.489 1471.32,686.489 1471.88,686.489 1472.44,686.489 1473,686.489 1473.56,686.489 1474.12,686.489 1474.68,686.489 1475.24,686.489 1475.79,686.489 1476.35,686.489 1476.91,686.489 1477.47,686.489 1478.03,686.489 1478.59,686.489 1479.15,686.489 1479.71,686.489 1480.27,686.489 1480.83,686.489 1481.39,686.489 1481.95,686.489 1482.51,686.489 1483.07,686.489 1483.62,686.489 1484.18,686.489 1484.74,686.489 1485.3,686.489 1485.86,686.489 1486.42,686.489 1486.98,686.489 1487.54,686.489 1488.1,686.489 1488.66,686.489 1489.22,686.489 1489.78,686.489 1490.34,686.489 1490.89,686.489 1491.45,686.489 1492.01,686.489 1492.57,686.489 1493.13,686.489 1493.69,686.489 1494.25,686.489 1494.81,686.489 1495.37,686.489 1495.93,686.489 1496.49,686.489 1497.05,686.489 1497.61,686.489 1498.16,686.489 1498.72,686.489 1499.28,686.489 1499.84,686.489 1500.4,686.489 1500.96,686.489 1501.52,686.489 1502.08,686.489 1502.64,686.489 1503.2,686.489 1503.76,686.489 1504.32,686.489 1504.88,686.489 1505.44,686.489 1505.99,686.489 1506.55,686.489 1507.11,686.489 1507.67,686.489 1508.23,686.489 1508.79,686.489 1509.35,686.489 1509.91,686.489 1510.47,686.489 1511.03,686.489 1511.59,686.489 1512.15,686.489 1512.71,686.489 1513.26,686.489 1513.82,686.489 1514.38,686.489 1514.94,686.489 1515.5,686.489 1516.06,686.489 1516.62,686.489 1517.18,686.489 1517.74,686.489 1518.3,686.489 1518.86,686.489 1519.42,686.489 1519.98,686.489 1520.53,686.489 1521.09,686.489 1521.65,686.489 1522.21,686.489 1522.77,686.489 1523.33,686.489 1523.89,686.489 1524.45,686.489 1525.01,686.489 1525.57,686.489 1526.13,686.489 1526.69,686.489 1527.25,686.489 1527.81,686.489 1528.36,686.489 1528.92,686.489 1529.48,686.489 1530.04,686.489 1530.6,686.489 1531.16,686.489 1531.72,686.489 1532.28,686.489 1532.84,686.489 1533.4,686.489 1533.96,686.489 1534.52,686.489 1535.08,686.489 1535.63,686.489 1536.19,686.489 1536.75,686.489 1537.31,686.489 1537.87,686.489 1538.43,686.489 1538.99,686.489 1539.55,686.489 1540.11,686.489 1540.67,686.489 1541.23,686.489 1541.79,686.489 1542.35,686.489 1542.9,686.489 1543.46,686.489 1544.02,686.489 1544.58,686.489 1545.14,686.489 1545.7,686.489 1546.26,686.489 1546.82,686.489 1547.38,686.489 1547.94,686.489 1548.5,686.489 1549.06,686.489 1549.62,686.489 1550.18,686.489 1550.73,686.489 1551.29,686.489 1551.85,686.489 1552.41,686.489 1552.97,686.489 1553.53,686.489 1554.09,686.489 1554.65,686.489 1555.21,686.489 1555.77,686.489 1556.33,686.489 1556.89,686.489 1557.45,686.489 1558,686.489 1558.56,686.489 1559.12,686.489 1559.68,686.489 1560.24,686.489 1560.8,686.489 1561.36,686.489 1561.92,686.489 1562.48,686.489 1563.04,686.489 1563.6,686.489 1564.16,686.489 1564.72,686.489 1565.28,686.489 1565.83,686.489 1566.39,686.489 1566.95,686.489 1567.51,686.489 1568.07,686.489 1568.63,686.489 1569.19,686.489 1569.75,686.489 1570.31,686.489 1570.87,686.489 1571.43,686.489 1571.99,686.489 1572.55,686.489 1573.1,686.489 1573.66,686.489 1574.22,686.489 1574.78,686.489 1575.34,686.489 1575.9,686.489 1576.46,686.489 1577.02,686.489 1577.58,686.489 1578.14,686.489 1578.7,686.489 1579.26,686.489 1579.82,686.489 1580.37,686.489 1580.93,686.489 1581.49,686.489 1582.05,686.489 1582.61,686.489 1583.17,686.489 1583.73,686.489 1584.29,686.489 1584.85,686.489 1585.41,686.489 1585.97,686.489 1586.53,686.489 1587.09,686.489 1587.65,686.489 1588.2,686.489 1588.76,686.489 1589.32,686.489 1589.88,686.489 1590.44,686.489 1591,686.489 1591.56,686.489 1592.12,686.489 1592.68,686.489 1593.24,686.489 1593.8,686.489 1594.36,686.489 1594.92,686.489 1595.47,686.489 1596.03,686.489 1596.59,686.489 1597.15,686.489 1597.71,686.489 1598.27,686.489 1598.83,686.489 1599.39,686.489 1599.95,686.489 1600.51,686.489 1601.07,686.489 1601.63,686.489 1602.19,686.489 1602.74,686.489 1603.3,686.489 1603.86,686.489 1604.42,686.489 1604.98,686.489 1605.54,686.489 1606.1,686.489 1606.66,686.489 1607.22,686.489 1607.78,686.489 1608.34,686.489 1608.9,686.489 1609.46,686.489 1610.02,686.489 1610.57,686.489 1611.13,686.489 1611.69,686.489 1612.25,686.489 1612.81,686.489 1613.37,686.489 1613.93,686.489 1614.49,686.489 1615.05,686.489 1615.61,686.489 1616.17,686.489 1616.73,686.489 1617.29,686.489 1617.84,686.489 1618.4,686.489 1618.96,686.489 1619.52,686.489 1620.08,686.489 1620.64,686.489 1621.2,686.489 1621.76,686.489 1622.32,686.489 1622.88,686.489 1623.44,686.489 1624,686.489 1624.56,686.489 1625.11,686.489 1625.67,686.489 1626.23,686.489 1626.79,686.489 1627.35,686.489 1627.91,686.489 1628.47,686.489 1629.03,686.489 1629.59,686.489 1630.15,686.489 1630.71,686.489 1631.27,686.489 1631.83,686.489 1632.39,686.489 1632.94,686.489 1633.5,686.489 1634.06,686.489 1634.62,686.489 1635.18,686.489 1635.74,686.489 1636.3,686.489 1636.86,686.489 1637.42,686.489 1637.98,686.489 1638.54,686.489 1639.1,686.489 1639.66,686.489 1640.21,686.489 1640.77,686.489 1641.33,686.489 1641.89,686.489 1642.45,686.489 1643.01,686.489 1643.57,686.489 1644.13,686.489 1644.69,686.489 1645.25,686.489 1645.81,686.489 1646.37,686.489 1646.93,686.489 1647.48,686.489 1648.04,686.489 1648.6,686.489 1649.16,686.489 1649.72,686.489 1650.28,686.489 1650.84,686.489 1651.4,686.489 1651.96,686.489 1652.52,686.489 1653.08,686.489 1653.64,686.489 1654.2,686.489 1654.76,686.489 1655.31,686.489 1655.87,686.489 1656.43,686.489 1656.99,686.489 1657.55,686.489 1658.11,686.489 1658.67,686.489 1659.23,686.489 1659.79,686.489 1660.35,686.489 1660.91,686.489 1661.47,686.489 1662.03,686.489 1662.58,686.489 1663.14,686.489 1663.7,686.489 1664.26,686.489 1664.82,686.489 1665.38,686.489 1665.94,686.489 1666.5,686.489 1667.06,686.489 1667.62,686.489 1668.18,686.489 1668.74,686.489 1669.3,686.489 1669.85,686.489 1670.41,686.489 1670.97,686.489 1671.53,686.489 1672.09,686.489 1672.65,686.489 1673.21,686.489 1673.77,686.489 1674.33,686.489 1674.89,686.489 1675.45,686.489 1676.01,686.489 1676.57,686.489 1677.13,686.489 1677.68,686.489 1678.24,686.489 1678.8,686.489 1679.36,686.489 1679.92,686.489 1680.48,686.489 1681.04,686.489 1681.6,686.489 1682.16,686.489 1682.72,686.489 1683.28,686.489 1683.84,686.489 1684.4,686.489 1684.95,686.489 1685.51,686.489 1686.07,686.489 1686.63,686.489 1687.19,686.489 1687.75,686.489 1688.31,686.489 1688.87,686.489 1689.43,686.489 1689.99,686.489 1690.55,686.489 1691.11,686.489 1691.67,686.489 1692.23,686.489 1692.78,686.489 1693.34,686.489 1693.9,686.489 1694.46,686.489 1695.02,686.489 1695.58,686.489 1696.14,686.489 1696.7,686.489 1697.26,686.489 1697.82,686.489 1698.38,686.489 1698.94,686.489 1699.5,686.489 1700.05,686.489 1700.61,686.489 1701.17,686.489 1701.73,686.489 1702.29,686.489 1702.85,686.489 1703.41,686.489 1703.97,686.489 1704.53,686.489 1705.09,686.489 1705.65,686.489 1706.21,686.489 1706.77,686.489 1707.32,686.489 1707.88,686.489 1708.44,686.489 1709,686.489 1709.56,686.489 1710.12,686.489 1710.68,686.489 1711.24,686.489 1711.8,686.489 1712.36,686.489 1712.92,686.489 1713.48,686.489 1714.04,686.489 1714.6,686.489 1715.15,686.489 1715.71,686.489 1716.27,686.489 1716.83,686.489 1717.39,686.489 1717.95,686.489 1718.51,686.489 1719.07,686.489 1719.63,686.489 1720.19,686.489 1720.75,686.489 1721.31,686.489 1721.87,686.489 1722.42,686.489 1722.98,686.489 1723.54,686.489 1724.1,686.489 1724.66,686.489 1725.22,686.489 1725.78,686.489 1726.34,686.489 1726.9,686.489 1727.46,686.489 1728.02,686.489 1728.58,686.489 1729.14,686.489 1729.69,686.489 1730.25,686.489 1730.81,686.489 1731.37,686.489 1731.93,686.489 1732.49,686.489 1733.05,686.489 1733.61,686.489 1734.17,686.489 1734.73,686.489 1735.29,686.489 1735.85,686.489 1736.41,686.489 1736.97,686.489 1737.52,686.489 1738.08,686.489 1738.64,686.489 1739.2,686.489 1739.76,686.489 1740.32,686.489 1740.88,686.489 1741.44,686.489 1742,686.489 1742.56,686.489 1743.12,686.489 1743.68,686.489 1744.24,686.489 1744.79,686.489 1745.35,686.489 1745.91,686.489 1746.47,686.489 1747.03,686.489 1747.59,686.489 1748.15,686.489 1748.71,686.489 1749.27,686.489 1749.83,686.489 1750.39,686.489 1750.95,686.489 1751.51,686.489 1752.06,686.489 1752.62,686.489 1753.18,686.489 1753.74,686.489 1754.3,686.489 1754.86,686.489 1755.42,686.489 1755.98,686.489 1756.54,686.489 1757.1,686.489 1757.66,686.489 1758.22,686.489 1758.78,686.489 1759.34,686.489 1759.89,686.489 1760.45,686.489 1761.01,686.489 1761.57,686.489 1762.13,686.489 1762.69,686.489 1763.25,686.489 1763.81,686.489 1764.37,686.489 1764.93,686.489 1765.49,686.489 1766.05,686.489 1766.61,686.489 1767.16,686.489 1767.72,686.489 1768.28,686.489 1768.84,686.489 1769.4,686.489 1769.96,686.489 1770.52,686.489 1771.08,686.489 1771.64,686.489 1772.2,686.489 1772.76,686.489 1773.32,686.489 1773.88,686.489 1774.43,686.489 1774.99,686.489 1775.55,686.489 1776.11,686.489 1776.67,686.489 1777.23,686.489 1777.79,686.489 1778.35,686.489 1778.91,686.489 1779.47,686.489 1780.03,686.489 1780.59,686.489 1781.15,686.489 1781.71,686.489 1782.26,686.489 1782.82,686.489 1783.38,686.489 1783.94,686.489 1784.5,686.489 1785.06,686.489 1785.62,686.489 1786.18,686.489 1786.74,686.489 1787.3,686.489 1787.86,686.489 1788.42,686.489 1788.98,686.489 1789.53,686.489 1790.09,686.489 1790.65,686.489 1791.21,686.489 1791.77,686.489 1792.33,686.489 1792.89,686.489 1793.45,686.489 1794.01,686.489 1794.57,686.489 1795.13,686.489 1795.69,686.489 1796.25,686.489 1796.8,686.489 1797.36,686.489 1797.92,686.489 1798.48,686.489 1799.04,686.489 1799.6,686.489 1800.16,686.489 1800.72,686.489 1801.28,686.489 1801.84,686.489 1802.4,686.489 1802.96,686.489 1803.52,686.489 1804.08,686.489 1804.63,686.489 1805.19,686.489 1805.75,686.489 1806.31,686.489 1806.87,686.489 1807.43,686.489 1807.99,686.489 1808.55,686.489 1809.11,686.489 1809.67,686.489 1810.23,686.489 1810.79,686.489 1811.35,686.489 1811.9,686.489 1812.46,686.489 1813.02,686.489 1813.58,686.489 1814.14,686.489 1814.7,686.489 1815.26,686.489 1815.82,686.489 1816.38,686.489 1816.94,686.489 1817.5,686.489 1818.06,686.489 1818.62,686.489 1819.18,686.489 1819.73,686.489 1820.29,686.489 1820.85,686.489 1821.41,686.489 1821.97,686.489 1822.53,686.489 1823.09,686.489 1823.65,686.489 1824.21,686.489 1824.77,686.489 1825.33,686.489 1825.89,686.489 1826.45,686.489 1827,686.489 1827.56,686.489 1828.12,686.489 1828.68,686.489 1829.24,686.489 1829.8,686.489 1830.36,686.489 1830.92,686.489 1831.48,686.489 1832.04,686.489 1832.6,686.489 1833.16,686.489 1833.72,686.489 1834.27,686.489 1834.83,686.489 1835.39,686.489 1835.95,686.489 1836.51,686.489 1837.07,686.489 1837.63,686.489 1838.19,686.489 \"/>\n<path clip-path=\"url(#clip703)\" d=\"M720.247 685.043 L720.806 685.043 L721.365 685.043 L721.924 685.043 L722.484 685.043 L723.043 685.043 L723.602 685.043 L724.161 685.043 L724.721 685.043 L725.28 685.043 L725.839 685.043 L726.398 685.043 L726.958 685.043 L727.517 685.043 L728.076 685.043 L728.635 685.043 L729.195 685.043 L729.754 685.043 L730.313 685.043 L730.872 685.043 L731.432 685.043 L731.991 685.043 L732.55 685.043 L733.109 685.043 L733.669 685.043 L734.228 685.043 L734.787 685.043 L735.346 685.043 L735.906 685.043 L736.465 685.043 L737.024 685.043 L737.583 685.043 L738.143 685.043 L738.702 685.043 L739.261 685.043 L739.82 685.043 L740.38 685.043 L740.939 685.043 L741.498 685.043 L742.057 685.043 L742.617 685.043 L743.176 685.043 L743.735 685.043 L744.294 685.043 L744.854 685.043 L745.413 685.043 L745.972 685.043 L746.531 685.043 L747.091 685.043 L747.65 685.043 L748.209 685.043 L748.768 685.043 L749.328 685.043 L749.887 685.043 L750.446 685.043 L751.005 685.043 L751.565 685.043 L752.124 685.043 L752.683 685.043 L753.242 685.043 L753.802 685.043 L754.361 685.043 L754.92 685.043 L755.479 685.043 L756.039 685.043 L756.598 685.043 L757.157 685.043 L757.716 685.043 L758.276 685.043 L758.835 685.043 L759.394 685.043 L759.953 685.043 L760.513 685.043 L761.072 685.043 L761.631 685.043 L762.19 685.043 L762.75 685.043 L763.309 685.043 L763.868 685.043 L764.427 685.043 L764.987 685.043 L765.546 685.043 L766.105 685.043 L766.664 685.043 L767.224 685.043 L767.783 685.043 L768.342 685.043 L768.901 685.043 L769.461 685.043 L770.02 685.043 L770.579 685.043 L771.138 685.043 L771.698 685.043 L772.257 685.043 L772.816 685.043 L773.375 685.043 L773.935 685.043 L774.494 685.043 L775.053 685.043 L775.612 685.043 L776.172 685.043 L776.731 685.043 L777.29 685.043 L777.849 685.043 L778.409 685.043 L778.968 685.043 L779.527 685.043 L780.086 685.043 L780.646 685.043 L781.205 685.043 L781.764 685.043 L782.323 685.043 L782.883 685.043 L783.442 685.043 L784.001 685.043 L784.56 685.043 L785.12 685.043 L785.679 685.043 L786.238 685.043 L786.797 685.043 L787.357 685.043 L787.916 685.043 L788.475 685.043 L789.034 685.043 L789.594 685.043 L790.153 685.043 L790.712 685.043 L791.271 685.043 L791.831 685.043 L792.39 685.043 L792.949 685.043 L793.508 685.043 L794.068 685.043 L794.627 685.043 L795.186 685.043 L795.745 685.043 L796.305 685.043 L796.864 685.043 L797.423 685.043 L797.982 685.043 L798.542 685.043 L799.101 685.043 L799.66 685.043 L800.219 685.043 L800.779 685.043 L801.338 685.043 L801.897 685.043 L802.456 685.043 L803.016 685.043 L803.575 685.043 L804.134 685.043 L804.693 685.043 L805.253 685.043 L805.812 685.043 L806.371 685.043 L806.931 685.043 L807.49 685.043 L808.049 685.043 L808.608 685.043 L809.168 685.043 L809.727 685.043 L810.286 685.043 L810.845 685.043 L811.405 685.043 L811.964 685.043 L812.523 685.043 L813.082 685.043 L813.642 685.043 L814.201 685.043 L814.76 685.043 L815.319 685.043 L815.879 685.043 L816.438 685.043 L816.997 685.043 L817.556 685.043 L818.116 685.043 L818.675 685.043 L819.234 685.043 L819.793 685.043 L820.353 685.043 L820.912 685.043 L821.471 685.043 L822.03 685.043 L822.59 685.043 L823.149 685.043 L823.708 685.043 L824.267 685.043 L824.827 685.043 L825.386 685.043 L825.945 685.043 L826.504 685.043 L827.064 685.043 L827.623 685.043 L828.182 685.043 L828.741 685.043 L829.301 685.043 L829.86 685.043 L830.419 685.043 L830.978 685.043 L831.538 685.043 L832.097 685.043 L832.656 685.043 L833.215 685.043 L833.775 685.043 L834.334 685.043 L834.893 685.043 L835.452 685.043 L836.012 685.043 L836.571 685.043 L837.13 685.043 L837.689 685.043 L838.249 685.043 L838.808 685.043 L839.367 685.043 L839.926 685.043 L840.486 685.043 L841.045 685.043 L841.604 685.043 L842.163 685.043 L842.723 685.043 L843.282 685.043 L843.841 685.043 L844.4 685.043 L844.96 685.043 L845.519 685.043 L846.078 685.043 L846.637 685.043 L847.197 685.043 L847.756 685.043 L848.315 685.043 L848.874 685.043 L849.434 685.043 L849.993 685.043 L850.552 685.043 L851.111 685.043 L851.671 685.043 L852.23 685.043 L852.789 685.043 L853.348 685.043 L853.908 685.043 L854.467 685.043 L855.026 685.043 L855.585 685.043 L856.145 685.043 L856.704 685.043 L857.263 685.043 L857.822 685.043 L858.382 685.043 L858.941 685.043 L859.5 685.043 L860.059 685.043 L860.619 685.043 L861.178 685.043 L861.737 685.043 L862.296 685.043 L862.856 685.043 L863.415 685.043 L863.974 685.043 L864.533 685.043 L865.093 685.043 L865.652 685.043 L866.211 685.043 L866.77 685.043 L867.33 685.043 L867.889 685.043 L868.448 685.043 L869.007 685.043 L869.567 685.043 L870.126 685.043 L870.685 685.043 L871.244 685.043 L871.804 685.043 L872.363 685.043 L872.922 685.043 L873.481 685.043 L874.041 685.043 L874.6 685.043 L875.159 685.043 L875.718 685.043 L876.278 685.043 L876.837 685.043 L877.396 685.043 L877.955 685.043 L878.515 685.043 L879.074 685.043 L879.633 685.043 L880.192 685.043 L880.752 685.043 L881.311 685.043 L881.87 685.043 L882.429 685.043 L882.989 685.043 L883.548 685.043 L884.107 685.043 L884.666 685.043 L885.226 685.043 L885.785 685.043 L886.344 685.043 L886.903 685.043 L887.463 685.043 L888.022 685.043 L888.581 685.043 L889.14 685.043 L889.7 685.043 L890.259 685.043 L890.818 685.043 L891.377 685.043 L891.937 685.043 L892.496 685.043 L893.055 685.043 L893.614 685.043 L894.174 685.043 L894.733 685.043 L895.292 685.043 L895.851 685.043 L896.411 685.043 L896.97 685.043 L897.529 685.043 L898.088 685.043 L898.648 685.043 L899.207 685.043 L899.766 685.043 L900.325 685.043 L900.885 685.043 L901.444 685.043 L902.003 685.043 L902.562 685.043 L903.122 685.043 L903.681 685.043 L904.24 685.043 L904.799 685.043 L905.359 685.043 L905.918 685.043 L906.477 685.043 L907.036 685.043 L907.596 685.043 L908.155 685.043 L908.714 685.043 L909.273 685.043 L909.833 685.043 L910.392 685.043 L910.951 685.043 L911.51 685.043 L912.07 685.043 L912.629 685.043 L913.188 685.043 L913.747 685.043 L914.307 685.043 L914.866 685.043 L915.425 685.043 L915.984 685.043 L916.544 685.043 L917.103 685.043 L917.662 685.043 L918.221 685.043 L918.781 685.043 L919.34 685.043 L919.899 685.043 L920.458 685.043 L921.018 685.043 L921.577 685.043 L922.136 685.043 L922.695 685.043 L923.255 685.043 L923.814 685.043 L924.373 685.043 L924.932 685.043 L925.492 685.043 L926.051 685.043 L926.61 685.043 L927.169 685.043 L927.729 685.043 L928.288 685.043 L928.847 685.043 L929.406 685.043 L929.966 685.043 L930.525 685.043 L931.084 685.043 L931.644 685.043 L932.203 685.043 L932.762 685.043 L933.321 685.043 L933.881 685.043 L934.44 685.043 L934.999 685.043 L935.558 685.043 L936.118 685.043 L936.677 685.043 L937.236 685.043 L937.795 685.043 L938.355 685.043 L938.914 685.043 L939.473 685.043 L940.032 685.043 L940.592 685.043 L941.151 685.043 L941.71 685.043 L942.269 685.043 L942.829 685.043 L943.388 685.043 L943.947 685.043 L944.506 685.043 L945.066 685.043 L945.625 685.043 L946.184 685.043 L946.743 685.043 L947.303 685.043 L947.862 685.043 L948.421 685.043 L948.98 685.043 L949.54 685.043 L950.099 685.043 L950.658 685.043 L951.217 685.043 L951.777 685.043 L952.336 685.043 L952.895 685.043 L953.454 685.043 L954.014 685.043 L954.573 685.043 L955.132 685.043 L955.691 685.043 L956.251 685.043 L956.81 685.043 L957.369 685.043 L957.928 685.043 L958.488 685.043 L959.047 685.043 L959.606 685.043 L960.165 685.043 L960.725 685.043 L961.284 685.043 L961.843 685.043 L962.402 685.043 L962.962 685.043 L963.521 685.043 L964.08 685.043 L964.639 685.043 L965.199 685.043 L965.758 685.043 L966.317 685.043 L966.876 685.043 L967.436 685.043 L967.995 685.043 L968.554 685.043 L969.113 685.043 L969.673 685.043 L970.232 685.043 L970.791 685.043 L971.35 685.043 L971.91 685.043 L972.469 685.043 L973.028 685.043 L973.587 685.043 L974.147 685.043 L974.706 685.043 L975.265 685.043 L975.824 685.043 L976.384 685.043 L976.943 685.043 L977.502 685.043 L978.061 685.043 L978.621 685.043 L979.18 685.043 L979.739 685.043 L980.298 685.043 L980.858 685.043 L981.417 685.043 L981.976 685.043 L982.535 685.043 L983.095 685.043 L983.654 685.043 L984.213 685.043 L984.772 685.043 L985.332 685.043 L985.891 685.043 L986.45 685.043 L987.009 685.043 L987.569 685.043 L988.128 685.043 L988.687 685.043 L989.246 685.043 L989.806 685.043 L990.365 685.043 L990.924 685.043 L991.483 685.043 L992.043 685.043 L992.602 685.043 L993.161 685.043 L993.72 685.043 L994.28 685.043 L994.839 685.043 L995.398 685.043 L995.957 685.043 L996.517 685.043 L997.076 685.043 L997.635 685.043 L998.194 685.043 L998.754 685.043 L999.313 685.043 L999.872 685.043 L1000.43 685.043 L1000.99 685.043 L1001.55 685.043 L1002.11 685.043 L1002.67 685.043 L1003.23 685.043 L1003.79 685.043 L1004.35 685.043 L1004.91 685.043 L1005.46 685.043 L1006.02 685.043 L1006.58 685.043 L1007.14 685.043 L1007.7 685.043 L1008.26 685.043 L1008.82 685.043 L1009.38 685.043 L1009.94 685.043 L1010.5 685.043 L1011.06 685.043 L1011.62 685.043 L1012.18 685.043 L1012.73 685.043 L1013.29 685.043 L1013.85 685.043 L1014.41 685.043 L1014.97 685.043 L1015.53 685.043 L1016.09 685.043 L1016.65 685.043 L1017.21 685.043 L1017.77 685.043 L1018.33 685.043 L1018.89 685.043 L1019.45 685.043 L1020.01 685.043 L1020.56 685.043 L1021.12 685.043 L1021.68 685.043 L1022.24 685.043 L1022.8 685.043 L1023.36 685.043 L1023.92 685.043 L1024.48 685.043 L1025.04 685.043 L1025.6 685.043 L1026.16 685.043 L1026.72 685.043 L1027.28 685.043 L1027.83 685.043 L1028.39 685.043 L1028.95 685.043 L1029.51 685.043 L1030.07 685.043 L1030.63 685.043 L1031.19 685.043 L1031.75 685.043 L1032.31 685.043 L1032.87 685.043 L1033.43 685.043 L1033.99 685.043 L1034.55 685.043 L1035.1 685.043 L1035.66 685.043 L1036.22 685.043 L1036.78 685.043 L1037.34 685.043 L1037.9 685.043 L1038.46 685.043 L1039.02 685.043 L1039.58 685.043 L1040.14 685.043 L1040.7 685.043 L1041.26 685.043 L1041.82 685.043 L1042.38 685.043 L1042.93 685.043 L1043.49 685.043 L1044.05 685.043 L1044.61 685.043 L1045.17 685.043 L1045.73 685.043 L1046.29 685.043 L1046.85 685.043 L1047.41 685.043 L1047.97 685.043 L1048.53 685.043 L1049.09 685.043 L1049.65 685.043 L1050.2 685.043 L1050.76 685.043 L1051.32 685.043 L1051.88 685.043 L1052.44 685.043 L1053 685.043 L1053.56 685.043 L1054.12 685.043 L1054.68 685.043 L1055.24 685.043 L1055.8 685.043 L1056.36 685.043 L1056.92 685.043 L1057.48 685.043 L1058.03 685.043 L1058.59 685.043 L1059.15 685.043 L1059.71 685.043 L1060.27 685.043 L1060.83 685.043 L1061.39 685.043 L1061.95 685.043 L1062.51 685.043 L1063.07 685.043 L1063.63 685.043 L1064.19 685.043 L1064.75 685.043 L1065.3 685.043 L1065.86 685.043 L1066.42 685.043 L1066.98 685.043 L1067.54 685.043 L1068.1 685.043 L1068.66 685.043 L1069.22 685.043 L1069.78 685.043 L1070.34 685.043 L1070.9 685.043 L1071.46 685.043 L1072.02 685.043 L1072.57 685.043 L1073.13 685.043 L1073.69 685.043 L1074.25 685.043 L1074.81 685.043 L1075.37 685.043 L1075.93 685.043 L1076.49 685.043 L1077.05 685.043 L1077.61 685.043 L1078.17 685.043 L1078.73 685.043 L1079.29 685.043 L1079.85 685.043 L1080.4 685.043 L1080.96 685.043 L1081.52 685.043 L1082.08 685.043 L1082.64 685.043 L1083.2 685.043 L1083.76 685.043 L1084.32 685.043 L1084.88 685.043 L1085.44 685.043 L1086 685.043 L1086.56 685.043 L1087.12 685.043 L1087.67 685.043 L1088.23 685.043 L1088.79 685.043 L1089.35 685.043 L1089.91 685.043 L1090.47 685.043 L1091.03 685.043 L1091.59 685.043 L1092.15 685.043 L1092.71 685.043 L1093.27 685.043 L1093.83 685.043 L1094.39 685.043 L1094.94 685.043 L1095.5 685.043 L1096.06 685.043 L1096.62 685.043 L1097.18 685.043 L1097.74 685.043 L1098.3 685.043 L1098.86 685.043 L1099.42 685.043 L1099.98 685.043 L1100.54 685.043 L1101.1 685.043 L1101.66 685.043 L1102.22 685.043 L1102.77 685.043 L1103.33 685.043 L1103.89 685.043 L1104.45 685.043 L1105.01 685.043 L1105.57 685.043 L1106.13 685.043 L1106.69 685.043 L1107.25 685.043 L1107.81 685.043 L1108.37 685.043 L1108.93 685.043 L1109.49 685.043 L1110.04 685.043 L1110.6 685.043 L1111.16 685.043 L1111.72 685.043 L1112.28 685.043 L1112.84 685.043 L1113.4 685.043 L1113.96 685.043 L1114.52 685.043 L1115.08 685.043 L1115.64 685.043 L1116.2 685.043 L1116.76 685.043 L1117.31 685.043 L1117.87 685.043 L1118.43 685.043 L1118.99 685.043 L1119.55 685.043 L1120.11 685.043 L1120.67 685.043 L1121.23 685.043 L1121.79 685.043 L1122.35 685.043 L1122.91 685.043 L1123.47 685.043 L1124.03 685.043 L1124.59 685.043 L1125.14 685.043 L1125.7 685.043 L1126.26 685.043 L1126.82 685.043 L1127.38 685.043 L1127.94 685.043 L1128.5 685.043 L1129.06 685.043 L1129.62 685.043 L1130.18 685.043 L1130.74 685.043 L1131.3 685.043 L1131.86 685.043 L1132.41 685.043 L1132.97 685.043 L1133.53 685.043 L1134.09 685.043 L1134.65 685.043 L1135.21 685.043 L1135.77 685.043 L1136.33 685.043 L1136.89 685.043 L1137.45 685.043 L1138.01 685.043 L1138.57 685.043 L1139.13 685.043 L1139.68 685.043 L1140.24 685.043 L1140.8 685.043 L1141.36 685.043 L1141.92 685.043 L1142.48 685.043 L1143.04 685.043 L1143.6 685.043 L1144.16 685.043 L1144.72 685.043 L1145.28 685.043 L1145.84 685.043 L1146.4 685.043 L1146.96 685.043 L1147.51 685.043 L1148.07 685.043 L1148.63 685.043 L1149.19 685.043 L1149.75 685.043 L1150.31 685.043 L1150.87 685.043 L1151.43 685.043 L1151.99 685.043 L1152.55 685.043 L1153.11 685.043 L1153.67 685.043 L1154.23 685.043 L1154.78 685.043 L1155.34 685.043 L1155.9 685.043 L1156.46 685.043 L1157.02 685.043 L1157.58 685.043 L1158.14 685.043 L1158.7 685.043 L1159.26 685.043 L1159.82 685.043 L1160.38 685.043 L1160.94 685.043 L1161.5 685.043 L1162.05 685.043 L1162.61 685.043 L1163.17 685.043 L1163.73 685.043 L1164.29 685.043 L1164.85 685.043 L1165.41 685.043 L1165.97 685.043 L1166.53 685.043 L1167.09 685.043 L1167.65 685.043 L1168.21 685.043 L1168.77 685.043 L1169.33 685.043 L1169.88 685.043 L1170.44 685.043 L1171 685.043 L1171.56 685.043 L1172.12 685.043 L1172.68 685.043 L1173.24 685.043 L1173.8 685.043 L1174.36 685.043 L1174.92 685.043 L1175.48 685.043 L1176.04 685.043 L1176.6 685.043 L1177.15 685.043 L1177.71 685.043 L1178.27 685.043 L1178.83 685.043 L1179.39 685.043 L1179.95 685.043 L1180.51 685.043 L1181.07 685.043 L1181.63 685.043 L1182.19 685.043 L1182.75 685.043 L1183.31 685.043 L1183.87 685.043 L1184.43 685.043 L1184.98 685.043 L1185.54 685.043 L1186.1 685.043 L1186.66 685.043 L1187.22 685.043 L1187.78 685.043 L1188.34 685.043 L1188.9 685.043 L1189.46 685.043 L1190.02 685.043 L1190.58 685.043 L1191.14 685.043 L1191.7 685.043 L1192.25 685.043 L1192.81 685.043 L1193.37 685.043 L1193.93 685.043 L1194.49 685.043 L1195.05 685.043 L1195.61 685.043 L1196.17 685.043 L1196.73 685.043 L1197.29 685.043 L1197.85 685.043 L1198.41 685.043 L1198.97 685.043 L1199.52 685.043 L1200.08 685.043 L1200.64 685.043 L1201.2 685.043 L1201.76 685.043 L1202.32 685.043 L1202.88 685.043 L1203.44 685.043 L1204 685.043 L1204.56 685.043 L1205.12 685.043 L1205.68 685.043 L1206.24 685.043 L1206.8 685.043 L1207.35 685.043 L1207.91 685.043 L1208.47 685.043 L1209.03 685.043 L1209.59 685.043 L1210.15 685.043 L1210.71 685.043 L1211.27 685.043 L1211.83 685.043 L1212.39 685.043 L1212.95 685.043 L1213.51 685.043 L1214.07 685.043 L1214.62 685.043 L1215.18 685.043 L1215.74 685.043 L1216.3 685.043 L1216.86 685.043 L1217.42 685.043 L1217.98 685.043 L1218.54 685.043 L1219.1 685.043 L1219.66 685.043 L1220.22 685.043 L1220.78 685.043 L1221.34 685.043 L1221.89 685.043 L1222.45 685.043 L1223.01 685.043 L1223.57 685.043 L1224.13 685.043 L1224.69 685.043 L1225.25 685.043 L1225.81 685.043 L1226.37 685.043 L1226.93 685.043 L1227.49 685.043 L1228.05 685.043 L1228.61 685.043 L1229.17 685.043 L1229.72 685.043 L1230.28 685.043 L1230.84 685.043 L1231.4 685.043 L1231.96 685.043 L1232.52 685.043 L1233.08 685.043 L1233.64 685.043 L1234.2 685.043 L1234.76 685.043 L1235.32 685.043 L1235.88 685.043 L1236.44 685.043 L1236.99 685.043 L1237.55 685.043 L1238.11 685.043 L1238.67 685.043 L1239.23 685.043 L1239.79 685.043 L1240.35 685.043 L1240.91 685.043 L1241.47 685.043 L1242.03 685.043 L1242.59 685.043 L1243.15 685.043 L1243.71 685.043 L1244.26 685.043 L1244.82 685.043 L1245.38 685.043 L1245.94 685.043 L1246.5 685.043 L1247.06 685.043 L1247.62 685.043 L1248.18 685.043 L1248.74 685.043 L1249.3 685.043 L1249.86 685.043 L1250.42 685.043 L1250.98 685.043 L1251.54 685.043 L1252.09 685.043 L1252.65 685.043 L1253.21 685.043 L1253.77 685.043 L1254.33 685.043 L1254.89 685.043 L1255.45 685.043 L1256.01 685.043 L1256.57 685.043 L1257.13 685.043 L1257.69 685.043 L1258.25 685.043 L1258.81 685.043 L1259.36 685.043 L1259.92 685.043 L1260.48 685.043 L1261.04 685.043 L1261.6 685.043 L1262.16 685.043 L1262.72 685.043 L1263.28 685.043 L1263.84 685.043 L1264.4 685.043 L1264.96 685.043 L1265.52 685.043 L1266.08 685.043 L1266.63 685.043 L1267.19 685.043 L1267.75 685.043 L1268.31 685.043 L1268.87 685.043 L1269.43 685.043 L1269.99 685.043 L1270.55 685.043 L1271.11 685.043 L1271.67 685.043 L1272.23 685.043 L1272.79 685.043 L1273.35 685.043 L1273.91 685.043 L1274.46 685.043 L1275.02 685.043 L1275.58 685.043 L1276.14 685.043 L1276.7 685.043 L1277.26 685.043 L1277.82 685.043 L1278.38 685.043 L1278.94 685.043 L1279.5 685.043 L1280.06 685.043 L1280.62 685.043 L1281.18 685.043 L1281.73 685.043 L1282.29 685.043 L1282.85 685.043 L1283.41 685.043 L1283.97 685.043 L1284.53 685.043 L1285.09 685.043 L1285.65 685.043 L1286.21 685.043 L1286.77 685.043 L1287.33 685.043 L1287.89 685.043 L1288.45 685.043 L1289 685.043 L1289.56 685.043 L1290.12 685.043 L1290.68 685.043 L1291.24 685.043 L1291.8 685.043 L1292.36 685.043 L1292.92 685.043 L1293.48 685.043 L1294.04 685.043 L1294.6 685.043 L1295.16 685.043 L1295.72 685.043 L1296.28 685.043 L1296.83 685.043 L1297.39 685.043 L1297.95 685.043 L1298.51 685.043 L1299.07 685.043 L1299.63 685.043 L1300.19 685.043 L1300.75 685.043 L1301.31 685.043 L1301.87 685.043 L1302.43 685.043 L1302.99 685.043 L1303.55 685.043 L1304.1 685.043 L1304.66 685.043 L1305.22 685.043 L1305.78 685.043 L1306.34 685.043 L1306.9 685.043 L1307.46 685.043 L1308.02 685.043 L1308.58 685.043 L1309.14 685.043 L1309.7 685.043 L1310.26 685.043 L1310.82 685.043 L1311.38 685.043 L1311.93 685.043 L1312.49 685.043 L1313.05 685.043 L1313.61 685.043 L1314.17 685.043 L1314.73 685.043 L1315.29 685.043 L1315.85 685.043 L1316.41 685.043 L1316.97 685.043 L1317.53 685.043 L1318.09 685.043 L1318.65 685.043 L1319.2 685.043 L1319.76 685.043 L1320.32 685.043 L1320.88 685.043 L1321.44 685.043 L1322 685.043 L1322.56 685.043 L1323.12 685.043 L1323.68 685.043 L1324.24 685.043 L1324.8 685.043 L1325.36 685.043 L1325.92 685.043 L1326.47 685.043 L1327.03 685.043 L1327.59 685.043 L1328.15 685.043 L1328.71 685.043 L1329.27 685.043 L1329.83 685.043 L1330.39 685.043 L1330.95 685.043 L1331.51 685.043 L1332.07 685.043 L1332.63 685.043 L1333.19 685.043 L1333.75 685.043 L1334.3 685.043 L1334.86 685.043 L1335.42 685.043 L1335.98 685.043 L1336.54 685.043 L1337.1 685.043 L1337.66 685.043 L1338.22 685.043 L1338.78 685.043 L1339.34 685.043 L1339.9 685.043 L1340.46 685.043 L1341.02 685.043 L1341.57 685.043 L1342.13 685.043 L1342.69 685.043 L1343.25 685.043 L1343.81 685.043 L1344.37 685.043 L1344.93 685.043 L1345.49 685.043 L1346.05 685.043 L1346.61 685.043 L1347.17 685.043 L1347.73 685.043 L1348.29 685.043 L1348.84 685.043 L1349.4 685.043 L1349.96 685.043 L1350.52 685.043 L1351.08 685.043 L1351.64 685.043 L1352.2 685.043 L1352.76 685.043 L1353.32 685.043 L1353.88 685.043 L1354.44 685.043 L1355 685.043 L1355.56 685.043 L1356.12 685.043 L1356.67 685.043 L1357.23 685.043 L1357.79 685.043 L1358.35 685.043 L1358.91 685.043 L1359.47 685.043 L1360.03 685.043 L1360.59 685.043 L1361.15 685.043 L1361.71 685.043 L1362.27 685.043 L1362.83 685.043 L1363.39 685.043 L1363.94 685.043 L1364.5 685.043 L1365.06 685.043 L1365.62 685.043 L1366.18 685.043 L1366.74 685.043 L1367.3 685.043 L1367.86 685.043 L1368.42 685.043 L1368.98 685.043 L1369.54 685.043 L1370.1 685.043 L1370.66 685.043 L1371.21 685.043 L1371.77 685.043 L1372.33 685.043 L1372.89 685.043 L1373.45 685.043 L1374.01 685.043 L1374.57 685.043 L1375.13 685.043 L1375.69 685.043 L1376.25 685.043 L1376.81 685.043 L1377.37 685.043 L1377.93 685.043 L1378.49 685.043 L1379.04 685.043 L1379.6 685.043 L1380.16 685.043 L1380.72 685.043 L1381.28 685.043 L1381.84 685.043 L1382.4 685.043 L1382.96 685.043 L1383.52 685.043 L1384.08 685.043 L1384.64 685.043 L1385.2 685.043 L1385.76 685.043 L1386.31 685.043 L1386.87 685.043 L1387.43 685.043 L1387.99 685.043 L1388.55 685.043 L1389.11 685.043 L1389.67 685.043 L1390.23 685.043 L1390.79 685.043 L1391.35 685.043 L1391.91 685.043 L1392.47 685.043 L1393.03 685.043 L1393.58 685.043 L1394.14 685.043 L1394.7 685.043 L1395.26 685.043 L1395.82 685.043 L1396.38 685.043 L1396.94 685.043 L1397.5 685.043 L1398.06 685.043 L1398.62 685.043 L1399.18 685.043 L1399.74 685.043 L1400.3 685.043 L1400.86 685.043 L1401.41 685.043 L1401.97 685.043 L1402.53 685.043 L1403.09 685.043 L1403.65 685.043 L1404.21 685.043 L1404.77 685.043 L1405.33 685.043 L1405.89 685.043 L1406.45 685.043 L1407.01 685.043 L1407.57 685.043 L1408.13 685.043 L1408.68 685.043 L1409.24 685.043 L1409.8 685.043 L1410.36 685.043 L1410.92 685.043 L1411.48 685.043 L1412.04 685.043 L1412.6 685.043 L1413.16 685.043 L1413.72 685.043 L1414.28 685.043 L1414.84 685.043 L1415.4 685.043 L1415.95 685.043 L1416.51 685.043 L1417.07 685.043 L1417.63 685.043 L1418.19 685.043 L1418.75 685.043 L1419.31 685.043 L1419.87 685.043 L1420.43 685.043 L1420.99 685.043 L1421.55 685.043 L1422.11 685.043 L1422.67 685.043 L1423.23 685.043 L1423.78 685.043 L1424.34 685.043 L1424.9 685.043 L1425.46 685.043 L1426.02 685.043 L1426.58 685.043 L1427.14 685.043 L1427.7 685.043 L1428.26 685.043 L1428.82 685.043 L1429.38 685.043 L1429.94 685.043 L1430.5 685.043 L1431.05 685.043 L1431.61 685.043 L1432.17 685.043 L1432.73 685.043 L1433.29 685.043 L1433.85 685.043 L1434.41 685.043 L1434.97 685.043 L1435.53 685.043 L1436.09 685.043 L1436.65 685.043 L1437.21 685.043 L1437.77 685.043 L1438.33 685.043 L1438.88 685.043 L1439.44 685.043 L1440 685.043 L1440.56 685.043 L1441.12 685.043 L1441.68 685.043 L1442.24 685.043 L1442.8 685.043 L1443.36 685.043 L1443.92 685.043 L1444.48 685.043 L1445.04 685.043 L1445.6 685.043 L1446.15 685.043 L1446.71 685.043 L1447.27 685.043 L1447.83 685.043 L1448.39 685.043 L1448.95 685.043 L1449.51 685.043 L1450.07 685.043 L1450.63 685.043 L1451.19 685.043 L1451.75 685.043 L1452.31 685.043 L1452.87 685.043 L1453.42 685.043 L1453.98 685.043 L1454.54 685.043 L1455.1 685.043 L1455.66 685.043 L1456.22 685.043 L1456.78 685.043 L1457.34 685.043 L1457.9 685.043 L1458.46 685.043 L1459.02 685.043 L1459.58 685.043 L1460.14 685.043 L1460.7 685.043 L1461.25 685.043 L1461.81 685.043 L1462.37 685.043 L1462.93 685.043 L1463.49 685.043 L1464.05 685.043 L1464.61 685.043 L1465.17 685.043 L1465.73 685.043 L1466.29 685.043 L1466.85 685.043 L1467.41 685.043 L1467.97 685.043 L1468.52 685.043 L1469.08 685.043 L1469.64 685.043 L1470.2 685.043 L1470.76 685.043 L1471.32 685.043 L1471.88 685.043 L1472.44 685.043 L1473 685.043 L1473.56 685.043 L1474.12 685.043 L1474.68 685.043 L1475.24 685.043 L1475.79 685.043 L1476.35 685.043 L1476.91 685.043 L1477.47 685.043 L1478.03 685.043 L1478.59 685.043 L1479.15 685.043 L1479.71 685.043 L1480.27 685.043 L1480.83 685.043 L1481.39 685.043 L1481.95 685.043 L1482.51 685.043 L1483.07 685.043 L1483.62 685.043 L1484.18 685.043 L1484.74 685.043 L1485.3 685.043 L1485.86 685.043 L1486.42 685.043 L1486.98 685.043 L1487.54 685.043 L1488.1 685.043 L1488.66 685.043 L1489.22 685.043 L1489.78 685.043 L1490.34 685.043 L1490.89 685.043 L1491.45 685.043 L1492.01 685.043 L1492.57 685.043 L1493.13 685.043 L1493.69 685.043 L1494.25 685.043 L1494.81 685.043 L1495.37 685.043 L1495.93 685.043 L1496.49 685.043 L1497.05 685.043 L1497.61 685.043 L1498.16 685.043 L1498.72 685.043 L1499.28 685.043 L1499.84 685.043 L1500.4 685.043 L1500.96 685.043 L1501.52 685.043 L1502.08 685.043 L1502.64 685.043 L1503.2 685.043 L1503.76 685.043 L1504.32 685.043 L1504.88 685.043 L1505.44 685.043 L1505.99 685.043 L1506.55 685.043 L1507.11 685.043 L1507.67 685.043 L1508.23 685.043 L1508.79 685.043 L1509.35 685.043 L1509.91 685.043 L1510.47 685.043 L1511.03 685.043 L1511.59 685.043 L1512.15 685.043 L1512.71 685.043 L1513.26 685.043 L1513.82 685.043 L1514.38 685.043 L1514.94 685.043 L1515.5 685.043 L1516.06 685.043 L1516.62 685.043 L1517.18 685.043 L1517.74 685.043 L1518.3 685.043 L1518.86 685.043 L1519.42 685.043 L1519.98 685.043 L1520.53 685.043 L1521.09 685.043 L1521.65 685.043 L1522.21 685.043 L1522.77 685.043 L1523.33 685.043 L1523.89 685.043 L1524.45 685.043 L1525.01 685.043 L1525.57 685.043 L1526.13 685.043 L1526.69 685.043 L1527.25 685.043 L1527.81 685.043 L1528.36 685.043 L1528.92 685.043 L1529.48 685.043 L1530.04 685.043 L1530.6 685.043 L1531.16 685.043 L1531.72 685.043 L1532.28 685.043 L1532.84 685.043 L1533.4 685.043 L1533.96 685.043 L1534.52 685.043 L1535.08 685.043 L1535.63 685.043 L1536.19 685.043 L1536.75 685.043 L1537.31 685.043 L1537.87 685.043 L1538.43 685.043 L1538.99 685.043 L1539.55 685.043 L1540.11 685.043 L1540.67 685.043 L1541.23 685.043 L1541.79 685.043 L1542.35 685.043 L1542.9 685.043 L1543.46 685.043 L1544.02 685.043 L1544.58 685.043 L1545.14 685.043 L1545.7 685.043 L1546.26 685.043 L1546.82 685.043 L1547.38 685.043 L1547.94 685.043 L1548.5 685.043 L1549.06 685.043 L1549.62 685.043 L1550.18 685.043 L1550.73 685.043 L1551.29 685.043 L1551.85 685.043 L1552.41 685.043 L1552.97 685.043 L1553.53 685.043 L1554.09 685.043 L1554.65 685.043 L1555.21 685.043 L1555.77 685.043 L1556.33 685.043 L1556.89 685.043 L1557.45 685.043 L1558 685.043 L1558.56 685.043 L1559.12 685.043 L1559.68 685.043 L1560.24 685.043 L1560.8 685.043 L1561.36 685.043 L1561.92 685.043 L1562.48 685.043 L1563.04 685.043 L1563.6 685.043 L1564.16 685.043 L1564.72 685.043 L1565.28 685.043 L1565.83 685.043 L1566.39 685.043 L1566.95 685.043 L1567.51 685.043 L1568.07 685.043 L1568.63 685.043 L1569.19 685.043 L1569.75 685.043 L1570.31 685.043 L1570.87 685.043 L1571.43 685.043 L1571.99 685.043 L1572.55 685.043 L1573.1 685.043 L1573.66 685.043 L1574.22 685.043 L1574.78 685.043 L1575.34 685.043 L1575.9 685.043 L1576.46 685.043 L1577.02 685.043 L1577.58 685.043 L1578.14 685.043 L1578.7 685.043 L1579.26 685.043 L1579.82 685.043 L1580.37 685.043 L1580.93 685.043 L1581.49 685.043 L1582.05 685.043 L1582.61 685.043 L1583.17 685.043 L1583.73 685.043 L1584.29 685.043 L1584.85 685.043 L1585.41 685.043 L1585.97 685.043 L1586.53 685.043 L1587.09 685.043 L1587.65 685.043 L1588.2 685.043 L1588.76 685.043 L1589.32 685.043 L1589.88 685.043 L1590.44 685.043 L1591 685.043 L1591.56 685.043 L1592.12 685.043 L1592.68 685.043 L1593.24 685.043 L1593.8 685.043 L1594.36 685.043 L1594.92 685.043 L1595.47 685.043 L1596.03 685.043 L1596.59 685.043 L1597.15 685.043 L1597.71 685.043 L1598.27 685.043 L1598.83 685.043 L1599.39 685.043 L1599.95 685.043 L1600.51 685.043 L1601.07 685.043 L1601.63 685.043 L1602.19 685.043 L1602.74 685.043 L1603.3 685.043 L1603.86 685.043 L1604.42 685.043 L1604.98 685.043 L1605.54 685.043 L1606.1 685.043 L1606.66 685.043 L1607.22 685.043 L1607.78 685.043 L1608.34 685.043 L1608.9 685.043 L1609.46 685.043 L1610.02 685.043 L1610.57 685.043 L1611.13 685.043 L1611.69 685.043 L1612.25 685.043 L1612.81 685.043 L1613.37 685.043 L1613.93 685.043 L1614.49 685.043 L1615.05 685.043 L1615.61 685.043 L1616.17 685.043 L1616.73 685.043 L1617.29 685.043 L1617.84 685.043 L1618.4 685.043 L1618.96 685.043 L1619.52 685.043 L1620.08 685.043 L1620.64 685.043 L1621.2 685.043 L1621.76 685.043 L1622.32 685.043 L1622.88 685.043 L1623.44 685.043 L1624 685.043 L1624.56 685.043 L1625.11 685.043 L1625.67 685.043 L1626.23 685.043 L1626.79 685.043 L1627.35 685.043 L1627.91 685.043 L1628.47 685.043 L1629.03 685.043 L1629.59 685.043 L1630.15 685.043 L1630.71 685.043 L1631.27 685.043 L1631.83 685.043 L1632.39 685.043 L1632.94 685.043 L1633.5 685.043 L1634.06 685.043 L1634.62 685.043 L1635.18 685.043 L1635.74 685.043 L1636.3 685.043 L1636.86 685.043 L1637.42 685.043 L1637.98 685.043 L1638.54 685.043 L1639.1 685.043 L1639.66 685.043 L1640.21 685.043 L1640.77 685.043 L1641.33 685.043 L1641.89 685.043 L1642.45 685.043 L1643.01 685.043 L1643.57 685.043 L1644.13 685.043 L1644.69 685.043 L1645.25 685.043 L1645.81 685.043 L1646.37 685.043 L1646.93 685.043 L1647.48 685.043 L1648.04 685.043 L1648.6 685.043 L1649.16 685.043 L1649.72 685.043 L1650.28 685.043 L1650.84 685.043 L1651.4 685.043 L1651.96 685.043 L1652.52 685.043 L1653.08 685.043 L1653.64 685.043 L1654.2 685.043 L1654.76 685.043 L1655.31 685.043 L1655.87 685.043 L1656.43 685.043 L1656.99 685.043 L1657.55 685.043 L1658.11 685.043 L1658.67 685.043 L1659.23 685.043 L1659.79 685.043 L1660.35 685.043 L1660.91 685.043 L1661.47 685.043 L1662.03 685.043 L1662.58 685.043 L1663.14 685.043 L1663.7 685.043 L1664.26 685.043 L1664.82 685.043 L1665.38 685.043 L1665.94 685.043 L1666.5 685.043 L1667.06 685.043 L1667.62 685.043 L1668.18 685.043 L1668.74 685.043 L1669.3 685.043 L1669.85 685.043 L1670.41 685.043 L1670.97 685.043 L1671.53 685.043 L1672.09 685.043 L1672.65 685.043 L1673.21 685.043 L1673.77 685.043 L1674.33 685.043 L1674.89 685.043 L1675.45 685.043 L1676.01 685.043 L1676.57 685.043 L1677.13 685.043 L1677.68 685.043 L1678.24 685.043 L1678.8 685.043 L1679.36 685.043 L1679.92 685.043 L1680.48 685.043 L1681.04 685.043 L1681.6 685.043 L1682.16 685.043 L1682.72 685.043 L1683.28 685.043 L1683.84 685.043 L1684.4 685.043 L1684.95 685.043 L1685.51 685.043 L1686.07 685.043 L1686.63 685.043 L1687.19 685.043 L1687.75 685.043 L1688.31 685.043 L1688.87 685.043 L1689.43 685.043 L1689.99 685.043 L1690.55 685.043 L1691.11 685.043 L1691.67 685.043 L1692.23 685.043 L1692.78 685.043 L1693.34 685.043 L1693.9 685.043 L1694.46 685.043 L1695.02 685.043 L1695.58 685.043 L1696.14 685.043 L1696.7 685.043 L1697.26 685.043 L1697.82 685.043 L1698.38 685.043 L1698.94 685.043 L1699.5 685.043 L1700.05 685.043 L1700.61 685.043 L1701.17 685.043 L1701.73 685.043 L1702.29 685.043 L1702.85 685.043 L1703.41 685.043 L1703.97 685.043 L1704.53 685.043 L1705.09 685.043 L1705.65 685.043 L1706.21 685.043 L1706.77 685.043 L1707.32 685.043 L1707.88 685.043 L1708.44 685.043 L1709 685.043 L1709.56 685.043 L1710.12 685.043 L1710.68 685.043 L1711.24 685.043 L1711.8 685.043 L1712.36 685.043 L1712.92 685.043 L1713.48 685.043 L1714.04 685.043 L1714.6 685.043 L1715.15 685.043 L1715.71 685.043 L1716.27 685.043 L1716.83 685.043 L1717.39 685.043 L1717.95 685.043 L1718.51 685.043 L1719.07 685.043 L1719.63 685.043 L1720.19 685.043 L1720.75 685.043 L1721.31 685.043 L1721.87 685.043 L1722.42 685.043 L1722.98 685.043 L1723.54 685.043 L1724.1 685.043 L1724.66 685.043 L1725.22 685.043 L1725.78 685.043 L1726.34 685.043 L1726.9 685.043 L1727.46 685.043 L1728.02 685.043 L1728.58 685.043 L1729.14 685.043 L1729.69 685.043 L1730.25 685.043 L1730.81 685.043 L1731.37 685.043 L1731.93 685.043 L1732.49 685.043 L1733.05 685.043 L1733.61 685.043 L1734.17 685.043 L1734.73 685.043 L1735.29 685.043 L1735.85 685.043 L1736.41 685.043 L1736.97 685.043 L1737.52 685.043 L1738.08 685.043 L1738.64 685.043 L1739.2 685.043 L1739.76 685.043 L1740.32 685.043 L1740.88 685.043 L1741.44 685.043 L1742 685.043 L1742.56 685.043 L1743.12 685.043 L1743.68 685.043 L1744.24 685.043 L1744.79 685.043 L1745.35 685.043 L1745.91 685.043 L1746.47 685.043 L1747.03 685.043 L1747.59 685.043 L1748.15 685.043 L1748.71 685.043 L1749.27 685.043 L1749.83 685.043 L1750.39 685.043 L1750.95 685.043 L1751.51 685.043 L1752.06 685.043 L1752.62 685.043 L1753.18 685.043 L1753.74 685.043 L1754.3 685.043 L1754.86 685.043 L1755.42 685.043 L1755.98 685.043 L1756.54 685.043 L1757.1 685.043 L1757.66 685.043 L1758.22 685.043 L1758.78 685.043 L1759.34 685.043 L1759.89 685.043 L1760.45 685.043 L1761.01 685.043 L1761.57 685.043 L1762.13 685.043 L1762.69 685.043 L1763.25 685.043 L1763.81 685.043 L1764.37 685.043 L1764.93 685.043 L1765.49 685.043 L1766.05 685.043 L1766.61 685.043 L1767.16 685.043 L1767.72 685.043 L1768.28 685.043 L1768.84 685.043 L1769.4 685.043 L1769.96 685.043 L1770.52 685.043 L1771.08 685.043 L1771.64 685.043 L1772.2 685.043 L1772.76 685.043 L1773.32 685.043 L1773.88 685.043 L1774.43 685.043 L1774.99 685.043 L1775.55 685.043 L1776.11 685.043 L1776.67 685.043 L1777.23 685.043 L1777.79 685.043 L1778.35 685.043 L1778.91 685.043 L1779.47 685.043 L1780.03 685.043 L1780.59 685.043 L1781.15 685.043 L1781.71 685.043 L1782.26 685.043 L1782.82 685.043 L1783.38 685.043 L1783.94 685.043 L1784.5 685.043 L1785.06 685.043 L1785.62 685.043 L1786.18 685.043 L1786.74 685.043 L1787.3 685.043 L1787.86 685.043 L1788.42 685.043 L1788.98 685.043 L1789.53 685.043 L1790.09 685.043 L1790.65 685.043 L1791.21 685.043 L1791.77 685.043 L1792.33 685.043 L1792.89 685.043 L1793.45 685.043 L1794.01 685.043 L1794.57 685.043 L1795.13 685.043 L1795.69 685.043 L1796.25 685.043 L1796.8 685.043 L1797.36 685.043 L1797.92 685.043 L1798.48 685.043 L1799.04 685.043 L1799.6 685.043 L1800.16 685.043 L1800.72 685.043 L1801.28 685.043 L1801.84 685.043 L1802.4 685.043 L1802.96 685.043 L1803.52 685.043 L1804.08 685.043 L1804.63 685.043 L1805.19 685.043 L1805.75 685.043 L1806.31 685.043 L1806.87 685.043 L1807.43 685.043 L1807.99 685.043 L1808.55 685.043 L1809.11 685.043 L1809.67 685.043 L1810.23 685.043 L1810.79 685.043 L1811.35 685.043 L1811.9 685.043 L1812.46 685.043 L1813.02 685.043 L1813.58 685.043 L1814.14 685.043 L1814.7 685.043 L1815.26 685.043 L1815.82 685.043 L1816.38 685.043 L1816.94 685.043 L1817.5 685.043 L1818.06 685.043 L1818.62 685.043 L1819.18 685.043 L1819.73 685.043 L1820.29 685.043 L1820.85 685.043 L1821.41 685.043 L1821.97 685.043 L1822.53 685.043 L1823.09 685.043 L1823.65 685.043 L1824.21 685.043 L1824.77 685.043 L1825.33 685.043 L1825.89 685.043 L1826.45 685.043 L1827 685.043 L1827.56 685.043 L1828.12 685.043 L1828.68 685.043 L1829.24 685.043 L1829.8 685.043 L1830.36 685.043 L1830.92 685.043 L1831.48 685.043 L1832.04 685.043 L1832.6 685.043 L1833.16 685.043 L1833.72 685.043 L1834.27 685.043 L1834.83 685.043 L1835.39 685.043 L1835.95 685.043 L1836.51 685.043 L1837.07 685.043 L1837.63 685.043 L1838.19 685.043 L1838.19 683.597 L1837.63 683.597 L1837.07 683.597 L1836.51 683.597 L1835.95 683.597 L1835.39 683.597 L1834.83 683.597 L1834.27 683.597 L1833.72 683.597 L1833.16 683.597 L1832.6 683.597 L1832.04 683.597 L1831.48 683.597 L1830.92 683.597 L1830.36 683.597 L1829.8 683.597 L1829.24 683.597 L1828.68 683.597 L1828.12 683.597 L1827.56 683.597 L1827 683.597 L1826.45 683.597 L1825.89 683.597 L1825.33 683.597 L1824.77 683.597 L1824.21 683.597 L1823.65 683.597 L1823.09 683.597 L1822.53 683.597 L1821.97 683.597 L1821.41 683.597 L1820.85 683.597 L1820.29 683.597 L1819.73 683.597 L1819.18 683.597 L1818.62 683.597 L1818.06 683.597 L1817.5 683.597 L1816.94 683.597 L1816.38 683.597 L1815.82 683.597 L1815.26 683.597 L1814.7 683.597 L1814.14 683.597 L1813.58 683.597 L1813.02 683.597 L1812.46 683.597 L1811.9 683.597 L1811.35 683.597 L1810.79 683.597 L1810.23 683.597 L1809.67 683.597 L1809.11 683.597 L1808.55 683.597 L1807.99 683.597 L1807.43 683.597 L1806.87 683.597 L1806.31 683.597 L1805.75 683.597 L1805.19 683.597 L1804.63 683.597 L1804.08 683.597 L1803.52 683.597 L1802.96 683.597 L1802.4 683.597 L1801.84 683.597 L1801.28 683.597 L1800.72 683.597 L1800.16 683.597 L1799.6 683.597 L1799.04 683.597 L1798.48 683.597 L1797.92 683.597 L1797.36 683.597 L1796.8 683.597 L1796.25 683.597 L1795.69 683.597 L1795.13 683.597 L1794.57 683.597 L1794.01 683.597 L1793.45 683.597 L1792.89 683.597 L1792.33 683.597 L1791.77 683.597 L1791.21 683.597 L1790.65 683.597 L1790.09 683.597 L1789.53 683.597 L1788.98 683.597 L1788.42 683.597 L1787.86 683.597 L1787.3 683.597 L1786.74 683.597 L1786.18 683.597 L1785.62 683.597 L1785.06 683.597 L1784.5 683.597 L1783.94 683.597 L1783.38 683.597 L1782.82 683.597 L1782.26 683.597 L1781.71 683.597 L1781.15 683.597 L1780.59 683.597 L1780.03 683.597 L1779.47 683.597 L1778.91 683.597 L1778.35 683.597 L1777.79 683.597 L1777.23 683.597 L1776.67 683.597 L1776.11 683.597 L1775.55 683.597 L1774.99 683.597 L1774.43 683.597 L1773.88 683.597 L1773.32 683.597 L1772.76 683.597 L1772.2 683.597 L1771.64 683.597 L1771.08 683.597 L1770.52 683.597 L1769.96 683.597 L1769.4 683.597 L1768.84 683.597 L1768.28 683.597 L1767.72 683.597 L1767.16 683.597 L1766.61 683.597 L1766.05 683.597 L1765.49 683.597 L1764.93 683.597 L1764.37 683.597 L1763.81 683.597 L1763.25 683.597 L1762.69 683.597 L1762.13 683.597 L1761.57 683.597 L1761.01 683.597 L1760.45 683.597 L1759.89 683.597 L1759.34 683.597 L1758.78 683.597 L1758.22 683.597 L1757.66 683.597 L1757.1 683.597 L1756.54 683.597 L1755.98 683.597 L1755.42 683.597 L1754.86 683.597 L1754.3 683.597 L1753.74 683.597 L1753.18 683.597 L1752.62 683.597 L1752.06 683.597 L1751.51 683.597 L1750.95 683.597 L1750.39 683.597 L1749.83 683.597 L1749.27 683.597 L1748.71 683.597 L1748.15 683.597 L1747.59 683.597 L1747.03 683.597 L1746.47 683.597 L1745.91 683.597 L1745.35 683.597 L1744.79 683.597 L1744.24 683.597 L1743.68 683.597 L1743.12 683.597 L1742.56 683.597 L1742 683.597 L1741.44 683.597 L1740.88 683.597 L1740.32 683.597 L1739.76 683.597 L1739.2 683.597 L1738.64 683.597 L1738.08 683.597 L1737.52 683.597 L1736.97 683.597 L1736.41 683.597 L1735.85 683.597 L1735.29 683.597 L1734.73 683.597 L1734.17 683.597 L1733.61 683.597 L1733.05 683.597 L1732.49 683.597 L1731.93 683.597 L1731.37 683.597 L1730.81 683.597 L1730.25 683.597 L1729.69 683.597 L1729.14 683.597 L1728.58 683.597 L1728.02 683.597 L1727.46 683.597 L1726.9 683.597 L1726.34 683.597 L1725.78 683.597 L1725.22 683.597 L1724.66 683.597 L1724.1 683.597 L1723.54 683.597 L1722.98 683.597 L1722.42 683.597 L1721.87 683.597 L1721.31 683.597 L1720.75 683.597 L1720.19 683.597 L1719.63 683.597 L1719.07 683.597 L1718.51 683.597 L1717.95 683.597 L1717.39 683.597 L1716.83 683.597 L1716.27 683.597 L1715.71 683.597 L1715.15 683.597 L1714.6 683.597 L1714.04 683.597 L1713.48 683.597 L1712.92 683.597 L1712.36 683.597 L1711.8 683.597 L1711.24 683.597 L1710.68 683.597 L1710.12 683.597 L1709.56 683.597 L1709 683.597 L1708.44 683.597 L1707.88 683.597 L1707.32 683.597 L1706.77 683.597 L1706.21 683.597 L1705.65 683.597 L1705.09 683.597 L1704.53 683.597 L1703.97 683.597 L1703.41 683.597 L1702.85 683.597 L1702.29 683.597 L1701.73 683.597 L1701.17 683.597 L1700.61 683.597 L1700.05 683.597 L1699.5 683.597 L1698.94 683.597 L1698.38 683.597 L1697.82 683.597 L1697.26 683.597 L1696.7 683.597 L1696.14 683.597 L1695.58 683.597 L1695.02 683.597 L1694.46 683.597 L1693.9 683.597 L1693.34 683.597 L1692.78 683.597 L1692.23 683.597 L1691.67 683.597 L1691.11 683.597 L1690.55 683.597 L1689.99 683.597 L1689.43 683.597 L1688.87 683.597 L1688.31 683.597 L1687.75 683.597 L1687.19 683.597 L1686.63 683.597 L1686.07 683.597 L1685.51 683.597 L1684.95 683.597 L1684.4 683.597 L1683.84 683.597 L1683.28 683.597 L1682.72 683.597 L1682.16 683.597 L1681.6 683.597 L1681.04 683.597 L1680.48 683.597 L1679.92 683.597 L1679.36 683.597 L1678.8 683.597 L1678.24 683.597 L1677.68 683.597 L1677.13 683.597 L1676.57 683.597 L1676.01 683.597 L1675.45 683.597 L1674.89 683.597 L1674.33 683.597 L1673.77 683.597 L1673.21 683.597 L1672.65 683.597 L1672.09 683.597 L1671.53 683.597 L1670.97 683.597 L1670.41 683.597 L1669.85 683.597 L1669.3 683.597 L1668.74 683.597 L1668.18 683.597 L1667.62 683.597 L1667.06 683.597 L1666.5 683.597 L1665.94 683.597 L1665.38 683.597 L1664.82 683.597 L1664.26 683.597 L1663.7 683.597 L1663.14 683.597 L1662.58 683.597 L1662.03 683.597 L1661.47 683.597 L1660.91 683.597 L1660.35 683.597 L1659.79 683.597 L1659.23 683.597 L1658.67 683.597 L1658.11 683.597 L1657.55 683.597 L1656.99 683.597 L1656.43 683.597 L1655.87 683.597 L1655.31 683.597 L1654.76 683.597 L1654.2 683.597 L1653.64 683.597 L1653.08 683.597 L1652.52 683.597 L1651.96 683.597 L1651.4 683.597 L1650.84 683.597 L1650.28 683.597 L1649.72 683.597 L1649.16 683.597 L1648.6 683.597 L1648.04 683.597 L1647.48 683.597 L1646.93 683.597 L1646.37 683.597 L1645.81 683.597 L1645.25 683.597 L1644.69 683.597 L1644.13 683.597 L1643.57 683.597 L1643.01 683.597 L1642.45 683.597 L1641.89 683.597 L1641.33 683.597 L1640.77 683.597 L1640.21 683.597 L1639.66 683.597 L1639.1 683.597 L1638.54 683.597 L1637.98 683.597 L1637.42 683.597 L1636.86 683.597 L1636.3 683.597 L1635.74 683.597 L1635.18 683.597 L1634.62 683.597 L1634.06 683.597 L1633.5 683.597 L1632.94 683.597 L1632.39 683.597 L1631.83 683.597 L1631.27 683.597 L1630.71 683.597 L1630.15 683.597 L1629.59 683.597 L1629.03 683.597 L1628.47 683.597 L1627.91 683.597 L1627.35 683.597 L1626.79 683.597 L1626.23 683.597 L1625.67 683.597 L1625.11 683.597 L1624.56 683.597 L1624 683.597 L1623.44 683.597 L1622.88 683.597 L1622.32 683.597 L1621.76 683.597 L1621.2 683.597 L1620.64 683.597 L1620.08 683.597 L1619.52 683.597 L1618.96 683.597 L1618.4 683.597 L1617.84 683.597 L1617.29 683.597 L1616.73 683.597 L1616.17 683.597 L1615.61 683.597 L1615.05 683.597 L1614.49 683.597 L1613.93 683.597 L1613.37 683.597 L1612.81 683.597 L1612.25 683.597 L1611.69 683.597 L1611.13 683.597 L1610.57 683.597 L1610.02 683.597 L1609.46 683.597 L1608.9 683.597 L1608.34 683.597 L1607.78 683.597 L1607.22 683.597 L1606.66 683.597 L1606.1 683.597 L1605.54 683.597 L1604.98 683.597 L1604.42 683.597 L1603.86 683.597 L1603.3 683.597 L1602.74 683.597 L1602.19 683.597 L1601.63 683.597 L1601.07 683.597 L1600.51 683.597 L1599.95 683.597 L1599.39 683.597 L1598.83 683.597 L1598.27 683.597 L1597.71 683.597 L1597.15 683.597 L1596.59 683.597 L1596.03 683.597 L1595.47 683.597 L1594.92 683.597 L1594.36 683.597 L1593.8 683.597 L1593.24 683.597 L1592.68 683.597 L1592.12 683.597 L1591.56 683.597 L1591 683.597 L1590.44 683.597 L1589.88 683.597 L1589.32 683.597 L1588.76 683.597 L1588.2 683.597 L1587.65 683.597 L1587.09 683.597 L1586.53 683.597 L1585.97 683.597 L1585.41 683.597 L1584.85 683.597 L1584.29 683.597 L1583.73 683.597 L1583.17 683.597 L1582.61 683.597 L1582.05 683.597 L1581.49 683.597 L1580.93 683.597 L1580.37 683.597 L1579.82 683.597 L1579.26 683.597 L1578.7 683.597 L1578.14 683.597 L1577.58 683.597 L1577.02 683.597 L1576.46 683.597 L1575.9 683.597 L1575.34 683.597 L1574.78 683.597 L1574.22 683.597 L1573.66 683.597 L1573.1 683.597 L1572.55 683.597 L1571.99 683.597 L1571.43 683.597 L1570.87 683.597 L1570.31 683.597 L1569.75 683.597 L1569.19 683.597 L1568.63 683.597 L1568.07 683.597 L1567.51 683.597 L1566.95 683.597 L1566.39 683.597 L1565.83 683.597 L1565.28 683.597 L1564.72 683.597 L1564.16 683.597 L1563.6 683.597 L1563.04 683.597 L1562.48 683.597 L1561.92 683.597 L1561.36 683.597 L1560.8 683.597 L1560.24 683.597 L1559.68 683.597 L1559.12 683.597 L1558.56 683.597 L1558 683.597 L1557.45 683.597 L1556.89 683.597 L1556.33 683.597 L1555.77 683.597 L1555.21 683.597 L1554.65 683.597 L1554.09 683.597 L1553.53 683.597 L1552.97 683.597 L1552.41 683.597 L1551.85 683.597 L1551.29 683.597 L1550.73 683.597 L1550.18 683.597 L1549.62 683.597 L1549.06 683.597 L1548.5 683.597 L1547.94 683.597 L1547.38 683.597 L1546.82 683.597 L1546.26 683.597 L1545.7 683.597 L1545.14 683.597 L1544.58 683.597 L1544.02 683.597 L1543.46 683.597 L1542.9 683.597 L1542.35 683.597 L1541.79 683.597 L1541.23 683.597 L1540.67 683.597 L1540.11 683.597 L1539.55 683.597 L1538.99 683.597 L1538.43 683.597 L1537.87 683.597 L1537.31 683.597 L1536.75 683.597 L1536.19 683.597 L1535.63 683.597 L1535.08 683.597 L1534.52 683.597 L1533.96 683.597 L1533.4 683.597 L1532.84 683.597 L1532.28 683.597 L1531.72 683.597 L1531.16 683.597 L1530.6 683.597 L1530.04 683.597 L1529.48 683.597 L1528.92 683.597 L1528.36 683.597 L1527.81 683.597 L1527.25 683.597 L1526.69 683.597 L1526.13 683.597 L1525.57 683.597 L1525.01 683.597 L1524.45 683.597 L1523.89 683.597 L1523.33 683.597 L1522.77 683.597 L1522.21 683.597 L1521.65 683.597 L1521.09 683.597 L1520.53 683.597 L1519.98 683.597 L1519.42 683.597 L1518.86 683.597 L1518.3 683.597 L1517.74 683.597 L1517.18 683.597 L1516.62 683.597 L1516.06 683.597 L1515.5 683.597 L1514.94 683.597 L1514.38 683.597 L1513.82 683.597 L1513.26 683.597 L1512.71 683.597 L1512.15 683.597 L1511.59 683.597 L1511.03 683.597 L1510.47 683.597 L1509.91 683.597 L1509.35 683.597 L1508.79 683.597 L1508.23 683.597 L1507.67 683.597 L1507.11 683.597 L1506.55 683.597 L1505.99 683.597 L1505.44 683.597 L1504.88 683.597 L1504.32 683.597 L1503.76 683.597 L1503.2 683.597 L1502.64 683.597 L1502.08 683.597 L1501.52 683.597 L1500.96 683.597 L1500.4 683.597 L1499.84 683.597 L1499.28 683.597 L1498.72 683.597 L1498.16 683.597 L1497.61 683.597 L1497.05 683.597 L1496.49 683.597 L1495.93 683.597 L1495.37 683.597 L1494.81 683.597 L1494.25 683.597 L1493.69 683.597 L1493.13 683.597 L1492.57 683.597 L1492.01 683.597 L1491.45 683.597 L1490.89 683.597 L1490.34 683.597 L1489.78 683.597 L1489.22 683.597 L1488.66 683.597 L1488.1 683.597 L1487.54 683.597 L1486.98 683.597 L1486.42 683.597 L1485.86 683.597 L1485.3 683.597 L1484.74 683.597 L1484.18 683.597 L1483.62 683.597 L1483.07 683.597 L1482.51 683.597 L1481.95 683.597 L1481.39 683.597 L1480.83 683.597 L1480.27 683.597 L1479.71 683.597 L1479.15 683.597 L1478.59 683.597 L1478.03 683.597 L1477.47 683.597 L1476.91 683.597 L1476.35 683.597 L1475.79 683.597 L1475.24 683.597 L1474.68 683.597 L1474.12 683.597 L1473.56 683.597 L1473 683.597 L1472.44 683.597 L1471.88 683.597 L1471.32 683.597 L1470.76 683.597 L1470.2 683.597 L1469.64 683.597 L1469.08 683.597 L1468.52 683.597 L1467.97 683.597 L1467.41 683.597 L1466.85 683.597 L1466.29 683.597 L1465.73 683.597 L1465.17 683.597 L1464.61 683.597 L1464.05 683.597 L1463.49 683.597 L1462.93 683.597 L1462.37 683.597 L1461.81 683.597 L1461.25 683.597 L1460.7 683.597 L1460.14 683.597 L1459.58 683.597 L1459.02 683.597 L1458.46 683.597 L1457.9 683.597 L1457.34 683.597 L1456.78 683.597 L1456.22 683.597 L1455.66 683.597 L1455.1 683.597 L1454.54 683.597 L1453.98 683.597 L1453.42 683.597 L1452.87 683.597 L1452.31 683.597 L1451.75 683.597 L1451.19 683.597 L1450.63 683.597 L1450.07 683.597 L1449.51 683.597 L1448.95 683.597 L1448.39 683.597 L1447.83 683.597 L1447.27 683.597 L1446.71 683.597 L1446.15 683.597 L1445.6 683.597 L1445.04 683.597 L1444.48 683.597 L1443.92 683.597 L1443.36 683.597 L1442.8 683.597 L1442.24 683.597 L1441.68 683.597 L1441.12 683.597 L1440.56 683.597 L1440 683.597 L1439.44 683.597 L1438.88 683.597 L1438.33 683.597 L1437.77 683.597 L1437.21 683.597 L1436.65 683.597 L1436.09 683.597 L1435.53 683.597 L1434.97 683.597 L1434.41 683.597 L1433.85 683.597 L1433.29 683.597 L1432.73 683.597 L1432.17 683.597 L1431.61 683.597 L1431.05 683.597 L1430.5 683.597 L1429.94 683.597 L1429.38 683.597 L1428.82 683.597 L1428.26 683.597 L1427.7 683.597 L1427.14 683.597 L1426.58 683.597 L1426.02 683.597 L1425.46 683.597 L1424.9 683.597 L1424.34 683.597 L1423.78 683.597 L1423.23 683.597 L1422.67 683.597 L1422.11 683.597 L1421.55 683.597 L1420.99 683.597 L1420.43 683.597 L1419.87 683.597 L1419.31 683.597 L1418.75 683.597 L1418.19 683.597 L1417.63 683.597 L1417.07 683.597 L1416.51 683.597 L1415.95 683.597 L1415.4 683.597 L1414.84 683.597 L1414.28 683.597 L1413.72 683.597 L1413.16 683.597 L1412.6 683.597 L1412.04 683.597 L1411.48 683.597 L1410.92 683.597 L1410.36 683.597 L1409.8 683.597 L1409.24 683.597 L1408.68 683.597 L1408.13 683.597 L1407.57 683.597 L1407.01 683.597 L1406.45 683.597 L1405.89 683.597 L1405.33 683.597 L1404.77 683.597 L1404.21 683.597 L1403.65 683.597 L1403.09 683.597 L1402.53 683.597 L1401.97 683.597 L1401.41 683.597 L1400.86 683.597 L1400.3 683.597 L1399.74 683.597 L1399.18 683.597 L1398.62 683.597 L1398.06 683.597 L1397.5 683.597 L1396.94 683.597 L1396.38 683.597 L1395.82 683.597 L1395.26 683.597 L1394.7 683.597 L1394.14 683.597 L1393.58 683.597 L1393.03 683.597 L1392.47 683.597 L1391.91 683.597 L1391.35 683.597 L1390.79 683.597 L1390.23 683.597 L1389.67 683.597 L1389.11 683.597 L1388.55 683.597 L1387.99 683.597 L1387.43 683.597 L1386.87 683.597 L1386.31 683.597 L1385.76 683.597 L1385.2 683.597 L1384.64 683.597 L1384.08 683.597 L1383.52 683.597 L1382.96 683.597 L1382.4 683.597 L1381.84 683.597 L1381.28 683.597 L1380.72 683.597 L1380.16 683.597 L1379.6 683.597 L1379.04 683.597 L1378.49 683.597 L1377.93 683.597 L1377.37 683.597 L1376.81 683.597 L1376.25 683.597 L1375.69 683.597 L1375.13 683.597 L1374.57 683.597 L1374.01 683.597 L1373.45 683.597 L1372.89 683.597 L1372.33 683.597 L1371.77 683.597 L1371.21 683.597 L1370.66 683.597 L1370.1 683.597 L1369.54 683.597 L1368.98 683.597 L1368.42 683.597 L1367.86 683.597 L1367.3 683.597 L1366.74 683.597 L1366.18 683.597 L1365.62 683.597 L1365.06 683.597 L1364.5 683.597 L1363.94 683.597 L1363.39 683.597 L1362.83 683.597 L1362.27 683.597 L1361.71 683.597 L1361.15 683.597 L1360.59 683.597 L1360.03 683.597 L1359.47 683.597 L1358.91 683.597 L1358.35 683.597 L1357.79 683.597 L1357.23 683.597 L1356.67 683.597 L1356.12 683.597 L1355.56 683.597 L1355 683.597 L1354.44 683.597 L1353.88 683.597 L1353.32 683.597 L1352.76 683.597 L1352.2 683.597 L1351.64 683.597 L1351.08 683.597 L1350.52 683.597 L1349.96 683.597 L1349.4 683.597 L1348.84 683.597 L1348.29 683.597 L1347.73 683.597 L1347.17 683.597 L1346.61 683.597 L1346.05 683.597 L1345.49 683.597 L1344.93 683.597 L1344.37 683.597 L1343.81 683.597 L1343.25 683.597 L1342.69 683.597 L1342.13 683.597 L1341.57 683.597 L1341.02 683.597 L1340.46 683.597 L1339.9 683.597 L1339.34 683.597 L1338.78 683.597 L1338.22 683.597 L1337.66 683.597 L1337.1 683.597 L1336.54 683.597 L1335.98 683.597 L1335.42 683.597 L1334.86 683.597 L1334.3 683.597 L1333.75 683.597 L1333.19 683.597 L1332.63 683.597 L1332.07 683.597 L1331.51 683.597 L1330.95 683.597 L1330.39 683.597 L1329.83 683.597 L1329.27 683.597 L1328.71 683.597 L1328.15 683.597 L1327.59 683.597 L1327.03 683.597 L1326.47 683.597 L1325.92 683.597 L1325.36 683.597 L1324.8 683.597 L1324.24 683.597 L1323.68 683.597 L1323.12 683.597 L1322.56 683.597 L1322 683.597 L1321.44 683.597 L1320.88 683.597 L1320.32 683.597 L1319.76 683.597 L1319.2 683.597 L1318.65 683.597 L1318.09 683.597 L1317.53 683.597 L1316.97 683.597 L1316.41 683.597 L1315.85 683.597 L1315.29 683.597 L1314.73 683.597 L1314.17 683.597 L1313.61 683.597 L1313.05 683.597 L1312.49 683.597 L1311.93 683.597 L1311.38 683.597 L1310.82 683.597 L1310.26 683.597 L1309.7 683.597 L1309.14 683.597 L1308.58 683.597 L1308.02 683.597 L1307.46 683.597 L1306.9 683.597 L1306.34 683.597 L1305.78 683.597 L1305.22 683.597 L1304.66 683.597 L1304.1 683.597 L1303.55 683.597 L1302.99 683.597 L1302.43 683.597 L1301.87 683.597 L1301.31 683.597 L1300.75 683.597 L1300.19 683.597 L1299.63 683.597 L1299.07 683.597 L1298.51 683.597 L1297.95 683.597 L1297.39 683.597 L1296.83 683.597 L1296.28 683.597 L1295.72 683.597 L1295.16 683.597 L1294.6 683.597 L1294.04 683.597 L1293.48 683.597 L1292.92 683.597 L1292.36 683.597 L1291.8 683.597 L1291.24 683.597 L1290.68 683.597 L1290.12 683.597 L1289.56 683.597 L1289 683.597 L1288.45 683.597 L1287.89 683.597 L1287.33 683.597 L1286.77 683.597 L1286.21 683.597 L1285.65 683.597 L1285.09 683.597 L1284.53 683.597 L1283.97 683.597 L1283.41 683.597 L1282.85 683.597 L1282.29 683.597 L1281.73 683.597 L1281.18 683.597 L1280.62 683.597 L1280.06 683.597 L1279.5 683.597 L1278.94 683.597 L1278.38 683.597 L1277.82 683.597 L1277.26 683.597 L1276.7 683.597 L1276.14 683.597 L1275.58 683.597 L1275.02 683.597 L1274.46 683.597 L1273.91 683.597 L1273.35 683.597 L1272.79 683.597 L1272.23 683.597 L1271.67 683.597 L1271.11 683.597 L1270.55 683.597 L1269.99 683.597 L1269.43 683.597 L1268.87 683.597 L1268.31 683.597 L1267.75 683.597 L1267.19 683.597 L1266.63 683.597 L1266.08 683.597 L1265.52 683.597 L1264.96 683.597 L1264.4 683.597 L1263.84 683.597 L1263.28 683.597 L1262.72 683.597 L1262.16 683.597 L1261.6 683.597 L1261.04 683.597 L1260.48 683.597 L1259.92 683.597 L1259.36 683.597 L1258.81 683.597 L1258.25 683.597 L1257.69 683.597 L1257.13 683.597 L1256.57 683.597 L1256.01 683.597 L1255.45 683.597 L1254.89 683.597 L1254.33 683.597 L1253.77 683.597 L1253.21 683.597 L1252.65 683.597 L1252.09 683.597 L1251.54 683.597 L1250.98 683.597 L1250.42 683.597 L1249.86 683.597 L1249.3 683.597 L1248.74 683.597 L1248.18 683.597 L1247.62 683.597 L1247.06 683.597 L1246.5 683.597 L1245.94 683.597 L1245.38 683.597 L1244.82 683.597 L1244.26 683.597 L1243.71 683.597 L1243.15 683.597 L1242.59 683.597 L1242.03 683.597 L1241.47 683.597 L1240.91 683.597 L1240.35 683.597 L1239.79 683.597 L1239.23 683.597 L1238.67 683.597 L1238.11 683.597 L1237.55 683.597 L1236.99 683.597 L1236.44 683.597 L1235.88 683.597 L1235.32 683.597 L1234.76 683.597 L1234.2 683.597 L1233.64 683.597 L1233.08 683.597 L1232.52 683.597 L1231.96 683.597 L1231.4 683.597 L1230.84 683.597 L1230.28 683.597 L1229.72 683.597 L1229.17 683.597 L1228.61 683.597 L1228.05 683.597 L1227.49 683.597 L1226.93 683.597 L1226.37 683.597 L1225.81 683.597 L1225.25 683.597 L1224.69 683.597 L1224.13 683.597 L1223.57 683.597 L1223.01 683.597 L1222.45 683.597 L1221.89 683.597 L1221.34 683.597 L1220.78 683.597 L1220.22 683.597 L1219.66 683.597 L1219.1 683.597 L1218.54 683.597 L1217.98 683.597 L1217.42 683.597 L1216.86 683.597 L1216.3 683.597 L1215.74 683.597 L1215.18 683.597 L1214.62 683.597 L1214.07 683.597 L1213.51 683.597 L1212.95 683.597 L1212.39 683.597 L1211.83 683.597 L1211.27 683.597 L1210.71 683.597 L1210.15 683.597 L1209.59 683.597 L1209.03 683.597 L1208.47 683.597 L1207.91 683.597 L1207.35 683.597 L1206.8 683.597 L1206.24 683.597 L1205.68 683.597 L1205.12 683.597 L1204.56 683.597 L1204 683.597 L1203.44 683.597 L1202.88 683.597 L1202.32 683.597 L1201.76 683.597 L1201.2 683.597 L1200.64 683.597 L1200.08 683.597 L1199.52 683.597 L1198.97 683.597 L1198.41 683.597 L1197.85 683.597 L1197.29 683.597 L1196.73 683.597 L1196.17 683.597 L1195.61 683.597 L1195.05 683.597 L1194.49 683.597 L1193.93 683.597 L1193.37 683.597 L1192.81 683.597 L1192.25 683.597 L1191.7 683.597 L1191.14 683.597 L1190.58 683.597 L1190.02 683.597 L1189.46 683.597 L1188.9 683.597 L1188.34 683.597 L1187.78 683.597 L1187.22 683.597 L1186.66 683.597 L1186.1 683.597 L1185.54 683.597 L1184.98 683.597 L1184.43 683.597 L1183.87 683.597 L1183.31 683.597 L1182.75 683.597 L1182.19 683.597 L1181.63 683.597 L1181.07 683.597 L1180.51 683.597 L1179.95 683.597 L1179.39 683.597 L1178.83 683.597 L1178.27 683.597 L1177.71 683.597 L1177.15 683.597 L1176.6 683.597 L1176.04 683.597 L1175.48 683.597 L1174.92 683.597 L1174.36 683.597 L1173.8 683.597 L1173.24 683.597 L1172.68 683.597 L1172.12 683.597 L1171.56 683.597 L1171 683.597 L1170.44 683.597 L1169.88 683.597 L1169.33 683.597 L1168.77 683.597 L1168.21 683.597 L1167.65 683.597 L1167.09 683.597 L1166.53 683.597 L1165.97 683.597 L1165.41 683.597 L1164.85 683.597 L1164.29 683.597 L1163.73 683.597 L1163.17 683.597 L1162.61 683.597 L1162.05 683.597 L1161.5 683.597 L1160.94 683.597 L1160.38 683.597 L1159.82 683.597 L1159.26 683.597 L1158.7 683.597 L1158.14 683.597 L1157.58 683.597 L1157.02 683.597 L1156.46 683.597 L1155.9 683.597 L1155.34 683.597 L1154.78 683.597 L1154.23 683.597 L1153.67 683.597 L1153.11 683.597 L1152.55 683.597 L1151.99 683.597 L1151.43 683.597 L1150.87 683.597 L1150.31 683.597 L1149.75 683.597 L1149.19 683.597 L1148.63 683.597 L1148.07 683.597 L1147.51 683.597 L1146.96 683.597 L1146.4 683.597 L1145.84 683.597 L1145.28 683.597 L1144.72 683.597 L1144.16 683.597 L1143.6 683.597 L1143.04 683.597 L1142.48 683.597 L1141.92 683.597 L1141.36 683.597 L1140.8 683.597 L1140.24 683.597 L1139.68 683.597 L1139.13 683.597 L1138.57 683.597 L1138.01 683.597 L1137.45 683.597 L1136.89 683.597 L1136.33 683.597 L1135.77 683.597 L1135.21 683.597 L1134.65 683.597 L1134.09 683.597 L1133.53 683.597 L1132.97 683.597 L1132.41 683.597 L1131.86 683.597 L1131.3 683.597 L1130.74 683.597 L1130.18 683.597 L1129.62 683.597 L1129.06 683.597 L1128.5 683.597 L1127.94 683.597 L1127.38 683.597 L1126.82 683.597 L1126.26 683.597 L1125.7 683.597 L1125.14 683.597 L1124.59 683.597 L1124.03 683.597 L1123.47 683.597 L1122.91 683.597 L1122.35 683.597 L1121.79 683.597 L1121.23 683.597 L1120.67 683.597 L1120.11 683.597 L1119.55 683.597 L1118.99 683.597 L1118.43 683.597 L1117.87 683.597 L1117.31 683.597 L1116.76 683.597 L1116.2 683.597 L1115.64 683.597 L1115.08 683.597 L1114.52 683.597 L1113.96 683.597 L1113.4 683.597 L1112.84 683.597 L1112.28 683.597 L1111.72 683.597 L1111.16 683.597 L1110.6 683.597 L1110.04 683.597 L1109.49 683.597 L1108.93 683.597 L1108.37 683.597 L1107.81 683.597 L1107.25 683.597 L1106.69 683.597 L1106.13 683.597 L1105.57 683.597 L1105.01 683.597 L1104.45 683.597 L1103.89 683.597 L1103.33 683.597 L1102.77 683.597 L1102.22 683.597 L1101.66 683.597 L1101.1 683.597 L1100.54 683.597 L1099.98 683.597 L1099.42 683.597 L1098.86 683.597 L1098.3 683.597 L1097.74 683.597 L1097.18 683.597 L1096.62 683.597 L1096.06 683.597 L1095.5 683.597 L1094.94 683.597 L1094.39 683.597 L1093.83 683.597 L1093.27 683.597 L1092.71 683.597 L1092.15 683.597 L1091.59 683.597 L1091.03 683.597 L1090.47 683.597 L1089.91 683.597 L1089.35 683.597 L1088.79 683.597 L1088.23 683.597 L1087.67 683.597 L1087.12 683.597 L1086.56 683.597 L1086 683.597 L1085.44 683.597 L1084.88 683.597 L1084.32 683.597 L1083.76 683.597 L1083.2 683.597 L1082.64 683.597 L1082.08 683.597 L1081.52 683.597 L1080.96 683.597 L1080.4 683.597 L1079.85 683.597 L1079.29 683.597 L1078.73 683.597 L1078.17 683.597 L1077.61 683.597 L1077.05 683.597 L1076.49 683.597 L1075.93 683.597 L1075.37 683.597 L1074.81 683.597 L1074.25 683.597 L1073.69 683.597 L1073.13 683.597 L1072.57 683.597 L1072.02 683.597 L1071.46 683.597 L1070.9 683.597 L1070.34 683.597 L1069.78 683.597 L1069.22 683.597 L1068.66 683.597 L1068.1 683.597 L1067.54 683.597 L1066.98 683.597 L1066.42 683.597 L1065.86 683.597 L1065.3 683.597 L1064.75 683.597 L1064.19 683.597 L1063.63 683.597 L1063.07 683.597 L1062.51 683.597 L1061.95 683.597 L1061.39 683.597 L1060.83 683.597 L1060.27 683.597 L1059.71 683.597 L1059.15 683.597 L1058.59 683.597 L1058.03 683.597 L1057.48 683.597 L1056.92 683.597 L1056.36 683.597 L1055.8 683.597 L1055.24 683.597 L1054.68 683.597 L1054.12 683.597 L1053.56 683.597 L1053 683.597 L1052.44 683.597 L1051.88 683.597 L1051.32 683.597 L1050.76 683.597 L1050.2 683.597 L1049.65 683.597 L1049.09 683.597 L1048.53 683.597 L1047.97 683.597 L1047.41 683.597 L1046.85 683.597 L1046.29 683.597 L1045.73 683.597 L1045.17 683.597 L1044.61 683.597 L1044.05 683.597 L1043.49 683.597 L1042.93 683.597 L1042.38 683.597 L1041.82 683.597 L1041.26 683.597 L1040.7 683.597 L1040.14 683.597 L1039.58 683.597 L1039.02 683.597 L1038.46 683.597 L1037.9 683.597 L1037.34 683.597 L1036.78 683.597 L1036.22 683.597 L1035.66 683.597 L1035.1 683.597 L1034.55 683.597 L1033.99 683.597 L1033.43 683.597 L1032.87 683.597 L1032.31 683.597 L1031.75 683.597 L1031.19 683.597 L1030.63 683.597 L1030.07 683.597 L1029.51 683.597 L1028.95 683.597 L1028.39 683.597 L1027.83 683.597 L1027.28 683.597 L1026.72 683.597 L1026.16 683.597 L1025.6 683.597 L1025.04 683.597 L1024.48 683.597 L1023.92 683.597 L1023.36 683.597 L1022.8 683.597 L1022.24 683.597 L1021.68 683.597 L1021.12 683.597 L1020.56 683.597 L1020.01 683.597 L1019.45 683.597 L1018.89 683.597 L1018.33 683.597 L1017.77 683.597 L1017.21 683.597 L1016.65 683.597 L1016.09 683.597 L1015.53 683.597 L1014.97 683.597 L1014.41 683.597 L1013.85 683.597 L1013.29 683.597 L1012.73 683.597 L1012.18 683.597 L1011.62 683.597 L1011.06 683.597 L1010.5 683.597 L1009.94 683.597 L1009.38 683.597 L1008.82 683.597 L1008.26 683.597 L1007.7 683.597 L1007.14 683.597 L1006.58 683.597 L1006.02 683.597 L1005.46 683.597 L1004.91 683.597 L1004.35 683.597 L1003.79 683.597 L1003.23 683.597 L1002.67 683.597 L1002.11 683.597 L1001.55 683.597 L1000.99 683.597 L1000.43 683.597 L999.872 683.597 L999.313 683.597 L998.754 683.597 L998.194 683.597 L997.635 683.597 L997.076 683.597 L996.517 683.597 L995.957 683.597 L995.398 683.597 L994.839 683.597 L994.28 683.597 L993.72 683.597 L993.161 683.597 L992.602 683.597 L992.043 683.597 L991.483 683.597 L990.924 683.597 L990.365 683.597 L989.806 683.597 L989.246 683.597 L988.687 683.597 L988.128 683.597 L987.569 683.597 L987.009 683.597 L986.45 683.597 L985.891 683.597 L985.332 683.597 L984.772 683.597 L984.213 683.597 L983.654 683.597 L983.095 683.597 L982.535 683.597 L981.976 683.597 L981.417 683.597 L980.858 683.597 L980.298 683.597 L979.739 683.597 L979.18 683.597 L978.621 683.597 L978.061 683.597 L977.502 683.597 L976.943 683.597 L976.384 683.597 L975.824 683.597 L975.265 683.597 L974.706 683.597 L974.147 683.597 L973.587 683.597 L973.028 683.597 L972.469 683.597 L971.91 683.597 L971.35 683.597 L970.791 683.597 L970.232 683.597 L969.673 683.597 L969.113 683.597 L968.554 683.597 L967.995 683.597 L967.436 683.597 L966.876 683.597 L966.317 683.597 L965.758 683.597 L965.199 683.597 L964.639 683.597 L964.08 683.597 L963.521 683.597 L962.962 683.597 L962.402 683.597 L961.843 683.597 L961.284 683.597 L960.725 683.597 L960.165 683.597 L959.606 683.597 L959.047 683.597 L958.488 683.597 L957.928 683.597 L957.369 683.597 L956.81 683.597 L956.251 683.597 L955.691 683.597 L955.132 683.597 L954.573 683.597 L954.014 683.597 L953.454 683.597 L952.895 683.597 L952.336 683.597 L951.777 683.597 L951.217 683.597 L950.658 683.597 L950.099 683.597 L949.54 683.597 L948.98 683.597 L948.421 683.597 L947.862 683.597 L947.303 683.597 L946.743 683.597 L946.184 683.597 L945.625 683.597 L945.066 683.597 L944.506 683.597 L943.947 683.597 L943.388 683.597 L942.829 683.597 L942.269 683.597 L941.71 683.597 L941.151 683.597 L940.592 683.597 L940.032 683.597 L939.473 683.597 L938.914 683.597 L938.355 683.597 L937.795 683.597 L937.236 683.597 L936.677 683.597 L936.118 683.597 L935.558 683.597 L934.999 683.597 L934.44 683.597 L933.881 683.597 L933.321 683.597 L932.762 683.597 L932.203 683.597 L931.644 683.597 L931.084 683.597 L930.525 683.597 L929.966 683.597 L929.406 683.597 L928.847 683.597 L928.288 683.597 L927.729 683.597 L927.169 683.597 L926.61 683.597 L926.051 683.597 L925.492 683.597 L924.932 683.597 L924.373 683.597 L923.814 683.597 L923.255 683.597 L922.695 683.597 L922.136 683.597 L921.577 683.597 L921.018 683.597 L920.458 683.597 L919.899 683.597 L919.34 683.597 L918.781 683.597 L918.221 683.597 L917.662 683.597 L917.103 683.597 L916.544 683.597 L915.984 683.597 L915.425 683.597 L914.866 683.597 L914.307 683.597 L913.747 683.597 L913.188 683.597 L912.629 683.597 L912.07 683.597 L911.51 683.597 L910.951 683.597 L910.392 683.597 L909.833 683.597 L909.273 683.597 L908.714 683.597 L908.155 683.597 L907.596 683.597 L907.036 683.597 L906.477 683.597 L905.918 683.597 L905.359 683.597 L904.799 683.597 L904.24 683.597 L903.681 683.597 L903.122 683.597 L902.562 683.597 L902.003 683.597 L901.444 683.597 L900.885 683.597 L900.325 683.597 L899.766 683.597 L899.207 683.597 L898.648 683.597 L898.088 683.597 L897.529 683.597 L896.97 683.597 L896.411 683.597 L895.851 683.597 L895.292 683.597 L894.733 683.597 L894.174 683.597 L893.614 683.597 L893.055 683.597 L892.496 683.597 L891.937 683.597 L891.377 683.597 L890.818 683.597 L890.259 683.597 L889.7 683.597 L889.14 683.597 L888.581 683.597 L888.022 683.597 L887.463 683.597 L886.903 683.597 L886.344 683.597 L885.785 683.597 L885.226 683.597 L884.666 683.597 L884.107 683.597 L883.548 683.597 L882.989 683.597 L882.429 683.597 L881.87 683.597 L881.311 683.597 L880.752 683.597 L880.192 683.597 L879.633 683.597 L879.074 683.597 L878.515 683.597 L877.955 683.597 L877.396 683.597 L876.837 683.597 L876.278 683.597 L875.718 683.597 L875.159 683.597 L874.6 683.597 L874.041 683.597 L873.481 683.597 L872.922 683.597 L872.363 683.597 L871.804 683.597 L871.244 683.597 L870.685 683.597 L870.126 683.597 L869.567 683.597 L869.007 683.597 L868.448 683.597 L867.889 683.597 L867.33 683.597 L866.77 683.597 L866.211 683.597 L865.652 683.597 L865.093 683.597 L864.533 683.597 L863.974 683.597 L863.415 683.597 L862.856 683.597 L862.296 683.597 L861.737 683.597 L861.178 683.597 L860.619 683.597 L860.059 683.597 L859.5 683.597 L858.941 683.597 L858.382 683.597 L857.822 683.597 L857.263 683.597 L856.704 683.597 L856.145 683.597 L855.585 683.597 L855.026 683.597 L854.467 683.597 L853.908 683.597 L853.348 683.597 L852.789 683.597 L852.23 683.597 L851.671 683.597 L851.111 683.597 L850.552 683.597 L849.993 683.597 L849.434 683.597 L848.874 683.597 L848.315 683.597 L847.756 683.597 L847.197 683.597 L846.637 683.597 L846.078 683.597 L845.519 683.597 L844.96 683.597 L844.4 683.597 L843.841 683.597 L843.282 683.597 L842.723 683.597 L842.163 683.597 L841.604 683.597 L841.045 683.597 L840.486 683.597 L839.926 683.597 L839.367 683.597 L838.808 683.597 L838.249 683.597 L837.689 683.597 L837.13 683.597 L836.571 683.597 L836.012 683.597 L835.452 683.597 L834.893 683.597 L834.334 683.597 L833.775 683.597 L833.215 683.597 L832.656 683.597 L832.097 683.597 L831.538 683.597 L830.978 683.597 L830.419 683.597 L829.86 683.597 L829.301 683.597 L828.741 683.597 L828.182 683.597 L827.623 683.597 L827.064 683.597 L826.504 683.597 L825.945 683.597 L825.386 683.597 L824.827 683.597 L824.267 683.597 L823.708 683.597 L823.149 683.597 L822.59 683.597 L822.03 683.597 L821.471 683.597 L820.912 683.597 L820.353 683.597 L819.793 683.597 L819.234 683.597 L818.675 683.597 L818.116 683.597 L817.556 683.597 L816.997 683.597 L816.438 683.597 L815.879 683.597 L815.319 683.597 L814.76 683.597 L814.201 683.597 L813.642 683.597 L813.082 683.597 L812.523 683.597 L811.964 683.597 L811.405 683.597 L810.845 683.597 L810.286 683.597 L809.727 683.597 L809.168 683.597 L808.608 683.597 L808.049 683.597 L807.49 683.597 L806.931 683.597 L806.371 683.597 L805.812 683.597 L805.253 683.597 L804.693 683.597 L804.134 683.597 L803.575 683.597 L803.016 683.597 L802.456 683.597 L801.897 683.597 L801.338 683.597 L800.779 683.597 L800.219 683.597 L799.66 683.597 L799.101 683.597 L798.542 683.597 L797.982 683.597 L797.423 683.597 L796.864 683.597 L796.305 683.597 L795.745 683.597 L795.186 683.597 L794.627 683.597 L794.068 683.597 L793.508 683.597 L792.949 683.597 L792.39 683.597 L791.831 683.597 L791.271 683.597 L790.712 683.597 L790.153 683.597 L789.594 683.597 L789.034 683.597 L788.475 683.597 L787.916 683.597 L787.357 683.597 L786.797 683.597 L786.238 683.597 L785.679 683.597 L785.12 683.597 L784.56 683.597 L784.001 683.597 L783.442 683.597 L782.883 683.597 L782.323 683.597 L781.764 683.597 L781.205 683.597 L780.646 683.597 L780.086 683.597 L779.527 683.597 L778.968 683.597 L778.409 683.597 L777.849 683.597 L777.29 683.597 L776.731 683.597 L776.172 683.597 L775.612 683.597 L775.053 683.597 L774.494 683.597 L773.935 683.597 L773.375 683.597 L772.816 683.597 L772.257 683.597 L771.698 683.597 L771.138 683.597 L770.579 683.597 L770.02 683.597 L769.461 683.597 L768.901 683.597 L768.342 683.597 L767.783 683.597 L767.224 683.597 L766.664 683.597 L766.105 683.597 L765.546 683.597 L764.987 683.597 L764.427 683.597 L763.868 683.597 L763.309 683.597 L762.75 683.597 L762.19 683.597 L761.631 683.597 L761.072 683.597 L760.513 683.597 L759.953 683.597 L759.394 683.597 L758.835 683.597 L758.276 683.597 L757.716 683.597 L757.157 683.597 L756.598 683.597 L756.039 683.597 L755.479 683.597 L754.92 683.597 L754.361 683.597 L753.802 683.597 L753.242 683.597 L752.683 683.597 L752.124 683.597 L751.565 683.597 L751.005 683.597 L750.446 683.597 L749.887 683.597 L749.328 683.597 L748.768 683.597 L748.209 683.597 L747.65 683.597 L747.091 683.597 L746.531 683.597 L745.972 683.597 L745.413 683.597 L744.854 683.597 L744.294 683.597 L743.735 683.597 L743.176 683.597 L742.617 683.597 L742.057 683.597 L741.498 683.597 L740.939 683.597 L740.38 683.597 L739.82 683.597 L739.261 683.597 L738.702 683.597 L738.143 683.597 L737.583 683.597 L737.024 683.597 L736.465 683.597 L735.906 683.597 L735.346 683.597 L734.787 683.597 L734.228 683.597 L733.669 683.597 L733.109 683.597 L732.55 683.597 L731.991 683.597 L731.432 683.597 L730.872 683.597 L730.313 683.597 L729.754 683.597 L729.195 683.597 L728.635 683.597 L728.076 683.597 L727.517 683.597 L726.958 683.597 L726.398 683.597 L725.839 683.597 L725.28 683.597 L724.721 683.597 L724.161 683.597 L723.602 683.597 L723.043 683.597 L722.484 683.597 L721.924 683.597 L721.365 683.597 L720.806 683.597 L720.247 683.597  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.296 720.806,684.296 721.365,684.296 721.924,684.296 722.484,684.296 723.043,684.296 723.602,684.296 724.161,684.296 724.721,684.296 725.28,684.296 725.839,684.296 726.398,684.296 726.958,684.296 727.517,684.296 728.076,684.296 728.635,684.296 729.195,684.296 729.754,684.296 730.313,684.296 730.872,684.296 731.432,684.296 731.991,684.296 732.55,684.296 733.109,684.296 733.669,684.296 734.228,684.296 734.787,684.296 735.346,684.296 735.906,684.296 736.465,684.296 737.024,684.296 737.583,684.296 738.143,684.296 738.702,684.296 739.261,684.296 739.82,684.296 740.38,684.296 740.939,684.296 741.498,684.296 742.057,684.296 742.617,684.296 743.176,684.296 743.735,684.296 744.294,684.296 744.854,684.296 745.413,684.296 745.972,684.296 746.531,684.296 747.091,684.296 747.65,684.296 748.209,684.296 748.768,684.296 749.328,684.296 749.887,684.296 750.446,684.296 751.005,684.296 751.565,684.296 752.124,684.296 752.683,684.296 753.242,684.296 753.802,684.296 754.361,684.296 754.92,684.296 755.479,684.296 756.039,684.296 756.598,684.296 757.157,684.296 757.716,684.296 758.276,684.296 758.835,684.296 759.394,684.296 759.953,684.296 760.513,684.296 761.072,684.296 761.631,684.296 762.19,684.296 762.75,684.296 763.309,684.296 763.868,684.296 764.427,684.296 764.987,684.296 765.546,684.296 766.105,684.296 766.664,684.296 767.224,684.296 767.783,684.296 768.342,684.296 768.901,684.296 769.461,684.296 770.02,684.296 770.579,684.296 771.138,684.296 771.698,684.296 772.257,684.296 772.816,684.296 773.375,684.296 773.935,684.296 774.494,684.296 775.053,684.296 775.612,684.296 776.172,684.296 776.731,684.296 777.29,684.296 777.849,684.296 778.409,684.296 778.968,684.296 779.527,684.296 780.086,684.296 780.646,684.296 781.205,684.296 781.764,684.296 782.323,684.296 782.883,684.296 783.442,684.296 784.001,684.296 784.56,684.296 785.12,684.296 785.679,684.296 786.238,684.296 786.797,684.296 787.357,684.296 787.916,684.296 788.475,684.296 789.034,684.296 789.594,684.296 790.153,684.296 790.712,684.296 791.271,684.296 791.831,684.296 792.39,684.296 792.949,684.296 793.508,684.296 794.068,684.296 794.627,684.296 795.186,684.296 795.745,684.296 796.305,684.296 796.864,684.296 797.423,684.296 797.982,684.296 798.542,684.296 799.101,684.296 799.66,684.296 800.219,684.296 800.779,684.296 801.338,684.296 801.897,684.296 802.456,684.296 803.016,684.296 803.575,684.296 804.134,684.296 804.693,684.296 805.253,684.296 805.812,684.296 806.371,684.296 806.931,684.296 807.49,684.296 808.049,684.296 808.608,684.296 809.168,684.296 809.727,684.296 810.286,684.296 810.845,684.296 811.405,684.296 811.964,684.296 812.523,684.296 813.082,684.296 813.642,684.296 814.201,684.296 814.76,684.296 815.319,684.296 815.879,684.296 816.438,684.296 816.997,684.296 817.556,684.296 818.116,684.296 818.675,684.296 819.234,684.296 819.793,684.296 820.353,684.296 820.912,684.296 821.471,684.296 822.03,684.296 822.59,684.296 823.149,684.296 823.708,684.296 824.267,684.296 824.827,684.296 825.386,684.296 825.945,684.296 826.504,684.296 827.064,684.296 827.623,684.296 828.182,684.296 828.741,684.296 829.301,684.296 829.86,684.296 830.419,684.296 830.978,684.296 831.538,684.296 832.097,684.296 832.656,684.296 833.215,684.296 833.775,684.296 834.334,684.296 834.893,684.296 835.452,684.296 836.012,684.296 836.571,684.296 837.13,684.296 837.689,684.296 838.249,684.296 838.808,684.296 839.367,684.296 839.926,684.296 840.486,684.296 841.045,684.296 841.604,684.296 842.163,684.296 842.723,684.296 843.282,684.296 843.841,684.296 844.4,684.296 844.96,684.296 845.519,684.296 846.078,684.296 846.637,684.296 847.197,684.296 847.756,684.296 848.315,684.296 848.874,684.296 849.434,684.296 849.993,684.296 850.552,684.296 851.111,684.296 851.671,684.296 852.23,684.296 852.789,684.296 853.348,684.296 853.908,684.296 854.467,684.296 855.026,684.296 855.585,684.296 856.145,684.296 856.704,684.296 857.263,684.296 857.822,684.296 858.382,684.296 858.941,684.296 859.5,684.296 860.059,684.296 860.619,684.296 861.178,684.296 861.737,684.296 862.296,684.296 862.856,684.296 863.415,684.296 863.974,684.296 864.533,684.296 865.093,684.296 865.652,684.296 866.211,684.296 866.77,684.296 867.33,684.296 867.889,684.296 868.448,684.296 869.007,684.296 869.567,684.296 870.126,684.296 870.685,684.296 871.244,684.296 871.804,684.296 872.363,684.296 872.922,684.296 873.481,684.296 874.041,684.296 874.6,684.296 875.159,684.296 875.718,684.296 876.278,684.296 876.837,684.296 877.396,684.296 877.955,684.296 878.515,684.296 879.074,684.296 879.633,684.296 880.192,684.296 880.752,684.296 881.311,684.296 881.87,684.296 882.429,684.296 882.989,684.296 883.548,684.296 884.107,684.296 884.666,684.296 885.226,684.296 885.785,684.296 886.344,684.296 886.903,684.296 887.463,684.296 888.022,684.296 888.581,684.296 889.14,684.296 889.7,684.296 890.259,684.296 890.818,684.296 891.377,684.296 891.937,684.296 892.496,684.296 893.055,684.296 893.614,684.296 894.174,684.296 894.733,684.296 895.292,684.296 895.851,684.296 896.411,684.296 896.97,684.296 897.529,684.296 898.088,684.296 898.648,684.296 899.207,684.296 899.766,684.296 900.325,684.296 900.885,684.296 901.444,684.296 902.003,684.296 902.562,684.296 903.122,684.296 903.681,684.296 904.24,684.296 904.799,684.296 905.359,684.296 905.918,684.296 906.477,684.296 907.036,684.296 907.596,684.296 908.155,684.296 908.714,684.296 909.273,684.296 909.833,684.296 910.392,684.296 910.951,684.296 911.51,684.296 912.07,684.296 912.629,684.296 913.188,684.296 913.747,684.296 914.307,684.296 914.866,684.296 915.425,684.296 915.984,684.296 916.544,684.296 917.103,684.296 917.662,684.296 918.221,684.296 918.781,684.296 919.34,684.296 919.899,684.296 920.458,684.296 921.018,684.296 921.577,684.296 922.136,684.296 922.695,684.296 923.255,684.296 923.814,684.296 924.373,684.296 924.932,684.296 925.492,684.296 926.051,684.296 926.61,684.296 927.169,684.296 927.729,684.296 928.288,684.296 928.847,684.296 929.406,684.296 929.966,684.296 930.525,684.296 931.084,684.296 931.644,684.296 932.203,684.296 932.762,684.296 933.321,684.296 933.881,684.296 934.44,684.296 934.999,684.296 935.558,684.296 936.118,684.296 936.677,684.296 937.236,684.296 937.795,684.296 938.355,684.296 938.914,684.296 939.473,684.296 940.032,684.296 940.592,684.296 941.151,684.296 941.71,684.296 942.269,684.296 942.829,684.296 943.388,684.296 943.947,684.296 944.506,684.296 945.066,684.296 945.625,684.296 946.184,684.296 946.743,684.296 947.303,684.296 947.862,684.296 948.421,684.296 948.98,684.296 949.54,684.296 950.099,684.296 950.658,684.296 951.217,684.296 951.777,684.296 952.336,684.296 952.895,684.296 953.454,684.296 954.014,684.296 954.573,684.296 955.132,684.296 955.691,684.296 956.251,684.296 956.81,684.296 957.369,684.296 957.928,684.296 958.488,684.296 959.047,684.296 959.606,684.296 960.165,684.296 960.725,684.296 961.284,684.296 961.843,684.296 962.402,684.296 962.962,684.296 963.521,684.296 964.08,684.296 964.639,684.296 965.199,684.296 965.758,684.296 966.317,684.296 966.876,684.296 967.436,684.296 967.995,684.296 968.554,684.296 969.113,684.296 969.673,684.296 970.232,684.296 970.791,684.296 971.35,684.296 971.91,684.296 972.469,684.296 973.028,684.296 973.587,684.296 974.147,684.296 974.706,684.296 975.265,684.296 975.824,684.296 976.384,684.296 976.943,684.296 977.502,684.296 978.061,684.296 978.621,684.296 979.18,684.296 979.739,684.296 980.298,684.296 980.858,684.296 981.417,684.296 981.976,684.296 982.535,684.296 983.095,684.296 983.654,684.296 984.213,684.296 984.772,684.296 985.332,684.296 985.891,684.296 986.45,684.296 987.009,684.296 987.569,684.296 988.128,684.296 988.687,684.296 989.246,684.296 989.806,684.296 990.365,684.296 990.924,684.296 991.483,684.296 992.043,684.296 992.602,684.296 993.161,684.296 993.72,684.296 994.28,684.296 994.839,684.296 995.398,684.296 995.957,684.296 996.517,684.296 997.076,684.296 997.635,684.296 998.194,684.296 998.754,684.296 999.313,684.296 999.872,684.296 1000.43,684.296 1000.99,684.296 1001.55,684.296 1002.11,684.296 1002.67,684.296 1003.23,684.296 1003.79,684.296 1004.35,684.296 1004.91,684.296 1005.46,684.296 1006.02,684.296 1006.58,684.296 1007.14,684.296 1007.7,684.296 1008.26,684.296 1008.82,684.296 1009.38,684.296 1009.94,684.296 1010.5,684.296 1011.06,684.296 1011.62,684.296 1012.18,684.296 1012.73,684.296 1013.29,684.296 1013.85,684.296 1014.41,684.296 1014.97,684.296 1015.53,684.296 1016.09,684.296 1016.65,684.296 1017.21,684.296 1017.77,684.296 1018.33,684.296 1018.89,684.296 1019.45,684.296 1020.01,684.296 1020.56,684.296 1021.12,684.296 1021.68,684.296 1022.24,684.296 1022.8,684.296 1023.36,684.296 1023.92,684.296 1024.48,684.296 1025.04,684.296 1025.6,684.296 1026.16,684.296 1026.72,684.296 1027.28,684.296 1027.83,684.296 1028.39,684.296 1028.95,684.296 1029.51,684.296 1030.07,684.296 1030.63,684.296 1031.19,684.296 1031.75,684.296 1032.31,684.296 1032.87,684.296 1033.43,684.296 1033.99,684.296 1034.55,684.296 1035.1,684.296 1035.66,684.296 1036.22,684.296 1036.78,684.296 1037.34,684.296 1037.9,684.296 1038.46,684.296 1039.02,684.296 1039.58,684.296 1040.14,684.296 1040.7,684.296 1041.26,684.296 1041.82,684.296 1042.38,684.296 1042.93,684.296 1043.49,684.296 1044.05,684.296 1044.61,684.296 1045.17,684.296 1045.73,684.296 1046.29,684.296 1046.85,684.296 1047.41,684.296 1047.97,684.296 1048.53,684.296 1049.09,684.296 1049.65,684.296 1050.2,684.296 1050.76,684.296 1051.32,684.296 1051.88,684.296 1052.44,684.296 1053,684.296 1053.56,684.296 1054.12,684.296 1054.68,684.296 1055.24,684.296 1055.8,684.296 1056.36,684.296 1056.92,684.296 1057.48,684.296 1058.03,684.296 1058.59,684.296 1059.15,684.296 1059.71,684.296 1060.27,684.296 1060.83,684.296 1061.39,684.296 1061.95,684.296 1062.51,684.296 1063.07,684.296 1063.63,684.296 1064.19,684.296 1064.75,684.296 1065.3,684.296 1065.86,684.296 1066.42,684.296 1066.98,684.296 1067.54,684.296 1068.1,684.296 1068.66,684.296 1069.22,684.296 1069.78,684.296 1070.34,684.296 1070.9,684.296 1071.46,684.296 1072.02,684.296 1072.57,684.296 1073.13,684.296 1073.69,684.296 1074.25,684.296 1074.81,684.296 1075.37,684.296 1075.93,684.296 1076.49,684.296 1077.05,684.296 1077.61,684.296 1078.17,684.296 1078.73,684.296 1079.29,684.296 1079.85,684.296 1080.4,684.296 1080.96,684.296 1081.52,684.296 1082.08,684.296 1082.64,684.296 1083.2,684.296 1083.76,684.296 1084.32,684.296 1084.88,684.296 1085.44,684.296 1086,684.296 1086.56,684.296 1087.12,684.296 1087.67,684.296 1088.23,684.296 1088.79,684.296 1089.35,684.296 1089.91,684.296 1090.47,684.296 1091.03,684.296 1091.59,684.296 1092.15,684.296 1092.71,684.296 1093.27,684.296 1093.83,684.296 1094.39,684.296 1094.94,684.296 1095.5,684.296 1096.06,684.296 1096.62,684.296 1097.18,684.296 1097.74,684.296 1098.3,684.296 1098.86,684.296 1099.42,684.296 1099.98,684.296 1100.54,684.296 1101.1,684.296 1101.66,684.296 1102.22,684.296 1102.77,684.296 1103.33,684.296 1103.89,684.296 1104.45,684.296 1105.01,684.296 1105.57,684.296 1106.13,684.296 1106.69,684.296 1107.25,684.296 1107.81,684.296 1108.37,684.296 1108.93,684.296 1109.49,684.296 1110.04,684.296 1110.6,684.296 1111.16,684.296 1111.72,684.296 1112.28,684.296 1112.84,684.296 1113.4,684.296 1113.96,684.296 1114.52,684.296 1115.08,684.296 1115.64,684.296 1116.2,684.296 1116.76,684.296 1117.31,684.296 1117.87,684.296 1118.43,684.296 1118.99,684.296 1119.55,684.296 1120.11,684.296 1120.67,684.296 1121.23,684.296 1121.79,684.296 1122.35,684.296 1122.91,684.296 1123.47,684.296 1124.03,684.296 1124.59,684.296 1125.14,684.296 1125.7,684.296 1126.26,684.296 1126.82,684.296 1127.38,684.296 1127.94,684.296 1128.5,684.296 1129.06,684.296 1129.62,684.296 1130.18,684.296 1130.74,684.296 1131.3,684.296 1131.86,684.296 1132.41,684.296 1132.97,684.296 1133.53,684.296 1134.09,684.296 1134.65,684.296 1135.21,684.296 1135.77,684.296 1136.33,684.296 1136.89,684.296 1137.45,684.296 1138.01,684.296 1138.57,684.296 1139.13,684.296 1139.68,684.296 1140.24,684.296 1140.8,684.296 1141.36,684.296 1141.92,684.296 1142.48,684.296 1143.04,684.296 1143.6,684.296 1144.16,684.296 1144.72,684.296 1145.28,684.296 1145.84,684.296 1146.4,684.296 1146.96,684.296 1147.51,684.296 1148.07,684.296 1148.63,684.296 1149.19,684.296 1149.75,684.296 1150.31,684.296 1150.87,684.296 1151.43,684.296 1151.99,684.296 1152.55,684.296 1153.11,684.296 1153.67,684.296 1154.23,684.296 1154.78,684.296 1155.34,684.296 1155.9,684.296 1156.46,684.296 1157.02,684.296 1157.58,684.296 1158.14,684.296 1158.7,684.296 1159.26,684.296 1159.82,684.296 1160.38,684.296 1160.94,684.296 1161.5,684.296 1162.05,684.296 1162.61,684.296 1163.17,684.296 1163.73,684.296 1164.29,684.296 1164.85,684.296 1165.41,684.296 1165.97,684.296 1166.53,684.296 1167.09,684.296 1167.65,684.296 1168.21,684.296 1168.77,684.296 1169.33,684.296 1169.88,684.296 1170.44,684.296 1171,684.296 1171.56,684.296 1172.12,684.296 1172.68,684.296 1173.24,684.296 1173.8,684.296 1174.36,684.296 1174.92,684.296 1175.48,684.296 1176.04,684.296 1176.6,684.296 1177.15,684.296 1177.71,684.296 1178.27,684.296 1178.83,684.296 1179.39,684.296 1179.95,684.296 1180.51,684.296 1181.07,684.296 1181.63,684.296 1182.19,684.296 1182.75,684.296 1183.31,684.296 1183.87,684.296 1184.43,684.296 1184.98,684.296 1185.54,684.296 1186.1,684.296 1186.66,684.296 1187.22,684.296 1187.78,684.296 1188.34,684.296 1188.9,684.296 1189.46,684.296 1190.02,684.296 1190.58,684.296 1191.14,684.296 1191.7,684.296 1192.25,684.296 1192.81,684.296 1193.37,684.296 1193.93,684.296 1194.49,684.296 1195.05,684.296 1195.61,684.296 1196.17,684.296 1196.73,684.296 1197.29,684.296 1197.85,684.296 1198.41,684.296 1198.97,684.296 1199.52,684.296 1200.08,684.296 1200.64,684.296 1201.2,684.296 1201.76,684.296 1202.32,684.296 1202.88,684.296 1203.44,684.296 1204,684.296 1204.56,684.296 1205.12,684.296 1205.68,684.296 1206.24,684.296 1206.8,684.296 1207.35,684.296 1207.91,684.296 1208.47,684.296 1209.03,684.296 1209.59,684.296 1210.15,684.296 1210.71,684.296 1211.27,684.296 1211.83,684.296 1212.39,684.296 1212.95,684.296 1213.51,684.296 1214.07,684.296 1214.62,684.296 1215.18,684.296 1215.74,684.296 1216.3,684.296 1216.86,684.296 1217.42,684.296 1217.98,684.296 1218.54,684.296 1219.1,684.296 1219.66,684.296 1220.22,684.296 1220.78,684.296 1221.34,684.296 1221.89,684.296 1222.45,684.296 1223.01,684.296 1223.57,684.296 1224.13,684.296 1224.69,684.296 1225.25,684.296 1225.81,684.296 1226.37,684.296 1226.93,684.296 1227.49,684.296 1228.05,684.296 1228.61,684.296 1229.17,684.296 1229.72,684.296 1230.28,684.296 1230.84,684.296 1231.4,684.296 1231.96,684.296 1232.52,684.296 1233.08,684.296 1233.64,684.296 1234.2,684.296 1234.76,684.296 1235.32,684.296 1235.88,684.296 1236.44,684.296 1236.99,684.296 1237.55,684.296 1238.11,684.296 1238.67,684.296 1239.23,684.296 1239.79,684.296 1240.35,684.296 1240.91,684.296 1241.47,684.296 1242.03,684.296 1242.59,684.296 1243.15,684.296 1243.71,684.296 1244.26,684.296 1244.82,684.296 1245.38,684.296 1245.94,684.296 1246.5,684.296 1247.06,684.296 1247.62,684.296 1248.18,684.296 1248.74,684.296 1249.3,684.296 1249.86,684.296 1250.42,684.296 1250.98,684.296 1251.54,684.296 1252.09,684.296 1252.65,684.296 1253.21,684.296 1253.77,684.296 1254.33,684.296 1254.89,684.296 1255.45,684.296 1256.01,684.296 1256.57,684.296 1257.13,684.296 1257.69,684.296 1258.25,684.296 1258.81,684.296 1259.36,684.296 1259.92,684.296 1260.48,684.296 1261.04,684.296 1261.6,684.296 1262.16,684.296 1262.72,684.296 1263.28,684.296 1263.84,684.296 1264.4,684.296 1264.96,684.296 1265.52,684.296 1266.08,684.296 1266.63,684.296 1267.19,684.296 1267.75,684.296 1268.31,684.296 1268.87,684.296 1269.43,684.296 1269.99,684.296 1270.55,684.296 1271.11,684.296 1271.67,684.296 1272.23,684.296 1272.79,684.296 1273.35,684.296 1273.91,684.296 1274.46,684.296 1275.02,684.296 1275.58,684.296 1276.14,684.296 1276.7,684.296 1277.26,684.296 1277.82,684.296 1278.38,684.296 1278.94,684.296 1279.5,684.296 1280.06,684.296 1280.62,684.296 1281.18,684.296 1281.73,684.296 1282.29,684.296 1282.85,684.296 1283.41,684.296 1283.97,684.296 1284.53,684.296 1285.09,684.296 1285.65,684.296 1286.21,684.296 1286.77,684.296 1287.33,684.296 1287.89,684.296 1288.45,684.296 1289,684.296 1289.56,684.296 1290.12,684.296 1290.68,684.296 1291.24,684.296 1291.8,684.296 1292.36,684.296 1292.92,684.296 1293.48,684.296 1294.04,684.296 1294.6,684.296 1295.16,684.296 1295.72,684.296 1296.28,684.296 1296.83,684.296 1297.39,684.296 1297.95,684.296 1298.51,684.296 1299.07,684.296 1299.63,684.296 1300.19,684.296 1300.75,684.296 1301.31,684.296 1301.87,684.296 1302.43,684.296 1302.99,684.296 1303.55,684.296 1304.1,684.296 1304.66,684.296 1305.22,684.296 1305.78,684.296 1306.34,684.296 1306.9,684.296 1307.46,684.296 1308.02,684.296 1308.58,684.296 1309.14,684.296 1309.7,684.296 1310.26,684.296 1310.82,684.296 1311.38,684.296 1311.93,684.296 1312.49,684.296 1313.05,684.296 1313.61,684.296 1314.17,684.296 1314.73,684.296 1315.29,684.296 1315.85,684.296 1316.41,684.296 1316.97,684.296 1317.53,684.296 1318.09,684.296 1318.65,684.296 1319.2,684.296 1319.76,684.296 1320.32,684.296 1320.88,684.296 1321.44,684.296 1322,684.296 1322.56,684.296 1323.12,684.296 1323.68,684.296 1324.24,684.296 1324.8,684.296 1325.36,684.296 1325.92,684.296 1326.47,684.296 1327.03,684.296 1327.59,684.296 1328.15,684.296 1328.71,684.296 1329.27,684.296 1329.83,684.296 1330.39,684.296 1330.95,684.296 1331.51,684.296 1332.07,684.296 1332.63,684.296 1333.19,684.296 1333.75,684.296 1334.3,684.296 1334.86,684.296 1335.42,684.296 1335.98,684.296 1336.54,684.296 1337.1,684.296 1337.66,684.296 1338.22,684.296 1338.78,684.296 1339.34,684.296 1339.9,684.296 1340.46,684.296 1341.02,684.296 1341.57,684.296 1342.13,684.296 1342.69,684.296 1343.25,684.296 1343.81,684.296 1344.37,684.296 1344.93,684.296 1345.49,684.296 1346.05,684.296 1346.61,684.296 1347.17,684.296 1347.73,684.296 1348.29,684.296 1348.84,684.296 1349.4,684.296 1349.96,684.296 1350.52,684.296 1351.08,684.296 1351.64,684.296 1352.2,684.296 1352.76,684.296 1353.32,684.296 1353.88,684.296 1354.44,684.296 1355,684.296 1355.56,684.296 1356.12,684.296 1356.67,684.296 1357.23,684.296 1357.79,684.296 1358.35,684.296 1358.91,684.296 1359.47,684.296 1360.03,684.296 1360.59,684.296 1361.15,684.296 1361.71,684.296 1362.27,684.296 1362.83,684.296 1363.39,684.296 1363.94,684.296 1364.5,684.296 1365.06,684.296 1365.62,684.296 1366.18,684.296 1366.74,684.296 1367.3,684.296 1367.86,684.296 1368.42,684.296 1368.98,684.296 1369.54,684.296 1370.1,684.296 1370.66,684.296 1371.21,684.296 1371.77,684.296 1372.33,684.296 1372.89,684.296 1373.45,684.296 1374.01,684.296 1374.57,684.296 1375.13,684.296 1375.69,684.296 1376.25,684.296 1376.81,684.296 1377.37,684.296 1377.93,684.296 1378.49,684.296 1379.04,684.296 1379.6,684.296 1380.16,684.296 1380.72,684.296 1381.28,684.296 1381.84,684.296 1382.4,684.296 1382.96,684.296 1383.52,684.296 1384.08,684.296 1384.64,684.296 1385.2,684.296 1385.76,684.296 1386.31,684.296 1386.87,684.296 1387.43,684.296 1387.99,684.296 1388.55,684.296 1389.11,684.296 1389.67,684.296 1390.23,684.296 1390.79,684.296 1391.35,684.296 1391.91,684.296 1392.47,684.296 1393.03,684.296 1393.58,684.296 1394.14,684.296 1394.7,684.296 1395.26,684.296 1395.82,684.296 1396.38,684.296 1396.94,684.296 1397.5,684.296 1398.06,684.296 1398.62,684.296 1399.18,684.296 1399.74,684.296 1400.3,684.296 1400.86,684.296 1401.41,684.296 1401.97,684.296 1402.53,684.296 1403.09,684.296 1403.65,684.296 1404.21,684.296 1404.77,684.296 1405.33,684.296 1405.89,684.296 1406.45,684.296 1407.01,684.296 1407.57,684.296 1408.13,684.296 1408.68,684.296 1409.24,684.296 1409.8,684.296 1410.36,684.296 1410.92,684.296 1411.48,684.296 1412.04,684.296 1412.6,684.296 1413.16,684.296 1413.72,684.296 1414.28,684.296 1414.84,684.296 1415.4,684.296 1415.95,684.296 1416.51,684.296 1417.07,684.296 1417.63,684.296 1418.19,684.296 1418.75,684.296 1419.31,684.296 1419.87,684.296 1420.43,684.296 1420.99,684.296 1421.55,684.296 1422.11,684.296 1422.67,684.296 1423.23,684.296 1423.78,684.296 1424.34,684.296 1424.9,684.296 1425.46,684.296 1426.02,684.296 1426.58,684.296 1427.14,684.296 1427.7,684.296 1428.26,684.296 1428.82,684.296 1429.38,684.296 1429.94,684.296 1430.5,684.296 1431.05,684.296 1431.61,684.296 1432.17,684.296 1432.73,684.296 1433.29,684.296 1433.85,684.296 1434.41,684.296 1434.97,684.296 1435.53,684.296 1436.09,684.296 1436.65,684.296 1437.21,684.296 1437.77,684.296 1438.33,684.296 1438.88,684.296 1439.44,684.296 1440,684.296 1440.56,684.296 1441.12,684.296 1441.68,684.296 1442.24,684.296 1442.8,684.296 1443.36,684.296 1443.92,684.296 1444.48,684.296 1445.04,684.296 1445.6,684.296 1446.15,684.296 1446.71,684.296 1447.27,684.296 1447.83,684.296 1448.39,684.296 1448.95,684.296 1449.51,684.296 1450.07,684.296 1450.63,684.296 1451.19,684.296 1451.75,684.296 1452.31,684.296 1452.87,684.296 1453.42,684.296 1453.98,684.296 1454.54,684.296 1455.1,684.296 1455.66,684.296 1456.22,684.296 1456.78,684.296 1457.34,684.296 1457.9,684.296 1458.46,684.296 1459.02,684.296 1459.58,684.296 1460.14,684.296 1460.7,684.296 1461.25,684.296 1461.81,684.296 1462.37,684.296 1462.93,684.296 1463.49,684.296 1464.05,684.296 1464.61,684.296 1465.17,684.296 1465.73,684.296 1466.29,684.296 1466.85,684.296 1467.41,684.296 1467.97,684.296 1468.52,684.296 1469.08,684.296 1469.64,684.296 1470.2,684.296 1470.76,684.296 1471.32,684.296 1471.88,684.296 1472.44,684.296 1473,684.296 1473.56,684.296 1474.12,684.296 1474.68,684.296 1475.24,684.296 1475.79,684.296 1476.35,684.296 1476.91,684.296 1477.47,684.296 1478.03,684.296 1478.59,684.296 1479.15,684.296 1479.71,684.296 1480.27,684.296 1480.83,684.296 1481.39,684.296 1481.95,684.296 1482.51,684.296 1483.07,684.296 1483.62,684.296 1484.18,684.296 1484.74,684.296 1485.3,684.296 1485.86,684.296 1486.42,684.296 1486.98,684.296 1487.54,684.296 1488.1,684.296 1488.66,684.296 1489.22,684.296 1489.78,684.296 1490.34,684.296 1490.89,684.296 1491.45,684.296 1492.01,684.296 1492.57,684.296 1493.13,684.296 1493.69,684.296 1494.25,684.296 1494.81,684.296 1495.37,684.296 1495.93,684.296 1496.49,684.296 1497.05,684.296 1497.61,684.296 1498.16,684.296 1498.72,684.296 1499.28,684.296 1499.84,684.296 1500.4,684.296 1500.96,684.296 1501.52,684.296 1502.08,684.296 1502.64,684.296 1503.2,684.296 1503.76,684.296 1504.32,684.296 1504.88,684.296 1505.44,684.296 1505.99,684.296 1506.55,684.296 1507.11,684.296 1507.67,684.296 1508.23,684.296 1508.79,684.296 1509.35,684.296 1509.91,684.296 1510.47,684.296 1511.03,684.296 1511.59,684.296 1512.15,684.296 1512.71,684.296 1513.26,684.296 1513.82,684.296 1514.38,684.296 1514.94,684.296 1515.5,684.296 1516.06,684.296 1516.62,684.296 1517.18,684.296 1517.74,684.296 1518.3,684.296 1518.86,684.296 1519.42,684.296 1519.98,684.296 1520.53,684.296 1521.09,684.296 1521.65,684.296 1522.21,684.296 1522.77,684.296 1523.33,684.296 1523.89,684.296 1524.45,684.296 1525.01,684.296 1525.57,684.296 1526.13,684.296 1526.69,684.296 1527.25,684.296 1527.81,684.296 1528.36,684.296 1528.92,684.296 1529.48,684.296 1530.04,684.296 1530.6,684.296 1531.16,684.296 1531.72,684.296 1532.28,684.296 1532.84,684.296 1533.4,684.296 1533.96,684.296 1534.52,684.296 1535.08,684.296 1535.63,684.296 1536.19,684.296 1536.75,684.296 1537.31,684.296 1537.87,684.296 1538.43,684.296 1538.99,684.296 1539.55,684.296 1540.11,684.296 1540.67,684.296 1541.23,684.296 1541.79,684.296 1542.35,684.296 1542.9,684.296 1543.46,684.296 1544.02,684.296 1544.58,684.296 1545.14,684.296 1545.7,684.296 1546.26,684.296 1546.82,684.296 1547.38,684.296 1547.94,684.296 1548.5,684.296 1549.06,684.296 1549.62,684.296 1550.18,684.296 1550.73,684.296 1551.29,684.296 1551.85,684.296 1552.41,684.296 1552.97,684.296 1553.53,684.296 1554.09,684.296 1554.65,684.296 1555.21,684.296 1555.77,684.296 1556.33,684.296 1556.89,684.296 1557.45,684.296 1558,684.296 1558.56,684.296 1559.12,684.296 1559.68,684.296 1560.24,684.296 1560.8,684.296 1561.36,684.296 1561.92,684.296 1562.48,684.296 1563.04,684.296 1563.6,684.296 1564.16,684.296 1564.72,684.296 1565.28,684.296 1565.83,684.296 1566.39,684.296 1566.95,684.296 1567.51,684.296 1568.07,684.296 1568.63,684.296 1569.19,684.296 1569.75,684.296 1570.31,684.296 1570.87,684.296 1571.43,684.296 1571.99,684.296 1572.55,684.296 1573.1,684.296 1573.66,684.296 1574.22,684.296 1574.78,684.296 1575.34,684.296 1575.9,684.296 1576.46,684.296 1577.02,684.296 1577.58,684.296 1578.14,684.296 1578.7,684.296 1579.26,684.296 1579.82,684.296 1580.37,684.296 1580.93,684.296 1581.49,684.296 1582.05,684.296 1582.61,684.296 1583.17,684.296 1583.73,684.296 1584.29,684.296 1584.85,684.296 1585.41,684.296 1585.97,684.296 1586.53,684.296 1587.09,684.296 1587.65,684.296 1588.2,684.296 1588.76,684.296 1589.32,684.296 1589.88,684.296 1590.44,684.296 1591,684.296 1591.56,684.296 1592.12,684.296 1592.68,684.296 1593.24,684.296 1593.8,684.296 1594.36,684.296 1594.92,684.296 1595.47,684.296 1596.03,684.296 1596.59,684.296 1597.15,684.296 1597.71,684.296 1598.27,684.296 1598.83,684.296 1599.39,684.296 1599.95,684.296 1600.51,684.296 1601.07,684.296 1601.63,684.296 1602.19,684.296 1602.74,684.296 1603.3,684.296 1603.86,684.296 1604.42,684.296 1604.98,684.296 1605.54,684.296 1606.1,684.296 1606.66,684.296 1607.22,684.296 1607.78,684.296 1608.34,684.296 1608.9,684.296 1609.46,684.296 1610.02,684.296 1610.57,684.296 1611.13,684.296 1611.69,684.296 1612.25,684.296 1612.81,684.296 1613.37,684.296 1613.93,684.296 1614.49,684.296 1615.05,684.296 1615.61,684.296 1616.17,684.296 1616.73,684.296 1617.29,684.296 1617.84,684.296 1618.4,684.296 1618.96,684.296 1619.52,684.296 1620.08,684.296 1620.64,684.296 1621.2,684.296 1621.76,684.296 1622.32,684.296 1622.88,684.296 1623.44,684.296 1624,684.296 1624.56,684.296 1625.11,684.296 1625.67,684.296 1626.23,684.296 1626.79,684.296 1627.35,684.296 1627.91,684.296 1628.47,684.296 1629.03,684.296 1629.59,684.296 1630.15,684.296 1630.71,684.296 1631.27,684.296 1631.83,684.296 1632.39,684.296 1632.94,684.296 1633.5,684.296 1634.06,684.296 1634.62,684.296 1635.18,684.296 1635.74,684.296 1636.3,684.296 1636.86,684.296 1637.42,684.296 1637.98,684.296 1638.54,684.296 1639.1,684.296 1639.66,684.296 1640.21,684.296 1640.77,684.296 1641.33,684.296 1641.89,684.296 1642.45,684.296 1643.01,684.296 1643.57,684.296 1644.13,684.296 1644.69,684.296 1645.25,684.296 1645.81,684.296 1646.37,684.296 1646.93,684.296 1647.48,684.296 1648.04,684.296 1648.6,684.296 1649.16,684.296 1649.72,684.296 1650.28,684.296 1650.84,684.296 1651.4,684.296 1651.96,684.296 1652.52,684.296 1653.08,684.296 1653.64,684.296 1654.2,684.296 1654.76,684.296 1655.31,684.296 1655.87,684.296 1656.43,684.296 1656.99,684.296 1657.55,684.296 1658.11,684.296 1658.67,684.296 1659.23,684.296 1659.79,684.296 1660.35,684.296 1660.91,684.296 1661.47,684.296 1662.03,684.296 1662.58,684.296 1663.14,684.296 1663.7,684.296 1664.26,684.296 1664.82,684.296 1665.38,684.296 1665.94,684.296 1666.5,684.296 1667.06,684.296 1667.62,684.296 1668.18,684.296 1668.74,684.296 1669.3,684.296 1669.85,684.296 1670.41,684.296 1670.97,684.296 1671.53,684.296 1672.09,684.296 1672.65,684.296 1673.21,684.296 1673.77,684.296 1674.33,684.296 1674.89,684.296 1675.45,684.296 1676.01,684.296 1676.57,684.296 1677.13,684.296 1677.68,684.296 1678.24,684.296 1678.8,684.296 1679.36,684.296 1679.92,684.296 1680.48,684.296 1681.04,684.296 1681.6,684.296 1682.16,684.296 1682.72,684.296 1683.28,684.296 1683.84,684.296 1684.4,684.296 1684.95,684.296 1685.51,684.296 1686.07,684.296 1686.63,684.296 1687.19,684.296 1687.75,684.296 1688.31,684.296 1688.87,684.296 1689.43,684.296 1689.99,684.296 1690.55,684.296 1691.11,684.296 1691.67,684.296 1692.23,684.296 1692.78,684.296 1693.34,684.296 1693.9,684.296 1694.46,684.296 1695.02,684.296 1695.58,684.296 1696.14,684.296 1696.7,684.296 1697.26,684.296 1697.82,684.296 1698.38,684.296 1698.94,684.296 1699.5,684.296 1700.05,684.296 1700.61,684.296 1701.17,684.296 1701.73,684.296 1702.29,684.296 1702.85,684.296 1703.41,684.296 1703.97,684.296 1704.53,684.296 1705.09,684.296 1705.65,684.296 1706.21,684.296 1706.77,684.296 1707.32,684.296 1707.88,684.296 1708.44,684.296 1709,684.296 1709.56,684.296 1710.12,684.296 1710.68,684.296 1711.24,684.296 1711.8,684.296 1712.36,684.296 1712.92,684.296 1713.48,684.296 1714.04,684.296 1714.6,684.296 1715.15,684.296 1715.71,684.296 1716.27,684.296 1716.83,684.296 1717.39,684.296 1717.95,684.296 1718.51,684.296 1719.07,684.296 1719.63,684.296 1720.19,684.296 1720.75,684.296 1721.31,684.296 1721.87,684.296 1722.42,684.296 1722.98,684.296 1723.54,684.296 1724.1,684.296 1724.66,684.296 1725.22,684.296 1725.78,684.296 1726.34,684.296 1726.9,684.296 1727.46,684.296 1728.02,684.296 1728.58,684.296 1729.14,684.296 1729.69,684.296 1730.25,684.296 1730.81,684.296 1731.37,684.296 1731.93,684.296 1732.49,684.296 1733.05,684.296 1733.61,684.296 1734.17,684.296 1734.73,684.296 1735.29,684.296 1735.85,684.296 1736.41,684.296 1736.97,684.296 1737.52,684.296 1738.08,684.296 1738.64,684.296 1739.2,684.296 1739.76,684.296 1740.32,684.296 1740.88,684.296 1741.44,684.296 1742,684.296 1742.56,684.296 1743.12,684.296 1743.68,684.296 1744.24,684.296 1744.79,684.296 1745.35,684.296 1745.91,684.296 1746.47,684.296 1747.03,684.296 1747.59,684.296 1748.15,684.296 1748.71,684.296 1749.27,684.296 1749.83,684.296 1750.39,684.296 1750.95,684.296 1751.51,684.296 1752.06,684.296 1752.62,684.296 1753.18,684.296 1753.74,684.296 1754.3,684.296 1754.86,684.296 1755.42,684.296 1755.98,684.296 1756.54,684.296 1757.1,684.296 1757.66,684.296 1758.22,684.296 1758.78,684.296 1759.34,684.296 1759.89,684.296 1760.45,684.296 1761.01,684.296 1761.57,684.296 1762.13,684.296 1762.69,684.296 1763.25,684.296 1763.81,684.296 1764.37,684.296 1764.93,684.296 1765.49,684.296 1766.05,684.296 1766.61,684.296 1767.16,684.296 1767.72,684.296 1768.28,684.296 1768.84,684.296 1769.4,684.296 1769.96,684.296 1770.52,684.296 1771.08,684.296 1771.64,684.296 1772.2,684.296 1772.76,684.296 1773.32,684.296 1773.88,684.296 1774.43,684.296 1774.99,684.296 1775.55,684.296 1776.11,684.296 1776.67,684.296 1777.23,684.296 1777.79,684.296 1778.35,684.296 1778.91,684.296 1779.47,684.296 1780.03,684.296 1780.59,684.296 1781.15,684.296 1781.71,684.296 1782.26,684.296 1782.82,684.296 1783.38,684.296 1783.94,684.296 1784.5,684.296 1785.06,684.296 1785.62,684.296 1786.18,684.296 1786.74,684.296 1787.3,684.296 1787.86,684.296 1788.42,684.296 1788.98,684.296 1789.53,684.296 1790.09,684.296 1790.65,684.296 1791.21,684.296 1791.77,684.296 1792.33,684.296 1792.89,684.296 1793.45,684.296 1794.01,684.296 1794.57,684.296 1795.13,684.296 1795.69,684.296 1796.25,684.296 1796.8,684.296 1797.36,684.296 1797.92,684.296 1798.48,684.296 1799.04,684.296 1799.6,684.296 1800.16,684.296 1800.72,684.296 1801.28,684.296 1801.84,684.296 1802.4,684.296 1802.96,684.296 1803.52,684.296 1804.08,684.296 1804.63,684.296 1805.19,684.296 1805.75,684.296 1806.31,684.296 1806.87,684.296 1807.43,684.296 1807.99,684.296 1808.55,684.296 1809.11,684.296 1809.67,684.296 1810.23,684.296 1810.79,684.296 1811.35,684.296 1811.9,684.296 1812.46,684.296 1813.02,684.296 1813.58,684.296 1814.14,684.296 1814.7,684.296 1815.26,684.296 1815.82,684.296 1816.38,684.296 1816.94,684.296 1817.5,684.296 1818.06,684.296 1818.62,684.296 1819.18,684.296 1819.73,684.296 1820.29,684.296 1820.85,684.296 1821.41,684.296 1821.97,684.296 1822.53,684.296 1823.09,684.296 1823.65,684.296 1824.21,684.296 1824.77,684.296 1825.33,684.296 1825.89,684.296 1826.45,684.296 1827,684.296 1827.56,684.296 1828.12,684.296 1828.68,684.296 1829.24,684.296 1829.8,684.296 1830.36,684.296 1830.92,684.296 1831.48,684.296 1832.04,684.296 1832.6,684.296 1833.16,684.296 1833.72,684.296 1834.27,684.296 1834.83,684.296 1835.39,684.296 1835.95,684.296 1836.51,684.296 1837.07,684.296 1837.63,684.296 1838.19,684.296 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.029706270250286 ± 0.024927119684460923\nProjected Energy: -4.018665695757707 ± (0.0037587521142858904, 0.0035201643335973642)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.676689</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3917e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.148e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.117e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.423e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.695e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.045e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition : the boundary condition to apply. Can be one of :periodic, :twisted, or :hard_wall\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Tuple{SingleComponentFockAddress, Any, Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions can be periodic, pi-twisted and hard-wall.\n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
