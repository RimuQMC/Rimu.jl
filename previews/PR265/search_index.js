var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21263635431782607 ± 0.002169810078817436\n   G2(1) = 0.9168368085441586 ± 0.000863491735843842\n   G2(2) = 0.9816350899734598 ± 0.0008820343287921805\n   G2(3) = 0.990419848646938 ± 0.0010262331655386872\n   G2(4) = 0.9816350899734598 ± 0.0008820343287921805\n   G2(5) = 0.9168368085441586 ± 0.000863491735843842\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.005279579762487 ± 0.12149633578577655\n   Replica 2: -4.017070210744743 ± 0.13177905893765493\n   Replica 3: -4.075533685923794 ± 0.1205108360834485\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip030\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip030)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip031\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip030)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip032\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.05 2211.02,1003.05 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.266 2211.02,745.266 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.48 2211.02,487.48 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.693 2211.02,229.693 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.05 423.181,1003.05 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.266 423.181,745.266 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.48 423.181,487.48 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.693 423.181,229.693 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.75 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.75 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M290.043 1016.4 L306.363 1016.4 L306.363 1020.33 L284.418 1020.33 L284.418 1016.4 Q287.08 1013.64 291.664 1009.01 Q296.27 1004.36 297.451 1003.02 Q299.696 1000.5 300.576 998.759 Q301.478 997 301.478 995.31 Q301.478 992.556 299.534 990.819 Q297.613 989.083 294.511 989.083 Q292.312 989.083 289.858 989.847 Q287.427 990.611 284.65 992.162 L284.65 987.44 Q287.474 986.306 289.927 985.727 Q292.381 985.148 294.418 985.148 Q299.789 985.148 302.983 987.833 Q306.177 990.519 306.177 995.009 Q306.177 997.139 305.367 999.06 Q304.58 1000.96 302.474 1003.55 Q301.895 1004.22 298.793 1007.44 Q295.691 1010.63 290.043 1016.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M316.224 985.773 L334.58 985.773 L334.58 989.708 L320.506 989.708 L320.506 998.181 Q321.524 997.833 322.543 997.671 Q323.562 997.486 324.58 997.486 Q330.367 997.486 333.747 1000.66 Q337.126 1003.83 337.126 1009.25 Q337.126 1014.82 333.654 1017.93 Q330.182 1021 323.862 1021 Q321.687 1021 319.418 1020.63 Q317.173 1020.26 314.765 1019.52 L314.765 1014.82 Q316.849 1015.96 319.071 1016.51 Q321.293 1017.07 323.77 1017.07 Q327.774 1017.07 330.112 1014.96 Q332.45 1012.86 332.45 1009.25 Q332.45 1005.63 330.112 1003.53 Q327.774 1001.42 323.77 1001.42 Q321.895 1001.42 320.02 1001.84 Q318.168 1002.25 316.224 1003.13 L316.224 985.773 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M356.339 988.852 Q352.728 988.852 350.899 992.417 Q349.094 995.958 349.094 1003.09 Q349.094 1010.19 350.899 1013.76 Q352.728 1017.3 356.339 1017.3 Q359.973 1017.3 361.779 1013.76 Q363.608 1010.19 363.608 1003.09 Q363.608 995.958 361.779 992.417 Q359.973 988.852 356.339 988.852 M356.339 985.148 Q362.149 985.148 365.205 989.755 Q368.284 994.338 368.284 1003.09 Q368.284 1011.81 365.205 1016.42 Q362.149 1021 356.339 1021 Q350.529 1021 347.45 1016.42 Q344.395 1011.81 344.395 1003.09 Q344.395 994.338 347.45 989.755 Q350.529 985.148 356.339 985.148 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M286.062 727.986 L304.418 727.986 L304.418 731.922 L290.344 731.922 L290.344 740.394 Q291.363 740.046 292.381 739.884 Q293.4 739.699 294.418 739.699 Q300.205 739.699 303.585 742.871 Q306.964 746.042 306.964 751.458 Q306.964 757.037 303.492 760.139 Q300.02 763.218 293.701 763.218 Q291.525 763.218 289.256 762.847 Q287.011 762.477 284.603 761.736 L284.603 757.037 Q286.687 758.171 288.909 758.727 Q291.131 759.282 293.608 759.282 Q297.613 759.282 299.951 757.176 Q302.288 755.07 302.288 751.458 Q302.288 747.847 299.951 745.741 Q297.613 743.634 293.608 743.634 Q291.733 743.634 289.858 744.051 Q288.006 744.468 286.062 745.347 L286.062 727.986 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M326.177 731.065 Q322.566 731.065 320.737 734.63 Q318.932 738.171 318.932 745.301 Q318.932 752.408 320.737 755.972 Q322.566 759.514 326.177 759.514 Q329.811 759.514 331.617 755.972 Q333.446 752.408 333.446 745.301 Q333.446 738.171 331.617 734.63 Q329.811 731.065 326.177 731.065 M326.177 727.361 Q331.987 727.361 335.043 731.968 Q338.122 736.551 338.122 745.301 Q338.122 754.028 335.043 758.634 Q331.987 763.218 326.177 763.218 Q320.367 763.218 317.288 758.634 Q314.233 754.028 314.233 745.301 Q314.233 736.551 317.288 731.968 Q320.367 727.361 326.177 727.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M356.339 731.065 Q352.728 731.065 350.899 734.63 Q349.094 738.171 349.094 745.301 Q349.094 752.408 350.899 755.972 Q352.728 759.514 356.339 759.514 Q359.973 759.514 361.779 755.972 Q363.608 752.408 363.608 745.301 Q363.608 738.171 361.779 734.63 Q359.973 731.065 356.339 731.065 M356.339 727.361 Q362.149 727.361 365.205 731.968 Q368.284 736.551 368.284 745.301 Q368.284 754.028 365.205 758.634 Q362.149 763.218 356.339 763.218 Q350.529 763.218 347.45 758.634 Q344.395 754.028 344.395 745.301 Q344.395 736.551 347.45 731.968 Q350.529 727.361 356.339 727.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M284.835 470.2 L307.057 470.2 L307.057 472.19 L294.511 504.76 L289.627 504.76 L301.432 474.135 L284.835 474.135 L284.835 470.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M316.224 470.2 L334.58 470.2 L334.58 474.135 L320.506 474.135 L320.506 482.607 Q321.524 482.26 322.543 482.098 Q323.562 481.912 324.58 481.912 Q330.367 481.912 333.747 485.084 Q337.126 488.255 337.126 493.672 Q337.126 499.25 333.654 502.352 Q330.182 505.431 323.862 505.431 Q321.687 505.431 319.418 505.06 Q317.173 504.69 314.765 503.949 L314.765 499.25 Q316.849 500.385 319.071 500.94 Q321.293 501.496 323.77 501.496 Q327.774 501.496 330.112 499.389 Q332.45 497.283 332.45 493.672 Q332.45 490.061 330.112 487.954 Q327.774 485.848 323.77 485.848 Q321.895 485.848 320.02 486.264 Q318.168 486.681 316.224 487.561 L316.224 470.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M356.339 473.278 Q352.728 473.278 350.899 476.843 Q349.094 480.385 349.094 487.514 Q349.094 494.621 350.899 498.185 Q352.728 501.727 356.339 501.727 Q359.973 501.727 361.779 498.185 Q363.608 494.621 363.608 487.514 Q363.608 480.385 361.779 476.843 Q359.973 473.278 356.339 473.278 M356.339 469.575 Q362.149 469.575 365.205 474.181 Q368.284 478.764 368.284 487.514 Q368.284 496.241 365.205 500.848 Q362.149 505.431 356.339 505.431 Q350.529 505.431 347.45 500.848 Q344.395 496.241 344.395 487.514 Q344.395 478.764 347.45 474.181 Q350.529 469.575 356.339 469.575 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M256.664 243.038 L264.303 243.038 L264.303 216.672 L255.992 218.339 L255.992 214.079 L264.256 212.413 L268.932 212.413 L268.932 243.038 L276.571 243.038 L276.571 246.973 L256.664 246.973 L256.664 243.038 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M296.015 215.491 Q292.404 215.491 290.576 219.056 Q288.77 222.598 288.77 229.727 Q288.77 236.834 290.576 240.399 Q292.404 243.94 296.015 243.94 Q299.65 243.94 301.455 240.399 Q303.284 236.834 303.284 229.727 Q303.284 222.598 301.455 219.056 Q299.65 215.491 296.015 215.491 M296.015 211.788 Q301.826 211.788 304.881 216.394 Q307.96 220.977 307.96 229.727 Q307.96 238.454 304.881 243.061 Q301.826 247.644 296.015 247.644 Q290.205 247.644 287.127 243.061 Q284.071 238.454 284.071 229.727 Q284.071 220.977 287.127 216.394 Q290.205 211.788 296.015 211.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M326.177 215.491 Q322.566 215.491 320.737 219.056 Q318.932 222.598 318.932 229.727 Q318.932 236.834 320.737 240.399 Q322.566 243.94 326.177 243.94 Q329.811 243.94 331.617 240.399 Q333.446 236.834 333.446 229.727 Q333.446 222.598 331.617 219.056 Q329.811 215.491 326.177 215.491 M326.177 211.788 Q331.987 211.788 335.043 216.394 Q338.122 220.977 338.122 229.727 Q338.122 238.454 335.043 243.061 Q331.987 247.644 326.177 247.644 Q320.367 247.644 317.288 243.061 Q314.233 238.454 314.233 229.727 Q314.233 220.977 317.288 216.394 Q320.367 211.788 326.177 211.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M356.339 215.491 Q352.728 215.491 350.899 219.056 Q349.094 222.598 349.094 229.727 Q349.094 236.834 350.899 240.399 Q352.728 243.94 356.339 243.94 Q359.973 243.94 361.779 240.399 Q363.608 236.834 363.608 229.727 Q363.608 222.598 361.779 219.056 Q359.973 215.491 356.339 215.491 M356.339 211.788 Q362.149 211.788 365.205 216.394 Q368.284 220.977 368.284 229.727 Q368.284 238.454 365.205 243.061 Q362.149 247.644 356.339 247.644 Q350.529 247.644 347.45 243.061 Q344.395 238.454 344.395 229.727 Q344.395 220.977 347.45 216.394 Q350.529 211.788 356.339 211.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip032)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.693 4017.76,229.693 \"/>\n<polyline clip-path=\"url(#clip032)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.34 457.123,1249.18 457.691,1248.96 458.259,1248.66 458.828,1247.27 459.396,1246.85 459.964,1246.39 460.533,1244.76 461.101,1244.17 461.669,1243.49 462.238,1242.71 462.806,1241.86 463.375,1240.92 463.943,1239.86 464.511,1237.69 465.08,1236.5 465.648,1234.16 466.216,1232.73 466.785,1231.18 467.353,1229.52 467.921,1227.74 468.49,1225.81 469.058,1222.72 469.626,1220.5 470.195,1218.06 470.763,1214.46 471.331,1210.68 471.9,1207.74 472.468,1204.65 473.036,1200.32 473.605,1195.8 474.173,1192.14 474.741,1188.28 475.31,1184.22 475.878,1178.93 476.446,1174.41 477.015,1168.71 477.583,1163.73 478.152,1158.63 478.72,1153.27 479.288,1146.72 479.857,1141 480.425,1134.07 480.993,1125.73 481.562,1119.18 482.13,1112.34 482.698,1102.38 483.267,1094.19 483.835,1086.82 484.403,1078.35 484.972,1070.7 485.54,1061.8 486.108,1053.75 486.677,1045.48 487.245,1036.06 487.813,1025.44 488.382,1015.51 488.95,1005.42 489.518,996.276 490.087,986.959 490.655,976.595 491.224,966.079 491.792,955.547 492.36,945.927 492.929,933.142 493.497,923.357 494.065,911.414 494.634,901.621 495.202,890.658 495.77,879.631 496.339,866.497 496.907,853.492 497.475,843.566 498.044,831.622 498.612,820.815 499.18,810.969 499.749,797.073 500.317,784.43 500.885,772.157 501.454,761.964 502.022,751.906 502.59,741.789 503.159,731.704 503.727,722.647 504.295,711.756 504.864,699.9 505.432,691.228 506.001,680.577 506.569,671.184 507.137,659.821 507.706,648.721 508.274,638.757 508.842,630.96 509.411,621.23 509.979,610.633 510.547,602.337 511.116,594.976 511.684,587.848 512.252,580.844 512.821,573.838 513.389,562.703 513.957,554.983 514.526,546.072 515.094,539.697 515.662,530.188 516.231,522.994 516.799,515.996 517.367,508.071 517.936,498.279 518.504,491.856 519.072,484.358 519.641,477.349 520.209,471.604 520.778,465.664 521.346,459.031 521.914,451.459 522.483,447.392 523.051,441.129 523.619,435.049 524.188,428.156 524.756,422.773 525.324,418.595 525.893,413.3 526.461,411.332 527.029,406.147 527.598,400.078 528.166,397.191 528.734,393.126 529.303,389.436 529.871,388.759 530.439,385.025 531.008,379.457 531.576,376.141 532.144,372.962 532.713,368.615 533.281,364.144 533.85,363.01 534.418,360.828 534.986,351.356 535.555,348.543 536.123,345.819 536.691,343.07 537.26,339.469 537.828,336.822 538.396,335.403 538.965,334.176 539.533,331.588 540.101,325.117 540.67,323.886 541.238,322.634 541.806,322.658 542.375,323.528 542.943,321.996 543.511,317.58 544.08,315.431 544.648,311.175 545.216,310.344 545.785,308.194 546.353,305.373 546.921,304.512 547.49,304.562 548.058,304.59 548.627,306.678 549.195,305.365 549.763,303.384 550.332,302.391 550.9,300.367 551.468,302.292 552.037,301.141 552.605,297.864 553.173,294.716 553.742,293.781 554.31,293.58 554.878,292.715 555.447,291.69 556.015,291.593 556.583,290.336 557.152,288.221 557.72,286.225 558.288,287.186 558.857,282.966 559.425,282.142 559.993,278.415 560.562,276.734 561.13,273.408 561.698,271.155 562.267,272.888 562.835,271.362 563.404,269.986 563.972,268.586 564.54,265.233 565.109,266.316 565.677,265.271 566.245,265.131 566.814,266.042 567.382,263.654 567.95,260.357 568.519,259.457 569.087,258.449 569.655,257.641 570.224,258.97 570.792,260.259 571.36,259.135 571.929,259.097 572.497,258.362 573.065,258.364 573.634,259.445 574.202,259.356 574.77,260.221 575.339,258.974 575.907,257.844 576.476,256.601 577.044,254.637 577.612,254.617 578.181,254.783 578.749,252.621 579.317,254.775 579.886,254.816 580.454,253.632 581.022,253.713 581.591,254.769 582.159,253.407 582.727,254.55 583.296,254.37 583.864,253.224 584.432,253.17 585.001,252.024 585.569,248.809 586.137,248.96 586.706,247.158 587.274,247.233 587.842,246.663 588.411,246.893 588.979,248.052 589.547,248.128 590.116,250.304 590.684,249.191 591.253,249.345 591.821,249.197 592.389,247.052 592.958,247.142 593.526,247.353 594.094,245.461 594.663,243.518 595.231,243.756 595.799,242.936 596.368,243.291 596.936,240.496 597.504,242.988 598.073,246.291 598.641,246.118 599.209,244.909 599.778,244.977 600.346,245.044 600.914,243.035 601.483,242.222 602.051,242.308 602.619,241.429 603.188,241.749 603.756,241.815 604.325,242.153 604.893,245.352 605.461,245.121 606.03,244.048 606.598,245.273 607.166,242.147 607.735,242.322 608.303,240.311 608.871,239.641 609.44,240.924 610.008,240.935 610.576,241.196 611.145,241.421 611.713,241.571 612.281,238.652 612.85,239.983 613.418,240.188 613.986,236.388 614.555,233.751 615.123,235.449 615.691,231.795 616.26,233.623 616.828,234.227 617.396,234.938 617.965,235.429 618.533,236.905 619.102,239.121 619.67,237.147 620.238,235.648 620.807,237.024 621.375,235.469 621.943,236.004 622.512,236.601 623.08,238.284 623.648,239.87 624.217,239.98 624.785,239.158 625.353,236.988 625.922,233.206 626.49,231.927 627.058,234.867 627.627,234.367 628.195,235.959 628.763,234.304 629.332,233.792 629.9,233.238 630.468,233.557 631.037,231.793 631.605,232.47 632.173,231.071 632.742,229.555 633.31,233.386 633.879,236.657 634.447,235.852 635.015,236.298 635.584,237.624 636.152,236.726 636.72,236.962 637.289,239.196 637.857,240.264 638.425,241.498 638.994,241.392 639.562,241.251 640.13,242.151 640.699,242.943 641.267,242.48 641.835,242.239 642.404,243.076 642.972,241.915 643.54,242.754 644.109,242.648 644.677,242.532 645.245,242.477 645.814,242.127 646.382,243.959 646.951,244.686 647.519,244.223 648.087,242.954 648.656,242.519 649.224,243.149 649.792,246.817 650.361,247.185 650.929,246.352 651.497,246.571 652.066,244.811 652.634,243.237 653.202,243.594 653.771,240.802 654.339,238.384 654.907,238.04 655.476,237.786 656.044,238.673 656.612,237.317 657.181,235.174 657.749,236.314 658.317,235.257 658.886,234.469 659.454,233.482 660.022,233.679 660.591,234.971 661.159,234.886 661.728,233.932 662.296,235.956 662.864,234.971 663.433,233.014 664.001,232.323 664.569,232.523 665.138,232.659 665.706,231.781 666.274,231.018 666.843,231.456 667.411,231.721 667.979,231.778 668.548,230.966 669.116,232.342 669.684,233.269 670.253,234.951 670.821,234.891 671.389,234.745 671.958,233.799 672.526,234.534 673.094,236.604 673.663,234.512 674.231,232.471 674.799,234.631 675.368,234.609 675.936,233.494 676.505,233.429 677.073,233.358 677.641,234.328 678.21,237.345 678.778,237.13 679.346,236.634 679.915,233.593 680.483,233.461 681.051,232.289 681.62,231.101 682.188,234.119 682.756,230.949 683.325,230.218 683.893,231.502 684.461,230.823 685.03,232.038 685.598,231.066 686.166,232.15 686.735,232.199 687.303,233.352 687.871,232.455 688.44,232.543 689.008,230.264 689.577,230.675 690.145,230.797 690.713,232.043 691.282,233.206 691.85,233.317 692.418,234.401 692.987,235.341 693.555,234.935 694.123,235.684 694.692,235.569 695.26,235.341 695.828,234.103 696.397,232.981 696.965,232.896 697.533,234.039 698.102,234.076 698.67,235.045 699.238,232.663 699.807,233.697 700.375,231.563 700.943,231.562 701.512,230.515 702.08,231.655 702.648,229.861 703.217,229.324 703.785,229.663 704.354,229.776 704.922,231.967 705.49,231.254 706.059,230.54 706.627,229.478 707.195,229.838 707.764,231.128 708.332,229.416 708.9,229.73 709.469,230.278 710.037,229.486 710.605,230.92 711.174,229.054 711.742,229.422 712.31,229.651 712.879,226.618 713.447,230.225 714.015,230.349 714.584,230.643 715.152,230.047 715.72,229.115 716.289,229.409 716.857,229.439 717.425,228.923 717.994,230.215 718.562,229.475 719.131,227.705 719.699,229.119 720.267,227.593 720.836,227.071 721.404,227.735 721.972,227.24 722.541,228.677 723.109,230.234 723.677,229.356 724.246,228.733 724.814,229.04 725.382,228.375 725.951,229.867 726.519,227.987 727.087,229.508 727.656,231.93 728.224,232.093 728.792,233.181 729.361,234.49 729.929,233.271 730.497,232.106 731.066,232.463 731.634,233.666 732.203,233.832 732.771,231.758 733.339,230.968 733.908,232.197 734.476,232.4 735.044,232.441 735.613,230.612 736.181,230.623 736.749,230.998 737.318,231.046 737.886,230.277 738.454,229.822 739.023,231.12 739.591,231.219 740.159,232.347 740.728,231.451 741.296,231.723 741.864,233.805 742.433,232.675 743.001,232.847 743.569,234.975 744.138,236.167 744.706,235.044 745.274,234.914 745.843,232.671 746.411,232.592 746.98,231.6 747.548,232.704 748.116,231.713 748.685,230.771 749.253,228.794 749.821,228.089 750.39,230.279 750.958,230.366 751.526,228.558 752.095,227.989 752.663,227.42 753.231,227.907 753.8,228.443 754.368,228.666 754.936,228.885 755.505,230.158 756.073,231.367 756.641,231.47 757.21,231.593 757.778,233.741 758.346,235.925 758.915,236.697 759.483,236.418 760.052,238.143 760.62,237.805 761.188,238.514 761.757,238.22 762.325,239.826 762.893,239.231 763.462,238.702 764.03,238.22 764.598,237.602 765.167,238.254 765.735,238.87 766.303,238.279 766.872,236.009 767.44,236.601 768.008,233.26 768.577,234.111 769.145,235.93 769.713,237.905 770.282,239.305 770.85,237.687 771.418,237 771.987,234.546 772.555,233.177 773.123,232 773.692,230.849 774.26,229.62 774.829,230.764 775.397,230.952 775.965,229.902 776.534,229.003 777.102,229.097 777.67,228.356 778.239,227.592 778.807,226.819 779.375,229.132 779.944,229.16 780.512,227.25 781.08,226.443 781.649,225.669 782.217,224.847 782.785,225.39 783.354,225.948 783.922,228.483 784.49,227.71 785.059,227.062 785.627,228.567 786.195,228.684 786.764,229.692 787.332,229.973 787.9,230.135 788.469,233.074 789.037,233.908 789.606,233.654 790.174,235.375 790.742,234.112 791.311,232.934 791.879,233.757 792.447,234.73 793.016,233.332 793.584,235.212 794.152,233.97 794.721,233.612 795.289,233.61 795.857,234.262 796.426,231.998 796.994,235.117 797.562,235.699 798.131,236.297 798.699,234.008 799.267,232.857 799.836,233.694 800.404,234.484 800.972,234.054 801.541,233.775 802.109,234.621 802.678,235.529 803.246,236.231 803.814,236.731 804.383,236.26 804.951,234.644 805.519,235.464 806.088,235.109 806.656,234.634 807.224,233.148 807.793,233.935 808.361,233.592 808.929,234.331 809.498,231.97 810.066,230.631 810.634,228.354 811.203,229.296 811.771,231.398 812.339,229.419 812.908,230.385 813.476,230.343 814.044,229.972 814.613,228.919 815.181,229.198 815.749,229.079 816.318,228.846 816.886,223.833 817.455,225.488 818.023,225.881 818.591,226.155 819.16,226.479 819.728,227.987 820.296,228.058 820.865,229.188 821.433,228.209 822.001,226.403 822.57,225.486 823.138,226.018 823.706,227.261 824.275,227.322 824.843,231.496 825.411,231.231 825.98,231.323 826.548,232.127 827.116,229.907 827.685,231.887 828.253,232.887 828.821,233.869 829.39,233.494 829.958,235.273 830.526,234.74 831.095,234.256 831.663,232.862 832.232,232.475 832.8,232.291 833.368,232.023 833.937,229.574 834.505,230.556 835.073,230.503 835.642,229.543 836.21,230.611 836.778,230.217 837.347,230.195 837.915,229.125 838.483,229.174 839.052,230.151 839.62,230.147 840.188,228.129 840.757,225.106 841.325,224.281 841.893,223.485 842.462,221.852 843.03,221.012 843.598,221.501 844.167,222.178 844.735,224.924 845.304,226.255 845.872,228.548 846.44,230.498 847.009,228.294 847.577,227.319 848.145,226.421 848.714,227.802 849.282,229.013 849.85,231.162 850.419,231.087 850.987,230.026 851.555,227.988 852.124,227.17 852.692,227.185 853.26,228.417 853.829,227.45 854.397,226.582 854.965,226.848 855.534,227.117 856.102,227.456 856.67,227.85 857.239,229.046 857.807,230.054 858.375,229.234 858.944,229.32 859.512,230.519 860.081,229.604 860.649,227.883 861.217,226.189 861.786,226.726 862.354,230.133 862.922,229.291 863.491,228.401 864.059,229.485 864.627,228.588 865.196,228.798 865.764,226.904 866.332,227.105 866.901,227.455 867.469,228.956 868.037,227.94 868.606,228.131 869.174,228.616 869.742,229.029 870.311,228.216 870.879,226.567 871.447,226.901 872.016,227.179 872.584,228.589 873.152,229.729 873.721,229.769 874.289,228.897 874.858,228.133 875.426,227.472 875.994,228.672 876.563,229.159 877.131,229.264 877.699,226.473 878.268,226.023 878.836,226.255 879.404,226.986 879.973,228.403 880.541,227.656 881.109,227.829 881.678,231.237 882.246,230.265 882.814,229.521 883.383,231.75 883.951,233.928 884.519,233.988 885.088,232.017 885.656,233.207 886.224,233.187 886.793,233.288 887.361,232.132 887.93,232.307 888.498,234.666 889.066,233.585 889.635,233.505 890.203,233.408 890.771,232.403 891.34,233.427 891.908,236.47 892.476,236.152 893.045,232.635 893.613,233.625 894.181,233.517 894.75,232.404 895.318,233.125 895.886,231.957 896.455,232.731 897.023,232.548 897.591,231.469 898.16,231.28 898.728,233.319 899.296,235.359 899.865,235.019 900.433,236.804 901.001,235.162 901.57,232.775 902.138,232.561 902.707,231.534 903.275,231.501 903.843,229.409 904.412,230.489 904.98,228.569 905.548,230.55 906.117,229.534 906.685,227.642 907.253,225.747 907.822,223.809 908.39,222.214 908.958,224.711 909.527,227.005 910.095,224.163 910.663,225.82 911.232,224.112 911.8,223.554 912.368,226.274 912.937,225.515 913.505,227.071 914.073,229.215 914.642,230.357 915.21,232.341 915.779,235.509 916.347,235.318 916.915,237.032 917.484,235.474 918.052,237.065 918.62,235.384 919.189,236.202 919.757,235.784 920.325,234.355 920.894,236.141 921.462,236.751 922.03,233.275 922.599,234.047 923.167,235.827 923.735,234.289 924.304,233.739 924.872,232.405 925.44,232.177 926.009,231.814 926.577,233.629 927.145,231.176 927.714,232.268 928.282,233.047 928.85,232.831 929.419,232.678 929.987,231.659 930.556,232.441 931.124,233.442 931.692,234.271 932.261,234.005 932.829,235.741 933.397,235.303 933.966,235.972 934.534,233.266 935.102,232.864 935.671,234.609 936.239,234.177 936.807,230.585 937.376,230.628 937.944,231.436 938.512,233.231 939.081,232.907 939.649,230.555 940.217,228.409 940.786,230.448 941.354,230.318 941.922,230.314 942.491,230.15 943.059,228.036 943.627,227.101 944.196,224.197 944.764,223.601 945.333,224.165 945.901,226.578 946.469,224.922 947.038,223.165 947.606,224.602 948.174,226.105 948.743,224.068 949.311,225.281 949.879,225.594 950.448,224.713 951.016,224.913 951.584,225.233 952.153,227.717 952.721,227.844 953.289,228.02 953.858,230.176 954.426,229.181 954.994,230.413 955.563,228.152 956.131,226.213 956.699,225.474 957.268,225.748 957.836,228.026 958.405,230.351 958.973,231.283 959.541,232.438 960.11,231.241 960.678,234.328 961.246,232.944 961.815,230.797 962.383,230.812 962.951,231.859 963.52,231.656 964.088,232.488 964.656,231.278 965.225,232.446 965.793,232.268 966.361,234.211 966.93,240.041 967.498,239.484 968.066,238.758 968.635,238.394 969.203,237.769 969.771,236.07 970.34,234.511 970.908,231.881 971.476,230.719 972.045,230.386 972.613,232.35 973.182,232.095 973.75,228.68 974.318,230.885 974.887,231.831 975.455,229.622 976.023,231.495 976.592,232.382 977.16,231.153 977.728,230.996 978.297,231.985 978.865,231.741 979.433,231.608 980.002,232.536 980.57,230.981 981.138,233.038 981.707,234.643 982.275,235.146 982.843,233.513 983.412,231.111 983.98,230.827 984.548,229.674 985.117,231.693 985.685,231.227 986.253,230.123 986.822,230.04 987.39,230.102 987.959,231.125 988.527,229.955 989.095,229.772 989.664,230.765 990.232,231.576 990.8,231.162 991.369,228.923 991.937,228.929 992.505,229.837 993.074,229.815 993.642,229.79 994.21,229.414 994.779,228.414 995.347,228.208 995.915,228.208 996.484,229.129 997.052,229.071 997.62,227.044 998.189,227.292 998.757,227.45 999.325,227.669 999.894,227.591 1000.46,228.703 1001.03,226.771 1001.6,224.936 1002.17,225.181 1002.74,226.373 1003.3,224.45 1003.87,223.904 1004.44,224.362 1005.01,225.728 1005.58,226.046 1006.15,226.189 1006.71,226.277 1007.28,224.527 1007.85,225.915 1008.42,224.217 1008.99,224.543 1009.56,223.783 1010.12,224.358 1010.69,225.749 1011.26,227.268 1011.83,227.286 1012.4,229.364 1012.97,229.635 1013.53,231.652 1014.1,231.465 1014.67,229.257 1015.24,229.422 1015.81,228.358 1016.38,227.745 1016.94,225.942 1017.51,227.15 1018.08,225.211 1018.65,226.652 1019.22,227.973 1019.79,229.05 1020.35,228.783 1020.92,227.755 1021.49,229.183 1022.06,229.199 1022.63,227.166 1023.2,226.475 1023.76,226.771 1024.33,228.095 1024.9,228.01 1025.47,230.123 1026.04,231.279 1026.61,230.141 1027.17,232.169 1027.74,235.846 1028.31,235.366 1028.88,235.08 1029.45,232.736 1030.02,231.457 1030.58,231.656 1031.15,232.603 1031.72,232.522 1032.29,232.425 1032.86,233.046 1033.43,233.648 1033.99,232.239 1034.56,231.085 1035.13,230.084 1035.7,228.144 1036.27,229.559 1036.84,229.671 1037.4,230.675 1037.97,233.635 1038.54,234.47 1039.11,234.208 1039.68,233.929 1040.25,234.583 1040.81,232.082 1041.38,232.867 1041.95,233.711 1042.52,233.604 1043.09,233.241 1043.66,236 1044.22,234.485 1044.79,232.988 1045.36,231.672 1045.93,232.396 1046.5,235.106 1047.07,234.511 1047.63,233.939 1048.2,233.683 1048.77,236.353 1049.34,233.531 1049.91,234.194 1050.48,230.685 1051.05,228.458 1051.61,225.479 1052.18,225.608 1052.75,225.641 1053.32,225.778 1053.89,225.306 1054.46,224.583 1055.02,226.868 1055.59,225.148 1056.16,225.402 1056.73,225.57 1057.3,228.155 1057.87,227.38 1058.43,228.507 1059,228.199 1059.57,228.433 1060.14,228.516 1060.71,227.68 1061.28,227.719 1061.84,228.621 1062.41,226.312 1062.98,225.454 1063.55,225.571 1064.12,224.981 1064.69,224.102 1065.25,221.212 1065.82,225.044 1066.39,224.357 1066.96,223.765 1067.53,224.243 1068.1,224.718 1068.66,223.12 1069.23,221.824 1069.8,222.534 1070.37,224.264 1070.94,224.601 1071.51,224.157 1072.07,225.756 1072.64,227.159 1073.21,226.691 1073.78,225.148 1074.35,223.381 1074.92,223.718 1075.48,224.263 1076.05,226.692 1076.62,227.82 1077.19,227.029 1077.76,228.53 1078.33,227.792 1078.89,227.031 1079.46,227.282 1080.03,225.459 1080.6,223.775 1081.17,224.329 1081.74,224.956 1082.3,224.529 1082.87,224.999 1083.44,226.424 1084.01,225.706 1084.58,225.31 1085.15,224.652 1085.71,226.373 1086.28,226.99 1086.85,230.535 1087.42,231.839 1087.99,233.23 1088.56,232.062 1089.12,232.843 1089.69,232.744 1090.26,234.798 1090.83,234.79 1091.4,232.529 1091.97,232.633 1092.53,232.561 1093.1,232.48 1093.67,232.596 1094.24,233.823 1094.81,234.705 1095.38,234.551 1095.94,230.038 1096.51,228.029 1097.08,225.461 1097.65,226.886 1098.22,226.267 1098.79,227.539 1099.35,226.771 1099.92,225.212 1100.49,221.373 1101.06,223.064 1101.63,224.665 1102.2,225.221 1102.76,227.041 1103.33,228.486 1103.9,227.765 1104.47,226.076 1105.04,229.43 1105.61,228.753 1106.17,230.151 1106.74,232.486 1107.31,233.532 1107.88,229.334 1108.45,229.762 1109.02,229.929 1109.58,229.186 1110.15,227.741 1110.72,229.123 1111.29,229.454 1111.86,229.617 1112.43,227.626 1112.99,227.686 1113.56,230.023 1114.13,231.318 1114.7,234.567 1115.27,236.407 1115.84,238.154 1116.4,238.65 1116.97,239.117 1117.54,237.563 1118.11,238.029 1118.68,237.537 1119.25,236.194 1119.81,236.902 1120.38,236.595 1120.95,236.049 1121.52,234.798 1122.09,235.549 1122.66,235.034 1123.23,235.681 1123.79,233.374 1124.36,235.332 1124.93,235.862 1125.5,234.324 1126.07,237.269 1126.64,235.574 1127.2,234.101 1127.77,233.985 1128.34,233.702 1128.91,236.63 1129.48,235.032 1130.05,235.62 1130.61,236.094 1131.18,235.646 1131.75,236.12 1132.32,234.687 1132.89,234.182 1133.46,231.835 1134.02,232.74 1134.59,233.399 1135.16,230.955 1135.73,231.79 1136.3,230.698 1136.87,230.504 1137.43,231.317 1138,232.206 1138.57,225.932 1139.14,225.325 1139.71,225.461 1140.28,226.951 1140.84,227.307 1141.41,229.525 1141.98,229.334 1142.55,228.507 1143.12,226.327 1143.69,226.362 1144.25,223.731 1144.82,221.164 1145.39,222.862 1145.96,223.364 1146.53,222.529 1147.1,226.142 1147.66,228.481 1148.23,227.805 1148.8,227.934 1149.37,227.947 1149.94,230.832 1150.51,230.66 1151.07,230.764 1151.64,230.501 1152.21,228.506 1152.78,227.684 1153.35,227.757 1153.92,231.915 1154.48,231.886 1155.05,231.767 1155.62,232.423 1156.19,230.413 1156.76,230.34 1157.33,232.305 1157.89,234.208 1158.46,235.073 1159.03,234.691 1159.6,234.227 1160.17,235.793 1160.74,235.512 1161.3,237.004 1161.87,236.211 1162.44,234.632 1163.01,233.168 1163.58,232.882 1164.15,230.246 1164.71,230.004 1165.28,228.912 1165.85,230.103 1166.42,232.095 1166.99,232.852 1167.56,229.385 1168.12,227.479 1168.69,227.611 1169.26,228.636 1169.83,229.673 1170.4,229.66 1170.97,230.305 1171.53,229.538 1172.1,230.665 1172.67,228.621 1173.24,228.592 1173.81,228.666 1174.38,229.698 1174.94,228.567 1175.51,226.64 1176.08,224.923 1176.65,225.136 1177.22,226.404 1177.79,226.514 1178.35,229.773 1178.92,229.768 1179.49,229.974 1180.06,231.758 1180.63,233.636 1181.2,234.442 1181.76,234.998 1182.33,235.847 1182.9,234.512 1183.47,234.246 1184.04,233.808 1184.61,233.392 1185.17,233.196 1185.74,231.899 1186.31,231.699 1186.88,231.712 1187.45,231.404 1188.02,232.065 1188.58,231.776 1189.15,230.416 1189.72,229.194 1190.29,228.23 1190.86,229.239 1191.43,228.307 1192,226.469 1192.56,225.54 1193.13,224.762 1193.7,226.194 1194.27,228.502 1194.84,228.358 1195.41,229.323 1195.97,231.435 1196.54,231.258 1197.11,231.186 1197.68,231.183 1198.25,230.828 1198.82,229.539 1199.38,231.502 1199.95,230.459 1200.52,232.572 1201.09,232.181 1201.66,231.789 1202.23,232.495 1202.79,233.305 1203.36,232.93 1203.93,231.535 1204.5,232.371 1205.07,231.257 1205.64,230.985 1206.2,230.689 1206.77,232.821 1207.34,230.471 1207.91,230.245 1208.48,230.125 1209.05,229.742 1209.61,228.503 1210.18,229.645 1210.75,228.747 1211.32,229.633 1211.89,230.598 1212.46,230.471 1213.02,230.307 1213.59,231.389 1214.16,230.232 1214.73,230.034 1215.3,229.87 1215.87,230.869 1216.43,231.739 1217,231.386 1217.57,231.242 1218.14,231.252 1218.71,229.061 1219.28,229.246 1219.84,228.128 1220.41,228.104 1220.98,228.134 1221.55,228.039 1222.12,228.029 1222.69,227.906 1223.25,227.902 1223.82,229.863 1224.39,230.496 1224.96,230.225 1225.53,231.093 1226.1,230.89 1226.66,230.85 1227.23,229.825 1227.8,228.592 1228.37,229.576 1228.94,228.362 1229.51,230.396 1230.07,230.361 1230.64,230.112 1231.21,230.037 1231.78,227.828 1232.35,230.049 1232.92,230.087 1233.48,229.933 1234.05,232.824 1234.62,232.363 1235.19,228.893 1235.76,227.965 1236.33,226.883 1236.89,229.107 1237.46,229.152 1238.03,228.022 1238.6,227.946 1239.17,227.845 1239.74,226.943 1240.3,229.1 1240.87,231.205 1241.44,229.866 1242.01,230.753 1242.58,229.551 1243.15,229.36 1243.71,229.46 1244.28,229.421 1244.85,229.267 1245.42,228.059 1245.99,226.975 1246.56,227.786 1247.12,227.124 1247.69,226.252 1248.26,228.398 1248.83,229.469 1249.4,228.401 1249.97,227.682 1250.53,227.716 1251.1,228.813 1251.67,229.831 1252.24,228.779 1252.81,228.616 1253.38,226.693 1253.94,225.845 1254.51,227.183 1255.08,226.27 1255.65,224.287 1256.22,222.575 1256.79,225.262 1257.35,227.642 1257.92,227.684 1258.49,226.795 1259.06,223.978 1259.63,224.547 1260.2,226.038 1260.76,226.333 1261.33,223.492 1261.9,226.005 1262.47,224.03 1263.04,222.275 1263.61,223.124 1264.18,223.545 1264.74,224.031 1265.31,223.72 1265.88,227.231 1266.45,227.366 1267.02,227.523 1267.59,228.663 1268.15,228.86 1268.72,228.924 1269.29,232.159 1269.86,230.985 1270.43,229.898 1271,227.818 1271.56,224.976 1272.13,225.43 1272.7,224.83 1273.27,227.375 1273.84,226.357 1274.41,225.434 1274.97,223.732 1275.54,223.148 1276.11,223.491 1276.68,224.081 1277.25,224.613 1277.82,223.948 1278.38,223.394 1278.95,226.146 1279.52,227.564 1280.09,226.814 1280.66,227.231 1281.23,228.487 1281.79,229.766 1282.36,230.034 1282.93,231.154 1283.5,231.427 1284.07,232.565 1284.64,232.413 1285.2,233.308 1285.77,233.308 1286.34,235.129 1286.91,234.698 1287.48,232.54 1288.05,233.502 1288.61,233.57 1289.18,235.702 1289.75,232.351 1290.32,233.393 1290.89,233.021 1291.46,232.772 1292.02,231.595 1292.59,233.567 1293.16,234.233 1293.73,233.877 1294.3,233.607 1294.87,234.595 1295.43,236.189 1296,235.81 1296.57,235.145 1297.14,234.609 1297.71,235.078 1298.28,233.417 1298.84,232.22 1299.41,231.919 1299.98,231.784 1300.55,231.637 1301.12,232.565 1301.69,233.29 1302.25,233.928 1302.82,233.738 1303.39,233.555 1303.96,231.286 1304.53,230.084 1305.1,232.022 1305.66,231.728 1306.23,231.567 1306.8,230.214 1307.37,231.228 1307.94,230.101 1308.51,231.23 1309.07,228.774 1309.64,228.848 1310.21,229.646 1310.78,229.512 1311.35,228.517 1311.92,228.645 1312.48,228.523 1313.05,227.616 1313.62,227.699 1314.19,227.88 1314.76,226.965 1315.33,226.131 1315.89,225.184 1316.46,224.587 1317.03,222.977 1317.6,223.34 1318.17,224.593 1318.74,222.812 1319.3,223.529 1319.87,226.03 1320.44,228.543 1321.01,227.797 1321.58,227.987 1322.15,225.927 1322.71,224.102 1323.28,224.298 1323.85,222.889 1324.42,223.404 1324.99,223.091 1325.56,224.547 1326.12,225.23 1326.69,225.84 1327.26,227.325 1327.83,227.546 1328.4,228.794 1328.97,229.108 1329.53,230.213 1330.1,229.225 1330.67,228.526 1331.24,228.723 1331.81,229.976 1332.38,229.92 1332.94,228.758 1333.51,226.076 1334.08,226.458 1334.65,227.014 1335.22,228.519 1335.79,230.951 1336.36,231.864 1336.92,233.066 1337.49,230.687 1338.06,233.572 1338.63,232.323 1339.2,234.236 1339.77,236.11 1340.33,235.76 1340.9,236.477 1341.47,239.114 1342.04,240.488 1342.61,239.8 1343.18,241.01 1343.74,238.229 1344.31,237.827 1344.88,235.275 1345.45,237.834 1346.02,235.143 1346.59,235.842 1347.15,235.437 1347.72,233.863 1348.29,233.508 1348.86,233.301 1349.43,231.91 1350,231.57 1350.56,231.38 1351.13,234.128 1351.7,233.866 1352.27,234.672 1352.84,235.466 1353.41,233.771 1353.97,231.191 1354.54,231.157 1355.11,230.938 1355.68,231.72 1356.25,230.436 1356.82,230.352 1357.38,228.186 1357.95,228.142 1358.52,228.345 1359.09,227.193 1359.66,230.339 1360.23,229.094 1360.79,228.237 1361.36,228.235 1361.93,230.43 1362.5,229.522 1363.07,228.03 1363.64,228.018 1364.2,228.135 1364.77,229.431 1365.34,230.526 1365.91,230.483 1366.48,228.264 1367.05,227.339 1367.61,225.533 1368.18,225.839 1368.75,225.199 1369.32,224.412 1369.89,224.745 1370.46,223.854 1371.02,225.36 1371.59,230.103 1372.16,230.115 1372.73,231.195 1373.3,230.093 1373.87,229.896 1374.43,229.738 1375,230.622 1375.57,230.661 1376.14,230.852 1376.71,230.743 1377.28,231.684 1377.84,231.484 1378.41,230.152 1378.98,231.148 1379.55,233.145 1380.12,232.705 1380.69,231.42 1381.25,231.277 1381.82,231.197 1382.39,231.281 1382.96,232.207 1383.53,231.834 1384.1,231.837 1384.66,231.701 1385.23,230.482 1385.8,229.189 1386.37,227.141 1386.94,227.442 1387.51,227.535 1388.07,227.671 1388.64,229.729 1389.21,230.706 1389.78,231.422 1390.35,230.081 1390.92,230.204 1391.48,230.073 1392.05,228.83 1392.62,229.78 1393.19,229.833 1393.76,228.798 1394.33,227.793 1394.89,228.868 1395.46,229.915 1396.03,229.961 1396.6,228.889 1397.17,229.587 1397.74,226.512 1398.3,225.608 1398.87,223.588 1399.44,223.095 1400.01,221.132 1400.58,221.654 1401.15,222.252 1401.71,221.807 1402.28,221.387 1402.85,221.921 1403.42,221.456 1403.99,220.185 1404.56,221.76 1405.13,220.236 1405.69,221.216 1406.26,220.922 1406.83,223.697 1407.4,226.182 1407.97,224.619 1408.54,224.949 1409.1,225.473 1409.67,225.941 1410.24,227.619 1410.81,228.994 1411.38,230.966 1411.95,230.927 1412.51,231.959 1413.08,233.02 1413.65,233.967 1414.22,230.852 1414.79,229.875 1415.36,233.164 1415.92,232.13 1416.49,232.197 1417.06,233.312 1417.63,234.22 1418.2,233.929 1418.77,233.445 1419.33,236.133 1419.9,233.886 1420.47,234.806 1421.04,232.487 1421.61,231.277 1422.18,231.063 1422.74,232.213 1423.31,232.23 1423.88,233.104 1424.45,234.87 1425.02,232.397 1425.59,234.137 1426.15,236.663 1426.72,235.122 1427.29,234.8 1427.86,235.512 1428.43,232.163 1429,232.067 1429.56,231.906 1430.13,233.769 1430.7,233.431 1431.27,233.147 1431.84,232.935 1432.41,230.674 1432.97,230.548 1433.54,230.414 1434.11,229.407 1434.68,230.489 1435.25,228.479 1435.82,229.623 1436.38,230.504 1436.95,229.455 1437.52,228.506 1438.09,229.597 1438.66,230.599 1439.23,229.662 1439.79,229.691 1440.36,229.646 1440.93,227.306 1441.5,228.638 1442.07,227.699 1442.64,225.816 1443.2,228.074 1443.77,227.107 1444.34,229.421 1444.91,229.34 1445.48,227.43 1446.05,228.957 1446.61,230.202 1447.18,229.163 1447.75,227.298 1448.32,226.445 1448.89,223.601 1449.46,220.816 1450.02,223.639 1450.59,222.185 1451.16,221.929 1451.73,223.517 1452.3,224.31 1452.87,225.913 1453.43,228.638 1454,227.9 1454.57,230.04 1455.14,230.307 1455.71,230.25 1456.28,230.24 1456.84,229.066 1457.41,232.099 1457.98,231.993 1458.55,232.014 1459.12,229.804 1459.69,231.043 1460.25,232.962 1460.82,232.712 1461.39,234.531 1461.96,235.196 1462.53,231.775 1463.1,232.671 1463.66,232.357 1464.23,232.059 1464.8,232.977 1465.37,231.862 1465.94,235.074 1466.51,234.542 1467.07,232.3 1467.64,233.097 1468.21,232.947 1468.78,232.663 1469.35,232.644 1469.92,232.271 1470.48,233.057 1471.05,231.928 1471.62,229.603 1472.19,230.538 1472.76,231.44 1473.33,231.427 1473.89,230.197 1474.46,227.137 1475.03,225.165 1475.6,226.346 1476.17,226.482 1476.74,227.785 1477.31,228.007 1477.87,230.272 1478.44,230.24 1479.01,231.239 1479.58,231.184 1480.15,230.955 1480.72,231.763 1481.28,233.384 1481.85,234.143 1482.42,233.605 1482.99,230.238 1483.56,233.009 1484.13,232.836 1484.69,232.647 1485.26,231.422 1485.83,233.456 1486.4,232.217 1486.97,233.08 1487.54,233.593 1488.1,231.148 1488.67,230.006 1489.24,228.61 1489.81,228.631 1490.38,227.606 1490.95,227.562 1491.51,227.63 1492.08,228.378 1492.65,230.323 1493.22,231.19 1493.79,232.075 1494.36,231.725 1494.92,229.341 1495.49,228.151 1496.06,231.28 1496.63,228.987 1497.2,227.944 1497.77,229.017 1498.33,227.897 1498.9,227.95 1499.47,226.893 1500.04,225.083 1500.61,225.16 1501.18,227.482 1501.74,226.634 1502.31,227.706 1502.88,227.948 1503.45,229.211 1504.02,227.075 1504.59,226.501 1505.15,227.84 1505.72,227.742 1506.29,227.896 1506.86,227.997 1507.43,225.202 1508,224.552 1508.56,225.891 1509.13,227.232 1509.7,227.409 1510.27,226.391 1510.84,226.604 1511.41,227.883 1511.97,229.004 1512.54,230.162 1513.11,229.03 1513.68,231.165 1514.25,232.184 1514.82,232.054 1515.38,232.889 1515.95,233.581 1516.52,232.453 1517.09,232.315 1517.66,232.189 1518.23,233.073 1518.79,232.787 1519.36,231.561 1519.93,231.644 1520.5,232.78 1521.07,232.665 1521.64,231.282 1522.2,230.085 1522.77,230.12 1523.34,231.16 1523.91,229.969 1524.48,230.855 1525.05,229.444 1525.61,230.364 1526.18,230.397 1526.75,231.431 1527.32,232.215 1527.89,230.88 1528.46,230.697 1529.02,230.599 1529.59,230.361 1530.16,230.132 1530.73,229.106 1531.3,231.25 1531.87,231.37 1532.43,233.278 1533,232.166 1533.57,232.844 1534.14,232.462 1534.71,233.184 1535.28,231.893 1535.84,229.512 1536.41,227.277 1536.98,227.443 1537.55,227.497 1538.12,227.654 1538.69,226.524 1539.25,224.325 1539.82,224.835 1540.39,224.193 1540.96,224.994 1541.53,229.419 1542.1,229.343 1542.66,229.214 1543.23,229.385 1543.8,232.247 1544.37,231.843 1544.94,231.742 1545.51,232.56 1546.08,231.4 1546.64,231.287 1547.21,230.002 1547.78,229.844 1548.35,227.863 1548.92,229.981 1549.49,231.926 1550.05,232.034 1550.62,231.862 1551.19,230.632 1551.76,231.41 1552.33,231.385 1552.9,229.246 1553.46,228.375 1554.03,227.444 1554.6,228.448 1555.17,225.446 1555.74,225.786 1556.31,225.878 1556.87,228.373 1557.44,230.348 1558.01,229.206 1558.58,229.211 1559.15,224.975 1559.72,226.34 1560.28,226.515 1560.85,227.674 1561.42,227.712 1561.99,226.676 1562.56,225.822 1563.13,228.374 1563.69,231.468 1564.26,232.052 1564.83,232.974 1565.4,231.651 1565.97,231.639 1566.54,231.384 1567.1,231.213 1567.67,232.062 1568.24,233.04 1568.81,233.52 1569.38,233.106 1569.95,230.837 1570.51,230.776 1571.08,229.58 1571.65,229.838 1572.22,230.025 1572.79,229.968 1573.36,228.881 1573.92,230.992 1574.49,229.975 1575.06,231.922 1575.63,230.546 1576.2,231.772 1576.77,230.628 1577.33,230.414 1577.9,230.3 1578.47,231.299 1579.04,231.378 1579.61,231.084 1580.18,232.027 1580.74,231.835 1581.31,229.698 1581.88,227.654 1582.45,224.58 1583.02,221.83 1583.59,221.413 1584.15,222.173 1584.72,223.941 1585.29,223.341 1585.86,223.635 1586.43,221.931 1587,221.462 1587.56,223.108 1588.13,224.594 1588.7,224.017 1589.27,227.547 1589.84,226.817 1590.41,227.035 1590.97,226.044 1591.54,224.222 1592.11,223.733 1592.68,224.209 1593.25,223.454 1593.82,223.036 1594.38,225.66 1594.95,225.998 1595.52,228.536 1596.09,228.818 1596.66,231.087 1597.23,229.964 1597.79,231.966 1598.36,232.711 1598.93,231.498 1599.5,232.668 1600.07,233.684 1600.64,236.464 1601.2,237.201 1601.77,239.149 1602.34,236.301 1602.91,234.695 1603.48,232.172 1604.05,234.159 1604.61,234.687 1605.18,232.206 1605.75,231.988 1606.32,232.055 1606.89,231.982 1607.46,228.724 1608.02,227.831 1608.59,230.182 1609.16,231.102 1609.73,230.953 1610.3,229.632 1610.87,229.476 1611.43,231.559 1612,229.239 1612.57,228.467 1613.14,228.382 1613.71,226.388 1614.28,225.834 1614.84,226.184 1615.41,226.44 1615.98,227.646 1616.55,226.476 1617.12,228.837 1617.69,229.748 1618.26,232.122 1618.82,230.879 1619.39,230.839 1619.96,229.55 1620.53,229.685 1621.1,229.791 1621.67,228.562 1622.23,227.904 1622.8,229.086 1623.37,228.074 1623.94,227.112 1624.51,228.137 1625.08,225.996 1625.64,224.189 1626.21,226.679 1626.78,225.956 1627.35,226.185 1627.92,224.183 1628.49,224.87 1629.05,226.141 1629.62,225.485 1630.19,225.082 1630.76,227.596 1631.33,227.848 1631.9,230.164 1632.46,227.909 1633.03,227.239 1633.6,227.754 1634.17,228.244 1634.74,227.465 1635.31,228.578 1635.87,227.631 1636.44,227.764 1637.01,226.775 1637.58,226.856 1638.15,227.285 1638.72,228.595 1639.28,230.747 1639.85,232.624 1640.42,234.596 1640.99,234.716 1641.56,234.648 1642.13,230.384 1642.69,231.447 1643.26,230.464 1643.83,230.139 1644.4,230.32 1644.97,232.458 1645.54,229.211 1646.1,229.297 1646.67,229.33 1647.24,228.401 1647.81,228.473 1648.38,224.565 1648.95,225.97 1649.51,228.525 1650.08,228.543 1650.65,227.761 1651.22,226.146 1651.79,224.536 1652.36,223.992 1652.92,223.549 1653.49,224.217 1654.06,225.889 1654.63,226.251 1655.2,225.457 1655.77,224.202 1656.33,225.614 1656.9,226.055 1657.47,226.581 1658.04,228.995 1658.61,229.179 1659.18,229.338 1659.74,228.626 1660.31,230.017 1660.88,230.856 1661.45,229.842 1662.02,231.182 1662.59,231.461 1663.15,232.525 1663.72,233.492 1664.29,232.308 1664.86,232.238 1665.43,232.152 1666,233.171 1666.56,233.208 1667.13,233.017 1667.7,235.114 1668.27,236.941 1668.84,239.621 1669.41,238.963 1669.97,236.432 1670.54,236.015 1671.11,233.394 1671.68,233.283 1672.25,233.16 1672.82,233.944 1673.38,235.506 1673.95,236.347 1674.52,236.847 1675.09,236.458 1675.66,236.104 1676.23,236.683 1676.79,236.387 1677.36,236.012 1677.93,234.322 1678.5,234.972 1679.07,234.59 1679.64,235.164 1680.2,234.839 1680.77,233.247 1681.34,232.119 1681.91,232.944 1682.48,232.675 1683.05,232.576 1683.61,231.178 1684.18,228.902 1684.75,230.96 1685.32,231.906 1685.89,230.632 1686.46,229.163 1687.02,229.331 1687.59,232.387 1688.16,232.069 1688.73,229.723 1689.3,229.689 1689.87,230.938 1690.44,229.853 1691,229.739 1691.57,229.808 1692.14,229.963 1692.71,232.904 1693.28,232.547 1693.85,231.172 1694.41,230.844 1694.98,233.614 1695.55,233.083 1696.12,233.896 1696.69,233.557 1697.26,233.354 1697.82,234.01 1698.39,234.611 1698.96,233.267 1699.53,231.935 1700.1,233.64 1700.67,233.207 1701.23,231.743 1701.8,231.465 1702.37,232.269 1702.94,233.058 1703.51,230.374 1704.08,230.164 1704.64,231.051 1705.21,231.941 1705.78,229.774 1706.35,231.501 1706.92,231.034 1707.49,228.795 1708.05,228.778 1708.62,228.44 1709.19,227.241 1709.76,226.131 1710.33,226.225 1710.9,225.564 1711.46,226.813 1712.03,226.025 1712.6,228.317 1713.17,230.48 1713.74,230.41 1714.31,230.152 1714.87,228.907 1715.44,229.608 1716.01,230.222 1716.58,230.869 1717.15,232.827 1717.72,231.445 1718.28,229.061 1718.85,228.855 1719.42,228.864 1719.99,228.823 1720.56,227.759 1721.13,227.684 1721.69,227.631 1722.26,225.6 1722.83,227.83 1723.4,228.794 1723.97,228.759 1724.54,229.685 1725.1,230.632 1725.67,230.317 1726.24,229.393 1726.81,228.309 1727.38,229.273 1727.95,229.34 1728.51,229.245 1729.08,228.1 1729.65,228.177 1730.22,228.068 1730.79,231.239 1731.36,233.035 1731.92,231.75 1732.49,233.513 1733.06,233.208 1733.63,232.033 1734.2,231.636 1734.77,229.414 1735.33,229.556 1735.9,229.47 1736.47,229.139 1737.04,226.925 1737.61,226.057 1738.18,225.202 1738.74,225.459 1739.31,225.646 1739.88,227.043 1740.45,226.312 1741.02,226.325 1741.59,227.443 1742.15,228.647 1742.72,228.74 1743.29,229.982 1743.86,228.771 1744.43,229.821 1745,226.799 1745.56,226.666 1746.13,227.818 1746.7,228.083 1747.27,227.103 1747.84,227.252 1748.41,229.328 1748.97,227.981 1749.54,231.16 1750.11,229.946 1750.68,231.042 1751.25,229.663 1751.82,227.466 1752.38,227.514 1752.95,227.69 1753.52,227.681 1754.09,225.861 1754.66,224.751 1755.23,225.018 1755.79,223.397 1756.36,224.739 1756.93,226.079 1757.5,225.362 1758.07,225.605 1758.64,226.846 1759.21,227.144 1759.77,228.329 1760.34,228.355 1760.91,227.279 1761.48,226.38 1762.05,226.826 1762.62,225.069 1763.18,224.354 1763.75,225.844 1764.32,228.484 1764.89,228.668 1765.46,227.865 1766.03,227.105 1766.59,227.468 1767.16,224.735 1767.73,224.19 1768.3,225.634 1768.87,227.213 1769.44,232.505 1770,232.338 1770.57,230.01 1771.14,230.946 1771.71,228.902 1772.28,228.045 1772.85,227.207 1773.41,226.42 1773.98,226.661 1774.55,228.023 1775.12,226.142 1775.69,226.615 1776.26,226.142 1776.82,224.396 1777.39,224.98 1777.96,224.493 1778.53,225.957 1779.1,227.435 1779.67,228.8 1780.23,229.88 1780.8,228.921 1781.37,230.209 1781.94,229.417 1782.51,230.61 1783.08,228.819 1783.64,226.927 1784.21,228.237 1784.78,228.534 1785.35,228.752 1785.92,230.999 1786.49,231.037 1787.05,228.133 1787.62,229.52 1788.19,229.57 1788.76,229.563 1789.33,229.901 1789.9,230.037 1790.46,229.974 1791.03,232.194 1791.6,232.065 1792.17,232.097 1792.74,231.852 1793.31,231.806 1793.87,231.639 1794.44,233.559 1795.01,235.475 1795.58,235.025 1796.15,235.734 1796.72,238.345 1797.28,236.591 1797.85,235.968 1798.42,234.312 1798.99,232.916 1799.56,232.774 1800.13,232.456 1800.69,233.32 1801.26,232.124 1801.83,230.896 1802.4,230.793 1802.97,229.405 1803.54,229.484 1804.1,229.4 1804.67,230.63 1805.24,228.97 1805.81,230.209 1806.38,230.386 1806.95,228.385 1807.51,228.183 1808.08,228.433 1808.65,229.612 1809.22,229.667 1809.79,231.889 1810.36,233.89 1810.92,236.596 1811.49,235.168 1812.06,237.072 1812.63,239.592 1813.2,238.655 1813.77,235.792 1814.33,234.292 1814.9,232.897 1815.47,232.598 1816.04,230.371 1816.61,230.466 1817.18,232.499 1817.74,231.321 1818.31,230.094 1818.88,231.103 1819.45,229.724 1820.02,229.554 1820.59,225.505 1821.15,226.737 1821.72,227.968 1822.29,226.896 1822.86,224.866 1823.43,224.234 1824,224.343 1824.56,225.744 1825.13,224.984 1825.7,225.501 1826.27,225.752 1826.84,227.14 1827.41,227.025 1827.97,229.034 1828.54,228.992 1829.11,228.256 1829.68,230.314 1830.25,230.227 1830.82,231.451 1831.39,232.408 1831.95,232.146 1832.52,231.976 1833.09,229.639 1833.66,230.813 1834.23,229.452 1834.8,228.358 1835.36,229.316 1835.93,229.429 1836.5,231.617 1837.07,231.377 1837.64,231.279 1838.21,233.235 1838.77,234.753 1839.34,234.47 1839.91,235.04 1840.48,233.487 1841.05,234.151 1841.62,231.536 1842.18,232.304 1842.75,233.334 1843.32,234.199 1843.89,233.801 1844.46,232.497 1845.03,231.265 1845.59,229 1846.16,228.798 1846.73,228.77 1847.3,226.841 1847.87,226.876 1848.44,225.972 1849,224.212 1849.57,224.758 1850.14,223.205 1850.71,224.442 1851.28,223.847 1851.85,225.561 1852.41,225.841 1852.98,225.138 1853.55,225.517 1854.12,225.873 1854.69,225.176 1855.26,226.631 1855.82,226.829 1856.39,224.827 1856.96,224.302 1857.53,224.7 1858.1,225.064 1858.67,226.429 1859.23,227.852 1859.8,229.206 1860.37,229.412 1860.94,227.347 1861.51,226.522 1862.08,227.824 1862.64,226.721 1863.21,225.959 1863.78,225.378 1864.35,225.718 1864.92,227.291 1865.49,228.56 1866.05,228.734 1866.62,227.827 1867.19,230.261 1867.76,230.295 1868.33,230.429 1868.9,231.442 1869.46,231.449 1870.03,232.345 1870.6,231.292 1871.17,230.184 1871.74,229.467 1872.31,229.76 1872.87,229.977 1873.44,230.06 1874.01,231.076 1874.58,229.018 1875.15,229.294 1875.72,228.338 1876.28,227.409 1876.85,227.679 1877.42,229.91 1877.99,229.924 1878.56,229.203 1879.13,228.193 1879.69,229.283 1880.26,229.337 1880.83,229.395 1881.4,228.485 1881.97,228.792 1882.54,229.894 1883.1,229.974 1883.67,232.09 1884.24,233.112 1884.81,234.989 1885.38,233.538 1885.95,232.446 1886.51,234.396 1887.08,231.041 1887.65,232.836 1888.22,230.687 1888.79,232.951 1889.36,233.693 1889.92,233.417 1890.49,232.161 1891.06,231.146 1891.63,230.947 1892.2,232.027 1892.77,231.73 1893.33,233.76 1893.9,233.455 1894.47,233.085 1895.04,234.057 1895.61,233.721 1896.18,234.432 1896.74,235.012 1897.31,235.668 1897.88,235.137 1898.45,236.781 1899.02,236.208 1899.59,235.878 1900.16,234.384 1900.72,233.008 1901.29,232.683 1901.86,234.198 1902.43,235.688 1903,235.127 1903.57,233.613 1904.13,233.298 1904.7,232.978 1905.27,232.673 1905.84,232.45 1906.41,232.33 1906.98,233.122 1907.54,230.678 1908.11,233.439 1908.68,232.049 1909.25,232.91 1909.82,233.494 1910.39,233.922 1910.95,231.337 1911.52,231.282 1912.09,230.049 1912.66,229.692 1913.23,226.193 1913.8,225.278 1914.36,224.427 1914.93,221.575 1915.5,221.931 1916.07,222.266 1916.64,223.647 1917.21,226.056 1917.77,227.497 1918.34,227.86 1918.91,226.89 1919.48,229.153 1920.05,229.986 1920.62,227.628 1921.18,229.824 1921.75,227.797 1922.32,230.918 1922.89,230.624 1923.46,230.245 1924.03,230.25 1924.59,231.158 1925.16,229.924 1925.73,228.704 1926.3,229.761 1926.87,229.691 1927.44,230.63 1928,230.7 1928.57,230.455 1929.14,230.219 1929.71,228.035 1930.28,230.037 1930.85,228.654 1931.41,229.772 1931.98,228.62 1932.55,229.616 1933.12,228.536 1933.69,229.531 1934.26,230.566 1934.82,230.485 1935.39,230.648 1935.96,232.33 1936.53,232.067 1937.1,231.933 1937.67,232.58 1938.23,234.44 1938.8,231.678 1939.37,231.419 1939.94,234.103 1940.51,233.627 1941.08,232.054 1941.64,234.973 1942.21,234.353 1942.78,233.929 1943.35,233.541 1943.92,232.065 1944.49,232.862 1945.05,231.295 1945.62,227.881 1946.19,232.112 1946.76,230.875 1947.33,231.862 1947.9,231.492 1948.46,229.394 1949.03,226.165 1949.6,226.455 1950.17,226.578 1950.74,224.451 1951.31,225.669 1951.87,224.777 1952.44,226.236 1953.01,227.75 1953.58,226.562 1954.15,225.522 1954.72,222.581 1955.28,223.118 1955.85,223.466 1956.42,224.766 1956.99,226.12 1957.56,225.451 1958.13,225.814 1958.69,227.184 1959.26,228.51 1959.83,228.551 1960.4,227.537 1960.97,227.775 1961.54,225.459 1962.1,225.776 1962.67,224.963 1963.24,224.498 1963.81,224.132 1964.38,223.482 1964.95,222.954 1965.51,221.428 1966.08,225.25 1966.65,226.696 1967.22,224.877 1967.79,225.094 1968.36,225.397 1968.92,225.709 1969.49,224.789 1970.06,226.033 1970.63,226.321 1971.2,226.435 1971.77,225.577 1972.34,226.078 1972.9,226.34 1973.47,228.774 1974.04,228.923 1974.61,227.839 1975.18,226.882 1975.75,228.16 1976.31,227.181 1976.88,225.395 1977.45,227.825 1978.02,226.982 1978.59,226.268 1979.16,226.423 1979.72,225.801 1980.29,224.938 1980.86,226.401 1981.43,224.656 1982,222.958 1982.57,223.82 1983.13,226.329 1983.7,223.4 1984.27,223.906 1984.84,223.543 1985.41,223.074 1985.98,222.763 1986.54,224.473 1987.11,225.017 1987.68,227.519 1988.25,227.706 1988.82,229.299 1989.39,225.717 1989.95,225.119 1990.52,223.764 1991.09,226.517 1991.66,228.106 1992.23,228.406 1992.8,227.824 1993.36,227.245 1993.93,226.707 1994.5,228.112 1995.07,229.55 1995.64,229.932 1996.21,231.36 1996.77,232.688 1997.34,234.724 1997.91,234.924 1998.48,234.028 1999.05,236.096 1999.62,238.907 2000.18,240.268 2000.75,239.6 2001.32,238.309 2001.89,238.98 2002.46,236.476 2003.03,235.189 2003.59,232.969 2004.16,235.83 2004.73,235.485 2005.3,238.263 2005.87,237.861 2006.44,236.468 2007,235.022 2007.57,234.483 2008.14,234.187 2008.71,236.955 2009.28,235.428 2009.85,237 2010.41,235.622 2010.98,232.116 2011.55,232.024 2012.12,231.124 2012.69,230.093 2013.26,233.212 2013.82,230.884 2014.39,228.857 2014.96,229.024 2015.53,228.859 2016.1,228.49 2016.67,226.405 2017.23,227.609 2017.8,228.084 2018.37,228.066 2018.94,226.311 2019.51,229.826 2020.08,229.917 2020.64,227.799 2021.21,226.994 2021.78,227.36 2022.35,227.657 2022.92,228.762 2023.49,230.813 2024.05,227.71 2024.62,227.886 2025.19,231.183 2025.76,233.263 2026.33,231.974 2026.9,231.793 2027.46,229.872 2028.03,232.984 2028.6,230.626 2029.17,227.459 2029.74,227.649 2030.31,227.835 2030.87,227.091 2031.44,227.264 2032.01,228.77 2032.58,228.054 2033.15,228.082 2033.72,230.295 2034.28,229.319 2034.85,230.915 2035.42,229.698 2035.99,231.032 2036.56,229.074 2037.13,230.255 2037.69,229.215 2038.26,228.262 2038.83,226.481 2039.4,227.917 2039.97,228.255 2040.54,229.117 2041.11,229.141 2041.67,230.513 2042.24,229.432 2042.81,228.584 2043.38,229.825 2043.95,229.011 2044.52,229.248 2045.08,230.476 2045.65,231.358 2046.22,231.459 2046.79,231.455 2047.36,231.564 2047.93,233.271 2048.49,232.079 2049.06,230.936 2049.63,231.932 2050.2,228.589 2050.77,229.684 2051.34,229.824 2051.9,229.805 2052.47,231.062 2053.04,230.102 2053.61,226.17 2054.18,224.477 2054.75,225.967 2055.31,226.303 2055.88,227.6 2056.45,227.918 2057.02,228.146 2057.59,228.24 2058.16,229.512 2058.72,230.729 2059.29,233.818 2059.86,234.579 2060.43,235.473 2061,235.067 2061.57,234.723 2062.13,236.375 2062.7,236.979 2063.27,236.364 2063.84,235.874 2064.41,237.46 2064.98,236.872 2065.54,235.297 2066.11,234.969 2066.68,234.336 2067.25,231.721 2067.82,231.667 2068.39,228.702 2068.95,228.872 2069.52,229.014 2070.09,226.878 2070.66,227.954 2071.23,228.19 2071.8,230.203 2072.36,230.08 2072.93,229.902 2073.5,231.974 2074.07,231.749 2074.64,232.321 2075.21,231.85 2075.77,234.54 2076.34,236.179 2076.91,234.732 2077.48,234.304 2078.05,232.994 2078.62,233.533 2079.18,234.137 2079.75,233.795 2080.32,234.586 2080.89,235.128 2081.46,232.435 2082.03,232.019 2082.59,231.746 2083.16,231.486 2083.73,230.115 2084.3,230.213 2084.87,231.097 2085.44,230.741 2086,230.505 2086.57,232.523 2087.14,232.94 2087.71,230.31 2088.28,229.937 2088.85,231.962 2089.41,231.757 2089.98,230.143 2090.55,230.031 2091.12,229.713 2091.69,228.595 2092.26,227.503 2092.82,228.397 2093.39,229.397 2093.96,229.185 2094.53,228.898 2095.1,227.983 2095.67,229.097 2096.23,228.184 2096.8,228.093 2097.37,224.899 2097.94,225.201 2098.51,224.239 2099.08,224.378 2099.64,222.525 2100.21,221.8 2100.78,220.269 2101.35,219.895 2101.92,221.394 2102.49,221.856 2103.05,223.359 2103.62,224.796 2104.19,226.112 2104.76,226.51 2105.33,226.579 2105.9,227.767 2106.46,226.877 2107.03,225.948 2107.6,226.241 2108.17,227.764 2108.74,227.939 2109.31,229.1 2109.87,233.39 2110.44,233.066 2111.01,232.92 2111.58,232.657 2112.15,234.691 2112.72,233.291 2113.29,231.776 2113.85,228.449 2114.42,228.383 2114.99,230.492 2115.56,229.491 2116.13,230.525 2116.7,229.54 2117.26,225.259 2117.83,225.536 2118.4,227.828 2118.97,226.988 2119.54,227.047 2120.11,229.228 2120.67,229.251 2121.24,229.275 2121.81,226.301 2122.38,227.722 2122.95,225.758 2123.52,226.952 2124.08,226.37 2124.65,225.611 2125.22,227.848 2125.79,227.898 2126.36,227.022 2126.93,227.348 2127.49,227.525 2128.06,226.707 2128.63,226.201 2129.2,226.407 2129.77,226.859 2130.34,227.204 2130.9,230.605 2131.47,232.639 2132.04,233.565 2132.61,232.269 2133.18,234.48 2133.75,232.856 2134.31,233.824 2134.88,232.642 2135.45,232.554 2136.02,234.445 2136.59,236.285 2137.16,235.86 2137.72,236.539 2138.29,234.896 2138.86,233.518 2139.43,234.242 2140,233.786 2140.57,232.49 2141.13,231.252 2141.7,230.097 2142.27,231.127 2142.84,228.725 2143.41,226.499 2143.98,226.679 2144.54,227.093 2145.11,227.232 2145.68,227.577 2146.25,227.85 2146.82,231.055 2147.39,230.847 2147.95,228.531 2148.52,228.558 2149.09,229.626 2149.66,230.611 2150.23,230.253 2150.8,232.279 2151.36,230.845 2151.93,234.829 2152.5,237.603 2153.07,237.015 2153.64,235.132 2154.21,233.484 2154.77,231.03 2155.34,231.89 2155.91,232.741 2156.48,232.524 2157.05,235.329 2157.62,235.696 2158.18,234.133 2158.75,233.709 2159.32,235.278 2159.89,234.577 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip030)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip030)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip030)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip030)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.026\n  with uncertainty of ± 0.00231969014829499\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01364 ± (0.00247788, 0.00257164) (MC)\n  95% confidence interval: [-4.01875, -4.00887]) (MC)\n  linear error propagation: -4.01378 ± 0.00254413\n  |δ_y| = |0.00196012| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013637454229966, val_l = 0.005113175300086148, val_u = 0.004763699377786423)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip060\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip060)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip061\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip060)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip062\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.01 2211.02,1146.01 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,983.675 2211.02,983.675 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,821.342 2211.02,821.342 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,659.01 2211.02,659.01 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,496.677 2211.02,496.677 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,334.344 2211.02,334.344 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.01 365.751,1146.01 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,983.675 365.751,983.675 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,821.342 365.751,821.342 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,659.01 365.751,659.01 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,496.677 365.751,496.677 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,334.344 365.751,334.344 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M298.909 1131.81 Q295.298 1131.81 293.469 1135.37 Q291.664 1138.91 291.664 1146.04 Q291.664 1153.15 293.469 1156.71 Q295.298 1160.26 298.909 1160.26 Q302.543 1160.26 304.349 1156.71 Q306.177 1153.15 306.177 1146.04 Q306.177 1138.91 304.349 1135.37 Q302.543 1131.81 298.909 1131.81 M298.909 1128.1 Q304.719 1128.1 307.775 1132.71 Q310.853 1137.29 310.853 1146.04 Q310.853 1154.77 307.775 1159.38 Q304.719 1163.96 298.909 1163.96 Q293.099 1163.96 290.02 1159.38 Q286.964 1154.77 286.964 1146.04 Q286.964 1137.29 290.02 1132.71 Q293.099 1128.1 298.909 1128.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M259.557 997.02 L267.196 997.02 L267.196 970.654 L258.886 972.321 L258.886 968.062 L267.15 966.395 L271.826 966.395 L271.826 997.02 L279.465 997.02 L279.465 1000.96 L259.557 1000.96 L259.557 997.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M298.909 969.474 Q295.298 969.474 293.469 973.039 Q291.664 976.58 291.664 983.71 Q291.664 990.816 293.469 994.381 Q295.298 997.923 298.909 997.923 Q302.543 997.923 304.349 994.381 Q306.177 990.816 306.177 983.71 Q306.177 976.58 304.349 973.039 Q302.543 969.474 298.909 969.474 M298.909 965.77 Q304.719 965.77 307.775 970.377 Q310.853 974.96 310.853 983.71 Q310.853 992.437 307.775 997.043 Q304.719 1001.63 298.909 1001.63 Q293.099 1001.63 290.02 997.043 Q286.964 992.437 286.964 983.71 Q286.964 974.96 290.02 970.377 Q293.099 965.77 298.909 965.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M262.775 834.687 L279.094 834.687 L279.094 838.622 L257.15 838.622 L257.15 834.687 Q259.812 831.933 264.395 827.303 Q269.002 822.65 270.182 821.308 Q272.428 818.784 273.307 817.048 Q274.21 815.289 274.21 813.599 Q274.21 810.845 272.266 809.109 Q270.344 807.372 267.242 807.372 Q265.043 807.372 262.59 808.136 Q260.159 808.9 257.381 810.451 L257.381 805.729 Q260.205 804.595 262.659 804.016 Q265.113 803.437 267.15 803.437 Q272.52 803.437 275.715 806.122 Q278.909 808.808 278.909 813.298 Q278.909 815.428 278.099 817.349 Q277.312 819.247 275.205 821.84 Q274.627 822.511 271.525 825.729 Q268.423 828.923 262.775 834.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M298.909 807.141 Q295.298 807.141 293.469 810.706 Q291.664 814.247 291.664 821.377 Q291.664 828.483 293.469 832.048 Q295.298 835.59 298.909 835.59 Q302.543 835.59 304.349 832.048 Q306.177 828.483 306.177 821.377 Q306.177 814.247 304.349 810.706 Q302.543 807.141 298.909 807.141 M298.909 803.437 Q304.719 803.437 307.775 808.044 Q310.853 812.627 310.853 821.377 Q310.853 830.104 307.775 834.71 Q304.719 839.294 298.909 839.294 Q293.099 839.294 290.02 834.71 Q286.964 830.104 286.964 821.377 Q286.964 812.627 290.02 808.044 Q293.099 803.437 298.909 803.437 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M272.914 657.655 Q276.27 658.373 278.145 660.642 Q280.043 662.91 280.043 666.243 Q280.043 671.359 276.525 674.16 Q273.006 676.961 266.525 676.961 Q264.349 676.961 262.034 676.521 Q259.742 676.104 257.289 675.248 L257.289 670.734 Q259.233 671.868 261.548 672.447 Q263.863 673.026 266.386 673.026 Q270.784 673.026 273.076 671.29 Q275.39 669.553 275.39 666.243 Q275.39 663.188 273.238 661.475 Q271.108 659.739 267.289 659.739 L263.261 659.739 L263.261 655.896 L267.474 655.896 Q270.923 655.896 272.752 654.53 Q274.58 653.142 274.58 650.549 Q274.58 647.887 272.682 646.475 Q270.807 645.04 267.289 645.04 Q265.367 645.04 263.168 645.456 Q260.969 645.873 258.33 646.753 L258.33 642.586 Q260.992 641.845 263.307 641.475 Q265.645 641.105 267.705 641.105 Q273.029 641.105 276.131 643.535 Q279.233 645.943 279.233 650.063 Q279.233 652.933 277.59 654.924 Q275.946 656.892 272.914 657.655 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M298.909 644.808 Q295.298 644.808 293.469 648.373 Q291.664 651.915 291.664 659.044 Q291.664 666.151 293.469 669.716 Q295.298 673.257 298.909 673.257 Q302.543 673.257 304.349 669.716 Q306.177 666.151 306.177 659.044 Q306.177 651.915 304.349 648.373 Q302.543 644.808 298.909 644.808 M298.909 641.105 Q304.719 641.105 307.775 645.711 Q310.853 650.294 310.853 659.044 Q310.853 667.771 307.775 672.378 Q304.719 676.961 298.909 676.961 Q293.099 676.961 290.02 672.378 Q286.964 667.771 286.964 659.044 Q286.964 650.294 290.02 645.711 Q293.099 641.105 298.909 641.105 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M271.594 483.471 L259.789 501.92 L271.594 501.92 L271.594 483.471 M270.367 479.397 L276.247 479.397 L276.247 501.92 L281.177 501.92 L281.177 505.809 L276.247 505.809 L276.247 513.957 L271.594 513.957 L271.594 505.809 L255.992 505.809 L255.992 501.295 L270.367 479.397 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M298.909 482.476 Q295.298 482.476 293.469 486.04 Q291.664 489.582 291.664 496.712 Q291.664 503.818 293.469 507.383 Q295.298 510.924 298.909 510.924 Q302.543 510.924 304.349 507.383 Q306.177 503.818 306.177 496.712 Q306.177 489.582 304.349 486.04 Q302.543 482.476 298.909 482.476 M298.909 478.772 Q304.719 478.772 307.775 483.378 Q310.853 487.962 310.853 496.712 Q310.853 505.438 307.775 510.045 Q304.719 514.628 298.909 514.628 Q293.099 514.628 290.02 510.045 Q286.964 505.438 286.964 496.712 Q286.964 487.962 290.02 483.378 Q293.099 478.772 298.909 478.772 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M258.793 317.064 L277.15 317.064 L277.15 320.999 L263.076 320.999 L263.076 329.471 Q264.094 329.124 265.113 328.962 Q266.131 328.777 267.15 328.777 Q272.937 328.777 276.316 331.948 Q279.696 335.12 279.696 340.536 Q279.696 346.115 276.224 349.217 Q272.752 352.295 266.432 352.295 Q264.256 352.295 261.988 351.925 Q259.742 351.555 257.335 350.814 L257.335 346.115 Q259.418 347.249 261.641 347.805 Q263.863 348.36 266.34 348.36 Q270.344 348.36 272.682 346.254 Q275.02 344.147 275.02 340.536 Q275.02 336.925 272.682 334.819 Q270.344 332.712 266.34 332.712 Q264.465 332.712 262.59 333.129 Q260.738 333.545 258.793 334.425 L258.793 317.064 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M298.909 320.143 Q295.298 320.143 293.469 323.708 Q291.664 327.249 291.664 334.379 Q291.664 341.485 293.469 345.05 Q295.298 348.592 298.909 348.592 Q302.543 348.592 304.349 345.05 Q306.177 341.485 306.177 334.379 Q306.177 327.249 304.349 323.708 Q302.543 320.143 298.909 320.143 M298.909 316.439 Q304.719 316.439 307.775 321.046 Q310.853 325.629 310.853 334.379 Q310.853 343.106 307.775 347.712 Q304.719 352.295 298.909 352.295 Q293.099 352.295 290.02 347.712 Q286.964 343.106 286.964 334.379 Q286.964 325.629 290.02 321.046 Q293.099 316.439 298.909 316.439 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip062)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1026.4 400.199,1041.88 400.786,934.706 401.372,836.367 401.958,744.268 402.545,661.682 403.131,689.318 403.718,617.365 404.304,548.545 404.891,578.587 405.477,518.588 406.063,464.226 406.65,416.541 407.236,372.301 407.823,332.676 408.409,298.766 408.995,327.782 409.582,295.936 410.168,320.073 410.755,294.533 411.341,271.852 411.927,251.643 412.514,234.391 413.1,219.895 413.687,244.291 414.273,233.608 414.86,227.079 415.446,251.531 416.032,274.636 416.619,271.695 417.205,269.575 417.792,292.387 418.378,314.002 418.964,314.823 419.551,316.822 420.137,319.989 420.724,340.977 421.31,346.327 421.896,366.53 422.483,373.483 423.069,380.031 423.656,387.634 424.242,407.244 424.829,414.858 425.415,433.367 426.001,463.365 426.588,473.264 427.174,484.224 427.761,519.831 428.347,537.971 428.933,547.967 429.52,564.663 430.106,574.129 430.693,590.823 431.279,600.594 431.865,610.774 432.452,626.806 433.038,648.36 433.625,664.739 434.211,680.861 434.798,691.187 435.384,701.701 435.97,716.468 436.557,731.124 437.143,745.099 437.73,754.585 438.316,776.491 438.902,785.69 439.489,802.749 440.075,811.254 440.662,823.689 441.248,835.961 441.835,854.987 442.421,873.003 443.007,880.77 443.594,894.656 444.18,904.831 444.767,912.024 445.353,930.778 445.939,945.654 446.526,959.29 447.112,967.241 447.699,974.823 448.285,982.557 448.871,990.218 449.458,995.369 450.044,1005.02 450.631,1016.95 451.217,1021.46 451.804,1030.59 452.39,1036.92 452.976,1047.69 453.563,1057.91 454.149,1065.76 454.736,1069.13 455.322,1076.63 455.908,1085.99 456.495,1090.81 457.081,1093.89 457.668,1096.63 458.254,1099.27 458.84,1102.03 459.427,1112.78 460.013,1117.22 460.6,1123.99 461.186,1126.24 461.773,1134.3 462.359,1138.33 462.945,1142.14 463.532,1147.71 464.118,1156.66 464.705,1159.93 465.291,1165.17 465.877,1169.7 466.464,1172.25 467.05,1175.23 467.637,1179.49 468.223,1185.41 468.809,1185.76 469.396,1189.76 469.982,1193.59 470.569,1198.83 471.155,1201.81 471.742,1203.01 472.328,1206.06 472.914,1204.04 473.501,1207.07 474.087,1211.56 474.674,1211.31 475.26,1212.92 475.846,1214.06 476.433,1210.72 477.019,1212.03 477.606,1216.18 478.192,1217.08 478.778,1217.85 479.365,1220.44 479.951,1223.3 480.538,1221.35 481.124,1220.97 481.711,1231.3 482.297,1232.13 482.883,1232.9 483.47,1233.77 484.056,1235.93 484.643,1236.81 485.229,1235.99 485.815,1234.94 486.402,1235.86 486.988,1242.35 487.575,1241.57 488.161,1240.85 488.748,1238.36 489.334,1234.67 489.92,1234.36 490.507,1238.14 491.093,1238.84 491.68,1242.54 492.266,1241.56 492.852,1242.43 493.439,1244.29 494.025,1243.51 494.612,1241.48 495.198,1239.49 495.784,1234.63 496.371,1234.44 496.957,1235.2 497.544,1234.65 498.13,1235.54 498.717,1231.04 499.303,1230.74 499.889,1233.39 500.476,1235.93 501.062,1235.52 501.649,1234.13 502.235,1233.65 502.821,1233.42 503.408,1231.94 503.994,1232.05 504.581,1233.36 505.167,1234.56 505.753,1231.78 506.34,1236.02 506.926,1235.76 507.513,1239.44 508.099,1240.45 508.686,1243.7 509.272,1245.6 509.858,1242.21 510.445,1243.14 511.031,1243.91 511.618,1244.75 512.204,1248.22 512.79,1245.86 513.377,1246.32 513.963,1245.59 514.55,1243.47 515.136,1245.71 515.722,1249.22 516.309,1249.62 516.895,1250.2 517.482,1250.53 518.068,1248.06 518.655,1245.61 519.241,1246.31 519.827,1245.61 520.414,1245.83 521,1245.09 521.587,1242.93 522.173,1242.29 522.759,1240.39 523.346,1241.26 523.932,1242 524.519,1242.92 525.105,1244.82 525.691,1244.21 526.278,1243.36 526.864,1245.56 527.451,1242.15 528.037,1241.45 528.624,1242.37 529.21,1241.65 529.796,1239.65 530.383,1240.8 530.969,1238.7 531.556,1238.3 532.142,1239.18 532.728,1238.65 533.315,1239.56 533.901,1243.2 534.488,1242.52 535.074,1244.39 535.661,1243.84 536.247,1244.14 536.833,1243.41 537.42,1241.46 538.006,1240.89 538.593,1237.58 539.179,1238.51 539.765,1237.81 540.352,1237.51 540.938,1239.82 541.525,1239.26 542.111,1238.54 542.697,1240.56 543.284,1242.69 543.87,1242.03 544.457,1242.74 545.043,1241.95 545.63,1245.23 546.216,1241.72 546.802,1237.08 547.389,1236.88 547.975,1238.04 548.562,1237.57 549.148,1237.09 549.734,1239.32 550.321,1240.04 550.907,1239.61 551.494,1240.43 552.08,1239.72 552.666,1239.33 553.253,1238.58 553.839,1234.1 554.426,1234 555.012,1235.01 555.599,1233.05 556.185,1236.73 556.771,1236.18 557.358,1238.48 557.944,1239.08 558.531,1237.16 559.117,1236.86 559.703,1236.24 560.29,1235.65 560.876,1235.16 561.463,1238.65 562.049,1236.7 562.635,1236.17 563.222,1240.83 563.808,1244.06 564.395,1241.77 564.981,1246.33 565.568,1243.93 566.154,1243.05 566.74,1242.02 567.327,1241.25 567.913,1239.2 568.5,1236.14 569.086,1238.46 569.672,1240.21 570.259,1238.28 570.845,1240.11 571.432,1239.27 572.018,1238.34 572.605,1235.99 573.191,1233.71 573.777,1233.31 574.364,1234.12 574.95,1236.69 575.537,1241.39 576.123,1242.95 576.709,1239.1 577.296,1239.61 577.882,1237.44 578.469,1239.42 579.055,1239.96 579.641,1240.57 580.228,1240.07 580.814,1242.25 581.401,1241.32 581.987,1243.05 582.574,1244.97 583.16,1240.04 583.746,1235.73 584.333,1236.59 584.919,1235.86 585.506,1233.98 586.092,1234.94 586.678,1234.45 587.265,1231.38 587.851,1229.75 588.438,1227.88 589.024,1227.72 589.61,1227.61 590.197,1226.14 590.783,1224.8 591.37,1225.06 591.956,1225.05 592.543,1223.65 593.129,1224.82 593.715,1223.42 594.302,1223.22 594.888,1223.05 595.475,1222.79 596.061,1222.92 596.647,1220.22 597.234,1218.92 597.82,1219.14 598.407,1220.42 598.993,1220.65 599.579,1219.51 600.166,1214.38 600.752,1213.47 601.339,1214.11 601.925,1213.4 602.512,1215.27 603.098,1216.94 603.684,1216.13 604.271,1219.41 604.857,1222.26 605.444,1222.49 606.03,1222.61 606.616,1221.25 607.203,1222.78 607.789,1225.36 608.376,1223.75 608.962,1224.94 609.548,1225.82 610.135,1226.97 610.721,1226.62 611.308,1224.86 611.894,1224.83 612.481,1225.93 613.067,1223.21 613.653,1224.33 614.24,1226.72 614.826,1227.52 615.413,1227.2 615.999,1226.95 616.585,1228.01 617.172,1228.94 617.758,1228.34 618.345,1227.96 618.931,1227.83 619.518,1228.82 620.104,1227.02 620.69,1225.76 621.277,1223.5 621.863,1223.44 622.45,1223.5 623.036,1224.59 623.622,1223.54 624.209,1220.75 624.795,1223.27 625.382,1225.78 625.968,1222.93 626.554,1222.83 627.141,1224.15 627.727,1224.13 628.314,1224.13 628.9,1222.79 629.487,1218.77 630.073,1218.86 630.659,1219.31 631.246,1223.06 631.832,1223.14 632.419,1224.55 633.005,1226.01 633.591,1222.09 634.178,1226.06 634.764,1226.97 635.351,1225.31 635.937,1226.13 636.523,1224.54 637.11,1225.73 637.696,1224.3 638.283,1224.18 638.869,1222.63 639.456,1223.69 640.042,1223.51 640.628,1226.37 641.215,1225.83 641.801,1225.65 642.388,1224.01 642.974,1222.46 643.56,1222.23 644.147,1220.74 644.733,1219.4 645.32,1219.79 645.906,1218.69 646.492,1218.68 647.079,1218.83 647.665,1220.28 648.252,1221.62 648.838,1221.65 649.425,1220.09 650.011,1219.93 650.597,1218.57 651.184,1221.51 651.77,1220.1 652.357,1222.75 652.943,1222.7 653.529,1224 654.116,1222.52 654.702,1224.77 655.289,1225.46 655.875,1225.03 656.462,1224.89 657.048,1222.07 657.634,1222.93 658.221,1223.81 658.807,1225.15 659.394,1224.7 659.98,1223.03 660.566,1225.2 661.153,1224.8 661.739,1224.1 662.326,1225.1 662.912,1223.26 663.498,1225.63 664.085,1225.17 664.671,1224.88 665.258,1228.78 665.844,1224.23 666.431,1224.05 667.017,1223.66 667.603,1224.4 668.19,1225.59 668.776,1225.23 669.363,1225.19 669.949,1225.86 670.535,1224.22 671.122,1225.16 671.708,1227.44 672.295,1225.67 672.881,1227.65 673.467,1228.37 674.054,1227.58 674.64,1228.27 675.227,1226.48 675.813,1224.51 676.4,1225.62 676.986,1226.43 677.572,1226.06 678.159,1226.93 678.745,1225.05 679.332,1227.46 679.918,1225.55 680.504,1222.44 681.091,1222.17 681.677,1220.71 682.264,1218.94 682.85,1220.39 683.436,1221.8 684.023,1221.28 684.609,1219.66 685.196,1219.34 685.782,1221.91 686.369,1222.87 686.955,1221.26 687.541,1220.94 688.128,1220.81 688.714,1223.1 689.301,1223.06 689.887,1222.56 690.473,1222.46 691.06,1223.42 691.646,1223.99 692.233,1222.31 692.819,1222.15 693.405,1220.66 693.992,1221.75 694.578,1221.35 695.165,1218.62 695.751,1219.97 696.338,1219.68 696.924,1216.85 697.51,1215.18 698.097,1216.46 698.683,1216.5 699.27,1219.26 699.856,1219.28 700.442,1220.49 701.029,1219.02 701.615,1220.22 702.202,1221.38 702.788,1223.89 703.375,1224.82 703.961,1222.05 704.547,1221.92 705.134,1224.23 705.72,1224.99 706.307,1225.76 706.893,1225.19 707.479,1224.55 708.066,1224.29 708.652,1224.04 709.239,1222.42 709.825,1220.86 710.411,1220.68 710.998,1220.48 711.584,1217.66 712.171,1214.74 712.757,1213.59 713.344,1213.77 713.93,1211.37 714.516,1211.59 715.103,1210.47 715.689,1210.63 716.276,1208.33 716.862,1208.84 717.448,1209.29 718.035,1209.68 718.621,1210.27 719.208,1209.22 719.794,1208.21 720.38,1208.74 720.967,1211.46 721.553,1210.54 722.14,1214.68 722.726,1213.49 723.313,1211.03 723.899,1208.32 724.485,1206.3 725.072,1208.15 725.658,1208.84 726.245,1211.82 726.831,1213.47 727.417,1214.89 728.004,1216.32 728.59,1217.87 729.177,1216.4 729.763,1216.13 730.349,1217.45 730.936,1218.6 731.522,1218.49 732.109,1219.46 732.695,1220.47 733.282,1221.52 733.868,1218.62 734.454,1218.6 735.041,1221.07 735.627,1222.16 736.214,1223.23 736.8,1224.39 737.386,1223.81 737.973,1223.21 738.559,1220.05 739.146,1221.07 739.732,1221.95 740.318,1220.09 740.905,1219.97 741.491,1218.7 742.078,1218.34 742.664,1218.12 743.251,1214.33 743.837,1213.17 744.423,1213.39 745.01,1211.07 745.596,1212.56 746.183,1213.96 746.769,1212.82 747.355,1211.46 747.942,1213.14 748.528,1210.62 749.115,1212.09 749.701,1212.44 750.288,1212.34 750.874,1211.4 751.46,1214.21 752.047,1210.13 752.633,1209.24 753.22,1208.31 753.806,1211.1 754.392,1212.48 754.979,1211.32 755.565,1210.2 756.152,1210.63 756.738,1210.88 757.324,1209.69 757.911,1208.39 758.497,1207.34 759.084,1206.52 759.67,1206.95 760.257,1208.88 760.843,1207.69 761.429,1208.01 762.016,1208.48 762.602,1210.27 763.189,1209.17 763.775,1209.51 764.361,1208.45 764.948,1211.38 765.534,1213.05 766.121,1215.95 766.707,1214.77 767.293,1212.08 767.88,1214.58 768.466,1213.35 769.053,1213.38 769.639,1213.84 770.226,1215.19 770.812,1214.85 771.398,1215.02 771.985,1215.33 772.571,1221.77 773.158,1219.8 773.744,1219.4 774.33,1219.15 774.917,1218.82 775.503,1216.97 776.09,1216.92 776.676,1215.52 777.262,1216.78 777.849,1219.14 778.435,1220.39 779.022,1219.82 779.608,1218.32 780.195,1218.3 780.781,1213 781.367,1213.3 781.954,1213.14 782.54,1212.06 783.127,1214.86 783.713,1212.31 784.299,1210.96 784.886,1209.62 785.472,1209.99 786.059,1207.6 786.645,1208.15 787.232,1208.65 787.818,1210.33 788.404,1210.75 788.991,1210.91 789.577,1211.19 790.164,1214.28 790.75,1213.02 791.336,1213.07 791.923,1214.28 792.509,1212.92 793.096,1213.4 793.682,1213.41 794.268,1214.78 794.855,1214.73 795.441,1213.49 796.028,1213.48 796.614,1216.06 797.201,1219.97 797.787,1221.14 798.373,1222.29 798.96,1224.53 799.546,1225.8 800.133,1225.39 800.719,1224.74 801.305,1221.42 801.892,1219.83 802.478,1216.98 803.065,1214.51 803.651,1217.32 804.237,1218.6 804.824,1219.81 805.41,1218.12 805.997,1216.62 806.583,1213.87 807.17,1213.93 807.756,1215.26 808.342,1217.87 808.929,1218.96 809.515,1219.01 810.102,1217.49 810.688,1218.76 811.274,1219.93 811.861,1219.67 812.447,1219.4 813.034,1219.03 813.62,1218.58 814.206,1217.09 814.793,1215.81 815.379,1216.85 815.966,1216.75 816.552,1215.22 817.139,1216.38 817.725,1218.59 818.311,1220.81 818.898,1220.21 819.484,1215.91 820.071,1216.98 820.657,1218.13 821.243,1216.77 821.83,1217.93 822.416,1217.69 823.003,1220.14 823.589,1219.95 824.175,1219.57 824.762,1217.7 825.348,1219.02 825.935,1218.82 826.521,1218.24 827.108,1217.74 827.694,1218.8 828.28,1220.95 828.867,1220.6 829.453,1220.31 830.04,1218.57 830.626,1217.13 831.212,1217.08 831.799,1218.2 832.385,1219.2 832.972,1220.08 833.558,1218.6 834.145,1218 834.731,1217.88 835.317,1221.47 835.904,1222.13 836.49,1221.92 837.077,1221.07 837.663,1219.32 838.249,1220.31 838.836,1220.14 839.422,1215.81 840.009,1217.02 840.595,1217.96 841.181,1215.1 841.768,1212.25 842.354,1212.06 842.941,1214.49 843.527,1212.9 844.114,1212.84 844.7,1212.62 845.286,1214.02 845.873,1213.73 846.459,1210.62 847.046,1211.89 847.632,1211.9 848.218,1211.93 848.805,1213.13 849.391,1211.74 849.978,1207.72 850.564,1207.96 851.15,1212.33 851.737,1210.98 852.323,1211.02 852.91,1212.36 853.496,1211.36 854.083,1212.78 854.669,1211.73 855.255,1211.89 855.842,1213.2 856.428,1213.4 857.015,1210.73 857.601,1208.01 858.187,1208.31 858.774,1205.87 859.36,1207.81 859.947,1210.75 860.533,1210.95 861.119,1212.2 861.706,1212.19 862.292,1214.84 862.879,1213.46 863.465,1215.9 864.052,1213.39 864.638,1214.67 865.224,1217.1 865.811,1219.58 866.397,1222.16 866.984,1224.34 867.57,1221.34 868.156,1218.53 868.743,1222.23 869.329,1220.25 869.916,1222.53 870.502,1223.39 871.089,1220.06 871.675,1221.12 872.261,1219.23 872.848,1216.55 873.434,1215.1 874.021,1212.53 874.607,1208.37 875.193,1208.47 875.78,1206.11 876.366,1207.94 876.953,1205.74 877.539,1207.73 878.125,1206.53 878.712,1206.9 879.298,1208.59 879.885,1206.17 880.471,1205.22 881.058,1209.53 881.644,1208.44 882.23,1206.03 882.817,1207.86 883.403,1208.46 883.99,1210.07 884.576,1210.3 885.162,1210.71 885.749,1208.31 886.335,1211.37 886.922,1209.93 887.508,1208.86 888.094,1209.06 888.681,1209.17 889.267,1210.41 889.854,1209.35 890.44,1207.99 891.027,1206.83 891.613,1207.06 892.199,1204.71 892.786,1205.12 893.372,1204.12 893.959,1207.45 894.545,1207.88 895.131,1205.55 895.718,1205.98 896.304,1210.49 896.891,1210.42 897.477,1209.35 898.063,1207 898.65,1207.32 899.236,1210.27 899.823,1213.01 900.409,1210.42 900.996,1210.57 901.582,1210.56 902.168,1210.75 902.755,1213.45 903.341,1214.69 903.928,1218.48 904.514,1219.38 905.1,1218.81 905.687,1215.86 906.273,1218.06 906.86,1220.42 907.446,1218.75 908.032,1216.96 908.619,1219.65 909.205,1218.24 909.792,1217.95 910.378,1219.18 910.965,1219.05 911.551,1218.76 912.137,1215.69 912.724,1215.58 913.31,1215.4 913.897,1212.67 914.483,1213.94 915.069,1212.37 915.656,1215.26 916.242,1217.78 916.829,1218.81 917.415,1218.57 918.002,1215.75 918.588,1212.81 919.174,1211.59 919.761,1210.06 920.347,1211.54 920.934,1207.52 921.52,1209.19 922.106,1211.87 922.693,1211.82 923.279,1210.45 923.866,1210.65 924.452,1209.53 925.038,1211.02 925.625,1209.48 926.211,1209.64 926.798,1207.07 927.384,1199.41 927.971,1199.87 928.557,1200.56 929.143,1200.8 929.73,1201.39 930.316,1203.39 930.903,1205.24 931.489,1208.51 932.075,1209.95 932.662,1210.35 933.248,1207.81 933.835,1208.07 934.421,1212.4 935.007,1209.59 935.594,1208.34 936.18,1211.13 936.767,1208.72 937.353,1207.54 937.94,1209.05 938.526,1209.21 939.112,1207.91 939.699,1208.17 940.285,1208.28 940.872,1207.04 941.458,1208.97 942.044,1206.29 942.631,1204.14 943.217,1203.36 943.804,1205.33 944.39,1208.33 944.976,1208.66 945.563,1210.11 946.149,1207.51 946.736,1208.06 947.322,1209.45 947.909,1209.54 948.495,1209.45 949.081,1208.13 949.668,1209.6 950.254,1209.82 950.841,1208.55 951.427,1207.48 952.013,1207.96 952.6,1210.8 953.186,1210.81 953.773,1209.67 954.359,1209.69 954.945,1209.72 955.532,1210.2 956.118,1211.49 956.705,1211.79 957.291,1211.82 957.878,1210.68 958.464,1210.77 959.05,1213.38 959.637,1213.13 960.223,1212.99 960.81,1212.77 961.396,1212.92 961.982,1211.54 962.569,1214.05 963.155,1216.47 963.742,1216.27 964.328,1214.86 964.915,1217.41 965.501,1218.24 966.087,1217.8 966.674,1216.18 967.26,1215.87 967.847,1215.78 968.433,1215.76 969.019,1218.08 969.606,1216.44 970.192,1218.7 970.779,1218.43 971.365,1219.53 971.951,1218.94 972.538,1217.29 973.124,1215.45 973.711,1215.49 974.297,1212.88 974.884,1212.54 975.47,1209.95 976.056,1210.14 976.643,1212.93 977.229,1212.73 977.816,1214.11 978.402,1214.93 978.988,1217.28 979.575,1215.83 980.161,1218.38 980.748,1216.65 981.334,1215.03 981.92,1213.69 982.507,1214.05 983.093,1215.39 983.68,1213.61 984.266,1213.6 984.853,1216.22 985.439,1217.17 986.025,1216.87 986.612,1215.25 987.198,1215.4 987.785,1212.73 988.371,1211.23 988.957,1212.65 989.544,1210.03 990.13,1205.23 990.717,1205.69 991.303,1205.92 991.889,1208.8 992.476,1210.37 993.062,1210.07 993.649,1208.81 994.235,1208.84 994.822,1208.89 995.408,1208.02 995.994,1207.16 996.581,1208.88 997.167,1210.3 997.754,1211.55 998.34,1214.03 998.926,1212.25 999.513,1212.11 1000.1,1210.82 1000.69,1206.99 1001.27,1205.81 1001.86,1206.03 1002.44,1206.27 1003.03,1205.32 1003.62,1208.42 1004.2,1207.35 1004.79,1206.18 1005.38,1206.22 1005.96,1206.59 1006.55,1202.94 1007.14,1204.74 1007.72,1206.55 1008.31,1208.16 1008.9,1207.18 1009.48,1203.61 1010.07,1204.24 1010.65,1204.86 1011.24,1205.08 1011.83,1201.53 1012.41,1205.01 1013,1204.06 1013.59,1208.46 1014.17,1211.3 1014.76,1215.15 1015.35,1215.09 1015.93,1215.15 1016.52,1215.08 1017.11,1215.78 1017.69,1216.81 1018.28,1214.02 1018.86,1216.29 1019.45,1216.08 1020.04,1215.97 1020.62,1212.76 1021.21,1213.8 1021.8,1212.41 1022.38,1212.83 1022.97,1212.57 1023.56,1212.5 1024.14,1213.6 1024.73,1213.6 1025.32,1212.49 1025.9,1215.48 1026.49,1216.66 1027.07,1216.62 1027.66,1217.48 1028.25,1218.72 1028.83,1222.55 1029.42,1217.87 1030.01,1218.86 1030.59,1219.75 1031.18,1219.29 1031.77,1218.82 1032.35,1220.99 1032.94,1222.81 1033.52,1222.1 1034.11,1220.07 1034.7,1219.77 1035.28,1220.47 1035.87,1218.56 1036.46,1216.87 1037.04,1217.53 1037.63,1219.58 1038.22,1221.95 1038.8,1221.68 1039.39,1221.13 1039.98,1218.16 1040.56,1216.79 1041.15,1217.85 1041.73,1216 1042.32,1216.97 1042.91,1218 1043.49,1217.74 1044.08,1220.14 1044.67,1222.39 1045.25,1221.84 1045.84,1221.17 1046.43,1221.83 1047.01,1221.36 1047.6,1219.66 1048.19,1220.66 1048.77,1221.26 1049.36,1222.22 1049.94,1220.14 1050.53,1219.43 1051.12,1214.95 1051.7,1213.25 1052.29,1211.41 1052.88,1212.82 1053.46,1211.76 1054.05,1211.81 1054.64,1209.08 1055.22,1208.96 1055.81,1211.75 1056.39,1211.54 1056.98,1211.56 1057.57,1211.59 1058.15,1211.37 1058.74,1209.72 1059.33,1208.48 1059.91,1208.55 1060.5,1214.24 1061.09,1216.81 1061.67,1220.14 1062.26,1218.42 1062.85,1219.29 1063.43,1217.74 1064.02,1218.78 1064.6,1220.85 1065.19,1225.86 1065.78,1223.92 1066.36,1222.04 1066.95,1221.45 1067.54,1219.23 1068.12,1217.45 1068.71,1218.4 1069.3,1220.62 1069.88,1216.41 1070.47,1217.28 1071.06,1215.51 1071.64,1212.49 1072.23,1211.08 1072.81,1216.38 1073.4,1215.84 1073.99,1215.62 1074.57,1216.57 1075.16,1218.44 1075.75,1216.71 1076.33,1216.3 1076.92,1216.1 1077.51,1218.66 1078.09,1218.63 1078.68,1215.68 1079.26,1214.01 1079.85,1209.78 1080.44,1207.28 1081.02,1204.85 1081.61,1203.99 1082.2,1203.16 1082.78,1204.94 1083.37,1204.14 1083.96,1204.56 1084.54,1206.1 1085.13,1205.02 1085.72,1205.24 1086.3,1205.77 1086.89,1207.22 1087.47,1206.12 1088.06,1206.64 1088.65,1205.67 1089.23,1208.5 1089.82,1205.88 1090.41,1205.05 1090.99,1206.88 1091.58,1202.96 1092.17,1204.96 1092.75,1206.71 1093.34,1206.75 1093.93,1207.01 1094.51,1203.12 1095.1,1205.01 1095.68,1204.12 1096.27,1203.36 1096.86,1203.77 1097.44,1203.01 1098.03,1204.7 1098.62,1205.23 1099.2,1208.14 1099.79,1206.92 1100.38,1205.99 1100.96,1209.04 1101.55,1207.94 1102.14,1209.29 1102.72,1209.51 1103.31,1208.45 1103.89,1207.26 1104.48,1215.25 1105.07,1216.13 1105.65,1216.06 1106.24,1214.26 1106.83,1213.87 1107.41,1211.09 1108,1211.34 1108.59,1212.41 1109.17,1215.23 1109.76,1215.27 1110.34,1218.72 1110.93,1222.14 1111.52,1220.19 1112.1,1219.72 1112.69,1220.95 1113.28,1216.51 1113.86,1213.6 1114.45,1214.5 1115.04,1214.38 1115.62,1214.41 1116.21,1210.75 1116.8,1210.94 1117.38,1210.78 1117.97,1211.09 1118.55,1213.64 1119.14,1214.72 1119.73,1214.68 1120.31,1209.38 1120.9,1209.36 1121.49,1209.46 1122.07,1208.57 1122.66,1211.08 1123.25,1211.16 1123.83,1208.61 1124.42,1206.1 1125.01,1204.86 1125.59,1205.22 1126.18,1205.69 1126.76,1203.56 1127.35,1203.77 1127.94,1201.69 1128.52,1202.53 1129.11,1204.41 1129.7,1206.17 1130.28,1206.45 1130.87,1209.76 1131.46,1210.06 1132.04,1211.46 1132.63,1209.95 1133.21,1207.37 1133.8,1206.34 1134.39,1210.72 1134.97,1213.17 1135.56,1213.06 1136.15,1211.79 1136.73,1210.49 1137.32,1210.51 1137.91,1209.68 1138.49,1210.65 1139.08,1209.2 1139.67,1211.81 1140.25,1211.87 1140.84,1211.8 1141.42,1210.5 1142.01,1211.95 1142.6,1214.45 1143.18,1216.73 1143.77,1216.58 1144.36,1215.07 1144.94,1215.01 1145.53,1210.91 1146.12,1210.91 1146.7,1210.65 1147.29,1208.35 1147.88,1205.87 1148.46,1204.73 1149.05,1203.9 1149.63,1202.67 1150.22,1204.23 1150.81,1204.46 1151.39,1204.91 1151.98,1205.34 1152.57,1205.5 1153.15,1207.08 1153.74,1207.28 1154.33,1207.22 1154.91,1207.56 1155.5,1206.67 1156.09,1206.98 1156.67,1208.68 1157.26,1210.23 1157.84,1211.48 1158.43,1210.22 1159.02,1211.43 1159.6,1213.82 1160.19,1215.09 1160.78,1216.19 1161.36,1214.48 1161.95,1211.61 1162.54,1211.82 1163.12,1210.62 1163.71,1207.91 1164.29,1208.1 1164.88,1208.15 1165.47,1208.12 1166.05,1208.53 1166.64,1210.16 1167.23,1207.64 1167.81,1208.94 1168.4,1206.2 1168.99,1206.63 1169.57,1207.07 1170.16,1206.11 1170.75,1205 1171.33,1205.39 1171.92,1207.1 1172.5,1205.98 1173.09,1207.35 1173.68,1207.66 1174.26,1208.01 1174.85,1205.24 1175.44,1208.18 1176.02,1208.45 1176.61,1208.59 1177.2,1209.07 1177.78,1210.67 1178.37,1209.23 1178.96,1210.38 1179.54,1209.27 1180.13,1208.03 1180.71,1208.17 1181.3,1208.36 1181.89,1206.95 1182.47,1208.4 1183.06,1208.64 1183.65,1208.84 1184.23,1207.55 1184.82,1206.41 1185.41,1206.81 1185.99,1206.95 1186.58,1206.9 1187.16,1209.67 1187.75,1209.45 1188.34,1210.9 1188.92,1210.97 1189.51,1210.97 1190.1,1211.13 1190.68,1211.19 1191.27,1211.39 1191.86,1211.44 1192.44,1208.96 1193.03,1208.15 1193.62,1208.48 1194.2,1207.35 1194.79,1207.57 1195.37,1207.59 1195.96,1208.88 1196.55,1210.46 1197.13,1209.22 1197.72,1210.79 1198.31,1208.21 1198.89,1208.23 1199.48,1208.54 1200.07,1208.62 1200.65,1211.45 1201.24,1208.65 1201.83,1208.59 1202.41,1208.78 1203,1205.05 1203.58,1205.57 1204.17,1209.96 1204.76,1211.17 1205.34,1212.6 1205.93,1209.82 1206.52,1209.78 1207.1,1211.24 1207.69,1211.38 1208.28,1211.55 1208.86,1212.76 1209.45,1210.06 1210.03,1207.37 1210.62,1209.05 1211.21,1207.91 1211.79,1209.43 1212.38,1209.67 1212.97,1209.55 1213.55,1209.61 1214.14,1209.82 1214.73,1211.38 1215.31,1212.81 1215.9,1211.84 1216.49,1212.73 1217.07,1213.91 1217.66,1211.25 1218.24,1209.91 1218.83,1211.28 1219.42,1212.24 1220,1212.25 1220.59,1210.89 1221.18,1209.6 1221.76,1210.95 1222.35,1211.18 1222.94,1213.68 1223.52,1214.84 1224.11,1213.22 1224.7,1214.45 1225.28,1217.08 1225.87,1219.4 1226.45,1216.14 1227.04,1213.21 1227.63,1213.2 1228.21,1214.39 1228.8,1218.07 1229.39,1217.49 1229.97,1215.71 1230.56,1215.42 1231.15,1219.14 1231.73,1216.08 1232.32,1218.7 1232.91,1221.08 1233.49,1220.19 1234.08,1219.81 1234.66,1219.35 1235.25,1219.89 1235.84,1215.55 1236.42,1215.43 1237.01,1215.29 1237.6,1213.88 1238.18,1213.66 1238.77,1213.6 1239.36,1209.46 1239.94,1210.91 1240.53,1212.27 1241.11,1214.93 1241.7,1218.62 1242.29,1218.16 1242.87,1219.03 1243.46,1215.9 1244.05,1217.26 1244.63,1218.53 1245.22,1220.81 1245.81,1221.7 1246.39,1221.43 1246.98,1220.83 1247.57,1220.29 1248.15,1221.27 1248.74,1222.12 1249.32,1218.76 1249.91,1217.03 1250.5,1218.05 1251.08,1217.59 1251.67,1216.04 1252.26,1214.43 1252.84,1214.08 1253.43,1212.63 1254.02,1212.24 1254.6,1210.74 1255.19,1210.86 1255.78,1209.64 1256.36,1209.55 1256.95,1207.1 1257.53,1207.52 1258.12,1210.18 1258.71,1208.87 1259.29,1208.69 1259.88,1205.83 1260.47,1210.01 1261.05,1208.6 1261.64,1208.98 1262.23,1209.22 1262.81,1210.66 1263.4,1208.07 1263.98,1207.11 1264.57,1207.46 1265.16,1207.7 1265.74,1206.33 1266.33,1204.14 1266.92,1204.47 1267.5,1205.17 1268.09,1205.73 1268.68,1205 1269.26,1207.01 1269.85,1208.45 1270.44,1208.78 1271.02,1208.9 1271.61,1209.03 1272.19,1207.79 1272.78,1206.78 1273.37,1205.87 1273.95,1206.01 1274.54,1206.14 1275.13,1208.96 1275.71,1210.47 1276.3,1207.97 1276.89,1208.29 1277.47,1208.44 1278.06,1210.14 1278.65,1208.82 1279.23,1210.23 1279.82,1208.77 1280.4,1211.88 1280.99,1211.81 1281.58,1210.81 1282.16,1210.98 1282.75,1212.26 1283.34,1212.13 1283.92,1212.31 1284.51,1213.51 1285.1,1213.45 1285.68,1213.27 1286.27,1214.49 1286.86,1215.62 1287.44,1216.93 1288.03,1217.8 1288.61,1219.99 1289.2,1219.69 1289.79,1218.25 1290.37,1220.65 1290.96,1219.91 1291.55,1216.87 1292.13,1213.74 1292.72,1214.73 1293.31,1214.53 1293.89,1217.21 1294.48,1219.64 1295.06,1219.53 1295.65,1221.47 1296.24,1220.98 1296.82,1221.54 1297.41,1219.84 1298,1219.1 1298.58,1218.43 1299.17,1216.63 1299.76,1216.4 1300.34,1214.85 1300.93,1214.47 1301.52,1213.07 1302.1,1214.33 1302.69,1215.23 1303.27,1215.01 1303.86,1213.43 1304.45,1213.49 1305.03,1214.98 1305.62,1218.44 1306.21,1218.04 1306.79,1217.41 1307.38,1215.55 1307.97,1212.45 1308.55,1211.25 1309.14,1209.64 1309.73,1212.62 1310.31,1208.88 1310.9,1210.39 1311.48,1207.86 1312.07,1205.32 1312.66,1205.62 1313.24,1204.54 1313.83,1200.95 1314.42,1198.93 1315,1199.55 1315.59,1197.72 1316.18,1201.04 1316.76,1201.35 1317.35,1204.44 1317.93,1200.99 1318.52,1204.26 1319.11,1203.22 1319.69,1203.59 1320.28,1205.48 1320.87,1205.83 1321.45,1206 1322.04,1207.7 1322.63,1208.09 1323.21,1208.28 1323.8,1204.7 1324.39,1204.93 1324.97,1203.78 1325.56,1202.63 1326.14,1204.67 1326.73,1207.89 1327.32,1207.9 1327.9,1208.14 1328.49,1207.1 1329.08,1208.7 1329.66,1208.79 1330.25,1211.56 1330.84,1211.65 1331.42,1211.43 1332.01,1212.94 1332.6,1208.97 1333.18,1210.55 1333.77,1211.67 1334.35,1211.71 1334.94,1208.92 1335.53,1210.07 1336.11,1211.99 1336.7,1212.05 1337.29,1211.94 1337.87,1210.32 1338.46,1208.92 1339.05,1208.95 1339.63,1211.78 1340.22,1213 1340.8,1215.37 1341.39,1215.09 1341.98,1216 1342.56,1217.12 1343.15,1216.83 1343.74,1218.09 1344.32,1216.31 1344.91,1210.34 1345.5,1210.31 1346.08,1208.91 1346.67,1210.29 1347.26,1210.54 1347.84,1210.73 1348.43,1209.6 1349.01,1209.52 1349.6,1209.25 1350.19,1209.36 1350.77,1208.13 1351.36,1208.34 1351.95,1210 1352.53,1208.71 1353.12,1206.1 1353.71,1206.58 1354.29,1208.16 1354.88,1208.3 1355.47,1208.36 1356.05,1208.22 1356.64,1206.99 1357.22,1207.4 1357.81,1207.35 1358.4,1207.47 1358.98,1208.98 1359.57,1210.63 1360.16,1213.26 1360.74,1212.94 1361.33,1212.88 1361.92,1212.76 1362.5,1210.17 1363.09,1208.91 1363.68,1207.97 1364.26,1209.65 1364.85,1209.48 1365.43,1209.64 1366.02,1211.22 1366.61,1210.02 1367.19,1209.95 1367.78,1211.28 1368.37,1212.59 1368.95,1211.26 1369.54,1209.94 1370.13,1209.87 1370.71,1211.24 1371.3,1210.37 1371.88,1214.31 1372.47,1215.55 1373.06,1218.23 1373.64,1219.02 1374.23,1221.69 1374.82,1221.24 1375.4,1220.67 1375.99,1221.43 1376.58,1222.16 1377.16,1221.69 1377.75,1222.48 1378.34,1224.3 1378.92,1222.54 1379.51,1224.67 1380.09,1223.66 1380.68,1224.25 1381.27,1220.93 1381.85,1217.91 1382.44,1219.99 1383.03,1219.7 1383.61,1219.15 1384.2,1218.65 1384.79,1216.6 1385.37,1214.89 1385.96,1212.37 1386.55,1212.39 1387.13,1211.03 1387.72,1209.61 1388.3,1208.3 1388.89,1212.21 1389.48,1213.43 1390.06,1209.2 1390.65,1210.44 1391.24,1210.29 1391.82,1208.79 1392.41,1207.53 1393,1207.79 1393.58,1208.31 1394.17,1204.74 1394.75,1207.48 1395.34,1206.19 1395.93,1209.05 1396.51,1210.54 1397.1,1210.77 1397.69,1209.26 1398.27,1209.17 1398.86,1207.98 1399.45,1205.62 1400.03,1208.68 1400.62,1206.37 1401.21,1202.99 1401.79,1204.81 1402.38,1205.08 1402.96,1204.04 1403.55,1208.21 1404.14,1208.27 1404.72,1208.42 1405.31,1205.96 1405.9,1206.29 1406.48,1206.57 1407.07,1206.75 1407.66,1209.58 1408.24,1209.72 1408.83,1209.87 1409.42,1211.14 1410,1209.76 1410.59,1212.32 1411.17,1210.88 1411.76,1209.75 1412.35,1211.08 1412.93,1212.31 1413.52,1210.94 1414.11,1209.65 1414.69,1210.83 1415.28,1210.79 1415.87,1210.85 1416.45,1213.86 1417.04,1212.21 1417.63,1213.44 1418.21,1215.9 1418.8,1213.11 1419.38,1214.39 1419.97,1211.48 1420.56,1211.59 1421.14,1214.05 1421.73,1212.15 1422.32,1210.57 1422.9,1211.89 1423.49,1214.3 1424.08,1215.45 1424.66,1219.17 1425.25,1222.87 1425.83,1219.5 1426.42,1221.5 1427.01,1222.02 1427.59,1220.19 1428.18,1219.33 1428.77,1217.41 1429.35,1214.02 1429.94,1214.99 1430.53,1212.29 1431.11,1211.94 1431.7,1211.99 1432.29,1211.99 1432.87,1213.49 1433.46,1209.6 1434.04,1209.68 1434.63,1209.6 1435.22,1212.38 1435.8,1210.78 1436.39,1208.28 1436.98,1208.52 1437.56,1206.1 1438.15,1205.12 1438.74,1209.39 1439.32,1208.18 1439.91,1208.51 1440.5,1208.83 1441.08,1207.58 1441.67,1208.94 1442.25,1204.74 1442.84,1205.29 1443.43,1208.06 1444.01,1206.97 1444.6,1207.08 1445.19,1207.36 1445.77,1207.31 1446.36,1207.72 1446.95,1206.64 1447.53,1208.01 1448.12,1210.94 1448.7,1209.74 1449.29,1208.56 1449.88,1208.53 1450.46,1210.07 1451.05,1213.98 1451.64,1216.57 1452.22,1215.18 1452.81,1215.09 1453.4,1213.5 1453.98,1213.26 1454.57,1210.39 1455.16,1210.42 1455.74,1209.12 1456.33,1209.15 1456.91,1209.41 1457.5,1208.34 1458.09,1206.2 1458.67,1205.13 1459.26,1205.71 1459.85,1209.95 1460.43,1206.37 1461.02,1206.5 1461.61,1206.67 1462.19,1208.17 1462.78,1205.51 1463.37,1207.01 1463.95,1205.83 1464.54,1205.09 1465.12,1208.14 1465.71,1209.57 1466.3,1211.35 1466.88,1211.35 1467.47,1212.7 1468.06,1212.8 1468.64,1212.77 1469.23,1211.86 1469.82,1209.4 1470.4,1208.27 1470.99,1207.09 1471.57,1207.48 1472.16,1210.5 1472.75,1212.03 1473.33,1208.05 1473.92,1210.96 1474.51,1212.31 1475.09,1210.98 1475.68,1212.44 1476.27,1212.41 1476.85,1213.81 1477.44,1216.2 1478.03,1216.22 1478.61,1213.36 1479.2,1214.5 1479.78,1213.2 1480.37,1212.94 1480.96,1211.36 1481.54,1214.12 1482.13,1214.92 1482.72,1213.28 1483.3,1213.45 1483.89,1213.31 1484.48,1213.22 1485.06,1216.84 1485.65,1217.79 1486.24,1216.2 1486.82,1214.58 1487.41,1214.42 1487.99,1215.78 1488.58,1215.59 1489.17,1214.03 1489.75,1212.64 1490.34,1211.17 1490.93,1212.61 1491.51,1209.88 1492.1,1208.53 1492.69,1208.64 1493.27,1207.5 1493.86,1206.53 1494.45,1207.88 1495.03,1207.99 1495.62,1208.09 1496.2,1206.89 1496.79,1207.17 1497.38,1208.67 1497.96,1208.52 1498.55,1207.01 1499.14,1207.08 1499.72,1208.78 1500.31,1210.28 1500.9,1210.22 1501.48,1208.88 1502.07,1210.37 1502.65,1209.23 1503.24,1211.01 1503.83,1209.83 1504.41,1209.77 1505,1208.43 1505.59,1207.37 1506.17,1209.03 1506.76,1209.23 1507.35,1209.33 1507.93,1209.62 1508.52,1209.89 1509.11,1211.2 1509.69,1208.46 1510.28,1208.27 1510.86,1205.77 1511.45,1207.11 1512.04,1206.17 1512.62,1206.59 1513.21,1205.59 1513.8,1207.16 1514.38,1210.17 1514.97,1213.04 1515.56,1212.89 1516.14,1212.87 1516.73,1212.73 1517.32,1214.23 1517.9,1217.12 1518.49,1216.6 1519.07,1217.55 1519.66,1216.66 1520.25,1211.11 1520.83,1211.21 1521.42,1211.39 1522.01,1211.18 1522.59,1207.51 1523.18,1207.96 1523.77,1208.04 1524.35,1206.93 1524.94,1208.35 1525.52,1208.46 1526.11,1210.07 1526.7,1210.26 1527.28,1212.8 1527.87,1210.13 1528.46,1207.62 1529.04,1207.43 1529.63,1207.59 1530.22,1209.12 1530.8,1208.09 1531.39,1208.08 1531.98,1210.79 1532.56,1211.92 1533.15,1213.14 1533.73,1211.91 1534.32,1215.79 1534.91,1215.46 1535.49,1215.44 1536.08,1212.34 1536.67,1209.84 1537.25,1211.29 1537.84,1211.29 1538.43,1216.73 1539.01,1215.11 1539.6,1214.97 1540.19,1213.56 1540.77,1213.56 1541.36,1214.94 1541.94,1216.11 1542.53,1212.94 1543.12,1209 1543.7,1208.2 1544.29,1206.95 1544.88,1208.57 1545.46,1208.54 1546.05,1208.82 1546.64,1209 1547.22,1207.86 1547.81,1206.55 1548.4,1205.84 1548.98,1206.28 1549.57,1209.11 1550.15,1209.16 1550.74,1210.67 1551.33,1210.34 1551.91,1210.1 1552.5,1210.17 1553.09,1211.56 1553.67,1208.86 1554.26,1210.14 1554.85,1207.63 1555.43,1209.34 1556.02,1207.74 1556.6,1209.16 1557.19,1209.41 1557.78,1209.54 1558.36,1208.24 1558.95,1208.1 1559.54,1208.43 1560.12,1207.19 1560.71,1207.37 1561.3,1210.07 1561.88,1212.69 1562.47,1216.68 1563.06,1220.32 1563.64,1221.05 1564.23,1220.28 1564.81,1218.22 1565.4,1219.13 1565.99,1218.91 1566.57,1221.24 1567.16,1222.03 1567.75,1220.14 1568.33,1218.4 1568.92,1219.27 1569.51,1214.89 1570.09,1215.88 1570.68,1215.68 1571.27,1217.01 1571.85,1219.44 1572.44,1220.2 1573.02,1219.74 1573.61,1220.84 1574.2,1221.53 1574.78,1218.35 1575.37,1218.01 1575.96,1214.86 1576.54,1214.52 1577.13,1211.63 1577.72,1213.04 1578.3,1210.46 1578.89,1209.44 1579.47,1210.92 1580.06,1209.37 1580.65,1207.99 1581.23,1204.3 1581.82,1203.17 1582.41,1200.46 1582.99,1203.91 1583.58,1205.82 1584.17,1208.94 1584.75,1206.32 1585.34,1205.52 1585.93,1208.6 1586.51,1208.81 1587.1,1208.67 1587.68,1208.7 1588.27,1212.83 1588.86,1214 1589.44,1211.03 1590.03,1209.84 1590.62,1209.99 1591.2,1211.66 1591.79,1211.86 1592.38,1209.19 1592.96,1212.12 1593.55,1213.13 1594.14,1213.27 1594.72,1215.86 1595.31,1216.65 1595.89,1216.3 1596.48,1216.06 1597.07,1214.59 1597.65,1216.14 1598.24,1213.2 1598.83,1212.05 1599.41,1209 1600,1210.53 1600.59,1210.56 1601.17,1212.18 1601.76,1212.01 1602.34,1211.88 1602.93,1213.45 1603.52,1214.33 1604.1,1212.85 1604.69,1214.17 1605.28,1215.44 1605.86,1214.19 1606.45,1216.98 1607.04,1219.38 1607.62,1216.33 1608.21,1217.33 1608.8,1217.13 1609.38,1219.78 1609.97,1219.04 1610.55,1217.54 1611.14,1218.47 1611.73,1219.09 1612.31,1215.99 1612.9,1215.72 1613.49,1212.79 1614.07,1215.67 1614.66,1216.57 1615.25,1215.98 1615.83,1215.4 1616.42,1216.43 1617.01,1215.06 1617.59,1216.3 1618.18,1216.19 1618.76,1217.5 1619.35,1217.47 1619.94,1216.99 1620.52,1215.37 1621.11,1212.64 1621.7,1210.19 1622.28,1207.58 1622.87,1207.3 1623.46,1207.26 1624.04,1212.63 1624.63,1211.24 1625.22,1212.46 1625.8,1212.86 1626.39,1212.62 1626.97,1209.85 1627.56,1213.96 1628.15,1213.86 1628.73,1213.83 1629.32,1215.03 1629.91,1214.97 1630.49,1220 1631.08,1218.33 1631.67,1215.15 1632.25,1215.16 1632.84,1216.19 1633.42,1218.31 1634.01,1220.46 1634.6,1221.28 1635.18,1221.99 1635.77,1221.29 1636.36,1219.29 1636.94,1218.92 1637.53,1220.03 1638.12,1221.74 1638.7,1220.07 1639.29,1219.61 1639.88,1219.03 1640.46,1216.01 1641.05,1215.79 1641.63,1215.6 1642.22,1216.52 1642.81,1214.76 1643.39,1213.68 1643.98,1214.95 1644.57,1213.22 1645.15,1212.83 1645.74,1211.41 1646.33,1210.1 1646.91,1211.53 1647.5,1211.55 1648.09,1211.6 1648.67,1210.22 1649.26,1210.09 1649.84,1210.24 1650.43,1207.45 1651.02,1204.96 1651.6,1201.3 1652.19,1201.9 1652.78,1204.95 1653.36,1205.31 1653.95,1208.54 1654.54,1208.59 1655.12,1208.66 1655.71,1207.56 1656.29,1205.43 1656.88,1204.2 1657.47,1203.38 1658.05,1203.71 1658.64,1203.99 1659.23,1203.08 1659.81,1203.29 1660.4,1203.6 1660.99,1205.63 1661.57,1204.67 1662.16,1205.03 1662.75,1204.17 1663.33,1204.45 1663.92,1206.37 1664.5,1207.74 1665.09,1206.61 1665.68,1206.88 1666.26,1206.93 1666.85,1208.66 1667.44,1211.54 1668.02,1208.92 1668.61,1207.67 1669.2,1209.25 1669.78,1211.12 1670.37,1210.91 1670.96,1206.99 1671.54,1207.33 1672.13,1210.29 1672.71,1210.33 1673.3,1208.73 1673.89,1210.09 1674.47,1210.23 1675.06,1210.15 1675.65,1209.94 1676.23,1206.15 1676.82,1206.53 1677.41,1208.23 1677.99,1208.61 1678.58,1205.02 1679.17,1205.6 1679.75,1204.47 1680.34,1204.8 1680.92,1204.96 1681.51,1204.03 1682.1,1203.14 1682.68,1204.75 1683.27,1206.38 1683.86,1204.12 1684.44,1204.58 1685.03,1206.38 1685.62,1206.68 1686.2,1205.6 1686.79,1204.52 1687.37,1207.89 1687.96,1208.15 1688.55,1206.99 1689.13,1205.81 1689.72,1208.55 1690.31,1206.32 1690.89,1206.88 1691.48,1209.72 1692.07,1209.77 1692.65,1210.22 1693.24,1211.79 1693.83,1213.27 1694.41,1213.24 1695,1214.18 1695.58,1212.68 1696.17,1213.76 1696.76,1210.92 1697.34,1208.17 1697.93,1208.25 1698.52,1208.56 1699.1,1210.15 1699.69,1209.27 1700.28,1208.48 1700.86,1207.63 1701.45,1205.08 1702.04,1206.78 1702.62,1209.8 1703.21,1210.08 1703.79,1210.09 1704.38,1210.17 1704.97,1211.55 1705.55,1211.7 1706.14,1211.82 1706.73,1214.47 1707.31,1211.72 1707.9,1210.53 1708.49,1210.6 1709.07,1209.43 1709.66,1208.21 1710.24,1208.59 1710.83,1209.77 1711.42,1211.16 1712,1209.96 1712.59,1209.89 1713.18,1210.02 1713.76,1211.5 1714.35,1211.44 1714.94,1211.62 1715.52,1207.58 1716.11,1205.23 1716.7,1206.8 1717.28,1204.48 1717.87,1204.78 1718.45,1206.2 1719.04,1206.65 1719.63,1209.46 1720.21,1209.29 1720.8,1209.4 1721.39,1209.83 1721.97,1212.68 1722.56,1213.87 1723.15,1215.05 1723.73,1214.84 1724.32,1214.7 1724.91,1213.02 1725.49,1214.02 1726.08,1214.09 1726.66,1212.74 1727.25,1211.25 1727.84,1211.16 1728.42,1209.59 1729.01,1211.14 1729.6,1209.81 1730.18,1213.68 1730.77,1213.93 1731.36,1212.53 1731.94,1212.23 1732.53,1213.53 1733.11,1213.41 1733.7,1210.8 1734.29,1212.54 1734.87,1208.5 1735.46,1210.02 1736.05,1208.61 1736.63,1210.35 1737.22,1213.17 1737.81,1213.16 1738.39,1212.99 1738.98,1213.05 1739.57,1215.44 1740.15,1216.95 1740.74,1216.73 1741.32,1218.92 1741.91,1217.37 1742.5,1215.78 1743.08,1216.79 1743.67,1216.58 1744.26,1215.1 1744.84,1214.79 1745.43,1213.33 1746.02,1213.33 1746.6,1214.75 1747.19,1215.96 1747.78,1215.47 1748.36,1217.79 1748.95,1218.82 1749.53,1217.05 1750.12,1213.76 1750.71,1213.56 1751.29,1214.61 1751.88,1215.64 1752.47,1215.24 1753.05,1218.79 1753.64,1219.61 1754.23,1217.9 1754.81,1215.98 1755.4,1209.25 1755.99,1209.39 1756.57,1212.32 1757.16,1211.11 1757.74,1213.7 1758.33,1214.82 1758.92,1215.94 1759.5,1217.01 1760.09,1216.78 1760.68,1215.11 1761.26,1217.56 1761.85,1217.05 1762.44,1217.73 1763.02,1220.05 1763.61,1219.44 1764.19,1220.18 1764.78,1218.44 1765.37,1216.64 1765.95,1214.95 1766.54,1213.58 1767.13,1214.81 1767.71,1213.17 1768.3,1214.18 1768.89,1212.65 1769.47,1214.93 1770.06,1217.38 1770.65,1215.77 1771.23,1215.42 1771.82,1215.17 1772.4,1212.31 1772.99,1212.23 1773.58,1215.92 1774.16,1214.18 1774.75,1214.12 1775.34,1214.13 1775.92,1213.7 1776.51,1213.52 1777.1,1213.6 1777.68,1210.73 1778.27,1210.84 1778.86,1210.74 1779.44,1210.99 1780.03,1210.99 1780.61,1211.16 1781.2,1208.63 1781.79,1206.06 1782.37,1206.5 1782.96,1205.45 1783.55,1201.92 1784.13,1203.97 1784.72,1204.6 1785.31,1206.58 1785.89,1208.26 1786.48,1208.37 1787.06,1208.7 1787.65,1207.51 1788.24,1208.96 1788.82,1210.48 1789.41,1210.58 1790,1212.34 1790.58,1212.25 1791.17,1212.36 1791.76,1210.79 1792.34,1212.9 1792.93,1211.32 1793.52,1211.08 1794.1,1213.64 1794.69,1213.93 1795.27,1213.64 1795.86,1212.16 1796.45,1212.09 1797.03,1209.24 1797.62,1206.6 1798.21,1203 1798.79,1204.67 1799.38,1202.07 1799.97,1198.62 1800.55,1199.59 1801.14,1203.06 1801.73,1204.85 1802.31,1206.53 1802.9,1206.83 1803.48,1209.63 1804.07,1209.49 1804.66,1206.85 1805.24,1208.3 1805.83,1209.84 1806.42,1208.53 1807,1210.26 1807.59,1210.48 1808.18,1215.68 1808.76,1214.2 1809.35,1212.7 1809.94,1214.12 1810.52,1216.79 1811.11,1217.72 1811.69,1217.71 1812.28,1216.06 1812.87,1217.13 1813.45,1216.59 1814.04,1216.37 1814.63,1214.69 1815.21,1214.9 1815.8,1212.39 1816.39,1212.46 1816.97,1213.43 1817.56,1210.82 1818.14,1210.92 1818.73,1209.33 1819.32,1208.05 1819.9,1208.32 1820.49,1208.48 1821.08,1211.42 1821.66,1209.92 1822.25,1211.64 1822.84,1213.05 1823.42,1211.85 1824.01,1211.72 1824.6,1208.91 1825.18,1209.17 1825.77,1209.25 1826.35,1206.7 1826.94,1204.65 1827.53,1204.89 1828.11,1204.03 1828.7,1205.9 1829.29,1204.95 1829.87,1208.2 1830.46,1207.17 1831.05,1205.77 1831.63,1204.57 1832.22,1204.97 1832.81,1206.54 1833.39,1208.06 1833.98,1210.93 1834.56,1211.21 1835.15,1211.27 1835.74,1213.76 1836.32,1213.79 1836.91,1215.02 1837.5,1217.36 1838.08,1216.8 1838.67,1218.91 1839.26,1217.49 1839.84,1218.38 1840.43,1216.34 1841.01,1216.09 1841.6,1217.08 1842.19,1216.71 1842.77,1216.36 1843.36,1217.35 1843.95,1215.6 1844.53,1215.42 1845.12,1218.06 1845.71,1218.85 1846.29,1218.48 1846.88,1218.14 1847.47,1216.51 1848.05,1214.77 1848.64,1213.07 1849.22,1212.82 1849.81,1215.48 1850.4,1216.6 1850.98,1215.01 1851.57,1216.47 1852.16,1217.52 1852.74,1218.35 1853.33,1218.03 1853.92,1216.11 1854.5,1214.55 1855.09,1214.35 1855.68,1215.54 1856.26,1212.46 1856.85,1212.4 1857.43,1212.22 1858.02,1210.89 1858.61,1210.84 1859.19,1209.64 1859.78,1210.93 1860.37,1212.32 1860.95,1213.23 1861.54,1212.86 1862.13,1212.58 1862.71,1212.46 1863.3,1211.15 1863.88,1213.75 1864.47,1213.42 1865.06,1214.66 1865.64,1215.88 1866.23,1215.59 1866.82,1212.78 1867.4,1212.76 1867.99,1213.68 1868.58,1214.98 1869.16,1213.62 1869.75,1213.56 1870.34,1213.5 1870.92,1214.67 1871.51,1214.31 1872.09,1212.92 1872.68,1212.81 1873.27,1210.08 1873.85,1208.7 1874.44,1206.2 1875.03,1207.94 1875.61,1209.25 1876.2,1206.66 1876.79,1210.87 1877.37,1208.52 1877.96,1211.21 1878.55,1208.27 1879.13,1207.23 1879.72,1207.48 1880.3,1209.01 1880.89,1210.25 1881.48,1210.47 1882.06,1209.05 1882.65,1209.37 1883.24,1206.71 1883.82,1207 1884.41,1207.38 1885,1206.04 1885.58,1206.36 1886.17,1205.35 1886.76,1204.48 1887.34,1203.5 1887.93,1204.03 1888.51,1201.77 1889.1,1202.33 1889.69,1202.59 1890.27,1204.36 1890.86,1206.02 1891.45,1206.36 1892.03,1204.33 1892.62,1202.29 1893.21,1202.86 1893.79,1204.68 1894.38,1204.99 1894.96,1205.31 1895.55,1205.62 1896.14,1205.83 1896.72,1205.92 1897.31,1204.83 1897.9,1207.89 1898.48,1204.31 1899.07,1206 1899.66,1204.84 1900.24,1204 1900.83,1203.35 1901.42,1206.58 1902,1206.61 1902.59,1208.15 1903.17,1208.6 1903.76,1213.09 1904.35,1214.35 1904.93,1215.55 1905.52,1219.32 1906.11,1219.07 1906.69,1218.84 1907.28,1217.26 1907.87,1214.33 1908.45,1212.58 1909.04,1212.17 1909.63,1213.46 1910.21,1210.63 1910.8,1209.57 1911.38,1212.59 1911.97,1209.82 1912.56,1212.42 1913.14,1208.46 1913.73,1208.81 1914.32,1209.27 1914.9,1209.25 1915.49,1208.07 1916.08,1209.62 1916.66,1211.18 1917.25,1209.85 1917.83,1209.94 1918.42,1208.73 1919.01,1208.62 1919.59,1208.9 1920.18,1209.19 1920.77,1211.98 1921.35,1209.45 1921.94,1211.22 1922.53,1209.81 1923.11,1211.29 1923.7,1210.03 1924.29,1211.42 1924.87,1210.17 1925.46,1208.85 1926.04,1208.93 1926.63,1208.7 1927.22,1206.51 1927.8,1206.78 1928.39,1206.9 1928.98,1206.01 1929.56,1203.54 1930.15,1206.98 1930.74,1207.26 1931.32,1203.76 1931.91,1204.26 1932.5,1206.19 1933.08,1202.36 1933.67,1203.03 1934.25,1203.46 1934.84,1203.85 1935.43,1205.66 1936.01,1204.57 1936.6,1206.51 1937.19,1210.86 1937.77,1205.46 1938.36,1207 1938.95,1205.7 1939.53,1206.12 1940.12,1208.77 1940.71,1212.92 1941.29,1212.64 1941.88,1212.56 1942.46,1215.36 1943.05,1213.93 1943.64,1215.17 1944.22,1213.43 1944.81,1211.58 1945.4,1213.15 1945.98,1214.56 1946.57,1218.42 1947.16,1217.91 1947.74,1217.64 1948.33,1216.13 1948.91,1214.52 1949.5,1215.47 1950.09,1215.11 1950.67,1213.45 1951.26,1211.82 1951.85,1211.79 1952.43,1213.12 1953.02,1212.87 1953.61,1215.89 1954.19,1215.59 1954.78,1216.73 1955.37,1217.44 1955.95,1218.04 1956.54,1219.01 1957.12,1219.84 1957.71,1221.95 1958.3,1217.28 1958.88,1215.54 1959.47,1217.94 1960.06,1217.79 1960.64,1217.52 1961.23,1217.22 1961.82,1218.5 1962.4,1217.03 1962.99,1216.76 1963.58,1216.7 1964.16,1217.88 1964.75,1217.34 1965.33,1217.09 1965.92,1214.06 1966.51,1213.89 1967.09,1215.3 1967.68,1216.57 1968.27,1215.01 1968.85,1216.3 1969.44,1218.65 1970.03,1215.65 1970.61,1216.77 1971.2,1217.76 1971.78,1217.64 1972.37,1218.52 1972.96,1219.72 1973.54,1217.97 1974.13,1220.29 1974.72,1222.58 1975.3,1221.65 1975.89,1218.59 1976.48,1222.42 1977.06,1221.93 1977.65,1222.54 1978.24,1223.29 1978.82,1223.86 1979.41,1221.85 1979.99,1221.28 1980.58,1218.2 1981.17,1218.01 1981.75,1216.02 1982.34,1220.62 1982.93,1221.48 1983.51,1223.33 1984.1,1219.96 1984.69,1218 1985.27,1217.66 1985.86,1218.43 1986.45,1219.22 1987.03,1219.97 1987.62,1218.25 1988.2,1216.44 1988.79,1215.96 1989.38,1214.11 1989.96,1212.36 1990.55,1209.66 1991.14,1209.28 1991.72,1210.3 1992.31,1207.52 1992.9,1203.72 1993.48,1201.72 1994.07,1202.32 1994.65,1203.74 1995.24,1202.66 1995.83,1205.66 1996.41,1207.15 1997,1209.88 1997.59,1206.1 1998.17,1206.39 1998.76,1202.65 1999.35,1202.96 1999.93,1204.55 2000.52,1206.25 2001.11,1206.81 2001.69,1207.07 2002.28,1203.38 2002.86,1205.17 2003.45,1203 2004.04,1204.59 2004.62,1208.97 2005.21,1209.02 2005.8,1210.12 2006.38,1211.41 2006.97,1207.39 2007.56,1210.3 2008.14,1212.87 2008.73,1212.68 2009.32,1212.91 2009.9,1213.4 2010.49,1216.11 2011.07,1214.65 2011.66,1214.09 2012.25,1214.15 2012.83,1216.44 2013.42,1212.02 2014.01,1211.9 2014.59,1214.61 2015.18,1215.69 2015.77,1215.29 2016.35,1214.97 2016.94,1213.6 2017.53,1210.99 2018.11,1214.95 2018.7,1214.77 2019.28,1210.58 2019.87,1207.86 2020.46,1209.44 2021.04,1209.61 2021.63,1212.03 2022.22,1208.02 2022.8,1210.97 2023.39,1215.01 2023.98,1214.83 2024.56,1214.64 2025.15,1215.64 2025.73,1215.48 2026.32,1213.61 2026.91,1214.56 2027.49,1214.56 2028.08,1211.76 2028.67,1213 2029.25,1210.96 2029.84,1212.49 2030.43,1210.78 2031.01,1213.26 2031.6,1211.76 2032.19,1213.08 2032.77,1214.31 2033.36,1216.63 2033.94,1214.87 2034.53,1214.48 2035.12,1213.41 2035.7,1213.4 2036.29,1211.65 2036.88,1213.02 2037.46,1214.11 2038.05,1212.55 2038.64,1213.59 2039.22,1213.3 2039.81,1211.74 2040.4,1210.58 2040.98,1210.41 2041.57,1210.37 2042.15,1210.19 2042.74,1207.94 2043.33,1209.38 2043.91,1210.8 2044.5,1209.48 2045.09,1213.72 2045.67,1212.34 2046.26,1212.17 2046.85,1212.19 2047.43,1210.57 2048.02,1211.77 2048.6,1216.8 2049.19,1219.05 2049.78,1217.28 2050.36,1216.94 2050.95,1215.37 2051.54,1215.01 2052.12,1214.76 2052.71,1214.68 2053.3,1213.09 2053.88,1211.53 2054.47,1207.52 2055.06,1206.44 2055.64,1205.16 2056.23,1205.54 2056.81,1205.85 2057.4,1203.58 2057.99,1202.63 2058.57,1203.25 2059.16,1203.71 2059.75,1201.5 2060.33,1202.07 2060.92,1203.92 2061.51,1204.2 2062.09,1204.89 2062.68,1208.14 2063.27,1208.16 2063.85,1211.92 2064.44,1211.73 2065.02,1211.56 2065.61,1214.32 2066.2,1213.01 2066.78,1212.75 2067.37,1210.21 2067.96,1210.35 2068.54,1210.57 2069.13,1207.9 2069.72,1208.13 2070.3,1207.34 2070.89,1207.88 2071.48,1204.36 2072.06,1202.12 2072.65,1203.83 2073.23,1204.25 2073.82,1205.83 2074.41,1205.05 2074.99,1204.17 2075.58,1204.5 2076.17,1203.38 2076.75,1202.55 2077.34,1205.89 2077.93,1206.36 2078.51,1206.65 2079.1,1206.93 2079.68,1208.65 2080.27,1208.51 2080.86,1207.36 2081.44,1207.79 2082.03,1208.06 2082.62,1205.45 2083.2,1204.84 2083.79,1208.14 2084.38,1208.6 2084.96,1205.99 2085.55,1206.2 2086.14,1208.22 2086.72,1208.36 2087.31,1208.76 2087.89,1210.19 2088.48,1211.62 2089.07,1210.53 2089.65,1209.28 2090.24,1209.56 2090.83,1209.94 2091.41,1211.13 2092,1209.75 2092.59,1210.93 2093.17,1211.09 2093.76,1215.22 2094.35,1214.95 2094.93,1216.3 2095.52,1216.25 2096.1,1218.75 2096.69,1219.86 2097.28,1222.01 2097.86,1222.72 2098.45,1221.06 2099.04,1220.68 2099.62,1218.95 2100.21,1217.28 2100.8,1215.72 2101.38,1215.3 2101.97,1215.29 2102.55,1213.84 2103.14,1215.03 2103.73,1216.29 2104.31,1216.01 2104.9,1214.15 2105.49,1213.97 2106.07,1212.53 2106.66,1207.02 2107.25,1207.35 2107.83,1207.45 2108.42,1207.71 2109.01,1205.01 2109.59,1206.69 2110.18,1208.55 2110.76,1212.77 2111.35,1212.89 2111.94,1210.21 2112.52,1211.48 2113.11,1210.16 2113.7,1211.4 2114.28,1216.89 2114.87,1216.65 2115.46,1213.82 2116.04,1214.94 2116.63,1214.93 2117.22,1212.2 2117.8,1212.19 2118.39,1212.17 2118.97,1215.99 2119.56,1214.25 2120.15,1216.82 2120.73,1215.39 2121.32,1216.2 2121.91,1217.26 2122.49,1214.5 2123.08,1214.48 2123.67,1215.65 2124.25,1215.3 2124.84,1215.13 2125.42,1216.23 2126.01,1216.95 2126.6,1216.78 2127.18,1216.28 2127.77,1215.91 2128.36,1211.61 2128.94,1208.97 2129.53,1207.7 2130.12,1209.27 2130.7,1206.36 2131.29,1208.33 2131.88,1207 2132.46,1208.42 2133.05,1208.46 2133.63,1205.95 2134.22,1203.45 2134.81,1203.84 2135.39,1202.8 2135.98,1204.75 2136.57,1206.4 2137.15,1205.37 2137.74,1205.84 2138.33,1207.41 2138.91,1208.93 2139.5,1210.38 2140.09,1209.04 2140.67,1212.09 2141.26,1214.97 2141.84,1214.82 2142.43,1214.37 2143.02,1214.25 2143.6,1213.87 2144.19,1213.58 2144.78,1209.51 2145.36,1209.74 2145.95,1212.69 2146.54,1212.68 2147.12,1211.34 2147.71,1210.07 2148.3,1210.51 2148.88,1207.89 2149.47,1209.67 2150.05,1204.51 2150.64,1200.79 2151.23,1201.35 2151.81,1203.6 2152.4,1205.59 2152.99,1208.66 2153.57,1207.52 2154.16,1206.36 2154.75,1206.57 2155.33,1202.88 2155.92,1202.26 2156.5,1204.13 2157.09,1204.56 2157.68,1202.44 2158.26,1203.2 \"/>\n<path clip-path=\"url(#clip062)\" d=\"M986.025 1211.87 L986.612 1211.87 L987.198 1211.87 L987.785 1211.87 L988.371 1211.87 L988.957 1211.87 L989.544 1211.87 L990.13 1211.87 L990.717 1211.87 L991.303 1211.87 L991.889 1211.87 L992.476 1211.87 L993.062 1211.87 L993.649 1211.87 L994.235 1211.87 L994.822 1211.87 L995.408 1211.87 L995.994 1211.87 L996.581 1211.87 L997.167 1211.87 L997.754 1211.87 L998.34 1211.87 L998.926 1211.87 L999.513 1211.87 L1000.1 1211.87 L1000.69 1211.87 L1001.27 1211.87 L1001.86 1211.87 L1002.44 1211.87 L1003.03 1211.87 L1003.62 1211.87 L1004.2 1211.87 L1004.79 1211.87 L1005.38 1211.87 L1005.96 1211.87 L1006.55 1211.87 L1007.14 1211.87 L1007.72 1211.87 L1008.31 1211.87 L1008.9 1211.87 L1009.48 1211.87 L1010.07 1211.87 L1010.65 1211.87 L1011.24 1211.87 L1011.83 1211.87 L1012.41 1211.87 L1013 1211.87 L1013.59 1211.87 L1014.17 1211.87 L1014.76 1211.87 L1015.35 1211.87 L1015.93 1211.87 L1016.52 1211.87 L1017.11 1211.87 L1017.69 1211.87 L1018.28 1211.87 L1018.86 1211.87 L1019.45 1211.87 L1020.04 1211.87 L1020.62 1211.87 L1021.21 1211.87 L1021.8 1211.87 L1022.38 1211.87 L1022.97 1211.87 L1023.56 1211.87 L1024.14 1211.87 L1024.73 1211.87 L1025.32 1211.87 L1025.9 1211.87 L1026.49 1211.87 L1027.07 1211.87 L1027.66 1211.87 L1028.25 1211.87 L1028.83 1211.87 L1029.42 1211.87 L1030.01 1211.87 L1030.59 1211.87 L1031.18 1211.87 L1031.77 1211.87 L1032.35 1211.87 L1032.94 1211.87 L1033.52 1211.87 L1034.11 1211.87 L1034.7 1211.87 L1035.28 1211.87 L1035.87 1211.87 L1036.46 1211.87 L1037.04 1211.87 L1037.63 1211.87 L1038.22 1211.87 L1038.8 1211.87 L1039.39 1211.87 L1039.98 1211.87 L1040.56 1211.87 L1041.15 1211.87 L1041.73 1211.87 L1042.32 1211.87 L1042.91 1211.87 L1043.49 1211.87 L1044.08 1211.87 L1044.67 1211.87 L1045.25 1211.87 L1045.84 1211.87 L1046.43 1211.87 L1047.01 1211.87 L1047.6 1211.87 L1048.19 1211.87 L1048.77 1211.87 L1049.36 1211.87 L1049.94 1211.87 L1050.53 1211.87 L1051.12 1211.87 L1051.7 1211.87 L1052.29 1211.87 L1052.88 1211.87 L1053.46 1211.87 L1054.05 1211.87 L1054.64 1211.87 L1055.22 1211.87 L1055.81 1211.87 L1056.39 1211.87 L1056.98 1211.87 L1057.57 1211.87 L1058.15 1211.87 L1058.74 1211.87 L1059.33 1211.87 L1059.91 1211.87 L1060.5 1211.87 L1061.09 1211.87 L1061.67 1211.87 L1062.26 1211.87 L1062.85 1211.87 L1063.43 1211.87 L1064.02 1211.87 L1064.6 1211.87 L1065.19 1211.87 L1065.78 1211.87 L1066.36 1211.87 L1066.95 1211.87 L1067.54 1211.87 L1068.12 1211.87 L1068.71 1211.87 L1069.3 1211.87 L1069.88 1211.87 L1070.47 1211.87 L1071.06 1211.87 L1071.64 1211.87 L1072.23 1211.87 L1072.81 1211.87 L1073.4 1211.87 L1073.99 1211.87 L1074.57 1211.87 L1075.16 1211.87 L1075.75 1211.87 L1076.33 1211.87 L1076.92 1211.87 L1077.51 1211.87 L1078.09 1211.87 L1078.68 1211.87 L1079.26 1211.87 L1079.85 1211.87 L1080.44 1211.87 L1081.02 1211.87 L1081.61 1211.87 L1082.2 1211.87 L1082.78 1211.87 L1083.37 1211.87 L1083.96 1211.87 L1084.54 1211.87 L1085.13 1211.87 L1085.72 1211.87 L1086.3 1211.87 L1086.89 1211.87 L1087.47 1211.87 L1088.06 1211.87 L1088.65 1211.87 L1089.23 1211.87 L1089.82 1211.87 L1090.41 1211.87 L1090.99 1211.87 L1091.58 1211.87 L1092.17 1211.87 L1092.75 1211.87 L1093.34 1211.87 L1093.93 1211.87 L1094.51 1211.87 L1095.1 1211.87 L1095.68 1211.87 L1096.27 1211.87 L1096.86 1211.87 L1097.44 1211.87 L1098.03 1211.87 L1098.62 1211.87 L1099.2 1211.87 L1099.79 1211.87 L1100.38 1211.87 L1100.96 1211.87 L1101.55 1211.87 L1102.14 1211.87 L1102.72 1211.87 L1103.31 1211.87 L1103.89 1211.87 L1104.48 1211.87 L1105.07 1211.87 L1105.65 1211.87 L1106.24 1211.87 L1106.83 1211.87 L1107.41 1211.87 L1108 1211.87 L1108.59 1211.87 L1109.17 1211.87 L1109.76 1211.87 L1110.34 1211.87 L1110.93 1211.87 L1111.52 1211.87 L1112.1 1211.87 L1112.69 1211.87 L1113.28 1211.87 L1113.86 1211.87 L1114.45 1211.87 L1115.04 1211.87 L1115.62 1211.87 L1116.21 1211.87 L1116.8 1211.87 L1117.38 1211.87 L1117.97 1211.87 L1118.55 1211.87 L1119.14 1211.87 L1119.73 1211.87 L1120.31 1211.87 L1120.9 1211.87 L1121.49 1211.87 L1122.07 1211.87 L1122.66 1211.87 L1123.25 1211.87 L1123.83 1211.87 L1124.42 1211.87 L1125.01 1211.87 L1125.59 1211.87 L1126.18 1211.87 L1126.76 1211.87 L1127.35 1211.87 L1127.94 1211.87 L1128.52 1211.87 L1129.11 1211.87 L1129.7 1211.87 L1130.28 1211.87 L1130.87 1211.87 L1131.46 1211.87 L1132.04 1211.87 L1132.63 1211.87 L1133.21 1211.87 L1133.8 1211.87 L1134.39 1211.87 L1134.97 1211.87 L1135.56 1211.87 L1136.15 1211.87 L1136.73 1211.87 L1137.32 1211.87 L1137.91 1211.87 L1138.49 1211.87 L1139.08 1211.87 L1139.67 1211.87 L1140.25 1211.87 L1140.84 1211.87 L1141.42 1211.87 L1142.01 1211.87 L1142.6 1211.87 L1143.18 1211.87 L1143.77 1211.87 L1144.36 1211.87 L1144.94 1211.87 L1145.53 1211.87 L1146.12 1211.87 L1146.7 1211.87 L1147.29 1211.87 L1147.88 1211.87 L1148.46 1211.87 L1149.05 1211.87 L1149.63 1211.87 L1150.22 1211.87 L1150.81 1211.87 L1151.39 1211.87 L1151.98 1211.87 L1152.57 1211.87 L1153.15 1211.87 L1153.74 1211.87 L1154.33 1211.87 L1154.91 1211.87 L1155.5 1211.87 L1156.09 1211.87 L1156.67 1211.87 L1157.26 1211.87 L1157.84 1211.87 L1158.43 1211.87 L1159.02 1211.87 L1159.6 1211.87 L1160.19 1211.87 L1160.78 1211.87 L1161.36 1211.87 L1161.95 1211.87 L1162.54 1211.87 L1163.12 1211.87 L1163.71 1211.87 L1164.29 1211.87 L1164.88 1211.87 L1165.47 1211.87 L1166.05 1211.87 L1166.64 1211.87 L1167.23 1211.87 L1167.81 1211.87 L1168.4 1211.87 L1168.99 1211.87 L1169.57 1211.87 L1170.16 1211.87 L1170.75 1211.87 L1171.33 1211.87 L1171.92 1211.87 L1172.5 1211.87 L1173.09 1211.87 L1173.68 1211.87 L1174.26 1211.87 L1174.85 1211.87 L1175.44 1211.87 L1176.02 1211.87 L1176.61 1211.87 L1177.2 1211.87 L1177.78 1211.87 L1178.37 1211.87 L1178.96 1211.87 L1179.54 1211.87 L1180.13 1211.87 L1180.71 1211.87 L1181.3 1211.87 L1181.89 1211.87 L1182.47 1211.87 L1183.06 1211.87 L1183.65 1211.87 L1184.23 1211.87 L1184.82 1211.87 L1185.41 1211.87 L1185.99 1211.87 L1186.58 1211.87 L1187.16 1211.87 L1187.75 1211.87 L1188.34 1211.87 L1188.92 1211.87 L1189.51 1211.87 L1190.1 1211.87 L1190.68 1211.87 L1191.27 1211.87 L1191.86 1211.87 L1192.44 1211.87 L1193.03 1211.87 L1193.62 1211.87 L1194.2 1211.87 L1194.79 1211.87 L1195.37 1211.87 L1195.96 1211.87 L1196.55 1211.87 L1197.13 1211.87 L1197.72 1211.87 L1198.31 1211.87 L1198.89 1211.87 L1199.48 1211.87 L1200.07 1211.87 L1200.65 1211.87 L1201.24 1211.87 L1201.83 1211.87 L1202.41 1211.87 L1203 1211.87 L1203.58 1211.87 L1204.17 1211.87 L1204.76 1211.87 L1205.34 1211.87 L1205.93 1211.87 L1206.52 1211.87 L1207.1 1211.87 L1207.69 1211.87 L1208.28 1211.87 L1208.86 1211.87 L1209.45 1211.87 L1210.03 1211.87 L1210.62 1211.87 L1211.21 1211.87 L1211.79 1211.87 L1212.38 1211.87 L1212.97 1211.87 L1213.55 1211.87 L1214.14 1211.87 L1214.73 1211.87 L1215.31 1211.87 L1215.9 1211.87 L1216.49 1211.87 L1217.07 1211.87 L1217.66 1211.87 L1218.24 1211.87 L1218.83 1211.87 L1219.42 1211.87 L1220 1211.87 L1220.59 1211.87 L1221.18 1211.87 L1221.76 1211.87 L1222.35 1211.87 L1222.94 1211.87 L1223.52 1211.87 L1224.11 1211.87 L1224.7 1211.87 L1225.28 1211.87 L1225.87 1211.87 L1226.45 1211.87 L1227.04 1211.87 L1227.63 1211.87 L1228.21 1211.87 L1228.8 1211.87 L1229.39 1211.87 L1229.97 1211.87 L1230.56 1211.87 L1231.15 1211.87 L1231.73 1211.87 L1232.32 1211.87 L1232.91 1211.87 L1233.49 1211.87 L1234.08 1211.87 L1234.66 1211.87 L1235.25 1211.87 L1235.84 1211.87 L1236.42 1211.87 L1237.01 1211.87 L1237.6 1211.87 L1238.18 1211.87 L1238.77 1211.87 L1239.36 1211.87 L1239.94 1211.87 L1240.53 1211.87 L1241.11 1211.87 L1241.7 1211.87 L1242.29 1211.87 L1242.87 1211.87 L1243.46 1211.87 L1244.05 1211.87 L1244.63 1211.87 L1245.22 1211.87 L1245.81 1211.87 L1246.39 1211.87 L1246.98 1211.87 L1247.57 1211.87 L1248.15 1211.87 L1248.74 1211.87 L1249.32 1211.87 L1249.91 1211.87 L1250.5 1211.87 L1251.08 1211.87 L1251.67 1211.87 L1252.26 1211.87 L1252.84 1211.87 L1253.43 1211.87 L1254.02 1211.87 L1254.6 1211.87 L1255.19 1211.87 L1255.78 1211.87 L1256.36 1211.87 L1256.95 1211.87 L1257.53 1211.87 L1258.12 1211.87 L1258.71 1211.87 L1259.29 1211.87 L1259.88 1211.87 L1260.47 1211.87 L1261.05 1211.87 L1261.64 1211.87 L1262.23 1211.87 L1262.81 1211.87 L1263.4 1211.87 L1263.98 1211.87 L1264.57 1211.87 L1265.16 1211.87 L1265.74 1211.87 L1266.33 1211.87 L1266.92 1211.87 L1267.5 1211.87 L1268.09 1211.87 L1268.68 1211.87 L1269.26 1211.87 L1269.85 1211.87 L1270.44 1211.87 L1271.02 1211.87 L1271.61 1211.87 L1272.19 1211.87 L1272.78 1211.87 L1273.37 1211.87 L1273.95 1211.87 L1274.54 1211.87 L1275.13 1211.87 L1275.71 1211.87 L1276.3 1211.87 L1276.89 1211.87 L1277.47 1211.87 L1278.06 1211.87 L1278.65 1211.87 L1279.23 1211.87 L1279.82 1211.87 L1280.4 1211.87 L1280.99 1211.87 L1281.58 1211.87 L1282.16 1211.87 L1282.75 1211.87 L1283.34 1211.87 L1283.92 1211.87 L1284.51 1211.87 L1285.1 1211.87 L1285.68 1211.87 L1286.27 1211.87 L1286.86 1211.87 L1287.44 1211.87 L1288.03 1211.87 L1288.61 1211.87 L1289.2 1211.87 L1289.79 1211.87 L1290.37 1211.87 L1290.96 1211.87 L1291.55 1211.87 L1292.13 1211.87 L1292.72 1211.87 L1293.31 1211.87 L1293.89 1211.87 L1294.48 1211.87 L1295.06 1211.87 L1295.65 1211.87 L1296.24 1211.87 L1296.82 1211.87 L1297.41 1211.87 L1298 1211.87 L1298.58 1211.87 L1299.17 1211.87 L1299.76 1211.87 L1300.34 1211.87 L1300.93 1211.87 L1301.52 1211.87 L1302.1 1211.87 L1302.69 1211.87 L1303.27 1211.87 L1303.86 1211.87 L1304.45 1211.87 L1305.03 1211.87 L1305.62 1211.87 L1306.21 1211.87 L1306.79 1211.87 L1307.38 1211.87 L1307.97 1211.87 L1308.55 1211.87 L1309.14 1211.87 L1309.73 1211.87 L1310.31 1211.87 L1310.9 1211.87 L1311.48 1211.87 L1312.07 1211.87 L1312.66 1211.87 L1313.24 1211.87 L1313.83 1211.87 L1314.42 1211.87 L1315 1211.87 L1315.59 1211.87 L1316.18 1211.87 L1316.76 1211.87 L1317.35 1211.87 L1317.93 1211.87 L1318.52 1211.87 L1319.11 1211.87 L1319.69 1211.87 L1320.28 1211.87 L1320.87 1211.87 L1321.45 1211.87 L1322.04 1211.87 L1322.63 1211.87 L1323.21 1211.87 L1323.8 1211.87 L1324.39 1211.87 L1324.97 1211.87 L1325.56 1211.87 L1326.14 1211.87 L1326.73 1211.87 L1327.32 1211.87 L1327.9 1211.87 L1328.49 1211.87 L1329.08 1211.87 L1329.66 1211.87 L1330.25 1211.87 L1330.84 1211.87 L1331.42 1211.87 L1332.01 1211.87 L1332.6 1211.87 L1333.18 1211.87 L1333.77 1211.87 L1334.35 1211.87 L1334.94 1211.87 L1335.53 1211.87 L1336.11 1211.87 L1336.7 1211.87 L1337.29 1211.87 L1337.87 1211.87 L1338.46 1211.87 L1339.05 1211.87 L1339.63 1211.87 L1340.22 1211.87 L1340.8 1211.87 L1341.39 1211.87 L1341.98 1211.87 L1342.56 1211.87 L1343.15 1211.87 L1343.74 1211.87 L1344.32 1211.87 L1344.91 1211.87 L1345.5 1211.87 L1346.08 1211.87 L1346.67 1211.87 L1347.26 1211.87 L1347.84 1211.87 L1348.43 1211.87 L1349.01 1211.87 L1349.6 1211.87 L1350.19 1211.87 L1350.77 1211.87 L1351.36 1211.87 L1351.95 1211.87 L1352.53 1211.87 L1353.12 1211.87 L1353.71 1211.87 L1354.29 1211.87 L1354.88 1211.87 L1355.47 1211.87 L1356.05 1211.87 L1356.64 1211.87 L1357.22 1211.87 L1357.81 1211.87 L1358.4 1211.87 L1358.98 1211.87 L1359.57 1211.87 L1360.16 1211.87 L1360.74 1211.87 L1361.33 1211.87 L1361.92 1211.87 L1362.5 1211.87 L1363.09 1211.87 L1363.68 1211.87 L1364.26 1211.87 L1364.85 1211.87 L1365.43 1211.87 L1366.02 1211.87 L1366.61 1211.87 L1367.19 1211.87 L1367.78 1211.87 L1368.37 1211.87 L1368.95 1211.87 L1369.54 1211.87 L1370.13 1211.87 L1370.71 1211.87 L1371.3 1211.87 L1371.88 1211.87 L1372.47 1211.87 L1373.06 1211.87 L1373.64 1211.87 L1374.23 1211.87 L1374.82 1211.87 L1375.4 1211.87 L1375.99 1211.87 L1376.58 1211.87 L1377.16 1211.87 L1377.75 1211.87 L1378.34 1211.87 L1378.92 1211.87 L1379.51 1211.87 L1380.09 1211.87 L1380.68 1211.87 L1381.27 1211.87 L1381.85 1211.87 L1382.44 1211.87 L1383.03 1211.87 L1383.61 1211.87 L1384.2 1211.87 L1384.79 1211.87 L1385.37 1211.87 L1385.96 1211.87 L1386.55 1211.87 L1387.13 1211.87 L1387.72 1211.87 L1388.3 1211.87 L1388.89 1211.87 L1389.48 1211.87 L1390.06 1211.87 L1390.65 1211.87 L1391.24 1211.87 L1391.82 1211.87 L1392.41 1211.87 L1393 1211.87 L1393.58 1211.87 L1394.17 1211.87 L1394.75 1211.87 L1395.34 1211.87 L1395.93 1211.87 L1396.51 1211.87 L1397.1 1211.87 L1397.69 1211.87 L1398.27 1211.87 L1398.86 1211.87 L1399.45 1211.87 L1400.03 1211.87 L1400.62 1211.87 L1401.21 1211.87 L1401.79 1211.87 L1402.38 1211.87 L1402.96 1211.87 L1403.55 1211.87 L1404.14 1211.87 L1404.72 1211.87 L1405.31 1211.87 L1405.9 1211.87 L1406.48 1211.87 L1407.07 1211.87 L1407.66 1211.87 L1408.24 1211.87 L1408.83 1211.87 L1409.42 1211.87 L1410 1211.87 L1410.59 1211.87 L1411.17 1211.87 L1411.76 1211.87 L1412.35 1211.87 L1412.93 1211.87 L1413.52 1211.87 L1414.11 1211.87 L1414.69 1211.87 L1415.28 1211.87 L1415.87 1211.87 L1416.45 1211.87 L1417.04 1211.87 L1417.63 1211.87 L1418.21 1211.87 L1418.8 1211.87 L1419.38 1211.87 L1419.97 1211.87 L1420.56 1211.87 L1421.14 1211.87 L1421.73 1211.87 L1422.32 1211.87 L1422.9 1211.87 L1423.49 1211.87 L1424.08 1211.87 L1424.66 1211.87 L1425.25 1211.87 L1425.83 1211.87 L1426.42 1211.87 L1427.01 1211.87 L1427.59 1211.87 L1428.18 1211.87 L1428.77 1211.87 L1429.35 1211.87 L1429.94 1211.87 L1430.53 1211.87 L1431.11 1211.87 L1431.7 1211.87 L1432.29 1211.87 L1432.87 1211.87 L1433.46 1211.87 L1434.04 1211.87 L1434.63 1211.87 L1435.22 1211.87 L1435.8 1211.87 L1436.39 1211.87 L1436.98 1211.87 L1437.56 1211.87 L1438.15 1211.87 L1438.74 1211.87 L1439.32 1211.87 L1439.91 1211.87 L1440.5 1211.87 L1441.08 1211.87 L1441.67 1211.87 L1442.25 1211.87 L1442.84 1211.87 L1443.43 1211.87 L1444.01 1211.87 L1444.6 1211.87 L1445.19 1211.87 L1445.77 1211.87 L1446.36 1211.87 L1446.95 1211.87 L1447.53 1211.87 L1448.12 1211.87 L1448.7 1211.87 L1449.29 1211.87 L1449.88 1211.87 L1450.46 1211.87 L1451.05 1211.87 L1451.64 1211.87 L1452.22 1211.87 L1452.81 1211.87 L1453.4 1211.87 L1453.98 1211.87 L1454.57 1211.87 L1455.16 1211.87 L1455.74 1211.87 L1456.33 1211.87 L1456.91 1211.87 L1457.5 1211.87 L1458.09 1211.87 L1458.67 1211.87 L1459.26 1211.87 L1459.85 1211.87 L1460.43 1211.87 L1461.02 1211.87 L1461.61 1211.87 L1462.19 1211.87 L1462.78 1211.87 L1463.37 1211.87 L1463.95 1211.87 L1464.54 1211.87 L1465.12 1211.87 L1465.71 1211.87 L1466.3 1211.87 L1466.88 1211.87 L1467.47 1211.87 L1468.06 1211.87 L1468.64 1211.87 L1469.23 1211.87 L1469.82 1211.87 L1470.4 1211.87 L1470.99 1211.87 L1471.57 1211.87 L1472.16 1211.87 L1472.75 1211.87 L1473.33 1211.87 L1473.92 1211.87 L1474.51 1211.87 L1475.09 1211.87 L1475.68 1211.87 L1476.27 1211.87 L1476.85 1211.87 L1477.44 1211.87 L1478.03 1211.87 L1478.61 1211.87 L1479.2 1211.87 L1479.78 1211.87 L1480.37 1211.87 L1480.96 1211.87 L1481.54 1211.87 L1482.13 1211.87 L1482.72 1211.87 L1483.3 1211.87 L1483.89 1211.87 L1484.48 1211.87 L1485.06 1211.87 L1485.65 1211.87 L1486.24 1211.87 L1486.82 1211.87 L1487.41 1211.87 L1487.99 1211.87 L1488.58 1211.87 L1489.17 1211.87 L1489.75 1211.87 L1490.34 1211.87 L1490.93 1211.87 L1491.51 1211.87 L1492.1 1211.87 L1492.69 1211.87 L1493.27 1211.87 L1493.86 1211.87 L1494.45 1211.87 L1495.03 1211.87 L1495.62 1211.87 L1496.2 1211.87 L1496.79 1211.87 L1497.38 1211.87 L1497.96 1211.87 L1498.55 1211.87 L1499.14 1211.87 L1499.72 1211.87 L1500.31 1211.87 L1500.9 1211.87 L1501.48 1211.87 L1502.07 1211.87 L1502.65 1211.87 L1503.24 1211.87 L1503.83 1211.87 L1504.41 1211.87 L1505 1211.87 L1505.59 1211.87 L1506.17 1211.87 L1506.76 1211.87 L1507.35 1211.87 L1507.93 1211.87 L1508.52 1211.87 L1509.11 1211.87 L1509.69 1211.87 L1510.28 1211.87 L1510.86 1211.87 L1511.45 1211.87 L1512.04 1211.87 L1512.62 1211.87 L1513.21 1211.87 L1513.8 1211.87 L1514.38 1211.87 L1514.97 1211.87 L1515.56 1211.87 L1516.14 1211.87 L1516.73 1211.87 L1517.32 1211.87 L1517.9 1211.87 L1518.49 1211.87 L1519.07 1211.87 L1519.66 1211.87 L1520.25 1211.87 L1520.83 1211.87 L1521.42 1211.87 L1522.01 1211.87 L1522.59 1211.87 L1523.18 1211.87 L1523.77 1211.87 L1524.35 1211.87 L1524.94 1211.87 L1525.52 1211.87 L1526.11 1211.87 L1526.7 1211.87 L1527.28 1211.87 L1527.87 1211.87 L1528.46 1211.87 L1529.04 1211.87 L1529.63 1211.87 L1530.22 1211.87 L1530.8 1211.87 L1531.39 1211.87 L1531.98 1211.87 L1532.56 1211.87 L1533.15 1211.87 L1533.73 1211.87 L1534.32 1211.87 L1534.91 1211.87 L1535.49 1211.87 L1536.08 1211.87 L1536.67 1211.87 L1537.25 1211.87 L1537.84 1211.87 L1538.43 1211.87 L1539.01 1211.87 L1539.6 1211.87 L1540.19 1211.87 L1540.77 1211.87 L1541.36 1211.87 L1541.94 1211.87 L1542.53 1211.87 L1543.12 1211.87 L1543.7 1211.87 L1544.29 1211.87 L1544.88 1211.87 L1545.46 1211.87 L1546.05 1211.87 L1546.64 1211.87 L1547.22 1211.87 L1547.81 1211.87 L1548.4 1211.87 L1548.98 1211.87 L1549.57 1211.87 L1550.15 1211.87 L1550.74 1211.87 L1551.33 1211.87 L1551.91 1211.87 L1552.5 1211.87 L1553.09 1211.87 L1553.67 1211.87 L1554.26 1211.87 L1554.85 1211.87 L1555.43 1211.87 L1556.02 1211.87 L1556.6 1211.87 L1557.19 1211.87 L1557.78 1211.87 L1558.36 1211.87 L1558.95 1211.87 L1559.54 1211.87 L1560.12 1211.87 L1560.71 1211.87 L1561.3 1211.87 L1561.88 1211.87 L1562.47 1211.87 L1563.06 1211.87 L1563.64 1211.87 L1564.23 1211.87 L1564.81 1211.87 L1565.4 1211.87 L1565.99 1211.87 L1566.57 1211.87 L1567.16 1211.87 L1567.75 1211.87 L1568.33 1211.87 L1568.92 1211.87 L1569.51 1211.87 L1570.09 1211.87 L1570.68 1211.87 L1571.27 1211.87 L1571.85 1211.87 L1572.44 1211.87 L1573.02 1211.87 L1573.61 1211.87 L1574.2 1211.87 L1574.78 1211.87 L1575.37 1211.87 L1575.96 1211.87 L1576.54 1211.87 L1577.13 1211.87 L1577.72 1211.87 L1578.3 1211.87 L1578.89 1211.87 L1579.47 1211.87 L1580.06 1211.87 L1580.65 1211.87 L1581.23 1211.87 L1581.82 1211.87 L1582.41 1211.87 L1582.99 1211.87 L1583.58 1211.87 L1584.17 1211.87 L1584.75 1211.87 L1585.34 1211.87 L1585.93 1211.87 L1586.51 1211.87 L1587.1 1211.87 L1587.68 1211.87 L1588.27 1211.87 L1588.86 1211.87 L1589.44 1211.87 L1590.03 1211.87 L1590.62 1211.87 L1591.2 1211.87 L1591.79 1211.87 L1592.38 1211.87 L1592.96 1211.87 L1593.55 1211.87 L1594.14 1211.87 L1594.72 1211.87 L1595.31 1211.87 L1595.89 1211.87 L1596.48 1211.87 L1597.07 1211.87 L1597.65 1211.87 L1598.24 1211.87 L1598.83 1211.87 L1599.41 1211.87 L1600 1211.87 L1600.59 1211.87 L1601.17 1211.87 L1601.76 1211.87 L1602.34 1211.87 L1602.93 1211.87 L1603.52 1211.87 L1604.1 1211.87 L1604.69 1211.87 L1605.28 1211.87 L1605.86 1211.87 L1606.45 1211.87 L1607.04 1211.87 L1607.62 1211.87 L1608.21 1211.87 L1608.8 1211.87 L1609.38 1211.87 L1609.97 1211.87 L1610.55 1211.87 L1611.14 1211.87 L1611.73 1211.87 L1612.31 1211.87 L1612.9 1211.87 L1613.49 1211.87 L1614.07 1211.87 L1614.66 1211.87 L1615.25 1211.87 L1615.83 1211.87 L1616.42 1211.87 L1617.01 1211.87 L1617.59 1211.87 L1618.18 1211.87 L1618.76 1211.87 L1619.35 1211.87 L1619.94 1211.87 L1620.52 1211.87 L1621.11 1211.87 L1621.7 1211.87 L1622.28 1211.87 L1622.87 1211.87 L1623.46 1211.87 L1624.04 1211.87 L1624.63 1211.87 L1625.22 1211.87 L1625.8 1211.87 L1626.39 1211.87 L1626.97 1211.87 L1627.56 1211.87 L1628.15 1211.87 L1628.73 1211.87 L1629.32 1211.87 L1629.91 1211.87 L1630.49 1211.87 L1631.08 1211.87 L1631.67 1211.87 L1632.25 1211.87 L1632.84 1211.87 L1633.42 1211.87 L1634.01 1211.87 L1634.6 1211.87 L1635.18 1211.87 L1635.77 1211.87 L1636.36 1211.87 L1636.94 1211.87 L1637.53 1211.87 L1638.12 1211.87 L1638.7 1211.87 L1639.29 1211.87 L1639.88 1211.87 L1640.46 1211.87 L1641.05 1211.87 L1641.63 1211.87 L1642.22 1211.87 L1642.81 1211.87 L1643.39 1211.87 L1643.98 1211.87 L1644.57 1211.87 L1645.15 1211.87 L1645.74 1211.87 L1646.33 1211.87 L1646.91 1211.87 L1647.5 1211.87 L1648.09 1211.87 L1648.67 1211.87 L1649.26 1211.87 L1649.84 1211.87 L1650.43 1211.87 L1651.02 1211.87 L1651.6 1211.87 L1652.19 1211.87 L1652.78 1211.87 L1653.36 1211.87 L1653.95 1211.87 L1654.54 1211.87 L1655.12 1211.87 L1655.71 1211.87 L1656.29 1211.87 L1656.88 1211.87 L1657.47 1211.87 L1658.05 1211.87 L1658.64 1211.87 L1659.23 1211.87 L1659.81 1211.87 L1660.4 1211.87 L1660.99 1211.87 L1661.57 1211.87 L1662.16 1211.87 L1662.75 1211.87 L1663.33 1211.87 L1663.92 1211.87 L1664.5 1211.87 L1665.09 1211.87 L1665.68 1211.87 L1666.26 1211.87 L1666.85 1211.87 L1667.44 1211.87 L1668.02 1211.87 L1668.61 1211.87 L1669.2 1211.87 L1669.78 1211.87 L1670.37 1211.87 L1670.96 1211.87 L1671.54 1211.87 L1672.13 1211.87 L1672.71 1211.87 L1673.3 1211.87 L1673.89 1211.87 L1674.47 1211.87 L1675.06 1211.87 L1675.65 1211.87 L1676.23 1211.87 L1676.82 1211.87 L1677.41 1211.87 L1677.99 1211.87 L1678.58 1211.87 L1679.17 1211.87 L1679.75 1211.87 L1680.34 1211.87 L1680.92 1211.87 L1681.51 1211.87 L1682.1 1211.87 L1682.68 1211.87 L1683.27 1211.87 L1683.86 1211.87 L1684.44 1211.87 L1685.03 1211.87 L1685.62 1211.87 L1686.2 1211.87 L1686.79 1211.87 L1687.37 1211.87 L1687.96 1211.87 L1688.55 1211.87 L1689.13 1211.87 L1689.72 1211.87 L1690.31 1211.87 L1690.89 1211.87 L1691.48 1211.87 L1692.07 1211.87 L1692.65 1211.87 L1693.24 1211.87 L1693.83 1211.87 L1694.41 1211.87 L1695 1211.87 L1695.58 1211.87 L1696.17 1211.87 L1696.76 1211.87 L1697.34 1211.87 L1697.93 1211.87 L1698.52 1211.87 L1699.1 1211.87 L1699.69 1211.87 L1700.28 1211.87 L1700.86 1211.87 L1701.45 1211.87 L1702.04 1211.87 L1702.62 1211.87 L1703.21 1211.87 L1703.79 1211.87 L1704.38 1211.87 L1704.97 1211.87 L1705.55 1211.87 L1706.14 1211.87 L1706.73 1211.87 L1707.31 1211.87 L1707.9 1211.87 L1708.49 1211.87 L1709.07 1211.87 L1709.66 1211.87 L1710.24 1211.87 L1710.83 1211.87 L1711.42 1211.87 L1712 1211.87 L1712.59 1211.87 L1713.18 1211.87 L1713.76 1211.87 L1714.35 1211.87 L1714.94 1211.87 L1715.52 1211.87 L1716.11 1211.87 L1716.7 1211.87 L1717.28 1211.87 L1717.87 1211.87 L1718.45 1211.87 L1719.04 1211.87 L1719.63 1211.87 L1720.21 1211.87 L1720.8 1211.87 L1721.39 1211.87 L1721.97 1211.87 L1722.56 1211.87 L1723.15 1211.87 L1723.73 1211.87 L1724.32 1211.87 L1724.91 1211.87 L1725.49 1211.87 L1726.08 1211.87 L1726.66 1211.87 L1727.25 1211.87 L1727.84 1211.87 L1728.42 1211.87 L1729.01 1211.87 L1729.6 1211.87 L1730.18 1211.87 L1730.77 1211.87 L1731.36 1211.87 L1731.94 1211.87 L1732.53 1211.87 L1733.11 1211.87 L1733.7 1211.87 L1734.29 1211.87 L1734.87 1211.87 L1735.46 1211.87 L1736.05 1211.87 L1736.63 1211.87 L1737.22 1211.87 L1737.81 1211.87 L1738.39 1211.87 L1738.98 1211.87 L1739.57 1211.87 L1740.15 1211.87 L1740.74 1211.87 L1741.32 1211.87 L1741.91 1211.87 L1742.5 1211.87 L1743.08 1211.87 L1743.67 1211.87 L1744.26 1211.87 L1744.84 1211.87 L1745.43 1211.87 L1746.02 1211.87 L1746.6 1211.87 L1747.19 1211.87 L1747.78 1211.87 L1748.36 1211.87 L1748.95 1211.87 L1749.53 1211.87 L1750.12 1211.87 L1750.71 1211.87 L1751.29 1211.87 L1751.88 1211.87 L1752.47 1211.87 L1753.05 1211.87 L1753.64 1211.87 L1754.23 1211.87 L1754.81 1211.87 L1755.4 1211.87 L1755.99 1211.87 L1756.57 1211.87 L1757.16 1211.87 L1757.74 1211.87 L1758.33 1211.87 L1758.92 1211.87 L1759.5 1211.87 L1760.09 1211.87 L1760.68 1211.87 L1761.26 1211.87 L1761.85 1211.87 L1762.44 1211.87 L1763.02 1211.87 L1763.61 1211.87 L1764.19 1211.87 L1764.78 1211.87 L1765.37 1211.87 L1765.95 1211.87 L1766.54 1211.87 L1767.13 1211.87 L1767.71 1211.87 L1768.3 1211.87 L1768.89 1211.87 L1769.47 1211.87 L1770.06 1211.87 L1770.65 1211.87 L1771.23 1211.87 L1771.82 1211.87 L1772.4 1211.87 L1772.99 1211.87 L1773.58 1211.87 L1774.16 1211.87 L1774.75 1211.87 L1775.34 1211.87 L1775.92 1211.87 L1776.51 1211.87 L1777.1 1211.87 L1777.68 1211.87 L1778.27 1211.87 L1778.86 1211.87 L1779.44 1211.87 L1780.03 1211.87 L1780.61 1211.87 L1781.2 1211.87 L1781.79 1211.87 L1782.37 1211.87 L1782.96 1211.87 L1783.55 1211.87 L1784.13 1211.87 L1784.72 1211.87 L1785.31 1211.87 L1785.89 1211.87 L1786.48 1211.87 L1787.06 1211.87 L1787.65 1211.87 L1788.24 1211.87 L1788.82 1211.87 L1789.41 1211.87 L1790 1211.87 L1790.58 1211.87 L1791.17 1211.87 L1791.76 1211.87 L1792.34 1211.87 L1792.93 1211.87 L1793.52 1211.87 L1794.1 1211.87 L1794.69 1211.87 L1795.27 1211.87 L1795.86 1211.87 L1796.45 1211.87 L1797.03 1211.87 L1797.62 1211.87 L1798.21 1211.87 L1798.79 1211.87 L1799.38 1211.87 L1799.97 1211.87 L1800.55 1211.87 L1801.14 1211.87 L1801.73 1211.87 L1802.31 1211.87 L1802.9 1211.87 L1803.48 1211.87 L1804.07 1211.87 L1804.66 1211.87 L1805.24 1211.87 L1805.83 1211.87 L1806.42 1211.87 L1807 1211.87 L1807.59 1211.87 L1808.18 1211.87 L1808.76 1211.87 L1809.35 1211.87 L1809.94 1211.87 L1810.52 1211.87 L1811.11 1211.87 L1811.69 1211.87 L1812.28 1211.87 L1812.87 1211.87 L1813.45 1211.87 L1814.04 1211.87 L1814.63 1211.87 L1815.21 1211.87 L1815.8 1211.87 L1816.39 1211.87 L1816.97 1211.87 L1817.56 1211.87 L1818.14 1211.87 L1818.73 1211.87 L1819.32 1211.87 L1819.9 1211.87 L1820.49 1211.87 L1821.08 1211.87 L1821.66 1211.87 L1822.25 1211.87 L1822.84 1211.87 L1823.42 1211.87 L1824.01 1211.87 L1824.6 1211.87 L1825.18 1211.87 L1825.77 1211.87 L1826.35 1211.87 L1826.94 1211.87 L1827.53 1211.87 L1828.11 1211.87 L1828.7 1211.87 L1829.29 1211.87 L1829.87 1211.87 L1830.46 1211.87 L1831.05 1211.87 L1831.63 1211.87 L1832.22 1211.87 L1832.81 1211.87 L1833.39 1211.87 L1833.98 1211.87 L1834.56 1211.87 L1835.15 1211.87 L1835.74 1211.87 L1836.32 1211.87 L1836.91 1211.87 L1837.5 1211.87 L1838.08 1211.87 L1838.67 1211.87 L1839.26 1211.87 L1839.84 1211.87 L1840.43 1211.87 L1841.01 1211.87 L1841.6 1211.87 L1842.19 1211.87 L1842.77 1211.87 L1843.36 1211.87 L1843.95 1211.87 L1844.53 1211.87 L1845.12 1211.87 L1845.71 1211.87 L1846.29 1211.87 L1846.88 1211.87 L1847.47 1211.87 L1848.05 1211.87 L1848.64 1211.87 L1849.22 1211.87 L1849.81 1211.87 L1850.4 1211.87 L1850.98 1211.87 L1851.57 1211.87 L1852.16 1211.87 L1852.74 1211.87 L1853.33 1211.87 L1853.92 1211.87 L1854.5 1211.87 L1855.09 1211.87 L1855.68 1211.87 L1856.26 1211.87 L1856.85 1211.87 L1857.43 1211.87 L1858.02 1211.87 L1858.61 1211.87 L1859.19 1211.87 L1859.78 1211.87 L1860.37 1211.87 L1860.95 1211.87 L1861.54 1211.87 L1862.13 1211.87 L1862.71 1211.87 L1863.3 1211.87 L1863.88 1211.87 L1864.47 1211.87 L1865.06 1211.87 L1865.64 1211.87 L1866.23 1211.87 L1866.82 1211.87 L1867.4 1211.87 L1867.99 1211.87 L1868.58 1211.87 L1869.16 1211.87 L1869.75 1211.87 L1870.34 1211.87 L1870.92 1211.87 L1871.51 1211.87 L1872.09 1211.87 L1872.68 1211.87 L1873.27 1211.87 L1873.85 1211.87 L1874.44 1211.87 L1875.03 1211.87 L1875.61 1211.87 L1876.2 1211.87 L1876.79 1211.87 L1877.37 1211.87 L1877.96 1211.87 L1878.55 1211.87 L1879.13 1211.87 L1879.72 1211.87 L1880.3 1211.87 L1880.89 1211.87 L1881.48 1211.87 L1882.06 1211.87 L1882.65 1211.87 L1883.24 1211.87 L1883.82 1211.87 L1884.41 1211.87 L1885 1211.87 L1885.58 1211.87 L1886.17 1211.87 L1886.76 1211.87 L1887.34 1211.87 L1887.93 1211.87 L1888.51 1211.87 L1889.1 1211.87 L1889.69 1211.87 L1890.27 1211.87 L1890.86 1211.87 L1891.45 1211.87 L1892.03 1211.87 L1892.62 1211.87 L1893.21 1211.87 L1893.79 1211.87 L1894.38 1211.87 L1894.96 1211.87 L1895.55 1211.87 L1896.14 1211.87 L1896.72 1211.87 L1897.31 1211.87 L1897.9 1211.87 L1898.48 1211.87 L1899.07 1211.87 L1899.66 1211.87 L1900.24 1211.87 L1900.83 1211.87 L1901.42 1211.87 L1902 1211.87 L1902.59 1211.87 L1903.17 1211.87 L1903.76 1211.87 L1904.35 1211.87 L1904.93 1211.87 L1905.52 1211.87 L1906.11 1211.87 L1906.69 1211.87 L1907.28 1211.87 L1907.87 1211.87 L1908.45 1211.87 L1909.04 1211.87 L1909.63 1211.87 L1910.21 1211.87 L1910.8 1211.87 L1911.38 1211.87 L1911.97 1211.87 L1912.56 1211.87 L1913.14 1211.87 L1913.73 1211.87 L1914.32 1211.87 L1914.9 1211.87 L1915.49 1211.87 L1916.08 1211.87 L1916.66 1211.87 L1917.25 1211.87 L1917.83 1211.87 L1918.42 1211.87 L1919.01 1211.87 L1919.59 1211.87 L1920.18 1211.87 L1920.77 1211.87 L1921.35 1211.87 L1921.94 1211.87 L1922.53 1211.87 L1923.11 1211.87 L1923.7 1211.87 L1924.29 1211.87 L1924.87 1211.87 L1925.46 1211.87 L1926.04 1211.87 L1926.63 1211.87 L1927.22 1211.87 L1927.8 1211.87 L1928.39 1211.87 L1928.98 1211.87 L1929.56 1211.87 L1930.15 1211.87 L1930.74 1211.87 L1931.32 1211.87 L1931.91 1211.87 L1932.5 1211.87 L1933.08 1211.87 L1933.67 1211.87 L1934.25 1211.87 L1934.84 1211.87 L1935.43 1211.87 L1936.01 1211.87 L1936.6 1211.87 L1937.19 1211.87 L1937.77 1211.87 L1938.36 1211.87 L1938.95 1211.87 L1939.53 1211.87 L1940.12 1211.87 L1940.71 1211.87 L1941.29 1211.87 L1941.88 1211.87 L1942.46 1211.87 L1943.05 1211.87 L1943.64 1211.87 L1944.22 1211.87 L1944.81 1211.87 L1945.4 1211.87 L1945.98 1211.87 L1946.57 1211.87 L1947.16 1211.87 L1947.74 1211.87 L1948.33 1211.87 L1948.91 1211.87 L1949.5 1211.87 L1950.09 1211.87 L1950.67 1211.87 L1951.26 1211.87 L1951.85 1211.87 L1952.43 1211.87 L1953.02 1211.87 L1953.61 1211.87 L1954.19 1211.87 L1954.78 1211.87 L1955.37 1211.87 L1955.95 1211.87 L1956.54 1211.87 L1957.12 1211.87 L1957.71 1211.87 L1958.3 1211.87 L1958.88 1211.87 L1959.47 1211.87 L1960.06 1211.87 L1960.64 1211.87 L1961.23 1211.87 L1961.82 1211.87 L1962.4 1211.87 L1962.99 1211.87 L1963.58 1211.87 L1964.16 1211.87 L1964.75 1211.87 L1965.33 1211.87 L1965.92 1211.87 L1966.51 1211.87 L1967.09 1211.87 L1967.68 1211.87 L1968.27 1211.87 L1968.85 1211.87 L1969.44 1211.87 L1970.03 1211.87 L1970.61 1211.87 L1971.2 1211.87 L1971.78 1211.87 L1972.37 1211.87 L1972.96 1211.87 L1973.54 1211.87 L1974.13 1211.87 L1974.72 1211.87 L1975.3 1211.87 L1975.89 1211.87 L1976.48 1211.87 L1977.06 1211.87 L1977.65 1211.87 L1978.24 1211.87 L1978.82 1211.87 L1979.41 1211.87 L1979.99 1211.87 L1980.58 1211.87 L1981.17 1211.87 L1981.75 1211.87 L1982.34 1211.87 L1982.93 1211.87 L1983.51 1211.87 L1984.1 1211.87 L1984.69 1211.87 L1985.27 1211.87 L1985.86 1211.87 L1986.45 1211.87 L1987.03 1211.87 L1987.62 1211.87 L1988.2 1211.87 L1988.79 1211.87 L1989.38 1211.87 L1989.96 1211.87 L1990.55 1211.87 L1991.14 1211.87 L1991.72 1211.87 L1992.31 1211.87 L1992.9 1211.87 L1993.48 1211.87 L1994.07 1211.87 L1994.65 1211.87 L1995.24 1211.87 L1995.83 1211.87 L1996.41 1211.87 L1997 1211.87 L1997.59 1211.87 L1998.17 1211.87 L1998.76 1211.87 L1999.35 1211.87 L1999.93 1211.87 L2000.52 1211.87 L2001.11 1211.87 L2001.69 1211.87 L2002.28 1211.87 L2002.86 1211.87 L2003.45 1211.87 L2004.04 1211.87 L2004.62 1211.87 L2005.21 1211.87 L2005.8 1211.87 L2006.38 1211.87 L2006.97 1211.87 L2007.56 1211.87 L2008.14 1211.87 L2008.73 1211.87 L2009.32 1211.87 L2009.9 1211.87 L2010.49 1211.87 L2011.07 1211.87 L2011.66 1211.87 L2012.25 1211.87 L2012.83 1211.87 L2013.42 1211.87 L2014.01 1211.87 L2014.59 1211.87 L2015.18 1211.87 L2015.77 1211.87 L2016.35 1211.87 L2016.94 1211.87 L2017.53 1211.87 L2018.11 1211.87 L2018.7 1211.87 L2019.28 1211.87 L2019.87 1211.87 L2020.46 1211.87 L2021.04 1211.87 L2021.63 1211.87 L2022.22 1211.87 L2022.8 1211.87 L2023.39 1211.87 L2023.98 1211.87 L2024.56 1211.87 L2025.15 1211.87 L2025.73 1211.87 L2026.32 1211.87 L2026.91 1211.87 L2027.49 1211.87 L2028.08 1211.87 L2028.67 1211.87 L2029.25 1211.87 L2029.84 1211.87 L2030.43 1211.87 L2031.01 1211.87 L2031.6 1211.87 L2032.19 1211.87 L2032.77 1211.87 L2033.36 1211.87 L2033.94 1211.87 L2034.53 1211.87 L2035.12 1211.87 L2035.7 1211.87 L2036.29 1211.87 L2036.88 1211.87 L2037.46 1211.87 L2038.05 1211.87 L2038.64 1211.87 L2039.22 1211.87 L2039.81 1211.87 L2040.4 1211.87 L2040.98 1211.87 L2041.57 1211.87 L2042.15 1211.87 L2042.74 1211.87 L2043.33 1211.87 L2043.91 1211.87 L2044.5 1211.87 L2045.09 1211.87 L2045.67 1211.87 L2046.26 1211.87 L2046.85 1211.87 L2047.43 1211.87 L2048.02 1211.87 L2048.6 1211.87 L2049.19 1211.87 L2049.78 1211.87 L2050.36 1211.87 L2050.95 1211.87 L2051.54 1211.87 L2052.12 1211.87 L2052.71 1211.87 L2053.3 1211.87 L2053.88 1211.87 L2054.47 1211.87 L2055.06 1211.87 L2055.64 1211.87 L2056.23 1211.87 L2056.81 1211.87 L2057.4 1211.87 L2057.99 1211.87 L2058.57 1211.87 L2059.16 1211.87 L2059.75 1211.87 L2060.33 1211.87 L2060.92 1211.87 L2061.51 1211.87 L2062.09 1211.87 L2062.68 1211.87 L2063.27 1211.87 L2063.85 1211.87 L2064.44 1211.87 L2065.02 1211.87 L2065.61 1211.87 L2066.2 1211.87 L2066.78 1211.87 L2067.37 1211.87 L2067.96 1211.87 L2068.54 1211.87 L2069.13 1211.87 L2069.72 1211.87 L2070.3 1211.87 L2070.89 1211.87 L2071.48 1211.87 L2072.06 1211.87 L2072.65 1211.87 L2073.23 1211.87 L2073.82 1211.87 L2074.41 1211.87 L2074.99 1211.87 L2075.58 1211.87 L2076.17 1211.87 L2076.75 1211.87 L2077.34 1211.87 L2077.93 1211.87 L2078.51 1211.87 L2079.1 1211.87 L2079.68 1211.87 L2080.27 1211.87 L2080.86 1211.87 L2081.44 1211.87 L2082.03 1211.87 L2082.62 1211.87 L2083.2 1211.87 L2083.79 1211.87 L2084.38 1211.87 L2084.96 1211.87 L2085.55 1211.87 L2086.14 1211.87 L2086.72 1211.87 L2087.31 1211.87 L2087.89 1211.87 L2088.48 1211.87 L2089.07 1211.87 L2089.65 1211.87 L2090.24 1211.87 L2090.83 1211.87 L2091.41 1211.87 L2092 1211.87 L2092.59 1211.87 L2093.17 1211.87 L2093.76 1211.87 L2094.35 1211.87 L2094.93 1211.87 L2095.52 1211.87 L2096.1 1211.87 L2096.69 1211.87 L2097.28 1211.87 L2097.86 1211.87 L2098.45 1211.87 L2099.04 1211.87 L2099.62 1211.87 L2100.21 1211.87 L2100.8 1211.87 L2101.38 1211.87 L2101.97 1211.87 L2102.55 1211.87 L2103.14 1211.87 L2103.73 1211.87 L2104.31 1211.87 L2104.9 1211.87 L2105.49 1211.87 L2106.07 1211.87 L2106.66 1211.87 L2107.25 1211.87 L2107.83 1211.87 L2108.42 1211.87 L2109.01 1211.87 L2109.59 1211.87 L2110.18 1211.87 L2110.76 1211.87 L2111.35 1211.87 L2111.94 1211.87 L2112.52 1211.87 L2113.11 1211.87 L2113.7 1211.87 L2114.28 1211.87 L2114.87 1211.87 L2115.46 1211.87 L2116.04 1211.87 L2116.63 1211.87 L2117.22 1211.87 L2117.8 1211.87 L2118.39 1211.87 L2118.97 1211.87 L2119.56 1211.87 L2120.15 1211.87 L2120.73 1211.87 L2121.32 1211.87 L2121.91 1211.87 L2122.49 1211.87 L2123.08 1211.87 L2123.67 1211.87 L2124.25 1211.87 L2124.84 1211.87 L2125.42 1211.87 L2126.01 1211.87 L2126.6 1211.87 L2127.18 1211.87 L2127.77 1211.87 L2128.36 1211.87 L2128.94 1211.87 L2129.53 1211.87 L2130.12 1211.87 L2130.7 1211.87 L2131.29 1211.87 L2131.88 1211.87 L2132.46 1211.87 L2133.05 1211.87 L2133.63 1211.87 L2134.22 1211.87 L2134.81 1211.87 L2135.39 1211.87 L2135.98 1211.87 L2136.57 1211.87 L2137.15 1211.87 L2137.74 1211.87 L2138.33 1211.87 L2138.91 1211.87 L2139.5 1211.87 L2140.09 1211.87 L2140.67 1211.87 L2141.26 1211.87 L2141.84 1211.87 L2142.43 1211.87 L2143.02 1211.87 L2143.6 1211.87 L2144.19 1211.87 L2144.78 1211.87 L2145.36 1211.87 L2145.95 1211.87 L2146.54 1211.87 L2147.12 1211.87 L2147.71 1211.87 L2148.3 1211.87 L2148.88 1211.87 L2149.47 1211.87 L2150.05 1211.87 L2150.64 1211.87 L2151.23 1211.87 L2151.81 1211.87 L2152.4 1211.87 L2152.99 1211.87 L2153.57 1211.87 L2154.16 1211.87 L2154.75 1211.87 L2155.33 1211.87 L2155.92 1211.87 L2156.5 1211.87 L2157.09 1211.87 L2157.68 1211.87 L2158.26 1211.87 L2158.26 1211.04 L2157.68 1211.04 L2157.09 1211.04 L2156.5 1211.04 L2155.92 1211.04 L2155.33 1211.04 L2154.75 1211.04 L2154.16 1211.04 L2153.57 1211.04 L2152.99 1211.04 L2152.4 1211.04 L2151.81 1211.04 L2151.23 1211.04 L2150.64 1211.04 L2150.05 1211.04 L2149.47 1211.04 L2148.88 1211.04 L2148.3 1211.04 L2147.71 1211.04 L2147.12 1211.04 L2146.54 1211.04 L2145.95 1211.04 L2145.36 1211.04 L2144.78 1211.04 L2144.19 1211.04 L2143.6 1211.04 L2143.02 1211.04 L2142.43 1211.04 L2141.84 1211.04 L2141.26 1211.04 L2140.67 1211.04 L2140.09 1211.04 L2139.5 1211.04 L2138.91 1211.04 L2138.33 1211.04 L2137.74 1211.04 L2137.15 1211.04 L2136.57 1211.04 L2135.98 1211.04 L2135.39 1211.04 L2134.81 1211.04 L2134.22 1211.04 L2133.63 1211.04 L2133.05 1211.04 L2132.46 1211.04 L2131.88 1211.04 L2131.29 1211.04 L2130.7 1211.04 L2130.12 1211.04 L2129.53 1211.04 L2128.94 1211.04 L2128.36 1211.04 L2127.77 1211.04 L2127.18 1211.04 L2126.6 1211.04 L2126.01 1211.04 L2125.42 1211.04 L2124.84 1211.04 L2124.25 1211.04 L2123.67 1211.04 L2123.08 1211.04 L2122.49 1211.04 L2121.91 1211.04 L2121.32 1211.04 L2120.73 1211.04 L2120.15 1211.04 L2119.56 1211.04 L2118.97 1211.04 L2118.39 1211.04 L2117.8 1211.04 L2117.22 1211.04 L2116.63 1211.04 L2116.04 1211.04 L2115.46 1211.04 L2114.87 1211.04 L2114.28 1211.04 L2113.7 1211.04 L2113.11 1211.04 L2112.52 1211.04 L2111.94 1211.04 L2111.35 1211.04 L2110.76 1211.04 L2110.18 1211.04 L2109.59 1211.04 L2109.01 1211.04 L2108.42 1211.04 L2107.83 1211.04 L2107.25 1211.04 L2106.66 1211.04 L2106.07 1211.04 L2105.49 1211.04 L2104.9 1211.04 L2104.31 1211.04 L2103.73 1211.04 L2103.14 1211.04 L2102.55 1211.04 L2101.97 1211.04 L2101.38 1211.04 L2100.8 1211.04 L2100.21 1211.04 L2099.62 1211.04 L2099.04 1211.04 L2098.45 1211.04 L2097.86 1211.04 L2097.28 1211.04 L2096.69 1211.04 L2096.1 1211.04 L2095.52 1211.04 L2094.93 1211.04 L2094.35 1211.04 L2093.76 1211.04 L2093.17 1211.04 L2092.59 1211.04 L2092 1211.04 L2091.41 1211.04 L2090.83 1211.04 L2090.24 1211.04 L2089.65 1211.04 L2089.07 1211.04 L2088.48 1211.04 L2087.89 1211.04 L2087.31 1211.04 L2086.72 1211.04 L2086.14 1211.04 L2085.55 1211.04 L2084.96 1211.04 L2084.38 1211.04 L2083.79 1211.04 L2083.2 1211.04 L2082.62 1211.04 L2082.03 1211.04 L2081.44 1211.04 L2080.86 1211.04 L2080.27 1211.04 L2079.68 1211.04 L2079.1 1211.04 L2078.51 1211.04 L2077.93 1211.04 L2077.34 1211.04 L2076.75 1211.04 L2076.17 1211.04 L2075.58 1211.04 L2074.99 1211.04 L2074.41 1211.04 L2073.82 1211.04 L2073.23 1211.04 L2072.65 1211.04 L2072.06 1211.04 L2071.48 1211.04 L2070.89 1211.04 L2070.3 1211.04 L2069.72 1211.04 L2069.13 1211.04 L2068.54 1211.04 L2067.96 1211.04 L2067.37 1211.04 L2066.78 1211.04 L2066.2 1211.04 L2065.61 1211.04 L2065.02 1211.04 L2064.44 1211.04 L2063.85 1211.04 L2063.27 1211.04 L2062.68 1211.04 L2062.09 1211.04 L2061.51 1211.04 L2060.92 1211.04 L2060.33 1211.04 L2059.75 1211.04 L2059.16 1211.04 L2058.57 1211.04 L2057.99 1211.04 L2057.4 1211.04 L2056.81 1211.04 L2056.23 1211.04 L2055.64 1211.04 L2055.06 1211.04 L2054.47 1211.04 L2053.88 1211.04 L2053.3 1211.04 L2052.71 1211.04 L2052.12 1211.04 L2051.54 1211.04 L2050.95 1211.04 L2050.36 1211.04 L2049.78 1211.04 L2049.19 1211.04 L2048.6 1211.04 L2048.02 1211.04 L2047.43 1211.04 L2046.85 1211.04 L2046.26 1211.04 L2045.67 1211.04 L2045.09 1211.04 L2044.5 1211.04 L2043.91 1211.04 L2043.33 1211.04 L2042.74 1211.04 L2042.15 1211.04 L2041.57 1211.04 L2040.98 1211.04 L2040.4 1211.04 L2039.81 1211.04 L2039.22 1211.04 L2038.64 1211.04 L2038.05 1211.04 L2037.46 1211.04 L2036.88 1211.04 L2036.29 1211.04 L2035.7 1211.04 L2035.12 1211.04 L2034.53 1211.04 L2033.94 1211.04 L2033.36 1211.04 L2032.77 1211.04 L2032.19 1211.04 L2031.6 1211.04 L2031.01 1211.04 L2030.43 1211.04 L2029.84 1211.04 L2029.25 1211.04 L2028.67 1211.04 L2028.08 1211.04 L2027.49 1211.04 L2026.91 1211.04 L2026.32 1211.04 L2025.73 1211.04 L2025.15 1211.04 L2024.56 1211.04 L2023.98 1211.04 L2023.39 1211.04 L2022.8 1211.04 L2022.22 1211.04 L2021.63 1211.04 L2021.04 1211.04 L2020.46 1211.04 L2019.87 1211.04 L2019.28 1211.04 L2018.7 1211.04 L2018.11 1211.04 L2017.53 1211.04 L2016.94 1211.04 L2016.35 1211.04 L2015.77 1211.04 L2015.18 1211.04 L2014.59 1211.04 L2014.01 1211.04 L2013.42 1211.04 L2012.83 1211.04 L2012.25 1211.04 L2011.66 1211.04 L2011.07 1211.04 L2010.49 1211.04 L2009.9 1211.04 L2009.32 1211.04 L2008.73 1211.04 L2008.14 1211.04 L2007.56 1211.04 L2006.97 1211.04 L2006.38 1211.04 L2005.8 1211.04 L2005.21 1211.04 L2004.62 1211.04 L2004.04 1211.04 L2003.45 1211.04 L2002.86 1211.04 L2002.28 1211.04 L2001.69 1211.04 L2001.11 1211.04 L2000.52 1211.04 L1999.93 1211.04 L1999.35 1211.04 L1998.76 1211.04 L1998.17 1211.04 L1997.59 1211.04 L1997 1211.04 L1996.41 1211.04 L1995.83 1211.04 L1995.24 1211.04 L1994.65 1211.04 L1994.07 1211.04 L1993.48 1211.04 L1992.9 1211.04 L1992.31 1211.04 L1991.72 1211.04 L1991.14 1211.04 L1990.55 1211.04 L1989.96 1211.04 L1989.38 1211.04 L1988.79 1211.04 L1988.2 1211.04 L1987.62 1211.04 L1987.03 1211.04 L1986.45 1211.04 L1985.86 1211.04 L1985.27 1211.04 L1984.69 1211.04 L1984.1 1211.04 L1983.51 1211.04 L1982.93 1211.04 L1982.34 1211.04 L1981.75 1211.04 L1981.17 1211.04 L1980.58 1211.04 L1979.99 1211.04 L1979.41 1211.04 L1978.82 1211.04 L1978.24 1211.04 L1977.65 1211.04 L1977.06 1211.04 L1976.48 1211.04 L1975.89 1211.04 L1975.3 1211.04 L1974.72 1211.04 L1974.13 1211.04 L1973.54 1211.04 L1972.96 1211.04 L1972.37 1211.04 L1971.78 1211.04 L1971.2 1211.04 L1970.61 1211.04 L1970.03 1211.04 L1969.44 1211.04 L1968.85 1211.04 L1968.27 1211.04 L1967.68 1211.04 L1967.09 1211.04 L1966.51 1211.04 L1965.92 1211.04 L1965.33 1211.04 L1964.75 1211.04 L1964.16 1211.04 L1963.58 1211.04 L1962.99 1211.04 L1962.4 1211.04 L1961.82 1211.04 L1961.23 1211.04 L1960.64 1211.04 L1960.06 1211.04 L1959.47 1211.04 L1958.88 1211.04 L1958.3 1211.04 L1957.71 1211.04 L1957.12 1211.04 L1956.54 1211.04 L1955.95 1211.04 L1955.37 1211.04 L1954.78 1211.04 L1954.19 1211.04 L1953.61 1211.04 L1953.02 1211.04 L1952.43 1211.04 L1951.85 1211.04 L1951.26 1211.04 L1950.67 1211.04 L1950.09 1211.04 L1949.5 1211.04 L1948.91 1211.04 L1948.33 1211.04 L1947.74 1211.04 L1947.16 1211.04 L1946.57 1211.04 L1945.98 1211.04 L1945.4 1211.04 L1944.81 1211.04 L1944.22 1211.04 L1943.64 1211.04 L1943.05 1211.04 L1942.46 1211.04 L1941.88 1211.04 L1941.29 1211.04 L1940.71 1211.04 L1940.12 1211.04 L1939.53 1211.04 L1938.95 1211.04 L1938.36 1211.04 L1937.77 1211.04 L1937.19 1211.04 L1936.6 1211.04 L1936.01 1211.04 L1935.43 1211.04 L1934.84 1211.04 L1934.25 1211.04 L1933.67 1211.04 L1933.08 1211.04 L1932.5 1211.04 L1931.91 1211.04 L1931.32 1211.04 L1930.74 1211.04 L1930.15 1211.04 L1929.56 1211.04 L1928.98 1211.04 L1928.39 1211.04 L1927.8 1211.04 L1927.22 1211.04 L1926.63 1211.04 L1926.04 1211.04 L1925.46 1211.04 L1924.87 1211.04 L1924.29 1211.04 L1923.7 1211.04 L1923.11 1211.04 L1922.53 1211.04 L1921.94 1211.04 L1921.35 1211.04 L1920.77 1211.04 L1920.18 1211.04 L1919.59 1211.04 L1919.01 1211.04 L1918.42 1211.04 L1917.83 1211.04 L1917.25 1211.04 L1916.66 1211.04 L1916.08 1211.04 L1915.49 1211.04 L1914.9 1211.04 L1914.32 1211.04 L1913.73 1211.04 L1913.14 1211.04 L1912.56 1211.04 L1911.97 1211.04 L1911.38 1211.04 L1910.8 1211.04 L1910.21 1211.04 L1909.63 1211.04 L1909.04 1211.04 L1908.45 1211.04 L1907.87 1211.04 L1907.28 1211.04 L1906.69 1211.04 L1906.11 1211.04 L1905.52 1211.04 L1904.93 1211.04 L1904.35 1211.04 L1903.76 1211.04 L1903.17 1211.04 L1902.59 1211.04 L1902 1211.04 L1901.42 1211.04 L1900.83 1211.04 L1900.24 1211.04 L1899.66 1211.04 L1899.07 1211.04 L1898.48 1211.04 L1897.9 1211.04 L1897.31 1211.04 L1896.72 1211.04 L1896.14 1211.04 L1895.55 1211.04 L1894.96 1211.04 L1894.38 1211.04 L1893.79 1211.04 L1893.21 1211.04 L1892.62 1211.04 L1892.03 1211.04 L1891.45 1211.04 L1890.86 1211.04 L1890.27 1211.04 L1889.69 1211.04 L1889.1 1211.04 L1888.51 1211.04 L1887.93 1211.04 L1887.34 1211.04 L1886.76 1211.04 L1886.17 1211.04 L1885.58 1211.04 L1885 1211.04 L1884.41 1211.04 L1883.82 1211.04 L1883.24 1211.04 L1882.65 1211.04 L1882.06 1211.04 L1881.48 1211.04 L1880.89 1211.04 L1880.3 1211.04 L1879.72 1211.04 L1879.13 1211.04 L1878.55 1211.04 L1877.96 1211.04 L1877.37 1211.04 L1876.79 1211.04 L1876.2 1211.04 L1875.61 1211.04 L1875.03 1211.04 L1874.44 1211.04 L1873.85 1211.04 L1873.27 1211.04 L1872.68 1211.04 L1872.09 1211.04 L1871.51 1211.04 L1870.92 1211.04 L1870.34 1211.04 L1869.75 1211.04 L1869.16 1211.04 L1868.58 1211.04 L1867.99 1211.04 L1867.4 1211.04 L1866.82 1211.04 L1866.23 1211.04 L1865.64 1211.04 L1865.06 1211.04 L1864.47 1211.04 L1863.88 1211.04 L1863.3 1211.04 L1862.71 1211.04 L1862.13 1211.04 L1861.54 1211.04 L1860.95 1211.04 L1860.37 1211.04 L1859.78 1211.04 L1859.19 1211.04 L1858.61 1211.04 L1858.02 1211.04 L1857.43 1211.04 L1856.85 1211.04 L1856.26 1211.04 L1855.68 1211.04 L1855.09 1211.04 L1854.5 1211.04 L1853.92 1211.04 L1853.33 1211.04 L1852.74 1211.04 L1852.16 1211.04 L1851.57 1211.04 L1850.98 1211.04 L1850.4 1211.04 L1849.81 1211.04 L1849.22 1211.04 L1848.64 1211.04 L1848.05 1211.04 L1847.47 1211.04 L1846.88 1211.04 L1846.29 1211.04 L1845.71 1211.04 L1845.12 1211.04 L1844.53 1211.04 L1843.95 1211.04 L1843.36 1211.04 L1842.77 1211.04 L1842.19 1211.04 L1841.6 1211.04 L1841.01 1211.04 L1840.43 1211.04 L1839.84 1211.04 L1839.26 1211.04 L1838.67 1211.04 L1838.08 1211.04 L1837.5 1211.04 L1836.91 1211.04 L1836.32 1211.04 L1835.74 1211.04 L1835.15 1211.04 L1834.56 1211.04 L1833.98 1211.04 L1833.39 1211.04 L1832.81 1211.04 L1832.22 1211.04 L1831.63 1211.04 L1831.05 1211.04 L1830.46 1211.04 L1829.87 1211.04 L1829.29 1211.04 L1828.7 1211.04 L1828.11 1211.04 L1827.53 1211.04 L1826.94 1211.04 L1826.35 1211.04 L1825.77 1211.04 L1825.18 1211.04 L1824.6 1211.04 L1824.01 1211.04 L1823.42 1211.04 L1822.84 1211.04 L1822.25 1211.04 L1821.66 1211.04 L1821.08 1211.04 L1820.49 1211.04 L1819.9 1211.04 L1819.32 1211.04 L1818.73 1211.04 L1818.14 1211.04 L1817.56 1211.04 L1816.97 1211.04 L1816.39 1211.04 L1815.8 1211.04 L1815.21 1211.04 L1814.63 1211.04 L1814.04 1211.04 L1813.45 1211.04 L1812.87 1211.04 L1812.28 1211.04 L1811.69 1211.04 L1811.11 1211.04 L1810.52 1211.04 L1809.94 1211.04 L1809.35 1211.04 L1808.76 1211.04 L1808.18 1211.04 L1807.59 1211.04 L1807 1211.04 L1806.42 1211.04 L1805.83 1211.04 L1805.24 1211.04 L1804.66 1211.04 L1804.07 1211.04 L1803.48 1211.04 L1802.9 1211.04 L1802.31 1211.04 L1801.73 1211.04 L1801.14 1211.04 L1800.55 1211.04 L1799.97 1211.04 L1799.38 1211.04 L1798.79 1211.04 L1798.21 1211.04 L1797.62 1211.04 L1797.03 1211.04 L1796.45 1211.04 L1795.86 1211.04 L1795.27 1211.04 L1794.69 1211.04 L1794.1 1211.04 L1793.52 1211.04 L1792.93 1211.04 L1792.34 1211.04 L1791.76 1211.04 L1791.17 1211.04 L1790.58 1211.04 L1790 1211.04 L1789.41 1211.04 L1788.82 1211.04 L1788.24 1211.04 L1787.65 1211.04 L1787.06 1211.04 L1786.48 1211.04 L1785.89 1211.04 L1785.31 1211.04 L1784.72 1211.04 L1784.13 1211.04 L1783.55 1211.04 L1782.96 1211.04 L1782.37 1211.04 L1781.79 1211.04 L1781.2 1211.04 L1780.61 1211.04 L1780.03 1211.04 L1779.44 1211.04 L1778.86 1211.04 L1778.27 1211.04 L1777.68 1211.04 L1777.1 1211.04 L1776.51 1211.04 L1775.92 1211.04 L1775.34 1211.04 L1774.75 1211.04 L1774.16 1211.04 L1773.58 1211.04 L1772.99 1211.04 L1772.4 1211.04 L1771.82 1211.04 L1771.23 1211.04 L1770.65 1211.04 L1770.06 1211.04 L1769.47 1211.04 L1768.89 1211.04 L1768.3 1211.04 L1767.71 1211.04 L1767.13 1211.04 L1766.54 1211.04 L1765.95 1211.04 L1765.37 1211.04 L1764.78 1211.04 L1764.19 1211.04 L1763.61 1211.04 L1763.02 1211.04 L1762.44 1211.04 L1761.85 1211.04 L1761.26 1211.04 L1760.68 1211.04 L1760.09 1211.04 L1759.5 1211.04 L1758.92 1211.04 L1758.33 1211.04 L1757.74 1211.04 L1757.16 1211.04 L1756.57 1211.04 L1755.99 1211.04 L1755.4 1211.04 L1754.81 1211.04 L1754.23 1211.04 L1753.64 1211.04 L1753.05 1211.04 L1752.47 1211.04 L1751.88 1211.04 L1751.29 1211.04 L1750.71 1211.04 L1750.12 1211.04 L1749.53 1211.04 L1748.95 1211.04 L1748.36 1211.04 L1747.78 1211.04 L1747.19 1211.04 L1746.6 1211.04 L1746.02 1211.04 L1745.43 1211.04 L1744.84 1211.04 L1744.26 1211.04 L1743.67 1211.04 L1743.08 1211.04 L1742.5 1211.04 L1741.91 1211.04 L1741.32 1211.04 L1740.74 1211.04 L1740.15 1211.04 L1739.57 1211.04 L1738.98 1211.04 L1738.39 1211.04 L1737.81 1211.04 L1737.22 1211.04 L1736.63 1211.04 L1736.05 1211.04 L1735.46 1211.04 L1734.87 1211.04 L1734.29 1211.04 L1733.7 1211.04 L1733.11 1211.04 L1732.53 1211.04 L1731.94 1211.04 L1731.36 1211.04 L1730.77 1211.04 L1730.18 1211.04 L1729.6 1211.04 L1729.01 1211.04 L1728.42 1211.04 L1727.84 1211.04 L1727.25 1211.04 L1726.66 1211.04 L1726.08 1211.04 L1725.49 1211.04 L1724.91 1211.04 L1724.32 1211.04 L1723.73 1211.04 L1723.15 1211.04 L1722.56 1211.04 L1721.97 1211.04 L1721.39 1211.04 L1720.8 1211.04 L1720.21 1211.04 L1719.63 1211.04 L1719.04 1211.04 L1718.45 1211.04 L1717.87 1211.04 L1717.28 1211.04 L1716.7 1211.04 L1716.11 1211.04 L1715.52 1211.04 L1714.94 1211.04 L1714.35 1211.04 L1713.76 1211.04 L1713.18 1211.04 L1712.59 1211.04 L1712 1211.04 L1711.42 1211.04 L1710.83 1211.04 L1710.24 1211.04 L1709.66 1211.04 L1709.07 1211.04 L1708.49 1211.04 L1707.9 1211.04 L1707.31 1211.04 L1706.73 1211.04 L1706.14 1211.04 L1705.55 1211.04 L1704.97 1211.04 L1704.38 1211.04 L1703.79 1211.04 L1703.21 1211.04 L1702.62 1211.04 L1702.04 1211.04 L1701.45 1211.04 L1700.86 1211.04 L1700.28 1211.04 L1699.69 1211.04 L1699.1 1211.04 L1698.52 1211.04 L1697.93 1211.04 L1697.34 1211.04 L1696.76 1211.04 L1696.17 1211.04 L1695.58 1211.04 L1695 1211.04 L1694.41 1211.04 L1693.83 1211.04 L1693.24 1211.04 L1692.65 1211.04 L1692.07 1211.04 L1691.48 1211.04 L1690.89 1211.04 L1690.31 1211.04 L1689.72 1211.04 L1689.13 1211.04 L1688.55 1211.04 L1687.96 1211.04 L1687.37 1211.04 L1686.79 1211.04 L1686.2 1211.04 L1685.62 1211.04 L1685.03 1211.04 L1684.44 1211.04 L1683.86 1211.04 L1683.27 1211.04 L1682.68 1211.04 L1682.1 1211.04 L1681.51 1211.04 L1680.92 1211.04 L1680.34 1211.04 L1679.75 1211.04 L1679.17 1211.04 L1678.58 1211.04 L1677.99 1211.04 L1677.41 1211.04 L1676.82 1211.04 L1676.23 1211.04 L1675.65 1211.04 L1675.06 1211.04 L1674.47 1211.04 L1673.89 1211.04 L1673.3 1211.04 L1672.71 1211.04 L1672.13 1211.04 L1671.54 1211.04 L1670.96 1211.04 L1670.37 1211.04 L1669.78 1211.04 L1669.2 1211.04 L1668.61 1211.04 L1668.02 1211.04 L1667.44 1211.04 L1666.85 1211.04 L1666.26 1211.04 L1665.68 1211.04 L1665.09 1211.04 L1664.5 1211.04 L1663.92 1211.04 L1663.33 1211.04 L1662.75 1211.04 L1662.16 1211.04 L1661.57 1211.04 L1660.99 1211.04 L1660.4 1211.04 L1659.81 1211.04 L1659.23 1211.04 L1658.64 1211.04 L1658.05 1211.04 L1657.47 1211.04 L1656.88 1211.04 L1656.29 1211.04 L1655.71 1211.04 L1655.12 1211.04 L1654.54 1211.04 L1653.95 1211.04 L1653.36 1211.04 L1652.78 1211.04 L1652.19 1211.04 L1651.6 1211.04 L1651.02 1211.04 L1650.43 1211.04 L1649.84 1211.04 L1649.26 1211.04 L1648.67 1211.04 L1648.09 1211.04 L1647.5 1211.04 L1646.91 1211.04 L1646.33 1211.04 L1645.74 1211.04 L1645.15 1211.04 L1644.57 1211.04 L1643.98 1211.04 L1643.39 1211.04 L1642.81 1211.04 L1642.22 1211.04 L1641.63 1211.04 L1641.05 1211.04 L1640.46 1211.04 L1639.88 1211.04 L1639.29 1211.04 L1638.7 1211.04 L1638.12 1211.04 L1637.53 1211.04 L1636.94 1211.04 L1636.36 1211.04 L1635.77 1211.04 L1635.18 1211.04 L1634.6 1211.04 L1634.01 1211.04 L1633.42 1211.04 L1632.84 1211.04 L1632.25 1211.04 L1631.67 1211.04 L1631.08 1211.04 L1630.49 1211.04 L1629.91 1211.04 L1629.32 1211.04 L1628.73 1211.04 L1628.15 1211.04 L1627.56 1211.04 L1626.97 1211.04 L1626.39 1211.04 L1625.8 1211.04 L1625.22 1211.04 L1624.63 1211.04 L1624.04 1211.04 L1623.46 1211.04 L1622.87 1211.04 L1622.28 1211.04 L1621.7 1211.04 L1621.11 1211.04 L1620.52 1211.04 L1619.94 1211.04 L1619.35 1211.04 L1618.76 1211.04 L1618.18 1211.04 L1617.59 1211.04 L1617.01 1211.04 L1616.42 1211.04 L1615.83 1211.04 L1615.25 1211.04 L1614.66 1211.04 L1614.07 1211.04 L1613.49 1211.04 L1612.9 1211.04 L1612.31 1211.04 L1611.73 1211.04 L1611.14 1211.04 L1610.55 1211.04 L1609.97 1211.04 L1609.38 1211.04 L1608.8 1211.04 L1608.21 1211.04 L1607.62 1211.04 L1607.04 1211.04 L1606.45 1211.04 L1605.86 1211.04 L1605.28 1211.04 L1604.69 1211.04 L1604.1 1211.04 L1603.52 1211.04 L1602.93 1211.04 L1602.34 1211.04 L1601.76 1211.04 L1601.17 1211.04 L1600.59 1211.04 L1600 1211.04 L1599.41 1211.04 L1598.83 1211.04 L1598.24 1211.04 L1597.65 1211.04 L1597.07 1211.04 L1596.48 1211.04 L1595.89 1211.04 L1595.31 1211.04 L1594.72 1211.04 L1594.14 1211.04 L1593.55 1211.04 L1592.96 1211.04 L1592.38 1211.04 L1591.79 1211.04 L1591.2 1211.04 L1590.62 1211.04 L1590.03 1211.04 L1589.44 1211.04 L1588.86 1211.04 L1588.27 1211.04 L1587.68 1211.04 L1587.1 1211.04 L1586.51 1211.04 L1585.93 1211.04 L1585.34 1211.04 L1584.75 1211.04 L1584.17 1211.04 L1583.58 1211.04 L1582.99 1211.04 L1582.41 1211.04 L1581.82 1211.04 L1581.23 1211.04 L1580.65 1211.04 L1580.06 1211.04 L1579.47 1211.04 L1578.89 1211.04 L1578.3 1211.04 L1577.72 1211.04 L1577.13 1211.04 L1576.54 1211.04 L1575.96 1211.04 L1575.37 1211.04 L1574.78 1211.04 L1574.2 1211.04 L1573.61 1211.04 L1573.02 1211.04 L1572.44 1211.04 L1571.85 1211.04 L1571.27 1211.04 L1570.68 1211.04 L1570.09 1211.04 L1569.51 1211.04 L1568.92 1211.04 L1568.33 1211.04 L1567.75 1211.04 L1567.16 1211.04 L1566.57 1211.04 L1565.99 1211.04 L1565.4 1211.04 L1564.81 1211.04 L1564.23 1211.04 L1563.64 1211.04 L1563.06 1211.04 L1562.47 1211.04 L1561.88 1211.04 L1561.3 1211.04 L1560.71 1211.04 L1560.12 1211.04 L1559.54 1211.04 L1558.95 1211.04 L1558.36 1211.04 L1557.78 1211.04 L1557.19 1211.04 L1556.6 1211.04 L1556.02 1211.04 L1555.43 1211.04 L1554.85 1211.04 L1554.26 1211.04 L1553.67 1211.04 L1553.09 1211.04 L1552.5 1211.04 L1551.91 1211.04 L1551.33 1211.04 L1550.74 1211.04 L1550.15 1211.04 L1549.57 1211.04 L1548.98 1211.04 L1548.4 1211.04 L1547.81 1211.04 L1547.22 1211.04 L1546.64 1211.04 L1546.05 1211.04 L1545.46 1211.04 L1544.88 1211.04 L1544.29 1211.04 L1543.7 1211.04 L1543.12 1211.04 L1542.53 1211.04 L1541.94 1211.04 L1541.36 1211.04 L1540.77 1211.04 L1540.19 1211.04 L1539.6 1211.04 L1539.01 1211.04 L1538.43 1211.04 L1537.84 1211.04 L1537.25 1211.04 L1536.67 1211.04 L1536.08 1211.04 L1535.49 1211.04 L1534.91 1211.04 L1534.32 1211.04 L1533.73 1211.04 L1533.15 1211.04 L1532.56 1211.04 L1531.98 1211.04 L1531.39 1211.04 L1530.8 1211.04 L1530.22 1211.04 L1529.63 1211.04 L1529.04 1211.04 L1528.46 1211.04 L1527.87 1211.04 L1527.28 1211.04 L1526.7 1211.04 L1526.11 1211.04 L1525.52 1211.04 L1524.94 1211.04 L1524.35 1211.04 L1523.77 1211.04 L1523.18 1211.04 L1522.59 1211.04 L1522.01 1211.04 L1521.42 1211.04 L1520.83 1211.04 L1520.25 1211.04 L1519.66 1211.04 L1519.07 1211.04 L1518.49 1211.04 L1517.9 1211.04 L1517.32 1211.04 L1516.73 1211.04 L1516.14 1211.04 L1515.56 1211.04 L1514.97 1211.04 L1514.38 1211.04 L1513.8 1211.04 L1513.21 1211.04 L1512.62 1211.04 L1512.04 1211.04 L1511.45 1211.04 L1510.86 1211.04 L1510.28 1211.04 L1509.69 1211.04 L1509.11 1211.04 L1508.52 1211.04 L1507.93 1211.04 L1507.35 1211.04 L1506.76 1211.04 L1506.17 1211.04 L1505.59 1211.04 L1505 1211.04 L1504.41 1211.04 L1503.83 1211.04 L1503.24 1211.04 L1502.65 1211.04 L1502.07 1211.04 L1501.48 1211.04 L1500.9 1211.04 L1500.31 1211.04 L1499.72 1211.04 L1499.14 1211.04 L1498.55 1211.04 L1497.96 1211.04 L1497.38 1211.04 L1496.79 1211.04 L1496.2 1211.04 L1495.62 1211.04 L1495.03 1211.04 L1494.45 1211.04 L1493.86 1211.04 L1493.27 1211.04 L1492.69 1211.04 L1492.1 1211.04 L1491.51 1211.04 L1490.93 1211.04 L1490.34 1211.04 L1489.75 1211.04 L1489.17 1211.04 L1488.58 1211.04 L1487.99 1211.04 L1487.41 1211.04 L1486.82 1211.04 L1486.24 1211.04 L1485.65 1211.04 L1485.06 1211.04 L1484.48 1211.04 L1483.89 1211.04 L1483.3 1211.04 L1482.72 1211.04 L1482.13 1211.04 L1481.54 1211.04 L1480.96 1211.04 L1480.37 1211.04 L1479.78 1211.04 L1479.2 1211.04 L1478.61 1211.04 L1478.03 1211.04 L1477.44 1211.04 L1476.85 1211.04 L1476.27 1211.04 L1475.68 1211.04 L1475.09 1211.04 L1474.51 1211.04 L1473.92 1211.04 L1473.33 1211.04 L1472.75 1211.04 L1472.16 1211.04 L1471.57 1211.04 L1470.99 1211.04 L1470.4 1211.04 L1469.82 1211.04 L1469.23 1211.04 L1468.64 1211.04 L1468.06 1211.04 L1467.47 1211.04 L1466.88 1211.04 L1466.3 1211.04 L1465.71 1211.04 L1465.12 1211.04 L1464.54 1211.04 L1463.95 1211.04 L1463.37 1211.04 L1462.78 1211.04 L1462.19 1211.04 L1461.61 1211.04 L1461.02 1211.04 L1460.43 1211.04 L1459.85 1211.04 L1459.26 1211.04 L1458.67 1211.04 L1458.09 1211.04 L1457.5 1211.04 L1456.91 1211.04 L1456.33 1211.04 L1455.74 1211.04 L1455.16 1211.04 L1454.57 1211.04 L1453.98 1211.04 L1453.4 1211.04 L1452.81 1211.04 L1452.22 1211.04 L1451.64 1211.04 L1451.05 1211.04 L1450.46 1211.04 L1449.88 1211.04 L1449.29 1211.04 L1448.7 1211.04 L1448.12 1211.04 L1447.53 1211.04 L1446.95 1211.04 L1446.36 1211.04 L1445.77 1211.04 L1445.19 1211.04 L1444.6 1211.04 L1444.01 1211.04 L1443.43 1211.04 L1442.84 1211.04 L1442.25 1211.04 L1441.67 1211.04 L1441.08 1211.04 L1440.5 1211.04 L1439.91 1211.04 L1439.32 1211.04 L1438.74 1211.04 L1438.15 1211.04 L1437.56 1211.04 L1436.98 1211.04 L1436.39 1211.04 L1435.8 1211.04 L1435.22 1211.04 L1434.63 1211.04 L1434.04 1211.04 L1433.46 1211.04 L1432.87 1211.04 L1432.29 1211.04 L1431.7 1211.04 L1431.11 1211.04 L1430.53 1211.04 L1429.94 1211.04 L1429.35 1211.04 L1428.77 1211.04 L1428.18 1211.04 L1427.59 1211.04 L1427.01 1211.04 L1426.42 1211.04 L1425.83 1211.04 L1425.25 1211.04 L1424.66 1211.04 L1424.08 1211.04 L1423.49 1211.04 L1422.9 1211.04 L1422.32 1211.04 L1421.73 1211.04 L1421.14 1211.04 L1420.56 1211.04 L1419.97 1211.04 L1419.38 1211.04 L1418.8 1211.04 L1418.21 1211.04 L1417.63 1211.04 L1417.04 1211.04 L1416.45 1211.04 L1415.87 1211.04 L1415.28 1211.04 L1414.69 1211.04 L1414.11 1211.04 L1413.52 1211.04 L1412.93 1211.04 L1412.35 1211.04 L1411.76 1211.04 L1411.17 1211.04 L1410.59 1211.04 L1410 1211.04 L1409.42 1211.04 L1408.83 1211.04 L1408.24 1211.04 L1407.66 1211.04 L1407.07 1211.04 L1406.48 1211.04 L1405.9 1211.04 L1405.31 1211.04 L1404.72 1211.04 L1404.14 1211.04 L1403.55 1211.04 L1402.96 1211.04 L1402.38 1211.04 L1401.79 1211.04 L1401.21 1211.04 L1400.62 1211.04 L1400.03 1211.04 L1399.45 1211.04 L1398.86 1211.04 L1398.27 1211.04 L1397.69 1211.04 L1397.1 1211.04 L1396.51 1211.04 L1395.93 1211.04 L1395.34 1211.04 L1394.75 1211.04 L1394.17 1211.04 L1393.58 1211.04 L1393 1211.04 L1392.41 1211.04 L1391.82 1211.04 L1391.24 1211.04 L1390.65 1211.04 L1390.06 1211.04 L1389.48 1211.04 L1388.89 1211.04 L1388.3 1211.04 L1387.72 1211.04 L1387.13 1211.04 L1386.55 1211.04 L1385.96 1211.04 L1385.37 1211.04 L1384.79 1211.04 L1384.2 1211.04 L1383.61 1211.04 L1383.03 1211.04 L1382.44 1211.04 L1381.85 1211.04 L1381.27 1211.04 L1380.68 1211.04 L1380.09 1211.04 L1379.51 1211.04 L1378.92 1211.04 L1378.34 1211.04 L1377.75 1211.04 L1377.16 1211.04 L1376.58 1211.04 L1375.99 1211.04 L1375.4 1211.04 L1374.82 1211.04 L1374.23 1211.04 L1373.64 1211.04 L1373.06 1211.04 L1372.47 1211.04 L1371.88 1211.04 L1371.3 1211.04 L1370.71 1211.04 L1370.13 1211.04 L1369.54 1211.04 L1368.95 1211.04 L1368.37 1211.04 L1367.78 1211.04 L1367.19 1211.04 L1366.61 1211.04 L1366.02 1211.04 L1365.43 1211.04 L1364.85 1211.04 L1364.26 1211.04 L1363.68 1211.04 L1363.09 1211.04 L1362.5 1211.04 L1361.92 1211.04 L1361.33 1211.04 L1360.74 1211.04 L1360.16 1211.04 L1359.57 1211.04 L1358.98 1211.04 L1358.4 1211.04 L1357.81 1211.04 L1357.22 1211.04 L1356.64 1211.04 L1356.05 1211.04 L1355.47 1211.04 L1354.88 1211.04 L1354.29 1211.04 L1353.71 1211.04 L1353.12 1211.04 L1352.53 1211.04 L1351.95 1211.04 L1351.36 1211.04 L1350.77 1211.04 L1350.19 1211.04 L1349.6 1211.04 L1349.01 1211.04 L1348.43 1211.04 L1347.84 1211.04 L1347.26 1211.04 L1346.67 1211.04 L1346.08 1211.04 L1345.5 1211.04 L1344.91 1211.04 L1344.32 1211.04 L1343.74 1211.04 L1343.15 1211.04 L1342.56 1211.04 L1341.98 1211.04 L1341.39 1211.04 L1340.8 1211.04 L1340.22 1211.04 L1339.63 1211.04 L1339.05 1211.04 L1338.46 1211.04 L1337.87 1211.04 L1337.29 1211.04 L1336.7 1211.04 L1336.11 1211.04 L1335.53 1211.04 L1334.94 1211.04 L1334.35 1211.04 L1333.77 1211.04 L1333.18 1211.04 L1332.6 1211.04 L1332.01 1211.04 L1331.42 1211.04 L1330.84 1211.04 L1330.25 1211.04 L1329.66 1211.04 L1329.08 1211.04 L1328.49 1211.04 L1327.9 1211.04 L1327.32 1211.04 L1326.73 1211.04 L1326.14 1211.04 L1325.56 1211.04 L1324.97 1211.04 L1324.39 1211.04 L1323.8 1211.04 L1323.21 1211.04 L1322.63 1211.04 L1322.04 1211.04 L1321.45 1211.04 L1320.87 1211.04 L1320.28 1211.04 L1319.69 1211.04 L1319.11 1211.04 L1318.52 1211.04 L1317.93 1211.04 L1317.35 1211.04 L1316.76 1211.04 L1316.18 1211.04 L1315.59 1211.04 L1315 1211.04 L1314.42 1211.04 L1313.83 1211.04 L1313.24 1211.04 L1312.66 1211.04 L1312.07 1211.04 L1311.48 1211.04 L1310.9 1211.04 L1310.31 1211.04 L1309.73 1211.04 L1309.14 1211.04 L1308.55 1211.04 L1307.97 1211.04 L1307.38 1211.04 L1306.79 1211.04 L1306.21 1211.04 L1305.62 1211.04 L1305.03 1211.04 L1304.45 1211.04 L1303.86 1211.04 L1303.27 1211.04 L1302.69 1211.04 L1302.1 1211.04 L1301.52 1211.04 L1300.93 1211.04 L1300.34 1211.04 L1299.76 1211.04 L1299.17 1211.04 L1298.58 1211.04 L1298 1211.04 L1297.41 1211.04 L1296.82 1211.04 L1296.24 1211.04 L1295.65 1211.04 L1295.06 1211.04 L1294.48 1211.04 L1293.89 1211.04 L1293.31 1211.04 L1292.72 1211.04 L1292.13 1211.04 L1291.55 1211.04 L1290.96 1211.04 L1290.37 1211.04 L1289.79 1211.04 L1289.2 1211.04 L1288.61 1211.04 L1288.03 1211.04 L1287.44 1211.04 L1286.86 1211.04 L1286.27 1211.04 L1285.68 1211.04 L1285.1 1211.04 L1284.51 1211.04 L1283.92 1211.04 L1283.34 1211.04 L1282.75 1211.04 L1282.16 1211.04 L1281.58 1211.04 L1280.99 1211.04 L1280.4 1211.04 L1279.82 1211.04 L1279.23 1211.04 L1278.65 1211.04 L1278.06 1211.04 L1277.47 1211.04 L1276.89 1211.04 L1276.3 1211.04 L1275.71 1211.04 L1275.13 1211.04 L1274.54 1211.04 L1273.95 1211.04 L1273.37 1211.04 L1272.78 1211.04 L1272.19 1211.04 L1271.61 1211.04 L1271.02 1211.04 L1270.44 1211.04 L1269.85 1211.04 L1269.26 1211.04 L1268.68 1211.04 L1268.09 1211.04 L1267.5 1211.04 L1266.92 1211.04 L1266.33 1211.04 L1265.74 1211.04 L1265.16 1211.04 L1264.57 1211.04 L1263.98 1211.04 L1263.4 1211.04 L1262.81 1211.04 L1262.23 1211.04 L1261.64 1211.04 L1261.05 1211.04 L1260.47 1211.04 L1259.88 1211.04 L1259.29 1211.04 L1258.71 1211.04 L1258.12 1211.04 L1257.53 1211.04 L1256.95 1211.04 L1256.36 1211.04 L1255.78 1211.04 L1255.19 1211.04 L1254.6 1211.04 L1254.02 1211.04 L1253.43 1211.04 L1252.84 1211.04 L1252.26 1211.04 L1251.67 1211.04 L1251.08 1211.04 L1250.5 1211.04 L1249.91 1211.04 L1249.32 1211.04 L1248.74 1211.04 L1248.15 1211.04 L1247.57 1211.04 L1246.98 1211.04 L1246.39 1211.04 L1245.81 1211.04 L1245.22 1211.04 L1244.63 1211.04 L1244.05 1211.04 L1243.46 1211.04 L1242.87 1211.04 L1242.29 1211.04 L1241.7 1211.04 L1241.11 1211.04 L1240.53 1211.04 L1239.94 1211.04 L1239.36 1211.04 L1238.77 1211.04 L1238.18 1211.04 L1237.6 1211.04 L1237.01 1211.04 L1236.42 1211.04 L1235.84 1211.04 L1235.25 1211.04 L1234.66 1211.04 L1234.08 1211.04 L1233.49 1211.04 L1232.91 1211.04 L1232.32 1211.04 L1231.73 1211.04 L1231.15 1211.04 L1230.56 1211.04 L1229.97 1211.04 L1229.39 1211.04 L1228.8 1211.04 L1228.21 1211.04 L1227.63 1211.04 L1227.04 1211.04 L1226.45 1211.04 L1225.87 1211.04 L1225.28 1211.04 L1224.7 1211.04 L1224.11 1211.04 L1223.52 1211.04 L1222.94 1211.04 L1222.35 1211.04 L1221.76 1211.04 L1221.18 1211.04 L1220.59 1211.04 L1220 1211.04 L1219.42 1211.04 L1218.83 1211.04 L1218.24 1211.04 L1217.66 1211.04 L1217.07 1211.04 L1216.49 1211.04 L1215.9 1211.04 L1215.31 1211.04 L1214.73 1211.04 L1214.14 1211.04 L1213.55 1211.04 L1212.97 1211.04 L1212.38 1211.04 L1211.79 1211.04 L1211.21 1211.04 L1210.62 1211.04 L1210.03 1211.04 L1209.45 1211.04 L1208.86 1211.04 L1208.28 1211.04 L1207.69 1211.04 L1207.1 1211.04 L1206.52 1211.04 L1205.93 1211.04 L1205.34 1211.04 L1204.76 1211.04 L1204.17 1211.04 L1203.58 1211.04 L1203 1211.04 L1202.41 1211.04 L1201.83 1211.04 L1201.24 1211.04 L1200.65 1211.04 L1200.07 1211.04 L1199.48 1211.04 L1198.89 1211.04 L1198.31 1211.04 L1197.72 1211.04 L1197.13 1211.04 L1196.55 1211.04 L1195.96 1211.04 L1195.37 1211.04 L1194.79 1211.04 L1194.2 1211.04 L1193.62 1211.04 L1193.03 1211.04 L1192.44 1211.04 L1191.86 1211.04 L1191.27 1211.04 L1190.68 1211.04 L1190.1 1211.04 L1189.51 1211.04 L1188.92 1211.04 L1188.34 1211.04 L1187.75 1211.04 L1187.16 1211.04 L1186.58 1211.04 L1185.99 1211.04 L1185.41 1211.04 L1184.82 1211.04 L1184.23 1211.04 L1183.65 1211.04 L1183.06 1211.04 L1182.47 1211.04 L1181.89 1211.04 L1181.3 1211.04 L1180.71 1211.04 L1180.13 1211.04 L1179.54 1211.04 L1178.96 1211.04 L1178.37 1211.04 L1177.78 1211.04 L1177.2 1211.04 L1176.61 1211.04 L1176.02 1211.04 L1175.44 1211.04 L1174.85 1211.04 L1174.26 1211.04 L1173.68 1211.04 L1173.09 1211.04 L1172.5 1211.04 L1171.92 1211.04 L1171.33 1211.04 L1170.75 1211.04 L1170.16 1211.04 L1169.57 1211.04 L1168.99 1211.04 L1168.4 1211.04 L1167.81 1211.04 L1167.23 1211.04 L1166.64 1211.04 L1166.05 1211.04 L1165.47 1211.04 L1164.88 1211.04 L1164.29 1211.04 L1163.71 1211.04 L1163.12 1211.04 L1162.54 1211.04 L1161.95 1211.04 L1161.36 1211.04 L1160.78 1211.04 L1160.19 1211.04 L1159.6 1211.04 L1159.02 1211.04 L1158.43 1211.04 L1157.84 1211.04 L1157.26 1211.04 L1156.67 1211.04 L1156.09 1211.04 L1155.5 1211.04 L1154.91 1211.04 L1154.33 1211.04 L1153.74 1211.04 L1153.15 1211.04 L1152.57 1211.04 L1151.98 1211.04 L1151.39 1211.04 L1150.81 1211.04 L1150.22 1211.04 L1149.63 1211.04 L1149.05 1211.04 L1148.46 1211.04 L1147.88 1211.04 L1147.29 1211.04 L1146.7 1211.04 L1146.12 1211.04 L1145.53 1211.04 L1144.94 1211.04 L1144.36 1211.04 L1143.77 1211.04 L1143.18 1211.04 L1142.6 1211.04 L1142.01 1211.04 L1141.42 1211.04 L1140.84 1211.04 L1140.25 1211.04 L1139.67 1211.04 L1139.08 1211.04 L1138.49 1211.04 L1137.91 1211.04 L1137.32 1211.04 L1136.73 1211.04 L1136.15 1211.04 L1135.56 1211.04 L1134.97 1211.04 L1134.39 1211.04 L1133.8 1211.04 L1133.21 1211.04 L1132.63 1211.04 L1132.04 1211.04 L1131.46 1211.04 L1130.87 1211.04 L1130.28 1211.04 L1129.7 1211.04 L1129.11 1211.04 L1128.52 1211.04 L1127.94 1211.04 L1127.35 1211.04 L1126.76 1211.04 L1126.18 1211.04 L1125.59 1211.04 L1125.01 1211.04 L1124.42 1211.04 L1123.83 1211.04 L1123.25 1211.04 L1122.66 1211.04 L1122.07 1211.04 L1121.49 1211.04 L1120.9 1211.04 L1120.31 1211.04 L1119.73 1211.04 L1119.14 1211.04 L1118.55 1211.04 L1117.97 1211.04 L1117.38 1211.04 L1116.8 1211.04 L1116.21 1211.04 L1115.62 1211.04 L1115.04 1211.04 L1114.45 1211.04 L1113.86 1211.04 L1113.28 1211.04 L1112.69 1211.04 L1112.1 1211.04 L1111.52 1211.04 L1110.93 1211.04 L1110.34 1211.04 L1109.76 1211.04 L1109.17 1211.04 L1108.59 1211.04 L1108 1211.04 L1107.41 1211.04 L1106.83 1211.04 L1106.24 1211.04 L1105.65 1211.04 L1105.07 1211.04 L1104.48 1211.04 L1103.89 1211.04 L1103.31 1211.04 L1102.72 1211.04 L1102.14 1211.04 L1101.55 1211.04 L1100.96 1211.04 L1100.38 1211.04 L1099.79 1211.04 L1099.2 1211.04 L1098.62 1211.04 L1098.03 1211.04 L1097.44 1211.04 L1096.86 1211.04 L1096.27 1211.04 L1095.68 1211.04 L1095.1 1211.04 L1094.51 1211.04 L1093.93 1211.04 L1093.34 1211.04 L1092.75 1211.04 L1092.17 1211.04 L1091.58 1211.04 L1090.99 1211.04 L1090.41 1211.04 L1089.82 1211.04 L1089.23 1211.04 L1088.65 1211.04 L1088.06 1211.04 L1087.47 1211.04 L1086.89 1211.04 L1086.3 1211.04 L1085.72 1211.04 L1085.13 1211.04 L1084.54 1211.04 L1083.96 1211.04 L1083.37 1211.04 L1082.78 1211.04 L1082.2 1211.04 L1081.61 1211.04 L1081.02 1211.04 L1080.44 1211.04 L1079.85 1211.04 L1079.26 1211.04 L1078.68 1211.04 L1078.09 1211.04 L1077.51 1211.04 L1076.92 1211.04 L1076.33 1211.04 L1075.75 1211.04 L1075.16 1211.04 L1074.57 1211.04 L1073.99 1211.04 L1073.4 1211.04 L1072.81 1211.04 L1072.23 1211.04 L1071.64 1211.04 L1071.06 1211.04 L1070.47 1211.04 L1069.88 1211.04 L1069.3 1211.04 L1068.71 1211.04 L1068.12 1211.04 L1067.54 1211.04 L1066.95 1211.04 L1066.36 1211.04 L1065.78 1211.04 L1065.19 1211.04 L1064.6 1211.04 L1064.02 1211.04 L1063.43 1211.04 L1062.85 1211.04 L1062.26 1211.04 L1061.67 1211.04 L1061.09 1211.04 L1060.5 1211.04 L1059.91 1211.04 L1059.33 1211.04 L1058.74 1211.04 L1058.15 1211.04 L1057.57 1211.04 L1056.98 1211.04 L1056.39 1211.04 L1055.81 1211.04 L1055.22 1211.04 L1054.64 1211.04 L1054.05 1211.04 L1053.46 1211.04 L1052.88 1211.04 L1052.29 1211.04 L1051.7 1211.04 L1051.12 1211.04 L1050.53 1211.04 L1049.94 1211.04 L1049.36 1211.04 L1048.77 1211.04 L1048.19 1211.04 L1047.6 1211.04 L1047.01 1211.04 L1046.43 1211.04 L1045.84 1211.04 L1045.25 1211.04 L1044.67 1211.04 L1044.08 1211.04 L1043.49 1211.04 L1042.91 1211.04 L1042.32 1211.04 L1041.73 1211.04 L1041.15 1211.04 L1040.56 1211.04 L1039.98 1211.04 L1039.39 1211.04 L1038.8 1211.04 L1038.22 1211.04 L1037.63 1211.04 L1037.04 1211.04 L1036.46 1211.04 L1035.87 1211.04 L1035.28 1211.04 L1034.7 1211.04 L1034.11 1211.04 L1033.52 1211.04 L1032.94 1211.04 L1032.35 1211.04 L1031.77 1211.04 L1031.18 1211.04 L1030.59 1211.04 L1030.01 1211.04 L1029.42 1211.04 L1028.83 1211.04 L1028.25 1211.04 L1027.66 1211.04 L1027.07 1211.04 L1026.49 1211.04 L1025.9 1211.04 L1025.32 1211.04 L1024.73 1211.04 L1024.14 1211.04 L1023.56 1211.04 L1022.97 1211.04 L1022.38 1211.04 L1021.8 1211.04 L1021.21 1211.04 L1020.62 1211.04 L1020.04 1211.04 L1019.45 1211.04 L1018.86 1211.04 L1018.28 1211.04 L1017.69 1211.04 L1017.11 1211.04 L1016.52 1211.04 L1015.93 1211.04 L1015.35 1211.04 L1014.76 1211.04 L1014.17 1211.04 L1013.59 1211.04 L1013 1211.04 L1012.41 1211.04 L1011.83 1211.04 L1011.24 1211.04 L1010.65 1211.04 L1010.07 1211.04 L1009.48 1211.04 L1008.9 1211.04 L1008.31 1211.04 L1007.72 1211.04 L1007.14 1211.04 L1006.55 1211.04 L1005.96 1211.04 L1005.38 1211.04 L1004.79 1211.04 L1004.2 1211.04 L1003.62 1211.04 L1003.03 1211.04 L1002.44 1211.04 L1001.86 1211.04 L1001.27 1211.04 L1000.69 1211.04 L1000.1 1211.04 L999.513 1211.04 L998.926 1211.04 L998.34 1211.04 L997.754 1211.04 L997.167 1211.04 L996.581 1211.04 L995.994 1211.04 L995.408 1211.04 L994.822 1211.04 L994.235 1211.04 L993.649 1211.04 L993.062 1211.04 L992.476 1211.04 L991.889 1211.04 L991.303 1211.04 L990.717 1211.04 L990.13 1211.04 L989.544 1211.04 L988.957 1211.04 L988.371 1211.04 L987.785 1211.04 L987.198 1211.04 L986.612 1211.04 L986.025 1211.04  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.45 986.612,1211.45 987.198,1211.45 987.785,1211.45 988.371,1211.45 988.957,1211.45 989.544,1211.45 990.13,1211.45 990.717,1211.45 991.303,1211.45 991.889,1211.45 992.476,1211.45 993.062,1211.45 993.649,1211.45 994.235,1211.45 994.822,1211.45 995.408,1211.45 995.994,1211.45 996.581,1211.45 997.167,1211.45 997.754,1211.45 998.34,1211.45 998.926,1211.45 999.513,1211.45 1000.1,1211.45 1000.69,1211.45 1001.27,1211.45 1001.86,1211.45 1002.44,1211.45 1003.03,1211.45 1003.62,1211.45 1004.2,1211.45 1004.79,1211.45 1005.38,1211.45 1005.96,1211.45 1006.55,1211.45 1007.14,1211.45 1007.72,1211.45 1008.31,1211.45 1008.9,1211.45 1009.48,1211.45 1010.07,1211.45 1010.65,1211.45 1011.24,1211.45 1011.83,1211.45 1012.41,1211.45 1013,1211.45 1013.59,1211.45 1014.17,1211.45 1014.76,1211.45 1015.35,1211.45 1015.93,1211.45 1016.52,1211.45 1017.11,1211.45 1017.69,1211.45 1018.28,1211.45 1018.86,1211.45 1019.45,1211.45 1020.04,1211.45 1020.62,1211.45 1021.21,1211.45 1021.8,1211.45 1022.38,1211.45 1022.97,1211.45 1023.56,1211.45 1024.14,1211.45 1024.73,1211.45 1025.32,1211.45 1025.9,1211.45 1026.49,1211.45 1027.07,1211.45 1027.66,1211.45 1028.25,1211.45 1028.83,1211.45 1029.42,1211.45 1030.01,1211.45 1030.59,1211.45 1031.18,1211.45 1031.77,1211.45 1032.35,1211.45 1032.94,1211.45 1033.52,1211.45 1034.11,1211.45 1034.7,1211.45 1035.28,1211.45 1035.87,1211.45 1036.46,1211.45 1037.04,1211.45 1037.63,1211.45 1038.22,1211.45 1038.8,1211.45 1039.39,1211.45 1039.98,1211.45 1040.56,1211.45 1041.15,1211.45 1041.73,1211.45 1042.32,1211.45 1042.91,1211.45 1043.49,1211.45 1044.08,1211.45 1044.67,1211.45 1045.25,1211.45 1045.84,1211.45 1046.43,1211.45 1047.01,1211.45 1047.6,1211.45 1048.19,1211.45 1048.77,1211.45 1049.36,1211.45 1049.94,1211.45 1050.53,1211.45 1051.12,1211.45 1051.7,1211.45 1052.29,1211.45 1052.88,1211.45 1053.46,1211.45 1054.05,1211.45 1054.64,1211.45 1055.22,1211.45 1055.81,1211.45 1056.39,1211.45 1056.98,1211.45 1057.57,1211.45 1058.15,1211.45 1058.74,1211.45 1059.33,1211.45 1059.91,1211.45 1060.5,1211.45 1061.09,1211.45 1061.67,1211.45 1062.26,1211.45 1062.85,1211.45 1063.43,1211.45 1064.02,1211.45 1064.6,1211.45 1065.19,1211.45 1065.78,1211.45 1066.36,1211.45 1066.95,1211.45 1067.54,1211.45 1068.12,1211.45 1068.71,1211.45 1069.3,1211.45 1069.88,1211.45 1070.47,1211.45 1071.06,1211.45 1071.64,1211.45 1072.23,1211.45 1072.81,1211.45 1073.4,1211.45 1073.99,1211.45 1074.57,1211.45 1075.16,1211.45 1075.75,1211.45 1076.33,1211.45 1076.92,1211.45 1077.51,1211.45 1078.09,1211.45 1078.68,1211.45 1079.26,1211.45 1079.85,1211.45 1080.44,1211.45 1081.02,1211.45 1081.61,1211.45 1082.2,1211.45 1082.78,1211.45 1083.37,1211.45 1083.96,1211.45 1084.54,1211.45 1085.13,1211.45 1085.72,1211.45 1086.3,1211.45 1086.89,1211.45 1087.47,1211.45 1088.06,1211.45 1088.65,1211.45 1089.23,1211.45 1089.82,1211.45 1090.41,1211.45 1090.99,1211.45 1091.58,1211.45 1092.17,1211.45 1092.75,1211.45 1093.34,1211.45 1093.93,1211.45 1094.51,1211.45 1095.1,1211.45 1095.68,1211.45 1096.27,1211.45 1096.86,1211.45 1097.44,1211.45 1098.03,1211.45 1098.62,1211.45 1099.2,1211.45 1099.79,1211.45 1100.38,1211.45 1100.96,1211.45 1101.55,1211.45 1102.14,1211.45 1102.72,1211.45 1103.31,1211.45 1103.89,1211.45 1104.48,1211.45 1105.07,1211.45 1105.65,1211.45 1106.24,1211.45 1106.83,1211.45 1107.41,1211.45 1108,1211.45 1108.59,1211.45 1109.17,1211.45 1109.76,1211.45 1110.34,1211.45 1110.93,1211.45 1111.52,1211.45 1112.1,1211.45 1112.69,1211.45 1113.28,1211.45 1113.86,1211.45 1114.45,1211.45 1115.04,1211.45 1115.62,1211.45 1116.21,1211.45 1116.8,1211.45 1117.38,1211.45 1117.97,1211.45 1118.55,1211.45 1119.14,1211.45 1119.73,1211.45 1120.31,1211.45 1120.9,1211.45 1121.49,1211.45 1122.07,1211.45 1122.66,1211.45 1123.25,1211.45 1123.83,1211.45 1124.42,1211.45 1125.01,1211.45 1125.59,1211.45 1126.18,1211.45 1126.76,1211.45 1127.35,1211.45 1127.94,1211.45 1128.52,1211.45 1129.11,1211.45 1129.7,1211.45 1130.28,1211.45 1130.87,1211.45 1131.46,1211.45 1132.04,1211.45 1132.63,1211.45 1133.21,1211.45 1133.8,1211.45 1134.39,1211.45 1134.97,1211.45 1135.56,1211.45 1136.15,1211.45 1136.73,1211.45 1137.32,1211.45 1137.91,1211.45 1138.49,1211.45 1139.08,1211.45 1139.67,1211.45 1140.25,1211.45 1140.84,1211.45 1141.42,1211.45 1142.01,1211.45 1142.6,1211.45 1143.18,1211.45 1143.77,1211.45 1144.36,1211.45 1144.94,1211.45 1145.53,1211.45 1146.12,1211.45 1146.7,1211.45 1147.29,1211.45 1147.88,1211.45 1148.46,1211.45 1149.05,1211.45 1149.63,1211.45 1150.22,1211.45 1150.81,1211.45 1151.39,1211.45 1151.98,1211.45 1152.57,1211.45 1153.15,1211.45 1153.74,1211.45 1154.33,1211.45 1154.91,1211.45 1155.5,1211.45 1156.09,1211.45 1156.67,1211.45 1157.26,1211.45 1157.84,1211.45 1158.43,1211.45 1159.02,1211.45 1159.6,1211.45 1160.19,1211.45 1160.78,1211.45 1161.36,1211.45 1161.95,1211.45 1162.54,1211.45 1163.12,1211.45 1163.71,1211.45 1164.29,1211.45 1164.88,1211.45 1165.47,1211.45 1166.05,1211.45 1166.64,1211.45 1167.23,1211.45 1167.81,1211.45 1168.4,1211.45 1168.99,1211.45 1169.57,1211.45 1170.16,1211.45 1170.75,1211.45 1171.33,1211.45 1171.92,1211.45 1172.5,1211.45 1173.09,1211.45 1173.68,1211.45 1174.26,1211.45 1174.85,1211.45 1175.44,1211.45 1176.02,1211.45 1176.61,1211.45 1177.2,1211.45 1177.78,1211.45 1178.37,1211.45 1178.96,1211.45 1179.54,1211.45 1180.13,1211.45 1180.71,1211.45 1181.3,1211.45 1181.89,1211.45 1182.47,1211.45 1183.06,1211.45 1183.65,1211.45 1184.23,1211.45 1184.82,1211.45 1185.41,1211.45 1185.99,1211.45 1186.58,1211.45 1187.16,1211.45 1187.75,1211.45 1188.34,1211.45 1188.92,1211.45 1189.51,1211.45 1190.1,1211.45 1190.68,1211.45 1191.27,1211.45 1191.86,1211.45 1192.44,1211.45 1193.03,1211.45 1193.62,1211.45 1194.2,1211.45 1194.79,1211.45 1195.37,1211.45 1195.96,1211.45 1196.55,1211.45 1197.13,1211.45 1197.72,1211.45 1198.31,1211.45 1198.89,1211.45 1199.48,1211.45 1200.07,1211.45 1200.65,1211.45 1201.24,1211.45 1201.83,1211.45 1202.41,1211.45 1203,1211.45 1203.58,1211.45 1204.17,1211.45 1204.76,1211.45 1205.34,1211.45 1205.93,1211.45 1206.52,1211.45 1207.1,1211.45 1207.69,1211.45 1208.28,1211.45 1208.86,1211.45 1209.45,1211.45 1210.03,1211.45 1210.62,1211.45 1211.21,1211.45 1211.79,1211.45 1212.38,1211.45 1212.97,1211.45 1213.55,1211.45 1214.14,1211.45 1214.73,1211.45 1215.31,1211.45 1215.9,1211.45 1216.49,1211.45 1217.07,1211.45 1217.66,1211.45 1218.24,1211.45 1218.83,1211.45 1219.42,1211.45 1220,1211.45 1220.59,1211.45 1221.18,1211.45 1221.76,1211.45 1222.35,1211.45 1222.94,1211.45 1223.52,1211.45 1224.11,1211.45 1224.7,1211.45 1225.28,1211.45 1225.87,1211.45 1226.45,1211.45 1227.04,1211.45 1227.63,1211.45 1228.21,1211.45 1228.8,1211.45 1229.39,1211.45 1229.97,1211.45 1230.56,1211.45 1231.15,1211.45 1231.73,1211.45 1232.32,1211.45 1232.91,1211.45 1233.49,1211.45 1234.08,1211.45 1234.66,1211.45 1235.25,1211.45 1235.84,1211.45 1236.42,1211.45 1237.01,1211.45 1237.6,1211.45 1238.18,1211.45 1238.77,1211.45 1239.36,1211.45 1239.94,1211.45 1240.53,1211.45 1241.11,1211.45 1241.7,1211.45 1242.29,1211.45 1242.87,1211.45 1243.46,1211.45 1244.05,1211.45 1244.63,1211.45 1245.22,1211.45 1245.81,1211.45 1246.39,1211.45 1246.98,1211.45 1247.57,1211.45 1248.15,1211.45 1248.74,1211.45 1249.32,1211.45 1249.91,1211.45 1250.5,1211.45 1251.08,1211.45 1251.67,1211.45 1252.26,1211.45 1252.84,1211.45 1253.43,1211.45 1254.02,1211.45 1254.6,1211.45 1255.19,1211.45 1255.78,1211.45 1256.36,1211.45 1256.95,1211.45 1257.53,1211.45 1258.12,1211.45 1258.71,1211.45 1259.29,1211.45 1259.88,1211.45 1260.47,1211.45 1261.05,1211.45 1261.64,1211.45 1262.23,1211.45 1262.81,1211.45 1263.4,1211.45 1263.98,1211.45 1264.57,1211.45 1265.16,1211.45 1265.74,1211.45 1266.33,1211.45 1266.92,1211.45 1267.5,1211.45 1268.09,1211.45 1268.68,1211.45 1269.26,1211.45 1269.85,1211.45 1270.44,1211.45 1271.02,1211.45 1271.61,1211.45 1272.19,1211.45 1272.78,1211.45 1273.37,1211.45 1273.95,1211.45 1274.54,1211.45 1275.13,1211.45 1275.71,1211.45 1276.3,1211.45 1276.89,1211.45 1277.47,1211.45 1278.06,1211.45 1278.65,1211.45 1279.23,1211.45 1279.82,1211.45 1280.4,1211.45 1280.99,1211.45 1281.58,1211.45 1282.16,1211.45 1282.75,1211.45 1283.34,1211.45 1283.92,1211.45 1284.51,1211.45 1285.1,1211.45 1285.68,1211.45 1286.27,1211.45 1286.86,1211.45 1287.44,1211.45 1288.03,1211.45 1288.61,1211.45 1289.2,1211.45 1289.79,1211.45 1290.37,1211.45 1290.96,1211.45 1291.55,1211.45 1292.13,1211.45 1292.72,1211.45 1293.31,1211.45 1293.89,1211.45 1294.48,1211.45 1295.06,1211.45 1295.65,1211.45 1296.24,1211.45 1296.82,1211.45 1297.41,1211.45 1298,1211.45 1298.58,1211.45 1299.17,1211.45 1299.76,1211.45 1300.34,1211.45 1300.93,1211.45 1301.52,1211.45 1302.1,1211.45 1302.69,1211.45 1303.27,1211.45 1303.86,1211.45 1304.45,1211.45 1305.03,1211.45 1305.62,1211.45 1306.21,1211.45 1306.79,1211.45 1307.38,1211.45 1307.97,1211.45 1308.55,1211.45 1309.14,1211.45 1309.73,1211.45 1310.31,1211.45 1310.9,1211.45 1311.48,1211.45 1312.07,1211.45 1312.66,1211.45 1313.24,1211.45 1313.83,1211.45 1314.42,1211.45 1315,1211.45 1315.59,1211.45 1316.18,1211.45 1316.76,1211.45 1317.35,1211.45 1317.93,1211.45 1318.52,1211.45 1319.11,1211.45 1319.69,1211.45 1320.28,1211.45 1320.87,1211.45 1321.45,1211.45 1322.04,1211.45 1322.63,1211.45 1323.21,1211.45 1323.8,1211.45 1324.39,1211.45 1324.97,1211.45 1325.56,1211.45 1326.14,1211.45 1326.73,1211.45 1327.32,1211.45 1327.9,1211.45 1328.49,1211.45 1329.08,1211.45 1329.66,1211.45 1330.25,1211.45 1330.84,1211.45 1331.42,1211.45 1332.01,1211.45 1332.6,1211.45 1333.18,1211.45 1333.77,1211.45 1334.35,1211.45 1334.94,1211.45 1335.53,1211.45 1336.11,1211.45 1336.7,1211.45 1337.29,1211.45 1337.87,1211.45 1338.46,1211.45 1339.05,1211.45 1339.63,1211.45 1340.22,1211.45 1340.8,1211.45 1341.39,1211.45 1341.98,1211.45 1342.56,1211.45 1343.15,1211.45 1343.74,1211.45 1344.32,1211.45 1344.91,1211.45 1345.5,1211.45 1346.08,1211.45 1346.67,1211.45 1347.26,1211.45 1347.84,1211.45 1348.43,1211.45 1349.01,1211.45 1349.6,1211.45 1350.19,1211.45 1350.77,1211.45 1351.36,1211.45 1351.95,1211.45 1352.53,1211.45 1353.12,1211.45 1353.71,1211.45 1354.29,1211.45 1354.88,1211.45 1355.47,1211.45 1356.05,1211.45 1356.64,1211.45 1357.22,1211.45 1357.81,1211.45 1358.4,1211.45 1358.98,1211.45 1359.57,1211.45 1360.16,1211.45 1360.74,1211.45 1361.33,1211.45 1361.92,1211.45 1362.5,1211.45 1363.09,1211.45 1363.68,1211.45 1364.26,1211.45 1364.85,1211.45 1365.43,1211.45 1366.02,1211.45 1366.61,1211.45 1367.19,1211.45 1367.78,1211.45 1368.37,1211.45 1368.95,1211.45 1369.54,1211.45 1370.13,1211.45 1370.71,1211.45 1371.3,1211.45 1371.88,1211.45 1372.47,1211.45 1373.06,1211.45 1373.64,1211.45 1374.23,1211.45 1374.82,1211.45 1375.4,1211.45 1375.99,1211.45 1376.58,1211.45 1377.16,1211.45 1377.75,1211.45 1378.34,1211.45 1378.92,1211.45 1379.51,1211.45 1380.09,1211.45 1380.68,1211.45 1381.27,1211.45 1381.85,1211.45 1382.44,1211.45 1383.03,1211.45 1383.61,1211.45 1384.2,1211.45 1384.79,1211.45 1385.37,1211.45 1385.96,1211.45 1386.55,1211.45 1387.13,1211.45 1387.72,1211.45 1388.3,1211.45 1388.89,1211.45 1389.48,1211.45 1390.06,1211.45 1390.65,1211.45 1391.24,1211.45 1391.82,1211.45 1392.41,1211.45 1393,1211.45 1393.58,1211.45 1394.17,1211.45 1394.75,1211.45 1395.34,1211.45 1395.93,1211.45 1396.51,1211.45 1397.1,1211.45 1397.69,1211.45 1398.27,1211.45 1398.86,1211.45 1399.45,1211.45 1400.03,1211.45 1400.62,1211.45 1401.21,1211.45 1401.79,1211.45 1402.38,1211.45 1402.96,1211.45 1403.55,1211.45 1404.14,1211.45 1404.72,1211.45 1405.31,1211.45 1405.9,1211.45 1406.48,1211.45 1407.07,1211.45 1407.66,1211.45 1408.24,1211.45 1408.83,1211.45 1409.42,1211.45 1410,1211.45 1410.59,1211.45 1411.17,1211.45 1411.76,1211.45 1412.35,1211.45 1412.93,1211.45 1413.52,1211.45 1414.11,1211.45 1414.69,1211.45 1415.28,1211.45 1415.87,1211.45 1416.45,1211.45 1417.04,1211.45 1417.63,1211.45 1418.21,1211.45 1418.8,1211.45 1419.38,1211.45 1419.97,1211.45 1420.56,1211.45 1421.14,1211.45 1421.73,1211.45 1422.32,1211.45 1422.9,1211.45 1423.49,1211.45 1424.08,1211.45 1424.66,1211.45 1425.25,1211.45 1425.83,1211.45 1426.42,1211.45 1427.01,1211.45 1427.59,1211.45 1428.18,1211.45 1428.77,1211.45 1429.35,1211.45 1429.94,1211.45 1430.53,1211.45 1431.11,1211.45 1431.7,1211.45 1432.29,1211.45 1432.87,1211.45 1433.46,1211.45 1434.04,1211.45 1434.63,1211.45 1435.22,1211.45 1435.8,1211.45 1436.39,1211.45 1436.98,1211.45 1437.56,1211.45 1438.15,1211.45 1438.74,1211.45 1439.32,1211.45 1439.91,1211.45 1440.5,1211.45 1441.08,1211.45 1441.67,1211.45 1442.25,1211.45 1442.84,1211.45 1443.43,1211.45 1444.01,1211.45 1444.6,1211.45 1445.19,1211.45 1445.77,1211.45 1446.36,1211.45 1446.95,1211.45 1447.53,1211.45 1448.12,1211.45 1448.7,1211.45 1449.29,1211.45 1449.88,1211.45 1450.46,1211.45 1451.05,1211.45 1451.64,1211.45 1452.22,1211.45 1452.81,1211.45 1453.4,1211.45 1453.98,1211.45 1454.57,1211.45 1455.16,1211.45 1455.74,1211.45 1456.33,1211.45 1456.91,1211.45 1457.5,1211.45 1458.09,1211.45 1458.67,1211.45 1459.26,1211.45 1459.85,1211.45 1460.43,1211.45 1461.02,1211.45 1461.61,1211.45 1462.19,1211.45 1462.78,1211.45 1463.37,1211.45 1463.95,1211.45 1464.54,1211.45 1465.12,1211.45 1465.71,1211.45 1466.3,1211.45 1466.88,1211.45 1467.47,1211.45 1468.06,1211.45 1468.64,1211.45 1469.23,1211.45 1469.82,1211.45 1470.4,1211.45 1470.99,1211.45 1471.57,1211.45 1472.16,1211.45 1472.75,1211.45 1473.33,1211.45 1473.92,1211.45 1474.51,1211.45 1475.09,1211.45 1475.68,1211.45 1476.27,1211.45 1476.85,1211.45 1477.44,1211.45 1478.03,1211.45 1478.61,1211.45 1479.2,1211.45 1479.78,1211.45 1480.37,1211.45 1480.96,1211.45 1481.54,1211.45 1482.13,1211.45 1482.72,1211.45 1483.3,1211.45 1483.89,1211.45 1484.48,1211.45 1485.06,1211.45 1485.65,1211.45 1486.24,1211.45 1486.82,1211.45 1487.41,1211.45 1487.99,1211.45 1488.58,1211.45 1489.17,1211.45 1489.75,1211.45 1490.34,1211.45 1490.93,1211.45 1491.51,1211.45 1492.1,1211.45 1492.69,1211.45 1493.27,1211.45 1493.86,1211.45 1494.45,1211.45 1495.03,1211.45 1495.62,1211.45 1496.2,1211.45 1496.79,1211.45 1497.38,1211.45 1497.96,1211.45 1498.55,1211.45 1499.14,1211.45 1499.72,1211.45 1500.31,1211.45 1500.9,1211.45 1501.48,1211.45 1502.07,1211.45 1502.65,1211.45 1503.24,1211.45 1503.83,1211.45 1504.41,1211.45 1505,1211.45 1505.59,1211.45 1506.17,1211.45 1506.76,1211.45 1507.35,1211.45 1507.93,1211.45 1508.52,1211.45 1509.11,1211.45 1509.69,1211.45 1510.28,1211.45 1510.86,1211.45 1511.45,1211.45 1512.04,1211.45 1512.62,1211.45 1513.21,1211.45 1513.8,1211.45 1514.38,1211.45 1514.97,1211.45 1515.56,1211.45 1516.14,1211.45 1516.73,1211.45 1517.32,1211.45 1517.9,1211.45 1518.49,1211.45 1519.07,1211.45 1519.66,1211.45 1520.25,1211.45 1520.83,1211.45 1521.42,1211.45 1522.01,1211.45 1522.59,1211.45 1523.18,1211.45 1523.77,1211.45 1524.35,1211.45 1524.94,1211.45 1525.52,1211.45 1526.11,1211.45 1526.7,1211.45 1527.28,1211.45 1527.87,1211.45 1528.46,1211.45 1529.04,1211.45 1529.63,1211.45 1530.22,1211.45 1530.8,1211.45 1531.39,1211.45 1531.98,1211.45 1532.56,1211.45 1533.15,1211.45 1533.73,1211.45 1534.32,1211.45 1534.91,1211.45 1535.49,1211.45 1536.08,1211.45 1536.67,1211.45 1537.25,1211.45 1537.84,1211.45 1538.43,1211.45 1539.01,1211.45 1539.6,1211.45 1540.19,1211.45 1540.77,1211.45 1541.36,1211.45 1541.94,1211.45 1542.53,1211.45 1543.12,1211.45 1543.7,1211.45 1544.29,1211.45 1544.88,1211.45 1545.46,1211.45 1546.05,1211.45 1546.64,1211.45 1547.22,1211.45 1547.81,1211.45 1548.4,1211.45 1548.98,1211.45 1549.57,1211.45 1550.15,1211.45 1550.74,1211.45 1551.33,1211.45 1551.91,1211.45 1552.5,1211.45 1553.09,1211.45 1553.67,1211.45 1554.26,1211.45 1554.85,1211.45 1555.43,1211.45 1556.02,1211.45 1556.6,1211.45 1557.19,1211.45 1557.78,1211.45 1558.36,1211.45 1558.95,1211.45 1559.54,1211.45 1560.12,1211.45 1560.71,1211.45 1561.3,1211.45 1561.88,1211.45 1562.47,1211.45 1563.06,1211.45 1563.64,1211.45 1564.23,1211.45 1564.81,1211.45 1565.4,1211.45 1565.99,1211.45 1566.57,1211.45 1567.16,1211.45 1567.75,1211.45 1568.33,1211.45 1568.92,1211.45 1569.51,1211.45 1570.09,1211.45 1570.68,1211.45 1571.27,1211.45 1571.85,1211.45 1572.44,1211.45 1573.02,1211.45 1573.61,1211.45 1574.2,1211.45 1574.78,1211.45 1575.37,1211.45 1575.96,1211.45 1576.54,1211.45 1577.13,1211.45 1577.72,1211.45 1578.3,1211.45 1578.89,1211.45 1579.47,1211.45 1580.06,1211.45 1580.65,1211.45 1581.23,1211.45 1581.82,1211.45 1582.41,1211.45 1582.99,1211.45 1583.58,1211.45 1584.17,1211.45 1584.75,1211.45 1585.34,1211.45 1585.93,1211.45 1586.51,1211.45 1587.1,1211.45 1587.68,1211.45 1588.27,1211.45 1588.86,1211.45 1589.44,1211.45 1590.03,1211.45 1590.62,1211.45 1591.2,1211.45 1591.79,1211.45 1592.38,1211.45 1592.96,1211.45 1593.55,1211.45 1594.14,1211.45 1594.72,1211.45 1595.31,1211.45 1595.89,1211.45 1596.48,1211.45 1597.07,1211.45 1597.65,1211.45 1598.24,1211.45 1598.83,1211.45 1599.41,1211.45 1600,1211.45 1600.59,1211.45 1601.17,1211.45 1601.76,1211.45 1602.34,1211.45 1602.93,1211.45 1603.52,1211.45 1604.1,1211.45 1604.69,1211.45 1605.28,1211.45 1605.86,1211.45 1606.45,1211.45 1607.04,1211.45 1607.62,1211.45 1608.21,1211.45 1608.8,1211.45 1609.38,1211.45 1609.97,1211.45 1610.55,1211.45 1611.14,1211.45 1611.73,1211.45 1612.31,1211.45 1612.9,1211.45 1613.49,1211.45 1614.07,1211.45 1614.66,1211.45 1615.25,1211.45 1615.83,1211.45 1616.42,1211.45 1617.01,1211.45 1617.59,1211.45 1618.18,1211.45 1618.76,1211.45 1619.35,1211.45 1619.94,1211.45 1620.52,1211.45 1621.11,1211.45 1621.7,1211.45 1622.28,1211.45 1622.87,1211.45 1623.46,1211.45 1624.04,1211.45 1624.63,1211.45 1625.22,1211.45 1625.8,1211.45 1626.39,1211.45 1626.97,1211.45 1627.56,1211.45 1628.15,1211.45 1628.73,1211.45 1629.32,1211.45 1629.91,1211.45 1630.49,1211.45 1631.08,1211.45 1631.67,1211.45 1632.25,1211.45 1632.84,1211.45 1633.42,1211.45 1634.01,1211.45 1634.6,1211.45 1635.18,1211.45 1635.77,1211.45 1636.36,1211.45 1636.94,1211.45 1637.53,1211.45 1638.12,1211.45 1638.7,1211.45 1639.29,1211.45 1639.88,1211.45 1640.46,1211.45 1641.05,1211.45 1641.63,1211.45 1642.22,1211.45 1642.81,1211.45 1643.39,1211.45 1643.98,1211.45 1644.57,1211.45 1645.15,1211.45 1645.74,1211.45 1646.33,1211.45 1646.91,1211.45 1647.5,1211.45 1648.09,1211.45 1648.67,1211.45 1649.26,1211.45 1649.84,1211.45 1650.43,1211.45 1651.02,1211.45 1651.6,1211.45 1652.19,1211.45 1652.78,1211.45 1653.36,1211.45 1653.95,1211.45 1654.54,1211.45 1655.12,1211.45 1655.71,1211.45 1656.29,1211.45 1656.88,1211.45 1657.47,1211.45 1658.05,1211.45 1658.64,1211.45 1659.23,1211.45 1659.81,1211.45 1660.4,1211.45 1660.99,1211.45 1661.57,1211.45 1662.16,1211.45 1662.75,1211.45 1663.33,1211.45 1663.92,1211.45 1664.5,1211.45 1665.09,1211.45 1665.68,1211.45 1666.26,1211.45 1666.85,1211.45 1667.44,1211.45 1668.02,1211.45 1668.61,1211.45 1669.2,1211.45 1669.78,1211.45 1670.37,1211.45 1670.96,1211.45 1671.54,1211.45 1672.13,1211.45 1672.71,1211.45 1673.3,1211.45 1673.89,1211.45 1674.47,1211.45 1675.06,1211.45 1675.65,1211.45 1676.23,1211.45 1676.82,1211.45 1677.41,1211.45 1677.99,1211.45 1678.58,1211.45 1679.17,1211.45 1679.75,1211.45 1680.34,1211.45 1680.92,1211.45 1681.51,1211.45 1682.1,1211.45 1682.68,1211.45 1683.27,1211.45 1683.86,1211.45 1684.44,1211.45 1685.03,1211.45 1685.62,1211.45 1686.2,1211.45 1686.79,1211.45 1687.37,1211.45 1687.96,1211.45 1688.55,1211.45 1689.13,1211.45 1689.72,1211.45 1690.31,1211.45 1690.89,1211.45 1691.48,1211.45 1692.07,1211.45 1692.65,1211.45 1693.24,1211.45 1693.83,1211.45 1694.41,1211.45 1695,1211.45 1695.58,1211.45 1696.17,1211.45 1696.76,1211.45 1697.34,1211.45 1697.93,1211.45 1698.52,1211.45 1699.1,1211.45 1699.69,1211.45 1700.28,1211.45 1700.86,1211.45 1701.45,1211.45 1702.04,1211.45 1702.62,1211.45 1703.21,1211.45 1703.79,1211.45 1704.38,1211.45 1704.97,1211.45 1705.55,1211.45 1706.14,1211.45 1706.73,1211.45 1707.31,1211.45 1707.9,1211.45 1708.49,1211.45 1709.07,1211.45 1709.66,1211.45 1710.24,1211.45 1710.83,1211.45 1711.42,1211.45 1712,1211.45 1712.59,1211.45 1713.18,1211.45 1713.76,1211.45 1714.35,1211.45 1714.94,1211.45 1715.52,1211.45 1716.11,1211.45 1716.7,1211.45 1717.28,1211.45 1717.87,1211.45 1718.45,1211.45 1719.04,1211.45 1719.63,1211.45 1720.21,1211.45 1720.8,1211.45 1721.39,1211.45 1721.97,1211.45 1722.56,1211.45 1723.15,1211.45 1723.73,1211.45 1724.32,1211.45 1724.91,1211.45 1725.49,1211.45 1726.08,1211.45 1726.66,1211.45 1727.25,1211.45 1727.84,1211.45 1728.42,1211.45 1729.01,1211.45 1729.6,1211.45 1730.18,1211.45 1730.77,1211.45 1731.36,1211.45 1731.94,1211.45 1732.53,1211.45 1733.11,1211.45 1733.7,1211.45 1734.29,1211.45 1734.87,1211.45 1735.46,1211.45 1736.05,1211.45 1736.63,1211.45 1737.22,1211.45 1737.81,1211.45 1738.39,1211.45 1738.98,1211.45 1739.57,1211.45 1740.15,1211.45 1740.74,1211.45 1741.32,1211.45 1741.91,1211.45 1742.5,1211.45 1743.08,1211.45 1743.67,1211.45 1744.26,1211.45 1744.84,1211.45 1745.43,1211.45 1746.02,1211.45 1746.6,1211.45 1747.19,1211.45 1747.78,1211.45 1748.36,1211.45 1748.95,1211.45 1749.53,1211.45 1750.12,1211.45 1750.71,1211.45 1751.29,1211.45 1751.88,1211.45 1752.47,1211.45 1753.05,1211.45 1753.64,1211.45 1754.23,1211.45 1754.81,1211.45 1755.4,1211.45 1755.99,1211.45 1756.57,1211.45 1757.16,1211.45 1757.74,1211.45 1758.33,1211.45 1758.92,1211.45 1759.5,1211.45 1760.09,1211.45 1760.68,1211.45 1761.26,1211.45 1761.85,1211.45 1762.44,1211.45 1763.02,1211.45 1763.61,1211.45 1764.19,1211.45 1764.78,1211.45 1765.37,1211.45 1765.95,1211.45 1766.54,1211.45 1767.13,1211.45 1767.71,1211.45 1768.3,1211.45 1768.89,1211.45 1769.47,1211.45 1770.06,1211.45 1770.65,1211.45 1771.23,1211.45 1771.82,1211.45 1772.4,1211.45 1772.99,1211.45 1773.58,1211.45 1774.16,1211.45 1774.75,1211.45 1775.34,1211.45 1775.92,1211.45 1776.51,1211.45 1777.1,1211.45 1777.68,1211.45 1778.27,1211.45 1778.86,1211.45 1779.44,1211.45 1780.03,1211.45 1780.61,1211.45 1781.2,1211.45 1781.79,1211.45 1782.37,1211.45 1782.96,1211.45 1783.55,1211.45 1784.13,1211.45 1784.72,1211.45 1785.31,1211.45 1785.89,1211.45 1786.48,1211.45 1787.06,1211.45 1787.65,1211.45 1788.24,1211.45 1788.82,1211.45 1789.41,1211.45 1790,1211.45 1790.58,1211.45 1791.17,1211.45 1791.76,1211.45 1792.34,1211.45 1792.93,1211.45 1793.52,1211.45 1794.1,1211.45 1794.69,1211.45 1795.27,1211.45 1795.86,1211.45 1796.45,1211.45 1797.03,1211.45 1797.62,1211.45 1798.21,1211.45 1798.79,1211.45 1799.38,1211.45 1799.97,1211.45 1800.55,1211.45 1801.14,1211.45 1801.73,1211.45 1802.31,1211.45 1802.9,1211.45 1803.48,1211.45 1804.07,1211.45 1804.66,1211.45 1805.24,1211.45 1805.83,1211.45 1806.42,1211.45 1807,1211.45 1807.59,1211.45 1808.18,1211.45 1808.76,1211.45 1809.35,1211.45 1809.94,1211.45 1810.52,1211.45 1811.11,1211.45 1811.69,1211.45 1812.28,1211.45 1812.87,1211.45 1813.45,1211.45 1814.04,1211.45 1814.63,1211.45 1815.21,1211.45 1815.8,1211.45 1816.39,1211.45 1816.97,1211.45 1817.56,1211.45 1818.14,1211.45 1818.73,1211.45 1819.32,1211.45 1819.9,1211.45 1820.49,1211.45 1821.08,1211.45 1821.66,1211.45 1822.25,1211.45 1822.84,1211.45 1823.42,1211.45 1824.01,1211.45 1824.6,1211.45 1825.18,1211.45 1825.77,1211.45 1826.35,1211.45 1826.94,1211.45 1827.53,1211.45 1828.11,1211.45 1828.7,1211.45 1829.29,1211.45 1829.87,1211.45 1830.46,1211.45 1831.05,1211.45 1831.63,1211.45 1832.22,1211.45 1832.81,1211.45 1833.39,1211.45 1833.98,1211.45 1834.56,1211.45 1835.15,1211.45 1835.74,1211.45 1836.32,1211.45 1836.91,1211.45 1837.5,1211.45 1838.08,1211.45 1838.67,1211.45 1839.26,1211.45 1839.84,1211.45 1840.43,1211.45 1841.01,1211.45 1841.6,1211.45 1842.19,1211.45 1842.77,1211.45 1843.36,1211.45 1843.95,1211.45 1844.53,1211.45 1845.12,1211.45 1845.71,1211.45 1846.29,1211.45 1846.88,1211.45 1847.47,1211.45 1848.05,1211.45 1848.64,1211.45 1849.22,1211.45 1849.81,1211.45 1850.4,1211.45 1850.98,1211.45 1851.57,1211.45 1852.16,1211.45 1852.74,1211.45 1853.33,1211.45 1853.92,1211.45 1854.5,1211.45 1855.09,1211.45 1855.68,1211.45 1856.26,1211.45 1856.85,1211.45 1857.43,1211.45 1858.02,1211.45 1858.61,1211.45 1859.19,1211.45 1859.78,1211.45 1860.37,1211.45 1860.95,1211.45 1861.54,1211.45 1862.13,1211.45 1862.71,1211.45 1863.3,1211.45 1863.88,1211.45 1864.47,1211.45 1865.06,1211.45 1865.64,1211.45 1866.23,1211.45 1866.82,1211.45 1867.4,1211.45 1867.99,1211.45 1868.58,1211.45 1869.16,1211.45 1869.75,1211.45 1870.34,1211.45 1870.92,1211.45 1871.51,1211.45 1872.09,1211.45 1872.68,1211.45 1873.27,1211.45 1873.85,1211.45 1874.44,1211.45 1875.03,1211.45 1875.61,1211.45 1876.2,1211.45 1876.79,1211.45 1877.37,1211.45 1877.96,1211.45 1878.55,1211.45 1879.13,1211.45 1879.72,1211.45 1880.3,1211.45 1880.89,1211.45 1881.48,1211.45 1882.06,1211.45 1882.65,1211.45 1883.24,1211.45 1883.82,1211.45 1884.41,1211.45 1885,1211.45 1885.58,1211.45 1886.17,1211.45 1886.76,1211.45 1887.34,1211.45 1887.93,1211.45 1888.51,1211.45 1889.1,1211.45 1889.69,1211.45 1890.27,1211.45 1890.86,1211.45 1891.45,1211.45 1892.03,1211.45 1892.62,1211.45 1893.21,1211.45 1893.79,1211.45 1894.38,1211.45 1894.96,1211.45 1895.55,1211.45 1896.14,1211.45 1896.72,1211.45 1897.31,1211.45 1897.9,1211.45 1898.48,1211.45 1899.07,1211.45 1899.66,1211.45 1900.24,1211.45 1900.83,1211.45 1901.42,1211.45 1902,1211.45 1902.59,1211.45 1903.17,1211.45 1903.76,1211.45 1904.35,1211.45 1904.93,1211.45 1905.52,1211.45 1906.11,1211.45 1906.69,1211.45 1907.28,1211.45 1907.87,1211.45 1908.45,1211.45 1909.04,1211.45 1909.63,1211.45 1910.21,1211.45 1910.8,1211.45 1911.38,1211.45 1911.97,1211.45 1912.56,1211.45 1913.14,1211.45 1913.73,1211.45 1914.32,1211.45 1914.9,1211.45 1915.49,1211.45 1916.08,1211.45 1916.66,1211.45 1917.25,1211.45 1917.83,1211.45 1918.42,1211.45 1919.01,1211.45 1919.59,1211.45 1920.18,1211.45 1920.77,1211.45 1921.35,1211.45 1921.94,1211.45 1922.53,1211.45 1923.11,1211.45 1923.7,1211.45 1924.29,1211.45 1924.87,1211.45 1925.46,1211.45 1926.04,1211.45 1926.63,1211.45 1927.22,1211.45 1927.8,1211.45 1928.39,1211.45 1928.98,1211.45 1929.56,1211.45 1930.15,1211.45 1930.74,1211.45 1931.32,1211.45 1931.91,1211.45 1932.5,1211.45 1933.08,1211.45 1933.67,1211.45 1934.25,1211.45 1934.84,1211.45 1935.43,1211.45 1936.01,1211.45 1936.6,1211.45 1937.19,1211.45 1937.77,1211.45 1938.36,1211.45 1938.95,1211.45 1939.53,1211.45 1940.12,1211.45 1940.71,1211.45 1941.29,1211.45 1941.88,1211.45 1942.46,1211.45 1943.05,1211.45 1943.64,1211.45 1944.22,1211.45 1944.81,1211.45 1945.4,1211.45 1945.98,1211.45 1946.57,1211.45 1947.16,1211.45 1947.74,1211.45 1948.33,1211.45 1948.91,1211.45 1949.5,1211.45 1950.09,1211.45 1950.67,1211.45 1951.26,1211.45 1951.85,1211.45 1952.43,1211.45 1953.02,1211.45 1953.61,1211.45 1954.19,1211.45 1954.78,1211.45 1955.37,1211.45 1955.95,1211.45 1956.54,1211.45 1957.12,1211.45 1957.71,1211.45 1958.3,1211.45 1958.88,1211.45 1959.47,1211.45 1960.06,1211.45 1960.64,1211.45 1961.23,1211.45 1961.82,1211.45 1962.4,1211.45 1962.99,1211.45 1963.58,1211.45 1964.16,1211.45 1964.75,1211.45 1965.33,1211.45 1965.92,1211.45 1966.51,1211.45 1967.09,1211.45 1967.68,1211.45 1968.27,1211.45 1968.85,1211.45 1969.44,1211.45 1970.03,1211.45 1970.61,1211.45 1971.2,1211.45 1971.78,1211.45 1972.37,1211.45 1972.96,1211.45 1973.54,1211.45 1974.13,1211.45 1974.72,1211.45 1975.3,1211.45 1975.89,1211.45 1976.48,1211.45 1977.06,1211.45 1977.65,1211.45 1978.24,1211.45 1978.82,1211.45 1979.41,1211.45 1979.99,1211.45 1980.58,1211.45 1981.17,1211.45 1981.75,1211.45 1982.34,1211.45 1982.93,1211.45 1983.51,1211.45 1984.1,1211.45 1984.69,1211.45 1985.27,1211.45 1985.86,1211.45 1986.45,1211.45 1987.03,1211.45 1987.62,1211.45 1988.2,1211.45 1988.79,1211.45 1989.38,1211.45 1989.96,1211.45 1990.55,1211.45 1991.14,1211.45 1991.72,1211.45 1992.31,1211.45 1992.9,1211.45 1993.48,1211.45 1994.07,1211.45 1994.65,1211.45 1995.24,1211.45 1995.83,1211.45 1996.41,1211.45 1997,1211.45 1997.59,1211.45 1998.17,1211.45 1998.76,1211.45 1999.35,1211.45 1999.93,1211.45 2000.52,1211.45 2001.11,1211.45 2001.69,1211.45 2002.28,1211.45 2002.86,1211.45 2003.45,1211.45 2004.04,1211.45 2004.62,1211.45 2005.21,1211.45 2005.8,1211.45 2006.38,1211.45 2006.97,1211.45 2007.56,1211.45 2008.14,1211.45 2008.73,1211.45 2009.32,1211.45 2009.9,1211.45 2010.49,1211.45 2011.07,1211.45 2011.66,1211.45 2012.25,1211.45 2012.83,1211.45 2013.42,1211.45 2014.01,1211.45 2014.59,1211.45 2015.18,1211.45 2015.77,1211.45 2016.35,1211.45 2016.94,1211.45 2017.53,1211.45 2018.11,1211.45 2018.7,1211.45 2019.28,1211.45 2019.87,1211.45 2020.46,1211.45 2021.04,1211.45 2021.63,1211.45 2022.22,1211.45 2022.8,1211.45 2023.39,1211.45 2023.98,1211.45 2024.56,1211.45 2025.15,1211.45 2025.73,1211.45 2026.32,1211.45 2026.91,1211.45 2027.49,1211.45 2028.08,1211.45 2028.67,1211.45 2029.25,1211.45 2029.84,1211.45 2030.43,1211.45 2031.01,1211.45 2031.6,1211.45 2032.19,1211.45 2032.77,1211.45 2033.36,1211.45 2033.94,1211.45 2034.53,1211.45 2035.12,1211.45 2035.7,1211.45 2036.29,1211.45 2036.88,1211.45 2037.46,1211.45 2038.05,1211.45 2038.64,1211.45 2039.22,1211.45 2039.81,1211.45 2040.4,1211.45 2040.98,1211.45 2041.57,1211.45 2042.15,1211.45 2042.74,1211.45 2043.33,1211.45 2043.91,1211.45 2044.5,1211.45 2045.09,1211.45 2045.67,1211.45 2046.26,1211.45 2046.85,1211.45 2047.43,1211.45 2048.02,1211.45 2048.6,1211.45 2049.19,1211.45 2049.78,1211.45 2050.36,1211.45 2050.95,1211.45 2051.54,1211.45 2052.12,1211.45 2052.71,1211.45 2053.3,1211.45 2053.88,1211.45 2054.47,1211.45 2055.06,1211.45 2055.64,1211.45 2056.23,1211.45 2056.81,1211.45 2057.4,1211.45 2057.99,1211.45 2058.57,1211.45 2059.16,1211.45 2059.75,1211.45 2060.33,1211.45 2060.92,1211.45 2061.51,1211.45 2062.09,1211.45 2062.68,1211.45 2063.27,1211.45 2063.85,1211.45 2064.44,1211.45 2065.02,1211.45 2065.61,1211.45 2066.2,1211.45 2066.78,1211.45 2067.37,1211.45 2067.96,1211.45 2068.54,1211.45 2069.13,1211.45 2069.72,1211.45 2070.3,1211.45 2070.89,1211.45 2071.48,1211.45 2072.06,1211.45 2072.65,1211.45 2073.23,1211.45 2073.82,1211.45 2074.41,1211.45 2074.99,1211.45 2075.58,1211.45 2076.17,1211.45 2076.75,1211.45 2077.34,1211.45 2077.93,1211.45 2078.51,1211.45 2079.1,1211.45 2079.68,1211.45 2080.27,1211.45 2080.86,1211.45 2081.44,1211.45 2082.03,1211.45 2082.62,1211.45 2083.2,1211.45 2083.79,1211.45 2084.38,1211.45 2084.96,1211.45 2085.55,1211.45 2086.14,1211.45 2086.72,1211.45 2087.31,1211.45 2087.89,1211.45 2088.48,1211.45 2089.07,1211.45 2089.65,1211.45 2090.24,1211.45 2090.83,1211.45 2091.41,1211.45 2092,1211.45 2092.59,1211.45 2093.17,1211.45 2093.76,1211.45 2094.35,1211.45 2094.93,1211.45 2095.52,1211.45 2096.1,1211.45 2096.69,1211.45 2097.28,1211.45 2097.86,1211.45 2098.45,1211.45 2099.04,1211.45 2099.62,1211.45 2100.21,1211.45 2100.8,1211.45 2101.38,1211.45 2101.97,1211.45 2102.55,1211.45 2103.14,1211.45 2103.73,1211.45 2104.31,1211.45 2104.9,1211.45 2105.49,1211.45 2106.07,1211.45 2106.66,1211.45 2107.25,1211.45 2107.83,1211.45 2108.42,1211.45 2109.01,1211.45 2109.59,1211.45 2110.18,1211.45 2110.76,1211.45 2111.35,1211.45 2111.94,1211.45 2112.52,1211.45 2113.11,1211.45 2113.7,1211.45 2114.28,1211.45 2114.87,1211.45 2115.46,1211.45 2116.04,1211.45 2116.63,1211.45 2117.22,1211.45 2117.8,1211.45 2118.39,1211.45 2118.97,1211.45 2119.56,1211.45 2120.15,1211.45 2120.73,1211.45 2121.32,1211.45 2121.91,1211.45 2122.49,1211.45 2123.08,1211.45 2123.67,1211.45 2124.25,1211.45 2124.84,1211.45 2125.42,1211.45 2126.01,1211.45 2126.6,1211.45 2127.18,1211.45 2127.77,1211.45 2128.36,1211.45 2128.94,1211.45 2129.53,1211.45 2130.12,1211.45 2130.7,1211.45 2131.29,1211.45 2131.88,1211.45 2132.46,1211.45 2133.05,1211.45 2133.63,1211.45 2134.22,1211.45 2134.81,1211.45 2135.39,1211.45 2135.98,1211.45 2136.57,1211.45 2137.15,1211.45 2137.74,1211.45 2138.33,1211.45 2138.91,1211.45 2139.5,1211.45 2140.09,1211.45 2140.67,1211.45 2141.26,1211.45 2141.84,1211.45 2142.43,1211.45 2143.02,1211.45 2143.6,1211.45 2144.19,1211.45 2144.78,1211.45 2145.36,1211.45 2145.95,1211.45 2146.54,1211.45 2147.12,1211.45 2147.71,1211.45 2148.3,1211.45 2148.88,1211.45 2149.47,1211.45 2150.05,1211.45 2150.64,1211.45 2151.23,1211.45 2151.81,1211.45 2152.4,1211.45 2152.99,1211.45 2153.57,1211.45 2154.16,1211.45 2154.75,1211.45 2155.33,1211.45 2155.92,1211.45 2156.5,1211.45 2157.09,1211.45 2157.68,1211.45 2158.26,1211.45 \"/>\n<path clip-path=\"url(#clip062)\" d=\"M986.025 1211.25 L986.612 1211.25 L987.198 1211.25 L987.785 1211.25 L988.371 1211.25 L988.957 1211.25 L989.544 1211.25 L990.13 1211.25 L990.717 1211.25 L991.303 1211.25 L991.889 1211.25 L992.476 1211.25 L993.062 1211.25 L993.649 1211.25 L994.235 1211.25 L994.822 1211.25 L995.408 1211.25 L995.994 1211.25 L996.581 1211.25 L997.167 1211.25 L997.754 1211.25 L998.34 1211.25 L998.926 1211.25 L999.513 1211.25 L1000.1 1211.25 L1000.69 1211.25 L1001.27 1211.25 L1001.86 1211.25 L1002.44 1211.25 L1003.03 1211.25 L1003.62 1211.25 L1004.2 1211.25 L1004.79 1211.25 L1005.38 1211.25 L1005.96 1211.25 L1006.55 1211.25 L1007.14 1211.25 L1007.72 1211.25 L1008.31 1211.25 L1008.9 1211.25 L1009.48 1211.25 L1010.07 1211.25 L1010.65 1211.25 L1011.24 1211.25 L1011.83 1211.25 L1012.41 1211.25 L1013 1211.25 L1013.59 1211.25 L1014.17 1211.25 L1014.76 1211.25 L1015.35 1211.25 L1015.93 1211.25 L1016.52 1211.25 L1017.11 1211.25 L1017.69 1211.25 L1018.28 1211.25 L1018.86 1211.25 L1019.45 1211.25 L1020.04 1211.25 L1020.62 1211.25 L1021.21 1211.25 L1021.8 1211.25 L1022.38 1211.25 L1022.97 1211.25 L1023.56 1211.25 L1024.14 1211.25 L1024.73 1211.25 L1025.32 1211.25 L1025.9 1211.25 L1026.49 1211.25 L1027.07 1211.25 L1027.66 1211.25 L1028.25 1211.25 L1028.83 1211.25 L1029.42 1211.25 L1030.01 1211.25 L1030.59 1211.25 L1031.18 1211.25 L1031.77 1211.25 L1032.35 1211.25 L1032.94 1211.25 L1033.52 1211.25 L1034.11 1211.25 L1034.7 1211.25 L1035.28 1211.25 L1035.87 1211.25 L1036.46 1211.25 L1037.04 1211.25 L1037.63 1211.25 L1038.22 1211.25 L1038.8 1211.25 L1039.39 1211.25 L1039.98 1211.25 L1040.56 1211.25 L1041.15 1211.25 L1041.73 1211.25 L1042.32 1211.25 L1042.91 1211.25 L1043.49 1211.25 L1044.08 1211.25 L1044.67 1211.25 L1045.25 1211.25 L1045.84 1211.25 L1046.43 1211.25 L1047.01 1211.25 L1047.6 1211.25 L1048.19 1211.25 L1048.77 1211.25 L1049.36 1211.25 L1049.94 1211.25 L1050.53 1211.25 L1051.12 1211.25 L1051.7 1211.25 L1052.29 1211.25 L1052.88 1211.25 L1053.46 1211.25 L1054.05 1211.25 L1054.64 1211.25 L1055.22 1211.25 L1055.81 1211.25 L1056.39 1211.25 L1056.98 1211.25 L1057.57 1211.25 L1058.15 1211.25 L1058.74 1211.25 L1059.33 1211.25 L1059.91 1211.25 L1060.5 1211.25 L1061.09 1211.25 L1061.67 1211.25 L1062.26 1211.25 L1062.85 1211.25 L1063.43 1211.25 L1064.02 1211.25 L1064.6 1211.25 L1065.19 1211.25 L1065.78 1211.25 L1066.36 1211.25 L1066.95 1211.25 L1067.54 1211.25 L1068.12 1211.25 L1068.71 1211.25 L1069.3 1211.25 L1069.88 1211.25 L1070.47 1211.25 L1071.06 1211.25 L1071.64 1211.25 L1072.23 1211.25 L1072.81 1211.25 L1073.4 1211.25 L1073.99 1211.25 L1074.57 1211.25 L1075.16 1211.25 L1075.75 1211.25 L1076.33 1211.25 L1076.92 1211.25 L1077.51 1211.25 L1078.09 1211.25 L1078.68 1211.25 L1079.26 1211.25 L1079.85 1211.25 L1080.44 1211.25 L1081.02 1211.25 L1081.61 1211.25 L1082.2 1211.25 L1082.78 1211.25 L1083.37 1211.25 L1083.96 1211.25 L1084.54 1211.25 L1085.13 1211.25 L1085.72 1211.25 L1086.3 1211.25 L1086.89 1211.25 L1087.47 1211.25 L1088.06 1211.25 L1088.65 1211.25 L1089.23 1211.25 L1089.82 1211.25 L1090.41 1211.25 L1090.99 1211.25 L1091.58 1211.25 L1092.17 1211.25 L1092.75 1211.25 L1093.34 1211.25 L1093.93 1211.25 L1094.51 1211.25 L1095.1 1211.25 L1095.68 1211.25 L1096.27 1211.25 L1096.86 1211.25 L1097.44 1211.25 L1098.03 1211.25 L1098.62 1211.25 L1099.2 1211.25 L1099.79 1211.25 L1100.38 1211.25 L1100.96 1211.25 L1101.55 1211.25 L1102.14 1211.25 L1102.72 1211.25 L1103.31 1211.25 L1103.89 1211.25 L1104.48 1211.25 L1105.07 1211.25 L1105.65 1211.25 L1106.24 1211.25 L1106.83 1211.25 L1107.41 1211.25 L1108 1211.25 L1108.59 1211.25 L1109.17 1211.25 L1109.76 1211.25 L1110.34 1211.25 L1110.93 1211.25 L1111.52 1211.25 L1112.1 1211.25 L1112.69 1211.25 L1113.28 1211.25 L1113.86 1211.25 L1114.45 1211.25 L1115.04 1211.25 L1115.62 1211.25 L1116.21 1211.25 L1116.8 1211.25 L1117.38 1211.25 L1117.97 1211.25 L1118.55 1211.25 L1119.14 1211.25 L1119.73 1211.25 L1120.31 1211.25 L1120.9 1211.25 L1121.49 1211.25 L1122.07 1211.25 L1122.66 1211.25 L1123.25 1211.25 L1123.83 1211.25 L1124.42 1211.25 L1125.01 1211.25 L1125.59 1211.25 L1126.18 1211.25 L1126.76 1211.25 L1127.35 1211.25 L1127.94 1211.25 L1128.52 1211.25 L1129.11 1211.25 L1129.7 1211.25 L1130.28 1211.25 L1130.87 1211.25 L1131.46 1211.25 L1132.04 1211.25 L1132.63 1211.25 L1133.21 1211.25 L1133.8 1211.25 L1134.39 1211.25 L1134.97 1211.25 L1135.56 1211.25 L1136.15 1211.25 L1136.73 1211.25 L1137.32 1211.25 L1137.91 1211.25 L1138.49 1211.25 L1139.08 1211.25 L1139.67 1211.25 L1140.25 1211.25 L1140.84 1211.25 L1141.42 1211.25 L1142.01 1211.25 L1142.6 1211.25 L1143.18 1211.25 L1143.77 1211.25 L1144.36 1211.25 L1144.94 1211.25 L1145.53 1211.25 L1146.12 1211.25 L1146.7 1211.25 L1147.29 1211.25 L1147.88 1211.25 L1148.46 1211.25 L1149.05 1211.25 L1149.63 1211.25 L1150.22 1211.25 L1150.81 1211.25 L1151.39 1211.25 L1151.98 1211.25 L1152.57 1211.25 L1153.15 1211.25 L1153.74 1211.25 L1154.33 1211.25 L1154.91 1211.25 L1155.5 1211.25 L1156.09 1211.25 L1156.67 1211.25 L1157.26 1211.25 L1157.84 1211.25 L1158.43 1211.25 L1159.02 1211.25 L1159.6 1211.25 L1160.19 1211.25 L1160.78 1211.25 L1161.36 1211.25 L1161.95 1211.25 L1162.54 1211.25 L1163.12 1211.25 L1163.71 1211.25 L1164.29 1211.25 L1164.88 1211.25 L1165.47 1211.25 L1166.05 1211.25 L1166.64 1211.25 L1167.23 1211.25 L1167.81 1211.25 L1168.4 1211.25 L1168.99 1211.25 L1169.57 1211.25 L1170.16 1211.25 L1170.75 1211.25 L1171.33 1211.25 L1171.92 1211.25 L1172.5 1211.25 L1173.09 1211.25 L1173.68 1211.25 L1174.26 1211.25 L1174.85 1211.25 L1175.44 1211.25 L1176.02 1211.25 L1176.61 1211.25 L1177.2 1211.25 L1177.78 1211.25 L1178.37 1211.25 L1178.96 1211.25 L1179.54 1211.25 L1180.13 1211.25 L1180.71 1211.25 L1181.3 1211.25 L1181.89 1211.25 L1182.47 1211.25 L1183.06 1211.25 L1183.65 1211.25 L1184.23 1211.25 L1184.82 1211.25 L1185.41 1211.25 L1185.99 1211.25 L1186.58 1211.25 L1187.16 1211.25 L1187.75 1211.25 L1188.34 1211.25 L1188.92 1211.25 L1189.51 1211.25 L1190.1 1211.25 L1190.68 1211.25 L1191.27 1211.25 L1191.86 1211.25 L1192.44 1211.25 L1193.03 1211.25 L1193.62 1211.25 L1194.2 1211.25 L1194.79 1211.25 L1195.37 1211.25 L1195.96 1211.25 L1196.55 1211.25 L1197.13 1211.25 L1197.72 1211.25 L1198.31 1211.25 L1198.89 1211.25 L1199.48 1211.25 L1200.07 1211.25 L1200.65 1211.25 L1201.24 1211.25 L1201.83 1211.25 L1202.41 1211.25 L1203 1211.25 L1203.58 1211.25 L1204.17 1211.25 L1204.76 1211.25 L1205.34 1211.25 L1205.93 1211.25 L1206.52 1211.25 L1207.1 1211.25 L1207.69 1211.25 L1208.28 1211.25 L1208.86 1211.25 L1209.45 1211.25 L1210.03 1211.25 L1210.62 1211.25 L1211.21 1211.25 L1211.79 1211.25 L1212.38 1211.25 L1212.97 1211.25 L1213.55 1211.25 L1214.14 1211.25 L1214.73 1211.25 L1215.31 1211.25 L1215.9 1211.25 L1216.49 1211.25 L1217.07 1211.25 L1217.66 1211.25 L1218.24 1211.25 L1218.83 1211.25 L1219.42 1211.25 L1220 1211.25 L1220.59 1211.25 L1221.18 1211.25 L1221.76 1211.25 L1222.35 1211.25 L1222.94 1211.25 L1223.52 1211.25 L1224.11 1211.25 L1224.7 1211.25 L1225.28 1211.25 L1225.87 1211.25 L1226.45 1211.25 L1227.04 1211.25 L1227.63 1211.25 L1228.21 1211.25 L1228.8 1211.25 L1229.39 1211.25 L1229.97 1211.25 L1230.56 1211.25 L1231.15 1211.25 L1231.73 1211.25 L1232.32 1211.25 L1232.91 1211.25 L1233.49 1211.25 L1234.08 1211.25 L1234.66 1211.25 L1235.25 1211.25 L1235.84 1211.25 L1236.42 1211.25 L1237.01 1211.25 L1237.6 1211.25 L1238.18 1211.25 L1238.77 1211.25 L1239.36 1211.25 L1239.94 1211.25 L1240.53 1211.25 L1241.11 1211.25 L1241.7 1211.25 L1242.29 1211.25 L1242.87 1211.25 L1243.46 1211.25 L1244.05 1211.25 L1244.63 1211.25 L1245.22 1211.25 L1245.81 1211.25 L1246.39 1211.25 L1246.98 1211.25 L1247.57 1211.25 L1248.15 1211.25 L1248.74 1211.25 L1249.32 1211.25 L1249.91 1211.25 L1250.5 1211.25 L1251.08 1211.25 L1251.67 1211.25 L1252.26 1211.25 L1252.84 1211.25 L1253.43 1211.25 L1254.02 1211.25 L1254.6 1211.25 L1255.19 1211.25 L1255.78 1211.25 L1256.36 1211.25 L1256.95 1211.25 L1257.53 1211.25 L1258.12 1211.25 L1258.71 1211.25 L1259.29 1211.25 L1259.88 1211.25 L1260.47 1211.25 L1261.05 1211.25 L1261.64 1211.25 L1262.23 1211.25 L1262.81 1211.25 L1263.4 1211.25 L1263.98 1211.25 L1264.57 1211.25 L1265.16 1211.25 L1265.74 1211.25 L1266.33 1211.25 L1266.92 1211.25 L1267.5 1211.25 L1268.09 1211.25 L1268.68 1211.25 L1269.26 1211.25 L1269.85 1211.25 L1270.44 1211.25 L1271.02 1211.25 L1271.61 1211.25 L1272.19 1211.25 L1272.78 1211.25 L1273.37 1211.25 L1273.95 1211.25 L1274.54 1211.25 L1275.13 1211.25 L1275.71 1211.25 L1276.3 1211.25 L1276.89 1211.25 L1277.47 1211.25 L1278.06 1211.25 L1278.65 1211.25 L1279.23 1211.25 L1279.82 1211.25 L1280.4 1211.25 L1280.99 1211.25 L1281.58 1211.25 L1282.16 1211.25 L1282.75 1211.25 L1283.34 1211.25 L1283.92 1211.25 L1284.51 1211.25 L1285.1 1211.25 L1285.68 1211.25 L1286.27 1211.25 L1286.86 1211.25 L1287.44 1211.25 L1288.03 1211.25 L1288.61 1211.25 L1289.2 1211.25 L1289.79 1211.25 L1290.37 1211.25 L1290.96 1211.25 L1291.55 1211.25 L1292.13 1211.25 L1292.72 1211.25 L1293.31 1211.25 L1293.89 1211.25 L1294.48 1211.25 L1295.06 1211.25 L1295.65 1211.25 L1296.24 1211.25 L1296.82 1211.25 L1297.41 1211.25 L1298 1211.25 L1298.58 1211.25 L1299.17 1211.25 L1299.76 1211.25 L1300.34 1211.25 L1300.93 1211.25 L1301.52 1211.25 L1302.1 1211.25 L1302.69 1211.25 L1303.27 1211.25 L1303.86 1211.25 L1304.45 1211.25 L1305.03 1211.25 L1305.62 1211.25 L1306.21 1211.25 L1306.79 1211.25 L1307.38 1211.25 L1307.97 1211.25 L1308.55 1211.25 L1309.14 1211.25 L1309.73 1211.25 L1310.31 1211.25 L1310.9 1211.25 L1311.48 1211.25 L1312.07 1211.25 L1312.66 1211.25 L1313.24 1211.25 L1313.83 1211.25 L1314.42 1211.25 L1315 1211.25 L1315.59 1211.25 L1316.18 1211.25 L1316.76 1211.25 L1317.35 1211.25 L1317.93 1211.25 L1318.52 1211.25 L1319.11 1211.25 L1319.69 1211.25 L1320.28 1211.25 L1320.87 1211.25 L1321.45 1211.25 L1322.04 1211.25 L1322.63 1211.25 L1323.21 1211.25 L1323.8 1211.25 L1324.39 1211.25 L1324.97 1211.25 L1325.56 1211.25 L1326.14 1211.25 L1326.73 1211.25 L1327.32 1211.25 L1327.9 1211.25 L1328.49 1211.25 L1329.08 1211.25 L1329.66 1211.25 L1330.25 1211.25 L1330.84 1211.25 L1331.42 1211.25 L1332.01 1211.25 L1332.6 1211.25 L1333.18 1211.25 L1333.77 1211.25 L1334.35 1211.25 L1334.94 1211.25 L1335.53 1211.25 L1336.11 1211.25 L1336.7 1211.25 L1337.29 1211.25 L1337.87 1211.25 L1338.46 1211.25 L1339.05 1211.25 L1339.63 1211.25 L1340.22 1211.25 L1340.8 1211.25 L1341.39 1211.25 L1341.98 1211.25 L1342.56 1211.25 L1343.15 1211.25 L1343.74 1211.25 L1344.32 1211.25 L1344.91 1211.25 L1345.5 1211.25 L1346.08 1211.25 L1346.67 1211.25 L1347.26 1211.25 L1347.84 1211.25 L1348.43 1211.25 L1349.01 1211.25 L1349.6 1211.25 L1350.19 1211.25 L1350.77 1211.25 L1351.36 1211.25 L1351.95 1211.25 L1352.53 1211.25 L1353.12 1211.25 L1353.71 1211.25 L1354.29 1211.25 L1354.88 1211.25 L1355.47 1211.25 L1356.05 1211.25 L1356.64 1211.25 L1357.22 1211.25 L1357.81 1211.25 L1358.4 1211.25 L1358.98 1211.25 L1359.57 1211.25 L1360.16 1211.25 L1360.74 1211.25 L1361.33 1211.25 L1361.92 1211.25 L1362.5 1211.25 L1363.09 1211.25 L1363.68 1211.25 L1364.26 1211.25 L1364.85 1211.25 L1365.43 1211.25 L1366.02 1211.25 L1366.61 1211.25 L1367.19 1211.25 L1367.78 1211.25 L1368.37 1211.25 L1368.95 1211.25 L1369.54 1211.25 L1370.13 1211.25 L1370.71 1211.25 L1371.3 1211.25 L1371.88 1211.25 L1372.47 1211.25 L1373.06 1211.25 L1373.64 1211.25 L1374.23 1211.25 L1374.82 1211.25 L1375.4 1211.25 L1375.99 1211.25 L1376.58 1211.25 L1377.16 1211.25 L1377.75 1211.25 L1378.34 1211.25 L1378.92 1211.25 L1379.51 1211.25 L1380.09 1211.25 L1380.68 1211.25 L1381.27 1211.25 L1381.85 1211.25 L1382.44 1211.25 L1383.03 1211.25 L1383.61 1211.25 L1384.2 1211.25 L1384.79 1211.25 L1385.37 1211.25 L1385.96 1211.25 L1386.55 1211.25 L1387.13 1211.25 L1387.72 1211.25 L1388.3 1211.25 L1388.89 1211.25 L1389.48 1211.25 L1390.06 1211.25 L1390.65 1211.25 L1391.24 1211.25 L1391.82 1211.25 L1392.41 1211.25 L1393 1211.25 L1393.58 1211.25 L1394.17 1211.25 L1394.75 1211.25 L1395.34 1211.25 L1395.93 1211.25 L1396.51 1211.25 L1397.1 1211.25 L1397.69 1211.25 L1398.27 1211.25 L1398.86 1211.25 L1399.45 1211.25 L1400.03 1211.25 L1400.62 1211.25 L1401.21 1211.25 L1401.79 1211.25 L1402.38 1211.25 L1402.96 1211.25 L1403.55 1211.25 L1404.14 1211.25 L1404.72 1211.25 L1405.31 1211.25 L1405.9 1211.25 L1406.48 1211.25 L1407.07 1211.25 L1407.66 1211.25 L1408.24 1211.25 L1408.83 1211.25 L1409.42 1211.25 L1410 1211.25 L1410.59 1211.25 L1411.17 1211.25 L1411.76 1211.25 L1412.35 1211.25 L1412.93 1211.25 L1413.52 1211.25 L1414.11 1211.25 L1414.69 1211.25 L1415.28 1211.25 L1415.87 1211.25 L1416.45 1211.25 L1417.04 1211.25 L1417.63 1211.25 L1418.21 1211.25 L1418.8 1211.25 L1419.38 1211.25 L1419.97 1211.25 L1420.56 1211.25 L1421.14 1211.25 L1421.73 1211.25 L1422.32 1211.25 L1422.9 1211.25 L1423.49 1211.25 L1424.08 1211.25 L1424.66 1211.25 L1425.25 1211.25 L1425.83 1211.25 L1426.42 1211.25 L1427.01 1211.25 L1427.59 1211.25 L1428.18 1211.25 L1428.77 1211.25 L1429.35 1211.25 L1429.94 1211.25 L1430.53 1211.25 L1431.11 1211.25 L1431.7 1211.25 L1432.29 1211.25 L1432.87 1211.25 L1433.46 1211.25 L1434.04 1211.25 L1434.63 1211.25 L1435.22 1211.25 L1435.8 1211.25 L1436.39 1211.25 L1436.98 1211.25 L1437.56 1211.25 L1438.15 1211.25 L1438.74 1211.25 L1439.32 1211.25 L1439.91 1211.25 L1440.5 1211.25 L1441.08 1211.25 L1441.67 1211.25 L1442.25 1211.25 L1442.84 1211.25 L1443.43 1211.25 L1444.01 1211.25 L1444.6 1211.25 L1445.19 1211.25 L1445.77 1211.25 L1446.36 1211.25 L1446.95 1211.25 L1447.53 1211.25 L1448.12 1211.25 L1448.7 1211.25 L1449.29 1211.25 L1449.88 1211.25 L1450.46 1211.25 L1451.05 1211.25 L1451.64 1211.25 L1452.22 1211.25 L1452.81 1211.25 L1453.4 1211.25 L1453.98 1211.25 L1454.57 1211.25 L1455.16 1211.25 L1455.74 1211.25 L1456.33 1211.25 L1456.91 1211.25 L1457.5 1211.25 L1458.09 1211.25 L1458.67 1211.25 L1459.26 1211.25 L1459.85 1211.25 L1460.43 1211.25 L1461.02 1211.25 L1461.61 1211.25 L1462.19 1211.25 L1462.78 1211.25 L1463.37 1211.25 L1463.95 1211.25 L1464.54 1211.25 L1465.12 1211.25 L1465.71 1211.25 L1466.3 1211.25 L1466.88 1211.25 L1467.47 1211.25 L1468.06 1211.25 L1468.64 1211.25 L1469.23 1211.25 L1469.82 1211.25 L1470.4 1211.25 L1470.99 1211.25 L1471.57 1211.25 L1472.16 1211.25 L1472.75 1211.25 L1473.33 1211.25 L1473.92 1211.25 L1474.51 1211.25 L1475.09 1211.25 L1475.68 1211.25 L1476.27 1211.25 L1476.85 1211.25 L1477.44 1211.25 L1478.03 1211.25 L1478.61 1211.25 L1479.2 1211.25 L1479.78 1211.25 L1480.37 1211.25 L1480.96 1211.25 L1481.54 1211.25 L1482.13 1211.25 L1482.72 1211.25 L1483.3 1211.25 L1483.89 1211.25 L1484.48 1211.25 L1485.06 1211.25 L1485.65 1211.25 L1486.24 1211.25 L1486.82 1211.25 L1487.41 1211.25 L1487.99 1211.25 L1488.58 1211.25 L1489.17 1211.25 L1489.75 1211.25 L1490.34 1211.25 L1490.93 1211.25 L1491.51 1211.25 L1492.1 1211.25 L1492.69 1211.25 L1493.27 1211.25 L1493.86 1211.25 L1494.45 1211.25 L1495.03 1211.25 L1495.62 1211.25 L1496.2 1211.25 L1496.79 1211.25 L1497.38 1211.25 L1497.96 1211.25 L1498.55 1211.25 L1499.14 1211.25 L1499.72 1211.25 L1500.31 1211.25 L1500.9 1211.25 L1501.48 1211.25 L1502.07 1211.25 L1502.65 1211.25 L1503.24 1211.25 L1503.83 1211.25 L1504.41 1211.25 L1505 1211.25 L1505.59 1211.25 L1506.17 1211.25 L1506.76 1211.25 L1507.35 1211.25 L1507.93 1211.25 L1508.52 1211.25 L1509.11 1211.25 L1509.69 1211.25 L1510.28 1211.25 L1510.86 1211.25 L1511.45 1211.25 L1512.04 1211.25 L1512.62 1211.25 L1513.21 1211.25 L1513.8 1211.25 L1514.38 1211.25 L1514.97 1211.25 L1515.56 1211.25 L1516.14 1211.25 L1516.73 1211.25 L1517.32 1211.25 L1517.9 1211.25 L1518.49 1211.25 L1519.07 1211.25 L1519.66 1211.25 L1520.25 1211.25 L1520.83 1211.25 L1521.42 1211.25 L1522.01 1211.25 L1522.59 1211.25 L1523.18 1211.25 L1523.77 1211.25 L1524.35 1211.25 L1524.94 1211.25 L1525.52 1211.25 L1526.11 1211.25 L1526.7 1211.25 L1527.28 1211.25 L1527.87 1211.25 L1528.46 1211.25 L1529.04 1211.25 L1529.63 1211.25 L1530.22 1211.25 L1530.8 1211.25 L1531.39 1211.25 L1531.98 1211.25 L1532.56 1211.25 L1533.15 1211.25 L1533.73 1211.25 L1534.32 1211.25 L1534.91 1211.25 L1535.49 1211.25 L1536.08 1211.25 L1536.67 1211.25 L1537.25 1211.25 L1537.84 1211.25 L1538.43 1211.25 L1539.01 1211.25 L1539.6 1211.25 L1540.19 1211.25 L1540.77 1211.25 L1541.36 1211.25 L1541.94 1211.25 L1542.53 1211.25 L1543.12 1211.25 L1543.7 1211.25 L1544.29 1211.25 L1544.88 1211.25 L1545.46 1211.25 L1546.05 1211.25 L1546.64 1211.25 L1547.22 1211.25 L1547.81 1211.25 L1548.4 1211.25 L1548.98 1211.25 L1549.57 1211.25 L1550.15 1211.25 L1550.74 1211.25 L1551.33 1211.25 L1551.91 1211.25 L1552.5 1211.25 L1553.09 1211.25 L1553.67 1211.25 L1554.26 1211.25 L1554.85 1211.25 L1555.43 1211.25 L1556.02 1211.25 L1556.6 1211.25 L1557.19 1211.25 L1557.78 1211.25 L1558.36 1211.25 L1558.95 1211.25 L1559.54 1211.25 L1560.12 1211.25 L1560.71 1211.25 L1561.3 1211.25 L1561.88 1211.25 L1562.47 1211.25 L1563.06 1211.25 L1563.64 1211.25 L1564.23 1211.25 L1564.81 1211.25 L1565.4 1211.25 L1565.99 1211.25 L1566.57 1211.25 L1567.16 1211.25 L1567.75 1211.25 L1568.33 1211.25 L1568.92 1211.25 L1569.51 1211.25 L1570.09 1211.25 L1570.68 1211.25 L1571.27 1211.25 L1571.85 1211.25 L1572.44 1211.25 L1573.02 1211.25 L1573.61 1211.25 L1574.2 1211.25 L1574.78 1211.25 L1575.37 1211.25 L1575.96 1211.25 L1576.54 1211.25 L1577.13 1211.25 L1577.72 1211.25 L1578.3 1211.25 L1578.89 1211.25 L1579.47 1211.25 L1580.06 1211.25 L1580.65 1211.25 L1581.23 1211.25 L1581.82 1211.25 L1582.41 1211.25 L1582.99 1211.25 L1583.58 1211.25 L1584.17 1211.25 L1584.75 1211.25 L1585.34 1211.25 L1585.93 1211.25 L1586.51 1211.25 L1587.1 1211.25 L1587.68 1211.25 L1588.27 1211.25 L1588.86 1211.25 L1589.44 1211.25 L1590.03 1211.25 L1590.62 1211.25 L1591.2 1211.25 L1591.79 1211.25 L1592.38 1211.25 L1592.96 1211.25 L1593.55 1211.25 L1594.14 1211.25 L1594.72 1211.25 L1595.31 1211.25 L1595.89 1211.25 L1596.48 1211.25 L1597.07 1211.25 L1597.65 1211.25 L1598.24 1211.25 L1598.83 1211.25 L1599.41 1211.25 L1600 1211.25 L1600.59 1211.25 L1601.17 1211.25 L1601.76 1211.25 L1602.34 1211.25 L1602.93 1211.25 L1603.52 1211.25 L1604.1 1211.25 L1604.69 1211.25 L1605.28 1211.25 L1605.86 1211.25 L1606.45 1211.25 L1607.04 1211.25 L1607.62 1211.25 L1608.21 1211.25 L1608.8 1211.25 L1609.38 1211.25 L1609.97 1211.25 L1610.55 1211.25 L1611.14 1211.25 L1611.73 1211.25 L1612.31 1211.25 L1612.9 1211.25 L1613.49 1211.25 L1614.07 1211.25 L1614.66 1211.25 L1615.25 1211.25 L1615.83 1211.25 L1616.42 1211.25 L1617.01 1211.25 L1617.59 1211.25 L1618.18 1211.25 L1618.76 1211.25 L1619.35 1211.25 L1619.94 1211.25 L1620.52 1211.25 L1621.11 1211.25 L1621.7 1211.25 L1622.28 1211.25 L1622.87 1211.25 L1623.46 1211.25 L1624.04 1211.25 L1624.63 1211.25 L1625.22 1211.25 L1625.8 1211.25 L1626.39 1211.25 L1626.97 1211.25 L1627.56 1211.25 L1628.15 1211.25 L1628.73 1211.25 L1629.32 1211.25 L1629.91 1211.25 L1630.49 1211.25 L1631.08 1211.25 L1631.67 1211.25 L1632.25 1211.25 L1632.84 1211.25 L1633.42 1211.25 L1634.01 1211.25 L1634.6 1211.25 L1635.18 1211.25 L1635.77 1211.25 L1636.36 1211.25 L1636.94 1211.25 L1637.53 1211.25 L1638.12 1211.25 L1638.7 1211.25 L1639.29 1211.25 L1639.88 1211.25 L1640.46 1211.25 L1641.05 1211.25 L1641.63 1211.25 L1642.22 1211.25 L1642.81 1211.25 L1643.39 1211.25 L1643.98 1211.25 L1644.57 1211.25 L1645.15 1211.25 L1645.74 1211.25 L1646.33 1211.25 L1646.91 1211.25 L1647.5 1211.25 L1648.09 1211.25 L1648.67 1211.25 L1649.26 1211.25 L1649.84 1211.25 L1650.43 1211.25 L1651.02 1211.25 L1651.6 1211.25 L1652.19 1211.25 L1652.78 1211.25 L1653.36 1211.25 L1653.95 1211.25 L1654.54 1211.25 L1655.12 1211.25 L1655.71 1211.25 L1656.29 1211.25 L1656.88 1211.25 L1657.47 1211.25 L1658.05 1211.25 L1658.64 1211.25 L1659.23 1211.25 L1659.81 1211.25 L1660.4 1211.25 L1660.99 1211.25 L1661.57 1211.25 L1662.16 1211.25 L1662.75 1211.25 L1663.33 1211.25 L1663.92 1211.25 L1664.5 1211.25 L1665.09 1211.25 L1665.68 1211.25 L1666.26 1211.25 L1666.85 1211.25 L1667.44 1211.25 L1668.02 1211.25 L1668.61 1211.25 L1669.2 1211.25 L1669.78 1211.25 L1670.37 1211.25 L1670.96 1211.25 L1671.54 1211.25 L1672.13 1211.25 L1672.71 1211.25 L1673.3 1211.25 L1673.89 1211.25 L1674.47 1211.25 L1675.06 1211.25 L1675.65 1211.25 L1676.23 1211.25 L1676.82 1211.25 L1677.41 1211.25 L1677.99 1211.25 L1678.58 1211.25 L1679.17 1211.25 L1679.75 1211.25 L1680.34 1211.25 L1680.92 1211.25 L1681.51 1211.25 L1682.1 1211.25 L1682.68 1211.25 L1683.27 1211.25 L1683.86 1211.25 L1684.44 1211.25 L1685.03 1211.25 L1685.62 1211.25 L1686.2 1211.25 L1686.79 1211.25 L1687.37 1211.25 L1687.96 1211.25 L1688.55 1211.25 L1689.13 1211.25 L1689.72 1211.25 L1690.31 1211.25 L1690.89 1211.25 L1691.48 1211.25 L1692.07 1211.25 L1692.65 1211.25 L1693.24 1211.25 L1693.83 1211.25 L1694.41 1211.25 L1695 1211.25 L1695.58 1211.25 L1696.17 1211.25 L1696.76 1211.25 L1697.34 1211.25 L1697.93 1211.25 L1698.52 1211.25 L1699.1 1211.25 L1699.69 1211.25 L1700.28 1211.25 L1700.86 1211.25 L1701.45 1211.25 L1702.04 1211.25 L1702.62 1211.25 L1703.21 1211.25 L1703.79 1211.25 L1704.38 1211.25 L1704.97 1211.25 L1705.55 1211.25 L1706.14 1211.25 L1706.73 1211.25 L1707.31 1211.25 L1707.9 1211.25 L1708.49 1211.25 L1709.07 1211.25 L1709.66 1211.25 L1710.24 1211.25 L1710.83 1211.25 L1711.42 1211.25 L1712 1211.25 L1712.59 1211.25 L1713.18 1211.25 L1713.76 1211.25 L1714.35 1211.25 L1714.94 1211.25 L1715.52 1211.25 L1716.11 1211.25 L1716.7 1211.25 L1717.28 1211.25 L1717.87 1211.25 L1718.45 1211.25 L1719.04 1211.25 L1719.63 1211.25 L1720.21 1211.25 L1720.8 1211.25 L1721.39 1211.25 L1721.97 1211.25 L1722.56 1211.25 L1723.15 1211.25 L1723.73 1211.25 L1724.32 1211.25 L1724.91 1211.25 L1725.49 1211.25 L1726.08 1211.25 L1726.66 1211.25 L1727.25 1211.25 L1727.84 1211.25 L1728.42 1211.25 L1729.01 1211.25 L1729.6 1211.25 L1730.18 1211.25 L1730.77 1211.25 L1731.36 1211.25 L1731.94 1211.25 L1732.53 1211.25 L1733.11 1211.25 L1733.7 1211.25 L1734.29 1211.25 L1734.87 1211.25 L1735.46 1211.25 L1736.05 1211.25 L1736.63 1211.25 L1737.22 1211.25 L1737.81 1211.25 L1738.39 1211.25 L1738.98 1211.25 L1739.57 1211.25 L1740.15 1211.25 L1740.74 1211.25 L1741.32 1211.25 L1741.91 1211.25 L1742.5 1211.25 L1743.08 1211.25 L1743.67 1211.25 L1744.26 1211.25 L1744.84 1211.25 L1745.43 1211.25 L1746.02 1211.25 L1746.6 1211.25 L1747.19 1211.25 L1747.78 1211.25 L1748.36 1211.25 L1748.95 1211.25 L1749.53 1211.25 L1750.12 1211.25 L1750.71 1211.25 L1751.29 1211.25 L1751.88 1211.25 L1752.47 1211.25 L1753.05 1211.25 L1753.64 1211.25 L1754.23 1211.25 L1754.81 1211.25 L1755.4 1211.25 L1755.99 1211.25 L1756.57 1211.25 L1757.16 1211.25 L1757.74 1211.25 L1758.33 1211.25 L1758.92 1211.25 L1759.5 1211.25 L1760.09 1211.25 L1760.68 1211.25 L1761.26 1211.25 L1761.85 1211.25 L1762.44 1211.25 L1763.02 1211.25 L1763.61 1211.25 L1764.19 1211.25 L1764.78 1211.25 L1765.37 1211.25 L1765.95 1211.25 L1766.54 1211.25 L1767.13 1211.25 L1767.71 1211.25 L1768.3 1211.25 L1768.89 1211.25 L1769.47 1211.25 L1770.06 1211.25 L1770.65 1211.25 L1771.23 1211.25 L1771.82 1211.25 L1772.4 1211.25 L1772.99 1211.25 L1773.58 1211.25 L1774.16 1211.25 L1774.75 1211.25 L1775.34 1211.25 L1775.92 1211.25 L1776.51 1211.25 L1777.1 1211.25 L1777.68 1211.25 L1778.27 1211.25 L1778.86 1211.25 L1779.44 1211.25 L1780.03 1211.25 L1780.61 1211.25 L1781.2 1211.25 L1781.79 1211.25 L1782.37 1211.25 L1782.96 1211.25 L1783.55 1211.25 L1784.13 1211.25 L1784.72 1211.25 L1785.31 1211.25 L1785.89 1211.25 L1786.48 1211.25 L1787.06 1211.25 L1787.65 1211.25 L1788.24 1211.25 L1788.82 1211.25 L1789.41 1211.25 L1790 1211.25 L1790.58 1211.25 L1791.17 1211.25 L1791.76 1211.25 L1792.34 1211.25 L1792.93 1211.25 L1793.52 1211.25 L1794.1 1211.25 L1794.69 1211.25 L1795.27 1211.25 L1795.86 1211.25 L1796.45 1211.25 L1797.03 1211.25 L1797.62 1211.25 L1798.21 1211.25 L1798.79 1211.25 L1799.38 1211.25 L1799.97 1211.25 L1800.55 1211.25 L1801.14 1211.25 L1801.73 1211.25 L1802.31 1211.25 L1802.9 1211.25 L1803.48 1211.25 L1804.07 1211.25 L1804.66 1211.25 L1805.24 1211.25 L1805.83 1211.25 L1806.42 1211.25 L1807 1211.25 L1807.59 1211.25 L1808.18 1211.25 L1808.76 1211.25 L1809.35 1211.25 L1809.94 1211.25 L1810.52 1211.25 L1811.11 1211.25 L1811.69 1211.25 L1812.28 1211.25 L1812.87 1211.25 L1813.45 1211.25 L1814.04 1211.25 L1814.63 1211.25 L1815.21 1211.25 L1815.8 1211.25 L1816.39 1211.25 L1816.97 1211.25 L1817.56 1211.25 L1818.14 1211.25 L1818.73 1211.25 L1819.32 1211.25 L1819.9 1211.25 L1820.49 1211.25 L1821.08 1211.25 L1821.66 1211.25 L1822.25 1211.25 L1822.84 1211.25 L1823.42 1211.25 L1824.01 1211.25 L1824.6 1211.25 L1825.18 1211.25 L1825.77 1211.25 L1826.35 1211.25 L1826.94 1211.25 L1827.53 1211.25 L1828.11 1211.25 L1828.7 1211.25 L1829.29 1211.25 L1829.87 1211.25 L1830.46 1211.25 L1831.05 1211.25 L1831.63 1211.25 L1832.22 1211.25 L1832.81 1211.25 L1833.39 1211.25 L1833.98 1211.25 L1834.56 1211.25 L1835.15 1211.25 L1835.74 1211.25 L1836.32 1211.25 L1836.91 1211.25 L1837.5 1211.25 L1838.08 1211.25 L1838.67 1211.25 L1839.26 1211.25 L1839.84 1211.25 L1840.43 1211.25 L1841.01 1211.25 L1841.6 1211.25 L1842.19 1211.25 L1842.77 1211.25 L1843.36 1211.25 L1843.95 1211.25 L1844.53 1211.25 L1845.12 1211.25 L1845.71 1211.25 L1846.29 1211.25 L1846.88 1211.25 L1847.47 1211.25 L1848.05 1211.25 L1848.64 1211.25 L1849.22 1211.25 L1849.81 1211.25 L1850.4 1211.25 L1850.98 1211.25 L1851.57 1211.25 L1852.16 1211.25 L1852.74 1211.25 L1853.33 1211.25 L1853.92 1211.25 L1854.5 1211.25 L1855.09 1211.25 L1855.68 1211.25 L1856.26 1211.25 L1856.85 1211.25 L1857.43 1211.25 L1858.02 1211.25 L1858.61 1211.25 L1859.19 1211.25 L1859.78 1211.25 L1860.37 1211.25 L1860.95 1211.25 L1861.54 1211.25 L1862.13 1211.25 L1862.71 1211.25 L1863.3 1211.25 L1863.88 1211.25 L1864.47 1211.25 L1865.06 1211.25 L1865.64 1211.25 L1866.23 1211.25 L1866.82 1211.25 L1867.4 1211.25 L1867.99 1211.25 L1868.58 1211.25 L1869.16 1211.25 L1869.75 1211.25 L1870.34 1211.25 L1870.92 1211.25 L1871.51 1211.25 L1872.09 1211.25 L1872.68 1211.25 L1873.27 1211.25 L1873.85 1211.25 L1874.44 1211.25 L1875.03 1211.25 L1875.61 1211.25 L1876.2 1211.25 L1876.79 1211.25 L1877.37 1211.25 L1877.96 1211.25 L1878.55 1211.25 L1879.13 1211.25 L1879.72 1211.25 L1880.3 1211.25 L1880.89 1211.25 L1881.48 1211.25 L1882.06 1211.25 L1882.65 1211.25 L1883.24 1211.25 L1883.82 1211.25 L1884.41 1211.25 L1885 1211.25 L1885.58 1211.25 L1886.17 1211.25 L1886.76 1211.25 L1887.34 1211.25 L1887.93 1211.25 L1888.51 1211.25 L1889.1 1211.25 L1889.69 1211.25 L1890.27 1211.25 L1890.86 1211.25 L1891.45 1211.25 L1892.03 1211.25 L1892.62 1211.25 L1893.21 1211.25 L1893.79 1211.25 L1894.38 1211.25 L1894.96 1211.25 L1895.55 1211.25 L1896.14 1211.25 L1896.72 1211.25 L1897.31 1211.25 L1897.9 1211.25 L1898.48 1211.25 L1899.07 1211.25 L1899.66 1211.25 L1900.24 1211.25 L1900.83 1211.25 L1901.42 1211.25 L1902 1211.25 L1902.59 1211.25 L1903.17 1211.25 L1903.76 1211.25 L1904.35 1211.25 L1904.93 1211.25 L1905.52 1211.25 L1906.11 1211.25 L1906.69 1211.25 L1907.28 1211.25 L1907.87 1211.25 L1908.45 1211.25 L1909.04 1211.25 L1909.63 1211.25 L1910.21 1211.25 L1910.8 1211.25 L1911.38 1211.25 L1911.97 1211.25 L1912.56 1211.25 L1913.14 1211.25 L1913.73 1211.25 L1914.32 1211.25 L1914.9 1211.25 L1915.49 1211.25 L1916.08 1211.25 L1916.66 1211.25 L1917.25 1211.25 L1917.83 1211.25 L1918.42 1211.25 L1919.01 1211.25 L1919.59 1211.25 L1920.18 1211.25 L1920.77 1211.25 L1921.35 1211.25 L1921.94 1211.25 L1922.53 1211.25 L1923.11 1211.25 L1923.7 1211.25 L1924.29 1211.25 L1924.87 1211.25 L1925.46 1211.25 L1926.04 1211.25 L1926.63 1211.25 L1927.22 1211.25 L1927.8 1211.25 L1928.39 1211.25 L1928.98 1211.25 L1929.56 1211.25 L1930.15 1211.25 L1930.74 1211.25 L1931.32 1211.25 L1931.91 1211.25 L1932.5 1211.25 L1933.08 1211.25 L1933.67 1211.25 L1934.25 1211.25 L1934.84 1211.25 L1935.43 1211.25 L1936.01 1211.25 L1936.6 1211.25 L1937.19 1211.25 L1937.77 1211.25 L1938.36 1211.25 L1938.95 1211.25 L1939.53 1211.25 L1940.12 1211.25 L1940.71 1211.25 L1941.29 1211.25 L1941.88 1211.25 L1942.46 1211.25 L1943.05 1211.25 L1943.64 1211.25 L1944.22 1211.25 L1944.81 1211.25 L1945.4 1211.25 L1945.98 1211.25 L1946.57 1211.25 L1947.16 1211.25 L1947.74 1211.25 L1948.33 1211.25 L1948.91 1211.25 L1949.5 1211.25 L1950.09 1211.25 L1950.67 1211.25 L1951.26 1211.25 L1951.85 1211.25 L1952.43 1211.25 L1953.02 1211.25 L1953.61 1211.25 L1954.19 1211.25 L1954.78 1211.25 L1955.37 1211.25 L1955.95 1211.25 L1956.54 1211.25 L1957.12 1211.25 L1957.71 1211.25 L1958.3 1211.25 L1958.88 1211.25 L1959.47 1211.25 L1960.06 1211.25 L1960.64 1211.25 L1961.23 1211.25 L1961.82 1211.25 L1962.4 1211.25 L1962.99 1211.25 L1963.58 1211.25 L1964.16 1211.25 L1964.75 1211.25 L1965.33 1211.25 L1965.92 1211.25 L1966.51 1211.25 L1967.09 1211.25 L1967.68 1211.25 L1968.27 1211.25 L1968.85 1211.25 L1969.44 1211.25 L1970.03 1211.25 L1970.61 1211.25 L1971.2 1211.25 L1971.78 1211.25 L1972.37 1211.25 L1972.96 1211.25 L1973.54 1211.25 L1974.13 1211.25 L1974.72 1211.25 L1975.3 1211.25 L1975.89 1211.25 L1976.48 1211.25 L1977.06 1211.25 L1977.65 1211.25 L1978.24 1211.25 L1978.82 1211.25 L1979.41 1211.25 L1979.99 1211.25 L1980.58 1211.25 L1981.17 1211.25 L1981.75 1211.25 L1982.34 1211.25 L1982.93 1211.25 L1983.51 1211.25 L1984.1 1211.25 L1984.69 1211.25 L1985.27 1211.25 L1985.86 1211.25 L1986.45 1211.25 L1987.03 1211.25 L1987.62 1211.25 L1988.2 1211.25 L1988.79 1211.25 L1989.38 1211.25 L1989.96 1211.25 L1990.55 1211.25 L1991.14 1211.25 L1991.72 1211.25 L1992.31 1211.25 L1992.9 1211.25 L1993.48 1211.25 L1994.07 1211.25 L1994.65 1211.25 L1995.24 1211.25 L1995.83 1211.25 L1996.41 1211.25 L1997 1211.25 L1997.59 1211.25 L1998.17 1211.25 L1998.76 1211.25 L1999.35 1211.25 L1999.93 1211.25 L2000.52 1211.25 L2001.11 1211.25 L2001.69 1211.25 L2002.28 1211.25 L2002.86 1211.25 L2003.45 1211.25 L2004.04 1211.25 L2004.62 1211.25 L2005.21 1211.25 L2005.8 1211.25 L2006.38 1211.25 L2006.97 1211.25 L2007.56 1211.25 L2008.14 1211.25 L2008.73 1211.25 L2009.32 1211.25 L2009.9 1211.25 L2010.49 1211.25 L2011.07 1211.25 L2011.66 1211.25 L2012.25 1211.25 L2012.83 1211.25 L2013.42 1211.25 L2014.01 1211.25 L2014.59 1211.25 L2015.18 1211.25 L2015.77 1211.25 L2016.35 1211.25 L2016.94 1211.25 L2017.53 1211.25 L2018.11 1211.25 L2018.7 1211.25 L2019.28 1211.25 L2019.87 1211.25 L2020.46 1211.25 L2021.04 1211.25 L2021.63 1211.25 L2022.22 1211.25 L2022.8 1211.25 L2023.39 1211.25 L2023.98 1211.25 L2024.56 1211.25 L2025.15 1211.25 L2025.73 1211.25 L2026.32 1211.25 L2026.91 1211.25 L2027.49 1211.25 L2028.08 1211.25 L2028.67 1211.25 L2029.25 1211.25 L2029.84 1211.25 L2030.43 1211.25 L2031.01 1211.25 L2031.6 1211.25 L2032.19 1211.25 L2032.77 1211.25 L2033.36 1211.25 L2033.94 1211.25 L2034.53 1211.25 L2035.12 1211.25 L2035.7 1211.25 L2036.29 1211.25 L2036.88 1211.25 L2037.46 1211.25 L2038.05 1211.25 L2038.64 1211.25 L2039.22 1211.25 L2039.81 1211.25 L2040.4 1211.25 L2040.98 1211.25 L2041.57 1211.25 L2042.15 1211.25 L2042.74 1211.25 L2043.33 1211.25 L2043.91 1211.25 L2044.5 1211.25 L2045.09 1211.25 L2045.67 1211.25 L2046.26 1211.25 L2046.85 1211.25 L2047.43 1211.25 L2048.02 1211.25 L2048.6 1211.25 L2049.19 1211.25 L2049.78 1211.25 L2050.36 1211.25 L2050.95 1211.25 L2051.54 1211.25 L2052.12 1211.25 L2052.71 1211.25 L2053.3 1211.25 L2053.88 1211.25 L2054.47 1211.25 L2055.06 1211.25 L2055.64 1211.25 L2056.23 1211.25 L2056.81 1211.25 L2057.4 1211.25 L2057.99 1211.25 L2058.57 1211.25 L2059.16 1211.25 L2059.75 1211.25 L2060.33 1211.25 L2060.92 1211.25 L2061.51 1211.25 L2062.09 1211.25 L2062.68 1211.25 L2063.27 1211.25 L2063.85 1211.25 L2064.44 1211.25 L2065.02 1211.25 L2065.61 1211.25 L2066.2 1211.25 L2066.78 1211.25 L2067.37 1211.25 L2067.96 1211.25 L2068.54 1211.25 L2069.13 1211.25 L2069.72 1211.25 L2070.3 1211.25 L2070.89 1211.25 L2071.48 1211.25 L2072.06 1211.25 L2072.65 1211.25 L2073.23 1211.25 L2073.82 1211.25 L2074.41 1211.25 L2074.99 1211.25 L2075.58 1211.25 L2076.17 1211.25 L2076.75 1211.25 L2077.34 1211.25 L2077.93 1211.25 L2078.51 1211.25 L2079.1 1211.25 L2079.68 1211.25 L2080.27 1211.25 L2080.86 1211.25 L2081.44 1211.25 L2082.03 1211.25 L2082.62 1211.25 L2083.2 1211.25 L2083.79 1211.25 L2084.38 1211.25 L2084.96 1211.25 L2085.55 1211.25 L2086.14 1211.25 L2086.72 1211.25 L2087.31 1211.25 L2087.89 1211.25 L2088.48 1211.25 L2089.07 1211.25 L2089.65 1211.25 L2090.24 1211.25 L2090.83 1211.25 L2091.41 1211.25 L2092 1211.25 L2092.59 1211.25 L2093.17 1211.25 L2093.76 1211.25 L2094.35 1211.25 L2094.93 1211.25 L2095.52 1211.25 L2096.1 1211.25 L2096.69 1211.25 L2097.28 1211.25 L2097.86 1211.25 L2098.45 1211.25 L2099.04 1211.25 L2099.62 1211.25 L2100.21 1211.25 L2100.8 1211.25 L2101.38 1211.25 L2101.97 1211.25 L2102.55 1211.25 L2103.14 1211.25 L2103.73 1211.25 L2104.31 1211.25 L2104.9 1211.25 L2105.49 1211.25 L2106.07 1211.25 L2106.66 1211.25 L2107.25 1211.25 L2107.83 1211.25 L2108.42 1211.25 L2109.01 1211.25 L2109.59 1211.25 L2110.18 1211.25 L2110.76 1211.25 L2111.35 1211.25 L2111.94 1211.25 L2112.52 1211.25 L2113.11 1211.25 L2113.7 1211.25 L2114.28 1211.25 L2114.87 1211.25 L2115.46 1211.25 L2116.04 1211.25 L2116.63 1211.25 L2117.22 1211.25 L2117.8 1211.25 L2118.39 1211.25 L2118.97 1211.25 L2119.56 1211.25 L2120.15 1211.25 L2120.73 1211.25 L2121.32 1211.25 L2121.91 1211.25 L2122.49 1211.25 L2123.08 1211.25 L2123.67 1211.25 L2124.25 1211.25 L2124.84 1211.25 L2125.42 1211.25 L2126.01 1211.25 L2126.6 1211.25 L2127.18 1211.25 L2127.77 1211.25 L2128.36 1211.25 L2128.94 1211.25 L2129.53 1211.25 L2130.12 1211.25 L2130.7 1211.25 L2131.29 1211.25 L2131.88 1211.25 L2132.46 1211.25 L2133.05 1211.25 L2133.63 1211.25 L2134.22 1211.25 L2134.81 1211.25 L2135.39 1211.25 L2135.98 1211.25 L2136.57 1211.25 L2137.15 1211.25 L2137.74 1211.25 L2138.33 1211.25 L2138.91 1211.25 L2139.5 1211.25 L2140.09 1211.25 L2140.67 1211.25 L2141.26 1211.25 L2141.84 1211.25 L2142.43 1211.25 L2143.02 1211.25 L2143.6 1211.25 L2144.19 1211.25 L2144.78 1211.25 L2145.36 1211.25 L2145.95 1211.25 L2146.54 1211.25 L2147.12 1211.25 L2147.71 1211.25 L2148.3 1211.25 L2148.88 1211.25 L2149.47 1211.25 L2150.05 1211.25 L2150.64 1211.25 L2151.23 1211.25 L2151.81 1211.25 L2152.4 1211.25 L2152.99 1211.25 L2153.57 1211.25 L2154.16 1211.25 L2154.75 1211.25 L2155.33 1211.25 L2155.92 1211.25 L2156.5 1211.25 L2157.09 1211.25 L2157.68 1211.25 L2158.26 1211.25 L2158.26 1211.08 L2157.68 1211.08 L2157.09 1211.08 L2156.5 1211.08 L2155.92 1211.08 L2155.33 1211.08 L2154.75 1211.08 L2154.16 1211.08 L2153.57 1211.08 L2152.99 1211.08 L2152.4 1211.08 L2151.81 1211.08 L2151.23 1211.08 L2150.64 1211.08 L2150.05 1211.08 L2149.47 1211.08 L2148.88 1211.08 L2148.3 1211.08 L2147.71 1211.08 L2147.12 1211.08 L2146.54 1211.08 L2145.95 1211.08 L2145.36 1211.08 L2144.78 1211.08 L2144.19 1211.08 L2143.6 1211.08 L2143.02 1211.08 L2142.43 1211.08 L2141.84 1211.08 L2141.26 1211.08 L2140.67 1211.08 L2140.09 1211.08 L2139.5 1211.08 L2138.91 1211.08 L2138.33 1211.08 L2137.74 1211.08 L2137.15 1211.08 L2136.57 1211.08 L2135.98 1211.08 L2135.39 1211.08 L2134.81 1211.08 L2134.22 1211.08 L2133.63 1211.08 L2133.05 1211.08 L2132.46 1211.08 L2131.88 1211.08 L2131.29 1211.08 L2130.7 1211.08 L2130.12 1211.08 L2129.53 1211.08 L2128.94 1211.08 L2128.36 1211.08 L2127.77 1211.08 L2127.18 1211.08 L2126.6 1211.08 L2126.01 1211.08 L2125.42 1211.08 L2124.84 1211.08 L2124.25 1211.08 L2123.67 1211.08 L2123.08 1211.08 L2122.49 1211.08 L2121.91 1211.08 L2121.32 1211.08 L2120.73 1211.08 L2120.15 1211.08 L2119.56 1211.08 L2118.97 1211.08 L2118.39 1211.08 L2117.8 1211.08 L2117.22 1211.08 L2116.63 1211.08 L2116.04 1211.08 L2115.46 1211.08 L2114.87 1211.08 L2114.28 1211.08 L2113.7 1211.08 L2113.11 1211.08 L2112.52 1211.08 L2111.94 1211.08 L2111.35 1211.08 L2110.76 1211.08 L2110.18 1211.08 L2109.59 1211.08 L2109.01 1211.08 L2108.42 1211.08 L2107.83 1211.08 L2107.25 1211.08 L2106.66 1211.08 L2106.07 1211.08 L2105.49 1211.08 L2104.9 1211.08 L2104.31 1211.08 L2103.73 1211.08 L2103.14 1211.08 L2102.55 1211.08 L2101.97 1211.08 L2101.38 1211.08 L2100.8 1211.08 L2100.21 1211.08 L2099.62 1211.08 L2099.04 1211.08 L2098.45 1211.08 L2097.86 1211.08 L2097.28 1211.08 L2096.69 1211.08 L2096.1 1211.08 L2095.52 1211.08 L2094.93 1211.08 L2094.35 1211.08 L2093.76 1211.08 L2093.17 1211.08 L2092.59 1211.08 L2092 1211.08 L2091.41 1211.08 L2090.83 1211.08 L2090.24 1211.08 L2089.65 1211.08 L2089.07 1211.08 L2088.48 1211.08 L2087.89 1211.08 L2087.31 1211.08 L2086.72 1211.08 L2086.14 1211.08 L2085.55 1211.08 L2084.96 1211.08 L2084.38 1211.08 L2083.79 1211.08 L2083.2 1211.08 L2082.62 1211.08 L2082.03 1211.08 L2081.44 1211.08 L2080.86 1211.08 L2080.27 1211.08 L2079.68 1211.08 L2079.1 1211.08 L2078.51 1211.08 L2077.93 1211.08 L2077.34 1211.08 L2076.75 1211.08 L2076.17 1211.08 L2075.58 1211.08 L2074.99 1211.08 L2074.41 1211.08 L2073.82 1211.08 L2073.23 1211.08 L2072.65 1211.08 L2072.06 1211.08 L2071.48 1211.08 L2070.89 1211.08 L2070.3 1211.08 L2069.72 1211.08 L2069.13 1211.08 L2068.54 1211.08 L2067.96 1211.08 L2067.37 1211.08 L2066.78 1211.08 L2066.2 1211.08 L2065.61 1211.08 L2065.02 1211.08 L2064.44 1211.08 L2063.85 1211.08 L2063.27 1211.08 L2062.68 1211.08 L2062.09 1211.08 L2061.51 1211.08 L2060.92 1211.08 L2060.33 1211.08 L2059.75 1211.08 L2059.16 1211.08 L2058.57 1211.08 L2057.99 1211.08 L2057.4 1211.08 L2056.81 1211.08 L2056.23 1211.08 L2055.64 1211.08 L2055.06 1211.08 L2054.47 1211.08 L2053.88 1211.08 L2053.3 1211.08 L2052.71 1211.08 L2052.12 1211.08 L2051.54 1211.08 L2050.95 1211.08 L2050.36 1211.08 L2049.78 1211.08 L2049.19 1211.08 L2048.6 1211.08 L2048.02 1211.08 L2047.43 1211.08 L2046.85 1211.08 L2046.26 1211.08 L2045.67 1211.08 L2045.09 1211.08 L2044.5 1211.08 L2043.91 1211.08 L2043.33 1211.08 L2042.74 1211.08 L2042.15 1211.08 L2041.57 1211.08 L2040.98 1211.08 L2040.4 1211.08 L2039.81 1211.08 L2039.22 1211.08 L2038.64 1211.08 L2038.05 1211.08 L2037.46 1211.08 L2036.88 1211.08 L2036.29 1211.08 L2035.7 1211.08 L2035.12 1211.08 L2034.53 1211.08 L2033.94 1211.08 L2033.36 1211.08 L2032.77 1211.08 L2032.19 1211.08 L2031.6 1211.08 L2031.01 1211.08 L2030.43 1211.08 L2029.84 1211.08 L2029.25 1211.08 L2028.67 1211.08 L2028.08 1211.08 L2027.49 1211.08 L2026.91 1211.08 L2026.32 1211.08 L2025.73 1211.08 L2025.15 1211.08 L2024.56 1211.08 L2023.98 1211.08 L2023.39 1211.08 L2022.8 1211.08 L2022.22 1211.08 L2021.63 1211.08 L2021.04 1211.08 L2020.46 1211.08 L2019.87 1211.08 L2019.28 1211.08 L2018.7 1211.08 L2018.11 1211.08 L2017.53 1211.08 L2016.94 1211.08 L2016.35 1211.08 L2015.77 1211.08 L2015.18 1211.08 L2014.59 1211.08 L2014.01 1211.08 L2013.42 1211.08 L2012.83 1211.08 L2012.25 1211.08 L2011.66 1211.08 L2011.07 1211.08 L2010.49 1211.08 L2009.9 1211.08 L2009.32 1211.08 L2008.73 1211.08 L2008.14 1211.08 L2007.56 1211.08 L2006.97 1211.08 L2006.38 1211.08 L2005.8 1211.08 L2005.21 1211.08 L2004.62 1211.08 L2004.04 1211.08 L2003.45 1211.08 L2002.86 1211.08 L2002.28 1211.08 L2001.69 1211.08 L2001.11 1211.08 L2000.52 1211.08 L1999.93 1211.08 L1999.35 1211.08 L1998.76 1211.08 L1998.17 1211.08 L1997.59 1211.08 L1997 1211.08 L1996.41 1211.08 L1995.83 1211.08 L1995.24 1211.08 L1994.65 1211.08 L1994.07 1211.08 L1993.48 1211.08 L1992.9 1211.08 L1992.31 1211.08 L1991.72 1211.08 L1991.14 1211.08 L1990.55 1211.08 L1989.96 1211.08 L1989.38 1211.08 L1988.79 1211.08 L1988.2 1211.08 L1987.62 1211.08 L1987.03 1211.08 L1986.45 1211.08 L1985.86 1211.08 L1985.27 1211.08 L1984.69 1211.08 L1984.1 1211.08 L1983.51 1211.08 L1982.93 1211.08 L1982.34 1211.08 L1981.75 1211.08 L1981.17 1211.08 L1980.58 1211.08 L1979.99 1211.08 L1979.41 1211.08 L1978.82 1211.08 L1978.24 1211.08 L1977.65 1211.08 L1977.06 1211.08 L1976.48 1211.08 L1975.89 1211.08 L1975.3 1211.08 L1974.72 1211.08 L1974.13 1211.08 L1973.54 1211.08 L1972.96 1211.08 L1972.37 1211.08 L1971.78 1211.08 L1971.2 1211.08 L1970.61 1211.08 L1970.03 1211.08 L1969.44 1211.08 L1968.85 1211.08 L1968.27 1211.08 L1967.68 1211.08 L1967.09 1211.08 L1966.51 1211.08 L1965.92 1211.08 L1965.33 1211.08 L1964.75 1211.08 L1964.16 1211.08 L1963.58 1211.08 L1962.99 1211.08 L1962.4 1211.08 L1961.82 1211.08 L1961.23 1211.08 L1960.64 1211.08 L1960.06 1211.08 L1959.47 1211.08 L1958.88 1211.08 L1958.3 1211.08 L1957.71 1211.08 L1957.12 1211.08 L1956.54 1211.08 L1955.95 1211.08 L1955.37 1211.08 L1954.78 1211.08 L1954.19 1211.08 L1953.61 1211.08 L1953.02 1211.08 L1952.43 1211.08 L1951.85 1211.08 L1951.26 1211.08 L1950.67 1211.08 L1950.09 1211.08 L1949.5 1211.08 L1948.91 1211.08 L1948.33 1211.08 L1947.74 1211.08 L1947.16 1211.08 L1946.57 1211.08 L1945.98 1211.08 L1945.4 1211.08 L1944.81 1211.08 L1944.22 1211.08 L1943.64 1211.08 L1943.05 1211.08 L1942.46 1211.08 L1941.88 1211.08 L1941.29 1211.08 L1940.71 1211.08 L1940.12 1211.08 L1939.53 1211.08 L1938.95 1211.08 L1938.36 1211.08 L1937.77 1211.08 L1937.19 1211.08 L1936.6 1211.08 L1936.01 1211.08 L1935.43 1211.08 L1934.84 1211.08 L1934.25 1211.08 L1933.67 1211.08 L1933.08 1211.08 L1932.5 1211.08 L1931.91 1211.08 L1931.32 1211.08 L1930.74 1211.08 L1930.15 1211.08 L1929.56 1211.08 L1928.98 1211.08 L1928.39 1211.08 L1927.8 1211.08 L1927.22 1211.08 L1926.63 1211.08 L1926.04 1211.08 L1925.46 1211.08 L1924.87 1211.08 L1924.29 1211.08 L1923.7 1211.08 L1923.11 1211.08 L1922.53 1211.08 L1921.94 1211.08 L1921.35 1211.08 L1920.77 1211.08 L1920.18 1211.08 L1919.59 1211.08 L1919.01 1211.08 L1918.42 1211.08 L1917.83 1211.08 L1917.25 1211.08 L1916.66 1211.08 L1916.08 1211.08 L1915.49 1211.08 L1914.9 1211.08 L1914.32 1211.08 L1913.73 1211.08 L1913.14 1211.08 L1912.56 1211.08 L1911.97 1211.08 L1911.38 1211.08 L1910.8 1211.08 L1910.21 1211.08 L1909.63 1211.08 L1909.04 1211.08 L1908.45 1211.08 L1907.87 1211.08 L1907.28 1211.08 L1906.69 1211.08 L1906.11 1211.08 L1905.52 1211.08 L1904.93 1211.08 L1904.35 1211.08 L1903.76 1211.08 L1903.17 1211.08 L1902.59 1211.08 L1902 1211.08 L1901.42 1211.08 L1900.83 1211.08 L1900.24 1211.08 L1899.66 1211.08 L1899.07 1211.08 L1898.48 1211.08 L1897.9 1211.08 L1897.31 1211.08 L1896.72 1211.08 L1896.14 1211.08 L1895.55 1211.08 L1894.96 1211.08 L1894.38 1211.08 L1893.79 1211.08 L1893.21 1211.08 L1892.62 1211.08 L1892.03 1211.08 L1891.45 1211.08 L1890.86 1211.08 L1890.27 1211.08 L1889.69 1211.08 L1889.1 1211.08 L1888.51 1211.08 L1887.93 1211.08 L1887.34 1211.08 L1886.76 1211.08 L1886.17 1211.08 L1885.58 1211.08 L1885 1211.08 L1884.41 1211.08 L1883.82 1211.08 L1883.24 1211.08 L1882.65 1211.08 L1882.06 1211.08 L1881.48 1211.08 L1880.89 1211.08 L1880.3 1211.08 L1879.72 1211.08 L1879.13 1211.08 L1878.55 1211.08 L1877.96 1211.08 L1877.37 1211.08 L1876.79 1211.08 L1876.2 1211.08 L1875.61 1211.08 L1875.03 1211.08 L1874.44 1211.08 L1873.85 1211.08 L1873.27 1211.08 L1872.68 1211.08 L1872.09 1211.08 L1871.51 1211.08 L1870.92 1211.08 L1870.34 1211.08 L1869.75 1211.08 L1869.16 1211.08 L1868.58 1211.08 L1867.99 1211.08 L1867.4 1211.08 L1866.82 1211.08 L1866.23 1211.08 L1865.64 1211.08 L1865.06 1211.08 L1864.47 1211.08 L1863.88 1211.08 L1863.3 1211.08 L1862.71 1211.08 L1862.13 1211.08 L1861.54 1211.08 L1860.95 1211.08 L1860.37 1211.08 L1859.78 1211.08 L1859.19 1211.08 L1858.61 1211.08 L1858.02 1211.08 L1857.43 1211.08 L1856.85 1211.08 L1856.26 1211.08 L1855.68 1211.08 L1855.09 1211.08 L1854.5 1211.08 L1853.92 1211.08 L1853.33 1211.08 L1852.74 1211.08 L1852.16 1211.08 L1851.57 1211.08 L1850.98 1211.08 L1850.4 1211.08 L1849.81 1211.08 L1849.22 1211.08 L1848.64 1211.08 L1848.05 1211.08 L1847.47 1211.08 L1846.88 1211.08 L1846.29 1211.08 L1845.71 1211.08 L1845.12 1211.08 L1844.53 1211.08 L1843.95 1211.08 L1843.36 1211.08 L1842.77 1211.08 L1842.19 1211.08 L1841.6 1211.08 L1841.01 1211.08 L1840.43 1211.08 L1839.84 1211.08 L1839.26 1211.08 L1838.67 1211.08 L1838.08 1211.08 L1837.5 1211.08 L1836.91 1211.08 L1836.32 1211.08 L1835.74 1211.08 L1835.15 1211.08 L1834.56 1211.08 L1833.98 1211.08 L1833.39 1211.08 L1832.81 1211.08 L1832.22 1211.08 L1831.63 1211.08 L1831.05 1211.08 L1830.46 1211.08 L1829.87 1211.08 L1829.29 1211.08 L1828.7 1211.08 L1828.11 1211.08 L1827.53 1211.08 L1826.94 1211.08 L1826.35 1211.08 L1825.77 1211.08 L1825.18 1211.08 L1824.6 1211.08 L1824.01 1211.08 L1823.42 1211.08 L1822.84 1211.08 L1822.25 1211.08 L1821.66 1211.08 L1821.08 1211.08 L1820.49 1211.08 L1819.9 1211.08 L1819.32 1211.08 L1818.73 1211.08 L1818.14 1211.08 L1817.56 1211.08 L1816.97 1211.08 L1816.39 1211.08 L1815.8 1211.08 L1815.21 1211.08 L1814.63 1211.08 L1814.04 1211.08 L1813.45 1211.08 L1812.87 1211.08 L1812.28 1211.08 L1811.69 1211.08 L1811.11 1211.08 L1810.52 1211.08 L1809.94 1211.08 L1809.35 1211.08 L1808.76 1211.08 L1808.18 1211.08 L1807.59 1211.08 L1807 1211.08 L1806.42 1211.08 L1805.83 1211.08 L1805.24 1211.08 L1804.66 1211.08 L1804.07 1211.08 L1803.48 1211.08 L1802.9 1211.08 L1802.31 1211.08 L1801.73 1211.08 L1801.14 1211.08 L1800.55 1211.08 L1799.97 1211.08 L1799.38 1211.08 L1798.79 1211.08 L1798.21 1211.08 L1797.62 1211.08 L1797.03 1211.08 L1796.45 1211.08 L1795.86 1211.08 L1795.27 1211.08 L1794.69 1211.08 L1794.1 1211.08 L1793.52 1211.08 L1792.93 1211.08 L1792.34 1211.08 L1791.76 1211.08 L1791.17 1211.08 L1790.58 1211.08 L1790 1211.08 L1789.41 1211.08 L1788.82 1211.08 L1788.24 1211.08 L1787.65 1211.08 L1787.06 1211.08 L1786.48 1211.08 L1785.89 1211.08 L1785.31 1211.08 L1784.72 1211.08 L1784.13 1211.08 L1783.55 1211.08 L1782.96 1211.08 L1782.37 1211.08 L1781.79 1211.08 L1781.2 1211.08 L1780.61 1211.08 L1780.03 1211.08 L1779.44 1211.08 L1778.86 1211.08 L1778.27 1211.08 L1777.68 1211.08 L1777.1 1211.08 L1776.51 1211.08 L1775.92 1211.08 L1775.34 1211.08 L1774.75 1211.08 L1774.16 1211.08 L1773.58 1211.08 L1772.99 1211.08 L1772.4 1211.08 L1771.82 1211.08 L1771.23 1211.08 L1770.65 1211.08 L1770.06 1211.08 L1769.47 1211.08 L1768.89 1211.08 L1768.3 1211.08 L1767.71 1211.08 L1767.13 1211.08 L1766.54 1211.08 L1765.95 1211.08 L1765.37 1211.08 L1764.78 1211.08 L1764.19 1211.08 L1763.61 1211.08 L1763.02 1211.08 L1762.44 1211.08 L1761.85 1211.08 L1761.26 1211.08 L1760.68 1211.08 L1760.09 1211.08 L1759.5 1211.08 L1758.92 1211.08 L1758.33 1211.08 L1757.74 1211.08 L1757.16 1211.08 L1756.57 1211.08 L1755.99 1211.08 L1755.4 1211.08 L1754.81 1211.08 L1754.23 1211.08 L1753.64 1211.08 L1753.05 1211.08 L1752.47 1211.08 L1751.88 1211.08 L1751.29 1211.08 L1750.71 1211.08 L1750.12 1211.08 L1749.53 1211.08 L1748.95 1211.08 L1748.36 1211.08 L1747.78 1211.08 L1747.19 1211.08 L1746.6 1211.08 L1746.02 1211.08 L1745.43 1211.08 L1744.84 1211.08 L1744.26 1211.08 L1743.67 1211.08 L1743.08 1211.08 L1742.5 1211.08 L1741.91 1211.08 L1741.32 1211.08 L1740.74 1211.08 L1740.15 1211.08 L1739.57 1211.08 L1738.98 1211.08 L1738.39 1211.08 L1737.81 1211.08 L1737.22 1211.08 L1736.63 1211.08 L1736.05 1211.08 L1735.46 1211.08 L1734.87 1211.08 L1734.29 1211.08 L1733.7 1211.08 L1733.11 1211.08 L1732.53 1211.08 L1731.94 1211.08 L1731.36 1211.08 L1730.77 1211.08 L1730.18 1211.08 L1729.6 1211.08 L1729.01 1211.08 L1728.42 1211.08 L1727.84 1211.08 L1727.25 1211.08 L1726.66 1211.08 L1726.08 1211.08 L1725.49 1211.08 L1724.91 1211.08 L1724.32 1211.08 L1723.73 1211.08 L1723.15 1211.08 L1722.56 1211.08 L1721.97 1211.08 L1721.39 1211.08 L1720.8 1211.08 L1720.21 1211.08 L1719.63 1211.08 L1719.04 1211.08 L1718.45 1211.08 L1717.87 1211.08 L1717.28 1211.08 L1716.7 1211.08 L1716.11 1211.08 L1715.52 1211.08 L1714.94 1211.08 L1714.35 1211.08 L1713.76 1211.08 L1713.18 1211.08 L1712.59 1211.08 L1712 1211.08 L1711.42 1211.08 L1710.83 1211.08 L1710.24 1211.08 L1709.66 1211.08 L1709.07 1211.08 L1708.49 1211.08 L1707.9 1211.08 L1707.31 1211.08 L1706.73 1211.08 L1706.14 1211.08 L1705.55 1211.08 L1704.97 1211.08 L1704.38 1211.08 L1703.79 1211.08 L1703.21 1211.08 L1702.62 1211.08 L1702.04 1211.08 L1701.45 1211.08 L1700.86 1211.08 L1700.28 1211.08 L1699.69 1211.08 L1699.1 1211.08 L1698.52 1211.08 L1697.93 1211.08 L1697.34 1211.08 L1696.76 1211.08 L1696.17 1211.08 L1695.58 1211.08 L1695 1211.08 L1694.41 1211.08 L1693.83 1211.08 L1693.24 1211.08 L1692.65 1211.08 L1692.07 1211.08 L1691.48 1211.08 L1690.89 1211.08 L1690.31 1211.08 L1689.72 1211.08 L1689.13 1211.08 L1688.55 1211.08 L1687.96 1211.08 L1687.37 1211.08 L1686.79 1211.08 L1686.2 1211.08 L1685.62 1211.08 L1685.03 1211.08 L1684.44 1211.08 L1683.86 1211.08 L1683.27 1211.08 L1682.68 1211.08 L1682.1 1211.08 L1681.51 1211.08 L1680.92 1211.08 L1680.34 1211.08 L1679.75 1211.08 L1679.17 1211.08 L1678.58 1211.08 L1677.99 1211.08 L1677.41 1211.08 L1676.82 1211.08 L1676.23 1211.08 L1675.65 1211.08 L1675.06 1211.08 L1674.47 1211.08 L1673.89 1211.08 L1673.3 1211.08 L1672.71 1211.08 L1672.13 1211.08 L1671.54 1211.08 L1670.96 1211.08 L1670.37 1211.08 L1669.78 1211.08 L1669.2 1211.08 L1668.61 1211.08 L1668.02 1211.08 L1667.44 1211.08 L1666.85 1211.08 L1666.26 1211.08 L1665.68 1211.08 L1665.09 1211.08 L1664.5 1211.08 L1663.92 1211.08 L1663.33 1211.08 L1662.75 1211.08 L1662.16 1211.08 L1661.57 1211.08 L1660.99 1211.08 L1660.4 1211.08 L1659.81 1211.08 L1659.23 1211.08 L1658.64 1211.08 L1658.05 1211.08 L1657.47 1211.08 L1656.88 1211.08 L1656.29 1211.08 L1655.71 1211.08 L1655.12 1211.08 L1654.54 1211.08 L1653.95 1211.08 L1653.36 1211.08 L1652.78 1211.08 L1652.19 1211.08 L1651.6 1211.08 L1651.02 1211.08 L1650.43 1211.08 L1649.84 1211.08 L1649.26 1211.08 L1648.67 1211.08 L1648.09 1211.08 L1647.5 1211.08 L1646.91 1211.08 L1646.33 1211.08 L1645.74 1211.08 L1645.15 1211.08 L1644.57 1211.08 L1643.98 1211.08 L1643.39 1211.08 L1642.81 1211.08 L1642.22 1211.08 L1641.63 1211.08 L1641.05 1211.08 L1640.46 1211.08 L1639.88 1211.08 L1639.29 1211.08 L1638.7 1211.08 L1638.12 1211.08 L1637.53 1211.08 L1636.94 1211.08 L1636.36 1211.08 L1635.77 1211.08 L1635.18 1211.08 L1634.6 1211.08 L1634.01 1211.08 L1633.42 1211.08 L1632.84 1211.08 L1632.25 1211.08 L1631.67 1211.08 L1631.08 1211.08 L1630.49 1211.08 L1629.91 1211.08 L1629.32 1211.08 L1628.73 1211.08 L1628.15 1211.08 L1627.56 1211.08 L1626.97 1211.08 L1626.39 1211.08 L1625.8 1211.08 L1625.22 1211.08 L1624.63 1211.08 L1624.04 1211.08 L1623.46 1211.08 L1622.87 1211.08 L1622.28 1211.08 L1621.7 1211.08 L1621.11 1211.08 L1620.52 1211.08 L1619.94 1211.08 L1619.35 1211.08 L1618.76 1211.08 L1618.18 1211.08 L1617.59 1211.08 L1617.01 1211.08 L1616.42 1211.08 L1615.83 1211.08 L1615.25 1211.08 L1614.66 1211.08 L1614.07 1211.08 L1613.49 1211.08 L1612.9 1211.08 L1612.31 1211.08 L1611.73 1211.08 L1611.14 1211.08 L1610.55 1211.08 L1609.97 1211.08 L1609.38 1211.08 L1608.8 1211.08 L1608.21 1211.08 L1607.62 1211.08 L1607.04 1211.08 L1606.45 1211.08 L1605.86 1211.08 L1605.28 1211.08 L1604.69 1211.08 L1604.1 1211.08 L1603.52 1211.08 L1602.93 1211.08 L1602.34 1211.08 L1601.76 1211.08 L1601.17 1211.08 L1600.59 1211.08 L1600 1211.08 L1599.41 1211.08 L1598.83 1211.08 L1598.24 1211.08 L1597.65 1211.08 L1597.07 1211.08 L1596.48 1211.08 L1595.89 1211.08 L1595.31 1211.08 L1594.72 1211.08 L1594.14 1211.08 L1593.55 1211.08 L1592.96 1211.08 L1592.38 1211.08 L1591.79 1211.08 L1591.2 1211.08 L1590.62 1211.08 L1590.03 1211.08 L1589.44 1211.08 L1588.86 1211.08 L1588.27 1211.08 L1587.68 1211.08 L1587.1 1211.08 L1586.51 1211.08 L1585.93 1211.08 L1585.34 1211.08 L1584.75 1211.08 L1584.17 1211.08 L1583.58 1211.08 L1582.99 1211.08 L1582.41 1211.08 L1581.82 1211.08 L1581.23 1211.08 L1580.65 1211.08 L1580.06 1211.08 L1579.47 1211.08 L1578.89 1211.08 L1578.3 1211.08 L1577.72 1211.08 L1577.13 1211.08 L1576.54 1211.08 L1575.96 1211.08 L1575.37 1211.08 L1574.78 1211.08 L1574.2 1211.08 L1573.61 1211.08 L1573.02 1211.08 L1572.44 1211.08 L1571.85 1211.08 L1571.27 1211.08 L1570.68 1211.08 L1570.09 1211.08 L1569.51 1211.08 L1568.92 1211.08 L1568.33 1211.08 L1567.75 1211.08 L1567.16 1211.08 L1566.57 1211.08 L1565.99 1211.08 L1565.4 1211.08 L1564.81 1211.08 L1564.23 1211.08 L1563.64 1211.08 L1563.06 1211.08 L1562.47 1211.08 L1561.88 1211.08 L1561.3 1211.08 L1560.71 1211.08 L1560.12 1211.08 L1559.54 1211.08 L1558.95 1211.08 L1558.36 1211.08 L1557.78 1211.08 L1557.19 1211.08 L1556.6 1211.08 L1556.02 1211.08 L1555.43 1211.08 L1554.85 1211.08 L1554.26 1211.08 L1553.67 1211.08 L1553.09 1211.08 L1552.5 1211.08 L1551.91 1211.08 L1551.33 1211.08 L1550.74 1211.08 L1550.15 1211.08 L1549.57 1211.08 L1548.98 1211.08 L1548.4 1211.08 L1547.81 1211.08 L1547.22 1211.08 L1546.64 1211.08 L1546.05 1211.08 L1545.46 1211.08 L1544.88 1211.08 L1544.29 1211.08 L1543.7 1211.08 L1543.12 1211.08 L1542.53 1211.08 L1541.94 1211.08 L1541.36 1211.08 L1540.77 1211.08 L1540.19 1211.08 L1539.6 1211.08 L1539.01 1211.08 L1538.43 1211.08 L1537.84 1211.08 L1537.25 1211.08 L1536.67 1211.08 L1536.08 1211.08 L1535.49 1211.08 L1534.91 1211.08 L1534.32 1211.08 L1533.73 1211.08 L1533.15 1211.08 L1532.56 1211.08 L1531.98 1211.08 L1531.39 1211.08 L1530.8 1211.08 L1530.22 1211.08 L1529.63 1211.08 L1529.04 1211.08 L1528.46 1211.08 L1527.87 1211.08 L1527.28 1211.08 L1526.7 1211.08 L1526.11 1211.08 L1525.52 1211.08 L1524.94 1211.08 L1524.35 1211.08 L1523.77 1211.08 L1523.18 1211.08 L1522.59 1211.08 L1522.01 1211.08 L1521.42 1211.08 L1520.83 1211.08 L1520.25 1211.08 L1519.66 1211.08 L1519.07 1211.08 L1518.49 1211.08 L1517.9 1211.08 L1517.32 1211.08 L1516.73 1211.08 L1516.14 1211.08 L1515.56 1211.08 L1514.97 1211.08 L1514.38 1211.08 L1513.8 1211.08 L1513.21 1211.08 L1512.62 1211.08 L1512.04 1211.08 L1511.45 1211.08 L1510.86 1211.08 L1510.28 1211.08 L1509.69 1211.08 L1509.11 1211.08 L1508.52 1211.08 L1507.93 1211.08 L1507.35 1211.08 L1506.76 1211.08 L1506.17 1211.08 L1505.59 1211.08 L1505 1211.08 L1504.41 1211.08 L1503.83 1211.08 L1503.24 1211.08 L1502.65 1211.08 L1502.07 1211.08 L1501.48 1211.08 L1500.9 1211.08 L1500.31 1211.08 L1499.72 1211.08 L1499.14 1211.08 L1498.55 1211.08 L1497.96 1211.08 L1497.38 1211.08 L1496.79 1211.08 L1496.2 1211.08 L1495.62 1211.08 L1495.03 1211.08 L1494.45 1211.08 L1493.86 1211.08 L1493.27 1211.08 L1492.69 1211.08 L1492.1 1211.08 L1491.51 1211.08 L1490.93 1211.08 L1490.34 1211.08 L1489.75 1211.08 L1489.17 1211.08 L1488.58 1211.08 L1487.99 1211.08 L1487.41 1211.08 L1486.82 1211.08 L1486.24 1211.08 L1485.65 1211.08 L1485.06 1211.08 L1484.48 1211.08 L1483.89 1211.08 L1483.3 1211.08 L1482.72 1211.08 L1482.13 1211.08 L1481.54 1211.08 L1480.96 1211.08 L1480.37 1211.08 L1479.78 1211.08 L1479.2 1211.08 L1478.61 1211.08 L1478.03 1211.08 L1477.44 1211.08 L1476.85 1211.08 L1476.27 1211.08 L1475.68 1211.08 L1475.09 1211.08 L1474.51 1211.08 L1473.92 1211.08 L1473.33 1211.08 L1472.75 1211.08 L1472.16 1211.08 L1471.57 1211.08 L1470.99 1211.08 L1470.4 1211.08 L1469.82 1211.08 L1469.23 1211.08 L1468.64 1211.08 L1468.06 1211.08 L1467.47 1211.08 L1466.88 1211.08 L1466.3 1211.08 L1465.71 1211.08 L1465.12 1211.08 L1464.54 1211.08 L1463.95 1211.08 L1463.37 1211.08 L1462.78 1211.08 L1462.19 1211.08 L1461.61 1211.08 L1461.02 1211.08 L1460.43 1211.08 L1459.85 1211.08 L1459.26 1211.08 L1458.67 1211.08 L1458.09 1211.08 L1457.5 1211.08 L1456.91 1211.08 L1456.33 1211.08 L1455.74 1211.08 L1455.16 1211.08 L1454.57 1211.08 L1453.98 1211.08 L1453.4 1211.08 L1452.81 1211.08 L1452.22 1211.08 L1451.64 1211.08 L1451.05 1211.08 L1450.46 1211.08 L1449.88 1211.08 L1449.29 1211.08 L1448.7 1211.08 L1448.12 1211.08 L1447.53 1211.08 L1446.95 1211.08 L1446.36 1211.08 L1445.77 1211.08 L1445.19 1211.08 L1444.6 1211.08 L1444.01 1211.08 L1443.43 1211.08 L1442.84 1211.08 L1442.25 1211.08 L1441.67 1211.08 L1441.08 1211.08 L1440.5 1211.08 L1439.91 1211.08 L1439.32 1211.08 L1438.74 1211.08 L1438.15 1211.08 L1437.56 1211.08 L1436.98 1211.08 L1436.39 1211.08 L1435.8 1211.08 L1435.22 1211.08 L1434.63 1211.08 L1434.04 1211.08 L1433.46 1211.08 L1432.87 1211.08 L1432.29 1211.08 L1431.7 1211.08 L1431.11 1211.08 L1430.53 1211.08 L1429.94 1211.08 L1429.35 1211.08 L1428.77 1211.08 L1428.18 1211.08 L1427.59 1211.08 L1427.01 1211.08 L1426.42 1211.08 L1425.83 1211.08 L1425.25 1211.08 L1424.66 1211.08 L1424.08 1211.08 L1423.49 1211.08 L1422.9 1211.08 L1422.32 1211.08 L1421.73 1211.08 L1421.14 1211.08 L1420.56 1211.08 L1419.97 1211.08 L1419.38 1211.08 L1418.8 1211.08 L1418.21 1211.08 L1417.63 1211.08 L1417.04 1211.08 L1416.45 1211.08 L1415.87 1211.08 L1415.28 1211.08 L1414.69 1211.08 L1414.11 1211.08 L1413.52 1211.08 L1412.93 1211.08 L1412.35 1211.08 L1411.76 1211.08 L1411.17 1211.08 L1410.59 1211.08 L1410 1211.08 L1409.42 1211.08 L1408.83 1211.08 L1408.24 1211.08 L1407.66 1211.08 L1407.07 1211.08 L1406.48 1211.08 L1405.9 1211.08 L1405.31 1211.08 L1404.72 1211.08 L1404.14 1211.08 L1403.55 1211.08 L1402.96 1211.08 L1402.38 1211.08 L1401.79 1211.08 L1401.21 1211.08 L1400.62 1211.08 L1400.03 1211.08 L1399.45 1211.08 L1398.86 1211.08 L1398.27 1211.08 L1397.69 1211.08 L1397.1 1211.08 L1396.51 1211.08 L1395.93 1211.08 L1395.34 1211.08 L1394.75 1211.08 L1394.17 1211.08 L1393.58 1211.08 L1393 1211.08 L1392.41 1211.08 L1391.82 1211.08 L1391.24 1211.08 L1390.65 1211.08 L1390.06 1211.08 L1389.48 1211.08 L1388.89 1211.08 L1388.3 1211.08 L1387.72 1211.08 L1387.13 1211.08 L1386.55 1211.08 L1385.96 1211.08 L1385.37 1211.08 L1384.79 1211.08 L1384.2 1211.08 L1383.61 1211.08 L1383.03 1211.08 L1382.44 1211.08 L1381.85 1211.08 L1381.27 1211.08 L1380.68 1211.08 L1380.09 1211.08 L1379.51 1211.08 L1378.92 1211.08 L1378.34 1211.08 L1377.75 1211.08 L1377.16 1211.08 L1376.58 1211.08 L1375.99 1211.08 L1375.4 1211.08 L1374.82 1211.08 L1374.23 1211.08 L1373.64 1211.08 L1373.06 1211.08 L1372.47 1211.08 L1371.88 1211.08 L1371.3 1211.08 L1370.71 1211.08 L1370.13 1211.08 L1369.54 1211.08 L1368.95 1211.08 L1368.37 1211.08 L1367.78 1211.08 L1367.19 1211.08 L1366.61 1211.08 L1366.02 1211.08 L1365.43 1211.08 L1364.85 1211.08 L1364.26 1211.08 L1363.68 1211.08 L1363.09 1211.08 L1362.5 1211.08 L1361.92 1211.08 L1361.33 1211.08 L1360.74 1211.08 L1360.16 1211.08 L1359.57 1211.08 L1358.98 1211.08 L1358.4 1211.08 L1357.81 1211.08 L1357.22 1211.08 L1356.64 1211.08 L1356.05 1211.08 L1355.47 1211.08 L1354.88 1211.08 L1354.29 1211.08 L1353.71 1211.08 L1353.12 1211.08 L1352.53 1211.08 L1351.95 1211.08 L1351.36 1211.08 L1350.77 1211.08 L1350.19 1211.08 L1349.6 1211.08 L1349.01 1211.08 L1348.43 1211.08 L1347.84 1211.08 L1347.26 1211.08 L1346.67 1211.08 L1346.08 1211.08 L1345.5 1211.08 L1344.91 1211.08 L1344.32 1211.08 L1343.74 1211.08 L1343.15 1211.08 L1342.56 1211.08 L1341.98 1211.08 L1341.39 1211.08 L1340.8 1211.08 L1340.22 1211.08 L1339.63 1211.08 L1339.05 1211.08 L1338.46 1211.08 L1337.87 1211.08 L1337.29 1211.08 L1336.7 1211.08 L1336.11 1211.08 L1335.53 1211.08 L1334.94 1211.08 L1334.35 1211.08 L1333.77 1211.08 L1333.18 1211.08 L1332.6 1211.08 L1332.01 1211.08 L1331.42 1211.08 L1330.84 1211.08 L1330.25 1211.08 L1329.66 1211.08 L1329.08 1211.08 L1328.49 1211.08 L1327.9 1211.08 L1327.32 1211.08 L1326.73 1211.08 L1326.14 1211.08 L1325.56 1211.08 L1324.97 1211.08 L1324.39 1211.08 L1323.8 1211.08 L1323.21 1211.08 L1322.63 1211.08 L1322.04 1211.08 L1321.45 1211.08 L1320.87 1211.08 L1320.28 1211.08 L1319.69 1211.08 L1319.11 1211.08 L1318.52 1211.08 L1317.93 1211.08 L1317.35 1211.08 L1316.76 1211.08 L1316.18 1211.08 L1315.59 1211.08 L1315 1211.08 L1314.42 1211.08 L1313.83 1211.08 L1313.24 1211.08 L1312.66 1211.08 L1312.07 1211.08 L1311.48 1211.08 L1310.9 1211.08 L1310.31 1211.08 L1309.73 1211.08 L1309.14 1211.08 L1308.55 1211.08 L1307.97 1211.08 L1307.38 1211.08 L1306.79 1211.08 L1306.21 1211.08 L1305.62 1211.08 L1305.03 1211.08 L1304.45 1211.08 L1303.86 1211.08 L1303.27 1211.08 L1302.69 1211.08 L1302.1 1211.08 L1301.52 1211.08 L1300.93 1211.08 L1300.34 1211.08 L1299.76 1211.08 L1299.17 1211.08 L1298.58 1211.08 L1298 1211.08 L1297.41 1211.08 L1296.82 1211.08 L1296.24 1211.08 L1295.65 1211.08 L1295.06 1211.08 L1294.48 1211.08 L1293.89 1211.08 L1293.31 1211.08 L1292.72 1211.08 L1292.13 1211.08 L1291.55 1211.08 L1290.96 1211.08 L1290.37 1211.08 L1289.79 1211.08 L1289.2 1211.08 L1288.61 1211.08 L1288.03 1211.08 L1287.44 1211.08 L1286.86 1211.08 L1286.27 1211.08 L1285.68 1211.08 L1285.1 1211.08 L1284.51 1211.08 L1283.92 1211.08 L1283.34 1211.08 L1282.75 1211.08 L1282.16 1211.08 L1281.58 1211.08 L1280.99 1211.08 L1280.4 1211.08 L1279.82 1211.08 L1279.23 1211.08 L1278.65 1211.08 L1278.06 1211.08 L1277.47 1211.08 L1276.89 1211.08 L1276.3 1211.08 L1275.71 1211.08 L1275.13 1211.08 L1274.54 1211.08 L1273.95 1211.08 L1273.37 1211.08 L1272.78 1211.08 L1272.19 1211.08 L1271.61 1211.08 L1271.02 1211.08 L1270.44 1211.08 L1269.85 1211.08 L1269.26 1211.08 L1268.68 1211.08 L1268.09 1211.08 L1267.5 1211.08 L1266.92 1211.08 L1266.33 1211.08 L1265.74 1211.08 L1265.16 1211.08 L1264.57 1211.08 L1263.98 1211.08 L1263.4 1211.08 L1262.81 1211.08 L1262.23 1211.08 L1261.64 1211.08 L1261.05 1211.08 L1260.47 1211.08 L1259.88 1211.08 L1259.29 1211.08 L1258.71 1211.08 L1258.12 1211.08 L1257.53 1211.08 L1256.95 1211.08 L1256.36 1211.08 L1255.78 1211.08 L1255.19 1211.08 L1254.6 1211.08 L1254.02 1211.08 L1253.43 1211.08 L1252.84 1211.08 L1252.26 1211.08 L1251.67 1211.08 L1251.08 1211.08 L1250.5 1211.08 L1249.91 1211.08 L1249.32 1211.08 L1248.74 1211.08 L1248.15 1211.08 L1247.57 1211.08 L1246.98 1211.08 L1246.39 1211.08 L1245.81 1211.08 L1245.22 1211.08 L1244.63 1211.08 L1244.05 1211.08 L1243.46 1211.08 L1242.87 1211.08 L1242.29 1211.08 L1241.7 1211.08 L1241.11 1211.08 L1240.53 1211.08 L1239.94 1211.08 L1239.36 1211.08 L1238.77 1211.08 L1238.18 1211.08 L1237.6 1211.08 L1237.01 1211.08 L1236.42 1211.08 L1235.84 1211.08 L1235.25 1211.08 L1234.66 1211.08 L1234.08 1211.08 L1233.49 1211.08 L1232.91 1211.08 L1232.32 1211.08 L1231.73 1211.08 L1231.15 1211.08 L1230.56 1211.08 L1229.97 1211.08 L1229.39 1211.08 L1228.8 1211.08 L1228.21 1211.08 L1227.63 1211.08 L1227.04 1211.08 L1226.45 1211.08 L1225.87 1211.08 L1225.28 1211.08 L1224.7 1211.08 L1224.11 1211.08 L1223.52 1211.08 L1222.94 1211.08 L1222.35 1211.08 L1221.76 1211.08 L1221.18 1211.08 L1220.59 1211.08 L1220 1211.08 L1219.42 1211.08 L1218.83 1211.08 L1218.24 1211.08 L1217.66 1211.08 L1217.07 1211.08 L1216.49 1211.08 L1215.9 1211.08 L1215.31 1211.08 L1214.73 1211.08 L1214.14 1211.08 L1213.55 1211.08 L1212.97 1211.08 L1212.38 1211.08 L1211.79 1211.08 L1211.21 1211.08 L1210.62 1211.08 L1210.03 1211.08 L1209.45 1211.08 L1208.86 1211.08 L1208.28 1211.08 L1207.69 1211.08 L1207.1 1211.08 L1206.52 1211.08 L1205.93 1211.08 L1205.34 1211.08 L1204.76 1211.08 L1204.17 1211.08 L1203.58 1211.08 L1203 1211.08 L1202.41 1211.08 L1201.83 1211.08 L1201.24 1211.08 L1200.65 1211.08 L1200.07 1211.08 L1199.48 1211.08 L1198.89 1211.08 L1198.31 1211.08 L1197.72 1211.08 L1197.13 1211.08 L1196.55 1211.08 L1195.96 1211.08 L1195.37 1211.08 L1194.79 1211.08 L1194.2 1211.08 L1193.62 1211.08 L1193.03 1211.08 L1192.44 1211.08 L1191.86 1211.08 L1191.27 1211.08 L1190.68 1211.08 L1190.1 1211.08 L1189.51 1211.08 L1188.92 1211.08 L1188.34 1211.08 L1187.75 1211.08 L1187.16 1211.08 L1186.58 1211.08 L1185.99 1211.08 L1185.41 1211.08 L1184.82 1211.08 L1184.23 1211.08 L1183.65 1211.08 L1183.06 1211.08 L1182.47 1211.08 L1181.89 1211.08 L1181.3 1211.08 L1180.71 1211.08 L1180.13 1211.08 L1179.54 1211.08 L1178.96 1211.08 L1178.37 1211.08 L1177.78 1211.08 L1177.2 1211.08 L1176.61 1211.08 L1176.02 1211.08 L1175.44 1211.08 L1174.85 1211.08 L1174.26 1211.08 L1173.68 1211.08 L1173.09 1211.08 L1172.5 1211.08 L1171.92 1211.08 L1171.33 1211.08 L1170.75 1211.08 L1170.16 1211.08 L1169.57 1211.08 L1168.99 1211.08 L1168.4 1211.08 L1167.81 1211.08 L1167.23 1211.08 L1166.64 1211.08 L1166.05 1211.08 L1165.47 1211.08 L1164.88 1211.08 L1164.29 1211.08 L1163.71 1211.08 L1163.12 1211.08 L1162.54 1211.08 L1161.95 1211.08 L1161.36 1211.08 L1160.78 1211.08 L1160.19 1211.08 L1159.6 1211.08 L1159.02 1211.08 L1158.43 1211.08 L1157.84 1211.08 L1157.26 1211.08 L1156.67 1211.08 L1156.09 1211.08 L1155.5 1211.08 L1154.91 1211.08 L1154.33 1211.08 L1153.74 1211.08 L1153.15 1211.08 L1152.57 1211.08 L1151.98 1211.08 L1151.39 1211.08 L1150.81 1211.08 L1150.22 1211.08 L1149.63 1211.08 L1149.05 1211.08 L1148.46 1211.08 L1147.88 1211.08 L1147.29 1211.08 L1146.7 1211.08 L1146.12 1211.08 L1145.53 1211.08 L1144.94 1211.08 L1144.36 1211.08 L1143.77 1211.08 L1143.18 1211.08 L1142.6 1211.08 L1142.01 1211.08 L1141.42 1211.08 L1140.84 1211.08 L1140.25 1211.08 L1139.67 1211.08 L1139.08 1211.08 L1138.49 1211.08 L1137.91 1211.08 L1137.32 1211.08 L1136.73 1211.08 L1136.15 1211.08 L1135.56 1211.08 L1134.97 1211.08 L1134.39 1211.08 L1133.8 1211.08 L1133.21 1211.08 L1132.63 1211.08 L1132.04 1211.08 L1131.46 1211.08 L1130.87 1211.08 L1130.28 1211.08 L1129.7 1211.08 L1129.11 1211.08 L1128.52 1211.08 L1127.94 1211.08 L1127.35 1211.08 L1126.76 1211.08 L1126.18 1211.08 L1125.59 1211.08 L1125.01 1211.08 L1124.42 1211.08 L1123.83 1211.08 L1123.25 1211.08 L1122.66 1211.08 L1122.07 1211.08 L1121.49 1211.08 L1120.9 1211.08 L1120.31 1211.08 L1119.73 1211.08 L1119.14 1211.08 L1118.55 1211.08 L1117.97 1211.08 L1117.38 1211.08 L1116.8 1211.08 L1116.21 1211.08 L1115.62 1211.08 L1115.04 1211.08 L1114.45 1211.08 L1113.86 1211.08 L1113.28 1211.08 L1112.69 1211.08 L1112.1 1211.08 L1111.52 1211.08 L1110.93 1211.08 L1110.34 1211.08 L1109.76 1211.08 L1109.17 1211.08 L1108.59 1211.08 L1108 1211.08 L1107.41 1211.08 L1106.83 1211.08 L1106.24 1211.08 L1105.65 1211.08 L1105.07 1211.08 L1104.48 1211.08 L1103.89 1211.08 L1103.31 1211.08 L1102.72 1211.08 L1102.14 1211.08 L1101.55 1211.08 L1100.96 1211.08 L1100.38 1211.08 L1099.79 1211.08 L1099.2 1211.08 L1098.62 1211.08 L1098.03 1211.08 L1097.44 1211.08 L1096.86 1211.08 L1096.27 1211.08 L1095.68 1211.08 L1095.1 1211.08 L1094.51 1211.08 L1093.93 1211.08 L1093.34 1211.08 L1092.75 1211.08 L1092.17 1211.08 L1091.58 1211.08 L1090.99 1211.08 L1090.41 1211.08 L1089.82 1211.08 L1089.23 1211.08 L1088.65 1211.08 L1088.06 1211.08 L1087.47 1211.08 L1086.89 1211.08 L1086.3 1211.08 L1085.72 1211.08 L1085.13 1211.08 L1084.54 1211.08 L1083.96 1211.08 L1083.37 1211.08 L1082.78 1211.08 L1082.2 1211.08 L1081.61 1211.08 L1081.02 1211.08 L1080.44 1211.08 L1079.85 1211.08 L1079.26 1211.08 L1078.68 1211.08 L1078.09 1211.08 L1077.51 1211.08 L1076.92 1211.08 L1076.33 1211.08 L1075.75 1211.08 L1075.16 1211.08 L1074.57 1211.08 L1073.99 1211.08 L1073.4 1211.08 L1072.81 1211.08 L1072.23 1211.08 L1071.64 1211.08 L1071.06 1211.08 L1070.47 1211.08 L1069.88 1211.08 L1069.3 1211.08 L1068.71 1211.08 L1068.12 1211.08 L1067.54 1211.08 L1066.95 1211.08 L1066.36 1211.08 L1065.78 1211.08 L1065.19 1211.08 L1064.6 1211.08 L1064.02 1211.08 L1063.43 1211.08 L1062.85 1211.08 L1062.26 1211.08 L1061.67 1211.08 L1061.09 1211.08 L1060.5 1211.08 L1059.91 1211.08 L1059.33 1211.08 L1058.74 1211.08 L1058.15 1211.08 L1057.57 1211.08 L1056.98 1211.08 L1056.39 1211.08 L1055.81 1211.08 L1055.22 1211.08 L1054.64 1211.08 L1054.05 1211.08 L1053.46 1211.08 L1052.88 1211.08 L1052.29 1211.08 L1051.7 1211.08 L1051.12 1211.08 L1050.53 1211.08 L1049.94 1211.08 L1049.36 1211.08 L1048.77 1211.08 L1048.19 1211.08 L1047.6 1211.08 L1047.01 1211.08 L1046.43 1211.08 L1045.84 1211.08 L1045.25 1211.08 L1044.67 1211.08 L1044.08 1211.08 L1043.49 1211.08 L1042.91 1211.08 L1042.32 1211.08 L1041.73 1211.08 L1041.15 1211.08 L1040.56 1211.08 L1039.98 1211.08 L1039.39 1211.08 L1038.8 1211.08 L1038.22 1211.08 L1037.63 1211.08 L1037.04 1211.08 L1036.46 1211.08 L1035.87 1211.08 L1035.28 1211.08 L1034.7 1211.08 L1034.11 1211.08 L1033.52 1211.08 L1032.94 1211.08 L1032.35 1211.08 L1031.77 1211.08 L1031.18 1211.08 L1030.59 1211.08 L1030.01 1211.08 L1029.42 1211.08 L1028.83 1211.08 L1028.25 1211.08 L1027.66 1211.08 L1027.07 1211.08 L1026.49 1211.08 L1025.9 1211.08 L1025.32 1211.08 L1024.73 1211.08 L1024.14 1211.08 L1023.56 1211.08 L1022.97 1211.08 L1022.38 1211.08 L1021.8 1211.08 L1021.21 1211.08 L1020.62 1211.08 L1020.04 1211.08 L1019.45 1211.08 L1018.86 1211.08 L1018.28 1211.08 L1017.69 1211.08 L1017.11 1211.08 L1016.52 1211.08 L1015.93 1211.08 L1015.35 1211.08 L1014.76 1211.08 L1014.17 1211.08 L1013.59 1211.08 L1013 1211.08 L1012.41 1211.08 L1011.83 1211.08 L1011.24 1211.08 L1010.65 1211.08 L1010.07 1211.08 L1009.48 1211.08 L1008.9 1211.08 L1008.31 1211.08 L1007.72 1211.08 L1007.14 1211.08 L1006.55 1211.08 L1005.96 1211.08 L1005.38 1211.08 L1004.79 1211.08 L1004.2 1211.08 L1003.62 1211.08 L1003.03 1211.08 L1002.44 1211.08 L1001.86 1211.08 L1001.27 1211.08 L1000.69 1211.08 L1000.1 1211.08 L999.513 1211.08 L998.926 1211.08 L998.34 1211.08 L997.754 1211.08 L997.167 1211.08 L996.581 1211.08 L995.994 1211.08 L995.408 1211.08 L994.822 1211.08 L994.235 1211.08 L993.649 1211.08 L993.062 1211.08 L992.476 1211.08 L991.889 1211.08 L991.303 1211.08 L990.717 1211.08 L990.13 1211.08 L989.544 1211.08 L988.957 1211.08 L988.371 1211.08 L987.785 1211.08 L987.198 1211.08 L986.612 1211.08 L986.025 1211.08  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.16 986.612,1211.16 987.198,1211.16 987.785,1211.16 988.371,1211.16 988.957,1211.16 989.544,1211.16 990.13,1211.16 990.717,1211.16 991.303,1211.16 991.889,1211.16 992.476,1211.16 993.062,1211.16 993.649,1211.16 994.235,1211.16 994.822,1211.16 995.408,1211.16 995.994,1211.16 996.581,1211.16 997.167,1211.16 997.754,1211.16 998.34,1211.16 998.926,1211.16 999.513,1211.16 1000.1,1211.16 1000.69,1211.16 1001.27,1211.16 1001.86,1211.16 1002.44,1211.16 1003.03,1211.16 1003.62,1211.16 1004.2,1211.16 1004.79,1211.16 1005.38,1211.16 1005.96,1211.16 1006.55,1211.16 1007.14,1211.16 1007.72,1211.16 1008.31,1211.16 1008.9,1211.16 1009.48,1211.16 1010.07,1211.16 1010.65,1211.16 1011.24,1211.16 1011.83,1211.16 1012.41,1211.16 1013,1211.16 1013.59,1211.16 1014.17,1211.16 1014.76,1211.16 1015.35,1211.16 1015.93,1211.16 1016.52,1211.16 1017.11,1211.16 1017.69,1211.16 1018.28,1211.16 1018.86,1211.16 1019.45,1211.16 1020.04,1211.16 1020.62,1211.16 1021.21,1211.16 1021.8,1211.16 1022.38,1211.16 1022.97,1211.16 1023.56,1211.16 1024.14,1211.16 1024.73,1211.16 1025.32,1211.16 1025.9,1211.16 1026.49,1211.16 1027.07,1211.16 1027.66,1211.16 1028.25,1211.16 1028.83,1211.16 1029.42,1211.16 1030.01,1211.16 1030.59,1211.16 1031.18,1211.16 1031.77,1211.16 1032.35,1211.16 1032.94,1211.16 1033.52,1211.16 1034.11,1211.16 1034.7,1211.16 1035.28,1211.16 1035.87,1211.16 1036.46,1211.16 1037.04,1211.16 1037.63,1211.16 1038.22,1211.16 1038.8,1211.16 1039.39,1211.16 1039.98,1211.16 1040.56,1211.16 1041.15,1211.16 1041.73,1211.16 1042.32,1211.16 1042.91,1211.16 1043.49,1211.16 1044.08,1211.16 1044.67,1211.16 1045.25,1211.16 1045.84,1211.16 1046.43,1211.16 1047.01,1211.16 1047.6,1211.16 1048.19,1211.16 1048.77,1211.16 1049.36,1211.16 1049.94,1211.16 1050.53,1211.16 1051.12,1211.16 1051.7,1211.16 1052.29,1211.16 1052.88,1211.16 1053.46,1211.16 1054.05,1211.16 1054.64,1211.16 1055.22,1211.16 1055.81,1211.16 1056.39,1211.16 1056.98,1211.16 1057.57,1211.16 1058.15,1211.16 1058.74,1211.16 1059.33,1211.16 1059.91,1211.16 1060.5,1211.16 1061.09,1211.16 1061.67,1211.16 1062.26,1211.16 1062.85,1211.16 1063.43,1211.16 1064.02,1211.16 1064.6,1211.16 1065.19,1211.16 1065.78,1211.16 1066.36,1211.16 1066.95,1211.16 1067.54,1211.16 1068.12,1211.16 1068.71,1211.16 1069.3,1211.16 1069.88,1211.16 1070.47,1211.16 1071.06,1211.16 1071.64,1211.16 1072.23,1211.16 1072.81,1211.16 1073.4,1211.16 1073.99,1211.16 1074.57,1211.16 1075.16,1211.16 1075.75,1211.16 1076.33,1211.16 1076.92,1211.16 1077.51,1211.16 1078.09,1211.16 1078.68,1211.16 1079.26,1211.16 1079.85,1211.16 1080.44,1211.16 1081.02,1211.16 1081.61,1211.16 1082.2,1211.16 1082.78,1211.16 1083.37,1211.16 1083.96,1211.16 1084.54,1211.16 1085.13,1211.16 1085.72,1211.16 1086.3,1211.16 1086.89,1211.16 1087.47,1211.16 1088.06,1211.16 1088.65,1211.16 1089.23,1211.16 1089.82,1211.16 1090.41,1211.16 1090.99,1211.16 1091.58,1211.16 1092.17,1211.16 1092.75,1211.16 1093.34,1211.16 1093.93,1211.16 1094.51,1211.16 1095.1,1211.16 1095.68,1211.16 1096.27,1211.16 1096.86,1211.16 1097.44,1211.16 1098.03,1211.16 1098.62,1211.16 1099.2,1211.16 1099.79,1211.16 1100.38,1211.16 1100.96,1211.16 1101.55,1211.16 1102.14,1211.16 1102.72,1211.16 1103.31,1211.16 1103.89,1211.16 1104.48,1211.16 1105.07,1211.16 1105.65,1211.16 1106.24,1211.16 1106.83,1211.16 1107.41,1211.16 1108,1211.16 1108.59,1211.16 1109.17,1211.16 1109.76,1211.16 1110.34,1211.16 1110.93,1211.16 1111.52,1211.16 1112.1,1211.16 1112.69,1211.16 1113.28,1211.16 1113.86,1211.16 1114.45,1211.16 1115.04,1211.16 1115.62,1211.16 1116.21,1211.16 1116.8,1211.16 1117.38,1211.16 1117.97,1211.16 1118.55,1211.16 1119.14,1211.16 1119.73,1211.16 1120.31,1211.16 1120.9,1211.16 1121.49,1211.16 1122.07,1211.16 1122.66,1211.16 1123.25,1211.16 1123.83,1211.16 1124.42,1211.16 1125.01,1211.16 1125.59,1211.16 1126.18,1211.16 1126.76,1211.16 1127.35,1211.16 1127.94,1211.16 1128.52,1211.16 1129.11,1211.16 1129.7,1211.16 1130.28,1211.16 1130.87,1211.16 1131.46,1211.16 1132.04,1211.16 1132.63,1211.16 1133.21,1211.16 1133.8,1211.16 1134.39,1211.16 1134.97,1211.16 1135.56,1211.16 1136.15,1211.16 1136.73,1211.16 1137.32,1211.16 1137.91,1211.16 1138.49,1211.16 1139.08,1211.16 1139.67,1211.16 1140.25,1211.16 1140.84,1211.16 1141.42,1211.16 1142.01,1211.16 1142.6,1211.16 1143.18,1211.16 1143.77,1211.16 1144.36,1211.16 1144.94,1211.16 1145.53,1211.16 1146.12,1211.16 1146.7,1211.16 1147.29,1211.16 1147.88,1211.16 1148.46,1211.16 1149.05,1211.16 1149.63,1211.16 1150.22,1211.16 1150.81,1211.16 1151.39,1211.16 1151.98,1211.16 1152.57,1211.16 1153.15,1211.16 1153.74,1211.16 1154.33,1211.16 1154.91,1211.16 1155.5,1211.16 1156.09,1211.16 1156.67,1211.16 1157.26,1211.16 1157.84,1211.16 1158.43,1211.16 1159.02,1211.16 1159.6,1211.16 1160.19,1211.16 1160.78,1211.16 1161.36,1211.16 1161.95,1211.16 1162.54,1211.16 1163.12,1211.16 1163.71,1211.16 1164.29,1211.16 1164.88,1211.16 1165.47,1211.16 1166.05,1211.16 1166.64,1211.16 1167.23,1211.16 1167.81,1211.16 1168.4,1211.16 1168.99,1211.16 1169.57,1211.16 1170.16,1211.16 1170.75,1211.16 1171.33,1211.16 1171.92,1211.16 1172.5,1211.16 1173.09,1211.16 1173.68,1211.16 1174.26,1211.16 1174.85,1211.16 1175.44,1211.16 1176.02,1211.16 1176.61,1211.16 1177.2,1211.16 1177.78,1211.16 1178.37,1211.16 1178.96,1211.16 1179.54,1211.16 1180.13,1211.16 1180.71,1211.16 1181.3,1211.16 1181.89,1211.16 1182.47,1211.16 1183.06,1211.16 1183.65,1211.16 1184.23,1211.16 1184.82,1211.16 1185.41,1211.16 1185.99,1211.16 1186.58,1211.16 1187.16,1211.16 1187.75,1211.16 1188.34,1211.16 1188.92,1211.16 1189.51,1211.16 1190.1,1211.16 1190.68,1211.16 1191.27,1211.16 1191.86,1211.16 1192.44,1211.16 1193.03,1211.16 1193.62,1211.16 1194.2,1211.16 1194.79,1211.16 1195.37,1211.16 1195.96,1211.16 1196.55,1211.16 1197.13,1211.16 1197.72,1211.16 1198.31,1211.16 1198.89,1211.16 1199.48,1211.16 1200.07,1211.16 1200.65,1211.16 1201.24,1211.16 1201.83,1211.16 1202.41,1211.16 1203,1211.16 1203.58,1211.16 1204.17,1211.16 1204.76,1211.16 1205.34,1211.16 1205.93,1211.16 1206.52,1211.16 1207.1,1211.16 1207.69,1211.16 1208.28,1211.16 1208.86,1211.16 1209.45,1211.16 1210.03,1211.16 1210.62,1211.16 1211.21,1211.16 1211.79,1211.16 1212.38,1211.16 1212.97,1211.16 1213.55,1211.16 1214.14,1211.16 1214.73,1211.16 1215.31,1211.16 1215.9,1211.16 1216.49,1211.16 1217.07,1211.16 1217.66,1211.16 1218.24,1211.16 1218.83,1211.16 1219.42,1211.16 1220,1211.16 1220.59,1211.16 1221.18,1211.16 1221.76,1211.16 1222.35,1211.16 1222.94,1211.16 1223.52,1211.16 1224.11,1211.16 1224.7,1211.16 1225.28,1211.16 1225.87,1211.16 1226.45,1211.16 1227.04,1211.16 1227.63,1211.16 1228.21,1211.16 1228.8,1211.16 1229.39,1211.16 1229.97,1211.16 1230.56,1211.16 1231.15,1211.16 1231.73,1211.16 1232.32,1211.16 1232.91,1211.16 1233.49,1211.16 1234.08,1211.16 1234.66,1211.16 1235.25,1211.16 1235.84,1211.16 1236.42,1211.16 1237.01,1211.16 1237.6,1211.16 1238.18,1211.16 1238.77,1211.16 1239.36,1211.16 1239.94,1211.16 1240.53,1211.16 1241.11,1211.16 1241.7,1211.16 1242.29,1211.16 1242.87,1211.16 1243.46,1211.16 1244.05,1211.16 1244.63,1211.16 1245.22,1211.16 1245.81,1211.16 1246.39,1211.16 1246.98,1211.16 1247.57,1211.16 1248.15,1211.16 1248.74,1211.16 1249.32,1211.16 1249.91,1211.16 1250.5,1211.16 1251.08,1211.16 1251.67,1211.16 1252.26,1211.16 1252.84,1211.16 1253.43,1211.16 1254.02,1211.16 1254.6,1211.16 1255.19,1211.16 1255.78,1211.16 1256.36,1211.16 1256.95,1211.16 1257.53,1211.16 1258.12,1211.16 1258.71,1211.16 1259.29,1211.16 1259.88,1211.16 1260.47,1211.16 1261.05,1211.16 1261.64,1211.16 1262.23,1211.16 1262.81,1211.16 1263.4,1211.16 1263.98,1211.16 1264.57,1211.16 1265.16,1211.16 1265.74,1211.16 1266.33,1211.16 1266.92,1211.16 1267.5,1211.16 1268.09,1211.16 1268.68,1211.16 1269.26,1211.16 1269.85,1211.16 1270.44,1211.16 1271.02,1211.16 1271.61,1211.16 1272.19,1211.16 1272.78,1211.16 1273.37,1211.16 1273.95,1211.16 1274.54,1211.16 1275.13,1211.16 1275.71,1211.16 1276.3,1211.16 1276.89,1211.16 1277.47,1211.16 1278.06,1211.16 1278.65,1211.16 1279.23,1211.16 1279.82,1211.16 1280.4,1211.16 1280.99,1211.16 1281.58,1211.16 1282.16,1211.16 1282.75,1211.16 1283.34,1211.16 1283.92,1211.16 1284.51,1211.16 1285.1,1211.16 1285.68,1211.16 1286.27,1211.16 1286.86,1211.16 1287.44,1211.16 1288.03,1211.16 1288.61,1211.16 1289.2,1211.16 1289.79,1211.16 1290.37,1211.16 1290.96,1211.16 1291.55,1211.16 1292.13,1211.16 1292.72,1211.16 1293.31,1211.16 1293.89,1211.16 1294.48,1211.16 1295.06,1211.16 1295.65,1211.16 1296.24,1211.16 1296.82,1211.16 1297.41,1211.16 1298,1211.16 1298.58,1211.16 1299.17,1211.16 1299.76,1211.16 1300.34,1211.16 1300.93,1211.16 1301.52,1211.16 1302.1,1211.16 1302.69,1211.16 1303.27,1211.16 1303.86,1211.16 1304.45,1211.16 1305.03,1211.16 1305.62,1211.16 1306.21,1211.16 1306.79,1211.16 1307.38,1211.16 1307.97,1211.16 1308.55,1211.16 1309.14,1211.16 1309.73,1211.16 1310.31,1211.16 1310.9,1211.16 1311.48,1211.16 1312.07,1211.16 1312.66,1211.16 1313.24,1211.16 1313.83,1211.16 1314.42,1211.16 1315,1211.16 1315.59,1211.16 1316.18,1211.16 1316.76,1211.16 1317.35,1211.16 1317.93,1211.16 1318.52,1211.16 1319.11,1211.16 1319.69,1211.16 1320.28,1211.16 1320.87,1211.16 1321.45,1211.16 1322.04,1211.16 1322.63,1211.16 1323.21,1211.16 1323.8,1211.16 1324.39,1211.16 1324.97,1211.16 1325.56,1211.16 1326.14,1211.16 1326.73,1211.16 1327.32,1211.16 1327.9,1211.16 1328.49,1211.16 1329.08,1211.16 1329.66,1211.16 1330.25,1211.16 1330.84,1211.16 1331.42,1211.16 1332.01,1211.16 1332.6,1211.16 1333.18,1211.16 1333.77,1211.16 1334.35,1211.16 1334.94,1211.16 1335.53,1211.16 1336.11,1211.16 1336.7,1211.16 1337.29,1211.16 1337.87,1211.16 1338.46,1211.16 1339.05,1211.16 1339.63,1211.16 1340.22,1211.16 1340.8,1211.16 1341.39,1211.16 1341.98,1211.16 1342.56,1211.16 1343.15,1211.16 1343.74,1211.16 1344.32,1211.16 1344.91,1211.16 1345.5,1211.16 1346.08,1211.16 1346.67,1211.16 1347.26,1211.16 1347.84,1211.16 1348.43,1211.16 1349.01,1211.16 1349.6,1211.16 1350.19,1211.16 1350.77,1211.16 1351.36,1211.16 1351.95,1211.16 1352.53,1211.16 1353.12,1211.16 1353.71,1211.16 1354.29,1211.16 1354.88,1211.16 1355.47,1211.16 1356.05,1211.16 1356.64,1211.16 1357.22,1211.16 1357.81,1211.16 1358.4,1211.16 1358.98,1211.16 1359.57,1211.16 1360.16,1211.16 1360.74,1211.16 1361.33,1211.16 1361.92,1211.16 1362.5,1211.16 1363.09,1211.16 1363.68,1211.16 1364.26,1211.16 1364.85,1211.16 1365.43,1211.16 1366.02,1211.16 1366.61,1211.16 1367.19,1211.16 1367.78,1211.16 1368.37,1211.16 1368.95,1211.16 1369.54,1211.16 1370.13,1211.16 1370.71,1211.16 1371.3,1211.16 1371.88,1211.16 1372.47,1211.16 1373.06,1211.16 1373.64,1211.16 1374.23,1211.16 1374.82,1211.16 1375.4,1211.16 1375.99,1211.16 1376.58,1211.16 1377.16,1211.16 1377.75,1211.16 1378.34,1211.16 1378.92,1211.16 1379.51,1211.16 1380.09,1211.16 1380.68,1211.16 1381.27,1211.16 1381.85,1211.16 1382.44,1211.16 1383.03,1211.16 1383.61,1211.16 1384.2,1211.16 1384.79,1211.16 1385.37,1211.16 1385.96,1211.16 1386.55,1211.16 1387.13,1211.16 1387.72,1211.16 1388.3,1211.16 1388.89,1211.16 1389.48,1211.16 1390.06,1211.16 1390.65,1211.16 1391.24,1211.16 1391.82,1211.16 1392.41,1211.16 1393,1211.16 1393.58,1211.16 1394.17,1211.16 1394.75,1211.16 1395.34,1211.16 1395.93,1211.16 1396.51,1211.16 1397.1,1211.16 1397.69,1211.16 1398.27,1211.16 1398.86,1211.16 1399.45,1211.16 1400.03,1211.16 1400.62,1211.16 1401.21,1211.16 1401.79,1211.16 1402.38,1211.16 1402.96,1211.16 1403.55,1211.16 1404.14,1211.16 1404.72,1211.16 1405.31,1211.16 1405.9,1211.16 1406.48,1211.16 1407.07,1211.16 1407.66,1211.16 1408.24,1211.16 1408.83,1211.16 1409.42,1211.16 1410,1211.16 1410.59,1211.16 1411.17,1211.16 1411.76,1211.16 1412.35,1211.16 1412.93,1211.16 1413.52,1211.16 1414.11,1211.16 1414.69,1211.16 1415.28,1211.16 1415.87,1211.16 1416.45,1211.16 1417.04,1211.16 1417.63,1211.16 1418.21,1211.16 1418.8,1211.16 1419.38,1211.16 1419.97,1211.16 1420.56,1211.16 1421.14,1211.16 1421.73,1211.16 1422.32,1211.16 1422.9,1211.16 1423.49,1211.16 1424.08,1211.16 1424.66,1211.16 1425.25,1211.16 1425.83,1211.16 1426.42,1211.16 1427.01,1211.16 1427.59,1211.16 1428.18,1211.16 1428.77,1211.16 1429.35,1211.16 1429.94,1211.16 1430.53,1211.16 1431.11,1211.16 1431.7,1211.16 1432.29,1211.16 1432.87,1211.16 1433.46,1211.16 1434.04,1211.16 1434.63,1211.16 1435.22,1211.16 1435.8,1211.16 1436.39,1211.16 1436.98,1211.16 1437.56,1211.16 1438.15,1211.16 1438.74,1211.16 1439.32,1211.16 1439.91,1211.16 1440.5,1211.16 1441.08,1211.16 1441.67,1211.16 1442.25,1211.16 1442.84,1211.16 1443.43,1211.16 1444.01,1211.16 1444.6,1211.16 1445.19,1211.16 1445.77,1211.16 1446.36,1211.16 1446.95,1211.16 1447.53,1211.16 1448.12,1211.16 1448.7,1211.16 1449.29,1211.16 1449.88,1211.16 1450.46,1211.16 1451.05,1211.16 1451.64,1211.16 1452.22,1211.16 1452.81,1211.16 1453.4,1211.16 1453.98,1211.16 1454.57,1211.16 1455.16,1211.16 1455.74,1211.16 1456.33,1211.16 1456.91,1211.16 1457.5,1211.16 1458.09,1211.16 1458.67,1211.16 1459.26,1211.16 1459.85,1211.16 1460.43,1211.16 1461.02,1211.16 1461.61,1211.16 1462.19,1211.16 1462.78,1211.16 1463.37,1211.16 1463.95,1211.16 1464.54,1211.16 1465.12,1211.16 1465.71,1211.16 1466.3,1211.16 1466.88,1211.16 1467.47,1211.16 1468.06,1211.16 1468.64,1211.16 1469.23,1211.16 1469.82,1211.16 1470.4,1211.16 1470.99,1211.16 1471.57,1211.16 1472.16,1211.16 1472.75,1211.16 1473.33,1211.16 1473.92,1211.16 1474.51,1211.16 1475.09,1211.16 1475.68,1211.16 1476.27,1211.16 1476.85,1211.16 1477.44,1211.16 1478.03,1211.16 1478.61,1211.16 1479.2,1211.16 1479.78,1211.16 1480.37,1211.16 1480.96,1211.16 1481.54,1211.16 1482.13,1211.16 1482.72,1211.16 1483.3,1211.16 1483.89,1211.16 1484.48,1211.16 1485.06,1211.16 1485.65,1211.16 1486.24,1211.16 1486.82,1211.16 1487.41,1211.16 1487.99,1211.16 1488.58,1211.16 1489.17,1211.16 1489.75,1211.16 1490.34,1211.16 1490.93,1211.16 1491.51,1211.16 1492.1,1211.16 1492.69,1211.16 1493.27,1211.16 1493.86,1211.16 1494.45,1211.16 1495.03,1211.16 1495.62,1211.16 1496.2,1211.16 1496.79,1211.16 1497.38,1211.16 1497.96,1211.16 1498.55,1211.16 1499.14,1211.16 1499.72,1211.16 1500.31,1211.16 1500.9,1211.16 1501.48,1211.16 1502.07,1211.16 1502.65,1211.16 1503.24,1211.16 1503.83,1211.16 1504.41,1211.16 1505,1211.16 1505.59,1211.16 1506.17,1211.16 1506.76,1211.16 1507.35,1211.16 1507.93,1211.16 1508.52,1211.16 1509.11,1211.16 1509.69,1211.16 1510.28,1211.16 1510.86,1211.16 1511.45,1211.16 1512.04,1211.16 1512.62,1211.16 1513.21,1211.16 1513.8,1211.16 1514.38,1211.16 1514.97,1211.16 1515.56,1211.16 1516.14,1211.16 1516.73,1211.16 1517.32,1211.16 1517.9,1211.16 1518.49,1211.16 1519.07,1211.16 1519.66,1211.16 1520.25,1211.16 1520.83,1211.16 1521.42,1211.16 1522.01,1211.16 1522.59,1211.16 1523.18,1211.16 1523.77,1211.16 1524.35,1211.16 1524.94,1211.16 1525.52,1211.16 1526.11,1211.16 1526.7,1211.16 1527.28,1211.16 1527.87,1211.16 1528.46,1211.16 1529.04,1211.16 1529.63,1211.16 1530.22,1211.16 1530.8,1211.16 1531.39,1211.16 1531.98,1211.16 1532.56,1211.16 1533.15,1211.16 1533.73,1211.16 1534.32,1211.16 1534.91,1211.16 1535.49,1211.16 1536.08,1211.16 1536.67,1211.16 1537.25,1211.16 1537.84,1211.16 1538.43,1211.16 1539.01,1211.16 1539.6,1211.16 1540.19,1211.16 1540.77,1211.16 1541.36,1211.16 1541.94,1211.16 1542.53,1211.16 1543.12,1211.16 1543.7,1211.16 1544.29,1211.16 1544.88,1211.16 1545.46,1211.16 1546.05,1211.16 1546.64,1211.16 1547.22,1211.16 1547.81,1211.16 1548.4,1211.16 1548.98,1211.16 1549.57,1211.16 1550.15,1211.16 1550.74,1211.16 1551.33,1211.16 1551.91,1211.16 1552.5,1211.16 1553.09,1211.16 1553.67,1211.16 1554.26,1211.16 1554.85,1211.16 1555.43,1211.16 1556.02,1211.16 1556.6,1211.16 1557.19,1211.16 1557.78,1211.16 1558.36,1211.16 1558.95,1211.16 1559.54,1211.16 1560.12,1211.16 1560.71,1211.16 1561.3,1211.16 1561.88,1211.16 1562.47,1211.16 1563.06,1211.16 1563.64,1211.16 1564.23,1211.16 1564.81,1211.16 1565.4,1211.16 1565.99,1211.16 1566.57,1211.16 1567.16,1211.16 1567.75,1211.16 1568.33,1211.16 1568.92,1211.16 1569.51,1211.16 1570.09,1211.16 1570.68,1211.16 1571.27,1211.16 1571.85,1211.16 1572.44,1211.16 1573.02,1211.16 1573.61,1211.16 1574.2,1211.16 1574.78,1211.16 1575.37,1211.16 1575.96,1211.16 1576.54,1211.16 1577.13,1211.16 1577.72,1211.16 1578.3,1211.16 1578.89,1211.16 1579.47,1211.16 1580.06,1211.16 1580.65,1211.16 1581.23,1211.16 1581.82,1211.16 1582.41,1211.16 1582.99,1211.16 1583.58,1211.16 1584.17,1211.16 1584.75,1211.16 1585.34,1211.16 1585.93,1211.16 1586.51,1211.16 1587.1,1211.16 1587.68,1211.16 1588.27,1211.16 1588.86,1211.16 1589.44,1211.16 1590.03,1211.16 1590.62,1211.16 1591.2,1211.16 1591.79,1211.16 1592.38,1211.16 1592.96,1211.16 1593.55,1211.16 1594.14,1211.16 1594.72,1211.16 1595.31,1211.16 1595.89,1211.16 1596.48,1211.16 1597.07,1211.16 1597.65,1211.16 1598.24,1211.16 1598.83,1211.16 1599.41,1211.16 1600,1211.16 1600.59,1211.16 1601.17,1211.16 1601.76,1211.16 1602.34,1211.16 1602.93,1211.16 1603.52,1211.16 1604.1,1211.16 1604.69,1211.16 1605.28,1211.16 1605.86,1211.16 1606.45,1211.16 1607.04,1211.16 1607.62,1211.16 1608.21,1211.16 1608.8,1211.16 1609.38,1211.16 1609.97,1211.16 1610.55,1211.16 1611.14,1211.16 1611.73,1211.16 1612.31,1211.16 1612.9,1211.16 1613.49,1211.16 1614.07,1211.16 1614.66,1211.16 1615.25,1211.16 1615.83,1211.16 1616.42,1211.16 1617.01,1211.16 1617.59,1211.16 1618.18,1211.16 1618.76,1211.16 1619.35,1211.16 1619.94,1211.16 1620.52,1211.16 1621.11,1211.16 1621.7,1211.16 1622.28,1211.16 1622.87,1211.16 1623.46,1211.16 1624.04,1211.16 1624.63,1211.16 1625.22,1211.16 1625.8,1211.16 1626.39,1211.16 1626.97,1211.16 1627.56,1211.16 1628.15,1211.16 1628.73,1211.16 1629.32,1211.16 1629.91,1211.16 1630.49,1211.16 1631.08,1211.16 1631.67,1211.16 1632.25,1211.16 1632.84,1211.16 1633.42,1211.16 1634.01,1211.16 1634.6,1211.16 1635.18,1211.16 1635.77,1211.16 1636.36,1211.16 1636.94,1211.16 1637.53,1211.16 1638.12,1211.16 1638.7,1211.16 1639.29,1211.16 1639.88,1211.16 1640.46,1211.16 1641.05,1211.16 1641.63,1211.16 1642.22,1211.16 1642.81,1211.16 1643.39,1211.16 1643.98,1211.16 1644.57,1211.16 1645.15,1211.16 1645.74,1211.16 1646.33,1211.16 1646.91,1211.16 1647.5,1211.16 1648.09,1211.16 1648.67,1211.16 1649.26,1211.16 1649.84,1211.16 1650.43,1211.16 1651.02,1211.16 1651.6,1211.16 1652.19,1211.16 1652.78,1211.16 1653.36,1211.16 1653.95,1211.16 1654.54,1211.16 1655.12,1211.16 1655.71,1211.16 1656.29,1211.16 1656.88,1211.16 1657.47,1211.16 1658.05,1211.16 1658.64,1211.16 1659.23,1211.16 1659.81,1211.16 1660.4,1211.16 1660.99,1211.16 1661.57,1211.16 1662.16,1211.16 1662.75,1211.16 1663.33,1211.16 1663.92,1211.16 1664.5,1211.16 1665.09,1211.16 1665.68,1211.16 1666.26,1211.16 1666.85,1211.16 1667.44,1211.16 1668.02,1211.16 1668.61,1211.16 1669.2,1211.16 1669.78,1211.16 1670.37,1211.16 1670.96,1211.16 1671.54,1211.16 1672.13,1211.16 1672.71,1211.16 1673.3,1211.16 1673.89,1211.16 1674.47,1211.16 1675.06,1211.16 1675.65,1211.16 1676.23,1211.16 1676.82,1211.16 1677.41,1211.16 1677.99,1211.16 1678.58,1211.16 1679.17,1211.16 1679.75,1211.16 1680.34,1211.16 1680.92,1211.16 1681.51,1211.16 1682.1,1211.16 1682.68,1211.16 1683.27,1211.16 1683.86,1211.16 1684.44,1211.16 1685.03,1211.16 1685.62,1211.16 1686.2,1211.16 1686.79,1211.16 1687.37,1211.16 1687.96,1211.16 1688.55,1211.16 1689.13,1211.16 1689.72,1211.16 1690.31,1211.16 1690.89,1211.16 1691.48,1211.16 1692.07,1211.16 1692.65,1211.16 1693.24,1211.16 1693.83,1211.16 1694.41,1211.16 1695,1211.16 1695.58,1211.16 1696.17,1211.16 1696.76,1211.16 1697.34,1211.16 1697.93,1211.16 1698.52,1211.16 1699.1,1211.16 1699.69,1211.16 1700.28,1211.16 1700.86,1211.16 1701.45,1211.16 1702.04,1211.16 1702.62,1211.16 1703.21,1211.16 1703.79,1211.16 1704.38,1211.16 1704.97,1211.16 1705.55,1211.16 1706.14,1211.16 1706.73,1211.16 1707.31,1211.16 1707.9,1211.16 1708.49,1211.16 1709.07,1211.16 1709.66,1211.16 1710.24,1211.16 1710.83,1211.16 1711.42,1211.16 1712,1211.16 1712.59,1211.16 1713.18,1211.16 1713.76,1211.16 1714.35,1211.16 1714.94,1211.16 1715.52,1211.16 1716.11,1211.16 1716.7,1211.16 1717.28,1211.16 1717.87,1211.16 1718.45,1211.16 1719.04,1211.16 1719.63,1211.16 1720.21,1211.16 1720.8,1211.16 1721.39,1211.16 1721.97,1211.16 1722.56,1211.16 1723.15,1211.16 1723.73,1211.16 1724.32,1211.16 1724.91,1211.16 1725.49,1211.16 1726.08,1211.16 1726.66,1211.16 1727.25,1211.16 1727.84,1211.16 1728.42,1211.16 1729.01,1211.16 1729.6,1211.16 1730.18,1211.16 1730.77,1211.16 1731.36,1211.16 1731.94,1211.16 1732.53,1211.16 1733.11,1211.16 1733.7,1211.16 1734.29,1211.16 1734.87,1211.16 1735.46,1211.16 1736.05,1211.16 1736.63,1211.16 1737.22,1211.16 1737.81,1211.16 1738.39,1211.16 1738.98,1211.16 1739.57,1211.16 1740.15,1211.16 1740.74,1211.16 1741.32,1211.16 1741.91,1211.16 1742.5,1211.16 1743.08,1211.16 1743.67,1211.16 1744.26,1211.16 1744.84,1211.16 1745.43,1211.16 1746.02,1211.16 1746.6,1211.16 1747.19,1211.16 1747.78,1211.16 1748.36,1211.16 1748.95,1211.16 1749.53,1211.16 1750.12,1211.16 1750.71,1211.16 1751.29,1211.16 1751.88,1211.16 1752.47,1211.16 1753.05,1211.16 1753.64,1211.16 1754.23,1211.16 1754.81,1211.16 1755.4,1211.16 1755.99,1211.16 1756.57,1211.16 1757.16,1211.16 1757.74,1211.16 1758.33,1211.16 1758.92,1211.16 1759.5,1211.16 1760.09,1211.16 1760.68,1211.16 1761.26,1211.16 1761.85,1211.16 1762.44,1211.16 1763.02,1211.16 1763.61,1211.16 1764.19,1211.16 1764.78,1211.16 1765.37,1211.16 1765.95,1211.16 1766.54,1211.16 1767.13,1211.16 1767.71,1211.16 1768.3,1211.16 1768.89,1211.16 1769.47,1211.16 1770.06,1211.16 1770.65,1211.16 1771.23,1211.16 1771.82,1211.16 1772.4,1211.16 1772.99,1211.16 1773.58,1211.16 1774.16,1211.16 1774.75,1211.16 1775.34,1211.16 1775.92,1211.16 1776.51,1211.16 1777.1,1211.16 1777.68,1211.16 1778.27,1211.16 1778.86,1211.16 1779.44,1211.16 1780.03,1211.16 1780.61,1211.16 1781.2,1211.16 1781.79,1211.16 1782.37,1211.16 1782.96,1211.16 1783.55,1211.16 1784.13,1211.16 1784.72,1211.16 1785.31,1211.16 1785.89,1211.16 1786.48,1211.16 1787.06,1211.16 1787.65,1211.16 1788.24,1211.16 1788.82,1211.16 1789.41,1211.16 1790,1211.16 1790.58,1211.16 1791.17,1211.16 1791.76,1211.16 1792.34,1211.16 1792.93,1211.16 1793.52,1211.16 1794.1,1211.16 1794.69,1211.16 1795.27,1211.16 1795.86,1211.16 1796.45,1211.16 1797.03,1211.16 1797.62,1211.16 1798.21,1211.16 1798.79,1211.16 1799.38,1211.16 1799.97,1211.16 1800.55,1211.16 1801.14,1211.16 1801.73,1211.16 1802.31,1211.16 1802.9,1211.16 1803.48,1211.16 1804.07,1211.16 1804.66,1211.16 1805.24,1211.16 1805.83,1211.16 1806.42,1211.16 1807,1211.16 1807.59,1211.16 1808.18,1211.16 1808.76,1211.16 1809.35,1211.16 1809.94,1211.16 1810.52,1211.16 1811.11,1211.16 1811.69,1211.16 1812.28,1211.16 1812.87,1211.16 1813.45,1211.16 1814.04,1211.16 1814.63,1211.16 1815.21,1211.16 1815.8,1211.16 1816.39,1211.16 1816.97,1211.16 1817.56,1211.16 1818.14,1211.16 1818.73,1211.16 1819.32,1211.16 1819.9,1211.16 1820.49,1211.16 1821.08,1211.16 1821.66,1211.16 1822.25,1211.16 1822.84,1211.16 1823.42,1211.16 1824.01,1211.16 1824.6,1211.16 1825.18,1211.16 1825.77,1211.16 1826.35,1211.16 1826.94,1211.16 1827.53,1211.16 1828.11,1211.16 1828.7,1211.16 1829.29,1211.16 1829.87,1211.16 1830.46,1211.16 1831.05,1211.16 1831.63,1211.16 1832.22,1211.16 1832.81,1211.16 1833.39,1211.16 1833.98,1211.16 1834.56,1211.16 1835.15,1211.16 1835.74,1211.16 1836.32,1211.16 1836.91,1211.16 1837.5,1211.16 1838.08,1211.16 1838.67,1211.16 1839.26,1211.16 1839.84,1211.16 1840.43,1211.16 1841.01,1211.16 1841.6,1211.16 1842.19,1211.16 1842.77,1211.16 1843.36,1211.16 1843.95,1211.16 1844.53,1211.16 1845.12,1211.16 1845.71,1211.16 1846.29,1211.16 1846.88,1211.16 1847.47,1211.16 1848.05,1211.16 1848.64,1211.16 1849.22,1211.16 1849.81,1211.16 1850.4,1211.16 1850.98,1211.16 1851.57,1211.16 1852.16,1211.16 1852.74,1211.16 1853.33,1211.16 1853.92,1211.16 1854.5,1211.16 1855.09,1211.16 1855.68,1211.16 1856.26,1211.16 1856.85,1211.16 1857.43,1211.16 1858.02,1211.16 1858.61,1211.16 1859.19,1211.16 1859.78,1211.16 1860.37,1211.16 1860.95,1211.16 1861.54,1211.16 1862.13,1211.16 1862.71,1211.16 1863.3,1211.16 1863.88,1211.16 1864.47,1211.16 1865.06,1211.16 1865.64,1211.16 1866.23,1211.16 1866.82,1211.16 1867.4,1211.16 1867.99,1211.16 1868.58,1211.16 1869.16,1211.16 1869.75,1211.16 1870.34,1211.16 1870.92,1211.16 1871.51,1211.16 1872.09,1211.16 1872.68,1211.16 1873.27,1211.16 1873.85,1211.16 1874.44,1211.16 1875.03,1211.16 1875.61,1211.16 1876.2,1211.16 1876.79,1211.16 1877.37,1211.16 1877.96,1211.16 1878.55,1211.16 1879.13,1211.16 1879.72,1211.16 1880.3,1211.16 1880.89,1211.16 1881.48,1211.16 1882.06,1211.16 1882.65,1211.16 1883.24,1211.16 1883.82,1211.16 1884.41,1211.16 1885,1211.16 1885.58,1211.16 1886.17,1211.16 1886.76,1211.16 1887.34,1211.16 1887.93,1211.16 1888.51,1211.16 1889.1,1211.16 1889.69,1211.16 1890.27,1211.16 1890.86,1211.16 1891.45,1211.16 1892.03,1211.16 1892.62,1211.16 1893.21,1211.16 1893.79,1211.16 1894.38,1211.16 1894.96,1211.16 1895.55,1211.16 1896.14,1211.16 1896.72,1211.16 1897.31,1211.16 1897.9,1211.16 1898.48,1211.16 1899.07,1211.16 1899.66,1211.16 1900.24,1211.16 1900.83,1211.16 1901.42,1211.16 1902,1211.16 1902.59,1211.16 1903.17,1211.16 1903.76,1211.16 1904.35,1211.16 1904.93,1211.16 1905.52,1211.16 1906.11,1211.16 1906.69,1211.16 1907.28,1211.16 1907.87,1211.16 1908.45,1211.16 1909.04,1211.16 1909.63,1211.16 1910.21,1211.16 1910.8,1211.16 1911.38,1211.16 1911.97,1211.16 1912.56,1211.16 1913.14,1211.16 1913.73,1211.16 1914.32,1211.16 1914.9,1211.16 1915.49,1211.16 1916.08,1211.16 1916.66,1211.16 1917.25,1211.16 1917.83,1211.16 1918.42,1211.16 1919.01,1211.16 1919.59,1211.16 1920.18,1211.16 1920.77,1211.16 1921.35,1211.16 1921.94,1211.16 1922.53,1211.16 1923.11,1211.16 1923.7,1211.16 1924.29,1211.16 1924.87,1211.16 1925.46,1211.16 1926.04,1211.16 1926.63,1211.16 1927.22,1211.16 1927.8,1211.16 1928.39,1211.16 1928.98,1211.16 1929.56,1211.16 1930.15,1211.16 1930.74,1211.16 1931.32,1211.16 1931.91,1211.16 1932.5,1211.16 1933.08,1211.16 1933.67,1211.16 1934.25,1211.16 1934.84,1211.16 1935.43,1211.16 1936.01,1211.16 1936.6,1211.16 1937.19,1211.16 1937.77,1211.16 1938.36,1211.16 1938.95,1211.16 1939.53,1211.16 1940.12,1211.16 1940.71,1211.16 1941.29,1211.16 1941.88,1211.16 1942.46,1211.16 1943.05,1211.16 1943.64,1211.16 1944.22,1211.16 1944.81,1211.16 1945.4,1211.16 1945.98,1211.16 1946.57,1211.16 1947.16,1211.16 1947.74,1211.16 1948.33,1211.16 1948.91,1211.16 1949.5,1211.16 1950.09,1211.16 1950.67,1211.16 1951.26,1211.16 1951.85,1211.16 1952.43,1211.16 1953.02,1211.16 1953.61,1211.16 1954.19,1211.16 1954.78,1211.16 1955.37,1211.16 1955.95,1211.16 1956.54,1211.16 1957.12,1211.16 1957.71,1211.16 1958.3,1211.16 1958.88,1211.16 1959.47,1211.16 1960.06,1211.16 1960.64,1211.16 1961.23,1211.16 1961.82,1211.16 1962.4,1211.16 1962.99,1211.16 1963.58,1211.16 1964.16,1211.16 1964.75,1211.16 1965.33,1211.16 1965.92,1211.16 1966.51,1211.16 1967.09,1211.16 1967.68,1211.16 1968.27,1211.16 1968.85,1211.16 1969.44,1211.16 1970.03,1211.16 1970.61,1211.16 1971.2,1211.16 1971.78,1211.16 1972.37,1211.16 1972.96,1211.16 1973.54,1211.16 1974.13,1211.16 1974.72,1211.16 1975.3,1211.16 1975.89,1211.16 1976.48,1211.16 1977.06,1211.16 1977.65,1211.16 1978.24,1211.16 1978.82,1211.16 1979.41,1211.16 1979.99,1211.16 1980.58,1211.16 1981.17,1211.16 1981.75,1211.16 1982.34,1211.16 1982.93,1211.16 1983.51,1211.16 1984.1,1211.16 1984.69,1211.16 1985.27,1211.16 1985.86,1211.16 1986.45,1211.16 1987.03,1211.16 1987.62,1211.16 1988.2,1211.16 1988.79,1211.16 1989.38,1211.16 1989.96,1211.16 1990.55,1211.16 1991.14,1211.16 1991.72,1211.16 1992.31,1211.16 1992.9,1211.16 1993.48,1211.16 1994.07,1211.16 1994.65,1211.16 1995.24,1211.16 1995.83,1211.16 1996.41,1211.16 1997,1211.16 1997.59,1211.16 1998.17,1211.16 1998.76,1211.16 1999.35,1211.16 1999.93,1211.16 2000.52,1211.16 2001.11,1211.16 2001.69,1211.16 2002.28,1211.16 2002.86,1211.16 2003.45,1211.16 2004.04,1211.16 2004.62,1211.16 2005.21,1211.16 2005.8,1211.16 2006.38,1211.16 2006.97,1211.16 2007.56,1211.16 2008.14,1211.16 2008.73,1211.16 2009.32,1211.16 2009.9,1211.16 2010.49,1211.16 2011.07,1211.16 2011.66,1211.16 2012.25,1211.16 2012.83,1211.16 2013.42,1211.16 2014.01,1211.16 2014.59,1211.16 2015.18,1211.16 2015.77,1211.16 2016.35,1211.16 2016.94,1211.16 2017.53,1211.16 2018.11,1211.16 2018.7,1211.16 2019.28,1211.16 2019.87,1211.16 2020.46,1211.16 2021.04,1211.16 2021.63,1211.16 2022.22,1211.16 2022.8,1211.16 2023.39,1211.16 2023.98,1211.16 2024.56,1211.16 2025.15,1211.16 2025.73,1211.16 2026.32,1211.16 2026.91,1211.16 2027.49,1211.16 2028.08,1211.16 2028.67,1211.16 2029.25,1211.16 2029.84,1211.16 2030.43,1211.16 2031.01,1211.16 2031.6,1211.16 2032.19,1211.16 2032.77,1211.16 2033.36,1211.16 2033.94,1211.16 2034.53,1211.16 2035.12,1211.16 2035.7,1211.16 2036.29,1211.16 2036.88,1211.16 2037.46,1211.16 2038.05,1211.16 2038.64,1211.16 2039.22,1211.16 2039.81,1211.16 2040.4,1211.16 2040.98,1211.16 2041.57,1211.16 2042.15,1211.16 2042.74,1211.16 2043.33,1211.16 2043.91,1211.16 2044.5,1211.16 2045.09,1211.16 2045.67,1211.16 2046.26,1211.16 2046.85,1211.16 2047.43,1211.16 2048.02,1211.16 2048.6,1211.16 2049.19,1211.16 2049.78,1211.16 2050.36,1211.16 2050.95,1211.16 2051.54,1211.16 2052.12,1211.16 2052.71,1211.16 2053.3,1211.16 2053.88,1211.16 2054.47,1211.16 2055.06,1211.16 2055.64,1211.16 2056.23,1211.16 2056.81,1211.16 2057.4,1211.16 2057.99,1211.16 2058.57,1211.16 2059.16,1211.16 2059.75,1211.16 2060.33,1211.16 2060.92,1211.16 2061.51,1211.16 2062.09,1211.16 2062.68,1211.16 2063.27,1211.16 2063.85,1211.16 2064.44,1211.16 2065.02,1211.16 2065.61,1211.16 2066.2,1211.16 2066.78,1211.16 2067.37,1211.16 2067.96,1211.16 2068.54,1211.16 2069.13,1211.16 2069.72,1211.16 2070.3,1211.16 2070.89,1211.16 2071.48,1211.16 2072.06,1211.16 2072.65,1211.16 2073.23,1211.16 2073.82,1211.16 2074.41,1211.16 2074.99,1211.16 2075.58,1211.16 2076.17,1211.16 2076.75,1211.16 2077.34,1211.16 2077.93,1211.16 2078.51,1211.16 2079.1,1211.16 2079.68,1211.16 2080.27,1211.16 2080.86,1211.16 2081.44,1211.16 2082.03,1211.16 2082.62,1211.16 2083.2,1211.16 2083.79,1211.16 2084.38,1211.16 2084.96,1211.16 2085.55,1211.16 2086.14,1211.16 2086.72,1211.16 2087.31,1211.16 2087.89,1211.16 2088.48,1211.16 2089.07,1211.16 2089.65,1211.16 2090.24,1211.16 2090.83,1211.16 2091.41,1211.16 2092,1211.16 2092.59,1211.16 2093.17,1211.16 2093.76,1211.16 2094.35,1211.16 2094.93,1211.16 2095.52,1211.16 2096.1,1211.16 2096.69,1211.16 2097.28,1211.16 2097.86,1211.16 2098.45,1211.16 2099.04,1211.16 2099.62,1211.16 2100.21,1211.16 2100.8,1211.16 2101.38,1211.16 2101.97,1211.16 2102.55,1211.16 2103.14,1211.16 2103.73,1211.16 2104.31,1211.16 2104.9,1211.16 2105.49,1211.16 2106.07,1211.16 2106.66,1211.16 2107.25,1211.16 2107.83,1211.16 2108.42,1211.16 2109.01,1211.16 2109.59,1211.16 2110.18,1211.16 2110.76,1211.16 2111.35,1211.16 2111.94,1211.16 2112.52,1211.16 2113.11,1211.16 2113.7,1211.16 2114.28,1211.16 2114.87,1211.16 2115.46,1211.16 2116.04,1211.16 2116.63,1211.16 2117.22,1211.16 2117.8,1211.16 2118.39,1211.16 2118.97,1211.16 2119.56,1211.16 2120.15,1211.16 2120.73,1211.16 2121.32,1211.16 2121.91,1211.16 2122.49,1211.16 2123.08,1211.16 2123.67,1211.16 2124.25,1211.16 2124.84,1211.16 2125.42,1211.16 2126.01,1211.16 2126.6,1211.16 2127.18,1211.16 2127.77,1211.16 2128.36,1211.16 2128.94,1211.16 2129.53,1211.16 2130.12,1211.16 2130.7,1211.16 2131.29,1211.16 2131.88,1211.16 2132.46,1211.16 2133.05,1211.16 2133.63,1211.16 2134.22,1211.16 2134.81,1211.16 2135.39,1211.16 2135.98,1211.16 2136.57,1211.16 2137.15,1211.16 2137.74,1211.16 2138.33,1211.16 2138.91,1211.16 2139.5,1211.16 2140.09,1211.16 2140.67,1211.16 2141.26,1211.16 2141.84,1211.16 2142.43,1211.16 2143.02,1211.16 2143.6,1211.16 2144.19,1211.16 2144.78,1211.16 2145.36,1211.16 2145.95,1211.16 2146.54,1211.16 2147.12,1211.16 2147.71,1211.16 2148.3,1211.16 2148.88,1211.16 2149.47,1211.16 2150.05,1211.16 2150.64,1211.16 2151.23,1211.16 2151.81,1211.16 2152.4,1211.16 2152.99,1211.16 2153.57,1211.16 2154.16,1211.16 2154.75,1211.16 2155.33,1211.16 2155.92,1211.16 2156.5,1211.16 2157.09,1211.16 2157.68,1211.16 2158.26,1211.16 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.99,1193.08 1399.61,899.083 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.8 985.439,1193.08 2158.26,1193.08 2158.26,1228.8 985.439,1228.8 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip060)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip060)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip063\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip063)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2699.44 162.673,-3902.72 163.232,-5029.64 163.792,-6040.16 164.351,-5702.01 164.91,-6582.43 165.469,-7424.52 166.029,-7056.92 166.588,-7791.07 167.147,-8456.25 167.706,-9039.73 168.266,-9581.05 168.825,-10065.9 169.384,-10480.8 169.943,-10125.8 170.503,-10515.5 171.062,-10220.1 171.621,-10532.6 172.18,-10810.1 172.74,-11057.4 173.299,-11268.5 173.858,-11445.9 174.417,-11147.4 174.977,-11278.1 175.536,-11358 176.095,-11058.8 176.655,-10776.1 177.214,-10812.1 177.773,-10838 178.332,-10558.9 178.892,-10294.4 179.451,-10284.4 180.01,-10259.9 180.569,-10221.1 181.129,-9964.33 181.688,-9898.87 182.247,-9651.67 182.806,-9566.58 183.366,-9486.47 183.925,-9393.44 184.484,-9153.48 185.043,-9060.31 185.603,-8833.85 186.162,-8466.79 186.721,-8345.66 187.28,-8211.55 187.84,-7775.86 188.399,-7553.91 188.958,-7431.59 189.517,-7227.29 190.077,-7111.47 190.636,-6907.2 191.195,-6787.64 191.754,-6663.08 192.314,-6466.91 192.873,-6203.18 193.432,-6002.76 193.991,-5805.49 194.551,-5679.14 195.11,-5550.49 195.669,-5369.81 196.228,-5190.47 196.788,-5019.47 197.347,-4903.4 197.906,-4635.36 198.465,-4522.8 199.025,-4314.07 199.584,-4210 200.143,-4057.85 200.702,-3907.68 201.262,-3674.88 201.821,-3454.44 202.38,-3359.4 202.939,-3189.48 203.499,-3064.99 204.058,-2976.98 204.617,-2747.49 205.176,-2565.48 205.736,-2398.63 206.295,-2301.34 206.854,-2208.56 207.413,-2113.93 207.973,-2020.18 208.532,-1957.15 209.091,-1839.06 209.65,-1693.09 210.21,-1637.92 210.769,-1526.25 211.328,-1448.71 211.887,-1316.95 212.447,-1191.88 213.006,-1095.91 213.565,-1054.63 214.124,-962.814 214.684,-848.27 215.243,-789.325 215.802,-751.668 216.361,-718.083 216.921,-685.876 217.48,-652.04 218.039,-520.505 218.598,-466.204 219.158,-383.323 219.717,-355.875 220.276,-257.198 220.835,-207.87 221.395,-161.24 221.954,-93.0649 222.513,16.4118 223.072,56.457 223.632,120.508 224.191,176 224.75,207.139 225.309,243.688 225.869,295.738 226.428,368.147 226.987,372.418 227.546,421.375 228.106,468.228 228.665,532.366 229.224,568.867 229.783,583.589 230.343,620.855 230.902,596.125 231.461,633.181 232.02,688.212 232.58,685.074 233.139,704.866 233.698,718.792 234.257,677.885 234.817,693.895 235.376,744.718 235.935,755.708 236.494,765.169 237.054,796.787 237.613,831.803 238.172,807.901 238.731,803.246 239.291,929.705 239.85,939.862 240.409,949.267 240.968,959.911 241.528,986.354 242.087,997.088 242.646,987.095 243.205,974.201 243.765,985.449 244.324,1064.86 244.883,1055.31 245.442,1046.5 246.002,1016.07 246.561,970.998 247.12,967.152 247.679,1013.41 248.239,1021.97 248.798,1067.2 249.357,1055.21 249.916,1065.95 250.476,1088.7 251.035,1079.08 251.594,1054.29 252.153,1029.86 252.713,970.468 253.272,968.091 253.831,977.448 254.39,970.67 254.95,981.641 255.509,926.552 256.068,922.803 256.627,955.238 257.187,986.385 257.746,981.375 258.305,964.35 258.864,958.513 259.424,955.613 259.983,937.524 260.542,938.866 261.101,954.885 261.661,969.542 262.22,935.629 262.779,987.493 263.338,984.281 263.898,1029.3 264.457,1041.63 265.016,1081.49 265.575,1104.65 266.135,1063.2 266.694,1074.62 267.253,1084.04 267.812,1094.25 268.372,1136.71 268.931,1107.91 269.49,1113.45 270.049,1104.58 270.609,1078.62 271.168,1106.07 271.727,1148.93 272.286,1153.9 272.846,1160.9 273.405,1164.99 273.964,1134.76 274.523,1104.74 275.083,1113.37 275.642,1104.77 276.201,1107.48 276.76,1098.49 277.32,1072.03 277.879,1064.17 278.438,1040.89 278.997,1051.52 279.557,1060.63 280.116,1071.92 280.675,1095.18 281.234,1087.71 281.794,1077.26 282.353,1104.23 282.912,1062.42 283.471,1053.93 284.031,1065.16 284.59,1056.4 285.149,1031.89 285.708,1045.99 286.268,1020.2 286.827,1015.35 287.386,1026.1 287.945,1019.63 288.505,1030.73 289.064,1075.35 289.623,1066.98 290.182,1089.83 290.742,1083.19 291.301,1086.86 291.86,1077.91 292.419,1054.02 292.979,1047.1 293.538,1006.49 294.097,1017.92 294.656,1009.38 295.216,1005.64 295.775,1033.9 296.334,1027.07 296.893,1018.28 297.453,1043.01 298.012,1069.1 298.571,1061.02 299.13,1069.71 299.69,1059.96 300.249,1100.19 300.808,1057.21 301.368,1000.41 301.927,998.019 302.486,1012.2 303.045,1006.39 303.605,1000.58 304.164,1027.84 304.723,1036.64 305.282,1031.4 305.842,1041.46 306.401,1032.73 306.96,1027.95 307.519,1018.8 308.079,963.974 308.638,962.791 309.197,975.109 309.756,951.124 310.316,996.099 310.875,989.45 311.434,1017.5 311.993,1024.84 312.553,1001.39 313.112,997.74 313.671,990.097 314.23,982.962 314.79,976.941 315.349,1019.62 315.908,995.717 316.467,989.28 317.027,1046.25 317.586,1085.85 318.145,1057.79 318.704,1113.65 319.264,1084.19 319.823,1073.45 320.382,1060.82 320.941,1051.44 321.501,1026.32 322.06,988.974 322.619,1017.34 323.178,1038.75 323.738,1015.13 324.297,1037.47 324.856,1027.22 325.415,1015.83 325.975,987.039 326.534,959.214 327.093,954.326 327.652,964.184 328.212,995.64 328.771,1053.15 329.33,1072.21 329.889,1025.14 330.449,1031.44 331.008,1004.84 331.567,1029.06 332.126,1035.72 332.686,1043.19 333.245,1037.06 333.804,1063.67 334.363,1052.37 334.923,1073.54 335.482,1096.96 336.041,1036.68 336.6,983.855 337.16,994.442 337.719,985.486 338.278,962.455 338.837,974.214 339.397,968.305 339.956,930.656 340.515,910.762 341.074,887.867 341.634,885.897 342.193,884.519 342.752,866.614 343.311,850.139 343.871,853.408 344.43,853.282 344.989,836.068 345.548,850.385 346.108,833.249 346.667,830.886 347.226,828.707 347.785,825.613 348.345,827.214 348.904,794.173 349.463,778.167 350.022,780.891 350.582,796.595 351.141,799.403 351.7,785.407 352.259,722.702 352.819,711.493 353.378,719.369 353.937,710.695 354.496,733.56 355.056,753.944 355.615,744.053 356.174,784.177 356.733,819.106 357.293,821.86 357.852,823.316 358.411,806.74 358.97,825.457 359.53,856.995 360.089,837.283 360.648,851.936 361.207,862.668 361.767,876.778 362.326,872.49 362.885,850.868 363.444,850.572 364.004,864.033 364.563,830.75 365.122,844.39 365.681,873.643 366.241,883.508 366.8,879.553 367.359,876.524 367.918,889.446 368.478,900.815 369.037,893.515 369.596,888.801 370.155,887.281 370.715,899.413 371.274,877.346 371.833,861.911 372.392,834.262 372.952,833.579 373.511,834.279 374.07,847.658 374.629,834.79 375.189,800.572 375.748,831.508 376.307,862.212 376.866,827.271 377.426,826.106 377.985,842.188 378.544,842.025 379.103,841.992 379.663,825.555 380.222,776.426 380.781,777.453 381.34,783.001 381.9,828.921 382.459,829.797 383.018,847.104 383.577,865.02 384.137,817.007 384.696,865.61 385.255,876.722 385.814,856.352 386.374,866.486 386.933,847.007 387.492,861.592 388.051,844.085 388.611,842.56 389.17,823.616 389.729,836.624 390.288,834.391 390.848,869.383 391.407,862.744 391.966,860.528 392.525,840.558 393.085,821.513 393.644,818.666 394.203,800.436 394.762,784.145 395.322,788.815 395.881,775.357 396.44,775.323 396.999,777.106 397.559,794.914 398.118,811.259 398.677,811.573 399.236,792.564 399.796,790.639 400.355,773.979 400.914,809.909 401.473,792.689 402.033,825.1 402.592,824.533 403.151,840.428 403.71,822.239 404.27,849.858 404.829,858.247 405.388,853.029 405.947,851.269 406.507,816.763 407.066,827.296 407.625,838.04 408.184,854.478 408.744,848.889 409.303,828.547 409.862,855.028 410.421,850.18 410.981,841.55 411.54,853.826 412.099,831.336 412.658,860.304 413.218,854.716 413.777,851.194 414.336,898.82 414.895,843.14 415.455,841.026 416.014,836.191 416.573,845.27 417.132,859.81 417.692,855.37 418.251,854.988 418.81,863.174 419.369,843.106 419.929,854.58 420.488,882.434 421.047,860.852 421.606,884.986 422.166,893.817 422.725,884.203 423.284,892.574 423.843,870.786 424.403,846.63 424.962,860.261 425.521,870.146 426.08,865.621 426.64,876.263 427.199,853.233 427.758,882.701 428.318,859.351 428.877,821.294 429.436,818.042 429.995,800.143 430.555,778.41 431.114,796.163 431.673,813.426 432.232,807.055 432.792,787.237 433.351,783.391 433.91,814.801 434.469,826.612 435.029,806.855 435.588,802.893 436.147,801.408 436.706,829.361 437.266,828.898 437.825,822.709 438.384,821.561 438.943,833.239 439.503,840.205 440.062,819.752 440.621,817.75 441.18,799.524 441.74,812.813 442.299,807.982 442.858,774.543 443.417,791.091 443.977,787.464 444.536,752.89 445.095,732.415 445.654,748.177 446.214,748.572 446.773,782.352 447.332,782.68 447.891,797.416 448.451,779.435 449.01,794.127 449.569,808.329 450.128,839.076 450.688,850.425 451.247,816.499 451.806,814.96 452.365,843.154 452.925,852.444 453.484,861.888 454.043,854.951 454.602,847.086 455.162,843.968 455.721,840.844 456.28,821.089 456.839,801.921 457.399,799.794 457.958,797.296 458.517,762.86 459.076,727.106 459.636,712.959 460.195,715.206 460.754,685.816 461.313,688.559 461.873,674.808 462.432,676.742 462.991,648.633 463.55,654.925 464.11,660.36 464.669,665.218 465.228,672.38 465.787,659.592 466.347,647.184 466.906,653.708 467.465,686.986 468.024,675.678 468.584,726.318 469.143,711.794 469.702,681.687 470.261,648.496 470.821,623.748 471.38,646.427 471.939,654.841 472.498,691.383 473.058,711.483 473.617,728.964 474.176,746.366 474.735,765.346 475.295,747.369 475.854,744.085 476.413,760.209 476.972,774.281 477.532,773.015 478.091,784.829 478.65,797.228 479.209,810 479.769,774.588 480.328,774.316 480.887,804.473 481.446,817.864 482.006,830.999 482.565,845.1 483.124,838.083 483.683,830.673 484.243,792.069 484.802,804.578 485.361,815.348 485.92,792.542 486.48,791.064 487.039,775.533 487.598,771.113 488.157,768.478 488.717,722.065 489.276,707.858 489.835,710.561 490.394,682.168 490.954,700.365 491.513,717.583 492.072,703.589 492.631,686.983 493.191,707.485 493.75,676.682 494.309,694.596 494.868,698.925 495.428,697.738 495.987,686.25 496.546,720.535 497.105,670.611 497.665,659.742 498.224,648.433 498.783,682.555 499.342,699.378 499.902,685.206 500.461,671.496 501.02,676.799 501.579,679.864 502.139,665.25 502.698,649.381 503.257,636.469 503.816,626.537 504.376,631.804 504.935,655.331 505.494,640.84 506.053,644.667 506.613,650.492 507.172,672.43 507.731,658.939 508.29,663.048 508.85,650.168 509.409,685.982 509.968,706.351 510.527,741.848 511.087,727.471 511.646,694.533 512.205,725.13 512.764,710.026 513.324,710.477 513.883,716.115 514.442,732.564 515.001,728.432 515.561,730.456 516.12,734.292 516.679,813.108 517.238,789.018 517.798,784.148 518.357,781.038 518.916,777.053 519.475,754.393 520.035,753.799 520.594,736.565 521.153,752.091 521.712,780.872 522.272,796.246 522.831,789.207 523.39,770.862 523.949,770.642 524.509,705.781 525.068,709.396 525.627,707.474 526.186,694.313 526.746,728.495 527.305,697.283 527.864,680.839 528.423,664.366 528.983,668.987 529.542,639.72 530.101,646.425 530.66,652.505 531.22,673.093 531.779,678.206 532.338,680.247 532.897,683.669 533.457,721.487 534.016,706.082 534.575,706.65 535.134,721.499 535.694,704.747 536.253,710.674 536.812,710.851 537.371,727.515 537.931,726.917 538.49,711.728 539.049,711.64 539.608,743.215 540.168,791.058 540.727,805.376 541.286,819.494 541.845,846.891 542.405,862.397 542.964,857.443 543.523,849.383 544.082,808.796 544.642,789.416 545.201,754.51 545.76,724.224 546.319,758.607 546.879,774.338 547.438,789.144 547.997,768.49 548.556,750.066 549.116,716.48 549.675,717.209 550.234,733.462 550.793,765.386 551.353,778.741 551.912,779.283 552.471,760.722 553.031,776.283 553.59,790.594 554.149,787.378 554.708,784.04 555.268,779.507 555.827,774.021 556.386,755.801 556.945,740.16 557.505,752.94 558.064,751.729 558.623,733 559.182,747.131 559.742,774.186 560.301,801.295 560.86,793.966 561.419,741.389 561.979,754.493 562.538,768.594 563.097,751.962 563.656,766.115 564.216,763.152 564.775,793.153 565.334,790.859 565.893,786.172 566.453,763.3 567.012,779.468 567.571,777.016 568.13,769.891 568.69,763.731 569.249,776.696 569.808,803.012 570.367,798.74 570.927,795.238 571.486,773.893 572.045,756.32 572.604,755.68 573.164,769.366 573.723,781.607 574.282,792.46 574.841,774.302 575.401,766.965 575.96,765.479 576.519,809.412 577.078,817.456 577.638,814.938 578.197,804.543 578.756,783.157 579.315,795.276 579.875,793.176 580.434,740.194 580.993,755.012 581.552,766.527 582.112,731.522 582.671,696.546 583.23,694.284 583.789,724.037 584.349,704.574 584.908,703.792 585.467,701.13 586.026,718.244 586.586,714.724 587.145,676.708 587.704,692.239 588.263,692.29 588.823,692.647 589.382,707.354 589.941,690.361 590.5,641.129 591.06,644.076 591.619,697.612 592.178,681.092 592.737,681.584 593.297,697.95 593.856,685.736 594.415,703.088 594.974,690.189 595.534,692.151 596.093,708.254 596.652,710.692 597.211,678.068 597.771,644.73 598.33,648.362 598.889,618.488 599.448,642.253 600.008,678.245 600.567,680.667 601.126,695.949 601.685,695.911 602.245,728.266 602.804,711.373 603.363,741.288 603.922,710.507 604.482,726.213 605.041,755.975 605.6,786.304 606.159,817.842 606.719,844.56 607.278,807.838 607.837,773.443 608.396,818.768 608.956,794.538 609.515,822.452 610.074,832.898 610.633,792.225 611.193,805.163 611.752,782.064 612.311,749.23 612.87,731.418 613.43,699.986 613.989,649.166 614.548,650.385 615.107,621.526 615.667,643.912 616.226,616.955 616.785,641.269 617.344,626.576 617.904,631.175 618.463,651.866 619.022,622.196 619.581,610.552 620.141,663.288 620.7,650.005 621.259,620.532 621.818,642.944 622.378,650.211 622.937,669.986 623.496,672.745 624.055,677.705 624.615,648.436 625.174,685.876 625.733,668.215 626.292,655.145 626.852,657.521 627.411,658.965 627.97,674.098 628.529,661.167 629.089,644.528 629.648,630.292 630.207,633.082 630.766,604.326 631.326,609.374 631.885,597.069 632.444,637.869 633.003,643.107 633.563,614.588 634.122,619.889 634.681,675.113 635.24,674.156 635.8,661.157 636.359,632.333 636.918,636.34 637.477,672.392 638.037,705.85 638.596,674.211 639.155,676.028 639.714,675.887 640.274,678.273 640.833,711.342 641.392,726.519 641.951,772.793 642.511,783.795 643.07,776.852 643.629,740.78 644.188,767.671 644.748,796.604 645.307,776.143 645.866,754.184 646.425,787.169 646.985,769.924 647.544,766.375 648.103,781.435 648.662,779.824 649.222,776.297 649.781,738.733 650.34,737.362 650.899,735.159 651.459,701.804 652.018,717.301 652.577,698.096 653.136,733.39 653.696,764.28 654.255,776.917 654.814,773.918 655.373,739.421 655.933,703.415 656.492,688.535 657.051,669.856 657.61,687.872 658.17,638.723 658.729,659.126 659.288,691.936 659.847,691.366 660.407,674.538 660.966,677.065 661.525,663.35 662.084,681.547 662.644,662.664 663.203,664.62 663.762,633.18 664.321,539.478 664.881,545.118 665.44,553.592 665.999,556.564 666.558,563.773 667.118,588.167 667.677,610.828 668.236,650.823 668.795,668.44 669.355,673.37 669.914,642.237 670.473,645.426 671.032,698.407 671.592,664.055 672.151,648.793 672.71,682.891 673.269,653.446 673.829,638.915 674.388,657.442 674.947,659.465 675.506,643.485 676.066,646.631 676.625,648.085 677.184,632.883 677.743,656.49 678.303,623.69 678.862,597.317 679.421,587.848 679.981,611.942 680.54,648.613 681.099,652.657 681.658,670.438 682.218,638.668 682.777,645.396 683.336,662.291 683.895,663.471 684.455,662.386 685.014,646.166 685.573,664.132 686.132,666.93 686.692,651.279 687.251,638.181 687.81,644.124 688.369,678.87 688.929,679.01 689.488,664.979 690.047,665.279 690.606,665.637 691.166,671.514 691.725,687.309 692.284,690.938 692.843,691.395 693.403,677.393 693.962,678.483 694.521,710.481 695.08,707.409 695.64,705.674 696.199,702.922 696.758,704.767 697.317,687.957 697.877,718.582 698.436,748.217 698.995,745.846 699.554,728.566 700.114,759.69 700.673,769.84 701.232,764.463 701.791,744.725 702.351,740.957 702.91,739.844 703.469,739.545 704.028,767.988 704.588,747.851 705.147,775.587 705.706,772.17 706.265,785.642 706.825,778.458 707.384,758.333 707.943,735.748 708.502,736.205 709.062,704.335 709.621,700.166 710.18,668.46 710.739,670.795 711.299,704.984 711.858,702.528 712.417,719.312 712.976,729.353 713.536,758.203 714.095,740.431 714.654,771.589 715.213,750.407 715.773,730.627 716.332,714.248 716.891,718.635 717.45,735.045 718.01,713.229 718.569,713.136 719.128,745.188 719.687,756.797 720.247,753.149 720.806,733.282 721.365,735.119 721.924,702.434 722.484,684.117 723.043,701.525 723.602,669.475 724.161,610.664 724.721,616.359 725.28,619.117 725.839,654.447 726.398,673.657 726.958,669.988 727.517,654.461 728.076,654.834 728.635,655.489 729.195,644.857 729.754,634.331 730.313,655.316 730.872,672.717 731.432,688.032 731.991,718.381 732.55,696.645 733.109,694.914 733.669,679.144 734.228,632.197 734.787,617.803 735.346,620.464 735.906,623.475 736.465,611.832 737.024,649.771 737.583,636.663 738.143,622.366 738.702,622.827 739.261,627.337 739.82,582.67 740.38,604.663 740.939,626.81 741.498,646.527 742.057,634.515 742.617,590.906 743.176,598.632 743.735,606.169 744.294,608.912 744.854,565.493 745.413,608.007 745.972,596.366 746.531,650.274 747.091,684.976 747.65,732.057 748.209,731.334 748.768,732.066 749.328,731.174 749.887,739.761 750.446,752.429 751.005,718.222 751.565,746.026 752.124,743.454 752.683,742.145 753.242,702.894 753.802,715.517 754.361,698.541 754.92,703.75 755.479,700.541 756.039,699.618 756.598,713.105 757.157,713.111 757.716,699.567 758.276,736.11 758.835,750.583 759.394,750.058 759.953,760.562 760.513,775.75 761.072,822.597 761.631,765.339 762.19,777.519 762.75,788.408 763.309,782.764 763.868,777.004 764.427,803.512 764.987,825.774 765.546,817.097 766.105,792.272 766.664,788.672 767.224,797.179 767.783,773.87 768.342,753.087 768.901,761.203 769.461,786.293 770.02,815.321 770.579,812 771.138,805.309 771.698,768.963 772.257,752.192 772.816,765.179 773.375,742.447 773.935,754.384 774.494,766.904 775.053,763.79 775.612,793.093 776.172,820.734 776.731,813.897 777.29,805.742 777.849,813.871 778.409,808.104 778.968,787.241 779.527,799.488 780.086,806.913 780.646,818.559 781.205,793.171 781.764,784.519 782.323,729.682 782.883,708.889 783.442,686.3 784.001,703.622 784.56,690.585 785.12,691.173 785.679,657.809 786.238,656.362 786.797,690.471 787.357,687.956 787.916,688.173 788.475,688.568 789.034,685.888 789.594,665.632 790.153,650.44 790.712,651.323 791.271,720.938 791.831,752.386 792.39,793.157 792.949,772.128 793.508,782.695 794.068,763.812 794.627,776.508 795.186,801.822 795.745,863.183 796.305,839.35 796.864,816.351 797.423,809.2 797.982,782.072 798.542,760.212 799.101,771.903 799.66,798.971 800.219,747.463 800.779,758.186 801.338,736.502 801.897,699.598 802.456,682.234 803.016,747.155 803.575,740.545 804.134,737.885 804.693,749.499 805.253,772.333 805.812,751.237 806.371,746.211 806.931,743.725 807.49,775.02 808.049,774.715 808.608,738.619 809.168,718.141 809.727,666.406 810.286,635.821 810.845,606.088 811.405,595.596 811.964,585.42 812.523,607.142 813.082,597.325 813.642,602.525 814.201,621.371 814.76,608.156 815.319,610.774 815.879,617.286 816.438,635.095 816.997,621.652 817.556,627.971 818.116,616.104 818.675,650.676 819.234,618.629 819.793,608.514 820.353,630.9 820.912,582.909 821.471,607.374 822.03,628.827 822.59,629.302 823.149,632.435 823.708,584.931 824.267,608.056 824.827,597.108 825.386,587.788 825.945,592.893 826.504,583.562 827.064,604.215 827.623,610.651 828.182,646.267 828.741,631.357 829.301,620.025 829.86,657.385 830.419,643.844 830.978,660.392 831.538,663.128 832.097,650.087 832.656,635.578 833.215,733.362 833.775,744.037 834.334,743.248 834.893,721.198 835.452,716.465 836.012,682.386 836.571,685.426 837.13,698.538 837.689,733.094 838.249,733.581 838.808,775.776 839.367,817.669 839.926,793.798 840.486,788.053 841.045,803.044 841.604,748.739 842.163,713.159 842.723,724.143 843.282,722.687 843.841,723.025 844.4,678.236 844.96,680.586 845.519,678.657 846.078,682.46 846.637,713.564 847.197,726.834 847.756,726.308 848.315,661.537 848.874,661.3 849.434,662.499 849.993,651.522 850.552,682.329 851.111,683.253 851.671,652.117 852.23,621.306 852.789,606.241 853.348,610.621 853.908,616.394 854.467,590.25 855.026,592.804 855.585,567.416 856.145,577.689 856.704,600.646 857.263,622.216 857.822,625.664 858.382,666.189 858.941,669.813 859.5,686.882 860.059,668.41 860.619,636.931 861.178,624.245 861.737,677.843 862.296,707.868 862.856,706.476 863.415,691.032 863.974,675.071 864.533,675.279 865.093,665.142 865.652,677.014 866.211,659.335 866.77,691.17 867.33,691.954 867.889,691.132 868.448,675.235 869.007,692.995 869.567,723.571 870.126,751.401 870.685,749.541 871.244,731.08 871.804,730.364 872.363,680.195 872.922,680.253 873.481,676.99 874.041,648.836 874.6,618.582 875.159,604.652 875.718,594.398 876.278,579.329 876.837,598.532 877.396,601.244 877.955,606.748 878.515,612.038 879.074,613.993 879.633,633.346 880.192,635.82 880.752,635 881.311,639.234 881.87,628.283 882.429,632.11 882.989,652.867 883.548,671.864 884.107,687.145 884.666,671.758 885.226,686.538 885.785,715.793 886.344,731.331 886.903,744.785 887.463,723.875 888.022,688.762 888.581,691.395 889.14,676.647 889.7,643.543 890.259,645.79 890.818,646.435 891.377,646.02 891.937,651.146 892.496,671.074 893.055,640.244 893.614,656.102 894.174,622.59 894.733,627.862 895.292,633.262 895.851,621.495 896.411,607.867 896.97,612.653 897.529,633.646 898.088,619.912 898.648,636.631 899.207,640.431 899.766,644.684 900.325,610.798 900.885,646.843 901.444,650.154 902.003,651.873 902.562,657.754 903.122,677.216 903.681,659.631 904.24,673.763 904.799,660.137 905.359,644.975 905.918,646.688 906.477,649.037 907.036,631.809 907.596,649.498 908.155,652.441 908.714,654.926 909.273,639.146 909.833,625.095 910.392,630.023 910.951,631.772 911.51,631.133 912.07,665.097 912.629,662.395 913.188,680.088 913.747,680.947 914.307,680.971 914.866,682.936 915.425,683.595 915.984,686.041 916.544,686.652 917.103,656.403 917.662,646.393 918.221,650.419 918.781,636.599 919.34,639.354 919.899,639.615 920.458,655.379 921.018,674.716 921.577,659.592 922.136,678.699 922.695,647.148 923.255,647.477 923.814,651.197 924.373,652.244 924.932,686.834 925.492,652.52 926.051,651.815 926.61,654.117 927.169,608.52 927.729,614.816 928.288,668.587 928.847,683.413 929.406,700.904 929.966,666.867 930.525,666.343 931.084,684.262 931.644,685.955 932.203,688.089 932.762,702.795 933.321,669.795 933.881,636.87 934.44,657.476 934.999,643.474 935.558,662.051 936.118,665.095 936.677,663.63 937.236,664.303 937.795,666.815 938.355,685.908 938.914,703.421 939.473,691.54 940.032,702.508 940.592,716.964 941.151,684.371 941.71,667.948 942.269,684.781 942.829,696.468 943.388,696.553 943.947,679.944 944.506,664.226 945.066,680.71 945.625,683.543 946.184,714.048 946.743,728.257 947.303,708.479 947.862,723.555 948.421,755.647 948.98,784.059 949.54,744.238 950.099,708.317 950.658,708.276 951.217,722.838 951.777,767.828 952.336,760.687 952.895,738.939 953.454,735.439 954.014,780.92 954.573,743.506 955.132,775.548 955.691,804.703 956.251,793.724 956.81,789.162 957.369,783.468 957.928,790.062 958.488,736.938 959.047,735.569 959.606,733.823 960.165,716.601 960.725,713.833 961.284,713.079 961.843,662.428 962.402,680.154 962.962,696.85 963.521,729.452 964.08,774.56 964.639,768.907 965.199,779.603 965.758,741.245 966.317,757.916 966.876,773.4 967.436,801.33 967.995,812.274 968.554,808.935 969.113,801.622 969.673,795.029 970.232,806.983 970.791,817.41 971.35,776.287 971.91,755.156 972.469,767.565 973.028,761.923 973.587,742.967 974.147,723.24 974.706,719.013 975.265,701.284 975.824,696.533 976.384,678.071 976.943,679.581 977.502,664.628 978.061,663.522 978.621,633.646 979.18,638.778 979.739,671.285 980.298,655.233 980.858,652.991 981.417,618.108 981.976,669.153 982.535,651.899 983.095,656.631 983.654,659.522 984.213,677.112 984.772,645.448 985.332,633.742 985.891,637.951 986.45,640.922 987.009,624.114 987.569,597.412 988.128,601.399 988.687,610.024 989.246,616.795 989.806,607.865 990.365,632.435 990.924,650.153 991.483,654.111 992.043,655.562 992.602,657.225 993.161,642.003 993.72,629.695 994.28,618.502 994.839,620.194 995.398,621.841 995.957,656.409 996.517,674.826 997.076,644.203 997.635,648.109 998.194,650.028 998.754,670.732 999.313,654.617 999.872,671.876 1000.43,653.996 1000.99,692.127 1001.55,691.252 1002.11,678.978 1002.67,681.104 1003.23,696.779 1003.79,695.129 1004.35,697.373 1004.91,711.968 1005.46,711.301 1006.02,709.075 1006.58,723.99 1007.14,737.89 1007.7,753.823 1008.26,764.552 1008.82,791.282 1009.38,787.678 1009.94,770.032 1010.5,799.448 1011.06,790.351 1011.62,753.121 1012.18,714.843 1012.73,726.897 1013.29,724.503 1013.85,757.321 1014.41,787.046 1014.97,785.695 1015.53,809.374 1016.09,803.423 1016.65,810.24 1017.21,789.51 1017.77,780.4 1018.33,772.233 1018.89,750.142 1019.45,747.408 1020.01,728.471 1020.56,723.82 1021.12,706.636 1021.68,722.007 1022.24,733.123 1022.8,730.388 1023.36,711.01 1023.92,711.793 1024.48,729.984 1025.04,772.332 1025.6,767.461 1026.16,759.741 1026.72,736.95 1027.28,699.091 1027.83,684.329 1028.39,664.705 1028.95,701.151 1029.51,655.379 1030.07,673.873 1030.63,642.886 1031.19,611.87 1031.75,615.431 1032.31,602.216 1032.87,558.338 1033.43,533.599 1033.99,541.19 1034.55,518.832 1035.1,559.465 1035.66,563.192 1036.22,601.057 1036.78,558.849 1037.34,598.899 1037.9,586.171 1038.46,590.666 1039.02,613.748 1039.58,618.074 1040.14,620.152 1040.7,640.965 1041.26,645.647 1041.82,648.057 1042.38,604.202 1042.93,606.979 1043.49,592.962 1044.05,578.883 1044.61,603.854 1045.17,643.259 1045.73,643.333 1046.29,646.342 1046.85,633.635 1047.41,653.221 1047.97,654.316 1048.53,688.144 1049.09,689.299 1049.65,686.595 1050.2,705.083 1050.76,656.45 1051.32,675.815 1051.88,689.463 1052.44,689.941 1053,655.893 1053.56,669.951 1054.12,693.435 1054.68,694.122 1055.24,692.808 1055.8,672.942 1056.36,655.803 1056.92,656.222 1057.48,690.846 1058.03,705.799 1058.59,734.817 1059.15,731.308 1059.71,742.506 1060.27,756.206 1060.83,752.625 1061.39,768.07 1061.95,746.317 1062.51,673.229 1063.07,672.92 1063.63,655.797 1064.19,672.667 1064.75,675.642 1065.3,678.06 1065.86,664.152 1066.42,663.256 1066.98,659.939 1067.54,661.303 1068.1,646.159 1068.66,648.707 1069.22,669.115 1069.78,653.305 1070.34,621.386 1070.9,627.257 1071.46,646.564 1072.02,648.29 1072.57,649.064 1073.13,647.272 1073.69,632.196 1074.25,637.298 1074.81,636.595 1075.37,638.067 1075.93,656.64 1076.49,676.724 1077.05,709.025 1077.61,705.092 1078.17,704.326 1078.73,702.859 1079.29,671.152 1079.85,655.789 1080.4,644.208 1080.96,664.766 1081.52,662.716 1082.08,664.618 1082.64,684.032 1083.2,669.375 1083.76,668.506 1084.32,684.725 1084.88,700.778 1085.44,684.489 1086,668.293 1086.56,667.503 1087.12,684.26 1087.67,673.545 1088.23,721.837 1088.79,736.97 1089.35,769.828 1089.91,779.399 1090.47,812.069 1091.03,806.549 1091.59,799.686 1092.15,808.912 1092.71,817.89 1093.27,812.115 1093.83,821.751 1094.39,844.086 1094.94,822.455 1095.5,848.638 1096.06,836.266 1096.62,843.458 1097.18,802.839 1097.74,765.808 1098.3,791.345 1098.86,787.746 1099.42,781.007 1099.98,774.971 1100.54,749.83 1101.1,728.887 1101.66,698.091 1102.22,698.314 1102.77,681.673 1103.33,664.264 1103.89,648.296 1104.45,696.065 1105.01,711.069 1105.57,659.229 1106.13,674.454 1106.69,672.654 1107.25,654.301 1107.81,638.85 1108.37,642.036 1108.93,648.371 1109.49,604.755 1110.04,638.265 1110.6,622.442 1111.16,657.46 1111.72,675.652 1112.28,678.537 1112.84,660.007 1113.4,658.947 1113.96,644.392 1114.52,615.458 1115.08,652.893 1115.64,624.602 1116.2,583.306 1116.76,605.524 1117.31,608.928 1117.87,596.104 1118.43,647.157 1118.99,647.904 1119.55,649.714 1120.11,619.656 1120.67,623.72 1121.23,627.046 1121.79,629.327 1122.35,663.938 1122.91,665.624 1123.47,667.46 1124.03,683.073 1124.59,666.158 1125.14,697.489 1125.7,679.897 1126.26,666.065 1126.82,682.308 1127.38,697.282 1127.94,680.523 1128.5,664.796 1129.06,679.243 1129.62,678.798 1130.18,679.502 1130.74,716.266 1131.3,696.088 1131.86,711.152 1132.41,741.276 1132.97,707.083 1133.53,722.74 1134.09,687.217 1134.65,688.567 1135.21,718.661 1135.77,695.399 1136.33,676.061 1136.89,692.225 1137.45,721.67 1138.01,735.782 1138.57,781.272 1139.13,826.614 1139.68,785.286 1140.24,809.85 1140.8,816.153 1141.36,793.74 1141.92,783.242 1142.48,759.801 1143.04,718.241 1143.6,730.139 1144.16,697.078 1144.72,692.779 1145.28,693.481 1145.84,693.467 1146.4,711.759 1146.96,664.229 1147.51,665.163 1148.07,664.123 1148.63,698.185 1149.19,678.654 1149.75,648.006 1150.31,650.95 1150.87,621.305 1151.43,609.31 1151.99,661.577 1152.55,646.814 1153.11,650.841 1153.67,654.725 1154.23,639.516 1154.78,656.081 1155.34,604.738 1155.9,611.473 1156.46,645.343 1157.02,631.981 1157.58,633.295 1158.14,636.764 1158.7,636.158 1159.26,641.123 1159.82,627.93 1160.38,644.685 1160.94,680.588 1161.5,665.901 1162.05,651.452 1162.61,651.122 1163.17,669.932 1163.73,717.83 1164.29,749.505 1164.85,732.404 1165.41,731.309 1165.97,711.861 1166.53,708.976 1167.09,673.907 1167.65,674.228 1168.21,658.34 1168.77,658.728 1169.33,661.876 1169.88,648.773 1170.44,622.572 1171,609.457 1171.56,616.568 1172.12,668.406 1172.68,624.602 1173.24,626.3 1173.8,628.314 1174.36,646.703 1174.92,614.117 1175.48,632.487 1176.04,618.098 1176.6,608.961 1177.15,646.284 1177.71,663.812 1178.27,685.645 1178.83,685.641 1179.39,702.057 1179.95,703.391 1180.51,702.99 1181.07,691.887 1181.63,661.718 1182.19,647.889 1182.75,633.481 1183.31,638.271 1183.87,675.15 1184.43,693.943 1184.98,645.234 1185.54,680.802 1186.1,697.396 1186.66,681.089 1187.22,698.876 1187.78,698.598 1188.34,715.708 1188.9,744.918 1189.46,745.141 1190.02,710.143 1190.58,724.132 1191.14,708.256 1191.7,705.075 1192.25,685.775 1192.81,719.454 1193.37,729.251 1193.93,709.242 1194.49,711.341 1195.05,709.535 1195.61,708.497 1196.17,752.82 1196.73,764.377 1197.29,744.994 1197.85,725.155 1198.41,723.14 1198.97,739.793 1199.52,737.469 1200.08,718.372 1200.64,701.333 1201.2,683.338 1201.76,700.983 1202.32,667.621 1202.88,651.114 1203.44,652.4 1204,638.509 1204.56,626.603 1205.12,643.187 1205.68,644.508 1206.24,645.688 1206.8,630.979 1207.35,634.458 1207.91,652.808 1208.47,650.924 1209.03,632.434 1209.59,633.291 1210.15,654.152 1210.71,672.509 1211.27,671.825 1211.83,655.334 1212.39,673.624 1212.95,659.601 1213.51,681.431 1214.07,667.046 1214.62,666.314 1215.18,649.825 1215.74,636.935 1216.3,657.182 1216.86,659.692 1217.42,660.932 1217.98,664.395 1218.54,667.784 1219.1,683.774 1219.66,650.241 1220.22,647.88 1220.78,617.287 1221.34,633.709 1221.89,622.265 1222.45,627.309 1223.01,615.067 1223.57,634.345 1224.13,671.131 1224.69,706.267 1225.25,704.411 1225.81,704.253 1226.37,702.474 1226.93,720.813 1227.49,756.218 1228.05,749.891 1228.61,761.425 1229.17,750.592 1229.72,682.643 1230.28,683.917 1230.84,686.058 1231.4,683.516 1231.96,638.569 1232.52,644.153 1233.08,645.076 1233.64,631.55 1234.2,648.941 1234.76,650.192 1235.32,669.922 1235.88,672.307 1236.44,703.372 1236.99,670.677 1237.55,639.972 1238.11,637.584 1238.67,639.571 1239.23,658.263 1239.79,645.737 1240.35,645.599 1240.91,678.71 1241.47,692.526 1242.03,707.541 1242.59,692.49 1243.15,739.934 1243.71,735.921 1244.26,735.677 1244.82,697.73 1245.38,667.096 1245.94,684.845 1246.5,684.919 1247.06,751.482 1247.62,731.564 1248.18,729.852 1248.74,712.653 1249.3,712.689 1249.86,729.548 1250.42,743.843 1250.98,705.03 1251.54,656.784 1252.09,647.045 1252.65,631.776 1253.21,651.618 1253.77,651.209 1254.33,654.616 1254.89,656.78 1255.45,642.942 1256.01,626.803 1256.57,618.201 1257.13,623.552 1257.69,658.241 1258.25,658.849 1258.81,677.315 1259.36,673.29 1259.92,670.307 1260.48,671.105 1261.04,688.108 1261.6,655.168 1262.16,670.766 1262.72,640.039 1263.28,660.998 1263.84,641.436 1264.4,658.814 1264.96,661.881 1265.52,663.466 1266.08,647.545 1266.63,645.811 1267.19,649.925 1267.75,634.641 1268.31,636.95 1268.87,669.912 1269.43,702.011 1269.99,750.781 1270.55,795.317 1271.11,804.227 1271.67,794.921 1272.23,769.616 1272.79,780.756 1273.35,778.121 1273.91,806.585 1274.46,816.287 1275.02,793.119 1275.58,771.918 1276.14,782.504 1276.7,728.969 1277.26,741.081 1277.82,738.546 1278.38,754.891 1278.94,784.542 1279.5,793.864 1280.06,788.258 1280.62,801.74 1281.18,810.185 1281.73,771.19 1282.29,767.145 1282.85,728.487 1283.41,724.407 1283.97,689.003 1284.53,706.243 1285.09,674.644 1285.65,662.201 1286.21,680.39 1286.77,661.4 1287.33,644.456 1287.89,599.297 1288.45,585.539 1289,552.33 1289.56,594.527 1290.12,617.87 1290.68,656.132 1291.24,624.023 1291.8,614.31 1292.36,651.897 1292.92,654.557 1293.48,652.793 1294.04,653.219 1294.6,703.755 1295.16,718.069 1295.72,681.715 1296.28,667.094 1296.83,669.007 1297.39,689.384 1297.95,691.86 1298.51,659.154 1299.07,695.075 1299.63,707.343 1300.19,709.052 1300.75,740.726 1301.31,750.42 1301.87,746.136 1302.43,743.198 1302.99,725.294 1303.55,744.258 1304.1,708.22 1304.66,694.164 1305.22,656.788 1305.78,675.604 1306.34,675.878 1306.9,695.8 1307.46,693.713 1308.02,692.05 1308.58,711.334 1309.14,722.001 1309.7,704.004 1310.26,720.082 1310.82,735.661 1311.38,720.381 1311.93,754.43 1312.49,783.842 1313.05,746.55 1313.61,758.812 1314.17,756.373 1314.73,788.776 1315.29,779.725 1315.85,761.313 1316.41,772.68 1316.97,780.285 1317.53,742.315 1318.09,739.005 1318.65,703.2 1319.2,738.468 1319.76,749.527 1320.32,742.205 1320.88,735.109 1321.44,747.788 1322,731.009 1322.56,746.218 1323.12,744.765 1323.68,760.861 1324.24,760.489 1324.8,754.638 1325.36,734.819 1325.92,701.328 1326.47,671.446 1327.03,639.42 1327.59,636.013 1328.15,635.542 1328.71,701.224 1329.27,684.278 1329.83,699.201 1330.39,704.076 1330.95,701.086 1331.51,667.242 1332.07,717.478 1332.63,716.273 1333.19,715.879 1333.75,730.588 1334.3,729.85 1334.86,791.475 1335.42,771.053 1335.98,732.126 1336.54,732.216 1337.1,744.844 1337.66,770.758 1338.22,797.035 1338.78,807.132 1339.34,815.81 1339.9,807.262 1340.46,782.779 1341.02,778.282 1341.57,791.776 1342.13,812.713 1342.69,792.308 1343.25,786.649 1343.81,779.522 1344.37,742.604 1344.93,739.943 1345.49,737.597 1346.05,748.897 1346.61,727.36 1347.17,714.067 1347.73,729.648 1348.29,708.528 1348.84,703.672 1349.4,686.362 1349.96,670.239 1350.52,687.742 1351.08,688.037 1351.64,688.602 1352.2,671.787 1352.76,670.128 1353.32,672.048 1353.88,637.921 1354.44,607.352 1355,562.626 1355.56,569.993 1356.12,607.228 1356.67,611.729 1357.23,651.185 1357.79,651.784 1358.35,652.626 1358.91,639.174 1359.47,613.19 1360.03,598.103 1360.59,588.133 1361.15,592.076 1361.71,595.58 1362.27,584.429 1362.83,586.964 1363.39,590.815 1363.94,615.579 1364.5,603.868 1365.06,608.281 1365.62,597.691 1366.18,601.147 1366.74,624.687 1367.3,641.362 1367.86,627.621 1368.42,630.86 1368.98,631.499 1369.54,652.623 1370.1,687.96 1370.66,655.843 1371.21,640.561 1371.77,659.924 1372.33,682.727 1372.89,680.251 1373.45,632.275 1374.01,636.454 1374.57,672.643 1375.13,673.166 1375.69,653.522 1376.25,670.215 1376.81,671.944 1377.37,670.859 1377.93,668.375 1378.49,621.993 1379.04,626.622 1379.6,647.4 1380.16,652.102 1380.72,608.099 1381.28,615.266 1381.84,601.391 1382.4,605.454 1382.96,607.46 1383.52,595.984 1384.08,585.147 1384.64,604.849 1385.2,624.745 1385.76,597.169 1386.31,602.776 1386.87,624.763 1387.43,628.509 1387.99,615.297 1388.55,602.075 1389.11,643.303 1389.67,646.39 1390.23,632.302 1390.79,617.861 1391.35,651.277 1391.91,624.079 1392.47,630.866 1393.03,665.662 1393.58,666.205 1394.14,671.783 1394.7,690.983 1395.26,709.14 1395.82,708.761 1396.38,720.184 1396.94,701.878 1397.5,715.121 1398.06,680.313 1398.62,646.734 1399.18,647.606 1399.74,651.429 1400.3,670.858 1400.86,660.089 1401.41,650.458 1401.97,640.119 1402.53,608.92 1403.09,629.72 1403.65,666.683 1404.21,670.113 1404.77,670.221 1405.33,671.13 1405.89,688.098 1406.45,689.861 1407.01,691.321 1407.57,723.775 1408.13,690.09 1408.68,675.526 1409.24,676.357 1409.8,662.101 1410.36,647.202 1410.92,651.873 1411.48,666.2 1412.04,683.321 1412.6,668.612 1413.16,667.682 1413.72,669.29 1414.28,687.397 1414.84,686.692 1415.4,688.868 1415.95,639.519 1416.51,610.742 1417.07,629.968 1417.63,601.543 1418.19,605.173 1418.75,622.603 1419.31,628.139 1419.87,662.492 1420.43,660.356 1420.99,661.737 1421.55,667.01 1422.11,701.927 1422.67,716.377 1423.23,730.886 1423.78,728.242 1424.34,726.619 1424.9,705.971 1425.46,718.252 1426.02,719.093 1426.58,702.599 1427.14,684.397 1427.7,683.26 1428.26,664.032 1428.82,682.98 1429.38,666.762 1429.94,714.15 1430.5,717.141 1431.05,699.996 1431.61,696.419 1432.17,712.281 1432.73,710.747 1433.29,678.915 1433.85,700.176 1434.41,650.745 1434.97,669.378 1435.53,652.069 1436.09,673.336 1436.65,707.848 1437.21,707.773 1437.77,705.685 1438.33,706.449 1438.88,735.586 1439.44,754.145 1440,751.483 1440.56,778.275 1441.12,759.227 1441.68,739.763 1442.24,752.117 1442.8,749.639 1443.36,731.457 1443.92,727.662 1444.48,709.843 1445.04,709.869 1445.6,727.163 1446.15,741.994 1446.71,736.02 1447.27,764.419 1447.83,777.033 1448.39,755.356 1448.95,715.137 1449.51,712.627 1450.07,725.543 1450.63,738.032 1451.19,733.136 1451.75,776.633 1452.31,786.67 1452.87,765.771 1453.42,742.279 1453.98,659.851 1454.54,661.608 1455.1,697.436 1455.66,682.621 1456.22,714.374 1456.78,728.063 1457.34,741.719 1457.9,754.815 1458.46,752.055 1459.02,731.621 1459.58,761.628 1460.14,755.317 1460.7,763.673 1461.25,792.096 1461.81,784.585 1462.37,793.655 1462.93,772.34 1463.49,750.327 1464.05,729.59 1464.61,712.893 1465.17,727.908 1465.73,707.904 1466.29,720.199 1466.85,701.526 1467.41,729.397 1467.97,759.354 1468.52,739.648 1469.08,735.44 1469.64,732.371 1470.2,697.336 1470.76,696.334 1471.32,741.57 1471.88,720.254 1472.44,719.527 1473,719.671 1473.56,714.393 1474.12,712.195 1474.68,713.088 1475.24,678.057 1475.79,679.318 1476.35,678.085 1476.91,681.189 1477.47,681.248 1478.03,683.239 1478.59,652.367 1479.15,620.921 1479.71,626.242 1480.27,613.389 1480.83,570.179 1481.39,595.278 1481.95,603.005 1482.51,627.234 1483.07,647.84 1483.62,649.077 1484.18,653.145 1484.74,638.661 1485.3,656.4 1485.86,674.981 1486.42,676.232 1486.98,697.718 1487.54,696.574 1488.1,697.961 1488.66,678.708 1489.22,704.509 1489.78,685.262 1490.34,682.32 1490.89,713.554 1491.45,717.119 1492.01,713.663 1492.57,695.53 1493.13,694.686 1493.69,659.738 1494.25,627.511 1494.81,583.449 1495.37,603.884 1495.93,572.075 1496.49,529.846 1497.05,541.645 1497.61,584.211 1498.16,606.033 1498.72,626.625 1499.28,630.341 1499.84,664.519 1500.4,662.816 1500.96,630.563 1501.52,648.249 1502.08,667.06 1502.64,651.05 1503.2,672.307 1503.76,674.973 1504.32,738.534 1504.88,720.517 1505.44,702.117 1505.99,719.469 1506.55,752.114 1507.11,763.482 1507.67,763.457 1508.23,743.176 1508.79,756.297 1509.35,749.656 1509.91,747.012 1510.47,726.479 1511.03,729.064 1511.59,698.352 1512.15,699.211 1512.71,710.989 1513.26,679.101 1513.82,680.278 1514.38,660.839 1514.94,645.235 1515.5,648.514 1516.06,650.436 1516.62,686.511 1517.18,668.069 1517.74,689.117 1518.3,706.384 1518.86,691.742 1519.42,690.086 1519.98,655.749 1520.53,658.935 1521.09,659.95 1521.65,628.649 1522.21,603.582 1522.77,606.493 1523.33,596.016 1523.89,618.882 1524.45,607.232 1525.01,647.079 1525.57,634.414 1526.13,617.366 1526.69,602.603 1527.25,607.481 1527.81,626.788 1528.36,645.326 1528.92,680.462 1529.48,683.842 1530.04,684.558 1530.6,715.114 1531.16,715.432 1531.72,730.465 1532.28,759.158 1532.84,752.297 1533.4,778.101 1533.96,760.76 1534.52,771.669 1535.08,746.662 1535.63,743.543 1536.19,755.735 1536.75,751.208 1537.31,746.91 1537.87,759.001 1538.43,737.599 1538.99,735.434 1539.55,767.675 1540.11,777.376 1540.67,772.815 1541.23,768.65 1541.79,748.706 1542.35,727.401 1542.9,706.701 1543.46,703.622 1544.02,736.116 1544.58,749.777 1545.14,730.335 1545.7,748.21 1546.26,761.064 1546.82,771.302 1547.38,767.305 1547.94,743.884 1548.5,724.716 1549.06,722.334 1549.62,736.858 1550.18,699.207 1550.73,698.494 1551.29,696.191 1551.85,680.024 1552.41,679.374 1552.97,664.719 1553.53,680.491 1554.09,697.424 1554.65,708.548 1555.21,704.016 1555.77,700.586 1556.33,699.184 1556.89,683.091 1557.45,715.021 1558,710.902 1558.56,726.035 1559.12,741.031 1559.68,737.496 1560.24,703.078 1560.8,702.793 1561.36,714.046 1561.92,730.066 1562.48,713.411 1563.04,712.687 1563.6,711.877 1564.16,726.274 1564.72,721.823 1565.28,704.775 1565.83,703.468 1566.39,670.076 1566.95,653.222 1567.51,622.539 1568.07,643.816 1568.63,659.843 1569.19,628.237 1569.75,679.669 1570.31,650.975 1570.87,683.858 1571.43,647.883 1571.99,635.182 1572.55,638.295 1573.1,656.954 1573.66,672.169 1574.22,674.861 1574.78,657.464 1575.34,661.416 1575.9,628.791 1576.46,632.341 1577.02,637.019 1577.58,620.628 1578.14,624.583 1578.7,612.127 1579.26,601.496 1579.82,589.483 1580.37,596.026 1580.93,568.343 1581.49,575.223 1582.05,578.423 1582.61,600.124 1583.17,620.385 1583.73,624.492 1584.29,599.665 1584.85,574.737 1585.41,581.741 1585.97,603.975 1586.53,607.726 1587.09,611.671 1587.65,615.464 1588.2,618.061 1588.76,619.098 1589.32,605.802 1589.88,643.233 1590.44,599.431 1591,620.191 1591.56,605.899 1592.12,595.694 1592.68,587.76 1593.24,627.21 1593.8,627.571 1594.36,646.474 1594.92,651.981 1595.47,706.887 1596.03,722.286 1596.59,736.966 1597.15,783.115 1597.71,780.063 1598.27,777.22 1598.83,757.935 1599.39,722.09 1599.95,700.627 1600.51,695.604 1601.07,711.389 1601.63,676.734 1602.19,663.816 1602.74,700.754 1603.3,666.9 1603.86,698.693 1604.42,650.238 1604.98,654.484 1605.54,660.157 1606.1,659.91 1606.66,645.461 1607.22,664.412 1607.78,683.52 1608.34,667.213 1608.9,668.293 1609.46,653.521 1610.02,652.135 1610.57,655.673 1611.13,659.152 1611.69,693.302 1612.25,662.362 1612.81,683.982 1613.37,666.743 1613.93,684.816 1614.49,669.5 1615.05,686.495 1615.61,671.211 1616.17,654.987 1616.73,655.991 1617.29,653.197 1617.84,626.416 1618.4,629.733 1618.96,631.125 1619.52,620.236 1620.08,590.002 1620.64,632.081 1621.2,635.559 1621.76,592.698 1622.32,598.858 1622.88,622.443 1623.44,575.653 1624,583.822 1624.56,589.07 1625.11,593.881 1625.67,615.977 1626.23,602.677 1626.79,626.391 1627.35,679.556 1627.91,613.585 1628.47,632.314 1629.03,616.412 1629.59,621.575 1630.15,654.014 1630.71,704.769 1631.27,701.318 1631.83,700.38 1632.39,734.644 1632.94,717.189 1633.5,732.393 1634.06,711.054 1634.62,688.383 1635.18,707.611 1635.74,724.871 1636.3,772.125 1636.86,765.922 1637.42,762.503 1637.98,744.098 1638.54,724.414 1639.1,735.996 1639.66,731.606 1640.21,711.333 1640.77,691.311 1641.33,691.026 1641.89,707.283 1642.45,704.214 1643.01,741.112 1643.57,737.439 1644.13,751.378 1644.69,760.106 1645.25,767.423 1645.81,779.292 1646.37,789.445 1646.93,815.339 1647.48,758.161 1648.04,736.878 1648.6,766.283 1649.16,764.365 1649.72,761.041 1650.28,757.479 1650.84,773.106 1651.4,755.135 1651.96,751.751 1652.52,751.011 1653.08,765.44 1653.64,758.861 1654.2,755.877 1654.76,718.726 1655.31,716.662 1655.87,733.915 1656.43,749.506 1656.99,730.319 1657.55,746.146 1658.11,774.903 1658.67,738.152 1659.23,751.935 1659.79,763.971 1660.35,762.591 1660.91,773.344 1661.47,788.054 1662.03,766.605 1662.58,794.932 1663.14,823.017 1663.7,811.629 1664.26,774.158 1664.82,821.022 1665.38,815.049 1665.94,822.501 1666.5,831.716 1667.06,838.614 1667.62,814.024 1668.18,807.113 1668.74,769.357 1669.3,767.082 1669.85,742.688 1670.41,798.992 1670.97,809.577 1671.53,832.178 1672.09,790.907 1672.65,766.975 1673.21,762.757 1673.77,772.284 1674.33,781.946 1674.89,791.123 1675.45,770.015 1676.01,747.908 1676.57,741.955 1677.13,719.415 1677.68,697.982 1678.24,664.925 1678.8,660.206 1679.36,672.743 1679.92,638.726 1680.48,592.224 1681.04,567.77 1681.6,575.105 1682.16,592.513 1682.72,579.204 1683.28,615.998 1683.84,634.243 1684.4,667.596 1684.95,621.402 1685.51,624.957 1686.07,579.195 1686.63,582.925 1687.19,602.44 1687.75,623.216 1688.31,630.082 1688.87,633.272 1689.43,588.128 1689.99,610.033 1690.55,583.403 1691.11,602.932 1691.67,656.441 1692.23,657.134 1692.78,670.587 1693.34,686.371 1693.9,637.132 1694.46,672.725 1695.02,704.213 1695.58,701.853 1696.14,704.65 1696.7,710.711 1697.26,743.778 1697.82,725.913 1698.38,719.1 1698.94,719.88 1699.5,747.899 1700.05,693.774 1700.61,692.308 1701.17,725.5 1701.73,738.701 1702.29,733.799 1702.85,729.852 1703.41,713.149 1703.97,681.187 1704.53,729.589 1705.09,727.443 1705.65,676.181 1706.21,642.946 1706.77,662.163 1707.32,664.311 1707.88,693.901 1708.44,644.835 1709,680.959 1709.56,730.421 1710.12,728.137 1710.68,725.847 1711.24,738.089 1711.8,736.168 1712.36,713.292 1712.92,724.82 1713.48,724.879 1714.04,690.602 1714.6,705.756 1715.15,680.788 1715.71,699.552 1716.27,678.559 1716.83,708.936 1717.39,690.558 1717.95,706.741 1718.51,721.855 1719.07,750.226 1719.63,728.7 1720.19,723.933 1720.75,710.851 1721.31,710.64 1721.87,689.252 1722.42,705.991 1722.98,719.39 1723.54,700.228 1724.1,712.977 1724.66,709.474 1725.22,690.306 1725.78,676.175 1726.34,674.083 1726.9,673.594 1727.46,671.341 1728.02,643.85 1728.58,661.534 1729.14,678.808 1729.69,662.741 1730.25,714.626 1730.81,697.765 1731.37,695.568 1731.93,695.822 1732.49,676.007 1733.05,690.696 1733.61,752.279 1734.17,779.857 1734.73,758.14 1735.29,754.033 1735.85,734.735 1736.41,730.396 1736.97,727.358 1737.52,726.362 1738.08,706.839 1738.64,687.759 1739.2,638.749 1739.76,625.462 1740.32,609.826 1740.88,614.464 1741.44,618.241 1742,590.573 1742.56,578.94 1743.12,586.424 1743.68,592.115 1744.24,565.095 1744.79,572.004 1745.35,594.698 1745.91,598.145 1746.47,606.514 1747.03,646.324 1747.59,646.542 1748.15,692.569 1748.71,690.197 1749.27,688.213 1749.83,721.952 1750.39,705.944 1750.95,702.774 1751.51,671.6 1752.06,673.385 1752.62,676.057 1753.18,643.395 1753.74,646.23 1754.3,636.587 1754.86,643.193 1755.42,600.094 1755.98,572.704 1756.54,593.561 1757.1,598.77 1757.66,618.01 1758.22,608.497 1758.78,597.773 1759.34,601.805 1759.89,588.045 1760.45,577.967 1761.01,618.792 1761.57,624.492 1762.13,628.075 1762.69,631.543 1763.25,652.561 1763.81,650.888 1764.37,636.823 1764.93,641.985 1765.49,645.379 1766.05,613.351 1766.61,605.904 1767.16,646.323 1767.72,651.997 1768.28,620.057 1768.84,622.578 1769.4,647.343 1769.96,648.96 1770.52,653.864 1771.08,671.42 1771.64,688.9 1772.2,675.541 1772.76,660.231 1773.32,663.649 1773.88,668.328 1774.43,682.927 1774.99,665.97 1775.55,680.484 1776.11,682.379 1776.67,732.93 1777.23,729.674 1777.79,746.106 1778.35,745.607 1778.91,776.184 1779.47,789.707 1780.03,815.997 1780.59,824.703 1781.15,804.363 1781.71,799.702 1782.26,778.647 1782.82,758.124 1783.38,739.029 1783.94,733.89 1784.5,733.794 1785.06,716.122 1785.62,730.677 1786.18,746.093 1786.74,742.659 1787.3,719.841 1787.86,717.692 1788.42,699.996 1788.98,632.652 1789.53,636.615 1790.09,637.882 1790.65,641.028 1791.21,608.011 1791.77,628.571 1792.33,651.336 1792.89,703.007 1793.45,704.441 1794.01,671.699 1794.57,687.186 1795.13,670.985 1795.69,686.22 1796.25,753.416 1796.8,750.435 1797.36,715.8 1797.92,729.549 1798.48,729.458 1799.04,696.034 1799.6,695.825 1800.16,695.57 1800.72,742.374 1801.28,721.133 1801.84,752.527 1802.4,735.019 1802.96,744.987 1803.52,757.9 1804.08,724.092 1804.63,723.882 1805.19,738.174 1805.75,733.88 1806.31,731.829 1806.87,745.312 1807.43,754.163 1807.99,752.018 1808.55,745.943 1809.11,741.408 1809.67,688.753 1810.23,656.434 1810.79,640.924 1811.35,660.164 1811.9,624.491 1812.46,648.631 1813.02,632.398 1813.58,649.764 1814.14,650.232 1814.7,619.513 1815.26,588.964 1815.82,593.645 1816.38,581.002 1816.94,604.866 1817.5,625.017 1818.06,612.402 1818.62,618.196 1819.18,637.375 1819.73,656.019 1820.29,673.704 1820.85,657.368 1821.41,694.695 1821.97,729.912 1822.53,728.076 1823.09,722.509 1823.65,721.139 1824.21,716.474 1824.77,712.856 1825.33,663.051 1825.89,665.909 1826.45,701.944 1827,701.89 1827.56,685.457 1828.12,669.983 1828.68,675.331 1829.24,643.266 1829.8,665.053 1830.36,601.882 1830.92,556.409 1831.48,563.282 1832.04,590.789 1832.6,615.135 1833.16,652.629 1833.72,638.681 1834.27,624.596 1834.83,627.074 1835.39,581.926 1835.95,574.387 1836.51,597.216 1837.07,602.544 1837.63,576.524 1838.19,585.877 \"/>\n<path clip-path=\"url(#clip063)\" d=\"M720.247 691.956 L720.806 691.956 L721.365 691.956 L721.924 691.956 L722.484 691.956 L723.043 691.956 L723.602 691.956 L724.161 691.956 L724.721 691.956 L725.28 691.956 L725.839 691.956 L726.398 691.956 L726.958 691.956 L727.517 691.956 L728.076 691.956 L728.635 691.956 L729.195 691.956 L729.754 691.956 L730.313 691.956 L730.872 691.956 L731.432 691.956 L731.991 691.956 L732.55 691.956 L733.109 691.956 L733.669 691.956 L734.228 691.956 L734.787 691.956 L735.346 691.956 L735.906 691.956 L736.465 691.956 L737.024 691.956 L737.583 691.956 L738.143 691.956 L738.702 691.956 L739.261 691.956 L739.82 691.956 L740.38 691.956 L740.939 691.956 L741.498 691.956 L742.057 691.956 L742.617 691.956 L743.176 691.956 L743.735 691.956 L744.294 691.956 L744.854 691.956 L745.413 691.956 L745.972 691.956 L746.531 691.956 L747.091 691.956 L747.65 691.956 L748.209 691.956 L748.768 691.956 L749.328 691.956 L749.887 691.956 L750.446 691.956 L751.005 691.956 L751.565 691.956 L752.124 691.956 L752.683 691.956 L753.242 691.956 L753.802 691.956 L754.361 691.956 L754.92 691.956 L755.479 691.956 L756.039 691.956 L756.598 691.956 L757.157 691.956 L757.716 691.956 L758.276 691.956 L758.835 691.956 L759.394 691.956 L759.953 691.956 L760.513 691.956 L761.072 691.956 L761.631 691.956 L762.19 691.956 L762.75 691.956 L763.309 691.956 L763.868 691.956 L764.427 691.956 L764.987 691.956 L765.546 691.956 L766.105 691.956 L766.664 691.956 L767.224 691.956 L767.783 691.956 L768.342 691.956 L768.901 691.956 L769.461 691.956 L770.02 691.956 L770.579 691.956 L771.138 691.956 L771.698 691.956 L772.257 691.956 L772.816 691.956 L773.375 691.956 L773.935 691.956 L774.494 691.956 L775.053 691.956 L775.612 691.956 L776.172 691.956 L776.731 691.956 L777.29 691.956 L777.849 691.956 L778.409 691.956 L778.968 691.956 L779.527 691.956 L780.086 691.956 L780.646 691.956 L781.205 691.956 L781.764 691.956 L782.323 691.956 L782.883 691.956 L783.442 691.956 L784.001 691.956 L784.56 691.956 L785.12 691.956 L785.679 691.956 L786.238 691.956 L786.797 691.956 L787.357 691.956 L787.916 691.956 L788.475 691.956 L789.034 691.956 L789.594 691.956 L790.153 691.956 L790.712 691.956 L791.271 691.956 L791.831 691.956 L792.39 691.956 L792.949 691.956 L793.508 691.956 L794.068 691.956 L794.627 691.956 L795.186 691.956 L795.745 691.956 L796.305 691.956 L796.864 691.956 L797.423 691.956 L797.982 691.956 L798.542 691.956 L799.101 691.956 L799.66 691.956 L800.219 691.956 L800.779 691.956 L801.338 691.956 L801.897 691.956 L802.456 691.956 L803.016 691.956 L803.575 691.956 L804.134 691.956 L804.693 691.956 L805.253 691.956 L805.812 691.956 L806.371 691.956 L806.931 691.956 L807.49 691.956 L808.049 691.956 L808.608 691.956 L809.168 691.956 L809.727 691.956 L810.286 691.956 L810.845 691.956 L811.405 691.956 L811.964 691.956 L812.523 691.956 L813.082 691.956 L813.642 691.956 L814.201 691.956 L814.76 691.956 L815.319 691.956 L815.879 691.956 L816.438 691.956 L816.997 691.956 L817.556 691.956 L818.116 691.956 L818.675 691.956 L819.234 691.956 L819.793 691.956 L820.353 691.956 L820.912 691.956 L821.471 691.956 L822.03 691.956 L822.59 691.956 L823.149 691.956 L823.708 691.956 L824.267 691.956 L824.827 691.956 L825.386 691.956 L825.945 691.956 L826.504 691.956 L827.064 691.956 L827.623 691.956 L828.182 691.956 L828.741 691.956 L829.301 691.956 L829.86 691.956 L830.419 691.956 L830.978 691.956 L831.538 691.956 L832.097 691.956 L832.656 691.956 L833.215 691.956 L833.775 691.956 L834.334 691.956 L834.893 691.956 L835.452 691.956 L836.012 691.956 L836.571 691.956 L837.13 691.956 L837.689 691.956 L838.249 691.956 L838.808 691.956 L839.367 691.956 L839.926 691.956 L840.486 691.956 L841.045 691.956 L841.604 691.956 L842.163 691.956 L842.723 691.956 L843.282 691.956 L843.841 691.956 L844.4 691.956 L844.96 691.956 L845.519 691.956 L846.078 691.956 L846.637 691.956 L847.197 691.956 L847.756 691.956 L848.315 691.956 L848.874 691.956 L849.434 691.956 L849.993 691.956 L850.552 691.956 L851.111 691.956 L851.671 691.956 L852.23 691.956 L852.789 691.956 L853.348 691.956 L853.908 691.956 L854.467 691.956 L855.026 691.956 L855.585 691.956 L856.145 691.956 L856.704 691.956 L857.263 691.956 L857.822 691.956 L858.382 691.956 L858.941 691.956 L859.5 691.956 L860.059 691.956 L860.619 691.956 L861.178 691.956 L861.737 691.956 L862.296 691.956 L862.856 691.956 L863.415 691.956 L863.974 691.956 L864.533 691.956 L865.093 691.956 L865.652 691.956 L866.211 691.956 L866.77 691.956 L867.33 691.956 L867.889 691.956 L868.448 691.956 L869.007 691.956 L869.567 691.956 L870.126 691.956 L870.685 691.956 L871.244 691.956 L871.804 691.956 L872.363 691.956 L872.922 691.956 L873.481 691.956 L874.041 691.956 L874.6 691.956 L875.159 691.956 L875.718 691.956 L876.278 691.956 L876.837 691.956 L877.396 691.956 L877.955 691.956 L878.515 691.956 L879.074 691.956 L879.633 691.956 L880.192 691.956 L880.752 691.956 L881.311 691.956 L881.87 691.956 L882.429 691.956 L882.989 691.956 L883.548 691.956 L884.107 691.956 L884.666 691.956 L885.226 691.956 L885.785 691.956 L886.344 691.956 L886.903 691.956 L887.463 691.956 L888.022 691.956 L888.581 691.956 L889.14 691.956 L889.7 691.956 L890.259 691.956 L890.818 691.956 L891.377 691.956 L891.937 691.956 L892.496 691.956 L893.055 691.956 L893.614 691.956 L894.174 691.956 L894.733 691.956 L895.292 691.956 L895.851 691.956 L896.411 691.956 L896.97 691.956 L897.529 691.956 L898.088 691.956 L898.648 691.956 L899.207 691.956 L899.766 691.956 L900.325 691.956 L900.885 691.956 L901.444 691.956 L902.003 691.956 L902.562 691.956 L903.122 691.956 L903.681 691.956 L904.24 691.956 L904.799 691.956 L905.359 691.956 L905.918 691.956 L906.477 691.956 L907.036 691.956 L907.596 691.956 L908.155 691.956 L908.714 691.956 L909.273 691.956 L909.833 691.956 L910.392 691.956 L910.951 691.956 L911.51 691.956 L912.07 691.956 L912.629 691.956 L913.188 691.956 L913.747 691.956 L914.307 691.956 L914.866 691.956 L915.425 691.956 L915.984 691.956 L916.544 691.956 L917.103 691.956 L917.662 691.956 L918.221 691.956 L918.781 691.956 L919.34 691.956 L919.899 691.956 L920.458 691.956 L921.018 691.956 L921.577 691.956 L922.136 691.956 L922.695 691.956 L923.255 691.956 L923.814 691.956 L924.373 691.956 L924.932 691.956 L925.492 691.956 L926.051 691.956 L926.61 691.956 L927.169 691.956 L927.729 691.956 L928.288 691.956 L928.847 691.956 L929.406 691.956 L929.966 691.956 L930.525 691.956 L931.084 691.956 L931.644 691.956 L932.203 691.956 L932.762 691.956 L933.321 691.956 L933.881 691.956 L934.44 691.956 L934.999 691.956 L935.558 691.956 L936.118 691.956 L936.677 691.956 L937.236 691.956 L937.795 691.956 L938.355 691.956 L938.914 691.956 L939.473 691.956 L940.032 691.956 L940.592 691.956 L941.151 691.956 L941.71 691.956 L942.269 691.956 L942.829 691.956 L943.388 691.956 L943.947 691.956 L944.506 691.956 L945.066 691.956 L945.625 691.956 L946.184 691.956 L946.743 691.956 L947.303 691.956 L947.862 691.956 L948.421 691.956 L948.98 691.956 L949.54 691.956 L950.099 691.956 L950.658 691.956 L951.217 691.956 L951.777 691.956 L952.336 691.956 L952.895 691.956 L953.454 691.956 L954.014 691.956 L954.573 691.956 L955.132 691.956 L955.691 691.956 L956.251 691.956 L956.81 691.956 L957.369 691.956 L957.928 691.956 L958.488 691.956 L959.047 691.956 L959.606 691.956 L960.165 691.956 L960.725 691.956 L961.284 691.956 L961.843 691.956 L962.402 691.956 L962.962 691.956 L963.521 691.956 L964.08 691.956 L964.639 691.956 L965.199 691.956 L965.758 691.956 L966.317 691.956 L966.876 691.956 L967.436 691.956 L967.995 691.956 L968.554 691.956 L969.113 691.956 L969.673 691.956 L970.232 691.956 L970.791 691.956 L971.35 691.956 L971.91 691.956 L972.469 691.956 L973.028 691.956 L973.587 691.956 L974.147 691.956 L974.706 691.956 L975.265 691.956 L975.824 691.956 L976.384 691.956 L976.943 691.956 L977.502 691.956 L978.061 691.956 L978.621 691.956 L979.18 691.956 L979.739 691.956 L980.298 691.956 L980.858 691.956 L981.417 691.956 L981.976 691.956 L982.535 691.956 L983.095 691.956 L983.654 691.956 L984.213 691.956 L984.772 691.956 L985.332 691.956 L985.891 691.956 L986.45 691.956 L987.009 691.956 L987.569 691.956 L988.128 691.956 L988.687 691.956 L989.246 691.956 L989.806 691.956 L990.365 691.956 L990.924 691.956 L991.483 691.956 L992.043 691.956 L992.602 691.956 L993.161 691.956 L993.72 691.956 L994.28 691.956 L994.839 691.956 L995.398 691.956 L995.957 691.956 L996.517 691.956 L997.076 691.956 L997.635 691.956 L998.194 691.956 L998.754 691.956 L999.313 691.956 L999.872 691.956 L1000.43 691.956 L1000.99 691.956 L1001.55 691.956 L1002.11 691.956 L1002.67 691.956 L1003.23 691.956 L1003.79 691.956 L1004.35 691.956 L1004.91 691.956 L1005.46 691.956 L1006.02 691.956 L1006.58 691.956 L1007.14 691.956 L1007.7 691.956 L1008.26 691.956 L1008.82 691.956 L1009.38 691.956 L1009.94 691.956 L1010.5 691.956 L1011.06 691.956 L1011.62 691.956 L1012.18 691.956 L1012.73 691.956 L1013.29 691.956 L1013.85 691.956 L1014.41 691.956 L1014.97 691.956 L1015.53 691.956 L1016.09 691.956 L1016.65 691.956 L1017.21 691.956 L1017.77 691.956 L1018.33 691.956 L1018.89 691.956 L1019.45 691.956 L1020.01 691.956 L1020.56 691.956 L1021.12 691.956 L1021.68 691.956 L1022.24 691.956 L1022.8 691.956 L1023.36 691.956 L1023.92 691.956 L1024.48 691.956 L1025.04 691.956 L1025.6 691.956 L1026.16 691.956 L1026.72 691.956 L1027.28 691.956 L1027.83 691.956 L1028.39 691.956 L1028.95 691.956 L1029.51 691.956 L1030.07 691.956 L1030.63 691.956 L1031.19 691.956 L1031.75 691.956 L1032.31 691.956 L1032.87 691.956 L1033.43 691.956 L1033.99 691.956 L1034.55 691.956 L1035.1 691.956 L1035.66 691.956 L1036.22 691.956 L1036.78 691.956 L1037.34 691.956 L1037.9 691.956 L1038.46 691.956 L1039.02 691.956 L1039.58 691.956 L1040.14 691.956 L1040.7 691.956 L1041.26 691.956 L1041.82 691.956 L1042.38 691.956 L1042.93 691.956 L1043.49 691.956 L1044.05 691.956 L1044.61 691.956 L1045.17 691.956 L1045.73 691.956 L1046.29 691.956 L1046.85 691.956 L1047.41 691.956 L1047.97 691.956 L1048.53 691.956 L1049.09 691.956 L1049.65 691.956 L1050.2 691.956 L1050.76 691.956 L1051.32 691.956 L1051.88 691.956 L1052.44 691.956 L1053 691.956 L1053.56 691.956 L1054.12 691.956 L1054.68 691.956 L1055.24 691.956 L1055.8 691.956 L1056.36 691.956 L1056.92 691.956 L1057.48 691.956 L1058.03 691.956 L1058.59 691.956 L1059.15 691.956 L1059.71 691.956 L1060.27 691.956 L1060.83 691.956 L1061.39 691.956 L1061.95 691.956 L1062.51 691.956 L1063.07 691.956 L1063.63 691.956 L1064.19 691.956 L1064.75 691.956 L1065.3 691.956 L1065.86 691.956 L1066.42 691.956 L1066.98 691.956 L1067.54 691.956 L1068.1 691.956 L1068.66 691.956 L1069.22 691.956 L1069.78 691.956 L1070.34 691.956 L1070.9 691.956 L1071.46 691.956 L1072.02 691.956 L1072.57 691.956 L1073.13 691.956 L1073.69 691.956 L1074.25 691.956 L1074.81 691.956 L1075.37 691.956 L1075.93 691.956 L1076.49 691.956 L1077.05 691.956 L1077.61 691.956 L1078.17 691.956 L1078.73 691.956 L1079.29 691.956 L1079.85 691.956 L1080.4 691.956 L1080.96 691.956 L1081.52 691.956 L1082.08 691.956 L1082.64 691.956 L1083.2 691.956 L1083.76 691.956 L1084.32 691.956 L1084.88 691.956 L1085.44 691.956 L1086 691.956 L1086.56 691.956 L1087.12 691.956 L1087.67 691.956 L1088.23 691.956 L1088.79 691.956 L1089.35 691.956 L1089.91 691.956 L1090.47 691.956 L1091.03 691.956 L1091.59 691.956 L1092.15 691.956 L1092.71 691.956 L1093.27 691.956 L1093.83 691.956 L1094.39 691.956 L1094.94 691.956 L1095.5 691.956 L1096.06 691.956 L1096.62 691.956 L1097.18 691.956 L1097.74 691.956 L1098.3 691.956 L1098.86 691.956 L1099.42 691.956 L1099.98 691.956 L1100.54 691.956 L1101.1 691.956 L1101.66 691.956 L1102.22 691.956 L1102.77 691.956 L1103.33 691.956 L1103.89 691.956 L1104.45 691.956 L1105.01 691.956 L1105.57 691.956 L1106.13 691.956 L1106.69 691.956 L1107.25 691.956 L1107.81 691.956 L1108.37 691.956 L1108.93 691.956 L1109.49 691.956 L1110.04 691.956 L1110.6 691.956 L1111.16 691.956 L1111.72 691.956 L1112.28 691.956 L1112.84 691.956 L1113.4 691.956 L1113.96 691.956 L1114.52 691.956 L1115.08 691.956 L1115.64 691.956 L1116.2 691.956 L1116.76 691.956 L1117.31 691.956 L1117.87 691.956 L1118.43 691.956 L1118.99 691.956 L1119.55 691.956 L1120.11 691.956 L1120.67 691.956 L1121.23 691.956 L1121.79 691.956 L1122.35 691.956 L1122.91 691.956 L1123.47 691.956 L1124.03 691.956 L1124.59 691.956 L1125.14 691.956 L1125.7 691.956 L1126.26 691.956 L1126.82 691.956 L1127.38 691.956 L1127.94 691.956 L1128.5 691.956 L1129.06 691.956 L1129.62 691.956 L1130.18 691.956 L1130.74 691.956 L1131.3 691.956 L1131.86 691.956 L1132.41 691.956 L1132.97 691.956 L1133.53 691.956 L1134.09 691.956 L1134.65 691.956 L1135.21 691.956 L1135.77 691.956 L1136.33 691.956 L1136.89 691.956 L1137.45 691.956 L1138.01 691.956 L1138.57 691.956 L1139.13 691.956 L1139.68 691.956 L1140.24 691.956 L1140.8 691.956 L1141.36 691.956 L1141.92 691.956 L1142.48 691.956 L1143.04 691.956 L1143.6 691.956 L1144.16 691.956 L1144.72 691.956 L1145.28 691.956 L1145.84 691.956 L1146.4 691.956 L1146.96 691.956 L1147.51 691.956 L1148.07 691.956 L1148.63 691.956 L1149.19 691.956 L1149.75 691.956 L1150.31 691.956 L1150.87 691.956 L1151.43 691.956 L1151.99 691.956 L1152.55 691.956 L1153.11 691.956 L1153.67 691.956 L1154.23 691.956 L1154.78 691.956 L1155.34 691.956 L1155.9 691.956 L1156.46 691.956 L1157.02 691.956 L1157.58 691.956 L1158.14 691.956 L1158.7 691.956 L1159.26 691.956 L1159.82 691.956 L1160.38 691.956 L1160.94 691.956 L1161.5 691.956 L1162.05 691.956 L1162.61 691.956 L1163.17 691.956 L1163.73 691.956 L1164.29 691.956 L1164.85 691.956 L1165.41 691.956 L1165.97 691.956 L1166.53 691.956 L1167.09 691.956 L1167.65 691.956 L1168.21 691.956 L1168.77 691.956 L1169.33 691.956 L1169.88 691.956 L1170.44 691.956 L1171 691.956 L1171.56 691.956 L1172.12 691.956 L1172.68 691.956 L1173.24 691.956 L1173.8 691.956 L1174.36 691.956 L1174.92 691.956 L1175.48 691.956 L1176.04 691.956 L1176.6 691.956 L1177.15 691.956 L1177.71 691.956 L1178.27 691.956 L1178.83 691.956 L1179.39 691.956 L1179.95 691.956 L1180.51 691.956 L1181.07 691.956 L1181.63 691.956 L1182.19 691.956 L1182.75 691.956 L1183.31 691.956 L1183.87 691.956 L1184.43 691.956 L1184.98 691.956 L1185.54 691.956 L1186.1 691.956 L1186.66 691.956 L1187.22 691.956 L1187.78 691.956 L1188.34 691.956 L1188.9 691.956 L1189.46 691.956 L1190.02 691.956 L1190.58 691.956 L1191.14 691.956 L1191.7 691.956 L1192.25 691.956 L1192.81 691.956 L1193.37 691.956 L1193.93 691.956 L1194.49 691.956 L1195.05 691.956 L1195.61 691.956 L1196.17 691.956 L1196.73 691.956 L1197.29 691.956 L1197.85 691.956 L1198.41 691.956 L1198.97 691.956 L1199.52 691.956 L1200.08 691.956 L1200.64 691.956 L1201.2 691.956 L1201.76 691.956 L1202.32 691.956 L1202.88 691.956 L1203.44 691.956 L1204 691.956 L1204.56 691.956 L1205.12 691.956 L1205.68 691.956 L1206.24 691.956 L1206.8 691.956 L1207.35 691.956 L1207.91 691.956 L1208.47 691.956 L1209.03 691.956 L1209.59 691.956 L1210.15 691.956 L1210.71 691.956 L1211.27 691.956 L1211.83 691.956 L1212.39 691.956 L1212.95 691.956 L1213.51 691.956 L1214.07 691.956 L1214.62 691.956 L1215.18 691.956 L1215.74 691.956 L1216.3 691.956 L1216.86 691.956 L1217.42 691.956 L1217.98 691.956 L1218.54 691.956 L1219.1 691.956 L1219.66 691.956 L1220.22 691.956 L1220.78 691.956 L1221.34 691.956 L1221.89 691.956 L1222.45 691.956 L1223.01 691.956 L1223.57 691.956 L1224.13 691.956 L1224.69 691.956 L1225.25 691.956 L1225.81 691.956 L1226.37 691.956 L1226.93 691.956 L1227.49 691.956 L1228.05 691.956 L1228.61 691.956 L1229.17 691.956 L1229.72 691.956 L1230.28 691.956 L1230.84 691.956 L1231.4 691.956 L1231.96 691.956 L1232.52 691.956 L1233.08 691.956 L1233.64 691.956 L1234.2 691.956 L1234.76 691.956 L1235.32 691.956 L1235.88 691.956 L1236.44 691.956 L1236.99 691.956 L1237.55 691.956 L1238.11 691.956 L1238.67 691.956 L1239.23 691.956 L1239.79 691.956 L1240.35 691.956 L1240.91 691.956 L1241.47 691.956 L1242.03 691.956 L1242.59 691.956 L1243.15 691.956 L1243.71 691.956 L1244.26 691.956 L1244.82 691.956 L1245.38 691.956 L1245.94 691.956 L1246.5 691.956 L1247.06 691.956 L1247.62 691.956 L1248.18 691.956 L1248.74 691.956 L1249.3 691.956 L1249.86 691.956 L1250.42 691.956 L1250.98 691.956 L1251.54 691.956 L1252.09 691.956 L1252.65 691.956 L1253.21 691.956 L1253.77 691.956 L1254.33 691.956 L1254.89 691.956 L1255.45 691.956 L1256.01 691.956 L1256.57 691.956 L1257.13 691.956 L1257.69 691.956 L1258.25 691.956 L1258.81 691.956 L1259.36 691.956 L1259.92 691.956 L1260.48 691.956 L1261.04 691.956 L1261.6 691.956 L1262.16 691.956 L1262.72 691.956 L1263.28 691.956 L1263.84 691.956 L1264.4 691.956 L1264.96 691.956 L1265.52 691.956 L1266.08 691.956 L1266.63 691.956 L1267.19 691.956 L1267.75 691.956 L1268.31 691.956 L1268.87 691.956 L1269.43 691.956 L1269.99 691.956 L1270.55 691.956 L1271.11 691.956 L1271.67 691.956 L1272.23 691.956 L1272.79 691.956 L1273.35 691.956 L1273.91 691.956 L1274.46 691.956 L1275.02 691.956 L1275.58 691.956 L1276.14 691.956 L1276.7 691.956 L1277.26 691.956 L1277.82 691.956 L1278.38 691.956 L1278.94 691.956 L1279.5 691.956 L1280.06 691.956 L1280.62 691.956 L1281.18 691.956 L1281.73 691.956 L1282.29 691.956 L1282.85 691.956 L1283.41 691.956 L1283.97 691.956 L1284.53 691.956 L1285.09 691.956 L1285.65 691.956 L1286.21 691.956 L1286.77 691.956 L1287.33 691.956 L1287.89 691.956 L1288.45 691.956 L1289 691.956 L1289.56 691.956 L1290.12 691.956 L1290.68 691.956 L1291.24 691.956 L1291.8 691.956 L1292.36 691.956 L1292.92 691.956 L1293.48 691.956 L1294.04 691.956 L1294.6 691.956 L1295.16 691.956 L1295.72 691.956 L1296.28 691.956 L1296.83 691.956 L1297.39 691.956 L1297.95 691.956 L1298.51 691.956 L1299.07 691.956 L1299.63 691.956 L1300.19 691.956 L1300.75 691.956 L1301.31 691.956 L1301.87 691.956 L1302.43 691.956 L1302.99 691.956 L1303.55 691.956 L1304.1 691.956 L1304.66 691.956 L1305.22 691.956 L1305.78 691.956 L1306.34 691.956 L1306.9 691.956 L1307.46 691.956 L1308.02 691.956 L1308.58 691.956 L1309.14 691.956 L1309.7 691.956 L1310.26 691.956 L1310.82 691.956 L1311.38 691.956 L1311.93 691.956 L1312.49 691.956 L1313.05 691.956 L1313.61 691.956 L1314.17 691.956 L1314.73 691.956 L1315.29 691.956 L1315.85 691.956 L1316.41 691.956 L1316.97 691.956 L1317.53 691.956 L1318.09 691.956 L1318.65 691.956 L1319.2 691.956 L1319.76 691.956 L1320.32 691.956 L1320.88 691.956 L1321.44 691.956 L1322 691.956 L1322.56 691.956 L1323.12 691.956 L1323.68 691.956 L1324.24 691.956 L1324.8 691.956 L1325.36 691.956 L1325.92 691.956 L1326.47 691.956 L1327.03 691.956 L1327.59 691.956 L1328.15 691.956 L1328.71 691.956 L1329.27 691.956 L1329.83 691.956 L1330.39 691.956 L1330.95 691.956 L1331.51 691.956 L1332.07 691.956 L1332.63 691.956 L1333.19 691.956 L1333.75 691.956 L1334.3 691.956 L1334.86 691.956 L1335.42 691.956 L1335.98 691.956 L1336.54 691.956 L1337.1 691.956 L1337.66 691.956 L1338.22 691.956 L1338.78 691.956 L1339.34 691.956 L1339.9 691.956 L1340.46 691.956 L1341.02 691.956 L1341.57 691.956 L1342.13 691.956 L1342.69 691.956 L1343.25 691.956 L1343.81 691.956 L1344.37 691.956 L1344.93 691.956 L1345.49 691.956 L1346.05 691.956 L1346.61 691.956 L1347.17 691.956 L1347.73 691.956 L1348.29 691.956 L1348.84 691.956 L1349.4 691.956 L1349.96 691.956 L1350.52 691.956 L1351.08 691.956 L1351.64 691.956 L1352.2 691.956 L1352.76 691.956 L1353.32 691.956 L1353.88 691.956 L1354.44 691.956 L1355 691.956 L1355.56 691.956 L1356.12 691.956 L1356.67 691.956 L1357.23 691.956 L1357.79 691.956 L1358.35 691.956 L1358.91 691.956 L1359.47 691.956 L1360.03 691.956 L1360.59 691.956 L1361.15 691.956 L1361.71 691.956 L1362.27 691.956 L1362.83 691.956 L1363.39 691.956 L1363.94 691.956 L1364.5 691.956 L1365.06 691.956 L1365.62 691.956 L1366.18 691.956 L1366.74 691.956 L1367.3 691.956 L1367.86 691.956 L1368.42 691.956 L1368.98 691.956 L1369.54 691.956 L1370.1 691.956 L1370.66 691.956 L1371.21 691.956 L1371.77 691.956 L1372.33 691.956 L1372.89 691.956 L1373.45 691.956 L1374.01 691.956 L1374.57 691.956 L1375.13 691.956 L1375.69 691.956 L1376.25 691.956 L1376.81 691.956 L1377.37 691.956 L1377.93 691.956 L1378.49 691.956 L1379.04 691.956 L1379.6 691.956 L1380.16 691.956 L1380.72 691.956 L1381.28 691.956 L1381.84 691.956 L1382.4 691.956 L1382.96 691.956 L1383.52 691.956 L1384.08 691.956 L1384.64 691.956 L1385.2 691.956 L1385.76 691.956 L1386.31 691.956 L1386.87 691.956 L1387.43 691.956 L1387.99 691.956 L1388.55 691.956 L1389.11 691.956 L1389.67 691.956 L1390.23 691.956 L1390.79 691.956 L1391.35 691.956 L1391.91 691.956 L1392.47 691.956 L1393.03 691.956 L1393.58 691.956 L1394.14 691.956 L1394.7 691.956 L1395.26 691.956 L1395.82 691.956 L1396.38 691.956 L1396.94 691.956 L1397.5 691.956 L1398.06 691.956 L1398.62 691.956 L1399.18 691.956 L1399.74 691.956 L1400.3 691.956 L1400.86 691.956 L1401.41 691.956 L1401.97 691.956 L1402.53 691.956 L1403.09 691.956 L1403.65 691.956 L1404.21 691.956 L1404.77 691.956 L1405.33 691.956 L1405.89 691.956 L1406.45 691.956 L1407.01 691.956 L1407.57 691.956 L1408.13 691.956 L1408.68 691.956 L1409.24 691.956 L1409.8 691.956 L1410.36 691.956 L1410.92 691.956 L1411.48 691.956 L1412.04 691.956 L1412.6 691.956 L1413.16 691.956 L1413.72 691.956 L1414.28 691.956 L1414.84 691.956 L1415.4 691.956 L1415.95 691.956 L1416.51 691.956 L1417.07 691.956 L1417.63 691.956 L1418.19 691.956 L1418.75 691.956 L1419.31 691.956 L1419.87 691.956 L1420.43 691.956 L1420.99 691.956 L1421.55 691.956 L1422.11 691.956 L1422.67 691.956 L1423.23 691.956 L1423.78 691.956 L1424.34 691.956 L1424.9 691.956 L1425.46 691.956 L1426.02 691.956 L1426.58 691.956 L1427.14 691.956 L1427.7 691.956 L1428.26 691.956 L1428.82 691.956 L1429.38 691.956 L1429.94 691.956 L1430.5 691.956 L1431.05 691.956 L1431.61 691.956 L1432.17 691.956 L1432.73 691.956 L1433.29 691.956 L1433.85 691.956 L1434.41 691.956 L1434.97 691.956 L1435.53 691.956 L1436.09 691.956 L1436.65 691.956 L1437.21 691.956 L1437.77 691.956 L1438.33 691.956 L1438.88 691.956 L1439.44 691.956 L1440 691.956 L1440.56 691.956 L1441.12 691.956 L1441.68 691.956 L1442.24 691.956 L1442.8 691.956 L1443.36 691.956 L1443.92 691.956 L1444.48 691.956 L1445.04 691.956 L1445.6 691.956 L1446.15 691.956 L1446.71 691.956 L1447.27 691.956 L1447.83 691.956 L1448.39 691.956 L1448.95 691.956 L1449.51 691.956 L1450.07 691.956 L1450.63 691.956 L1451.19 691.956 L1451.75 691.956 L1452.31 691.956 L1452.87 691.956 L1453.42 691.956 L1453.98 691.956 L1454.54 691.956 L1455.1 691.956 L1455.66 691.956 L1456.22 691.956 L1456.78 691.956 L1457.34 691.956 L1457.9 691.956 L1458.46 691.956 L1459.02 691.956 L1459.58 691.956 L1460.14 691.956 L1460.7 691.956 L1461.25 691.956 L1461.81 691.956 L1462.37 691.956 L1462.93 691.956 L1463.49 691.956 L1464.05 691.956 L1464.61 691.956 L1465.17 691.956 L1465.73 691.956 L1466.29 691.956 L1466.85 691.956 L1467.41 691.956 L1467.97 691.956 L1468.52 691.956 L1469.08 691.956 L1469.64 691.956 L1470.2 691.956 L1470.76 691.956 L1471.32 691.956 L1471.88 691.956 L1472.44 691.956 L1473 691.956 L1473.56 691.956 L1474.12 691.956 L1474.68 691.956 L1475.24 691.956 L1475.79 691.956 L1476.35 691.956 L1476.91 691.956 L1477.47 691.956 L1478.03 691.956 L1478.59 691.956 L1479.15 691.956 L1479.71 691.956 L1480.27 691.956 L1480.83 691.956 L1481.39 691.956 L1481.95 691.956 L1482.51 691.956 L1483.07 691.956 L1483.62 691.956 L1484.18 691.956 L1484.74 691.956 L1485.3 691.956 L1485.86 691.956 L1486.42 691.956 L1486.98 691.956 L1487.54 691.956 L1488.1 691.956 L1488.66 691.956 L1489.22 691.956 L1489.78 691.956 L1490.34 691.956 L1490.89 691.956 L1491.45 691.956 L1492.01 691.956 L1492.57 691.956 L1493.13 691.956 L1493.69 691.956 L1494.25 691.956 L1494.81 691.956 L1495.37 691.956 L1495.93 691.956 L1496.49 691.956 L1497.05 691.956 L1497.61 691.956 L1498.16 691.956 L1498.72 691.956 L1499.28 691.956 L1499.84 691.956 L1500.4 691.956 L1500.96 691.956 L1501.52 691.956 L1502.08 691.956 L1502.64 691.956 L1503.2 691.956 L1503.76 691.956 L1504.32 691.956 L1504.88 691.956 L1505.44 691.956 L1505.99 691.956 L1506.55 691.956 L1507.11 691.956 L1507.67 691.956 L1508.23 691.956 L1508.79 691.956 L1509.35 691.956 L1509.91 691.956 L1510.47 691.956 L1511.03 691.956 L1511.59 691.956 L1512.15 691.956 L1512.71 691.956 L1513.26 691.956 L1513.82 691.956 L1514.38 691.956 L1514.94 691.956 L1515.5 691.956 L1516.06 691.956 L1516.62 691.956 L1517.18 691.956 L1517.74 691.956 L1518.3 691.956 L1518.86 691.956 L1519.42 691.956 L1519.98 691.956 L1520.53 691.956 L1521.09 691.956 L1521.65 691.956 L1522.21 691.956 L1522.77 691.956 L1523.33 691.956 L1523.89 691.956 L1524.45 691.956 L1525.01 691.956 L1525.57 691.956 L1526.13 691.956 L1526.69 691.956 L1527.25 691.956 L1527.81 691.956 L1528.36 691.956 L1528.92 691.956 L1529.48 691.956 L1530.04 691.956 L1530.6 691.956 L1531.16 691.956 L1531.72 691.956 L1532.28 691.956 L1532.84 691.956 L1533.4 691.956 L1533.96 691.956 L1534.52 691.956 L1535.08 691.956 L1535.63 691.956 L1536.19 691.956 L1536.75 691.956 L1537.31 691.956 L1537.87 691.956 L1538.43 691.956 L1538.99 691.956 L1539.55 691.956 L1540.11 691.956 L1540.67 691.956 L1541.23 691.956 L1541.79 691.956 L1542.35 691.956 L1542.9 691.956 L1543.46 691.956 L1544.02 691.956 L1544.58 691.956 L1545.14 691.956 L1545.7 691.956 L1546.26 691.956 L1546.82 691.956 L1547.38 691.956 L1547.94 691.956 L1548.5 691.956 L1549.06 691.956 L1549.62 691.956 L1550.18 691.956 L1550.73 691.956 L1551.29 691.956 L1551.85 691.956 L1552.41 691.956 L1552.97 691.956 L1553.53 691.956 L1554.09 691.956 L1554.65 691.956 L1555.21 691.956 L1555.77 691.956 L1556.33 691.956 L1556.89 691.956 L1557.45 691.956 L1558 691.956 L1558.56 691.956 L1559.12 691.956 L1559.68 691.956 L1560.24 691.956 L1560.8 691.956 L1561.36 691.956 L1561.92 691.956 L1562.48 691.956 L1563.04 691.956 L1563.6 691.956 L1564.16 691.956 L1564.72 691.956 L1565.28 691.956 L1565.83 691.956 L1566.39 691.956 L1566.95 691.956 L1567.51 691.956 L1568.07 691.956 L1568.63 691.956 L1569.19 691.956 L1569.75 691.956 L1570.31 691.956 L1570.87 691.956 L1571.43 691.956 L1571.99 691.956 L1572.55 691.956 L1573.1 691.956 L1573.66 691.956 L1574.22 691.956 L1574.78 691.956 L1575.34 691.956 L1575.9 691.956 L1576.46 691.956 L1577.02 691.956 L1577.58 691.956 L1578.14 691.956 L1578.7 691.956 L1579.26 691.956 L1579.82 691.956 L1580.37 691.956 L1580.93 691.956 L1581.49 691.956 L1582.05 691.956 L1582.61 691.956 L1583.17 691.956 L1583.73 691.956 L1584.29 691.956 L1584.85 691.956 L1585.41 691.956 L1585.97 691.956 L1586.53 691.956 L1587.09 691.956 L1587.65 691.956 L1588.2 691.956 L1588.76 691.956 L1589.32 691.956 L1589.88 691.956 L1590.44 691.956 L1591 691.956 L1591.56 691.956 L1592.12 691.956 L1592.68 691.956 L1593.24 691.956 L1593.8 691.956 L1594.36 691.956 L1594.92 691.956 L1595.47 691.956 L1596.03 691.956 L1596.59 691.956 L1597.15 691.956 L1597.71 691.956 L1598.27 691.956 L1598.83 691.956 L1599.39 691.956 L1599.95 691.956 L1600.51 691.956 L1601.07 691.956 L1601.63 691.956 L1602.19 691.956 L1602.74 691.956 L1603.3 691.956 L1603.86 691.956 L1604.42 691.956 L1604.98 691.956 L1605.54 691.956 L1606.1 691.956 L1606.66 691.956 L1607.22 691.956 L1607.78 691.956 L1608.34 691.956 L1608.9 691.956 L1609.46 691.956 L1610.02 691.956 L1610.57 691.956 L1611.13 691.956 L1611.69 691.956 L1612.25 691.956 L1612.81 691.956 L1613.37 691.956 L1613.93 691.956 L1614.49 691.956 L1615.05 691.956 L1615.61 691.956 L1616.17 691.956 L1616.73 691.956 L1617.29 691.956 L1617.84 691.956 L1618.4 691.956 L1618.96 691.956 L1619.52 691.956 L1620.08 691.956 L1620.64 691.956 L1621.2 691.956 L1621.76 691.956 L1622.32 691.956 L1622.88 691.956 L1623.44 691.956 L1624 691.956 L1624.56 691.956 L1625.11 691.956 L1625.67 691.956 L1626.23 691.956 L1626.79 691.956 L1627.35 691.956 L1627.91 691.956 L1628.47 691.956 L1629.03 691.956 L1629.59 691.956 L1630.15 691.956 L1630.71 691.956 L1631.27 691.956 L1631.83 691.956 L1632.39 691.956 L1632.94 691.956 L1633.5 691.956 L1634.06 691.956 L1634.62 691.956 L1635.18 691.956 L1635.74 691.956 L1636.3 691.956 L1636.86 691.956 L1637.42 691.956 L1637.98 691.956 L1638.54 691.956 L1639.1 691.956 L1639.66 691.956 L1640.21 691.956 L1640.77 691.956 L1641.33 691.956 L1641.89 691.956 L1642.45 691.956 L1643.01 691.956 L1643.57 691.956 L1644.13 691.956 L1644.69 691.956 L1645.25 691.956 L1645.81 691.956 L1646.37 691.956 L1646.93 691.956 L1647.48 691.956 L1648.04 691.956 L1648.6 691.956 L1649.16 691.956 L1649.72 691.956 L1650.28 691.956 L1650.84 691.956 L1651.4 691.956 L1651.96 691.956 L1652.52 691.956 L1653.08 691.956 L1653.64 691.956 L1654.2 691.956 L1654.76 691.956 L1655.31 691.956 L1655.87 691.956 L1656.43 691.956 L1656.99 691.956 L1657.55 691.956 L1658.11 691.956 L1658.67 691.956 L1659.23 691.956 L1659.79 691.956 L1660.35 691.956 L1660.91 691.956 L1661.47 691.956 L1662.03 691.956 L1662.58 691.956 L1663.14 691.956 L1663.7 691.956 L1664.26 691.956 L1664.82 691.956 L1665.38 691.956 L1665.94 691.956 L1666.5 691.956 L1667.06 691.956 L1667.62 691.956 L1668.18 691.956 L1668.74 691.956 L1669.3 691.956 L1669.85 691.956 L1670.41 691.956 L1670.97 691.956 L1671.53 691.956 L1672.09 691.956 L1672.65 691.956 L1673.21 691.956 L1673.77 691.956 L1674.33 691.956 L1674.89 691.956 L1675.45 691.956 L1676.01 691.956 L1676.57 691.956 L1677.13 691.956 L1677.68 691.956 L1678.24 691.956 L1678.8 691.956 L1679.36 691.956 L1679.92 691.956 L1680.48 691.956 L1681.04 691.956 L1681.6 691.956 L1682.16 691.956 L1682.72 691.956 L1683.28 691.956 L1683.84 691.956 L1684.4 691.956 L1684.95 691.956 L1685.51 691.956 L1686.07 691.956 L1686.63 691.956 L1687.19 691.956 L1687.75 691.956 L1688.31 691.956 L1688.87 691.956 L1689.43 691.956 L1689.99 691.956 L1690.55 691.956 L1691.11 691.956 L1691.67 691.956 L1692.23 691.956 L1692.78 691.956 L1693.34 691.956 L1693.9 691.956 L1694.46 691.956 L1695.02 691.956 L1695.58 691.956 L1696.14 691.956 L1696.7 691.956 L1697.26 691.956 L1697.82 691.956 L1698.38 691.956 L1698.94 691.956 L1699.5 691.956 L1700.05 691.956 L1700.61 691.956 L1701.17 691.956 L1701.73 691.956 L1702.29 691.956 L1702.85 691.956 L1703.41 691.956 L1703.97 691.956 L1704.53 691.956 L1705.09 691.956 L1705.65 691.956 L1706.21 691.956 L1706.77 691.956 L1707.32 691.956 L1707.88 691.956 L1708.44 691.956 L1709 691.956 L1709.56 691.956 L1710.12 691.956 L1710.68 691.956 L1711.24 691.956 L1711.8 691.956 L1712.36 691.956 L1712.92 691.956 L1713.48 691.956 L1714.04 691.956 L1714.6 691.956 L1715.15 691.956 L1715.71 691.956 L1716.27 691.956 L1716.83 691.956 L1717.39 691.956 L1717.95 691.956 L1718.51 691.956 L1719.07 691.956 L1719.63 691.956 L1720.19 691.956 L1720.75 691.956 L1721.31 691.956 L1721.87 691.956 L1722.42 691.956 L1722.98 691.956 L1723.54 691.956 L1724.1 691.956 L1724.66 691.956 L1725.22 691.956 L1725.78 691.956 L1726.34 691.956 L1726.9 691.956 L1727.46 691.956 L1728.02 691.956 L1728.58 691.956 L1729.14 691.956 L1729.69 691.956 L1730.25 691.956 L1730.81 691.956 L1731.37 691.956 L1731.93 691.956 L1732.49 691.956 L1733.05 691.956 L1733.61 691.956 L1734.17 691.956 L1734.73 691.956 L1735.29 691.956 L1735.85 691.956 L1736.41 691.956 L1736.97 691.956 L1737.52 691.956 L1738.08 691.956 L1738.64 691.956 L1739.2 691.956 L1739.76 691.956 L1740.32 691.956 L1740.88 691.956 L1741.44 691.956 L1742 691.956 L1742.56 691.956 L1743.12 691.956 L1743.68 691.956 L1744.24 691.956 L1744.79 691.956 L1745.35 691.956 L1745.91 691.956 L1746.47 691.956 L1747.03 691.956 L1747.59 691.956 L1748.15 691.956 L1748.71 691.956 L1749.27 691.956 L1749.83 691.956 L1750.39 691.956 L1750.95 691.956 L1751.51 691.956 L1752.06 691.956 L1752.62 691.956 L1753.18 691.956 L1753.74 691.956 L1754.3 691.956 L1754.86 691.956 L1755.42 691.956 L1755.98 691.956 L1756.54 691.956 L1757.1 691.956 L1757.66 691.956 L1758.22 691.956 L1758.78 691.956 L1759.34 691.956 L1759.89 691.956 L1760.45 691.956 L1761.01 691.956 L1761.57 691.956 L1762.13 691.956 L1762.69 691.956 L1763.25 691.956 L1763.81 691.956 L1764.37 691.956 L1764.93 691.956 L1765.49 691.956 L1766.05 691.956 L1766.61 691.956 L1767.16 691.956 L1767.72 691.956 L1768.28 691.956 L1768.84 691.956 L1769.4 691.956 L1769.96 691.956 L1770.52 691.956 L1771.08 691.956 L1771.64 691.956 L1772.2 691.956 L1772.76 691.956 L1773.32 691.956 L1773.88 691.956 L1774.43 691.956 L1774.99 691.956 L1775.55 691.956 L1776.11 691.956 L1776.67 691.956 L1777.23 691.956 L1777.79 691.956 L1778.35 691.956 L1778.91 691.956 L1779.47 691.956 L1780.03 691.956 L1780.59 691.956 L1781.15 691.956 L1781.71 691.956 L1782.26 691.956 L1782.82 691.956 L1783.38 691.956 L1783.94 691.956 L1784.5 691.956 L1785.06 691.956 L1785.62 691.956 L1786.18 691.956 L1786.74 691.956 L1787.3 691.956 L1787.86 691.956 L1788.42 691.956 L1788.98 691.956 L1789.53 691.956 L1790.09 691.956 L1790.65 691.956 L1791.21 691.956 L1791.77 691.956 L1792.33 691.956 L1792.89 691.956 L1793.45 691.956 L1794.01 691.956 L1794.57 691.956 L1795.13 691.956 L1795.69 691.956 L1796.25 691.956 L1796.8 691.956 L1797.36 691.956 L1797.92 691.956 L1798.48 691.956 L1799.04 691.956 L1799.6 691.956 L1800.16 691.956 L1800.72 691.956 L1801.28 691.956 L1801.84 691.956 L1802.4 691.956 L1802.96 691.956 L1803.52 691.956 L1804.08 691.956 L1804.63 691.956 L1805.19 691.956 L1805.75 691.956 L1806.31 691.956 L1806.87 691.956 L1807.43 691.956 L1807.99 691.956 L1808.55 691.956 L1809.11 691.956 L1809.67 691.956 L1810.23 691.956 L1810.79 691.956 L1811.35 691.956 L1811.9 691.956 L1812.46 691.956 L1813.02 691.956 L1813.58 691.956 L1814.14 691.956 L1814.7 691.956 L1815.26 691.956 L1815.82 691.956 L1816.38 691.956 L1816.94 691.956 L1817.5 691.956 L1818.06 691.956 L1818.62 691.956 L1819.18 691.956 L1819.73 691.956 L1820.29 691.956 L1820.85 691.956 L1821.41 691.956 L1821.97 691.956 L1822.53 691.956 L1823.09 691.956 L1823.65 691.956 L1824.21 691.956 L1824.77 691.956 L1825.33 691.956 L1825.89 691.956 L1826.45 691.956 L1827 691.956 L1827.56 691.956 L1828.12 691.956 L1828.68 691.956 L1829.24 691.956 L1829.8 691.956 L1830.36 691.956 L1830.92 691.956 L1831.48 691.956 L1832.04 691.956 L1832.6 691.956 L1833.16 691.956 L1833.72 691.956 L1834.27 691.956 L1834.83 691.956 L1835.39 691.956 L1835.95 691.956 L1836.51 691.956 L1837.07 691.956 L1837.63 691.956 L1838.19 691.956 L1838.19 681.777 L1837.63 681.777 L1837.07 681.777 L1836.51 681.777 L1835.95 681.777 L1835.39 681.777 L1834.83 681.777 L1834.27 681.777 L1833.72 681.777 L1833.16 681.777 L1832.6 681.777 L1832.04 681.777 L1831.48 681.777 L1830.92 681.777 L1830.36 681.777 L1829.8 681.777 L1829.24 681.777 L1828.68 681.777 L1828.12 681.777 L1827.56 681.777 L1827 681.777 L1826.45 681.777 L1825.89 681.777 L1825.33 681.777 L1824.77 681.777 L1824.21 681.777 L1823.65 681.777 L1823.09 681.777 L1822.53 681.777 L1821.97 681.777 L1821.41 681.777 L1820.85 681.777 L1820.29 681.777 L1819.73 681.777 L1819.18 681.777 L1818.62 681.777 L1818.06 681.777 L1817.5 681.777 L1816.94 681.777 L1816.38 681.777 L1815.82 681.777 L1815.26 681.777 L1814.7 681.777 L1814.14 681.777 L1813.58 681.777 L1813.02 681.777 L1812.46 681.777 L1811.9 681.777 L1811.35 681.777 L1810.79 681.777 L1810.23 681.777 L1809.67 681.777 L1809.11 681.777 L1808.55 681.777 L1807.99 681.777 L1807.43 681.777 L1806.87 681.777 L1806.31 681.777 L1805.75 681.777 L1805.19 681.777 L1804.63 681.777 L1804.08 681.777 L1803.52 681.777 L1802.96 681.777 L1802.4 681.777 L1801.84 681.777 L1801.28 681.777 L1800.72 681.777 L1800.16 681.777 L1799.6 681.777 L1799.04 681.777 L1798.48 681.777 L1797.92 681.777 L1797.36 681.777 L1796.8 681.777 L1796.25 681.777 L1795.69 681.777 L1795.13 681.777 L1794.57 681.777 L1794.01 681.777 L1793.45 681.777 L1792.89 681.777 L1792.33 681.777 L1791.77 681.777 L1791.21 681.777 L1790.65 681.777 L1790.09 681.777 L1789.53 681.777 L1788.98 681.777 L1788.42 681.777 L1787.86 681.777 L1787.3 681.777 L1786.74 681.777 L1786.18 681.777 L1785.62 681.777 L1785.06 681.777 L1784.5 681.777 L1783.94 681.777 L1783.38 681.777 L1782.82 681.777 L1782.26 681.777 L1781.71 681.777 L1781.15 681.777 L1780.59 681.777 L1780.03 681.777 L1779.47 681.777 L1778.91 681.777 L1778.35 681.777 L1777.79 681.777 L1777.23 681.777 L1776.67 681.777 L1776.11 681.777 L1775.55 681.777 L1774.99 681.777 L1774.43 681.777 L1773.88 681.777 L1773.32 681.777 L1772.76 681.777 L1772.2 681.777 L1771.64 681.777 L1771.08 681.777 L1770.52 681.777 L1769.96 681.777 L1769.4 681.777 L1768.84 681.777 L1768.28 681.777 L1767.72 681.777 L1767.16 681.777 L1766.61 681.777 L1766.05 681.777 L1765.49 681.777 L1764.93 681.777 L1764.37 681.777 L1763.81 681.777 L1763.25 681.777 L1762.69 681.777 L1762.13 681.777 L1761.57 681.777 L1761.01 681.777 L1760.45 681.777 L1759.89 681.777 L1759.34 681.777 L1758.78 681.777 L1758.22 681.777 L1757.66 681.777 L1757.1 681.777 L1756.54 681.777 L1755.98 681.777 L1755.42 681.777 L1754.86 681.777 L1754.3 681.777 L1753.74 681.777 L1753.18 681.777 L1752.62 681.777 L1752.06 681.777 L1751.51 681.777 L1750.95 681.777 L1750.39 681.777 L1749.83 681.777 L1749.27 681.777 L1748.71 681.777 L1748.15 681.777 L1747.59 681.777 L1747.03 681.777 L1746.47 681.777 L1745.91 681.777 L1745.35 681.777 L1744.79 681.777 L1744.24 681.777 L1743.68 681.777 L1743.12 681.777 L1742.56 681.777 L1742 681.777 L1741.44 681.777 L1740.88 681.777 L1740.32 681.777 L1739.76 681.777 L1739.2 681.777 L1738.64 681.777 L1738.08 681.777 L1737.52 681.777 L1736.97 681.777 L1736.41 681.777 L1735.85 681.777 L1735.29 681.777 L1734.73 681.777 L1734.17 681.777 L1733.61 681.777 L1733.05 681.777 L1732.49 681.777 L1731.93 681.777 L1731.37 681.777 L1730.81 681.777 L1730.25 681.777 L1729.69 681.777 L1729.14 681.777 L1728.58 681.777 L1728.02 681.777 L1727.46 681.777 L1726.9 681.777 L1726.34 681.777 L1725.78 681.777 L1725.22 681.777 L1724.66 681.777 L1724.1 681.777 L1723.54 681.777 L1722.98 681.777 L1722.42 681.777 L1721.87 681.777 L1721.31 681.777 L1720.75 681.777 L1720.19 681.777 L1719.63 681.777 L1719.07 681.777 L1718.51 681.777 L1717.95 681.777 L1717.39 681.777 L1716.83 681.777 L1716.27 681.777 L1715.71 681.777 L1715.15 681.777 L1714.6 681.777 L1714.04 681.777 L1713.48 681.777 L1712.92 681.777 L1712.36 681.777 L1711.8 681.777 L1711.24 681.777 L1710.68 681.777 L1710.12 681.777 L1709.56 681.777 L1709 681.777 L1708.44 681.777 L1707.88 681.777 L1707.32 681.777 L1706.77 681.777 L1706.21 681.777 L1705.65 681.777 L1705.09 681.777 L1704.53 681.777 L1703.97 681.777 L1703.41 681.777 L1702.85 681.777 L1702.29 681.777 L1701.73 681.777 L1701.17 681.777 L1700.61 681.777 L1700.05 681.777 L1699.5 681.777 L1698.94 681.777 L1698.38 681.777 L1697.82 681.777 L1697.26 681.777 L1696.7 681.777 L1696.14 681.777 L1695.58 681.777 L1695.02 681.777 L1694.46 681.777 L1693.9 681.777 L1693.34 681.777 L1692.78 681.777 L1692.23 681.777 L1691.67 681.777 L1691.11 681.777 L1690.55 681.777 L1689.99 681.777 L1689.43 681.777 L1688.87 681.777 L1688.31 681.777 L1687.75 681.777 L1687.19 681.777 L1686.63 681.777 L1686.07 681.777 L1685.51 681.777 L1684.95 681.777 L1684.4 681.777 L1683.84 681.777 L1683.28 681.777 L1682.72 681.777 L1682.16 681.777 L1681.6 681.777 L1681.04 681.777 L1680.48 681.777 L1679.92 681.777 L1679.36 681.777 L1678.8 681.777 L1678.24 681.777 L1677.68 681.777 L1677.13 681.777 L1676.57 681.777 L1676.01 681.777 L1675.45 681.777 L1674.89 681.777 L1674.33 681.777 L1673.77 681.777 L1673.21 681.777 L1672.65 681.777 L1672.09 681.777 L1671.53 681.777 L1670.97 681.777 L1670.41 681.777 L1669.85 681.777 L1669.3 681.777 L1668.74 681.777 L1668.18 681.777 L1667.62 681.777 L1667.06 681.777 L1666.5 681.777 L1665.94 681.777 L1665.38 681.777 L1664.82 681.777 L1664.26 681.777 L1663.7 681.777 L1663.14 681.777 L1662.58 681.777 L1662.03 681.777 L1661.47 681.777 L1660.91 681.777 L1660.35 681.777 L1659.79 681.777 L1659.23 681.777 L1658.67 681.777 L1658.11 681.777 L1657.55 681.777 L1656.99 681.777 L1656.43 681.777 L1655.87 681.777 L1655.31 681.777 L1654.76 681.777 L1654.2 681.777 L1653.64 681.777 L1653.08 681.777 L1652.52 681.777 L1651.96 681.777 L1651.4 681.777 L1650.84 681.777 L1650.28 681.777 L1649.72 681.777 L1649.16 681.777 L1648.6 681.777 L1648.04 681.777 L1647.48 681.777 L1646.93 681.777 L1646.37 681.777 L1645.81 681.777 L1645.25 681.777 L1644.69 681.777 L1644.13 681.777 L1643.57 681.777 L1643.01 681.777 L1642.45 681.777 L1641.89 681.777 L1641.33 681.777 L1640.77 681.777 L1640.21 681.777 L1639.66 681.777 L1639.1 681.777 L1638.54 681.777 L1637.98 681.777 L1637.42 681.777 L1636.86 681.777 L1636.3 681.777 L1635.74 681.777 L1635.18 681.777 L1634.62 681.777 L1634.06 681.777 L1633.5 681.777 L1632.94 681.777 L1632.39 681.777 L1631.83 681.777 L1631.27 681.777 L1630.71 681.777 L1630.15 681.777 L1629.59 681.777 L1629.03 681.777 L1628.47 681.777 L1627.91 681.777 L1627.35 681.777 L1626.79 681.777 L1626.23 681.777 L1625.67 681.777 L1625.11 681.777 L1624.56 681.777 L1624 681.777 L1623.44 681.777 L1622.88 681.777 L1622.32 681.777 L1621.76 681.777 L1621.2 681.777 L1620.64 681.777 L1620.08 681.777 L1619.52 681.777 L1618.96 681.777 L1618.4 681.777 L1617.84 681.777 L1617.29 681.777 L1616.73 681.777 L1616.17 681.777 L1615.61 681.777 L1615.05 681.777 L1614.49 681.777 L1613.93 681.777 L1613.37 681.777 L1612.81 681.777 L1612.25 681.777 L1611.69 681.777 L1611.13 681.777 L1610.57 681.777 L1610.02 681.777 L1609.46 681.777 L1608.9 681.777 L1608.34 681.777 L1607.78 681.777 L1607.22 681.777 L1606.66 681.777 L1606.1 681.777 L1605.54 681.777 L1604.98 681.777 L1604.42 681.777 L1603.86 681.777 L1603.3 681.777 L1602.74 681.777 L1602.19 681.777 L1601.63 681.777 L1601.07 681.777 L1600.51 681.777 L1599.95 681.777 L1599.39 681.777 L1598.83 681.777 L1598.27 681.777 L1597.71 681.777 L1597.15 681.777 L1596.59 681.777 L1596.03 681.777 L1595.47 681.777 L1594.92 681.777 L1594.36 681.777 L1593.8 681.777 L1593.24 681.777 L1592.68 681.777 L1592.12 681.777 L1591.56 681.777 L1591 681.777 L1590.44 681.777 L1589.88 681.777 L1589.32 681.777 L1588.76 681.777 L1588.2 681.777 L1587.65 681.777 L1587.09 681.777 L1586.53 681.777 L1585.97 681.777 L1585.41 681.777 L1584.85 681.777 L1584.29 681.777 L1583.73 681.777 L1583.17 681.777 L1582.61 681.777 L1582.05 681.777 L1581.49 681.777 L1580.93 681.777 L1580.37 681.777 L1579.82 681.777 L1579.26 681.777 L1578.7 681.777 L1578.14 681.777 L1577.58 681.777 L1577.02 681.777 L1576.46 681.777 L1575.9 681.777 L1575.34 681.777 L1574.78 681.777 L1574.22 681.777 L1573.66 681.777 L1573.1 681.777 L1572.55 681.777 L1571.99 681.777 L1571.43 681.777 L1570.87 681.777 L1570.31 681.777 L1569.75 681.777 L1569.19 681.777 L1568.63 681.777 L1568.07 681.777 L1567.51 681.777 L1566.95 681.777 L1566.39 681.777 L1565.83 681.777 L1565.28 681.777 L1564.72 681.777 L1564.16 681.777 L1563.6 681.777 L1563.04 681.777 L1562.48 681.777 L1561.92 681.777 L1561.36 681.777 L1560.8 681.777 L1560.24 681.777 L1559.68 681.777 L1559.12 681.777 L1558.56 681.777 L1558 681.777 L1557.45 681.777 L1556.89 681.777 L1556.33 681.777 L1555.77 681.777 L1555.21 681.777 L1554.65 681.777 L1554.09 681.777 L1553.53 681.777 L1552.97 681.777 L1552.41 681.777 L1551.85 681.777 L1551.29 681.777 L1550.73 681.777 L1550.18 681.777 L1549.62 681.777 L1549.06 681.777 L1548.5 681.777 L1547.94 681.777 L1547.38 681.777 L1546.82 681.777 L1546.26 681.777 L1545.7 681.777 L1545.14 681.777 L1544.58 681.777 L1544.02 681.777 L1543.46 681.777 L1542.9 681.777 L1542.35 681.777 L1541.79 681.777 L1541.23 681.777 L1540.67 681.777 L1540.11 681.777 L1539.55 681.777 L1538.99 681.777 L1538.43 681.777 L1537.87 681.777 L1537.31 681.777 L1536.75 681.777 L1536.19 681.777 L1535.63 681.777 L1535.08 681.777 L1534.52 681.777 L1533.96 681.777 L1533.4 681.777 L1532.84 681.777 L1532.28 681.777 L1531.72 681.777 L1531.16 681.777 L1530.6 681.777 L1530.04 681.777 L1529.48 681.777 L1528.92 681.777 L1528.36 681.777 L1527.81 681.777 L1527.25 681.777 L1526.69 681.777 L1526.13 681.777 L1525.57 681.777 L1525.01 681.777 L1524.45 681.777 L1523.89 681.777 L1523.33 681.777 L1522.77 681.777 L1522.21 681.777 L1521.65 681.777 L1521.09 681.777 L1520.53 681.777 L1519.98 681.777 L1519.42 681.777 L1518.86 681.777 L1518.3 681.777 L1517.74 681.777 L1517.18 681.777 L1516.62 681.777 L1516.06 681.777 L1515.5 681.777 L1514.94 681.777 L1514.38 681.777 L1513.82 681.777 L1513.26 681.777 L1512.71 681.777 L1512.15 681.777 L1511.59 681.777 L1511.03 681.777 L1510.47 681.777 L1509.91 681.777 L1509.35 681.777 L1508.79 681.777 L1508.23 681.777 L1507.67 681.777 L1507.11 681.777 L1506.55 681.777 L1505.99 681.777 L1505.44 681.777 L1504.88 681.777 L1504.32 681.777 L1503.76 681.777 L1503.2 681.777 L1502.64 681.777 L1502.08 681.777 L1501.52 681.777 L1500.96 681.777 L1500.4 681.777 L1499.84 681.777 L1499.28 681.777 L1498.72 681.777 L1498.16 681.777 L1497.61 681.777 L1497.05 681.777 L1496.49 681.777 L1495.93 681.777 L1495.37 681.777 L1494.81 681.777 L1494.25 681.777 L1493.69 681.777 L1493.13 681.777 L1492.57 681.777 L1492.01 681.777 L1491.45 681.777 L1490.89 681.777 L1490.34 681.777 L1489.78 681.777 L1489.22 681.777 L1488.66 681.777 L1488.1 681.777 L1487.54 681.777 L1486.98 681.777 L1486.42 681.777 L1485.86 681.777 L1485.3 681.777 L1484.74 681.777 L1484.18 681.777 L1483.62 681.777 L1483.07 681.777 L1482.51 681.777 L1481.95 681.777 L1481.39 681.777 L1480.83 681.777 L1480.27 681.777 L1479.71 681.777 L1479.15 681.777 L1478.59 681.777 L1478.03 681.777 L1477.47 681.777 L1476.91 681.777 L1476.35 681.777 L1475.79 681.777 L1475.24 681.777 L1474.68 681.777 L1474.12 681.777 L1473.56 681.777 L1473 681.777 L1472.44 681.777 L1471.88 681.777 L1471.32 681.777 L1470.76 681.777 L1470.2 681.777 L1469.64 681.777 L1469.08 681.777 L1468.52 681.777 L1467.97 681.777 L1467.41 681.777 L1466.85 681.777 L1466.29 681.777 L1465.73 681.777 L1465.17 681.777 L1464.61 681.777 L1464.05 681.777 L1463.49 681.777 L1462.93 681.777 L1462.37 681.777 L1461.81 681.777 L1461.25 681.777 L1460.7 681.777 L1460.14 681.777 L1459.58 681.777 L1459.02 681.777 L1458.46 681.777 L1457.9 681.777 L1457.34 681.777 L1456.78 681.777 L1456.22 681.777 L1455.66 681.777 L1455.1 681.777 L1454.54 681.777 L1453.98 681.777 L1453.42 681.777 L1452.87 681.777 L1452.31 681.777 L1451.75 681.777 L1451.19 681.777 L1450.63 681.777 L1450.07 681.777 L1449.51 681.777 L1448.95 681.777 L1448.39 681.777 L1447.83 681.777 L1447.27 681.777 L1446.71 681.777 L1446.15 681.777 L1445.6 681.777 L1445.04 681.777 L1444.48 681.777 L1443.92 681.777 L1443.36 681.777 L1442.8 681.777 L1442.24 681.777 L1441.68 681.777 L1441.12 681.777 L1440.56 681.777 L1440 681.777 L1439.44 681.777 L1438.88 681.777 L1438.33 681.777 L1437.77 681.777 L1437.21 681.777 L1436.65 681.777 L1436.09 681.777 L1435.53 681.777 L1434.97 681.777 L1434.41 681.777 L1433.85 681.777 L1433.29 681.777 L1432.73 681.777 L1432.17 681.777 L1431.61 681.777 L1431.05 681.777 L1430.5 681.777 L1429.94 681.777 L1429.38 681.777 L1428.82 681.777 L1428.26 681.777 L1427.7 681.777 L1427.14 681.777 L1426.58 681.777 L1426.02 681.777 L1425.46 681.777 L1424.9 681.777 L1424.34 681.777 L1423.78 681.777 L1423.23 681.777 L1422.67 681.777 L1422.11 681.777 L1421.55 681.777 L1420.99 681.777 L1420.43 681.777 L1419.87 681.777 L1419.31 681.777 L1418.75 681.777 L1418.19 681.777 L1417.63 681.777 L1417.07 681.777 L1416.51 681.777 L1415.95 681.777 L1415.4 681.777 L1414.84 681.777 L1414.28 681.777 L1413.72 681.777 L1413.16 681.777 L1412.6 681.777 L1412.04 681.777 L1411.48 681.777 L1410.92 681.777 L1410.36 681.777 L1409.8 681.777 L1409.24 681.777 L1408.68 681.777 L1408.13 681.777 L1407.57 681.777 L1407.01 681.777 L1406.45 681.777 L1405.89 681.777 L1405.33 681.777 L1404.77 681.777 L1404.21 681.777 L1403.65 681.777 L1403.09 681.777 L1402.53 681.777 L1401.97 681.777 L1401.41 681.777 L1400.86 681.777 L1400.3 681.777 L1399.74 681.777 L1399.18 681.777 L1398.62 681.777 L1398.06 681.777 L1397.5 681.777 L1396.94 681.777 L1396.38 681.777 L1395.82 681.777 L1395.26 681.777 L1394.7 681.777 L1394.14 681.777 L1393.58 681.777 L1393.03 681.777 L1392.47 681.777 L1391.91 681.777 L1391.35 681.777 L1390.79 681.777 L1390.23 681.777 L1389.67 681.777 L1389.11 681.777 L1388.55 681.777 L1387.99 681.777 L1387.43 681.777 L1386.87 681.777 L1386.31 681.777 L1385.76 681.777 L1385.2 681.777 L1384.64 681.777 L1384.08 681.777 L1383.52 681.777 L1382.96 681.777 L1382.4 681.777 L1381.84 681.777 L1381.28 681.777 L1380.72 681.777 L1380.16 681.777 L1379.6 681.777 L1379.04 681.777 L1378.49 681.777 L1377.93 681.777 L1377.37 681.777 L1376.81 681.777 L1376.25 681.777 L1375.69 681.777 L1375.13 681.777 L1374.57 681.777 L1374.01 681.777 L1373.45 681.777 L1372.89 681.777 L1372.33 681.777 L1371.77 681.777 L1371.21 681.777 L1370.66 681.777 L1370.1 681.777 L1369.54 681.777 L1368.98 681.777 L1368.42 681.777 L1367.86 681.777 L1367.3 681.777 L1366.74 681.777 L1366.18 681.777 L1365.62 681.777 L1365.06 681.777 L1364.5 681.777 L1363.94 681.777 L1363.39 681.777 L1362.83 681.777 L1362.27 681.777 L1361.71 681.777 L1361.15 681.777 L1360.59 681.777 L1360.03 681.777 L1359.47 681.777 L1358.91 681.777 L1358.35 681.777 L1357.79 681.777 L1357.23 681.777 L1356.67 681.777 L1356.12 681.777 L1355.56 681.777 L1355 681.777 L1354.44 681.777 L1353.88 681.777 L1353.32 681.777 L1352.76 681.777 L1352.2 681.777 L1351.64 681.777 L1351.08 681.777 L1350.52 681.777 L1349.96 681.777 L1349.4 681.777 L1348.84 681.777 L1348.29 681.777 L1347.73 681.777 L1347.17 681.777 L1346.61 681.777 L1346.05 681.777 L1345.49 681.777 L1344.93 681.777 L1344.37 681.777 L1343.81 681.777 L1343.25 681.777 L1342.69 681.777 L1342.13 681.777 L1341.57 681.777 L1341.02 681.777 L1340.46 681.777 L1339.9 681.777 L1339.34 681.777 L1338.78 681.777 L1338.22 681.777 L1337.66 681.777 L1337.1 681.777 L1336.54 681.777 L1335.98 681.777 L1335.42 681.777 L1334.86 681.777 L1334.3 681.777 L1333.75 681.777 L1333.19 681.777 L1332.63 681.777 L1332.07 681.777 L1331.51 681.777 L1330.95 681.777 L1330.39 681.777 L1329.83 681.777 L1329.27 681.777 L1328.71 681.777 L1328.15 681.777 L1327.59 681.777 L1327.03 681.777 L1326.47 681.777 L1325.92 681.777 L1325.36 681.777 L1324.8 681.777 L1324.24 681.777 L1323.68 681.777 L1323.12 681.777 L1322.56 681.777 L1322 681.777 L1321.44 681.777 L1320.88 681.777 L1320.32 681.777 L1319.76 681.777 L1319.2 681.777 L1318.65 681.777 L1318.09 681.777 L1317.53 681.777 L1316.97 681.777 L1316.41 681.777 L1315.85 681.777 L1315.29 681.777 L1314.73 681.777 L1314.17 681.777 L1313.61 681.777 L1313.05 681.777 L1312.49 681.777 L1311.93 681.777 L1311.38 681.777 L1310.82 681.777 L1310.26 681.777 L1309.7 681.777 L1309.14 681.777 L1308.58 681.777 L1308.02 681.777 L1307.46 681.777 L1306.9 681.777 L1306.34 681.777 L1305.78 681.777 L1305.22 681.777 L1304.66 681.777 L1304.1 681.777 L1303.55 681.777 L1302.99 681.777 L1302.43 681.777 L1301.87 681.777 L1301.31 681.777 L1300.75 681.777 L1300.19 681.777 L1299.63 681.777 L1299.07 681.777 L1298.51 681.777 L1297.95 681.777 L1297.39 681.777 L1296.83 681.777 L1296.28 681.777 L1295.72 681.777 L1295.16 681.777 L1294.6 681.777 L1294.04 681.777 L1293.48 681.777 L1292.92 681.777 L1292.36 681.777 L1291.8 681.777 L1291.24 681.777 L1290.68 681.777 L1290.12 681.777 L1289.56 681.777 L1289 681.777 L1288.45 681.777 L1287.89 681.777 L1287.33 681.777 L1286.77 681.777 L1286.21 681.777 L1285.65 681.777 L1285.09 681.777 L1284.53 681.777 L1283.97 681.777 L1283.41 681.777 L1282.85 681.777 L1282.29 681.777 L1281.73 681.777 L1281.18 681.777 L1280.62 681.777 L1280.06 681.777 L1279.5 681.777 L1278.94 681.777 L1278.38 681.777 L1277.82 681.777 L1277.26 681.777 L1276.7 681.777 L1276.14 681.777 L1275.58 681.777 L1275.02 681.777 L1274.46 681.777 L1273.91 681.777 L1273.35 681.777 L1272.79 681.777 L1272.23 681.777 L1271.67 681.777 L1271.11 681.777 L1270.55 681.777 L1269.99 681.777 L1269.43 681.777 L1268.87 681.777 L1268.31 681.777 L1267.75 681.777 L1267.19 681.777 L1266.63 681.777 L1266.08 681.777 L1265.52 681.777 L1264.96 681.777 L1264.4 681.777 L1263.84 681.777 L1263.28 681.777 L1262.72 681.777 L1262.16 681.777 L1261.6 681.777 L1261.04 681.777 L1260.48 681.777 L1259.92 681.777 L1259.36 681.777 L1258.81 681.777 L1258.25 681.777 L1257.69 681.777 L1257.13 681.777 L1256.57 681.777 L1256.01 681.777 L1255.45 681.777 L1254.89 681.777 L1254.33 681.777 L1253.77 681.777 L1253.21 681.777 L1252.65 681.777 L1252.09 681.777 L1251.54 681.777 L1250.98 681.777 L1250.42 681.777 L1249.86 681.777 L1249.3 681.777 L1248.74 681.777 L1248.18 681.777 L1247.62 681.777 L1247.06 681.777 L1246.5 681.777 L1245.94 681.777 L1245.38 681.777 L1244.82 681.777 L1244.26 681.777 L1243.71 681.777 L1243.15 681.777 L1242.59 681.777 L1242.03 681.777 L1241.47 681.777 L1240.91 681.777 L1240.35 681.777 L1239.79 681.777 L1239.23 681.777 L1238.67 681.777 L1238.11 681.777 L1237.55 681.777 L1236.99 681.777 L1236.44 681.777 L1235.88 681.777 L1235.32 681.777 L1234.76 681.777 L1234.2 681.777 L1233.64 681.777 L1233.08 681.777 L1232.52 681.777 L1231.96 681.777 L1231.4 681.777 L1230.84 681.777 L1230.28 681.777 L1229.72 681.777 L1229.17 681.777 L1228.61 681.777 L1228.05 681.777 L1227.49 681.777 L1226.93 681.777 L1226.37 681.777 L1225.81 681.777 L1225.25 681.777 L1224.69 681.777 L1224.13 681.777 L1223.57 681.777 L1223.01 681.777 L1222.45 681.777 L1221.89 681.777 L1221.34 681.777 L1220.78 681.777 L1220.22 681.777 L1219.66 681.777 L1219.1 681.777 L1218.54 681.777 L1217.98 681.777 L1217.42 681.777 L1216.86 681.777 L1216.3 681.777 L1215.74 681.777 L1215.18 681.777 L1214.62 681.777 L1214.07 681.777 L1213.51 681.777 L1212.95 681.777 L1212.39 681.777 L1211.83 681.777 L1211.27 681.777 L1210.71 681.777 L1210.15 681.777 L1209.59 681.777 L1209.03 681.777 L1208.47 681.777 L1207.91 681.777 L1207.35 681.777 L1206.8 681.777 L1206.24 681.777 L1205.68 681.777 L1205.12 681.777 L1204.56 681.777 L1204 681.777 L1203.44 681.777 L1202.88 681.777 L1202.32 681.777 L1201.76 681.777 L1201.2 681.777 L1200.64 681.777 L1200.08 681.777 L1199.52 681.777 L1198.97 681.777 L1198.41 681.777 L1197.85 681.777 L1197.29 681.777 L1196.73 681.777 L1196.17 681.777 L1195.61 681.777 L1195.05 681.777 L1194.49 681.777 L1193.93 681.777 L1193.37 681.777 L1192.81 681.777 L1192.25 681.777 L1191.7 681.777 L1191.14 681.777 L1190.58 681.777 L1190.02 681.777 L1189.46 681.777 L1188.9 681.777 L1188.34 681.777 L1187.78 681.777 L1187.22 681.777 L1186.66 681.777 L1186.1 681.777 L1185.54 681.777 L1184.98 681.777 L1184.43 681.777 L1183.87 681.777 L1183.31 681.777 L1182.75 681.777 L1182.19 681.777 L1181.63 681.777 L1181.07 681.777 L1180.51 681.777 L1179.95 681.777 L1179.39 681.777 L1178.83 681.777 L1178.27 681.777 L1177.71 681.777 L1177.15 681.777 L1176.6 681.777 L1176.04 681.777 L1175.48 681.777 L1174.92 681.777 L1174.36 681.777 L1173.8 681.777 L1173.24 681.777 L1172.68 681.777 L1172.12 681.777 L1171.56 681.777 L1171 681.777 L1170.44 681.777 L1169.88 681.777 L1169.33 681.777 L1168.77 681.777 L1168.21 681.777 L1167.65 681.777 L1167.09 681.777 L1166.53 681.777 L1165.97 681.777 L1165.41 681.777 L1164.85 681.777 L1164.29 681.777 L1163.73 681.777 L1163.17 681.777 L1162.61 681.777 L1162.05 681.777 L1161.5 681.777 L1160.94 681.777 L1160.38 681.777 L1159.82 681.777 L1159.26 681.777 L1158.7 681.777 L1158.14 681.777 L1157.58 681.777 L1157.02 681.777 L1156.46 681.777 L1155.9 681.777 L1155.34 681.777 L1154.78 681.777 L1154.23 681.777 L1153.67 681.777 L1153.11 681.777 L1152.55 681.777 L1151.99 681.777 L1151.43 681.777 L1150.87 681.777 L1150.31 681.777 L1149.75 681.777 L1149.19 681.777 L1148.63 681.777 L1148.07 681.777 L1147.51 681.777 L1146.96 681.777 L1146.4 681.777 L1145.84 681.777 L1145.28 681.777 L1144.72 681.777 L1144.16 681.777 L1143.6 681.777 L1143.04 681.777 L1142.48 681.777 L1141.92 681.777 L1141.36 681.777 L1140.8 681.777 L1140.24 681.777 L1139.68 681.777 L1139.13 681.777 L1138.57 681.777 L1138.01 681.777 L1137.45 681.777 L1136.89 681.777 L1136.33 681.777 L1135.77 681.777 L1135.21 681.777 L1134.65 681.777 L1134.09 681.777 L1133.53 681.777 L1132.97 681.777 L1132.41 681.777 L1131.86 681.777 L1131.3 681.777 L1130.74 681.777 L1130.18 681.777 L1129.62 681.777 L1129.06 681.777 L1128.5 681.777 L1127.94 681.777 L1127.38 681.777 L1126.82 681.777 L1126.26 681.777 L1125.7 681.777 L1125.14 681.777 L1124.59 681.777 L1124.03 681.777 L1123.47 681.777 L1122.91 681.777 L1122.35 681.777 L1121.79 681.777 L1121.23 681.777 L1120.67 681.777 L1120.11 681.777 L1119.55 681.777 L1118.99 681.777 L1118.43 681.777 L1117.87 681.777 L1117.31 681.777 L1116.76 681.777 L1116.2 681.777 L1115.64 681.777 L1115.08 681.777 L1114.52 681.777 L1113.96 681.777 L1113.4 681.777 L1112.84 681.777 L1112.28 681.777 L1111.72 681.777 L1111.16 681.777 L1110.6 681.777 L1110.04 681.777 L1109.49 681.777 L1108.93 681.777 L1108.37 681.777 L1107.81 681.777 L1107.25 681.777 L1106.69 681.777 L1106.13 681.777 L1105.57 681.777 L1105.01 681.777 L1104.45 681.777 L1103.89 681.777 L1103.33 681.777 L1102.77 681.777 L1102.22 681.777 L1101.66 681.777 L1101.1 681.777 L1100.54 681.777 L1099.98 681.777 L1099.42 681.777 L1098.86 681.777 L1098.3 681.777 L1097.74 681.777 L1097.18 681.777 L1096.62 681.777 L1096.06 681.777 L1095.5 681.777 L1094.94 681.777 L1094.39 681.777 L1093.83 681.777 L1093.27 681.777 L1092.71 681.777 L1092.15 681.777 L1091.59 681.777 L1091.03 681.777 L1090.47 681.777 L1089.91 681.777 L1089.35 681.777 L1088.79 681.777 L1088.23 681.777 L1087.67 681.777 L1087.12 681.777 L1086.56 681.777 L1086 681.777 L1085.44 681.777 L1084.88 681.777 L1084.32 681.777 L1083.76 681.777 L1083.2 681.777 L1082.64 681.777 L1082.08 681.777 L1081.52 681.777 L1080.96 681.777 L1080.4 681.777 L1079.85 681.777 L1079.29 681.777 L1078.73 681.777 L1078.17 681.777 L1077.61 681.777 L1077.05 681.777 L1076.49 681.777 L1075.93 681.777 L1075.37 681.777 L1074.81 681.777 L1074.25 681.777 L1073.69 681.777 L1073.13 681.777 L1072.57 681.777 L1072.02 681.777 L1071.46 681.777 L1070.9 681.777 L1070.34 681.777 L1069.78 681.777 L1069.22 681.777 L1068.66 681.777 L1068.1 681.777 L1067.54 681.777 L1066.98 681.777 L1066.42 681.777 L1065.86 681.777 L1065.3 681.777 L1064.75 681.777 L1064.19 681.777 L1063.63 681.777 L1063.07 681.777 L1062.51 681.777 L1061.95 681.777 L1061.39 681.777 L1060.83 681.777 L1060.27 681.777 L1059.71 681.777 L1059.15 681.777 L1058.59 681.777 L1058.03 681.777 L1057.48 681.777 L1056.92 681.777 L1056.36 681.777 L1055.8 681.777 L1055.24 681.777 L1054.68 681.777 L1054.12 681.777 L1053.56 681.777 L1053 681.777 L1052.44 681.777 L1051.88 681.777 L1051.32 681.777 L1050.76 681.777 L1050.2 681.777 L1049.65 681.777 L1049.09 681.777 L1048.53 681.777 L1047.97 681.777 L1047.41 681.777 L1046.85 681.777 L1046.29 681.777 L1045.73 681.777 L1045.17 681.777 L1044.61 681.777 L1044.05 681.777 L1043.49 681.777 L1042.93 681.777 L1042.38 681.777 L1041.82 681.777 L1041.26 681.777 L1040.7 681.777 L1040.14 681.777 L1039.58 681.777 L1039.02 681.777 L1038.46 681.777 L1037.9 681.777 L1037.34 681.777 L1036.78 681.777 L1036.22 681.777 L1035.66 681.777 L1035.1 681.777 L1034.55 681.777 L1033.99 681.777 L1033.43 681.777 L1032.87 681.777 L1032.31 681.777 L1031.75 681.777 L1031.19 681.777 L1030.63 681.777 L1030.07 681.777 L1029.51 681.777 L1028.95 681.777 L1028.39 681.777 L1027.83 681.777 L1027.28 681.777 L1026.72 681.777 L1026.16 681.777 L1025.6 681.777 L1025.04 681.777 L1024.48 681.777 L1023.92 681.777 L1023.36 681.777 L1022.8 681.777 L1022.24 681.777 L1021.68 681.777 L1021.12 681.777 L1020.56 681.777 L1020.01 681.777 L1019.45 681.777 L1018.89 681.777 L1018.33 681.777 L1017.77 681.777 L1017.21 681.777 L1016.65 681.777 L1016.09 681.777 L1015.53 681.777 L1014.97 681.777 L1014.41 681.777 L1013.85 681.777 L1013.29 681.777 L1012.73 681.777 L1012.18 681.777 L1011.62 681.777 L1011.06 681.777 L1010.5 681.777 L1009.94 681.777 L1009.38 681.777 L1008.82 681.777 L1008.26 681.777 L1007.7 681.777 L1007.14 681.777 L1006.58 681.777 L1006.02 681.777 L1005.46 681.777 L1004.91 681.777 L1004.35 681.777 L1003.79 681.777 L1003.23 681.777 L1002.67 681.777 L1002.11 681.777 L1001.55 681.777 L1000.99 681.777 L1000.43 681.777 L999.872 681.777 L999.313 681.777 L998.754 681.777 L998.194 681.777 L997.635 681.777 L997.076 681.777 L996.517 681.777 L995.957 681.777 L995.398 681.777 L994.839 681.777 L994.28 681.777 L993.72 681.777 L993.161 681.777 L992.602 681.777 L992.043 681.777 L991.483 681.777 L990.924 681.777 L990.365 681.777 L989.806 681.777 L989.246 681.777 L988.687 681.777 L988.128 681.777 L987.569 681.777 L987.009 681.777 L986.45 681.777 L985.891 681.777 L985.332 681.777 L984.772 681.777 L984.213 681.777 L983.654 681.777 L983.095 681.777 L982.535 681.777 L981.976 681.777 L981.417 681.777 L980.858 681.777 L980.298 681.777 L979.739 681.777 L979.18 681.777 L978.621 681.777 L978.061 681.777 L977.502 681.777 L976.943 681.777 L976.384 681.777 L975.824 681.777 L975.265 681.777 L974.706 681.777 L974.147 681.777 L973.587 681.777 L973.028 681.777 L972.469 681.777 L971.91 681.777 L971.35 681.777 L970.791 681.777 L970.232 681.777 L969.673 681.777 L969.113 681.777 L968.554 681.777 L967.995 681.777 L967.436 681.777 L966.876 681.777 L966.317 681.777 L965.758 681.777 L965.199 681.777 L964.639 681.777 L964.08 681.777 L963.521 681.777 L962.962 681.777 L962.402 681.777 L961.843 681.777 L961.284 681.777 L960.725 681.777 L960.165 681.777 L959.606 681.777 L959.047 681.777 L958.488 681.777 L957.928 681.777 L957.369 681.777 L956.81 681.777 L956.251 681.777 L955.691 681.777 L955.132 681.777 L954.573 681.777 L954.014 681.777 L953.454 681.777 L952.895 681.777 L952.336 681.777 L951.777 681.777 L951.217 681.777 L950.658 681.777 L950.099 681.777 L949.54 681.777 L948.98 681.777 L948.421 681.777 L947.862 681.777 L947.303 681.777 L946.743 681.777 L946.184 681.777 L945.625 681.777 L945.066 681.777 L944.506 681.777 L943.947 681.777 L943.388 681.777 L942.829 681.777 L942.269 681.777 L941.71 681.777 L941.151 681.777 L940.592 681.777 L940.032 681.777 L939.473 681.777 L938.914 681.777 L938.355 681.777 L937.795 681.777 L937.236 681.777 L936.677 681.777 L936.118 681.777 L935.558 681.777 L934.999 681.777 L934.44 681.777 L933.881 681.777 L933.321 681.777 L932.762 681.777 L932.203 681.777 L931.644 681.777 L931.084 681.777 L930.525 681.777 L929.966 681.777 L929.406 681.777 L928.847 681.777 L928.288 681.777 L927.729 681.777 L927.169 681.777 L926.61 681.777 L926.051 681.777 L925.492 681.777 L924.932 681.777 L924.373 681.777 L923.814 681.777 L923.255 681.777 L922.695 681.777 L922.136 681.777 L921.577 681.777 L921.018 681.777 L920.458 681.777 L919.899 681.777 L919.34 681.777 L918.781 681.777 L918.221 681.777 L917.662 681.777 L917.103 681.777 L916.544 681.777 L915.984 681.777 L915.425 681.777 L914.866 681.777 L914.307 681.777 L913.747 681.777 L913.188 681.777 L912.629 681.777 L912.07 681.777 L911.51 681.777 L910.951 681.777 L910.392 681.777 L909.833 681.777 L909.273 681.777 L908.714 681.777 L908.155 681.777 L907.596 681.777 L907.036 681.777 L906.477 681.777 L905.918 681.777 L905.359 681.777 L904.799 681.777 L904.24 681.777 L903.681 681.777 L903.122 681.777 L902.562 681.777 L902.003 681.777 L901.444 681.777 L900.885 681.777 L900.325 681.777 L899.766 681.777 L899.207 681.777 L898.648 681.777 L898.088 681.777 L897.529 681.777 L896.97 681.777 L896.411 681.777 L895.851 681.777 L895.292 681.777 L894.733 681.777 L894.174 681.777 L893.614 681.777 L893.055 681.777 L892.496 681.777 L891.937 681.777 L891.377 681.777 L890.818 681.777 L890.259 681.777 L889.7 681.777 L889.14 681.777 L888.581 681.777 L888.022 681.777 L887.463 681.777 L886.903 681.777 L886.344 681.777 L885.785 681.777 L885.226 681.777 L884.666 681.777 L884.107 681.777 L883.548 681.777 L882.989 681.777 L882.429 681.777 L881.87 681.777 L881.311 681.777 L880.752 681.777 L880.192 681.777 L879.633 681.777 L879.074 681.777 L878.515 681.777 L877.955 681.777 L877.396 681.777 L876.837 681.777 L876.278 681.777 L875.718 681.777 L875.159 681.777 L874.6 681.777 L874.041 681.777 L873.481 681.777 L872.922 681.777 L872.363 681.777 L871.804 681.777 L871.244 681.777 L870.685 681.777 L870.126 681.777 L869.567 681.777 L869.007 681.777 L868.448 681.777 L867.889 681.777 L867.33 681.777 L866.77 681.777 L866.211 681.777 L865.652 681.777 L865.093 681.777 L864.533 681.777 L863.974 681.777 L863.415 681.777 L862.856 681.777 L862.296 681.777 L861.737 681.777 L861.178 681.777 L860.619 681.777 L860.059 681.777 L859.5 681.777 L858.941 681.777 L858.382 681.777 L857.822 681.777 L857.263 681.777 L856.704 681.777 L856.145 681.777 L855.585 681.777 L855.026 681.777 L854.467 681.777 L853.908 681.777 L853.348 681.777 L852.789 681.777 L852.23 681.777 L851.671 681.777 L851.111 681.777 L850.552 681.777 L849.993 681.777 L849.434 681.777 L848.874 681.777 L848.315 681.777 L847.756 681.777 L847.197 681.777 L846.637 681.777 L846.078 681.777 L845.519 681.777 L844.96 681.777 L844.4 681.777 L843.841 681.777 L843.282 681.777 L842.723 681.777 L842.163 681.777 L841.604 681.777 L841.045 681.777 L840.486 681.777 L839.926 681.777 L839.367 681.777 L838.808 681.777 L838.249 681.777 L837.689 681.777 L837.13 681.777 L836.571 681.777 L836.012 681.777 L835.452 681.777 L834.893 681.777 L834.334 681.777 L833.775 681.777 L833.215 681.777 L832.656 681.777 L832.097 681.777 L831.538 681.777 L830.978 681.777 L830.419 681.777 L829.86 681.777 L829.301 681.777 L828.741 681.777 L828.182 681.777 L827.623 681.777 L827.064 681.777 L826.504 681.777 L825.945 681.777 L825.386 681.777 L824.827 681.777 L824.267 681.777 L823.708 681.777 L823.149 681.777 L822.59 681.777 L822.03 681.777 L821.471 681.777 L820.912 681.777 L820.353 681.777 L819.793 681.777 L819.234 681.777 L818.675 681.777 L818.116 681.777 L817.556 681.777 L816.997 681.777 L816.438 681.777 L815.879 681.777 L815.319 681.777 L814.76 681.777 L814.201 681.777 L813.642 681.777 L813.082 681.777 L812.523 681.777 L811.964 681.777 L811.405 681.777 L810.845 681.777 L810.286 681.777 L809.727 681.777 L809.168 681.777 L808.608 681.777 L808.049 681.777 L807.49 681.777 L806.931 681.777 L806.371 681.777 L805.812 681.777 L805.253 681.777 L804.693 681.777 L804.134 681.777 L803.575 681.777 L803.016 681.777 L802.456 681.777 L801.897 681.777 L801.338 681.777 L800.779 681.777 L800.219 681.777 L799.66 681.777 L799.101 681.777 L798.542 681.777 L797.982 681.777 L797.423 681.777 L796.864 681.777 L796.305 681.777 L795.745 681.777 L795.186 681.777 L794.627 681.777 L794.068 681.777 L793.508 681.777 L792.949 681.777 L792.39 681.777 L791.831 681.777 L791.271 681.777 L790.712 681.777 L790.153 681.777 L789.594 681.777 L789.034 681.777 L788.475 681.777 L787.916 681.777 L787.357 681.777 L786.797 681.777 L786.238 681.777 L785.679 681.777 L785.12 681.777 L784.56 681.777 L784.001 681.777 L783.442 681.777 L782.883 681.777 L782.323 681.777 L781.764 681.777 L781.205 681.777 L780.646 681.777 L780.086 681.777 L779.527 681.777 L778.968 681.777 L778.409 681.777 L777.849 681.777 L777.29 681.777 L776.731 681.777 L776.172 681.777 L775.612 681.777 L775.053 681.777 L774.494 681.777 L773.935 681.777 L773.375 681.777 L772.816 681.777 L772.257 681.777 L771.698 681.777 L771.138 681.777 L770.579 681.777 L770.02 681.777 L769.461 681.777 L768.901 681.777 L768.342 681.777 L767.783 681.777 L767.224 681.777 L766.664 681.777 L766.105 681.777 L765.546 681.777 L764.987 681.777 L764.427 681.777 L763.868 681.777 L763.309 681.777 L762.75 681.777 L762.19 681.777 L761.631 681.777 L761.072 681.777 L760.513 681.777 L759.953 681.777 L759.394 681.777 L758.835 681.777 L758.276 681.777 L757.716 681.777 L757.157 681.777 L756.598 681.777 L756.039 681.777 L755.479 681.777 L754.92 681.777 L754.361 681.777 L753.802 681.777 L753.242 681.777 L752.683 681.777 L752.124 681.777 L751.565 681.777 L751.005 681.777 L750.446 681.777 L749.887 681.777 L749.328 681.777 L748.768 681.777 L748.209 681.777 L747.65 681.777 L747.091 681.777 L746.531 681.777 L745.972 681.777 L745.413 681.777 L744.854 681.777 L744.294 681.777 L743.735 681.777 L743.176 681.777 L742.617 681.777 L742.057 681.777 L741.498 681.777 L740.939 681.777 L740.38 681.777 L739.82 681.777 L739.261 681.777 L738.702 681.777 L738.143 681.777 L737.583 681.777 L737.024 681.777 L736.465 681.777 L735.906 681.777 L735.346 681.777 L734.787 681.777 L734.228 681.777 L733.669 681.777 L733.109 681.777 L732.55 681.777 L731.991 681.777 L731.432 681.777 L730.872 681.777 L730.313 681.777 L729.754 681.777 L729.195 681.777 L728.635 681.777 L728.076 681.777 L727.517 681.777 L726.958 681.777 L726.398 681.777 L725.839 681.777 L725.28 681.777 L724.721 681.777 L724.161 681.777 L723.602 681.777 L723.043 681.777 L722.484 681.777 L721.924 681.777 L721.365 681.777 L720.806 681.777 L720.247 681.777  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.866 720.806,686.866 721.365,686.866 721.924,686.866 722.484,686.866 723.043,686.866 723.602,686.866 724.161,686.866 724.721,686.866 725.28,686.866 725.839,686.866 726.398,686.866 726.958,686.866 727.517,686.866 728.076,686.866 728.635,686.866 729.195,686.866 729.754,686.866 730.313,686.866 730.872,686.866 731.432,686.866 731.991,686.866 732.55,686.866 733.109,686.866 733.669,686.866 734.228,686.866 734.787,686.866 735.346,686.866 735.906,686.866 736.465,686.866 737.024,686.866 737.583,686.866 738.143,686.866 738.702,686.866 739.261,686.866 739.82,686.866 740.38,686.866 740.939,686.866 741.498,686.866 742.057,686.866 742.617,686.866 743.176,686.866 743.735,686.866 744.294,686.866 744.854,686.866 745.413,686.866 745.972,686.866 746.531,686.866 747.091,686.866 747.65,686.866 748.209,686.866 748.768,686.866 749.328,686.866 749.887,686.866 750.446,686.866 751.005,686.866 751.565,686.866 752.124,686.866 752.683,686.866 753.242,686.866 753.802,686.866 754.361,686.866 754.92,686.866 755.479,686.866 756.039,686.866 756.598,686.866 757.157,686.866 757.716,686.866 758.276,686.866 758.835,686.866 759.394,686.866 759.953,686.866 760.513,686.866 761.072,686.866 761.631,686.866 762.19,686.866 762.75,686.866 763.309,686.866 763.868,686.866 764.427,686.866 764.987,686.866 765.546,686.866 766.105,686.866 766.664,686.866 767.224,686.866 767.783,686.866 768.342,686.866 768.901,686.866 769.461,686.866 770.02,686.866 770.579,686.866 771.138,686.866 771.698,686.866 772.257,686.866 772.816,686.866 773.375,686.866 773.935,686.866 774.494,686.866 775.053,686.866 775.612,686.866 776.172,686.866 776.731,686.866 777.29,686.866 777.849,686.866 778.409,686.866 778.968,686.866 779.527,686.866 780.086,686.866 780.646,686.866 781.205,686.866 781.764,686.866 782.323,686.866 782.883,686.866 783.442,686.866 784.001,686.866 784.56,686.866 785.12,686.866 785.679,686.866 786.238,686.866 786.797,686.866 787.357,686.866 787.916,686.866 788.475,686.866 789.034,686.866 789.594,686.866 790.153,686.866 790.712,686.866 791.271,686.866 791.831,686.866 792.39,686.866 792.949,686.866 793.508,686.866 794.068,686.866 794.627,686.866 795.186,686.866 795.745,686.866 796.305,686.866 796.864,686.866 797.423,686.866 797.982,686.866 798.542,686.866 799.101,686.866 799.66,686.866 800.219,686.866 800.779,686.866 801.338,686.866 801.897,686.866 802.456,686.866 803.016,686.866 803.575,686.866 804.134,686.866 804.693,686.866 805.253,686.866 805.812,686.866 806.371,686.866 806.931,686.866 807.49,686.866 808.049,686.866 808.608,686.866 809.168,686.866 809.727,686.866 810.286,686.866 810.845,686.866 811.405,686.866 811.964,686.866 812.523,686.866 813.082,686.866 813.642,686.866 814.201,686.866 814.76,686.866 815.319,686.866 815.879,686.866 816.438,686.866 816.997,686.866 817.556,686.866 818.116,686.866 818.675,686.866 819.234,686.866 819.793,686.866 820.353,686.866 820.912,686.866 821.471,686.866 822.03,686.866 822.59,686.866 823.149,686.866 823.708,686.866 824.267,686.866 824.827,686.866 825.386,686.866 825.945,686.866 826.504,686.866 827.064,686.866 827.623,686.866 828.182,686.866 828.741,686.866 829.301,686.866 829.86,686.866 830.419,686.866 830.978,686.866 831.538,686.866 832.097,686.866 832.656,686.866 833.215,686.866 833.775,686.866 834.334,686.866 834.893,686.866 835.452,686.866 836.012,686.866 836.571,686.866 837.13,686.866 837.689,686.866 838.249,686.866 838.808,686.866 839.367,686.866 839.926,686.866 840.486,686.866 841.045,686.866 841.604,686.866 842.163,686.866 842.723,686.866 843.282,686.866 843.841,686.866 844.4,686.866 844.96,686.866 845.519,686.866 846.078,686.866 846.637,686.866 847.197,686.866 847.756,686.866 848.315,686.866 848.874,686.866 849.434,686.866 849.993,686.866 850.552,686.866 851.111,686.866 851.671,686.866 852.23,686.866 852.789,686.866 853.348,686.866 853.908,686.866 854.467,686.866 855.026,686.866 855.585,686.866 856.145,686.866 856.704,686.866 857.263,686.866 857.822,686.866 858.382,686.866 858.941,686.866 859.5,686.866 860.059,686.866 860.619,686.866 861.178,686.866 861.737,686.866 862.296,686.866 862.856,686.866 863.415,686.866 863.974,686.866 864.533,686.866 865.093,686.866 865.652,686.866 866.211,686.866 866.77,686.866 867.33,686.866 867.889,686.866 868.448,686.866 869.007,686.866 869.567,686.866 870.126,686.866 870.685,686.866 871.244,686.866 871.804,686.866 872.363,686.866 872.922,686.866 873.481,686.866 874.041,686.866 874.6,686.866 875.159,686.866 875.718,686.866 876.278,686.866 876.837,686.866 877.396,686.866 877.955,686.866 878.515,686.866 879.074,686.866 879.633,686.866 880.192,686.866 880.752,686.866 881.311,686.866 881.87,686.866 882.429,686.866 882.989,686.866 883.548,686.866 884.107,686.866 884.666,686.866 885.226,686.866 885.785,686.866 886.344,686.866 886.903,686.866 887.463,686.866 888.022,686.866 888.581,686.866 889.14,686.866 889.7,686.866 890.259,686.866 890.818,686.866 891.377,686.866 891.937,686.866 892.496,686.866 893.055,686.866 893.614,686.866 894.174,686.866 894.733,686.866 895.292,686.866 895.851,686.866 896.411,686.866 896.97,686.866 897.529,686.866 898.088,686.866 898.648,686.866 899.207,686.866 899.766,686.866 900.325,686.866 900.885,686.866 901.444,686.866 902.003,686.866 902.562,686.866 903.122,686.866 903.681,686.866 904.24,686.866 904.799,686.866 905.359,686.866 905.918,686.866 906.477,686.866 907.036,686.866 907.596,686.866 908.155,686.866 908.714,686.866 909.273,686.866 909.833,686.866 910.392,686.866 910.951,686.866 911.51,686.866 912.07,686.866 912.629,686.866 913.188,686.866 913.747,686.866 914.307,686.866 914.866,686.866 915.425,686.866 915.984,686.866 916.544,686.866 917.103,686.866 917.662,686.866 918.221,686.866 918.781,686.866 919.34,686.866 919.899,686.866 920.458,686.866 921.018,686.866 921.577,686.866 922.136,686.866 922.695,686.866 923.255,686.866 923.814,686.866 924.373,686.866 924.932,686.866 925.492,686.866 926.051,686.866 926.61,686.866 927.169,686.866 927.729,686.866 928.288,686.866 928.847,686.866 929.406,686.866 929.966,686.866 930.525,686.866 931.084,686.866 931.644,686.866 932.203,686.866 932.762,686.866 933.321,686.866 933.881,686.866 934.44,686.866 934.999,686.866 935.558,686.866 936.118,686.866 936.677,686.866 937.236,686.866 937.795,686.866 938.355,686.866 938.914,686.866 939.473,686.866 940.032,686.866 940.592,686.866 941.151,686.866 941.71,686.866 942.269,686.866 942.829,686.866 943.388,686.866 943.947,686.866 944.506,686.866 945.066,686.866 945.625,686.866 946.184,686.866 946.743,686.866 947.303,686.866 947.862,686.866 948.421,686.866 948.98,686.866 949.54,686.866 950.099,686.866 950.658,686.866 951.217,686.866 951.777,686.866 952.336,686.866 952.895,686.866 953.454,686.866 954.014,686.866 954.573,686.866 955.132,686.866 955.691,686.866 956.251,686.866 956.81,686.866 957.369,686.866 957.928,686.866 958.488,686.866 959.047,686.866 959.606,686.866 960.165,686.866 960.725,686.866 961.284,686.866 961.843,686.866 962.402,686.866 962.962,686.866 963.521,686.866 964.08,686.866 964.639,686.866 965.199,686.866 965.758,686.866 966.317,686.866 966.876,686.866 967.436,686.866 967.995,686.866 968.554,686.866 969.113,686.866 969.673,686.866 970.232,686.866 970.791,686.866 971.35,686.866 971.91,686.866 972.469,686.866 973.028,686.866 973.587,686.866 974.147,686.866 974.706,686.866 975.265,686.866 975.824,686.866 976.384,686.866 976.943,686.866 977.502,686.866 978.061,686.866 978.621,686.866 979.18,686.866 979.739,686.866 980.298,686.866 980.858,686.866 981.417,686.866 981.976,686.866 982.535,686.866 983.095,686.866 983.654,686.866 984.213,686.866 984.772,686.866 985.332,686.866 985.891,686.866 986.45,686.866 987.009,686.866 987.569,686.866 988.128,686.866 988.687,686.866 989.246,686.866 989.806,686.866 990.365,686.866 990.924,686.866 991.483,686.866 992.043,686.866 992.602,686.866 993.161,686.866 993.72,686.866 994.28,686.866 994.839,686.866 995.398,686.866 995.957,686.866 996.517,686.866 997.076,686.866 997.635,686.866 998.194,686.866 998.754,686.866 999.313,686.866 999.872,686.866 1000.43,686.866 1000.99,686.866 1001.55,686.866 1002.11,686.866 1002.67,686.866 1003.23,686.866 1003.79,686.866 1004.35,686.866 1004.91,686.866 1005.46,686.866 1006.02,686.866 1006.58,686.866 1007.14,686.866 1007.7,686.866 1008.26,686.866 1008.82,686.866 1009.38,686.866 1009.94,686.866 1010.5,686.866 1011.06,686.866 1011.62,686.866 1012.18,686.866 1012.73,686.866 1013.29,686.866 1013.85,686.866 1014.41,686.866 1014.97,686.866 1015.53,686.866 1016.09,686.866 1016.65,686.866 1017.21,686.866 1017.77,686.866 1018.33,686.866 1018.89,686.866 1019.45,686.866 1020.01,686.866 1020.56,686.866 1021.12,686.866 1021.68,686.866 1022.24,686.866 1022.8,686.866 1023.36,686.866 1023.92,686.866 1024.48,686.866 1025.04,686.866 1025.6,686.866 1026.16,686.866 1026.72,686.866 1027.28,686.866 1027.83,686.866 1028.39,686.866 1028.95,686.866 1029.51,686.866 1030.07,686.866 1030.63,686.866 1031.19,686.866 1031.75,686.866 1032.31,686.866 1032.87,686.866 1033.43,686.866 1033.99,686.866 1034.55,686.866 1035.1,686.866 1035.66,686.866 1036.22,686.866 1036.78,686.866 1037.34,686.866 1037.9,686.866 1038.46,686.866 1039.02,686.866 1039.58,686.866 1040.14,686.866 1040.7,686.866 1041.26,686.866 1041.82,686.866 1042.38,686.866 1042.93,686.866 1043.49,686.866 1044.05,686.866 1044.61,686.866 1045.17,686.866 1045.73,686.866 1046.29,686.866 1046.85,686.866 1047.41,686.866 1047.97,686.866 1048.53,686.866 1049.09,686.866 1049.65,686.866 1050.2,686.866 1050.76,686.866 1051.32,686.866 1051.88,686.866 1052.44,686.866 1053,686.866 1053.56,686.866 1054.12,686.866 1054.68,686.866 1055.24,686.866 1055.8,686.866 1056.36,686.866 1056.92,686.866 1057.48,686.866 1058.03,686.866 1058.59,686.866 1059.15,686.866 1059.71,686.866 1060.27,686.866 1060.83,686.866 1061.39,686.866 1061.95,686.866 1062.51,686.866 1063.07,686.866 1063.63,686.866 1064.19,686.866 1064.75,686.866 1065.3,686.866 1065.86,686.866 1066.42,686.866 1066.98,686.866 1067.54,686.866 1068.1,686.866 1068.66,686.866 1069.22,686.866 1069.78,686.866 1070.34,686.866 1070.9,686.866 1071.46,686.866 1072.02,686.866 1072.57,686.866 1073.13,686.866 1073.69,686.866 1074.25,686.866 1074.81,686.866 1075.37,686.866 1075.93,686.866 1076.49,686.866 1077.05,686.866 1077.61,686.866 1078.17,686.866 1078.73,686.866 1079.29,686.866 1079.85,686.866 1080.4,686.866 1080.96,686.866 1081.52,686.866 1082.08,686.866 1082.64,686.866 1083.2,686.866 1083.76,686.866 1084.32,686.866 1084.88,686.866 1085.44,686.866 1086,686.866 1086.56,686.866 1087.12,686.866 1087.67,686.866 1088.23,686.866 1088.79,686.866 1089.35,686.866 1089.91,686.866 1090.47,686.866 1091.03,686.866 1091.59,686.866 1092.15,686.866 1092.71,686.866 1093.27,686.866 1093.83,686.866 1094.39,686.866 1094.94,686.866 1095.5,686.866 1096.06,686.866 1096.62,686.866 1097.18,686.866 1097.74,686.866 1098.3,686.866 1098.86,686.866 1099.42,686.866 1099.98,686.866 1100.54,686.866 1101.1,686.866 1101.66,686.866 1102.22,686.866 1102.77,686.866 1103.33,686.866 1103.89,686.866 1104.45,686.866 1105.01,686.866 1105.57,686.866 1106.13,686.866 1106.69,686.866 1107.25,686.866 1107.81,686.866 1108.37,686.866 1108.93,686.866 1109.49,686.866 1110.04,686.866 1110.6,686.866 1111.16,686.866 1111.72,686.866 1112.28,686.866 1112.84,686.866 1113.4,686.866 1113.96,686.866 1114.52,686.866 1115.08,686.866 1115.64,686.866 1116.2,686.866 1116.76,686.866 1117.31,686.866 1117.87,686.866 1118.43,686.866 1118.99,686.866 1119.55,686.866 1120.11,686.866 1120.67,686.866 1121.23,686.866 1121.79,686.866 1122.35,686.866 1122.91,686.866 1123.47,686.866 1124.03,686.866 1124.59,686.866 1125.14,686.866 1125.7,686.866 1126.26,686.866 1126.82,686.866 1127.38,686.866 1127.94,686.866 1128.5,686.866 1129.06,686.866 1129.62,686.866 1130.18,686.866 1130.74,686.866 1131.3,686.866 1131.86,686.866 1132.41,686.866 1132.97,686.866 1133.53,686.866 1134.09,686.866 1134.65,686.866 1135.21,686.866 1135.77,686.866 1136.33,686.866 1136.89,686.866 1137.45,686.866 1138.01,686.866 1138.57,686.866 1139.13,686.866 1139.68,686.866 1140.24,686.866 1140.8,686.866 1141.36,686.866 1141.92,686.866 1142.48,686.866 1143.04,686.866 1143.6,686.866 1144.16,686.866 1144.72,686.866 1145.28,686.866 1145.84,686.866 1146.4,686.866 1146.96,686.866 1147.51,686.866 1148.07,686.866 1148.63,686.866 1149.19,686.866 1149.75,686.866 1150.31,686.866 1150.87,686.866 1151.43,686.866 1151.99,686.866 1152.55,686.866 1153.11,686.866 1153.67,686.866 1154.23,686.866 1154.78,686.866 1155.34,686.866 1155.9,686.866 1156.46,686.866 1157.02,686.866 1157.58,686.866 1158.14,686.866 1158.7,686.866 1159.26,686.866 1159.82,686.866 1160.38,686.866 1160.94,686.866 1161.5,686.866 1162.05,686.866 1162.61,686.866 1163.17,686.866 1163.73,686.866 1164.29,686.866 1164.85,686.866 1165.41,686.866 1165.97,686.866 1166.53,686.866 1167.09,686.866 1167.65,686.866 1168.21,686.866 1168.77,686.866 1169.33,686.866 1169.88,686.866 1170.44,686.866 1171,686.866 1171.56,686.866 1172.12,686.866 1172.68,686.866 1173.24,686.866 1173.8,686.866 1174.36,686.866 1174.92,686.866 1175.48,686.866 1176.04,686.866 1176.6,686.866 1177.15,686.866 1177.71,686.866 1178.27,686.866 1178.83,686.866 1179.39,686.866 1179.95,686.866 1180.51,686.866 1181.07,686.866 1181.63,686.866 1182.19,686.866 1182.75,686.866 1183.31,686.866 1183.87,686.866 1184.43,686.866 1184.98,686.866 1185.54,686.866 1186.1,686.866 1186.66,686.866 1187.22,686.866 1187.78,686.866 1188.34,686.866 1188.9,686.866 1189.46,686.866 1190.02,686.866 1190.58,686.866 1191.14,686.866 1191.7,686.866 1192.25,686.866 1192.81,686.866 1193.37,686.866 1193.93,686.866 1194.49,686.866 1195.05,686.866 1195.61,686.866 1196.17,686.866 1196.73,686.866 1197.29,686.866 1197.85,686.866 1198.41,686.866 1198.97,686.866 1199.52,686.866 1200.08,686.866 1200.64,686.866 1201.2,686.866 1201.76,686.866 1202.32,686.866 1202.88,686.866 1203.44,686.866 1204,686.866 1204.56,686.866 1205.12,686.866 1205.68,686.866 1206.24,686.866 1206.8,686.866 1207.35,686.866 1207.91,686.866 1208.47,686.866 1209.03,686.866 1209.59,686.866 1210.15,686.866 1210.71,686.866 1211.27,686.866 1211.83,686.866 1212.39,686.866 1212.95,686.866 1213.51,686.866 1214.07,686.866 1214.62,686.866 1215.18,686.866 1215.74,686.866 1216.3,686.866 1216.86,686.866 1217.42,686.866 1217.98,686.866 1218.54,686.866 1219.1,686.866 1219.66,686.866 1220.22,686.866 1220.78,686.866 1221.34,686.866 1221.89,686.866 1222.45,686.866 1223.01,686.866 1223.57,686.866 1224.13,686.866 1224.69,686.866 1225.25,686.866 1225.81,686.866 1226.37,686.866 1226.93,686.866 1227.49,686.866 1228.05,686.866 1228.61,686.866 1229.17,686.866 1229.72,686.866 1230.28,686.866 1230.84,686.866 1231.4,686.866 1231.96,686.866 1232.52,686.866 1233.08,686.866 1233.64,686.866 1234.2,686.866 1234.76,686.866 1235.32,686.866 1235.88,686.866 1236.44,686.866 1236.99,686.866 1237.55,686.866 1238.11,686.866 1238.67,686.866 1239.23,686.866 1239.79,686.866 1240.35,686.866 1240.91,686.866 1241.47,686.866 1242.03,686.866 1242.59,686.866 1243.15,686.866 1243.71,686.866 1244.26,686.866 1244.82,686.866 1245.38,686.866 1245.94,686.866 1246.5,686.866 1247.06,686.866 1247.62,686.866 1248.18,686.866 1248.74,686.866 1249.3,686.866 1249.86,686.866 1250.42,686.866 1250.98,686.866 1251.54,686.866 1252.09,686.866 1252.65,686.866 1253.21,686.866 1253.77,686.866 1254.33,686.866 1254.89,686.866 1255.45,686.866 1256.01,686.866 1256.57,686.866 1257.13,686.866 1257.69,686.866 1258.25,686.866 1258.81,686.866 1259.36,686.866 1259.92,686.866 1260.48,686.866 1261.04,686.866 1261.6,686.866 1262.16,686.866 1262.72,686.866 1263.28,686.866 1263.84,686.866 1264.4,686.866 1264.96,686.866 1265.52,686.866 1266.08,686.866 1266.63,686.866 1267.19,686.866 1267.75,686.866 1268.31,686.866 1268.87,686.866 1269.43,686.866 1269.99,686.866 1270.55,686.866 1271.11,686.866 1271.67,686.866 1272.23,686.866 1272.79,686.866 1273.35,686.866 1273.91,686.866 1274.46,686.866 1275.02,686.866 1275.58,686.866 1276.14,686.866 1276.7,686.866 1277.26,686.866 1277.82,686.866 1278.38,686.866 1278.94,686.866 1279.5,686.866 1280.06,686.866 1280.62,686.866 1281.18,686.866 1281.73,686.866 1282.29,686.866 1282.85,686.866 1283.41,686.866 1283.97,686.866 1284.53,686.866 1285.09,686.866 1285.65,686.866 1286.21,686.866 1286.77,686.866 1287.33,686.866 1287.89,686.866 1288.45,686.866 1289,686.866 1289.56,686.866 1290.12,686.866 1290.68,686.866 1291.24,686.866 1291.8,686.866 1292.36,686.866 1292.92,686.866 1293.48,686.866 1294.04,686.866 1294.6,686.866 1295.16,686.866 1295.72,686.866 1296.28,686.866 1296.83,686.866 1297.39,686.866 1297.95,686.866 1298.51,686.866 1299.07,686.866 1299.63,686.866 1300.19,686.866 1300.75,686.866 1301.31,686.866 1301.87,686.866 1302.43,686.866 1302.99,686.866 1303.55,686.866 1304.1,686.866 1304.66,686.866 1305.22,686.866 1305.78,686.866 1306.34,686.866 1306.9,686.866 1307.46,686.866 1308.02,686.866 1308.58,686.866 1309.14,686.866 1309.7,686.866 1310.26,686.866 1310.82,686.866 1311.38,686.866 1311.93,686.866 1312.49,686.866 1313.05,686.866 1313.61,686.866 1314.17,686.866 1314.73,686.866 1315.29,686.866 1315.85,686.866 1316.41,686.866 1316.97,686.866 1317.53,686.866 1318.09,686.866 1318.65,686.866 1319.2,686.866 1319.76,686.866 1320.32,686.866 1320.88,686.866 1321.44,686.866 1322,686.866 1322.56,686.866 1323.12,686.866 1323.68,686.866 1324.24,686.866 1324.8,686.866 1325.36,686.866 1325.92,686.866 1326.47,686.866 1327.03,686.866 1327.59,686.866 1328.15,686.866 1328.71,686.866 1329.27,686.866 1329.83,686.866 1330.39,686.866 1330.95,686.866 1331.51,686.866 1332.07,686.866 1332.63,686.866 1333.19,686.866 1333.75,686.866 1334.3,686.866 1334.86,686.866 1335.42,686.866 1335.98,686.866 1336.54,686.866 1337.1,686.866 1337.66,686.866 1338.22,686.866 1338.78,686.866 1339.34,686.866 1339.9,686.866 1340.46,686.866 1341.02,686.866 1341.57,686.866 1342.13,686.866 1342.69,686.866 1343.25,686.866 1343.81,686.866 1344.37,686.866 1344.93,686.866 1345.49,686.866 1346.05,686.866 1346.61,686.866 1347.17,686.866 1347.73,686.866 1348.29,686.866 1348.84,686.866 1349.4,686.866 1349.96,686.866 1350.52,686.866 1351.08,686.866 1351.64,686.866 1352.2,686.866 1352.76,686.866 1353.32,686.866 1353.88,686.866 1354.44,686.866 1355,686.866 1355.56,686.866 1356.12,686.866 1356.67,686.866 1357.23,686.866 1357.79,686.866 1358.35,686.866 1358.91,686.866 1359.47,686.866 1360.03,686.866 1360.59,686.866 1361.15,686.866 1361.71,686.866 1362.27,686.866 1362.83,686.866 1363.39,686.866 1363.94,686.866 1364.5,686.866 1365.06,686.866 1365.62,686.866 1366.18,686.866 1366.74,686.866 1367.3,686.866 1367.86,686.866 1368.42,686.866 1368.98,686.866 1369.54,686.866 1370.1,686.866 1370.66,686.866 1371.21,686.866 1371.77,686.866 1372.33,686.866 1372.89,686.866 1373.45,686.866 1374.01,686.866 1374.57,686.866 1375.13,686.866 1375.69,686.866 1376.25,686.866 1376.81,686.866 1377.37,686.866 1377.93,686.866 1378.49,686.866 1379.04,686.866 1379.6,686.866 1380.16,686.866 1380.72,686.866 1381.28,686.866 1381.84,686.866 1382.4,686.866 1382.96,686.866 1383.52,686.866 1384.08,686.866 1384.64,686.866 1385.2,686.866 1385.76,686.866 1386.31,686.866 1386.87,686.866 1387.43,686.866 1387.99,686.866 1388.55,686.866 1389.11,686.866 1389.67,686.866 1390.23,686.866 1390.79,686.866 1391.35,686.866 1391.91,686.866 1392.47,686.866 1393.03,686.866 1393.58,686.866 1394.14,686.866 1394.7,686.866 1395.26,686.866 1395.82,686.866 1396.38,686.866 1396.94,686.866 1397.5,686.866 1398.06,686.866 1398.62,686.866 1399.18,686.866 1399.74,686.866 1400.3,686.866 1400.86,686.866 1401.41,686.866 1401.97,686.866 1402.53,686.866 1403.09,686.866 1403.65,686.866 1404.21,686.866 1404.77,686.866 1405.33,686.866 1405.89,686.866 1406.45,686.866 1407.01,686.866 1407.57,686.866 1408.13,686.866 1408.68,686.866 1409.24,686.866 1409.8,686.866 1410.36,686.866 1410.92,686.866 1411.48,686.866 1412.04,686.866 1412.6,686.866 1413.16,686.866 1413.72,686.866 1414.28,686.866 1414.84,686.866 1415.4,686.866 1415.95,686.866 1416.51,686.866 1417.07,686.866 1417.63,686.866 1418.19,686.866 1418.75,686.866 1419.31,686.866 1419.87,686.866 1420.43,686.866 1420.99,686.866 1421.55,686.866 1422.11,686.866 1422.67,686.866 1423.23,686.866 1423.78,686.866 1424.34,686.866 1424.9,686.866 1425.46,686.866 1426.02,686.866 1426.58,686.866 1427.14,686.866 1427.7,686.866 1428.26,686.866 1428.82,686.866 1429.38,686.866 1429.94,686.866 1430.5,686.866 1431.05,686.866 1431.61,686.866 1432.17,686.866 1432.73,686.866 1433.29,686.866 1433.85,686.866 1434.41,686.866 1434.97,686.866 1435.53,686.866 1436.09,686.866 1436.65,686.866 1437.21,686.866 1437.77,686.866 1438.33,686.866 1438.88,686.866 1439.44,686.866 1440,686.866 1440.56,686.866 1441.12,686.866 1441.68,686.866 1442.24,686.866 1442.8,686.866 1443.36,686.866 1443.92,686.866 1444.48,686.866 1445.04,686.866 1445.6,686.866 1446.15,686.866 1446.71,686.866 1447.27,686.866 1447.83,686.866 1448.39,686.866 1448.95,686.866 1449.51,686.866 1450.07,686.866 1450.63,686.866 1451.19,686.866 1451.75,686.866 1452.31,686.866 1452.87,686.866 1453.42,686.866 1453.98,686.866 1454.54,686.866 1455.1,686.866 1455.66,686.866 1456.22,686.866 1456.78,686.866 1457.34,686.866 1457.9,686.866 1458.46,686.866 1459.02,686.866 1459.58,686.866 1460.14,686.866 1460.7,686.866 1461.25,686.866 1461.81,686.866 1462.37,686.866 1462.93,686.866 1463.49,686.866 1464.05,686.866 1464.61,686.866 1465.17,686.866 1465.73,686.866 1466.29,686.866 1466.85,686.866 1467.41,686.866 1467.97,686.866 1468.52,686.866 1469.08,686.866 1469.64,686.866 1470.2,686.866 1470.76,686.866 1471.32,686.866 1471.88,686.866 1472.44,686.866 1473,686.866 1473.56,686.866 1474.12,686.866 1474.68,686.866 1475.24,686.866 1475.79,686.866 1476.35,686.866 1476.91,686.866 1477.47,686.866 1478.03,686.866 1478.59,686.866 1479.15,686.866 1479.71,686.866 1480.27,686.866 1480.83,686.866 1481.39,686.866 1481.95,686.866 1482.51,686.866 1483.07,686.866 1483.62,686.866 1484.18,686.866 1484.74,686.866 1485.3,686.866 1485.86,686.866 1486.42,686.866 1486.98,686.866 1487.54,686.866 1488.1,686.866 1488.66,686.866 1489.22,686.866 1489.78,686.866 1490.34,686.866 1490.89,686.866 1491.45,686.866 1492.01,686.866 1492.57,686.866 1493.13,686.866 1493.69,686.866 1494.25,686.866 1494.81,686.866 1495.37,686.866 1495.93,686.866 1496.49,686.866 1497.05,686.866 1497.61,686.866 1498.16,686.866 1498.72,686.866 1499.28,686.866 1499.84,686.866 1500.4,686.866 1500.96,686.866 1501.52,686.866 1502.08,686.866 1502.64,686.866 1503.2,686.866 1503.76,686.866 1504.32,686.866 1504.88,686.866 1505.44,686.866 1505.99,686.866 1506.55,686.866 1507.11,686.866 1507.67,686.866 1508.23,686.866 1508.79,686.866 1509.35,686.866 1509.91,686.866 1510.47,686.866 1511.03,686.866 1511.59,686.866 1512.15,686.866 1512.71,686.866 1513.26,686.866 1513.82,686.866 1514.38,686.866 1514.94,686.866 1515.5,686.866 1516.06,686.866 1516.62,686.866 1517.18,686.866 1517.74,686.866 1518.3,686.866 1518.86,686.866 1519.42,686.866 1519.98,686.866 1520.53,686.866 1521.09,686.866 1521.65,686.866 1522.21,686.866 1522.77,686.866 1523.33,686.866 1523.89,686.866 1524.45,686.866 1525.01,686.866 1525.57,686.866 1526.13,686.866 1526.69,686.866 1527.25,686.866 1527.81,686.866 1528.36,686.866 1528.92,686.866 1529.48,686.866 1530.04,686.866 1530.6,686.866 1531.16,686.866 1531.72,686.866 1532.28,686.866 1532.84,686.866 1533.4,686.866 1533.96,686.866 1534.52,686.866 1535.08,686.866 1535.63,686.866 1536.19,686.866 1536.75,686.866 1537.31,686.866 1537.87,686.866 1538.43,686.866 1538.99,686.866 1539.55,686.866 1540.11,686.866 1540.67,686.866 1541.23,686.866 1541.79,686.866 1542.35,686.866 1542.9,686.866 1543.46,686.866 1544.02,686.866 1544.58,686.866 1545.14,686.866 1545.7,686.866 1546.26,686.866 1546.82,686.866 1547.38,686.866 1547.94,686.866 1548.5,686.866 1549.06,686.866 1549.62,686.866 1550.18,686.866 1550.73,686.866 1551.29,686.866 1551.85,686.866 1552.41,686.866 1552.97,686.866 1553.53,686.866 1554.09,686.866 1554.65,686.866 1555.21,686.866 1555.77,686.866 1556.33,686.866 1556.89,686.866 1557.45,686.866 1558,686.866 1558.56,686.866 1559.12,686.866 1559.68,686.866 1560.24,686.866 1560.8,686.866 1561.36,686.866 1561.92,686.866 1562.48,686.866 1563.04,686.866 1563.6,686.866 1564.16,686.866 1564.72,686.866 1565.28,686.866 1565.83,686.866 1566.39,686.866 1566.95,686.866 1567.51,686.866 1568.07,686.866 1568.63,686.866 1569.19,686.866 1569.75,686.866 1570.31,686.866 1570.87,686.866 1571.43,686.866 1571.99,686.866 1572.55,686.866 1573.1,686.866 1573.66,686.866 1574.22,686.866 1574.78,686.866 1575.34,686.866 1575.9,686.866 1576.46,686.866 1577.02,686.866 1577.58,686.866 1578.14,686.866 1578.7,686.866 1579.26,686.866 1579.82,686.866 1580.37,686.866 1580.93,686.866 1581.49,686.866 1582.05,686.866 1582.61,686.866 1583.17,686.866 1583.73,686.866 1584.29,686.866 1584.85,686.866 1585.41,686.866 1585.97,686.866 1586.53,686.866 1587.09,686.866 1587.65,686.866 1588.2,686.866 1588.76,686.866 1589.32,686.866 1589.88,686.866 1590.44,686.866 1591,686.866 1591.56,686.866 1592.12,686.866 1592.68,686.866 1593.24,686.866 1593.8,686.866 1594.36,686.866 1594.92,686.866 1595.47,686.866 1596.03,686.866 1596.59,686.866 1597.15,686.866 1597.71,686.866 1598.27,686.866 1598.83,686.866 1599.39,686.866 1599.95,686.866 1600.51,686.866 1601.07,686.866 1601.63,686.866 1602.19,686.866 1602.74,686.866 1603.3,686.866 1603.86,686.866 1604.42,686.866 1604.98,686.866 1605.54,686.866 1606.1,686.866 1606.66,686.866 1607.22,686.866 1607.78,686.866 1608.34,686.866 1608.9,686.866 1609.46,686.866 1610.02,686.866 1610.57,686.866 1611.13,686.866 1611.69,686.866 1612.25,686.866 1612.81,686.866 1613.37,686.866 1613.93,686.866 1614.49,686.866 1615.05,686.866 1615.61,686.866 1616.17,686.866 1616.73,686.866 1617.29,686.866 1617.84,686.866 1618.4,686.866 1618.96,686.866 1619.52,686.866 1620.08,686.866 1620.64,686.866 1621.2,686.866 1621.76,686.866 1622.32,686.866 1622.88,686.866 1623.44,686.866 1624,686.866 1624.56,686.866 1625.11,686.866 1625.67,686.866 1626.23,686.866 1626.79,686.866 1627.35,686.866 1627.91,686.866 1628.47,686.866 1629.03,686.866 1629.59,686.866 1630.15,686.866 1630.71,686.866 1631.27,686.866 1631.83,686.866 1632.39,686.866 1632.94,686.866 1633.5,686.866 1634.06,686.866 1634.62,686.866 1635.18,686.866 1635.74,686.866 1636.3,686.866 1636.86,686.866 1637.42,686.866 1637.98,686.866 1638.54,686.866 1639.1,686.866 1639.66,686.866 1640.21,686.866 1640.77,686.866 1641.33,686.866 1641.89,686.866 1642.45,686.866 1643.01,686.866 1643.57,686.866 1644.13,686.866 1644.69,686.866 1645.25,686.866 1645.81,686.866 1646.37,686.866 1646.93,686.866 1647.48,686.866 1648.04,686.866 1648.6,686.866 1649.16,686.866 1649.72,686.866 1650.28,686.866 1650.84,686.866 1651.4,686.866 1651.96,686.866 1652.52,686.866 1653.08,686.866 1653.64,686.866 1654.2,686.866 1654.76,686.866 1655.31,686.866 1655.87,686.866 1656.43,686.866 1656.99,686.866 1657.55,686.866 1658.11,686.866 1658.67,686.866 1659.23,686.866 1659.79,686.866 1660.35,686.866 1660.91,686.866 1661.47,686.866 1662.03,686.866 1662.58,686.866 1663.14,686.866 1663.7,686.866 1664.26,686.866 1664.82,686.866 1665.38,686.866 1665.94,686.866 1666.5,686.866 1667.06,686.866 1667.62,686.866 1668.18,686.866 1668.74,686.866 1669.3,686.866 1669.85,686.866 1670.41,686.866 1670.97,686.866 1671.53,686.866 1672.09,686.866 1672.65,686.866 1673.21,686.866 1673.77,686.866 1674.33,686.866 1674.89,686.866 1675.45,686.866 1676.01,686.866 1676.57,686.866 1677.13,686.866 1677.68,686.866 1678.24,686.866 1678.8,686.866 1679.36,686.866 1679.92,686.866 1680.48,686.866 1681.04,686.866 1681.6,686.866 1682.16,686.866 1682.72,686.866 1683.28,686.866 1683.84,686.866 1684.4,686.866 1684.95,686.866 1685.51,686.866 1686.07,686.866 1686.63,686.866 1687.19,686.866 1687.75,686.866 1688.31,686.866 1688.87,686.866 1689.43,686.866 1689.99,686.866 1690.55,686.866 1691.11,686.866 1691.67,686.866 1692.23,686.866 1692.78,686.866 1693.34,686.866 1693.9,686.866 1694.46,686.866 1695.02,686.866 1695.58,686.866 1696.14,686.866 1696.7,686.866 1697.26,686.866 1697.82,686.866 1698.38,686.866 1698.94,686.866 1699.5,686.866 1700.05,686.866 1700.61,686.866 1701.17,686.866 1701.73,686.866 1702.29,686.866 1702.85,686.866 1703.41,686.866 1703.97,686.866 1704.53,686.866 1705.09,686.866 1705.65,686.866 1706.21,686.866 1706.77,686.866 1707.32,686.866 1707.88,686.866 1708.44,686.866 1709,686.866 1709.56,686.866 1710.12,686.866 1710.68,686.866 1711.24,686.866 1711.8,686.866 1712.36,686.866 1712.92,686.866 1713.48,686.866 1714.04,686.866 1714.6,686.866 1715.15,686.866 1715.71,686.866 1716.27,686.866 1716.83,686.866 1717.39,686.866 1717.95,686.866 1718.51,686.866 1719.07,686.866 1719.63,686.866 1720.19,686.866 1720.75,686.866 1721.31,686.866 1721.87,686.866 1722.42,686.866 1722.98,686.866 1723.54,686.866 1724.1,686.866 1724.66,686.866 1725.22,686.866 1725.78,686.866 1726.34,686.866 1726.9,686.866 1727.46,686.866 1728.02,686.866 1728.58,686.866 1729.14,686.866 1729.69,686.866 1730.25,686.866 1730.81,686.866 1731.37,686.866 1731.93,686.866 1732.49,686.866 1733.05,686.866 1733.61,686.866 1734.17,686.866 1734.73,686.866 1735.29,686.866 1735.85,686.866 1736.41,686.866 1736.97,686.866 1737.52,686.866 1738.08,686.866 1738.64,686.866 1739.2,686.866 1739.76,686.866 1740.32,686.866 1740.88,686.866 1741.44,686.866 1742,686.866 1742.56,686.866 1743.12,686.866 1743.68,686.866 1744.24,686.866 1744.79,686.866 1745.35,686.866 1745.91,686.866 1746.47,686.866 1747.03,686.866 1747.59,686.866 1748.15,686.866 1748.71,686.866 1749.27,686.866 1749.83,686.866 1750.39,686.866 1750.95,686.866 1751.51,686.866 1752.06,686.866 1752.62,686.866 1753.18,686.866 1753.74,686.866 1754.3,686.866 1754.86,686.866 1755.42,686.866 1755.98,686.866 1756.54,686.866 1757.1,686.866 1757.66,686.866 1758.22,686.866 1758.78,686.866 1759.34,686.866 1759.89,686.866 1760.45,686.866 1761.01,686.866 1761.57,686.866 1762.13,686.866 1762.69,686.866 1763.25,686.866 1763.81,686.866 1764.37,686.866 1764.93,686.866 1765.49,686.866 1766.05,686.866 1766.61,686.866 1767.16,686.866 1767.72,686.866 1768.28,686.866 1768.84,686.866 1769.4,686.866 1769.96,686.866 1770.52,686.866 1771.08,686.866 1771.64,686.866 1772.2,686.866 1772.76,686.866 1773.32,686.866 1773.88,686.866 1774.43,686.866 1774.99,686.866 1775.55,686.866 1776.11,686.866 1776.67,686.866 1777.23,686.866 1777.79,686.866 1778.35,686.866 1778.91,686.866 1779.47,686.866 1780.03,686.866 1780.59,686.866 1781.15,686.866 1781.71,686.866 1782.26,686.866 1782.82,686.866 1783.38,686.866 1783.94,686.866 1784.5,686.866 1785.06,686.866 1785.62,686.866 1786.18,686.866 1786.74,686.866 1787.3,686.866 1787.86,686.866 1788.42,686.866 1788.98,686.866 1789.53,686.866 1790.09,686.866 1790.65,686.866 1791.21,686.866 1791.77,686.866 1792.33,686.866 1792.89,686.866 1793.45,686.866 1794.01,686.866 1794.57,686.866 1795.13,686.866 1795.69,686.866 1796.25,686.866 1796.8,686.866 1797.36,686.866 1797.92,686.866 1798.48,686.866 1799.04,686.866 1799.6,686.866 1800.16,686.866 1800.72,686.866 1801.28,686.866 1801.84,686.866 1802.4,686.866 1802.96,686.866 1803.52,686.866 1804.08,686.866 1804.63,686.866 1805.19,686.866 1805.75,686.866 1806.31,686.866 1806.87,686.866 1807.43,686.866 1807.99,686.866 1808.55,686.866 1809.11,686.866 1809.67,686.866 1810.23,686.866 1810.79,686.866 1811.35,686.866 1811.9,686.866 1812.46,686.866 1813.02,686.866 1813.58,686.866 1814.14,686.866 1814.7,686.866 1815.26,686.866 1815.82,686.866 1816.38,686.866 1816.94,686.866 1817.5,686.866 1818.06,686.866 1818.62,686.866 1819.18,686.866 1819.73,686.866 1820.29,686.866 1820.85,686.866 1821.41,686.866 1821.97,686.866 1822.53,686.866 1823.09,686.866 1823.65,686.866 1824.21,686.866 1824.77,686.866 1825.33,686.866 1825.89,686.866 1826.45,686.866 1827,686.866 1827.56,686.866 1828.12,686.866 1828.68,686.866 1829.24,686.866 1829.8,686.866 1830.36,686.866 1830.92,686.866 1831.48,686.866 1832.04,686.866 1832.6,686.866 1833.16,686.866 1833.72,686.866 1834.27,686.866 1834.83,686.866 1835.39,686.866 1835.95,686.866 1836.51,686.866 1837.07,686.866 1837.63,686.866 1838.19,686.866 \"/>\n<path clip-path=\"url(#clip063)\" d=\"M720.247 684.313 L720.806 684.313 L721.365 684.313 L721.924 684.313 L722.484 684.313 L723.043 684.313 L723.602 684.313 L724.161 684.313 L724.721 684.313 L725.28 684.313 L725.839 684.313 L726.398 684.313 L726.958 684.313 L727.517 684.313 L728.076 684.313 L728.635 684.313 L729.195 684.313 L729.754 684.313 L730.313 684.313 L730.872 684.313 L731.432 684.313 L731.991 684.313 L732.55 684.313 L733.109 684.313 L733.669 684.313 L734.228 684.313 L734.787 684.313 L735.346 684.313 L735.906 684.313 L736.465 684.313 L737.024 684.313 L737.583 684.313 L738.143 684.313 L738.702 684.313 L739.261 684.313 L739.82 684.313 L740.38 684.313 L740.939 684.313 L741.498 684.313 L742.057 684.313 L742.617 684.313 L743.176 684.313 L743.735 684.313 L744.294 684.313 L744.854 684.313 L745.413 684.313 L745.972 684.313 L746.531 684.313 L747.091 684.313 L747.65 684.313 L748.209 684.313 L748.768 684.313 L749.328 684.313 L749.887 684.313 L750.446 684.313 L751.005 684.313 L751.565 684.313 L752.124 684.313 L752.683 684.313 L753.242 684.313 L753.802 684.313 L754.361 684.313 L754.92 684.313 L755.479 684.313 L756.039 684.313 L756.598 684.313 L757.157 684.313 L757.716 684.313 L758.276 684.313 L758.835 684.313 L759.394 684.313 L759.953 684.313 L760.513 684.313 L761.072 684.313 L761.631 684.313 L762.19 684.313 L762.75 684.313 L763.309 684.313 L763.868 684.313 L764.427 684.313 L764.987 684.313 L765.546 684.313 L766.105 684.313 L766.664 684.313 L767.224 684.313 L767.783 684.313 L768.342 684.313 L768.901 684.313 L769.461 684.313 L770.02 684.313 L770.579 684.313 L771.138 684.313 L771.698 684.313 L772.257 684.313 L772.816 684.313 L773.375 684.313 L773.935 684.313 L774.494 684.313 L775.053 684.313 L775.612 684.313 L776.172 684.313 L776.731 684.313 L777.29 684.313 L777.849 684.313 L778.409 684.313 L778.968 684.313 L779.527 684.313 L780.086 684.313 L780.646 684.313 L781.205 684.313 L781.764 684.313 L782.323 684.313 L782.883 684.313 L783.442 684.313 L784.001 684.313 L784.56 684.313 L785.12 684.313 L785.679 684.313 L786.238 684.313 L786.797 684.313 L787.357 684.313 L787.916 684.313 L788.475 684.313 L789.034 684.313 L789.594 684.313 L790.153 684.313 L790.712 684.313 L791.271 684.313 L791.831 684.313 L792.39 684.313 L792.949 684.313 L793.508 684.313 L794.068 684.313 L794.627 684.313 L795.186 684.313 L795.745 684.313 L796.305 684.313 L796.864 684.313 L797.423 684.313 L797.982 684.313 L798.542 684.313 L799.101 684.313 L799.66 684.313 L800.219 684.313 L800.779 684.313 L801.338 684.313 L801.897 684.313 L802.456 684.313 L803.016 684.313 L803.575 684.313 L804.134 684.313 L804.693 684.313 L805.253 684.313 L805.812 684.313 L806.371 684.313 L806.931 684.313 L807.49 684.313 L808.049 684.313 L808.608 684.313 L809.168 684.313 L809.727 684.313 L810.286 684.313 L810.845 684.313 L811.405 684.313 L811.964 684.313 L812.523 684.313 L813.082 684.313 L813.642 684.313 L814.201 684.313 L814.76 684.313 L815.319 684.313 L815.879 684.313 L816.438 684.313 L816.997 684.313 L817.556 684.313 L818.116 684.313 L818.675 684.313 L819.234 684.313 L819.793 684.313 L820.353 684.313 L820.912 684.313 L821.471 684.313 L822.03 684.313 L822.59 684.313 L823.149 684.313 L823.708 684.313 L824.267 684.313 L824.827 684.313 L825.386 684.313 L825.945 684.313 L826.504 684.313 L827.064 684.313 L827.623 684.313 L828.182 684.313 L828.741 684.313 L829.301 684.313 L829.86 684.313 L830.419 684.313 L830.978 684.313 L831.538 684.313 L832.097 684.313 L832.656 684.313 L833.215 684.313 L833.775 684.313 L834.334 684.313 L834.893 684.313 L835.452 684.313 L836.012 684.313 L836.571 684.313 L837.13 684.313 L837.689 684.313 L838.249 684.313 L838.808 684.313 L839.367 684.313 L839.926 684.313 L840.486 684.313 L841.045 684.313 L841.604 684.313 L842.163 684.313 L842.723 684.313 L843.282 684.313 L843.841 684.313 L844.4 684.313 L844.96 684.313 L845.519 684.313 L846.078 684.313 L846.637 684.313 L847.197 684.313 L847.756 684.313 L848.315 684.313 L848.874 684.313 L849.434 684.313 L849.993 684.313 L850.552 684.313 L851.111 684.313 L851.671 684.313 L852.23 684.313 L852.789 684.313 L853.348 684.313 L853.908 684.313 L854.467 684.313 L855.026 684.313 L855.585 684.313 L856.145 684.313 L856.704 684.313 L857.263 684.313 L857.822 684.313 L858.382 684.313 L858.941 684.313 L859.5 684.313 L860.059 684.313 L860.619 684.313 L861.178 684.313 L861.737 684.313 L862.296 684.313 L862.856 684.313 L863.415 684.313 L863.974 684.313 L864.533 684.313 L865.093 684.313 L865.652 684.313 L866.211 684.313 L866.77 684.313 L867.33 684.313 L867.889 684.313 L868.448 684.313 L869.007 684.313 L869.567 684.313 L870.126 684.313 L870.685 684.313 L871.244 684.313 L871.804 684.313 L872.363 684.313 L872.922 684.313 L873.481 684.313 L874.041 684.313 L874.6 684.313 L875.159 684.313 L875.718 684.313 L876.278 684.313 L876.837 684.313 L877.396 684.313 L877.955 684.313 L878.515 684.313 L879.074 684.313 L879.633 684.313 L880.192 684.313 L880.752 684.313 L881.311 684.313 L881.87 684.313 L882.429 684.313 L882.989 684.313 L883.548 684.313 L884.107 684.313 L884.666 684.313 L885.226 684.313 L885.785 684.313 L886.344 684.313 L886.903 684.313 L887.463 684.313 L888.022 684.313 L888.581 684.313 L889.14 684.313 L889.7 684.313 L890.259 684.313 L890.818 684.313 L891.377 684.313 L891.937 684.313 L892.496 684.313 L893.055 684.313 L893.614 684.313 L894.174 684.313 L894.733 684.313 L895.292 684.313 L895.851 684.313 L896.411 684.313 L896.97 684.313 L897.529 684.313 L898.088 684.313 L898.648 684.313 L899.207 684.313 L899.766 684.313 L900.325 684.313 L900.885 684.313 L901.444 684.313 L902.003 684.313 L902.562 684.313 L903.122 684.313 L903.681 684.313 L904.24 684.313 L904.799 684.313 L905.359 684.313 L905.918 684.313 L906.477 684.313 L907.036 684.313 L907.596 684.313 L908.155 684.313 L908.714 684.313 L909.273 684.313 L909.833 684.313 L910.392 684.313 L910.951 684.313 L911.51 684.313 L912.07 684.313 L912.629 684.313 L913.188 684.313 L913.747 684.313 L914.307 684.313 L914.866 684.313 L915.425 684.313 L915.984 684.313 L916.544 684.313 L917.103 684.313 L917.662 684.313 L918.221 684.313 L918.781 684.313 L919.34 684.313 L919.899 684.313 L920.458 684.313 L921.018 684.313 L921.577 684.313 L922.136 684.313 L922.695 684.313 L923.255 684.313 L923.814 684.313 L924.373 684.313 L924.932 684.313 L925.492 684.313 L926.051 684.313 L926.61 684.313 L927.169 684.313 L927.729 684.313 L928.288 684.313 L928.847 684.313 L929.406 684.313 L929.966 684.313 L930.525 684.313 L931.084 684.313 L931.644 684.313 L932.203 684.313 L932.762 684.313 L933.321 684.313 L933.881 684.313 L934.44 684.313 L934.999 684.313 L935.558 684.313 L936.118 684.313 L936.677 684.313 L937.236 684.313 L937.795 684.313 L938.355 684.313 L938.914 684.313 L939.473 684.313 L940.032 684.313 L940.592 684.313 L941.151 684.313 L941.71 684.313 L942.269 684.313 L942.829 684.313 L943.388 684.313 L943.947 684.313 L944.506 684.313 L945.066 684.313 L945.625 684.313 L946.184 684.313 L946.743 684.313 L947.303 684.313 L947.862 684.313 L948.421 684.313 L948.98 684.313 L949.54 684.313 L950.099 684.313 L950.658 684.313 L951.217 684.313 L951.777 684.313 L952.336 684.313 L952.895 684.313 L953.454 684.313 L954.014 684.313 L954.573 684.313 L955.132 684.313 L955.691 684.313 L956.251 684.313 L956.81 684.313 L957.369 684.313 L957.928 684.313 L958.488 684.313 L959.047 684.313 L959.606 684.313 L960.165 684.313 L960.725 684.313 L961.284 684.313 L961.843 684.313 L962.402 684.313 L962.962 684.313 L963.521 684.313 L964.08 684.313 L964.639 684.313 L965.199 684.313 L965.758 684.313 L966.317 684.313 L966.876 684.313 L967.436 684.313 L967.995 684.313 L968.554 684.313 L969.113 684.313 L969.673 684.313 L970.232 684.313 L970.791 684.313 L971.35 684.313 L971.91 684.313 L972.469 684.313 L973.028 684.313 L973.587 684.313 L974.147 684.313 L974.706 684.313 L975.265 684.313 L975.824 684.313 L976.384 684.313 L976.943 684.313 L977.502 684.313 L978.061 684.313 L978.621 684.313 L979.18 684.313 L979.739 684.313 L980.298 684.313 L980.858 684.313 L981.417 684.313 L981.976 684.313 L982.535 684.313 L983.095 684.313 L983.654 684.313 L984.213 684.313 L984.772 684.313 L985.332 684.313 L985.891 684.313 L986.45 684.313 L987.009 684.313 L987.569 684.313 L988.128 684.313 L988.687 684.313 L989.246 684.313 L989.806 684.313 L990.365 684.313 L990.924 684.313 L991.483 684.313 L992.043 684.313 L992.602 684.313 L993.161 684.313 L993.72 684.313 L994.28 684.313 L994.839 684.313 L995.398 684.313 L995.957 684.313 L996.517 684.313 L997.076 684.313 L997.635 684.313 L998.194 684.313 L998.754 684.313 L999.313 684.313 L999.872 684.313 L1000.43 684.313 L1000.99 684.313 L1001.55 684.313 L1002.11 684.313 L1002.67 684.313 L1003.23 684.313 L1003.79 684.313 L1004.35 684.313 L1004.91 684.313 L1005.46 684.313 L1006.02 684.313 L1006.58 684.313 L1007.14 684.313 L1007.7 684.313 L1008.26 684.313 L1008.82 684.313 L1009.38 684.313 L1009.94 684.313 L1010.5 684.313 L1011.06 684.313 L1011.62 684.313 L1012.18 684.313 L1012.73 684.313 L1013.29 684.313 L1013.85 684.313 L1014.41 684.313 L1014.97 684.313 L1015.53 684.313 L1016.09 684.313 L1016.65 684.313 L1017.21 684.313 L1017.77 684.313 L1018.33 684.313 L1018.89 684.313 L1019.45 684.313 L1020.01 684.313 L1020.56 684.313 L1021.12 684.313 L1021.68 684.313 L1022.24 684.313 L1022.8 684.313 L1023.36 684.313 L1023.92 684.313 L1024.48 684.313 L1025.04 684.313 L1025.6 684.313 L1026.16 684.313 L1026.72 684.313 L1027.28 684.313 L1027.83 684.313 L1028.39 684.313 L1028.95 684.313 L1029.51 684.313 L1030.07 684.313 L1030.63 684.313 L1031.19 684.313 L1031.75 684.313 L1032.31 684.313 L1032.87 684.313 L1033.43 684.313 L1033.99 684.313 L1034.55 684.313 L1035.1 684.313 L1035.66 684.313 L1036.22 684.313 L1036.78 684.313 L1037.34 684.313 L1037.9 684.313 L1038.46 684.313 L1039.02 684.313 L1039.58 684.313 L1040.14 684.313 L1040.7 684.313 L1041.26 684.313 L1041.82 684.313 L1042.38 684.313 L1042.93 684.313 L1043.49 684.313 L1044.05 684.313 L1044.61 684.313 L1045.17 684.313 L1045.73 684.313 L1046.29 684.313 L1046.85 684.313 L1047.41 684.313 L1047.97 684.313 L1048.53 684.313 L1049.09 684.313 L1049.65 684.313 L1050.2 684.313 L1050.76 684.313 L1051.32 684.313 L1051.88 684.313 L1052.44 684.313 L1053 684.313 L1053.56 684.313 L1054.12 684.313 L1054.68 684.313 L1055.24 684.313 L1055.8 684.313 L1056.36 684.313 L1056.92 684.313 L1057.48 684.313 L1058.03 684.313 L1058.59 684.313 L1059.15 684.313 L1059.71 684.313 L1060.27 684.313 L1060.83 684.313 L1061.39 684.313 L1061.95 684.313 L1062.51 684.313 L1063.07 684.313 L1063.63 684.313 L1064.19 684.313 L1064.75 684.313 L1065.3 684.313 L1065.86 684.313 L1066.42 684.313 L1066.98 684.313 L1067.54 684.313 L1068.1 684.313 L1068.66 684.313 L1069.22 684.313 L1069.78 684.313 L1070.34 684.313 L1070.9 684.313 L1071.46 684.313 L1072.02 684.313 L1072.57 684.313 L1073.13 684.313 L1073.69 684.313 L1074.25 684.313 L1074.81 684.313 L1075.37 684.313 L1075.93 684.313 L1076.49 684.313 L1077.05 684.313 L1077.61 684.313 L1078.17 684.313 L1078.73 684.313 L1079.29 684.313 L1079.85 684.313 L1080.4 684.313 L1080.96 684.313 L1081.52 684.313 L1082.08 684.313 L1082.64 684.313 L1083.2 684.313 L1083.76 684.313 L1084.32 684.313 L1084.88 684.313 L1085.44 684.313 L1086 684.313 L1086.56 684.313 L1087.12 684.313 L1087.67 684.313 L1088.23 684.313 L1088.79 684.313 L1089.35 684.313 L1089.91 684.313 L1090.47 684.313 L1091.03 684.313 L1091.59 684.313 L1092.15 684.313 L1092.71 684.313 L1093.27 684.313 L1093.83 684.313 L1094.39 684.313 L1094.94 684.313 L1095.5 684.313 L1096.06 684.313 L1096.62 684.313 L1097.18 684.313 L1097.74 684.313 L1098.3 684.313 L1098.86 684.313 L1099.42 684.313 L1099.98 684.313 L1100.54 684.313 L1101.1 684.313 L1101.66 684.313 L1102.22 684.313 L1102.77 684.313 L1103.33 684.313 L1103.89 684.313 L1104.45 684.313 L1105.01 684.313 L1105.57 684.313 L1106.13 684.313 L1106.69 684.313 L1107.25 684.313 L1107.81 684.313 L1108.37 684.313 L1108.93 684.313 L1109.49 684.313 L1110.04 684.313 L1110.6 684.313 L1111.16 684.313 L1111.72 684.313 L1112.28 684.313 L1112.84 684.313 L1113.4 684.313 L1113.96 684.313 L1114.52 684.313 L1115.08 684.313 L1115.64 684.313 L1116.2 684.313 L1116.76 684.313 L1117.31 684.313 L1117.87 684.313 L1118.43 684.313 L1118.99 684.313 L1119.55 684.313 L1120.11 684.313 L1120.67 684.313 L1121.23 684.313 L1121.79 684.313 L1122.35 684.313 L1122.91 684.313 L1123.47 684.313 L1124.03 684.313 L1124.59 684.313 L1125.14 684.313 L1125.7 684.313 L1126.26 684.313 L1126.82 684.313 L1127.38 684.313 L1127.94 684.313 L1128.5 684.313 L1129.06 684.313 L1129.62 684.313 L1130.18 684.313 L1130.74 684.313 L1131.3 684.313 L1131.86 684.313 L1132.41 684.313 L1132.97 684.313 L1133.53 684.313 L1134.09 684.313 L1134.65 684.313 L1135.21 684.313 L1135.77 684.313 L1136.33 684.313 L1136.89 684.313 L1137.45 684.313 L1138.01 684.313 L1138.57 684.313 L1139.13 684.313 L1139.68 684.313 L1140.24 684.313 L1140.8 684.313 L1141.36 684.313 L1141.92 684.313 L1142.48 684.313 L1143.04 684.313 L1143.6 684.313 L1144.16 684.313 L1144.72 684.313 L1145.28 684.313 L1145.84 684.313 L1146.4 684.313 L1146.96 684.313 L1147.51 684.313 L1148.07 684.313 L1148.63 684.313 L1149.19 684.313 L1149.75 684.313 L1150.31 684.313 L1150.87 684.313 L1151.43 684.313 L1151.99 684.313 L1152.55 684.313 L1153.11 684.313 L1153.67 684.313 L1154.23 684.313 L1154.78 684.313 L1155.34 684.313 L1155.9 684.313 L1156.46 684.313 L1157.02 684.313 L1157.58 684.313 L1158.14 684.313 L1158.7 684.313 L1159.26 684.313 L1159.82 684.313 L1160.38 684.313 L1160.94 684.313 L1161.5 684.313 L1162.05 684.313 L1162.61 684.313 L1163.17 684.313 L1163.73 684.313 L1164.29 684.313 L1164.85 684.313 L1165.41 684.313 L1165.97 684.313 L1166.53 684.313 L1167.09 684.313 L1167.65 684.313 L1168.21 684.313 L1168.77 684.313 L1169.33 684.313 L1169.88 684.313 L1170.44 684.313 L1171 684.313 L1171.56 684.313 L1172.12 684.313 L1172.68 684.313 L1173.24 684.313 L1173.8 684.313 L1174.36 684.313 L1174.92 684.313 L1175.48 684.313 L1176.04 684.313 L1176.6 684.313 L1177.15 684.313 L1177.71 684.313 L1178.27 684.313 L1178.83 684.313 L1179.39 684.313 L1179.95 684.313 L1180.51 684.313 L1181.07 684.313 L1181.63 684.313 L1182.19 684.313 L1182.75 684.313 L1183.31 684.313 L1183.87 684.313 L1184.43 684.313 L1184.98 684.313 L1185.54 684.313 L1186.1 684.313 L1186.66 684.313 L1187.22 684.313 L1187.78 684.313 L1188.34 684.313 L1188.9 684.313 L1189.46 684.313 L1190.02 684.313 L1190.58 684.313 L1191.14 684.313 L1191.7 684.313 L1192.25 684.313 L1192.81 684.313 L1193.37 684.313 L1193.93 684.313 L1194.49 684.313 L1195.05 684.313 L1195.61 684.313 L1196.17 684.313 L1196.73 684.313 L1197.29 684.313 L1197.85 684.313 L1198.41 684.313 L1198.97 684.313 L1199.52 684.313 L1200.08 684.313 L1200.64 684.313 L1201.2 684.313 L1201.76 684.313 L1202.32 684.313 L1202.88 684.313 L1203.44 684.313 L1204 684.313 L1204.56 684.313 L1205.12 684.313 L1205.68 684.313 L1206.24 684.313 L1206.8 684.313 L1207.35 684.313 L1207.91 684.313 L1208.47 684.313 L1209.03 684.313 L1209.59 684.313 L1210.15 684.313 L1210.71 684.313 L1211.27 684.313 L1211.83 684.313 L1212.39 684.313 L1212.95 684.313 L1213.51 684.313 L1214.07 684.313 L1214.62 684.313 L1215.18 684.313 L1215.74 684.313 L1216.3 684.313 L1216.86 684.313 L1217.42 684.313 L1217.98 684.313 L1218.54 684.313 L1219.1 684.313 L1219.66 684.313 L1220.22 684.313 L1220.78 684.313 L1221.34 684.313 L1221.89 684.313 L1222.45 684.313 L1223.01 684.313 L1223.57 684.313 L1224.13 684.313 L1224.69 684.313 L1225.25 684.313 L1225.81 684.313 L1226.37 684.313 L1226.93 684.313 L1227.49 684.313 L1228.05 684.313 L1228.61 684.313 L1229.17 684.313 L1229.72 684.313 L1230.28 684.313 L1230.84 684.313 L1231.4 684.313 L1231.96 684.313 L1232.52 684.313 L1233.08 684.313 L1233.64 684.313 L1234.2 684.313 L1234.76 684.313 L1235.32 684.313 L1235.88 684.313 L1236.44 684.313 L1236.99 684.313 L1237.55 684.313 L1238.11 684.313 L1238.67 684.313 L1239.23 684.313 L1239.79 684.313 L1240.35 684.313 L1240.91 684.313 L1241.47 684.313 L1242.03 684.313 L1242.59 684.313 L1243.15 684.313 L1243.71 684.313 L1244.26 684.313 L1244.82 684.313 L1245.38 684.313 L1245.94 684.313 L1246.5 684.313 L1247.06 684.313 L1247.62 684.313 L1248.18 684.313 L1248.74 684.313 L1249.3 684.313 L1249.86 684.313 L1250.42 684.313 L1250.98 684.313 L1251.54 684.313 L1252.09 684.313 L1252.65 684.313 L1253.21 684.313 L1253.77 684.313 L1254.33 684.313 L1254.89 684.313 L1255.45 684.313 L1256.01 684.313 L1256.57 684.313 L1257.13 684.313 L1257.69 684.313 L1258.25 684.313 L1258.81 684.313 L1259.36 684.313 L1259.92 684.313 L1260.48 684.313 L1261.04 684.313 L1261.6 684.313 L1262.16 684.313 L1262.72 684.313 L1263.28 684.313 L1263.84 684.313 L1264.4 684.313 L1264.96 684.313 L1265.52 684.313 L1266.08 684.313 L1266.63 684.313 L1267.19 684.313 L1267.75 684.313 L1268.31 684.313 L1268.87 684.313 L1269.43 684.313 L1269.99 684.313 L1270.55 684.313 L1271.11 684.313 L1271.67 684.313 L1272.23 684.313 L1272.79 684.313 L1273.35 684.313 L1273.91 684.313 L1274.46 684.313 L1275.02 684.313 L1275.58 684.313 L1276.14 684.313 L1276.7 684.313 L1277.26 684.313 L1277.82 684.313 L1278.38 684.313 L1278.94 684.313 L1279.5 684.313 L1280.06 684.313 L1280.62 684.313 L1281.18 684.313 L1281.73 684.313 L1282.29 684.313 L1282.85 684.313 L1283.41 684.313 L1283.97 684.313 L1284.53 684.313 L1285.09 684.313 L1285.65 684.313 L1286.21 684.313 L1286.77 684.313 L1287.33 684.313 L1287.89 684.313 L1288.45 684.313 L1289 684.313 L1289.56 684.313 L1290.12 684.313 L1290.68 684.313 L1291.24 684.313 L1291.8 684.313 L1292.36 684.313 L1292.92 684.313 L1293.48 684.313 L1294.04 684.313 L1294.6 684.313 L1295.16 684.313 L1295.72 684.313 L1296.28 684.313 L1296.83 684.313 L1297.39 684.313 L1297.95 684.313 L1298.51 684.313 L1299.07 684.313 L1299.63 684.313 L1300.19 684.313 L1300.75 684.313 L1301.31 684.313 L1301.87 684.313 L1302.43 684.313 L1302.99 684.313 L1303.55 684.313 L1304.1 684.313 L1304.66 684.313 L1305.22 684.313 L1305.78 684.313 L1306.34 684.313 L1306.9 684.313 L1307.46 684.313 L1308.02 684.313 L1308.58 684.313 L1309.14 684.313 L1309.7 684.313 L1310.26 684.313 L1310.82 684.313 L1311.38 684.313 L1311.93 684.313 L1312.49 684.313 L1313.05 684.313 L1313.61 684.313 L1314.17 684.313 L1314.73 684.313 L1315.29 684.313 L1315.85 684.313 L1316.41 684.313 L1316.97 684.313 L1317.53 684.313 L1318.09 684.313 L1318.65 684.313 L1319.2 684.313 L1319.76 684.313 L1320.32 684.313 L1320.88 684.313 L1321.44 684.313 L1322 684.313 L1322.56 684.313 L1323.12 684.313 L1323.68 684.313 L1324.24 684.313 L1324.8 684.313 L1325.36 684.313 L1325.92 684.313 L1326.47 684.313 L1327.03 684.313 L1327.59 684.313 L1328.15 684.313 L1328.71 684.313 L1329.27 684.313 L1329.83 684.313 L1330.39 684.313 L1330.95 684.313 L1331.51 684.313 L1332.07 684.313 L1332.63 684.313 L1333.19 684.313 L1333.75 684.313 L1334.3 684.313 L1334.86 684.313 L1335.42 684.313 L1335.98 684.313 L1336.54 684.313 L1337.1 684.313 L1337.66 684.313 L1338.22 684.313 L1338.78 684.313 L1339.34 684.313 L1339.9 684.313 L1340.46 684.313 L1341.02 684.313 L1341.57 684.313 L1342.13 684.313 L1342.69 684.313 L1343.25 684.313 L1343.81 684.313 L1344.37 684.313 L1344.93 684.313 L1345.49 684.313 L1346.05 684.313 L1346.61 684.313 L1347.17 684.313 L1347.73 684.313 L1348.29 684.313 L1348.84 684.313 L1349.4 684.313 L1349.96 684.313 L1350.52 684.313 L1351.08 684.313 L1351.64 684.313 L1352.2 684.313 L1352.76 684.313 L1353.32 684.313 L1353.88 684.313 L1354.44 684.313 L1355 684.313 L1355.56 684.313 L1356.12 684.313 L1356.67 684.313 L1357.23 684.313 L1357.79 684.313 L1358.35 684.313 L1358.91 684.313 L1359.47 684.313 L1360.03 684.313 L1360.59 684.313 L1361.15 684.313 L1361.71 684.313 L1362.27 684.313 L1362.83 684.313 L1363.39 684.313 L1363.94 684.313 L1364.5 684.313 L1365.06 684.313 L1365.62 684.313 L1366.18 684.313 L1366.74 684.313 L1367.3 684.313 L1367.86 684.313 L1368.42 684.313 L1368.98 684.313 L1369.54 684.313 L1370.1 684.313 L1370.66 684.313 L1371.21 684.313 L1371.77 684.313 L1372.33 684.313 L1372.89 684.313 L1373.45 684.313 L1374.01 684.313 L1374.57 684.313 L1375.13 684.313 L1375.69 684.313 L1376.25 684.313 L1376.81 684.313 L1377.37 684.313 L1377.93 684.313 L1378.49 684.313 L1379.04 684.313 L1379.6 684.313 L1380.16 684.313 L1380.72 684.313 L1381.28 684.313 L1381.84 684.313 L1382.4 684.313 L1382.96 684.313 L1383.52 684.313 L1384.08 684.313 L1384.64 684.313 L1385.2 684.313 L1385.76 684.313 L1386.31 684.313 L1386.87 684.313 L1387.43 684.313 L1387.99 684.313 L1388.55 684.313 L1389.11 684.313 L1389.67 684.313 L1390.23 684.313 L1390.79 684.313 L1391.35 684.313 L1391.91 684.313 L1392.47 684.313 L1393.03 684.313 L1393.58 684.313 L1394.14 684.313 L1394.7 684.313 L1395.26 684.313 L1395.82 684.313 L1396.38 684.313 L1396.94 684.313 L1397.5 684.313 L1398.06 684.313 L1398.62 684.313 L1399.18 684.313 L1399.74 684.313 L1400.3 684.313 L1400.86 684.313 L1401.41 684.313 L1401.97 684.313 L1402.53 684.313 L1403.09 684.313 L1403.65 684.313 L1404.21 684.313 L1404.77 684.313 L1405.33 684.313 L1405.89 684.313 L1406.45 684.313 L1407.01 684.313 L1407.57 684.313 L1408.13 684.313 L1408.68 684.313 L1409.24 684.313 L1409.8 684.313 L1410.36 684.313 L1410.92 684.313 L1411.48 684.313 L1412.04 684.313 L1412.6 684.313 L1413.16 684.313 L1413.72 684.313 L1414.28 684.313 L1414.84 684.313 L1415.4 684.313 L1415.95 684.313 L1416.51 684.313 L1417.07 684.313 L1417.63 684.313 L1418.19 684.313 L1418.75 684.313 L1419.31 684.313 L1419.87 684.313 L1420.43 684.313 L1420.99 684.313 L1421.55 684.313 L1422.11 684.313 L1422.67 684.313 L1423.23 684.313 L1423.78 684.313 L1424.34 684.313 L1424.9 684.313 L1425.46 684.313 L1426.02 684.313 L1426.58 684.313 L1427.14 684.313 L1427.7 684.313 L1428.26 684.313 L1428.82 684.313 L1429.38 684.313 L1429.94 684.313 L1430.5 684.313 L1431.05 684.313 L1431.61 684.313 L1432.17 684.313 L1432.73 684.313 L1433.29 684.313 L1433.85 684.313 L1434.41 684.313 L1434.97 684.313 L1435.53 684.313 L1436.09 684.313 L1436.65 684.313 L1437.21 684.313 L1437.77 684.313 L1438.33 684.313 L1438.88 684.313 L1439.44 684.313 L1440 684.313 L1440.56 684.313 L1441.12 684.313 L1441.68 684.313 L1442.24 684.313 L1442.8 684.313 L1443.36 684.313 L1443.92 684.313 L1444.48 684.313 L1445.04 684.313 L1445.6 684.313 L1446.15 684.313 L1446.71 684.313 L1447.27 684.313 L1447.83 684.313 L1448.39 684.313 L1448.95 684.313 L1449.51 684.313 L1450.07 684.313 L1450.63 684.313 L1451.19 684.313 L1451.75 684.313 L1452.31 684.313 L1452.87 684.313 L1453.42 684.313 L1453.98 684.313 L1454.54 684.313 L1455.1 684.313 L1455.66 684.313 L1456.22 684.313 L1456.78 684.313 L1457.34 684.313 L1457.9 684.313 L1458.46 684.313 L1459.02 684.313 L1459.58 684.313 L1460.14 684.313 L1460.7 684.313 L1461.25 684.313 L1461.81 684.313 L1462.37 684.313 L1462.93 684.313 L1463.49 684.313 L1464.05 684.313 L1464.61 684.313 L1465.17 684.313 L1465.73 684.313 L1466.29 684.313 L1466.85 684.313 L1467.41 684.313 L1467.97 684.313 L1468.52 684.313 L1469.08 684.313 L1469.64 684.313 L1470.2 684.313 L1470.76 684.313 L1471.32 684.313 L1471.88 684.313 L1472.44 684.313 L1473 684.313 L1473.56 684.313 L1474.12 684.313 L1474.68 684.313 L1475.24 684.313 L1475.79 684.313 L1476.35 684.313 L1476.91 684.313 L1477.47 684.313 L1478.03 684.313 L1478.59 684.313 L1479.15 684.313 L1479.71 684.313 L1480.27 684.313 L1480.83 684.313 L1481.39 684.313 L1481.95 684.313 L1482.51 684.313 L1483.07 684.313 L1483.62 684.313 L1484.18 684.313 L1484.74 684.313 L1485.3 684.313 L1485.86 684.313 L1486.42 684.313 L1486.98 684.313 L1487.54 684.313 L1488.1 684.313 L1488.66 684.313 L1489.22 684.313 L1489.78 684.313 L1490.34 684.313 L1490.89 684.313 L1491.45 684.313 L1492.01 684.313 L1492.57 684.313 L1493.13 684.313 L1493.69 684.313 L1494.25 684.313 L1494.81 684.313 L1495.37 684.313 L1495.93 684.313 L1496.49 684.313 L1497.05 684.313 L1497.61 684.313 L1498.16 684.313 L1498.72 684.313 L1499.28 684.313 L1499.84 684.313 L1500.4 684.313 L1500.96 684.313 L1501.52 684.313 L1502.08 684.313 L1502.64 684.313 L1503.2 684.313 L1503.76 684.313 L1504.32 684.313 L1504.88 684.313 L1505.44 684.313 L1505.99 684.313 L1506.55 684.313 L1507.11 684.313 L1507.67 684.313 L1508.23 684.313 L1508.79 684.313 L1509.35 684.313 L1509.91 684.313 L1510.47 684.313 L1511.03 684.313 L1511.59 684.313 L1512.15 684.313 L1512.71 684.313 L1513.26 684.313 L1513.82 684.313 L1514.38 684.313 L1514.94 684.313 L1515.5 684.313 L1516.06 684.313 L1516.62 684.313 L1517.18 684.313 L1517.74 684.313 L1518.3 684.313 L1518.86 684.313 L1519.42 684.313 L1519.98 684.313 L1520.53 684.313 L1521.09 684.313 L1521.65 684.313 L1522.21 684.313 L1522.77 684.313 L1523.33 684.313 L1523.89 684.313 L1524.45 684.313 L1525.01 684.313 L1525.57 684.313 L1526.13 684.313 L1526.69 684.313 L1527.25 684.313 L1527.81 684.313 L1528.36 684.313 L1528.92 684.313 L1529.48 684.313 L1530.04 684.313 L1530.6 684.313 L1531.16 684.313 L1531.72 684.313 L1532.28 684.313 L1532.84 684.313 L1533.4 684.313 L1533.96 684.313 L1534.52 684.313 L1535.08 684.313 L1535.63 684.313 L1536.19 684.313 L1536.75 684.313 L1537.31 684.313 L1537.87 684.313 L1538.43 684.313 L1538.99 684.313 L1539.55 684.313 L1540.11 684.313 L1540.67 684.313 L1541.23 684.313 L1541.79 684.313 L1542.35 684.313 L1542.9 684.313 L1543.46 684.313 L1544.02 684.313 L1544.58 684.313 L1545.14 684.313 L1545.7 684.313 L1546.26 684.313 L1546.82 684.313 L1547.38 684.313 L1547.94 684.313 L1548.5 684.313 L1549.06 684.313 L1549.62 684.313 L1550.18 684.313 L1550.73 684.313 L1551.29 684.313 L1551.85 684.313 L1552.41 684.313 L1552.97 684.313 L1553.53 684.313 L1554.09 684.313 L1554.65 684.313 L1555.21 684.313 L1555.77 684.313 L1556.33 684.313 L1556.89 684.313 L1557.45 684.313 L1558 684.313 L1558.56 684.313 L1559.12 684.313 L1559.68 684.313 L1560.24 684.313 L1560.8 684.313 L1561.36 684.313 L1561.92 684.313 L1562.48 684.313 L1563.04 684.313 L1563.6 684.313 L1564.16 684.313 L1564.72 684.313 L1565.28 684.313 L1565.83 684.313 L1566.39 684.313 L1566.95 684.313 L1567.51 684.313 L1568.07 684.313 L1568.63 684.313 L1569.19 684.313 L1569.75 684.313 L1570.31 684.313 L1570.87 684.313 L1571.43 684.313 L1571.99 684.313 L1572.55 684.313 L1573.1 684.313 L1573.66 684.313 L1574.22 684.313 L1574.78 684.313 L1575.34 684.313 L1575.9 684.313 L1576.46 684.313 L1577.02 684.313 L1577.58 684.313 L1578.14 684.313 L1578.7 684.313 L1579.26 684.313 L1579.82 684.313 L1580.37 684.313 L1580.93 684.313 L1581.49 684.313 L1582.05 684.313 L1582.61 684.313 L1583.17 684.313 L1583.73 684.313 L1584.29 684.313 L1584.85 684.313 L1585.41 684.313 L1585.97 684.313 L1586.53 684.313 L1587.09 684.313 L1587.65 684.313 L1588.2 684.313 L1588.76 684.313 L1589.32 684.313 L1589.88 684.313 L1590.44 684.313 L1591 684.313 L1591.56 684.313 L1592.12 684.313 L1592.68 684.313 L1593.24 684.313 L1593.8 684.313 L1594.36 684.313 L1594.92 684.313 L1595.47 684.313 L1596.03 684.313 L1596.59 684.313 L1597.15 684.313 L1597.71 684.313 L1598.27 684.313 L1598.83 684.313 L1599.39 684.313 L1599.95 684.313 L1600.51 684.313 L1601.07 684.313 L1601.63 684.313 L1602.19 684.313 L1602.74 684.313 L1603.3 684.313 L1603.86 684.313 L1604.42 684.313 L1604.98 684.313 L1605.54 684.313 L1606.1 684.313 L1606.66 684.313 L1607.22 684.313 L1607.78 684.313 L1608.34 684.313 L1608.9 684.313 L1609.46 684.313 L1610.02 684.313 L1610.57 684.313 L1611.13 684.313 L1611.69 684.313 L1612.25 684.313 L1612.81 684.313 L1613.37 684.313 L1613.93 684.313 L1614.49 684.313 L1615.05 684.313 L1615.61 684.313 L1616.17 684.313 L1616.73 684.313 L1617.29 684.313 L1617.84 684.313 L1618.4 684.313 L1618.96 684.313 L1619.52 684.313 L1620.08 684.313 L1620.64 684.313 L1621.2 684.313 L1621.76 684.313 L1622.32 684.313 L1622.88 684.313 L1623.44 684.313 L1624 684.313 L1624.56 684.313 L1625.11 684.313 L1625.67 684.313 L1626.23 684.313 L1626.79 684.313 L1627.35 684.313 L1627.91 684.313 L1628.47 684.313 L1629.03 684.313 L1629.59 684.313 L1630.15 684.313 L1630.71 684.313 L1631.27 684.313 L1631.83 684.313 L1632.39 684.313 L1632.94 684.313 L1633.5 684.313 L1634.06 684.313 L1634.62 684.313 L1635.18 684.313 L1635.74 684.313 L1636.3 684.313 L1636.86 684.313 L1637.42 684.313 L1637.98 684.313 L1638.54 684.313 L1639.1 684.313 L1639.66 684.313 L1640.21 684.313 L1640.77 684.313 L1641.33 684.313 L1641.89 684.313 L1642.45 684.313 L1643.01 684.313 L1643.57 684.313 L1644.13 684.313 L1644.69 684.313 L1645.25 684.313 L1645.81 684.313 L1646.37 684.313 L1646.93 684.313 L1647.48 684.313 L1648.04 684.313 L1648.6 684.313 L1649.16 684.313 L1649.72 684.313 L1650.28 684.313 L1650.84 684.313 L1651.4 684.313 L1651.96 684.313 L1652.52 684.313 L1653.08 684.313 L1653.64 684.313 L1654.2 684.313 L1654.76 684.313 L1655.31 684.313 L1655.87 684.313 L1656.43 684.313 L1656.99 684.313 L1657.55 684.313 L1658.11 684.313 L1658.67 684.313 L1659.23 684.313 L1659.79 684.313 L1660.35 684.313 L1660.91 684.313 L1661.47 684.313 L1662.03 684.313 L1662.58 684.313 L1663.14 684.313 L1663.7 684.313 L1664.26 684.313 L1664.82 684.313 L1665.38 684.313 L1665.94 684.313 L1666.5 684.313 L1667.06 684.313 L1667.62 684.313 L1668.18 684.313 L1668.74 684.313 L1669.3 684.313 L1669.85 684.313 L1670.41 684.313 L1670.97 684.313 L1671.53 684.313 L1672.09 684.313 L1672.65 684.313 L1673.21 684.313 L1673.77 684.313 L1674.33 684.313 L1674.89 684.313 L1675.45 684.313 L1676.01 684.313 L1676.57 684.313 L1677.13 684.313 L1677.68 684.313 L1678.24 684.313 L1678.8 684.313 L1679.36 684.313 L1679.92 684.313 L1680.48 684.313 L1681.04 684.313 L1681.6 684.313 L1682.16 684.313 L1682.72 684.313 L1683.28 684.313 L1683.84 684.313 L1684.4 684.313 L1684.95 684.313 L1685.51 684.313 L1686.07 684.313 L1686.63 684.313 L1687.19 684.313 L1687.75 684.313 L1688.31 684.313 L1688.87 684.313 L1689.43 684.313 L1689.99 684.313 L1690.55 684.313 L1691.11 684.313 L1691.67 684.313 L1692.23 684.313 L1692.78 684.313 L1693.34 684.313 L1693.9 684.313 L1694.46 684.313 L1695.02 684.313 L1695.58 684.313 L1696.14 684.313 L1696.7 684.313 L1697.26 684.313 L1697.82 684.313 L1698.38 684.313 L1698.94 684.313 L1699.5 684.313 L1700.05 684.313 L1700.61 684.313 L1701.17 684.313 L1701.73 684.313 L1702.29 684.313 L1702.85 684.313 L1703.41 684.313 L1703.97 684.313 L1704.53 684.313 L1705.09 684.313 L1705.65 684.313 L1706.21 684.313 L1706.77 684.313 L1707.32 684.313 L1707.88 684.313 L1708.44 684.313 L1709 684.313 L1709.56 684.313 L1710.12 684.313 L1710.68 684.313 L1711.24 684.313 L1711.8 684.313 L1712.36 684.313 L1712.92 684.313 L1713.48 684.313 L1714.04 684.313 L1714.6 684.313 L1715.15 684.313 L1715.71 684.313 L1716.27 684.313 L1716.83 684.313 L1717.39 684.313 L1717.95 684.313 L1718.51 684.313 L1719.07 684.313 L1719.63 684.313 L1720.19 684.313 L1720.75 684.313 L1721.31 684.313 L1721.87 684.313 L1722.42 684.313 L1722.98 684.313 L1723.54 684.313 L1724.1 684.313 L1724.66 684.313 L1725.22 684.313 L1725.78 684.313 L1726.34 684.313 L1726.9 684.313 L1727.46 684.313 L1728.02 684.313 L1728.58 684.313 L1729.14 684.313 L1729.69 684.313 L1730.25 684.313 L1730.81 684.313 L1731.37 684.313 L1731.93 684.313 L1732.49 684.313 L1733.05 684.313 L1733.61 684.313 L1734.17 684.313 L1734.73 684.313 L1735.29 684.313 L1735.85 684.313 L1736.41 684.313 L1736.97 684.313 L1737.52 684.313 L1738.08 684.313 L1738.64 684.313 L1739.2 684.313 L1739.76 684.313 L1740.32 684.313 L1740.88 684.313 L1741.44 684.313 L1742 684.313 L1742.56 684.313 L1743.12 684.313 L1743.68 684.313 L1744.24 684.313 L1744.79 684.313 L1745.35 684.313 L1745.91 684.313 L1746.47 684.313 L1747.03 684.313 L1747.59 684.313 L1748.15 684.313 L1748.71 684.313 L1749.27 684.313 L1749.83 684.313 L1750.39 684.313 L1750.95 684.313 L1751.51 684.313 L1752.06 684.313 L1752.62 684.313 L1753.18 684.313 L1753.74 684.313 L1754.3 684.313 L1754.86 684.313 L1755.42 684.313 L1755.98 684.313 L1756.54 684.313 L1757.1 684.313 L1757.66 684.313 L1758.22 684.313 L1758.78 684.313 L1759.34 684.313 L1759.89 684.313 L1760.45 684.313 L1761.01 684.313 L1761.57 684.313 L1762.13 684.313 L1762.69 684.313 L1763.25 684.313 L1763.81 684.313 L1764.37 684.313 L1764.93 684.313 L1765.49 684.313 L1766.05 684.313 L1766.61 684.313 L1767.16 684.313 L1767.72 684.313 L1768.28 684.313 L1768.84 684.313 L1769.4 684.313 L1769.96 684.313 L1770.52 684.313 L1771.08 684.313 L1771.64 684.313 L1772.2 684.313 L1772.76 684.313 L1773.32 684.313 L1773.88 684.313 L1774.43 684.313 L1774.99 684.313 L1775.55 684.313 L1776.11 684.313 L1776.67 684.313 L1777.23 684.313 L1777.79 684.313 L1778.35 684.313 L1778.91 684.313 L1779.47 684.313 L1780.03 684.313 L1780.59 684.313 L1781.15 684.313 L1781.71 684.313 L1782.26 684.313 L1782.82 684.313 L1783.38 684.313 L1783.94 684.313 L1784.5 684.313 L1785.06 684.313 L1785.62 684.313 L1786.18 684.313 L1786.74 684.313 L1787.3 684.313 L1787.86 684.313 L1788.42 684.313 L1788.98 684.313 L1789.53 684.313 L1790.09 684.313 L1790.65 684.313 L1791.21 684.313 L1791.77 684.313 L1792.33 684.313 L1792.89 684.313 L1793.45 684.313 L1794.01 684.313 L1794.57 684.313 L1795.13 684.313 L1795.69 684.313 L1796.25 684.313 L1796.8 684.313 L1797.36 684.313 L1797.92 684.313 L1798.48 684.313 L1799.04 684.313 L1799.6 684.313 L1800.16 684.313 L1800.72 684.313 L1801.28 684.313 L1801.84 684.313 L1802.4 684.313 L1802.96 684.313 L1803.52 684.313 L1804.08 684.313 L1804.63 684.313 L1805.19 684.313 L1805.75 684.313 L1806.31 684.313 L1806.87 684.313 L1807.43 684.313 L1807.99 684.313 L1808.55 684.313 L1809.11 684.313 L1809.67 684.313 L1810.23 684.313 L1810.79 684.313 L1811.35 684.313 L1811.9 684.313 L1812.46 684.313 L1813.02 684.313 L1813.58 684.313 L1814.14 684.313 L1814.7 684.313 L1815.26 684.313 L1815.82 684.313 L1816.38 684.313 L1816.94 684.313 L1817.5 684.313 L1818.06 684.313 L1818.62 684.313 L1819.18 684.313 L1819.73 684.313 L1820.29 684.313 L1820.85 684.313 L1821.41 684.313 L1821.97 684.313 L1822.53 684.313 L1823.09 684.313 L1823.65 684.313 L1824.21 684.313 L1824.77 684.313 L1825.33 684.313 L1825.89 684.313 L1826.45 684.313 L1827 684.313 L1827.56 684.313 L1828.12 684.313 L1828.68 684.313 L1829.24 684.313 L1829.8 684.313 L1830.36 684.313 L1830.92 684.313 L1831.48 684.313 L1832.04 684.313 L1832.6 684.313 L1833.16 684.313 L1833.72 684.313 L1834.27 684.313 L1834.83 684.313 L1835.39 684.313 L1835.95 684.313 L1836.51 684.313 L1837.07 684.313 L1837.63 684.313 L1838.19 684.313 L1838.19 682.351 L1837.63 682.351 L1837.07 682.351 L1836.51 682.351 L1835.95 682.351 L1835.39 682.351 L1834.83 682.351 L1834.27 682.351 L1833.72 682.351 L1833.16 682.351 L1832.6 682.351 L1832.04 682.351 L1831.48 682.351 L1830.92 682.351 L1830.36 682.351 L1829.8 682.351 L1829.24 682.351 L1828.68 682.351 L1828.12 682.351 L1827.56 682.351 L1827 682.351 L1826.45 682.351 L1825.89 682.351 L1825.33 682.351 L1824.77 682.351 L1824.21 682.351 L1823.65 682.351 L1823.09 682.351 L1822.53 682.351 L1821.97 682.351 L1821.41 682.351 L1820.85 682.351 L1820.29 682.351 L1819.73 682.351 L1819.18 682.351 L1818.62 682.351 L1818.06 682.351 L1817.5 682.351 L1816.94 682.351 L1816.38 682.351 L1815.82 682.351 L1815.26 682.351 L1814.7 682.351 L1814.14 682.351 L1813.58 682.351 L1813.02 682.351 L1812.46 682.351 L1811.9 682.351 L1811.35 682.351 L1810.79 682.351 L1810.23 682.351 L1809.67 682.351 L1809.11 682.351 L1808.55 682.351 L1807.99 682.351 L1807.43 682.351 L1806.87 682.351 L1806.31 682.351 L1805.75 682.351 L1805.19 682.351 L1804.63 682.351 L1804.08 682.351 L1803.52 682.351 L1802.96 682.351 L1802.4 682.351 L1801.84 682.351 L1801.28 682.351 L1800.72 682.351 L1800.16 682.351 L1799.6 682.351 L1799.04 682.351 L1798.48 682.351 L1797.92 682.351 L1797.36 682.351 L1796.8 682.351 L1796.25 682.351 L1795.69 682.351 L1795.13 682.351 L1794.57 682.351 L1794.01 682.351 L1793.45 682.351 L1792.89 682.351 L1792.33 682.351 L1791.77 682.351 L1791.21 682.351 L1790.65 682.351 L1790.09 682.351 L1789.53 682.351 L1788.98 682.351 L1788.42 682.351 L1787.86 682.351 L1787.3 682.351 L1786.74 682.351 L1786.18 682.351 L1785.62 682.351 L1785.06 682.351 L1784.5 682.351 L1783.94 682.351 L1783.38 682.351 L1782.82 682.351 L1782.26 682.351 L1781.71 682.351 L1781.15 682.351 L1780.59 682.351 L1780.03 682.351 L1779.47 682.351 L1778.91 682.351 L1778.35 682.351 L1777.79 682.351 L1777.23 682.351 L1776.67 682.351 L1776.11 682.351 L1775.55 682.351 L1774.99 682.351 L1774.43 682.351 L1773.88 682.351 L1773.32 682.351 L1772.76 682.351 L1772.2 682.351 L1771.64 682.351 L1771.08 682.351 L1770.52 682.351 L1769.96 682.351 L1769.4 682.351 L1768.84 682.351 L1768.28 682.351 L1767.72 682.351 L1767.16 682.351 L1766.61 682.351 L1766.05 682.351 L1765.49 682.351 L1764.93 682.351 L1764.37 682.351 L1763.81 682.351 L1763.25 682.351 L1762.69 682.351 L1762.13 682.351 L1761.57 682.351 L1761.01 682.351 L1760.45 682.351 L1759.89 682.351 L1759.34 682.351 L1758.78 682.351 L1758.22 682.351 L1757.66 682.351 L1757.1 682.351 L1756.54 682.351 L1755.98 682.351 L1755.42 682.351 L1754.86 682.351 L1754.3 682.351 L1753.74 682.351 L1753.18 682.351 L1752.62 682.351 L1752.06 682.351 L1751.51 682.351 L1750.95 682.351 L1750.39 682.351 L1749.83 682.351 L1749.27 682.351 L1748.71 682.351 L1748.15 682.351 L1747.59 682.351 L1747.03 682.351 L1746.47 682.351 L1745.91 682.351 L1745.35 682.351 L1744.79 682.351 L1744.24 682.351 L1743.68 682.351 L1743.12 682.351 L1742.56 682.351 L1742 682.351 L1741.44 682.351 L1740.88 682.351 L1740.32 682.351 L1739.76 682.351 L1739.2 682.351 L1738.64 682.351 L1738.08 682.351 L1737.52 682.351 L1736.97 682.351 L1736.41 682.351 L1735.85 682.351 L1735.29 682.351 L1734.73 682.351 L1734.17 682.351 L1733.61 682.351 L1733.05 682.351 L1732.49 682.351 L1731.93 682.351 L1731.37 682.351 L1730.81 682.351 L1730.25 682.351 L1729.69 682.351 L1729.14 682.351 L1728.58 682.351 L1728.02 682.351 L1727.46 682.351 L1726.9 682.351 L1726.34 682.351 L1725.78 682.351 L1725.22 682.351 L1724.66 682.351 L1724.1 682.351 L1723.54 682.351 L1722.98 682.351 L1722.42 682.351 L1721.87 682.351 L1721.31 682.351 L1720.75 682.351 L1720.19 682.351 L1719.63 682.351 L1719.07 682.351 L1718.51 682.351 L1717.95 682.351 L1717.39 682.351 L1716.83 682.351 L1716.27 682.351 L1715.71 682.351 L1715.15 682.351 L1714.6 682.351 L1714.04 682.351 L1713.48 682.351 L1712.92 682.351 L1712.36 682.351 L1711.8 682.351 L1711.24 682.351 L1710.68 682.351 L1710.12 682.351 L1709.56 682.351 L1709 682.351 L1708.44 682.351 L1707.88 682.351 L1707.32 682.351 L1706.77 682.351 L1706.21 682.351 L1705.65 682.351 L1705.09 682.351 L1704.53 682.351 L1703.97 682.351 L1703.41 682.351 L1702.85 682.351 L1702.29 682.351 L1701.73 682.351 L1701.17 682.351 L1700.61 682.351 L1700.05 682.351 L1699.5 682.351 L1698.94 682.351 L1698.38 682.351 L1697.82 682.351 L1697.26 682.351 L1696.7 682.351 L1696.14 682.351 L1695.58 682.351 L1695.02 682.351 L1694.46 682.351 L1693.9 682.351 L1693.34 682.351 L1692.78 682.351 L1692.23 682.351 L1691.67 682.351 L1691.11 682.351 L1690.55 682.351 L1689.99 682.351 L1689.43 682.351 L1688.87 682.351 L1688.31 682.351 L1687.75 682.351 L1687.19 682.351 L1686.63 682.351 L1686.07 682.351 L1685.51 682.351 L1684.95 682.351 L1684.4 682.351 L1683.84 682.351 L1683.28 682.351 L1682.72 682.351 L1682.16 682.351 L1681.6 682.351 L1681.04 682.351 L1680.48 682.351 L1679.92 682.351 L1679.36 682.351 L1678.8 682.351 L1678.24 682.351 L1677.68 682.351 L1677.13 682.351 L1676.57 682.351 L1676.01 682.351 L1675.45 682.351 L1674.89 682.351 L1674.33 682.351 L1673.77 682.351 L1673.21 682.351 L1672.65 682.351 L1672.09 682.351 L1671.53 682.351 L1670.97 682.351 L1670.41 682.351 L1669.85 682.351 L1669.3 682.351 L1668.74 682.351 L1668.18 682.351 L1667.62 682.351 L1667.06 682.351 L1666.5 682.351 L1665.94 682.351 L1665.38 682.351 L1664.82 682.351 L1664.26 682.351 L1663.7 682.351 L1663.14 682.351 L1662.58 682.351 L1662.03 682.351 L1661.47 682.351 L1660.91 682.351 L1660.35 682.351 L1659.79 682.351 L1659.23 682.351 L1658.67 682.351 L1658.11 682.351 L1657.55 682.351 L1656.99 682.351 L1656.43 682.351 L1655.87 682.351 L1655.31 682.351 L1654.76 682.351 L1654.2 682.351 L1653.64 682.351 L1653.08 682.351 L1652.52 682.351 L1651.96 682.351 L1651.4 682.351 L1650.84 682.351 L1650.28 682.351 L1649.72 682.351 L1649.16 682.351 L1648.6 682.351 L1648.04 682.351 L1647.48 682.351 L1646.93 682.351 L1646.37 682.351 L1645.81 682.351 L1645.25 682.351 L1644.69 682.351 L1644.13 682.351 L1643.57 682.351 L1643.01 682.351 L1642.45 682.351 L1641.89 682.351 L1641.33 682.351 L1640.77 682.351 L1640.21 682.351 L1639.66 682.351 L1639.1 682.351 L1638.54 682.351 L1637.98 682.351 L1637.42 682.351 L1636.86 682.351 L1636.3 682.351 L1635.74 682.351 L1635.18 682.351 L1634.62 682.351 L1634.06 682.351 L1633.5 682.351 L1632.94 682.351 L1632.39 682.351 L1631.83 682.351 L1631.27 682.351 L1630.71 682.351 L1630.15 682.351 L1629.59 682.351 L1629.03 682.351 L1628.47 682.351 L1627.91 682.351 L1627.35 682.351 L1626.79 682.351 L1626.23 682.351 L1625.67 682.351 L1625.11 682.351 L1624.56 682.351 L1624 682.351 L1623.44 682.351 L1622.88 682.351 L1622.32 682.351 L1621.76 682.351 L1621.2 682.351 L1620.64 682.351 L1620.08 682.351 L1619.52 682.351 L1618.96 682.351 L1618.4 682.351 L1617.84 682.351 L1617.29 682.351 L1616.73 682.351 L1616.17 682.351 L1615.61 682.351 L1615.05 682.351 L1614.49 682.351 L1613.93 682.351 L1613.37 682.351 L1612.81 682.351 L1612.25 682.351 L1611.69 682.351 L1611.13 682.351 L1610.57 682.351 L1610.02 682.351 L1609.46 682.351 L1608.9 682.351 L1608.34 682.351 L1607.78 682.351 L1607.22 682.351 L1606.66 682.351 L1606.1 682.351 L1605.54 682.351 L1604.98 682.351 L1604.42 682.351 L1603.86 682.351 L1603.3 682.351 L1602.74 682.351 L1602.19 682.351 L1601.63 682.351 L1601.07 682.351 L1600.51 682.351 L1599.95 682.351 L1599.39 682.351 L1598.83 682.351 L1598.27 682.351 L1597.71 682.351 L1597.15 682.351 L1596.59 682.351 L1596.03 682.351 L1595.47 682.351 L1594.92 682.351 L1594.36 682.351 L1593.8 682.351 L1593.24 682.351 L1592.68 682.351 L1592.12 682.351 L1591.56 682.351 L1591 682.351 L1590.44 682.351 L1589.88 682.351 L1589.32 682.351 L1588.76 682.351 L1588.2 682.351 L1587.65 682.351 L1587.09 682.351 L1586.53 682.351 L1585.97 682.351 L1585.41 682.351 L1584.85 682.351 L1584.29 682.351 L1583.73 682.351 L1583.17 682.351 L1582.61 682.351 L1582.05 682.351 L1581.49 682.351 L1580.93 682.351 L1580.37 682.351 L1579.82 682.351 L1579.26 682.351 L1578.7 682.351 L1578.14 682.351 L1577.58 682.351 L1577.02 682.351 L1576.46 682.351 L1575.9 682.351 L1575.34 682.351 L1574.78 682.351 L1574.22 682.351 L1573.66 682.351 L1573.1 682.351 L1572.55 682.351 L1571.99 682.351 L1571.43 682.351 L1570.87 682.351 L1570.31 682.351 L1569.75 682.351 L1569.19 682.351 L1568.63 682.351 L1568.07 682.351 L1567.51 682.351 L1566.95 682.351 L1566.39 682.351 L1565.83 682.351 L1565.28 682.351 L1564.72 682.351 L1564.16 682.351 L1563.6 682.351 L1563.04 682.351 L1562.48 682.351 L1561.92 682.351 L1561.36 682.351 L1560.8 682.351 L1560.24 682.351 L1559.68 682.351 L1559.12 682.351 L1558.56 682.351 L1558 682.351 L1557.45 682.351 L1556.89 682.351 L1556.33 682.351 L1555.77 682.351 L1555.21 682.351 L1554.65 682.351 L1554.09 682.351 L1553.53 682.351 L1552.97 682.351 L1552.41 682.351 L1551.85 682.351 L1551.29 682.351 L1550.73 682.351 L1550.18 682.351 L1549.62 682.351 L1549.06 682.351 L1548.5 682.351 L1547.94 682.351 L1547.38 682.351 L1546.82 682.351 L1546.26 682.351 L1545.7 682.351 L1545.14 682.351 L1544.58 682.351 L1544.02 682.351 L1543.46 682.351 L1542.9 682.351 L1542.35 682.351 L1541.79 682.351 L1541.23 682.351 L1540.67 682.351 L1540.11 682.351 L1539.55 682.351 L1538.99 682.351 L1538.43 682.351 L1537.87 682.351 L1537.31 682.351 L1536.75 682.351 L1536.19 682.351 L1535.63 682.351 L1535.08 682.351 L1534.52 682.351 L1533.96 682.351 L1533.4 682.351 L1532.84 682.351 L1532.28 682.351 L1531.72 682.351 L1531.16 682.351 L1530.6 682.351 L1530.04 682.351 L1529.48 682.351 L1528.92 682.351 L1528.36 682.351 L1527.81 682.351 L1527.25 682.351 L1526.69 682.351 L1526.13 682.351 L1525.57 682.351 L1525.01 682.351 L1524.45 682.351 L1523.89 682.351 L1523.33 682.351 L1522.77 682.351 L1522.21 682.351 L1521.65 682.351 L1521.09 682.351 L1520.53 682.351 L1519.98 682.351 L1519.42 682.351 L1518.86 682.351 L1518.3 682.351 L1517.74 682.351 L1517.18 682.351 L1516.62 682.351 L1516.06 682.351 L1515.5 682.351 L1514.94 682.351 L1514.38 682.351 L1513.82 682.351 L1513.26 682.351 L1512.71 682.351 L1512.15 682.351 L1511.59 682.351 L1511.03 682.351 L1510.47 682.351 L1509.91 682.351 L1509.35 682.351 L1508.79 682.351 L1508.23 682.351 L1507.67 682.351 L1507.11 682.351 L1506.55 682.351 L1505.99 682.351 L1505.44 682.351 L1504.88 682.351 L1504.32 682.351 L1503.76 682.351 L1503.2 682.351 L1502.64 682.351 L1502.08 682.351 L1501.52 682.351 L1500.96 682.351 L1500.4 682.351 L1499.84 682.351 L1499.28 682.351 L1498.72 682.351 L1498.16 682.351 L1497.61 682.351 L1497.05 682.351 L1496.49 682.351 L1495.93 682.351 L1495.37 682.351 L1494.81 682.351 L1494.25 682.351 L1493.69 682.351 L1493.13 682.351 L1492.57 682.351 L1492.01 682.351 L1491.45 682.351 L1490.89 682.351 L1490.34 682.351 L1489.78 682.351 L1489.22 682.351 L1488.66 682.351 L1488.1 682.351 L1487.54 682.351 L1486.98 682.351 L1486.42 682.351 L1485.86 682.351 L1485.3 682.351 L1484.74 682.351 L1484.18 682.351 L1483.62 682.351 L1483.07 682.351 L1482.51 682.351 L1481.95 682.351 L1481.39 682.351 L1480.83 682.351 L1480.27 682.351 L1479.71 682.351 L1479.15 682.351 L1478.59 682.351 L1478.03 682.351 L1477.47 682.351 L1476.91 682.351 L1476.35 682.351 L1475.79 682.351 L1475.24 682.351 L1474.68 682.351 L1474.12 682.351 L1473.56 682.351 L1473 682.351 L1472.44 682.351 L1471.88 682.351 L1471.32 682.351 L1470.76 682.351 L1470.2 682.351 L1469.64 682.351 L1469.08 682.351 L1468.52 682.351 L1467.97 682.351 L1467.41 682.351 L1466.85 682.351 L1466.29 682.351 L1465.73 682.351 L1465.17 682.351 L1464.61 682.351 L1464.05 682.351 L1463.49 682.351 L1462.93 682.351 L1462.37 682.351 L1461.81 682.351 L1461.25 682.351 L1460.7 682.351 L1460.14 682.351 L1459.58 682.351 L1459.02 682.351 L1458.46 682.351 L1457.9 682.351 L1457.34 682.351 L1456.78 682.351 L1456.22 682.351 L1455.66 682.351 L1455.1 682.351 L1454.54 682.351 L1453.98 682.351 L1453.42 682.351 L1452.87 682.351 L1452.31 682.351 L1451.75 682.351 L1451.19 682.351 L1450.63 682.351 L1450.07 682.351 L1449.51 682.351 L1448.95 682.351 L1448.39 682.351 L1447.83 682.351 L1447.27 682.351 L1446.71 682.351 L1446.15 682.351 L1445.6 682.351 L1445.04 682.351 L1444.48 682.351 L1443.92 682.351 L1443.36 682.351 L1442.8 682.351 L1442.24 682.351 L1441.68 682.351 L1441.12 682.351 L1440.56 682.351 L1440 682.351 L1439.44 682.351 L1438.88 682.351 L1438.33 682.351 L1437.77 682.351 L1437.21 682.351 L1436.65 682.351 L1436.09 682.351 L1435.53 682.351 L1434.97 682.351 L1434.41 682.351 L1433.85 682.351 L1433.29 682.351 L1432.73 682.351 L1432.17 682.351 L1431.61 682.351 L1431.05 682.351 L1430.5 682.351 L1429.94 682.351 L1429.38 682.351 L1428.82 682.351 L1428.26 682.351 L1427.7 682.351 L1427.14 682.351 L1426.58 682.351 L1426.02 682.351 L1425.46 682.351 L1424.9 682.351 L1424.34 682.351 L1423.78 682.351 L1423.23 682.351 L1422.67 682.351 L1422.11 682.351 L1421.55 682.351 L1420.99 682.351 L1420.43 682.351 L1419.87 682.351 L1419.31 682.351 L1418.75 682.351 L1418.19 682.351 L1417.63 682.351 L1417.07 682.351 L1416.51 682.351 L1415.95 682.351 L1415.4 682.351 L1414.84 682.351 L1414.28 682.351 L1413.72 682.351 L1413.16 682.351 L1412.6 682.351 L1412.04 682.351 L1411.48 682.351 L1410.92 682.351 L1410.36 682.351 L1409.8 682.351 L1409.24 682.351 L1408.68 682.351 L1408.13 682.351 L1407.57 682.351 L1407.01 682.351 L1406.45 682.351 L1405.89 682.351 L1405.33 682.351 L1404.77 682.351 L1404.21 682.351 L1403.65 682.351 L1403.09 682.351 L1402.53 682.351 L1401.97 682.351 L1401.41 682.351 L1400.86 682.351 L1400.3 682.351 L1399.74 682.351 L1399.18 682.351 L1398.62 682.351 L1398.06 682.351 L1397.5 682.351 L1396.94 682.351 L1396.38 682.351 L1395.82 682.351 L1395.26 682.351 L1394.7 682.351 L1394.14 682.351 L1393.58 682.351 L1393.03 682.351 L1392.47 682.351 L1391.91 682.351 L1391.35 682.351 L1390.79 682.351 L1390.23 682.351 L1389.67 682.351 L1389.11 682.351 L1388.55 682.351 L1387.99 682.351 L1387.43 682.351 L1386.87 682.351 L1386.31 682.351 L1385.76 682.351 L1385.2 682.351 L1384.64 682.351 L1384.08 682.351 L1383.52 682.351 L1382.96 682.351 L1382.4 682.351 L1381.84 682.351 L1381.28 682.351 L1380.72 682.351 L1380.16 682.351 L1379.6 682.351 L1379.04 682.351 L1378.49 682.351 L1377.93 682.351 L1377.37 682.351 L1376.81 682.351 L1376.25 682.351 L1375.69 682.351 L1375.13 682.351 L1374.57 682.351 L1374.01 682.351 L1373.45 682.351 L1372.89 682.351 L1372.33 682.351 L1371.77 682.351 L1371.21 682.351 L1370.66 682.351 L1370.1 682.351 L1369.54 682.351 L1368.98 682.351 L1368.42 682.351 L1367.86 682.351 L1367.3 682.351 L1366.74 682.351 L1366.18 682.351 L1365.62 682.351 L1365.06 682.351 L1364.5 682.351 L1363.94 682.351 L1363.39 682.351 L1362.83 682.351 L1362.27 682.351 L1361.71 682.351 L1361.15 682.351 L1360.59 682.351 L1360.03 682.351 L1359.47 682.351 L1358.91 682.351 L1358.35 682.351 L1357.79 682.351 L1357.23 682.351 L1356.67 682.351 L1356.12 682.351 L1355.56 682.351 L1355 682.351 L1354.44 682.351 L1353.88 682.351 L1353.32 682.351 L1352.76 682.351 L1352.2 682.351 L1351.64 682.351 L1351.08 682.351 L1350.52 682.351 L1349.96 682.351 L1349.4 682.351 L1348.84 682.351 L1348.29 682.351 L1347.73 682.351 L1347.17 682.351 L1346.61 682.351 L1346.05 682.351 L1345.49 682.351 L1344.93 682.351 L1344.37 682.351 L1343.81 682.351 L1343.25 682.351 L1342.69 682.351 L1342.13 682.351 L1341.57 682.351 L1341.02 682.351 L1340.46 682.351 L1339.9 682.351 L1339.34 682.351 L1338.78 682.351 L1338.22 682.351 L1337.66 682.351 L1337.1 682.351 L1336.54 682.351 L1335.98 682.351 L1335.42 682.351 L1334.86 682.351 L1334.3 682.351 L1333.75 682.351 L1333.19 682.351 L1332.63 682.351 L1332.07 682.351 L1331.51 682.351 L1330.95 682.351 L1330.39 682.351 L1329.83 682.351 L1329.27 682.351 L1328.71 682.351 L1328.15 682.351 L1327.59 682.351 L1327.03 682.351 L1326.47 682.351 L1325.92 682.351 L1325.36 682.351 L1324.8 682.351 L1324.24 682.351 L1323.68 682.351 L1323.12 682.351 L1322.56 682.351 L1322 682.351 L1321.44 682.351 L1320.88 682.351 L1320.32 682.351 L1319.76 682.351 L1319.2 682.351 L1318.65 682.351 L1318.09 682.351 L1317.53 682.351 L1316.97 682.351 L1316.41 682.351 L1315.85 682.351 L1315.29 682.351 L1314.73 682.351 L1314.17 682.351 L1313.61 682.351 L1313.05 682.351 L1312.49 682.351 L1311.93 682.351 L1311.38 682.351 L1310.82 682.351 L1310.26 682.351 L1309.7 682.351 L1309.14 682.351 L1308.58 682.351 L1308.02 682.351 L1307.46 682.351 L1306.9 682.351 L1306.34 682.351 L1305.78 682.351 L1305.22 682.351 L1304.66 682.351 L1304.1 682.351 L1303.55 682.351 L1302.99 682.351 L1302.43 682.351 L1301.87 682.351 L1301.31 682.351 L1300.75 682.351 L1300.19 682.351 L1299.63 682.351 L1299.07 682.351 L1298.51 682.351 L1297.95 682.351 L1297.39 682.351 L1296.83 682.351 L1296.28 682.351 L1295.72 682.351 L1295.16 682.351 L1294.6 682.351 L1294.04 682.351 L1293.48 682.351 L1292.92 682.351 L1292.36 682.351 L1291.8 682.351 L1291.24 682.351 L1290.68 682.351 L1290.12 682.351 L1289.56 682.351 L1289 682.351 L1288.45 682.351 L1287.89 682.351 L1287.33 682.351 L1286.77 682.351 L1286.21 682.351 L1285.65 682.351 L1285.09 682.351 L1284.53 682.351 L1283.97 682.351 L1283.41 682.351 L1282.85 682.351 L1282.29 682.351 L1281.73 682.351 L1281.18 682.351 L1280.62 682.351 L1280.06 682.351 L1279.5 682.351 L1278.94 682.351 L1278.38 682.351 L1277.82 682.351 L1277.26 682.351 L1276.7 682.351 L1276.14 682.351 L1275.58 682.351 L1275.02 682.351 L1274.46 682.351 L1273.91 682.351 L1273.35 682.351 L1272.79 682.351 L1272.23 682.351 L1271.67 682.351 L1271.11 682.351 L1270.55 682.351 L1269.99 682.351 L1269.43 682.351 L1268.87 682.351 L1268.31 682.351 L1267.75 682.351 L1267.19 682.351 L1266.63 682.351 L1266.08 682.351 L1265.52 682.351 L1264.96 682.351 L1264.4 682.351 L1263.84 682.351 L1263.28 682.351 L1262.72 682.351 L1262.16 682.351 L1261.6 682.351 L1261.04 682.351 L1260.48 682.351 L1259.92 682.351 L1259.36 682.351 L1258.81 682.351 L1258.25 682.351 L1257.69 682.351 L1257.13 682.351 L1256.57 682.351 L1256.01 682.351 L1255.45 682.351 L1254.89 682.351 L1254.33 682.351 L1253.77 682.351 L1253.21 682.351 L1252.65 682.351 L1252.09 682.351 L1251.54 682.351 L1250.98 682.351 L1250.42 682.351 L1249.86 682.351 L1249.3 682.351 L1248.74 682.351 L1248.18 682.351 L1247.62 682.351 L1247.06 682.351 L1246.5 682.351 L1245.94 682.351 L1245.38 682.351 L1244.82 682.351 L1244.26 682.351 L1243.71 682.351 L1243.15 682.351 L1242.59 682.351 L1242.03 682.351 L1241.47 682.351 L1240.91 682.351 L1240.35 682.351 L1239.79 682.351 L1239.23 682.351 L1238.67 682.351 L1238.11 682.351 L1237.55 682.351 L1236.99 682.351 L1236.44 682.351 L1235.88 682.351 L1235.32 682.351 L1234.76 682.351 L1234.2 682.351 L1233.64 682.351 L1233.08 682.351 L1232.52 682.351 L1231.96 682.351 L1231.4 682.351 L1230.84 682.351 L1230.28 682.351 L1229.72 682.351 L1229.17 682.351 L1228.61 682.351 L1228.05 682.351 L1227.49 682.351 L1226.93 682.351 L1226.37 682.351 L1225.81 682.351 L1225.25 682.351 L1224.69 682.351 L1224.13 682.351 L1223.57 682.351 L1223.01 682.351 L1222.45 682.351 L1221.89 682.351 L1221.34 682.351 L1220.78 682.351 L1220.22 682.351 L1219.66 682.351 L1219.1 682.351 L1218.54 682.351 L1217.98 682.351 L1217.42 682.351 L1216.86 682.351 L1216.3 682.351 L1215.74 682.351 L1215.18 682.351 L1214.62 682.351 L1214.07 682.351 L1213.51 682.351 L1212.95 682.351 L1212.39 682.351 L1211.83 682.351 L1211.27 682.351 L1210.71 682.351 L1210.15 682.351 L1209.59 682.351 L1209.03 682.351 L1208.47 682.351 L1207.91 682.351 L1207.35 682.351 L1206.8 682.351 L1206.24 682.351 L1205.68 682.351 L1205.12 682.351 L1204.56 682.351 L1204 682.351 L1203.44 682.351 L1202.88 682.351 L1202.32 682.351 L1201.76 682.351 L1201.2 682.351 L1200.64 682.351 L1200.08 682.351 L1199.52 682.351 L1198.97 682.351 L1198.41 682.351 L1197.85 682.351 L1197.29 682.351 L1196.73 682.351 L1196.17 682.351 L1195.61 682.351 L1195.05 682.351 L1194.49 682.351 L1193.93 682.351 L1193.37 682.351 L1192.81 682.351 L1192.25 682.351 L1191.7 682.351 L1191.14 682.351 L1190.58 682.351 L1190.02 682.351 L1189.46 682.351 L1188.9 682.351 L1188.34 682.351 L1187.78 682.351 L1187.22 682.351 L1186.66 682.351 L1186.1 682.351 L1185.54 682.351 L1184.98 682.351 L1184.43 682.351 L1183.87 682.351 L1183.31 682.351 L1182.75 682.351 L1182.19 682.351 L1181.63 682.351 L1181.07 682.351 L1180.51 682.351 L1179.95 682.351 L1179.39 682.351 L1178.83 682.351 L1178.27 682.351 L1177.71 682.351 L1177.15 682.351 L1176.6 682.351 L1176.04 682.351 L1175.48 682.351 L1174.92 682.351 L1174.36 682.351 L1173.8 682.351 L1173.24 682.351 L1172.68 682.351 L1172.12 682.351 L1171.56 682.351 L1171 682.351 L1170.44 682.351 L1169.88 682.351 L1169.33 682.351 L1168.77 682.351 L1168.21 682.351 L1167.65 682.351 L1167.09 682.351 L1166.53 682.351 L1165.97 682.351 L1165.41 682.351 L1164.85 682.351 L1164.29 682.351 L1163.73 682.351 L1163.17 682.351 L1162.61 682.351 L1162.05 682.351 L1161.5 682.351 L1160.94 682.351 L1160.38 682.351 L1159.82 682.351 L1159.26 682.351 L1158.7 682.351 L1158.14 682.351 L1157.58 682.351 L1157.02 682.351 L1156.46 682.351 L1155.9 682.351 L1155.34 682.351 L1154.78 682.351 L1154.23 682.351 L1153.67 682.351 L1153.11 682.351 L1152.55 682.351 L1151.99 682.351 L1151.43 682.351 L1150.87 682.351 L1150.31 682.351 L1149.75 682.351 L1149.19 682.351 L1148.63 682.351 L1148.07 682.351 L1147.51 682.351 L1146.96 682.351 L1146.4 682.351 L1145.84 682.351 L1145.28 682.351 L1144.72 682.351 L1144.16 682.351 L1143.6 682.351 L1143.04 682.351 L1142.48 682.351 L1141.92 682.351 L1141.36 682.351 L1140.8 682.351 L1140.24 682.351 L1139.68 682.351 L1139.13 682.351 L1138.57 682.351 L1138.01 682.351 L1137.45 682.351 L1136.89 682.351 L1136.33 682.351 L1135.77 682.351 L1135.21 682.351 L1134.65 682.351 L1134.09 682.351 L1133.53 682.351 L1132.97 682.351 L1132.41 682.351 L1131.86 682.351 L1131.3 682.351 L1130.74 682.351 L1130.18 682.351 L1129.62 682.351 L1129.06 682.351 L1128.5 682.351 L1127.94 682.351 L1127.38 682.351 L1126.82 682.351 L1126.26 682.351 L1125.7 682.351 L1125.14 682.351 L1124.59 682.351 L1124.03 682.351 L1123.47 682.351 L1122.91 682.351 L1122.35 682.351 L1121.79 682.351 L1121.23 682.351 L1120.67 682.351 L1120.11 682.351 L1119.55 682.351 L1118.99 682.351 L1118.43 682.351 L1117.87 682.351 L1117.31 682.351 L1116.76 682.351 L1116.2 682.351 L1115.64 682.351 L1115.08 682.351 L1114.52 682.351 L1113.96 682.351 L1113.4 682.351 L1112.84 682.351 L1112.28 682.351 L1111.72 682.351 L1111.16 682.351 L1110.6 682.351 L1110.04 682.351 L1109.49 682.351 L1108.93 682.351 L1108.37 682.351 L1107.81 682.351 L1107.25 682.351 L1106.69 682.351 L1106.13 682.351 L1105.57 682.351 L1105.01 682.351 L1104.45 682.351 L1103.89 682.351 L1103.33 682.351 L1102.77 682.351 L1102.22 682.351 L1101.66 682.351 L1101.1 682.351 L1100.54 682.351 L1099.98 682.351 L1099.42 682.351 L1098.86 682.351 L1098.3 682.351 L1097.74 682.351 L1097.18 682.351 L1096.62 682.351 L1096.06 682.351 L1095.5 682.351 L1094.94 682.351 L1094.39 682.351 L1093.83 682.351 L1093.27 682.351 L1092.71 682.351 L1092.15 682.351 L1091.59 682.351 L1091.03 682.351 L1090.47 682.351 L1089.91 682.351 L1089.35 682.351 L1088.79 682.351 L1088.23 682.351 L1087.67 682.351 L1087.12 682.351 L1086.56 682.351 L1086 682.351 L1085.44 682.351 L1084.88 682.351 L1084.32 682.351 L1083.76 682.351 L1083.2 682.351 L1082.64 682.351 L1082.08 682.351 L1081.52 682.351 L1080.96 682.351 L1080.4 682.351 L1079.85 682.351 L1079.29 682.351 L1078.73 682.351 L1078.17 682.351 L1077.61 682.351 L1077.05 682.351 L1076.49 682.351 L1075.93 682.351 L1075.37 682.351 L1074.81 682.351 L1074.25 682.351 L1073.69 682.351 L1073.13 682.351 L1072.57 682.351 L1072.02 682.351 L1071.46 682.351 L1070.9 682.351 L1070.34 682.351 L1069.78 682.351 L1069.22 682.351 L1068.66 682.351 L1068.1 682.351 L1067.54 682.351 L1066.98 682.351 L1066.42 682.351 L1065.86 682.351 L1065.3 682.351 L1064.75 682.351 L1064.19 682.351 L1063.63 682.351 L1063.07 682.351 L1062.51 682.351 L1061.95 682.351 L1061.39 682.351 L1060.83 682.351 L1060.27 682.351 L1059.71 682.351 L1059.15 682.351 L1058.59 682.351 L1058.03 682.351 L1057.48 682.351 L1056.92 682.351 L1056.36 682.351 L1055.8 682.351 L1055.24 682.351 L1054.68 682.351 L1054.12 682.351 L1053.56 682.351 L1053 682.351 L1052.44 682.351 L1051.88 682.351 L1051.32 682.351 L1050.76 682.351 L1050.2 682.351 L1049.65 682.351 L1049.09 682.351 L1048.53 682.351 L1047.97 682.351 L1047.41 682.351 L1046.85 682.351 L1046.29 682.351 L1045.73 682.351 L1045.17 682.351 L1044.61 682.351 L1044.05 682.351 L1043.49 682.351 L1042.93 682.351 L1042.38 682.351 L1041.82 682.351 L1041.26 682.351 L1040.7 682.351 L1040.14 682.351 L1039.58 682.351 L1039.02 682.351 L1038.46 682.351 L1037.9 682.351 L1037.34 682.351 L1036.78 682.351 L1036.22 682.351 L1035.66 682.351 L1035.1 682.351 L1034.55 682.351 L1033.99 682.351 L1033.43 682.351 L1032.87 682.351 L1032.31 682.351 L1031.75 682.351 L1031.19 682.351 L1030.63 682.351 L1030.07 682.351 L1029.51 682.351 L1028.95 682.351 L1028.39 682.351 L1027.83 682.351 L1027.28 682.351 L1026.72 682.351 L1026.16 682.351 L1025.6 682.351 L1025.04 682.351 L1024.48 682.351 L1023.92 682.351 L1023.36 682.351 L1022.8 682.351 L1022.24 682.351 L1021.68 682.351 L1021.12 682.351 L1020.56 682.351 L1020.01 682.351 L1019.45 682.351 L1018.89 682.351 L1018.33 682.351 L1017.77 682.351 L1017.21 682.351 L1016.65 682.351 L1016.09 682.351 L1015.53 682.351 L1014.97 682.351 L1014.41 682.351 L1013.85 682.351 L1013.29 682.351 L1012.73 682.351 L1012.18 682.351 L1011.62 682.351 L1011.06 682.351 L1010.5 682.351 L1009.94 682.351 L1009.38 682.351 L1008.82 682.351 L1008.26 682.351 L1007.7 682.351 L1007.14 682.351 L1006.58 682.351 L1006.02 682.351 L1005.46 682.351 L1004.91 682.351 L1004.35 682.351 L1003.79 682.351 L1003.23 682.351 L1002.67 682.351 L1002.11 682.351 L1001.55 682.351 L1000.99 682.351 L1000.43 682.351 L999.872 682.351 L999.313 682.351 L998.754 682.351 L998.194 682.351 L997.635 682.351 L997.076 682.351 L996.517 682.351 L995.957 682.351 L995.398 682.351 L994.839 682.351 L994.28 682.351 L993.72 682.351 L993.161 682.351 L992.602 682.351 L992.043 682.351 L991.483 682.351 L990.924 682.351 L990.365 682.351 L989.806 682.351 L989.246 682.351 L988.687 682.351 L988.128 682.351 L987.569 682.351 L987.009 682.351 L986.45 682.351 L985.891 682.351 L985.332 682.351 L984.772 682.351 L984.213 682.351 L983.654 682.351 L983.095 682.351 L982.535 682.351 L981.976 682.351 L981.417 682.351 L980.858 682.351 L980.298 682.351 L979.739 682.351 L979.18 682.351 L978.621 682.351 L978.061 682.351 L977.502 682.351 L976.943 682.351 L976.384 682.351 L975.824 682.351 L975.265 682.351 L974.706 682.351 L974.147 682.351 L973.587 682.351 L973.028 682.351 L972.469 682.351 L971.91 682.351 L971.35 682.351 L970.791 682.351 L970.232 682.351 L969.673 682.351 L969.113 682.351 L968.554 682.351 L967.995 682.351 L967.436 682.351 L966.876 682.351 L966.317 682.351 L965.758 682.351 L965.199 682.351 L964.639 682.351 L964.08 682.351 L963.521 682.351 L962.962 682.351 L962.402 682.351 L961.843 682.351 L961.284 682.351 L960.725 682.351 L960.165 682.351 L959.606 682.351 L959.047 682.351 L958.488 682.351 L957.928 682.351 L957.369 682.351 L956.81 682.351 L956.251 682.351 L955.691 682.351 L955.132 682.351 L954.573 682.351 L954.014 682.351 L953.454 682.351 L952.895 682.351 L952.336 682.351 L951.777 682.351 L951.217 682.351 L950.658 682.351 L950.099 682.351 L949.54 682.351 L948.98 682.351 L948.421 682.351 L947.862 682.351 L947.303 682.351 L946.743 682.351 L946.184 682.351 L945.625 682.351 L945.066 682.351 L944.506 682.351 L943.947 682.351 L943.388 682.351 L942.829 682.351 L942.269 682.351 L941.71 682.351 L941.151 682.351 L940.592 682.351 L940.032 682.351 L939.473 682.351 L938.914 682.351 L938.355 682.351 L937.795 682.351 L937.236 682.351 L936.677 682.351 L936.118 682.351 L935.558 682.351 L934.999 682.351 L934.44 682.351 L933.881 682.351 L933.321 682.351 L932.762 682.351 L932.203 682.351 L931.644 682.351 L931.084 682.351 L930.525 682.351 L929.966 682.351 L929.406 682.351 L928.847 682.351 L928.288 682.351 L927.729 682.351 L927.169 682.351 L926.61 682.351 L926.051 682.351 L925.492 682.351 L924.932 682.351 L924.373 682.351 L923.814 682.351 L923.255 682.351 L922.695 682.351 L922.136 682.351 L921.577 682.351 L921.018 682.351 L920.458 682.351 L919.899 682.351 L919.34 682.351 L918.781 682.351 L918.221 682.351 L917.662 682.351 L917.103 682.351 L916.544 682.351 L915.984 682.351 L915.425 682.351 L914.866 682.351 L914.307 682.351 L913.747 682.351 L913.188 682.351 L912.629 682.351 L912.07 682.351 L911.51 682.351 L910.951 682.351 L910.392 682.351 L909.833 682.351 L909.273 682.351 L908.714 682.351 L908.155 682.351 L907.596 682.351 L907.036 682.351 L906.477 682.351 L905.918 682.351 L905.359 682.351 L904.799 682.351 L904.24 682.351 L903.681 682.351 L903.122 682.351 L902.562 682.351 L902.003 682.351 L901.444 682.351 L900.885 682.351 L900.325 682.351 L899.766 682.351 L899.207 682.351 L898.648 682.351 L898.088 682.351 L897.529 682.351 L896.97 682.351 L896.411 682.351 L895.851 682.351 L895.292 682.351 L894.733 682.351 L894.174 682.351 L893.614 682.351 L893.055 682.351 L892.496 682.351 L891.937 682.351 L891.377 682.351 L890.818 682.351 L890.259 682.351 L889.7 682.351 L889.14 682.351 L888.581 682.351 L888.022 682.351 L887.463 682.351 L886.903 682.351 L886.344 682.351 L885.785 682.351 L885.226 682.351 L884.666 682.351 L884.107 682.351 L883.548 682.351 L882.989 682.351 L882.429 682.351 L881.87 682.351 L881.311 682.351 L880.752 682.351 L880.192 682.351 L879.633 682.351 L879.074 682.351 L878.515 682.351 L877.955 682.351 L877.396 682.351 L876.837 682.351 L876.278 682.351 L875.718 682.351 L875.159 682.351 L874.6 682.351 L874.041 682.351 L873.481 682.351 L872.922 682.351 L872.363 682.351 L871.804 682.351 L871.244 682.351 L870.685 682.351 L870.126 682.351 L869.567 682.351 L869.007 682.351 L868.448 682.351 L867.889 682.351 L867.33 682.351 L866.77 682.351 L866.211 682.351 L865.652 682.351 L865.093 682.351 L864.533 682.351 L863.974 682.351 L863.415 682.351 L862.856 682.351 L862.296 682.351 L861.737 682.351 L861.178 682.351 L860.619 682.351 L860.059 682.351 L859.5 682.351 L858.941 682.351 L858.382 682.351 L857.822 682.351 L857.263 682.351 L856.704 682.351 L856.145 682.351 L855.585 682.351 L855.026 682.351 L854.467 682.351 L853.908 682.351 L853.348 682.351 L852.789 682.351 L852.23 682.351 L851.671 682.351 L851.111 682.351 L850.552 682.351 L849.993 682.351 L849.434 682.351 L848.874 682.351 L848.315 682.351 L847.756 682.351 L847.197 682.351 L846.637 682.351 L846.078 682.351 L845.519 682.351 L844.96 682.351 L844.4 682.351 L843.841 682.351 L843.282 682.351 L842.723 682.351 L842.163 682.351 L841.604 682.351 L841.045 682.351 L840.486 682.351 L839.926 682.351 L839.367 682.351 L838.808 682.351 L838.249 682.351 L837.689 682.351 L837.13 682.351 L836.571 682.351 L836.012 682.351 L835.452 682.351 L834.893 682.351 L834.334 682.351 L833.775 682.351 L833.215 682.351 L832.656 682.351 L832.097 682.351 L831.538 682.351 L830.978 682.351 L830.419 682.351 L829.86 682.351 L829.301 682.351 L828.741 682.351 L828.182 682.351 L827.623 682.351 L827.064 682.351 L826.504 682.351 L825.945 682.351 L825.386 682.351 L824.827 682.351 L824.267 682.351 L823.708 682.351 L823.149 682.351 L822.59 682.351 L822.03 682.351 L821.471 682.351 L820.912 682.351 L820.353 682.351 L819.793 682.351 L819.234 682.351 L818.675 682.351 L818.116 682.351 L817.556 682.351 L816.997 682.351 L816.438 682.351 L815.879 682.351 L815.319 682.351 L814.76 682.351 L814.201 682.351 L813.642 682.351 L813.082 682.351 L812.523 682.351 L811.964 682.351 L811.405 682.351 L810.845 682.351 L810.286 682.351 L809.727 682.351 L809.168 682.351 L808.608 682.351 L808.049 682.351 L807.49 682.351 L806.931 682.351 L806.371 682.351 L805.812 682.351 L805.253 682.351 L804.693 682.351 L804.134 682.351 L803.575 682.351 L803.016 682.351 L802.456 682.351 L801.897 682.351 L801.338 682.351 L800.779 682.351 L800.219 682.351 L799.66 682.351 L799.101 682.351 L798.542 682.351 L797.982 682.351 L797.423 682.351 L796.864 682.351 L796.305 682.351 L795.745 682.351 L795.186 682.351 L794.627 682.351 L794.068 682.351 L793.508 682.351 L792.949 682.351 L792.39 682.351 L791.831 682.351 L791.271 682.351 L790.712 682.351 L790.153 682.351 L789.594 682.351 L789.034 682.351 L788.475 682.351 L787.916 682.351 L787.357 682.351 L786.797 682.351 L786.238 682.351 L785.679 682.351 L785.12 682.351 L784.56 682.351 L784.001 682.351 L783.442 682.351 L782.883 682.351 L782.323 682.351 L781.764 682.351 L781.205 682.351 L780.646 682.351 L780.086 682.351 L779.527 682.351 L778.968 682.351 L778.409 682.351 L777.849 682.351 L777.29 682.351 L776.731 682.351 L776.172 682.351 L775.612 682.351 L775.053 682.351 L774.494 682.351 L773.935 682.351 L773.375 682.351 L772.816 682.351 L772.257 682.351 L771.698 682.351 L771.138 682.351 L770.579 682.351 L770.02 682.351 L769.461 682.351 L768.901 682.351 L768.342 682.351 L767.783 682.351 L767.224 682.351 L766.664 682.351 L766.105 682.351 L765.546 682.351 L764.987 682.351 L764.427 682.351 L763.868 682.351 L763.309 682.351 L762.75 682.351 L762.19 682.351 L761.631 682.351 L761.072 682.351 L760.513 682.351 L759.953 682.351 L759.394 682.351 L758.835 682.351 L758.276 682.351 L757.716 682.351 L757.157 682.351 L756.598 682.351 L756.039 682.351 L755.479 682.351 L754.92 682.351 L754.361 682.351 L753.802 682.351 L753.242 682.351 L752.683 682.351 L752.124 682.351 L751.565 682.351 L751.005 682.351 L750.446 682.351 L749.887 682.351 L749.328 682.351 L748.768 682.351 L748.209 682.351 L747.65 682.351 L747.091 682.351 L746.531 682.351 L745.972 682.351 L745.413 682.351 L744.854 682.351 L744.294 682.351 L743.735 682.351 L743.176 682.351 L742.617 682.351 L742.057 682.351 L741.498 682.351 L740.939 682.351 L740.38 682.351 L739.82 682.351 L739.261 682.351 L738.702 682.351 L738.143 682.351 L737.583 682.351 L737.024 682.351 L736.465 682.351 L735.906 682.351 L735.346 682.351 L734.787 682.351 L734.228 682.351 L733.669 682.351 L733.109 682.351 L732.55 682.351 L731.991 682.351 L731.432 682.351 L730.872 682.351 L730.313 682.351 L729.754 682.351 L729.195 682.351 L728.635 682.351 L728.076 682.351 L727.517 682.351 L726.958 682.351 L726.398 682.351 L725.839 682.351 L725.28 682.351 L724.721 682.351 L724.161 682.351 L723.602 682.351 L723.043 682.351 L722.484 682.351 L721.924 682.351 L721.365 682.351 L720.806 682.351 L720.247 682.351  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip063)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.297 720.806,683.297 721.365,683.297 721.924,683.297 722.484,683.297 723.043,683.297 723.602,683.297 724.161,683.297 724.721,683.297 725.28,683.297 725.839,683.297 726.398,683.297 726.958,683.297 727.517,683.297 728.076,683.297 728.635,683.297 729.195,683.297 729.754,683.297 730.313,683.297 730.872,683.297 731.432,683.297 731.991,683.297 732.55,683.297 733.109,683.297 733.669,683.297 734.228,683.297 734.787,683.297 735.346,683.297 735.906,683.297 736.465,683.297 737.024,683.297 737.583,683.297 738.143,683.297 738.702,683.297 739.261,683.297 739.82,683.297 740.38,683.297 740.939,683.297 741.498,683.297 742.057,683.297 742.617,683.297 743.176,683.297 743.735,683.297 744.294,683.297 744.854,683.297 745.413,683.297 745.972,683.297 746.531,683.297 747.091,683.297 747.65,683.297 748.209,683.297 748.768,683.297 749.328,683.297 749.887,683.297 750.446,683.297 751.005,683.297 751.565,683.297 752.124,683.297 752.683,683.297 753.242,683.297 753.802,683.297 754.361,683.297 754.92,683.297 755.479,683.297 756.039,683.297 756.598,683.297 757.157,683.297 757.716,683.297 758.276,683.297 758.835,683.297 759.394,683.297 759.953,683.297 760.513,683.297 761.072,683.297 761.631,683.297 762.19,683.297 762.75,683.297 763.309,683.297 763.868,683.297 764.427,683.297 764.987,683.297 765.546,683.297 766.105,683.297 766.664,683.297 767.224,683.297 767.783,683.297 768.342,683.297 768.901,683.297 769.461,683.297 770.02,683.297 770.579,683.297 771.138,683.297 771.698,683.297 772.257,683.297 772.816,683.297 773.375,683.297 773.935,683.297 774.494,683.297 775.053,683.297 775.612,683.297 776.172,683.297 776.731,683.297 777.29,683.297 777.849,683.297 778.409,683.297 778.968,683.297 779.527,683.297 780.086,683.297 780.646,683.297 781.205,683.297 781.764,683.297 782.323,683.297 782.883,683.297 783.442,683.297 784.001,683.297 784.56,683.297 785.12,683.297 785.679,683.297 786.238,683.297 786.797,683.297 787.357,683.297 787.916,683.297 788.475,683.297 789.034,683.297 789.594,683.297 790.153,683.297 790.712,683.297 791.271,683.297 791.831,683.297 792.39,683.297 792.949,683.297 793.508,683.297 794.068,683.297 794.627,683.297 795.186,683.297 795.745,683.297 796.305,683.297 796.864,683.297 797.423,683.297 797.982,683.297 798.542,683.297 799.101,683.297 799.66,683.297 800.219,683.297 800.779,683.297 801.338,683.297 801.897,683.297 802.456,683.297 803.016,683.297 803.575,683.297 804.134,683.297 804.693,683.297 805.253,683.297 805.812,683.297 806.371,683.297 806.931,683.297 807.49,683.297 808.049,683.297 808.608,683.297 809.168,683.297 809.727,683.297 810.286,683.297 810.845,683.297 811.405,683.297 811.964,683.297 812.523,683.297 813.082,683.297 813.642,683.297 814.201,683.297 814.76,683.297 815.319,683.297 815.879,683.297 816.438,683.297 816.997,683.297 817.556,683.297 818.116,683.297 818.675,683.297 819.234,683.297 819.793,683.297 820.353,683.297 820.912,683.297 821.471,683.297 822.03,683.297 822.59,683.297 823.149,683.297 823.708,683.297 824.267,683.297 824.827,683.297 825.386,683.297 825.945,683.297 826.504,683.297 827.064,683.297 827.623,683.297 828.182,683.297 828.741,683.297 829.301,683.297 829.86,683.297 830.419,683.297 830.978,683.297 831.538,683.297 832.097,683.297 832.656,683.297 833.215,683.297 833.775,683.297 834.334,683.297 834.893,683.297 835.452,683.297 836.012,683.297 836.571,683.297 837.13,683.297 837.689,683.297 838.249,683.297 838.808,683.297 839.367,683.297 839.926,683.297 840.486,683.297 841.045,683.297 841.604,683.297 842.163,683.297 842.723,683.297 843.282,683.297 843.841,683.297 844.4,683.297 844.96,683.297 845.519,683.297 846.078,683.297 846.637,683.297 847.197,683.297 847.756,683.297 848.315,683.297 848.874,683.297 849.434,683.297 849.993,683.297 850.552,683.297 851.111,683.297 851.671,683.297 852.23,683.297 852.789,683.297 853.348,683.297 853.908,683.297 854.467,683.297 855.026,683.297 855.585,683.297 856.145,683.297 856.704,683.297 857.263,683.297 857.822,683.297 858.382,683.297 858.941,683.297 859.5,683.297 860.059,683.297 860.619,683.297 861.178,683.297 861.737,683.297 862.296,683.297 862.856,683.297 863.415,683.297 863.974,683.297 864.533,683.297 865.093,683.297 865.652,683.297 866.211,683.297 866.77,683.297 867.33,683.297 867.889,683.297 868.448,683.297 869.007,683.297 869.567,683.297 870.126,683.297 870.685,683.297 871.244,683.297 871.804,683.297 872.363,683.297 872.922,683.297 873.481,683.297 874.041,683.297 874.6,683.297 875.159,683.297 875.718,683.297 876.278,683.297 876.837,683.297 877.396,683.297 877.955,683.297 878.515,683.297 879.074,683.297 879.633,683.297 880.192,683.297 880.752,683.297 881.311,683.297 881.87,683.297 882.429,683.297 882.989,683.297 883.548,683.297 884.107,683.297 884.666,683.297 885.226,683.297 885.785,683.297 886.344,683.297 886.903,683.297 887.463,683.297 888.022,683.297 888.581,683.297 889.14,683.297 889.7,683.297 890.259,683.297 890.818,683.297 891.377,683.297 891.937,683.297 892.496,683.297 893.055,683.297 893.614,683.297 894.174,683.297 894.733,683.297 895.292,683.297 895.851,683.297 896.411,683.297 896.97,683.297 897.529,683.297 898.088,683.297 898.648,683.297 899.207,683.297 899.766,683.297 900.325,683.297 900.885,683.297 901.444,683.297 902.003,683.297 902.562,683.297 903.122,683.297 903.681,683.297 904.24,683.297 904.799,683.297 905.359,683.297 905.918,683.297 906.477,683.297 907.036,683.297 907.596,683.297 908.155,683.297 908.714,683.297 909.273,683.297 909.833,683.297 910.392,683.297 910.951,683.297 911.51,683.297 912.07,683.297 912.629,683.297 913.188,683.297 913.747,683.297 914.307,683.297 914.866,683.297 915.425,683.297 915.984,683.297 916.544,683.297 917.103,683.297 917.662,683.297 918.221,683.297 918.781,683.297 919.34,683.297 919.899,683.297 920.458,683.297 921.018,683.297 921.577,683.297 922.136,683.297 922.695,683.297 923.255,683.297 923.814,683.297 924.373,683.297 924.932,683.297 925.492,683.297 926.051,683.297 926.61,683.297 927.169,683.297 927.729,683.297 928.288,683.297 928.847,683.297 929.406,683.297 929.966,683.297 930.525,683.297 931.084,683.297 931.644,683.297 932.203,683.297 932.762,683.297 933.321,683.297 933.881,683.297 934.44,683.297 934.999,683.297 935.558,683.297 936.118,683.297 936.677,683.297 937.236,683.297 937.795,683.297 938.355,683.297 938.914,683.297 939.473,683.297 940.032,683.297 940.592,683.297 941.151,683.297 941.71,683.297 942.269,683.297 942.829,683.297 943.388,683.297 943.947,683.297 944.506,683.297 945.066,683.297 945.625,683.297 946.184,683.297 946.743,683.297 947.303,683.297 947.862,683.297 948.421,683.297 948.98,683.297 949.54,683.297 950.099,683.297 950.658,683.297 951.217,683.297 951.777,683.297 952.336,683.297 952.895,683.297 953.454,683.297 954.014,683.297 954.573,683.297 955.132,683.297 955.691,683.297 956.251,683.297 956.81,683.297 957.369,683.297 957.928,683.297 958.488,683.297 959.047,683.297 959.606,683.297 960.165,683.297 960.725,683.297 961.284,683.297 961.843,683.297 962.402,683.297 962.962,683.297 963.521,683.297 964.08,683.297 964.639,683.297 965.199,683.297 965.758,683.297 966.317,683.297 966.876,683.297 967.436,683.297 967.995,683.297 968.554,683.297 969.113,683.297 969.673,683.297 970.232,683.297 970.791,683.297 971.35,683.297 971.91,683.297 972.469,683.297 973.028,683.297 973.587,683.297 974.147,683.297 974.706,683.297 975.265,683.297 975.824,683.297 976.384,683.297 976.943,683.297 977.502,683.297 978.061,683.297 978.621,683.297 979.18,683.297 979.739,683.297 980.298,683.297 980.858,683.297 981.417,683.297 981.976,683.297 982.535,683.297 983.095,683.297 983.654,683.297 984.213,683.297 984.772,683.297 985.332,683.297 985.891,683.297 986.45,683.297 987.009,683.297 987.569,683.297 988.128,683.297 988.687,683.297 989.246,683.297 989.806,683.297 990.365,683.297 990.924,683.297 991.483,683.297 992.043,683.297 992.602,683.297 993.161,683.297 993.72,683.297 994.28,683.297 994.839,683.297 995.398,683.297 995.957,683.297 996.517,683.297 997.076,683.297 997.635,683.297 998.194,683.297 998.754,683.297 999.313,683.297 999.872,683.297 1000.43,683.297 1000.99,683.297 1001.55,683.297 1002.11,683.297 1002.67,683.297 1003.23,683.297 1003.79,683.297 1004.35,683.297 1004.91,683.297 1005.46,683.297 1006.02,683.297 1006.58,683.297 1007.14,683.297 1007.7,683.297 1008.26,683.297 1008.82,683.297 1009.38,683.297 1009.94,683.297 1010.5,683.297 1011.06,683.297 1011.62,683.297 1012.18,683.297 1012.73,683.297 1013.29,683.297 1013.85,683.297 1014.41,683.297 1014.97,683.297 1015.53,683.297 1016.09,683.297 1016.65,683.297 1017.21,683.297 1017.77,683.297 1018.33,683.297 1018.89,683.297 1019.45,683.297 1020.01,683.297 1020.56,683.297 1021.12,683.297 1021.68,683.297 1022.24,683.297 1022.8,683.297 1023.36,683.297 1023.92,683.297 1024.48,683.297 1025.04,683.297 1025.6,683.297 1026.16,683.297 1026.72,683.297 1027.28,683.297 1027.83,683.297 1028.39,683.297 1028.95,683.297 1029.51,683.297 1030.07,683.297 1030.63,683.297 1031.19,683.297 1031.75,683.297 1032.31,683.297 1032.87,683.297 1033.43,683.297 1033.99,683.297 1034.55,683.297 1035.1,683.297 1035.66,683.297 1036.22,683.297 1036.78,683.297 1037.34,683.297 1037.9,683.297 1038.46,683.297 1039.02,683.297 1039.58,683.297 1040.14,683.297 1040.7,683.297 1041.26,683.297 1041.82,683.297 1042.38,683.297 1042.93,683.297 1043.49,683.297 1044.05,683.297 1044.61,683.297 1045.17,683.297 1045.73,683.297 1046.29,683.297 1046.85,683.297 1047.41,683.297 1047.97,683.297 1048.53,683.297 1049.09,683.297 1049.65,683.297 1050.2,683.297 1050.76,683.297 1051.32,683.297 1051.88,683.297 1052.44,683.297 1053,683.297 1053.56,683.297 1054.12,683.297 1054.68,683.297 1055.24,683.297 1055.8,683.297 1056.36,683.297 1056.92,683.297 1057.48,683.297 1058.03,683.297 1058.59,683.297 1059.15,683.297 1059.71,683.297 1060.27,683.297 1060.83,683.297 1061.39,683.297 1061.95,683.297 1062.51,683.297 1063.07,683.297 1063.63,683.297 1064.19,683.297 1064.75,683.297 1065.3,683.297 1065.86,683.297 1066.42,683.297 1066.98,683.297 1067.54,683.297 1068.1,683.297 1068.66,683.297 1069.22,683.297 1069.78,683.297 1070.34,683.297 1070.9,683.297 1071.46,683.297 1072.02,683.297 1072.57,683.297 1073.13,683.297 1073.69,683.297 1074.25,683.297 1074.81,683.297 1075.37,683.297 1075.93,683.297 1076.49,683.297 1077.05,683.297 1077.61,683.297 1078.17,683.297 1078.73,683.297 1079.29,683.297 1079.85,683.297 1080.4,683.297 1080.96,683.297 1081.52,683.297 1082.08,683.297 1082.64,683.297 1083.2,683.297 1083.76,683.297 1084.32,683.297 1084.88,683.297 1085.44,683.297 1086,683.297 1086.56,683.297 1087.12,683.297 1087.67,683.297 1088.23,683.297 1088.79,683.297 1089.35,683.297 1089.91,683.297 1090.47,683.297 1091.03,683.297 1091.59,683.297 1092.15,683.297 1092.71,683.297 1093.27,683.297 1093.83,683.297 1094.39,683.297 1094.94,683.297 1095.5,683.297 1096.06,683.297 1096.62,683.297 1097.18,683.297 1097.74,683.297 1098.3,683.297 1098.86,683.297 1099.42,683.297 1099.98,683.297 1100.54,683.297 1101.1,683.297 1101.66,683.297 1102.22,683.297 1102.77,683.297 1103.33,683.297 1103.89,683.297 1104.45,683.297 1105.01,683.297 1105.57,683.297 1106.13,683.297 1106.69,683.297 1107.25,683.297 1107.81,683.297 1108.37,683.297 1108.93,683.297 1109.49,683.297 1110.04,683.297 1110.6,683.297 1111.16,683.297 1111.72,683.297 1112.28,683.297 1112.84,683.297 1113.4,683.297 1113.96,683.297 1114.52,683.297 1115.08,683.297 1115.64,683.297 1116.2,683.297 1116.76,683.297 1117.31,683.297 1117.87,683.297 1118.43,683.297 1118.99,683.297 1119.55,683.297 1120.11,683.297 1120.67,683.297 1121.23,683.297 1121.79,683.297 1122.35,683.297 1122.91,683.297 1123.47,683.297 1124.03,683.297 1124.59,683.297 1125.14,683.297 1125.7,683.297 1126.26,683.297 1126.82,683.297 1127.38,683.297 1127.94,683.297 1128.5,683.297 1129.06,683.297 1129.62,683.297 1130.18,683.297 1130.74,683.297 1131.3,683.297 1131.86,683.297 1132.41,683.297 1132.97,683.297 1133.53,683.297 1134.09,683.297 1134.65,683.297 1135.21,683.297 1135.77,683.297 1136.33,683.297 1136.89,683.297 1137.45,683.297 1138.01,683.297 1138.57,683.297 1139.13,683.297 1139.68,683.297 1140.24,683.297 1140.8,683.297 1141.36,683.297 1141.92,683.297 1142.48,683.297 1143.04,683.297 1143.6,683.297 1144.16,683.297 1144.72,683.297 1145.28,683.297 1145.84,683.297 1146.4,683.297 1146.96,683.297 1147.51,683.297 1148.07,683.297 1148.63,683.297 1149.19,683.297 1149.75,683.297 1150.31,683.297 1150.87,683.297 1151.43,683.297 1151.99,683.297 1152.55,683.297 1153.11,683.297 1153.67,683.297 1154.23,683.297 1154.78,683.297 1155.34,683.297 1155.9,683.297 1156.46,683.297 1157.02,683.297 1157.58,683.297 1158.14,683.297 1158.7,683.297 1159.26,683.297 1159.82,683.297 1160.38,683.297 1160.94,683.297 1161.5,683.297 1162.05,683.297 1162.61,683.297 1163.17,683.297 1163.73,683.297 1164.29,683.297 1164.85,683.297 1165.41,683.297 1165.97,683.297 1166.53,683.297 1167.09,683.297 1167.65,683.297 1168.21,683.297 1168.77,683.297 1169.33,683.297 1169.88,683.297 1170.44,683.297 1171,683.297 1171.56,683.297 1172.12,683.297 1172.68,683.297 1173.24,683.297 1173.8,683.297 1174.36,683.297 1174.92,683.297 1175.48,683.297 1176.04,683.297 1176.6,683.297 1177.15,683.297 1177.71,683.297 1178.27,683.297 1178.83,683.297 1179.39,683.297 1179.95,683.297 1180.51,683.297 1181.07,683.297 1181.63,683.297 1182.19,683.297 1182.75,683.297 1183.31,683.297 1183.87,683.297 1184.43,683.297 1184.98,683.297 1185.54,683.297 1186.1,683.297 1186.66,683.297 1187.22,683.297 1187.78,683.297 1188.34,683.297 1188.9,683.297 1189.46,683.297 1190.02,683.297 1190.58,683.297 1191.14,683.297 1191.7,683.297 1192.25,683.297 1192.81,683.297 1193.37,683.297 1193.93,683.297 1194.49,683.297 1195.05,683.297 1195.61,683.297 1196.17,683.297 1196.73,683.297 1197.29,683.297 1197.85,683.297 1198.41,683.297 1198.97,683.297 1199.52,683.297 1200.08,683.297 1200.64,683.297 1201.2,683.297 1201.76,683.297 1202.32,683.297 1202.88,683.297 1203.44,683.297 1204,683.297 1204.56,683.297 1205.12,683.297 1205.68,683.297 1206.24,683.297 1206.8,683.297 1207.35,683.297 1207.91,683.297 1208.47,683.297 1209.03,683.297 1209.59,683.297 1210.15,683.297 1210.71,683.297 1211.27,683.297 1211.83,683.297 1212.39,683.297 1212.95,683.297 1213.51,683.297 1214.07,683.297 1214.62,683.297 1215.18,683.297 1215.74,683.297 1216.3,683.297 1216.86,683.297 1217.42,683.297 1217.98,683.297 1218.54,683.297 1219.1,683.297 1219.66,683.297 1220.22,683.297 1220.78,683.297 1221.34,683.297 1221.89,683.297 1222.45,683.297 1223.01,683.297 1223.57,683.297 1224.13,683.297 1224.69,683.297 1225.25,683.297 1225.81,683.297 1226.37,683.297 1226.93,683.297 1227.49,683.297 1228.05,683.297 1228.61,683.297 1229.17,683.297 1229.72,683.297 1230.28,683.297 1230.84,683.297 1231.4,683.297 1231.96,683.297 1232.52,683.297 1233.08,683.297 1233.64,683.297 1234.2,683.297 1234.76,683.297 1235.32,683.297 1235.88,683.297 1236.44,683.297 1236.99,683.297 1237.55,683.297 1238.11,683.297 1238.67,683.297 1239.23,683.297 1239.79,683.297 1240.35,683.297 1240.91,683.297 1241.47,683.297 1242.03,683.297 1242.59,683.297 1243.15,683.297 1243.71,683.297 1244.26,683.297 1244.82,683.297 1245.38,683.297 1245.94,683.297 1246.5,683.297 1247.06,683.297 1247.62,683.297 1248.18,683.297 1248.74,683.297 1249.3,683.297 1249.86,683.297 1250.42,683.297 1250.98,683.297 1251.54,683.297 1252.09,683.297 1252.65,683.297 1253.21,683.297 1253.77,683.297 1254.33,683.297 1254.89,683.297 1255.45,683.297 1256.01,683.297 1256.57,683.297 1257.13,683.297 1257.69,683.297 1258.25,683.297 1258.81,683.297 1259.36,683.297 1259.92,683.297 1260.48,683.297 1261.04,683.297 1261.6,683.297 1262.16,683.297 1262.72,683.297 1263.28,683.297 1263.84,683.297 1264.4,683.297 1264.96,683.297 1265.52,683.297 1266.08,683.297 1266.63,683.297 1267.19,683.297 1267.75,683.297 1268.31,683.297 1268.87,683.297 1269.43,683.297 1269.99,683.297 1270.55,683.297 1271.11,683.297 1271.67,683.297 1272.23,683.297 1272.79,683.297 1273.35,683.297 1273.91,683.297 1274.46,683.297 1275.02,683.297 1275.58,683.297 1276.14,683.297 1276.7,683.297 1277.26,683.297 1277.82,683.297 1278.38,683.297 1278.94,683.297 1279.5,683.297 1280.06,683.297 1280.62,683.297 1281.18,683.297 1281.73,683.297 1282.29,683.297 1282.85,683.297 1283.41,683.297 1283.97,683.297 1284.53,683.297 1285.09,683.297 1285.65,683.297 1286.21,683.297 1286.77,683.297 1287.33,683.297 1287.89,683.297 1288.45,683.297 1289,683.297 1289.56,683.297 1290.12,683.297 1290.68,683.297 1291.24,683.297 1291.8,683.297 1292.36,683.297 1292.92,683.297 1293.48,683.297 1294.04,683.297 1294.6,683.297 1295.16,683.297 1295.72,683.297 1296.28,683.297 1296.83,683.297 1297.39,683.297 1297.95,683.297 1298.51,683.297 1299.07,683.297 1299.63,683.297 1300.19,683.297 1300.75,683.297 1301.31,683.297 1301.87,683.297 1302.43,683.297 1302.99,683.297 1303.55,683.297 1304.1,683.297 1304.66,683.297 1305.22,683.297 1305.78,683.297 1306.34,683.297 1306.9,683.297 1307.46,683.297 1308.02,683.297 1308.58,683.297 1309.14,683.297 1309.7,683.297 1310.26,683.297 1310.82,683.297 1311.38,683.297 1311.93,683.297 1312.49,683.297 1313.05,683.297 1313.61,683.297 1314.17,683.297 1314.73,683.297 1315.29,683.297 1315.85,683.297 1316.41,683.297 1316.97,683.297 1317.53,683.297 1318.09,683.297 1318.65,683.297 1319.2,683.297 1319.76,683.297 1320.32,683.297 1320.88,683.297 1321.44,683.297 1322,683.297 1322.56,683.297 1323.12,683.297 1323.68,683.297 1324.24,683.297 1324.8,683.297 1325.36,683.297 1325.92,683.297 1326.47,683.297 1327.03,683.297 1327.59,683.297 1328.15,683.297 1328.71,683.297 1329.27,683.297 1329.83,683.297 1330.39,683.297 1330.95,683.297 1331.51,683.297 1332.07,683.297 1332.63,683.297 1333.19,683.297 1333.75,683.297 1334.3,683.297 1334.86,683.297 1335.42,683.297 1335.98,683.297 1336.54,683.297 1337.1,683.297 1337.66,683.297 1338.22,683.297 1338.78,683.297 1339.34,683.297 1339.9,683.297 1340.46,683.297 1341.02,683.297 1341.57,683.297 1342.13,683.297 1342.69,683.297 1343.25,683.297 1343.81,683.297 1344.37,683.297 1344.93,683.297 1345.49,683.297 1346.05,683.297 1346.61,683.297 1347.17,683.297 1347.73,683.297 1348.29,683.297 1348.84,683.297 1349.4,683.297 1349.96,683.297 1350.52,683.297 1351.08,683.297 1351.64,683.297 1352.2,683.297 1352.76,683.297 1353.32,683.297 1353.88,683.297 1354.44,683.297 1355,683.297 1355.56,683.297 1356.12,683.297 1356.67,683.297 1357.23,683.297 1357.79,683.297 1358.35,683.297 1358.91,683.297 1359.47,683.297 1360.03,683.297 1360.59,683.297 1361.15,683.297 1361.71,683.297 1362.27,683.297 1362.83,683.297 1363.39,683.297 1363.94,683.297 1364.5,683.297 1365.06,683.297 1365.62,683.297 1366.18,683.297 1366.74,683.297 1367.3,683.297 1367.86,683.297 1368.42,683.297 1368.98,683.297 1369.54,683.297 1370.1,683.297 1370.66,683.297 1371.21,683.297 1371.77,683.297 1372.33,683.297 1372.89,683.297 1373.45,683.297 1374.01,683.297 1374.57,683.297 1375.13,683.297 1375.69,683.297 1376.25,683.297 1376.81,683.297 1377.37,683.297 1377.93,683.297 1378.49,683.297 1379.04,683.297 1379.6,683.297 1380.16,683.297 1380.72,683.297 1381.28,683.297 1381.84,683.297 1382.4,683.297 1382.96,683.297 1383.52,683.297 1384.08,683.297 1384.64,683.297 1385.2,683.297 1385.76,683.297 1386.31,683.297 1386.87,683.297 1387.43,683.297 1387.99,683.297 1388.55,683.297 1389.11,683.297 1389.67,683.297 1390.23,683.297 1390.79,683.297 1391.35,683.297 1391.91,683.297 1392.47,683.297 1393.03,683.297 1393.58,683.297 1394.14,683.297 1394.7,683.297 1395.26,683.297 1395.82,683.297 1396.38,683.297 1396.94,683.297 1397.5,683.297 1398.06,683.297 1398.62,683.297 1399.18,683.297 1399.74,683.297 1400.3,683.297 1400.86,683.297 1401.41,683.297 1401.97,683.297 1402.53,683.297 1403.09,683.297 1403.65,683.297 1404.21,683.297 1404.77,683.297 1405.33,683.297 1405.89,683.297 1406.45,683.297 1407.01,683.297 1407.57,683.297 1408.13,683.297 1408.68,683.297 1409.24,683.297 1409.8,683.297 1410.36,683.297 1410.92,683.297 1411.48,683.297 1412.04,683.297 1412.6,683.297 1413.16,683.297 1413.72,683.297 1414.28,683.297 1414.84,683.297 1415.4,683.297 1415.95,683.297 1416.51,683.297 1417.07,683.297 1417.63,683.297 1418.19,683.297 1418.75,683.297 1419.31,683.297 1419.87,683.297 1420.43,683.297 1420.99,683.297 1421.55,683.297 1422.11,683.297 1422.67,683.297 1423.23,683.297 1423.78,683.297 1424.34,683.297 1424.9,683.297 1425.46,683.297 1426.02,683.297 1426.58,683.297 1427.14,683.297 1427.7,683.297 1428.26,683.297 1428.82,683.297 1429.38,683.297 1429.94,683.297 1430.5,683.297 1431.05,683.297 1431.61,683.297 1432.17,683.297 1432.73,683.297 1433.29,683.297 1433.85,683.297 1434.41,683.297 1434.97,683.297 1435.53,683.297 1436.09,683.297 1436.65,683.297 1437.21,683.297 1437.77,683.297 1438.33,683.297 1438.88,683.297 1439.44,683.297 1440,683.297 1440.56,683.297 1441.12,683.297 1441.68,683.297 1442.24,683.297 1442.8,683.297 1443.36,683.297 1443.92,683.297 1444.48,683.297 1445.04,683.297 1445.6,683.297 1446.15,683.297 1446.71,683.297 1447.27,683.297 1447.83,683.297 1448.39,683.297 1448.95,683.297 1449.51,683.297 1450.07,683.297 1450.63,683.297 1451.19,683.297 1451.75,683.297 1452.31,683.297 1452.87,683.297 1453.42,683.297 1453.98,683.297 1454.54,683.297 1455.1,683.297 1455.66,683.297 1456.22,683.297 1456.78,683.297 1457.34,683.297 1457.9,683.297 1458.46,683.297 1459.02,683.297 1459.58,683.297 1460.14,683.297 1460.7,683.297 1461.25,683.297 1461.81,683.297 1462.37,683.297 1462.93,683.297 1463.49,683.297 1464.05,683.297 1464.61,683.297 1465.17,683.297 1465.73,683.297 1466.29,683.297 1466.85,683.297 1467.41,683.297 1467.97,683.297 1468.52,683.297 1469.08,683.297 1469.64,683.297 1470.2,683.297 1470.76,683.297 1471.32,683.297 1471.88,683.297 1472.44,683.297 1473,683.297 1473.56,683.297 1474.12,683.297 1474.68,683.297 1475.24,683.297 1475.79,683.297 1476.35,683.297 1476.91,683.297 1477.47,683.297 1478.03,683.297 1478.59,683.297 1479.15,683.297 1479.71,683.297 1480.27,683.297 1480.83,683.297 1481.39,683.297 1481.95,683.297 1482.51,683.297 1483.07,683.297 1483.62,683.297 1484.18,683.297 1484.74,683.297 1485.3,683.297 1485.86,683.297 1486.42,683.297 1486.98,683.297 1487.54,683.297 1488.1,683.297 1488.66,683.297 1489.22,683.297 1489.78,683.297 1490.34,683.297 1490.89,683.297 1491.45,683.297 1492.01,683.297 1492.57,683.297 1493.13,683.297 1493.69,683.297 1494.25,683.297 1494.81,683.297 1495.37,683.297 1495.93,683.297 1496.49,683.297 1497.05,683.297 1497.61,683.297 1498.16,683.297 1498.72,683.297 1499.28,683.297 1499.84,683.297 1500.4,683.297 1500.96,683.297 1501.52,683.297 1502.08,683.297 1502.64,683.297 1503.2,683.297 1503.76,683.297 1504.32,683.297 1504.88,683.297 1505.44,683.297 1505.99,683.297 1506.55,683.297 1507.11,683.297 1507.67,683.297 1508.23,683.297 1508.79,683.297 1509.35,683.297 1509.91,683.297 1510.47,683.297 1511.03,683.297 1511.59,683.297 1512.15,683.297 1512.71,683.297 1513.26,683.297 1513.82,683.297 1514.38,683.297 1514.94,683.297 1515.5,683.297 1516.06,683.297 1516.62,683.297 1517.18,683.297 1517.74,683.297 1518.3,683.297 1518.86,683.297 1519.42,683.297 1519.98,683.297 1520.53,683.297 1521.09,683.297 1521.65,683.297 1522.21,683.297 1522.77,683.297 1523.33,683.297 1523.89,683.297 1524.45,683.297 1525.01,683.297 1525.57,683.297 1526.13,683.297 1526.69,683.297 1527.25,683.297 1527.81,683.297 1528.36,683.297 1528.92,683.297 1529.48,683.297 1530.04,683.297 1530.6,683.297 1531.16,683.297 1531.72,683.297 1532.28,683.297 1532.84,683.297 1533.4,683.297 1533.96,683.297 1534.52,683.297 1535.08,683.297 1535.63,683.297 1536.19,683.297 1536.75,683.297 1537.31,683.297 1537.87,683.297 1538.43,683.297 1538.99,683.297 1539.55,683.297 1540.11,683.297 1540.67,683.297 1541.23,683.297 1541.79,683.297 1542.35,683.297 1542.9,683.297 1543.46,683.297 1544.02,683.297 1544.58,683.297 1545.14,683.297 1545.7,683.297 1546.26,683.297 1546.82,683.297 1547.38,683.297 1547.94,683.297 1548.5,683.297 1549.06,683.297 1549.62,683.297 1550.18,683.297 1550.73,683.297 1551.29,683.297 1551.85,683.297 1552.41,683.297 1552.97,683.297 1553.53,683.297 1554.09,683.297 1554.65,683.297 1555.21,683.297 1555.77,683.297 1556.33,683.297 1556.89,683.297 1557.45,683.297 1558,683.297 1558.56,683.297 1559.12,683.297 1559.68,683.297 1560.24,683.297 1560.8,683.297 1561.36,683.297 1561.92,683.297 1562.48,683.297 1563.04,683.297 1563.6,683.297 1564.16,683.297 1564.72,683.297 1565.28,683.297 1565.83,683.297 1566.39,683.297 1566.95,683.297 1567.51,683.297 1568.07,683.297 1568.63,683.297 1569.19,683.297 1569.75,683.297 1570.31,683.297 1570.87,683.297 1571.43,683.297 1571.99,683.297 1572.55,683.297 1573.1,683.297 1573.66,683.297 1574.22,683.297 1574.78,683.297 1575.34,683.297 1575.9,683.297 1576.46,683.297 1577.02,683.297 1577.58,683.297 1578.14,683.297 1578.7,683.297 1579.26,683.297 1579.82,683.297 1580.37,683.297 1580.93,683.297 1581.49,683.297 1582.05,683.297 1582.61,683.297 1583.17,683.297 1583.73,683.297 1584.29,683.297 1584.85,683.297 1585.41,683.297 1585.97,683.297 1586.53,683.297 1587.09,683.297 1587.65,683.297 1588.2,683.297 1588.76,683.297 1589.32,683.297 1589.88,683.297 1590.44,683.297 1591,683.297 1591.56,683.297 1592.12,683.297 1592.68,683.297 1593.24,683.297 1593.8,683.297 1594.36,683.297 1594.92,683.297 1595.47,683.297 1596.03,683.297 1596.59,683.297 1597.15,683.297 1597.71,683.297 1598.27,683.297 1598.83,683.297 1599.39,683.297 1599.95,683.297 1600.51,683.297 1601.07,683.297 1601.63,683.297 1602.19,683.297 1602.74,683.297 1603.3,683.297 1603.86,683.297 1604.42,683.297 1604.98,683.297 1605.54,683.297 1606.1,683.297 1606.66,683.297 1607.22,683.297 1607.78,683.297 1608.34,683.297 1608.9,683.297 1609.46,683.297 1610.02,683.297 1610.57,683.297 1611.13,683.297 1611.69,683.297 1612.25,683.297 1612.81,683.297 1613.37,683.297 1613.93,683.297 1614.49,683.297 1615.05,683.297 1615.61,683.297 1616.17,683.297 1616.73,683.297 1617.29,683.297 1617.84,683.297 1618.4,683.297 1618.96,683.297 1619.52,683.297 1620.08,683.297 1620.64,683.297 1621.2,683.297 1621.76,683.297 1622.32,683.297 1622.88,683.297 1623.44,683.297 1624,683.297 1624.56,683.297 1625.11,683.297 1625.67,683.297 1626.23,683.297 1626.79,683.297 1627.35,683.297 1627.91,683.297 1628.47,683.297 1629.03,683.297 1629.59,683.297 1630.15,683.297 1630.71,683.297 1631.27,683.297 1631.83,683.297 1632.39,683.297 1632.94,683.297 1633.5,683.297 1634.06,683.297 1634.62,683.297 1635.18,683.297 1635.74,683.297 1636.3,683.297 1636.86,683.297 1637.42,683.297 1637.98,683.297 1638.54,683.297 1639.1,683.297 1639.66,683.297 1640.21,683.297 1640.77,683.297 1641.33,683.297 1641.89,683.297 1642.45,683.297 1643.01,683.297 1643.57,683.297 1644.13,683.297 1644.69,683.297 1645.25,683.297 1645.81,683.297 1646.37,683.297 1646.93,683.297 1647.48,683.297 1648.04,683.297 1648.6,683.297 1649.16,683.297 1649.72,683.297 1650.28,683.297 1650.84,683.297 1651.4,683.297 1651.96,683.297 1652.52,683.297 1653.08,683.297 1653.64,683.297 1654.2,683.297 1654.76,683.297 1655.31,683.297 1655.87,683.297 1656.43,683.297 1656.99,683.297 1657.55,683.297 1658.11,683.297 1658.67,683.297 1659.23,683.297 1659.79,683.297 1660.35,683.297 1660.91,683.297 1661.47,683.297 1662.03,683.297 1662.58,683.297 1663.14,683.297 1663.7,683.297 1664.26,683.297 1664.82,683.297 1665.38,683.297 1665.94,683.297 1666.5,683.297 1667.06,683.297 1667.62,683.297 1668.18,683.297 1668.74,683.297 1669.3,683.297 1669.85,683.297 1670.41,683.297 1670.97,683.297 1671.53,683.297 1672.09,683.297 1672.65,683.297 1673.21,683.297 1673.77,683.297 1674.33,683.297 1674.89,683.297 1675.45,683.297 1676.01,683.297 1676.57,683.297 1677.13,683.297 1677.68,683.297 1678.24,683.297 1678.8,683.297 1679.36,683.297 1679.92,683.297 1680.48,683.297 1681.04,683.297 1681.6,683.297 1682.16,683.297 1682.72,683.297 1683.28,683.297 1683.84,683.297 1684.4,683.297 1684.95,683.297 1685.51,683.297 1686.07,683.297 1686.63,683.297 1687.19,683.297 1687.75,683.297 1688.31,683.297 1688.87,683.297 1689.43,683.297 1689.99,683.297 1690.55,683.297 1691.11,683.297 1691.67,683.297 1692.23,683.297 1692.78,683.297 1693.34,683.297 1693.9,683.297 1694.46,683.297 1695.02,683.297 1695.58,683.297 1696.14,683.297 1696.7,683.297 1697.26,683.297 1697.82,683.297 1698.38,683.297 1698.94,683.297 1699.5,683.297 1700.05,683.297 1700.61,683.297 1701.17,683.297 1701.73,683.297 1702.29,683.297 1702.85,683.297 1703.41,683.297 1703.97,683.297 1704.53,683.297 1705.09,683.297 1705.65,683.297 1706.21,683.297 1706.77,683.297 1707.32,683.297 1707.88,683.297 1708.44,683.297 1709,683.297 1709.56,683.297 1710.12,683.297 1710.68,683.297 1711.24,683.297 1711.8,683.297 1712.36,683.297 1712.92,683.297 1713.48,683.297 1714.04,683.297 1714.6,683.297 1715.15,683.297 1715.71,683.297 1716.27,683.297 1716.83,683.297 1717.39,683.297 1717.95,683.297 1718.51,683.297 1719.07,683.297 1719.63,683.297 1720.19,683.297 1720.75,683.297 1721.31,683.297 1721.87,683.297 1722.42,683.297 1722.98,683.297 1723.54,683.297 1724.1,683.297 1724.66,683.297 1725.22,683.297 1725.78,683.297 1726.34,683.297 1726.9,683.297 1727.46,683.297 1728.02,683.297 1728.58,683.297 1729.14,683.297 1729.69,683.297 1730.25,683.297 1730.81,683.297 1731.37,683.297 1731.93,683.297 1732.49,683.297 1733.05,683.297 1733.61,683.297 1734.17,683.297 1734.73,683.297 1735.29,683.297 1735.85,683.297 1736.41,683.297 1736.97,683.297 1737.52,683.297 1738.08,683.297 1738.64,683.297 1739.2,683.297 1739.76,683.297 1740.32,683.297 1740.88,683.297 1741.44,683.297 1742,683.297 1742.56,683.297 1743.12,683.297 1743.68,683.297 1744.24,683.297 1744.79,683.297 1745.35,683.297 1745.91,683.297 1746.47,683.297 1747.03,683.297 1747.59,683.297 1748.15,683.297 1748.71,683.297 1749.27,683.297 1749.83,683.297 1750.39,683.297 1750.95,683.297 1751.51,683.297 1752.06,683.297 1752.62,683.297 1753.18,683.297 1753.74,683.297 1754.3,683.297 1754.86,683.297 1755.42,683.297 1755.98,683.297 1756.54,683.297 1757.1,683.297 1757.66,683.297 1758.22,683.297 1758.78,683.297 1759.34,683.297 1759.89,683.297 1760.45,683.297 1761.01,683.297 1761.57,683.297 1762.13,683.297 1762.69,683.297 1763.25,683.297 1763.81,683.297 1764.37,683.297 1764.93,683.297 1765.49,683.297 1766.05,683.297 1766.61,683.297 1767.16,683.297 1767.72,683.297 1768.28,683.297 1768.84,683.297 1769.4,683.297 1769.96,683.297 1770.52,683.297 1771.08,683.297 1771.64,683.297 1772.2,683.297 1772.76,683.297 1773.32,683.297 1773.88,683.297 1774.43,683.297 1774.99,683.297 1775.55,683.297 1776.11,683.297 1776.67,683.297 1777.23,683.297 1777.79,683.297 1778.35,683.297 1778.91,683.297 1779.47,683.297 1780.03,683.297 1780.59,683.297 1781.15,683.297 1781.71,683.297 1782.26,683.297 1782.82,683.297 1783.38,683.297 1783.94,683.297 1784.5,683.297 1785.06,683.297 1785.62,683.297 1786.18,683.297 1786.74,683.297 1787.3,683.297 1787.86,683.297 1788.42,683.297 1788.98,683.297 1789.53,683.297 1790.09,683.297 1790.65,683.297 1791.21,683.297 1791.77,683.297 1792.33,683.297 1792.89,683.297 1793.45,683.297 1794.01,683.297 1794.57,683.297 1795.13,683.297 1795.69,683.297 1796.25,683.297 1796.8,683.297 1797.36,683.297 1797.92,683.297 1798.48,683.297 1799.04,683.297 1799.6,683.297 1800.16,683.297 1800.72,683.297 1801.28,683.297 1801.84,683.297 1802.4,683.297 1802.96,683.297 1803.52,683.297 1804.08,683.297 1804.63,683.297 1805.19,683.297 1805.75,683.297 1806.31,683.297 1806.87,683.297 1807.43,683.297 1807.99,683.297 1808.55,683.297 1809.11,683.297 1809.67,683.297 1810.23,683.297 1810.79,683.297 1811.35,683.297 1811.9,683.297 1812.46,683.297 1813.02,683.297 1813.58,683.297 1814.14,683.297 1814.7,683.297 1815.26,683.297 1815.82,683.297 1816.38,683.297 1816.94,683.297 1817.5,683.297 1818.06,683.297 1818.62,683.297 1819.18,683.297 1819.73,683.297 1820.29,683.297 1820.85,683.297 1821.41,683.297 1821.97,683.297 1822.53,683.297 1823.09,683.297 1823.65,683.297 1824.21,683.297 1824.77,683.297 1825.33,683.297 1825.89,683.297 1826.45,683.297 1827,683.297 1827.56,683.297 1828.12,683.297 1828.68,683.297 1829.24,683.297 1829.8,683.297 1830.36,683.297 1830.92,683.297 1831.48,683.297 1832.04,683.297 1832.6,683.297 1833.16,683.297 1833.72,683.297 1834.27,683.297 1834.83,683.297 1835.39,683.297 1835.95,683.297 1836.51,683.297 1837.07,683.297 1837.63,683.297 1838.19,683.297 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0316066641683586 ± 0.02562181513593082\nProjected Energy: -4.013637454229966 ± (0.005113175300086148, 0.004763699377786423)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.472172</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.2944e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">8.436e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.937e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.233e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.745e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.305e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133672\n -0.7590191922770906\n  0.135841822196209\n  0.1578999869460862\n  0.8767114411781307\n  1.5305929970973366\n  1.5835732611867321\n  3.072870330325868\n  3.1256726539518365\n  4.862107221562169\n  6.260694850380597\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
