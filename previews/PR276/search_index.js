var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21099502019221333 ± 0.0015778814397678334\n   G2(1) = 0.9185877212920935 ± 0.000763936217697748\n   G2(2) = 0.9823078893887394 ± 0.000498118429086311\n   G2(3) = 0.9872137584461211 ± 0.0006863212004492262\n   G2(4) = 0.9823078893887394 ± 0.000498118429086311\n   G2(5) = 0.9185877212920935 ± 0.000763936217697748\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9913672224870917 ± 0.13601666670173668\n   Replica 2: -4.00887180246913 ± 0.12918656756839575\n   Replica 3: -3.9961050142982955 ± 0.12575134086602635\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.38 2211.02,1003.38 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.933 2211.02,745.933 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.486 2211.02,488.486 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.039 2211.02,231.039 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.38 423.181,1003.38 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.933 423.181,745.933 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.486 423.181,488.486 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.039 423.181,231.039 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M290.043 1016.72 L306.363 1016.72 L306.363 1020.66 L284.418 1020.66 L284.418 1016.72 Q287.08 1013.97 291.664 1009.34 Q296.27 1004.69 297.451 1003.34 Q299.696 1000.82 300.576 999.086 Q301.478 997.326 301.478 995.636 Q301.478 992.882 299.534 991.146 Q297.613 989.41 294.511 989.41 Q292.312 989.41 289.858 990.174 Q287.427 990.937 284.65 992.488 L284.65 987.766 Q287.474 986.632 289.927 986.053 Q292.381 985.474 294.418 985.474 Q299.789 985.474 302.983 988.16 Q306.177 990.845 306.177 995.336 Q306.177 997.465 305.367 999.386 Q304.58 1001.28 302.474 1003.88 Q301.895 1004.55 298.793 1007.77 Q295.691 1010.96 290.043 1016.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M316.224 986.099 L334.58 986.099 L334.58 990.035 L320.506 990.035 L320.506 998.507 Q321.524 998.16 322.543 997.998 Q323.562 997.812 324.58 997.812 Q330.367 997.812 333.747 1000.98 Q337.126 1004.15 337.126 1009.57 Q337.126 1015.15 333.654 1018.25 Q330.182 1021.33 323.862 1021.33 Q321.687 1021.33 319.418 1020.96 Q317.173 1020.59 314.765 1019.85 L314.765 1015.15 Q316.849 1016.28 319.071 1016.84 Q321.293 1017.4 323.77 1017.4 Q327.774 1017.4 330.112 1015.29 Q332.45 1013.18 332.45 1009.57 Q332.45 1005.96 330.112 1003.85 Q327.774 1001.75 323.77 1001.75 Q321.895 1001.75 320.02 1002.16 Q318.168 1002.58 316.224 1003.46 L316.224 986.099 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 989.178 Q352.728 989.178 350.899 992.743 Q349.094 996.285 349.094 1003.41 Q349.094 1010.52 350.899 1014.09 Q352.728 1017.63 356.339 1017.63 Q359.973 1017.63 361.779 1014.09 Q363.608 1010.52 363.608 1003.41 Q363.608 996.285 361.779 992.743 Q359.973 989.178 356.339 989.178 M356.339 985.474 Q362.149 985.474 365.205 990.081 Q368.284 994.664 368.284 1003.41 Q368.284 1012.14 365.205 1016.75 Q362.149 1021.33 356.339 1021.33 Q350.529 1021.33 347.45 1016.75 Q344.395 1012.14 344.395 1003.41 Q344.395 994.664 347.45 990.081 Q350.529 985.474 356.339 985.474 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M286.062 728.653 L304.418 728.653 L304.418 732.588 L290.344 732.588 L290.344 741.06 Q291.363 740.713 292.381 740.551 Q293.4 740.365 294.418 740.365 Q300.205 740.365 303.585 743.537 Q306.964 746.708 306.964 752.125 Q306.964 757.703 303.492 760.805 Q300.02 763.884 293.701 763.884 Q291.525 763.884 289.256 763.513 Q287.011 763.143 284.603 762.402 L284.603 757.703 Q286.687 758.838 288.909 759.393 Q291.131 759.949 293.608 759.949 Q297.613 759.949 299.951 757.842 Q302.288 755.736 302.288 752.125 Q302.288 748.514 299.951 746.407 Q297.613 744.301 293.608 744.301 Q291.733 744.301 289.858 744.717 Q288.006 745.134 286.062 746.014 L286.062 728.653 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M326.177 731.731 Q322.566 731.731 320.737 735.296 Q318.932 738.838 318.932 745.967 Q318.932 753.074 320.737 756.638 Q322.566 760.18 326.177 760.18 Q329.811 760.18 331.617 756.638 Q333.446 753.074 333.446 745.967 Q333.446 738.838 331.617 735.296 Q329.811 731.731 326.177 731.731 M326.177 728.028 Q331.987 728.028 335.043 732.634 Q338.122 737.217 338.122 745.967 Q338.122 754.694 335.043 759.301 Q331.987 763.884 326.177 763.884 Q320.367 763.884 317.288 759.301 Q314.233 754.694 314.233 745.967 Q314.233 737.217 317.288 732.634 Q320.367 728.028 326.177 728.028 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 731.731 Q352.728 731.731 350.899 735.296 Q349.094 738.838 349.094 745.967 Q349.094 753.074 350.899 756.638 Q352.728 760.18 356.339 760.18 Q359.973 760.18 361.779 756.638 Q363.608 753.074 363.608 745.967 Q363.608 738.838 361.779 735.296 Q359.973 731.731 356.339 731.731 M356.339 728.028 Q362.149 728.028 365.205 732.634 Q368.284 737.217 368.284 745.967 Q368.284 754.694 365.205 759.301 Q362.149 763.884 356.339 763.884 Q350.529 763.884 347.45 759.301 Q344.395 754.694 344.395 745.967 Q344.395 737.217 347.45 732.634 Q350.529 728.028 356.339 728.028 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M284.835 471.206 L307.057 471.206 L307.057 473.196 L294.511 505.766 L289.627 505.766 L301.432 475.141 L284.835 475.141 L284.835 471.206 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M316.224 471.206 L334.58 471.206 L334.58 475.141 L320.506 475.141 L320.506 483.613 Q321.524 483.266 322.543 483.104 Q323.562 482.918 324.58 482.918 Q330.367 482.918 333.747 486.09 Q337.126 489.261 337.126 494.678 Q337.126 500.256 333.654 503.358 Q330.182 506.437 323.862 506.437 Q321.687 506.437 319.418 506.066 Q317.173 505.696 314.765 504.955 L314.765 500.256 Q316.849 501.391 319.071 501.946 Q321.293 502.502 323.77 502.502 Q327.774 502.502 330.112 500.395 Q332.45 498.289 332.45 494.678 Q332.45 491.067 330.112 488.96 Q327.774 486.854 323.77 486.854 Q321.895 486.854 320.02 487.27 Q318.168 487.687 316.224 488.567 L316.224 471.206 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 474.284 Q352.728 474.284 350.899 477.849 Q349.094 481.391 349.094 488.52 Q349.094 495.627 350.899 499.192 Q352.728 502.733 356.339 502.733 Q359.973 502.733 361.779 499.192 Q363.608 495.627 363.608 488.52 Q363.608 481.391 361.779 477.849 Q359.973 474.284 356.339 474.284 M356.339 470.581 Q362.149 470.581 365.205 475.187 Q368.284 479.77 368.284 488.52 Q368.284 497.247 365.205 501.854 Q362.149 506.437 356.339 506.437 Q350.529 506.437 347.45 501.854 Q344.395 497.247 344.395 488.52 Q344.395 479.77 347.45 475.187 Q350.529 470.581 356.339 470.581 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M256.664 244.383 L264.303 244.383 L264.303 218.018 L255.992 219.684 L255.992 215.425 L264.256 213.759 L268.932 213.759 L268.932 244.383 L276.571 244.383 L276.571 248.319 L256.664 248.319 L256.664 244.383 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M296.015 216.837 Q292.404 216.837 290.576 220.402 Q288.77 223.944 288.77 231.073 Q288.77 238.18 290.576 241.745 Q292.404 245.286 296.015 245.286 Q299.65 245.286 301.455 241.745 Q303.284 238.18 303.284 231.073 Q303.284 223.944 301.455 220.402 Q299.65 216.837 296.015 216.837 M296.015 213.134 Q301.826 213.134 304.881 217.74 Q307.96 222.323 307.96 231.073 Q307.96 239.8 304.881 244.407 Q301.826 248.99 296.015 248.99 Q290.205 248.99 287.127 244.407 Q284.071 239.8 284.071 231.073 Q284.071 222.323 287.127 217.74 Q290.205 213.134 296.015 213.134 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M326.177 216.837 Q322.566 216.837 320.737 220.402 Q318.932 223.944 318.932 231.073 Q318.932 238.18 320.737 241.745 Q322.566 245.286 326.177 245.286 Q329.811 245.286 331.617 241.745 Q333.446 238.18 333.446 231.073 Q333.446 223.944 331.617 220.402 Q329.811 216.837 326.177 216.837 M326.177 213.134 Q331.987 213.134 335.043 217.74 Q338.122 222.323 338.122 231.073 Q338.122 239.8 335.043 244.407 Q331.987 248.99 326.177 248.99 Q320.367 248.99 317.288 244.407 Q314.233 239.8 314.233 231.073 Q314.233 222.323 317.288 217.74 Q320.367 213.134 326.177 213.134 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 216.837 Q352.728 216.837 350.899 220.402 Q349.094 223.944 349.094 231.073 Q349.094 238.18 350.899 241.745 Q352.728 245.286 356.339 245.286 Q359.973 245.286 361.779 241.745 Q363.608 238.18 363.608 231.073 Q363.608 223.944 361.779 220.402 Q359.973 216.837 356.339 216.837 M356.339 213.134 Q362.149 213.134 365.205 217.74 Q368.284 222.323 368.284 231.073 Q368.284 239.8 365.205 244.407 Q362.149 248.99 356.339 248.99 Q350.529 248.99 347.45 244.407 Q344.395 239.8 344.395 231.073 Q344.395 222.323 347.45 217.74 Q350.529 213.134 356.339 213.134 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.039 4017.76,231.039 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.55 458.828,1248.18 459.396,1247.75 459.964,1245.2 460.533,1244.68 461.101,1244.09 461.669,1242.38 462.238,1240.61 462.806,1239.8 463.375,1238.91 463.943,1237.92 464.511,1236.81 465.08,1235.61 465.648,1234.26 466.216,1232.81 466.785,1230.21 467.353,1228.55 467.921,1226.73 468.49,1224.8 469.058,1222.71 469.626,1220.48 470.195,1218.09 470.763,1215.53 471.331,1212.81 471.9,1209.92 472.468,1206.85 473.036,1202.55 473.605,1199.06 474.173,1195.39 474.741,1189.49 475.31,1184.39 475.878,1179.03 476.446,1173.53 477.015,1168.9 477.583,1164.01 478.152,1156.85 478.72,1151.55 479.288,1146.01 479.857,1139.16 480.425,1133.19 480.993,1125.96 481.562,1118.6 482.13,1111.74 482.698,1102.7 483.267,1093.57 483.835,1084.33 484.403,1075.98 484.972,1068.47 485.54,1060.77 486.108,1052.85 486.677,1042.77 487.245,1033.61 487.813,1024.12 488.382,1014.47 488.95,1001.71 489.518,990.909 490.087,981.102 490.655,972.18 491.224,962.111 491.792,951.885 492.36,940.595 492.929,930.277 493.497,919.915 494.065,910.539 494.634,899.024 495.202,887.472 495.77,875.986 496.339,865.632 496.907,855.277 497.475,844.772 498.044,833.299 498.612,824 499.18,813.537 499.749,803.105 500.317,791.686 500.885,781.356 501.454,771.086 502.022,760.921 502.59,748.65 503.159,738.471 503.727,727.422 504.295,716.582 504.864,708.737 505.432,697.928 506.001,689.406 506.569,677.833 507.137,666.398 507.706,655.114 508.274,645.053 508.842,636.087 509.411,627.241 509.979,619.575 510.547,610.897 511.116,602.393 511.684,593.882 512.252,585.604 512.821,578.331 513.389,568.167 513.957,558.445 514.526,549.939 515.094,541.6 515.662,534.572 516.231,528.576 516.799,522.657 517.367,515.867 517.936,510.097 518.504,502.378 519.072,494.573 519.641,486.952 520.209,481.826 520.778,477.519 521.346,471.461 521.914,463.425 522.483,454.607 523.051,449.358 523.619,445.321 524.188,439.299 524.756,434.078 525.324,428.242 525.893,422.334 526.461,418.01 527.029,415.538 527.598,411.086 528.166,406.687 528.734,405.463 529.303,401.002 529.871,397.829 530.439,394.759 531.008,390.564 531.576,386.615 532.144,384.561 532.713,380.367 533.281,378.468 533.85,374.358 534.418,370.565 534.986,366.517 535.555,361.872 536.123,355.254 536.691,351.9 537.26,350.01 537.828,346.805 538.396,345.621 538.965,341.593 539.533,338.378 540.101,335.258 540.67,333.353 541.238,329.738 541.806,325.868 542.375,324.56 542.943,323.123 543.511,321.739 544.08,317.276 544.648,313.726 545.216,307.28 545.785,302.434 546.353,301.019 546.921,299.504 547.49,297.931 548.058,297.759 548.627,294.999 549.195,293.596 549.763,291.123 550.332,290.888 550.9,291.684 551.468,291.42 552.037,291.066 552.605,289.426 553.173,286.916 553.742,284.75 554.31,283.637 554.878,283.338 555.447,284.263 556.015,282.716 556.583,282.42 557.152,283.323 557.72,282.91 558.288,280.368 558.857,281.018 559.425,283.719 559.993,281.905 560.562,278.161 561.13,277.824 561.698,276.417 562.267,276.089 562.835,276.643 563.404,276.199 563.972,273.616 564.54,272.898 565.109,274.66 565.677,275.14 566.245,274.391 566.814,271.83 567.382,272.294 567.95,271.692 568.519,271.205 569.087,270.579 569.655,267.839 570.224,268.293 570.792,267.718 571.36,264.187 571.929,263.951 572.497,262.643 573.065,261.326 573.634,259.979 574.202,260.711 574.77,258.451 575.339,257.261 575.907,258.28 576.476,258.217 577.044,259.108 577.612,256.881 578.181,254.574 578.749,255.415 579.317,254.203 579.886,254.356 580.454,254.407 581.022,256.553 581.591,256.242 582.159,255.05 582.727,256.812 583.296,256.508 583.864,253.087 584.432,253.822 585.001,253.591 585.569,253.258 586.137,252.055 586.706,250.8 587.274,252.779 587.842,252.321 588.411,250.942 588.979,250.775 589.547,249.479 590.116,248.611 590.684,247.587 591.253,246.405 591.821,246.198 592.389,247.159 592.958,245.093 593.526,245.051 594.094,243.991 594.663,244.019 595.231,245.241 595.799,246.426 596.368,245.098 596.936,245.235 597.504,244.211 598.073,245.543 598.641,243.466 599.209,243.651 599.778,242.918 600.346,242.428 600.914,240.92 601.483,240.244 602.051,240.507 602.619,241.791 603.188,241.049 603.756,240.255 604.325,243.365 604.893,239.168 605.461,238.413 606.03,236.947 606.598,238.623 607.166,237.862 607.735,238.266 608.303,238.552 608.871,240.033 609.44,238.322 610.008,237.781 610.576,238.101 611.145,239.562 611.713,238.928 612.281,238.492 612.85,241.151 613.418,242.283 613.986,240.643 614.555,238.632 615.123,238.938 615.691,237.222 616.26,237.529 616.828,237.181 617.396,236.63 617.965,236.166 618.533,234.651 619.102,234.232 619.67,234.089 620.238,232.686 620.807,233.307 621.375,231.912 621.943,232.845 622.512,235.757 623.08,234.194 623.648,235.991 624.217,236.591 624.785,236.133 625.353,236.446 625.922,237.902 626.49,238.225 627.058,237.728 627.627,236.294 628.195,235.788 628.763,234.294 629.332,235.04 629.9,236.715 630.468,241.351 631.037,241.217 631.605,238.204 632.173,236.494 632.742,237.949 633.31,236.388 633.879,236.912 634.447,235.034 635.015,235.558 635.584,236.103 636.152,237.72 636.72,239.038 637.289,239.245 637.857,241.442 638.425,241.429 638.994,238.273 639.562,239.482 640.13,239.799 640.699,235.907 641.267,237.235 641.835,234.617 642.404,234.963 642.972,235.152 643.54,233.393 644.109,232.77 644.677,233.505 645.245,233.248 645.814,233.86 646.382,235.248 646.951,235.566 647.519,235.009 648.087,235.537 648.656,235.033 649.224,234.162 649.792,235.635 650.361,239.023 650.929,240.101 651.497,239.113 652.066,239.063 652.634,237.118 653.202,237.285 653.771,235.464 654.339,234.919 654.907,234.198 655.476,236.706 656.044,238.914 656.612,240.222 657.181,240.294 657.749,241.495 658.317,240.217 658.886,241.088 659.454,244.055 660.022,246.796 660.591,246.45 661.159,244.913 661.728,244.558 662.296,243.982 662.864,244.365 663.433,243.05 664.001,240.809 664.569,240.814 665.138,240.614 665.706,239.297 666.274,239.071 666.843,238.231 667.411,236.302 667.979,236.582 668.548,235.606 669.116,235.596 669.684,237.682 670.253,237.554 670.821,239.724 671.389,239.386 671.958,240.322 672.526,241.256 673.094,241.145 673.663,239.853 674.231,238.611 674.799,238.53 675.368,236.194 675.936,234.013 676.505,235.267 677.073,236.376 677.641,236.096 678.21,234.987 678.778,234.171 679.346,235.117 679.915,236.244 680.483,234.128 681.051,235.381 681.62,234.469 682.188,236.615 682.756,236.353 683.325,235.031 683.893,233.82 684.461,233.867 685.03,236.955 685.598,236.787 686.166,234.782 686.735,231.484 687.303,231.93 687.871,232.122 688.44,231.268 689.008,232.343 689.577,232.427 690.145,232.615 690.713,233.712 691.282,236.861 691.85,236.75 692.418,235.771 692.987,235.826 693.555,235.864 694.123,236.683 694.692,237.64 695.26,239.196 695.828,238.908 696.397,239.685 696.965,240.264 697.533,239.929 698.102,239.647 698.67,238.219 699.238,235.968 699.807,235.954 700.375,236.976 700.943,235.463 701.512,236.47 702.08,236.345 702.648,234.519 703.217,234.472 703.785,231.502 704.354,231.802 704.922,232.205 705.49,233.428 706.059,233.181 706.627,234.133 707.195,232.975 707.764,234.108 708.332,236.282 708.9,235.961 709.469,235.652 710.037,235.62 710.605,237.636 711.174,236.262 711.742,237.985 712.31,237.655 712.879,236.652 713.447,237.47 714.015,237.303 714.584,236.127 715.152,235.713 715.72,232.517 716.289,231.58 716.857,231.483 717.425,231.507 717.994,232.543 718.562,233.627 719.131,233.622 719.699,233.496 720.267,233.485 720.836,232.391 721.404,233.541 721.972,232.532 722.541,231.512 723.109,233.753 723.677,232.745 724.246,230.874 724.814,230.935 725.382,230.063 725.951,229.38 726.519,231.002 727.087,229.977 727.656,230.363 728.224,230.606 728.792,230.72 729.361,232.864 729.929,232.646 730.497,230.798 731.066,229.682 731.634,228.804 732.203,230.077 732.771,229.135 733.339,228.438 733.908,228.786 734.476,230.294 735.044,230.549 735.613,230.635 736.181,227.698 736.749,230.164 737.318,231.367 737.886,230.451 738.454,227.604 739.023,226.962 739.591,227.475 740.159,228.812 740.728,229.137 741.296,227.244 741.864,226.553 742.433,225.274 743.001,224.768 743.569,224.562 744.138,226.062 744.706,225.662 745.274,226.301 745.843,225.876 746.411,227.705 746.98,227.304 747.548,227.762 748.116,229.181 748.685,230.701 749.253,232.02 749.821,233.181 750.39,234.556 750.958,234.536 751.526,234.682 752.095,233.839 752.663,232.896 753.231,233.175 753.8,232.226 754.368,234.195 754.936,235.137 755.505,237.124 756.073,235.924 756.641,233.734 757.21,233.918 757.778,236.079 758.346,237.154 758.915,236.847 759.483,237.563 760.052,240.278 760.62,239.87 761.188,238.608 761.757,239.374 762.325,236.896 762.893,235.52 763.462,235.435 764.03,235.117 764.598,234.962 765.167,232.802 765.735,232.943 766.303,233.941 766.872,233.751 767.44,232.52 768.008,231.706 768.577,232.767 769.145,231.798 769.713,231.772 770.282,230.985 770.85,228.067 771.418,229.265 771.987,228.353 772.555,228.973 773.123,227.124 773.692,227.774 774.26,229.071 774.829,229.249 775.397,228.805 775.965,228.245 776.534,228.641 777.102,230.012 777.67,229.54 778.239,228.722 778.807,228.131 779.375,228.481 779.944,228.932 780.512,228.466 781.08,227.112 781.649,226.493 782.217,228.985 782.785,229.204 783.354,230.584 783.922,233.056 784.49,232.158 785.059,234.455 785.627,233.28 786.195,234.408 786.764,234.435 787.332,235.739 787.9,236.7 788.469,234.452 789.037,236.427 789.606,238.391 790.174,238.186 790.742,236.739 791.311,237.546 791.879,237.364 792.447,236.015 793.016,236.614 793.584,237.459 794.152,237.021 794.721,237.61 795.289,237.31 795.857,236.062 796.426,235.705 796.994,236.555 797.562,237.227 798.131,234.881 798.699,233.789 799.267,234.377 799.836,233.24 800.404,232.027 800.972,230.173 801.541,230.455 802.109,227.497 802.678,226.823 803.246,227.222 803.814,228.675 804.383,229.947 804.951,229.956 805.519,231.061 806.088,231.35 806.656,233.437 807.224,233.586 807.793,232.55 808.361,233.48 808.929,233.155 809.498,233.065 810.066,231.264 810.634,233.461 811.203,233.118 811.771,233.957 812.339,234.793 812.908,236.786 813.476,235.436 814.044,236.067 814.613,234.855 815.181,233.564 815.749,234.507 816.318,233.515 816.886,237.352 817.455,238.95 818.023,239.408 818.591,238.871 819.16,238.394 819.728,236.708 820.296,239.491 820.865,238.895 821.433,237.285 822.001,235.947 822.57,238.631 823.138,240.333 823.706,240.724 824.275,236.952 824.843,233.503 825.411,232.476 825.98,232.319 826.548,229.269 827.116,228.345 827.685,228.385 828.253,229.649 828.821,231.813 829.39,230.591 829.958,229.535 830.526,228.468 831.095,228.52 831.663,228.619 832.232,226.823 832.8,227.004 833.368,227.496 833.937,226.768 834.505,226.195 835.073,225.662 835.642,225.941 836.21,227.29 836.778,226.759 837.347,227.916 837.915,228.13 838.483,229.209 839.052,231.375 839.62,232.302 840.188,233.172 840.757,235.042 841.325,231.723 841.893,232.885 842.462,233.666 843.03,232.449 843.598,235.254 844.167,233.056 844.735,228.057 845.304,228.215 845.872,228.474 846.44,226.798 847.009,227.419 847.577,226.484 848.145,226.966 848.714,226.246 849.282,226.637 849.85,227.131 850.419,228.514 850.987,229.877 851.555,230.013 852.124,230.276 852.692,230.398 853.26,230.581 853.829,229.782 854.397,231.226 854.965,233.325 855.534,235.448 856.102,234.341 856.67,235.207 857.239,235.166 857.807,235.038 858.375,234.851 858.944,234.548 859.512,234.339 860.081,234.149 860.649,231.88 861.217,231.825 861.786,232.853 862.354,234.772 862.922,235.737 863.491,236.595 864.059,237.318 864.627,236.872 865.196,235.449 865.764,234.11 866.332,233.762 866.901,232.769 867.469,232.946 868.037,232.801 868.606,233.682 869.174,231.409 869.742,231.598 870.311,230.711 870.879,230.898 871.447,229.737 872.016,229.029 872.584,228.34 873.152,229.209 873.721,231.546 874.289,230.527 874.858,231.581 875.426,232.595 875.994,233.444 876.563,234.489 877.131,235.102 877.699,233.829 878.268,235.788 878.836,233.476 879.404,233.584 879.973,235.374 880.541,235.017 881.109,233.641 881.678,232.284 882.246,234.398 882.814,235.232 883.383,234.878 883.951,234.704 884.519,234.469 885.088,232.131 885.656,231.162 886.224,232.105 886.793,234.17 887.361,234.777 887.93,235.48 888.498,234.995 889.066,235.841 889.635,236.584 890.203,235.12 890.771,234.703 891.34,233.333 891.908,232.182 892.476,230.995 893.045,230.025 893.613,230.859 894.181,231.907 894.75,230.76 895.318,230.498 895.886,230.445 896.455,231.296 897.023,230.114 897.591,229.904 898.16,228.863 898.728,228.063 899.296,230.364 899.865,230.424 900.433,231.573 901.001,231.548 901.57,231.429 902.138,230.351 902.707,230.537 903.275,230.618 903.843,229.991 904.412,228.816 904.98,229.835 905.548,232.863 906.117,233.703 906.685,230.332 907.253,230.245 907.822,230.26 908.39,230.288 908.958,230.359 909.527,228.498 910.095,228.531 910.663,230.896 911.232,229.868 911.8,232.164 912.368,232.091 912.937,230.03 913.505,229.032 914.073,229.117 914.642,228.155 915.21,229.413 915.779,227.624 916.347,226.908 916.915,228.417 917.484,229.922 918.052,229.991 918.62,229.115 919.189,231.218 919.757,230.011 920.325,229.048 920.894,229.106 921.462,227.249 922.03,227.558 922.599,228.685 923.167,226.937 923.735,225.242 924.304,225.645 924.872,224.913 925.44,226.497 926.009,224.863 926.577,226.295 927.145,227.617 927.714,225.911 928.282,225.325 928.85,225.742 929.419,227.394 929.987,227.701 930.556,228.996 931.124,233.381 931.692,234.294 932.261,231.084 932.829,232.42 933.397,234.429 933.966,233.223 934.534,233.049 935.102,234.142 935.671,234.247 936.239,235.004 936.807,235.775 937.376,239.549 937.944,238.089 938.512,236.715 939.081,237.499 939.649,236.06 940.217,235.698 940.786,236.63 941.354,234.042 941.922,233.874 942.491,231.475 943.059,232.681 943.627,234.731 944.196,235.552 944.764,234.161 945.333,235.778 945.901,233.247 946.469,235.196 947.038,233.005 947.606,232.675 948.174,231.35 948.743,231.211 949.311,229.187 949.879,230.571 950.448,229.454 951.016,228.57 951.584,228.557 952.153,227.798 952.721,230.035 953.289,230.122 953.858,230.181 954.426,231.438 954.994,230.354 955.563,230.474 956.131,229.432 956.699,229.421 957.268,229.448 957.836,228.564 958.405,228.617 958.973,227.663 959.541,227.942 960.11,226.097 960.678,226.523 961.246,225.712 961.815,224.179 962.383,224.685 962.951,225.333 963.52,223.927 964.088,225.585 964.656,222.762 965.225,222.391 965.793,224.46 966.361,225.164 966.93,223.776 967.498,225.692 968.066,225.196 968.635,224.767 969.203,225.505 969.771,226.048 970.34,228.529 970.908,228.801 971.476,232.294 972.045,229.168 972.613,226.254 973.182,226.774 973.75,226.413 974.318,227.005 974.887,229.848 975.455,229.335 976.023,231.652 976.592,230.809 977.16,232.245 977.728,233.237 978.297,232.429 978.865,234.369 979.433,236.289 980.002,237.173 980.57,232.807 981.138,231.929 981.707,232.899 982.275,231.89 982.843,234.198 983.412,235.101 983.98,233.897 984.548,236.745 985.117,236.52 985.685,238.533 986.253,241.139 986.822,239.674 987.39,239.339 987.959,239.831 988.527,238.015 989.095,240.646 989.664,241.295 990.232,238.696 990.8,239.306 991.369,238.749 991.937,240.385 992.505,239.811 993.074,239.993 993.642,238.291 994.21,236.704 994.779,237.377 995.347,238.001 995.915,238.405 996.484,237.763 997.052,237.131 997.62,235.651 998.189,232.161 998.757,233.04 999.325,233.845 999.894,233.329 1000.46,234.309 1001.03,236.194 1001.6,236.821 1002.17,236.708 1002.74,234.214 1003.3,233.097 1003.87,232.846 1004.44,232.604 1005.01,232.598 1005.58,232.507 1006.15,232.478 1006.71,234.093 1007.28,234.678 1007.85,232.477 1008.42,232.111 1008.99,230.924 1009.56,231.81 1010.12,230.677 1010.69,230.562 1011.26,228.325 1011.83,225.404 1012.4,226.805 1012.97,226.912 1013.53,230.192 1014.1,230.386 1014.67,230.414 1015.24,231.224 1015.81,231.973 1016.38,231.89 1016.94,230.757 1017.51,230.654 1018.08,229.522 1018.65,230.654 1019.22,231.331 1019.79,231.985 1020.35,232.895 1020.92,232.717 1021.49,233.198 1022.06,231.974 1022.63,231.807 1023.2,229.449 1023.76,229.525 1024.33,229.354 1024.9,231.625 1025.47,231.383 1026.04,234.25 1026.61,232.937 1027.17,231.691 1027.74,230.421 1028.31,230.19 1028.88,233.131 1029.45,232.03 1030.02,231.919 1030.58,233.838 1031.15,232.701 1031.72,231.675 1032.29,231.383 1032.86,231.386 1033.43,230.106 1033.99,227.974 1034.56,228.866 1035.13,229.853 1035.7,227.829 1036.27,228.037 1036.84,229.071 1037.4,230.106 1037.97,230.273 1038.54,232.402 1039.11,232.289 1039.68,233.043 1040.25,232.66 1040.81,232.332 1041.38,232.147 1041.95,233.072 1042.52,230.585 1043.09,230.597 1043.66,228.442 1044.22,226.282 1044.79,225.687 1045.36,226.008 1045.93,224.18 1046.5,222.719 1047.07,223.173 1047.63,221.655 1048.2,224.088 1048.77,224.668 1049.34,223.991 1049.91,224.541 1050.48,224.968 1051.05,225.302 1051.61,227.819 1052.18,229.228 1052.75,229.314 1053.32,229.265 1053.89,228.526 1054.46,230.777 1055.02,229.958 1055.59,232.197 1056.16,232.158 1056.73,231.179 1057.3,231.147 1057.87,231.159 1058.43,231.252 1059,228.406 1059.57,229.461 1060.14,229.527 1060.71,230.667 1061.28,231.582 1061.84,230.455 1062.41,233.532 1062.98,235.361 1063.55,234.021 1064.12,232.791 1064.69,231.679 1065.25,231.973 1065.82,230.883 1066.39,230.837 1066.96,229.955 1067.53,231.21 1068.1,231.022 1068.66,229.136 1069.23,229.252 1069.8,230.489 1070.37,228.376 1070.94,228.623 1071.51,230.766 1072.07,230.916 1072.64,229.958 1073.21,229.093 1073.78,229.202 1074.35,229.344 1074.92,231.413 1075.48,231.41 1076.05,231.63 1076.62,230.661 1077.19,229.885 1077.76,229.18 1078.33,228.351 1078.89,229.857 1079.46,230.098 1080.03,230.187 1080.6,228.149 1081.17,229.408 1081.74,231.666 1082.3,229.738 1082.87,231.789 1083.44,232.828 1084.01,235.646 1084.58,234.463 1085.15,234.331 1085.71,233.118 1086.28,232.179 1086.85,230.836 1087.42,231.977 1087.99,230.9 1088.56,229.907 1089.12,230.815 1089.69,230.83 1090.26,232.069 1090.83,231.14 1091.4,231.109 1091.97,230.076 1092.53,230.205 1093.1,230.235 1093.67,232.351 1094.24,230.171 1094.81,232.45 1095.38,231.39 1095.94,233.529 1096.51,232.545 1097.08,232.59 1097.65,232.575 1098.22,231.378 1098.79,232.436 1099.35,233.191 1099.92,233.062 1100.49,232.176 1101.06,231.046 1101.63,231.014 1102.2,232.99 1102.76,236.283 1103.33,236.079 1103.9,236.375 1104.47,234.916 1105.04,234.662 1105.61,235.209 1106.17,234.963 1106.74,232.61 1107.31,232.718 1107.88,234.92 1108.45,235.691 1109.02,234.413 1109.58,234.265 1110.15,235.105 1110.72,236.684 1111.29,239.218 1111.86,238.409 1112.43,238.795 1112.99,239.009 1113.56,237.303 1114.13,237.648 1114.7,236.262 1115.27,234.797 1115.84,234.634 1116.4,234.154 1116.97,233.917 1117.54,233.687 1118.11,231.046 1118.68,230.88 1119.25,230.973 1119.81,230.703 1120.38,232.638 1120.95,232.448 1121.52,234.113 1122.09,232.846 1122.66,232.531 1123.23,232.471 1123.79,231.459 1124.36,231.481 1124.93,228.324 1125.5,227.233 1126.07,226.4 1126.64,226.65 1127.2,227.897 1127.77,228.116 1128.34,229.292 1128.91,229.339 1129.48,232.536 1130.05,230.063 1130.61,226.892 1131.18,224.892 1131.75,225.199 1132.32,224.451 1132.89,221.859 1133.46,222.424 1134.02,225 1134.59,225.343 1135.16,226.618 1135.73,226.909 1136.3,226.266 1136.87,225.498 1137.43,223.688 1138,225.142 1138.57,226.782 1139.14,227.157 1139.71,228.586 1140.28,228.521 1140.84,227.619 1141.41,227.028 1141.98,228.125 1142.55,227.308 1143.12,229.69 1143.69,228.598 1144.25,226.946 1144.82,227.457 1145.39,230.957 1145.96,228.831 1146.53,229.078 1147.1,232.607 1147.66,232.686 1148.23,231.661 1148.8,231.859 1149.37,231.782 1149.94,232.932 1150.51,232.919 1151.07,232.882 1151.64,230.859 1152.21,230.949 1152.78,231.025 1153.35,230.038 1153.92,229.876 1154.48,230.791 1155.05,233.766 1155.62,234.633 1156.19,235.27 1156.76,235.049 1157.33,232.648 1157.89,232.495 1158.46,229.53 1159.03,231.814 1159.6,231.858 1160.17,230.832 1160.74,232.972 1161.3,232.094 1161.87,235.187 1162.44,234.076 1163.01,233.833 1163.58,235.605 1164.15,235.269 1164.71,234.932 1165.28,235.409 1165.85,235.179 1166.42,234.893 1166.99,234.481 1167.56,235.187 1168.12,236.116 1168.69,234.824 1169.26,232.526 1169.83,230.379 1170.4,231.493 1170.97,231.422 1171.53,229.162 1172.1,228.138 1172.67,227.334 1173.24,229.674 1173.81,229.913 1174.38,230.251 1174.94,230.502 1175.51,233.669 1176.08,231.228 1176.65,234.251 1177.22,234.156 1177.79,233.989 1178.35,230.797 1178.92,228.577 1179.49,226.645 1180.06,226.828 1180.63,227.07 1181.2,226.346 1181.76,226.59 1182.33,228.935 1182.9,228.158 1183.47,229.508 1184.04,231.016 1184.61,230.182 1185.17,230.217 1185.74,232.351 1186.31,232.476 1186.88,231.177 1187.45,231.143 1188.02,229.901 1188.58,229.896 1189.15,231.935 1189.72,232.014 1190.29,234.311 1190.86,234.217 1191.43,232.933 1192,233.745 1192.56,232.686 1193.13,231.628 1193.7,232.573 1194.27,233.523 1194.84,232.516 1195.41,233.456 1195.97,234.241 1196.54,234.848 1197.11,234.663 1197.68,232.276 1198.25,230.208 1198.82,230.563 1199.38,230.629 1199.95,230.733 1200.52,230.509 1201.09,231.578 1201.66,233.686 1202.23,236.466 1202.79,235.791 1203.36,234.536 1203.93,232.468 1204.5,233.345 1205.07,232.061 1205.64,232.935 1206.2,235.994 1206.77,234.544 1207.34,233.066 1207.91,234.912 1208.48,233.391 1209.05,232.137 1209.61,231.812 1210.18,230.559 1210.75,232.474 1211.32,229.157 1211.89,229.157 1212.46,229.229 1213.02,228.164 1213.59,228.044 1214.16,229.321 1214.73,230.441 1215.3,231.463 1215.87,230.226 1216.43,231.321 1217,229.044 1217.57,227.022 1218.14,226.18 1218.71,222.207 1219.28,225.153 1219.84,226.563 1220.41,225.791 1220.98,228.037 1221.55,229.119 1222.12,227.022 1222.69,223.362 1223.25,228.024 1223.82,228.221 1224.39,230.601 1224.96,229.617 1225.53,230.797 1226.1,231.894 1226.66,232.925 1227.23,229.648 1227.8,228.653 1228.37,228.634 1228.94,231.029 1229.51,229.99 1230.07,228.018 1230.64,227.348 1231.21,228.446 1231.78,229.563 1232.35,229.803 1232.92,230.037 1233.48,227.034 1234.05,228.171 1234.62,229.321 1235.19,229.498 1235.76,230.717 1236.33,231.731 1236.89,231.867 1237.46,231.823 1238.03,229.638 1238.6,229.477 1239.17,227.531 1239.74,226.761 1240.3,228.333 1240.87,228.468 1241.44,228.458 1242.01,229.75 1242.58,230.002 1243.15,231.051 1243.71,231.076 1244.28,231.171 1244.85,232.163 1245.42,234.186 1245.99,234.123 1246.56,233.962 1247.12,232.814 1247.69,231.857 1248.26,230.8 1248.83,229.792 1249.4,230.67 1249.97,232.018 1250.53,230.935 1251.1,230.772 1251.67,229.719 1252.24,229.073 1252.81,230.285 1253.38,231.423 1253.94,231.485 1254.51,234.452 1255.08,235.15 1255.65,233.883 1256.22,234.565 1256.79,233.389 1257.35,231.286 1257.92,230.167 1258.49,230.327 1259.06,230.506 1259.63,231.86 1260.2,230.715 1260.76,230.905 1261.33,230.802 1261.9,231.811 1262.47,233.09 1263.04,230.887 1263.61,229.958 1264.18,231.128 1264.74,232.409 1265.31,234.159 1265.88,236.08 1266.45,235.78 1267.02,235.518 1267.59,234.276 1268.15,236.382 1268.72,233.176 1269.29,232.895 1269.86,233.608 1270.43,233.469 1271,234.091 1271.56,231.814 1272.13,230.723 1272.7,230.875 1273.27,234.075 1273.84,232.683 1274.41,232.499 1274.97,234.318 1275.54,234.804 1276.11,234.365 1276.68,234.958 1277.25,233.505 1277.82,234.151 1278.38,233.083 1278.95,232.137 1279.52,230.969 1280.09,229.989 1280.66,228.808 1281.23,227.76 1281.79,228.946 1282.36,226.971 1282.93,227.428 1283.5,226.468 1284.07,227.684 1284.64,229.01 1285.2,231.204 1285.77,230.307 1286.34,230.325 1286.91,230.671 1287.48,230.635 1288.05,229.721 1288.61,229.963 1289.18,231.955 1289.75,229.648 1290.32,229.54 1290.89,230.849 1291.46,230.847 1292.02,228.859 1292.59,229.009 1293.16,229.234 1293.73,228.234 1294.3,232.443 1294.87,231.318 1295.43,229.468 1296,227.401 1296.57,228.43 1297.14,227.536 1297.71,226.907 1298.28,227.242 1298.84,226.503 1299.41,225.71 1299.98,226.103 1300.55,227.397 1301.12,227.952 1301.69,227.134 1302.25,231.572 1302.82,231.615 1303.39,231.646 1303.96,231.625 1304.53,232.767 1305.1,232.945 1305.66,232.824 1306.23,232.583 1306.8,231.375 1307.37,233.421 1307.94,234.561 1308.51,234.507 1309.07,234.184 1309.64,234.928 1310.21,234.846 1310.78,235.512 1311.35,233.443 1311.92,233.095 1312.48,233.22 1313.05,230.961 1313.62,228.783 1314.19,229.024 1314.76,228.061 1315.33,227.159 1315.89,226.284 1316.46,227.702 1317.03,230.719 1317.6,230.799 1318.17,230.733 1318.74,231.765 1319.3,229.652 1319.87,229.597 1320.44,229.622 1321.01,229.649 1321.58,227.73 1322.15,228.181 1322.71,228.422 1323.28,227.877 1323.85,228.094 1324.42,228.638 1324.99,229.22 1325.56,230.255 1326.12,230.217 1326.69,230.251 1327.26,230.467 1327.83,229.664 1328.4,229.875 1328.97,229.972 1329.53,229.166 1330.1,232.458 1330.67,229.297 1331.24,232.405 1331.81,233.132 1332.38,234.012 1332.94,233.707 1333.51,233.442 1334.08,234.482 1334.65,234.491 1335.22,234.161 1335.79,233.94 1336.36,234.706 1336.92,236.449 1337.49,236.186 1338.06,234.704 1338.63,235.438 1339.2,234.038 1339.77,234.799 1340.33,234.562 1340.9,232.222 1341.47,231.077 1342.04,229.162 1342.61,227.245 1343.18,228.638 1343.74,230.061 1344.31,231.285 1344.88,232.36 1345.45,231.259 1346.02,233.307 1346.59,233.268 1347.15,231.188 1347.72,231.136 1348.29,230.115 1348.86,229.113 1349.43,226.286 1350,227.703 1350.56,228.095 1351.13,230.245 1351.7,229.271 1352.27,229.683 1352.84,231.057 1353.41,235.212 1353.97,235.055 1354.54,234.89 1355.11,235.449 1355.68,235.028 1356.25,233.691 1356.82,232.554 1357.38,230.339 1357.95,229.508 1358.52,230.753 1359.09,229.877 1359.66,230.929 1360.23,226.494 1360.79,228.009 1361.36,229.274 1361.93,229.573 1362.5,229.661 1363.07,229.791 1363.64,227.63 1364.2,228.941 1364.77,230.237 1365.34,233.557 1365.91,230.482 1366.48,230.528 1367.05,232.676 1367.61,233.72 1368.18,233.462 1368.75,234.252 1369.32,232.983 1369.89,230.864 1370.46,233.971 1371.02,234.798 1371.59,234.354 1372.16,232.964 1372.73,232.667 1373.3,233.4 1373.87,233.071 1374.43,232.805 1375,232.824 1375.57,231.574 1376.14,231.608 1376.71,230.553 1377.28,229.742 1377.84,229.941 1378.41,227.144 1378.98,226.336 1379.55,225.763 1380.12,221.94 1380.69,223.611 1381.25,223.379 1381.82,226.976 1382.39,229.491 1382.96,229.627 1383.53,230.057 1384.1,232.321 1384.66,229.057 1385.23,228.156 1385.8,228.416 1386.37,229.456 1386.94,231.557 1387.51,232.554 1388.07,232.614 1388.64,234.482 1389.21,235.218 1389.78,233.691 1390.35,232.674 1390.92,230.453 1391.48,227.627 1392.05,226.828 1392.62,229.218 1393.19,230.484 1393.76,233.597 1394.33,231.461 1394.89,230.54 1395.46,231.678 1396.03,233.548 1396.6,232.262 1397.17,234.384 1397.74,235.086 1398.3,234.769 1398.87,235.643 1399.44,235.359 1400.01,233.936 1400.58,233.694 1401.15,232.532 1401.71,233.498 1402.28,233.273 1402.85,232.944 1403.42,233.78 1403.99,233.427 1404.56,231.425 1405.13,231.335 1405.69,231.21 1406.26,231.304 1406.83,231.253 1407.4,229.914 1407.97,229.976 1408.54,228.995 1409.1,229.182 1409.67,231.247 1410.24,233.323 1410.81,234.159 1411.38,234.89 1411.95,234.454 1412.51,232.136 1413.08,230.928 1413.65,228.844 1414.22,229.952 1414.79,229.801 1415.36,228.642 1415.92,227.673 1416.49,229.743 1417.06,229.535 1417.63,229.46 1418.2,229.621 1418.77,226.749 1419.33,228.137 1419.9,227.336 1420.47,228.592 1421.04,227.66 1421.61,229.105 1422.18,230.259 1422.74,231.438 1423.31,230.353 1423.88,230.378 1424.45,227.439 1425.02,225.773 1425.59,226.268 1426.15,226.701 1426.72,227.817 1427.29,227.863 1427.86,229.099 1428.43,230.291 1429,230.403 1429.56,229.414 1430.13,230.735 1430.7,230.608 1431.27,228.614 1431.84,228.723 1432.41,229.694 1432.97,231.982 1433.54,232.645 1434.11,236.786 1434.68,235.377 1435.25,233.936 1435.82,234.721 1436.38,233.557 1436.95,233.219 1437.52,232.978 1438.09,234.943 1438.66,233.761 1439.23,231.715 1439.79,232.886 1440.36,233.97 1440.93,234.105 1441.5,234.88 1442.07,234.443 1442.64,233.031 1443.2,232.18 1443.77,231.948 1444.34,229.872 1444.91,229.01 1445.48,230.535 1446.05,229.407 1446.61,229.716 1447.18,228.812 1447.75,227.899 1448.32,228.286 1448.89,229.569 1449.46,228.612 1450.02,228.013 1450.59,226.337 1451.16,227.741 1451.73,227.09 1452.3,227.424 1452.87,228.858 1453.43,227.926 1454,228.285 1454.57,227.469 1455.14,230.79 1455.71,228.648 1456.28,229.762 1456.84,229.856 1457.41,227.767 1457.98,224.872 1458.55,223.268 1459.12,223.902 1459.69,223.563 1460.25,224.28 1460.82,226.858 1461.39,227.067 1461.96,227.343 1462.53,228.561 1463.1,228.991 1463.66,230.225 1464.23,230.288 1464.8,230.321 1465.37,231.594 1465.94,231.712 1466.51,232.682 1467.07,232.743 1467.64,233.684 1468.21,232.719 1468.78,234.687 1469.35,236.685 1469.92,238.477 1470.48,237.93 1471.05,235.405 1471.62,232.929 1472.19,232.771 1472.76,233.513 1473.33,233.575 1473.89,233.496 1474.46,231.47 1475.03,234.691 1475.6,236.561 1476.17,234.102 1476.74,234.853 1477.31,236.766 1477.87,239.613 1478.44,241.048 1479.01,240.488 1479.58,240.94 1480.15,240.252 1480.72,239.577 1481.28,235.896 1481.85,234.542 1482.42,232.273 1482.99,232.226 1483.56,231.312 1484.13,230.255 1484.69,231.377 1485.26,229.327 1485.83,227.501 1486.4,226.978 1486.97,224.124 1487.54,225.719 1488.1,224.135 1488.67,224.549 1489.24,227.986 1489.81,229.401 1490.38,232.436 1490.95,232.123 1491.51,230.927 1492.08,229.826 1492.65,228.84 1493.22,228.999 1493.79,228.153 1494.36,228.408 1494.92,229.804 1495.49,229.091 1496.06,229.328 1496.63,231.573 1497.2,232.656 1497.77,232.591 1498.33,232.629 1498.9,232.659 1499.47,232.596 1500.04,229.303 1500.61,230.369 1501.18,234.632 1501.74,234.256 1502.31,236.143 1502.88,235.921 1503.45,239.778 1504.02,241.305 1504.59,239.681 1505.15,240.203 1505.72,237.31 1506.29,240.011 1506.86,240.394 1507.43,239.796 1508,239 1508.56,239.33 1509.13,239.685 1509.7,240.006 1510.27,239.12 1510.84,238.274 1511.41,238.755 1511.97,236.997 1512.54,237.506 1513.11,238.089 1513.68,238.46 1514.25,236.53 1514.82,236.171 1515.38,234.802 1515.95,233.29 1516.52,230.996 1517.09,230.958 1517.66,230.518 1518.23,228.37 1518.79,226.218 1519.36,226.392 1519.93,227.753 1520.5,226.673 1521.07,226.751 1521.64,226.675 1522.2,227.888 1522.77,225.759 1523.34,226.796 1523.91,223.803 1524.48,224.114 1525.05,224.552 1525.61,223.041 1526.18,223.551 1526.75,224.021 1527.32,222.481 1527.89,222.067 1528.46,222.636 1529.02,220.225 1529.59,219.895 1530.16,221.635 1530.73,222.431 1531.3,222.996 1531.87,222.658 1532.43,222.095 1533,221.819 1533.57,222.834 1534.14,225.624 1534.71,224.988 1535.28,225.213 1535.84,225.813 1536.41,225.306 1536.98,227.834 1537.55,230.328 1538.12,228.266 1538.69,228.618 1539.25,229.796 1539.82,228.768 1540.39,229.092 1540.96,229.356 1541.53,229.58 1542.1,229.827 1542.66,228.965 1543.23,227.972 1543.8,228.449 1544.37,228.976 1544.94,230.594 1545.51,229.688 1546.08,233.89 1546.64,230.647 1547.21,228.64 1547.78,229.882 1548.35,232.094 1548.92,232.244 1549.49,232.336 1550.05,232.346 1550.62,233.284 1551.19,234.244 1551.76,234.014 1552.33,236.815 1552.9,236.546 1553.46,235.229 1554.03,235.245 1554.6,236.278 1555.17,234.842 1555.74,233.696 1556.31,234.568 1556.87,235.445 1557.44,234.35 1558.01,234.083 1558.58,232.817 1559.15,232.742 1559.72,231.79 1560.28,232.855 1560.85,232.677 1561.42,234.596 1561.99,233.23 1562.56,231.824 1563.13,232.75 1563.69,231.616 1564.26,231.329 1564.83,231.475 1565.4,233.401 1565.97,235.276 1566.54,235.996 1567.1,238.007 1567.67,236.476 1568.24,234.989 1568.81,233.585 1569.38,232.287 1569.95,234.19 1570.51,235.815 1571.08,235.461 1571.65,235.263 1572.22,235.03 1572.79,235.618 1573.36,234.241 1573.92,231.714 1574.49,231.924 1575.06,233.795 1575.63,234.522 1576.2,234.329 1576.77,232.127 1577.33,233.987 1577.9,233.758 1578.47,233.257 1579.04,233.09 1579.61,231.895 1580.18,233.781 1580.74,233.553 1581.31,232.416 1581.88,231.357 1582.45,230.18 1583.02,231.171 1583.59,229.963 1584.15,229.924 1584.72,229.995 1585.29,230.858 1585.86,230.843 1586.43,231.85 1587,231.561 1587.56,231.471 1588.13,230.445 1588.7,229.201 1589.27,229.218 1589.84,233.25 1590.41,236.009 1590.97,236.389 1591.54,233.783 1592.11,233.482 1592.68,234.169 1593.25,234.806 1593.82,234.371 1594.38,234.844 1594.95,234.435 1595.52,233.917 1596.09,230.518 1596.66,231.625 1597.23,230.497 1597.79,232.572 1598.36,232.933 1598.93,230.712 1599.5,231.659 1600.07,232.493 1600.64,231.864 1601.2,233.766 1601.77,233.341 1602.34,231.933 1602.91,231.585 1603.48,231.565 1604.05,227.324 1604.61,224.634 1605.18,222.932 1605.75,224.341 1606.32,224.96 1606.89,225.419 1607.46,225.732 1608.02,226.999 1608.59,226.222 1609.16,227.623 1609.73,227.597 1610.3,226.834 1610.87,227.947 1611.43,225.994 1612,226.017 1612.57,226.41 1613.14,226.731 1613.71,227.027 1614.28,226.118 1614.84,225.517 1615.41,224.722 1615.98,225.34 1616.55,227.984 1617.12,229.327 1617.69,229.574 1618.26,230.462 1618.82,231.335 1619.39,232.425 1619.96,231.49 1620.53,229.539 1621.1,229.677 1621.67,231.475 1622.23,230.461 1622.8,230.427 1623.37,231.529 1623.94,230.671 1624.51,230.56 1625.08,230.597 1625.64,230.561 1626.21,229.51 1626.78,229.73 1627.35,230.59 1627.92,229.636 1628.49,229.631 1629.05,229.796 1629.62,227.786 1630.19,227.07 1630.76,226.326 1631.33,225.863 1631.9,226.339 1632.46,227.715 1633.03,229.215 1633.6,227.415 1634.17,226.864 1634.74,226.265 1635.31,226.522 1635.87,227.042 1636.44,227.538 1637.01,225.777 1637.58,226.226 1638.15,225.744 1638.72,227.414 1639.28,228.766 1639.85,229.022 1640.42,231.224 1640.99,232.377 1641.56,234.377 1642.13,235.177 1642.69,237.142 1643.26,237.084 1643.83,235.657 1644.4,234.497 1644.97,236.349 1645.54,237.957 1646.1,238.277 1646.67,237.927 1647.24,236.548 1647.81,234.936 1648.38,235.746 1648.95,235.546 1649.51,233.168 1650.08,230.18 1650.65,231.256 1651.22,227.95 1651.79,228.134 1652.36,231.398 1652.92,232.374 1653.49,232.239 1654.06,232.144 1654.63,230.034 1655.2,230.198 1655.77,230.247 1656.33,227.285 1656.9,223.553 1657.47,226.103 1658.04,225.502 1658.61,225.941 1659.18,225.282 1659.74,224.634 1660.31,226.321 1660.88,227.748 1661.45,231.174 1662.02,231.326 1662.59,233.494 1663.15,235.493 1663.72,235.306 1664.29,236.165 1664.86,235.782 1665.43,234.469 1666,234.132 1666.56,234.069 1667.13,235.012 1667.7,233.76 1668.27,232.447 1668.84,233.681 1669.41,233.547 1669.97,231.298 1670.54,232.232 1671.11,231.035 1671.68,229.956 1672.25,228.188 1672.82,229.465 1673.38,229.36 1673.95,228.64 1674.52,227.955 1675.09,228.408 1675.66,228.58 1676.23,228.78 1676.79,231.029 1677.36,231.099 1677.93,235.314 1678.5,235.037 1679.07,234.66 1679.64,234.488 1680.2,235.454 1680.77,237.388 1681.34,238.998 1681.91,239.258 1682.48,237.583 1683.05,237.003 1683.61,236.428 1684.18,236.922 1684.75,235.389 1685.32,235.96 1685.89,235.465 1686.46,236.033 1687.02,235.666 1687.59,235.323 1688.16,235.873 1688.73,236.686 1689.3,236.119 1689.87,233.578 1690.44,233.343 1691,234.222 1691.57,232.863 1692.14,231.656 1692.71,231.736 1693.28,229.6 1693.85,229.435 1694.41,228.425 1694.98,229.532 1695.55,230.597 1696.12,229.592 1696.69,229.65 1697.26,230.689 1697.82,230.655 1698.39,228.507 1698.96,227.438 1699.53,230.501 1700.1,232.448 1700.67,232.294 1701.23,232.001 1701.8,231.825 1702.37,230.76 1702.94,230.499 1703.51,231.411 1704.08,231.522 1704.64,231.404 1705.21,229.045 1705.78,226.05 1706.35,224.163 1706.92,224.623 1707.49,224.904 1708.05,226.261 1708.62,228.53 1709.19,229.85 1709.76,231.067 1710.33,231.105 1710.9,232.042 1711.46,230.835 1712.03,232.996 1712.6,232.674 1713.17,232.594 1713.74,233.376 1714.31,233.117 1714.87,232.887 1715.44,230.739 1716.01,229.731 1716.58,228.791 1717.15,228.785 1717.72,230.021 1718.28,231.112 1718.85,229.998 1719.42,231.233 1719.99,230.305 1720.56,230.266 1721.13,230.126 1721.69,231.143 1722.26,228.031 1722.83,228.164 1723.4,227.317 1723.97,227.514 1724.54,228.256 1725.1,228.412 1725.67,228.537 1726.24,227.801 1726.81,229.154 1727.38,229.301 1727.95,227.373 1728.51,228.599 1729.08,227.76 1729.65,228.292 1730.22,226.229 1730.79,226.88 1731.36,227.178 1731.92,226.475 1732.49,227.984 1733.06,228.357 1733.63,229.504 1734.2,228.504 1734.77,227.695 1735.33,225.935 1735.9,225.404 1736.47,224.074 1737.04,223.672 1737.61,223.371 1738.18,224.01 1738.74,225.62 1739.31,226.033 1739.88,226.421 1740.45,227.655 1741.02,230.157 1741.59,232.299 1742.15,233.358 1742.72,232.089 1743.29,233.139 1743.86,233.267 1744.43,231.088 1745,233.34 1745.56,230.225 1746.13,232.663 1746.7,234.637 1747.27,233.45 1747.84,232.536 1748.41,234.658 1748.97,233.551 1749.54,234.393 1750.11,234.531 1750.68,233.344 1751.25,231.208 1751.82,234.105 1752.38,235.895 1752.95,237.836 1753.52,237.464 1754.09,238.055 1754.66,238.772 1755.23,240.339 1755.79,238.738 1756.36,237.988 1756.93,239.638 1757.5,238.882 1758.07,237.454 1758.64,235.802 1759.21,234.452 1759.77,233.363 1760.34,231.042 1760.91,231.143 1761.48,230.994 1762.05,229.871 1762.62,228.856 1763.18,228.737 1763.75,228.088 1764.32,228.069 1764.89,230.256 1765.46,228.011 1766.03,228.235 1766.59,230.39 1767.16,230.58 1767.73,229.543 1768.3,232.737 1768.87,233.87 1769.44,235.752 1770,234.548 1770.57,233.298 1771.14,234.229 1771.71,232.583 1772.28,233.52 1772.85,232.098 1773.41,232.064 1773.98,230.051 1774.55,231.885 1775.12,232.106 1775.69,233.066 1776.26,233.82 1776.82,236.609 1777.39,235.065 1777.96,235.811 1778.53,234.481 1779.1,234.042 1779.67,232.682 1780.23,231.634 1780.8,230.333 1781.37,231.064 1781.94,231.007 1782.51,230.98 1783.08,230.871 1783.64,230.799 1784.21,229.781 1784.78,229.779 1785.35,229.855 1785.92,228.883 1786.49,228.018 1787.05,227.083 1787.62,228.47 1788.19,228.71 1788.76,229.846 1789.33,229.834 1789.9,227.922 1790.46,228.341 1791.03,229.586 1791.6,229.675 1792.17,227.927 1792.74,227.141 1793.31,229.445 1793.87,227.305 1794.44,227.521 1795.01,225.712 1795.58,225.177 1796.15,226.652 1796.72,225.987 1797.28,225.344 1797.85,224.76 1798.42,225.267 1798.99,225.805 1799.56,227.351 1800.13,228.665 1800.69,228.832 1801.26,230.011 1801.83,230.325 1802.4,230.524 1802.97,227.669 1803.54,226.788 1804.1,227.214 1804.67,226.642 1805.24,228.063 1805.81,230.469 1806.38,228.411 1806.95,231.589 1807.51,229.469 1808.08,228.587 1808.65,233.855 1809.22,233.736 1809.79,232.744 1810.36,231.619 1810.92,230.643 1811.49,232.837 1812.06,233.855 1812.63,233.83 1813.2,232.732 1813.77,230.683 1814.33,232.87 1814.9,234.108 1815.47,235.019 1816.04,234.868 1816.61,233.741 1817.18,234.8 1817.74,233.232 1818.31,234.058 1818.88,232.702 1819.45,230.571 1820.02,229.614 1820.59,230.753 1821.15,231.858 1821.72,230.678 1822.29,230.65 1822.86,234.047 1823.43,233.03 1824,235.871 1824.56,237.729 1825.13,237.105 1825.7,237.762 1826.27,238.192 1826.84,237.406 1827.41,237.808 1827.97,236.28 1828.54,234.81 1829.11,234.349 1829.68,234.164 1830.25,233.976 1830.82,232.903 1831.39,232.544 1831.95,233.45 1832.52,234.331 1833.09,234.169 1833.66,234.921 1834.23,233.481 1834.8,233.531 1835.36,234.333 1835.93,230.798 1836.5,229.775 1837.07,227.869 1837.64,227.053 1838.21,227.436 1838.77,226.661 1839.34,226.782 1839.91,225.727 1840.48,230.108 1841.05,229.287 1841.62,231.375 1842.18,230.557 1842.75,230.548 1843.32,230.627 1843.89,228.54 1844.46,230.489 1845.03,232.372 1845.59,231.058 1846.16,231.898 1846.73,232.917 1847.3,231.623 1847.87,231.789 1848.44,230.803 1849,229.679 1849.57,227.632 1850.14,226.929 1850.71,229.27 1851.28,230.431 1851.85,228.559 1852.41,228.64 1852.98,229.926 1853.55,228.831 1854.12,227.017 1854.69,227.305 1855.26,228.525 1855.82,228.456 1856.39,230.381 1856.96,231.214 1857.53,231.986 1858.1,230.859 1858.67,230.665 1859.23,231.643 1859.8,231.595 1860.37,232.369 1860.94,232.068 1861.51,230.974 1862.08,231.9 1862.64,231.671 1863.21,232.477 1863.78,231.446 1864.35,230.449 1864.92,230.563 1865.49,230.471 1866.05,228.374 1866.62,228.711 1867.19,227.906 1867.76,227.146 1868.33,227.6 1868.9,227.868 1869.46,231.17 1870.03,231.046 1870.6,230.867 1871.17,227.947 1871.74,229.77 1872.31,228.983 1872.87,229.069 1873.44,229.134 1874.01,230.389 1874.58,231.468 1875.15,231.665 1875.72,230.569 1876.28,230.466 1876.85,231.412 1877.42,230.548 1877.99,229.724 1878.56,226.891 1879.13,226.448 1879.69,226.865 1880.26,228.117 1880.83,224.938 1881.4,225.354 1881.97,223.863 1882.54,222.345 1883.1,227.407 1883.67,229.871 1884.24,228.018 1884.81,227.472 1885.38,228.778 1885.95,231.229 1886.51,230.06 1887.08,230.155 1887.65,228.087 1888.22,229.149 1888.79,229.265 1889.36,229.487 1889.92,230.757 1890.49,229.658 1891.06,232.865 1891.63,234.764 1892.2,233.594 1892.77,232.506 1893.33,234.432 1893.9,235.099 1894.47,233.76 1895.04,232.774 1895.61,231.813 1896.18,231.964 1896.74,230.868 1897.31,230.803 1897.88,229.906 1898.45,230.142 1899.02,230.142 1899.59,230.164 1900.16,229.394 1900.72,229.696 1901.29,230.869 1901.86,232.064 1902.43,230.112 1903,230.368 1903.57,232.582 1904.13,231.587 1904.7,232.626 1905.27,234.543 1905.84,236.292 1906.41,234.108 1906.98,237.967 1907.54,236.435 1908.11,235.035 1908.68,236.938 1909.25,236.572 1909.82,235.108 1910.39,234.851 1910.95,235.583 1911.52,235.242 1912.09,236.008 1912.66,233.6 1913.23,232.424 1913.8,233.232 1914.36,231.912 1914.93,229.772 1915.5,231.033 1916.07,228.885 1916.64,231.125 1917.21,233.105 1917.77,233.094 1918.34,231.947 1918.91,233.897 1919.48,231.646 1920.05,231.571 1920.62,229.456 1921.18,229.504 1921.75,229.29 1922.32,228.435 1922.89,228.697 1923.46,228.578 1924.03,229.657 1924.59,230.733 1925.16,231.567 1925.73,231.537 1926.3,231.406 1926.87,230.149 1927.44,228.955 1928,232.957 1928.57,232.928 1929.14,231.795 1929.71,231.574 1930.28,230.499 1930.85,232.759 1931.41,233.731 1931.98,233.508 1932.55,233.495 1933.12,232.271 1933.69,233.227 1934.26,233.111 1934.82,231.894 1935.39,228.679 1935.96,229.797 1936.53,226.858 1937.1,226.897 1937.67,227.067 1938.23,228.645 1938.8,230.027 1939.37,231.103 1939.94,232.152 1940.51,232.898 1941.08,229.86 1941.64,229.87 1942.21,229.979 1942.78,231.081 1943.35,230.944 1943.92,229.88 1944.49,231.029 1945.05,231.831 1945.62,229.719 1946.19,230.723 1946.76,231.685 1947.33,232.632 1947.9,233.548 1948.46,232.425 1949.03,232.141 1949.6,232.031 1950.17,233.993 1950.74,234.952 1951.31,234.718 1951.87,235.4 1952.44,233.03 1953.01,230.741 1953.58,231.669 1954.15,231.389 1954.72,233.235 1955.28,231.82 1955.85,229.708 1956.42,227.598 1956.99,226.834 1957.56,228.077 1958.13,227.279 1958.69,227.489 1959.26,226.781 1959.83,227.309 1960.4,227.632 1960.97,226.868 1961.54,226.257 1962.1,225.986 1962.67,224.541 1963.24,225.007 1963.81,226.36 1964.38,223.735 1964.95,223.159 1965.51,221.821 1966.08,222.692 1966.65,222.4 1967.22,226.355 1967.79,226.851 1968.36,227.323 1968.92,227.647 1969.49,230.317 1970.06,229.383 1970.63,229.631 1971.2,231.193 1971.77,231.03 1972.34,234.278 1972.9,234.181 1973.47,233.724 1974.04,234.552 1974.61,234.362 1975.18,232.871 1975.75,231.659 1976.31,231.791 1976.88,233.724 1977.45,232.551 1978.02,231.466 1978.59,230.419 1979.16,231.318 1979.72,233.405 1980.29,232.392 1980.86,230.166 1981.43,233.462 1982,234.295 1982.57,237.154 1983.13,238.771 1983.7,234.087 1984.27,232.642 1984.84,232.672 1985.41,231.577 1985.98,232.437 1986.54,233.54 1987.11,234.251 1987.68,234.17 1988.25,235.128 1988.82,233.893 1989.39,230.595 1989.95,231.753 1990.52,232.801 1991.09,231.684 1991.66,232.788 1992.23,232.294 1992.8,230.342 1993.36,231.458 1993.93,232.535 1994.5,232.363 1995.07,233.578 1995.64,233.286 1996.21,233.187 1996.77,231.887 1997.34,232.766 1997.91,234.726 1998.48,236.571 1999.05,235.143 1999.62,233.79 2000.18,233.505 2000.75,235.52 2001.32,233.197 2001.89,237.088 2002.46,238.546 2003.03,236.949 2003.59,236.351 2004.16,234.93 2004.73,235.473 2005.3,233.009 2005.87,231.575 2006.44,233.479 2007,232.229 2007.57,234.122 2008.14,235.718 2008.71,235.078 2009.28,235.719 2009.85,235.316 2010.41,235.03 2010.98,235.516 2011.55,234.16 2012.12,233.97 2012.69,235.618 2013.26,234.16 2013.82,233.827 2014.39,233.763 2014.96,232.593 2015.53,232.395 2016.1,230.161 2016.67,230.015 2017.23,229.929 2017.8,231.725 2018.37,231.659 2018.94,231.488 2019.51,235.591 2020.08,234.114 2020.64,232.918 2021.21,233.767 2021.78,232.371 2022.35,231.19 2022.92,230.008 2023.49,230.753 2024.05,229.444 2024.62,230.438 2025.19,230.45 2025.76,230.377 2026.33,231.125 2026.9,231.083 2027.46,231.928 2028.03,230.777 2028.6,227.513 2029.17,227.443 2029.74,228.705 2030.31,228.891 2030.87,227.768 2031.44,224.846 2032.01,225.067 2032.58,225.579 2033.15,224.677 2033.72,227.01 2034.28,228.114 2034.85,228.198 2035.42,227.23 2035.99,227.198 2036.56,227.349 2037.13,227.497 2037.69,227.508 2038.26,228.735 2038.83,227.663 2039.4,227.965 2039.97,227.108 2040.54,226.205 2041.11,227.298 2041.67,226.362 2042.24,225.815 2042.81,227.105 2043.38,227.317 2043.95,226.652 2044.52,227.187 2045.08,227.564 2045.65,225.812 2046.22,227.181 2046.79,229.496 2047.36,229.627 2047.93,228.662 2048.49,228.948 2049.06,230.018 2049.63,231.076 2050.2,231.947 2050.77,231.733 2051.34,233.868 2051.9,231.659 2052.47,231.76 2053.04,230.58 2053.61,229.491 2054.18,227.404 2054.75,227.762 2055.31,227.817 2055.88,225.853 2056.45,227.299 2057.02,228.452 2057.59,226.361 2058.16,225.742 2058.72,226.856 2059.29,227.407 2059.86,227.732 2060.43,229.137 2061,228.283 2061.57,228.734 2062.13,229.923 2062.7,229.144 2063.27,226.384 2063.84,225.88 2064.41,226.087 2064.98,224.688 2065.54,224.325 2066.11,224.758 2066.68,224.442 2067.25,223.992 2067.82,225.642 2068.39,227.116 2068.95,228.529 2069.52,233.107 2070.09,233.994 2070.66,232.761 2071.23,234.725 2071.8,233.527 2072.36,232.295 2072.93,232.421 2073.5,232.342 2074.07,233.472 2074.64,234.495 2075.21,233.206 2075.77,233.273 2076.34,233.177 2076.91,233.165 2077.48,234.273 2078.05,233.992 2078.62,232.811 2079.18,232.761 2079.75,231.583 2080.32,229.359 2080.89,228.449 2081.46,229.94 2082.03,233.005 2082.59,232.895 2083.16,231.868 2083.73,231.943 2084.3,234.08 2084.87,234.008 2085.44,233.775 2086,234.874 2086.57,232.726 2087.14,232.633 2087.71,232.631 2088.28,232.359 2088.85,231.444 2089.41,232.642 2089.98,231.757 2090.55,232.708 2091.12,231.762 2091.69,232.638 2092.26,233.698 2092.82,232.219 2093.39,231.072 2093.96,231.181 2094.53,229.055 2095.1,230.217 2095.67,229.12 2096.23,229.513 2096.8,229.763 2097.37,229.881 2097.94,231.004 2098.51,231.141 2099.08,231.168 2099.64,233.326 2100.21,233.113 2100.78,233.295 2101.35,235.501 2101.92,234.24 2102.49,234.196 2103.05,233.978 2103.62,232.658 2104.19,232.571 2104.76,233.473 2105.33,234.253 2105.9,230.915 2106.46,226.859 2107.03,228.188 2107.6,229.581 2108.17,230.668 2108.74,232.698 2109.31,231.455 2109.87,230.411 2110.44,227.282 2111.01,227.458 2111.58,227.665 2112.15,228.894 2112.72,227.963 2113.29,227.151 2113.85,227.444 2114.42,226.781 2114.99,230.007 2115.56,232.073 2116.13,231.079 2116.7,228.998 2117.26,228.295 2117.83,227.54 2118.4,227.794 2118.97,228.015 2119.54,227.129 2120.11,227.799 2120.67,228.166 2121.24,227.337 2121.81,226.678 2122.38,228.152 2122.95,228.482 2123.52,228.993 2124.08,230.521 2124.65,229.444 2125.22,229.752 2125.79,229.981 2126.36,233.024 2126.93,233.945 2127.49,232.891 2128.06,232.841 2128.63,234.051 2129.2,233.95 2129.77,232.959 2130.34,231.81 2130.9,231.002 2131.47,232.153 2132.04,234.326 2132.61,234.127 2133.18,234.784 2133.75,234.485 2134.31,233.231 2134.88,231.902 2135.45,231.87 2136.02,231.976 2136.59,230.005 2137.16,228.236 2137.72,229.641 2138.29,229.616 2138.86,230.71 2139.43,233.061 2140,232.148 2140.57,231.11 2141.13,228.952 2141.7,229.303 2142.27,231.481 2142.84,232.513 2143.41,233.564 2143.98,235.573 2144.54,233.205 2145.11,231.929 2145.68,231.765 2146.25,232.663 2146.82,232.509 2147.39,233.4 2147.95,231.051 2148.52,232.036 2149.09,230.046 2149.66,233.198 2150.23,233.063 2150.8,234.058 2151.36,234.806 2151.93,235.916 2152.5,236.542 2153.07,234.164 2153.64,232.675 2154.21,232.711 2154.77,234.763 2155.34,234.725 2155.91,232.498 2156.48,232.588 2157.05,231.643 2157.62,231.726 2158.18,228.672 2158.75,226.892 2159.32,226.044 2159.89,226.691 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.022\n  with uncertainty of ± 0.0020178848502913145\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01076 ± (0.00229919, 0.0024776) (MC)\n  95% confidence interval: [-4.0154, -4.00618]) (MC)\n  linear error propagation: -4.01136 ± 0.00243447\n  |δ_y| = |0.00186522| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0107574413485985, val_l = 0.004645260633842518, val_u = 0.004580941314110021)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip270\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip271\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip272\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.61 2211.02,1146.61 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,982.864 2211.02,982.864 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,819.119 2211.02,819.119 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,655.374 2211.02,655.374 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,491.629 2211.02,491.629 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,327.884 2211.02,327.884 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.61 365.751,1146.61 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,982.864 365.751,982.864 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,819.119 365.751,819.119 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,655.374 365.751,655.374 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,491.629 365.751,491.629 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,327.884 365.751,327.884 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M298.909 1132.41 Q295.298 1132.41 293.469 1135.97 Q291.664 1139.51 291.664 1146.64 Q291.664 1153.75 293.469 1157.31 Q295.298 1160.86 298.909 1160.86 Q302.543 1160.86 304.349 1157.31 Q306.177 1153.75 306.177 1146.64 Q306.177 1139.51 304.349 1135.97 Q302.543 1132.41 298.909 1132.41 M298.909 1128.7 Q304.719 1128.7 307.775 1133.31 Q310.853 1137.89 310.853 1146.64 Q310.853 1155.37 307.775 1159.98 Q304.719 1164.56 298.909 1164.56 Q293.099 1164.56 290.02 1159.98 Q286.964 1155.37 286.964 1146.64 Q286.964 1137.89 290.02 1133.31 Q293.099 1128.7 298.909 1128.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M259.557 996.209 L267.196 996.209 L267.196 969.843 L258.886 971.51 L258.886 967.25 L267.15 965.584 L271.826 965.584 L271.826 996.209 L279.465 996.209 L279.465 1000.14 L259.557 1000.14 L259.557 996.209 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 968.662 Q295.298 968.662 293.469 972.227 Q291.664 975.769 291.664 982.899 Q291.664 990.005 293.469 993.57 Q295.298 997.111 298.909 997.111 Q302.543 997.111 304.349 993.57 Q306.177 990.005 306.177 982.899 Q306.177 975.769 304.349 972.227 Q302.543 968.662 298.909 968.662 M298.909 964.959 Q304.719 964.959 307.775 969.565 Q310.853 974.149 310.853 982.899 Q310.853 991.625 307.775 996.232 Q304.719 1000.82 298.909 1000.82 Q293.099 1000.82 290.02 996.232 Q286.964 991.625 286.964 982.899 Q286.964 974.149 290.02 969.565 Q293.099 964.959 298.909 964.959 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M262.775 832.464 L279.094 832.464 L279.094 836.399 L257.15 836.399 L257.15 832.464 Q259.812 829.709 264.395 825.08 Q269.002 820.427 270.182 819.084 Q272.428 816.561 273.307 814.825 Q274.21 813.066 274.21 811.376 Q274.21 808.621 272.266 806.885 Q270.344 805.149 267.242 805.149 Q265.043 805.149 262.59 805.913 Q260.159 806.677 257.381 808.228 L257.381 803.506 Q260.205 802.371 262.659 801.793 Q265.113 801.214 267.15 801.214 Q272.52 801.214 275.715 803.899 Q278.909 806.584 278.909 811.075 Q278.909 813.205 278.099 815.126 Q277.312 817.024 275.205 819.617 Q274.627 820.288 271.525 823.505 Q268.423 826.7 262.775 832.464 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 804.918 Q295.298 804.918 293.469 808.482 Q291.664 812.024 291.664 819.154 Q291.664 826.26 293.469 829.825 Q295.298 833.367 298.909 833.367 Q302.543 833.367 304.349 829.825 Q306.177 826.26 306.177 819.154 Q306.177 812.024 304.349 808.482 Q302.543 804.918 298.909 804.918 M298.909 801.214 Q304.719 801.214 307.775 805.82 Q310.853 810.404 310.853 819.154 Q310.853 827.88 307.775 832.487 Q304.719 837.07 298.909 837.07 Q293.099 837.07 290.02 832.487 Q286.964 827.88 286.964 819.154 Q286.964 810.404 290.02 805.82 Q293.099 801.214 298.909 801.214 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M272.914 654.02 Q276.27 654.737 278.145 657.006 Q280.043 659.274 280.043 662.608 Q280.043 667.724 276.525 670.524 Q273.006 673.325 266.525 673.325 Q264.349 673.325 262.034 672.886 Q259.742 672.469 257.289 671.612 L257.289 667.099 Q259.233 668.233 261.548 668.811 Q263.863 669.39 266.386 669.39 Q270.784 669.39 273.076 667.654 Q275.39 665.918 275.39 662.608 Q275.39 659.552 273.238 657.839 Q271.108 656.103 267.289 656.103 L263.261 656.103 L263.261 652.261 L267.474 652.261 Q270.923 652.261 272.752 650.895 Q274.58 649.506 274.58 646.913 Q274.58 644.251 272.682 642.839 Q270.807 641.404 267.289 641.404 Q265.367 641.404 263.168 641.821 Q260.969 642.238 258.33 643.117 L258.33 638.951 Q260.992 638.21 263.307 637.839 Q265.645 637.469 267.705 637.469 Q273.029 637.469 276.131 639.9 Q279.233 642.307 279.233 646.427 Q279.233 649.298 277.59 651.288 Q275.946 653.256 272.914 654.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 641.173 Q295.298 641.173 293.469 644.738 Q291.664 648.279 291.664 655.409 Q291.664 662.515 293.469 666.08 Q295.298 669.622 298.909 669.622 Q302.543 669.622 304.349 666.08 Q306.177 662.515 306.177 655.409 Q306.177 648.279 304.349 644.738 Q302.543 641.173 298.909 641.173 M298.909 637.469 Q304.719 637.469 307.775 642.076 Q310.853 646.659 310.853 655.409 Q310.853 664.136 307.775 668.742 Q304.719 673.325 298.909 673.325 Q293.099 673.325 290.02 668.742 Q286.964 664.136 286.964 655.409 Q286.964 646.659 290.02 642.076 Q293.099 637.469 298.909 637.469 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M271.594 478.423 L259.789 496.872 L271.594 496.872 L271.594 478.423 M270.367 474.349 L276.247 474.349 L276.247 496.872 L281.177 496.872 L281.177 500.761 L276.247 500.761 L276.247 508.909 L271.594 508.909 L271.594 500.761 L255.992 500.761 L255.992 496.247 L270.367 474.349 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 477.428 Q295.298 477.428 293.469 480.993 Q291.664 484.534 291.664 491.664 Q291.664 498.77 293.469 502.335 Q295.298 505.877 298.909 505.877 Q302.543 505.877 304.349 502.335 Q306.177 498.77 306.177 491.664 Q306.177 484.534 304.349 480.993 Q302.543 477.428 298.909 477.428 M298.909 473.724 Q304.719 473.724 307.775 478.331 Q310.853 482.914 310.853 491.664 Q310.853 500.391 307.775 504.997 Q304.719 509.58 298.909 509.58 Q293.099 509.58 290.02 504.997 Q286.964 500.391 286.964 491.664 Q286.964 482.914 290.02 478.331 Q293.099 473.724 298.909 473.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M258.793 310.604 L277.15 310.604 L277.15 314.539 L263.076 314.539 L263.076 323.012 Q264.094 322.664 265.113 322.502 Q266.131 322.317 267.15 322.317 Q272.937 322.317 276.316 325.488 Q279.696 328.66 279.696 334.076 Q279.696 339.655 276.224 342.757 Q272.752 345.836 266.432 345.836 Q264.256 345.836 261.988 345.465 Q259.742 345.095 257.335 344.354 L257.335 339.655 Q259.418 340.789 261.641 341.345 Q263.863 341.9 266.34 341.9 Q270.344 341.9 272.682 339.794 Q275.02 337.687 275.02 334.076 Q275.02 330.465 272.682 328.359 Q270.344 326.252 266.34 326.252 Q264.465 326.252 262.59 326.669 Q260.738 327.086 258.793 327.965 L258.793 310.604 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 313.683 Q295.298 313.683 293.469 317.248 Q291.664 320.789 291.664 327.919 Q291.664 335.025 293.469 338.59 Q295.298 342.132 298.909 342.132 Q302.543 342.132 304.349 338.59 Q306.177 335.025 306.177 327.919 Q306.177 320.789 304.349 317.248 Q302.543 313.683 298.909 313.683 M298.909 309.979 Q304.719 309.979 307.775 314.586 Q310.853 319.169 310.853 327.919 Q310.853 336.646 307.775 341.252 Q304.719 345.836 298.909 345.836 Q293.099 345.836 290.02 341.252 Q286.964 336.646 286.964 327.919 Q286.964 319.169 290.02 314.586 Q293.099 309.979 298.909 309.979 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip272)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1025.96 400.199,915.114 400.786,813.413 401.372,842.637 401.958,751.391 402.545,665.91 403.131,589.849 403.718,518.576 404.304,642.605 404.891,576.122 405.477,515.707 406.063,537.716 406.65,554.417 407.236,503.943 407.823,457.497 408.409,415.734 408.995,379.296 409.582,345.958 410.168,318.539 410.755,293.634 411.341,317.739 411.927,296.229 412.514,278.676 413.1,262.926 413.687,250.423 414.273,240.326 414.86,232.321 415.446,226.551 416.032,222.645 416.619,220.534 417.205,219.895 417.792,245.011 418.378,247.505 418.964,251.003 419.551,294.12 420.137,316.334 420.724,338.762 421.31,359.472 421.896,363.883 422.483,369.816 423.069,403.121 423.656,409.535 424.242,416.874 424.829,436.825 425.415,444.816 426.001,463.773 426.588,481.501 427.174,492.593 427.761,520.604 428.347,546.5 428.933,570.767 429.52,586.296 430.106,594.503 430.693,602.98 431.279,611.941 431.865,633.237 432.452,647.588 433.038,662.651 433.625,677.501 434.211,707.522 434.798,725.94 435.384,738.545 435.97,746.354 436.557,758.845 437.143,771.396 437.73,787.811 438.316,799.581 438.902,811.053 439.489,818.341 440.075,833.307 440.662,847.897 441.248,861.801 441.835,871.489 442.421,880.955 443.007,890.711 443.594,903.315 444.18,909.035 444.767,918.194 445.353,927.149 445.939,938.831 446.526,947.335 447.112,955.626 447.699,963.603 448.285,977.072 448.871,985.068 449.458,995.251 450.044,1004.9 450.631,1007.32 451.217,1016.89 451.804,1021.14 452.39,1032.5 452.976,1043.55 453.563,1054.28 454.149,1062.39 454.736,1068.23 455.322,1073.92 455.908,1077.27 456.495,1082.82 457.081,1088.13 457.668,1093.57 458.254,1098.67 458.84,1101.93 459.427,1110.91 460.013,1119.14 460.6,1125.2 461.186,1131.07 461.773,1134.66 462.359,1136.5 462.945,1138.32 463.532,1141.83 464.118,1143.66 464.705,1149.05 465.291,1154.72 465.877,1160.19 466.464,1161.53 467.05,1161.59 467.637,1164.71 468.223,1171.28 468.809,1179.27 469.396,1181.53 469.982,1181.92 470.569,1185.64 471.155,1188.19 471.742,1191.83 472.328,1195.71 472.914,1197.2 473.501,1195.86 474.087,1197.71 474.674,1199.57 475.26,1196.59 475.846,1198.67 476.433,1198.87 477.019,1198.99 477.606,1200.91 478.192,1202.55 478.778,1201.39 479.365,1203.54 479.951,1202.31 480.538,1204.48 481.124,1206.25 481.711,1208.5 482.297,1211.73 482.883,1217.97 483.47,1219.54 484.056,1219.05 484.643,1220.52 485.229,1219.13 485.815,1221.91 486.402,1223.59 486.988,1225.22 487.575,1225.18 488.161,1227.63 488.748,1230.53 489.334,1229.87 489.92,1229.42 490.507,1228.94 491.093,1232.86 491.68,1235.59 492.266,1242.46 492.852,1247.22 493.439,1247.3 494.025,1247.57 494.612,1247.95 495.198,1246.43 495.784,1248.5 496.371,1248.76 496.957,1250.53 497.544,1249.28 498.13,1246.61 498.717,1245.38 499.303,1244.29 499.889,1244.97 500.476,1246.89 501.062,1248.4 501.649,1248.52 502.235,1247.55 502.821,1244.92 503.408,1245.65 503.994,1244.7 504.581,1242.13 505.167,1241.33 505.753,1243.44 506.34,1241.27 506.926,1236.28 507.513,1237.38 508.099,1241.15 508.686,1240.38 509.272,1241.08 509.858,1240.34 510.445,1238.42 511.031,1237.83 511.618,1240.16 512.204,1240.03 512.79,1236.55 513.377,1234.77 513.963,1234.64 514.55,1236.97 515.136,1235.29 515.722,1235.03 516.309,1234.63 516.895,1234.44 517.482,1237.1 518.068,1235.54 518.655,1235.35 519.241,1239.14 519.827,1238.6 520.414,1239.5 521,1240.44 521.587,1241.46 522.173,1239.74 522.759,1241.99 523.346,1242.86 523.932,1240.83 524.519,1240.21 525.105,1238.32 525.691,1240.57 526.278,1242.97 526.864,1241.25 527.451,1242.23 528.037,1241.43 528.624,1240.76 529.21,1237.31 529.796,1237.06 530.383,1238 530.969,1235.04 531.556,1234.78 532.142,1238.67 532.728,1237.12 533.315,1236.84 533.901,1236.71 534.488,1237.73 535.074,1238.85 535.661,1235.72 536.247,1235.77 536.833,1237.05 537.42,1236.76 538.006,1237.96 538.593,1238.64 539.179,1239.54 539.765,1240.67 540.352,1240.55 540.938,1238.89 541.525,1241.2 542.111,1240.9 542.697,1241.93 543.284,1241.56 543.87,1239.62 544.457,1237.7 545.043,1239.05 545.63,1238.51 546.216,1239.5 546.802,1237.41 547.389,1239.77 547.975,1239.21 548.562,1239.84 549.148,1240.18 549.734,1241.87 550.321,1242.5 550.907,1241.92 551.494,1240 552.08,1240.7 552.666,1241.48 553.253,1237.17 553.839,1242.35 554.426,1243.13 555.012,1244.86 555.599,1242.52 556.185,1243.32 556.771,1242.62 557.358,1242.06 557.944,1239.93 558.531,1241.94 559.117,1242.46 559.703,1241.87 560.29,1239.78 560.876,1240.39 561.463,1240.76 562.049,1237.09 562.635,1235.34 563.222,1237.21 563.808,1239.59 564.395,1239 564.981,1241.04 565.568,1240.48 566.154,1240.77 566.74,1241.33 567.327,1241.79 567.913,1243.64 568.5,1244.09 569.086,1244.19 569.672,1245.94 570.259,1245.09 570.845,1246.85 571.432,1245.61 572.018,1241.78 572.605,1243.69 573.191,1241.27 573.777,1240.36 574.364,1240.82 574.95,1240.28 575.537,1238.24 576.123,1237.64 576.709,1238.11 577.296,1239.81 577.882,1240.34 578.469,1242.16 579.055,1241.11 579.641,1238.82 580.228,1232.61 580.814,1232.53 581.401,1236.21 581.987,1238.26 582.574,1236.22 583.16,1238.08 583.746,1237.26 584.333,1239.56 584.919,1238.77 585.506,1237.95 586.092,1235.71 586.678,1233.82 587.265,1233.34 587.851,1230.26 588.438,1230.01 589.024,1233.87 589.61,1232.11 590.197,1231.48 590.783,1236.33 591.37,1234.48 591.956,1237.73 592.543,1237.19 593.129,1236.84 593.715,1239.03 594.302,1239.78 594.888,1238.78 595.475,1239.05 596.061,1238.2 596.647,1236.32 597.234,1235.8 597.82,1236.41 598.407,1235.62 598.993,1236.16 599.579,1237.19 600.166,1235.2 600.752,1230.65 601.339,1229.04 601.925,1230.1 602.512,1229.96 603.098,1232.3 603.684,1231.92 604.271,1234.14 604.857,1234.74 605.444,1235.58 606.03,1232.23 606.616,1229.2 607.203,1227.29 607.789,1226.96 608.376,1225.15 608.962,1226.56 609.548,1225.18 610.135,1221.03 610.721,1217.09 611.308,1217.14 611.894,1218.77 612.481,1218.88 613.067,1219.29 613.653,1218.46 614.24,1219.84 614.826,1222.47 615.413,1222.22 615.999,1222.23 616.585,1223.71 617.172,1223.79 617.758,1224.69 618.345,1227.02 618.931,1226.52 619.518,1227.65 620.104,1227.55 620.69,1224.71 621.277,1224.71 621.863,1221.71 622.45,1221.93 623.036,1220.49 623.622,1219.03 624.209,1218.91 624.795,1220.35 625.382,1221.75 625.968,1221.66 626.554,1224.52 627.141,1227.23 627.727,1225.52 628.314,1223.96 628.9,1224.19 629.487,1225.51 630.073,1226.47 630.659,1225.16 631.246,1223.59 631.832,1226.21 632.419,1224.5 633.005,1225.58 633.591,1222.69 634.178,1222.89 634.764,1224.48 635.351,1225.95 635.937,1225.82 636.523,1221.73 637.11,1221.8 637.696,1224.26 638.283,1228.45 638.869,1227.86 639.456,1227.59 640.042,1228.67 640.628,1227.27 641.215,1227.13 641.801,1226.85 642.388,1225.38 642.974,1221.21 643.56,1221.21 644.147,1222.34 644.733,1222.15 645.32,1221.98 645.906,1220.78 646.492,1219.39 647.079,1217.19 647.665,1217.36 648.252,1216.14 648.838,1215.16 649.425,1215.36 650.011,1215.51 650.597,1217.15 651.184,1219.91 651.77,1219.8 652.357,1218.34 652.943,1220.16 653.529,1218.74 654.116,1218.76 654.702,1221.01 655.289,1220.98 655.875,1224.75 656.462,1224.35 657.048,1223.81 657.634,1222.19 658.221,1222.45 658.807,1221.16 659.394,1222.58 659.98,1221.06 660.566,1218.15 661.153,1218.44 661.739,1218.71 662.326,1218.64 662.912,1215.89 663.498,1217.51 664.085,1215.13 664.671,1215.39 665.258,1216.53 665.844,1215.32 666.431,1215.37 667.017,1216.74 667.603,1217.15 668.19,1221.19 668.776,1222.37 669.363,1222.48 669.949,1222.44 670.535,1221.08 671.122,1219.64 671.708,1219.58 672.295,1219.68 672.881,1219.63 673.467,1220.99 674.054,1219.46 674.64,1220.71 675.227,1221.99 675.813,1219.07 676.4,1220.31 676.986,1222.7 677.572,1222.62 678.159,1223.76 678.745,1224.66 679.332,1222.6 679.918,1223.93 680.504,1223.46 681.091,1223.16 681.677,1223.03 682.264,1220.25 682.85,1220.49 683.436,1222.85 684.023,1224.3 684.609,1225.47 685.196,1223.88 685.782,1225.12 686.369,1226.07 686.955,1225.69 687.541,1223.79 688.128,1223.48 688.714,1223.38 689.301,1227.2 689.887,1224.09 690.473,1222.55 691.06,1223.73 691.646,1227.43 692.233,1228.35 692.819,1227.79 693.405,1226.15 693.992,1225.79 694.578,1228.28 695.165,1229.27 695.751,1231.04 696.338,1231.84 696.924,1232.26 697.51,1230.49 698.097,1231.13 698.683,1230.44 699.27,1231.11 699.856,1228.88 700.442,1229.48 701.029,1228.99 701.615,1227.23 702.202,1225.31 702.788,1223.61 703.375,1222.07 703.961,1220.23 704.547,1220.17 705.134,1219.89 705.72,1220.89 706.307,1222.05 706.893,1221.64 707.479,1222.82 708.066,1220.22 708.652,1218.92 709.239,1216.22 709.825,1217.63 710.411,1220.36 710.998,1220.05 711.584,1217.16 712.171,1215.63 712.757,1215.88 713.344,1214.79 713.93,1211.08 714.516,1211.38 715.103,1212.8 715.689,1211.61 716.276,1214.63 716.862,1216.28 717.448,1216.27 718.035,1216.57 718.621,1216.67 719.208,1219.38 719.794,1219.15 720.38,1217.81 720.967,1217.98 721.553,1219.51 722.14,1220.53 722.726,1219.14 723.313,1220.35 723.899,1220.37 724.485,1221.37 725.072,1225.15 725.658,1223.68 726.245,1224.9 726.831,1224.17 727.417,1226.61 728.004,1225.87 728.59,1224.27 729.177,1224.09 729.763,1224.72 730.349,1225.5 730.936,1225.06 731.522,1223.34 732.109,1223.98 732.695,1225.08 733.282,1225.9 733.868,1225.52 734.454,1225 735.041,1225.66 735.627,1227.47 736.214,1228.37 736.8,1225.27 737.386,1225.04 737.973,1223.29 738.559,1220.09 739.146,1221.21 739.732,1218.19 740.318,1219.64 740.905,1218.11 741.491,1217.99 742.078,1216.21 742.664,1214.83 743.251,1217.62 743.837,1214.96 744.423,1212.26 745.01,1212.34 745.596,1214.04 746.183,1212.84 746.769,1212.92 747.355,1214.51 747.942,1213.61 748.528,1212.36 749.115,1212.77 749.701,1211.85 750.288,1212.07 750.874,1213.54 751.46,1213.88 752.047,1212.65 752.633,1211.63 753.22,1214.53 753.806,1215.86 754.392,1215.02 754.979,1216.42 755.565,1217.93 756.152,1220.32 756.738,1219.97 757.324,1223.82 757.911,1224.78 758.497,1224.37 759.084,1222.59 759.67,1221 760.257,1221.02 760.843,1219.61 761.429,1219.23 762.016,1216.52 762.602,1216.26 763.189,1217.54 763.775,1216.3 764.361,1216.66 764.948,1216.72 765.534,1219.01 766.121,1216.15 766.707,1216.53 767.293,1215.39 767.88,1214.22 768.466,1211.53 769.053,1213.14 769.639,1212.21 770.226,1213.66 770.812,1215.24 771.398,1213.95 771.985,1215.15 772.571,1210.09 773.158,1207.84 773.744,1207.04 774.33,1207.53 774.917,1207.95 775.503,1209.97 776.09,1206.19 776.676,1206.75 777.262,1208.65 777.849,1210.24 778.435,1206.61 779.022,1204.19 779.608,1203.44 780.195,1208.12 780.781,1212.47 781.367,1213.74 781.954,1213.91 782.54,1217.83 783.127,1219.07 783.713,1219.09 784.299,1217.52 784.886,1214.75 785.472,1216.31 786.059,1217.69 786.645,1219.11 787.232,1219.11 787.818,1219.05 788.404,1221.43 788.991,1221.3 789.577,1220.77 790.164,1221.8 790.75,1222.65 791.336,1223.46 791.923,1223.24 792.509,1221.62 793.096,1222.41 793.682,1221.02 794.268,1220.82 794.855,1219.5 795.441,1216.74 796.028,1215.52 796.614,1214.36 797.201,1211.87 797.787,1216.09 798.373,1214.56 798.96,1213.5 799.546,1215.01 800.133,1211.33 800.719,1214.08 801.305,1220.51 801.892,1220.38 802.478,1220.12 803.065,1222.35 803.651,1221.66 804.237,1222.96 804.824,1222.45 805.41,1223.49 805.997,1223.1 806.583,1222.57 807.17,1220.88 807.756,1219.18 808.342,1219.04 808.929,1218.72 809.515,1218.58 810.102,1218.36 810.688,1219.41 811.274,1217.57 811.861,1214.84 812.447,1212.02 813.034,1213.35 813.62,1212.13 814.206,1212.08 814.793,1212.14 815.379,1212.28 815.966,1212.58 816.552,1212.76 817.139,1212.93 817.725,1215.8 818.311,1215.85 818.898,1214.49 819.484,1211.95 820.071,1210.6 820.657,1209.36 821.243,1208.27 821.83,1208.69 822.416,1210.4 823.003,1212.03 823.589,1212.41 824.175,1213.63 824.762,1213.36 825.348,1213.5 825.935,1212.3 826.521,1215.19 827.108,1214.94 827.694,1216.07 828.28,1215.84 828.867,1217.35 829.453,1218.3 830.04,1219.24 830.626,1218.18 831.212,1215.2 831.799,1216.51 832.385,1215.16 832.972,1213.82 833.558,1212.68 834.145,1211.26 834.731,1210.37 835.317,1211.93 835.904,1209.31 836.49,1212.19 837.077,1211.99 837.663,1209.6 838.249,1209.95 838.836,1211.64 839.422,1213.34 840.009,1210.56 840.595,1209.39 841.181,1209.74 841.768,1209.87 842.354,1210.08 842.941,1213.03 843.527,1214.26 844.114,1213.04 844.7,1210.32 845.286,1209.46 845.873,1208.44 846.459,1208.96 847.046,1207.76 847.632,1206.67 848.218,1208.44 848.805,1208.87 849.391,1210.56 849.978,1212 850.564,1213.51 851.15,1214.77 851.737,1213.72 852.323,1212.36 852.91,1213.83 853.496,1214.17 854.083,1214.26 854.669,1213.17 855.255,1214.69 855.842,1214.99 856.428,1216.37 857.015,1217.46 857.601,1214.55 858.187,1214.49 858.774,1213.02 859.36,1213.04 859.947,1213.18 860.533,1214.57 861.119,1214.34 861.706,1214.25 862.292,1215.07 862.879,1216.62 863.465,1215.36 864.052,1211.46 864.638,1210.32 865.224,1214.63 865.811,1214.76 866.397,1214.76 866.984,1214.75 867.57,1214.67 868.156,1217.1 868.743,1217.12 869.329,1214.12 869.916,1215.46 870.502,1212.51 871.089,1212.58 871.675,1215.22 872.261,1216.54 872.848,1216.48 873.434,1217.78 874.021,1216.22 874.607,1218.58 875.193,1219.59 875.78,1217.74 876.366,1215.86 876.953,1215.8 877.539,1216.96 878.125,1214.28 878.712,1215.85 879.298,1217.12 879.885,1217.1 880.471,1219.55 881.058,1219.24 881.644,1217.87 882.23,1220.2 882.817,1222.49 883.403,1222.11 883.99,1223.2 884.576,1221.31 885.162,1223.53 885.749,1221.84 886.335,1220.25 886.922,1222.54 887.508,1223.43 888.094,1223.04 888.681,1221.04 889.267,1220.73 889.854,1219.14 890.44,1213.5 891.027,1212.25 891.613,1216.34 892.199,1214.61 892.786,1211.96 893.372,1213.44 893.959,1213.61 894.545,1212.14 895.131,1211.92 895.718,1210.86 896.304,1209.75 896.891,1204.7 897.477,1206.39 898.063,1208.01 898.65,1206.84 899.236,1208.55 899.823,1208.9 900.409,1207.56 900.996,1210.79 901.582,1210.93 902.168,1213.98 902.755,1212.4 903.341,1209.69 903.928,1208.53 904.514,1210.23 905.1,1208.04 905.687,1211.21 906.273,1208.62 906.86,1211.37 907.446,1211.75 908.032,1213.42 908.619,1213.6 909.205,1216.22 909.792,1214.47 910.378,1215.93 910.965,1217.11 911.551,1217.19 912.137,1218.24 912.724,1215.42 913.31,1215.34 913.897,1215.28 914.483,1213.68 915.069,1215.07 915.656,1214.93 916.242,1216.3 916.829,1216.35 917.415,1216.36 918.002,1217.54 918.588,1217.54 919.174,1218.84 919.761,1218.56 920.347,1221.02 920.934,1220.6 921.52,1221.76 922.106,1223.87 922.693,1223.39 923.279,1222.72 923.866,1224.68 924.452,1222.72 925.038,1226.5 925.625,1227.18 926.211,1224.74 926.798,1224 927.384,1225.94 927.971,1223.65 928.557,1224.42 929.143,1225.13 929.73,1224.33 930.316,1223.77 930.903,1220.69 931.489,1220.4 932.075,1215.93 932.662,1219.95 933.248,1223.77 933.835,1223.22 934.421,1223.79 935.007,1223.15 935.594,1219.57 936.18,1220.26 936.767,1217.3 937.353,1218.38 937.94,1216.52 938.526,1215.2 939.112,1216.2 939.699,1213.64 940.285,1211.05 940.872,1209.76 941.458,1215.29 942.044,1216.39 942.631,1215.11 943.217,1216.37 943.804,1213.35 944.39,1212.09 944.976,1213.56 945.563,1209.77 946.149,1209.92 946.736,1207.15 947.322,1203.55 947.909,1205.21 948.495,1205.43 949.081,1204.57 949.668,1206.72 950.254,1203.1 950.841,1202.01 951.427,1205.15 952.013,1204.15 952.6,1204.67 953.186,1202.33 953.773,1202.85 954.359,1202.38 954.945,1204.38 955.532,1206.27 956.118,1205.25 956.705,1204.27 957.291,1203.56 957.878,1204.21 958.464,1204.87 959.05,1206.64 959.637,1211.06 960.223,1209.89 960.81,1208.8 961.396,1209.4 961.982,1208.06 962.569,1205.52 963.155,1204.57 963.742,1204.57 964.328,1207.68 964.915,1209.05 965.501,1209.33 966.087,1209.59 966.674,1209.56 967.26,1209.64 967.847,1209.64 968.433,1207.5 969.019,1206.66 969.606,1209.43 970.192,1209.87 970.779,1211.39 971.365,1210.24 971.951,1211.69 972.538,1211.85 973.124,1214.76 973.711,1218.6 974.297,1216.94 974.884,1216.91 975.47,1212.77 976.056,1212.53 976.643,1212.52 977.229,1211.48 977.816,1210.5 978.402,1210.59 978.988,1212.04 979.575,1212.18 980.161,1213.65 980.748,1212.23 981.334,1211.36 981.92,1210.5 982.507,1209.29 983.093,1209.48 983.68,1208.81 984.266,1210.35 984.853,1210.54 985.439,1213.58 986.025,1213.52 986.612,1213.78 987.198,1210.88 987.785,1211.18 988.371,1207.44 988.957,1209.07 989.544,1210.64 990.13,1212.27 990.717,1212.58 991.303,1208.79 991.889,1210.16 992.476,1210.28 993.062,1207.77 993.649,1209.17 994.235,1210.46 994.822,1210.83 995.408,1210.81 995.994,1212.47 996.581,1215.25 997.167,1214.17 997.754,1212.95 998.34,1215.6 998.926,1215.41 999.513,1214.15 1000.1,1212.86 1000.69,1212.67 1001.27,1209.92 1001.86,1210.04 1002.44,1209.03 1003.03,1209.47 1003.62,1209.86 1004.2,1210.06 1004.79,1208.83 1005.38,1212.01 1005.96,1212.01 1006.55,1214.81 1007.14,1217.67 1007.72,1218.56 1008.31,1218.28 1008.9,1220.77 1009.48,1222.82 1010.07,1222.45 1010.65,1224.6 1011.24,1221.71 1011.83,1221.13 1012.41,1222.17 1013,1221.64 1013.59,1221.25 1014.17,1220.98 1014.76,1217.87 1015.35,1216.13 1015.93,1216.06 1016.52,1216.17 1017.11,1217.17 1017.69,1214.32 1018.28,1215.39 1018.86,1212.51 1019.45,1212.53 1020.04,1213.77 1020.62,1213.81 1021.21,1213.79 1021.8,1213.67 1022.38,1217.35 1022.97,1216.05 1023.56,1216.01 1024.14,1214.57 1024.73,1213.39 1025.32,1214.84 1025.9,1210.86 1026.49,1208.41 1027.07,1210.05 1027.66,1211.57 1028.25,1212.97 1028.83,1212.57 1029.42,1213.96 1030.01,1214.03 1030.59,1215.18 1031.18,1213.58 1031.77,1213.82 1032.35,1216.26 1032.94,1216.16 1033.52,1214.6 1034.11,1217.35 1034.7,1217.1 1035.28,1214.38 1035.87,1214.2 1036.46,1215.44 1037.04,1216.59 1037.63,1216.5 1038.22,1216.36 1038.8,1213.72 1039.39,1213.72 1039.98,1213.42 1040.56,1214.66 1041.15,1215.68 1041.73,1216.62 1042.32,1217.74 1042.91,1215.86 1043.49,1215.58 1044.08,1215.49 1044.67,1218.15 1045.25,1216.59 1045.84,1213.7 1046.43,1216.19 1047.01,1213.56 1047.6,1212.19 1048.19,1208.48 1048.77,1209.9 1049.36,1209.99 1049.94,1211.48 1050.53,1212.65 1051.12,1214.36 1051.7,1212.89 1052.29,1214.26 1052.88,1215.55 1053.46,1214.4 1054.05,1214.39 1054.64,1212.79 1055.22,1213.97 1055.81,1214.01 1056.39,1215.34 1056.98,1215.2 1057.57,1215.18 1058.15,1212.46 1058.74,1215.25 1059.33,1212.32 1059.91,1213.66 1060.5,1210.87 1061.09,1212.08 1061.67,1211.99 1062.26,1211.97 1062.85,1213.48 1063.43,1212.1 1064.02,1211.08 1064.6,1211.2 1065.19,1212.3 1065.78,1213.74 1066.36,1213.78 1066.95,1211.21 1067.54,1206.87 1068.12,1207.01 1068.71,1206.49 1069.3,1208.26 1069.88,1208.49 1070.47,1207.68 1071.06,1207.9 1071.64,1210.86 1072.23,1210.68 1072.81,1207.77 1073.4,1206.67 1073.99,1208.21 1074.57,1208.32 1075.16,1207.14 1075.75,1204.98 1076.33,1201.53 1076.92,1202.38 1077.51,1201.68 1078.09,1201.21 1078.68,1203.23 1079.26,1202.62 1079.85,1204.26 1080.44,1206.04 1081.02,1206.15 1081.61,1206.69 1082.2,1206.92 1082.78,1207.14 1083.37,1210.51 1083.96,1210.72 1084.54,1210.6 1085.13,1210.96 1085.72,1208.45 1086.3,1208.66 1086.89,1206.46 1087.47,1208.03 1088.06,1208.39 1088.65,1208.43 1089.23,1209.71 1089.82,1209.67 1090.41,1213.75 1090.99,1215.23 1091.58,1216.4 1092.17,1216.2 1092.75,1214.7 1093.34,1214.49 1093.93,1213.04 1094.51,1213.03 1095.1,1208.92 1095.68,1212.09 1096.27,1216.22 1096.86,1218.91 1097.44,1218.67 1098.03,1219.78 1098.62,1223.29 1099.2,1222.79 1099.79,1219.69 1100.38,1219.4 1100.96,1217.9 1101.55,1217.64 1102.14,1218.57 1102.72,1219.69 1103.31,1222.16 1103.89,1220.47 1104.48,1218.51 1105.07,1218.13 1105.65,1216.38 1106.24,1216.53 1106.83,1217.76 1107.41,1218.61 1108,1217.29 1108.59,1218.42 1109.17,1215.43 1109.76,1216.88 1110.34,1219.08 1110.93,1218.52 1111.52,1214.08 1112.1,1216.84 1112.69,1216.57 1113.28,1212.05 1113.86,1211.9 1114.45,1213.19 1115.04,1212.92 1115.62,1213 1116.21,1211.49 1116.8,1211.46 1117.38,1211.46 1117.97,1214.04 1118.55,1213.92 1119.14,1213.83 1119.73,1215.11 1120.31,1215.34 1120.9,1214.19 1121.49,1210.33 1122.07,1209.13 1122.66,1208.21 1123.25,1208.39 1123.83,1211.41 1124.42,1211.57 1125.01,1215.38 1125.59,1212.46 1126.18,1212.38 1126.76,1213.69 1127.35,1210.91 1127.94,1212.01 1128.52,1207.96 1129.11,1209.3 1129.7,1209.54 1130.28,1207.16 1130.87,1207.48 1131.46,1207.81 1132.04,1207.09 1132.63,1207.28 1133.21,1207.54 1133.8,1207.98 1134.39,1206.98 1134.97,1205.66 1135.56,1207.21 1136.15,1210.11 1136.73,1212.85 1137.32,1211.43 1137.91,1211.51 1138.49,1214.43 1139.08,1215.8 1139.67,1216.91 1140.25,1213.98 1140.84,1213.7 1141.42,1213.29 1142.01,1212.99 1142.6,1208.89 1143.18,1211.99 1143.77,1208.06 1144.36,1208.1 1144.94,1208.24 1145.53,1212.31 1146.12,1215.19 1146.7,1217.76 1147.29,1217.63 1147.88,1217.43 1148.46,1218.46 1149.05,1218.27 1149.63,1215.35 1150.22,1216.4 1150.81,1214.73 1151.39,1212.81 1151.98,1213.9 1152.57,1213.87 1153.15,1211.12 1153.74,1210.93 1154.33,1212.58 1154.91,1212.62 1155.5,1214.23 1156.09,1214.26 1156.67,1211.65 1157.26,1211.52 1157.84,1208.51 1158.43,1208.55 1159.02,1210.14 1159.6,1209.03 1160.19,1210.34 1160.78,1211.67 1161.36,1210.43 1161.95,1209.16 1162.54,1210.4 1163.12,1209.14 1163.71,1208.06 1164.29,1207.19 1164.88,1207.33 1165.47,1210.34 1166.05,1213 1166.64,1212.56 1167.23,1212.48 1167.81,1212.36 1168.4,1212.66 1168.99,1211.28 1169.57,1208.53 1170.16,1204.84 1170.75,1205.58 1171.33,1207.1 1171.92,1209.7 1172.5,1208.52 1173.09,1210.13 1173.68,1208.97 1174.26,1204.94 1174.85,1206.7 1175.44,1208.54 1176.02,1206.08 1176.61,1207.96 1177.2,1209.53 1177.78,1209.93 1178.37,1211.53 1178.96,1209.06 1179.54,1213.33 1180.13,1213.37 1180.71,1213.33 1181.3,1214.75 1181.89,1214.98 1182.47,1213.4 1183.06,1212 1183.65,1210.69 1184.23,1212.28 1184.82,1210.88 1185.41,1213.82 1185.99,1216.49 1186.58,1217.68 1187.16,1222.92 1187.75,1219.35 1188.34,1217.68 1188.92,1218.79 1189.51,1216.02 1190.1,1214.7 1190.68,1217.46 1191.27,1222.29 1191.86,1216.46 1192.44,1216.28 1193.03,1213.27 1193.62,1214.56 1194.2,1213.06 1194.79,1211.65 1195.37,1210.29 1195.96,1214.49 1196.55,1215.81 1197.13,1215.9 1197.72,1212.86 1198.31,1214.21 1198.89,1216.79 1199.48,1217.73 1200.07,1216.4 1200.65,1215.02 1201.24,1214.75 1201.83,1214.48 1202.41,1218.39 1203,1217.02 1203.58,1215.6 1204.17,1215.42 1204.76,1213.88 1205.34,1212.57 1205.93,1212.38 1206.52,1212.41 1207.1,1215.23 1207.69,1215.47 1208.28,1218.03 1208.86,1219.11 1209.45,1217.19 1210.03,1217.08 1210.62,1217.16 1211.21,1215.55 1211.79,1215.26 1212.38,1213.92 1212.97,1213.89 1213.55,1213.77 1214.14,1212.48 1214.73,1209.82 1215.31,1209.82 1215.9,1209.95 1216.49,1211.37 1217.07,1212.57 1217.66,1213.92 1218.24,1215.23 1218.83,1214.12 1219.42,1212.38 1220,1213.77 1220.59,1213.98 1221.18,1215.35 1221.76,1216.22 1222.35,1214.7 1222.94,1213.24 1223.52,1213.15 1224.11,1209.29 1224.7,1208.29 1225.28,1209.83 1225.87,1208.87 1226.45,1210.31 1227.04,1212.99 1227.63,1214.43 1228.21,1214.25 1228.8,1214.03 1229.39,1212.29 1229.97,1213.75 1230.56,1213.52 1231.15,1213.65 1231.73,1212.35 1232.32,1210.67 1232.91,1213.48 1233.49,1214.68 1234.08,1213.2 1234.66,1211.53 1235.25,1209.22 1235.84,1206.64 1236.42,1206.9 1237.01,1207.12 1237.6,1208.62 1238.18,1205.8 1238.77,1209.84 1239.36,1210.15 1239.94,1209.17 1240.53,1209.29 1241.11,1208.42 1241.7,1211.3 1242.29,1212.7 1242.87,1212.51 1243.46,1208.35 1244.05,1210.08 1244.63,1210.28 1245.22,1207.88 1245.81,1207.16 1246.39,1207.64 1246.98,1206.78 1247.57,1208.57 1248.15,1207.67 1248.74,1208.98 1249.32,1210.16 1249.91,1211.65 1250.5,1212.92 1251.08,1214.47 1251.67,1215.89 1252.26,1214.44 1252.84,1217.04 1253.43,1216.56 1254.02,1217.89 1254.6,1216.43 1255.19,1214.8 1255.78,1212.01 1256.36,1213.17 1256.95,1213.16 1257.53,1212.73 1258.12,1212.79 1258.71,1213.99 1259.29,1213.7 1259.88,1211.15 1260.47,1214.12 1261.05,1214.29 1261.64,1212.63 1262.23,1212.64 1262.81,1215.22 1263.4,1215.08 1263.98,1214.84 1264.57,1216.18 1265.16,1210.8 1265.74,1212.22 1266.33,1214.62 1266.92,1217.33 1267.5,1216.09 1268.09,1217.31 1268.68,1218.22 1269.26,1217.89 1269.85,1218.94 1270.44,1220.08 1271.02,1219.71 1271.61,1218.16 1272.19,1217.53 1272.78,1218.67 1273.37,1213.02 1273.95,1212.95 1274.54,1212.9 1275.13,1212.91 1275.71,1211.41 1276.3,1211.14 1276.89,1211.24 1277.47,1211.51 1278.06,1213.04 1278.65,1210.37 1279.23,1208.83 1279.82,1208.81 1280.4,1209.14 1280.99,1208.09 1281.58,1208.1 1282.16,1207.14 1282.75,1209.72 1283.34,1210.11 1283.92,1209.89 1284.51,1212.77 1285.1,1215.6 1285.68,1215.34 1286.27,1216.64 1286.86,1217.88 1287.44,1219.11 1288.03,1217.4 1288.61,1213.58 1289.2,1213.48 1289.79,1213.57 1290.37,1212.24 1290.96,1214.96 1291.55,1215.07 1292.13,1215.07 1292.72,1215.07 1293.31,1217.59 1293.89,1217.09 1294.48,1216.85 1295.06,1217.63 1295.65,1217.43 1296.24,1216.8 1296.82,1216.1 1297.41,1214.81 1298,1214.88 1298.58,1214.86 1299.17,1214.6 1299.76,1215.65 1300.34,1215.41 1300.93,1215.32 1301.52,1216.39 1302.1,1212.16 1302.69,1216.23 1303.27,1212.24 1303.86,1211.26 1304.45,1210.06 1305.03,1210.38 1305.62,1210.66 1306.21,1209.25 1306.79,1209.15 1307.38,1209.49 1307.97,1209.7 1308.55,1208.63 1309.14,1206.26 1309.73,1206.47 1310.31,1208.27 1310.9,1207.22 1311.48,1208.93 1312.07,1207.86 1312.66,1208.07 1313.24,1211.03 1313.83,1212.48 1314.42,1214.96 1315,1217.49 1315.59,1215.79 1316.18,1214 1316.76,1212.44 1317.35,1211.04 1317.93,1212.44 1318.52,1209.77 1319.11,1209.76 1319.69,1212.41 1320.28,1212.47 1320.87,1213.79 1321.45,1215.11 1322.04,1218.82 1322.63,1217.11 1323.21,1216.69 1323.8,1213.98 1324.39,1215.26 1324.97,1214.77 1325.56,1213.02 1326.14,1207.62 1326.73,1207.72 1327.32,1207.83 1327.9,1207.01 1328.49,1207.44 1329.08,1209.08 1329.66,1210.49 1330.25,1213.33 1330.84,1214.42 1331.42,1212.85 1332.01,1213.99 1332.6,1212.66 1333.18,1218.4 1333.77,1216.56 1334.35,1215 1334.94,1214.65 1335.53,1214.58 1336.11,1214.44 1336.7,1217.27 1337.29,1215.66 1337.87,1214.04 1338.46,1209.75 1339.05,1213.67 1339.63,1213.63 1340.22,1210.85 1340.8,1209.45 1341.39,1209.72 1341.98,1208.63 1342.56,1210.2 1343.15,1212.9 1343.74,1208.87 1344.32,1207.72 1344.91,1208.2 1345.5,1209.93 1346.08,1210.26 1346.67,1209.27 1347.26,1209.64 1347.84,1209.93 1348.43,1209.86 1349.01,1211.44 1349.6,1211.38 1350.19,1212.74 1350.77,1213.8 1351.36,1213.57 1351.95,1217.22 1352.53,1218.37 1353.12,1219.22 1353.71,1224.28 1354.29,1222.36 1354.88,1222.85 1355.47,1218.4 1356.05,1215.25 1356.64,1215.12 1357.22,1214.6 1357.81,1211.68 1358.4,1215.88 1358.98,1217.1 1359.57,1216.84 1360.16,1215.56 1360.74,1212.87 1361.33,1211.56 1361.92,1211.45 1362.5,1208.98 1363.09,1207.93 1363.68,1209.81 1364.26,1211.07 1364.85,1213.91 1365.43,1217.58 1366.02,1218.7 1366.61,1215.72 1367.19,1214.12 1367.78,1210.1 1368.37,1212.81 1368.95,1213.99 1369.54,1212.53 1370.13,1210.08 1370.71,1211.69 1371.3,1208.9 1371.88,1207.9 1372.47,1208.21 1373.06,1206.97 1373.64,1207.23 1374.23,1208.97 1374.82,1209.21 1375.4,1210.65 1375.99,1209.36 1376.58,1209.59 1377.16,1209.96 1377.75,1208.82 1378.34,1209.21 1378.92,1211.75 1379.51,1211.86 1380.09,1212.02 1380.68,1211.89 1381.27,1211.95 1381.85,1213.68 1382.44,1213.63 1383.03,1214.93 1383.61,1214.73 1384.2,1212.1 1384.79,1209.4 1385.37,1208.26 1385.96,1207.23 1386.55,1207.7 1387.13,1210.62 1387.72,1212.16 1388.3,1214.87 1388.89,1213.49 1389.48,1213.71 1390.06,1215.24 1390.65,1216.56 1391.24,1213.96 1391.82,1214.27 1392.41,1214.4 1393,1214.23 1393.58,1217.98 1394.17,1216.3 1394.75,1217.41 1395.34,1215.88 1395.93,1217.15 1396.51,1215.36 1397.1,1213.92 1397.69,1212.41 1398.27,1213.8 1398.86,1213.79 1399.45,1217.61 1400.03,1219.85 1400.62,1219.35 1401.21,1218.91 1401.79,1217.58 1402.38,1217.6 1402.96,1216.08 1403.55,1214.59 1404.14,1214.46 1404.72,1215.76 1405.31,1214.09 1405.9,1214.26 1406.48,1216.85 1407.07,1216.77 1407.66,1215.58 1408.24,1212.64 1408.83,1211.76 1409.42,1206.32 1410,1208.01 1410.59,1209.78 1411.17,1208.68 1411.76,1210.1 1412.35,1210.48 1412.93,1210.74 1413.52,1208.13 1414.11,1209.57 1414.69,1212.16 1415.28,1210.62 1415.87,1209.17 1416.45,1208.91 1417.04,1207.83 1417.63,1208.3 1418.21,1210.05 1418.8,1211.1 1419.38,1211.38 1419.97,1214.05 1420.56,1215.19 1421.14,1213.27 1421.73,1214.74 1422.32,1214.39 1422.9,1215.59 1423.49,1216.83 1424.08,1216.41 1424.66,1214.82 1425.25,1216.09 1425.83,1216.93 1426.42,1219.17 1427.01,1217.48 1427.59,1218.4 1428.18,1218.07 1428.77,1216.31 1429.35,1217.57 1429.94,1217.18 1430.53,1218.31 1431.11,1214.1 1431.7,1216.88 1432.29,1215.5 1432.87,1215.41 1433.46,1218.14 1434.04,1221.97 1434.63,1224.19 1435.22,1223.57 1435.8,1224.19 1436.39,1223.45 1436.98,1220.3 1437.56,1220.13 1438.15,1219.88 1438.74,1218.4 1439.32,1217.9 1439.91,1216.35 1440.5,1216.29 1441.08,1216.27 1441.67,1214.64 1442.25,1214.47 1442.84,1213.19 1443.43,1213.07 1444.01,1211.8 1444.6,1212.99 1445.19,1210.39 1445.77,1207.69 1446.36,1205.21 1446.95,1205.73 1447.53,1208.85 1448.12,1211.96 1448.7,1212.12 1449.29,1211.11 1449.88,1210.97 1450.46,1211 1451.05,1213.57 1451.64,1209.38 1452.22,1206.84 1452.81,1209.91 1453.4,1208.85 1453.98,1206.26 1454.57,1202.4 1455.16,1200.3 1455.74,1200.78 1456.33,1199.94 1456.91,1200.59 1457.5,1201.24 1458.09,1205.83 1458.67,1207.47 1459.26,1210.33 1459.85,1210.36 1460.43,1211.51 1461.02,1212.88 1461.61,1211.44 1462.19,1214.09 1462.78,1216.5 1463.37,1217.27 1463.95,1221.05 1464.54,1219.17 1465.12,1221.35 1465.71,1220.99 1466.3,1216.72 1466.88,1214.96 1467.47,1211.07 1468.06,1211.44 1468.64,1212.96 1469.23,1214.39 1469.82,1215.7 1470.4,1215.55 1470.99,1216.7 1471.57,1216.44 1472.16,1214.7 1472.75,1215.65 1473.33,1215.4 1473.92,1212.53 1474.51,1211.11 1475.09,1211.15 1475.68,1211.06 1476.27,1210.98 1476.85,1211.02 1477.44,1215.26 1478.03,1213.92 1478.61,1208.4 1479.2,1208.8 1479.78,1206.26 1480.37,1206.41 1480.96,1201.25 1481.54,1199.03 1482.13,1200.89 1482.72,1199.99 1483.3,1203.54 1483.89,1199.85 1484.48,1199.12 1485.06,1199.66 1485.65,1200.48 1486.24,1199.84 1486.82,1199.17 1487.41,1198.52 1487.99,1199.45 1488.58,1200.35 1489.17,1199.54 1489.75,1201.64 1490.34,1200.82 1490.93,1199.9 1491.51,1199.23 1492.1,1201.56 1492.69,1201.89 1493.27,1203.54 1493.86,1205.42 1494.45,1208.34 1495.03,1208.39 1495.62,1208.96 1496.2,1211.76 1496.79,1214.61 1497.38,1214.5 1497.96,1212.86 1498.55,1214.34 1499.14,1214.35 1499.72,1214.56 1500.31,1213.1 1500.9,1215.93 1501.48,1214.73 1502.07,1218.7 1502.65,1218.48 1503.24,1218.09 1503.83,1220.2 1504.41,1219.75 1505,1219.33 1505.59,1221.49 1506.17,1222.24 1506.76,1221.74 1507.35,1225.05 1507.93,1225.75 1508.52,1223.8 1509.11,1223.01 1509.69,1222.5 1510.28,1223.14 1510.86,1224.08 1511.45,1224.66 1512.04,1223.59 1512.62,1220.2 1513.21,1221.15 1513.8,1221.02 1514.38,1220.39 1514.97,1221.18 1515.56,1218.06 1516.14,1214.91 1516.73,1217.6 1517.32,1217.21 1517.9,1215.75 1518.49,1217.11 1519.07,1216.75 1519.66,1216.46 1520.25,1216.21 1520.83,1215.93 1521.42,1217.07 1522.01,1218.41 1522.59,1217.87 1523.18,1217.26 1523.77,1215.21 1524.35,1216.4 1524.94,1210.98 1525.52,1215.12 1526.11,1217.73 1526.7,1216.18 1527.28,1213.34 1527.87,1213.12 1528.46,1212.97 1529.04,1212.92 1529.63,1211.67 1530.22,1210.36 1530.8,1210.58 1531.39,1206.85 1531.98,1207.06 1532.56,1208.63 1533.15,1208.51 1533.73,1207.05 1534.32,1208.79 1534.91,1210.19 1535.49,1208.98 1536.08,1207.75 1536.67,1209.07 1537.25,1209.33 1537.84,1210.9 1538.43,1210.95 1539.01,1212.14 1539.6,1210.74 1540.19,1210.92 1540.77,1208.39 1541.36,1210.07 1541.94,1211.84 1542.53,1210.62 1543.12,1212.05 1543.7,1212.41 1544.29,1212.21 1544.88,1209.7 1545.46,1207.2 1546.05,1206.15 1546.64,1203.4 1547.22,1205.22 1547.81,1207.02 1548.4,1208.75 1548.98,1210.37 1549.57,1207.86 1550.15,1205.67 1550.74,1206.01 1551.33,1206.15 1551.91,1206.35 1552.5,1205.48 1553.09,1207.16 1553.67,1210.36 1554.26,1210.07 1554.85,1207.61 1555.43,1206.6 1556.02,1206.76 1556.6,1209.54 1557.19,1207.09 1557.78,1207.32 1558.36,1207.9 1558.95,1208.06 1559.54,1209.56 1560.12,1207.09 1560.71,1207.31 1561.3,1208.73 1561.88,1210.07 1562.47,1211.59 1563.06,1210.32 1563.64,1211.89 1564.23,1211.96 1564.81,1211.9 1565.4,1210.81 1565.99,1210.83 1566.57,1209.53 1567.16,1209.89 1567.75,1209.99 1568.33,1211.31 1568.92,1212.94 1569.51,1212.96 1570.09,1207.77 1570.68,1204.13 1571.27,1203.5 1571.85,1206.76 1572.44,1207.08 1573.02,1206.13 1573.61,1205.22 1574.2,1205.69 1574.78,1204.99 1575.37,1205.42 1575.96,1206.01 1576.54,1210.35 1577.13,1208.93 1577.72,1210.38 1578.3,1207.7 1578.89,1207.19 1579.47,1210.03 1580.06,1208.81 1580.65,1207.71 1581.23,1208.49 1581.82,1205.99 1582.41,1206.48 1582.99,1208.25 1583.58,1208.68 1584.17,1208.69 1584.75,1214.17 1585.34,1217.74 1585.93,1220.09 1586.51,1218.48 1587.1,1217.85 1587.68,1217.42 1588.27,1217.16 1588.86,1215.65 1589.44,1216.76 1590.03,1215.07 1590.62,1215.19 1591.2,1216.27 1591.79,1214.93 1592.38,1217.54 1592.96,1217.64 1593.55,1217.25 1594.14,1216.96 1594.72,1216.68 1595.31,1217.96 1595.89,1218.86 1596.48,1220.03 1597.07,1219.39 1597.65,1216.12 1598.24,1214.46 1598.83,1214.18 1599.41,1213.07 1600,1211.95 1600.59,1210.53 1601.17,1211.7 1601.76,1214.22 1602.34,1214.08 1602.93,1211.79 1603.52,1213.09 1604.1,1213.15 1604.69,1211.74 1605.28,1212.84 1605.86,1212.99 1606.45,1212.95 1607.04,1213.01 1607.62,1214.39 1608.21,1214.14 1608.8,1213.06 1609.38,1214.31 1609.97,1214.35 1610.55,1214.17 1611.14,1216.8 1611.73,1217.81 1612.31,1218.87 1612.9,1219.59 1613.49,1219.11 1614.07,1217.45 1614.66,1215.59 1615.25,1217.97 1615.83,1218.77 1616.42,1219.65 1617.01,1219.44 1617.59,1218.88 1618.18,1218.34 1618.76,1220.71 1619.35,1220.26 1619.94,1221.01 1620.52,1218.98 1621.11,1217.33 1621.7,1217.05 1622.28,1214.25 1622.87,1212.75 1623.46,1210.11 1624.04,1208.99 1624.63,1206.32 1625.22,1206.24 1625.8,1207.94 1626.39,1209.34 1626.97,1206.84 1627.56,1204.6 1628.15,1204.01 1628.73,1204.28 1629.32,1205.9 1629.91,1207.87 1630.49,1206.71 1631.08,1206.85 1631.67,1209.83 1632.25,1213.66 1632.84,1212.28 1633.42,1216.56 1634.01,1216.4 1634.6,1212.25 1635.18,1210.97 1635.77,1211.11 1636.36,1211.2 1636.94,1213.91 1637.53,1213.73 1638.12,1213.68 1638.7,1217.54 1639.29,1222.45 1639.88,1219.35 1640.46,1220.25 1641.05,1219.83 1641.63,1220.81 1642.22,1221.79 1642.81,1219.77 1643.39,1218.05 1643.98,1213.69 1644.57,1213.49 1645.15,1210.67 1645.74,1208 1646.33,1208.13 1646.91,1206.91 1647.5,1207.27 1648.09,1208.86 1648.67,1209.21 1649.26,1209.22 1649.84,1207.91 1650.43,1209.44 1651.02,1211.08 1651.6,1209.44 1652.19,1209.55 1652.78,1212.4 1653.36,1211.18 1653.95,1212.71 1654.54,1214.11 1655.12,1216.42 1655.71,1214.84 1656.29,1215.02 1656.88,1216 1657.47,1216.94 1658.05,1216.43 1658.64,1216.28 1659.23,1216.08 1659.81,1213.22 1660.4,1213.13 1660.99,1207.65 1661.57,1207.9 1662.16,1208.29 1662.75,1208.42 1663.33,1207.08 1663.92,1204.44 1664.5,1202.18 1665.09,1201.63 1665.68,1203.61 1666.26,1204.2 1666.85,1204.8 1667.44,1204.02 1668.02,1205.87 1668.61,1205.01 1669.2,1205.53 1669.78,1204.68 1670.37,1205.03 1670.96,1205.36 1671.54,1204.53 1672.13,1203.35 1672.71,1203.95 1673.3,1207.13 1673.89,1207.37 1674.47,1206.16 1675.06,1207.85 1675.65,1209.37 1676.23,1209.25 1676.82,1212.01 1677.41,1212.26 1677.99,1213.6 1678.58,1212.24 1679.17,1210.9 1679.75,1212.21 1680.34,1212.17 1680.92,1210.86 1681.51,1210.91 1682.1,1213.71 1682.68,1215.15 1683.27,1211.28 1683.86,1208.76 1684.44,1208.93 1685.03,1209.28 1685.62,1209.48 1686.2,1210.84 1686.79,1211.19 1687.37,1210.02 1687.96,1209.86 1688.55,1210.01 1689.13,1213.06 1689.72,1216.98 1690.31,1219.54 1690.89,1219.12 1691.48,1218.92 1692.07,1217.33 1692.65,1214.51 1693.24,1212.87 1693.83,1211.32 1694.41,1211.27 1695,1210.05 1695.58,1211.59 1696.17,1208.79 1696.76,1209.16 1697.34,1209.22 1697.93,1208.17 1698.52,1208.44 1699.1,1208.69 1699.69,1211.43 1700.28,1212.75 1700.86,1214 1701.45,1214.06 1702.04,1212.52 1702.62,1211.13 1703.21,1212.57 1703.79,1211 1704.38,1212.19 1704.97,1212.26 1705.55,1212.47 1706.14,1211.17 1706.73,1215.2 1707.31,1215.1 1707.9,1216.27 1708.49,1216.11 1709.07,1215.24 1709.66,1215.11 1710.24,1215.01 1710.83,1216.03 1711.42,1214.36 1712,1214.22 1712.59,1216.76 1713.18,1215.27 1713.76,1216.41 1714.35,1215.81 1714.94,1218.54 1715.52,1217.83 1716.11,1217.55 1716.7,1218.55 1717.28,1216.72 1717.87,1216.31 1718.45,1214.9 1719.04,1216.23 1719.63,1217.34 1720.21,1219.7 1720.8,1220.52 1721.39,1222.37 1721.97,1223.07 1722.56,1223.64 1723.15,1223.01 1723.73,1221.12 1724.32,1220.72 1724.91,1220.35 1725.49,1218.87 1726.08,1215.71 1726.66,1212.96 1727.25,1211.55 1727.84,1213.14 1728.42,1211.75 1729.01,1211.53 1729.6,1214.3 1730.18,1211.37 1730.77,1215.36 1731.36,1212.22 1731.94,1209.61 1732.53,1211.06 1733.11,1212.19 1733.7,1209.39 1734.29,1210.74 1734.87,1209.58 1735.46,1209.31 1736.05,1210.77 1736.63,1213.48 1737.22,1209.71 1737.81,1207.31 1738.39,1204.65 1738.98,1204.96 1739.57,1204.02 1740.15,1202.91 1740.74,1200.66 1741.32,1202.52 1741.91,1203.3 1742.5,1200.97 1743.08,1201.74 1743.67,1203.4 1744.26,1205.39 1744.84,1207.03 1745.43,1208.36 1746.02,1211.32 1746.6,1211.18 1747.19,1211.38 1747.78,1212.83 1748.36,1214.18 1748.95,1214.39 1749.53,1215.29 1750.12,1215.39 1750.71,1212.63 1751.29,1215.56 1751.88,1215.34 1752.47,1212.62 1753.05,1212.39 1753.64,1213.75 1754.23,1209.64 1754.81,1208.13 1755.4,1205.6 1755.99,1207.05 1756.57,1208.59 1757.16,1207.32 1757.74,1209.38 1758.33,1208.12 1758.92,1209.91 1759.5,1209.92 1760.09,1212.51 1760.68,1210.15 1761.26,1209.85 1761.85,1208.57 1762.44,1207.54 1763.02,1203.83 1763.61,1205.71 1764.19,1204.63 1764.78,1206.24 1765.37,1206.72 1765.95,1208.42 1766.54,1209.74 1767.13,1211.41 1767.71,1210.48 1768.3,1210.55 1768.89,1210.59 1769.47,1210.73 1770.06,1210.83 1770.65,1212.15 1771.23,1212.19 1771.82,1212.12 1772.4,1213.41 1772.99,1214.59 1773.58,1215.87 1774.16,1214.18 1774.75,1213.93 1775.34,1212.52 1775.92,1212.57 1776.51,1215.07 1777.1,1214.61 1777.68,1213.07 1778.27,1212.99 1778.86,1215.29 1779.44,1216.38 1780.03,1213.5 1780.61,1216.31 1781.2,1216.12 1781.79,1218.55 1782.37,1219.38 1782.96,1217.62 1783.55,1218.59 1784.13,1219.55 1784.72,1220.45 1785.31,1219.95 1785.89,1219.41 1786.48,1217.54 1787.06,1215.93 1787.65,1215.78 1788.24,1214.31 1788.82,1213.93 1789.41,1213.69 1790,1217.4 1790.58,1218.62 1791.17,1218.18 1791.76,1219.01 1792.34,1217.29 1792.93,1214.25 1793.52,1216.93 1794.1,1212.88 1794.69,1215.61 1795.27,1216.79 1795.86,1210.02 1796.45,1210.1 1797.03,1211.32 1797.62,1212.74 1798.21,1213.99 1798.79,1211.15 1799.38,1209.78 1799.97,1209.75 1800.55,1211.1 1801.14,1213.72 1801.73,1210.89 1802.31,1209.23 1802.9,1207.97 1803.48,1208.06 1804.07,1209.43 1804.66,1207.99 1805.24,1209.93 1805.83,1208.8 1806.42,1210.49 1807,1213.21 1807.59,1214.46 1808.18,1213.02 1808.76,1211.6 1809.35,1213.11 1809.94,1213.15 1810.52,1208.75 1811.11,1209.99 1811.69,1206.24 1812.28,1203.7 1812.87,1204.34 1813.45,1203.33 1814.04,1202.6 1814.63,1203.44 1815.21,1202.75 1815.8,1204.57 1816.39,1206.36 1816.97,1206.86 1817.56,1207.02 1818.14,1207.18 1818.73,1208.5 1819.32,1208.92 1819.9,1207.7 1820.49,1206.5 1821.08,1206.62 1821.66,1205.57 1822.25,1207.34 1822.84,1207.21 1823.42,1206.11 1824.01,1210.62 1824.6,1211.95 1825.18,1214.45 1825.77,1215.58 1826.35,1215.19 1826.94,1216.28 1827.53,1216.24 1828.11,1217.71 1828.7,1212.18 1829.29,1213.26 1829.87,1210.6 1830.46,1211.65 1831.05,1211.68 1831.63,1211.59 1832.22,1214.3 1832.81,1211.84 1833.39,1209.41 1833.98,1211.08 1834.56,1209.99 1835.15,1208.65 1835.74,1210.28 1836.32,1210.05 1836.91,1211.31 1837.5,1212.77 1838.08,1215.46 1838.67,1216.45 1839.26,1213.53 1839.84,1212.07 1840.43,1214.51 1841.01,1214.47 1841.6,1212.86 1842.19,1214.31 1842.77,1216.71 1843.36,1216.44 1843.95,1214.96 1844.53,1215.11 1845.12,1212.68 1845.71,1211.62 1846.29,1210.61 1846.88,1212.05 1847.47,1212.31 1848.05,1211.05 1848.64,1211.09 1849.22,1210.07 1849.81,1210.43 1850.4,1211.83 1850.98,1210.63 1851.57,1210.9 1852.16,1209.84 1852.74,1211.14 1853.33,1212.42 1853.92,1212.29 1854.5,1212.42 1855.09,1215.15 1855.68,1214.79 1856.26,1215.89 1856.85,1216.95 1857.43,1216.46 1858.02,1216.2 1858.61,1212 1859.19,1212.16 1859.78,1212.39 1860.37,1216.18 1860.95,1213.9 1861.54,1214.95 1862.13,1214.89 1862.71,1214.86 1863.3,1213.28 1863.88,1211.89 1864.47,1211.63 1865.06,1213.03 1865.64,1213.18 1866.23,1211.97 1866.82,1213.08 1867.4,1214.16 1867.99,1217.86 1868.58,1218.54 1869.16,1218.11 1869.75,1216.6 1870.34,1220.78 1870.92,1220.4 1871.51,1222.47 1872.09,1224.6 1872.68,1218.3 1873.27,1215.2 1873.85,1217.63 1874.44,1218.41 1875.03,1216.81 1875.61,1213.69 1876.2,1215.2 1876.79,1215.1 1877.37,1217.81 1877.96,1216.51 1878.55,1216.4 1879.13,1216.16 1879.72,1214.55 1880.3,1215.99 1880.89,1211.86 1881.48,1209.34 1882.06,1210.77 1882.65,1212.12 1883.24,1209.58 1883.82,1208.62 1884.41,1210.26 1885,1211.47 1885.58,1212.68 1886.17,1212.46 1886.76,1213.86 1887.34,1213.95 1887.93,1215.12 1888.51,1214.84 1889.1,1214.86 1889.69,1214.86 1890.27,1215.88 1890.86,1215.53 1891.45,1214.04 1892.03,1212.5 1892.62,1215 1893.21,1214.69 1893.79,1211.84 1894.38,1213.09 1894.96,1211.73 1895.55,1209.19 1896.14,1206.82 1896.72,1209.54 1897.31,1204.43 1897.9,1206.25 1898.48,1207.94 1899.07,1205.35 1899.66,1205.68 1900.24,1207.45 1900.83,1207.68 1901.42,1206.63 1902,1206.96 1902.59,1205.85 1903.17,1208.86 1903.76,1210.32 1904.35,1209.24 1904.93,1210.9 1905.52,1213.65 1906.11,1212.05 1906.69,1214.83 1907.28,1211.98 1907.87,1209.41 1908.45,1209.37 1909.04,1210.81 1909.63,1208.25 1910.21,1211.1 1910.8,1211.19 1911.38,1213.92 1911.97,1213.89 1912.56,1214.21 1913.14,1215.36 1913.73,1215.09 1914.32,1215.3 1914.9,1213.97 1915.49,1212.61 1916.08,1211.53 1916.66,1211.56 1917.25,1211.72 1917.83,1213.34 1918.42,1214.91 1919.01,1209.77 1919.59,1209.76 1920.18,1211.18 1920.77,1211.45 1921.35,1212.83 1921.94,1209.91 1922.53,1208.6 1923.11,1208.82 1923.7,1208.78 1924.29,1210.3 1924.87,1209.03 1925.46,1209.13 1926.04,1210.65 1926.63,1214.8 1927.22,1213.41 1927.8,1217.25 1928.39,1217.3 1928.98,1217.19 1929.56,1215.25 1930.15,1213.52 1930.74,1212.15 1931.32,1210.79 1931.91,1209.79 1932.5,1213.68 1933.08,1213.7 1933.67,1213.59 1934.25,1212.19 1934.84,1212.36 1935.43,1213.75 1936.01,1212.29 1936.6,1211.24 1937.19,1213.97 1937.77,1212.7 1938.36,1211.46 1938.95,1210.21 1939.53,1208.98 1940.12,1210.37 1940.71,1210.71 1941.29,1210.82 1941.88,1208.25 1942.46,1206.92 1943.05,1207.13 1943.64,1206.15 1944.22,1209.12 1944.81,1212.04 1945.4,1210.84 1945.98,1211.19 1946.57,1208.78 1947.16,1210.57 1947.74,1213.29 1948.33,1216.05 1948.91,1217.13 1949.5,1215.63 1950.09,1216.73 1950.67,1216.56 1951.26,1217.56 1951.85,1216.99 1952.43,1216.67 1953.02,1217.74 1953.61,1218.64 1954.19,1219.11 1954.78,1221.1 1955.37,1220.66 1955.95,1219.07 1956.54,1222.57 1957.12,1223.5 1957.71,1225.42 1958.3,1224.54 1958.88,1225.12 1959.47,1220.24 1960.06,1219.72 1960.64,1219.22 1961.23,1218.89 1961.82,1215.52 1962.4,1216.75 1962.99,1216.47 1963.58,1214.48 1964.16,1214.69 1964.75,1210.47 1965.33,1210.51 1965.92,1211.03 1966.51,1209.88 1967.09,1210.04 1967.68,1211.89 1968.27,1213.42 1968.85,1213.24 1969.44,1210.7 1970.03,1212.16 1970.61,1213.53 1971.2,1214.88 1971.78,1213.73 1972.37,1211.01 1972.96,1212.27 1973.54,1215.12 1974.13,1210.86 1974.72,1209.72 1975.3,1205.91 1975.89,1203.64 1976.48,1209.55 1977.06,1211.35 1977.65,1211.27 1978.24,1212.65 1978.82,1211.52 1979.41,1210.05 1979.99,1209.06 1980.58,1209.09 1981.17,1207.76 1981.75,1209.26 1982.34,1213.48 1982.93,1211.98 1983.51,1210.6 1984.1,1212.01 1984.69,1210.56 1985.27,1211.16 1985.86,1213.66 1986.45,1212.23 1987.03,1210.82 1987.62,1211.01 1988.2,1209.39 1988.79,1209.71 1989.38,1209.78 1989.96,1211.41 1990.55,1210.25 1991.14,1207.66 1991.72,1205.16 1992.31,1206.88 1992.9,1208.53 1993.48,1208.84 1994.07,1206.15 1994.65,1209.06 1995.24,1203.93 1995.83,1201.88 1996.41,1203.77 1997,1204.4 1997.59,1206.12 1998.17,1205.31 1998.76,1208.4 1999.35,1210.22 1999.93,1207.73 2000.52,1209.29 2001.11,1206.8 2001.69,1204.64 2002.28,1205.36 2002.86,1204.42 2003.45,1204.82 2004.04,1205.09 2004.62,1204.35 2005.21,1206 2005.8,1206.17 2006.38,1203.95 2006.97,1205.73 2007.56,1206.09 2008.14,1206.1 2008.73,1207.55 2009.32,1207.77 2009.9,1210.63 2010.49,1210.85 2011.07,1210.98 2011.66,1208.68 2012.25,1208.75 2012.83,1208.96 2013.42,1203.61 2014.01,1205.42 2014.59,1206.89 2015.18,1205.74 2015.77,1207.49 2016.35,1208.99 2016.94,1210.51 2017.53,1209.57 2018.11,1211.28 2018.7,1210.03 2019.28,1210.03 2019.87,1210.14 2020.46,1209.19 2021.04,1209.24 2021.63,1208.14 2022.22,1209.61 2022.8,1213.85 2023.39,1214.03 2023.98,1212.49 2024.56,1212.3 2025.15,1213.81 2025.73,1217.67 2026.32,1217.54 2026.91,1217.03 2027.49,1218.33 2028.08,1215.48 2028.67,1214.16 2029.25,1214.12 2029.84,1215.45 2030.43,1215.59 2031.01,1215.49 2031.6,1215.39 2032.19,1215.47 2032.77,1213.97 2033.36,1215.41 2033.94,1215.11 2034.53,1216.29 2035.12,1217.56 2035.7,1216.27 2036.29,1217.58 2036.88,1218.4 2037.46,1216.87 2038.05,1216.69 2038.64,1217.65 2039.22,1217.07 2039.81,1216.68 2040.4,1219.03 2040.98,1217.39 2041.57,1214.5 2042.15,1214.37 2042.74,1215.65 2043.33,1215.34 2043.91,1214.01 2044.5,1212.66 2045.09,1211.53 2045.67,1211.78 2046.26,1208.99 2046.85,1211.79 2047.43,1211.64 2048.02,1213.16 2048.6,1214.58 2049.19,1217.32 2049.78,1216.95 2050.36,1216.96 2050.95,1219.58 2051.54,1217.85 2052.12,1216.45 2052.71,1219.22 2053.3,1220.14 2053.88,1218.83 2054.47,1218.23 2055.06,1217.9 2055.64,1216.16 2056.23,1217.32 2056.81,1216.8 2057.4,1215.32 2057.99,1216.36 2058.57,1219.98 2059.16,1220.75 2059.75,1220.61 2060.33,1222.54 2060.92,1223.17 2061.51,1222.78 2062.09,1223.35 2062.68,1224.1 2063.27,1222.15 2063.85,1220.38 2064.44,1218.65 2065.02,1212.78 2065.61,1211.57 2066.2,1213.1 2066.78,1210.5 2067.37,1211.97 2067.96,1213.5 2068.54,1213.31 2069.13,1213.37 2069.72,1211.87 2070.3,1210.48 2070.89,1212.07 2071.48,1211.93 2072.06,1211.99 2072.65,1211.96 2073.23,1210.46 2073.82,1210.74 2074.41,1212.2 2074.99,1212.22 2075.58,1213.71 2076.17,1216.58 2076.75,1217.8 2077.34,1215.94 2077.93,1211.99 2078.51,1212.08 2079.1,1213.37 2079.68,1213.25 2080.27,1210.45 2080.86,1210.46 2081.44,1210.69 2082.03,1209.19 2082.62,1211.89 2083.2,1211.96 2083.79,1211.93 2084.38,1212.24 2084.96,1213.39 2085.55,1211.83 2086.14,1212.94 2086.72,1211.68 2087.31,1212.87 2087.89,1211.71 2088.48,1210.29 2089.07,1212.15 2089.65,1213.61 2090.24,1213.46 2090.83,1216.22 2091.41,1214.76 2092,1216.2 2092.59,1215.74 2093.17,1215.46 2093.76,1215.34 2094.35,1213.91 2094.93,1213.73 2095.52,1213.7 2096.1,1210.89 2096.69,1211.11 2097.28,1210.82 2097.86,1207.89 2098.45,1209.42 2099.04,1209.4 2099.62,1209.6 2100.21,1211.24 2100.8,1211.31 2101.38,1210.1 2101.97,1209.02 2102.55,1213.28 2103.14,1218.53 2103.73,1216.92 2104.31,1215.19 2104.9,1213.82 2105.49,1211.19 2106.07,1212.76 2106.66,1214.11 2107.25,1218.17 2107.83,1218.04 2108.42,1217.87 2109.01,1216.36 2109.59,1217.62 2110.18,1218.75 2110.76,1218.47 2111.35,1219.42 2111.94,1215.35 2112.52,1212.7 2113.11,1213.96 2113.7,1216.66 2114.28,1217.62 2114.87,1218.67 2115.46,1218.42 2116.04,1218.22 2116.63,1219.44 2117.22,1218.68 2117.8,1218.28 2118.39,1219.43 2118.97,1220.38 2119.56,1218.58 2120.15,1218.23 2120.73,1217.63 2121.32,1215.7 2121.91,1217.11 2122.49,1216.75 2123.08,1216.49 2123.67,1212.56 2124.25,1211.32 2124.84,1212.61 2125.42,1212.63 2126.01,1211.01 2126.6,1211.07 2127.18,1212.28 2127.77,1213.72 2128.36,1214.75 2128.94,1213.26 2129.53,1210.41 2130.12,1210.58 2130.7,1209.65 2131.29,1209.94 2131.88,1211.49 2132.46,1213.16 2133.05,1213.18 2133.63,1213.02 2134.22,1215.55 2134.81,1217.87 2135.39,1216.12 2135.98,1216.19 2136.57,1214.81 2137.15,1211.76 2137.74,1212.9 2138.33,1214.22 2138.91,1217.01 2139.5,1216.61 2140.09,1213.83 2140.67,1212.48 2141.26,1211.07 2141.84,1208.39 2142.43,1211.36 2143.02,1212.96 2143.6,1213.15 2144.19,1211.97 2144.78,1212.13 2145.36,1210.93 2145.95,1213.92 2146.54,1212.64 2147.12,1215.2 2147.71,1211.13 2148.3,1211.26 2148.88,1209.91 2149.47,1208.86 2150.05,1207.32 2150.64,1206.38 2151.23,1209.33 2151.81,1211.19 2152.4,1211.1 2152.99,1208.39 2153.57,1208.34 2154.16,1211.15 2154.75,1210.99 2155.33,1212.18 2155.92,1212.06 2156.5,1216 2157.09,1218.36 2157.68,1219.56 2158.26,1218.85 \"/>\n<path clip-path=\"url(#clip272)\" d=\"M986.025 1212.99 L986.612 1212.99 L987.198 1212.99 L987.785 1212.99 L988.371 1212.99 L988.957 1212.99 L989.544 1212.99 L990.13 1212.99 L990.717 1212.99 L991.303 1212.99 L991.889 1212.99 L992.476 1212.99 L993.062 1212.99 L993.649 1212.99 L994.235 1212.99 L994.822 1212.99 L995.408 1212.99 L995.994 1212.99 L996.581 1212.99 L997.167 1212.99 L997.754 1212.99 L998.34 1212.99 L998.926 1212.99 L999.513 1212.99 L1000.1 1212.99 L1000.69 1212.99 L1001.27 1212.99 L1001.86 1212.99 L1002.44 1212.99 L1003.03 1212.99 L1003.62 1212.99 L1004.2 1212.99 L1004.79 1212.99 L1005.38 1212.99 L1005.96 1212.99 L1006.55 1212.99 L1007.14 1212.99 L1007.72 1212.99 L1008.31 1212.99 L1008.9 1212.99 L1009.48 1212.99 L1010.07 1212.99 L1010.65 1212.99 L1011.24 1212.99 L1011.83 1212.99 L1012.41 1212.99 L1013 1212.99 L1013.59 1212.99 L1014.17 1212.99 L1014.76 1212.99 L1015.35 1212.99 L1015.93 1212.99 L1016.52 1212.99 L1017.11 1212.99 L1017.69 1212.99 L1018.28 1212.99 L1018.86 1212.99 L1019.45 1212.99 L1020.04 1212.99 L1020.62 1212.99 L1021.21 1212.99 L1021.8 1212.99 L1022.38 1212.99 L1022.97 1212.99 L1023.56 1212.99 L1024.14 1212.99 L1024.73 1212.99 L1025.32 1212.99 L1025.9 1212.99 L1026.49 1212.99 L1027.07 1212.99 L1027.66 1212.99 L1028.25 1212.99 L1028.83 1212.99 L1029.42 1212.99 L1030.01 1212.99 L1030.59 1212.99 L1031.18 1212.99 L1031.77 1212.99 L1032.35 1212.99 L1032.94 1212.99 L1033.52 1212.99 L1034.11 1212.99 L1034.7 1212.99 L1035.28 1212.99 L1035.87 1212.99 L1036.46 1212.99 L1037.04 1212.99 L1037.63 1212.99 L1038.22 1212.99 L1038.8 1212.99 L1039.39 1212.99 L1039.98 1212.99 L1040.56 1212.99 L1041.15 1212.99 L1041.73 1212.99 L1042.32 1212.99 L1042.91 1212.99 L1043.49 1212.99 L1044.08 1212.99 L1044.67 1212.99 L1045.25 1212.99 L1045.84 1212.99 L1046.43 1212.99 L1047.01 1212.99 L1047.6 1212.99 L1048.19 1212.99 L1048.77 1212.99 L1049.36 1212.99 L1049.94 1212.99 L1050.53 1212.99 L1051.12 1212.99 L1051.7 1212.99 L1052.29 1212.99 L1052.88 1212.99 L1053.46 1212.99 L1054.05 1212.99 L1054.64 1212.99 L1055.22 1212.99 L1055.81 1212.99 L1056.39 1212.99 L1056.98 1212.99 L1057.57 1212.99 L1058.15 1212.99 L1058.74 1212.99 L1059.33 1212.99 L1059.91 1212.99 L1060.5 1212.99 L1061.09 1212.99 L1061.67 1212.99 L1062.26 1212.99 L1062.85 1212.99 L1063.43 1212.99 L1064.02 1212.99 L1064.6 1212.99 L1065.19 1212.99 L1065.78 1212.99 L1066.36 1212.99 L1066.95 1212.99 L1067.54 1212.99 L1068.12 1212.99 L1068.71 1212.99 L1069.3 1212.99 L1069.88 1212.99 L1070.47 1212.99 L1071.06 1212.99 L1071.64 1212.99 L1072.23 1212.99 L1072.81 1212.99 L1073.4 1212.99 L1073.99 1212.99 L1074.57 1212.99 L1075.16 1212.99 L1075.75 1212.99 L1076.33 1212.99 L1076.92 1212.99 L1077.51 1212.99 L1078.09 1212.99 L1078.68 1212.99 L1079.26 1212.99 L1079.85 1212.99 L1080.44 1212.99 L1081.02 1212.99 L1081.61 1212.99 L1082.2 1212.99 L1082.78 1212.99 L1083.37 1212.99 L1083.96 1212.99 L1084.54 1212.99 L1085.13 1212.99 L1085.72 1212.99 L1086.3 1212.99 L1086.89 1212.99 L1087.47 1212.99 L1088.06 1212.99 L1088.65 1212.99 L1089.23 1212.99 L1089.82 1212.99 L1090.41 1212.99 L1090.99 1212.99 L1091.58 1212.99 L1092.17 1212.99 L1092.75 1212.99 L1093.34 1212.99 L1093.93 1212.99 L1094.51 1212.99 L1095.1 1212.99 L1095.68 1212.99 L1096.27 1212.99 L1096.86 1212.99 L1097.44 1212.99 L1098.03 1212.99 L1098.62 1212.99 L1099.2 1212.99 L1099.79 1212.99 L1100.38 1212.99 L1100.96 1212.99 L1101.55 1212.99 L1102.14 1212.99 L1102.72 1212.99 L1103.31 1212.99 L1103.89 1212.99 L1104.48 1212.99 L1105.07 1212.99 L1105.65 1212.99 L1106.24 1212.99 L1106.83 1212.99 L1107.41 1212.99 L1108 1212.99 L1108.59 1212.99 L1109.17 1212.99 L1109.76 1212.99 L1110.34 1212.99 L1110.93 1212.99 L1111.52 1212.99 L1112.1 1212.99 L1112.69 1212.99 L1113.28 1212.99 L1113.86 1212.99 L1114.45 1212.99 L1115.04 1212.99 L1115.62 1212.99 L1116.21 1212.99 L1116.8 1212.99 L1117.38 1212.99 L1117.97 1212.99 L1118.55 1212.99 L1119.14 1212.99 L1119.73 1212.99 L1120.31 1212.99 L1120.9 1212.99 L1121.49 1212.99 L1122.07 1212.99 L1122.66 1212.99 L1123.25 1212.99 L1123.83 1212.99 L1124.42 1212.99 L1125.01 1212.99 L1125.59 1212.99 L1126.18 1212.99 L1126.76 1212.99 L1127.35 1212.99 L1127.94 1212.99 L1128.52 1212.99 L1129.11 1212.99 L1129.7 1212.99 L1130.28 1212.99 L1130.87 1212.99 L1131.46 1212.99 L1132.04 1212.99 L1132.63 1212.99 L1133.21 1212.99 L1133.8 1212.99 L1134.39 1212.99 L1134.97 1212.99 L1135.56 1212.99 L1136.15 1212.99 L1136.73 1212.99 L1137.32 1212.99 L1137.91 1212.99 L1138.49 1212.99 L1139.08 1212.99 L1139.67 1212.99 L1140.25 1212.99 L1140.84 1212.99 L1141.42 1212.99 L1142.01 1212.99 L1142.6 1212.99 L1143.18 1212.99 L1143.77 1212.99 L1144.36 1212.99 L1144.94 1212.99 L1145.53 1212.99 L1146.12 1212.99 L1146.7 1212.99 L1147.29 1212.99 L1147.88 1212.99 L1148.46 1212.99 L1149.05 1212.99 L1149.63 1212.99 L1150.22 1212.99 L1150.81 1212.99 L1151.39 1212.99 L1151.98 1212.99 L1152.57 1212.99 L1153.15 1212.99 L1153.74 1212.99 L1154.33 1212.99 L1154.91 1212.99 L1155.5 1212.99 L1156.09 1212.99 L1156.67 1212.99 L1157.26 1212.99 L1157.84 1212.99 L1158.43 1212.99 L1159.02 1212.99 L1159.6 1212.99 L1160.19 1212.99 L1160.78 1212.99 L1161.36 1212.99 L1161.95 1212.99 L1162.54 1212.99 L1163.12 1212.99 L1163.71 1212.99 L1164.29 1212.99 L1164.88 1212.99 L1165.47 1212.99 L1166.05 1212.99 L1166.64 1212.99 L1167.23 1212.99 L1167.81 1212.99 L1168.4 1212.99 L1168.99 1212.99 L1169.57 1212.99 L1170.16 1212.99 L1170.75 1212.99 L1171.33 1212.99 L1171.92 1212.99 L1172.5 1212.99 L1173.09 1212.99 L1173.68 1212.99 L1174.26 1212.99 L1174.85 1212.99 L1175.44 1212.99 L1176.02 1212.99 L1176.61 1212.99 L1177.2 1212.99 L1177.78 1212.99 L1178.37 1212.99 L1178.96 1212.99 L1179.54 1212.99 L1180.13 1212.99 L1180.71 1212.99 L1181.3 1212.99 L1181.89 1212.99 L1182.47 1212.99 L1183.06 1212.99 L1183.65 1212.99 L1184.23 1212.99 L1184.82 1212.99 L1185.41 1212.99 L1185.99 1212.99 L1186.58 1212.99 L1187.16 1212.99 L1187.75 1212.99 L1188.34 1212.99 L1188.92 1212.99 L1189.51 1212.99 L1190.1 1212.99 L1190.68 1212.99 L1191.27 1212.99 L1191.86 1212.99 L1192.44 1212.99 L1193.03 1212.99 L1193.62 1212.99 L1194.2 1212.99 L1194.79 1212.99 L1195.37 1212.99 L1195.96 1212.99 L1196.55 1212.99 L1197.13 1212.99 L1197.72 1212.99 L1198.31 1212.99 L1198.89 1212.99 L1199.48 1212.99 L1200.07 1212.99 L1200.65 1212.99 L1201.24 1212.99 L1201.83 1212.99 L1202.41 1212.99 L1203 1212.99 L1203.58 1212.99 L1204.17 1212.99 L1204.76 1212.99 L1205.34 1212.99 L1205.93 1212.99 L1206.52 1212.99 L1207.1 1212.99 L1207.69 1212.99 L1208.28 1212.99 L1208.86 1212.99 L1209.45 1212.99 L1210.03 1212.99 L1210.62 1212.99 L1211.21 1212.99 L1211.79 1212.99 L1212.38 1212.99 L1212.97 1212.99 L1213.55 1212.99 L1214.14 1212.99 L1214.73 1212.99 L1215.31 1212.99 L1215.9 1212.99 L1216.49 1212.99 L1217.07 1212.99 L1217.66 1212.99 L1218.24 1212.99 L1218.83 1212.99 L1219.42 1212.99 L1220 1212.99 L1220.59 1212.99 L1221.18 1212.99 L1221.76 1212.99 L1222.35 1212.99 L1222.94 1212.99 L1223.52 1212.99 L1224.11 1212.99 L1224.7 1212.99 L1225.28 1212.99 L1225.87 1212.99 L1226.45 1212.99 L1227.04 1212.99 L1227.63 1212.99 L1228.21 1212.99 L1228.8 1212.99 L1229.39 1212.99 L1229.97 1212.99 L1230.56 1212.99 L1231.15 1212.99 L1231.73 1212.99 L1232.32 1212.99 L1232.91 1212.99 L1233.49 1212.99 L1234.08 1212.99 L1234.66 1212.99 L1235.25 1212.99 L1235.84 1212.99 L1236.42 1212.99 L1237.01 1212.99 L1237.6 1212.99 L1238.18 1212.99 L1238.77 1212.99 L1239.36 1212.99 L1239.94 1212.99 L1240.53 1212.99 L1241.11 1212.99 L1241.7 1212.99 L1242.29 1212.99 L1242.87 1212.99 L1243.46 1212.99 L1244.05 1212.99 L1244.63 1212.99 L1245.22 1212.99 L1245.81 1212.99 L1246.39 1212.99 L1246.98 1212.99 L1247.57 1212.99 L1248.15 1212.99 L1248.74 1212.99 L1249.32 1212.99 L1249.91 1212.99 L1250.5 1212.99 L1251.08 1212.99 L1251.67 1212.99 L1252.26 1212.99 L1252.84 1212.99 L1253.43 1212.99 L1254.02 1212.99 L1254.6 1212.99 L1255.19 1212.99 L1255.78 1212.99 L1256.36 1212.99 L1256.95 1212.99 L1257.53 1212.99 L1258.12 1212.99 L1258.71 1212.99 L1259.29 1212.99 L1259.88 1212.99 L1260.47 1212.99 L1261.05 1212.99 L1261.64 1212.99 L1262.23 1212.99 L1262.81 1212.99 L1263.4 1212.99 L1263.98 1212.99 L1264.57 1212.99 L1265.16 1212.99 L1265.74 1212.99 L1266.33 1212.99 L1266.92 1212.99 L1267.5 1212.99 L1268.09 1212.99 L1268.68 1212.99 L1269.26 1212.99 L1269.85 1212.99 L1270.44 1212.99 L1271.02 1212.99 L1271.61 1212.99 L1272.19 1212.99 L1272.78 1212.99 L1273.37 1212.99 L1273.95 1212.99 L1274.54 1212.99 L1275.13 1212.99 L1275.71 1212.99 L1276.3 1212.99 L1276.89 1212.99 L1277.47 1212.99 L1278.06 1212.99 L1278.65 1212.99 L1279.23 1212.99 L1279.82 1212.99 L1280.4 1212.99 L1280.99 1212.99 L1281.58 1212.99 L1282.16 1212.99 L1282.75 1212.99 L1283.34 1212.99 L1283.92 1212.99 L1284.51 1212.99 L1285.1 1212.99 L1285.68 1212.99 L1286.27 1212.99 L1286.86 1212.99 L1287.44 1212.99 L1288.03 1212.99 L1288.61 1212.99 L1289.2 1212.99 L1289.79 1212.99 L1290.37 1212.99 L1290.96 1212.99 L1291.55 1212.99 L1292.13 1212.99 L1292.72 1212.99 L1293.31 1212.99 L1293.89 1212.99 L1294.48 1212.99 L1295.06 1212.99 L1295.65 1212.99 L1296.24 1212.99 L1296.82 1212.99 L1297.41 1212.99 L1298 1212.99 L1298.58 1212.99 L1299.17 1212.99 L1299.76 1212.99 L1300.34 1212.99 L1300.93 1212.99 L1301.52 1212.99 L1302.1 1212.99 L1302.69 1212.99 L1303.27 1212.99 L1303.86 1212.99 L1304.45 1212.99 L1305.03 1212.99 L1305.62 1212.99 L1306.21 1212.99 L1306.79 1212.99 L1307.38 1212.99 L1307.97 1212.99 L1308.55 1212.99 L1309.14 1212.99 L1309.73 1212.99 L1310.31 1212.99 L1310.9 1212.99 L1311.48 1212.99 L1312.07 1212.99 L1312.66 1212.99 L1313.24 1212.99 L1313.83 1212.99 L1314.42 1212.99 L1315 1212.99 L1315.59 1212.99 L1316.18 1212.99 L1316.76 1212.99 L1317.35 1212.99 L1317.93 1212.99 L1318.52 1212.99 L1319.11 1212.99 L1319.69 1212.99 L1320.28 1212.99 L1320.87 1212.99 L1321.45 1212.99 L1322.04 1212.99 L1322.63 1212.99 L1323.21 1212.99 L1323.8 1212.99 L1324.39 1212.99 L1324.97 1212.99 L1325.56 1212.99 L1326.14 1212.99 L1326.73 1212.99 L1327.32 1212.99 L1327.9 1212.99 L1328.49 1212.99 L1329.08 1212.99 L1329.66 1212.99 L1330.25 1212.99 L1330.84 1212.99 L1331.42 1212.99 L1332.01 1212.99 L1332.6 1212.99 L1333.18 1212.99 L1333.77 1212.99 L1334.35 1212.99 L1334.94 1212.99 L1335.53 1212.99 L1336.11 1212.99 L1336.7 1212.99 L1337.29 1212.99 L1337.87 1212.99 L1338.46 1212.99 L1339.05 1212.99 L1339.63 1212.99 L1340.22 1212.99 L1340.8 1212.99 L1341.39 1212.99 L1341.98 1212.99 L1342.56 1212.99 L1343.15 1212.99 L1343.74 1212.99 L1344.32 1212.99 L1344.91 1212.99 L1345.5 1212.99 L1346.08 1212.99 L1346.67 1212.99 L1347.26 1212.99 L1347.84 1212.99 L1348.43 1212.99 L1349.01 1212.99 L1349.6 1212.99 L1350.19 1212.99 L1350.77 1212.99 L1351.36 1212.99 L1351.95 1212.99 L1352.53 1212.99 L1353.12 1212.99 L1353.71 1212.99 L1354.29 1212.99 L1354.88 1212.99 L1355.47 1212.99 L1356.05 1212.99 L1356.64 1212.99 L1357.22 1212.99 L1357.81 1212.99 L1358.4 1212.99 L1358.98 1212.99 L1359.57 1212.99 L1360.16 1212.99 L1360.74 1212.99 L1361.33 1212.99 L1361.92 1212.99 L1362.5 1212.99 L1363.09 1212.99 L1363.68 1212.99 L1364.26 1212.99 L1364.85 1212.99 L1365.43 1212.99 L1366.02 1212.99 L1366.61 1212.99 L1367.19 1212.99 L1367.78 1212.99 L1368.37 1212.99 L1368.95 1212.99 L1369.54 1212.99 L1370.13 1212.99 L1370.71 1212.99 L1371.3 1212.99 L1371.88 1212.99 L1372.47 1212.99 L1373.06 1212.99 L1373.64 1212.99 L1374.23 1212.99 L1374.82 1212.99 L1375.4 1212.99 L1375.99 1212.99 L1376.58 1212.99 L1377.16 1212.99 L1377.75 1212.99 L1378.34 1212.99 L1378.92 1212.99 L1379.51 1212.99 L1380.09 1212.99 L1380.68 1212.99 L1381.27 1212.99 L1381.85 1212.99 L1382.44 1212.99 L1383.03 1212.99 L1383.61 1212.99 L1384.2 1212.99 L1384.79 1212.99 L1385.37 1212.99 L1385.96 1212.99 L1386.55 1212.99 L1387.13 1212.99 L1387.72 1212.99 L1388.3 1212.99 L1388.89 1212.99 L1389.48 1212.99 L1390.06 1212.99 L1390.65 1212.99 L1391.24 1212.99 L1391.82 1212.99 L1392.41 1212.99 L1393 1212.99 L1393.58 1212.99 L1394.17 1212.99 L1394.75 1212.99 L1395.34 1212.99 L1395.93 1212.99 L1396.51 1212.99 L1397.1 1212.99 L1397.69 1212.99 L1398.27 1212.99 L1398.86 1212.99 L1399.45 1212.99 L1400.03 1212.99 L1400.62 1212.99 L1401.21 1212.99 L1401.79 1212.99 L1402.38 1212.99 L1402.96 1212.99 L1403.55 1212.99 L1404.14 1212.99 L1404.72 1212.99 L1405.31 1212.99 L1405.9 1212.99 L1406.48 1212.99 L1407.07 1212.99 L1407.66 1212.99 L1408.24 1212.99 L1408.83 1212.99 L1409.42 1212.99 L1410 1212.99 L1410.59 1212.99 L1411.17 1212.99 L1411.76 1212.99 L1412.35 1212.99 L1412.93 1212.99 L1413.52 1212.99 L1414.11 1212.99 L1414.69 1212.99 L1415.28 1212.99 L1415.87 1212.99 L1416.45 1212.99 L1417.04 1212.99 L1417.63 1212.99 L1418.21 1212.99 L1418.8 1212.99 L1419.38 1212.99 L1419.97 1212.99 L1420.56 1212.99 L1421.14 1212.99 L1421.73 1212.99 L1422.32 1212.99 L1422.9 1212.99 L1423.49 1212.99 L1424.08 1212.99 L1424.66 1212.99 L1425.25 1212.99 L1425.83 1212.99 L1426.42 1212.99 L1427.01 1212.99 L1427.59 1212.99 L1428.18 1212.99 L1428.77 1212.99 L1429.35 1212.99 L1429.94 1212.99 L1430.53 1212.99 L1431.11 1212.99 L1431.7 1212.99 L1432.29 1212.99 L1432.87 1212.99 L1433.46 1212.99 L1434.04 1212.99 L1434.63 1212.99 L1435.22 1212.99 L1435.8 1212.99 L1436.39 1212.99 L1436.98 1212.99 L1437.56 1212.99 L1438.15 1212.99 L1438.74 1212.99 L1439.32 1212.99 L1439.91 1212.99 L1440.5 1212.99 L1441.08 1212.99 L1441.67 1212.99 L1442.25 1212.99 L1442.84 1212.99 L1443.43 1212.99 L1444.01 1212.99 L1444.6 1212.99 L1445.19 1212.99 L1445.77 1212.99 L1446.36 1212.99 L1446.95 1212.99 L1447.53 1212.99 L1448.12 1212.99 L1448.7 1212.99 L1449.29 1212.99 L1449.88 1212.99 L1450.46 1212.99 L1451.05 1212.99 L1451.64 1212.99 L1452.22 1212.99 L1452.81 1212.99 L1453.4 1212.99 L1453.98 1212.99 L1454.57 1212.99 L1455.16 1212.99 L1455.74 1212.99 L1456.33 1212.99 L1456.91 1212.99 L1457.5 1212.99 L1458.09 1212.99 L1458.67 1212.99 L1459.26 1212.99 L1459.85 1212.99 L1460.43 1212.99 L1461.02 1212.99 L1461.61 1212.99 L1462.19 1212.99 L1462.78 1212.99 L1463.37 1212.99 L1463.95 1212.99 L1464.54 1212.99 L1465.12 1212.99 L1465.71 1212.99 L1466.3 1212.99 L1466.88 1212.99 L1467.47 1212.99 L1468.06 1212.99 L1468.64 1212.99 L1469.23 1212.99 L1469.82 1212.99 L1470.4 1212.99 L1470.99 1212.99 L1471.57 1212.99 L1472.16 1212.99 L1472.75 1212.99 L1473.33 1212.99 L1473.92 1212.99 L1474.51 1212.99 L1475.09 1212.99 L1475.68 1212.99 L1476.27 1212.99 L1476.85 1212.99 L1477.44 1212.99 L1478.03 1212.99 L1478.61 1212.99 L1479.2 1212.99 L1479.78 1212.99 L1480.37 1212.99 L1480.96 1212.99 L1481.54 1212.99 L1482.13 1212.99 L1482.72 1212.99 L1483.3 1212.99 L1483.89 1212.99 L1484.48 1212.99 L1485.06 1212.99 L1485.65 1212.99 L1486.24 1212.99 L1486.82 1212.99 L1487.41 1212.99 L1487.99 1212.99 L1488.58 1212.99 L1489.17 1212.99 L1489.75 1212.99 L1490.34 1212.99 L1490.93 1212.99 L1491.51 1212.99 L1492.1 1212.99 L1492.69 1212.99 L1493.27 1212.99 L1493.86 1212.99 L1494.45 1212.99 L1495.03 1212.99 L1495.62 1212.99 L1496.2 1212.99 L1496.79 1212.99 L1497.38 1212.99 L1497.96 1212.99 L1498.55 1212.99 L1499.14 1212.99 L1499.72 1212.99 L1500.31 1212.99 L1500.9 1212.99 L1501.48 1212.99 L1502.07 1212.99 L1502.65 1212.99 L1503.24 1212.99 L1503.83 1212.99 L1504.41 1212.99 L1505 1212.99 L1505.59 1212.99 L1506.17 1212.99 L1506.76 1212.99 L1507.35 1212.99 L1507.93 1212.99 L1508.52 1212.99 L1509.11 1212.99 L1509.69 1212.99 L1510.28 1212.99 L1510.86 1212.99 L1511.45 1212.99 L1512.04 1212.99 L1512.62 1212.99 L1513.21 1212.99 L1513.8 1212.99 L1514.38 1212.99 L1514.97 1212.99 L1515.56 1212.99 L1516.14 1212.99 L1516.73 1212.99 L1517.32 1212.99 L1517.9 1212.99 L1518.49 1212.99 L1519.07 1212.99 L1519.66 1212.99 L1520.25 1212.99 L1520.83 1212.99 L1521.42 1212.99 L1522.01 1212.99 L1522.59 1212.99 L1523.18 1212.99 L1523.77 1212.99 L1524.35 1212.99 L1524.94 1212.99 L1525.52 1212.99 L1526.11 1212.99 L1526.7 1212.99 L1527.28 1212.99 L1527.87 1212.99 L1528.46 1212.99 L1529.04 1212.99 L1529.63 1212.99 L1530.22 1212.99 L1530.8 1212.99 L1531.39 1212.99 L1531.98 1212.99 L1532.56 1212.99 L1533.15 1212.99 L1533.73 1212.99 L1534.32 1212.99 L1534.91 1212.99 L1535.49 1212.99 L1536.08 1212.99 L1536.67 1212.99 L1537.25 1212.99 L1537.84 1212.99 L1538.43 1212.99 L1539.01 1212.99 L1539.6 1212.99 L1540.19 1212.99 L1540.77 1212.99 L1541.36 1212.99 L1541.94 1212.99 L1542.53 1212.99 L1543.12 1212.99 L1543.7 1212.99 L1544.29 1212.99 L1544.88 1212.99 L1545.46 1212.99 L1546.05 1212.99 L1546.64 1212.99 L1547.22 1212.99 L1547.81 1212.99 L1548.4 1212.99 L1548.98 1212.99 L1549.57 1212.99 L1550.15 1212.99 L1550.74 1212.99 L1551.33 1212.99 L1551.91 1212.99 L1552.5 1212.99 L1553.09 1212.99 L1553.67 1212.99 L1554.26 1212.99 L1554.85 1212.99 L1555.43 1212.99 L1556.02 1212.99 L1556.6 1212.99 L1557.19 1212.99 L1557.78 1212.99 L1558.36 1212.99 L1558.95 1212.99 L1559.54 1212.99 L1560.12 1212.99 L1560.71 1212.99 L1561.3 1212.99 L1561.88 1212.99 L1562.47 1212.99 L1563.06 1212.99 L1563.64 1212.99 L1564.23 1212.99 L1564.81 1212.99 L1565.4 1212.99 L1565.99 1212.99 L1566.57 1212.99 L1567.16 1212.99 L1567.75 1212.99 L1568.33 1212.99 L1568.92 1212.99 L1569.51 1212.99 L1570.09 1212.99 L1570.68 1212.99 L1571.27 1212.99 L1571.85 1212.99 L1572.44 1212.99 L1573.02 1212.99 L1573.61 1212.99 L1574.2 1212.99 L1574.78 1212.99 L1575.37 1212.99 L1575.96 1212.99 L1576.54 1212.99 L1577.13 1212.99 L1577.72 1212.99 L1578.3 1212.99 L1578.89 1212.99 L1579.47 1212.99 L1580.06 1212.99 L1580.65 1212.99 L1581.23 1212.99 L1581.82 1212.99 L1582.41 1212.99 L1582.99 1212.99 L1583.58 1212.99 L1584.17 1212.99 L1584.75 1212.99 L1585.34 1212.99 L1585.93 1212.99 L1586.51 1212.99 L1587.1 1212.99 L1587.68 1212.99 L1588.27 1212.99 L1588.86 1212.99 L1589.44 1212.99 L1590.03 1212.99 L1590.62 1212.99 L1591.2 1212.99 L1591.79 1212.99 L1592.38 1212.99 L1592.96 1212.99 L1593.55 1212.99 L1594.14 1212.99 L1594.72 1212.99 L1595.31 1212.99 L1595.89 1212.99 L1596.48 1212.99 L1597.07 1212.99 L1597.65 1212.99 L1598.24 1212.99 L1598.83 1212.99 L1599.41 1212.99 L1600 1212.99 L1600.59 1212.99 L1601.17 1212.99 L1601.76 1212.99 L1602.34 1212.99 L1602.93 1212.99 L1603.52 1212.99 L1604.1 1212.99 L1604.69 1212.99 L1605.28 1212.99 L1605.86 1212.99 L1606.45 1212.99 L1607.04 1212.99 L1607.62 1212.99 L1608.21 1212.99 L1608.8 1212.99 L1609.38 1212.99 L1609.97 1212.99 L1610.55 1212.99 L1611.14 1212.99 L1611.73 1212.99 L1612.31 1212.99 L1612.9 1212.99 L1613.49 1212.99 L1614.07 1212.99 L1614.66 1212.99 L1615.25 1212.99 L1615.83 1212.99 L1616.42 1212.99 L1617.01 1212.99 L1617.59 1212.99 L1618.18 1212.99 L1618.76 1212.99 L1619.35 1212.99 L1619.94 1212.99 L1620.52 1212.99 L1621.11 1212.99 L1621.7 1212.99 L1622.28 1212.99 L1622.87 1212.99 L1623.46 1212.99 L1624.04 1212.99 L1624.63 1212.99 L1625.22 1212.99 L1625.8 1212.99 L1626.39 1212.99 L1626.97 1212.99 L1627.56 1212.99 L1628.15 1212.99 L1628.73 1212.99 L1629.32 1212.99 L1629.91 1212.99 L1630.49 1212.99 L1631.08 1212.99 L1631.67 1212.99 L1632.25 1212.99 L1632.84 1212.99 L1633.42 1212.99 L1634.01 1212.99 L1634.6 1212.99 L1635.18 1212.99 L1635.77 1212.99 L1636.36 1212.99 L1636.94 1212.99 L1637.53 1212.99 L1638.12 1212.99 L1638.7 1212.99 L1639.29 1212.99 L1639.88 1212.99 L1640.46 1212.99 L1641.05 1212.99 L1641.63 1212.99 L1642.22 1212.99 L1642.81 1212.99 L1643.39 1212.99 L1643.98 1212.99 L1644.57 1212.99 L1645.15 1212.99 L1645.74 1212.99 L1646.33 1212.99 L1646.91 1212.99 L1647.5 1212.99 L1648.09 1212.99 L1648.67 1212.99 L1649.26 1212.99 L1649.84 1212.99 L1650.43 1212.99 L1651.02 1212.99 L1651.6 1212.99 L1652.19 1212.99 L1652.78 1212.99 L1653.36 1212.99 L1653.95 1212.99 L1654.54 1212.99 L1655.12 1212.99 L1655.71 1212.99 L1656.29 1212.99 L1656.88 1212.99 L1657.47 1212.99 L1658.05 1212.99 L1658.64 1212.99 L1659.23 1212.99 L1659.81 1212.99 L1660.4 1212.99 L1660.99 1212.99 L1661.57 1212.99 L1662.16 1212.99 L1662.75 1212.99 L1663.33 1212.99 L1663.92 1212.99 L1664.5 1212.99 L1665.09 1212.99 L1665.68 1212.99 L1666.26 1212.99 L1666.85 1212.99 L1667.44 1212.99 L1668.02 1212.99 L1668.61 1212.99 L1669.2 1212.99 L1669.78 1212.99 L1670.37 1212.99 L1670.96 1212.99 L1671.54 1212.99 L1672.13 1212.99 L1672.71 1212.99 L1673.3 1212.99 L1673.89 1212.99 L1674.47 1212.99 L1675.06 1212.99 L1675.65 1212.99 L1676.23 1212.99 L1676.82 1212.99 L1677.41 1212.99 L1677.99 1212.99 L1678.58 1212.99 L1679.17 1212.99 L1679.75 1212.99 L1680.34 1212.99 L1680.92 1212.99 L1681.51 1212.99 L1682.1 1212.99 L1682.68 1212.99 L1683.27 1212.99 L1683.86 1212.99 L1684.44 1212.99 L1685.03 1212.99 L1685.62 1212.99 L1686.2 1212.99 L1686.79 1212.99 L1687.37 1212.99 L1687.96 1212.99 L1688.55 1212.99 L1689.13 1212.99 L1689.72 1212.99 L1690.31 1212.99 L1690.89 1212.99 L1691.48 1212.99 L1692.07 1212.99 L1692.65 1212.99 L1693.24 1212.99 L1693.83 1212.99 L1694.41 1212.99 L1695 1212.99 L1695.58 1212.99 L1696.17 1212.99 L1696.76 1212.99 L1697.34 1212.99 L1697.93 1212.99 L1698.52 1212.99 L1699.1 1212.99 L1699.69 1212.99 L1700.28 1212.99 L1700.86 1212.99 L1701.45 1212.99 L1702.04 1212.99 L1702.62 1212.99 L1703.21 1212.99 L1703.79 1212.99 L1704.38 1212.99 L1704.97 1212.99 L1705.55 1212.99 L1706.14 1212.99 L1706.73 1212.99 L1707.31 1212.99 L1707.9 1212.99 L1708.49 1212.99 L1709.07 1212.99 L1709.66 1212.99 L1710.24 1212.99 L1710.83 1212.99 L1711.42 1212.99 L1712 1212.99 L1712.59 1212.99 L1713.18 1212.99 L1713.76 1212.99 L1714.35 1212.99 L1714.94 1212.99 L1715.52 1212.99 L1716.11 1212.99 L1716.7 1212.99 L1717.28 1212.99 L1717.87 1212.99 L1718.45 1212.99 L1719.04 1212.99 L1719.63 1212.99 L1720.21 1212.99 L1720.8 1212.99 L1721.39 1212.99 L1721.97 1212.99 L1722.56 1212.99 L1723.15 1212.99 L1723.73 1212.99 L1724.32 1212.99 L1724.91 1212.99 L1725.49 1212.99 L1726.08 1212.99 L1726.66 1212.99 L1727.25 1212.99 L1727.84 1212.99 L1728.42 1212.99 L1729.01 1212.99 L1729.6 1212.99 L1730.18 1212.99 L1730.77 1212.99 L1731.36 1212.99 L1731.94 1212.99 L1732.53 1212.99 L1733.11 1212.99 L1733.7 1212.99 L1734.29 1212.99 L1734.87 1212.99 L1735.46 1212.99 L1736.05 1212.99 L1736.63 1212.99 L1737.22 1212.99 L1737.81 1212.99 L1738.39 1212.99 L1738.98 1212.99 L1739.57 1212.99 L1740.15 1212.99 L1740.74 1212.99 L1741.32 1212.99 L1741.91 1212.99 L1742.5 1212.99 L1743.08 1212.99 L1743.67 1212.99 L1744.26 1212.99 L1744.84 1212.99 L1745.43 1212.99 L1746.02 1212.99 L1746.6 1212.99 L1747.19 1212.99 L1747.78 1212.99 L1748.36 1212.99 L1748.95 1212.99 L1749.53 1212.99 L1750.12 1212.99 L1750.71 1212.99 L1751.29 1212.99 L1751.88 1212.99 L1752.47 1212.99 L1753.05 1212.99 L1753.64 1212.99 L1754.23 1212.99 L1754.81 1212.99 L1755.4 1212.99 L1755.99 1212.99 L1756.57 1212.99 L1757.16 1212.99 L1757.74 1212.99 L1758.33 1212.99 L1758.92 1212.99 L1759.5 1212.99 L1760.09 1212.99 L1760.68 1212.99 L1761.26 1212.99 L1761.85 1212.99 L1762.44 1212.99 L1763.02 1212.99 L1763.61 1212.99 L1764.19 1212.99 L1764.78 1212.99 L1765.37 1212.99 L1765.95 1212.99 L1766.54 1212.99 L1767.13 1212.99 L1767.71 1212.99 L1768.3 1212.99 L1768.89 1212.99 L1769.47 1212.99 L1770.06 1212.99 L1770.65 1212.99 L1771.23 1212.99 L1771.82 1212.99 L1772.4 1212.99 L1772.99 1212.99 L1773.58 1212.99 L1774.16 1212.99 L1774.75 1212.99 L1775.34 1212.99 L1775.92 1212.99 L1776.51 1212.99 L1777.1 1212.99 L1777.68 1212.99 L1778.27 1212.99 L1778.86 1212.99 L1779.44 1212.99 L1780.03 1212.99 L1780.61 1212.99 L1781.2 1212.99 L1781.79 1212.99 L1782.37 1212.99 L1782.96 1212.99 L1783.55 1212.99 L1784.13 1212.99 L1784.72 1212.99 L1785.31 1212.99 L1785.89 1212.99 L1786.48 1212.99 L1787.06 1212.99 L1787.65 1212.99 L1788.24 1212.99 L1788.82 1212.99 L1789.41 1212.99 L1790 1212.99 L1790.58 1212.99 L1791.17 1212.99 L1791.76 1212.99 L1792.34 1212.99 L1792.93 1212.99 L1793.52 1212.99 L1794.1 1212.99 L1794.69 1212.99 L1795.27 1212.99 L1795.86 1212.99 L1796.45 1212.99 L1797.03 1212.99 L1797.62 1212.99 L1798.21 1212.99 L1798.79 1212.99 L1799.38 1212.99 L1799.97 1212.99 L1800.55 1212.99 L1801.14 1212.99 L1801.73 1212.99 L1802.31 1212.99 L1802.9 1212.99 L1803.48 1212.99 L1804.07 1212.99 L1804.66 1212.99 L1805.24 1212.99 L1805.83 1212.99 L1806.42 1212.99 L1807 1212.99 L1807.59 1212.99 L1808.18 1212.99 L1808.76 1212.99 L1809.35 1212.99 L1809.94 1212.99 L1810.52 1212.99 L1811.11 1212.99 L1811.69 1212.99 L1812.28 1212.99 L1812.87 1212.99 L1813.45 1212.99 L1814.04 1212.99 L1814.63 1212.99 L1815.21 1212.99 L1815.8 1212.99 L1816.39 1212.99 L1816.97 1212.99 L1817.56 1212.99 L1818.14 1212.99 L1818.73 1212.99 L1819.32 1212.99 L1819.9 1212.99 L1820.49 1212.99 L1821.08 1212.99 L1821.66 1212.99 L1822.25 1212.99 L1822.84 1212.99 L1823.42 1212.99 L1824.01 1212.99 L1824.6 1212.99 L1825.18 1212.99 L1825.77 1212.99 L1826.35 1212.99 L1826.94 1212.99 L1827.53 1212.99 L1828.11 1212.99 L1828.7 1212.99 L1829.29 1212.99 L1829.87 1212.99 L1830.46 1212.99 L1831.05 1212.99 L1831.63 1212.99 L1832.22 1212.99 L1832.81 1212.99 L1833.39 1212.99 L1833.98 1212.99 L1834.56 1212.99 L1835.15 1212.99 L1835.74 1212.99 L1836.32 1212.99 L1836.91 1212.99 L1837.5 1212.99 L1838.08 1212.99 L1838.67 1212.99 L1839.26 1212.99 L1839.84 1212.99 L1840.43 1212.99 L1841.01 1212.99 L1841.6 1212.99 L1842.19 1212.99 L1842.77 1212.99 L1843.36 1212.99 L1843.95 1212.99 L1844.53 1212.99 L1845.12 1212.99 L1845.71 1212.99 L1846.29 1212.99 L1846.88 1212.99 L1847.47 1212.99 L1848.05 1212.99 L1848.64 1212.99 L1849.22 1212.99 L1849.81 1212.99 L1850.4 1212.99 L1850.98 1212.99 L1851.57 1212.99 L1852.16 1212.99 L1852.74 1212.99 L1853.33 1212.99 L1853.92 1212.99 L1854.5 1212.99 L1855.09 1212.99 L1855.68 1212.99 L1856.26 1212.99 L1856.85 1212.99 L1857.43 1212.99 L1858.02 1212.99 L1858.61 1212.99 L1859.19 1212.99 L1859.78 1212.99 L1860.37 1212.99 L1860.95 1212.99 L1861.54 1212.99 L1862.13 1212.99 L1862.71 1212.99 L1863.3 1212.99 L1863.88 1212.99 L1864.47 1212.99 L1865.06 1212.99 L1865.64 1212.99 L1866.23 1212.99 L1866.82 1212.99 L1867.4 1212.99 L1867.99 1212.99 L1868.58 1212.99 L1869.16 1212.99 L1869.75 1212.99 L1870.34 1212.99 L1870.92 1212.99 L1871.51 1212.99 L1872.09 1212.99 L1872.68 1212.99 L1873.27 1212.99 L1873.85 1212.99 L1874.44 1212.99 L1875.03 1212.99 L1875.61 1212.99 L1876.2 1212.99 L1876.79 1212.99 L1877.37 1212.99 L1877.96 1212.99 L1878.55 1212.99 L1879.13 1212.99 L1879.72 1212.99 L1880.3 1212.99 L1880.89 1212.99 L1881.48 1212.99 L1882.06 1212.99 L1882.65 1212.99 L1883.24 1212.99 L1883.82 1212.99 L1884.41 1212.99 L1885 1212.99 L1885.58 1212.99 L1886.17 1212.99 L1886.76 1212.99 L1887.34 1212.99 L1887.93 1212.99 L1888.51 1212.99 L1889.1 1212.99 L1889.69 1212.99 L1890.27 1212.99 L1890.86 1212.99 L1891.45 1212.99 L1892.03 1212.99 L1892.62 1212.99 L1893.21 1212.99 L1893.79 1212.99 L1894.38 1212.99 L1894.96 1212.99 L1895.55 1212.99 L1896.14 1212.99 L1896.72 1212.99 L1897.31 1212.99 L1897.9 1212.99 L1898.48 1212.99 L1899.07 1212.99 L1899.66 1212.99 L1900.24 1212.99 L1900.83 1212.99 L1901.42 1212.99 L1902 1212.99 L1902.59 1212.99 L1903.17 1212.99 L1903.76 1212.99 L1904.35 1212.99 L1904.93 1212.99 L1905.52 1212.99 L1906.11 1212.99 L1906.69 1212.99 L1907.28 1212.99 L1907.87 1212.99 L1908.45 1212.99 L1909.04 1212.99 L1909.63 1212.99 L1910.21 1212.99 L1910.8 1212.99 L1911.38 1212.99 L1911.97 1212.99 L1912.56 1212.99 L1913.14 1212.99 L1913.73 1212.99 L1914.32 1212.99 L1914.9 1212.99 L1915.49 1212.99 L1916.08 1212.99 L1916.66 1212.99 L1917.25 1212.99 L1917.83 1212.99 L1918.42 1212.99 L1919.01 1212.99 L1919.59 1212.99 L1920.18 1212.99 L1920.77 1212.99 L1921.35 1212.99 L1921.94 1212.99 L1922.53 1212.99 L1923.11 1212.99 L1923.7 1212.99 L1924.29 1212.99 L1924.87 1212.99 L1925.46 1212.99 L1926.04 1212.99 L1926.63 1212.99 L1927.22 1212.99 L1927.8 1212.99 L1928.39 1212.99 L1928.98 1212.99 L1929.56 1212.99 L1930.15 1212.99 L1930.74 1212.99 L1931.32 1212.99 L1931.91 1212.99 L1932.5 1212.99 L1933.08 1212.99 L1933.67 1212.99 L1934.25 1212.99 L1934.84 1212.99 L1935.43 1212.99 L1936.01 1212.99 L1936.6 1212.99 L1937.19 1212.99 L1937.77 1212.99 L1938.36 1212.99 L1938.95 1212.99 L1939.53 1212.99 L1940.12 1212.99 L1940.71 1212.99 L1941.29 1212.99 L1941.88 1212.99 L1942.46 1212.99 L1943.05 1212.99 L1943.64 1212.99 L1944.22 1212.99 L1944.81 1212.99 L1945.4 1212.99 L1945.98 1212.99 L1946.57 1212.99 L1947.16 1212.99 L1947.74 1212.99 L1948.33 1212.99 L1948.91 1212.99 L1949.5 1212.99 L1950.09 1212.99 L1950.67 1212.99 L1951.26 1212.99 L1951.85 1212.99 L1952.43 1212.99 L1953.02 1212.99 L1953.61 1212.99 L1954.19 1212.99 L1954.78 1212.99 L1955.37 1212.99 L1955.95 1212.99 L1956.54 1212.99 L1957.12 1212.99 L1957.71 1212.99 L1958.3 1212.99 L1958.88 1212.99 L1959.47 1212.99 L1960.06 1212.99 L1960.64 1212.99 L1961.23 1212.99 L1961.82 1212.99 L1962.4 1212.99 L1962.99 1212.99 L1963.58 1212.99 L1964.16 1212.99 L1964.75 1212.99 L1965.33 1212.99 L1965.92 1212.99 L1966.51 1212.99 L1967.09 1212.99 L1967.68 1212.99 L1968.27 1212.99 L1968.85 1212.99 L1969.44 1212.99 L1970.03 1212.99 L1970.61 1212.99 L1971.2 1212.99 L1971.78 1212.99 L1972.37 1212.99 L1972.96 1212.99 L1973.54 1212.99 L1974.13 1212.99 L1974.72 1212.99 L1975.3 1212.99 L1975.89 1212.99 L1976.48 1212.99 L1977.06 1212.99 L1977.65 1212.99 L1978.24 1212.99 L1978.82 1212.99 L1979.41 1212.99 L1979.99 1212.99 L1980.58 1212.99 L1981.17 1212.99 L1981.75 1212.99 L1982.34 1212.99 L1982.93 1212.99 L1983.51 1212.99 L1984.1 1212.99 L1984.69 1212.99 L1985.27 1212.99 L1985.86 1212.99 L1986.45 1212.99 L1987.03 1212.99 L1987.62 1212.99 L1988.2 1212.99 L1988.79 1212.99 L1989.38 1212.99 L1989.96 1212.99 L1990.55 1212.99 L1991.14 1212.99 L1991.72 1212.99 L1992.31 1212.99 L1992.9 1212.99 L1993.48 1212.99 L1994.07 1212.99 L1994.65 1212.99 L1995.24 1212.99 L1995.83 1212.99 L1996.41 1212.99 L1997 1212.99 L1997.59 1212.99 L1998.17 1212.99 L1998.76 1212.99 L1999.35 1212.99 L1999.93 1212.99 L2000.52 1212.99 L2001.11 1212.99 L2001.69 1212.99 L2002.28 1212.99 L2002.86 1212.99 L2003.45 1212.99 L2004.04 1212.99 L2004.62 1212.99 L2005.21 1212.99 L2005.8 1212.99 L2006.38 1212.99 L2006.97 1212.99 L2007.56 1212.99 L2008.14 1212.99 L2008.73 1212.99 L2009.32 1212.99 L2009.9 1212.99 L2010.49 1212.99 L2011.07 1212.99 L2011.66 1212.99 L2012.25 1212.99 L2012.83 1212.99 L2013.42 1212.99 L2014.01 1212.99 L2014.59 1212.99 L2015.18 1212.99 L2015.77 1212.99 L2016.35 1212.99 L2016.94 1212.99 L2017.53 1212.99 L2018.11 1212.99 L2018.7 1212.99 L2019.28 1212.99 L2019.87 1212.99 L2020.46 1212.99 L2021.04 1212.99 L2021.63 1212.99 L2022.22 1212.99 L2022.8 1212.99 L2023.39 1212.99 L2023.98 1212.99 L2024.56 1212.99 L2025.15 1212.99 L2025.73 1212.99 L2026.32 1212.99 L2026.91 1212.99 L2027.49 1212.99 L2028.08 1212.99 L2028.67 1212.99 L2029.25 1212.99 L2029.84 1212.99 L2030.43 1212.99 L2031.01 1212.99 L2031.6 1212.99 L2032.19 1212.99 L2032.77 1212.99 L2033.36 1212.99 L2033.94 1212.99 L2034.53 1212.99 L2035.12 1212.99 L2035.7 1212.99 L2036.29 1212.99 L2036.88 1212.99 L2037.46 1212.99 L2038.05 1212.99 L2038.64 1212.99 L2039.22 1212.99 L2039.81 1212.99 L2040.4 1212.99 L2040.98 1212.99 L2041.57 1212.99 L2042.15 1212.99 L2042.74 1212.99 L2043.33 1212.99 L2043.91 1212.99 L2044.5 1212.99 L2045.09 1212.99 L2045.67 1212.99 L2046.26 1212.99 L2046.85 1212.99 L2047.43 1212.99 L2048.02 1212.99 L2048.6 1212.99 L2049.19 1212.99 L2049.78 1212.99 L2050.36 1212.99 L2050.95 1212.99 L2051.54 1212.99 L2052.12 1212.99 L2052.71 1212.99 L2053.3 1212.99 L2053.88 1212.99 L2054.47 1212.99 L2055.06 1212.99 L2055.64 1212.99 L2056.23 1212.99 L2056.81 1212.99 L2057.4 1212.99 L2057.99 1212.99 L2058.57 1212.99 L2059.16 1212.99 L2059.75 1212.99 L2060.33 1212.99 L2060.92 1212.99 L2061.51 1212.99 L2062.09 1212.99 L2062.68 1212.99 L2063.27 1212.99 L2063.85 1212.99 L2064.44 1212.99 L2065.02 1212.99 L2065.61 1212.99 L2066.2 1212.99 L2066.78 1212.99 L2067.37 1212.99 L2067.96 1212.99 L2068.54 1212.99 L2069.13 1212.99 L2069.72 1212.99 L2070.3 1212.99 L2070.89 1212.99 L2071.48 1212.99 L2072.06 1212.99 L2072.65 1212.99 L2073.23 1212.99 L2073.82 1212.99 L2074.41 1212.99 L2074.99 1212.99 L2075.58 1212.99 L2076.17 1212.99 L2076.75 1212.99 L2077.34 1212.99 L2077.93 1212.99 L2078.51 1212.99 L2079.1 1212.99 L2079.68 1212.99 L2080.27 1212.99 L2080.86 1212.99 L2081.44 1212.99 L2082.03 1212.99 L2082.62 1212.99 L2083.2 1212.99 L2083.79 1212.99 L2084.38 1212.99 L2084.96 1212.99 L2085.55 1212.99 L2086.14 1212.99 L2086.72 1212.99 L2087.31 1212.99 L2087.89 1212.99 L2088.48 1212.99 L2089.07 1212.99 L2089.65 1212.99 L2090.24 1212.99 L2090.83 1212.99 L2091.41 1212.99 L2092 1212.99 L2092.59 1212.99 L2093.17 1212.99 L2093.76 1212.99 L2094.35 1212.99 L2094.93 1212.99 L2095.52 1212.99 L2096.1 1212.99 L2096.69 1212.99 L2097.28 1212.99 L2097.86 1212.99 L2098.45 1212.99 L2099.04 1212.99 L2099.62 1212.99 L2100.21 1212.99 L2100.8 1212.99 L2101.38 1212.99 L2101.97 1212.99 L2102.55 1212.99 L2103.14 1212.99 L2103.73 1212.99 L2104.31 1212.99 L2104.9 1212.99 L2105.49 1212.99 L2106.07 1212.99 L2106.66 1212.99 L2107.25 1212.99 L2107.83 1212.99 L2108.42 1212.99 L2109.01 1212.99 L2109.59 1212.99 L2110.18 1212.99 L2110.76 1212.99 L2111.35 1212.99 L2111.94 1212.99 L2112.52 1212.99 L2113.11 1212.99 L2113.7 1212.99 L2114.28 1212.99 L2114.87 1212.99 L2115.46 1212.99 L2116.04 1212.99 L2116.63 1212.99 L2117.22 1212.99 L2117.8 1212.99 L2118.39 1212.99 L2118.97 1212.99 L2119.56 1212.99 L2120.15 1212.99 L2120.73 1212.99 L2121.32 1212.99 L2121.91 1212.99 L2122.49 1212.99 L2123.08 1212.99 L2123.67 1212.99 L2124.25 1212.99 L2124.84 1212.99 L2125.42 1212.99 L2126.01 1212.99 L2126.6 1212.99 L2127.18 1212.99 L2127.77 1212.99 L2128.36 1212.99 L2128.94 1212.99 L2129.53 1212.99 L2130.12 1212.99 L2130.7 1212.99 L2131.29 1212.99 L2131.88 1212.99 L2132.46 1212.99 L2133.05 1212.99 L2133.63 1212.99 L2134.22 1212.99 L2134.81 1212.99 L2135.39 1212.99 L2135.98 1212.99 L2136.57 1212.99 L2137.15 1212.99 L2137.74 1212.99 L2138.33 1212.99 L2138.91 1212.99 L2139.5 1212.99 L2140.09 1212.99 L2140.67 1212.99 L2141.26 1212.99 L2141.84 1212.99 L2142.43 1212.99 L2143.02 1212.99 L2143.6 1212.99 L2144.19 1212.99 L2144.78 1212.99 L2145.36 1212.99 L2145.95 1212.99 L2146.54 1212.99 L2147.12 1212.99 L2147.71 1212.99 L2148.3 1212.99 L2148.88 1212.99 L2149.47 1212.99 L2150.05 1212.99 L2150.64 1212.99 L2151.23 1212.99 L2151.81 1212.99 L2152.4 1212.99 L2152.99 1212.99 L2153.57 1212.99 L2154.16 1212.99 L2154.75 1212.99 L2155.33 1212.99 L2155.92 1212.99 L2156.5 1212.99 L2157.09 1212.99 L2157.68 1212.99 L2158.26 1212.99 L2158.26 1212.26 L2157.68 1212.26 L2157.09 1212.26 L2156.5 1212.26 L2155.92 1212.26 L2155.33 1212.26 L2154.75 1212.26 L2154.16 1212.26 L2153.57 1212.26 L2152.99 1212.26 L2152.4 1212.26 L2151.81 1212.26 L2151.23 1212.26 L2150.64 1212.26 L2150.05 1212.26 L2149.47 1212.26 L2148.88 1212.26 L2148.3 1212.26 L2147.71 1212.26 L2147.12 1212.26 L2146.54 1212.26 L2145.95 1212.26 L2145.36 1212.26 L2144.78 1212.26 L2144.19 1212.26 L2143.6 1212.26 L2143.02 1212.26 L2142.43 1212.26 L2141.84 1212.26 L2141.26 1212.26 L2140.67 1212.26 L2140.09 1212.26 L2139.5 1212.26 L2138.91 1212.26 L2138.33 1212.26 L2137.74 1212.26 L2137.15 1212.26 L2136.57 1212.26 L2135.98 1212.26 L2135.39 1212.26 L2134.81 1212.26 L2134.22 1212.26 L2133.63 1212.26 L2133.05 1212.26 L2132.46 1212.26 L2131.88 1212.26 L2131.29 1212.26 L2130.7 1212.26 L2130.12 1212.26 L2129.53 1212.26 L2128.94 1212.26 L2128.36 1212.26 L2127.77 1212.26 L2127.18 1212.26 L2126.6 1212.26 L2126.01 1212.26 L2125.42 1212.26 L2124.84 1212.26 L2124.25 1212.26 L2123.67 1212.26 L2123.08 1212.26 L2122.49 1212.26 L2121.91 1212.26 L2121.32 1212.26 L2120.73 1212.26 L2120.15 1212.26 L2119.56 1212.26 L2118.97 1212.26 L2118.39 1212.26 L2117.8 1212.26 L2117.22 1212.26 L2116.63 1212.26 L2116.04 1212.26 L2115.46 1212.26 L2114.87 1212.26 L2114.28 1212.26 L2113.7 1212.26 L2113.11 1212.26 L2112.52 1212.26 L2111.94 1212.26 L2111.35 1212.26 L2110.76 1212.26 L2110.18 1212.26 L2109.59 1212.26 L2109.01 1212.26 L2108.42 1212.26 L2107.83 1212.26 L2107.25 1212.26 L2106.66 1212.26 L2106.07 1212.26 L2105.49 1212.26 L2104.9 1212.26 L2104.31 1212.26 L2103.73 1212.26 L2103.14 1212.26 L2102.55 1212.26 L2101.97 1212.26 L2101.38 1212.26 L2100.8 1212.26 L2100.21 1212.26 L2099.62 1212.26 L2099.04 1212.26 L2098.45 1212.26 L2097.86 1212.26 L2097.28 1212.26 L2096.69 1212.26 L2096.1 1212.26 L2095.52 1212.26 L2094.93 1212.26 L2094.35 1212.26 L2093.76 1212.26 L2093.17 1212.26 L2092.59 1212.26 L2092 1212.26 L2091.41 1212.26 L2090.83 1212.26 L2090.24 1212.26 L2089.65 1212.26 L2089.07 1212.26 L2088.48 1212.26 L2087.89 1212.26 L2087.31 1212.26 L2086.72 1212.26 L2086.14 1212.26 L2085.55 1212.26 L2084.96 1212.26 L2084.38 1212.26 L2083.79 1212.26 L2083.2 1212.26 L2082.62 1212.26 L2082.03 1212.26 L2081.44 1212.26 L2080.86 1212.26 L2080.27 1212.26 L2079.68 1212.26 L2079.1 1212.26 L2078.51 1212.26 L2077.93 1212.26 L2077.34 1212.26 L2076.75 1212.26 L2076.17 1212.26 L2075.58 1212.26 L2074.99 1212.26 L2074.41 1212.26 L2073.82 1212.26 L2073.23 1212.26 L2072.65 1212.26 L2072.06 1212.26 L2071.48 1212.26 L2070.89 1212.26 L2070.3 1212.26 L2069.72 1212.26 L2069.13 1212.26 L2068.54 1212.26 L2067.96 1212.26 L2067.37 1212.26 L2066.78 1212.26 L2066.2 1212.26 L2065.61 1212.26 L2065.02 1212.26 L2064.44 1212.26 L2063.85 1212.26 L2063.27 1212.26 L2062.68 1212.26 L2062.09 1212.26 L2061.51 1212.26 L2060.92 1212.26 L2060.33 1212.26 L2059.75 1212.26 L2059.16 1212.26 L2058.57 1212.26 L2057.99 1212.26 L2057.4 1212.26 L2056.81 1212.26 L2056.23 1212.26 L2055.64 1212.26 L2055.06 1212.26 L2054.47 1212.26 L2053.88 1212.26 L2053.3 1212.26 L2052.71 1212.26 L2052.12 1212.26 L2051.54 1212.26 L2050.95 1212.26 L2050.36 1212.26 L2049.78 1212.26 L2049.19 1212.26 L2048.6 1212.26 L2048.02 1212.26 L2047.43 1212.26 L2046.85 1212.26 L2046.26 1212.26 L2045.67 1212.26 L2045.09 1212.26 L2044.5 1212.26 L2043.91 1212.26 L2043.33 1212.26 L2042.74 1212.26 L2042.15 1212.26 L2041.57 1212.26 L2040.98 1212.26 L2040.4 1212.26 L2039.81 1212.26 L2039.22 1212.26 L2038.64 1212.26 L2038.05 1212.26 L2037.46 1212.26 L2036.88 1212.26 L2036.29 1212.26 L2035.7 1212.26 L2035.12 1212.26 L2034.53 1212.26 L2033.94 1212.26 L2033.36 1212.26 L2032.77 1212.26 L2032.19 1212.26 L2031.6 1212.26 L2031.01 1212.26 L2030.43 1212.26 L2029.84 1212.26 L2029.25 1212.26 L2028.67 1212.26 L2028.08 1212.26 L2027.49 1212.26 L2026.91 1212.26 L2026.32 1212.26 L2025.73 1212.26 L2025.15 1212.26 L2024.56 1212.26 L2023.98 1212.26 L2023.39 1212.26 L2022.8 1212.26 L2022.22 1212.26 L2021.63 1212.26 L2021.04 1212.26 L2020.46 1212.26 L2019.87 1212.26 L2019.28 1212.26 L2018.7 1212.26 L2018.11 1212.26 L2017.53 1212.26 L2016.94 1212.26 L2016.35 1212.26 L2015.77 1212.26 L2015.18 1212.26 L2014.59 1212.26 L2014.01 1212.26 L2013.42 1212.26 L2012.83 1212.26 L2012.25 1212.26 L2011.66 1212.26 L2011.07 1212.26 L2010.49 1212.26 L2009.9 1212.26 L2009.32 1212.26 L2008.73 1212.26 L2008.14 1212.26 L2007.56 1212.26 L2006.97 1212.26 L2006.38 1212.26 L2005.8 1212.26 L2005.21 1212.26 L2004.62 1212.26 L2004.04 1212.26 L2003.45 1212.26 L2002.86 1212.26 L2002.28 1212.26 L2001.69 1212.26 L2001.11 1212.26 L2000.52 1212.26 L1999.93 1212.26 L1999.35 1212.26 L1998.76 1212.26 L1998.17 1212.26 L1997.59 1212.26 L1997 1212.26 L1996.41 1212.26 L1995.83 1212.26 L1995.24 1212.26 L1994.65 1212.26 L1994.07 1212.26 L1993.48 1212.26 L1992.9 1212.26 L1992.31 1212.26 L1991.72 1212.26 L1991.14 1212.26 L1990.55 1212.26 L1989.96 1212.26 L1989.38 1212.26 L1988.79 1212.26 L1988.2 1212.26 L1987.62 1212.26 L1987.03 1212.26 L1986.45 1212.26 L1985.86 1212.26 L1985.27 1212.26 L1984.69 1212.26 L1984.1 1212.26 L1983.51 1212.26 L1982.93 1212.26 L1982.34 1212.26 L1981.75 1212.26 L1981.17 1212.26 L1980.58 1212.26 L1979.99 1212.26 L1979.41 1212.26 L1978.82 1212.26 L1978.24 1212.26 L1977.65 1212.26 L1977.06 1212.26 L1976.48 1212.26 L1975.89 1212.26 L1975.3 1212.26 L1974.72 1212.26 L1974.13 1212.26 L1973.54 1212.26 L1972.96 1212.26 L1972.37 1212.26 L1971.78 1212.26 L1971.2 1212.26 L1970.61 1212.26 L1970.03 1212.26 L1969.44 1212.26 L1968.85 1212.26 L1968.27 1212.26 L1967.68 1212.26 L1967.09 1212.26 L1966.51 1212.26 L1965.92 1212.26 L1965.33 1212.26 L1964.75 1212.26 L1964.16 1212.26 L1963.58 1212.26 L1962.99 1212.26 L1962.4 1212.26 L1961.82 1212.26 L1961.23 1212.26 L1960.64 1212.26 L1960.06 1212.26 L1959.47 1212.26 L1958.88 1212.26 L1958.3 1212.26 L1957.71 1212.26 L1957.12 1212.26 L1956.54 1212.26 L1955.95 1212.26 L1955.37 1212.26 L1954.78 1212.26 L1954.19 1212.26 L1953.61 1212.26 L1953.02 1212.26 L1952.43 1212.26 L1951.85 1212.26 L1951.26 1212.26 L1950.67 1212.26 L1950.09 1212.26 L1949.5 1212.26 L1948.91 1212.26 L1948.33 1212.26 L1947.74 1212.26 L1947.16 1212.26 L1946.57 1212.26 L1945.98 1212.26 L1945.4 1212.26 L1944.81 1212.26 L1944.22 1212.26 L1943.64 1212.26 L1943.05 1212.26 L1942.46 1212.26 L1941.88 1212.26 L1941.29 1212.26 L1940.71 1212.26 L1940.12 1212.26 L1939.53 1212.26 L1938.95 1212.26 L1938.36 1212.26 L1937.77 1212.26 L1937.19 1212.26 L1936.6 1212.26 L1936.01 1212.26 L1935.43 1212.26 L1934.84 1212.26 L1934.25 1212.26 L1933.67 1212.26 L1933.08 1212.26 L1932.5 1212.26 L1931.91 1212.26 L1931.32 1212.26 L1930.74 1212.26 L1930.15 1212.26 L1929.56 1212.26 L1928.98 1212.26 L1928.39 1212.26 L1927.8 1212.26 L1927.22 1212.26 L1926.63 1212.26 L1926.04 1212.26 L1925.46 1212.26 L1924.87 1212.26 L1924.29 1212.26 L1923.7 1212.26 L1923.11 1212.26 L1922.53 1212.26 L1921.94 1212.26 L1921.35 1212.26 L1920.77 1212.26 L1920.18 1212.26 L1919.59 1212.26 L1919.01 1212.26 L1918.42 1212.26 L1917.83 1212.26 L1917.25 1212.26 L1916.66 1212.26 L1916.08 1212.26 L1915.49 1212.26 L1914.9 1212.26 L1914.32 1212.26 L1913.73 1212.26 L1913.14 1212.26 L1912.56 1212.26 L1911.97 1212.26 L1911.38 1212.26 L1910.8 1212.26 L1910.21 1212.26 L1909.63 1212.26 L1909.04 1212.26 L1908.45 1212.26 L1907.87 1212.26 L1907.28 1212.26 L1906.69 1212.26 L1906.11 1212.26 L1905.52 1212.26 L1904.93 1212.26 L1904.35 1212.26 L1903.76 1212.26 L1903.17 1212.26 L1902.59 1212.26 L1902 1212.26 L1901.42 1212.26 L1900.83 1212.26 L1900.24 1212.26 L1899.66 1212.26 L1899.07 1212.26 L1898.48 1212.26 L1897.9 1212.26 L1897.31 1212.26 L1896.72 1212.26 L1896.14 1212.26 L1895.55 1212.26 L1894.96 1212.26 L1894.38 1212.26 L1893.79 1212.26 L1893.21 1212.26 L1892.62 1212.26 L1892.03 1212.26 L1891.45 1212.26 L1890.86 1212.26 L1890.27 1212.26 L1889.69 1212.26 L1889.1 1212.26 L1888.51 1212.26 L1887.93 1212.26 L1887.34 1212.26 L1886.76 1212.26 L1886.17 1212.26 L1885.58 1212.26 L1885 1212.26 L1884.41 1212.26 L1883.82 1212.26 L1883.24 1212.26 L1882.65 1212.26 L1882.06 1212.26 L1881.48 1212.26 L1880.89 1212.26 L1880.3 1212.26 L1879.72 1212.26 L1879.13 1212.26 L1878.55 1212.26 L1877.96 1212.26 L1877.37 1212.26 L1876.79 1212.26 L1876.2 1212.26 L1875.61 1212.26 L1875.03 1212.26 L1874.44 1212.26 L1873.85 1212.26 L1873.27 1212.26 L1872.68 1212.26 L1872.09 1212.26 L1871.51 1212.26 L1870.92 1212.26 L1870.34 1212.26 L1869.75 1212.26 L1869.16 1212.26 L1868.58 1212.26 L1867.99 1212.26 L1867.4 1212.26 L1866.82 1212.26 L1866.23 1212.26 L1865.64 1212.26 L1865.06 1212.26 L1864.47 1212.26 L1863.88 1212.26 L1863.3 1212.26 L1862.71 1212.26 L1862.13 1212.26 L1861.54 1212.26 L1860.95 1212.26 L1860.37 1212.26 L1859.78 1212.26 L1859.19 1212.26 L1858.61 1212.26 L1858.02 1212.26 L1857.43 1212.26 L1856.85 1212.26 L1856.26 1212.26 L1855.68 1212.26 L1855.09 1212.26 L1854.5 1212.26 L1853.92 1212.26 L1853.33 1212.26 L1852.74 1212.26 L1852.16 1212.26 L1851.57 1212.26 L1850.98 1212.26 L1850.4 1212.26 L1849.81 1212.26 L1849.22 1212.26 L1848.64 1212.26 L1848.05 1212.26 L1847.47 1212.26 L1846.88 1212.26 L1846.29 1212.26 L1845.71 1212.26 L1845.12 1212.26 L1844.53 1212.26 L1843.95 1212.26 L1843.36 1212.26 L1842.77 1212.26 L1842.19 1212.26 L1841.6 1212.26 L1841.01 1212.26 L1840.43 1212.26 L1839.84 1212.26 L1839.26 1212.26 L1838.67 1212.26 L1838.08 1212.26 L1837.5 1212.26 L1836.91 1212.26 L1836.32 1212.26 L1835.74 1212.26 L1835.15 1212.26 L1834.56 1212.26 L1833.98 1212.26 L1833.39 1212.26 L1832.81 1212.26 L1832.22 1212.26 L1831.63 1212.26 L1831.05 1212.26 L1830.46 1212.26 L1829.87 1212.26 L1829.29 1212.26 L1828.7 1212.26 L1828.11 1212.26 L1827.53 1212.26 L1826.94 1212.26 L1826.35 1212.26 L1825.77 1212.26 L1825.18 1212.26 L1824.6 1212.26 L1824.01 1212.26 L1823.42 1212.26 L1822.84 1212.26 L1822.25 1212.26 L1821.66 1212.26 L1821.08 1212.26 L1820.49 1212.26 L1819.9 1212.26 L1819.32 1212.26 L1818.73 1212.26 L1818.14 1212.26 L1817.56 1212.26 L1816.97 1212.26 L1816.39 1212.26 L1815.8 1212.26 L1815.21 1212.26 L1814.63 1212.26 L1814.04 1212.26 L1813.45 1212.26 L1812.87 1212.26 L1812.28 1212.26 L1811.69 1212.26 L1811.11 1212.26 L1810.52 1212.26 L1809.94 1212.26 L1809.35 1212.26 L1808.76 1212.26 L1808.18 1212.26 L1807.59 1212.26 L1807 1212.26 L1806.42 1212.26 L1805.83 1212.26 L1805.24 1212.26 L1804.66 1212.26 L1804.07 1212.26 L1803.48 1212.26 L1802.9 1212.26 L1802.31 1212.26 L1801.73 1212.26 L1801.14 1212.26 L1800.55 1212.26 L1799.97 1212.26 L1799.38 1212.26 L1798.79 1212.26 L1798.21 1212.26 L1797.62 1212.26 L1797.03 1212.26 L1796.45 1212.26 L1795.86 1212.26 L1795.27 1212.26 L1794.69 1212.26 L1794.1 1212.26 L1793.52 1212.26 L1792.93 1212.26 L1792.34 1212.26 L1791.76 1212.26 L1791.17 1212.26 L1790.58 1212.26 L1790 1212.26 L1789.41 1212.26 L1788.82 1212.26 L1788.24 1212.26 L1787.65 1212.26 L1787.06 1212.26 L1786.48 1212.26 L1785.89 1212.26 L1785.31 1212.26 L1784.72 1212.26 L1784.13 1212.26 L1783.55 1212.26 L1782.96 1212.26 L1782.37 1212.26 L1781.79 1212.26 L1781.2 1212.26 L1780.61 1212.26 L1780.03 1212.26 L1779.44 1212.26 L1778.86 1212.26 L1778.27 1212.26 L1777.68 1212.26 L1777.1 1212.26 L1776.51 1212.26 L1775.92 1212.26 L1775.34 1212.26 L1774.75 1212.26 L1774.16 1212.26 L1773.58 1212.26 L1772.99 1212.26 L1772.4 1212.26 L1771.82 1212.26 L1771.23 1212.26 L1770.65 1212.26 L1770.06 1212.26 L1769.47 1212.26 L1768.89 1212.26 L1768.3 1212.26 L1767.71 1212.26 L1767.13 1212.26 L1766.54 1212.26 L1765.95 1212.26 L1765.37 1212.26 L1764.78 1212.26 L1764.19 1212.26 L1763.61 1212.26 L1763.02 1212.26 L1762.44 1212.26 L1761.85 1212.26 L1761.26 1212.26 L1760.68 1212.26 L1760.09 1212.26 L1759.5 1212.26 L1758.92 1212.26 L1758.33 1212.26 L1757.74 1212.26 L1757.16 1212.26 L1756.57 1212.26 L1755.99 1212.26 L1755.4 1212.26 L1754.81 1212.26 L1754.23 1212.26 L1753.64 1212.26 L1753.05 1212.26 L1752.47 1212.26 L1751.88 1212.26 L1751.29 1212.26 L1750.71 1212.26 L1750.12 1212.26 L1749.53 1212.26 L1748.95 1212.26 L1748.36 1212.26 L1747.78 1212.26 L1747.19 1212.26 L1746.6 1212.26 L1746.02 1212.26 L1745.43 1212.26 L1744.84 1212.26 L1744.26 1212.26 L1743.67 1212.26 L1743.08 1212.26 L1742.5 1212.26 L1741.91 1212.26 L1741.32 1212.26 L1740.74 1212.26 L1740.15 1212.26 L1739.57 1212.26 L1738.98 1212.26 L1738.39 1212.26 L1737.81 1212.26 L1737.22 1212.26 L1736.63 1212.26 L1736.05 1212.26 L1735.46 1212.26 L1734.87 1212.26 L1734.29 1212.26 L1733.7 1212.26 L1733.11 1212.26 L1732.53 1212.26 L1731.94 1212.26 L1731.36 1212.26 L1730.77 1212.26 L1730.18 1212.26 L1729.6 1212.26 L1729.01 1212.26 L1728.42 1212.26 L1727.84 1212.26 L1727.25 1212.26 L1726.66 1212.26 L1726.08 1212.26 L1725.49 1212.26 L1724.91 1212.26 L1724.32 1212.26 L1723.73 1212.26 L1723.15 1212.26 L1722.56 1212.26 L1721.97 1212.26 L1721.39 1212.26 L1720.8 1212.26 L1720.21 1212.26 L1719.63 1212.26 L1719.04 1212.26 L1718.45 1212.26 L1717.87 1212.26 L1717.28 1212.26 L1716.7 1212.26 L1716.11 1212.26 L1715.52 1212.26 L1714.94 1212.26 L1714.35 1212.26 L1713.76 1212.26 L1713.18 1212.26 L1712.59 1212.26 L1712 1212.26 L1711.42 1212.26 L1710.83 1212.26 L1710.24 1212.26 L1709.66 1212.26 L1709.07 1212.26 L1708.49 1212.26 L1707.9 1212.26 L1707.31 1212.26 L1706.73 1212.26 L1706.14 1212.26 L1705.55 1212.26 L1704.97 1212.26 L1704.38 1212.26 L1703.79 1212.26 L1703.21 1212.26 L1702.62 1212.26 L1702.04 1212.26 L1701.45 1212.26 L1700.86 1212.26 L1700.28 1212.26 L1699.69 1212.26 L1699.1 1212.26 L1698.52 1212.26 L1697.93 1212.26 L1697.34 1212.26 L1696.76 1212.26 L1696.17 1212.26 L1695.58 1212.26 L1695 1212.26 L1694.41 1212.26 L1693.83 1212.26 L1693.24 1212.26 L1692.65 1212.26 L1692.07 1212.26 L1691.48 1212.26 L1690.89 1212.26 L1690.31 1212.26 L1689.72 1212.26 L1689.13 1212.26 L1688.55 1212.26 L1687.96 1212.26 L1687.37 1212.26 L1686.79 1212.26 L1686.2 1212.26 L1685.62 1212.26 L1685.03 1212.26 L1684.44 1212.26 L1683.86 1212.26 L1683.27 1212.26 L1682.68 1212.26 L1682.1 1212.26 L1681.51 1212.26 L1680.92 1212.26 L1680.34 1212.26 L1679.75 1212.26 L1679.17 1212.26 L1678.58 1212.26 L1677.99 1212.26 L1677.41 1212.26 L1676.82 1212.26 L1676.23 1212.26 L1675.65 1212.26 L1675.06 1212.26 L1674.47 1212.26 L1673.89 1212.26 L1673.3 1212.26 L1672.71 1212.26 L1672.13 1212.26 L1671.54 1212.26 L1670.96 1212.26 L1670.37 1212.26 L1669.78 1212.26 L1669.2 1212.26 L1668.61 1212.26 L1668.02 1212.26 L1667.44 1212.26 L1666.85 1212.26 L1666.26 1212.26 L1665.68 1212.26 L1665.09 1212.26 L1664.5 1212.26 L1663.92 1212.26 L1663.33 1212.26 L1662.75 1212.26 L1662.16 1212.26 L1661.57 1212.26 L1660.99 1212.26 L1660.4 1212.26 L1659.81 1212.26 L1659.23 1212.26 L1658.64 1212.26 L1658.05 1212.26 L1657.47 1212.26 L1656.88 1212.26 L1656.29 1212.26 L1655.71 1212.26 L1655.12 1212.26 L1654.54 1212.26 L1653.95 1212.26 L1653.36 1212.26 L1652.78 1212.26 L1652.19 1212.26 L1651.6 1212.26 L1651.02 1212.26 L1650.43 1212.26 L1649.84 1212.26 L1649.26 1212.26 L1648.67 1212.26 L1648.09 1212.26 L1647.5 1212.26 L1646.91 1212.26 L1646.33 1212.26 L1645.74 1212.26 L1645.15 1212.26 L1644.57 1212.26 L1643.98 1212.26 L1643.39 1212.26 L1642.81 1212.26 L1642.22 1212.26 L1641.63 1212.26 L1641.05 1212.26 L1640.46 1212.26 L1639.88 1212.26 L1639.29 1212.26 L1638.7 1212.26 L1638.12 1212.26 L1637.53 1212.26 L1636.94 1212.26 L1636.36 1212.26 L1635.77 1212.26 L1635.18 1212.26 L1634.6 1212.26 L1634.01 1212.26 L1633.42 1212.26 L1632.84 1212.26 L1632.25 1212.26 L1631.67 1212.26 L1631.08 1212.26 L1630.49 1212.26 L1629.91 1212.26 L1629.32 1212.26 L1628.73 1212.26 L1628.15 1212.26 L1627.56 1212.26 L1626.97 1212.26 L1626.39 1212.26 L1625.8 1212.26 L1625.22 1212.26 L1624.63 1212.26 L1624.04 1212.26 L1623.46 1212.26 L1622.87 1212.26 L1622.28 1212.26 L1621.7 1212.26 L1621.11 1212.26 L1620.52 1212.26 L1619.94 1212.26 L1619.35 1212.26 L1618.76 1212.26 L1618.18 1212.26 L1617.59 1212.26 L1617.01 1212.26 L1616.42 1212.26 L1615.83 1212.26 L1615.25 1212.26 L1614.66 1212.26 L1614.07 1212.26 L1613.49 1212.26 L1612.9 1212.26 L1612.31 1212.26 L1611.73 1212.26 L1611.14 1212.26 L1610.55 1212.26 L1609.97 1212.26 L1609.38 1212.26 L1608.8 1212.26 L1608.21 1212.26 L1607.62 1212.26 L1607.04 1212.26 L1606.45 1212.26 L1605.86 1212.26 L1605.28 1212.26 L1604.69 1212.26 L1604.1 1212.26 L1603.52 1212.26 L1602.93 1212.26 L1602.34 1212.26 L1601.76 1212.26 L1601.17 1212.26 L1600.59 1212.26 L1600 1212.26 L1599.41 1212.26 L1598.83 1212.26 L1598.24 1212.26 L1597.65 1212.26 L1597.07 1212.26 L1596.48 1212.26 L1595.89 1212.26 L1595.31 1212.26 L1594.72 1212.26 L1594.14 1212.26 L1593.55 1212.26 L1592.96 1212.26 L1592.38 1212.26 L1591.79 1212.26 L1591.2 1212.26 L1590.62 1212.26 L1590.03 1212.26 L1589.44 1212.26 L1588.86 1212.26 L1588.27 1212.26 L1587.68 1212.26 L1587.1 1212.26 L1586.51 1212.26 L1585.93 1212.26 L1585.34 1212.26 L1584.75 1212.26 L1584.17 1212.26 L1583.58 1212.26 L1582.99 1212.26 L1582.41 1212.26 L1581.82 1212.26 L1581.23 1212.26 L1580.65 1212.26 L1580.06 1212.26 L1579.47 1212.26 L1578.89 1212.26 L1578.3 1212.26 L1577.72 1212.26 L1577.13 1212.26 L1576.54 1212.26 L1575.96 1212.26 L1575.37 1212.26 L1574.78 1212.26 L1574.2 1212.26 L1573.61 1212.26 L1573.02 1212.26 L1572.44 1212.26 L1571.85 1212.26 L1571.27 1212.26 L1570.68 1212.26 L1570.09 1212.26 L1569.51 1212.26 L1568.92 1212.26 L1568.33 1212.26 L1567.75 1212.26 L1567.16 1212.26 L1566.57 1212.26 L1565.99 1212.26 L1565.4 1212.26 L1564.81 1212.26 L1564.23 1212.26 L1563.64 1212.26 L1563.06 1212.26 L1562.47 1212.26 L1561.88 1212.26 L1561.3 1212.26 L1560.71 1212.26 L1560.12 1212.26 L1559.54 1212.26 L1558.95 1212.26 L1558.36 1212.26 L1557.78 1212.26 L1557.19 1212.26 L1556.6 1212.26 L1556.02 1212.26 L1555.43 1212.26 L1554.85 1212.26 L1554.26 1212.26 L1553.67 1212.26 L1553.09 1212.26 L1552.5 1212.26 L1551.91 1212.26 L1551.33 1212.26 L1550.74 1212.26 L1550.15 1212.26 L1549.57 1212.26 L1548.98 1212.26 L1548.4 1212.26 L1547.81 1212.26 L1547.22 1212.26 L1546.64 1212.26 L1546.05 1212.26 L1545.46 1212.26 L1544.88 1212.26 L1544.29 1212.26 L1543.7 1212.26 L1543.12 1212.26 L1542.53 1212.26 L1541.94 1212.26 L1541.36 1212.26 L1540.77 1212.26 L1540.19 1212.26 L1539.6 1212.26 L1539.01 1212.26 L1538.43 1212.26 L1537.84 1212.26 L1537.25 1212.26 L1536.67 1212.26 L1536.08 1212.26 L1535.49 1212.26 L1534.91 1212.26 L1534.32 1212.26 L1533.73 1212.26 L1533.15 1212.26 L1532.56 1212.26 L1531.98 1212.26 L1531.39 1212.26 L1530.8 1212.26 L1530.22 1212.26 L1529.63 1212.26 L1529.04 1212.26 L1528.46 1212.26 L1527.87 1212.26 L1527.28 1212.26 L1526.7 1212.26 L1526.11 1212.26 L1525.52 1212.26 L1524.94 1212.26 L1524.35 1212.26 L1523.77 1212.26 L1523.18 1212.26 L1522.59 1212.26 L1522.01 1212.26 L1521.42 1212.26 L1520.83 1212.26 L1520.25 1212.26 L1519.66 1212.26 L1519.07 1212.26 L1518.49 1212.26 L1517.9 1212.26 L1517.32 1212.26 L1516.73 1212.26 L1516.14 1212.26 L1515.56 1212.26 L1514.97 1212.26 L1514.38 1212.26 L1513.8 1212.26 L1513.21 1212.26 L1512.62 1212.26 L1512.04 1212.26 L1511.45 1212.26 L1510.86 1212.26 L1510.28 1212.26 L1509.69 1212.26 L1509.11 1212.26 L1508.52 1212.26 L1507.93 1212.26 L1507.35 1212.26 L1506.76 1212.26 L1506.17 1212.26 L1505.59 1212.26 L1505 1212.26 L1504.41 1212.26 L1503.83 1212.26 L1503.24 1212.26 L1502.65 1212.26 L1502.07 1212.26 L1501.48 1212.26 L1500.9 1212.26 L1500.31 1212.26 L1499.72 1212.26 L1499.14 1212.26 L1498.55 1212.26 L1497.96 1212.26 L1497.38 1212.26 L1496.79 1212.26 L1496.2 1212.26 L1495.62 1212.26 L1495.03 1212.26 L1494.45 1212.26 L1493.86 1212.26 L1493.27 1212.26 L1492.69 1212.26 L1492.1 1212.26 L1491.51 1212.26 L1490.93 1212.26 L1490.34 1212.26 L1489.75 1212.26 L1489.17 1212.26 L1488.58 1212.26 L1487.99 1212.26 L1487.41 1212.26 L1486.82 1212.26 L1486.24 1212.26 L1485.65 1212.26 L1485.06 1212.26 L1484.48 1212.26 L1483.89 1212.26 L1483.3 1212.26 L1482.72 1212.26 L1482.13 1212.26 L1481.54 1212.26 L1480.96 1212.26 L1480.37 1212.26 L1479.78 1212.26 L1479.2 1212.26 L1478.61 1212.26 L1478.03 1212.26 L1477.44 1212.26 L1476.85 1212.26 L1476.27 1212.26 L1475.68 1212.26 L1475.09 1212.26 L1474.51 1212.26 L1473.92 1212.26 L1473.33 1212.26 L1472.75 1212.26 L1472.16 1212.26 L1471.57 1212.26 L1470.99 1212.26 L1470.4 1212.26 L1469.82 1212.26 L1469.23 1212.26 L1468.64 1212.26 L1468.06 1212.26 L1467.47 1212.26 L1466.88 1212.26 L1466.3 1212.26 L1465.71 1212.26 L1465.12 1212.26 L1464.54 1212.26 L1463.95 1212.26 L1463.37 1212.26 L1462.78 1212.26 L1462.19 1212.26 L1461.61 1212.26 L1461.02 1212.26 L1460.43 1212.26 L1459.85 1212.26 L1459.26 1212.26 L1458.67 1212.26 L1458.09 1212.26 L1457.5 1212.26 L1456.91 1212.26 L1456.33 1212.26 L1455.74 1212.26 L1455.16 1212.26 L1454.57 1212.26 L1453.98 1212.26 L1453.4 1212.26 L1452.81 1212.26 L1452.22 1212.26 L1451.64 1212.26 L1451.05 1212.26 L1450.46 1212.26 L1449.88 1212.26 L1449.29 1212.26 L1448.7 1212.26 L1448.12 1212.26 L1447.53 1212.26 L1446.95 1212.26 L1446.36 1212.26 L1445.77 1212.26 L1445.19 1212.26 L1444.6 1212.26 L1444.01 1212.26 L1443.43 1212.26 L1442.84 1212.26 L1442.25 1212.26 L1441.67 1212.26 L1441.08 1212.26 L1440.5 1212.26 L1439.91 1212.26 L1439.32 1212.26 L1438.74 1212.26 L1438.15 1212.26 L1437.56 1212.26 L1436.98 1212.26 L1436.39 1212.26 L1435.8 1212.26 L1435.22 1212.26 L1434.63 1212.26 L1434.04 1212.26 L1433.46 1212.26 L1432.87 1212.26 L1432.29 1212.26 L1431.7 1212.26 L1431.11 1212.26 L1430.53 1212.26 L1429.94 1212.26 L1429.35 1212.26 L1428.77 1212.26 L1428.18 1212.26 L1427.59 1212.26 L1427.01 1212.26 L1426.42 1212.26 L1425.83 1212.26 L1425.25 1212.26 L1424.66 1212.26 L1424.08 1212.26 L1423.49 1212.26 L1422.9 1212.26 L1422.32 1212.26 L1421.73 1212.26 L1421.14 1212.26 L1420.56 1212.26 L1419.97 1212.26 L1419.38 1212.26 L1418.8 1212.26 L1418.21 1212.26 L1417.63 1212.26 L1417.04 1212.26 L1416.45 1212.26 L1415.87 1212.26 L1415.28 1212.26 L1414.69 1212.26 L1414.11 1212.26 L1413.52 1212.26 L1412.93 1212.26 L1412.35 1212.26 L1411.76 1212.26 L1411.17 1212.26 L1410.59 1212.26 L1410 1212.26 L1409.42 1212.26 L1408.83 1212.26 L1408.24 1212.26 L1407.66 1212.26 L1407.07 1212.26 L1406.48 1212.26 L1405.9 1212.26 L1405.31 1212.26 L1404.72 1212.26 L1404.14 1212.26 L1403.55 1212.26 L1402.96 1212.26 L1402.38 1212.26 L1401.79 1212.26 L1401.21 1212.26 L1400.62 1212.26 L1400.03 1212.26 L1399.45 1212.26 L1398.86 1212.26 L1398.27 1212.26 L1397.69 1212.26 L1397.1 1212.26 L1396.51 1212.26 L1395.93 1212.26 L1395.34 1212.26 L1394.75 1212.26 L1394.17 1212.26 L1393.58 1212.26 L1393 1212.26 L1392.41 1212.26 L1391.82 1212.26 L1391.24 1212.26 L1390.65 1212.26 L1390.06 1212.26 L1389.48 1212.26 L1388.89 1212.26 L1388.3 1212.26 L1387.72 1212.26 L1387.13 1212.26 L1386.55 1212.26 L1385.96 1212.26 L1385.37 1212.26 L1384.79 1212.26 L1384.2 1212.26 L1383.61 1212.26 L1383.03 1212.26 L1382.44 1212.26 L1381.85 1212.26 L1381.27 1212.26 L1380.68 1212.26 L1380.09 1212.26 L1379.51 1212.26 L1378.92 1212.26 L1378.34 1212.26 L1377.75 1212.26 L1377.16 1212.26 L1376.58 1212.26 L1375.99 1212.26 L1375.4 1212.26 L1374.82 1212.26 L1374.23 1212.26 L1373.64 1212.26 L1373.06 1212.26 L1372.47 1212.26 L1371.88 1212.26 L1371.3 1212.26 L1370.71 1212.26 L1370.13 1212.26 L1369.54 1212.26 L1368.95 1212.26 L1368.37 1212.26 L1367.78 1212.26 L1367.19 1212.26 L1366.61 1212.26 L1366.02 1212.26 L1365.43 1212.26 L1364.85 1212.26 L1364.26 1212.26 L1363.68 1212.26 L1363.09 1212.26 L1362.5 1212.26 L1361.92 1212.26 L1361.33 1212.26 L1360.74 1212.26 L1360.16 1212.26 L1359.57 1212.26 L1358.98 1212.26 L1358.4 1212.26 L1357.81 1212.26 L1357.22 1212.26 L1356.64 1212.26 L1356.05 1212.26 L1355.47 1212.26 L1354.88 1212.26 L1354.29 1212.26 L1353.71 1212.26 L1353.12 1212.26 L1352.53 1212.26 L1351.95 1212.26 L1351.36 1212.26 L1350.77 1212.26 L1350.19 1212.26 L1349.6 1212.26 L1349.01 1212.26 L1348.43 1212.26 L1347.84 1212.26 L1347.26 1212.26 L1346.67 1212.26 L1346.08 1212.26 L1345.5 1212.26 L1344.91 1212.26 L1344.32 1212.26 L1343.74 1212.26 L1343.15 1212.26 L1342.56 1212.26 L1341.98 1212.26 L1341.39 1212.26 L1340.8 1212.26 L1340.22 1212.26 L1339.63 1212.26 L1339.05 1212.26 L1338.46 1212.26 L1337.87 1212.26 L1337.29 1212.26 L1336.7 1212.26 L1336.11 1212.26 L1335.53 1212.26 L1334.94 1212.26 L1334.35 1212.26 L1333.77 1212.26 L1333.18 1212.26 L1332.6 1212.26 L1332.01 1212.26 L1331.42 1212.26 L1330.84 1212.26 L1330.25 1212.26 L1329.66 1212.26 L1329.08 1212.26 L1328.49 1212.26 L1327.9 1212.26 L1327.32 1212.26 L1326.73 1212.26 L1326.14 1212.26 L1325.56 1212.26 L1324.97 1212.26 L1324.39 1212.26 L1323.8 1212.26 L1323.21 1212.26 L1322.63 1212.26 L1322.04 1212.26 L1321.45 1212.26 L1320.87 1212.26 L1320.28 1212.26 L1319.69 1212.26 L1319.11 1212.26 L1318.52 1212.26 L1317.93 1212.26 L1317.35 1212.26 L1316.76 1212.26 L1316.18 1212.26 L1315.59 1212.26 L1315 1212.26 L1314.42 1212.26 L1313.83 1212.26 L1313.24 1212.26 L1312.66 1212.26 L1312.07 1212.26 L1311.48 1212.26 L1310.9 1212.26 L1310.31 1212.26 L1309.73 1212.26 L1309.14 1212.26 L1308.55 1212.26 L1307.97 1212.26 L1307.38 1212.26 L1306.79 1212.26 L1306.21 1212.26 L1305.62 1212.26 L1305.03 1212.26 L1304.45 1212.26 L1303.86 1212.26 L1303.27 1212.26 L1302.69 1212.26 L1302.1 1212.26 L1301.52 1212.26 L1300.93 1212.26 L1300.34 1212.26 L1299.76 1212.26 L1299.17 1212.26 L1298.58 1212.26 L1298 1212.26 L1297.41 1212.26 L1296.82 1212.26 L1296.24 1212.26 L1295.65 1212.26 L1295.06 1212.26 L1294.48 1212.26 L1293.89 1212.26 L1293.31 1212.26 L1292.72 1212.26 L1292.13 1212.26 L1291.55 1212.26 L1290.96 1212.26 L1290.37 1212.26 L1289.79 1212.26 L1289.2 1212.26 L1288.61 1212.26 L1288.03 1212.26 L1287.44 1212.26 L1286.86 1212.26 L1286.27 1212.26 L1285.68 1212.26 L1285.1 1212.26 L1284.51 1212.26 L1283.92 1212.26 L1283.34 1212.26 L1282.75 1212.26 L1282.16 1212.26 L1281.58 1212.26 L1280.99 1212.26 L1280.4 1212.26 L1279.82 1212.26 L1279.23 1212.26 L1278.65 1212.26 L1278.06 1212.26 L1277.47 1212.26 L1276.89 1212.26 L1276.3 1212.26 L1275.71 1212.26 L1275.13 1212.26 L1274.54 1212.26 L1273.95 1212.26 L1273.37 1212.26 L1272.78 1212.26 L1272.19 1212.26 L1271.61 1212.26 L1271.02 1212.26 L1270.44 1212.26 L1269.85 1212.26 L1269.26 1212.26 L1268.68 1212.26 L1268.09 1212.26 L1267.5 1212.26 L1266.92 1212.26 L1266.33 1212.26 L1265.74 1212.26 L1265.16 1212.26 L1264.57 1212.26 L1263.98 1212.26 L1263.4 1212.26 L1262.81 1212.26 L1262.23 1212.26 L1261.64 1212.26 L1261.05 1212.26 L1260.47 1212.26 L1259.88 1212.26 L1259.29 1212.26 L1258.71 1212.26 L1258.12 1212.26 L1257.53 1212.26 L1256.95 1212.26 L1256.36 1212.26 L1255.78 1212.26 L1255.19 1212.26 L1254.6 1212.26 L1254.02 1212.26 L1253.43 1212.26 L1252.84 1212.26 L1252.26 1212.26 L1251.67 1212.26 L1251.08 1212.26 L1250.5 1212.26 L1249.91 1212.26 L1249.32 1212.26 L1248.74 1212.26 L1248.15 1212.26 L1247.57 1212.26 L1246.98 1212.26 L1246.39 1212.26 L1245.81 1212.26 L1245.22 1212.26 L1244.63 1212.26 L1244.05 1212.26 L1243.46 1212.26 L1242.87 1212.26 L1242.29 1212.26 L1241.7 1212.26 L1241.11 1212.26 L1240.53 1212.26 L1239.94 1212.26 L1239.36 1212.26 L1238.77 1212.26 L1238.18 1212.26 L1237.6 1212.26 L1237.01 1212.26 L1236.42 1212.26 L1235.84 1212.26 L1235.25 1212.26 L1234.66 1212.26 L1234.08 1212.26 L1233.49 1212.26 L1232.91 1212.26 L1232.32 1212.26 L1231.73 1212.26 L1231.15 1212.26 L1230.56 1212.26 L1229.97 1212.26 L1229.39 1212.26 L1228.8 1212.26 L1228.21 1212.26 L1227.63 1212.26 L1227.04 1212.26 L1226.45 1212.26 L1225.87 1212.26 L1225.28 1212.26 L1224.7 1212.26 L1224.11 1212.26 L1223.52 1212.26 L1222.94 1212.26 L1222.35 1212.26 L1221.76 1212.26 L1221.18 1212.26 L1220.59 1212.26 L1220 1212.26 L1219.42 1212.26 L1218.83 1212.26 L1218.24 1212.26 L1217.66 1212.26 L1217.07 1212.26 L1216.49 1212.26 L1215.9 1212.26 L1215.31 1212.26 L1214.73 1212.26 L1214.14 1212.26 L1213.55 1212.26 L1212.97 1212.26 L1212.38 1212.26 L1211.79 1212.26 L1211.21 1212.26 L1210.62 1212.26 L1210.03 1212.26 L1209.45 1212.26 L1208.86 1212.26 L1208.28 1212.26 L1207.69 1212.26 L1207.1 1212.26 L1206.52 1212.26 L1205.93 1212.26 L1205.34 1212.26 L1204.76 1212.26 L1204.17 1212.26 L1203.58 1212.26 L1203 1212.26 L1202.41 1212.26 L1201.83 1212.26 L1201.24 1212.26 L1200.65 1212.26 L1200.07 1212.26 L1199.48 1212.26 L1198.89 1212.26 L1198.31 1212.26 L1197.72 1212.26 L1197.13 1212.26 L1196.55 1212.26 L1195.96 1212.26 L1195.37 1212.26 L1194.79 1212.26 L1194.2 1212.26 L1193.62 1212.26 L1193.03 1212.26 L1192.44 1212.26 L1191.86 1212.26 L1191.27 1212.26 L1190.68 1212.26 L1190.1 1212.26 L1189.51 1212.26 L1188.92 1212.26 L1188.34 1212.26 L1187.75 1212.26 L1187.16 1212.26 L1186.58 1212.26 L1185.99 1212.26 L1185.41 1212.26 L1184.82 1212.26 L1184.23 1212.26 L1183.65 1212.26 L1183.06 1212.26 L1182.47 1212.26 L1181.89 1212.26 L1181.3 1212.26 L1180.71 1212.26 L1180.13 1212.26 L1179.54 1212.26 L1178.96 1212.26 L1178.37 1212.26 L1177.78 1212.26 L1177.2 1212.26 L1176.61 1212.26 L1176.02 1212.26 L1175.44 1212.26 L1174.85 1212.26 L1174.26 1212.26 L1173.68 1212.26 L1173.09 1212.26 L1172.5 1212.26 L1171.92 1212.26 L1171.33 1212.26 L1170.75 1212.26 L1170.16 1212.26 L1169.57 1212.26 L1168.99 1212.26 L1168.4 1212.26 L1167.81 1212.26 L1167.23 1212.26 L1166.64 1212.26 L1166.05 1212.26 L1165.47 1212.26 L1164.88 1212.26 L1164.29 1212.26 L1163.71 1212.26 L1163.12 1212.26 L1162.54 1212.26 L1161.95 1212.26 L1161.36 1212.26 L1160.78 1212.26 L1160.19 1212.26 L1159.6 1212.26 L1159.02 1212.26 L1158.43 1212.26 L1157.84 1212.26 L1157.26 1212.26 L1156.67 1212.26 L1156.09 1212.26 L1155.5 1212.26 L1154.91 1212.26 L1154.33 1212.26 L1153.74 1212.26 L1153.15 1212.26 L1152.57 1212.26 L1151.98 1212.26 L1151.39 1212.26 L1150.81 1212.26 L1150.22 1212.26 L1149.63 1212.26 L1149.05 1212.26 L1148.46 1212.26 L1147.88 1212.26 L1147.29 1212.26 L1146.7 1212.26 L1146.12 1212.26 L1145.53 1212.26 L1144.94 1212.26 L1144.36 1212.26 L1143.77 1212.26 L1143.18 1212.26 L1142.6 1212.26 L1142.01 1212.26 L1141.42 1212.26 L1140.84 1212.26 L1140.25 1212.26 L1139.67 1212.26 L1139.08 1212.26 L1138.49 1212.26 L1137.91 1212.26 L1137.32 1212.26 L1136.73 1212.26 L1136.15 1212.26 L1135.56 1212.26 L1134.97 1212.26 L1134.39 1212.26 L1133.8 1212.26 L1133.21 1212.26 L1132.63 1212.26 L1132.04 1212.26 L1131.46 1212.26 L1130.87 1212.26 L1130.28 1212.26 L1129.7 1212.26 L1129.11 1212.26 L1128.52 1212.26 L1127.94 1212.26 L1127.35 1212.26 L1126.76 1212.26 L1126.18 1212.26 L1125.59 1212.26 L1125.01 1212.26 L1124.42 1212.26 L1123.83 1212.26 L1123.25 1212.26 L1122.66 1212.26 L1122.07 1212.26 L1121.49 1212.26 L1120.9 1212.26 L1120.31 1212.26 L1119.73 1212.26 L1119.14 1212.26 L1118.55 1212.26 L1117.97 1212.26 L1117.38 1212.26 L1116.8 1212.26 L1116.21 1212.26 L1115.62 1212.26 L1115.04 1212.26 L1114.45 1212.26 L1113.86 1212.26 L1113.28 1212.26 L1112.69 1212.26 L1112.1 1212.26 L1111.52 1212.26 L1110.93 1212.26 L1110.34 1212.26 L1109.76 1212.26 L1109.17 1212.26 L1108.59 1212.26 L1108 1212.26 L1107.41 1212.26 L1106.83 1212.26 L1106.24 1212.26 L1105.65 1212.26 L1105.07 1212.26 L1104.48 1212.26 L1103.89 1212.26 L1103.31 1212.26 L1102.72 1212.26 L1102.14 1212.26 L1101.55 1212.26 L1100.96 1212.26 L1100.38 1212.26 L1099.79 1212.26 L1099.2 1212.26 L1098.62 1212.26 L1098.03 1212.26 L1097.44 1212.26 L1096.86 1212.26 L1096.27 1212.26 L1095.68 1212.26 L1095.1 1212.26 L1094.51 1212.26 L1093.93 1212.26 L1093.34 1212.26 L1092.75 1212.26 L1092.17 1212.26 L1091.58 1212.26 L1090.99 1212.26 L1090.41 1212.26 L1089.82 1212.26 L1089.23 1212.26 L1088.65 1212.26 L1088.06 1212.26 L1087.47 1212.26 L1086.89 1212.26 L1086.3 1212.26 L1085.72 1212.26 L1085.13 1212.26 L1084.54 1212.26 L1083.96 1212.26 L1083.37 1212.26 L1082.78 1212.26 L1082.2 1212.26 L1081.61 1212.26 L1081.02 1212.26 L1080.44 1212.26 L1079.85 1212.26 L1079.26 1212.26 L1078.68 1212.26 L1078.09 1212.26 L1077.51 1212.26 L1076.92 1212.26 L1076.33 1212.26 L1075.75 1212.26 L1075.16 1212.26 L1074.57 1212.26 L1073.99 1212.26 L1073.4 1212.26 L1072.81 1212.26 L1072.23 1212.26 L1071.64 1212.26 L1071.06 1212.26 L1070.47 1212.26 L1069.88 1212.26 L1069.3 1212.26 L1068.71 1212.26 L1068.12 1212.26 L1067.54 1212.26 L1066.95 1212.26 L1066.36 1212.26 L1065.78 1212.26 L1065.19 1212.26 L1064.6 1212.26 L1064.02 1212.26 L1063.43 1212.26 L1062.85 1212.26 L1062.26 1212.26 L1061.67 1212.26 L1061.09 1212.26 L1060.5 1212.26 L1059.91 1212.26 L1059.33 1212.26 L1058.74 1212.26 L1058.15 1212.26 L1057.57 1212.26 L1056.98 1212.26 L1056.39 1212.26 L1055.81 1212.26 L1055.22 1212.26 L1054.64 1212.26 L1054.05 1212.26 L1053.46 1212.26 L1052.88 1212.26 L1052.29 1212.26 L1051.7 1212.26 L1051.12 1212.26 L1050.53 1212.26 L1049.94 1212.26 L1049.36 1212.26 L1048.77 1212.26 L1048.19 1212.26 L1047.6 1212.26 L1047.01 1212.26 L1046.43 1212.26 L1045.84 1212.26 L1045.25 1212.26 L1044.67 1212.26 L1044.08 1212.26 L1043.49 1212.26 L1042.91 1212.26 L1042.32 1212.26 L1041.73 1212.26 L1041.15 1212.26 L1040.56 1212.26 L1039.98 1212.26 L1039.39 1212.26 L1038.8 1212.26 L1038.22 1212.26 L1037.63 1212.26 L1037.04 1212.26 L1036.46 1212.26 L1035.87 1212.26 L1035.28 1212.26 L1034.7 1212.26 L1034.11 1212.26 L1033.52 1212.26 L1032.94 1212.26 L1032.35 1212.26 L1031.77 1212.26 L1031.18 1212.26 L1030.59 1212.26 L1030.01 1212.26 L1029.42 1212.26 L1028.83 1212.26 L1028.25 1212.26 L1027.66 1212.26 L1027.07 1212.26 L1026.49 1212.26 L1025.9 1212.26 L1025.32 1212.26 L1024.73 1212.26 L1024.14 1212.26 L1023.56 1212.26 L1022.97 1212.26 L1022.38 1212.26 L1021.8 1212.26 L1021.21 1212.26 L1020.62 1212.26 L1020.04 1212.26 L1019.45 1212.26 L1018.86 1212.26 L1018.28 1212.26 L1017.69 1212.26 L1017.11 1212.26 L1016.52 1212.26 L1015.93 1212.26 L1015.35 1212.26 L1014.76 1212.26 L1014.17 1212.26 L1013.59 1212.26 L1013 1212.26 L1012.41 1212.26 L1011.83 1212.26 L1011.24 1212.26 L1010.65 1212.26 L1010.07 1212.26 L1009.48 1212.26 L1008.9 1212.26 L1008.31 1212.26 L1007.72 1212.26 L1007.14 1212.26 L1006.55 1212.26 L1005.96 1212.26 L1005.38 1212.26 L1004.79 1212.26 L1004.2 1212.26 L1003.62 1212.26 L1003.03 1212.26 L1002.44 1212.26 L1001.86 1212.26 L1001.27 1212.26 L1000.69 1212.26 L1000.1 1212.26 L999.513 1212.26 L998.926 1212.26 L998.34 1212.26 L997.754 1212.26 L997.167 1212.26 L996.581 1212.26 L995.994 1212.26 L995.408 1212.26 L994.822 1212.26 L994.235 1212.26 L993.649 1212.26 L993.062 1212.26 L992.476 1212.26 L991.889 1212.26 L991.303 1212.26 L990.717 1212.26 L990.13 1212.26 L989.544 1212.26 L988.957 1212.26 L988.371 1212.26 L987.785 1212.26 L987.198 1212.26 L986.612 1212.26 L986.025 1212.26  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.63 986.612,1212.63 987.198,1212.63 987.785,1212.63 988.371,1212.63 988.957,1212.63 989.544,1212.63 990.13,1212.63 990.717,1212.63 991.303,1212.63 991.889,1212.63 992.476,1212.63 993.062,1212.63 993.649,1212.63 994.235,1212.63 994.822,1212.63 995.408,1212.63 995.994,1212.63 996.581,1212.63 997.167,1212.63 997.754,1212.63 998.34,1212.63 998.926,1212.63 999.513,1212.63 1000.1,1212.63 1000.69,1212.63 1001.27,1212.63 1001.86,1212.63 1002.44,1212.63 1003.03,1212.63 1003.62,1212.63 1004.2,1212.63 1004.79,1212.63 1005.38,1212.63 1005.96,1212.63 1006.55,1212.63 1007.14,1212.63 1007.72,1212.63 1008.31,1212.63 1008.9,1212.63 1009.48,1212.63 1010.07,1212.63 1010.65,1212.63 1011.24,1212.63 1011.83,1212.63 1012.41,1212.63 1013,1212.63 1013.59,1212.63 1014.17,1212.63 1014.76,1212.63 1015.35,1212.63 1015.93,1212.63 1016.52,1212.63 1017.11,1212.63 1017.69,1212.63 1018.28,1212.63 1018.86,1212.63 1019.45,1212.63 1020.04,1212.63 1020.62,1212.63 1021.21,1212.63 1021.8,1212.63 1022.38,1212.63 1022.97,1212.63 1023.56,1212.63 1024.14,1212.63 1024.73,1212.63 1025.32,1212.63 1025.9,1212.63 1026.49,1212.63 1027.07,1212.63 1027.66,1212.63 1028.25,1212.63 1028.83,1212.63 1029.42,1212.63 1030.01,1212.63 1030.59,1212.63 1031.18,1212.63 1031.77,1212.63 1032.35,1212.63 1032.94,1212.63 1033.52,1212.63 1034.11,1212.63 1034.7,1212.63 1035.28,1212.63 1035.87,1212.63 1036.46,1212.63 1037.04,1212.63 1037.63,1212.63 1038.22,1212.63 1038.8,1212.63 1039.39,1212.63 1039.98,1212.63 1040.56,1212.63 1041.15,1212.63 1041.73,1212.63 1042.32,1212.63 1042.91,1212.63 1043.49,1212.63 1044.08,1212.63 1044.67,1212.63 1045.25,1212.63 1045.84,1212.63 1046.43,1212.63 1047.01,1212.63 1047.6,1212.63 1048.19,1212.63 1048.77,1212.63 1049.36,1212.63 1049.94,1212.63 1050.53,1212.63 1051.12,1212.63 1051.7,1212.63 1052.29,1212.63 1052.88,1212.63 1053.46,1212.63 1054.05,1212.63 1054.64,1212.63 1055.22,1212.63 1055.81,1212.63 1056.39,1212.63 1056.98,1212.63 1057.57,1212.63 1058.15,1212.63 1058.74,1212.63 1059.33,1212.63 1059.91,1212.63 1060.5,1212.63 1061.09,1212.63 1061.67,1212.63 1062.26,1212.63 1062.85,1212.63 1063.43,1212.63 1064.02,1212.63 1064.6,1212.63 1065.19,1212.63 1065.78,1212.63 1066.36,1212.63 1066.95,1212.63 1067.54,1212.63 1068.12,1212.63 1068.71,1212.63 1069.3,1212.63 1069.88,1212.63 1070.47,1212.63 1071.06,1212.63 1071.64,1212.63 1072.23,1212.63 1072.81,1212.63 1073.4,1212.63 1073.99,1212.63 1074.57,1212.63 1075.16,1212.63 1075.75,1212.63 1076.33,1212.63 1076.92,1212.63 1077.51,1212.63 1078.09,1212.63 1078.68,1212.63 1079.26,1212.63 1079.85,1212.63 1080.44,1212.63 1081.02,1212.63 1081.61,1212.63 1082.2,1212.63 1082.78,1212.63 1083.37,1212.63 1083.96,1212.63 1084.54,1212.63 1085.13,1212.63 1085.72,1212.63 1086.3,1212.63 1086.89,1212.63 1087.47,1212.63 1088.06,1212.63 1088.65,1212.63 1089.23,1212.63 1089.82,1212.63 1090.41,1212.63 1090.99,1212.63 1091.58,1212.63 1092.17,1212.63 1092.75,1212.63 1093.34,1212.63 1093.93,1212.63 1094.51,1212.63 1095.1,1212.63 1095.68,1212.63 1096.27,1212.63 1096.86,1212.63 1097.44,1212.63 1098.03,1212.63 1098.62,1212.63 1099.2,1212.63 1099.79,1212.63 1100.38,1212.63 1100.96,1212.63 1101.55,1212.63 1102.14,1212.63 1102.72,1212.63 1103.31,1212.63 1103.89,1212.63 1104.48,1212.63 1105.07,1212.63 1105.65,1212.63 1106.24,1212.63 1106.83,1212.63 1107.41,1212.63 1108,1212.63 1108.59,1212.63 1109.17,1212.63 1109.76,1212.63 1110.34,1212.63 1110.93,1212.63 1111.52,1212.63 1112.1,1212.63 1112.69,1212.63 1113.28,1212.63 1113.86,1212.63 1114.45,1212.63 1115.04,1212.63 1115.62,1212.63 1116.21,1212.63 1116.8,1212.63 1117.38,1212.63 1117.97,1212.63 1118.55,1212.63 1119.14,1212.63 1119.73,1212.63 1120.31,1212.63 1120.9,1212.63 1121.49,1212.63 1122.07,1212.63 1122.66,1212.63 1123.25,1212.63 1123.83,1212.63 1124.42,1212.63 1125.01,1212.63 1125.59,1212.63 1126.18,1212.63 1126.76,1212.63 1127.35,1212.63 1127.94,1212.63 1128.52,1212.63 1129.11,1212.63 1129.7,1212.63 1130.28,1212.63 1130.87,1212.63 1131.46,1212.63 1132.04,1212.63 1132.63,1212.63 1133.21,1212.63 1133.8,1212.63 1134.39,1212.63 1134.97,1212.63 1135.56,1212.63 1136.15,1212.63 1136.73,1212.63 1137.32,1212.63 1137.91,1212.63 1138.49,1212.63 1139.08,1212.63 1139.67,1212.63 1140.25,1212.63 1140.84,1212.63 1141.42,1212.63 1142.01,1212.63 1142.6,1212.63 1143.18,1212.63 1143.77,1212.63 1144.36,1212.63 1144.94,1212.63 1145.53,1212.63 1146.12,1212.63 1146.7,1212.63 1147.29,1212.63 1147.88,1212.63 1148.46,1212.63 1149.05,1212.63 1149.63,1212.63 1150.22,1212.63 1150.81,1212.63 1151.39,1212.63 1151.98,1212.63 1152.57,1212.63 1153.15,1212.63 1153.74,1212.63 1154.33,1212.63 1154.91,1212.63 1155.5,1212.63 1156.09,1212.63 1156.67,1212.63 1157.26,1212.63 1157.84,1212.63 1158.43,1212.63 1159.02,1212.63 1159.6,1212.63 1160.19,1212.63 1160.78,1212.63 1161.36,1212.63 1161.95,1212.63 1162.54,1212.63 1163.12,1212.63 1163.71,1212.63 1164.29,1212.63 1164.88,1212.63 1165.47,1212.63 1166.05,1212.63 1166.64,1212.63 1167.23,1212.63 1167.81,1212.63 1168.4,1212.63 1168.99,1212.63 1169.57,1212.63 1170.16,1212.63 1170.75,1212.63 1171.33,1212.63 1171.92,1212.63 1172.5,1212.63 1173.09,1212.63 1173.68,1212.63 1174.26,1212.63 1174.85,1212.63 1175.44,1212.63 1176.02,1212.63 1176.61,1212.63 1177.2,1212.63 1177.78,1212.63 1178.37,1212.63 1178.96,1212.63 1179.54,1212.63 1180.13,1212.63 1180.71,1212.63 1181.3,1212.63 1181.89,1212.63 1182.47,1212.63 1183.06,1212.63 1183.65,1212.63 1184.23,1212.63 1184.82,1212.63 1185.41,1212.63 1185.99,1212.63 1186.58,1212.63 1187.16,1212.63 1187.75,1212.63 1188.34,1212.63 1188.92,1212.63 1189.51,1212.63 1190.1,1212.63 1190.68,1212.63 1191.27,1212.63 1191.86,1212.63 1192.44,1212.63 1193.03,1212.63 1193.62,1212.63 1194.2,1212.63 1194.79,1212.63 1195.37,1212.63 1195.96,1212.63 1196.55,1212.63 1197.13,1212.63 1197.72,1212.63 1198.31,1212.63 1198.89,1212.63 1199.48,1212.63 1200.07,1212.63 1200.65,1212.63 1201.24,1212.63 1201.83,1212.63 1202.41,1212.63 1203,1212.63 1203.58,1212.63 1204.17,1212.63 1204.76,1212.63 1205.34,1212.63 1205.93,1212.63 1206.52,1212.63 1207.1,1212.63 1207.69,1212.63 1208.28,1212.63 1208.86,1212.63 1209.45,1212.63 1210.03,1212.63 1210.62,1212.63 1211.21,1212.63 1211.79,1212.63 1212.38,1212.63 1212.97,1212.63 1213.55,1212.63 1214.14,1212.63 1214.73,1212.63 1215.31,1212.63 1215.9,1212.63 1216.49,1212.63 1217.07,1212.63 1217.66,1212.63 1218.24,1212.63 1218.83,1212.63 1219.42,1212.63 1220,1212.63 1220.59,1212.63 1221.18,1212.63 1221.76,1212.63 1222.35,1212.63 1222.94,1212.63 1223.52,1212.63 1224.11,1212.63 1224.7,1212.63 1225.28,1212.63 1225.87,1212.63 1226.45,1212.63 1227.04,1212.63 1227.63,1212.63 1228.21,1212.63 1228.8,1212.63 1229.39,1212.63 1229.97,1212.63 1230.56,1212.63 1231.15,1212.63 1231.73,1212.63 1232.32,1212.63 1232.91,1212.63 1233.49,1212.63 1234.08,1212.63 1234.66,1212.63 1235.25,1212.63 1235.84,1212.63 1236.42,1212.63 1237.01,1212.63 1237.6,1212.63 1238.18,1212.63 1238.77,1212.63 1239.36,1212.63 1239.94,1212.63 1240.53,1212.63 1241.11,1212.63 1241.7,1212.63 1242.29,1212.63 1242.87,1212.63 1243.46,1212.63 1244.05,1212.63 1244.63,1212.63 1245.22,1212.63 1245.81,1212.63 1246.39,1212.63 1246.98,1212.63 1247.57,1212.63 1248.15,1212.63 1248.74,1212.63 1249.32,1212.63 1249.91,1212.63 1250.5,1212.63 1251.08,1212.63 1251.67,1212.63 1252.26,1212.63 1252.84,1212.63 1253.43,1212.63 1254.02,1212.63 1254.6,1212.63 1255.19,1212.63 1255.78,1212.63 1256.36,1212.63 1256.95,1212.63 1257.53,1212.63 1258.12,1212.63 1258.71,1212.63 1259.29,1212.63 1259.88,1212.63 1260.47,1212.63 1261.05,1212.63 1261.64,1212.63 1262.23,1212.63 1262.81,1212.63 1263.4,1212.63 1263.98,1212.63 1264.57,1212.63 1265.16,1212.63 1265.74,1212.63 1266.33,1212.63 1266.92,1212.63 1267.5,1212.63 1268.09,1212.63 1268.68,1212.63 1269.26,1212.63 1269.85,1212.63 1270.44,1212.63 1271.02,1212.63 1271.61,1212.63 1272.19,1212.63 1272.78,1212.63 1273.37,1212.63 1273.95,1212.63 1274.54,1212.63 1275.13,1212.63 1275.71,1212.63 1276.3,1212.63 1276.89,1212.63 1277.47,1212.63 1278.06,1212.63 1278.65,1212.63 1279.23,1212.63 1279.82,1212.63 1280.4,1212.63 1280.99,1212.63 1281.58,1212.63 1282.16,1212.63 1282.75,1212.63 1283.34,1212.63 1283.92,1212.63 1284.51,1212.63 1285.1,1212.63 1285.68,1212.63 1286.27,1212.63 1286.86,1212.63 1287.44,1212.63 1288.03,1212.63 1288.61,1212.63 1289.2,1212.63 1289.79,1212.63 1290.37,1212.63 1290.96,1212.63 1291.55,1212.63 1292.13,1212.63 1292.72,1212.63 1293.31,1212.63 1293.89,1212.63 1294.48,1212.63 1295.06,1212.63 1295.65,1212.63 1296.24,1212.63 1296.82,1212.63 1297.41,1212.63 1298,1212.63 1298.58,1212.63 1299.17,1212.63 1299.76,1212.63 1300.34,1212.63 1300.93,1212.63 1301.52,1212.63 1302.1,1212.63 1302.69,1212.63 1303.27,1212.63 1303.86,1212.63 1304.45,1212.63 1305.03,1212.63 1305.62,1212.63 1306.21,1212.63 1306.79,1212.63 1307.38,1212.63 1307.97,1212.63 1308.55,1212.63 1309.14,1212.63 1309.73,1212.63 1310.31,1212.63 1310.9,1212.63 1311.48,1212.63 1312.07,1212.63 1312.66,1212.63 1313.24,1212.63 1313.83,1212.63 1314.42,1212.63 1315,1212.63 1315.59,1212.63 1316.18,1212.63 1316.76,1212.63 1317.35,1212.63 1317.93,1212.63 1318.52,1212.63 1319.11,1212.63 1319.69,1212.63 1320.28,1212.63 1320.87,1212.63 1321.45,1212.63 1322.04,1212.63 1322.63,1212.63 1323.21,1212.63 1323.8,1212.63 1324.39,1212.63 1324.97,1212.63 1325.56,1212.63 1326.14,1212.63 1326.73,1212.63 1327.32,1212.63 1327.9,1212.63 1328.49,1212.63 1329.08,1212.63 1329.66,1212.63 1330.25,1212.63 1330.84,1212.63 1331.42,1212.63 1332.01,1212.63 1332.6,1212.63 1333.18,1212.63 1333.77,1212.63 1334.35,1212.63 1334.94,1212.63 1335.53,1212.63 1336.11,1212.63 1336.7,1212.63 1337.29,1212.63 1337.87,1212.63 1338.46,1212.63 1339.05,1212.63 1339.63,1212.63 1340.22,1212.63 1340.8,1212.63 1341.39,1212.63 1341.98,1212.63 1342.56,1212.63 1343.15,1212.63 1343.74,1212.63 1344.32,1212.63 1344.91,1212.63 1345.5,1212.63 1346.08,1212.63 1346.67,1212.63 1347.26,1212.63 1347.84,1212.63 1348.43,1212.63 1349.01,1212.63 1349.6,1212.63 1350.19,1212.63 1350.77,1212.63 1351.36,1212.63 1351.95,1212.63 1352.53,1212.63 1353.12,1212.63 1353.71,1212.63 1354.29,1212.63 1354.88,1212.63 1355.47,1212.63 1356.05,1212.63 1356.64,1212.63 1357.22,1212.63 1357.81,1212.63 1358.4,1212.63 1358.98,1212.63 1359.57,1212.63 1360.16,1212.63 1360.74,1212.63 1361.33,1212.63 1361.92,1212.63 1362.5,1212.63 1363.09,1212.63 1363.68,1212.63 1364.26,1212.63 1364.85,1212.63 1365.43,1212.63 1366.02,1212.63 1366.61,1212.63 1367.19,1212.63 1367.78,1212.63 1368.37,1212.63 1368.95,1212.63 1369.54,1212.63 1370.13,1212.63 1370.71,1212.63 1371.3,1212.63 1371.88,1212.63 1372.47,1212.63 1373.06,1212.63 1373.64,1212.63 1374.23,1212.63 1374.82,1212.63 1375.4,1212.63 1375.99,1212.63 1376.58,1212.63 1377.16,1212.63 1377.75,1212.63 1378.34,1212.63 1378.92,1212.63 1379.51,1212.63 1380.09,1212.63 1380.68,1212.63 1381.27,1212.63 1381.85,1212.63 1382.44,1212.63 1383.03,1212.63 1383.61,1212.63 1384.2,1212.63 1384.79,1212.63 1385.37,1212.63 1385.96,1212.63 1386.55,1212.63 1387.13,1212.63 1387.72,1212.63 1388.3,1212.63 1388.89,1212.63 1389.48,1212.63 1390.06,1212.63 1390.65,1212.63 1391.24,1212.63 1391.82,1212.63 1392.41,1212.63 1393,1212.63 1393.58,1212.63 1394.17,1212.63 1394.75,1212.63 1395.34,1212.63 1395.93,1212.63 1396.51,1212.63 1397.1,1212.63 1397.69,1212.63 1398.27,1212.63 1398.86,1212.63 1399.45,1212.63 1400.03,1212.63 1400.62,1212.63 1401.21,1212.63 1401.79,1212.63 1402.38,1212.63 1402.96,1212.63 1403.55,1212.63 1404.14,1212.63 1404.72,1212.63 1405.31,1212.63 1405.9,1212.63 1406.48,1212.63 1407.07,1212.63 1407.66,1212.63 1408.24,1212.63 1408.83,1212.63 1409.42,1212.63 1410,1212.63 1410.59,1212.63 1411.17,1212.63 1411.76,1212.63 1412.35,1212.63 1412.93,1212.63 1413.52,1212.63 1414.11,1212.63 1414.69,1212.63 1415.28,1212.63 1415.87,1212.63 1416.45,1212.63 1417.04,1212.63 1417.63,1212.63 1418.21,1212.63 1418.8,1212.63 1419.38,1212.63 1419.97,1212.63 1420.56,1212.63 1421.14,1212.63 1421.73,1212.63 1422.32,1212.63 1422.9,1212.63 1423.49,1212.63 1424.08,1212.63 1424.66,1212.63 1425.25,1212.63 1425.83,1212.63 1426.42,1212.63 1427.01,1212.63 1427.59,1212.63 1428.18,1212.63 1428.77,1212.63 1429.35,1212.63 1429.94,1212.63 1430.53,1212.63 1431.11,1212.63 1431.7,1212.63 1432.29,1212.63 1432.87,1212.63 1433.46,1212.63 1434.04,1212.63 1434.63,1212.63 1435.22,1212.63 1435.8,1212.63 1436.39,1212.63 1436.98,1212.63 1437.56,1212.63 1438.15,1212.63 1438.74,1212.63 1439.32,1212.63 1439.91,1212.63 1440.5,1212.63 1441.08,1212.63 1441.67,1212.63 1442.25,1212.63 1442.84,1212.63 1443.43,1212.63 1444.01,1212.63 1444.6,1212.63 1445.19,1212.63 1445.77,1212.63 1446.36,1212.63 1446.95,1212.63 1447.53,1212.63 1448.12,1212.63 1448.7,1212.63 1449.29,1212.63 1449.88,1212.63 1450.46,1212.63 1451.05,1212.63 1451.64,1212.63 1452.22,1212.63 1452.81,1212.63 1453.4,1212.63 1453.98,1212.63 1454.57,1212.63 1455.16,1212.63 1455.74,1212.63 1456.33,1212.63 1456.91,1212.63 1457.5,1212.63 1458.09,1212.63 1458.67,1212.63 1459.26,1212.63 1459.85,1212.63 1460.43,1212.63 1461.02,1212.63 1461.61,1212.63 1462.19,1212.63 1462.78,1212.63 1463.37,1212.63 1463.95,1212.63 1464.54,1212.63 1465.12,1212.63 1465.71,1212.63 1466.3,1212.63 1466.88,1212.63 1467.47,1212.63 1468.06,1212.63 1468.64,1212.63 1469.23,1212.63 1469.82,1212.63 1470.4,1212.63 1470.99,1212.63 1471.57,1212.63 1472.16,1212.63 1472.75,1212.63 1473.33,1212.63 1473.92,1212.63 1474.51,1212.63 1475.09,1212.63 1475.68,1212.63 1476.27,1212.63 1476.85,1212.63 1477.44,1212.63 1478.03,1212.63 1478.61,1212.63 1479.2,1212.63 1479.78,1212.63 1480.37,1212.63 1480.96,1212.63 1481.54,1212.63 1482.13,1212.63 1482.72,1212.63 1483.3,1212.63 1483.89,1212.63 1484.48,1212.63 1485.06,1212.63 1485.65,1212.63 1486.24,1212.63 1486.82,1212.63 1487.41,1212.63 1487.99,1212.63 1488.58,1212.63 1489.17,1212.63 1489.75,1212.63 1490.34,1212.63 1490.93,1212.63 1491.51,1212.63 1492.1,1212.63 1492.69,1212.63 1493.27,1212.63 1493.86,1212.63 1494.45,1212.63 1495.03,1212.63 1495.62,1212.63 1496.2,1212.63 1496.79,1212.63 1497.38,1212.63 1497.96,1212.63 1498.55,1212.63 1499.14,1212.63 1499.72,1212.63 1500.31,1212.63 1500.9,1212.63 1501.48,1212.63 1502.07,1212.63 1502.65,1212.63 1503.24,1212.63 1503.83,1212.63 1504.41,1212.63 1505,1212.63 1505.59,1212.63 1506.17,1212.63 1506.76,1212.63 1507.35,1212.63 1507.93,1212.63 1508.52,1212.63 1509.11,1212.63 1509.69,1212.63 1510.28,1212.63 1510.86,1212.63 1511.45,1212.63 1512.04,1212.63 1512.62,1212.63 1513.21,1212.63 1513.8,1212.63 1514.38,1212.63 1514.97,1212.63 1515.56,1212.63 1516.14,1212.63 1516.73,1212.63 1517.32,1212.63 1517.9,1212.63 1518.49,1212.63 1519.07,1212.63 1519.66,1212.63 1520.25,1212.63 1520.83,1212.63 1521.42,1212.63 1522.01,1212.63 1522.59,1212.63 1523.18,1212.63 1523.77,1212.63 1524.35,1212.63 1524.94,1212.63 1525.52,1212.63 1526.11,1212.63 1526.7,1212.63 1527.28,1212.63 1527.87,1212.63 1528.46,1212.63 1529.04,1212.63 1529.63,1212.63 1530.22,1212.63 1530.8,1212.63 1531.39,1212.63 1531.98,1212.63 1532.56,1212.63 1533.15,1212.63 1533.73,1212.63 1534.32,1212.63 1534.91,1212.63 1535.49,1212.63 1536.08,1212.63 1536.67,1212.63 1537.25,1212.63 1537.84,1212.63 1538.43,1212.63 1539.01,1212.63 1539.6,1212.63 1540.19,1212.63 1540.77,1212.63 1541.36,1212.63 1541.94,1212.63 1542.53,1212.63 1543.12,1212.63 1543.7,1212.63 1544.29,1212.63 1544.88,1212.63 1545.46,1212.63 1546.05,1212.63 1546.64,1212.63 1547.22,1212.63 1547.81,1212.63 1548.4,1212.63 1548.98,1212.63 1549.57,1212.63 1550.15,1212.63 1550.74,1212.63 1551.33,1212.63 1551.91,1212.63 1552.5,1212.63 1553.09,1212.63 1553.67,1212.63 1554.26,1212.63 1554.85,1212.63 1555.43,1212.63 1556.02,1212.63 1556.6,1212.63 1557.19,1212.63 1557.78,1212.63 1558.36,1212.63 1558.95,1212.63 1559.54,1212.63 1560.12,1212.63 1560.71,1212.63 1561.3,1212.63 1561.88,1212.63 1562.47,1212.63 1563.06,1212.63 1563.64,1212.63 1564.23,1212.63 1564.81,1212.63 1565.4,1212.63 1565.99,1212.63 1566.57,1212.63 1567.16,1212.63 1567.75,1212.63 1568.33,1212.63 1568.92,1212.63 1569.51,1212.63 1570.09,1212.63 1570.68,1212.63 1571.27,1212.63 1571.85,1212.63 1572.44,1212.63 1573.02,1212.63 1573.61,1212.63 1574.2,1212.63 1574.78,1212.63 1575.37,1212.63 1575.96,1212.63 1576.54,1212.63 1577.13,1212.63 1577.72,1212.63 1578.3,1212.63 1578.89,1212.63 1579.47,1212.63 1580.06,1212.63 1580.65,1212.63 1581.23,1212.63 1581.82,1212.63 1582.41,1212.63 1582.99,1212.63 1583.58,1212.63 1584.17,1212.63 1584.75,1212.63 1585.34,1212.63 1585.93,1212.63 1586.51,1212.63 1587.1,1212.63 1587.68,1212.63 1588.27,1212.63 1588.86,1212.63 1589.44,1212.63 1590.03,1212.63 1590.62,1212.63 1591.2,1212.63 1591.79,1212.63 1592.38,1212.63 1592.96,1212.63 1593.55,1212.63 1594.14,1212.63 1594.72,1212.63 1595.31,1212.63 1595.89,1212.63 1596.48,1212.63 1597.07,1212.63 1597.65,1212.63 1598.24,1212.63 1598.83,1212.63 1599.41,1212.63 1600,1212.63 1600.59,1212.63 1601.17,1212.63 1601.76,1212.63 1602.34,1212.63 1602.93,1212.63 1603.52,1212.63 1604.1,1212.63 1604.69,1212.63 1605.28,1212.63 1605.86,1212.63 1606.45,1212.63 1607.04,1212.63 1607.62,1212.63 1608.21,1212.63 1608.8,1212.63 1609.38,1212.63 1609.97,1212.63 1610.55,1212.63 1611.14,1212.63 1611.73,1212.63 1612.31,1212.63 1612.9,1212.63 1613.49,1212.63 1614.07,1212.63 1614.66,1212.63 1615.25,1212.63 1615.83,1212.63 1616.42,1212.63 1617.01,1212.63 1617.59,1212.63 1618.18,1212.63 1618.76,1212.63 1619.35,1212.63 1619.94,1212.63 1620.52,1212.63 1621.11,1212.63 1621.7,1212.63 1622.28,1212.63 1622.87,1212.63 1623.46,1212.63 1624.04,1212.63 1624.63,1212.63 1625.22,1212.63 1625.8,1212.63 1626.39,1212.63 1626.97,1212.63 1627.56,1212.63 1628.15,1212.63 1628.73,1212.63 1629.32,1212.63 1629.91,1212.63 1630.49,1212.63 1631.08,1212.63 1631.67,1212.63 1632.25,1212.63 1632.84,1212.63 1633.42,1212.63 1634.01,1212.63 1634.6,1212.63 1635.18,1212.63 1635.77,1212.63 1636.36,1212.63 1636.94,1212.63 1637.53,1212.63 1638.12,1212.63 1638.7,1212.63 1639.29,1212.63 1639.88,1212.63 1640.46,1212.63 1641.05,1212.63 1641.63,1212.63 1642.22,1212.63 1642.81,1212.63 1643.39,1212.63 1643.98,1212.63 1644.57,1212.63 1645.15,1212.63 1645.74,1212.63 1646.33,1212.63 1646.91,1212.63 1647.5,1212.63 1648.09,1212.63 1648.67,1212.63 1649.26,1212.63 1649.84,1212.63 1650.43,1212.63 1651.02,1212.63 1651.6,1212.63 1652.19,1212.63 1652.78,1212.63 1653.36,1212.63 1653.95,1212.63 1654.54,1212.63 1655.12,1212.63 1655.71,1212.63 1656.29,1212.63 1656.88,1212.63 1657.47,1212.63 1658.05,1212.63 1658.64,1212.63 1659.23,1212.63 1659.81,1212.63 1660.4,1212.63 1660.99,1212.63 1661.57,1212.63 1662.16,1212.63 1662.75,1212.63 1663.33,1212.63 1663.92,1212.63 1664.5,1212.63 1665.09,1212.63 1665.68,1212.63 1666.26,1212.63 1666.85,1212.63 1667.44,1212.63 1668.02,1212.63 1668.61,1212.63 1669.2,1212.63 1669.78,1212.63 1670.37,1212.63 1670.96,1212.63 1671.54,1212.63 1672.13,1212.63 1672.71,1212.63 1673.3,1212.63 1673.89,1212.63 1674.47,1212.63 1675.06,1212.63 1675.65,1212.63 1676.23,1212.63 1676.82,1212.63 1677.41,1212.63 1677.99,1212.63 1678.58,1212.63 1679.17,1212.63 1679.75,1212.63 1680.34,1212.63 1680.92,1212.63 1681.51,1212.63 1682.1,1212.63 1682.68,1212.63 1683.27,1212.63 1683.86,1212.63 1684.44,1212.63 1685.03,1212.63 1685.62,1212.63 1686.2,1212.63 1686.79,1212.63 1687.37,1212.63 1687.96,1212.63 1688.55,1212.63 1689.13,1212.63 1689.72,1212.63 1690.31,1212.63 1690.89,1212.63 1691.48,1212.63 1692.07,1212.63 1692.65,1212.63 1693.24,1212.63 1693.83,1212.63 1694.41,1212.63 1695,1212.63 1695.58,1212.63 1696.17,1212.63 1696.76,1212.63 1697.34,1212.63 1697.93,1212.63 1698.52,1212.63 1699.1,1212.63 1699.69,1212.63 1700.28,1212.63 1700.86,1212.63 1701.45,1212.63 1702.04,1212.63 1702.62,1212.63 1703.21,1212.63 1703.79,1212.63 1704.38,1212.63 1704.97,1212.63 1705.55,1212.63 1706.14,1212.63 1706.73,1212.63 1707.31,1212.63 1707.9,1212.63 1708.49,1212.63 1709.07,1212.63 1709.66,1212.63 1710.24,1212.63 1710.83,1212.63 1711.42,1212.63 1712,1212.63 1712.59,1212.63 1713.18,1212.63 1713.76,1212.63 1714.35,1212.63 1714.94,1212.63 1715.52,1212.63 1716.11,1212.63 1716.7,1212.63 1717.28,1212.63 1717.87,1212.63 1718.45,1212.63 1719.04,1212.63 1719.63,1212.63 1720.21,1212.63 1720.8,1212.63 1721.39,1212.63 1721.97,1212.63 1722.56,1212.63 1723.15,1212.63 1723.73,1212.63 1724.32,1212.63 1724.91,1212.63 1725.49,1212.63 1726.08,1212.63 1726.66,1212.63 1727.25,1212.63 1727.84,1212.63 1728.42,1212.63 1729.01,1212.63 1729.6,1212.63 1730.18,1212.63 1730.77,1212.63 1731.36,1212.63 1731.94,1212.63 1732.53,1212.63 1733.11,1212.63 1733.7,1212.63 1734.29,1212.63 1734.87,1212.63 1735.46,1212.63 1736.05,1212.63 1736.63,1212.63 1737.22,1212.63 1737.81,1212.63 1738.39,1212.63 1738.98,1212.63 1739.57,1212.63 1740.15,1212.63 1740.74,1212.63 1741.32,1212.63 1741.91,1212.63 1742.5,1212.63 1743.08,1212.63 1743.67,1212.63 1744.26,1212.63 1744.84,1212.63 1745.43,1212.63 1746.02,1212.63 1746.6,1212.63 1747.19,1212.63 1747.78,1212.63 1748.36,1212.63 1748.95,1212.63 1749.53,1212.63 1750.12,1212.63 1750.71,1212.63 1751.29,1212.63 1751.88,1212.63 1752.47,1212.63 1753.05,1212.63 1753.64,1212.63 1754.23,1212.63 1754.81,1212.63 1755.4,1212.63 1755.99,1212.63 1756.57,1212.63 1757.16,1212.63 1757.74,1212.63 1758.33,1212.63 1758.92,1212.63 1759.5,1212.63 1760.09,1212.63 1760.68,1212.63 1761.26,1212.63 1761.85,1212.63 1762.44,1212.63 1763.02,1212.63 1763.61,1212.63 1764.19,1212.63 1764.78,1212.63 1765.37,1212.63 1765.95,1212.63 1766.54,1212.63 1767.13,1212.63 1767.71,1212.63 1768.3,1212.63 1768.89,1212.63 1769.47,1212.63 1770.06,1212.63 1770.65,1212.63 1771.23,1212.63 1771.82,1212.63 1772.4,1212.63 1772.99,1212.63 1773.58,1212.63 1774.16,1212.63 1774.75,1212.63 1775.34,1212.63 1775.92,1212.63 1776.51,1212.63 1777.1,1212.63 1777.68,1212.63 1778.27,1212.63 1778.86,1212.63 1779.44,1212.63 1780.03,1212.63 1780.61,1212.63 1781.2,1212.63 1781.79,1212.63 1782.37,1212.63 1782.96,1212.63 1783.55,1212.63 1784.13,1212.63 1784.72,1212.63 1785.31,1212.63 1785.89,1212.63 1786.48,1212.63 1787.06,1212.63 1787.65,1212.63 1788.24,1212.63 1788.82,1212.63 1789.41,1212.63 1790,1212.63 1790.58,1212.63 1791.17,1212.63 1791.76,1212.63 1792.34,1212.63 1792.93,1212.63 1793.52,1212.63 1794.1,1212.63 1794.69,1212.63 1795.27,1212.63 1795.86,1212.63 1796.45,1212.63 1797.03,1212.63 1797.62,1212.63 1798.21,1212.63 1798.79,1212.63 1799.38,1212.63 1799.97,1212.63 1800.55,1212.63 1801.14,1212.63 1801.73,1212.63 1802.31,1212.63 1802.9,1212.63 1803.48,1212.63 1804.07,1212.63 1804.66,1212.63 1805.24,1212.63 1805.83,1212.63 1806.42,1212.63 1807,1212.63 1807.59,1212.63 1808.18,1212.63 1808.76,1212.63 1809.35,1212.63 1809.94,1212.63 1810.52,1212.63 1811.11,1212.63 1811.69,1212.63 1812.28,1212.63 1812.87,1212.63 1813.45,1212.63 1814.04,1212.63 1814.63,1212.63 1815.21,1212.63 1815.8,1212.63 1816.39,1212.63 1816.97,1212.63 1817.56,1212.63 1818.14,1212.63 1818.73,1212.63 1819.32,1212.63 1819.9,1212.63 1820.49,1212.63 1821.08,1212.63 1821.66,1212.63 1822.25,1212.63 1822.84,1212.63 1823.42,1212.63 1824.01,1212.63 1824.6,1212.63 1825.18,1212.63 1825.77,1212.63 1826.35,1212.63 1826.94,1212.63 1827.53,1212.63 1828.11,1212.63 1828.7,1212.63 1829.29,1212.63 1829.87,1212.63 1830.46,1212.63 1831.05,1212.63 1831.63,1212.63 1832.22,1212.63 1832.81,1212.63 1833.39,1212.63 1833.98,1212.63 1834.56,1212.63 1835.15,1212.63 1835.74,1212.63 1836.32,1212.63 1836.91,1212.63 1837.5,1212.63 1838.08,1212.63 1838.67,1212.63 1839.26,1212.63 1839.84,1212.63 1840.43,1212.63 1841.01,1212.63 1841.6,1212.63 1842.19,1212.63 1842.77,1212.63 1843.36,1212.63 1843.95,1212.63 1844.53,1212.63 1845.12,1212.63 1845.71,1212.63 1846.29,1212.63 1846.88,1212.63 1847.47,1212.63 1848.05,1212.63 1848.64,1212.63 1849.22,1212.63 1849.81,1212.63 1850.4,1212.63 1850.98,1212.63 1851.57,1212.63 1852.16,1212.63 1852.74,1212.63 1853.33,1212.63 1853.92,1212.63 1854.5,1212.63 1855.09,1212.63 1855.68,1212.63 1856.26,1212.63 1856.85,1212.63 1857.43,1212.63 1858.02,1212.63 1858.61,1212.63 1859.19,1212.63 1859.78,1212.63 1860.37,1212.63 1860.95,1212.63 1861.54,1212.63 1862.13,1212.63 1862.71,1212.63 1863.3,1212.63 1863.88,1212.63 1864.47,1212.63 1865.06,1212.63 1865.64,1212.63 1866.23,1212.63 1866.82,1212.63 1867.4,1212.63 1867.99,1212.63 1868.58,1212.63 1869.16,1212.63 1869.75,1212.63 1870.34,1212.63 1870.92,1212.63 1871.51,1212.63 1872.09,1212.63 1872.68,1212.63 1873.27,1212.63 1873.85,1212.63 1874.44,1212.63 1875.03,1212.63 1875.61,1212.63 1876.2,1212.63 1876.79,1212.63 1877.37,1212.63 1877.96,1212.63 1878.55,1212.63 1879.13,1212.63 1879.72,1212.63 1880.3,1212.63 1880.89,1212.63 1881.48,1212.63 1882.06,1212.63 1882.65,1212.63 1883.24,1212.63 1883.82,1212.63 1884.41,1212.63 1885,1212.63 1885.58,1212.63 1886.17,1212.63 1886.76,1212.63 1887.34,1212.63 1887.93,1212.63 1888.51,1212.63 1889.1,1212.63 1889.69,1212.63 1890.27,1212.63 1890.86,1212.63 1891.45,1212.63 1892.03,1212.63 1892.62,1212.63 1893.21,1212.63 1893.79,1212.63 1894.38,1212.63 1894.96,1212.63 1895.55,1212.63 1896.14,1212.63 1896.72,1212.63 1897.31,1212.63 1897.9,1212.63 1898.48,1212.63 1899.07,1212.63 1899.66,1212.63 1900.24,1212.63 1900.83,1212.63 1901.42,1212.63 1902,1212.63 1902.59,1212.63 1903.17,1212.63 1903.76,1212.63 1904.35,1212.63 1904.93,1212.63 1905.52,1212.63 1906.11,1212.63 1906.69,1212.63 1907.28,1212.63 1907.87,1212.63 1908.45,1212.63 1909.04,1212.63 1909.63,1212.63 1910.21,1212.63 1910.8,1212.63 1911.38,1212.63 1911.97,1212.63 1912.56,1212.63 1913.14,1212.63 1913.73,1212.63 1914.32,1212.63 1914.9,1212.63 1915.49,1212.63 1916.08,1212.63 1916.66,1212.63 1917.25,1212.63 1917.83,1212.63 1918.42,1212.63 1919.01,1212.63 1919.59,1212.63 1920.18,1212.63 1920.77,1212.63 1921.35,1212.63 1921.94,1212.63 1922.53,1212.63 1923.11,1212.63 1923.7,1212.63 1924.29,1212.63 1924.87,1212.63 1925.46,1212.63 1926.04,1212.63 1926.63,1212.63 1927.22,1212.63 1927.8,1212.63 1928.39,1212.63 1928.98,1212.63 1929.56,1212.63 1930.15,1212.63 1930.74,1212.63 1931.32,1212.63 1931.91,1212.63 1932.5,1212.63 1933.08,1212.63 1933.67,1212.63 1934.25,1212.63 1934.84,1212.63 1935.43,1212.63 1936.01,1212.63 1936.6,1212.63 1937.19,1212.63 1937.77,1212.63 1938.36,1212.63 1938.95,1212.63 1939.53,1212.63 1940.12,1212.63 1940.71,1212.63 1941.29,1212.63 1941.88,1212.63 1942.46,1212.63 1943.05,1212.63 1943.64,1212.63 1944.22,1212.63 1944.81,1212.63 1945.4,1212.63 1945.98,1212.63 1946.57,1212.63 1947.16,1212.63 1947.74,1212.63 1948.33,1212.63 1948.91,1212.63 1949.5,1212.63 1950.09,1212.63 1950.67,1212.63 1951.26,1212.63 1951.85,1212.63 1952.43,1212.63 1953.02,1212.63 1953.61,1212.63 1954.19,1212.63 1954.78,1212.63 1955.37,1212.63 1955.95,1212.63 1956.54,1212.63 1957.12,1212.63 1957.71,1212.63 1958.3,1212.63 1958.88,1212.63 1959.47,1212.63 1960.06,1212.63 1960.64,1212.63 1961.23,1212.63 1961.82,1212.63 1962.4,1212.63 1962.99,1212.63 1963.58,1212.63 1964.16,1212.63 1964.75,1212.63 1965.33,1212.63 1965.92,1212.63 1966.51,1212.63 1967.09,1212.63 1967.68,1212.63 1968.27,1212.63 1968.85,1212.63 1969.44,1212.63 1970.03,1212.63 1970.61,1212.63 1971.2,1212.63 1971.78,1212.63 1972.37,1212.63 1972.96,1212.63 1973.54,1212.63 1974.13,1212.63 1974.72,1212.63 1975.3,1212.63 1975.89,1212.63 1976.48,1212.63 1977.06,1212.63 1977.65,1212.63 1978.24,1212.63 1978.82,1212.63 1979.41,1212.63 1979.99,1212.63 1980.58,1212.63 1981.17,1212.63 1981.75,1212.63 1982.34,1212.63 1982.93,1212.63 1983.51,1212.63 1984.1,1212.63 1984.69,1212.63 1985.27,1212.63 1985.86,1212.63 1986.45,1212.63 1987.03,1212.63 1987.62,1212.63 1988.2,1212.63 1988.79,1212.63 1989.38,1212.63 1989.96,1212.63 1990.55,1212.63 1991.14,1212.63 1991.72,1212.63 1992.31,1212.63 1992.9,1212.63 1993.48,1212.63 1994.07,1212.63 1994.65,1212.63 1995.24,1212.63 1995.83,1212.63 1996.41,1212.63 1997,1212.63 1997.59,1212.63 1998.17,1212.63 1998.76,1212.63 1999.35,1212.63 1999.93,1212.63 2000.52,1212.63 2001.11,1212.63 2001.69,1212.63 2002.28,1212.63 2002.86,1212.63 2003.45,1212.63 2004.04,1212.63 2004.62,1212.63 2005.21,1212.63 2005.8,1212.63 2006.38,1212.63 2006.97,1212.63 2007.56,1212.63 2008.14,1212.63 2008.73,1212.63 2009.32,1212.63 2009.9,1212.63 2010.49,1212.63 2011.07,1212.63 2011.66,1212.63 2012.25,1212.63 2012.83,1212.63 2013.42,1212.63 2014.01,1212.63 2014.59,1212.63 2015.18,1212.63 2015.77,1212.63 2016.35,1212.63 2016.94,1212.63 2017.53,1212.63 2018.11,1212.63 2018.7,1212.63 2019.28,1212.63 2019.87,1212.63 2020.46,1212.63 2021.04,1212.63 2021.63,1212.63 2022.22,1212.63 2022.8,1212.63 2023.39,1212.63 2023.98,1212.63 2024.56,1212.63 2025.15,1212.63 2025.73,1212.63 2026.32,1212.63 2026.91,1212.63 2027.49,1212.63 2028.08,1212.63 2028.67,1212.63 2029.25,1212.63 2029.84,1212.63 2030.43,1212.63 2031.01,1212.63 2031.6,1212.63 2032.19,1212.63 2032.77,1212.63 2033.36,1212.63 2033.94,1212.63 2034.53,1212.63 2035.12,1212.63 2035.7,1212.63 2036.29,1212.63 2036.88,1212.63 2037.46,1212.63 2038.05,1212.63 2038.64,1212.63 2039.22,1212.63 2039.81,1212.63 2040.4,1212.63 2040.98,1212.63 2041.57,1212.63 2042.15,1212.63 2042.74,1212.63 2043.33,1212.63 2043.91,1212.63 2044.5,1212.63 2045.09,1212.63 2045.67,1212.63 2046.26,1212.63 2046.85,1212.63 2047.43,1212.63 2048.02,1212.63 2048.6,1212.63 2049.19,1212.63 2049.78,1212.63 2050.36,1212.63 2050.95,1212.63 2051.54,1212.63 2052.12,1212.63 2052.71,1212.63 2053.3,1212.63 2053.88,1212.63 2054.47,1212.63 2055.06,1212.63 2055.64,1212.63 2056.23,1212.63 2056.81,1212.63 2057.4,1212.63 2057.99,1212.63 2058.57,1212.63 2059.16,1212.63 2059.75,1212.63 2060.33,1212.63 2060.92,1212.63 2061.51,1212.63 2062.09,1212.63 2062.68,1212.63 2063.27,1212.63 2063.85,1212.63 2064.44,1212.63 2065.02,1212.63 2065.61,1212.63 2066.2,1212.63 2066.78,1212.63 2067.37,1212.63 2067.96,1212.63 2068.54,1212.63 2069.13,1212.63 2069.72,1212.63 2070.3,1212.63 2070.89,1212.63 2071.48,1212.63 2072.06,1212.63 2072.65,1212.63 2073.23,1212.63 2073.82,1212.63 2074.41,1212.63 2074.99,1212.63 2075.58,1212.63 2076.17,1212.63 2076.75,1212.63 2077.34,1212.63 2077.93,1212.63 2078.51,1212.63 2079.1,1212.63 2079.68,1212.63 2080.27,1212.63 2080.86,1212.63 2081.44,1212.63 2082.03,1212.63 2082.62,1212.63 2083.2,1212.63 2083.79,1212.63 2084.38,1212.63 2084.96,1212.63 2085.55,1212.63 2086.14,1212.63 2086.72,1212.63 2087.31,1212.63 2087.89,1212.63 2088.48,1212.63 2089.07,1212.63 2089.65,1212.63 2090.24,1212.63 2090.83,1212.63 2091.41,1212.63 2092,1212.63 2092.59,1212.63 2093.17,1212.63 2093.76,1212.63 2094.35,1212.63 2094.93,1212.63 2095.52,1212.63 2096.1,1212.63 2096.69,1212.63 2097.28,1212.63 2097.86,1212.63 2098.45,1212.63 2099.04,1212.63 2099.62,1212.63 2100.21,1212.63 2100.8,1212.63 2101.38,1212.63 2101.97,1212.63 2102.55,1212.63 2103.14,1212.63 2103.73,1212.63 2104.31,1212.63 2104.9,1212.63 2105.49,1212.63 2106.07,1212.63 2106.66,1212.63 2107.25,1212.63 2107.83,1212.63 2108.42,1212.63 2109.01,1212.63 2109.59,1212.63 2110.18,1212.63 2110.76,1212.63 2111.35,1212.63 2111.94,1212.63 2112.52,1212.63 2113.11,1212.63 2113.7,1212.63 2114.28,1212.63 2114.87,1212.63 2115.46,1212.63 2116.04,1212.63 2116.63,1212.63 2117.22,1212.63 2117.8,1212.63 2118.39,1212.63 2118.97,1212.63 2119.56,1212.63 2120.15,1212.63 2120.73,1212.63 2121.32,1212.63 2121.91,1212.63 2122.49,1212.63 2123.08,1212.63 2123.67,1212.63 2124.25,1212.63 2124.84,1212.63 2125.42,1212.63 2126.01,1212.63 2126.6,1212.63 2127.18,1212.63 2127.77,1212.63 2128.36,1212.63 2128.94,1212.63 2129.53,1212.63 2130.12,1212.63 2130.7,1212.63 2131.29,1212.63 2131.88,1212.63 2132.46,1212.63 2133.05,1212.63 2133.63,1212.63 2134.22,1212.63 2134.81,1212.63 2135.39,1212.63 2135.98,1212.63 2136.57,1212.63 2137.15,1212.63 2137.74,1212.63 2138.33,1212.63 2138.91,1212.63 2139.5,1212.63 2140.09,1212.63 2140.67,1212.63 2141.26,1212.63 2141.84,1212.63 2142.43,1212.63 2143.02,1212.63 2143.6,1212.63 2144.19,1212.63 2144.78,1212.63 2145.36,1212.63 2145.95,1212.63 2146.54,1212.63 2147.12,1212.63 2147.71,1212.63 2148.3,1212.63 2148.88,1212.63 2149.47,1212.63 2150.05,1212.63 2150.64,1212.63 2151.23,1212.63 2151.81,1212.63 2152.4,1212.63 2152.99,1212.63 2153.57,1212.63 2154.16,1212.63 2154.75,1212.63 2155.33,1212.63 2155.92,1212.63 2156.5,1212.63 2157.09,1212.63 2157.68,1212.63 2158.26,1212.63 \"/>\n<path clip-path=\"url(#clip272)\" d=\"M986.025 1212.36 L986.612 1212.36 L987.198 1212.36 L987.785 1212.36 L988.371 1212.36 L988.957 1212.36 L989.544 1212.36 L990.13 1212.36 L990.717 1212.36 L991.303 1212.36 L991.889 1212.36 L992.476 1212.36 L993.062 1212.36 L993.649 1212.36 L994.235 1212.36 L994.822 1212.36 L995.408 1212.36 L995.994 1212.36 L996.581 1212.36 L997.167 1212.36 L997.754 1212.36 L998.34 1212.36 L998.926 1212.36 L999.513 1212.36 L1000.1 1212.36 L1000.69 1212.36 L1001.27 1212.36 L1001.86 1212.36 L1002.44 1212.36 L1003.03 1212.36 L1003.62 1212.36 L1004.2 1212.36 L1004.79 1212.36 L1005.38 1212.36 L1005.96 1212.36 L1006.55 1212.36 L1007.14 1212.36 L1007.72 1212.36 L1008.31 1212.36 L1008.9 1212.36 L1009.48 1212.36 L1010.07 1212.36 L1010.65 1212.36 L1011.24 1212.36 L1011.83 1212.36 L1012.41 1212.36 L1013 1212.36 L1013.59 1212.36 L1014.17 1212.36 L1014.76 1212.36 L1015.35 1212.36 L1015.93 1212.36 L1016.52 1212.36 L1017.11 1212.36 L1017.69 1212.36 L1018.28 1212.36 L1018.86 1212.36 L1019.45 1212.36 L1020.04 1212.36 L1020.62 1212.36 L1021.21 1212.36 L1021.8 1212.36 L1022.38 1212.36 L1022.97 1212.36 L1023.56 1212.36 L1024.14 1212.36 L1024.73 1212.36 L1025.32 1212.36 L1025.9 1212.36 L1026.49 1212.36 L1027.07 1212.36 L1027.66 1212.36 L1028.25 1212.36 L1028.83 1212.36 L1029.42 1212.36 L1030.01 1212.36 L1030.59 1212.36 L1031.18 1212.36 L1031.77 1212.36 L1032.35 1212.36 L1032.94 1212.36 L1033.52 1212.36 L1034.11 1212.36 L1034.7 1212.36 L1035.28 1212.36 L1035.87 1212.36 L1036.46 1212.36 L1037.04 1212.36 L1037.63 1212.36 L1038.22 1212.36 L1038.8 1212.36 L1039.39 1212.36 L1039.98 1212.36 L1040.56 1212.36 L1041.15 1212.36 L1041.73 1212.36 L1042.32 1212.36 L1042.91 1212.36 L1043.49 1212.36 L1044.08 1212.36 L1044.67 1212.36 L1045.25 1212.36 L1045.84 1212.36 L1046.43 1212.36 L1047.01 1212.36 L1047.6 1212.36 L1048.19 1212.36 L1048.77 1212.36 L1049.36 1212.36 L1049.94 1212.36 L1050.53 1212.36 L1051.12 1212.36 L1051.7 1212.36 L1052.29 1212.36 L1052.88 1212.36 L1053.46 1212.36 L1054.05 1212.36 L1054.64 1212.36 L1055.22 1212.36 L1055.81 1212.36 L1056.39 1212.36 L1056.98 1212.36 L1057.57 1212.36 L1058.15 1212.36 L1058.74 1212.36 L1059.33 1212.36 L1059.91 1212.36 L1060.5 1212.36 L1061.09 1212.36 L1061.67 1212.36 L1062.26 1212.36 L1062.85 1212.36 L1063.43 1212.36 L1064.02 1212.36 L1064.6 1212.36 L1065.19 1212.36 L1065.78 1212.36 L1066.36 1212.36 L1066.95 1212.36 L1067.54 1212.36 L1068.12 1212.36 L1068.71 1212.36 L1069.3 1212.36 L1069.88 1212.36 L1070.47 1212.36 L1071.06 1212.36 L1071.64 1212.36 L1072.23 1212.36 L1072.81 1212.36 L1073.4 1212.36 L1073.99 1212.36 L1074.57 1212.36 L1075.16 1212.36 L1075.75 1212.36 L1076.33 1212.36 L1076.92 1212.36 L1077.51 1212.36 L1078.09 1212.36 L1078.68 1212.36 L1079.26 1212.36 L1079.85 1212.36 L1080.44 1212.36 L1081.02 1212.36 L1081.61 1212.36 L1082.2 1212.36 L1082.78 1212.36 L1083.37 1212.36 L1083.96 1212.36 L1084.54 1212.36 L1085.13 1212.36 L1085.72 1212.36 L1086.3 1212.36 L1086.89 1212.36 L1087.47 1212.36 L1088.06 1212.36 L1088.65 1212.36 L1089.23 1212.36 L1089.82 1212.36 L1090.41 1212.36 L1090.99 1212.36 L1091.58 1212.36 L1092.17 1212.36 L1092.75 1212.36 L1093.34 1212.36 L1093.93 1212.36 L1094.51 1212.36 L1095.1 1212.36 L1095.68 1212.36 L1096.27 1212.36 L1096.86 1212.36 L1097.44 1212.36 L1098.03 1212.36 L1098.62 1212.36 L1099.2 1212.36 L1099.79 1212.36 L1100.38 1212.36 L1100.96 1212.36 L1101.55 1212.36 L1102.14 1212.36 L1102.72 1212.36 L1103.31 1212.36 L1103.89 1212.36 L1104.48 1212.36 L1105.07 1212.36 L1105.65 1212.36 L1106.24 1212.36 L1106.83 1212.36 L1107.41 1212.36 L1108 1212.36 L1108.59 1212.36 L1109.17 1212.36 L1109.76 1212.36 L1110.34 1212.36 L1110.93 1212.36 L1111.52 1212.36 L1112.1 1212.36 L1112.69 1212.36 L1113.28 1212.36 L1113.86 1212.36 L1114.45 1212.36 L1115.04 1212.36 L1115.62 1212.36 L1116.21 1212.36 L1116.8 1212.36 L1117.38 1212.36 L1117.97 1212.36 L1118.55 1212.36 L1119.14 1212.36 L1119.73 1212.36 L1120.31 1212.36 L1120.9 1212.36 L1121.49 1212.36 L1122.07 1212.36 L1122.66 1212.36 L1123.25 1212.36 L1123.83 1212.36 L1124.42 1212.36 L1125.01 1212.36 L1125.59 1212.36 L1126.18 1212.36 L1126.76 1212.36 L1127.35 1212.36 L1127.94 1212.36 L1128.52 1212.36 L1129.11 1212.36 L1129.7 1212.36 L1130.28 1212.36 L1130.87 1212.36 L1131.46 1212.36 L1132.04 1212.36 L1132.63 1212.36 L1133.21 1212.36 L1133.8 1212.36 L1134.39 1212.36 L1134.97 1212.36 L1135.56 1212.36 L1136.15 1212.36 L1136.73 1212.36 L1137.32 1212.36 L1137.91 1212.36 L1138.49 1212.36 L1139.08 1212.36 L1139.67 1212.36 L1140.25 1212.36 L1140.84 1212.36 L1141.42 1212.36 L1142.01 1212.36 L1142.6 1212.36 L1143.18 1212.36 L1143.77 1212.36 L1144.36 1212.36 L1144.94 1212.36 L1145.53 1212.36 L1146.12 1212.36 L1146.7 1212.36 L1147.29 1212.36 L1147.88 1212.36 L1148.46 1212.36 L1149.05 1212.36 L1149.63 1212.36 L1150.22 1212.36 L1150.81 1212.36 L1151.39 1212.36 L1151.98 1212.36 L1152.57 1212.36 L1153.15 1212.36 L1153.74 1212.36 L1154.33 1212.36 L1154.91 1212.36 L1155.5 1212.36 L1156.09 1212.36 L1156.67 1212.36 L1157.26 1212.36 L1157.84 1212.36 L1158.43 1212.36 L1159.02 1212.36 L1159.6 1212.36 L1160.19 1212.36 L1160.78 1212.36 L1161.36 1212.36 L1161.95 1212.36 L1162.54 1212.36 L1163.12 1212.36 L1163.71 1212.36 L1164.29 1212.36 L1164.88 1212.36 L1165.47 1212.36 L1166.05 1212.36 L1166.64 1212.36 L1167.23 1212.36 L1167.81 1212.36 L1168.4 1212.36 L1168.99 1212.36 L1169.57 1212.36 L1170.16 1212.36 L1170.75 1212.36 L1171.33 1212.36 L1171.92 1212.36 L1172.5 1212.36 L1173.09 1212.36 L1173.68 1212.36 L1174.26 1212.36 L1174.85 1212.36 L1175.44 1212.36 L1176.02 1212.36 L1176.61 1212.36 L1177.2 1212.36 L1177.78 1212.36 L1178.37 1212.36 L1178.96 1212.36 L1179.54 1212.36 L1180.13 1212.36 L1180.71 1212.36 L1181.3 1212.36 L1181.89 1212.36 L1182.47 1212.36 L1183.06 1212.36 L1183.65 1212.36 L1184.23 1212.36 L1184.82 1212.36 L1185.41 1212.36 L1185.99 1212.36 L1186.58 1212.36 L1187.16 1212.36 L1187.75 1212.36 L1188.34 1212.36 L1188.92 1212.36 L1189.51 1212.36 L1190.1 1212.36 L1190.68 1212.36 L1191.27 1212.36 L1191.86 1212.36 L1192.44 1212.36 L1193.03 1212.36 L1193.62 1212.36 L1194.2 1212.36 L1194.79 1212.36 L1195.37 1212.36 L1195.96 1212.36 L1196.55 1212.36 L1197.13 1212.36 L1197.72 1212.36 L1198.31 1212.36 L1198.89 1212.36 L1199.48 1212.36 L1200.07 1212.36 L1200.65 1212.36 L1201.24 1212.36 L1201.83 1212.36 L1202.41 1212.36 L1203 1212.36 L1203.58 1212.36 L1204.17 1212.36 L1204.76 1212.36 L1205.34 1212.36 L1205.93 1212.36 L1206.52 1212.36 L1207.1 1212.36 L1207.69 1212.36 L1208.28 1212.36 L1208.86 1212.36 L1209.45 1212.36 L1210.03 1212.36 L1210.62 1212.36 L1211.21 1212.36 L1211.79 1212.36 L1212.38 1212.36 L1212.97 1212.36 L1213.55 1212.36 L1214.14 1212.36 L1214.73 1212.36 L1215.31 1212.36 L1215.9 1212.36 L1216.49 1212.36 L1217.07 1212.36 L1217.66 1212.36 L1218.24 1212.36 L1218.83 1212.36 L1219.42 1212.36 L1220 1212.36 L1220.59 1212.36 L1221.18 1212.36 L1221.76 1212.36 L1222.35 1212.36 L1222.94 1212.36 L1223.52 1212.36 L1224.11 1212.36 L1224.7 1212.36 L1225.28 1212.36 L1225.87 1212.36 L1226.45 1212.36 L1227.04 1212.36 L1227.63 1212.36 L1228.21 1212.36 L1228.8 1212.36 L1229.39 1212.36 L1229.97 1212.36 L1230.56 1212.36 L1231.15 1212.36 L1231.73 1212.36 L1232.32 1212.36 L1232.91 1212.36 L1233.49 1212.36 L1234.08 1212.36 L1234.66 1212.36 L1235.25 1212.36 L1235.84 1212.36 L1236.42 1212.36 L1237.01 1212.36 L1237.6 1212.36 L1238.18 1212.36 L1238.77 1212.36 L1239.36 1212.36 L1239.94 1212.36 L1240.53 1212.36 L1241.11 1212.36 L1241.7 1212.36 L1242.29 1212.36 L1242.87 1212.36 L1243.46 1212.36 L1244.05 1212.36 L1244.63 1212.36 L1245.22 1212.36 L1245.81 1212.36 L1246.39 1212.36 L1246.98 1212.36 L1247.57 1212.36 L1248.15 1212.36 L1248.74 1212.36 L1249.32 1212.36 L1249.91 1212.36 L1250.5 1212.36 L1251.08 1212.36 L1251.67 1212.36 L1252.26 1212.36 L1252.84 1212.36 L1253.43 1212.36 L1254.02 1212.36 L1254.6 1212.36 L1255.19 1212.36 L1255.78 1212.36 L1256.36 1212.36 L1256.95 1212.36 L1257.53 1212.36 L1258.12 1212.36 L1258.71 1212.36 L1259.29 1212.36 L1259.88 1212.36 L1260.47 1212.36 L1261.05 1212.36 L1261.64 1212.36 L1262.23 1212.36 L1262.81 1212.36 L1263.4 1212.36 L1263.98 1212.36 L1264.57 1212.36 L1265.16 1212.36 L1265.74 1212.36 L1266.33 1212.36 L1266.92 1212.36 L1267.5 1212.36 L1268.09 1212.36 L1268.68 1212.36 L1269.26 1212.36 L1269.85 1212.36 L1270.44 1212.36 L1271.02 1212.36 L1271.61 1212.36 L1272.19 1212.36 L1272.78 1212.36 L1273.37 1212.36 L1273.95 1212.36 L1274.54 1212.36 L1275.13 1212.36 L1275.71 1212.36 L1276.3 1212.36 L1276.89 1212.36 L1277.47 1212.36 L1278.06 1212.36 L1278.65 1212.36 L1279.23 1212.36 L1279.82 1212.36 L1280.4 1212.36 L1280.99 1212.36 L1281.58 1212.36 L1282.16 1212.36 L1282.75 1212.36 L1283.34 1212.36 L1283.92 1212.36 L1284.51 1212.36 L1285.1 1212.36 L1285.68 1212.36 L1286.27 1212.36 L1286.86 1212.36 L1287.44 1212.36 L1288.03 1212.36 L1288.61 1212.36 L1289.2 1212.36 L1289.79 1212.36 L1290.37 1212.36 L1290.96 1212.36 L1291.55 1212.36 L1292.13 1212.36 L1292.72 1212.36 L1293.31 1212.36 L1293.89 1212.36 L1294.48 1212.36 L1295.06 1212.36 L1295.65 1212.36 L1296.24 1212.36 L1296.82 1212.36 L1297.41 1212.36 L1298 1212.36 L1298.58 1212.36 L1299.17 1212.36 L1299.76 1212.36 L1300.34 1212.36 L1300.93 1212.36 L1301.52 1212.36 L1302.1 1212.36 L1302.69 1212.36 L1303.27 1212.36 L1303.86 1212.36 L1304.45 1212.36 L1305.03 1212.36 L1305.62 1212.36 L1306.21 1212.36 L1306.79 1212.36 L1307.38 1212.36 L1307.97 1212.36 L1308.55 1212.36 L1309.14 1212.36 L1309.73 1212.36 L1310.31 1212.36 L1310.9 1212.36 L1311.48 1212.36 L1312.07 1212.36 L1312.66 1212.36 L1313.24 1212.36 L1313.83 1212.36 L1314.42 1212.36 L1315 1212.36 L1315.59 1212.36 L1316.18 1212.36 L1316.76 1212.36 L1317.35 1212.36 L1317.93 1212.36 L1318.52 1212.36 L1319.11 1212.36 L1319.69 1212.36 L1320.28 1212.36 L1320.87 1212.36 L1321.45 1212.36 L1322.04 1212.36 L1322.63 1212.36 L1323.21 1212.36 L1323.8 1212.36 L1324.39 1212.36 L1324.97 1212.36 L1325.56 1212.36 L1326.14 1212.36 L1326.73 1212.36 L1327.32 1212.36 L1327.9 1212.36 L1328.49 1212.36 L1329.08 1212.36 L1329.66 1212.36 L1330.25 1212.36 L1330.84 1212.36 L1331.42 1212.36 L1332.01 1212.36 L1332.6 1212.36 L1333.18 1212.36 L1333.77 1212.36 L1334.35 1212.36 L1334.94 1212.36 L1335.53 1212.36 L1336.11 1212.36 L1336.7 1212.36 L1337.29 1212.36 L1337.87 1212.36 L1338.46 1212.36 L1339.05 1212.36 L1339.63 1212.36 L1340.22 1212.36 L1340.8 1212.36 L1341.39 1212.36 L1341.98 1212.36 L1342.56 1212.36 L1343.15 1212.36 L1343.74 1212.36 L1344.32 1212.36 L1344.91 1212.36 L1345.5 1212.36 L1346.08 1212.36 L1346.67 1212.36 L1347.26 1212.36 L1347.84 1212.36 L1348.43 1212.36 L1349.01 1212.36 L1349.6 1212.36 L1350.19 1212.36 L1350.77 1212.36 L1351.36 1212.36 L1351.95 1212.36 L1352.53 1212.36 L1353.12 1212.36 L1353.71 1212.36 L1354.29 1212.36 L1354.88 1212.36 L1355.47 1212.36 L1356.05 1212.36 L1356.64 1212.36 L1357.22 1212.36 L1357.81 1212.36 L1358.4 1212.36 L1358.98 1212.36 L1359.57 1212.36 L1360.16 1212.36 L1360.74 1212.36 L1361.33 1212.36 L1361.92 1212.36 L1362.5 1212.36 L1363.09 1212.36 L1363.68 1212.36 L1364.26 1212.36 L1364.85 1212.36 L1365.43 1212.36 L1366.02 1212.36 L1366.61 1212.36 L1367.19 1212.36 L1367.78 1212.36 L1368.37 1212.36 L1368.95 1212.36 L1369.54 1212.36 L1370.13 1212.36 L1370.71 1212.36 L1371.3 1212.36 L1371.88 1212.36 L1372.47 1212.36 L1373.06 1212.36 L1373.64 1212.36 L1374.23 1212.36 L1374.82 1212.36 L1375.4 1212.36 L1375.99 1212.36 L1376.58 1212.36 L1377.16 1212.36 L1377.75 1212.36 L1378.34 1212.36 L1378.92 1212.36 L1379.51 1212.36 L1380.09 1212.36 L1380.68 1212.36 L1381.27 1212.36 L1381.85 1212.36 L1382.44 1212.36 L1383.03 1212.36 L1383.61 1212.36 L1384.2 1212.36 L1384.79 1212.36 L1385.37 1212.36 L1385.96 1212.36 L1386.55 1212.36 L1387.13 1212.36 L1387.72 1212.36 L1388.3 1212.36 L1388.89 1212.36 L1389.48 1212.36 L1390.06 1212.36 L1390.65 1212.36 L1391.24 1212.36 L1391.82 1212.36 L1392.41 1212.36 L1393 1212.36 L1393.58 1212.36 L1394.17 1212.36 L1394.75 1212.36 L1395.34 1212.36 L1395.93 1212.36 L1396.51 1212.36 L1397.1 1212.36 L1397.69 1212.36 L1398.27 1212.36 L1398.86 1212.36 L1399.45 1212.36 L1400.03 1212.36 L1400.62 1212.36 L1401.21 1212.36 L1401.79 1212.36 L1402.38 1212.36 L1402.96 1212.36 L1403.55 1212.36 L1404.14 1212.36 L1404.72 1212.36 L1405.31 1212.36 L1405.9 1212.36 L1406.48 1212.36 L1407.07 1212.36 L1407.66 1212.36 L1408.24 1212.36 L1408.83 1212.36 L1409.42 1212.36 L1410 1212.36 L1410.59 1212.36 L1411.17 1212.36 L1411.76 1212.36 L1412.35 1212.36 L1412.93 1212.36 L1413.52 1212.36 L1414.11 1212.36 L1414.69 1212.36 L1415.28 1212.36 L1415.87 1212.36 L1416.45 1212.36 L1417.04 1212.36 L1417.63 1212.36 L1418.21 1212.36 L1418.8 1212.36 L1419.38 1212.36 L1419.97 1212.36 L1420.56 1212.36 L1421.14 1212.36 L1421.73 1212.36 L1422.32 1212.36 L1422.9 1212.36 L1423.49 1212.36 L1424.08 1212.36 L1424.66 1212.36 L1425.25 1212.36 L1425.83 1212.36 L1426.42 1212.36 L1427.01 1212.36 L1427.59 1212.36 L1428.18 1212.36 L1428.77 1212.36 L1429.35 1212.36 L1429.94 1212.36 L1430.53 1212.36 L1431.11 1212.36 L1431.7 1212.36 L1432.29 1212.36 L1432.87 1212.36 L1433.46 1212.36 L1434.04 1212.36 L1434.63 1212.36 L1435.22 1212.36 L1435.8 1212.36 L1436.39 1212.36 L1436.98 1212.36 L1437.56 1212.36 L1438.15 1212.36 L1438.74 1212.36 L1439.32 1212.36 L1439.91 1212.36 L1440.5 1212.36 L1441.08 1212.36 L1441.67 1212.36 L1442.25 1212.36 L1442.84 1212.36 L1443.43 1212.36 L1444.01 1212.36 L1444.6 1212.36 L1445.19 1212.36 L1445.77 1212.36 L1446.36 1212.36 L1446.95 1212.36 L1447.53 1212.36 L1448.12 1212.36 L1448.7 1212.36 L1449.29 1212.36 L1449.88 1212.36 L1450.46 1212.36 L1451.05 1212.36 L1451.64 1212.36 L1452.22 1212.36 L1452.81 1212.36 L1453.4 1212.36 L1453.98 1212.36 L1454.57 1212.36 L1455.16 1212.36 L1455.74 1212.36 L1456.33 1212.36 L1456.91 1212.36 L1457.5 1212.36 L1458.09 1212.36 L1458.67 1212.36 L1459.26 1212.36 L1459.85 1212.36 L1460.43 1212.36 L1461.02 1212.36 L1461.61 1212.36 L1462.19 1212.36 L1462.78 1212.36 L1463.37 1212.36 L1463.95 1212.36 L1464.54 1212.36 L1465.12 1212.36 L1465.71 1212.36 L1466.3 1212.36 L1466.88 1212.36 L1467.47 1212.36 L1468.06 1212.36 L1468.64 1212.36 L1469.23 1212.36 L1469.82 1212.36 L1470.4 1212.36 L1470.99 1212.36 L1471.57 1212.36 L1472.16 1212.36 L1472.75 1212.36 L1473.33 1212.36 L1473.92 1212.36 L1474.51 1212.36 L1475.09 1212.36 L1475.68 1212.36 L1476.27 1212.36 L1476.85 1212.36 L1477.44 1212.36 L1478.03 1212.36 L1478.61 1212.36 L1479.2 1212.36 L1479.78 1212.36 L1480.37 1212.36 L1480.96 1212.36 L1481.54 1212.36 L1482.13 1212.36 L1482.72 1212.36 L1483.3 1212.36 L1483.89 1212.36 L1484.48 1212.36 L1485.06 1212.36 L1485.65 1212.36 L1486.24 1212.36 L1486.82 1212.36 L1487.41 1212.36 L1487.99 1212.36 L1488.58 1212.36 L1489.17 1212.36 L1489.75 1212.36 L1490.34 1212.36 L1490.93 1212.36 L1491.51 1212.36 L1492.1 1212.36 L1492.69 1212.36 L1493.27 1212.36 L1493.86 1212.36 L1494.45 1212.36 L1495.03 1212.36 L1495.62 1212.36 L1496.2 1212.36 L1496.79 1212.36 L1497.38 1212.36 L1497.96 1212.36 L1498.55 1212.36 L1499.14 1212.36 L1499.72 1212.36 L1500.31 1212.36 L1500.9 1212.36 L1501.48 1212.36 L1502.07 1212.36 L1502.65 1212.36 L1503.24 1212.36 L1503.83 1212.36 L1504.41 1212.36 L1505 1212.36 L1505.59 1212.36 L1506.17 1212.36 L1506.76 1212.36 L1507.35 1212.36 L1507.93 1212.36 L1508.52 1212.36 L1509.11 1212.36 L1509.69 1212.36 L1510.28 1212.36 L1510.86 1212.36 L1511.45 1212.36 L1512.04 1212.36 L1512.62 1212.36 L1513.21 1212.36 L1513.8 1212.36 L1514.38 1212.36 L1514.97 1212.36 L1515.56 1212.36 L1516.14 1212.36 L1516.73 1212.36 L1517.32 1212.36 L1517.9 1212.36 L1518.49 1212.36 L1519.07 1212.36 L1519.66 1212.36 L1520.25 1212.36 L1520.83 1212.36 L1521.42 1212.36 L1522.01 1212.36 L1522.59 1212.36 L1523.18 1212.36 L1523.77 1212.36 L1524.35 1212.36 L1524.94 1212.36 L1525.52 1212.36 L1526.11 1212.36 L1526.7 1212.36 L1527.28 1212.36 L1527.87 1212.36 L1528.46 1212.36 L1529.04 1212.36 L1529.63 1212.36 L1530.22 1212.36 L1530.8 1212.36 L1531.39 1212.36 L1531.98 1212.36 L1532.56 1212.36 L1533.15 1212.36 L1533.73 1212.36 L1534.32 1212.36 L1534.91 1212.36 L1535.49 1212.36 L1536.08 1212.36 L1536.67 1212.36 L1537.25 1212.36 L1537.84 1212.36 L1538.43 1212.36 L1539.01 1212.36 L1539.6 1212.36 L1540.19 1212.36 L1540.77 1212.36 L1541.36 1212.36 L1541.94 1212.36 L1542.53 1212.36 L1543.12 1212.36 L1543.7 1212.36 L1544.29 1212.36 L1544.88 1212.36 L1545.46 1212.36 L1546.05 1212.36 L1546.64 1212.36 L1547.22 1212.36 L1547.81 1212.36 L1548.4 1212.36 L1548.98 1212.36 L1549.57 1212.36 L1550.15 1212.36 L1550.74 1212.36 L1551.33 1212.36 L1551.91 1212.36 L1552.5 1212.36 L1553.09 1212.36 L1553.67 1212.36 L1554.26 1212.36 L1554.85 1212.36 L1555.43 1212.36 L1556.02 1212.36 L1556.6 1212.36 L1557.19 1212.36 L1557.78 1212.36 L1558.36 1212.36 L1558.95 1212.36 L1559.54 1212.36 L1560.12 1212.36 L1560.71 1212.36 L1561.3 1212.36 L1561.88 1212.36 L1562.47 1212.36 L1563.06 1212.36 L1563.64 1212.36 L1564.23 1212.36 L1564.81 1212.36 L1565.4 1212.36 L1565.99 1212.36 L1566.57 1212.36 L1567.16 1212.36 L1567.75 1212.36 L1568.33 1212.36 L1568.92 1212.36 L1569.51 1212.36 L1570.09 1212.36 L1570.68 1212.36 L1571.27 1212.36 L1571.85 1212.36 L1572.44 1212.36 L1573.02 1212.36 L1573.61 1212.36 L1574.2 1212.36 L1574.78 1212.36 L1575.37 1212.36 L1575.96 1212.36 L1576.54 1212.36 L1577.13 1212.36 L1577.72 1212.36 L1578.3 1212.36 L1578.89 1212.36 L1579.47 1212.36 L1580.06 1212.36 L1580.65 1212.36 L1581.23 1212.36 L1581.82 1212.36 L1582.41 1212.36 L1582.99 1212.36 L1583.58 1212.36 L1584.17 1212.36 L1584.75 1212.36 L1585.34 1212.36 L1585.93 1212.36 L1586.51 1212.36 L1587.1 1212.36 L1587.68 1212.36 L1588.27 1212.36 L1588.86 1212.36 L1589.44 1212.36 L1590.03 1212.36 L1590.62 1212.36 L1591.2 1212.36 L1591.79 1212.36 L1592.38 1212.36 L1592.96 1212.36 L1593.55 1212.36 L1594.14 1212.36 L1594.72 1212.36 L1595.31 1212.36 L1595.89 1212.36 L1596.48 1212.36 L1597.07 1212.36 L1597.65 1212.36 L1598.24 1212.36 L1598.83 1212.36 L1599.41 1212.36 L1600 1212.36 L1600.59 1212.36 L1601.17 1212.36 L1601.76 1212.36 L1602.34 1212.36 L1602.93 1212.36 L1603.52 1212.36 L1604.1 1212.36 L1604.69 1212.36 L1605.28 1212.36 L1605.86 1212.36 L1606.45 1212.36 L1607.04 1212.36 L1607.62 1212.36 L1608.21 1212.36 L1608.8 1212.36 L1609.38 1212.36 L1609.97 1212.36 L1610.55 1212.36 L1611.14 1212.36 L1611.73 1212.36 L1612.31 1212.36 L1612.9 1212.36 L1613.49 1212.36 L1614.07 1212.36 L1614.66 1212.36 L1615.25 1212.36 L1615.83 1212.36 L1616.42 1212.36 L1617.01 1212.36 L1617.59 1212.36 L1618.18 1212.36 L1618.76 1212.36 L1619.35 1212.36 L1619.94 1212.36 L1620.52 1212.36 L1621.11 1212.36 L1621.7 1212.36 L1622.28 1212.36 L1622.87 1212.36 L1623.46 1212.36 L1624.04 1212.36 L1624.63 1212.36 L1625.22 1212.36 L1625.8 1212.36 L1626.39 1212.36 L1626.97 1212.36 L1627.56 1212.36 L1628.15 1212.36 L1628.73 1212.36 L1629.32 1212.36 L1629.91 1212.36 L1630.49 1212.36 L1631.08 1212.36 L1631.67 1212.36 L1632.25 1212.36 L1632.84 1212.36 L1633.42 1212.36 L1634.01 1212.36 L1634.6 1212.36 L1635.18 1212.36 L1635.77 1212.36 L1636.36 1212.36 L1636.94 1212.36 L1637.53 1212.36 L1638.12 1212.36 L1638.7 1212.36 L1639.29 1212.36 L1639.88 1212.36 L1640.46 1212.36 L1641.05 1212.36 L1641.63 1212.36 L1642.22 1212.36 L1642.81 1212.36 L1643.39 1212.36 L1643.98 1212.36 L1644.57 1212.36 L1645.15 1212.36 L1645.74 1212.36 L1646.33 1212.36 L1646.91 1212.36 L1647.5 1212.36 L1648.09 1212.36 L1648.67 1212.36 L1649.26 1212.36 L1649.84 1212.36 L1650.43 1212.36 L1651.02 1212.36 L1651.6 1212.36 L1652.19 1212.36 L1652.78 1212.36 L1653.36 1212.36 L1653.95 1212.36 L1654.54 1212.36 L1655.12 1212.36 L1655.71 1212.36 L1656.29 1212.36 L1656.88 1212.36 L1657.47 1212.36 L1658.05 1212.36 L1658.64 1212.36 L1659.23 1212.36 L1659.81 1212.36 L1660.4 1212.36 L1660.99 1212.36 L1661.57 1212.36 L1662.16 1212.36 L1662.75 1212.36 L1663.33 1212.36 L1663.92 1212.36 L1664.5 1212.36 L1665.09 1212.36 L1665.68 1212.36 L1666.26 1212.36 L1666.85 1212.36 L1667.44 1212.36 L1668.02 1212.36 L1668.61 1212.36 L1669.2 1212.36 L1669.78 1212.36 L1670.37 1212.36 L1670.96 1212.36 L1671.54 1212.36 L1672.13 1212.36 L1672.71 1212.36 L1673.3 1212.36 L1673.89 1212.36 L1674.47 1212.36 L1675.06 1212.36 L1675.65 1212.36 L1676.23 1212.36 L1676.82 1212.36 L1677.41 1212.36 L1677.99 1212.36 L1678.58 1212.36 L1679.17 1212.36 L1679.75 1212.36 L1680.34 1212.36 L1680.92 1212.36 L1681.51 1212.36 L1682.1 1212.36 L1682.68 1212.36 L1683.27 1212.36 L1683.86 1212.36 L1684.44 1212.36 L1685.03 1212.36 L1685.62 1212.36 L1686.2 1212.36 L1686.79 1212.36 L1687.37 1212.36 L1687.96 1212.36 L1688.55 1212.36 L1689.13 1212.36 L1689.72 1212.36 L1690.31 1212.36 L1690.89 1212.36 L1691.48 1212.36 L1692.07 1212.36 L1692.65 1212.36 L1693.24 1212.36 L1693.83 1212.36 L1694.41 1212.36 L1695 1212.36 L1695.58 1212.36 L1696.17 1212.36 L1696.76 1212.36 L1697.34 1212.36 L1697.93 1212.36 L1698.52 1212.36 L1699.1 1212.36 L1699.69 1212.36 L1700.28 1212.36 L1700.86 1212.36 L1701.45 1212.36 L1702.04 1212.36 L1702.62 1212.36 L1703.21 1212.36 L1703.79 1212.36 L1704.38 1212.36 L1704.97 1212.36 L1705.55 1212.36 L1706.14 1212.36 L1706.73 1212.36 L1707.31 1212.36 L1707.9 1212.36 L1708.49 1212.36 L1709.07 1212.36 L1709.66 1212.36 L1710.24 1212.36 L1710.83 1212.36 L1711.42 1212.36 L1712 1212.36 L1712.59 1212.36 L1713.18 1212.36 L1713.76 1212.36 L1714.35 1212.36 L1714.94 1212.36 L1715.52 1212.36 L1716.11 1212.36 L1716.7 1212.36 L1717.28 1212.36 L1717.87 1212.36 L1718.45 1212.36 L1719.04 1212.36 L1719.63 1212.36 L1720.21 1212.36 L1720.8 1212.36 L1721.39 1212.36 L1721.97 1212.36 L1722.56 1212.36 L1723.15 1212.36 L1723.73 1212.36 L1724.32 1212.36 L1724.91 1212.36 L1725.49 1212.36 L1726.08 1212.36 L1726.66 1212.36 L1727.25 1212.36 L1727.84 1212.36 L1728.42 1212.36 L1729.01 1212.36 L1729.6 1212.36 L1730.18 1212.36 L1730.77 1212.36 L1731.36 1212.36 L1731.94 1212.36 L1732.53 1212.36 L1733.11 1212.36 L1733.7 1212.36 L1734.29 1212.36 L1734.87 1212.36 L1735.46 1212.36 L1736.05 1212.36 L1736.63 1212.36 L1737.22 1212.36 L1737.81 1212.36 L1738.39 1212.36 L1738.98 1212.36 L1739.57 1212.36 L1740.15 1212.36 L1740.74 1212.36 L1741.32 1212.36 L1741.91 1212.36 L1742.5 1212.36 L1743.08 1212.36 L1743.67 1212.36 L1744.26 1212.36 L1744.84 1212.36 L1745.43 1212.36 L1746.02 1212.36 L1746.6 1212.36 L1747.19 1212.36 L1747.78 1212.36 L1748.36 1212.36 L1748.95 1212.36 L1749.53 1212.36 L1750.12 1212.36 L1750.71 1212.36 L1751.29 1212.36 L1751.88 1212.36 L1752.47 1212.36 L1753.05 1212.36 L1753.64 1212.36 L1754.23 1212.36 L1754.81 1212.36 L1755.4 1212.36 L1755.99 1212.36 L1756.57 1212.36 L1757.16 1212.36 L1757.74 1212.36 L1758.33 1212.36 L1758.92 1212.36 L1759.5 1212.36 L1760.09 1212.36 L1760.68 1212.36 L1761.26 1212.36 L1761.85 1212.36 L1762.44 1212.36 L1763.02 1212.36 L1763.61 1212.36 L1764.19 1212.36 L1764.78 1212.36 L1765.37 1212.36 L1765.95 1212.36 L1766.54 1212.36 L1767.13 1212.36 L1767.71 1212.36 L1768.3 1212.36 L1768.89 1212.36 L1769.47 1212.36 L1770.06 1212.36 L1770.65 1212.36 L1771.23 1212.36 L1771.82 1212.36 L1772.4 1212.36 L1772.99 1212.36 L1773.58 1212.36 L1774.16 1212.36 L1774.75 1212.36 L1775.34 1212.36 L1775.92 1212.36 L1776.51 1212.36 L1777.1 1212.36 L1777.68 1212.36 L1778.27 1212.36 L1778.86 1212.36 L1779.44 1212.36 L1780.03 1212.36 L1780.61 1212.36 L1781.2 1212.36 L1781.79 1212.36 L1782.37 1212.36 L1782.96 1212.36 L1783.55 1212.36 L1784.13 1212.36 L1784.72 1212.36 L1785.31 1212.36 L1785.89 1212.36 L1786.48 1212.36 L1787.06 1212.36 L1787.65 1212.36 L1788.24 1212.36 L1788.82 1212.36 L1789.41 1212.36 L1790 1212.36 L1790.58 1212.36 L1791.17 1212.36 L1791.76 1212.36 L1792.34 1212.36 L1792.93 1212.36 L1793.52 1212.36 L1794.1 1212.36 L1794.69 1212.36 L1795.27 1212.36 L1795.86 1212.36 L1796.45 1212.36 L1797.03 1212.36 L1797.62 1212.36 L1798.21 1212.36 L1798.79 1212.36 L1799.38 1212.36 L1799.97 1212.36 L1800.55 1212.36 L1801.14 1212.36 L1801.73 1212.36 L1802.31 1212.36 L1802.9 1212.36 L1803.48 1212.36 L1804.07 1212.36 L1804.66 1212.36 L1805.24 1212.36 L1805.83 1212.36 L1806.42 1212.36 L1807 1212.36 L1807.59 1212.36 L1808.18 1212.36 L1808.76 1212.36 L1809.35 1212.36 L1809.94 1212.36 L1810.52 1212.36 L1811.11 1212.36 L1811.69 1212.36 L1812.28 1212.36 L1812.87 1212.36 L1813.45 1212.36 L1814.04 1212.36 L1814.63 1212.36 L1815.21 1212.36 L1815.8 1212.36 L1816.39 1212.36 L1816.97 1212.36 L1817.56 1212.36 L1818.14 1212.36 L1818.73 1212.36 L1819.32 1212.36 L1819.9 1212.36 L1820.49 1212.36 L1821.08 1212.36 L1821.66 1212.36 L1822.25 1212.36 L1822.84 1212.36 L1823.42 1212.36 L1824.01 1212.36 L1824.6 1212.36 L1825.18 1212.36 L1825.77 1212.36 L1826.35 1212.36 L1826.94 1212.36 L1827.53 1212.36 L1828.11 1212.36 L1828.7 1212.36 L1829.29 1212.36 L1829.87 1212.36 L1830.46 1212.36 L1831.05 1212.36 L1831.63 1212.36 L1832.22 1212.36 L1832.81 1212.36 L1833.39 1212.36 L1833.98 1212.36 L1834.56 1212.36 L1835.15 1212.36 L1835.74 1212.36 L1836.32 1212.36 L1836.91 1212.36 L1837.5 1212.36 L1838.08 1212.36 L1838.67 1212.36 L1839.26 1212.36 L1839.84 1212.36 L1840.43 1212.36 L1841.01 1212.36 L1841.6 1212.36 L1842.19 1212.36 L1842.77 1212.36 L1843.36 1212.36 L1843.95 1212.36 L1844.53 1212.36 L1845.12 1212.36 L1845.71 1212.36 L1846.29 1212.36 L1846.88 1212.36 L1847.47 1212.36 L1848.05 1212.36 L1848.64 1212.36 L1849.22 1212.36 L1849.81 1212.36 L1850.4 1212.36 L1850.98 1212.36 L1851.57 1212.36 L1852.16 1212.36 L1852.74 1212.36 L1853.33 1212.36 L1853.92 1212.36 L1854.5 1212.36 L1855.09 1212.36 L1855.68 1212.36 L1856.26 1212.36 L1856.85 1212.36 L1857.43 1212.36 L1858.02 1212.36 L1858.61 1212.36 L1859.19 1212.36 L1859.78 1212.36 L1860.37 1212.36 L1860.95 1212.36 L1861.54 1212.36 L1862.13 1212.36 L1862.71 1212.36 L1863.3 1212.36 L1863.88 1212.36 L1864.47 1212.36 L1865.06 1212.36 L1865.64 1212.36 L1866.23 1212.36 L1866.82 1212.36 L1867.4 1212.36 L1867.99 1212.36 L1868.58 1212.36 L1869.16 1212.36 L1869.75 1212.36 L1870.34 1212.36 L1870.92 1212.36 L1871.51 1212.36 L1872.09 1212.36 L1872.68 1212.36 L1873.27 1212.36 L1873.85 1212.36 L1874.44 1212.36 L1875.03 1212.36 L1875.61 1212.36 L1876.2 1212.36 L1876.79 1212.36 L1877.37 1212.36 L1877.96 1212.36 L1878.55 1212.36 L1879.13 1212.36 L1879.72 1212.36 L1880.3 1212.36 L1880.89 1212.36 L1881.48 1212.36 L1882.06 1212.36 L1882.65 1212.36 L1883.24 1212.36 L1883.82 1212.36 L1884.41 1212.36 L1885 1212.36 L1885.58 1212.36 L1886.17 1212.36 L1886.76 1212.36 L1887.34 1212.36 L1887.93 1212.36 L1888.51 1212.36 L1889.1 1212.36 L1889.69 1212.36 L1890.27 1212.36 L1890.86 1212.36 L1891.45 1212.36 L1892.03 1212.36 L1892.62 1212.36 L1893.21 1212.36 L1893.79 1212.36 L1894.38 1212.36 L1894.96 1212.36 L1895.55 1212.36 L1896.14 1212.36 L1896.72 1212.36 L1897.31 1212.36 L1897.9 1212.36 L1898.48 1212.36 L1899.07 1212.36 L1899.66 1212.36 L1900.24 1212.36 L1900.83 1212.36 L1901.42 1212.36 L1902 1212.36 L1902.59 1212.36 L1903.17 1212.36 L1903.76 1212.36 L1904.35 1212.36 L1904.93 1212.36 L1905.52 1212.36 L1906.11 1212.36 L1906.69 1212.36 L1907.28 1212.36 L1907.87 1212.36 L1908.45 1212.36 L1909.04 1212.36 L1909.63 1212.36 L1910.21 1212.36 L1910.8 1212.36 L1911.38 1212.36 L1911.97 1212.36 L1912.56 1212.36 L1913.14 1212.36 L1913.73 1212.36 L1914.32 1212.36 L1914.9 1212.36 L1915.49 1212.36 L1916.08 1212.36 L1916.66 1212.36 L1917.25 1212.36 L1917.83 1212.36 L1918.42 1212.36 L1919.01 1212.36 L1919.59 1212.36 L1920.18 1212.36 L1920.77 1212.36 L1921.35 1212.36 L1921.94 1212.36 L1922.53 1212.36 L1923.11 1212.36 L1923.7 1212.36 L1924.29 1212.36 L1924.87 1212.36 L1925.46 1212.36 L1926.04 1212.36 L1926.63 1212.36 L1927.22 1212.36 L1927.8 1212.36 L1928.39 1212.36 L1928.98 1212.36 L1929.56 1212.36 L1930.15 1212.36 L1930.74 1212.36 L1931.32 1212.36 L1931.91 1212.36 L1932.5 1212.36 L1933.08 1212.36 L1933.67 1212.36 L1934.25 1212.36 L1934.84 1212.36 L1935.43 1212.36 L1936.01 1212.36 L1936.6 1212.36 L1937.19 1212.36 L1937.77 1212.36 L1938.36 1212.36 L1938.95 1212.36 L1939.53 1212.36 L1940.12 1212.36 L1940.71 1212.36 L1941.29 1212.36 L1941.88 1212.36 L1942.46 1212.36 L1943.05 1212.36 L1943.64 1212.36 L1944.22 1212.36 L1944.81 1212.36 L1945.4 1212.36 L1945.98 1212.36 L1946.57 1212.36 L1947.16 1212.36 L1947.74 1212.36 L1948.33 1212.36 L1948.91 1212.36 L1949.5 1212.36 L1950.09 1212.36 L1950.67 1212.36 L1951.26 1212.36 L1951.85 1212.36 L1952.43 1212.36 L1953.02 1212.36 L1953.61 1212.36 L1954.19 1212.36 L1954.78 1212.36 L1955.37 1212.36 L1955.95 1212.36 L1956.54 1212.36 L1957.12 1212.36 L1957.71 1212.36 L1958.3 1212.36 L1958.88 1212.36 L1959.47 1212.36 L1960.06 1212.36 L1960.64 1212.36 L1961.23 1212.36 L1961.82 1212.36 L1962.4 1212.36 L1962.99 1212.36 L1963.58 1212.36 L1964.16 1212.36 L1964.75 1212.36 L1965.33 1212.36 L1965.92 1212.36 L1966.51 1212.36 L1967.09 1212.36 L1967.68 1212.36 L1968.27 1212.36 L1968.85 1212.36 L1969.44 1212.36 L1970.03 1212.36 L1970.61 1212.36 L1971.2 1212.36 L1971.78 1212.36 L1972.37 1212.36 L1972.96 1212.36 L1973.54 1212.36 L1974.13 1212.36 L1974.72 1212.36 L1975.3 1212.36 L1975.89 1212.36 L1976.48 1212.36 L1977.06 1212.36 L1977.65 1212.36 L1978.24 1212.36 L1978.82 1212.36 L1979.41 1212.36 L1979.99 1212.36 L1980.58 1212.36 L1981.17 1212.36 L1981.75 1212.36 L1982.34 1212.36 L1982.93 1212.36 L1983.51 1212.36 L1984.1 1212.36 L1984.69 1212.36 L1985.27 1212.36 L1985.86 1212.36 L1986.45 1212.36 L1987.03 1212.36 L1987.62 1212.36 L1988.2 1212.36 L1988.79 1212.36 L1989.38 1212.36 L1989.96 1212.36 L1990.55 1212.36 L1991.14 1212.36 L1991.72 1212.36 L1992.31 1212.36 L1992.9 1212.36 L1993.48 1212.36 L1994.07 1212.36 L1994.65 1212.36 L1995.24 1212.36 L1995.83 1212.36 L1996.41 1212.36 L1997 1212.36 L1997.59 1212.36 L1998.17 1212.36 L1998.76 1212.36 L1999.35 1212.36 L1999.93 1212.36 L2000.52 1212.36 L2001.11 1212.36 L2001.69 1212.36 L2002.28 1212.36 L2002.86 1212.36 L2003.45 1212.36 L2004.04 1212.36 L2004.62 1212.36 L2005.21 1212.36 L2005.8 1212.36 L2006.38 1212.36 L2006.97 1212.36 L2007.56 1212.36 L2008.14 1212.36 L2008.73 1212.36 L2009.32 1212.36 L2009.9 1212.36 L2010.49 1212.36 L2011.07 1212.36 L2011.66 1212.36 L2012.25 1212.36 L2012.83 1212.36 L2013.42 1212.36 L2014.01 1212.36 L2014.59 1212.36 L2015.18 1212.36 L2015.77 1212.36 L2016.35 1212.36 L2016.94 1212.36 L2017.53 1212.36 L2018.11 1212.36 L2018.7 1212.36 L2019.28 1212.36 L2019.87 1212.36 L2020.46 1212.36 L2021.04 1212.36 L2021.63 1212.36 L2022.22 1212.36 L2022.8 1212.36 L2023.39 1212.36 L2023.98 1212.36 L2024.56 1212.36 L2025.15 1212.36 L2025.73 1212.36 L2026.32 1212.36 L2026.91 1212.36 L2027.49 1212.36 L2028.08 1212.36 L2028.67 1212.36 L2029.25 1212.36 L2029.84 1212.36 L2030.43 1212.36 L2031.01 1212.36 L2031.6 1212.36 L2032.19 1212.36 L2032.77 1212.36 L2033.36 1212.36 L2033.94 1212.36 L2034.53 1212.36 L2035.12 1212.36 L2035.7 1212.36 L2036.29 1212.36 L2036.88 1212.36 L2037.46 1212.36 L2038.05 1212.36 L2038.64 1212.36 L2039.22 1212.36 L2039.81 1212.36 L2040.4 1212.36 L2040.98 1212.36 L2041.57 1212.36 L2042.15 1212.36 L2042.74 1212.36 L2043.33 1212.36 L2043.91 1212.36 L2044.5 1212.36 L2045.09 1212.36 L2045.67 1212.36 L2046.26 1212.36 L2046.85 1212.36 L2047.43 1212.36 L2048.02 1212.36 L2048.6 1212.36 L2049.19 1212.36 L2049.78 1212.36 L2050.36 1212.36 L2050.95 1212.36 L2051.54 1212.36 L2052.12 1212.36 L2052.71 1212.36 L2053.3 1212.36 L2053.88 1212.36 L2054.47 1212.36 L2055.06 1212.36 L2055.64 1212.36 L2056.23 1212.36 L2056.81 1212.36 L2057.4 1212.36 L2057.99 1212.36 L2058.57 1212.36 L2059.16 1212.36 L2059.75 1212.36 L2060.33 1212.36 L2060.92 1212.36 L2061.51 1212.36 L2062.09 1212.36 L2062.68 1212.36 L2063.27 1212.36 L2063.85 1212.36 L2064.44 1212.36 L2065.02 1212.36 L2065.61 1212.36 L2066.2 1212.36 L2066.78 1212.36 L2067.37 1212.36 L2067.96 1212.36 L2068.54 1212.36 L2069.13 1212.36 L2069.72 1212.36 L2070.3 1212.36 L2070.89 1212.36 L2071.48 1212.36 L2072.06 1212.36 L2072.65 1212.36 L2073.23 1212.36 L2073.82 1212.36 L2074.41 1212.36 L2074.99 1212.36 L2075.58 1212.36 L2076.17 1212.36 L2076.75 1212.36 L2077.34 1212.36 L2077.93 1212.36 L2078.51 1212.36 L2079.1 1212.36 L2079.68 1212.36 L2080.27 1212.36 L2080.86 1212.36 L2081.44 1212.36 L2082.03 1212.36 L2082.62 1212.36 L2083.2 1212.36 L2083.79 1212.36 L2084.38 1212.36 L2084.96 1212.36 L2085.55 1212.36 L2086.14 1212.36 L2086.72 1212.36 L2087.31 1212.36 L2087.89 1212.36 L2088.48 1212.36 L2089.07 1212.36 L2089.65 1212.36 L2090.24 1212.36 L2090.83 1212.36 L2091.41 1212.36 L2092 1212.36 L2092.59 1212.36 L2093.17 1212.36 L2093.76 1212.36 L2094.35 1212.36 L2094.93 1212.36 L2095.52 1212.36 L2096.1 1212.36 L2096.69 1212.36 L2097.28 1212.36 L2097.86 1212.36 L2098.45 1212.36 L2099.04 1212.36 L2099.62 1212.36 L2100.21 1212.36 L2100.8 1212.36 L2101.38 1212.36 L2101.97 1212.36 L2102.55 1212.36 L2103.14 1212.36 L2103.73 1212.36 L2104.31 1212.36 L2104.9 1212.36 L2105.49 1212.36 L2106.07 1212.36 L2106.66 1212.36 L2107.25 1212.36 L2107.83 1212.36 L2108.42 1212.36 L2109.01 1212.36 L2109.59 1212.36 L2110.18 1212.36 L2110.76 1212.36 L2111.35 1212.36 L2111.94 1212.36 L2112.52 1212.36 L2113.11 1212.36 L2113.7 1212.36 L2114.28 1212.36 L2114.87 1212.36 L2115.46 1212.36 L2116.04 1212.36 L2116.63 1212.36 L2117.22 1212.36 L2117.8 1212.36 L2118.39 1212.36 L2118.97 1212.36 L2119.56 1212.36 L2120.15 1212.36 L2120.73 1212.36 L2121.32 1212.36 L2121.91 1212.36 L2122.49 1212.36 L2123.08 1212.36 L2123.67 1212.36 L2124.25 1212.36 L2124.84 1212.36 L2125.42 1212.36 L2126.01 1212.36 L2126.6 1212.36 L2127.18 1212.36 L2127.77 1212.36 L2128.36 1212.36 L2128.94 1212.36 L2129.53 1212.36 L2130.12 1212.36 L2130.7 1212.36 L2131.29 1212.36 L2131.88 1212.36 L2132.46 1212.36 L2133.05 1212.36 L2133.63 1212.36 L2134.22 1212.36 L2134.81 1212.36 L2135.39 1212.36 L2135.98 1212.36 L2136.57 1212.36 L2137.15 1212.36 L2137.74 1212.36 L2138.33 1212.36 L2138.91 1212.36 L2139.5 1212.36 L2140.09 1212.36 L2140.67 1212.36 L2141.26 1212.36 L2141.84 1212.36 L2142.43 1212.36 L2143.02 1212.36 L2143.6 1212.36 L2144.19 1212.36 L2144.78 1212.36 L2145.36 1212.36 L2145.95 1212.36 L2146.54 1212.36 L2147.12 1212.36 L2147.71 1212.36 L2148.3 1212.36 L2148.88 1212.36 L2149.47 1212.36 L2150.05 1212.36 L2150.64 1212.36 L2151.23 1212.36 L2151.81 1212.36 L2152.4 1212.36 L2152.99 1212.36 L2153.57 1212.36 L2154.16 1212.36 L2154.75 1212.36 L2155.33 1212.36 L2155.92 1212.36 L2156.5 1212.36 L2157.09 1212.36 L2157.68 1212.36 L2158.26 1212.36 L2158.26 1212.21 L2157.68 1212.21 L2157.09 1212.21 L2156.5 1212.21 L2155.92 1212.21 L2155.33 1212.21 L2154.75 1212.21 L2154.16 1212.21 L2153.57 1212.21 L2152.99 1212.21 L2152.4 1212.21 L2151.81 1212.21 L2151.23 1212.21 L2150.64 1212.21 L2150.05 1212.21 L2149.47 1212.21 L2148.88 1212.21 L2148.3 1212.21 L2147.71 1212.21 L2147.12 1212.21 L2146.54 1212.21 L2145.95 1212.21 L2145.36 1212.21 L2144.78 1212.21 L2144.19 1212.21 L2143.6 1212.21 L2143.02 1212.21 L2142.43 1212.21 L2141.84 1212.21 L2141.26 1212.21 L2140.67 1212.21 L2140.09 1212.21 L2139.5 1212.21 L2138.91 1212.21 L2138.33 1212.21 L2137.74 1212.21 L2137.15 1212.21 L2136.57 1212.21 L2135.98 1212.21 L2135.39 1212.21 L2134.81 1212.21 L2134.22 1212.21 L2133.63 1212.21 L2133.05 1212.21 L2132.46 1212.21 L2131.88 1212.21 L2131.29 1212.21 L2130.7 1212.21 L2130.12 1212.21 L2129.53 1212.21 L2128.94 1212.21 L2128.36 1212.21 L2127.77 1212.21 L2127.18 1212.21 L2126.6 1212.21 L2126.01 1212.21 L2125.42 1212.21 L2124.84 1212.21 L2124.25 1212.21 L2123.67 1212.21 L2123.08 1212.21 L2122.49 1212.21 L2121.91 1212.21 L2121.32 1212.21 L2120.73 1212.21 L2120.15 1212.21 L2119.56 1212.21 L2118.97 1212.21 L2118.39 1212.21 L2117.8 1212.21 L2117.22 1212.21 L2116.63 1212.21 L2116.04 1212.21 L2115.46 1212.21 L2114.87 1212.21 L2114.28 1212.21 L2113.7 1212.21 L2113.11 1212.21 L2112.52 1212.21 L2111.94 1212.21 L2111.35 1212.21 L2110.76 1212.21 L2110.18 1212.21 L2109.59 1212.21 L2109.01 1212.21 L2108.42 1212.21 L2107.83 1212.21 L2107.25 1212.21 L2106.66 1212.21 L2106.07 1212.21 L2105.49 1212.21 L2104.9 1212.21 L2104.31 1212.21 L2103.73 1212.21 L2103.14 1212.21 L2102.55 1212.21 L2101.97 1212.21 L2101.38 1212.21 L2100.8 1212.21 L2100.21 1212.21 L2099.62 1212.21 L2099.04 1212.21 L2098.45 1212.21 L2097.86 1212.21 L2097.28 1212.21 L2096.69 1212.21 L2096.1 1212.21 L2095.52 1212.21 L2094.93 1212.21 L2094.35 1212.21 L2093.76 1212.21 L2093.17 1212.21 L2092.59 1212.21 L2092 1212.21 L2091.41 1212.21 L2090.83 1212.21 L2090.24 1212.21 L2089.65 1212.21 L2089.07 1212.21 L2088.48 1212.21 L2087.89 1212.21 L2087.31 1212.21 L2086.72 1212.21 L2086.14 1212.21 L2085.55 1212.21 L2084.96 1212.21 L2084.38 1212.21 L2083.79 1212.21 L2083.2 1212.21 L2082.62 1212.21 L2082.03 1212.21 L2081.44 1212.21 L2080.86 1212.21 L2080.27 1212.21 L2079.68 1212.21 L2079.1 1212.21 L2078.51 1212.21 L2077.93 1212.21 L2077.34 1212.21 L2076.75 1212.21 L2076.17 1212.21 L2075.58 1212.21 L2074.99 1212.21 L2074.41 1212.21 L2073.82 1212.21 L2073.23 1212.21 L2072.65 1212.21 L2072.06 1212.21 L2071.48 1212.21 L2070.89 1212.21 L2070.3 1212.21 L2069.72 1212.21 L2069.13 1212.21 L2068.54 1212.21 L2067.96 1212.21 L2067.37 1212.21 L2066.78 1212.21 L2066.2 1212.21 L2065.61 1212.21 L2065.02 1212.21 L2064.44 1212.21 L2063.85 1212.21 L2063.27 1212.21 L2062.68 1212.21 L2062.09 1212.21 L2061.51 1212.21 L2060.92 1212.21 L2060.33 1212.21 L2059.75 1212.21 L2059.16 1212.21 L2058.57 1212.21 L2057.99 1212.21 L2057.4 1212.21 L2056.81 1212.21 L2056.23 1212.21 L2055.64 1212.21 L2055.06 1212.21 L2054.47 1212.21 L2053.88 1212.21 L2053.3 1212.21 L2052.71 1212.21 L2052.12 1212.21 L2051.54 1212.21 L2050.95 1212.21 L2050.36 1212.21 L2049.78 1212.21 L2049.19 1212.21 L2048.6 1212.21 L2048.02 1212.21 L2047.43 1212.21 L2046.85 1212.21 L2046.26 1212.21 L2045.67 1212.21 L2045.09 1212.21 L2044.5 1212.21 L2043.91 1212.21 L2043.33 1212.21 L2042.74 1212.21 L2042.15 1212.21 L2041.57 1212.21 L2040.98 1212.21 L2040.4 1212.21 L2039.81 1212.21 L2039.22 1212.21 L2038.64 1212.21 L2038.05 1212.21 L2037.46 1212.21 L2036.88 1212.21 L2036.29 1212.21 L2035.7 1212.21 L2035.12 1212.21 L2034.53 1212.21 L2033.94 1212.21 L2033.36 1212.21 L2032.77 1212.21 L2032.19 1212.21 L2031.6 1212.21 L2031.01 1212.21 L2030.43 1212.21 L2029.84 1212.21 L2029.25 1212.21 L2028.67 1212.21 L2028.08 1212.21 L2027.49 1212.21 L2026.91 1212.21 L2026.32 1212.21 L2025.73 1212.21 L2025.15 1212.21 L2024.56 1212.21 L2023.98 1212.21 L2023.39 1212.21 L2022.8 1212.21 L2022.22 1212.21 L2021.63 1212.21 L2021.04 1212.21 L2020.46 1212.21 L2019.87 1212.21 L2019.28 1212.21 L2018.7 1212.21 L2018.11 1212.21 L2017.53 1212.21 L2016.94 1212.21 L2016.35 1212.21 L2015.77 1212.21 L2015.18 1212.21 L2014.59 1212.21 L2014.01 1212.21 L2013.42 1212.21 L2012.83 1212.21 L2012.25 1212.21 L2011.66 1212.21 L2011.07 1212.21 L2010.49 1212.21 L2009.9 1212.21 L2009.32 1212.21 L2008.73 1212.21 L2008.14 1212.21 L2007.56 1212.21 L2006.97 1212.21 L2006.38 1212.21 L2005.8 1212.21 L2005.21 1212.21 L2004.62 1212.21 L2004.04 1212.21 L2003.45 1212.21 L2002.86 1212.21 L2002.28 1212.21 L2001.69 1212.21 L2001.11 1212.21 L2000.52 1212.21 L1999.93 1212.21 L1999.35 1212.21 L1998.76 1212.21 L1998.17 1212.21 L1997.59 1212.21 L1997 1212.21 L1996.41 1212.21 L1995.83 1212.21 L1995.24 1212.21 L1994.65 1212.21 L1994.07 1212.21 L1993.48 1212.21 L1992.9 1212.21 L1992.31 1212.21 L1991.72 1212.21 L1991.14 1212.21 L1990.55 1212.21 L1989.96 1212.21 L1989.38 1212.21 L1988.79 1212.21 L1988.2 1212.21 L1987.62 1212.21 L1987.03 1212.21 L1986.45 1212.21 L1985.86 1212.21 L1985.27 1212.21 L1984.69 1212.21 L1984.1 1212.21 L1983.51 1212.21 L1982.93 1212.21 L1982.34 1212.21 L1981.75 1212.21 L1981.17 1212.21 L1980.58 1212.21 L1979.99 1212.21 L1979.41 1212.21 L1978.82 1212.21 L1978.24 1212.21 L1977.65 1212.21 L1977.06 1212.21 L1976.48 1212.21 L1975.89 1212.21 L1975.3 1212.21 L1974.72 1212.21 L1974.13 1212.21 L1973.54 1212.21 L1972.96 1212.21 L1972.37 1212.21 L1971.78 1212.21 L1971.2 1212.21 L1970.61 1212.21 L1970.03 1212.21 L1969.44 1212.21 L1968.85 1212.21 L1968.27 1212.21 L1967.68 1212.21 L1967.09 1212.21 L1966.51 1212.21 L1965.92 1212.21 L1965.33 1212.21 L1964.75 1212.21 L1964.16 1212.21 L1963.58 1212.21 L1962.99 1212.21 L1962.4 1212.21 L1961.82 1212.21 L1961.23 1212.21 L1960.64 1212.21 L1960.06 1212.21 L1959.47 1212.21 L1958.88 1212.21 L1958.3 1212.21 L1957.71 1212.21 L1957.12 1212.21 L1956.54 1212.21 L1955.95 1212.21 L1955.37 1212.21 L1954.78 1212.21 L1954.19 1212.21 L1953.61 1212.21 L1953.02 1212.21 L1952.43 1212.21 L1951.85 1212.21 L1951.26 1212.21 L1950.67 1212.21 L1950.09 1212.21 L1949.5 1212.21 L1948.91 1212.21 L1948.33 1212.21 L1947.74 1212.21 L1947.16 1212.21 L1946.57 1212.21 L1945.98 1212.21 L1945.4 1212.21 L1944.81 1212.21 L1944.22 1212.21 L1943.64 1212.21 L1943.05 1212.21 L1942.46 1212.21 L1941.88 1212.21 L1941.29 1212.21 L1940.71 1212.21 L1940.12 1212.21 L1939.53 1212.21 L1938.95 1212.21 L1938.36 1212.21 L1937.77 1212.21 L1937.19 1212.21 L1936.6 1212.21 L1936.01 1212.21 L1935.43 1212.21 L1934.84 1212.21 L1934.25 1212.21 L1933.67 1212.21 L1933.08 1212.21 L1932.5 1212.21 L1931.91 1212.21 L1931.32 1212.21 L1930.74 1212.21 L1930.15 1212.21 L1929.56 1212.21 L1928.98 1212.21 L1928.39 1212.21 L1927.8 1212.21 L1927.22 1212.21 L1926.63 1212.21 L1926.04 1212.21 L1925.46 1212.21 L1924.87 1212.21 L1924.29 1212.21 L1923.7 1212.21 L1923.11 1212.21 L1922.53 1212.21 L1921.94 1212.21 L1921.35 1212.21 L1920.77 1212.21 L1920.18 1212.21 L1919.59 1212.21 L1919.01 1212.21 L1918.42 1212.21 L1917.83 1212.21 L1917.25 1212.21 L1916.66 1212.21 L1916.08 1212.21 L1915.49 1212.21 L1914.9 1212.21 L1914.32 1212.21 L1913.73 1212.21 L1913.14 1212.21 L1912.56 1212.21 L1911.97 1212.21 L1911.38 1212.21 L1910.8 1212.21 L1910.21 1212.21 L1909.63 1212.21 L1909.04 1212.21 L1908.45 1212.21 L1907.87 1212.21 L1907.28 1212.21 L1906.69 1212.21 L1906.11 1212.21 L1905.52 1212.21 L1904.93 1212.21 L1904.35 1212.21 L1903.76 1212.21 L1903.17 1212.21 L1902.59 1212.21 L1902 1212.21 L1901.42 1212.21 L1900.83 1212.21 L1900.24 1212.21 L1899.66 1212.21 L1899.07 1212.21 L1898.48 1212.21 L1897.9 1212.21 L1897.31 1212.21 L1896.72 1212.21 L1896.14 1212.21 L1895.55 1212.21 L1894.96 1212.21 L1894.38 1212.21 L1893.79 1212.21 L1893.21 1212.21 L1892.62 1212.21 L1892.03 1212.21 L1891.45 1212.21 L1890.86 1212.21 L1890.27 1212.21 L1889.69 1212.21 L1889.1 1212.21 L1888.51 1212.21 L1887.93 1212.21 L1887.34 1212.21 L1886.76 1212.21 L1886.17 1212.21 L1885.58 1212.21 L1885 1212.21 L1884.41 1212.21 L1883.82 1212.21 L1883.24 1212.21 L1882.65 1212.21 L1882.06 1212.21 L1881.48 1212.21 L1880.89 1212.21 L1880.3 1212.21 L1879.72 1212.21 L1879.13 1212.21 L1878.55 1212.21 L1877.96 1212.21 L1877.37 1212.21 L1876.79 1212.21 L1876.2 1212.21 L1875.61 1212.21 L1875.03 1212.21 L1874.44 1212.21 L1873.85 1212.21 L1873.27 1212.21 L1872.68 1212.21 L1872.09 1212.21 L1871.51 1212.21 L1870.92 1212.21 L1870.34 1212.21 L1869.75 1212.21 L1869.16 1212.21 L1868.58 1212.21 L1867.99 1212.21 L1867.4 1212.21 L1866.82 1212.21 L1866.23 1212.21 L1865.64 1212.21 L1865.06 1212.21 L1864.47 1212.21 L1863.88 1212.21 L1863.3 1212.21 L1862.71 1212.21 L1862.13 1212.21 L1861.54 1212.21 L1860.95 1212.21 L1860.37 1212.21 L1859.78 1212.21 L1859.19 1212.21 L1858.61 1212.21 L1858.02 1212.21 L1857.43 1212.21 L1856.85 1212.21 L1856.26 1212.21 L1855.68 1212.21 L1855.09 1212.21 L1854.5 1212.21 L1853.92 1212.21 L1853.33 1212.21 L1852.74 1212.21 L1852.16 1212.21 L1851.57 1212.21 L1850.98 1212.21 L1850.4 1212.21 L1849.81 1212.21 L1849.22 1212.21 L1848.64 1212.21 L1848.05 1212.21 L1847.47 1212.21 L1846.88 1212.21 L1846.29 1212.21 L1845.71 1212.21 L1845.12 1212.21 L1844.53 1212.21 L1843.95 1212.21 L1843.36 1212.21 L1842.77 1212.21 L1842.19 1212.21 L1841.6 1212.21 L1841.01 1212.21 L1840.43 1212.21 L1839.84 1212.21 L1839.26 1212.21 L1838.67 1212.21 L1838.08 1212.21 L1837.5 1212.21 L1836.91 1212.21 L1836.32 1212.21 L1835.74 1212.21 L1835.15 1212.21 L1834.56 1212.21 L1833.98 1212.21 L1833.39 1212.21 L1832.81 1212.21 L1832.22 1212.21 L1831.63 1212.21 L1831.05 1212.21 L1830.46 1212.21 L1829.87 1212.21 L1829.29 1212.21 L1828.7 1212.21 L1828.11 1212.21 L1827.53 1212.21 L1826.94 1212.21 L1826.35 1212.21 L1825.77 1212.21 L1825.18 1212.21 L1824.6 1212.21 L1824.01 1212.21 L1823.42 1212.21 L1822.84 1212.21 L1822.25 1212.21 L1821.66 1212.21 L1821.08 1212.21 L1820.49 1212.21 L1819.9 1212.21 L1819.32 1212.21 L1818.73 1212.21 L1818.14 1212.21 L1817.56 1212.21 L1816.97 1212.21 L1816.39 1212.21 L1815.8 1212.21 L1815.21 1212.21 L1814.63 1212.21 L1814.04 1212.21 L1813.45 1212.21 L1812.87 1212.21 L1812.28 1212.21 L1811.69 1212.21 L1811.11 1212.21 L1810.52 1212.21 L1809.94 1212.21 L1809.35 1212.21 L1808.76 1212.21 L1808.18 1212.21 L1807.59 1212.21 L1807 1212.21 L1806.42 1212.21 L1805.83 1212.21 L1805.24 1212.21 L1804.66 1212.21 L1804.07 1212.21 L1803.48 1212.21 L1802.9 1212.21 L1802.31 1212.21 L1801.73 1212.21 L1801.14 1212.21 L1800.55 1212.21 L1799.97 1212.21 L1799.38 1212.21 L1798.79 1212.21 L1798.21 1212.21 L1797.62 1212.21 L1797.03 1212.21 L1796.45 1212.21 L1795.86 1212.21 L1795.27 1212.21 L1794.69 1212.21 L1794.1 1212.21 L1793.52 1212.21 L1792.93 1212.21 L1792.34 1212.21 L1791.76 1212.21 L1791.17 1212.21 L1790.58 1212.21 L1790 1212.21 L1789.41 1212.21 L1788.82 1212.21 L1788.24 1212.21 L1787.65 1212.21 L1787.06 1212.21 L1786.48 1212.21 L1785.89 1212.21 L1785.31 1212.21 L1784.72 1212.21 L1784.13 1212.21 L1783.55 1212.21 L1782.96 1212.21 L1782.37 1212.21 L1781.79 1212.21 L1781.2 1212.21 L1780.61 1212.21 L1780.03 1212.21 L1779.44 1212.21 L1778.86 1212.21 L1778.27 1212.21 L1777.68 1212.21 L1777.1 1212.21 L1776.51 1212.21 L1775.92 1212.21 L1775.34 1212.21 L1774.75 1212.21 L1774.16 1212.21 L1773.58 1212.21 L1772.99 1212.21 L1772.4 1212.21 L1771.82 1212.21 L1771.23 1212.21 L1770.65 1212.21 L1770.06 1212.21 L1769.47 1212.21 L1768.89 1212.21 L1768.3 1212.21 L1767.71 1212.21 L1767.13 1212.21 L1766.54 1212.21 L1765.95 1212.21 L1765.37 1212.21 L1764.78 1212.21 L1764.19 1212.21 L1763.61 1212.21 L1763.02 1212.21 L1762.44 1212.21 L1761.85 1212.21 L1761.26 1212.21 L1760.68 1212.21 L1760.09 1212.21 L1759.5 1212.21 L1758.92 1212.21 L1758.33 1212.21 L1757.74 1212.21 L1757.16 1212.21 L1756.57 1212.21 L1755.99 1212.21 L1755.4 1212.21 L1754.81 1212.21 L1754.23 1212.21 L1753.64 1212.21 L1753.05 1212.21 L1752.47 1212.21 L1751.88 1212.21 L1751.29 1212.21 L1750.71 1212.21 L1750.12 1212.21 L1749.53 1212.21 L1748.95 1212.21 L1748.36 1212.21 L1747.78 1212.21 L1747.19 1212.21 L1746.6 1212.21 L1746.02 1212.21 L1745.43 1212.21 L1744.84 1212.21 L1744.26 1212.21 L1743.67 1212.21 L1743.08 1212.21 L1742.5 1212.21 L1741.91 1212.21 L1741.32 1212.21 L1740.74 1212.21 L1740.15 1212.21 L1739.57 1212.21 L1738.98 1212.21 L1738.39 1212.21 L1737.81 1212.21 L1737.22 1212.21 L1736.63 1212.21 L1736.05 1212.21 L1735.46 1212.21 L1734.87 1212.21 L1734.29 1212.21 L1733.7 1212.21 L1733.11 1212.21 L1732.53 1212.21 L1731.94 1212.21 L1731.36 1212.21 L1730.77 1212.21 L1730.18 1212.21 L1729.6 1212.21 L1729.01 1212.21 L1728.42 1212.21 L1727.84 1212.21 L1727.25 1212.21 L1726.66 1212.21 L1726.08 1212.21 L1725.49 1212.21 L1724.91 1212.21 L1724.32 1212.21 L1723.73 1212.21 L1723.15 1212.21 L1722.56 1212.21 L1721.97 1212.21 L1721.39 1212.21 L1720.8 1212.21 L1720.21 1212.21 L1719.63 1212.21 L1719.04 1212.21 L1718.45 1212.21 L1717.87 1212.21 L1717.28 1212.21 L1716.7 1212.21 L1716.11 1212.21 L1715.52 1212.21 L1714.94 1212.21 L1714.35 1212.21 L1713.76 1212.21 L1713.18 1212.21 L1712.59 1212.21 L1712 1212.21 L1711.42 1212.21 L1710.83 1212.21 L1710.24 1212.21 L1709.66 1212.21 L1709.07 1212.21 L1708.49 1212.21 L1707.9 1212.21 L1707.31 1212.21 L1706.73 1212.21 L1706.14 1212.21 L1705.55 1212.21 L1704.97 1212.21 L1704.38 1212.21 L1703.79 1212.21 L1703.21 1212.21 L1702.62 1212.21 L1702.04 1212.21 L1701.45 1212.21 L1700.86 1212.21 L1700.28 1212.21 L1699.69 1212.21 L1699.1 1212.21 L1698.52 1212.21 L1697.93 1212.21 L1697.34 1212.21 L1696.76 1212.21 L1696.17 1212.21 L1695.58 1212.21 L1695 1212.21 L1694.41 1212.21 L1693.83 1212.21 L1693.24 1212.21 L1692.65 1212.21 L1692.07 1212.21 L1691.48 1212.21 L1690.89 1212.21 L1690.31 1212.21 L1689.72 1212.21 L1689.13 1212.21 L1688.55 1212.21 L1687.96 1212.21 L1687.37 1212.21 L1686.79 1212.21 L1686.2 1212.21 L1685.62 1212.21 L1685.03 1212.21 L1684.44 1212.21 L1683.86 1212.21 L1683.27 1212.21 L1682.68 1212.21 L1682.1 1212.21 L1681.51 1212.21 L1680.92 1212.21 L1680.34 1212.21 L1679.75 1212.21 L1679.17 1212.21 L1678.58 1212.21 L1677.99 1212.21 L1677.41 1212.21 L1676.82 1212.21 L1676.23 1212.21 L1675.65 1212.21 L1675.06 1212.21 L1674.47 1212.21 L1673.89 1212.21 L1673.3 1212.21 L1672.71 1212.21 L1672.13 1212.21 L1671.54 1212.21 L1670.96 1212.21 L1670.37 1212.21 L1669.78 1212.21 L1669.2 1212.21 L1668.61 1212.21 L1668.02 1212.21 L1667.44 1212.21 L1666.85 1212.21 L1666.26 1212.21 L1665.68 1212.21 L1665.09 1212.21 L1664.5 1212.21 L1663.92 1212.21 L1663.33 1212.21 L1662.75 1212.21 L1662.16 1212.21 L1661.57 1212.21 L1660.99 1212.21 L1660.4 1212.21 L1659.81 1212.21 L1659.23 1212.21 L1658.64 1212.21 L1658.05 1212.21 L1657.47 1212.21 L1656.88 1212.21 L1656.29 1212.21 L1655.71 1212.21 L1655.12 1212.21 L1654.54 1212.21 L1653.95 1212.21 L1653.36 1212.21 L1652.78 1212.21 L1652.19 1212.21 L1651.6 1212.21 L1651.02 1212.21 L1650.43 1212.21 L1649.84 1212.21 L1649.26 1212.21 L1648.67 1212.21 L1648.09 1212.21 L1647.5 1212.21 L1646.91 1212.21 L1646.33 1212.21 L1645.74 1212.21 L1645.15 1212.21 L1644.57 1212.21 L1643.98 1212.21 L1643.39 1212.21 L1642.81 1212.21 L1642.22 1212.21 L1641.63 1212.21 L1641.05 1212.21 L1640.46 1212.21 L1639.88 1212.21 L1639.29 1212.21 L1638.7 1212.21 L1638.12 1212.21 L1637.53 1212.21 L1636.94 1212.21 L1636.36 1212.21 L1635.77 1212.21 L1635.18 1212.21 L1634.6 1212.21 L1634.01 1212.21 L1633.42 1212.21 L1632.84 1212.21 L1632.25 1212.21 L1631.67 1212.21 L1631.08 1212.21 L1630.49 1212.21 L1629.91 1212.21 L1629.32 1212.21 L1628.73 1212.21 L1628.15 1212.21 L1627.56 1212.21 L1626.97 1212.21 L1626.39 1212.21 L1625.8 1212.21 L1625.22 1212.21 L1624.63 1212.21 L1624.04 1212.21 L1623.46 1212.21 L1622.87 1212.21 L1622.28 1212.21 L1621.7 1212.21 L1621.11 1212.21 L1620.52 1212.21 L1619.94 1212.21 L1619.35 1212.21 L1618.76 1212.21 L1618.18 1212.21 L1617.59 1212.21 L1617.01 1212.21 L1616.42 1212.21 L1615.83 1212.21 L1615.25 1212.21 L1614.66 1212.21 L1614.07 1212.21 L1613.49 1212.21 L1612.9 1212.21 L1612.31 1212.21 L1611.73 1212.21 L1611.14 1212.21 L1610.55 1212.21 L1609.97 1212.21 L1609.38 1212.21 L1608.8 1212.21 L1608.21 1212.21 L1607.62 1212.21 L1607.04 1212.21 L1606.45 1212.21 L1605.86 1212.21 L1605.28 1212.21 L1604.69 1212.21 L1604.1 1212.21 L1603.52 1212.21 L1602.93 1212.21 L1602.34 1212.21 L1601.76 1212.21 L1601.17 1212.21 L1600.59 1212.21 L1600 1212.21 L1599.41 1212.21 L1598.83 1212.21 L1598.24 1212.21 L1597.65 1212.21 L1597.07 1212.21 L1596.48 1212.21 L1595.89 1212.21 L1595.31 1212.21 L1594.72 1212.21 L1594.14 1212.21 L1593.55 1212.21 L1592.96 1212.21 L1592.38 1212.21 L1591.79 1212.21 L1591.2 1212.21 L1590.62 1212.21 L1590.03 1212.21 L1589.44 1212.21 L1588.86 1212.21 L1588.27 1212.21 L1587.68 1212.21 L1587.1 1212.21 L1586.51 1212.21 L1585.93 1212.21 L1585.34 1212.21 L1584.75 1212.21 L1584.17 1212.21 L1583.58 1212.21 L1582.99 1212.21 L1582.41 1212.21 L1581.82 1212.21 L1581.23 1212.21 L1580.65 1212.21 L1580.06 1212.21 L1579.47 1212.21 L1578.89 1212.21 L1578.3 1212.21 L1577.72 1212.21 L1577.13 1212.21 L1576.54 1212.21 L1575.96 1212.21 L1575.37 1212.21 L1574.78 1212.21 L1574.2 1212.21 L1573.61 1212.21 L1573.02 1212.21 L1572.44 1212.21 L1571.85 1212.21 L1571.27 1212.21 L1570.68 1212.21 L1570.09 1212.21 L1569.51 1212.21 L1568.92 1212.21 L1568.33 1212.21 L1567.75 1212.21 L1567.16 1212.21 L1566.57 1212.21 L1565.99 1212.21 L1565.4 1212.21 L1564.81 1212.21 L1564.23 1212.21 L1563.64 1212.21 L1563.06 1212.21 L1562.47 1212.21 L1561.88 1212.21 L1561.3 1212.21 L1560.71 1212.21 L1560.12 1212.21 L1559.54 1212.21 L1558.95 1212.21 L1558.36 1212.21 L1557.78 1212.21 L1557.19 1212.21 L1556.6 1212.21 L1556.02 1212.21 L1555.43 1212.21 L1554.85 1212.21 L1554.26 1212.21 L1553.67 1212.21 L1553.09 1212.21 L1552.5 1212.21 L1551.91 1212.21 L1551.33 1212.21 L1550.74 1212.21 L1550.15 1212.21 L1549.57 1212.21 L1548.98 1212.21 L1548.4 1212.21 L1547.81 1212.21 L1547.22 1212.21 L1546.64 1212.21 L1546.05 1212.21 L1545.46 1212.21 L1544.88 1212.21 L1544.29 1212.21 L1543.7 1212.21 L1543.12 1212.21 L1542.53 1212.21 L1541.94 1212.21 L1541.36 1212.21 L1540.77 1212.21 L1540.19 1212.21 L1539.6 1212.21 L1539.01 1212.21 L1538.43 1212.21 L1537.84 1212.21 L1537.25 1212.21 L1536.67 1212.21 L1536.08 1212.21 L1535.49 1212.21 L1534.91 1212.21 L1534.32 1212.21 L1533.73 1212.21 L1533.15 1212.21 L1532.56 1212.21 L1531.98 1212.21 L1531.39 1212.21 L1530.8 1212.21 L1530.22 1212.21 L1529.63 1212.21 L1529.04 1212.21 L1528.46 1212.21 L1527.87 1212.21 L1527.28 1212.21 L1526.7 1212.21 L1526.11 1212.21 L1525.52 1212.21 L1524.94 1212.21 L1524.35 1212.21 L1523.77 1212.21 L1523.18 1212.21 L1522.59 1212.21 L1522.01 1212.21 L1521.42 1212.21 L1520.83 1212.21 L1520.25 1212.21 L1519.66 1212.21 L1519.07 1212.21 L1518.49 1212.21 L1517.9 1212.21 L1517.32 1212.21 L1516.73 1212.21 L1516.14 1212.21 L1515.56 1212.21 L1514.97 1212.21 L1514.38 1212.21 L1513.8 1212.21 L1513.21 1212.21 L1512.62 1212.21 L1512.04 1212.21 L1511.45 1212.21 L1510.86 1212.21 L1510.28 1212.21 L1509.69 1212.21 L1509.11 1212.21 L1508.52 1212.21 L1507.93 1212.21 L1507.35 1212.21 L1506.76 1212.21 L1506.17 1212.21 L1505.59 1212.21 L1505 1212.21 L1504.41 1212.21 L1503.83 1212.21 L1503.24 1212.21 L1502.65 1212.21 L1502.07 1212.21 L1501.48 1212.21 L1500.9 1212.21 L1500.31 1212.21 L1499.72 1212.21 L1499.14 1212.21 L1498.55 1212.21 L1497.96 1212.21 L1497.38 1212.21 L1496.79 1212.21 L1496.2 1212.21 L1495.62 1212.21 L1495.03 1212.21 L1494.45 1212.21 L1493.86 1212.21 L1493.27 1212.21 L1492.69 1212.21 L1492.1 1212.21 L1491.51 1212.21 L1490.93 1212.21 L1490.34 1212.21 L1489.75 1212.21 L1489.17 1212.21 L1488.58 1212.21 L1487.99 1212.21 L1487.41 1212.21 L1486.82 1212.21 L1486.24 1212.21 L1485.65 1212.21 L1485.06 1212.21 L1484.48 1212.21 L1483.89 1212.21 L1483.3 1212.21 L1482.72 1212.21 L1482.13 1212.21 L1481.54 1212.21 L1480.96 1212.21 L1480.37 1212.21 L1479.78 1212.21 L1479.2 1212.21 L1478.61 1212.21 L1478.03 1212.21 L1477.44 1212.21 L1476.85 1212.21 L1476.27 1212.21 L1475.68 1212.21 L1475.09 1212.21 L1474.51 1212.21 L1473.92 1212.21 L1473.33 1212.21 L1472.75 1212.21 L1472.16 1212.21 L1471.57 1212.21 L1470.99 1212.21 L1470.4 1212.21 L1469.82 1212.21 L1469.23 1212.21 L1468.64 1212.21 L1468.06 1212.21 L1467.47 1212.21 L1466.88 1212.21 L1466.3 1212.21 L1465.71 1212.21 L1465.12 1212.21 L1464.54 1212.21 L1463.95 1212.21 L1463.37 1212.21 L1462.78 1212.21 L1462.19 1212.21 L1461.61 1212.21 L1461.02 1212.21 L1460.43 1212.21 L1459.85 1212.21 L1459.26 1212.21 L1458.67 1212.21 L1458.09 1212.21 L1457.5 1212.21 L1456.91 1212.21 L1456.33 1212.21 L1455.74 1212.21 L1455.16 1212.21 L1454.57 1212.21 L1453.98 1212.21 L1453.4 1212.21 L1452.81 1212.21 L1452.22 1212.21 L1451.64 1212.21 L1451.05 1212.21 L1450.46 1212.21 L1449.88 1212.21 L1449.29 1212.21 L1448.7 1212.21 L1448.12 1212.21 L1447.53 1212.21 L1446.95 1212.21 L1446.36 1212.21 L1445.77 1212.21 L1445.19 1212.21 L1444.6 1212.21 L1444.01 1212.21 L1443.43 1212.21 L1442.84 1212.21 L1442.25 1212.21 L1441.67 1212.21 L1441.08 1212.21 L1440.5 1212.21 L1439.91 1212.21 L1439.32 1212.21 L1438.74 1212.21 L1438.15 1212.21 L1437.56 1212.21 L1436.98 1212.21 L1436.39 1212.21 L1435.8 1212.21 L1435.22 1212.21 L1434.63 1212.21 L1434.04 1212.21 L1433.46 1212.21 L1432.87 1212.21 L1432.29 1212.21 L1431.7 1212.21 L1431.11 1212.21 L1430.53 1212.21 L1429.94 1212.21 L1429.35 1212.21 L1428.77 1212.21 L1428.18 1212.21 L1427.59 1212.21 L1427.01 1212.21 L1426.42 1212.21 L1425.83 1212.21 L1425.25 1212.21 L1424.66 1212.21 L1424.08 1212.21 L1423.49 1212.21 L1422.9 1212.21 L1422.32 1212.21 L1421.73 1212.21 L1421.14 1212.21 L1420.56 1212.21 L1419.97 1212.21 L1419.38 1212.21 L1418.8 1212.21 L1418.21 1212.21 L1417.63 1212.21 L1417.04 1212.21 L1416.45 1212.21 L1415.87 1212.21 L1415.28 1212.21 L1414.69 1212.21 L1414.11 1212.21 L1413.52 1212.21 L1412.93 1212.21 L1412.35 1212.21 L1411.76 1212.21 L1411.17 1212.21 L1410.59 1212.21 L1410 1212.21 L1409.42 1212.21 L1408.83 1212.21 L1408.24 1212.21 L1407.66 1212.21 L1407.07 1212.21 L1406.48 1212.21 L1405.9 1212.21 L1405.31 1212.21 L1404.72 1212.21 L1404.14 1212.21 L1403.55 1212.21 L1402.96 1212.21 L1402.38 1212.21 L1401.79 1212.21 L1401.21 1212.21 L1400.62 1212.21 L1400.03 1212.21 L1399.45 1212.21 L1398.86 1212.21 L1398.27 1212.21 L1397.69 1212.21 L1397.1 1212.21 L1396.51 1212.21 L1395.93 1212.21 L1395.34 1212.21 L1394.75 1212.21 L1394.17 1212.21 L1393.58 1212.21 L1393 1212.21 L1392.41 1212.21 L1391.82 1212.21 L1391.24 1212.21 L1390.65 1212.21 L1390.06 1212.21 L1389.48 1212.21 L1388.89 1212.21 L1388.3 1212.21 L1387.72 1212.21 L1387.13 1212.21 L1386.55 1212.21 L1385.96 1212.21 L1385.37 1212.21 L1384.79 1212.21 L1384.2 1212.21 L1383.61 1212.21 L1383.03 1212.21 L1382.44 1212.21 L1381.85 1212.21 L1381.27 1212.21 L1380.68 1212.21 L1380.09 1212.21 L1379.51 1212.21 L1378.92 1212.21 L1378.34 1212.21 L1377.75 1212.21 L1377.16 1212.21 L1376.58 1212.21 L1375.99 1212.21 L1375.4 1212.21 L1374.82 1212.21 L1374.23 1212.21 L1373.64 1212.21 L1373.06 1212.21 L1372.47 1212.21 L1371.88 1212.21 L1371.3 1212.21 L1370.71 1212.21 L1370.13 1212.21 L1369.54 1212.21 L1368.95 1212.21 L1368.37 1212.21 L1367.78 1212.21 L1367.19 1212.21 L1366.61 1212.21 L1366.02 1212.21 L1365.43 1212.21 L1364.85 1212.21 L1364.26 1212.21 L1363.68 1212.21 L1363.09 1212.21 L1362.5 1212.21 L1361.92 1212.21 L1361.33 1212.21 L1360.74 1212.21 L1360.16 1212.21 L1359.57 1212.21 L1358.98 1212.21 L1358.4 1212.21 L1357.81 1212.21 L1357.22 1212.21 L1356.64 1212.21 L1356.05 1212.21 L1355.47 1212.21 L1354.88 1212.21 L1354.29 1212.21 L1353.71 1212.21 L1353.12 1212.21 L1352.53 1212.21 L1351.95 1212.21 L1351.36 1212.21 L1350.77 1212.21 L1350.19 1212.21 L1349.6 1212.21 L1349.01 1212.21 L1348.43 1212.21 L1347.84 1212.21 L1347.26 1212.21 L1346.67 1212.21 L1346.08 1212.21 L1345.5 1212.21 L1344.91 1212.21 L1344.32 1212.21 L1343.74 1212.21 L1343.15 1212.21 L1342.56 1212.21 L1341.98 1212.21 L1341.39 1212.21 L1340.8 1212.21 L1340.22 1212.21 L1339.63 1212.21 L1339.05 1212.21 L1338.46 1212.21 L1337.87 1212.21 L1337.29 1212.21 L1336.7 1212.21 L1336.11 1212.21 L1335.53 1212.21 L1334.94 1212.21 L1334.35 1212.21 L1333.77 1212.21 L1333.18 1212.21 L1332.6 1212.21 L1332.01 1212.21 L1331.42 1212.21 L1330.84 1212.21 L1330.25 1212.21 L1329.66 1212.21 L1329.08 1212.21 L1328.49 1212.21 L1327.9 1212.21 L1327.32 1212.21 L1326.73 1212.21 L1326.14 1212.21 L1325.56 1212.21 L1324.97 1212.21 L1324.39 1212.21 L1323.8 1212.21 L1323.21 1212.21 L1322.63 1212.21 L1322.04 1212.21 L1321.45 1212.21 L1320.87 1212.21 L1320.28 1212.21 L1319.69 1212.21 L1319.11 1212.21 L1318.52 1212.21 L1317.93 1212.21 L1317.35 1212.21 L1316.76 1212.21 L1316.18 1212.21 L1315.59 1212.21 L1315 1212.21 L1314.42 1212.21 L1313.83 1212.21 L1313.24 1212.21 L1312.66 1212.21 L1312.07 1212.21 L1311.48 1212.21 L1310.9 1212.21 L1310.31 1212.21 L1309.73 1212.21 L1309.14 1212.21 L1308.55 1212.21 L1307.97 1212.21 L1307.38 1212.21 L1306.79 1212.21 L1306.21 1212.21 L1305.62 1212.21 L1305.03 1212.21 L1304.45 1212.21 L1303.86 1212.21 L1303.27 1212.21 L1302.69 1212.21 L1302.1 1212.21 L1301.52 1212.21 L1300.93 1212.21 L1300.34 1212.21 L1299.76 1212.21 L1299.17 1212.21 L1298.58 1212.21 L1298 1212.21 L1297.41 1212.21 L1296.82 1212.21 L1296.24 1212.21 L1295.65 1212.21 L1295.06 1212.21 L1294.48 1212.21 L1293.89 1212.21 L1293.31 1212.21 L1292.72 1212.21 L1292.13 1212.21 L1291.55 1212.21 L1290.96 1212.21 L1290.37 1212.21 L1289.79 1212.21 L1289.2 1212.21 L1288.61 1212.21 L1288.03 1212.21 L1287.44 1212.21 L1286.86 1212.21 L1286.27 1212.21 L1285.68 1212.21 L1285.1 1212.21 L1284.51 1212.21 L1283.92 1212.21 L1283.34 1212.21 L1282.75 1212.21 L1282.16 1212.21 L1281.58 1212.21 L1280.99 1212.21 L1280.4 1212.21 L1279.82 1212.21 L1279.23 1212.21 L1278.65 1212.21 L1278.06 1212.21 L1277.47 1212.21 L1276.89 1212.21 L1276.3 1212.21 L1275.71 1212.21 L1275.13 1212.21 L1274.54 1212.21 L1273.95 1212.21 L1273.37 1212.21 L1272.78 1212.21 L1272.19 1212.21 L1271.61 1212.21 L1271.02 1212.21 L1270.44 1212.21 L1269.85 1212.21 L1269.26 1212.21 L1268.68 1212.21 L1268.09 1212.21 L1267.5 1212.21 L1266.92 1212.21 L1266.33 1212.21 L1265.74 1212.21 L1265.16 1212.21 L1264.57 1212.21 L1263.98 1212.21 L1263.4 1212.21 L1262.81 1212.21 L1262.23 1212.21 L1261.64 1212.21 L1261.05 1212.21 L1260.47 1212.21 L1259.88 1212.21 L1259.29 1212.21 L1258.71 1212.21 L1258.12 1212.21 L1257.53 1212.21 L1256.95 1212.21 L1256.36 1212.21 L1255.78 1212.21 L1255.19 1212.21 L1254.6 1212.21 L1254.02 1212.21 L1253.43 1212.21 L1252.84 1212.21 L1252.26 1212.21 L1251.67 1212.21 L1251.08 1212.21 L1250.5 1212.21 L1249.91 1212.21 L1249.32 1212.21 L1248.74 1212.21 L1248.15 1212.21 L1247.57 1212.21 L1246.98 1212.21 L1246.39 1212.21 L1245.81 1212.21 L1245.22 1212.21 L1244.63 1212.21 L1244.05 1212.21 L1243.46 1212.21 L1242.87 1212.21 L1242.29 1212.21 L1241.7 1212.21 L1241.11 1212.21 L1240.53 1212.21 L1239.94 1212.21 L1239.36 1212.21 L1238.77 1212.21 L1238.18 1212.21 L1237.6 1212.21 L1237.01 1212.21 L1236.42 1212.21 L1235.84 1212.21 L1235.25 1212.21 L1234.66 1212.21 L1234.08 1212.21 L1233.49 1212.21 L1232.91 1212.21 L1232.32 1212.21 L1231.73 1212.21 L1231.15 1212.21 L1230.56 1212.21 L1229.97 1212.21 L1229.39 1212.21 L1228.8 1212.21 L1228.21 1212.21 L1227.63 1212.21 L1227.04 1212.21 L1226.45 1212.21 L1225.87 1212.21 L1225.28 1212.21 L1224.7 1212.21 L1224.11 1212.21 L1223.52 1212.21 L1222.94 1212.21 L1222.35 1212.21 L1221.76 1212.21 L1221.18 1212.21 L1220.59 1212.21 L1220 1212.21 L1219.42 1212.21 L1218.83 1212.21 L1218.24 1212.21 L1217.66 1212.21 L1217.07 1212.21 L1216.49 1212.21 L1215.9 1212.21 L1215.31 1212.21 L1214.73 1212.21 L1214.14 1212.21 L1213.55 1212.21 L1212.97 1212.21 L1212.38 1212.21 L1211.79 1212.21 L1211.21 1212.21 L1210.62 1212.21 L1210.03 1212.21 L1209.45 1212.21 L1208.86 1212.21 L1208.28 1212.21 L1207.69 1212.21 L1207.1 1212.21 L1206.52 1212.21 L1205.93 1212.21 L1205.34 1212.21 L1204.76 1212.21 L1204.17 1212.21 L1203.58 1212.21 L1203 1212.21 L1202.41 1212.21 L1201.83 1212.21 L1201.24 1212.21 L1200.65 1212.21 L1200.07 1212.21 L1199.48 1212.21 L1198.89 1212.21 L1198.31 1212.21 L1197.72 1212.21 L1197.13 1212.21 L1196.55 1212.21 L1195.96 1212.21 L1195.37 1212.21 L1194.79 1212.21 L1194.2 1212.21 L1193.62 1212.21 L1193.03 1212.21 L1192.44 1212.21 L1191.86 1212.21 L1191.27 1212.21 L1190.68 1212.21 L1190.1 1212.21 L1189.51 1212.21 L1188.92 1212.21 L1188.34 1212.21 L1187.75 1212.21 L1187.16 1212.21 L1186.58 1212.21 L1185.99 1212.21 L1185.41 1212.21 L1184.82 1212.21 L1184.23 1212.21 L1183.65 1212.21 L1183.06 1212.21 L1182.47 1212.21 L1181.89 1212.21 L1181.3 1212.21 L1180.71 1212.21 L1180.13 1212.21 L1179.54 1212.21 L1178.96 1212.21 L1178.37 1212.21 L1177.78 1212.21 L1177.2 1212.21 L1176.61 1212.21 L1176.02 1212.21 L1175.44 1212.21 L1174.85 1212.21 L1174.26 1212.21 L1173.68 1212.21 L1173.09 1212.21 L1172.5 1212.21 L1171.92 1212.21 L1171.33 1212.21 L1170.75 1212.21 L1170.16 1212.21 L1169.57 1212.21 L1168.99 1212.21 L1168.4 1212.21 L1167.81 1212.21 L1167.23 1212.21 L1166.64 1212.21 L1166.05 1212.21 L1165.47 1212.21 L1164.88 1212.21 L1164.29 1212.21 L1163.71 1212.21 L1163.12 1212.21 L1162.54 1212.21 L1161.95 1212.21 L1161.36 1212.21 L1160.78 1212.21 L1160.19 1212.21 L1159.6 1212.21 L1159.02 1212.21 L1158.43 1212.21 L1157.84 1212.21 L1157.26 1212.21 L1156.67 1212.21 L1156.09 1212.21 L1155.5 1212.21 L1154.91 1212.21 L1154.33 1212.21 L1153.74 1212.21 L1153.15 1212.21 L1152.57 1212.21 L1151.98 1212.21 L1151.39 1212.21 L1150.81 1212.21 L1150.22 1212.21 L1149.63 1212.21 L1149.05 1212.21 L1148.46 1212.21 L1147.88 1212.21 L1147.29 1212.21 L1146.7 1212.21 L1146.12 1212.21 L1145.53 1212.21 L1144.94 1212.21 L1144.36 1212.21 L1143.77 1212.21 L1143.18 1212.21 L1142.6 1212.21 L1142.01 1212.21 L1141.42 1212.21 L1140.84 1212.21 L1140.25 1212.21 L1139.67 1212.21 L1139.08 1212.21 L1138.49 1212.21 L1137.91 1212.21 L1137.32 1212.21 L1136.73 1212.21 L1136.15 1212.21 L1135.56 1212.21 L1134.97 1212.21 L1134.39 1212.21 L1133.8 1212.21 L1133.21 1212.21 L1132.63 1212.21 L1132.04 1212.21 L1131.46 1212.21 L1130.87 1212.21 L1130.28 1212.21 L1129.7 1212.21 L1129.11 1212.21 L1128.52 1212.21 L1127.94 1212.21 L1127.35 1212.21 L1126.76 1212.21 L1126.18 1212.21 L1125.59 1212.21 L1125.01 1212.21 L1124.42 1212.21 L1123.83 1212.21 L1123.25 1212.21 L1122.66 1212.21 L1122.07 1212.21 L1121.49 1212.21 L1120.9 1212.21 L1120.31 1212.21 L1119.73 1212.21 L1119.14 1212.21 L1118.55 1212.21 L1117.97 1212.21 L1117.38 1212.21 L1116.8 1212.21 L1116.21 1212.21 L1115.62 1212.21 L1115.04 1212.21 L1114.45 1212.21 L1113.86 1212.21 L1113.28 1212.21 L1112.69 1212.21 L1112.1 1212.21 L1111.52 1212.21 L1110.93 1212.21 L1110.34 1212.21 L1109.76 1212.21 L1109.17 1212.21 L1108.59 1212.21 L1108 1212.21 L1107.41 1212.21 L1106.83 1212.21 L1106.24 1212.21 L1105.65 1212.21 L1105.07 1212.21 L1104.48 1212.21 L1103.89 1212.21 L1103.31 1212.21 L1102.72 1212.21 L1102.14 1212.21 L1101.55 1212.21 L1100.96 1212.21 L1100.38 1212.21 L1099.79 1212.21 L1099.2 1212.21 L1098.62 1212.21 L1098.03 1212.21 L1097.44 1212.21 L1096.86 1212.21 L1096.27 1212.21 L1095.68 1212.21 L1095.1 1212.21 L1094.51 1212.21 L1093.93 1212.21 L1093.34 1212.21 L1092.75 1212.21 L1092.17 1212.21 L1091.58 1212.21 L1090.99 1212.21 L1090.41 1212.21 L1089.82 1212.21 L1089.23 1212.21 L1088.65 1212.21 L1088.06 1212.21 L1087.47 1212.21 L1086.89 1212.21 L1086.3 1212.21 L1085.72 1212.21 L1085.13 1212.21 L1084.54 1212.21 L1083.96 1212.21 L1083.37 1212.21 L1082.78 1212.21 L1082.2 1212.21 L1081.61 1212.21 L1081.02 1212.21 L1080.44 1212.21 L1079.85 1212.21 L1079.26 1212.21 L1078.68 1212.21 L1078.09 1212.21 L1077.51 1212.21 L1076.92 1212.21 L1076.33 1212.21 L1075.75 1212.21 L1075.16 1212.21 L1074.57 1212.21 L1073.99 1212.21 L1073.4 1212.21 L1072.81 1212.21 L1072.23 1212.21 L1071.64 1212.21 L1071.06 1212.21 L1070.47 1212.21 L1069.88 1212.21 L1069.3 1212.21 L1068.71 1212.21 L1068.12 1212.21 L1067.54 1212.21 L1066.95 1212.21 L1066.36 1212.21 L1065.78 1212.21 L1065.19 1212.21 L1064.6 1212.21 L1064.02 1212.21 L1063.43 1212.21 L1062.85 1212.21 L1062.26 1212.21 L1061.67 1212.21 L1061.09 1212.21 L1060.5 1212.21 L1059.91 1212.21 L1059.33 1212.21 L1058.74 1212.21 L1058.15 1212.21 L1057.57 1212.21 L1056.98 1212.21 L1056.39 1212.21 L1055.81 1212.21 L1055.22 1212.21 L1054.64 1212.21 L1054.05 1212.21 L1053.46 1212.21 L1052.88 1212.21 L1052.29 1212.21 L1051.7 1212.21 L1051.12 1212.21 L1050.53 1212.21 L1049.94 1212.21 L1049.36 1212.21 L1048.77 1212.21 L1048.19 1212.21 L1047.6 1212.21 L1047.01 1212.21 L1046.43 1212.21 L1045.84 1212.21 L1045.25 1212.21 L1044.67 1212.21 L1044.08 1212.21 L1043.49 1212.21 L1042.91 1212.21 L1042.32 1212.21 L1041.73 1212.21 L1041.15 1212.21 L1040.56 1212.21 L1039.98 1212.21 L1039.39 1212.21 L1038.8 1212.21 L1038.22 1212.21 L1037.63 1212.21 L1037.04 1212.21 L1036.46 1212.21 L1035.87 1212.21 L1035.28 1212.21 L1034.7 1212.21 L1034.11 1212.21 L1033.52 1212.21 L1032.94 1212.21 L1032.35 1212.21 L1031.77 1212.21 L1031.18 1212.21 L1030.59 1212.21 L1030.01 1212.21 L1029.42 1212.21 L1028.83 1212.21 L1028.25 1212.21 L1027.66 1212.21 L1027.07 1212.21 L1026.49 1212.21 L1025.9 1212.21 L1025.32 1212.21 L1024.73 1212.21 L1024.14 1212.21 L1023.56 1212.21 L1022.97 1212.21 L1022.38 1212.21 L1021.8 1212.21 L1021.21 1212.21 L1020.62 1212.21 L1020.04 1212.21 L1019.45 1212.21 L1018.86 1212.21 L1018.28 1212.21 L1017.69 1212.21 L1017.11 1212.21 L1016.52 1212.21 L1015.93 1212.21 L1015.35 1212.21 L1014.76 1212.21 L1014.17 1212.21 L1013.59 1212.21 L1013 1212.21 L1012.41 1212.21 L1011.83 1212.21 L1011.24 1212.21 L1010.65 1212.21 L1010.07 1212.21 L1009.48 1212.21 L1008.9 1212.21 L1008.31 1212.21 L1007.72 1212.21 L1007.14 1212.21 L1006.55 1212.21 L1005.96 1212.21 L1005.38 1212.21 L1004.79 1212.21 L1004.2 1212.21 L1003.62 1212.21 L1003.03 1212.21 L1002.44 1212.21 L1001.86 1212.21 L1001.27 1212.21 L1000.69 1212.21 L1000.1 1212.21 L999.513 1212.21 L998.926 1212.21 L998.34 1212.21 L997.754 1212.21 L997.167 1212.21 L996.581 1212.21 L995.994 1212.21 L995.408 1212.21 L994.822 1212.21 L994.235 1212.21 L993.649 1212.21 L993.062 1212.21 L992.476 1212.21 L991.889 1212.21 L991.303 1212.21 L990.717 1212.21 L990.13 1212.21 L989.544 1212.21 L988.957 1212.21 L988.371 1212.21 L987.785 1212.21 L987.198 1212.21 L986.612 1212.21 L986.025 1212.21  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.28 986.612,1212.28 987.198,1212.28 987.785,1212.28 988.371,1212.28 988.957,1212.28 989.544,1212.28 990.13,1212.28 990.717,1212.28 991.303,1212.28 991.889,1212.28 992.476,1212.28 993.062,1212.28 993.649,1212.28 994.235,1212.28 994.822,1212.28 995.408,1212.28 995.994,1212.28 996.581,1212.28 997.167,1212.28 997.754,1212.28 998.34,1212.28 998.926,1212.28 999.513,1212.28 1000.1,1212.28 1000.69,1212.28 1001.27,1212.28 1001.86,1212.28 1002.44,1212.28 1003.03,1212.28 1003.62,1212.28 1004.2,1212.28 1004.79,1212.28 1005.38,1212.28 1005.96,1212.28 1006.55,1212.28 1007.14,1212.28 1007.72,1212.28 1008.31,1212.28 1008.9,1212.28 1009.48,1212.28 1010.07,1212.28 1010.65,1212.28 1011.24,1212.28 1011.83,1212.28 1012.41,1212.28 1013,1212.28 1013.59,1212.28 1014.17,1212.28 1014.76,1212.28 1015.35,1212.28 1015.93,1212.28 1016.52,1212.28 1017.11,1212.28 1017.69,1212.28 1018.28,1212.28 1018.86,1212.28 1019.45,1212.28 1020.04,1212.28 1020.62,1212.28 1021.21,1212.28 1021.8,1212.28 1022.38,1212.28 1022.97,1212.28 1023.56,1212.28 1024.14,1212.28 1024.73,1212.28 1025.32,1212.28 1025.9,1212.28 1026.49,1212.28 1027.07,1212.28 1027.66,1212.28 1028.25,1212.28 1028.83,1212.28 1029.42,1212.28 1030.01,1212.28 1030.59,1212.28 1031.18,1212.28 1031.77,1212.28 1032.35,1212.28 1032.94,1212.28 1033.52,1212.28 1034.11,1212.28 1034.7,1212.28 1035.28,1212.28 1035.87,1212.28 1036.46,1212.28 1037.04,1212.28 1037.63,1212.28 1038.22,1212.28 1038.8,1212.28 1039.39,1212.28 1039.98,1212.28 1040.56,1212.28 1041.15,1212.28 1041.73,1212.28 1042.32,1212.28 1042.91,1212.28 1043.49,1212.28 1044.08,1212.28 1044.67,1212.28 1045.25,1212.28 1045.84,1212.28 1046.43,1212.28 1047.01,1212.28 1047.6,1212.28 1048.19,1212.28 1048.77,1212.28 1049.36,1212.28 1049.94,1212.28 1050.53,1212.28 1051.12,1212.28 1051.7,1212.28 1052.29,1212.28 1052.88,1212.28 1053.46,1212.28 1054.05,1212.28 1054.64,1212.28 1055.22,1212.28 1055.81,1212.28 1056.39,1212.28 1056.98,1212.28 1057.57,1212.28 1058.15,1212.28 1058.74,1212.28 1059.33,1212.28 1059.91,1212.28 1060.5,1212.28 1061.09,1212.28 1061.67,1212.28 1062.26,1212.28 1062.85,1212.28 1063.43,1212.28 1064.02,1212.28 1064.6,1212.28 1065.19,1212.28 1065.78,1212.28 1066.36,1212.28 1066.95,1212.28 1067.54,1212.28 1068.12,1212.28 1068.71,1212.28 1069.3,1212.28 1069.88,1212.28 1070.47,1212.28 1071.06,1212.28 1071.64,1212.28 1072.23,1212.28 1072.81,1212.28 1073.4,1212.28 1073.99,1212.28 1074.57,1212.28 1075.16,1212.28 1075.75,1212.28 1076.33,1212.28 1076.92,1212.28 1077.51,1212.28 1078.09,1212.28 1078.68,1212.28 1079.26,1212.28 1079.85,1212.28 1080.44,1212.28 1081.02,1212.28 1081.61,1212.28 1082.2,1212.28 1082.78,1212.28 1083.37,1212.28 1083.96,1212.28 1084.54,1212.28 1085.13,1212.28 1085.72,1212.28 1086.3,1212.28 1086.89,1212.28 1087.47,1212.28 1088.06,1212.28 1088.65,1212.28 1089.23,1212.28 1089.82,1212.28 1090.41,1212.28 1090.99,1212.28 1091.58,1212.28 1092.17,1212.28 1092.75,1212.28 1093.34,1212.28 1093.93,1212.28 1094.51,1212.28 1095.1,1212.28 1095.68,1212.28 1096.27,1212.28 1096.86,1212.28 1097.44,1212.28 1098.03,1212.28 1098.62,1212.28 1099.2,1212.28 1099.79,1212.28 1100.38,1212.28 1100.96,1212.28 1101.55,1212.28 1102.14,1212.28 1102.72,1212.28 1103.31,1212.28 1103.89,1212.28 1104.48,1212.28 1105.07,1212.28 1105.65,1212.28 1106.24,1212.28 1106.83,1212.28 1107.41,1212.28 1108,1212.28 1108.59,1212.28 1109.17,1212.28 1109.76,1212.28 1110.34,1212.28 1110.93,1212.28 1111.52,1212.28 1112.1,1212.28 1112.69,1212.28 1113.28,1212.28 1113.86,1212.28 1114.45,1212.28 1115.04,1212.28 1115.62,1212.28 1116.21,1212.28 1116.8,1212.28 1117.38,1212.28 1117.97,1212.28 1118.55,1212.28 1119.14,1212.28 1119.73,1212.28 1120.31,1212.28 1120.9,1212.28 1121.49,1212.28 1122.07,1212.28 1122.66,1212.28 1123.25,1212.28 1123.83,1212.28 1124.42,1212.28 1125.01,1212.28 1125.59,1212.28 1126.18,1212.28 1126.76,1212.28 1127.35,1212.28 1127.94,1212.28 1128.52,1212.28 1129.11,1212.28 1129.7,1212.28 1130.28,1212.28 1130.87,1212.28 1131.46,1212.28 1132.04,1212.28 1132.63,1212.28 1133.21,1212.28 1133.8,1212.28 1134.39,1212.28 1134.97,1212.28 1135.56,1212.28 1136.15,1212.28 1136.73,1212.28 1137.32,1212.28 1137.91,1212.28 1138.49,1212.28 1139.08,1212.28 1139.67,1212.28 1140.25,1212.28 1140.84,1212.28 1141.42,1212.28 1142.01,1212.28 1142.6,1212.28 1143.18,1212.28 1143.77,1212.28 1144.36,1212.28 1144.94,1212.28 1145.53,1212.28 1146.12,1212.28 1146.7,1212.28 1147.29,1212.28 1147.88,1212.28 1148.46,1212.28 1149.05,1212.28 1149.63,1212.28 1150.22,1212.28 1150.81,1212.28 1151.39,1212.28 1151.98,1212.28 1152.57,1212.28 1153.15,1212.28 1153.74,1212.28 1154.33,1212.28 1154.91,1212.28 1155.5,1212.28 1156.09,1212.28 1156.67,1212.28 1157.26,1212.28 1157.84,1212.28 1158.43,1212.28 1159.02,1212.28 1159.6,1212.28 1160.19,1212.28 1160.78,1212.28 1161.36,1212.28 1161.95,1212.28 1162.54,1212.28 1163.12,1212.28 1163.71,1212.28 1164.29,1212.28 1164.88,1212.28 1165.47,1212.28 1166.05,1212.28 1166.64,1212.28 1167.23,1212.28 1167.81,1212.28 1168.4,1212.28 1168.99,1212.28 1169.57,1212.28 1170.16,1212.28 1170.75,1212.28 1171.33,1212.28 1171.92,1212.28 1172.5,1212.28 1173.09,1212.28 1173.68,1212.28 1174.26,1212.28 1174.85,1212.28 1175.44,1212.28 1176.02,1212.28 1176.61,1212.28 1177.2,1212.28 1177.78,1212.28 1178.37,1212.28 1178.96,1212.28 1179.54,1212.28 1180.13,1212.28 1180.71,1212.28 1181.3,1212.28 1181.89,1212.28 1182.47,1212.28 1183.06,1212.28 1183.65,1212.28 1184.23,1212.28 1184.82,1212.28 1185.41,1212.28 1185.99,1212.28 1186.58,1212.28 1187.16,1212.28 1187.75,1212.28 1188.34,1212.28 1188.92,1212.28 1189.51,1212.28 1190.1,1212.28 1190.68,1212.28 1191.27,1212.28 1191.86,1212.28 1192.44,1212.28 1193.03,1212.28 1193.62,1212.28 1194.2,1212.28 1194.79,1212.28 1195.37,1212.28 1195.96,1212.28 1196.55,1212.28 1197.13,1212.28 1197.72,1212.28 1198.31,1212.28 1198.89,1212.28 1199.48,1212.28 1200.07,1212.28 1200.65,1212.28 1201.24,1212.28 1201.83,1212.28 1202.41,1212.28 1203,1212.28 1203.58,1212.28 1204.17,1212.28 1204.76,1212.28 1205.34,1212.28 1205.93,1212.28 1206.52,1212.28 1207.1,1212.28 1207.69,1212.28 1208.28,1212.28 1208.86,1212.28 1209.45,1212.28 1210.03,1212.28 1210.62,1212.28 1211.21,1212.28 1211.79,1212.28 1212.38,1212.28 1212.97,1212.28 1213.55,1212.28 1214.14,1212.28 1214.73,1212.28 1215.31,1212.28 1215.9,1212.28 1216.49,1212.28 1217.07,1212.28 1217.66,1212.28 1218.24,1212.28 1218.83,1212.28 1219.42,1212.28 1220,1212.28 1220.59,1212.28 1221.18,1212.28 1221.76,1212.28 1222.35,1212.28 1222.94,1212.28 1223.52,1212.28 1224.11,1212.28 1224.7,1212.28 1225.28,1212.28 1225.87,1212.28 1226.45,1212.28 1227.04,1212.28 1227.63,1212.28 1228.21,1212.28 1228.8,1212.28 1229.39,1212.28 1229.97,1212.28 1230.56,1212.28 1231.15,1212.28 1231.73,1212.28 1232.32,1212.28 1232.91,1212.28 1233.49,1212.28 1234.08,1212.28 1234.66,1212.28 1235.25,1212.28 1235.84,1212.28 1236.42,1212.28 1237.01,1212.28 1237.6,1212.28 1238.18,1212.28 1238.77,1212.28 1239.36,1212.28 1239.94,1212.28 1240.53,1212.28 1241.11,1212.28 1241.7,1212.28 1242.29,1212.28 1242.87,1212.28 1243.46,1212.28 1244.05,1212.28 1244.63,1212.28 1245.22,1212.28 1245.81,1212.28 1246.39,1212.28 1246.98,1212.28 1247.57,1212.28 1248.15,1212.28 1248.74,1212.28 1249.32,1212.28 1249.91,1212.28 1250.5,1212.28 1251.08,1212.28 1251.67,1212.28 1252.26,1212.28 1252.84,1212.28 1253.43,1212.28 1254.02,1212.28 1254.6,1212.28 1255.19,1212.28 1255.78,1212.28 1256.36,1212.28 1256.95,1212.28 1257.53,1212.28 1258.12,1212.28 1258.71,1212.28 1259.29,1212.28 1259.88,1212.28 1260.47,1212.28 1261.05,1212.28 1261.64,1212.28 1262.23,1212.28 1262.81,1212.28 1263.4,1212.28 1263.98,1212.28 1264.57,1212.28 1265.16,1212.28 1265.74,1212.28 1266.33,1212.28 1266.92,1212.28 1267.5,1212.28 1268.09,1212.28 1268.68,1212.28 1269.26,1212.28 1269.85,1212.28 1270.44,1212.28 1271.02,1212.28 1271.61,1212.28 1272.19,1212.28 1272.78,1212.28 1273.37,1212.28 1273.95,1212.28 1274.54,1212.28 1275.13,1212.28 1275.71,1212.28 1276.3,1212.28 1276.89,1212.28 1277.47,1212.28 1278.06,1212.28 1278.65,1212.28 1279.23,1212.28 1279.82,1212.28 1280.4,1212.28 1280.99,1212.28 1281.58,1212.28 1282.16,1212.28 1282.75,1212.28 1283.34,1212.28 1283.92,1212.28 1284.51,1212.28 1285.1,1212.28 1285.68,1212.28 1286.27,1212.28 1286.86,1212.28 1287.44,1212.28 1288.03,1212.28 1288.61,1212.28 1289.2,1212.28 1289.79,1212.28 1290.37,1212.28 1290.96,1212.28 1291.55,1212.28 1292.13,1212.28 1292.72,1212.28 1293.31,1212.28 1293.89,1212.28 1294.48,1212.28 1295.06,1212.28 1295.65,1212.28 1296.24,1212.28 1296.82,1212.28 1297.41,1212.28 1298,1212.28 1298.58,1212.28 1299.17,1212.28 1299.76,1212.28 1300.34,1212.28 1300.93,1212.28 1301.52,1212.28 1302.1,1212.28 1302.69,1212.28 1303.27,1212.28 1303.86,1212.28 1304.45,1212.28 1305.03,1212.28 1305.62,1212.28 1306.21,1212.28 1306.79,1212.28 1307.38,1212.28 1307.97,1212.28 1308.55,1212.28 1309.14,1212.28 1309.73,1212.28 1310.31,1212.28 1310.9,1212.28 1311.48,1212.28 1312.07,1212.28 1312.66,1212.28 1313.24,1212.28 1313.83,1212.28 1314.42,1212.28 1315,1212.28 1315.59,1212.28 1316.18,1212.28 1316.76,1212.28 1317.35,1212.28 1317.93,1212.28 1318.52,1212.28 1319.11,1212.28 1319.69,1212.28 1320.28,1212.28 1320.87,1212.28 1321.45,1212.28 1322.04,1212.28 1322.63,1212.28 1323.21,1212.28 1323.8,1212.28 1324.39,1212.28 1324.97,1212.28 1325.56,1212.28 1326.14,1212.28 1326.73,1212.28 1327.32,1212.28 1327.9,1212.28 1328.49,1212.28 1329.08,1212.28 1329.66,1212.28 1330.25,1212.28 1330.84,1212.28 1331.42,1212.28 1332.01,1212.28 1332.6,1212.28 1333.18,1212.28 1333.77,1212.28 1334.35,1212.28 1334.94,1212.28 1335.53,1212.28 1336.11,1212.28 1336.7,1212.28 1337.29,1212.28 1337.87,1212.28 1338.46,1212.28 1339.05,1212.28 1339.63,1212.28 1340.22,1212.28 1340.8,1212.28 1341.39,1212.28 1341.98,1212.28 1342.56,1212.28 1343.15,1212.28 1343.74,1212.28 1344.32,1212.28 1344.91,1212.28 1345.5,1212.28 1346.08,1212.28 1346.67,1212.28 1347.26,1212.28 1347.84,1212.28 1348.43,1212.28 1349.01,1212.28 1349.6,1212.28 1350.19,1212.28 1350.77,1212.28 1351.36,1212.28 1351.95,1212.28 1352.53,1212.28 1353.12,1212.28 1353.71,1212.28 1354.29,1212.28 1354.88,1212.28 1355.47,1212.28 1356.05,1212.28 1356.64,1212.28 1357.22,1212.28 1357.81,1212.28 1358.4,1212.28 1358.98,1212.28 1359.57,1212.28 1360.16,1212.28 1360.74,1212.28 1361.33,1212.28 1361.92,1212.28 1362.5,1212.28 1363.09,1212.28 1363.68,1212.28 1364.26,1212.28 1364.85,1212.28 1365.43,1212.28 1366.02,1212.28 1366.61,1212.28 1367.19,1212.28 1367.78,1212.28 1368.37,1212.28 1368.95,1212.28 1369.54,1212.28 1370.13,1212.28 1370.71,1212.28 1371.3,1212.28 1371.88,1212.28 1372.47,1212.28 1373.06,1212.28 1373.64,1212.28 1374.23,1212.28 1374.82,1212.28 1375.4,1212.28 1375.99,1212.28 1376.58,1212.28 1377.16,1212.28 1377.75,1212.28 1378.34,1212.28 1378.92,1212.28 1379.51,1212.28 1380.09,1212.28 1380.68,1212.28 1381.27,1212.28 1381.85,1212.28 1382.44,1212.28 1383.03,1212.28 1383.61,1212.28 1384.2,1212.28 1384.79,1212.28 1385.37,1212.28 1385.96,1212.28 1386.55,1212.28 1387.13,1212.28 1387.72,1212.28 1388.3,1212.28 1388.89,1212.28 1389.48,1212.28 1390.06,1212.28 1390.65,1212.28 1391.24,1212.28 1391.82,1212.28 1392.41,1212.28 1393,1212.28 1393.58,1212.28 1394.17,1212.28 1394.75,1212.28 1395.34,1212.28 1395.93,1212.28 1396.51,1212.28 1397.1,1212.28 1397.69,1212.28 1398.27,1212.28 1398.86,1212.28 1399.45,1212.28 1400.03,1212.28 1400.62,1212.28 1401.21,1212.28 1401.79,1212.28 1402.38,1212.28 1402.96,1212.28 1403.55,1212.28 1404.14,1212.28 1404.72,1212.28 1405.31,1212.28 1405.9,1212.28 1406.48,1212.28 1407.07,1212.28 1407.66,1212.28 1408.24,1212.28 1408.83,1212.28 1409.42,1212.28 1410,1212.28 1410.59,1212.28 1411.17,1212.28 1411.76,1212.28 1412.35,1212.28 1412.93,1212.28 1413.52,1212.28 1414.11,1212.28 1414.69,1212.28 1415.28,1212.28 1415.87,1212.28 1416.45,1212.28 1417.04,1212.28 1417.63,1212.28 1418.21,1212.28 1418.8,1212.28 1419.38,1212.28 1419.97,1212.28 1420.56,1212.28 1421.14,1212.28 1421.73,1212.28 1422.32,1212.28 1422.9,1212.28 1423.49,1212.28 1424.08,1212.28 1424.66,1212.28 1425.25,1212.28 1425.83,1212.28 1426.42,1212.28 1427.01,1212.28 1427.59,1212.28 1428.18,1212.28 1428.77,1212.28 1429.35,1212.28 1429.94,1212.28 1430.53,1212.28 1431.11,1212.28 1431.7,1212.28 1432.29,1212.28 1432.87,1212.28 1433.46,1212.28 1434.04,1212.28 1434.63,1212.28 1435.22,1212.28 1435.8,1212.28 1436.39,1212.28 1436.98,1212.28 1437.56,1212.28 1438.15,1212.28 1438.74,1212.28 1439.32,1212.28 1439.91,1212.28 1440.5,1212.28 1441.08,1212.28 1441.67,1212.28 1442.25,1212.28 1442.84,1212.28 1443.43,1212.28 1444.01,1212.28 1444.6,1212.28 1445.19,1212.28 1445.77,1212.28 1446.36,1212.28 1446.95,1212.28 1447.53,1212.28 1448.12,1212.28 1448.7,1212.28 1449.29,1212.28 1449.88,1212.28 1450.46,1212.28 1451.05,1212.28 1451.64,1212.28 1452.22,1212.28 1452.81,1212.28 1453.4,1212.28 1453.98,1212.28 1454.57,1212.28 1455.16,1212.28 1455.74,1212.28 1456.33,1212.28 1456.91,1212.28 1457.5,1212.28 1458.09,1212.28 1458.67,1212.28 1459.26,1212.28 1459.85,1212.28 1460.43,1212.28 1461.02,1212.28 1461.61,1212.28 1462.19,1212.28 1462.78,1212.28 1463.37,1212.28 1463.95,1212.28 1464.54,1212.28 1465.12,1212.28 1465.71,1212.28 1466.3,1212.28 1466.88,1212.28 1467.47,1212.28 1468.06,1212.28 1468.64,1212.28 1469.23,1212.28 1469.82,1212.28 1470.4,1212.28 1470.99,1212.28 1471.57,1212.28 1472.16,1212.28 1472.75,1212.28 1473.33,1212.28 1473.92,1212.28 1474.51,1212.28 1475.09,1212.28 1475.68,1212.28 1476.27,1212.28 1476.85,1212.28 1477.44,1212.28 1478.03,1212.28 1478.61,1212.28 1479.2,1212.28 1479.78,1212.28 1480.37,1212.28 1480.96,1212.28 1481.54,1212.28 1482.13,1212.28 1482.72,1212.28 1483.3,1212.28 1483.89,1212.28 1484.48,1212.28 1485.06,1212.28 1485.65,1212.28 1486.24,1212.28 1486.82,1212.28 1487.41,1212.28 1487.99,1212.28 1488.58,1212.28 1489.17,1212.28 1489.75,1212.28 1490.34,1212.28 1490.93,1212.28 1491.51,1212.28 1492.1,1212.28 1492.69,1212.28 1493.27,1212.28 1493.86,1212.28 1494.45,1212.28 1495.03,1212.28 1495.62,1212.28 1496.2,1212.28 1496.79,1212.28 1497.38,1212.28 1497.96,1212.28 1498.55,1212.28 1499.14,1212.28 1499.72,1212.28 1500.31,1212.28 1500.9,1212.28 1501.48,1212.28 1502.07,1212.28 1502.65,1212.28 1503.24,1212.28 1503.83,1212.28 1504.41,1212.28 1505,1212.28 1505.59,1212.28 1506.17,1212.28 1506.76,1212.28 1507.35,1212.28 1507.93,1212.28 1508.52,1212.28 1509.11,1212.28 1509.69,1212.28 1510.28,1212.28 1510.86,1212.28 1511.45,1212.28 1512.04,1212.28 1512.62,1212.28 1513.21,1212.28 1513.8,1212.28 1514.38,1212.28 1514.97,1212.28 1515.56,1212.28 1516.14,1212.28 1516.73,1212.28 1517.32,1212.28 1517.9,1212.28 1518.49,1212.28 1519.07,1212.28 1519.66,1212.28 1520.25,1212.28 1520.83,1212.28 1521.42,1212.28 1522.01,1212.28 1522.59,1212.28 1523.18,1212.28 1523.77,1212.28 1524.35,1212.28 1524.94,1212.28 1525.52,1212.28 1526.11,1212.28 1526.7,1212.28 1527.28,1212.28 1527.87,1212.28 1528.46,1212.28 1529.04,1212.28 1529.63,1212.28 1530.22,1212.28 1530.8,1212.28 1531.39,1212.28 1531.98,1212.28 1532.56,1212.28 1533.15,1212.28 1533.73,1212.28 1534.32,1212.28 1534.91,1212.28 1535.49,1212.28 1536.08,1212.28 1536.67,1212.28 1537.25,1212.28 1537.84,1212.28 1538.43,1212.28 1539.01,1212.28 1539.6,1212.28 1540.19,1212.28 1540.77,1212.28 1541.36,1212.28 1541.94,1212.28 1542.53,1212.28 1543.12,1212.28 1543.7,1212.28 1544.29,1212.28 1544.88,1212.28 1545.46,1212.28 1546.05,1212.28 1546.64,1212.28 1547.22,1212.28 1547.81,1212.28 1548.4,1212.28 1548.98,1212.28 1549.57,1212.28 1550.15,1212.28 1550.74,1212.28 1551.33,1212.28 1551.91,1212.28 1552.5,1212.28 1553.09,1212.28 1553.67,1212.28 1554.26,1212.28 1554.85,1212.28 1555.43,1212.28 1556.02,1212.28 1556.6,1212.28 1557.19,1212.28 1557.78,1212.28 1558.36,1212.28 1558.95,1212.28 1559.54,1212.28 1560.12,1212.28 1560.71,1212.28 1561.3,1212.28 1561.88,1212.28 1562.47,1212.28 1563.06,1212.28 1563.64,1212.28 1564.23,1212.28 1564.81,1212.28 1565.4,1212.28 1565.99,1212.28 1566.57,1212.28 1567.16,1212.28 1567.75,1212.28 1568.33,1212.28 1568.92,1212.28 1569.51,1212.28 1570.09,1212.28 1570.68,1212.28 1571.27,1212.28 1571.85,1212.28 1572.44,1212.28 1573.02,1212.28 1573.61,1212.28 1574.2,1212.28 1574.78,1212.28 1575.37,1212.28 1575.96,1212.28 1576.54,1212.28 1577.13,1212.28 1577.72,1212.28 1578.3,1212.28 1578.89,1212.28 1579.47,1212.28 1580.06,1212.28 1580.65,1212.28 1581.23,1212.28 1581.82,1212.28 1582.41,1212.28 1582.99,1212.28 1583.58,1212.28 1584.17,1212.28 1584.75,1212.28 1585.34,1212.28 1585.93,1212.28 1586.51,1212.28 1587.1,1212.28 1587.68,1212.28 1588.27,1212.28 1588.86,1212.28 1589.44,1212.28 1590.03,1212.28 1590.62,1212.28 1591.2,1212.28 1591.79,1212.28 1592.38,1212.28 1592.96,1212.28 1593.55,1212.28 1594.14,1212.28 1594.72,1212.28 1595.31,1212.28 1595.89,1212.28 1596.48,1212.28 1597.07,1212.28 1597.65,1212.28 1598.24,1212.28 1598.83,1212.28 1599.41,1212.28 1600,1212.28 1600.59,1212.28 1601.17,1212.28 1601.76,1212.28 1602.34,1212.28 1602.93,1212.28 1603.52,1212.28 1604.1,1212.28 1604.69,1212.28 1605.28,1212.28 1605.86,1212.28 1606.45,1212.28 1607.04,1212.28 1607.62,1212.28 1608.21,1212.28 1608.8,1212.28 1609.38,1212.28 1609.97,1212.28 1610.55,1212.28 1611.14,1212.28 1611.73,1212.28 1612.31,1212.28 1612.9,1212.28 1613.49,1212.28 1614.07,1212.28 1614.66,1212.28 1615.25,1212.28 1615.83,1212.28 1616.42,1212.28 1617.01,1212.28 1617.59,1212.28 1618.18,1212.28 1618.76,1212.28 1619.35,1212.28 1619.94,1212.28 1620.52,1212.28 1621.11,1212.28 1621.7,1212.28 1622.28,1212.28 1622.87,1212.28 1623.46,1212.28 1624.04,1212.28 1624.63,1212.28 1625.22,1212.28 1625.8,1212.28 1626.39,1212.28 1626.97,1212.28 1627.56,1212.28 1628.15,1212.28 1628.73,1212.28 1629.32,1212.28 1629.91,1212.28 1630.49,1212.28 1631.08,1212.28 1631.67,1212.28 1632.25,1212.28 1632.84,1212.28 1633.42,1212.28 1634.01,1212.28 1634.6,1212.28 1635.18,1212.28 1635.77,1212.28 1636.36,1212.28 1636.94,1212.28 1637.53,1212.28 1638.12,1212.28 1638.7,1212.28 1639.29,1212.28 1639.88,1212.28 1640.46,1212.28 1641.05,1212.28 1641.63,1212.28 1642.22,1212.28 1642.81,1212.28 1643.39,1212.28 1643.98,1212.28 1644.57,1212.28 1645.15,1212.28 1645.74,1212.28 1646.33,1212.28 1646.91,1212.28 1647.5,1212.28 1648.09,1212.28 1648.67,1212.28 1649.26,1212.28 1649.84,1212.28 1650.43,1212.28 1651.02,1212.28 1651.6,1212.28 1652.19,1212.28 1652.78,1212.28 1653.36,1212.28 1653.95,1212.28 1654.54,1212.28 1655.12,1212.28 1655.71,1212.28 1656.29,1212.28 1656.88,1212.28 1657.47,1212.28 1658.05,1212.28 1658.64,1212.28 1659.23,1212.28 1659.81,1212.28 1660.4,1212.28 1660.99,1212.28 1661.57,1212.28 1662.16,1212.28 1662.75,1212.28 1663.33,1212.28 1663.92,1212.28 1664.5,1212.28 1665.09,1212.28 1665.68,1212.28 1666.26,1212.28 1666.85,1212.28 1667.44,1212.28 1668.02,1212.28 1668.61,1212.28 1669.2,1212.28 1669.78,1212.28 1670.37,1212.28 1670.96,1212.28 1671.54,1212.28 1672.13,1212.28 1672.71,1212.28 1673.3,1212.28 1673.89,1212.28 1674.47,1212.28 1675.06,1212.28 1675.65,1212.28 1676.23,1212.28 1676.82,1212.28 1677.41,1212.28 1677.99,1212.28 1678.58,1212.28 1679.17,1212.28 1679.75,1212.28 1680.34,1212.28 1680.92,1212.28 1681.51,1212.28 1682.1,1212.28 1682.68,1212.28 1683.27,1212.28 1683.86,1212.28 1684.44,1212.28 1685.03,1212.28 1685.62,1212.28 1686.2,1212.28 1686.79,1212.28 1687.37,1212.28 1687.96,1212.28 1688.55,1212.28 1689.13,1212.28 1689.72,1212.28 1690.31,1212.28 1690.89,1212.28 1691.48,1212.28 1692.07,1212.28 1692.65,1212.28 1693.24,1212.28 1693.83,1212.28 1694.41,1212.28 1695,1212.28 1695.58,1212.28 1696.17,1212.28 1696.76,1212.28 1697.34,1212.28 1697.93,1212.28 1698.52,1212.28 1699.1,1212.28 1699.69,1212.28 1700.28,1212.28 1700.86,1212.28 1701.45,1212.28 1702.04,1212.28 1702.62,1212.28 1703.21,1212.28 1703.79,1212.28 1704.38,1212.28 1704.97,1212.28 1705.55,1212.28 1706.14,1212.28 1706.73,1212.28 1707.31,1212.28 1707.9,1212.28 1708.49,1212.28 1709.07,1212.28 1709.66,1212.28 1710.24,1212.28 1710.83,1212.28 1711.42,1212.28 1712,1212.28 1712.59,1212.28 1713.18,1212.28 1713.76,1212.28 1714.35,1212.28 1714.94,1212.28 1715.52,1212.28 1716.11,1212.28 1716.7,1212.28 1717.28,1212.28 1717.87,1212.28 1718.45,1212.28 1719.04,1212.28 1719.63,1212.28 1720.21,1212.28 1720.8,1212.28 1721.39,1212.28 1721.97,1212.28 1722.56,1212.28 1723.15,1212.28 1723.73,1212.28 1724.32,1212.28 1724.91,1212.28 1725.49,1212.28 1726.08,1212.28 1726.66,1212.28 1727.25,1212.28 1727.84,1212.28 1728.42,1212.28 1729.01,1212.28 1729.6,1212.28 1730.18,1212.28 1730.77,1212.28 1731.36,1212.28 1731.94,1212.28 1732.53,1212.28 1733.11,1212.28 1733.7,1212.28 1734.29,1212.28 1734.87,1212.28 1735.46,1212.28 1736.05,1212.28 1736.63,1212.28 1737.22,1212.28 1737.81,1212.28 1738.39,1212.28 1738.98,1212.28 1739.57,1212.28 1740.15,1212.28 1740.74,1212.28 1741.32,1212.28 1741.91,1212.28 1742.5,1212.28 1743.08,1212.28 1743.67,1212.28 1744.26,1212.28 1744.84,1212.28 1745.43,1212.28 1746.02,1212.28 1746.6,1212.28 1747.19,1212.28 1747.78,1212.28 1748.36,1212.28 1748.95,1212.28 1749.53,1212.28 1750.12,1212.28 1750.71,1212.28 1751.29,1212.28 1751.88,1212.28 1752.47,1212.28 1753.05,1212.28 1753.64,1212.28 1754.23,1212.28 1754.81,1212.28 1755.4,1212.28 1755.99,1212.28 1756.57,1212.28 1757.16,1212.28 1757.74,1212.28 1758.33,1212.28 1758.92,1212.28 1759.5,1212.28 1760.09,1212.28 1760.68,1212.28 1761.26,1212.28 1761.85,1212.28 1762.44,1212.28 1763.02,1212.28 1763.61,1212.28 1764.19,1212.28 1764.78,1212.28 1765.37,1212.28 1765.95,1212.28 1766.54,1212.28 1767.13,1212.28 1767.71,1212.28 1768.3,1212.28 1768.89,1212.28 1769.47,1212.28 1770.06,1212.28 1770.65,1212.28 1771.23,1212.28 1771.82,1212.28 1772.4,1212.28 1772.99,1212.28 1773.58,1212.28 1774.16,1212.28 1774.75,1212.28 1775.34,1212.28 1775.92,1212.28 1776.51,1212.28 1777.1,1212.28 1777.68,1212.28 1778.27,1212.28 1778.86,1212.28 1779.44,1212.28 1780.03,1212.28 1780.61,1212.28 1781.2,1212.28 1781.79,1212.28 1782.37,1212.28 1782.96,1212.28 1783.55,1212.28 1784.13,1212.28 1784.72,1212.28 1785.31,1212.28 1785.89,1212.28 1786.48,1212.28 1787.06,1212.28 1787.65,1212.28 1788.24,1212.28 1788.82,1212.28 1789.41,1212.28 1790,1212.28 1790.58,1212.28 1791.17,1212.28 1791.76,1212.28 1792.34,1212.28 1792.93,1212.28 1793.52,1212.28 1794.1,1212.28 1794.69,1212.28 1795.27,1212.28 1795.86,1212.28 1796.45,1212.28 1797.03,1212.28 1797.62,1212.28 1798.21,1212.28 1798.79,1212.28 1799.38,1212.28 1799.97,1212.28 1800.55,1212.28 1801.14,1212.28 1801.73,1212.28 1802.31,1212.28 1802.9,1212.28 1803.48,1212.28 1804.07,1212.28 1804.66,1212.28 1805.24,1212.28 1805.83,1212.28 1806.42,1212.28 1807,1212.28 1807.59,1212.28 1808.18,1212.28 1808.76,1212.28 1809.35,1212.28 1809.94,1212.28 1810.52,1212.28 1811.11,1212.28 1811.69,1212.28 1812.28,1212.28 1812.87,1212.28 1813.45,1212.28 1814.04,1212.28 1814.63,1212.28 1815.21,1212.28 1815.8,1212.28 1816.39,1212.28 1816.97,1212.28 1817.56,1212.28 1818.14,1212.28 1818.73,1212.28 1819.32,1212.28 1819.9,1212.28 1820.49,1212.28 1821.08,1212.28 1821.66,1212.28 1822.25,1212.28 1822.84,1212.28 1823.42,1212.28 1824.01,1212.28 1824.6,1212.28 1825.18,1212.28 1825.77,1212.28 1826.35,1212.28 1826.94,1212.28 1827.53,1212.28 1828.11,1212.28 1828.7,1212.28 1829.29,1212.28 1829.87,1212.28 1830.46,1212.28 1831.05,1212.28 1831.63,1212.28 1832.22,1212.28 1832.81,1212.28 1833.39,1212.28 1833.98,1212.28 1834.56,1212.28 1835.15,1212.28 1835.74,1212.28 1836.32,1212.28 1836.91,1212.28 1837.5,1212.28 1838.08,1212.28 1838.67,1212.28 1839.26,1212.28 1839.84,1212.28 1840.43,1212.28 1841.01,1212.28 1841.6,1212.28 1842.19,1212.28 1842.77,1212.28 1843.36,1212.28 1843.95,1212.28 1844.53,1212.28 1845.12,1212.28 1845.71,1212.28 1846.29,1212.28 1846.88,1212.28 1847.47,1212.28 1848.05,1212.28 1848.64,1212.28 1849.22,1212.28 1849.81,1212.28 1850.4,1212.28 1850.98,1212.28 1851.57,1212.28 1852.16,1212.28 1852.74,1212.28 1853.33,1212.28 1853.92,1212.28 1854.5,1212.28 1855.09,1212.28 1855.68,1212.28 1856.26,1212.28 1856.85,1212.28 1857.43,1212.28 1858.02,1212.28 1858.61,1212.28 1859.19,1212.28 1859.78,1212.28 1860.37,1212.28 1860.95,1212.28 1861.54,1212.28 1862.13,1212.28 1862.71,1212.28 1863.3,1212.28 1863.88,1212.28 1864.47,1212.28 1865.06,1212.28 1865.64,1212.28 1866.23,1212.28 1866.82,1212.28 1867.4,1212.28 1867.99,1212.28 1868.58,1212.28 1869.16,1212.28 1869.75,1212.28 1870.34,1212.28 1870.92,1212.28 1871.51,1212.28 1872.09,1212.28 1872.68,1212.28 1873.27,1212.28 1873.85,1212.28 1874.44,1212.28 1875.03,1212.28 1875.61,1212.28 1876.2,1212.28 1876.79,1212.28 1877.37,1212.28 1877.96,1212.28 1878.55,1212.28 1879.13,1212.28 1879.72,1212.28 1880.3,1212.28 1880.89,1212.28 1881.48,1212.28 1882.06,1212.28 1882.65,1212.28 1883.24,1212.28 1883.82,1212.28 1884.41,1212.28 1885,1212.28 1885.58,1212.28 1886.17,1212.28 1886.76,1212.28 1887.34,1212.28 1887.93,1212.28 1888.51,1212.28 1889.1,1212.28 1889.69,1212.28 1890.27,1212.28 1890.86,1212.28 1891.45,1212.28 1892.03,1212.28 1892.62,1212.28 1893.21,1212.28 1893.79,1212.28 1894.38,1212.28 1894.96,1212.28 1895.55,1212.28 1896.14,1212.28 1896.72,1212.28 1897.31,1212.28 1897.9,1212.28 1898.48,1212.28 1899.07,1212.28 1899.66,1212.28 1900.24,1212.28 1900.83,1212.28 1901.42,1212.28 1902,1212.28 1902.59,1212.28 1903.17,1212.28 1903.76,1212.28 1904.35,1212.28 1904.93,1212.28 1905.52,1212.28 1906.11,1212.28 1906.69,1212.28 1907.28,1212.28 1907.87,1212.28 1908.45,1212.28 1909.04,1212.28 1909.63,1212.28 1910.21,1212.28 1910.8,1212.28 1911.38,1212.28 1911.97,1212.28 1912.56,1212.28 1913.14,1212.28 1913.73,1212.28 1914.32,1212.28 1914.9,1212.28 1915.49,1212.28 1916.08,1212.28 1916.66,1212.28 1917.25,1212.28 1917.83,1212.28 1918.42,1212.28 1919.01,1212.28 1919.59,1212.28 1920.18,1212.28 1920.77,1212.28 1921.35,1212.28 1921.94,1212.28 1922.53,1212.28 1923.11,1212.28 1923.7,1212.28 1924.29,1212.28 1924.87,1212.28 1925.46,1212.28 1926.04,1212.28 1926.63,1212.28 1927.22,1212.28 1927.8,1212.28 1928.39,1212.28 1928.98,1212.28 1929.56,1212.28 1930.15,1212.28 1930.74,1212.28 1931.32,1212.28 1931.91,1212.28 1932.5,1212.28 1933.08,1212.28 1933.67,1212.28 1934.25,1212.28 1934.84,1212.28 1935.43,1212.28 1936.01,1212.28 1936.6,1212.28 1937.19,1212.28 1937.77,1212.28 1938.36,1212.28 1938.95,1212.28 1939.53,1212.28 1940.12,1212.28 1940.71,1212.28 1941.29,1212.28 1941.88,1212.28 1942.46,1212.28 1943.05,1212.28 1943.64,1212.28 1944.22,1212.28 1944.81,1212.28 1945.4,1212.28 1945.98,1212.28 1946.57,1212.28 1947.16,1212.28 1947.74,1212.28 1948.33,1212.28 1948.91,1212.28 1949.5,1212.28 1950.09,1212.28 1950.67,1212.28 1951.26,1212.28 1951.85,1212.28 1952.43,1212.28 1953.02,1212.28 1953.61,1212.28 1954.19,1212.28 1954.78,1212.28 1955.37,1212.28 1955.95,1212.28 1956.54,1212.28 1957.12,1212.28 1957.71,1212.28 1958.3,1212.28 1958.88,1212.28 1959.47,1212.28 1960.06,1212.28 1960.64,1212.28 1961.23,1212.28 1961.82,1212.28 1962.4,1212.28 1962.99,1212.28 1963.58,1212.28 1964.16,1212.28 1964.75,1212.28 1965.33,1212.28 1965.92,1212.28 1966.51,1212.28 1967.09,1212.28 1967.68,1212.28 1968.27,1212.28 1968.85,1212.28 1969.44,1212.28 1970.03,1212.28 1970.61,1212.28 1971.2,1212.28 1971.78,1212.28 1972.37,1212.28 1972.96,1212.28 1973.54,1212.28 1974.13,1212.28 1974.72,1212.28 1975.3,1212.28 1975.89,1212.28 1976.48,1212.28 1977.06,1212.28 1977.65,1212.28 1978.24,1212.28 1978.82,1212.28 1979.41,1212.28 1979.99,1212.28 1980.58,1212.28 1981.17,1212.28 1981.75,1212.28 1982.34,1212.28 1982.93,1212.28 1983.51,1212.28 1984.1,1212.28 1984.69,1212.28 1985.27,1212.28 1985.86,1212.28 1986.45,1212.28 1987.03,1212.28 1987.62,1212.28 1988.2,1212.28 1988.79,1212.28 1989.38,1212.28 1989.96,1212.28 1990.55,1212.28 1991.14,1212.28 1991.72,1212.28 1992.31,1212.28 1992.9,1212.28 1993.48,1212.28 1994.07,1212.28 1994.65,1212.28 1995.24,1212.28 1995.83,1212.28 1996.41,1212.28 1997,1212.28 1997.59,1212.28 1998.17,1212.28 1998.76,1212.28 1999.35,1212.28 1999.93,1212.28 2000.52,1212.28 2001.11,1212.28 2001.69,1212.28 2002.28,1212.28 2002.86,1212.28 2003.45,1212.28 2004.04,1212.28 2004.62,1212.28 2005.21,1212.28 2005.8,1212.28 2006.38,1212.28 2006.97,1212.28 2007.56,1212.28 2008.14,1212.28 2008.73,1212.28 2009.32,1212.28 2009.9,1212.28 2010.49,1212.28 2011.07,1212.28 2011.66,1212.28 2012.25,1212.28 2012.83,1212.28 2013.42,1212.28 2014.01,1212.28 2014.59,1212.28 2015.18,1212.28 2015.77,1212.28 2016.35,1212.28 2016.94,1212.28 2017.53,1212.28 2018.11,1212.28 2018.7,1212.28 2019.28,1212.28 2019.87,1212.28 2020.46,1212.28 2021.04,1212.28 2021.63,1212.28 2022.22,1212.28 2022.8,1212.28 2023.39,1212.28 2023.98,1212.28 2024.56,1212.28 2025.15,1212.28 2025.73,1212.28 2026.32,1212.28 2026.91,1212.28 2027.49,1212.28 2028.08,1212.28 2028.67,1212.28 2029.25,1212.28 2029.84,1212.28 2030.43,1212.28 2031.01,1212.28 2031.6,1212.28 2032.19,1212.28 2032.77,1212.28 2033.36,1212.28 2033.94,1212.28 2034.53,1212.28 2035.12,1212.28 2035.7,1212.28 2036.29,1212.28 2036.88,1212.28 2037.46,1212.28 2038.05,1212.28 2038.64,1212.28 2039.22,1212.28 2039.81,1212.28 2040.4,1212.28 2040.98,1212.28 2041.57,1212.28 2042.15,1212.28 2042.74,1212.28 2043.33,1212.28 2043.91,1212.28 2044.5,1212.28 2045.09,1212.28 2045.67,1212.28 2046.26,1212.28 2046.85,1212.28 2047.43,1212.28 2048.02,1212.28 2048.6,1212.28 2049.19,1212.28 2049.78,1212.28 2050.36,1212.28 2050.95,1212.28 2051.54,1212.28 2052.12,1212.28 2052.71,1212.28 2053.3,1212.28 2053.88,1212.28 2054.47,1212.28 2055.06,1212.28 2055.64,1212.28 2056.23,1212.28 2056.81,1212.28 2057.4,1212.28 2057.99,1212.28 2058.57,1212.28 2059.16,1212.28 2059.75,1212.28 2060.33,1212.28 2060.92,1212.28 2061.51,1212.28 2062.09,1212.28 2062.68,1212.28 2063.27,1212.28 2063.85,1212.28 2064.44,1212.28 2065.02,1212.28 2065.61,1212.28 2066.2,1212.28 2066.78,1212.28 2067.37,1212.28 2067.96,1212.28 2068.54,1212.28 2069.13,1212.28 2069.72,1212.28 2070.3,1212.28 2070.89,1212.28 2071.48,1212.28 2072.06,1212.28 2072.65,1212.28 2073.23,1212.28 2073.82,1212.28 2074.41,1212.28 2074.99,1212.28 2075.58,1212.28 2076.17,1212.28 2076.75,1212.28 2077.34,1212.28 2077.93,1212.28 2078.51,1212.28 2079.1,1212.28 2079.68,1212.28 2080.27,1212.28 2080.86,1212.28 2081.44,1212.28 2082.03,1212.28 2082.62,1212.28 2083.2,1212.28 2083.79,1212.28 2084.38,1212.28 2084.96,1212.28 2085.55,1212.28 2086.14,1212.28 2086.72,1212.28 2087.31,1212.28 2087.89,1212.28 2088.48,1212.28 2089.07,1212.28 2089.65,1212.28 2090.24,1212.28 2090.83,1212.28 2091.41,1212.28 2092,1212.28 2092.59,1212.28 2093.17,1212.28 2093.76,1212.28 2094.35,1212.28 2094.93,1212.28 2095.52,1212.28 2096.1,1212.28 2096.69,1212.28 2097.28,1212.28 2097.86,1212.28 2098.45,1212.28 2099.04,1212.28 2099.62,1212.28 2100.21,1212.28 2100.8,1212.28 2101.38,1212.28 2101.97,1212.28 2102.55,1212.28 2103.14,1212.28 2103.73,1212.28 2104.31,1212.28 2104.9,1212.28 2105.49,1212.28 2106.07,1212.28 2106.66,1212.28 2107.25,1212.28 2107.83,1212.28 2108.42,1212.28 2109.01,1212.28 2109.59,1212.28 2110.18,1212.28 2110.76,1212.28 2111.35,1212.28 2111.94,1212.28 2112.52,1212.28 2113.11,1212.28 2113.7,1212.28 2114.28,1212.28 2114.87,1212.28 2115.46,1212.28 2116.04,1212.28 2116.63,1212.28 2117.22,1212.28 2117.8,1212.28 2118.39,1212.28 2118.97,1212.28 2119.56,1212.28 2120.15,1212.28 2120.73,1212.28 2121.32,1212.28 2121.91,1212.28 2122.49,1212.28 2123.08,1212.28 2123.67,1212.28 2124.25,1212.28 2124.84,1212.28 2125.42,1212.28 2126.01,1212.28 2126.6,1212.28 2127.18,1212.28 2127.77,1212.28 2128.36,1212.28 2128.94,1212.28 2129.53,1212.28 2130.12,1212.28 2130.7,1212.28 2131.29,1212.28 2131.88,1212.28 2132.46,1212.28 2133.05,1212.28 2133.63,1212.28 2134.22,1212.28 2134.81,1212.28 2135.39,1212.28 2135.98,1212.28 2136.57,1212.28 2137.15,1212.28 2137.74,1212.28 2138.33,1212.28 2138.91,1212.28 2139.5,1212.28 2140.09,1212.28 2140.67,1212.28 2141.26,1212.28 2141.84,1212.28 2142.43,1212.28 2143.02,1212.28 2143.6,1212.28 2144.19,1212.28 2144.78,1212.28 2145.36,1212.28 2145.95,1212.28 2146.54,1212.28 2147.12,1212.28 2147.71,1212.28 2148.3,1212.28 2148.88,1212.28 2149.47,1212.28 2150.05,1212.28 2150.64,1212.28 2151.23,1212.28 2151.81,1212.28 2152.4,1212.28 2152.99,1212.28 2153.57,1212.28 2154.16,1212.28 2154.75,1212.28 2155.33,1212.28 2155.92,1212.28 2156.5,1212.28 2157.09,1212.28 2157.68,1212.28 2158.26,1212.28 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.93,1194.09 1399.35,899.083 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.12 985.439,1194.09 2158.26,1194.09 2158.26,1230.12 985.439,1230.12 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip273\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip273)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4908.13 163.792,-5945.06 164.351,-6867.72 164.91,-7732.31 165.469,-6227.77 166.029,-7034.24 166.588,-7767.11 167.147,-7500.13 167.706,-7297.53 168.266,-7909.81 168.825,-8473.23 169.384,-8979.83 169.943,-9421.84 170.503,-9826.25 171.062,-10158.9 171.621,-10461 172.18,-10168.6 172.74,-10429.5 173.299,-10642.4 173.858,-10833.5 174.417,-10985.1 174.977,-11107.6 175.536,-11204.7 176.095,-11274.7 176.655,-11322.1 177.214,-11347.7 177.773,-11355.5 178.332,-11050.8 178.892,-11020.5 179.451,-10978.1 180.01,-10455.1 180.569,-10185.6 181.129,-9913.55 181.688,-9662.32 182.247,-9608.81 182.806,-9536.84 183.366,-9132.84 183.925,-9055.03 184.484,-8965.99 185.043,-8723.98 185.603,-8627.05 186.162,-8397.1 186.721,-8182.05 187.28,-8047.49 187.84,-7707.7 188.399,-7393.56 188.958,-7099.2 189.517,-6910.83 190.077,-6811.27 190.636,-6708.44 191.195,-6599.73 191.754,-6341.4 192.314,-6167.32 192.873,-5984.6 193.432,-5804.45 193.991,-5440.28 194.551,-5216.87 195.11,-5063.97 195.669,-4969.23 196.228,-4817.71 196.788,-4665.46 197.347,-4466.34 197.906,-4323.56 198.465,-4184.41 199.025,-4096 199.584,-3914.46 200.143,-3737.47 200.702,-3568.8 201.262,-3451.28 201.821,-3336.46 202.38,-3218.11 202.939,-3065.22 203.499,-2995.83 204.058,-2884.73 204.617,-2776.09 205.176,-2634.38 205.736,-2531.23 206.295,-2430.66 206.854,-2333.89 207.413,-2170.5 207.973,-2073.5 208.532,-1949.98 209.091,-1832.94 209.65,-1803.64 210.21,-1687.5 210.769,-1635.92 211.328,-1498.12 211.887,-1364.09 212.447,-1233.94 213.006,-1135.58 213.565,-1064.72 214.124,-995.663 214.684,-955.091 215.243,-887.753 215.802,-823.331 216.361,-757.281 216.921,-695.399 217.48,-655.905 218.039,-547.021 218.598,-447.145 219.158,-373.649 219.717,-302.395 220.276,-258.864 220.835,-236.577 221.395,-214.453 221.954,-171.861 222.513,-149.692 223.072,-84.3453 223.632,-15.5975 224.191,50.8669 224.75,67.0704 225.309,67.7504 225.869,105.666 226.428,185.348 226.987,282.306 227.546,309.712 228.106,314.42 228.665,359.535 229.224,390.413 229.783,434.627 230.343,481.684 230.902,499.729 231.461,483.535 232.02,505.933 232.58,528.545 233.139,492.318 233.698,517.649 234.257,520.035 234.817,521.42 235.376,544.711 235.935,564.615 236.494,550.596 237.054,576.675 237.613,561.805 238.172,588.032 238.731,609.601 239.291,636.87 239.85,675.997 240.409,751.698 240.968,770.779 241.528,764.775 242.087,782.678 242.646,765.759 243.205,799.466 243.765,819.948 244.324,839.694 244.883,839.117 245.442,868.912 246.002,904.123 246.561,896.077 247.12,890.668 247.679,884.803 248.239,932.361 248.798,965.421 249.357,1048.76 249.916,1106.49 250.476,1107.56 251.035,1110.76 251.594,1115.4 252.153,1096.95 252.713,1122.04 253.272,1125.18 253.831,1146.67 254.39,1131.48 254.95,1099.14 255.509,1084.27 256.068,1070.97 256.627,1079.29 257.187,1102.56 257.746,1120.84 258.305,1122.28 258.864,1110.58 259.424,1078.67 259.983,1087.46 260.542,1076 261.101,1044.77 261.661,1035.06 262.22,1060.7 262.779,1034.35 263.338,973.801 263.898,987.185 264.457,1032.95 265.016,1023.62 265.575,1032.02 266.135,1023.11 266.694,999.766 267.253,992.684 267.812,1020.9 268.372,1019.26 268.931,977.142 269.49,955.484 270.049,953.896 270.609,982.25 271.168,961.797 271.727,958.671 272.286,953.841 272.846,951.457 273.405,983.804 273.964,964.814 274.523,962.491 275.083,1008.49 275.642,1001.94 276.201,1012.87 276.76,1024.33 277.32,1036.67 277.879,1015.76 278.438,1043.05 278.997,1053.7 279.557,1029.04 280.116,1021.53 280.675,998.623 281.234,1025.84 281.794,1054.97 282.353,1034.07 282.912,1045.98 283.471,1036.28 284.031,1028.18 284.59,986.292 285.149,983.332 285.708,994.679 286.268,958.759 286.827,955.62 287.386,1002.77 287.945,984.066 288.505,980.674 289.064,978.992 289.623,991.41 290.182,1005 290.742,967.05 291.301,967.632 291.86,983.147 292.419,979.63 292.979,994.25 293.538,1002.43 294.097,1013.34 294.656,1027.09 295.216,1025.61 295.775,1005.54 296.334,1033.54 296.893,1029.83 297.453,1042.38 298.012,1037.91 298.571,1014.4 299.13,991.064 299.69,1007.48 300.249,1000.91 300.808,1012.85 301.368,987.502 301.927,1016.12 302.486,1009.31 303.045,1017.06 303.605,1021.18 304.164,1041.64 304.723,1049.3 305.282,1042.27 305.842,1018.94 306.401,1027.4 306.96,1036.9 307.519,984.581 308.079,1047.48 308.638,1056.93 309.197,1077.87 309.756,1049.48 310.316,1059.2 310.875,1050.68 311.434,1043.91 311.993,1018.09 312.553,1042.45 313.112,1048.75 313.671,1041.6 314.23,1016.25 314.79,1023.66 315.349,1028.13 315.908,983.606 316.467,962.472 317.027,985.058 317.586,1014.01 318.145,1006.79 318.704,1031.54 319.264,1024.76 319.823,1028.27 320.382,1035.08 320.941,1040.7 321.501,1063.06 322.06,1068.56 322.619,1069.83 323.178,1091.02 323.738,1080.72 324.297,1102.01 324.856,1087.04 325.415,1040.49 325.975,1063.73 326.534,1034.37 327.093,1023.34 327.652,1028.87 328.212,1022.34 328.771,997.614 329.33,990.359 329.889,996.021 330.449,1016.65 331.008,1023.02 331.567,1045.16 332.126,1032.37 332.686,1004.64 333.245,929.349 333.804,928.281 334.363,972.952 334.923,997.811 335.482,973.08 336.041,995.657 336.6,985.72 337.16,1013.6 337.719,1004.07 338.278,994.062 338.837,966.908 339.397,943.934 339.956,938.183 340.515,900.745 341.074,897.716 341.634,944.604 342.193,923.18 342.752,915.54 343.311,974.489 343.871,951.968 344.43,991.457 344.989,984.878 345.548,980.675 346.108,1007.18 346.667,1016.27 347.226,1004.15 347.785,1007.44 348.345,997.102 348.904,974.305 349.463,967.976 350.022,975.376 350.582,965.809 351.141,972.387 351.7,984.903 352.259,960.665 352.819,905.589 353.378,886.01 353.937,898.883 354.496,897.183 355.056,925.514 355.615,920.995 356.174,947.859 356.733,955.103 357.293,965.291 357.852,924.681 358.411,887.941 358.97,864.737 359.53,860.743 360.089,838.799 360.648,855.861 361.207,839.168 361.767,788.835 362.326,741.029 362.885,741.668 363.444,761.407 364.004,762.766 364.563,767.744 365.122,757.616 365.681,774.44 366.241,806.354 366.8,803.248 367.359,803.392 367.918,821.334 368.478,822.357 369.037,833.195 369.596,861.518 370.155,855.459 370.715,869.183 371.274,867.916 371.833,833.503 372.392,833.468 372.952,797.039 373.511,799.715 374.07,782.264 374.629,764.557 375.189,763.141 375.748,780.535 376.307,797.517 376.866,796.45 377.426,831.118 377.985,863.991 378.544,843.266 379.103,824.426 379.663,827.203 380.222,843.172 380.781,854.837 381.34,838.919 381.9,819.844 382.459,851.665 383.018,830.928 383.577,843.988 384.137,809.002 384.696,811.425 385.255,830.675 385.814,848.568 386.374,846.975 386.933,797.28 387.492,798.118 388.051,828.039 388.611,878.889 389.17,871.737 389.729,868.435 390.288,881.552 390.848,864.55 391.407,862.813 391.966,859.434 392.525,841.642 393.085,791.039 393.644,790.996 394.203,804.711 394.762,802.377 395.322,800.298 395.881,785.849 396.44,768.948 396.999,742.244 397.559,744.283 398.118,729.524 398.677,717.637 399.236,720.1 399.796,721.818 400.355,741.8 400.914,775.224 401.473,773.922 402.033,756.219 402.592,778.328 403.151,761.034 403.71,761.328 404.27,788.542 404.829,788.221 405.388,833.991 405.947,829.119 406.507,822.533 407.066,802.896 407.625,806.058 408.184,790.367 408.744,807.677 409.303,789.208 409.862,753.901 410.421,757.355 410.981,760.721 411.54,759.805 412.099,726.48 412.658,746.183 413.218,717.284 413.777,720.362 414.336,734.205 414.895,719.51 415.455,720.165 416.014,736.831 416.573,741.816 417.132,790.818 417.692,805.125 418.251,806.48 418.81,805.974 419.369,789.501 419.929,771.942 420.488,771.223 421.047,772.414 421.606,771.834 422.166,788.314 422.725,769.768 423.284,784.913 423.843,800.519 424.403,765.047 424.962,780.099 425.521,809.049 426.08,808.137 426.64,821.89 427.199,832.924 427.758,807.936 428.318,824.057 428.877,818.327 429.436,814.711 429.995,813.054 430.555,779.369 431.114,782.253 431.673,810.855 432.232,828.479 432.792,842.699 433.351,823.382 433.91,838.483 434.469,850.012 435.029,845.36 435.588,822.35 436.147,818.561 436.706,817.372 437.266,863.635 437.825,825.93 438.384,807.266 438.943,821.574 439.503,866.487 440.062,877.618 440.621,870.825 441.18,850.932 441.74,846.525 442.299,876.822 442.858,888.822 443.417,910.236 443.977,919.925 444.536,925.07 445.095,903.581 445.654,911.381 446.214,903.03 446.773,911.152 447.332,884.075 447.891,891.381 448.451,885.353 449.01,864.079 449.569,840.752 450.128,820.097 450.688,801.486 451.247,779.127 451.806,778.354 452.365,774.964 452.925,787.154 453.484,801.159 454.043,796.18 454.602,810.495 455.162,779.065 455.721,763.207 456.28,730.513 456.839,747.618 457.399,780.701 457.958,776.973 458.517,741.939 459.076,723.36 459.636,726.335 460.195,713.199 460.754,668.11 461.313,671.73 461.873,689.011 462.432,674.51 462.991,711.205 463.55,731.16 464.11,731.12 464.669,734.779 465.228,735.965 465.787,768.857 466.347,766.08 466.906,749.748 467.465,751.856 468.024,770.43 468.584,782.795 469.143,765.868 469.702,780.6 470.261,780.787 470.821,792.949 471.38,838.819 471.939,820.925 472.498,835.799 473.058,826.896 473.617,856.549 474.176,847.56 474.735,828.193 475.295,826.003 475.854,833.542 476.413,843.023 476.972,837.664 477.532,816.853 478.091,824.599 478.65,837.906 479.209,847.903 479.769,843.296 480.328,837.011 480.887,844.974 481.446,867.01 482.006,877.916 482.565,840.232 483.124,837.418 483.683,816.286 484.243,777.485 484.802,791.023 485.361,754.443 485.92,771.927 486.48,753.433 487.039,751.966 487.598,730.314 488.157,713.656 488.717,747.445 489.276,715.172 489.835,682.404 490.394,683.364 490.954,704.082 491.513,689.529 492.072,690.401 492.631,709.798 493.191,698.776 493.75,683.679 494.309,688.624 494.868,677.444 495.428,680.161 495.987,697.97 496.546,702.067 497.105,687.175 497.665,674.826 498.224,710.015 498.783,726.075 499.342,715.944 499.902,732.856 500.461,751.288 501.02,780.165 501.579,776.008 502.139,822.64 502.698,834.308 503.257,829.344 503.816,807.725 504.376,788.472 504.935,788.667 505.494,771.61 506.053,767.058 506.613,734.069 507.172,730.973 507.731,746.526 508.29,731.401 508.85,735.775 509.409,736.528 509.968,764.282 510.527,729.59 511.087,734.26 511.646,720.369 512.205,706.263 512.764,673.593 513.324,693.172 513.883,681.833 514.442,699.432 515.001,718.64 515.561,702.964 516.12,717.56 516.679,656.139 517.238,628.865 517.798,619.144 518.357,625.066 518.916,630.209 519.475,654.638 520.035,608.772 520.594,615.612 521.153,638.694 521.712,657.937 522.272,613.918 522.831,584.556 523.39,575.457 523.949,632.279 524.509,684.947 525.068,700.387 525.627,702.413 526.186,750.013 526.746,765.07 527.305,765.272 527.864,746.239 528.423,712.623 528.983,731.62 529.542,748.363 530.101,765.589 530.66,765.557 531.22,764.78 531.779,793.696 532.338,792.158 532.897,785.694 533.457,798.201 534.016,808.489 534.575,818.324 535.134,815.611 535.694,796.039 536.253,805.519 536.812,788.7 537.371,786.297 537.931,770.249 538.49,736.757 539.049,722.038 539.608,707.932 540.168,677.75 540.727,728.871 541.286,710.355 541.845,697.472 542.405,715.839 542.964,671.133 543.523,704.545 544.082,782.56 544.642,781.002 545.201,777.797 545.76,804.892 546.319,796.447 546.879,812.225 547.438,806.073 547.997,818.618 548.556,813.961 549.116,807.573 549.675,787.072 550.234,766.446 550.793,764.662 551.353,760.848 551.912,759.159 552.471,756.476 553.031,769.185 553.59,746.858 554.149,713.716 554.708,679.489 555.268,695.618 555.827,680.918 556.386,680.267 556.945,681.023 557.505,682.743 558.064,686.347 558.623,688.562 559.182,690.542 559.742,725.353 560.301,725.975 560.86,709.519 561.419,678.674 561.979,662.267 562.538,647.246 563.097,634.086 563.656,639.196 564.216,659.909 564.775,679.689 565.334,684.236 565.893,699.051 566.453,695.733 567.012,697.435 567.571,682.984 568.13,718.003 568.69,714.916 569.249,728.698 569.808,725.855 570.367,744.166 570.927,755.686 571.486,767.129 572.045,754.316 572.604,718.124 573.164,733.995 573.723,717.57 574.282,701.421 574.841,687.556 575.401,670.311 575.96,659.564 576.519,678.419 577.078,646.609 577.638,681.651 578.197,679.194 578.756,650.135 579.315,654.433 579.875,674.94 580.434,695.525 580.993,661.792 581.552,647.59 582.112,651.89 582.671,653.442 583.23,656.027 583.789,691.841 584.349,706.764 584.908,691.881 585.467,658.976 586.026,648.424 586.586,636.161 587.145,642.447 587.704,627.863 588.263,614.617 588.823,636.056 589.382,641.377 589.941,661.865 590.5,679.303 591.06,697.654 591.619,712.927 592.178,700.108 592.737,683.674 593.297,701.452 593.856,705.665 594.415,706.667 594.974,693.462 595.534,711.978 596.093,715.566 596.652,732.27 597.211,745.5 597.771,710.272 598.33,709.539 598.889,691.632 599.448,691.862 600.008,693.588 600.567,710.435 601.126,707.714 601.685,706.595 602.245,716.593 602.804,735.372 603.363,720.052 603.922,672.75 604.482,658.933 605.041,711.209 605.6,712.798 606.159,712.807 606.719,712.603 607.278,711.727 607.837,741.178 608.396,741.451 608.956,705.049 609.515,721.251 610.074,685.485 610.633,686.291 611.193,718.397 611.752,734.393 612.311,733.68 612.87,749.377 613.43,730.505 613.989,759.099 614.548,771.381 615.107,748.972 615.667,726.134 616.226,725.404 616.785,739.487 617.344,707.011 617.904,725.951 618.463,741.392 619.022,741.109 619.581,770.843 620.141,767.173 620.7,750.553 621.259,778.709 621.818,806.516 622.378,801.991 622.937,815.101 623.496,792.183 624.055,819.171 624.615,798.657 625.174,779.387 625.733,807.182 626.292,817.945 626.852,813.175 627.411,788.914 627.97,785.223 628.529,765.916 629.089,697.515 629.648,682.388 630.207,731.977 630.766,710.924 631.326,678.799 631.885,696.789 632.444,698.859 633.003,680.99 633.563,678.38 634.122,665.427 634.681,652.012 635.24,590.766 635.8,611.279 636.359,630.865 636.918,616.685 637.477,637.473 638.037,641.633 638.596,625.455 639.155,664.635 639.714,666.356 640.274,703.291 640.833,684.161 641.392,651.3 641.951,637.188 642.511,657.77 643.07,631.248 643.629,669.754 644.188,638.3 644.748,671.604 645.307,676.208 645.866,696.565 646.425,698.661 646.985,730.436 647.544,709.255 648.103,726.967 648.662,741.329 649.222,742.299 649.781,754.975 650.34,720.834 650.899,719.783 651.459,719.138 652.018,699.617 652.577,716.549 653.136,714.873 653.696,731.432 654.255,732.105 654.814,732.178 655.373,746.557 655.933,746.483 656.492,762.208 657.051,758.873 657.61,788.757 658.17,783.594 658.729,797.691 659.288,823.325 659.847,817.514 660.407,809.331 660.966,833.085 661.525,809.329 662.084,855.153 662.644,863.479 663.203,833.812 663.762,824.821 664.321,848.341 664.881,820.595 665.44,830.001 665.999,838.513 666.558,828.906 667.118,822.102 667.677,784.734 668.236,781.237 668.795,726.974 669.355,775.764 669.914,822.063 670.473,815.391 671.032,822.35 671.592,814.499 672.151,771.11 672.71,779.538 673.269,743.618 673.829,756.695 674.388,734.156 674.947,718.151 675.506,730.209 676.066,699.176 676.625,667.793 677.184,652.183 677.743,719.26 678.303,732.562 678.862,716.995 679.421,732.326 679.981,695.668 680.54,680.426 681.099,698.181 681.658,652.283 682.218,654.083 682.777,620.505 683.336,576.802 683.895,596.944 684.455,599.58 685.014,589.202 685.573,615.285 686.132,571.37 686.692,558.085 687.251,596.16 687.81,584.11 688.369,590.387 688.929,562.031 689.488,568.26 690.047,562.651 690.606,586.869 691.166,609.755 691.725,597.36 692.284,585.51 692.843,576.941 693.403,584.839 693.962,592.767 694.521,614.304 695.08,667.95 695.64,653.758 696.199,640.433 696.758,647.711 697.317,631.529 697.877,600.737 698.436,589.22 698.995,589.216 699.554,626.879 700.114,643.535 700.673,646.855 701.232,650.111 701.791,649.727 702.351,650.664 702.91,650.682 703.469,624.754 704.028,614.575 704.588,648.174 705.147,653.5 705.706,671.853 706.265,657.95 706.825,675.552 707.384,677.47 707.943,712.768 708.502,759.398 709.062,739.185 709.621,738.809 710.18,688.582 710.739,685.784 711.299,685.543 711.858,672.993 712.417,661.143 712.976,662.156 713.536,679.73 714.095,681.449 714.654,699.371 715.213,682.032 715.773,671.489 716.332,661.111 716.891,646.477 717.45,648.707 718.01,640.606 718.569,659.222 719.128,661.566 719.687,698.438 720.247,697.724 720.806,700.884 721.365,665.682 721.924,669.302 722.484,624.002 723.043,643.713 723.602,662.774 724.161,682.55 724.721,686.382 725.28,640.332 725.839,657.03 726.398,658.47 726.958,627.952 727.517,645.009 728.076,660.665 728.635,665.065 729.195,664.917 729.754,684.95 730.313,718.724 730.872,705.667 731.432,690.831 731.991,722.99 732.55,720.705 733.109,705.404 733.669,689.746 734.228,687.407 734.787,654.11 735.346,655.473 735.906,643.211 736.465,648.62 737.024,653.287 737.583,655.813 738.143,640.885 738.702,679.435 739.261,679.39 739.82,713.394 740.38,748.063 740.939,758.851 741.498,755.465 742.057,785.63 742.617,810.565 743.176,806.023 743.735,832.14 744.294,797.027 744.854,790.095 745.413,802.64 745.972,796.204 746.531,791.534 747.091,788.173 747.65,750.492 748.209,729.368 748.768,728.571 749.328,729.877 749.887,742.018 750.446,707.419 751.005,720.38 751.565,685.469 752.124,685.728 752.683,700.796 753.242,701.255 753.802,701.042 754.361,699.53 754.92,744.221 755.479,728.454 756.039,727.896 756.598,710.443 757.157,696.15 757.716,713.722 758.276,665.425 758.835,635.774 759.394,655.603 759.953,674.081 760.513,691.065 761.072,686.234 761.631,703.116 762.19,703.881 762.75,717.823 763.309,698.419 763.868,701.315 764.427,730.976 764.987,729.742 765.546,710.843 766.105,744.215 766.664,741.161 767.224,708.22 767.783,705.943 768.342,721.061 768.901,734.985 769.461,733.87 770.02,732.21 770.579,700.182 771.138,700.112 771.698,696.541 772.257,711.603 772.816,723.926 773.375,735.36 773.935,748.953 774.494,726.122 775.053,722.708 775.612,721.59 776.172,753.87 776.731,734.983 777.29,699.965 777.849,730.118 778.409,698.245 778.968,681.636 779.527,636.588 780.086,653.856 780.646,654.892 781.205,673.003 781.764,687.169 782.323,707.971 782.883,690.069 783.442,706.738 784.001,722.393 784.56,708.463 785.12,708.287 785.679,688.843 786.238,703.16 786.797,703.621 787.357,719.851 787.916,718.123 788.475,717.903 789.034,684.831 789.594,718.747 790.153,683.142 790.712,699.404 791.271,665.573 791.831,680.325 792.39,679.155 792.949,678.903 793.508,697.285 794.068,680.515 794.627,668.181 795.186,669.55 795.745,682.9 796.305,700.348 796.864,700.848 797.423,669.723 797.982,617.112 798.542,618.717 799.101,612.463 799.66,633.879 800.219,636.692 800.779,626.932 801.338,629.524 801.897,665.458 802.456,663.262 803.016,627.997 803.575,614.611 804.134,633.357 804.693,634.659 805.253,620.386 805.812,594.159 806.371,552.257 806.931,562.565 807.49,554.153 808.049,548.354 808.608,572.935 809.168,565.525 809.727,585.42 810.286,606.959 810.845,608.375 811.405,614.845 811.964,617.627 812.523,620.365 813.082,661.165 813.642,663.768 814.201,662.356 814.76,666.624 815.319,636.25 815.879,638.761 816.438,612.056 816.997,631.093 817.556,635.508 818.116,635.992 818.675,651.493 819.234,651.015 819.793,700.511 820.353,718.466 820.912,732.699 821.471,730.201 822.03,712.006 822.59,709.541 823.149,691.968 823.708,691.776 824.267,641.972 824.827,680.442 825.386,730.542 825.945,763.14 826.504,760.223 827.064,773.723 827.623,816.232 828.182,810.241 828.741,772.633 829.301,769.113 829.86,750.896 830.419,747.696 830.978,759.05 831.538,772.542 832.097,802.563 832.656,782.078 833.215,758.218 833.775,753.649 834.334,732.413 834.893,734.193 835.452,749.129 836.012,759.448 836.571,743.476 837.13,757.187 837.689,720.938 838.249,738.511 838.808,765.189 839.367,758.432 839.926,704.542 840.486,738.004 841.045,734.791 841.604,679.873 842.163,678.131 842.723,693.775 843.282,690.475 843.841,691.43 844.4,673.078 844.96,672.695 845.519,672.705 846.078,703.992 846.637,702.632 847.197,701.464 847.756,716.994 848.315,719.859 848.874,705.817 849.434,659.019 849.993,644.492 850.552,633.314 851.111,635.489 851.671,672.151 852.23,674.068 852.789,720.275 853.348,684.815 853.908,683.88 854.467,699.783 855.026,666.123 855.585,679.368 856.145,630.236 856.704,646.502 857.263,649.402 857.822,620.542 858.382,624.447 858.941,628.466 859.5,619.716 860.059,621.998 860.619,625.237 861.178,630.565 861.737,618.34 862.296,602.371 862.856,621.216 863.415,656.318 863.974,689.666 864.533,672.328 865.093,673.315 865.652,708.736 866.211,725.404 866.77,738.912 867.33,703.302 867.889,699.971 868.448,694.994 869.007,691.303 869.567,641.563 870.126,679.22 870.685,631.509 871.244,632.008 871.804,633.688 872.363,683.081 872.922,718.047 873.481,749.118 874.041,747.603 874.6,745.103 875.159,757.672 875.718,755.298 876.278,719.88 876.837,732.721 877.396,712.408 877.955,689.16 878.515,702.297 879.074,702.005 879.633,668.657 880.192,666.284 880.752,686.299 881.311,686.794 881.87,706.304 882.429,706.725 882.989,674.99 883.548,673.478 884.107,636.945 884.666,637.416 885.226,656.699 885.785,643.3 886.344,659.167 886.903,675.326 887.463,660.264 888.022,644.803 888.581,659.916 889.14,644.628 889.7,631.493 890.259,620.927 890.818,622.664 891.377,659.2 891.937,691.384 892.496,686.055 893.055,685.166 893.614,683.657 894.174,687.27 894.733,670.612 895.292,637.217 895.851,592.459 896.411,601.464 896.97,619.832 897.529,651.364 898.088,637.102 898.648,656.625 899.207,642.538 899.766,593.65 900.325,615.033 900.885,637.278 901.444,607.509 902.003,630.325 902.562,649.363 903.122,654.148 903.681,673.63 904.24,643.629 904.799,695.372 905.359,695.96 905.918,695.408 906.477,712.683 907.036,715.457 907.596,696.334 908.155,679.249 908.714,663.35 909.273,682.686 909.833,665.705 910.392,701.425 910.951,733.767 911.51,748.208 912.07,811.818 912.629,768.501 913.188,748.223 913.747,761.696 914.307,728.107 914.866,712.033 915.425,745.536 915.984,804.061 916.544,733.415 917.103,731.26 917.662,694.719 918.221,710.33 918.781,692.21 919.34,675.014 919.899,658.505 920.458,709.51 921.018,725.568 921.577,726.605 922.136,689.694 922.695,706.044 923.255,737.347 923.814,748.795 924.373,732.692 924.932,715.942 925.492,712.624 926.051,709.33 926.61,756.789 927.169,740.184 927.729,723.008 928.288,720.759 928.847,702.066 929.406,686.201 929.966,683.854 930.525,684.292 931.084,718.425 931.644,721.39 932.203,752.419 932.762,765.577 933.321,742.229 933.881,740.946 934.44,741.902 934.999,722.392 935.558,718.832 936.118,702.645 936.677,702.255 937.236,700.747 937.795,685.088 938.355,652.825 938.914,652.851 939.473,654.444 940.032,671.647 940.592,686.18 941.151,702.564 941.71,718.499 942.269,705.067 942.829,683.96 943.388,700.718 943.947,703.315 944.506,719.955 945.066,730.513 945.625,712.058 946.184,694.383 946.743,693.287 947.303,646.362 947.862,634.286 948.421,653.026 948.98,641.378 949.54,658.85 950.099,691.269 950.658,708.797 951.217,706.556 951.777,703.955 952.336,682.805 952.895,700.574 953.454,697.686 954.014,699.343 954.573,683.533 955.132,663.137 955.691,697.207 956.251,711.864 956.81,693.797 957.369,673.592 957.928,645.566 958.488,614.246 959.047,617.425 959.606,620.11 960.165,638.34 960.725,604.061 961.284,653.043 961.843,656.814 962.402,644.991 962.962,646.395 963.521,635.823 964.08,670.789 964.639,687.731 965.199,685.436 965.758,635.041 966.317,656.064 966.876,658.462 967.436,629.307 967.995,620.622 968.554,626.394 969.113,615.992 969.673,637.732 970.232,626.766 970.791,642.659 971.35,656.948 971.91,674.997 972.469,690.428 973.028,709.313 973.587,726.456 974.147,708.85 974.706,740.481 975.265,734.57 975.824,750.739 976.384,733.076 976.943,713.29 977.502,679.42 978.061,693.475 978.621,693.427 979.18,688.198 979.739,688.88 980.298,703.382 980.858,699.975 981.417,668.963 981.976,704.985 982.535,707.099 983.095,686.986 983.654,687.077 984.213,718.383 984.772,716.696 985.332,713.799 985.891,730.059 986.45,664.713 987.009,681.997 987.569,711.02 988.128,743.956 988.687,728.924 989.246,743.761 989.806,754.707 990.365,750.726 990.924,763.475 991.483,777.301 992.043,772.781 992.602,754.01 993.161,746.43 993.72,760.216 994.28,691.673 994.839,690.834 995.398,690.17 995.957,690.316 996.517,672.143 997.076,668.804 997.635,670.113 998.194,673.369 998.754,691.914 999.313,659.564 999.872,640.841 1000.43,640.602 1000.99,644.625 1001.55,631.916 1002.11,632.004 1002.67,620.307 1003.23,651.597 1003.79,656.333 1004.35,653.723 1004.91,688.652 1005.46,722.913 1006.02,719.825 1006.58,735.565 1007.14,750.631 1007.7,765.537 1008.26,744.777 1008.82,698.403 1009.38,697.238 1009.94,698.36 1010.5,682.196 1011.06,715.227 1011.62,716.52 1012.18,716.567 1012.73,716.583 1013.29,747.14 1013.85,741.084 1014.41,738.183 1014.97,747.546 1015.53,745.116 1016.09,737.485 1016.65,729.082 1017.21,713.364 1017.77,714.21 1018.33,713.93 1018.89,710.781 1019.45,723.582 1020.01,720.683 1020.56,719.516 1021.12,732.522 1021.68,681.285 1022.24,730.593 1022.8,682.221 1023.36,670.345 1023.92,655.816 1024.48,659.702 1025.04,663.059 1025.6,645.908 1026.16,644.696 1026.72,648.842 1027.28,651.357 1027.83,638.372 1028.39,609.68 1028.95,612.174 1029.51,634 1030.07,621.263 1030.63,642.026 1031.19,629.086 1031.75,631.662 1032.31,667.488 1032.87,685.146 1033.43,715.259 1033.99,745.93 1034.55,725.23 1035.1,703.615 1035.66,684.66 1036.22,667.646 1036.78,684.586 1037.34,652.247 1037.9,652.158 1038.46,684.236 1039.02,685.007 1039.58,701.054 1040.14,717.076 1040.7,762.033 1041.26,741.281 1041.82,736.15 1042.38,703.281 1042.93,718.828 1043.49,712.914 1044.05,691.716 1044.61,626.182 1045.17,627.361 1045.73,628.732 1046.29,618.707 1046.85,623.995 1047.41,643.876 1047.97,660.982 1048.53,695.392 1049.09,708.682 1049.65,689.573 1050.2,703.443 1050.76,687.243 1051.32,756.922 1051.88,734.564 1052.44,715.635 1053,711.482 1053.56,710.56 1054.12,708.931 1054.68,743.248 1055.24,723.73 1055.8,704.001 1056.36,651.954 1056.92,699.611 1057.48,699.06 1058.03,665.399 1058.59,648.418 1059.15,651.661 1059.71,638.453 1060.27,657.483 1060.83,690.268 1061.39,641.35 1061.95,627.379 1062.51,633.229 1063.07,654.145 1063.63,658.225 1064.19,646.168 1064.75,650.63 1065.3,654.191 1065.86,653.353 1066.42,672.494 1066.98,671.798 1067.54,688.217 1068.1,701.12 1068.66,698.397 1069.22,742.644 1069.78,756.516 1070.34,766.935 1070.9,828.317 1071.46,805.025 1072.02,810.933 1072.57,756.986 1073.13,718.759 1073.69,717.113 1074.25,710.783 1074.81,675.441 1075.37,726.399 1075.93,741.167 1076.49,737.967 1077.05,722.451 1077.61,689.882 1078.17,674.017 1078.73,672.594 1079.29,642.635 1079.85,629.95 1080.4,652.766 1080.96,667.992 1081.52,702.467 1082.08,747.039 1082.64,760.613 1083.2,724.409 1083.76,705.059 1084.32,656.195 1084.88,689.07 1085.44,703.429 1086,685.674 1086.56,656.002 1087.12,675.507 1087.67,641.652 1088.23,629.528 1088.79,633.287 1089.35,618.319 1089.91,621.376 1090.47,642.522 1091.03,645.447 1091.59,662.953 1092.15,647.251 1092.71,650.051 1093.27,654.551 1093.83,640.767 1094.39,645.487 1094.94,676.301 1095.5,677.601 1096.06,679.487 1096.62,677.946 1097.18,678.673 1097.74,699.661 1098.3,699.038 1098.86,714.787 1099.42,712.47 1099.98,680.566 1100.54,647.795 1101.1,633.889 1101.66,621.383 1102.22,627.083 1102.77,662.592 1103.33,681.269 1103.89,714.073 1104.45,697.344 1105.01,700.053 1105.57,718.642 1106.13,734.591 1106.69,703.118 1107.25,706.786 1107.81,708.433 1108.37,706.383 1108.93,751.895 1109.49,731.444 1110.04,744.916 1110.6,726.345 1111.16,741.726 1111.72,720.082 1112.28,702.536 1112.84,684.222 1113.4,701.183 1113.96,700.999 1114.52,747.363 1115.08,774.576 1115.64,768.453 1116.2,763.138 1116.76,746.971 1117.31,747.243 1117.87,728.808 1118.43,710.679 1118.99,709.147 1119.55,724.882 1120.11,704.612 1120.67,706.705 1121.23,738.183 1121.79,737.217 1122.35,722.68 1122.91,687.08 1123.47,676.345 1124.03,610.434 1124.59,630.95 1125.14,652.369 1125.7,639.081 1126.26,656.304 1126.82,660.858 1127.38,663.99 1127.94,632.373 1128.5,649.835 1129.06,681.253 1129.62,662.583 1130.18,644.918 1130.74,641.872 1131.3,628.687 1131.86,634.409 1132.41,655.64 1132.97,668.43 1133.53,671.73 1134.09,704.126 1134.65,718.034 1135.21,694.68 1135.77,712.571 1136.33,708.23 1136.89,722.842 1137.45,737.854 1138.01,732.741 1138.57,713.449 1139.13,728.938 1139.68,739.085 1140.24,766.302 1140.8,745.724 1141.36,756.956 1141.92,752.935 1142.48,731.542 1143.04,746.849 1143.6,742.168 1144.16,755.818 1144.72,704.745 1145.28,738.501 1145.84,721.736 1146.4,720.641 1146.96,753.827 1147.51,800.184 1148.07,827.157 1148.63,819.639 1149.19,827.141 1149.75,818.226 1150.31,779.936 1150.87,777.962 1151.43,774.845 1151.99,756.87 1152.55,750.884 1153.11,732.121 1153.67,731.376 1154.23,731.09 1154.78,711.279 1155.34,709.25 1155.9,693.764 1156.46,692.294 1157.02,676.921 1157.58,691.321 1158.14,659.744 1158.7,627.028 1159.26,596.905 1159.82,603.259 1160.38,641.086 1160.94,678.835 1161.5,680.736 1162.05,668.505 1162.61,666.75 1163.17,667.212 1163.73,698.39 1164.29,647.458 1164.85,616.761 1165.41,653.929 1165.97,641.122 1166.53,609.69 1167.09,562.794 1167.65,537.337 1168.21,543.131 1168.77,533.033 1169.33,540.884 1169.88,548.739 1170.44,604.422 1171,624.314 1171.56,659.025 1172.12,659.381 1172.68,673.406 1173.24,689.966 1173.8,672.55 1174.36,704.681 1174.92,733.876 1175.48,743.165 1176.04,789.11 1176.6,766.283 1177.15,792.691 1177.71,788.35 1178.27,736.5 1178.83,715.212 1179.39,667.964 1179.95,672.464 1180.51,690.959 1181.07,708.308 1181.63,724.183 1182.19,722.361 1182.75,736.263 1183.31,733.153 1183.87,712.039 1184.43,723.618 1184.98,720.495 1185.54,685.714 1186.1,668.476 1186.66,669.003 1187.22,667.928 1187.78,666.965 1188.34,667.464 1188.9,718.806 1189.46,702.582 1190.02,635.599 1190.58,640.426 1191.14,609.607 1191.7,611.544 1192.25,548.92 1192.81,521.953 1193.37,544.568 1193.93,533.603 1194.49,576.626 1195.05,531.86 1195.61,522.996 1196.17,529.591 1196.73,539.506 1197.29,531.805 1197.85,523.6 1198.41,515.823 1198.97,527.11 1199.52,538.017 1200.08,528.154 1200.64,553.617 1201.2,543.711 1201.76,532.475 1202.32,524.406 1202.88,552.691 1203.44,556.668 1204,576.722 1204.56,599.425 1205.12,634.876 1205.68,635.489 1206.24,642.435 1206.8,676.353 1207.35,710.913 1207.91,709.679 1208.47,689.771 1209.03,707.718 1209.59,707.84 1210.15,710.351 1210.71,692.674 1211.27,727.01 1211.83,712.389 1212.39,760.554 1212.95,757.916 1213.51,753.191 1214.07,778.806 1214.62,773.291 1215.18,768.258 1215.74,794.472 1216.3,803.552 1216.86,797.438 1217.42,837.614 1217.98,846.067 1218.54,822.377 1219.1,812.843 1219.66,806.676 1220.22,814.418 1220.78,825.779 1221.34,832.837 1221.89,819.834 1222.45,778.734 1223.01,790.342 1223.57,788.695 1224.13,781.084 1224.69,790.63 1225.25,752.789 1225.81,714.591 1226.37,747.216 1226.93,742.541 1227.49,724.775 1228.05,741.304 1228.61,736.924 1229.17,733.368 1229.72,730.377 1230.28,726.934 1230.84,740.857 1231.4,757.096 1231.96,750.553 1232.52,743.07 1233.08,718.268 1233.64,732.654 1234.2,666.889 1234.76,717.113 1235.32,748.769 1235.88,730 1236.44,695.543 1236.99,692.853 1237.55,691.035 1238.11,690.467 1238.67,675.284 1239.23,659.441 1239.79,662.069 1240.35,616.882 1240.91,619.354 1241.47,638.471 1242.03,636.923 1242.59,619.297 1243.15,640.38 1243.71,657.295 1244.26,642.706 1244.82,627.75 1245.38,643.699 1245.94,646.881 1246.5,665.919 1247.06,666.545 1247.62,681.024 1248.18,664.012 1248.74,666.25 1249.3,635.469 1249.86,655.932 1250.42,677.408 1250.98,662.576 1251.54,679.919 1252.09,684.266 1252.65,681.865 1253.21,651.378 1253.77,621.038 1254.33,608.356 1254.89,574.979 1255.45,597.073 1256.01,618.896 1256.57,639.842 1257.13,659.517 1257.69,629.123 1258.25,602.469 1258.81,606.589 1259.36,608.351 1259.92,610.731 1260.48,600.2 1261.04,620.533 1261.6,659.402 1262.16,655.881 1262.72,626.103 1263.28,613.771 1263.84,615.744 1264.4,649.467 1264.96,619.789 1265.52,622.491 1266.08,629.564 1266.63,631.505 1267.19,649.707 1267.75,619.71 1268.31,622.458 1268.87,639.612 1269.43,655.868 1269.99,674.295 1270.55,658.968 1271.11,677.924 1271.67,678.869 1272.23,678.094 1272.79,664.846 1273.35,665.143 1273.91,649.344 1274.46,653.645 1275.02,654.902 1275.58,670.916 1276.14,690.656 1276.7,690.959 1277.26,628.041 1277.82,583.782 1278.38,576.228 1278.94,615.758 1279.5,619.665 1280.06,608.054 1280.62,597.041 1281.18,602.742 1281.73,594.241 1282.29,599.523 1282.85,606.644 1283.41,659.324 1283.97,642.063 1284.53,659.637 1285.09,627.128 1285.65,620.954 1286.21,655.365 1286.77,640.549 1287.33,627.218 1287.89,636.677 1288.45,606.44 1289,612.296 1289.56,633.786 1290.12,638.982 1290.68,639.136 1291.24,705.615 1291.8,748.9 1292.36,777.469 1292.92,757.949 1293.48,750.319 1294.04,745.001 1294.6,741.837 1295.16,723.626 1295.72,737.033 1296.28,716.553 1296.83,718.024 1297.39,731.05 1297.95,714.879 1298.51,746.46 1299.07,747.651 1299.63,743.041 1300.19,739.439 1300.75,736.12 1301.31,751.598 1301.87,762.52 1302.43,776.668 1302.99,768.947 1303.55,729.254 1304.1,709.111 1304.66,705.759 1305.22,692.245 1305.78,678.677 1306.34,661.419 1306.9,675.713 1307.46,706.268 1308.02,704.568 1308.58,676.693 1309.14,692.521 1309.7,693.235 1310.26,676.084 1310.82,689.44 1311.38,691.291 1311.93,690.862 1312.49,691.566 1313.05,708.234 1313.61,705.255 1314.17,692.122 1314.73,707.276 1315.29,707.775 1315.85,705.626 1316.41,737.571 1316.97,749.798 1317.53,762.684 1318.09,771.385 1318.65,765.53 1319.2,745.404 1319.76,722.876 1320.32,751.697 1320.88,761.443 1321.44,772.128 1322,769.57 1322.56,762.812 1323.12,756.263 1323.68,784.934 1324.24,779.524 1324.8,788.55 1325.36,764.02 1325.92,743.917 1326.47,740.586 1327.03,706.582 1327.59,688.363 1328.15,656.41 1328.71,642.741 1329.27,610.377 1329.83,609.403 1330.39,630.1 1330.95,647.014 1331.51,616.664 1332.07,589.554 1332.63,582.347 1333.19,585.659 1333.75,605.351 1334.3,629.141 1334.86,615.137 1335.42,616.837 1335.98,652.998 1336.54,699.393 1337.1,682.731 1337.66,734.62 1338.22,732.682 1338.78,682.27 1339.34,666.787 1339.9,668.508 1340.46,669.635 1341.02,702.5 1341.57,700.237 1342.13,699.725 1342.69,746.478 1343.25,806.061 1343.81,768.461 1344.37,779.398 1344.93,774.233 1345.49,786.11 1346.05,798.03 1346.61,773.587 1347.17,752.667 1347.73,699.84 1348.29,697.407 1348.84,663.139 1349.4,630.824 1349.96,632.388 1350.52,617.492 1351.08,621.958 1351.64,641.245 1352.2,645.502 1352.76,645.552 1353.32,629.71 1353.88,648.25 1354.44,668.115 1355,648.23 1355.56,649.522 1356.12,684.193 1356.67,669.405 1357.23,687.894 1357.79,704.855 1358.35,732.967 1358.91,713.788 1359.47,715.93 1360.03,727.757 1360.59,739.242 1361.15,733.085 1361.71,731.195 1362.27,728.808 1362.83,694.155 1363.39,693.05 1363.94,626.545 1364.5,629.602 1365.06,634.331 1365.62,635.917 1366.18,619.597 1366.74,587.633 1367.3,560.142 1367.86,553.558 1368.42,577.565 1368.98,584.725 1369.54,591.983 1370.1,582.488 1370.66,604.923 1371.21,594.545 1371.77,600.851 1372.33,590.504 1372.89,594.763 1373.45,598.747 1374.01,588.73 1374.57,574.372 1375.13,581.595 1375.69,620.17 1376.25,623.083 1376.81,608.506 1377.37,628.965 1377.93,647.414 1378.49,645.975 1379.04,679.357 1379.6,682.392 1380.16,698.754 1380.72,682.169 1381.28,665.893 1381.84,681.831 1382.4,681.371 1382.96,665.457 1383.52,666.104 1384.08,699.978 1384.64,717.532 1385.2,670.53 1385.76,640.039 1386.31,642.022 1386.87,646.259 1387.43,648.731 1387.99,665.256 1388.55,669.453 1389.11,655.257 1389.67,653.392 1390.23,655.109 1390.79,692.102 1391.35,739.688 1391.91,770.755 1392.47,765.671 1393.03,763.258 1393.58,743.903 1394.14,709.787 1394.7,689.808 1395.26,671.037 1395.82,670.435 1396.38,655.659 1396.94,674.355 1397.5,640.375 1398.06,644.843 1398.62,645.602 1399.18,632.789 1399.74,636.156 1400.3,639.138 1400.86,672.401 1401.41,688.338 1401.97,703.524 1402.53,704.299 1403.09,685.575 1403.65,668.721 1404.21,686.223 1404.77,667.112 1405.33,681.655 1405.89,682.497 1406.45,684.942 1407.01,669.215 1407.57,718.1 1408.13,716.948 1408.68,731.111 1409.24,729.179 1409.8,718.609 1410.36,717.025 1410.92,715.868 1411.48,728.202 1412.04,707.945 1412.6,706.222 1413.16,737.024 1413.72,718.908 1414.28,732.828 1414.84,725.495 1415.4,758.685 1415.95,749.974 1416.51,746.577 1417.07,758.783 1417.63,736.53 1418.19,731.625 1418.75,714.422 1419.31,730.615 1419.87,744.095 1420.43,772.703 1420.99,782.588 1421.55,805.132 1422.11,813.564 1422.67,820.524 1423.23,812.895 1423.78,789.877 1424.34,785.072 1424.9,780.541 1425.46,762.615 1426.02,724.351 1426.58,690.912 1427.14,673.82 1427.7,693.105 1428.26,676.232 1428.82,673.559 1429.38,707.214 1429.94,671.704 1430.5,720.061 1431.05,681.924 1431.61,650.274 1432.17,667.898 1432.73,681.567 1433.29,647.623 1433.85,663.976 1434.41,649.914 1434.97,646.698 1435.53,664.359 1436.09,697.3 1436.65,651.571 1437.21,622.355 1437.77,590.12 1438.33,593.905 1438.88,582.552 1439.44,569.019 1440,541.756 1440.56,564.283 1441.12,573.786 1441.68,545.467 1442.24,554.798 1442.8,574.998 1443.36,599.15 1443.92,619.017 1444.48,635.139 1445.04,670.999 1445.6,669.406 1446.15,671.728 1446.71,689.398 1447.27,705.712 1447.83,708.256 1448.39,719.158 1448.95,720.365 1449.51,686.907 1450.07,722.43 1450.63,719.845 1451.19,686.839 1451.75,684.059 1452.31,700.502 1452.87,650.694 1453.42,632.295 1453.98,601.682 1454.54,619.262 1455.1,637.896 1455.66,622.511 1456.22,647.492 1456.78,632.234 1457.34,653.89 1457.9,654.094 1458.46,685.472 1459.02,656.913 1459.58,653.156 1460.14,637.698 1460.7,625.186 1461.25,580.248 1461.81,602.934 1462.37,589.9 1462.93,609.434 1463.49,615.306 1464.05,635.829 1464.61,651.836 1465.17,672.136 1465.73,660.848 1466.29,661.733 1466.85,662.166 1467.41,663.907 1467.97,665.093 1468.52,681.169 1469.08,681.596 1469.64,680.783 1470.2,696.427 1470.76,710.671 1471.32,726.27 1471.88,705.731 1472.44,702.748 1473,685.62 1473.56,686.168 1474.12,716.582 1474.68,710.966 1475.24,692.232 1475.79,691.291 1476.35,719.16 1476.91,732.445 1477.47,697.484 1478.03,731.568 1478.59,729.321 1479.15,758.764 1479.71,768.783 1480.27,747.476 1480.83,759.256 1481.39,770.88 1481.95,781.764 1482.51,775.757 1483.07,769.122 1483.62,746.501 1484.18,727.013 1484.74,725.131 1485.3,707.278 1485.86,702.662 1486.42,699.746 1486.98,744.754 1487.54,759.609 1488.1,754.232 1488.66,764.382 1489.22,743.448 1489.78,706.567 1490.34,739.088 1490.89,689.922 1491.45,723.106 1492.01,737.441 1492.57,655.274 1493.13,656.283 1493.69,671.084 1494.25,688.283 1494.81,703.479 1495.37,669.042 1495.93,652.42 1496.49,651.954 1497.05,668.4 1497.61,700.154 1498.16,665.823 1498.72,645.72 1499.28,630.389 1499.84,631.54 1500.4,648.149 1500.96,630.595 1501.52,654.189 1502.08,640.472 1502.64,660.929 1503.2,693.983 1503.76,709.162 1504.32,691.698 1504.88,674.39 1505.44,692.717 1505.99,693.26 1506.55,639.846 1507.11,654.963 1507.67,609.483 1508.23,578.588 1508.79,586.39 1509.35,574.11 1509.91,565.207 1510.47,575.444 1511.03,567.109 1511.59,589.204 1512.15,610.828 1512.71,616.936 1513.26,618.836 1513.82,620.835 1514.38,636.851 1514.94,641.949 1515.5,627.185 1516.06,612.535 1516.62,614.074 1517.18,601.236 1517.74,622.77 1518.3,621.233 1518.86,607.796 1519.42,662.497 1519.98,678.658 1520.53,708.984 1521.09,722.759 1521.65,717.986 1522.21,731.252 1522.77,730.694 1523.33,748.537 1523.89,681.421 1524.45,694.621 1525.01,662.319 1525.57,675.092 1526.13,675.384 1526.69,674.29 1527.25,707.212 1527.81,677.352 1528.36,647.875 1528.92,668.156 1529.48,654.933 1530.04,638.599 1530.6,658.416 1531.16,655.613 1531.72,670.908 1532.28,688.655 1532.84,721.225 1533.4,733.298 1533.96,697.816 1534.52,680.12 1535.08,709.725 1535.63,709.211 1536.19,689.745 1536.75,707.291 1537.31,736.448 1537.87,733.169 1538.43,715.172 1538.99,717.027 1539.55,687.567 1540.11,674.671 1540.67,662.456 1541.23,679.904 1541.79,683.026 1542.35,667.738 1542.9,668.305 1543.46,655.939 1544.02,660.282 1544.58,677.182 1545.14,662.618 1545.7,665.961 1546.26,653.063 1546.82,668.872 1547.38,684.426 1547.94,682.816 1548.5,684.417 1549.06,717.545 1549.62,713.083 1550.18,726.424 1550.73,739.313 1551.29,733.393 1551.85,730.247 1552.41,679.325 1552.97,681.243 1553.53,684.059 1554.09,729.991 1554.65,702.318 1555.21,715.079 1555.77,714.351 1556.33,713.946 1556.89,694.803 1557.45,678.016 1558,674.785 1558.56,691.849 1559.12,693.607 1559.68,678.896 1560.24,692.382 1560.8,705.485 1561.36,750.364 1561.92,758.594 1562.48,753.471 1563.04,735.117 1563.6,785.833 1564.16,781.201 1564.72,806.267 1565.28,832.181 1565.83,755.66 1566.39,718.079 1566.95,747.552 1567.51,757.051 1568.07,737.644 1568.63,699.811 1569.19,718.138 1569.75,716.948 1570.31,749.713 1570.87,733.952 1571.43,732.699 1571.99,729.762 1572.55,710.275 1573.1,727.637 1573.66,677.579 1574.22,647.049 1574.78,664.371 1575.34,680.732 1575.9,649.895 1576.46,638.312 1577.02,658.193 1577.58,672.91 1578.14,687.518 1578.7,684.903 1579.26,701.873 1579.82,702.942 1580.37,717.135 1580.93,713.767 1581.49,714.046 1582.05,713.981 1582.61,726.351 1583.17,722.11 1583.73,704.078 1584.29,685.312 1584.85,715.715 1585.41,711.979 1585.97,677.33 1586.53,692.526 1587.09,675.986 1587.65,645.24 1588.2,616.512 1588.76,649.414 1589.32,587.427 1589.88,609.53 1590.44,629.995 1591,598.672 1591.56,602.643 1592.12,624.077 1592.68,626.879 1593.24,614.129 1593.8,618.114 1594.36,604.7 1594.92,641.209 1595.47,658.968 1596.03,645.796 1596.59,665.923 1597.15,699.327 1597.71,679.889 1598.27,713.652 1598.83,679.096 1599.39,647.871 1599.95,647.414 1600.51,664.854 1601.07,633.823 1601.63,668.435 1602.19,669.434 1602.74,702.535 1603.3,702.267 1603.86,706.099 1604.42,720.08 1604.98,716.767 1605.54,719.347 1606.1,703.164 1606.66,686.665 1607.22,673.635 1607.78,673.938 1608.34,675.854 1608.9,695.517 1609.46,714.561 1610.02,652.219 1610.57,652.075 1611.13,669.352 1611.69,672.598 1612.25,689.349 1612.81,653.921 1613.37,638.067 1613.93,640.743 1614.49,640.185 1615.05,658.729 1615.61,643.278 1616.17,644.432 1616.73,662.969 1617.29,713.278 1617.84,696.436 1618.4,742.965 1618.96,743.627 1619.52,742.245 1620.08,718.711 1620.64,697.732 1621.2,681.113 1621.76,664.579 1622.32,652.474 1622.88,699.727 1623.44,699.935 1624,698.59 1624.56,681.571 1625.11,683.723 1625.67,700.483 1626.23,682.767 1626.79,670.136 1627.35,703.133 1627.91,687.752 1628.47,672.707 1629.03,657.574 1629.59,642.647 1630.15,659.576 1630.71,663.629 1631.27,665.016 1631.83,633.769 1632.39,617.71 1632.94,620.198 1633.5,608.277 1634.06,644.356 1634.62,679.789 1635.18,665.275 1635.74,669.492 1636.3,640.295 1636.86,661.923 1637.42,694.903 1637.98,728.447 1638.54,741.498 1639.1,723.296 1639.66,736.726 1640.21,734.593 1640.77,746.79 1641.33,739.818 1641.89,735.896 1642.45,748.925 1643.01,759.789 1643.57,765.514 1644.13,789.684 1644.69,784.389 1645.25,765.052 1645.81,807.575 1646.37,818.82 1646.93,842.136 1647.48,831.377 1648.04,838.494 1648.6,779.303 1649.16,772.967 1649.72,766.865 1650.28,762.924 1650.84,722.027 1651.4,736.93 1651.96,733.548 1652.52,709.403 1653.08,711.927 1653.64,660.731 1654.2,661.26 1654.76,667.496 1655.31,653.602 1655.87,655.506 1656.43,678.007 1656.99,696.546 1657.55,694.279 1658.11,663.568 1658.67,681.24 1659.23,697.865 1659.79,714.215 1660.35,700.249 1660.91,667.277 1661.47,682.511 1662.03,717.144 1662.58,665.497 1663.14,651.596 1663.7,605.384 1664.26,577.871 1664.82,649.589 1665.38,671.435 1665.94,670.475 1666.5,687.221 1667.06,673.505 1667.62,655.687 1668.18,643.684 1668.74,643.977 1669.3,627.876 1669.85,646.117 1670.41,697.204 1670.97,679.103 1671.53,662.367 1672.09,679.425 1672.65,661.834 1673.21,669.078 1673.77,699.424 1674.33,682.077 1674.89,664.987 1675.45,667.237 1676.01,647.653 1676.57,651.483 1677.13,652.346 1677.68,672.179 1678.24,658.067 1678.8,626.593 1679.36,596.291 1679.92,617.159 1680.48,637.263 1681.04,640.909 1681.6,608.319 1682.16,643.608 1682.72,581.459 1683.28,556.491 1683.84,579.458 1684.4,587.09 1684.95,607.918 1685.51,598.128 1686.07,635.662 1686.63,657.657 1687.19,627.478 1687.75,646.43 1688.31,616.211 1688.87,590.033 1689.43,598.713 1689.99,587.325 1690.55,592.244 1691.11,595.454 1691.67,586.525 1692.23,606.562 1692.78,608.6 1693.34,581.667 1693.9,603.283 1694.46,607.567 1695.02,607.725 1695.58,625.326 1696.14,627.973 1696.7,662.728 1697.26,665.287 1697.82,666.958 1698.38,639.046 1698.94,639.873 1699.5,642.371 1700.05,577.491 1700.61,599.417 1701.17,617.331 1701.73,603.366 1702.29,624.535 1702.85,642.731 1703.41,661.275 1703.97,649.871 1704.53,670.553 1705.09,655.413 1705.65,655.413 1706.21,656.746 1706.77,645.171 1707.32,645.801 1707.88,632.483 1708.44,650.329 1709,701.687 1709.56,703.882 1710.12,685.181 1710.68,682.982 1711.24,701.27 1711.8,748.064 1712.36,746.511 1712.92,740.327 1713.48,756.124 1714.04,721.541 1714.6,705.473 1715.15,705.046 1715.71,721.113 1716.27,722.791 1716.83,721.611 1717.39,720.42 1717.95,721.344 1718.51,703.164 1719.07,720.707 1719.63,717.013 1720.19,731.393 1720.75,746.763 1721.31,731.118 1721.87,746.947 1722.42,756.946 1722.98,738.349 1723.54,736.224 1724.1,747.803 1724.66,740.766 1725.22,736.033 1725.78,764.577 1726.34,744.721 1726.9,709.574 1727.46,707.998 1728.02,723.588 1728.58,719.823 1729.14,703.654 1729.69,687.323 1730.25,673.603 1730.81,676.683 1731.37,642.819 1731.93,676.769 1732.49,674.981 1733.05,693.339 1733.61,710.602 1734.17,743.851 1734.73,739.342 1735.29,739.496 1735.85,771.267 1736.41,750.207 1736.97,733.272 1737.52,766.865 1738.08,777.999 1738.64,762.178 1739.2,754.822 1739.76,750.849 1740.32,729.811 1740.88,743.797 1741.44,737.567 1742,719.596 1742.56,732.19 1743.12,776.069 1743.68,785.405 1744.24,783.754 1744.79,807.172 1745.35,814.798 1745.91,810.097 1746.47,816.973 1747.03,826.034 1747.59,802.396 1748.15,780.951 1748.71,759.985 1749.27,688.727 1749.83,674.087 1750.39,692.63 1750.95,661.096 1751.51,678.877 1752.06,697.531 1752.62,695.155 1753.18,695.974 1753.74,677.751 1754.3,660.864 1754.86,680.138 1755.42,678.401 1755.98,679.234 1756.54,678.759 1757.1,660.622 1757.66,664.06 1758.22,681.768 1758.78,682.015 1759.34,700.043 1759.89,734.854 1760.45,749.675 1761.01,727.045 1761.57,679.126 1762.13,680.245 1762.69,695.859 1763.25,694.419 1763.81,660.449 1764.37,660.642 1764.93,663.399 1765.49,645.196 1766.05,677.912 1766.61,678.854 1767.16,678.395 1767.72,682.189 1768.28,696.192 1768.84,677.197 1769.4,690.653 1769.96,675.441 1770.52,689.83 1771.08,675.813 1771.64,658.594 1772.2,681.092 1772.76,698.79 1773.32,697.065 1773.88,730.454 1774.43,712.798 1774.99,730.299 1775.55,724.71 1776.11,721.253 1776.67,719.793 1777.23,702.492 1777.79,700.34 1778.35,699.886 1778.91,665.835 1779.47,668.496 1780.03,664.984 1780.59,629.449 1781.15,647.992 1781.71,647.7 1782.26,650.155 1782.82,670.079 1783.38,670.951 1783.94,656.248 1784.5,643.191 1785.06,694.812 1785.62,758.547 1786.18,738.987 1786.74,718.001 1787.3,701.344 1787.86,669.5 1788.42,688.562 1788.98,704.864 1789.53,754.198 1790.09,752.603 1790.65,750.459 1791.21,732.211 1791.77,747.479 1792.33,761.162 1792.89,757.765 1793.45,769.268 1794.01,719.935 1794.57,687.744 1795.13,703.076 1795.69,735.789 1796.25,747.446 1796.8,760.146 1797.36,757.231 1797.92,754.774 1798.48,769.599 1799.04,760.294 1799.6,755.534 1800.16,769.418 1800.72,780.901 1801.28,759.118 1801.84,754.824 1802.4,747.59 1802.96,724.198 1803.52,741.292 1804.08,736.944 1804.63,733.739 1805.19,686.148 1805.75,671.005 1806.31,686.734 1806.87,686.962 1807.43,667.302 1807.99,667.965 1808.55,682.71 1809.11,700.215 1809.67,712.714 1810.23,694.597 1810.79,659.966 1811.35,662.096 1811.9,650.767 1812.46,654.326 1813.02,673.06 1813.58,693.331 1814.14,693.573 1814.7,691.642 1815.26,722.381 1815.82,750.482 1816.38,729.278 1816.94,730.109 1817.5,713.331 1818.06,676.409 1818.62,690.164 1819.18,706.181 1819.73,740.086 1820.29,735.214 1820.85,701.496 1821.41,685.093 1821.97,668.062 1822.53,635.564 1823.09,671.548 1823.65,690.99 1824.21,693.3 1824.77,678.928 1825.33,680.856 1825.89,666.346 1826.45,702.639 1827,687.114 1827.56,718.134 1828.12,668.795 1828.68,670.259 1829.24,653.941 1829.8,641.188 1830.36,622.476 1830.92,611.068 1831.48,646.946 1832.04,669.482 1832.6,668.407 1833.16,635.509 1833.72,634.953 1834.27,668.954 1834.83,667.082 1835.39,681.5 1835.95,680.008 1836.51,727.824 1837.07,756.47 1837.63,771.043 1838.19,762.447 \"/>\n<path clip-path=\"url(#clip273)\" d=\"M720.247 691.329 L720.806 691.329 L721.365 691.329 L721.924 691.329 L722.484 691.329 L723.043 691.329 L723.602 691.329 L724.161 691.329 L724.721 691.329 L725.28 691.329 L725.839 691.329 L726.398 691.329 L726.958 691.329 L727.517 691.329 L728.076 691.329 L728.635 691.329 L729.195 691.329 L729.754 691.329 L730.313 691.329 L730.872 691.329 L731.432 691.329 L731.991 691.329 L732.55 691.329 L733.109 691.329 L733.669 691.329 L734.228 691.329 L734.787 691.329 L735.346 691.329 L735.906 691.329 L736.465 691.329 L737.024 691.329 L737.583 691.329 L738.143 691.329 L738.702 691.329 L739.261 691.329 L739.82 691.329 L740.38 691.329 L740.939 691.329 L741.498 691.329 L742.057 691.329 L742.617 691.329 L743.176 691.329 L743.735 691.329 L744.294 691.329 L744.854 691.329 L745.413 691.329 L745.972 691.329 L746.531 691.329 L747.091 691.329 L747.65 691.329 L748.209 691.329 L748.768 691.329 L749.328 691.329 L749.887 691.329 L750.446 691.329 L751.005 691.329 L751.565 691.329 L752.124 691.329 L752.683 691.329 L753.242 691.329 L753.802 691.329 L754.361 691.329 L754.92 691.329 L755.479 691.329 L756.039 691.329 L756.598 691.329 L757.157 691.329 L757.716 691.329 L758.276 691.329 L758.835 691.329 L759.394 691.329 L759.953 691.329 L760.513 691.329 L761.072 691.329 L761.631 691.329 L762.19 691.329 L762.75 691.329 L763.309 691.329 L763.868 691.329 L764.427 691.329 L764.987 691.329 L765.546 691.329 L766.105 691.329 L766.664 691.329 L767.224 691.329 L767.783 691.329 L768.342 691.329 L768.901 691.329 L769.461 691.329 L770.02 691.329 L770.579 691.329 L771.138 691.329 L771.698 691.329 L772.257 691.329 L772.816 691.329 L773.375 691.329 L773.935 691.329 L774.494 691.329 L775.053 691.329 L775.612 691.329 L776.172 691.329 L776.731 691.329 L777.29 691.329 L777.849 691.329 L778.409 691.329 L778.968 691.329 L779.527 691.329 L780.086 691.329 L780.646 691.329 L781.205 691.329 L781.764 691.329 L782.323 691.329 L782.883 691.329 L783.442 691.329 L784.001 691.329 L784.56 691.329 L785.12 691.329 L785.679 691.329 L786.238 691.329 L786.797 691.329 L787.357 691.329 L787.916 691.329 L788.475 691.329 L789.034 691.329 L789.594 691.329 L790.153 691.329 L790.712 691.329 L791.271 691.329 L791.831 691.329 L792.39 691.329 L792.949 691.329 L793.508 691.329 L794.068 691.329 L794.627 691.329 L795.186 691.329 L795.745 691.329 L796.305 691.329 L796.864 691.329 L797.423 691.329 L797.982 691.329 L798.542 691.329 L799.101 691.329 L799.66 691.329 L800.219 691.329 L800.779 691.329 L801.338 691.329 L801.897 691.329 L802.456 691.329 L803.016 691.329 L803.575 691.329 L804.134 691.329 L804.693 691.329 L805.253 691.329 L805.812 691.329 L806.371 691.329 L806.931 691.329 L807.49 691.329 L808.049 691.329 L808.608 691.329 L809.168 691.329 L809.727 691.329 L810.286 691.329 L810.845 691.329 L811.405 691.329 L811.964 691.329 L812.523 691.329 L813.082 691.329 L813.642 691.329 L814.201 691.329 L814.76 691.329 L815.319 691.329 L815.879 691.329 L816.438 691.329 L816.997 691.329 L817.556 691.329 L818.116 691.329 L818.675 691.329 L819.234 691.329 L819.793 691.329 L820.353 691.329 L820.912 691.329 L821.471 691.329 L822.03 691.329 L822.59 691.329 L823.149 691.329 L823.708 691.329 L824.267 691.329 L824.827 691.329 L825.386 691.329 L825.945 691.329 L826.504 691.329 L827.064 691.329 L827.623 691.329 L828.182 691.329 L828.741 691.329 L829.301 691.329 L829.86 691.329 L830.419 691.329 L830.978 691.329 L831.538 691.329 L832.097 691.329 L832.656 691.329 L833.215 691.329 L833.775 691.329 L834.334 691.329 L834.893 691.329 L835.452 691.329 L836.012 691.329 L836.571 691.329 L837.13 691.329 L837.689 691.329 L838.249 691.329 L838.808 691.329 L839.367 691.329 L839.926 691.329 L840.486 691.329 L841.045 691.329 L841.604 691.329 L842.163 691.329 L842.723 691.329 L843.282 691.329 L843.841 691.329 L844.4 691.329 L844.96 691.329 L845.519 691.329 L846.078 691.329 L846.637 691.329 L847.197 691.329 L847.756 691.329 L848.315 691.329 L848.874 691.329 L849.434 691.329 L849.993 691.329 L850.552 691.329 L851.111 691.329 L851.671 691.329 L852.23 691.329 L852.789 691.329 L853.348 691.329 L853.908 691.329 L854.467 691.329 L855.026 691.329 L855.585 691.329 L856.145 691.329 L856.704 691.329 L857.263 691.329 L857.822 691.329 L858.382 691.329 L858.941 691.329 L859.5 691.329 L860.059 691.329 L860.619 691.329 L861.178 691.329 L861.737 691.329 L862.296 691.329 L862.856 691.329 L863.415 691.329 L863.974 691.329 L864.533 691.329 L865.093 691.329 L865.652 691.329 L866.211 691.329 L866.77 691.329 L867.33 691.329 L867.889 691.329 L868.448 691.329 L869.007 691.329 L869.567 691.329 L870.126 691.329 L870.685 691.329 L871.244 691.329 L871.804 691.329 L872.363 691.329 L872.922 691.329 L873.481 691.329 L874.041 691.329 L874.6 691.329 L875.159 691.329 L875.718 691.329 L876.278 691.329 L876.837 691.329 L877.396 691.329 L877.955 691.329 L878.515 691.329 L879.074 691.329 L879.633 691.329 L880.192 691.329 L880.752 691.329 L881.311 691.329 L881.87 691.329 L882.429 691.329 L882.989 691.329 L883.548 691.329 L884.107 691.329 L884.666 691.329 L885.226 691.329 L885.785 691.329 L886.344 691.329 L886.903 691.329 L887.463 691.329 L888.022 691.329 L888.581 691.329 L889.14 691.329 L889.7 691.329 L890.259 691.329 L890.818 691.329 L891.377 691.329 L891.937 691.329 L892.496 691.329 L893.055 691.329 L893.614 691.329 L894.174 691.329 L894.733 691.329 L895.292 691.329 L895.851 691.329 L896.411 691.329 L896.97 691.329 L897.529 691.329 L898.088 691.329 L898.648 691.329 L899.207 691.329 L899.766 691.329 L900.325 691.329 L900.885 691.329 L901.444 691.329 L902.003 691.329 L902.562 691.329 L903.122 691.329 L903.681 691.329 L904.24 691.329 L904.799 691.329 L905.359 691.329 L905.918 691.329 L906.477 691.329 L907.036 691.329 L907.596 691.329 L908.155 691.329 L908.714 691.329 L909.273 691.329 L909.833 691.329 L910.392 691.329 L910.951 691.329 L911.51 691.329 L912.07 691.329 L912.629 691.329 L913.188 691.329 L913.747 691.329 L914.307 691.329 L914.866 691.329 L915.425 691.329 L915.984 691.329 L916.544 691.329 L917.103 691.329 L917.662 691.329 L918.221 691.329 L918.781 691.329 L919.34 691.329 L919.899 691.329 L920.458 691.329 L921.018 691.329 L921.577 691.329 L922.136 691.329 L922.695 691.329 L923.255 691.329 L923.814 691.329 L924.373 691.329 L924.932 691.329 L925.492 691.329 L926.051 691.329 L926.61 691.329 L927.169 691.329 L927.729 691.329 L928.288 691.329 L928.847 691.329 L929.406 691.329 L929.966 691.329 L930.525 691.329 L931.084 691.329 L931.644 691.329 L932.203 691.329 L932.762 691.329 L933.321 691.329 L933.881 691.329 L934.44 691.329 L934.999 691.329 L935.558 691.329 L936.118 691.329 L936.677 691.329 L937.236 691.329 L937.795 691.329 L938.355 691.329 L938.914 691.329 L939.473 691.329 L940.032 691.329 L940.592 691.329 L941.151 691.329 L941.71 691.329 L942.269 691.329 L942.829 691.329 L943.388 691.329 L943.947 691.329 L944.506 691.329 L945.066 691.329 L945.625 691.329 L946.184 691.329 L946.743 691.329 L947.303 691.329 L947.862 691.329 L948.421 691.329 L948.98 691.329 L949.54 691.329 L950.099 691.329 L950.658 691.329 L951.217 691.329 L951.777 691.329 L952.336 691.329 L952.895 691.329 L953.454 691.329 L954.014 691.329 L954.573 691.329 L955.132 691.329 L955.691 691.329 L956.251 691.329 L956.81 691.329 L957.369 691.329 L957.928 691.329 L958.488 691.329 L959.047 691.329 L959.606 691.329 L960.165 691.329 L960.725 691.329 L961.284 691.329 L961.843 691.329 L962.402 691.329 L962.962 691.329 L963.521 691.329 L964.08 691.329 L964.639 691.329 L965.199 691.329 L965.758 691.329 L966.317 691.329 L966.876 691.329 L967.436 691.329 L967.995 691.329 L968.554 691.329 L969.113 691.329 L969.673 691.329 L970.232 691.329 L970.791 691.329 L971.35 691.329 L971.91 691.329 L972.469 691.329 L973.028 691.329 L973.587 691.329 L974.147 691.329 L974.706 691.329 L975.265 691.329 L975.824 691.329 L976.384 691.329 L976.943 691.329 L977.502 691.329 L978.061 691.329 L978.621 691.329 L979.18 691.329 L979.739 691.329 L980.298 691.329 L980.858 691.329 L981.417 691.329 L981.976 691.329 L982.535 691.329 L983.095 691.329 L983.654 691.329 L984.213 691.329 L984.772 691.329 L985.332 691.329 L985.891 691.329 L986.45 691.329 L987.009 691.329 L987.569 691.329 L988.128 691.329 L988.687 691.329 L989.246 691.329 L989.806 691.329 L990.365 691.329 L990.924 691.329 L991.483 691.329 L992.043 691.329 L992.602 691.329 L993.161 691.329 L993.72 691.329 L994.28 691.329 L994.839 691.329 L995.398 691.329 L995.957 691.329 L996.517 691.329 L997.076 691.329 L997.635 691.329 L998.194 691.329 L998.754 691.329 L999.313 691.329 L999.872 691.329 L1000.43 691.329 L1000.99 691.329 L1001.55 691.329 L1002.11 691.329 L1002.67 691.329 L1003.23 691.329 L1003.79 691.329 L1004.35 691.329 L1004.91 691.329 L1005.46 691.329 L1006.02 691.329 L1006.58 691.329 L1007.14 691.329 L1007.7 691.329 L1008.26 691.329 L1008.82 691.329 L1009.38 691.329 L1009.94 691.329 L1010.5 691.329 L1011.06 691.329 L1011.62 691.329 L1012.18 691.329 L1012.73 691.329 L1013.29 691.329 L1013.85 691.329 L1014.41 691.329 L1014.97 691.329 L1015.53 691.329 L1016.09 691.329 L1016.65 691.329 L1017.21 691.329 L1017.77 691.329 L1018.33 691.329 L1018.89 691.329 L1019.45 691.329 L1020.01 691.329 L1020.56 691.329 L1021.12 691.329 L1021.68 691.329 L1022.24 691.329 L1022.8 691.329 L1023.36 691.329 L1023.92 691.329 L1024.48 691.329 L1025.04 691.329 L1025.6 691.329 L1026.16 691.329 L1026.72 691.329 L1027.28 691.329 L1027.83 691.329 L1028.39 691.329 L1028.95 691.329 L1029.51 691.329 L1030.07 691.329 L1030.63 691.329 L1031.19 691.329 L1031.75 691.329 L1032.31 691.329 L1032.87 691.329 L1033.43 691.329 L1033.99 691.329 L1034.55 691.329 L1035.1 691.329 L1035.66 691.329 L1036.22 691.329 L1036.78 691.329 L1037.34 691.329 L1037.9 691.329 L1038.46 691.329 L1039.02 691.329 L1039.58 691.329 L1040.14 691.329 L1040.7 691.329 L1041.26 691.329 L1041.82 691.329 L1042.38 691.329 L1042.93 691.329 L1043.49 691.329 L1044.05 691.329 L1044.61 691.329 L1045.17 691.329 L1045.73 691.329 L1046.29 691.329 L1046.85 691.329 L1047.41 691.329 L1047.97 691.329 L1048.53 691.329 L1049.09 691.329 L1049.65 691.329 L1050.2 691.329 L1050.76 691.329 L1051.32 691.329 L1051.88 691.329 L1052.44 691.329 L1053 691.329 L1053.56 691.329 L1054.12 691.329 L1054.68 691.329 L1055.24 691.329 L1055.8 691.329 L1056.36 691.329 L1056.92 691.329 L1057.48 691.329 L1058.03 691.329 L1058.59 691.329 L1059.15 691.329 L1059.71 691.329 L1060.27 691.329 L1060.83 691.329 L1061.39 691.329 L1061.95 691.329 L1062.51 691.329 L1063.07 691.329 L1063.63 691.329 L1064.19 691.329 L1064.75 691.329 L1065.3 691.329 L1065.86 691.329 L1066.42 691.329 L1066.98 691.329 L1067.54 691.329 L1068.1 691.329 L1068.66 691.329 L1069.22 691.329 L1069.78 691.329 L1070.34 691.329 L1070.9 691.329 L1071.46 691.329 L1072.02 691.329 L1072.57 691.329 L1073.13 691.329 L1073.69 691.329 L1074.25 691.329 L1074.81 691.329 L1075.37 691.329 L1075.93 691.329 L1076.49 691.329 L1077.05 691.329 L1077.61 691.329 L1078.17 691.329 L1078.73 691.329 L1079.29 691.329 L1079.85 691.329 L1080.4 691.329 L1080.96 691.329 L1081.52 691.329 L1082.08 691.329 L1082.64 691.329 L1083.2 691.329 L1083.76 691.329 L1084.32 691.329 L1084.88 691.329 L1085.44 691.329 L1086 691.329 L1086.56 691.329 L1087.12 691.329 L1087.67 691.329 L1088.23 691.329 L1088.79 691.329 L1089.35 691.329 L1089.91 691.329 L1090.47 691.329 L1091.03 691.329 L1091.59 691.329 L1092.15 691.329 L1092.71 691.329 L1093.27 691.329 L1093.83 691.329 L1094.39 691.329 L1094.94 691.329 L1095.5 691.329 L1096.06 691.329 L1096.62 691.329 L1097.18 691.329 L1097.74 691.329 L1098.3 691.329 L1098.86 691.329 L1099.42 691.329 L1099.98 691.329 L1100.54 691.329 L1101.1 691.329 L1101.66 691.329 L1102.22 691.329 L1102.77 691.329 L1103.33 691.329 L1103.89 691.329 L1104.45 691.329 L1105.01 691.329 L1105.57 691.329 L1106.13 691.329 L1106.69 691.329 L1107.25 691.329 L1107.81 691.329 L1108.37 691.329 L1108.93 691.329 L1109.49 691.329 L1110.04 691.329 L1110.6 691.329 L1111.16 691.329 L1111.72 691.329 L1112.28 691.329 L1112.84 691.329 L1113.4 691.329 L1113.96 691.329 L1114.52 691.329 L1115.08 691.329 L1115.64 691.329 L1116.2 691.329 L1116.76 691.329 L1117.31 691.329 L1117.87 691.329 L1118.43 691.329 L1118.99 691.329 L1119.55 691.329 L1120.11 691.329 L1120.67 691.329 L1121.23 691.329 L1121.79 691.329 L1122.35 691.329 L1122.91 691.329 L1123.47 691.329 L1124.03 691.329 L1124.59 691.329 L1125.14 691.329 L1125.7 691.329 L1126.26 691.329 L1126.82 691.329 L1127.38 691.329 L1127.94 691.329 L1128.5 691.329 L1129.06 691.329 L1129.62 691.329 L1130.18 691.329 L1130.74 691.329 L1131.3 691.329 L1131.86 691.329 L1132.41 691.329 L1132.97 691.329 L1133.53 691.329 L1134.09 691.329 L1134.65 691.329 L1135.21 691.329 L1135.77 691.329 L1136.33 691.329 L1136.89 691.329 L1137.45 691.329 L1138.01 691.329 L1138.57 691.329 L1139.13 691.329 L1139.68 691.329 L1140.24 691.329 L1140.8 691.329 L1141.36 691.329 L1141.92 691.329 L1142.48 691.329 L1143.04 691.329 L1143.6 691.329 L1144.16 691.329 L1144.72 691.329 L1145.28 691.329 L1145.84 691.329 L1146.4 691.329 L1146.96 691.329 L1147.51 691.329 L1148.07 691.329 L1148.63 691.329 L1149.19 691.329 L1149.75 691.329 L1150.31 691.329 L1150.87 691.329 L1151.43 691.329 L1151.99 691.329 L1152.55 691.329 L1153.11 691.329 L1153.67 691.329 L1154.23 691.329 L1154.78 691.329 L1155.34 691.329 L1155.9 691.329 L1156.46 691.329 L1157.02 691.329 L1157.58 691.329 L1158.14 691.329 L1158.7 691.329 L1159.26 691.329 L1159.82 691.329 L1160.38 691.329 L1160.94 691.329 L1161.5 691.329 L1162.05 691.329 L1162.61 691.329 L1163.17 691.329 L1163.73 691.329 L1164.29 691.329 L1164.85 691.329 L1165.41 691.329 L1165.97 691.329 L1166.53 691.329 L1167.09 691.329 L1167.65 691.329 L1168.21 691.329 L1168.77 691.329 L1169.33 691.329 L1169.88 691.329 L1170.44 691.329 L1171 691.329 L1171.56 691.329 L1172.12 691.329 L1172.68 691.329 L1173.24 691.329 L1173.8 691.329 L1174.36 691.329 L1174.92 691.329 L1175.48 691.329 L1176.04 691.329 L1176.6 691.329 L1177.15 691.329 L1177.71 691.329 L1178.27 691.329 L1178.83 691.329 L1179.39 691.329 L1179.95 691.329 L1180.51 691.329 L1181.07 691.329 L1181.63 691.329 L1182.19 691.329 L1182.75 691.329 L1183.31 691.329 L1183.87 691.329 L1184.43 691.329 L1184.98 691.329 L1185.54 691.329 L1186.1 691.329 L1186.66 691.329 L1187.22 691.329 L1187.78 691.329 L1188.34 691.329 L1188.9 691.329 L1189.46 691.329 L1190.02 691.329 L1190.58 691.329 L1191.14 691.329 L1191.7 691.329 L1192.25 691.329 L1192.81 691.329 L1193.37 691.329 L1193.93 691.329 L1194.49 691.329 L1195.05 691.329 L1195.61 691.329 L1196.17 691.329 L1196.73 691.329 L1197.29 691.329 L1197.85 691.329 L1198.41 691.329 L1198.97 691.329 L1199.52 691.329 L1200.08 691.329 L1200.64 691.329 L1201.2 691.329 L1201.76 691.329 L1202.32 691.329 L1202.88 691.329 L1203.44 691.329 L1204 691.329 L1204.56 691.329 L1205.12 691.329 L1205.68 691.329 L1206.24 691.329 L1206.8 691.329 L1207.35 691.329 L1207.91 691.329 L1208.47 691.329 L1209.03 691.329 L1209.59 691.329 L1210.15 691.329 L1210.71 691.329 L1211.27 691.329 L1211.83 691.329 L1212.39 691.329 L1212.95 691.329 L1213.51 691.329 L1214.07 691.329 L1214.62 691.329 L1215.18 691.329 L1215.74 691.329 L1216.3 691.329 L1216.86 691.329 L1217.42 691.329 L1217.98 691.329 L1218.54 691.329 L1219.1 691.329 L1219.66 691.329 L1220.22 691.329 L1220.78 691.329 L1221.34 691.329 L1221.89 691.329 L1222.45 691.329 L1223.01 691.329 L1223.57 691.329 L1224.13 691.329 L1224.69 691.329 L1225.25 691.329 L1225.81 691.329 L1226.37 691.329 L1226.93 691.329 L1227.49 691.329 L1228.05 691.329 L1228.61 691.329 L1229.17 691.329 L1229.72 691.329 L1230.28 691.329 L1230.84 691.329 L1231.4 691.329 L1231.96 691.329 L1232.52 691.329 L1233.08 691.329 L1233.64 691.329 L1234.2 691.329 L1234.76 691.329 L1235.32 691.329 L1235.88 691.329 L1236.44 691.329 L1236.99 691.329 L1237.55 691.329 L1238.11 691.329 L1238.67 691.329 L1239.23 691.329 L1239.79 691.329 L1240.35 691.329 L1240.91 691.329 L1241.47 691.329 L1242.03 691.329 L1242.59 691.329 L1243.15 691.329 L1243.71 691.329 L1244.26 691.329 L1244.82 691.329 L1245.38 691.329 L1245.94 691.329 L1246.5 691.329 L1247.06 691.329 L1247.62 691.329 L1248.18 691.329 L1248.74 691.329 L1249.3 691.329 L1249.86 691.329 L1250.42 691.329 L1250.98 691.329 L1251.54 691.329 L1252.09 691.329 L1252.65 691.329 L1253.21 691.329 L1253.77 691.329 L1254.33 691.329 L1254.89 691.329 L1255.45 691.329 L1256.01 691.329 L1256.57 691.329 L1257.13 691.329 L1257.69 691.329 L1258.25 691.329 L1258.81 691.329 L1259.36 691.329 L1259.92 691.329 L1260.48 691.329 L1261.04 691.329 L1261.6 691.329 L1262.16 691.329 L1262.72 691.329 L1263.28 691.329 L1263.84 691.329 L1264.4 691.329 L1264.96 691.329 L1265.52 691.329 L1266.08 691.329 L1266.63 691.329 L1267.19 691.329 L1267.75 691.329 L1268.31 691.329 L1268.87 691.329 L1269.43 691.329 L1269.99 691.329 L1270.55 691.329 L1271.11 691.329 L1271.67 691.329 L1272.23 691.329 L1272.79 691.329 L1273.35 691.329 L1273.91 691.329 L1274.46 691.329 L1275.02 691.329 L1275.58 691.329 L1276.14 691.329 L1276.7 691.329 L1277.26 691.329 L1277.82 691.329 L1278.38 691.329 L1278.94 691.329 L1279.5 691.329 L1280.06 691.329 L1280.62 691.329 L1281.18 691.329 L1281.73 691.329 L1282.29 691.329 L1282.85 691.329 L1283.41 691.329 L1283.97 691.329 L1284.53 691.329 L1285.09 691.329 L1285.65 691.329 L1286.21 691.329 L1286.77 691.329 L1287.33 691.329 L1287.89 691.329 L1288.45 691.329 L1289 691.329 L1289.56 691.329 L1290.12 691.329 L1290.68 691.329 L1291.24 691.329 L1291.8 691.329 L1292.36 691.329 L1292.92 691.329 L1293.48 691.329 L1294.04 691.329 L1294.6 691.329 L1295.16 691.329 L1295.72 691.329 L1296.28 691.329 L1296.83 691.329 L1297.39 691.329 L1297.95 691.329 L1298.51 691.329 L1299.07 691.329 L1299.63 691.329 L1300.19 691.329 L1300.75 691.329 L1301.31 691.329 L1301.87 691.329 L1302.43 691.329 L1302.99 691.329 L1303.55 691.329 L1304.1 691.329 L1304.66 691.329 L1305.22 691.329 L1305.78 691.329 L1306.34 691.329 L1306.9 691.329 L1307.46 691.329 L1308.02 691.329 L1308.58 691.329 L1309.14 691.329 L1309.7 691.329 L1310.26 691.329 L1310.82 691.329 L1311.38 691.329 L1311.93 691.329 L1312.49 691.329 L1313.05 691.329 L1313.61 691.329 L1314.17 691.329 L1314.73 691.329 L1315.29 691.329 L1315.85 691.329 L1316.41 691.329 L1316.97 691.329 L1317.53 691.329 L1318.09 691.329 L1318.65 691.329 L1319.2 691.329 L1319.76 691.329 L1320.32 691.329 L1320.88 691.329 L1321.44 691.329 L1322 691.329 L1322.56 691.329 L1323.12 691.329 L1323.68 691.329 L1324.24 691.329 L1324.8 691.329 L1325.36 691.329 L1325.92 691.329 L1326.47 691.329 L1327.03 691.329 L1327.59 691.329 L1328.15 691.329 L1328.71 691.329 L1329.27 691.329 L1329.83 691.329 L1330.39 691.329 L1330.95 691.329 L1331.51 691.329 L1332.07 691.329 L1332.63 691.329 L1333.19 691.329 L1333.75 691.329 L1334.3 691.329 L1334.86 691.329 L1335.42 691.329 L1335.98 691.329 L1336.54 691.329 L1337.1 691.329 L1337.66 691.329 L1338.22 691.329 L1338.78 691.329 L1339.34 691.329 L1339.9 691.329 L1340.46 691.329 L1341.02 691.329 L1341.57 691.329 L1342.13 691.329 L1342.69 691.329 L1343.25 691.329 L1343.81 691.329 L1344.37 691.329 L1344.93 691.329 L1345.49 691.329 L1346.05 691.329 L1346.61 691.329 L1347.17 691.329 L1347.73 691.329 L1348.29 691.329 L1348.84 691.329 L1349.4 691.329 L1349.96 691.329 L1350.52 691.329 L1351.08 691.329 L1351.64 691.329 L1352.2 691.329 L1352.76 691.329 L1353.32 691.329 L1353.88 691.329 L1354.44 691.329 L1355 691.329 L1355.56 691.329 L1356.12 691.329 L1356.67 691.329 L1357.23 691.329 L1357.79 691.329 L1358.35 691.329 L1358.91 691.329 L1359.47 691.329 L1360.03 691.329 L1360.59 691.329 L1361.15 691.329 L1361.71 691.329 L1362.27 691.329 L1362.83 691.329 L1363.39 691.329 L1363.94 691.329 L1364.5 691.329 L1365.06 691.329 L1365.62 691.329 L1366.18 691.329 L1366.74 691.329 L1367.3 691.329 L1367.86 691.329 L1368.42 691.329 L1368.98 691.329 L1369.54 691.329 L1370.1 691.329 L1370.66 691.329 L1371.21 691.329 L1371.77 691.329 L1372.33 691.329 L1372.89 691.329 L1373.45 691.329 L1374.01 691.329 L1374.57 691.329 L1375.13 691.329 L1375.69 691.329 L1376.25 691.329 L1376.81 691.329 L1377.37 691.329 L1377.93 691.329 L1378.49 691.329 L1379.04 691.329 L1379.6 691.329 L1380.16 691.329 L1380.72 691.329 L1381.28 691.329 L1381.84 691.329 L1382.4 691.329 L1382.96 691.329 L1383.52 691.329 L1384.08 691.329 L1384.64 691.329 L1385.2 691.329 L1385.76 691.329 L1386.31 691.329 L1386.87 691.329 L1387.43 691.329 L1387.99 691.329 L1388.55 691.329 L1389.11 691.329 L1389.67 691.329 L1390.23 691.329 L1390.79 691.329 L1391.35 691.329 L1391.91 691.329 L1392.47 691.329 L1393.03 691.329 L1393.58 691.329 L1394.14 691.329 L1394.7 691.329 L1395.26 691.329 L1395.82 691.329 L1396.38 691.329 L1396.94 691.329 L1397.5 691.329 L1398.06 691.329 L1398.62 691.329 L1399.18 691.329 L1399.74 691.329 L1400.3 691.329 L1400.86 691.329 L1401.41 691.329 L1401.97 691.329 L1402.53 691.329 L1403.09 691.329 L1403.65 691.329 L1404.21 691.329 L1404.77 691.329 L1405.33 691.329 L1405.89 691.329 L1406.45 691.329 L1407.01 691.329 L1407.57 691.329 L1408.13 691.329 L1408.68 691.329 L1409.24 691.329 L1409.8 691.329 L1410.36 691.329 L1410.92 691.329 L1411.48 691.329 L1412.04 691.329 L1412.6 691.329 L1413.16 691.329 L1413.72 691.329 L1414.28 691.329 L1414.84 691.329 L1415.4 691.329 L1415.95 691.329 L1416.51 691.329 L1417.07 691.329 L1417.63 691.329 L1418.19 691.329 L1418.75 691.329 L1419.31 691.329 L1419.87 691.329 L1420.43 691.329 L1420.99 691.329 L1421.55 691.329 L1422.11 691.329 L1422.67 691.329 L1423.23 691.329 L1423.78 691.329 L1424.34 691.329 L1424.9 691.329 L1425.46 691.329 L1426.02 691.329 L1426.58 691.329 L1427.14 691.329 L1427.7 691.329 L1428.26 691.329 L1428.82 691.329 L1429.38 691.329 L1429.94 691.329 L1430.5 691.329 L1431.05 691.329 L1431.61 691.329 L1432.17 691.329 L1432.73 691.329 L1433.29 691.329 L1433.85 691.329 L1434.41 691.329 L1434.97 691.329 L1435.53 691.329 L1436.09 691.329 L1436.65 691.329 L1437.21 691.329 L1437.77 691.329 L1438.33 691.329 L1438.88 691.329 L1439.44 691.329 L1440 691.329 L1440.56 691.329 L1441.12 691.329 L1441.68 691.329 L1442.24 691.329 L1442.8 691.329 L1443.36 691.329 L1443.92 691.329 L1444.48 691.329 L1445.04 691.329 L1445.6 691.329 L1446.15 691.329 L1446.71 691.329 L1447.27 691.329 L1447.83 691.329 L1448.39 691.329 L1448.95 691.329 L1449.51 691.329 L1450.07 691.329 L1450.63 691.329 L1451.19 691.329 L1451.75 691.329 L1452.31 691.329 L1452.87 691.329 L1453.42 691.329 L1453.98 691.329 L1454.54 691.329 L1455.1 691.329 L1455.66 691.329 L1456.22 691.329 L1456.78 691.329 L1457.34 691.329 L1457.9 691.329 L1458.46 691.329 L1459.02 691.329 L1459.58 691.329 L1460.14 691.329 L1460.7 691.329 L1461.25 691.329 L1461.81 691.329 L1462.37 691.329 L1462.93 691.329 L1463.49 691.329 L1464.05 691.329 L1464.61 691.329 L1465.17 691.329 L1465.73 691.329 L1466.29 691.329 L1466.85 691.329 L1467.41 691.329 L1467.97 691.329 L1468.52 691.329 L1469.08 691.329 L1469.64 691.329 L1470.2 691.329 L1470.76 691.329 L1471.32 691.329 L1471.88 691.329 L1472.44 691.329 L1473 691.329 L1473.56 691.329 L1474.12 691.329 L1474.68 691.329 L1475.24 691.329 L1475.79 691.329 L1476.35 691.329 L1476.91 691.329 L1477.47 691.329 L1478.03 691.329 L1478.59 691.329 L1479.15 691.329 L1479.71 691.329 L1480.27 691.329 L1480.83 691.329 L1481.39 691.329 L1481.95 691.329 L1482.51 691.329 L1483.07 691.329 L1483.62 691.329 L1484.18 691.329 L1484.74 691.329 L1485.3 691.329 L1485.86 691.329 L1486.42 691.329 L1486.98 691.329 L1487.54 691.329 L1488.1 691.329 L1488.66 691.329 L1489.22 691.329 L1489.78 691.329 L1490.34 691.329 L1490.89 691.329 L1491.45 691.329 L1492.01 691.329 L1492.57 691.329 L1493.13 691.329 L1493.69 691.329 L1494.25 691.329 L1494.81 691.329 L1495.37 691.329 L1495.93 691.329 L1496.49 691.329 L1497.05 691.329 L1497.61 691.329 L1498.16 691.329 L1498.72 691.329 L1499.28 691.329 L1499.84 691.329 L1500.4 691.329 L1500.96 691.329 L1501.52 691.329 L1502.08 691.329 L1502.64 691.329 L1503.2 691.329 L1503.76 691.329 L1504.32 691.329 L1504.88 691.329 L1505.44 691.329 L1505.99 691.329 L1506.55 691.329 L1507.11 691.329 L1507.67 691.329 L1508.23 691.329 L1508.79 691.329 L1509.35 691.329 L1509.91 691.329 L1510.47 691.329 L1511.03 691.329 L1511.59 691.329 L1512.15 691.329 L1512.71 691.329 L1513.26 691.329 L1513.82 691.329 L1514.38 691.329 L1514.94 691.329 L1515.5 691.329 L1516.06 691.329 L1516.62 691.329 L1517.18 691.329 L1517.74 691.329 L1518.3 691.329 L1518.86 691.329 L1519.42 691.329 L1519.98 691.329 L1520.53 691.329 L1521.09 691.329 L1521.65 691.329 L1522.21 691.329 L1522.77 691.329 L1523.33 691.329 L1523.89 691.329 L1524.45 691.329 L1525.01 691.329 L1525.57 691.329 L1526.13 691.329 L1526.69 691.329 L1527.25 691.329 L1527.81 691.329 L1528.36 691.329 L1528.92 691.329 L1529.48 691.329 L1530.04 691.329 L1530.6 691.329 L1531.16 691.329 L1531.72 691.329 L1532.28 691.329 L1532.84 691.329 L1533.4 691.329 L1533.96 691.329 L1534.52 691.329 L1535.08 691.329 L1535.63 691.329 L1536.19 691.329 L1536.75 691.329 L1537.31 691.329 L1537.87 691.329 L1538.43 691.329 L1538.99 691.329 L1539.55 691.329 L1540.11 691.329 L1540.67 691.329 L1541.23 691.329 L1541.79 691.329 L1542.35 691.329 L1542.9 691.329 L1543.46 691.329 L1544.02 691.329 L1544.58 691.329 L1545.14 691.329 L1545.7 691.329 L1546.26 691.329 L1546.82 691.329 L1547.38 691.329 L1547.94 691.329 L1548.5 691.329 L1549.06 691.329 L1549.62 691.329 L1550.18 691.329 L1550.73 691.329 L1551.29 691.329 L1551.85 691.329 L1552.41 691.329 L1552.97 691.329 L1553.53 691.329 L1554.09 691.329 L1554.65 691.329 L1555.21 691.329 L1555.77 691.329 L1556.33 691.329 L1556.89 691.329 L1557.45 691.329 L1558 691.329 L1558.56 691.329 L1559.12 691.329 L1559.68 691.329 L1560.24 691.329 L1560.8 691.329 L1561.36 691.329 L1561.92 691.329 L1562.48 691.329 L1563.04 691.329 L1563.6 691.329 L1564.16 691.329 L1564.72 691.329 L1565.28 691.329 L1565.83 691.329 L1566.39 691.329 L1566.95 691.329 L1567.51 691.329 L1568.07 691.329 L1568.63 691.329 L1569.19 691.329 L1569.75 691.329 L1570.31 691.329 L1570.87 691.329 L1571.43 691.329 L1571.99 691.329 L1572.55 691.329 L1573.1 691.329 L1573.66 691.329 L1574.22 691.329 L1574.78 691.329 L1575.34 691.329 L1575.9 691.329 L1576.46 691.329 L1577.02 691.329 L1577.58 691.329 L1578.14 691.329 L1578.7 691.329 L1579.26 691.329 L1579.82 691.329 L1580.37 691.329 L1580.93 691.329 L1581.49 691.329 L1582.05 691.329 L1582.61 691.329 L1583.17 691.329 L1583.73 691.329 L1584.29 691.329 L1584.85 691.329 L1585.41 691.329 L1585.97 691.329 L1586.53 691.329 L1587.09 691.329 L1587.65 691.329 L1588.2 691.329 L1588.76 691.329 L1589.32 691.329 L1589.88 691.329 L1590.44 691.329 L1591 691.329 L1591.56 691.329 L1592.12 691.329 L1592.68 691.329 L1593.24 691.329 L1593.8 691.329 L1594.36 691.329 L1594.92 691.329 L1595.47 691.329 L1596.03 691.329 L1596.59 691.329 L1597.15 691.329 L1597.71 691.329 L1598.27 691.329 L1598.83 691.329 L1599.39 691.329 L1599.95 691.329 L1600.51 691.329 L1601.07 691.329 L1601.63 691.329 L1602.19 691.329 L1602.74 691.329 L1603.3 691.329 L1603.86 691.329 L1604.42 691.329 L1604.98 691.329 L1605.54 691.329 L1606.1 691.329 L1606.66 691.329 L1607.22 691.329 L1607.78 691.329 L1608.34 691.329 L1608.9 691.329 L1609.46 691.329 L1610.02 691.329 L1610.57 691.329 L1611.13 691.329 L1611.69 691.329 L1612.25 691.329 L1612.81 691.329 L1613.37 691.329 L1613.93 691.329 L1614.49 691.329 L1615.05 691.329 L1615.61 691.329 L1616.17 691.329 L1616.73 691.329 L1617.29 691.329 L1617.84 691.329 L1618.4 691.329 L1618.96 691.329 L1619.52 691.329 L1620.08 691.329 L1620.64 691.329 L1621.2 691.329 L1621.76 691.329 L1622.32 691.329 L1622.88 691.329 L1623.44 691.329 L1624 691.329 L1624.56 691.329 L1625.11 691.329 L1625.67 691.329 L1626.23 691.329 L1626.79 691.329 L1627.35 691.329 L1627.91 691.329 L1628.47 691.329 L1629.03 691.329 L1629.59 691.329 L1630.15 691.329 L1630.71 691.329 L1631.27 691.329 L1631.83 691.329 L1632.39 691.329 L1632.94 691.329 L1633.5 691.329 L1634.06 691.329 L1634.62 691.329 L1635.18 691.329 L1635.74 691.329 L1636.3 691.329 L1636.86 691.329 L1637.42 691.329 L1637.98 691.329 L1638.54 691.329 L1639.1 691.329 L1639.66 691.329 L1640.21 691.329 L1640.77 691.329 L1641.33 691.329 L1641.89 691.329 L1642.45 691.329 L1643.01 691.329 L1643.57 691.329 L1644.13 691.329 L1644.69 691.329 L1645.25 691.329 L1645.81 691.329 L1646.37 691.329 L1646.93 691.329 L1647.48 691.329 L1648.04 691.329 L1648.6 691.329 L1649.16 691.329 L1649.72 691.329 L1650.28 691.329 L1650.84 691.329 L1651.4 691.329 L1651.96 691.329 L1652.52 691.329 L1653.08 691.329 L1653.64 691.329 L1654.2 691.329 L1654.76 691.329 L1655.31 691.329 L1655.87 691.329 L1656.43 691.329 L1656.99 691.329 L1657.55 691.329 L1658.11 691.329 L1658.67 691.329 L1659.23 691.329 L1659.79 691.329 L1660.35 691.329 L1660.91 691.329 L1661.47 691.329 L1662.03 691.329 L1662.58 691.329 L1663.14 691.329 L1663.7 691.329 L1664.26 691.329 L1664.82 691.329 L1665.38 691.329 L1665.94 691.329 L1666.5 691.329 L1667.06 691.329 L1667.62 691.329 L1668.18 691.329 L1668.74 691.329 L1669.3 691.329 L1669.85 691.329 L1670.41 691.329 L1670.97 691.329 L1671.53 691.329 L1672.09 691.329 L1672.65 691.329 L1673.21 691.329 L1673.77 691.329 L1674.33 691.329 L1674.89 691.329 L1675.45 691.329 L1676.01 691.329 L1676.57 691.329 L1677.13 691.329 L1677.68 691.329 L1678.24 691.329 L1678.8 691.329 L1679.36 691.329 L1679.92 691.329 L1680.48 691.329 L1681.04 691.329 L1681.6 691.329 L1682.16 691.329 L1682.72 691.329 L1683.28 691.329 L1683.84 691.329 L1684.4 691.329 L1684.95 691.329 L1685.51 691.329 L1686.07 691.329 L1686.63 691.329 L1687.19 691.329 L1687.75 691.329 L1688.31 691.329 L1688.87 691.329 L1689.43 691.329 L1689.99 691.329 L1690.55 691.329 L1691.11 691.329 L1691.67 691.329 L1692.23 691.329 L1692.78 691.329 L1693.34 691.329 L1693.9 691.329 L1694.46 691.329 L1695.02 691.329 L1695.58 691.329 L1696.14 691.329 L1696.7 691.329 L1697.26 691.329 L1697.82 691.329 L1698.38 691.329 L1698.94 691.329 L1699.5 691.329 L1700.05 691.329 L1700.61 691.329 L1701.17 691.329 L1701.73 691.329 L1702.29 691.329 L1702.85 691.329 L1703.41 691.329 L1703.97 691.329 L1704.53 691.329 L1705.09 691.329 L1705.65 691.329 L1706.21 691.329 L1706.77 691.329 L1707.32 691.329 L1707.88 691.329 L1708.44 691.329 L1709 691.329 L1709.56 691.329 L1710.12 691.329 L1710.68 691.329 L1711.24 691.329 L1711.8 691.329 L1712.36 691.329 L1712.92 691.329 L1713.48 691.329 L1714.04 691.329 L1714.6 691.329 L1715.15 691.329 L1715.71 691.329 L1716.27 691.329 L1716.83 691.329 L1717.39 691.329 L1717.95 691.329 L1718.51 691.329 L1719.07 691.329 L1719.63 691.329 L1720.19 691.329 L1720.75 691.329 L1721.31 691.329 L1721.87 691.329 L1722.42 691.329 L1722.98 691.329 L1723.54 691.329 L1724.1 691.329 L1724.66 691.329 L1725.22 691.329 L1725.78 691.329 L1726.34 691.329 L1726.9 691.329 L1727.46 691.329 L1728.02 691.329 L1728.58 691.329 L1729.14 691.329 L1729.69 691.329 L1730.25 691.329 L1730.81 691.329 L1731.37 691.329 L1731.93 691.329 L1732.49 691.329 L1733.05 691.329 L1733.61 691.329 L1734.17 691.329 L1734.73 691.329 L1735.29 691.329 L1735.85 691.329 L1736.41 691.329 L1736.97 691.329 L1737.52 691.329 L1738.08 691.329 L1738.64 691.329 L1739.2 691.329 L1739.76 691.329 L1740.32 691.329 L1740.88 691.329 L1741.44 691.329 L1742 691.329 L1742.56 691.329 L1743.12 691.329 L1743.68 691.329 L1744.24 691.329 L1744.79 691.329 L1745.35 691.329 L1745.91 691.329 L1746.47 691.329 L1747.03 691.329 L1747.59 691.329 L1748.15 691.329 L1748.71 691.329 L1749.27 691.329 L1749.83 691.329 L1750.39 691.329 L1750.95 691.329 L1751.51 691.329 L1752.06 691.329 L1752.62 691.329 L1753.18 691.329 L1753.74 691.329 L1754.3 691.329 L1754.86 691.329 L1755.42 691.329 L1755.98 691.329 L1756.54 691.329 L1757.1 691.329 L1757.66 691.329 L1758.22 691.329 L1758.78 691.329 L1759.34 691.329 L1759.89 691.329 L1760.45 691.329 L1761.01 691.329 L1761.57 691.329 L1762.13 691.329 L1762.69 691.329 L1763.25 691.329 L1763.81 691.329 L1764.37 691.329 L1764.93 691.329 L1765.49 691.329 L1766.05 691.329 L1766.61 691.329 L1767.16 691.329 L1767.72 691.329 L1768.28 691.329 L1768.84 691.329 L1769.4 691.329 L1769.96 691.329 L1770.52 691.329 L1771.08 691.329 L1771.64 691.329 L1772.2 691.329 L1772.76 691.329 L1773.32 691.329 L1773.88 691.329 L1774.43 691.329 L1774.99 691.329 L1775.55 691.329 L1776.11 691.329 L1776.67 691.329 L1777.23 691.329 L1777.79 691.329 L1778.35 691.329 L1778.91 691.329 L1779.47 691.329 L1780.03 691.329 L1780.59 691.329 L1781.15 691.329 L1781.71 691.329 L1782.26 691.329 L1782.82 691.329 L1783.38 691.329 L1783.94 691.329 L1784.5 691.329 L1785.06 691.329 L1785.62 691.329 L1786.18 691.329 L1786.74 691.329 L1787.3 691.329 L1787.86 691.329 L1788.42 691.329 L1788.98 691.329 L1789.53 691.329 L1790.09 691.329 L1790.65 691.329 L1791.21 691.329 L1791.77 691.329 L1792.33 691.329 L1792.89 691.329 L1793.45 691.329 L1794.01 691.329 L1794.57 691.329 L1795.13 691.329 L1795.69 691.329 L1796.25 691.329 L1796.8 691.329 L1797.36 691.329 L1797.92 691.329 L1798.48 691.329 L1799.04 691.329 L1799.6 691.329 L1800.16 691.329 L1800.72 691.329 L1801.28 691.329 L1801.84 691.329 L1802.4 691.329 L1802.96 691.329 L1803.52 691.329 L1804.08 691.329 L1804.63 691.329 L1805.19 691.329 L1805.75 691.329 L1806.31 691.329 L1806.87 691.329 L1807.43 691.329 L1807.99 691.329 L1808.55 691.329 L1809.11 691.329 L1809.67 691.329 L1810.23 691.329 L1810.79 691.329 L1811.35 691.329 L1811.9 691.329 L1812.46 691.329 L1813.02 691.329 L1813.58 691.329 L1814.14 691.329 L1814.7 691.329 L1815.26 691.329 L1815.82 691.329 L1816.38 691.329 L1816.94 691.329 L1817.5 691.329 L1818.06 691.329 L1818.62 691.329 L1819.18 691.329 L1819.73 691.329 L1820.29 691.329 L1820.85 691.329 L1821.41 691.329 L1821.97 691.329 L1822.53 691.329 L1823.09 691.329 L1823.65 691.329 L1824.21 691.329 L1824.77 691.329 L1825.33 691.329 L1825.89 691.329 L1826.45 691.329 L1827 691.329 L1827.56 691.329 L1828.12 691.329 L1828.68 691.329 L1829.24 691.329 L1829.8 691.329 L1830.36 691.329 L1830.92 691.329 L1831.48 691.329 L1832.04 691.329 L1832.6 691.329 L1833.16 691.329 L1833.72 691.329 L1834.27 691.329 L1834.83 691.329 L1835.39 691.329 L1835.95 691.329 L1836.51 691.329 L1837.07 691.329 L1837.63 691.329 L1838.19 691.329 L1838.19 682.474 L1837.63 682.474 L1837.07 682.474 L1836.51 682.474 L1835.95 682.474 L1835.39 682.474 L1834.83 682.474 L1834.27 682.474 L1833.72 682.474 L1833.16 682.474 L1832.6 682.474 L1832.04 682.474 L1831.48 682.474 L1830.92 682.474 L1830.36 682.474 L1829.8 682.474 L1829.24 682.474 L1828.68 682.474 L1828.12 682.474 L1827.56 682.474 L1827 682.474 L1826.45 682.474 L1825.89 682.474 L1825.33 682.474 L1824.77 682.474 L1824.21 682.474 L1823.65 682.474 L1823.09 682.474 L1822.53 682.474 L1821.97 682.474 L1821.41 682.474 L1820.85 682.474 L1820.29 682.474 L1819.73 682.474 L1819.18 682.474 L1818.62 682.474 L1818.06 682.474 L1817.5 682.474 L1816.94 682.474 L1816.38 682.474 L1815.82 682.474 L1815.26 682.474 L1814.7 682.474 L1814.14 682.474 L1813.58 682.474 L1813.02 682.474 L1812.46 682.474 L1811.9 682.474 L1811.35 682.474 L1810.79 682.474 L1810.23 682.474 L1809.67 682.474 L1809.11 682.474 L1808.55 682.474 L1807.99 682.474 L1807.43 682.474 L1806.87 682.474 L1806.31 682.474 L1805.75 682.474 L1805.19 682.474 L1804.63 682.474 L1804.08 682.474 L1803.52 682.474 L1802.96 682.474 L1802.4 682.474 L1801.84 682.474 L1801.28 682.474 L1800.72 682.474 L1800.16 682.474 L1799.6 682.474 L1799.04 682.474 L1798.48 682.474 L1797.92 682.474 L1797.36 682.474 L1796.8 682.474 L1796.25 682.474 L1795.69 682.474 L1795.13 682.474 L1794.57 682.474 L1794.01 682.474 L1793.45 682.474 L1792.89 682.474 L1792.33 682.474 L1791.77 682.474 L1791.21 682.474 L1790.65 682.474 L1790.09 682.474 L1789.53 682.474 L1788.98 682.474 L1788.42 682.474 L1787.86 682.474 L1787.3 682.474 L1786.74 682.474 L1786.18 682.474 L1785.62 682.474 L1785.06 682.474 L1784.5 682.474 L1783.94 682.474 L1783.38 682.474 L1782.82 682.474 L1782.26 682.474 L1781.71 682.474 L1781.15 682.474 L1780.59 682.474 L1780.03 682.474 L1779.47 682.474 L1778.91 682.474 L1778.35 682.474 L1777.79 682.474 L1777.23 682.474 L1776.67 682.474 L1776.11 682.474 L1775.55 682.474 L1774.99 682.474 L1774.43 682.474 L1773.88 682.474 L1773.32 682.474 L1772.76 682.474 L1772.2 682.474 L1771.64 682.474 L1771.08 682.474 L1770.52 682.474 L1769.96 682.474 L1769.4 682.474 L1768.84 682.474 L1768.28 682.474 L1767.72 682.474 L1767.16 682.474 L1766.61 682.474 L1766.05 682.474 L1765.49 682.474 L1764.93 682.474 L1764.37 682.474 L1763.81 682.474 L1763.25 682.474 L1762.69 682.474 L1762.13 682.474 L1761.57 682.474 L1761.01 682.474 L1760.45 682.474 L1759.89 682.474 L1759.34 682.474 L1758.78 682.474 L1758.22 682.474 L1757.66 682.474 L1757.1 682.474 L1756.54 682.474 L1755.98 682.474 L1755.42 682.474 L1754.86 682.474 L1754.3 682.474 L1753.74 682.474 L1753.18 682.474 L1752.62 682.474 L1752.06 682.474 L1751.51 682.474 L1750.95 682.474 L1750.39 682.474 L1749.83 682.474 L1749.27 682.474 L1748.71 682.474 L1748.15 682.474 L1747.59 682.474 L1747.03 682.474 L1746.47 682.474 L1745.91 682.474 L1745.35 682.474 L1744.79 682.474 L1744.24 682.474 L1743.68 682.474 L1743.12 682.474 L1742.56 682.474 L1742 682.474 L1741.44 682.474 L1740.88 682.474 L1740.32 682.474 L1739.76 682.474 L1739.2 682.474 L1738.64 682.474 L1738.08 682.474 L1737.52 682.474 L1736.97 682.474 L1736.41 682.474 L1735.85 682.474 L1735.29 682.474 L1734.73 682.474 L1734.17 682.474 L1733.61 682.474 L1733.05 682.474 L1732.49 682.474 L1731.93 682.474 L1731.37 682.474 L1730.81 682.474 L1730.25 682.474 L1729.69 682.474 L1729.14 682.474 L1728.58 682.474 L1728.02 682.474 L1727.46 682.474 L1726.9 682.474 L1726.34 682.474 L1725.78 682.474 L1725.22 682.474 L1724.66 682.474 L1724.1 682.474 L1723.54 682.474 L1722.98 682.474 L1722.42 682.474 L1721.87 682.474 L1721.31 682.474 L1720.75 682.474 L1720.19 682.474 L1719.63 682.474 L1719.07 682.474 L1718.51 682.474 L1717.95 682.474 L1717.39 682.474 L1716.83 682.474 L1716.27 682.474 L1715.71 682.474 L1715.15 682.474 L1714.6 682.474 L1714.04 682.474 L1713.48 682.474 L1712.92 682.474 L1712.36 682.474 L1711.8 682.474 L1711.24 682.474 L1710.68 682.474 L1710.12 682.474 L1709.56 682.474 L1709 682.474 L1708.44 682.474 L1707.88 682.474 L1707.32 682.474 L1706.77 682.474 L1706.21 682.474 L1705.65 682.474 L1705.09 682.474 L1704.53 682.474 L1703.97 682.474 L1703.41 682.474 L1702.85 682.474 L1702.29 682.474 L1701.73 682.474 L1701.17 682.474 L1700.61 682.474 L1700.05 682.474 L1699.5 682.474 L1698.94 682.474 L1698.38 682.474 L1697.82 682.474 L1697.26 682.474 L1696.7 682.474 L1696.14 682.474 L1695.58 682.474 L1695.02 682.474 L1694.46 682.474 L1693.9 682.474 L1693.34 682.474 L1692.78 682.474 L1692.23 682.474 L1691.67 682.474 L1691.11 682.474 L1690.55 682.474 L1689.99 682.474 L1689.43 682.474 L1688.87 682.474 L1688.31 682.474 L1687.75 682.474 L1687.19 682.474 L1686.63 682.474 L1686.07 682.474 L1685.51 682.474 L1684.95 682.474 L1684.4 682.474 L1683.84 682.474 L1683.28 682.474 L1682.72 682.474 L1682.16 682.474 L1681.6 682.474 L1681.04 682.474 L1680.48 682.474 L1679.92 682.474 L1679.36 682.474 L1678.8 682.474 L1678.24 682.474 L1677.68 682.474 L1677.13 682.474 L1676.57 682.474 L1676.01 682.474 L1675.45 682.474 L1674.89 682.474 L1674.33 682.474 L1673.77 682.474 L1673.21 682.474 L1672.65 682.474 L1672.09 682.474 L1671.53 682.474 L1670.97 682.474 L1670.41 682.474 L1669.85 682.474 L1669.3 682.474 L1668.74 682.474 L1668.18 682.474 L1667.62 682.474 L1667.06 682.474 L1666.5 682.474 L1665.94 682.474 L1665.38 682.474 L1664.82 682.474 L1664.26 682.474 L1663.7 682.474 L1663.14 682.474 L1662.58 682.474 L1662.03 682.474 L1661.47 682.474 L1660.91 682.474 L1660.35 682.474 L1659.79 682.474 L1659.23 682.474 L1658.67 682.474 L1658.11 682.474 L1657.55 682.474 L1656.99 682.474 L1656.43 682.474 L1655.87 682.474 L1655.31 682.474 L1654.76 682.474 L1654.2 682.474 L1653.64 682.474 L1653.08 682.474 L1652.52 682.474 L1651.96 682.474 L1651.4 682.474 L1650.84 682.474 L1650.28 682.474 L1649.72 682.474 L1649.16 682.474 L1648.6 682.474 L1648.04 682.474 L1647.48 682.474 L1646.93 682.474 L1646.37 682.474 L1645.81 682.474 L1645.25 682.474 L1644.69 682.474 L1644.13 682.474 L1643.57 682.474 L1643.01 682.474 L1642.45 682.474 L1641.89 682.474 L1641.33 682.474 L1640.77 682.474 L1640.21 682.474 L1639.66 682.474 L1639.1 682.474 L1638.54 682.474 L1637.98 682.474 L1637.42 682.474 L1636.86 682.474 L1636.3 682.474 L1635.74 682.474 L1635.18 682.474 L1634.62 682.474 L1634.06 682.474 L1633.5 682.474 L1632.94 682.474 L1632.39 682.474 L1631.83 682.474 L1631.27 682.474 L1630.71 682.474 L1630.15 682.474 L1629.59 682.474 L1629.03 682.474 L1628.47 682.474 L1627.91 682.474 L1627.35 682.474 L1626.79 682.474 L1626.23 682.474 L1625.67 682.474 L1625.11 682.474 L1624.56 682.474 L1624 682.474 L1623.44 682.474 L1622.88 682.474 L1622.32 682.474 L1621.76 682.474 L1621.2 682.474 L1620.64 682.474 L1620.08 682.474 L1619.52 682.474 L1618.96 682.474 L1618.4 682.474 L1617.84 682.474 L1617.29 682.474 L1616.73 682.474 L1616.17 682.474 L1615.61 682.474 L1615.05 682.474 L1614.49 682.474 L1613.93 682.474 L1613.37 682.474 L1612.81 682.474 L1612.25 682.474 L1611.69 682.474 L1611.13 682.474 L1610.57 682.474 L1610.02 682.474 L1609.46 682.474 L1608.9 682.474 L1608.34 682.474 L1607.78 682.474 L1607.22 682.474 L1606.66 682.474 L1606.1 682.474 L1605.54 682.474 L1604.98 682.474 L1604.42 682.474 L1603.86 682.474 L1603.3 682.474 L1602.74 682.474 L1602.19 682.474 L1601.63 682.474 L1601.07 682.474 L1600.51 682.474 L1599.95 682.474 L1599.39 682.474 L1598.83 682.474 L1598.27 682.474 L1597.71 682.474 L1597.15 682.474 L1596.59 682.474 L1596.03 682.474 L1595.47 682.474 L1594.92 682.474 L1594.36 682.474 L1593.8 682.474 L1593.24 682.474 L1592.68 682.474 L1592.12 682.474 L1591.56 682.474 L1591 682.474 L1590.44 682.474 L1589.88 682.474 L1589.32 682.474 L1588.76 682.474 L1588.2 682.474 L1587.65 682.474 L1587.09 682.474 L1586.53 682.474 L1585.97 682.474 L1585.41 682.474 L1584.85 682.474 L1584.29 682.474 L1583.73 682.474 L1583.17 682.474 L1582.61 682.474 L1582.05 682.474 L1581.49 682.474 L1580.93 682.474 L1580.37 682.474 L1579.82 682.474 L1579.26 682.474 L1578.7 682.474 L1578.14 682.474 L1577.58 682.474 L1577.02 682.474 L1576.46 682.474 L1575.9 682.474 L1575.34 682.474 L1574.78 682.474 L1574.22 682.474 L1573.66 682.474 L1573.1 682.474 L1572.55 682.474 L1571.99 682.474 L1571.43 682.474 L1570.87 682.474 L1570.31 682.474 L1569.75 682.474 L1569.19 682.474 L1568.63 682.474 L1568.07 682.474 L1567.51 682.474 L1566.95 682.474 L1566.39 682.474 L1565.83 682.474 L1565.28 682.474 L1564.72 682.474 L1564.16 682.474 L1563.6 682.474 L1563.04 682.474 L1562.48 682.474 L1561.92 682.474 L1561.36 682.474 L1560.8 682.474 L1560.24 682.474 L1559.68 682.474 L1559.12 682.474 L1558.56 682.474 L1558 682.474 L1557.45 682.474 L1556.89 682.474 L1556.33 682.474 L1555.77 682.474 L1555.21 682.474 L1554.65 682.474 L1554.09 682.474 L1553.53 682.474 L1552.97 682.474 L1552.41 682.474 L1551.85 682.474 L1551.29 682.474 L1550.73 682.474 L1550.18 682.474 L1549.62 682.474 L1549.06 682.474 L1548.5 682.474 L1547.94 682.474 L1547.38 682.474 L1546.82 682.474 L1546.26 682.474 L1545.7 682.474 L1545.14 682.474 L1544.58 682.474 L1544.02 682.474 L1543.46 682.474 L1542.9 682.474 L1542.35 682.474 L1541.79 682.474 L1541.23 682.474 L1540.67 682.474 L1540.11 682.474 L1539.55 682.474 L1538.99 682.474 L1538.43 682.474 L1537.87 682.474 L1537.31 682.474 L1536.75 682.474 L1536.19 682.474 L1535.63 682.474 L1535.08 682.474 L1534.52 682.474 L1533.96 682.474 L1533.4 682.474 L1532.84 682.474 L1532.28 682.474 L1531.72 682.474 L1531.16 682.474 L1530.6 682.474 L1530.04 682.474 L1529.48 682.474 L1528.92 682.474 L1528.36 682.474 L1527.81 682.474 L1527.25 682.474 L1526.69 682.474 L1526.13 682.474 L1525.57 682.474 L1525.01 682.474 L1524.45 682.474 L1523.89 682.474 L1523.33 682.474 L1522.77 682.474 L1522.21 682.474 L1521.65 682.474 L1521.09 682.474 L1520.53 682.474 L1519.98 682.474 L1519.42 682.474 L1518.86 682.474 L1518.3 682.474 L1517.74 682.474 L1517.18 682.474 L1516.62 682.474 L1516.06 682.474 L1515.5 682.474 L1514.94 682.474 L1514.38 682.474 L1513.82 682.474 L1513.26 682.474 L1512.71 682.474 L1512.15 682.474 L1511.59 682.474 L1511.03 682.474 L1510.47 682.474 L1509.91 682.474 L1509.35 682.474 L1508.79 682.474 L1508.23 682.474 L1507.67 682.474 L1507.11 682.474 L1506.55 682.474 L1505.99 682.474 L1505.44 682.474 L1504.88 682.474 L1504.32 682.474 L1503.76 682.474 L1503.2 682.474 L1502.64 682.474 L1502.08 682.474 L1501.52 682.474 L1500.96 682.474 L1500.4 682.474 L1499.84 682.474 L1499.28 682.474 L1498.72 682.474 L1498.16 682.474 L1497.61 682.474 L1497.05 682.474 L1496.49 682.474 L1495.93 682.474 L1495.37 682.474 L1494.81 682.474 L1494.25 682.474 L1493.69 682.474 L1493.13 682.474 L1492.57 682.474 L1492.01 682.474 L1491.45 682.474 L1490.89 682.474 L1490.34 682.474 L1489.78 682.474 L1489.22 682.474 L1488.66 682.474 L1488.1 682.474 L1487.54 682.474 L1486.98 682.474 L1486.42 682.474 L1485.86 682.474 L1485.3 682.474 L1484.74 682.474 L1484.18 682.474 L1483.62 682.474 L1483.07 682.474 L1482.51 682.474 L1481.95 682.474 L1481.39 682.474 L1480.83 682.474 L1480.27 682.474 L1479.71 682.474 L1479.15 682.474 L1478.59 682.474 L1478.03 682.474 L1477.47 682.474 L1476.91 682.474 L1476.35 682.474 L1475.79 682.474 L1475.24 682.474 L1474.68 682.474 L1474.12 682.474 L1473.56 682.474 L1473 682.474 L1472.44 682.474 L1471.88 682.474 L1471.32 682.474 L1470.76 682.474 L1470.2 682.474 L1469.64 682.474 L1469.08 682.474 L1468.52 682.474 L1467.97 682.474 L1467.41 682.474 L1466.85 682.474 L1466.29 682.474 L1465.73 682.474 L1465.17 682.474 L1464.61 682.474 L1464.05 682.474 L1463.49 682.474 L1462.93 682.474 L1462.37 682.474 L1461.81 682.474 L1461.25 682.474 L1460.7 682.474 L1460.14 682.474 L1459.58 682.474 L1459.02 682.474 L1458.46 682.474 L1457.9 682.474 L1457.34 682.474 L1456.78 682.474 L1456.22 682.474 L1455.66 682.474 L1455.1 682.474 L1454.54 682.474 L1453.98 682.474 L1453.42 682.474 L1452.87 682.474 L1452.31 682.474 L1451.75 682.474 L1451.19 682.474 L1450.63 682.474 L1450.07 682.474 L1449.51 682.474 L1448.95 682.474 L1448.39 682.474 L1447.83 682.474 L1447.27 682.474 L1446.71 682.474 L1446.15 682.474 L1445.6 682.474 L1445.04 682.474 L1444.48 682.474 L1443.92 682.474 L1443.36 682.474 L1442.8 682.474 L1442.24 682.474 L1441.68 682.474 L1441.12 682.474 L1440.56 682.474 L1440 682.474 L1439.44 682.474 L1438.88 682.474 L1438.33 682.474 L1437.77 682.474 L1437.21 682.474 L1436.65 682.474 L1436.09 682.474 L1435.53 682.474 L1434.97 682.474 L1434.41 682.474 L1433.85 682.474 L1433.29 682.474 L1432.73 682.474 L1432.17 682.474 L1431.61 682.474 L1431.05 682.474 L1430.5 682.474 L1429.94 682.474 L1429.38 682.474 L1428.82 682.474 L1428.26 682.474 L1427.7 682.474 L1427.14 682.474 L1426.58 682.474 L1426.02 682.474 L1425.46 682.474 L1424.9 682.474 L1424.34 682.474 L1423.78 682.474 L1423.23 682.474 L1422.67 682.474 L1422.11 682.474 L1421.55 682.474 L1420.99 682.474 L1420.43 682.474 L1419.87 682.474 L1419.31 682.474 L1418.75 682.474 L1418.19 682.474 L1417.63 682.474 L1417.07 682.474 L1416.51 682.474 L1415.95 682.474 L1415.4 682.474 L1414.84 682.474 L1414.28 682.474 L1413.72 682.474 L1413.16 682.474 L1412.6 682.474 L1412.04 682.474 L1411.48 682.474 L1410.92 682.474 L1410.36 682.474 L1409.8 682.474 L1409.24 682.474 L1408.68 682.474 L1408.13 682.474 L1407.57 682.474 L1407.01 682.474 L1406.45 682.474 L1405.89 682.474 L1405.33 682.474 L1404.77 682.474 L1404.21 682.474 L1403.65 682.474 L1403.09 682.474 L1402.53 682.474 L1401.97 682.474 L1401.41 682.474 L1400.86 682.474 L1400.3 682.474 L1399.74 682.474 L1399.18 682.474 L1398.62 682.474 L1398.06 682.474 L1397.5 682.474 L1396.94 682.474 L1396.38 682.474 L1395.82 682.474 L1395.26 682.474 L1394.7 682.474 L1394.14 682.474 L1393.58 682.474 L1393.03 682.474 L1392.47 682.474 L1391.91 682.474 L1391.35 682.474 L1390.79 682.474 L1390.23 682.474 L1389.67 682.474 L1389.11 682.474 L1388.55 682.474 L1387.99 682.474 L1387.43 682.474 L1386.87 682.474 L1386.31 682.474 L1385.76 682.474 L1385.2 682.474 L1384.64 682.474 L1384.08 682.474 L1383.52 682.474 L1382.96 682.474 L1382.4 682.474 L1381.84 682.474 L1381.28 682.474 L1380.72 682.474 L1380.16 682.474 L1379.6 682.474 L1379.04 682.474 L1378.49 682.474 L1377.93 682.474 L1377.37 682.474 L1376.81 682.474 L1376.25 682.474 L1375.69 682.474 L1375.13 682.474 L1374.57 682.474 L1374.01 682.474 L1373.45 682.474 L1372.89 682.474 L1372.33 682.474 L1371.77 682.474 L1371.21 682.474 L1370.66 682.474 L1370.1 682.474 L1369.54 682.474 L1368.98 682.474 L1368.42 682.474 L1367.86 682.474 L1367.3 682.474 L1366.74 682.474 L1366.18 682.474 L1365.62 682.474 L1365.06 682.474 L1364.5 682.474 L1363.94 682.474 L1363.39 682.474 L1362.83 682.474 L1362.27 682.474 L1361.71 682.474 L1361.15 682.474 L1360.59 682.474 L1360.03 682.474 L1359.47 682.474 L1358.91 682.474 L1358.35 682.474 L1357.79 682.474 L1357.23 682.474 L1356.67 682.474 L1356.12 682.474 L1355.56 682.474 L1355 682.474 L1354.44 682.474 L1353.88 682.474 L1353.32 682.474 L1352.76 682.474 L1352.2 682.474 L1351.64 682.474 L1351.08 682.474 L1350.52 682.474 L1349.96 682.474 L1349.4 682.474 L1348.84 682.474 L1348.29 682.474 L1347.73 682.474 L1347.17 682.474 L1346.61 682.474 L1346.05 682.474 L1345.49 682.474 L1344.93 682.474 L1344.37 682.474 L1343.81 682.474 L1343.25 682.474 L1342.69 682.474 L1342.13 682.474 L1341.57 682.474 L1341.02 682.474 L1340.46 682.474 L1339.9 682.474 L1339.34 682.474 L1338.78 682.474 L1338.22 682.474 L1337.66 682.474 L1337.1 682.474 L1336.54 682.474 L1335.98 682.474 L1335.42 682.474 L1334.86 682.474 L1334.3 682.474 L1333.75 682.474 L1333.19 682.474 L1332.63 682.474 L1332.07 682.474 L1331.51 682.474 L1330.95 682.474 L1330.39 682.474 L1329.83 682.474 L1329.27 682.474 L1328.71 682.474 L1328.15 682.474 L1327.59 682.474 L1327.03 682.474 L1326.47 682.474 L1325.92 682.474 L1325.36 682.474 L1324.8 682.474 L1324.24 682.474 L1323.68 682.474 L1323.12 682.474 L1322.56 682.474 L1322 682.474 L1321.44 682.474 L1320.88 682.474 L1320.32 682.474 L1319.76 682.474 L1319.2 682.474 L1318.65 682.474 L1318.09 682.474 L1317.53 682.474 L1316.97 682.474 L1316.41 682.474 L1315.85 682.474 L1315.29 682.474 L1314.73 682.474 L1314.17 682.474 L1313.61 682.474 L1313.05 682.474 L1312.49 682.474 L1311.93 682.474 L1311.38 682.474 L1310.82 682.474 L1310.26 682.474 L1309.7 682.474 L1309.14 682.474 L1308.58 682.474 L1308.02 682.474 L1307.46 682.474 L1306.9 682.474 L1306.34 682.474 L1305.78 682.474 L1305.22 682.474 L1304.66 682.474 L1304.1 682.474 L1303.55 682.474 L1302.99 682.474 L1302.43 682.474 L1301.87 682.474 L1301.31 682.474 L1300.75 682.474 L1300.19 682.474 L1299.63 682.474 L1299.07 682.474 L1298.51 682.474 L1297.95 682.474 L1297.39 682.474 L1296.83 682.474 L1296.28 682.474 L1295.72 682.474 L1295.16 682.474 L1294.6 682.474 L1294.04 682.474 L1293.48 682.474 L1292.92 682.474 L1292.36 682.474 L1291.8 682.474 L1291.24 682.474 L1290.68 682.474 L1290.12 682.474 L1289.56 682.474 L1289 682.474 L1288.45 682.474 L1287.89 682.474 L1287.33 682.474 L1286.77 682.474 L1286.21 682.474 L1285.65 682.474 L1285.09 682.474 L1284.53 682.474 L1283.97 682.474 L1283.41 682.474 L1282.85 682.474 L1282.29 682.474 L1281.73 682.474 L1281.18 682.474 L1280.62 682.474 L1280.06 682.474 L1279.5 682.474 L1278.94 682.474 L1278.38 682.474 L1277.82 682.474 L1277.26 682.474 L1276.7 682.474 L1276.14 682.474 L1275.58 682.474 L1275.02 682.474 L1274.46 682.474 L1273.91 682.474 L1273.35 682.474 L1272.79 682.474 L1272.23 682.474 L1271.67 682.474 L1271.11 682.474 L1270.55 682.474 L1269.99 682.474 L1269.43 682.474 L1268.87 682.474 L1268.31 682.474 L1267.75 682.474 L1267.19 682.474 L1266.63 682.474 L1266.08 682.474 L1265.52 682.474 L1264.96 682.474 L1264.4 682.474 L1263.84 682.474 L1263.28 682.474 L1262.72 682.474 L1262.16 682.474 L1261.6 682.474 L1261.04 682.474 L1260.48 682.474 L1259.92 682.474 L1259.36 682.474 L1258.81 682.474 L1258.25 682.474 L1257.69 682.474 L1257.13 682.474 L1256.57 682.474 L1256.01 682.474 L1255.45 682.474 L1254.89 682.474 L1254.33 682.474 L1253.77 682.474 L1253.21 682.474 L1252.65 682.474 L1252.09 682.474 L1251.54 682.474 L1250.98 682.474 L1250.42 682.474 L1249.86 682.474 L1249.3 682.474 L1248.74 682.474 L1248.18 682.474 L1247.62 682.474 L1247.06 682.474 L1246.5 682.474 L1245.94 682.474 L1245.38 682.474 L1244.82 682.474 L1244.26 682.474 L1243.71 682.474 L1243.15 682.474 L1242.59 682.474 L1242.03 682.474 L1241.47 682.474 L1240.91 682.474 L1240.35 682.474 L1239.79 682.474 L1239.23 682.474 L1238.67 682.474 L1238.11 682.474 L1237.55 682.474 L1236.99 682.474 L1236.44 682.474 L1235.88 682.474 L1235.32 682.474 L1234.76 682.474 L1234.2 682.474 L1233.64 682.474 L1233.08 682.474 L1232.52 682.474 L1231.96 682.474 L1231.4 682.474 L1230.84 682.474 L1230.28 682.474 L1229.72 682.474 L1229.17 682.474 L1228.61 682.474 L1228.05 682.474 L1227.49 682.474 L1226.93 682.474 L1226.37 682.474 L1225.81 682.474 L1225.25 682.474 L1224.69 682.474 L1224.13 682.474 L1223.57 682.474 L1223.01 682.474 L1222.45 682.474 L1221.89 682.474 L1221.34 682.474 L1220.78 682.474 L1220.22 682.474 L1219.66 682.474 L1219.1 682.474 L1218.54 682.474 L1217.98 682.474 L1217.42 682.474 L1216.86 682.474 L1216.3 682.474 L1215.74 682.474 L1215.18 682.474 L1214.62 682.474 L1214.07 682.474 L1213.51 682.474 L1212.95 682.474 L1212.39 682.474 L1211.83 682.474 L1211.27 682.474 L1210.71 682.474 L1210.15 682.474 L1209.59 682.474 L1209.03 682.474 L1208.47 682.474 L1207.91 682.474 L1207.35 682.474 L1206.8 682.474 L1206.24 682.474 L1205.68 682.474 L1205.12 682.474 L1204.56 682.474 L1204 682.474 L1203.44 682.474 L1202.88 682.474 L1202.32 682.474 L1201.76 682.474 L1201.2 682.474 L1200.64 682.474 L1200.08 682.474 L1199.52 682.474 L1198.97 682.474 L1198.41 682.474 L1197.85 682.474 L1197.29 682.474 L1196.73 682.474 L1196.17 682.474 L1195.61 682.474 L1195.05 682.474 L1194.49 682.474 L1193.93 682.474 L1193.37 682.474 L1192.81 682.474 L1192.25 682.474 L1191.7 682.474 L1191.14 682.474 L1190.58 682.474 L1190.02 682.474 L1189.46 682.474 L1188.9 682.474 L1188.34 682.474 L1187.78 682.474 L1187.22 682.474 L1186.66 682.474 L1186.1 682.474 L1185.54 682.474 L1184.98 682.474 L1184.43 682.474 L1183.87 682.474 L1183.31 682.474 L1182.75 682.474 L1182.19 682.474 L1181.63 682.474 L1181.07 682.474 L1180.51 682.474 L1179.95 682.474 L1179.39 682.474 L1178.83 682.474 L1178.27 682.474 L1177.71 682.474 L1177.15 682.474 L1176.6 682.474 L1176.04 682.474 L1175.48 682.474 L1174.92 682.474 L1174.36 682.474 L1173.8 682.474 L1173.24 682.474 L1172.68 682.474 L1172.12 682.474 L1171.56 682.474 L1171 682.474 L1170.44 682.474 L1169.88 682.474 L1169.33 682.474 L1168.77 682.474 L1168.21 682.474 L1167.65 682.474 L1167.09 682.474 L1166.53 682.474 L1165.97 682.474 L1165.41 682.474 L1164.85 682.474 L1164.29 682.474 L1163.73 682.474 L1163.17 682.474 L1162.61 682.474 L1162.05 682.474 L1161.5 682.474 L1160.94 682.474 L1160.38 682.474 L1159.82 682.474 L1159.26 682.474 L1158.7 682.474 L1158.14 682.474 L1157.58 682.474 L1157.02 682.474 L1156.46 682.474 L1155.9 682.474 L1155.34 682.474 L1154.78 682.474 L1154.23 682.474 L1153.67 682.474 L1153.11 682.474 L1152.55 682.474 L1151.99 682.474 L1151.43 682.474 L1150.87 682.474 L1150.31 682.474 L1149.75 682.474 L1149.19 682.474 L1148.63 682.474 L1148.07 682.474 L1147.51 682.474 L1146.96 682.474 L1146.4 682.474 L1145.84 682.474 L1145.28 682.474 L1144.72 682.474 L1144.16 682.474 L1143.6 682.474 L1143.04 682.474 L1142.48 682.474 L1141.92 682.474 L1141.36 682.474 L1140.8 682.474 L1140.24 682.474 L1139.68 682.474 L1139.13 682.474 L1138.57 682.474 L1138.01 682.474 L1137.45 682.474 L1136.89 682.474 L1136.33 682.474 L1135.77 682.474 L1135.21 682.474 L1134.65 682.474 L1134.09 682.474 L1133.53 682.474 L1132.97 682.474 L1132.41 682.474 L1131.86 682.474 L1131.3 682.474 L1130.74 682.474 L1130.18 682.474 L1129.62 682.474 L1129.06 682.474 L1128.5 682.474 L1127.94 682.474 L1127.38 682.474 L1126.82 682.474 L1126.26 682.474 L1125.7 682.474 L1125.14 682.474 L1124.59 682.474 L1124.03 682.474 L1123.47 682.474 L1122.91 682.474 L1122.35 682.474 L1121.79 682.474 L1121.23 682.474 L1120.67 682.474 L1120.11 682.474 L1119.55 682.474 L1118.99 682.474 L1118.43 682.474 L1117.87 682.474 L1117.31 682.474 L1116.76 682.474 L1116.2 682.474 L1115.64 682.474 L1115.08 682.474 L1114.52 682.474 L1113.96 682.474 L1113.4 682.474 L1112.84 682.474 L1112.28 682.474 L1111.72 682.474 L1111.16 682.474 L1110.6 682.474 L1110.04 682.474 L1109.49 682.474 L1108.93 682.474 L1108.37 682.474 L1107.81 682.474 L1107.25 682.474 L1106.69 682.474 L1106.13 682.474 L1105.57 682.474 L1105.01 682.474 L1104.45 682.474 L1103.89 682.474 L1103.33 682.474 L1102.77 682.474 L1102.22 682.474 L1101.66 682.474 L1101.1 682.474 L1100.54 682.474 L1099.98 682.474 L1099.42 682.474 L1098.86 682.474 L1098.3 682.474 L1097.74 682.474 L1097.18 682.474 L1096.62 682.474 L1096.06 682.474 L1095.5 682.474 L1094.94 682.474 L1094.39 682.474 L1093.83 682.474 L1093.27 682.474 L1092.71 682.474 L1092.15 682.474 L1091.59 682.474 L1091.03 682.474 L1090.47 682.474 L1089.91 682.474 L1089.35 682.474 L1088.79 682.474 L1088.23 682.474 L1087.67 682.474 L1087.12 682.474 L1086.56 682.474 L1086 682.474 L1085.44 682.474 L1084.88 682.474 L1084.32 682.474 L1083.76 682.474 L1083.2 682.474 L1082.64 682.474 L1082.08 682.474 L1081.52 682.474 L1080.96 682.474 L1080.4 682.474 L1079.85 682.474 L1079.29 682.474 L1078.73 682.474 L1078.17 682.474 L1077.61 682.474 L1077.05 682.474 L1076.49 682.474 L1075.93 682.474 L1075.37 682.474 L1074.81 682.474 L1074.25 682.474 L1073.69 682.474 L1073.13 682.474 L1072.57 682.474 L1072.02 682.474 L1071.46 682.474 L1070.9 682.474 L1070.34 682.474 L1069.78 682.474 L1069.22 682.474 L1068.66 682.474 L1068.1 682.474 L1067.54 682.474 L1066.98 682.474 L1066.42 682.474 L1065.86 682.474 L1065.3 682.474 L1064.75 682.474 L1064.19 682.474 L1063.63 682.474 L1063.07 682.474 L1062.51 682.474 L1061.95 682.474 L1061.39 682.474 L1060.83 682.474 L1060.27 682.474 L1059.71 682.474 L1059.15 682.474 L1058.59 682.474 L1058.03 682.474 L1057.48 682.474 L1056.92 682.474 L1056.36 682.474 L1055.8 682.474 L1055.24 682.474 L1054.68 682.474 L1054.12 682.474 L1053.56 682.474 L1053 682.474 L1052.44 682.474 L1051.88 682.474 L1051.32 682.474 L1050.76 682.474 L1050.2 682.474 L1049.65 682.474 L1049.09 682.474 L1048.53 682.474 L1047.97 682.474 L1047.41 682.474 L1046.85 682.474 L1046.29 682.474 L1045.73 682.474 L1045.17 682.474 L1044.61 682.474 L1044.05 682.474 L1043.49 682.474 L1042.93 682.474 L1042.38 682.474 L1041.82 682.474 L1041.26 682.474 L1040.7 682.474 L1040.14 682.474 L1039.58 682.474 L1039.02 682.474 L1038.46 682.474 L1037.9 682.474 L1037.34 682.474 L1036.78 682.474 L1036.22 682.474 L1035.66 682.474 L1035.1 682.474 L1034.55 682.474 L1033.99 682.474 L1033.43 682.474 L1032.87 682.474 L1032.31 682.474 L1031.75 682.474 L1031.19 682.474 L1030.63 682.474 L1030.07 682.474 L1029.51 682.474 L1028.95 682.474 L1028.39 682.474 L1027.83 682.474 L1027.28 682.474 L1026.72 682.474 L1026.16 682.474 L1025.6 682.474 L1025.04 682.474 L1024.48 682.474 L1023.92 682.474 L1023.36 682.474 L1022.8 682.474 L1022.24 682.474 L1021.68 682.474 L1021.12 682.474 L1020.56 682.474 L1020.01 682.474 L1019.45 682.474 L1018.89 682.474 L1018.33 682.474 L1017.77 682.474 L1017.21 682.474 L1016.65 682.474 L1016.09 682.474 L1015.53 682.474 L1014.97 682.474 L1014.41 682.474 L1013.85 682.474 L1013.29 682.474 L1012.73 682.474 L1012.18 682.474 L1011.62 682.474 L1011.06 682.474 L1010.5 682.474 L1009.94 682.474 L1009.38 682.474 L1008.82 682.474 L1008.26 682.474 L1007.7 682.474 L1007.14 682.474 L1006.58 682.474 L1006.02 682.474 L1005.46 682.474 L1004.91 682.474 L1004.35 682.474 L1003.79 682.474 L1003.23 682.474 L1002.67 682.474 L1002.11 682.474 L1001.55 682.474 L1000.99 682.474 L1000.43 682.474 L999.872 682.474 L999.313 682.474 L998.754 682.474 L998.194 682.474 L997.635 682.474 L997.076 682.474 L996.517 682.474 L995.957 682.474 L995.398 682.474 L994.839 682.474 L994.28 682.474 L993.72 682.474 L993.161 682.474 L992.602 682.474 L992.043 682.474 L991.483 682.474 L990.924 682.474 L990.365 682.474 L989.806 682.474 L989.246 682.474 L988.687 682.474 L988.128 682.474 L987.569 682.474 L987.009 682.474 L986.45 682.474 L985.891 682.474 L985.332 682.474 L984.772 682.474 L984.213 682.474 L983.654 682.474 L983.095 682.474 L982.535 682.474 L981.976 682.474 L981.417 682.474 L980.858 682.474 L980.298 682.474 L979.739 682.474 L979.18 682.474 L978.621 682.474 L978.061 682.474 L977.502 682.474 L976.943 682.474 L976.384 682.474 L975.824 682.474 L975.265 682.474 L974.706 682.474 L974.147 682.474 L973.587 682.474 L973.028 682.474 L972.469 682.474 L971.91 682.474 L971.35 682.474 L970.791 682.474 L970.232 682.474 L969.673 682.474 L969.113 682.474 L968.554 682.474 L967.995 682.474 L967.436 682.474 L966.876 682.474 L966.317 682.474 L965.758 682.474 L965.199 682.474 L964.639 682.474 L964.08 682.474 L963.521 682.474 L962.962 682.474 L962.402 682.474 L961.843 682.474 L961.284 682.474 L960.725 682.474 L960.165 682.474 L959.606 682.474 L959.047 682.474 L958.488 682.474 L957.928 682.474 L957.369 682.474 L956.81 682.474 L956.251 682.474 L955.691 682.474 L955.132 682.474 L954.573 682.474 L954.014 682.474 L953.454 682.474 L952.895 682.474 L952.336 682.474 L951.777 682.474 L951.217 682.474 L950.658 682.474 L950.099 682.474 L949.54 682.474 L948.98 682.474 L948.421 682.474 L947.862 682.474 L947.303 682.474 L946.743 682.474 L946.184 682.474 L945.625 682.474 L945.066 682.474 L944.506 682.474 L943.947 682.474 L943.388 682.474 L942.829 682.474 L942.269 682.474 L941.71 682.474 L941.151 682.474 L940.592 682.474 L940.032 682.474 L939.473 682.474 L938.914 682.474 L938.355 682.474 L937.795 682.474 L937.236 682.474 L936.677 682.474 L936.118 682.474 L935.558 682.474 L934.999 682.474 L934.44 682.474 L933.881 682.474 L933.321 682.474 L932.762 682.474 L932.203 682.474 L931.644 682.474 L931.084 682.474 L930.525 682.474 L929.966 682.474 L929.406 682.474 L928.847 682.474 L928.288 682.474 L927.729 682.474 L927.169 682.474 L926.61 682.474 L926.051 682.474 L925.492 682.474 L924.932 682.474 L924.373 682.474 L923.814 682.474 L923.255 682.474 L922.695 682.474 L922.136 682.474 L921.577 682.474 L921.018 682.474 L920.458 682.474 L919.899 682.474 L919.34 682.474 L918.781 682.474 L918.221 682.474 L917.662 682.474 L917.103 682.474 L916.544 682.474 L915.984 682.474 L915.425 682.474 L914.866 682.474 L914.307 682.474 L913.747 682.474 L913.188 682.474 L912.629 682.474 L912.07 682.474 L911.51 682.474 L910.951 682.474 L910.392 682.474 L909.833 682.474 L909.273 682.474 L908.714 682.474 L908.155 682.474 L907.596 682.474 L907.036 682.474 L906.477 682.474 L905.918 682.474 L905.359 682.474 L904.799 682.474 L904.24 682.474 L903.681 682.474 L903.122 682.474 L902.562 682.474 L902.003 682.474 L901.444 682.474 L900.885 682.474 L900.325 682.474 L899.766 682.474 L899.207 682.474 L898.648 682.474 L898.088 682.474 L897.529 682.474 L896.97 682.474 L896.411 682.474 L895.851 682.474 L895.292 682.474 L894.733 682.474 L894.174 682.474 L893.614 682.474 L893.055 682.474 L892.496 682.474 L891.937 682.474 L891.377 682.474 L890.818 682.474 L890.259 682.474 L889.7 682.474 L889.14 682.474 L888.581 682.474 L888.022 682.474 L887.463 682.474 L886.903 682.474 L886.344 682.474 L885.785 682.474 L885.226 682.474 L884.666 682.474 L884.107 682.474 L883.548 682.474 L882.989 682.474 L882.429 682.474 L881.87 682.474 L881.311 682.474 L880.752 682.474 L880.192 682.474 L879.633 682.474 L879.074 682.474 L878.515 682.474 L877.955 682.474 L877.396 682.474 L876.837 682.474 L876.278 682.474 L875.718 682.474 L875.159 682.474 L874.6 682.474 L874.041 682.474 L873.481 682.474 L872.922 682.474 L872.363 682.474 L871.804 682.474 L871.244 682.474 L870.685 682.474 L870.126 682.474 L869.567 682.474 L869.007 682.474 L868.448 682.474 L867.889 682.474 L867.33 682.474 L866.77 682.474 L866.211 682.474 L865.652 682.474 L865.093 682.474 L864.533 682.474 L863.974 682.474 L863.415 682.474 L862.856 682.474 L862.296 682.474 L861.737 682.474 L861.178 682.474 L860.619 682.474 L860.059 682.474 L859.5 682.474 L858.941 682.474 L858.382 682.474 L857.822 682.474 L857.263 682.474 L856.704 682.474 L856.145 682.474 L855.585 682.474 L855.026 682.474 L854.467 682.474 L853.908 682.474 L853.348 682.474 L852.789 682.474 L852.23 682.474 L851.671 682.474 L851.111 682.474 L850.552 682.474 L849.993 682.474 L849.434 682.474 L848.874 682.474 L848.315 682.474 L847.756 682.474 L847.197 682.474 L846.637 682.474 L846.078 682.474 L845.519 682.474 L844.96 682.474 L844.4 682.474 L843.841 682.474 L843.282 682.474 L842.723 682.474 L842.163 682.474 L841.604 682.474 L841.045 682.474 L840.486 682.474 L839.926 682.474 L839.367 682.474 L838.808 682.474 L838.249 682.474 L837.689 682.474 L837.13 682.474 L836.571 682.474 L836.012 682.474 L835.452 682.474 L834.893 682.474 L834.334 682.474 L833.775 682.474 L833.215 682.474 L832.656 682.474 L832.097 682.474 L831.538 682.474 L830.978 682.474 L830.419 682.474 L829.86 682.474 L829.301 682.474 L828.741 682.474 L828.182 682.474 L827.623 682.474 L827.064 682.474 L826.504 682.474 L825.945 682.474 L825.386 682.474 L824.827 682.474 L824.267 682.474 L823.708 682.474 L823.149 682.474 L822.59 682.474 L822.03 682.474 L821.471 682.474 L820.912 682.474 L820.353 682.474 L819.793 682.474 L819.234 682.474 L818.675 682.474 L818.116 682.474 L817.556 682.474 L816.997 682.474 L816.438 682.474 L815.879 682.474 L815.319 682.474 L814.76 682.474 L814.201 682.474 L813.642 682.474 L813.082 682.474 L812.523 682.474 L811.964 682.474 L811.405 682.474 L810.845 682.474 L810.286 682.474 L809.727 682.474 L809.168 682.474 L808.608 682.474 L808.049 682.474 L807.49 682.474 L806.931 682.474 L806.371 682.474 L805.812 682.474 L805.253 682.474 L804.693 682.474 L804.134 682.474 L803.575 682.474 L803.016 682.474 L802.456 682.474 L801.897 682.474 L801.338 682.474 L800.779 682.474 L800.219 682.474 L799.66 682.474 L799.101 682.474 L798.542 682.474 L797.982 682.474 L797.423 682.474 L796.864 682.474 L796.305 682.474 L795.745 682.474 L795.186 682.474 L794.627 682.474 L794.068 682.474 L793.508 682.474 L792.949 682.474 L792.39 682.474 L791.831 682.474 L791.271 682.474 L790.712 682.474 L790.153 682.474 L789.594 682.474 L789.034 682.474 L788.475 682.474 L787.916 682.474 L787.357 682.474 L786.797 682.474 L786.238 682.474 L785.679 682.474 L785.12 682.474 L784.56 682.474 L784.001 682.474 L783.442 682.474 L782.883 682.474 L782.323 682.474 L781.764 682.474 L781.205 682.474 L780.646 682.474 L780.086 682.474 L779.527 682.474 L778.968 682.474 L778.409 682.474 L777.849 682.474 L777.29 682.474 L776.731 682.474 L776.172 682.474 L775.612 682.474 L775.053 682.474 L774.494 682.474 L773.935 682.474 L773.375 682.474 L772.816 682.474 L772.257 682.474 L771.698 682.474 L771.138 682.474 L770.579 682.474 L770.02 682.474 L769.461 682.474 L768.901 682.474 L768.342 682.474 L767.783 682.474 L767.224 682.474 L766.664 682.474 L766.105 682.474 L765.546 682.474 L764.987 682.474 L764.427 682.474 L763.868 682.474 L763.309 682.474 L762.75 682.474 L762.19 682.474 L761.631 682.474 L761.072 682.474 L760.513 682.474 L759.953 682.474 L759.394 682.474 L758.835 682.474 L758.276 682.474 L757.716 682.474 L757.157 682.474 L756.598 682.474 L756.039 682.474 L755.479 682.474 L754.92 682.474 L754.361 682.474 L753.802 682.474 L753.242 682.474 L752.683 682.474 L752.124 682.474 L751.565 682.474 L751.005 682.474 L750.446 682.474 L749.887 682.474 L749.328 682.474 L748.768 682.474 L748.209 682.474 L747.65 682.474 L747.091 682.474 L746.531 682.474 L745.972 682.474 L745.413 682.474 L744.854 682.474 L744.294 682.474 L743.735 682.474 L743.176 682.474 L742.617 682.474 L742.057 682.474 L741.498 682.474 L740.939 682.474 L740.38 682.474 L739.82 682.474 L739.261 682.474 L738.702 682.474 L738.143 682.474 L737.583 682.474 L737.024 682.474 L736.465 682.474 L735.906 682.474 L735.346 682.474 L734.787 682.474 L734.228 682.474 L733.669 682.474 L733.109 682.474 L732.55 682.474 L731.991 682.474 L731.432 682.474 L730.872 682.474 L730.313 682.474 L729.754 682.474 L729.195 682.474 L728.635 682.474 L728.076 682.474 L727.517 682.474 L726.958 682.474 L726.398 682.474 L725.839 682.474 L725.28 682.474 L724.721 682.474 L724.161 682.474 L723.602 682.474 L723.043 682.474 L722.484 682.474 L721.924 682.474 L721.365 682.474 L720.806 682.474 L720.247 682.474  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.902 720.806,686.902 721.365,686.902 721.924,686.902 722.484,686.902 723.043,686.902 723.602,686.902 724.161,686.902 724.721,686.902 725.28,686.902 725.839,686.902 726.398,686.902 726.958,686.902 727.517,686.902 728.076,686.902 728.635,686.902 729.195,686.902 729.754,686.902 730.313,686.902 730.872,686.902 731.432,686.902 731.991,686.902 732.55,686.902 733.109,686.902 733.669,686.902 734.228,686.902 734.787,686.902 735.346,686.902 735.906,686.902 736.465,686.902 737.024,686.902 737.583,686.902 738.143,686.902 738.702,686.902 739.261,686.902 739.82,686.902 740.38,686.902 740.939,686.902 741.498,686.902 742.057,686.902 742.617,686.902 743.176,686.902 743.735,686.902 744.294,686.902 744.854,686.902 745.413,686.902 745.972,686.902 746.531,686.902 747.091,686.902 747.65,686.902 748.209,686.902 748.768,686.902 749.328,686.902 749.887,686.902 750.446,686.902 751.005,686.902 751.565,686.902 752.124,686.902 752.683,686.902 753.242,686.902 753.802,686.902 754.361,686.902 754.92,686.902 755.479,686.902 756.039,686.902 756.598,686.902 757.157,686.902 757.716,686.902 758.276,686.902 758.835,686.902 759.394,686.902 759.953,686.902 760.513,686.902 761.072,686.902 761.631,686.902 762.19,686.902 762.75,686.902 763.309,686.902 763.868,686.902 764.427,686.902 764.987,686.902 765.546,686.902 766.105,686.902 766.664,686.902 767.224,686.902 767.783,686.902 768.342,686.902 768.901,686.902 769.461,686.902 770.02,686.902 770.579,686.902 771.138,686.902 771.698,686.902 772.257,686.902 772.816,686.902 773.375,686.902 773.935,686.902 774.494,686.902 775.053,686.902 775.612,686.902 776.172,686.902 776.731,686.902 777.29,686.902 777.849,686.902 778.409,686.902 778.968,686.902 779.527,686.902 780.086,686.902 780.646,686.902 781.205,686.902 781.764,686.902 782.323,686.902 782.883,686.902 783.442,686.902 784.001,686.902 784.56,686.902 785.12,686.902 785.679,686.902 786.238,686.902 786.797,686.902 787.357,686.902 787.916,686.902 788.475,686.902 789.034,686.902 789.594,686.902 790.153,686.902 790.712,686.902 791.271,686.902 791.831,686.902 792.39,686.902 792.949,686.902 793.508,686.902 794.068,686.902 794.627,686.902 795.186,686.902 795.745,686.902 796.305,686.902 796.864,686.902 797.423,686.902 797.982,686.902 798.542,686.902 799.101,686.902 799.66,686.902 800.219,686.902 800.779,686.902 801.338,686.902 801.897,686.902 802.456,686.902 803.016,686.902 803.575,686.902 804.134,686.902 804.693,686.902 805.253,686.902 805.812,686.902 806.371,686.902 806.931,686.902 807.49,686.902 808.049,686.902 808.608,686.902 809.168,686.902 809.727,686.902 810.286,686.902 810.845,686.902 811.405,686.902 811.964,686.902 812.523,686.902 813.082,686.902 813.642,686.902 814.201,686.902 814.76,686.902 815.319,686.902 815.879,686.902 816.438,686.902 816.997,686.902 817.556,686.902 818.116,686.902 818.675,686.902 819.234,686.902 819.793,686.902 820.353,686.902 820.912,686.902 821.471,686.902 822.03,686.902 822.59,686.902 823.149,686.902 823.708,686.902 824.267,686.902 824.827,686.902 825.386,686.902 825.945,686.902 826.504,686.902 827.064,686.902 827.623,686.902 828.182,686.902 828.741,686.902 829.301,686.902 829.86,686.902 830.419,686.902 830.978,686.902 831.538,686.902 832.097,686.902 832.656,686.902 833.215,686.902 833.775,686.902 834.334,686.902 834.893,686.902 835.452,686.902 836.012,686.902 836.571,686.902 837.13,686.902 837.689,686.902 838.249,686.902 838.808,686.902 839.367,686.902 839.926,686.902 840.486,686.902 841.045,686.902 841.604,686.902 842.163,686.902 842.723,686.902 843.282,686.902 843.841,686.902 844.4,686.902 844.96,686.902 845.519,686.902 846.078,686.902 846.637,686.902 847.197,686.902 847.756,686.902 848.315,686.902 848.874,686.902 849.434,686.902 849.993,686.902 850.552,686.902 851.111,686.902 851.671,686.902 852.23,686.902 852.789,686.902 853.348,686.902 853.908,686.902 854.467,686.902 855.026,686.902 855.585,686.902 856.145,686.902 856.704,686.902 857.263,686.902 857.822,686.902 858.382,686.902 858.941,686.902 859.5,686.902 860.059,686.902 860.619,686.902 861.178,686.902 861.737,686.902 862.296,686.902 862.856,686.902 863.415,686.902 863.974,686.902 864.533,686.902 865.093,686.902 865.652,686.902 866.211,686.902 866.77,686.902 867.33,686.902 867.889,686.902 868.448,686.902 869.007,686.902 869.567,686.902 870.126,686.902 870.685,686.902 871.244,686.902 871.804,686.902 872.363,686.902 872.922,686.902 873.481,686.902 874.041,686.902 874.6,686.902 875.159,686.902 875.718,686.902 876.278,686.902 876.837,686.902 877.396,686.902 877.955,686.902 878.515,686.902 879.074,686.902 879.633,686.902 880.192,686.902 880.752,686.902 881.311,686.902 881.87,686.902 882.429,686.902 882.989,686.902 883.548,686.902 884.107,686.902 884.666,686.902 885.226,686.902 885.785,686.902 886.344,686.902 886.903,686.902 887.463,686.902 888.022,686.902 888.581,686.902 889.14,686.902 889.7,686.902 890.259,686.902 890.818,686.902 891.377,686.902 891.937,686.902 892.496,686.902 893.055,686.902 893.614,686.902 894.174,686.902 894.733,686.902 895.292,686.902 895.851,686.902 896.411,686.902 896.97,686.902 897.529,686.902 898.088,686.902 898.648,686.902 899.207,686.902 899.766,686.902 900.325,686.902 900.885,686.902 901.444,686.902 902.003,686.902 902.562,686.902 903.122,686.902 903.681,686.902 904.24,686.902 904.799,686.902 905.359,686.902 905.918,686.902 906.477,686.902 907.036,686.902 907.596,686.902 908.155,686.902 908.714,686.902 909.273,686.902 909.833,686.902 910.392,686.902 910.951,686.902 911.51,686.902 912.07,686.902 912.629,686.902 913.188,686.902 913.747,686.902 914.307,686.902 914.866,686.902 915.425,686.902 915.984,686.902 916.544,686.902 917.103,686.902 917.662,686.902 918.221,686.902 918.781,686.902 919.34,686.902 919.899,686.902 920.458,686.902 921.018,686.902 921.577,686.902 922.136,686.902 922.695,686.902 923.255,686.902 923.814,686.902 924.373,686.902 924.932,686.902 925.492,686.902 926.051,686.902 926.61,686.902 927.169,686.902 927.729,686.902 928.288,686.902 928.847,686.902 929.406,686.902 929.966,686.902 930.525,686.902 931.084,686.902 931.644,686.902 932.203,686.902 932.762,686.902 933.321,686.902 933.881,686.902 934.44,686.902 934.999,686.902 935.558,686.902 936.118,686.902 936.677,686.902 937.236,686.902 937.795,686.902 938.355,686.902 938.914,686.902 939.473,686.902 940.032,686.902 940.592,686.902 941.151,686.902 941.71,686.902 942.269,686.902 942.829,686.902 943.388,686.902 943.947,686.902 944.506,686.902 945.066,686.902 945.625,686.902 946.184,686.902 946.743,686.902 947.303,686.902 947.862,686.902 948.421,686.902 948.98,686.902 949.54,686.902 950.099,686.902 950.658,686.902 951.217,686.902 951.777,686.902 952.336,686.902 952.895,686.902 953.454,686.902 954.014,686.902 954.573,686.902 955.132,686.902 955.691,686.902 956.251,686.902 956.81,686.902 957.369,686.902 957.928,686.902 958.488,686.902 959.047,686.902 959.606,686.902 960.165,686.902 960.725,686.902 961.284,686.902 961.843,686.902 962.402,686.902 962.962,686.902 963.521,686.902 964.08,686.902 964.639,686.902 965.199,686.902 965.758,686.902 966.317,686.902 966.876,686.902 967.436,686.902 967.995,686.902 968.554,686.902 969.113,686.902 969.673,686.902 970.232,686.902 970.791,686.902 971.35,686.902 971.91,686.902 972.469,686.902 973.028,686.902 973.587,686.902 974.147,686.902 974.706,686.902 975.265,686.902 975.824,686.902 976.384,686.902 976.943,686.902 977.502,686.902 978.061,686.902 978.621,686.902 979.18,686.902 979.739,686.902 980.298,686.902 980.858,686.902 981.417,686.902 981.976,686.902 982.535,686.902 983.095,686.902 983.654,686.902 984.213,686.902 984.772,686.902 985.332,686.902 985.891,686.902 986.45,686.902 987.009,686.902 987.569,686.902 988.128,686.902 988.687,686.902 989.246,686.902 989.806,686.902 990.365,686.902 990.924,686.902 991.483,686.902 992.043,686.902 992.602,686.902 993.161,686.902 993.72,686.902 994.28,686.902 994.839,686.902 995.398,686.902 995.957,686.902 996.517,686.902 997.076,686.902 997.635,686.902 998.194,686.902 998.754,686.902 999.313,686.902 999.872,686.902 1000.43,686.902 1000.99,686.902 1001.55,686.902 1002.11,686.902 1002.67,686.902 1003.23,686.902 1003.79,686.902 1004.35,686.902 1004.91,686.902 1005.46,686.902 1006.02,686.902 1006.58,686.902 1007.14,686.902 1007.7,686.902 1008.26,686.902 1008.82,686.902 1009.38,686.902 1009.94,686.902 1010.5,686.902 1011.06,686.902 1011.62,686.902 1012.18,686.902 1012.73,686.902 1013.29,686.902 1013.85,686.902 1014.41,686.902 1014.97,686.902 1015.53,686.902 1016.09,686.902 1016.65,686.902 1017.21,686.902 1017.77,686.902 1018.33,686.902 1018.89,686.902 1019.45,686.902 1020.01,686.902 1020.56,686.902 1021.12,686.902 1021.68,686.902 1022.24,686.902 1022.8,686.902 1023.36,686.902 1023.92,686.902 1024.48,686.902 1025.04,686.902 1025.6,686.902 1026.16,686.902 1026.72,686.902 1027.28,686.902 1027.83,686.902 1028.39,686.902 1028.95,686.902 1029.51,686.902 1030.07,686.902 1030.63,686.902 1031.19,686.902 1031.75,686.902 1032.31,686.902 1032.87,686.902 1033.43,686.902 1033.99,686.902 1034.55,686.902 1035.1,686.902 1035.66,686.902 1036.22,686.902 1036.78,686.902 1037.34,686.902 1037.9,686.902 1038.46,686.902 1039.02,686.902 1039.58,686.902 1040.14,686.902 1040.7,686.902 1041.26,686.902 1041.82,686.902 1042.38,686.902 1042.93,686.902 1043.49,686.902 1044.05,686.902 1044.61,686.902 1045.17,686.902 1045.73,686.902 1046.29,686.902 1046.85,686.902 1047.41,686.902 1047.97,686.902 1048.53,686.902 1049.09,686.902 1049.65,686.902 1050.2,686.902 1050.76,686.902 1051.32,686.902 1051.88,686.902 1052.44,686.902 1053,686.902 1053.56,686.902 1054.12,686.902 1054.68,686.902 1055.24,686.902 1055.8,686.902 1056.36,686.902 1056.92,686.902 1057.48,686.902 1058.03,686.902 1058.59,686.902 1059.15,686.902 1059.71,686.902 1060.27,686.902 1060.83,686.902 1061.39,686.902 1061.95,686.902 1062.51,686.902 1063.07,686.902 1063.63,686.902 1064.19,686.902 1064.75,686.902 1065.3,686.902 1065.86,686.902 1066.42,686.902 1066.98,686.902 1067.54,686.902 1068.1,686.902 1068.66,686.902 1069.22,686.902 1069.78,686.902 1070.34,686.902 1070.9,686.902 1071.46,686.902 1072.02,686.902 1072.57,686.902 1073.13,686.902 1073.69,686.902 1074.25,686.902 1074.81,686.902 1075.37,686.902 1075.93,686.902 1076.49,686.902 1077.05,686.902 1077.61,686.902 1078.17,686.902 1078.73,686.902 1079.29,686.902 1079.85,686.902 1080.4,686.902 1080.96,686.902 1081.52,686.902 1082.08,686.902 1082.64,686.902 1083.2,686.902 1083.76,686.902 1084.32,686.902 1084.88,686.902 1085.44,686.902 1086,686.902 1086.56,686.902 1087.12,686.902 1087.67,686.902 1088.23,686.902 1088.79,686.902 1089.35,686.902 1089.91,686.902 1090.47,686.902 1091.03,686.902 1091.59,686.902 1092.15,686.902 1092.71,686.902 1093.27,686.902 1093.83,686.902 1094.39,686.902 1094.94,686.902 1095.5,686.902 1096.06,686.902 1096.62,686.902 1097.18,686.902 1097.74,686.902 1098.3,686.902 1098.86,686.902 1099.42,686.902 1099.98,686.902 1100.54,686.902 1101.1,686.902 1101.66,686.902 1102.22,686.902 1102.77,686.902 1103.33,686.902 1103.89,686.902 1104.45,686.902 1105.01,686.902 1105.57,686.902 1106.13,686.902 1106.69,686.902 1107.25,686.902 1107.81,686.902 1108.37,686.902 1108.93,686.902 1109.49,686.902 1110.04,686.902 1110.6,686.902 1111.16,686.902 1111.72,686.902 1112.28,686.902 1112.84,686.902 1113.4,686.902 1113.96,686.902 1114.52,686.902 1115.08,686.902 1115.64,686.902 1116.2,686.902 1116.76,686.902 1117.31,686.902 1117.87,686.902 1118.43,686.902 1118.99,686.902 1119.55,686.902 1120.11,686.902 1120.67,686.902 1121.23,686.902 1121.79,686.902 1122.35,686.902 1122.91,686.902 1123.47,686.902 1124.03,686.902 1124.59,686.902 1125.14,686.902 1125.7,686.902 1126.26,686.902 1126.82,686.902 1127.38,686.902 1127.94,686.902 1128.5,686.902 1129.06,686.902 1129.62,686.902 1130.18,686.902 1130.74,686.902 1131.3,686.902 1131.86,686.902 1132.41,686.902 1132.97,686.902 1133.53,686.902 1134.09,686.902 1134.65,686.902 1135.21,686.902 1135.77,686.902 1136.33,686.902 1136.89,686.902 1137.45,686.902 1138.01,686.902 1138.57,686.902 1139.13,686.902 1139.68,686.902 1140.24,686.902 1140.8,686.902 1141.36,686.902 1141.92,686.902 1142.48,686.902 1143.04,686.902 1143.6,686.902 1144.16,686.902 1144.72,686.902 1145.28,686.902 1145.84,686.902 1146.4,686.902 1146.96,686.902 1147.51,686.902 1148.07,686.902 1148.63,686.902 1149.19,686.902 1149.75,686.902 1150.31,686.902 1150.87,686.902 1151.43,686.902 1151.99,686.902 1152.55,686.902 1153.11,686.902 1153.67,686.902 1154.23,686.902 1154.78,686.902 1155.34,686.902 1155.9,686.902 1156.46,686.902 1157.02,686.902 1157.58,686.902 1158.14,686.902 1158.7,686.902 1159.26,686.902 1159.82,686.902 1160.38,686.902 1160.94,686.902 1161.5,686.902 1162.05,686.902 1162.61,686.902 1163.17,686.902 1163.73,686.902 1164.29,686.902 1164.85,686.902 1165.41,686.902 1165.97,686.902 1166.53,686.902 1167.09,686.902 1167.65,686.902 1168.21,686.902 1168.77,686.902 1169.33,686.902 1169.88,686.902 1170.44,686.902 1171,686.902 1171.56,686.902 1172.12,686.902 1172.68,686.902 1173.24,686.902 1173.8,686.902 1174.36,686.902 1174.92,686.902 1175.48,686.902 1176.04,686.902 1176.6,686.902 1177.15,686.902 1177.71,686.902 1178.27,686.902 1178.83,686.902 1179.39,686.902 1179.95,686.902 1180.51,686.902 1181.07,686.902 1181.63,686.902 1182.19,686.902 1182.75,686.902 1183.31,686.902 1183.87,686.902 1184.43,686.902 1184.98,686.902 1185.54,686.902 1186.1,686.902 1186.66,686.902 1187.22,686.902 1187.78,686.902 1188.34,686.902 1188.9,686.902 1189.46,686.902 1190.02,686.902 1190.58,686.902 1191.14,686.902 1191.7,686.902 1192.25,686.902 1192.81,686.902 1193.37,686.902 1193.93,686.902 1194.49,686.902 1195.05,686.902 1195.61,686.902 1196.17,686.902 1196.73,686.902 1197.29,686.902 1197.85,686.902 1198.41,686.902 1198.97,686.902 1199.52,686.902 1200.08,686.902 1200.64,686.902 1201.2,686.902 1201.76,686.902 1202.32,686.902 1202.88,686.902 1203.44,686.902 1204,686.902 1204.56,686.902 1205.12,686.902 1205.68,686.902 1206.24,686.902 1206.8,686.902 1207.35,686.902 1207.91,686.902 1208.47,686.902 1209.03,686.902 1209.59,686.902 1210.15,686.902 1210.71,686.902 1211.27,686.902 1211.83,686.902 1212.39,686.902 1212.95,686.902 1213.51,686.902 1214.07,686.902 1214.62,686.902 1215.18,686.902 1215.74,686.902 1216.3,686.902 1216.86,686.902 1217.42,686.902 1217.98,686.902 1218.54,686.902 1219.1,686.902 1219.66,686.902 1220.22,686.902 1220.78,686.902 1221.34,686.902 1221.89,686.902 1222.45,686.902 1223.01,686.902 1223.57,686.902 1224.13,686.902 1224.69,686.902 1225.25,686.902 1225.81,686.902 1226.37,686.902 1226.93,686.902 1227.49,686.902 1228.05,686.902 1228.61,686.902 1229.17,686.902 1229.72,686.902 1230.28,686.902 1230.84,686.902 1231.4,686.902 1231.96,686.902 1232.52,686.902 1233.08,686.902 1233.64,686.902 1234.2,686.902 1234.76,686.902 1235.32,686.902 1235.88,686.902 1236.44,686.902 1236.99,686.902 1237.55,686.902 1238.11,686.902 1238.67,686.902 1239.23,686.902 1239.79,686.902 1240.35,686.902 1240.91,686.902 1241.47,686.902 1242.03,686.902 1242.59,686.902 1243.15,686.902 1243.71,686.902 1244.26,686.902 1244.82,686.902 1245.38,686.902 1245.94,686.902 1246.5,686.902 1247.06,686.902 1247.62,686.902 1248.18,686.902 1248.74,686.902 1249.3,686.902 1249.86,686.902 1250.42,686.902 1250.98,686.902 1251.54,686.902 1252.09,686.902 1252.65,686.902 1253.21,686.902 1253.77,686.902 1254.33,686.902 1254.89,686.902 1255.45,686.902 1256.01,686.902 1256.57,686.902 1257.13,686.902 1257.69,686.902 1258.25,686.902 1258.81,686.902 1259.36,686.902 1259.92,686.902 1260.48,686.902 1261.04,686.902 1261.6,686.902 1262.16,686.902 1262.72,686.902 1263.28,686.902 1263.84,686.902 1264.4,686.902 1264.96,686.902 1265.52,686.902 1266.08,686.902 1266.63,686.902 1267.19,686.902 1267.75,686.902 1268.31,686.902 1268.87,686.902 1269.43,686.902 1269.99,686.902 1270.55,686.902 1271.11,686.902 1271.67,686.902 1272.23,686.902 1272.79,686.902 1273.35,686.902 1273.91,686.902 1274.46,686.902 1275.02,686.902 1275.58,686.902 1276.14,686.902 1276.7,686.902 1277.26,686.902 1277.82,686.902 1278.38,686.902 1278.94,686.902 1279.5,686.902 1280.06,686.902 1280.62,686.902 1281.18,686.902 1281.73,686.902 1282.29,686.902 1282.85,686.902 1283.41,686.902 1283.97,686.902 1284.53,686.902 1285.09,686.902 1285.65,686.902 1286.21,686.902 1286.77,686.902 1287.33,686.902 1287.89,686.902 1288.45,686.902 1289,686.902 1289.56,686.902 1290.12,686.902 1290.68,686.902 1291.24,686.902 1291.8,686.902 1292.36,686.902 1292.92,686.902 1293.48,686.902 1294.04,686.902 1294.6,686.902 1295.16,686.902 1295.72,686.902 1296.28,686.902 1296.83,686.902 1297.39,686.902 1297.95,686.902 1298.51,686.902 1299.07,686.902 1299.63,686.902 1300.19,686.902 1300.75,686.902 1301.31,686.902 1301.87,686.902 1302.43,686.902 1302.99,686.902 1303.55,686.902 1304.1,686.902 1304.66,686.902 1305.22,686.902 1305.78,686.902 1306.34,686.902 1306.9,686.902 1307.46,686.902 1308.02,686.902 1308.58,686.902 1309.14,686.902 1309.7,686.902 1310.26,686.902 1310.82,686.902 1311.38,686.902 1311.93,686.902 1312.49,686.902 1313.05,686.902 1313.61,686.902 1314.17,686.902 1314.73,686.902 1315.29,686.902 1315.85,686.902 1316.41,686.902 1316.97,686.902 1317.53,686.902 1318.09,686.902 1318.65,686.902 1319.2,686.902 1319.76,686.902 1320.32,686.902 1320.88,686.902 1321.44,686.902 1322,686.902 1322.56,686.902 1323.12,686.902 1323.68,686.902 1324.24,686.902 1324.8,686.902 1325.36,686.902 1325.92,686.902 1326.47,686.902 1327.03,686.902 1327.59,686.902 1328.15,686.902 1328.71,686.902 1329.27,686.902 1329.83,686.902 1330.39,686.902 1330.95,686.902 1331.51,686.902 1332.07,686.902 1332.63,686.902 1333.19,686.902 1333.75,686.902 1334.3,686.902 1334.86,686.902 1335.42,686.902 1335.98,686.902 1336.54,686.902 1337.1,686.902 1337.66,686.902 1338.22,686.902 1338.78,686.902 1339.34,686.902 1339.9,686.902 1340.46,686.902 1341.02,686.902 1341.57,686.902 1342.13,686.902 1342.69,686.902 1343.25,686.902 1343.81,686.902 1344.37,686.902 1344.93,686.902 1345.49,686.902 1346.05,686.902 1346.61,686.902 1347.17,686.902 1347.73,686.902 1348.29,686.902 1348.84,686.902 1349.4,686.902 1349.96,686.902 1350.52,686.902 1351.08,686.902 1351.64,686.902 1352.2,686.902 1352.76,686.902 1353.32,686.902 1353.88,686.902 1354.44,686.902 1355,686.902 1355.56,686.902 1356.12,686.902 1356.67,686.902 1357.23,686.902 1357.79,686.902 1358.35,686.902 1358.91,686.902 1359.47,686.902 1360.03,686.902 1360.59,686.902 1361.15,686.902 1361.71,686.902 1362.27,686.902 1362.83,686.902 1363.39,686.902 1363.94,686.902 1364.5,686.902 1365.06,686.902 1365.62,686.902 1366.18,686.902 1366.74,686.902 1367.3,686.902 1367.86,686.902 1368.42,686.902 1368.98,686.902 1369.54,686.902 1370.1,686.902 1370.66,686.902 1371.21,686.902 1371.77,686.902 1372.33,686.902 1372.89,686.902 1373.45,686.902 1374.01,686.902 1374.57,686.902 1375.13,686.902 1375.69,686.902 1376.25,686.902 1376.81,686.902 1377.37,686.902 1377.93,686.902 1378.49,686.902 1379.04,686.902 1379.6,686.902 1380.16,686.902 1380.72,686.902 1381.28,686.902 1381.84,686.902 1382.4,686.902 1382.96,686.902 1383.52,686.902 1384.08,686.902 1384.64,686.902 1385.2,686.902 1385.76,686.902 1386.31,686.902 1386.87,686.902 1387.43,686.902 1387.99,686.902 1388.55,686.902 1389.11,686.902 1389.67,686.902 1390.23,686.902 1390.79,686.902 1391.35,686.902 1391.91,686.902 1392.47,686.902 1393.03,686.902 1393.58,686.902 1394.14,686.902 1394.7,686.902 1395.26,686.902 1395.82,686.902 1396.38,686.902 1396.94,686.902 1397.5,686.902 1398.06,686.902 1398.62,686.902 1399.18,686.902 1399.74,686.902 1400.3,686.902 1400.86,686.902 1401.41,686.902 1401.97,686.902 1402.53,686.902 1403.09,686.902 1403.65,686.902 1404.21,686.902 1404.77,686.902 1405.33,686.902 1405.89,686.902 1406.45,686.902 1407.01,686.902 1407.57,686.902 1408.13,686.902 1408.68,686.902 1409.24,686.902 1409.8,686.902 1410.36,686.902 1410.92,686.902 1411.48,686.902 1412.04,686.902 1412.6,686.902 1413.16,686.902 1413.72,686.902 1414.28,686.902 1414.84,686.902 1415.4,686.902 1415.95,686.902 1416.51,686.902 1417.07,686.902 1417.63,686.902 1418.19,686.902 1418.75,686.902 1419.31,686.902 1419.87,686.902 1420.43,686.902 1420.99,686.902 1421.55,686.902 1422.11,686.902 1422.67,686.902 1423.23,686.902 1423.78,686.902 1424.34,686.902 1424.9,686.902 1425.46,686.902 1426.02,686.902 1426.58,686.902 1427.14,686.902 1427.7,686.902 1428.26,686.902 1428.82,686.902 1429.38,686.902 1429.94,686.902 1430.5,686.902 1431.05,686.902 1431.61,686.902 1432.17,686.902 1432.73,686.902 1433.29,686.902 1433.85,686.902 1434.41,686.902 1434.97,686.902 1435.53,686.902 1436.09,686.902 1436.65,686.902 1437.21,686.902 1437.77,686.902 1438.33,686.902 1438.88,686.902 1439.44,686.902 1440,686.902 1440.56,686.902 1441.12,686.902 1441.68,686.902 1442.24,686.902 1442.8,686.902 1443.36,686.902 1443.92,686.902 1444.48,686.902 1445.04,686.902 1445.6,686.902 1446.15,686.902 1446.71,686.902 1447.27,686.902 1447.83,686.902 1448.39,686.902 1448.95,686.902 1449.51,686.902 1450.07,686.902 1450.63,686.902 1451.19,686.902 1451.75,686.902 1452.31,686.902 1452.87,686.902 1453.42,686.902 1453.98,686.902 1454.54,686.902 1455.1,686.902 1455.66,686.902 1456.22,686.902 1456.78,686.902 1457.34,686.902 1457.9,686.902 1458.46,686.902 1459.02,686.902 1459.58,686.902 1460.14,686.902 1460.7,686.902 1461.25,686.902 1461.81,686.902 1462.37,686.902 1462.93,686.902 1463.49,686.902 1464.05,686.902 1464.61,686.902 1465.17,686.902 1465.73,686.902 1466.29,686.902 1466.85,686.902 1467.41,686.902 1467.97,686.902 1468.52,686.902 1469.08,686.902 1469.64,686.902 1470.2,686.902 1470.76,686.902 1471.32,686.902 1471.88,686.902 1472.44,686.902 1473,686.902 1473.56,686.902 1474.12,686.902 1474.68,686.902 1475.24,686.902 1475.79,686.902 1476.35,686.902 1476.91,686.902 1477.47,686.902 1478.03,686.902 1478.59,686.902 1479.15,686.902 1479.71,686.902 1480.27,686.902 1480.83,686.902 1481.39,686.902 1481.95,686.902 1482.51,686.902 1483.07,686.902 1483.62,686.902 1484.18,686.902 1484.74,686.902 1485.3,686.902 1485.86,686.902 1486.42,686.902 1486.98,686.902 1487.54,686.902 1488.1,686.902 1488.66,686.902 1489.22,686.902 1489.78,686.902 1490.34,686.902 1490.89,686.902 1491.45,686.902 1492.01,686.902 1492.57,686.902 1493.13,686.902 1493.69,686.902 1494.25,686.902 1494.81,686.902 1495.37,686.902 1495.93,686.902 1496.49,686.902 1497.05,686.902 1497.61,686.902 1498.16,686.902 1498.72,686.902 1499.28,686.902 1499.84,686.902 1500.4,686.902 1500.96,686.902 1501.52,686.902 1502.08,686.902 1502.64,686.902 1503.2,686.902 1503.76,686.902 1504.32,686.902 1504.88,686.902 1505.44,686.902 1505.99,686.902 1506.55,686.902 1507.11,686.902 1507.67,686.902 1508.23,686.902 1508.79,686.902 1509.35,686.902 1509.91,686.902 1510.47,686.902 1511.03,686.902 1511.59,686.902 1512.15,686.902 1512.71,686.902 1513.26,686.902 1513.82,686.902 1514.38,686.902 1514.94,686.902 1515.5,686.902 1516.06,686.902 1516.62,686.902 1517.18,686.902 1517.74,686.902 1518.3,686.902 1518.86,686.902 1519.42,686.902 1519.98,686.902 1520.53,686.902 1521.09,686.902 1521.65,686.902 1522.21,686.902 1522.77,686.902 1523.33,686.902 1523.89,686.902 1524.45,686.902 1525.01,686.902 1525.57,686.902 1526.13,686.902 1526.69,686.902 1527.25,686.902 1527.81,686.902 1528.36,686.902 1528.92,686.902 1529.48,686.902 1530.04,686.902 1530.6,686.902 1531.16,686.902 1531.72,686.902 1532.28,686.902 1532.84,686.902 1533.4,686.902 1533.96,686.902 1534.52,686.902 1535.08,686.902 1535.63,686.902 1536.19,686.902 1536.75,686.902 1537.31,686.902 1537.87,686.902 1538.43,686.902 1538.99,686.902 1539.55,686.902 1540.11,686.902 1540.67,686.902 1541.23,686.902 1541.79,686.902 1542.35,686.902 1542.9,686.902 1543.46,686.902 1544.02,686.902 1544.58,686.902 1545.14,686.902 1545.7,686.902 1546.26,686.902 1546.82,686.902 1547.38,686.902 1547.94,686.902 1548.5,686.902 1549.06,686.902 1549.62,686.902 1550.18,686.902 1550.73,686.902 1551.29,686.902 1551.85,686.902 1552.41,686.902 1552.97,686.902 1553.53,686.902 1554.09,686.902 1554.65,686.902 1555.21,686.902 1555.77,686.902 1556.33,686.902 1556.89,686.902 1557.45,686.902 1558,686.902 1558.56,686.902 1559.12,686.902 1559.68,686.902 1560.24,686.902 1560.8,686.902 1561.36,686.902 1561.92,686.902 1562.48,686.902 1563.04,686.902 1563.6,686.902 1564.16,686.902 1564.72,686.902 1565.28,686.902 1565.83,686.902 1566.39,686.902 1566.95,686.902 1567.51,686.902 1568.07,686.902 1568.63,686.902 1569.19,686.902 1569.75,686.902 1570.31,686.902 1570.87,686.902 1571.43,686.902 1571.99,686.902 1572.55,686.902 1573.1,686.902 1573.66,686.902 1574.22,686.902 1574.78,686.902 1575.34,686.902 1575.9,686.902 1576.46,686.902 1577.02,686.902 1577.58,686.902 1578.14,686.902 1578.7,686.902 1579.26,686.902 1579.82,686.902 1580.37,686.902 1580.93,686.902 1581.49,686.902 1582.05,686.902 1582.61,686.902 1583.17,686.902 1583.73,686.902 1584.29,686.902 1584.85,686.902 1585.41,686.902 1585.97,686.902 1586.53,686.902 1587.09,686.902 1587.65,686.902 1588.2,686.902 1588.76,686.902 1589.32,686.902 1589.88,686.902 1590.44,686.902 1591,686.902 1591.56,686.902 1592.12,686.902 1592.68,686.902 1593.24,686.902 1593.8,686.902 1594.36,686.902 1594.92,686.902 1595.47,686.902 1596.03,686.902 1596.59,686.902 1597.15,686.902 1597.71,686.902 1598.27,686.902 1598.83,686.902 1599.39,686.902 1599.95,686.902 1600.51,686.902 1601.07,686.902 1601.63,686.902 1602.19,686.902 1602.74,686.902 1603.3,686.902 1603.86,686.902 1604.42,686.902 1604.98,686.902 1605.54,686.902 1606.1,686.902 1606.66,686.902 1607.22,686.902 1607.78,686.902 1608.34,686.902 1608.9,686.902 1609.46,686.902 1610.02,686.902 1610.57,686.902 1611.13,686.902 1611.69,686.902 1612.25,686.902 1612.81,686.902 1613.37,686.902 1613.93,686.902 1614.49,686.902 1615.05,686.902 1615.61,686.902 1616.17,686.902 1616.73,686.902 1617.29,686.902 1617.84,686.902 1618.4,686.902 1618.96,686.902 1619.52,686.902 1620.08,686.902 1620.64,686.902 1621.2,686.902 1621.76,686.902 1622.32,686.902 1622.88,686.902 1623.44,686.902 1624,686.902 1624.56,686.902 1625.11,686.902 1625.67,686.902 1626.23,686.902 1626.79,686.902 1627.35,686.902 1627.91,686.902 1628.47,686.902 1629.03,686.902 1629.59,686.902 1630.15,686.902 1630.71,686.902 1631.27,686.902 1631.83,686.902 1632.39,686.902 1632.94,686.902 1633.5,686.902 1634.06,686.902 1634.62,686.902 1635.18,686.902 1635.74,686.902 1636.3,686.902 1636.86,686.902 1637.42,686.902 1637.98,686.902 1638.54,686.902 1639.1,686.902 1639.66,686.902 1640.21,686.902 1640.77,686.902 1641.33,686.902 1641.89,686.902 1642.45,686.902 1643.01,686.902 1643.57,686.902 1644.13,686.902 1644.69,686.902 1645.25,686.902 1645.81,686.902 1646.37,686.902 1646.93,686.902 1647.48,686.902 1648.04,686.902 1648.6,686.902 1649.16,686.902 1649.72,686.902 1650.28,686.902 1650.84,686.902 1651.4,686.902 1651.96,686.902 1652.52,686.902 1653.08,686.902 1653.64,686.902 1654.2,686.902 1654.76,686.902 1655.31,686.902 1655.87,686.902 1656.43,686.902 1656.99,686.902 1657.55,686.902 1658.11,686.902 1658.67,686.902 1659.23,686.902 1659.79,686.902 1660.35,686.902 1660.91,686.902 1661.47,686.902 1662.03,686.902 1662.58,686.902 1663.14,686.902 1663.7,686.902 1664.26,686.902 1664.82,686.902 1665.38,686.902 1665.94,686.902 1666.5,686.902 1667.06,686.902 1667.62,686.902 1668.18,686.902 1668.74,686.902 1669.3,686.902 1669.85,686.902 1670.41,686.902 1670.97,686.902 1671.53,686.902 1672.09,686.902 1672.65,686.902 1673.21,686.902 1673.77,686.902 1674.33,686.902 1674.89,686.902 1675.45,686.902 1676.01,686.902 1676.57,686.902 1677.13,686.902 1677.68,686.902 1678.24,686.902 1678.8,686.902 1679.36,686.902 1679.92,686.902 1680.48,686.902 1681.04,686.902 1681.6,686.902 1682.16,686.902 1682.72,686.902 1683.28,686.902 1683.84,686.902 1684.4,686.902 1684.95,686.902 1685.51,686.902 1686.07,686.902 1686.63,686.902 1687.19,686.902 1687.75,686.902 1688.31,686.902 1688.87,686.902 1689.43,686.902 1689.99,686.902 1690.55,686.902 1691.11,686.902 1691.67,686.902 1692.23,686.902 1692.78,686.902 1693.34,686.902 1693.9,686.902 1694.46,686.902 1695.02,686.902 1695.58,686.902 1696.14,686.902 1696.7,686.902 1697.26,686.902 1697.82,686.902 1698.38,686.902 1698.94,686.902 1699.5,686.902 1700.05,686.902 1700.61,686.902 1701.17,686.902 1701.73,686.902 1702.29,686.902 1702.85,686.902 1703.41,686.902 1703.97,686.902 1704.53,686.902 1705.09,686.902 1705.65,686.902 1706.21,686.902 1706.77,686.902 1707.32,686.902 1707.88,686.902 1708.44,686.902 1709,686.902 1709.56,686.902 1710.12,686.902 1710.68,686.902 1711.24,686.902 1711.8,686.902 1712.36,686.902 1712.92,686.902 1713.48,686.902 1714.04,686.902 1714.6,686.902 1715.15,686.902 1715.71,686.902 1716.27,686.902 1716.83,686.902 1717.39,686.902 1717.95,686.902 1718.51,686.902 1719.07,686.902 1719.63,686.902 1720.19,686.902 1720.75,686.902 1721.31,686.902 1721.87,686.902 1722.42,686.902 1722.98,686.902 1723.54,686.902 1724.1,686.902 1724.66,686.902 1725.22,686.902 1725.78,686.902 1726.34,686.902 1726.9,686.902 1727.46,686.902 1728.02,686.902 1728.58,686.902 1729.14,686.902 1729.69,686.902 1730.25,686.902 1730.81,686.902 1731.37,686.902 1731.93,686.902 1732.49,686.902 1733.05,686.902 1733.61,686.902 1734.17,686.902 1734.73,686.902 1735.29,686.902 1735.85,686.902 1736.41,686.902 1736.97,686.902 1737.52,686.902 1738.08,686.902 1738.64,686.902 1739.2,686.902 1739.76,686.902 1740.32,686.902 1740.88,686.902 1741.44,686.902 1742,686.902 1742.56,686.902 1743.12,686.902 1743.68,686.902 1744.24,686.902 1744.79,686.902 1745.35,686.902 1745.91,686.902 1746.47,686.902 1747.03,686.902 1747.59,686.902 1748.15,686.902 1748.71,686.902 1749.27,686.902 1749.83,686.902 1750.39,686.902 1750.95,686.902 1751.51,686.902 1752.06,686.902 1752.62,686.902 1753.18,686.902 1753.74,686.902 1754.3,686.902 1754.86,686.902 1755.42,686.902 1755.98,686.902 1756.54,686.902 1757.1,686.902 1757.66,686.902 1758.22,686.902 1758.78,686.902 1759.34,686.902 1759.89,686.902 1760.45,686.902 1761.01,686.902 1761.57,686.902 1762.13,686.902 1762.69,686.902 1763.25,686.902 1763.81,686.902 1764.37,686.902 1764.93,686.902 1765.49,686.902 1766.05,686.902 1766.61,686.902 1767.16,686.902 1767.72,686.902 1768.28,686.902 1768.84,686.902 1769.4,686.902 1769.96,686.902 1770.52,686.902 1771.08,686.902 1771.64,686.902 1772.2,686.902 1772.76,686.902 1773.32,686.902 1773.88,686.902 1774.43,686.902 1774.99,686.902 1775.55,686.902 1776.11,686.902 1776.67,686.902 1777.23,686.902 1777.79,686.902 1778.35,686.902 1778.91,686.902 1779.47,686.902 1780.03,686.902 1780.59,686.902 1781.15,686.902 1781.71,686.902 1782.26,686.902 1782.82,686.902 1783.38,686.902 1783.94,686.902 1784.5,686.902 1785.06,686.902 1785.62,686.902 1786.18,686.902 1786.74,686.902 1787.3,686.902 1787.86,686.902 1788.42,686.902 1788.98,686.902 1789.53,686.902 1790.09,686.902 1790.65,686.902 1791.21,686.902 1791.77,686.902 1792.33,686.902 1792.89,686.902 1793.45,686.902 1794.01,686.902 1794.57,686.902 1795.13,686.902 1795.69,686.902 1796.25,686.902 1796.8,686.902 1797.36,686.902 1797.92,686.902 1798.48,686.902 1799.04,686.902 1799.6,686.902 1800.16,686.902 1800.72,686.902 1801.28,686.902 1801.84,686.902 1802.4,686.902 1802.96,686.902 1803.52,686.902 1804.08,686.902 1804.63,686.902 1805.19,686.902 1805.75,686.902 1806.31,686.902 1806.87,686.902 1807.43,686.902 1807.99,686.902 1808.55,686.902 1809.11,686.902 1809.67,686.902 1810.23,686.902 1810.79,686.902 1811.35,686.902 1811.9,686.902 1812.46,686.902 1813.02,686.902 1813.58,686.902 1814.14,686.902 1814.7,686.902 1815.26,686.902 1815.82,686.902 1816.38,686.902 1816.94,686.902 1817.5,686.902 1818.06,686.902 1818.62,686.902 1819.18,686.902 1819.73,686.902 1820.29,686.902 1820.85,686.902 1821.41,686.902 1821.97,686.902 1822.53,686.902 1823.09,686.902 1823.65,686.902 1824.21,686.902 1824.77,686.902 1825.33,686.902 1825.89,686.902 1826.45,686.902 1827,686.902 1827.56,686.902 1828.12,686.902 1828.68,686.902 1829.24,686.902 1829.8,686.902 1830.36,686.902 1830.92,686.902 1831.48,686.902 1832.04,686.902 1832.6,686.902 1833.16,686.902 1833.72,686.902 1834.27,686.902 1834.83,686.902 1835.39,686.902 1835.95,686.902 1836.51,686.902 1837.07,686.902 1837.63,686.902 1838.19,686.902 \"/>\n<path clip-path=\"url(#clip273)\" d=\"M720.247 683.648 L720.806 683.648 L721.365 683.648 L721.924 683.648 L722.484 683.648 L723.043 683.648 L723.602 683.648 L724.161 683.648 L724.721 683.648 L725.28 683.648 L725.839 683.648 L726.398 683.648 L726.958 683.648 L727.517 683.648 L728.076 683.648 L728.635 683.648 L729.195 683.648 L729.754 683.648 L730.313 683.648 L730.872 683.648 L731.432 683.648 L731.991 683.648 L732.55 683.648 L733.109 683.648 L733.669 683.648 L734.228 683.648 L734.787 683.648 L735.346 683.648 L735.906 683.648 L736.465 683.648 L737.024 683.648 L737.583 683.648 L738.143 683.648 L738.702 683.648 L739.261 683.648 L739.82 683.648 L740.38 683.648 L740.939 683.648 L741.498 683.648 L742.057 683.648 L742.617 683.648 L743.176 683.648 L743.735 683.648 L744.294 683.648 L744.854 683.648 L745.413 683.648 L745.972 683.648 L746.531 683.648 L747.091 683.648 L747.65 683.648 L748.209 683.648 L748.768 683.648 L749.328 683.648 L749.887 683.648 L750.446 683.648 L751.005 683.648 L751.565 683.648 L752.124 683.648 L752.683 683.648 L753.242 683.648 L753.802 683.648 L754.361 683.648 L754.92 683.648 L755.479 683.648 L756.039 683.648 L756.598 683.648 L757.157 683.648 L757.716 683.648 L758.276 683.648 L758.835 683.648 L759.394 683.648 L759.953 683.648 L760.513 683.648 L761.072 683.648 L761.631 683.648 L762.19 683.648 L762.75 683.648 L763.309 683.648 L763.868 683.648 L764.427 683.648 L764.987 683.648 L765.546 683.648 L766.105 683.648 L766.664 683.648 L767.224 683.648 L767.783 683.648 L768.342 683.648 L768.901 683.648 L769.461 683.648 L770.02 683.648 L770.579 683.648 L771.138 683.648 L771.698 683.648 L772.257 683.648 L772.816 683.648 L773.375 683.648 L773.935 683.648 L774.494 683.648 L775.053 683.648 L775.612 683.648 L776.172 683.648 L776.731 683.648 L777.29 683.648 L777.849 683.648 L778.409 683.648 L778.968 683.648 L779.527 683.648 L780.086 683.648 L780.646 683.648 L781.205 683.648 L781.764 683.648 L782.323 683.648 L782.883 683.648 L783.442 683.648 L784.001 683.648 L784.56 683.648 L785.12 683.648 L785.679 683.648 L786.238 683.648 L786.797 683.648 L787.357 683.648 L787.916 683.648 L788.475 683.648 L789.034 683.648 L789.594 683.648 L790.153 683.648 L790.712 683.648 L791.271 683.648 L791.831 683.648 L792.39 683.648 L792.949 683.648 L793.508 683.648 L794.068 683.648 L794.627 683.648 L795.186 683.648 L795.745 683.648 L796.305 683.648 L796.864 683.648 L797.423 683.648 L797.982 683.648 L798.542 683.648 L799.101 683.648 L799.66 683.648 L800.219 683.648 L800.779 683.648 L801.338 683.648 L801.897 683.648 L802.456 683.648 L803.016 683.648 L803.575 683.648 L804.134 683.648 L804.693 683.648 L805.253 683.648 L805.812 683.648 L806.371 683.648 L806.931 683.648 L807.49 683.648 L808.049 683.648 L808.608 683.648 L809.168 683.648 L809.727 683.648 L810.286 683.648 L810.845 683.648 L811.405 683.648 L811.964 683.648 L812.523 683.648 L813.082 683.648 L813.642 683.648 L814.201 683.648 L814.76 683.648 L815.319 683.648 L815.879 683.648 L816.438 683.648 L816.997 683.648 L817.556 683.648 L818.116 683.648 L818.675 683.648 L819.234 683.648 L819.793 683.648 L820.353 683.648 L820.912 683.648 L821.471 683.648 L822.03 683.648 L822.59 683.648 L823.149 683.648 L823.708 683.648 L824.267 683.648 L824.827 683.648 L825.386 683.648 L825.945 683.648 L826.504 683.648 L827.064 683.648 L827.623 683.648 L828.182 683.648 L828.741 683.648 L829.301 683.648 L829.86 683.648 L830.419 683.648 L830.978 683.648 L831.538 683.648 L832.097 683.648 L832.656 683.648 L833.215 683.648 L833.775 683.648 L834.334 683.648 L834.893 683.648 L835.452 683.648 L836.012 683.648 L836.571 683.648 L837.13 683.648 L837.689 683.648 L838.249 683.648 L838.808 683.648 L839.367 683.648 L839.926 683.648 L840.486 683.648 L841.045 683.648 L841.604 683.648 L842.163 683.648 L842.723 683.648 L843.282 683.648 L843.841 683.648 L844.4 683.648 L844.96 683.648 L845.519 683.648 L846.078 683.648 L846.637 683.648 L847.197 683.648 L847.756 683.648 L848.315 683.648 L848.874 683.648 L849.434 683.648 L849.993 683.648 L850.552 683.648 L851.111 683.648 L851.671 683.648 L852.23 683.648 L852.789 683.648 L853.348 683.648 L853.908 683.648 L854.467 683.648 L855.026 683.648 L855.585 683.648 L856.145 683.648 L856.704 683.648 L857.263 683.648 L857.822 683.648 L858.382 683.648 L858.941 683.648 L859.5 683.648 L860.059 683.648 L860.619 683.648 L861.178 683.648 L861.737 683.648 L862.296 683.648 L862.856 683.648 L863.415 683.648 L863.974 683.648 L864.533 683.648 L865.093 683.648 L865.652 683.648 L866.211 683.648 L866.77 683.648 L867.33 683.648 L867.889 683.648 L868.448 683.648 L869.007 683.648 L869.567 683.648 L870.126 683.648 L870.685 683.648 L871.244 683.648 L871.804 683.648 L872.363 683.648 L872.922 683.648 L873.481 683.648 L874.041 683.648 L874.6 683.648 L875.159 683.648 L875.718 683.648 L876.278 683.648 L876.837 683.648 L877.396 683.648 L877.955 683.648 L878.515 683.648 L879.074 683.648 L879.633 683.648 L880.192 683.648 L880.752 683.648 L881.311 683.648 L881.87 683.648 L882.429 683.648 L882.989 683.648 L883.548 683.648 L884.107 683.648 L884.666 683.648 L885.226 683.648 L885.785 683.648 L886.344 683.648 L886.903 683.648 L887.463 683.648 L888.022 683.648 L888.581 683.648 L889.14 683.648 L889.7 683.648 L890.259 683.648 L890.818 683.648 L891.377 683.648 L891.937 683.648 L892.496 683.648 L893.055 683.648 L893.614 683.648 L894.174 683.648 L894.733 683.648 L895.292 683.648 L895.851 683.648 L896.411 683.648 L896.97 683.648 L897.529 683.648 L898.088 683.648 L898.648 683.648 L899.207 683.648 L899.766 683.648 L900.325 683.648 L900.885 683.648 L901.444 683.648 L902.003 683.648 L902.562 683.648 L903.122 683.648 L903.681 683.648 L904.24 683.648 L904.799 683.648 L905.359 683.648 L905.918 683.648 L906.477 683.648 L907.036 683.648 L907.596 683.648 L908.155 683.648 L908.714 683.648 L909.273 683.648 L909.833 683.648 L910.392 683.648 L910.951 683.648 L911.51 683.648 L912.07 683.648 L912.629 683.648 L913.188 683.648 L913.747 683.648 L914.307 683.648 L914.866 683.648 L915.425 683.648 L915.984 683.648 L916.544 683.648 L917.103 683.648 L917.662 683.648 L918.221 683.648 L918.781 683.648 L919.34 683.648 L919.899 683.648 L920.458 683.648 L921.018 683.648 L921.577 683.648 L922.136 683.648 L922.695 683.648 L923.255 683.648 L923.814 683.648 L924.373 683.648 L924.932 683.648 L925.492 683.648 L926.051 683.648 L926.61 683.648 L927.169 683.648 L927.729 683.648 L928.288 683.648 L928.847 683.648 L929.406 683.648 L929.966 683.648 L930.525 683.648 L931.084 683.648 L931.644 683.648 L932.203 683.648 L932.762 683.648 L933.321 683.648 L933.881 683.648 L934.44 683.648 L934.999 683.648 L935.558 683.648 L936.118 683.648 L936.677 683.648 L937.236 683.648 L937.795 683.648 L938.355 683.648 L938.914 683.648 L939.473 683.648 L940.032 683.648 L940.592 683.648 L941.151 683.648 L941.71 683.648 L942.269 683.648 L942.829 683.648 L943.388 683.648 L943.947 683.648 L944.506 683.648 L945.066 683.648 L945.625 683.648 L946.184 683.648 L946.743 683.648 L947.303 683.648 L947.862 683.648 L948.421 683.648 L948.98 683.648 L949.54 683.648 L950.099 683.648 L950.658 683.648 L951.217 683.648 L951.777 683.648 L952.336 683.648 L952.895 683.648 L953.454 683.648 L954.014 683.648 L954.573 683.648 L955.132 683.648 L955.691 683.648 L956.251 683.648 L956.81 683.648 L957.369 683.648 L957.928 683.648 L958.488 683.648 L959.047 683.648 L959.606 683.648 L960.165 683.648 L960.725 683.648 L961.284 683.648 L961.843 683.648 L962.402 683.648 L962.962 683.648 L963.521 683.648 L964.08 683.648 L964.639 683.648 L965.199 683.648 L965.758 683.648 L966.317 683.648 L966.876 683.648 L967.436 683.648 L967.995 683.648 L968.554 683.648 L969.113 683.648 L969.673 683.648 L970.232 683.648 L970.791 683.648 L971.35 683.648 L971.91 683.648 L972.469 683.648 L973.028 683.648 L973.587 683.648 L974.147 683.648 L974.706 683.648 L975.265 683.648 L975.824 683.648 L976.384 683.648 L976.943 683.648 L977.502 683.648 L978.061 683.648 L978.621 683.648 L979.18 683.648 L979.739 683.648 L980.298 683.648 L980.858 683.648 L981.417 683.648 L981.976 683.648 L982.535 683.648 L983.095 683.648 L983.654 683.648 L984.213 683.648 L984.772 683.648 L985.332 683.648 L985.891 683.648 L986.45 683.648 L987.009 683.648 L987.569 683.648 L988.128 683.648 L988.687 683.648 L989.246 683.648 L989.806 683.648 L990.365 683.648 L990.924 683.648 L991.483 683.648 L992.043 683.648 L992.602 683.648 L993.161 683.648 L993.72 683.648 L994.28 683.648 L994.839 683.648 L995.398 683.648 L995.957 683.648 L996.517 683.648 L997.076 683.648 L997.635 683.648 L998.194 683.648 L998.754 683.648 L999.313 683.648 L999.872 683.648 L1000.43 683.648 L1000.99 683.648 L1001.55 683.648 L1002.11 683.648 L1002.67 683.648 L1003.23 683.648 L1003.79 683.648 L1004.35 683.648 L1004.91 683.648 L1005.46 683.648 L1006.02 683.648 L1006.58 683.648 L1007.14 683.648 L1007.7 683.648 L1008.26 683.648 L1008.82 683.648 L1009.38 683.648 L1009.94 683.648 L1010.5 683.648 L1011.06 683.648 L1011.62 683.648 L1012.18 683.648 L1012.73 683.648 L1013.29 683.648 L1013.85 683.648 L1014.41 683.648 L1014.97 683.648 L1015.53 683.648 L1016.09 683.648 L1016.65 683.648 L1017.21 683.648 L1017.77 683.648 L1018.33 683.648 L1018.89 683.648 L1019.45 683.648 L1020.01 683.648 L1020.56 683.648 L1021.12 683.648 L1021.68 683.648 L1022.24 683.648 L1022.8 683.648 L1023.36 683.648 L1023.92 683.648 L1024.48 683.648 L1025.04 683.648 L1025.6 683.648 L1026.16 683.648 L1026.72 683.648 L1027.28 683.648 L1027.83 683.648 L1028.39 683.648 L1028.95 683.648 L1029.51 683.648 L1030.07 683.648 L1030.63 683.648 L1031.19 683.648 L1031.75 683.648 L1032.31 683.648 L1032.87 683.648 L1033.43 683.648 L1033.99 683.648 L1034.55 683.648 L1035.1 683.648 L1035.66 683.648 L1036.22 683.648 L1036.78 683.648 L1037.34 683.648 L1037.9 683.648 L1038.46 683.648 L1039.02 683.648 L1039.58 683.648 L1040.14 683.648 L1040.7 683.648 L1041.26 683.648 L1041.82 683.648 L1042.38 683.648 L1042.93 683.648 L1043.49 683.648 L1044.05 683.648 L1044.61 683.648 L1045.17 683.648 L1045.73 683.648 L1046.29 683.648 L1046.85 683.648 L1047.41 683.648 L1047.97 683.648 L1048.53 683.648 L1049.09 683.648 L1049.65 683.648 L1050.2 683.648 L1050.76 683.648 L1051.32 683.648 L1051.88 683.648 L1052.44 683.648 L1053 683.648 L1053.56 683.648 L1054.12 683.648 L1054.68 683.648 L1055.24 683.648 L1055.8 683.648 L1056.36 683.648 L1056.92 683.648 L1057.48 683.648 L1058.03 683.648 L1058.59 683.648 L1059.15 683.648 L1059.71 683.648 L1060.27 683.648 L1060.83 683.648 L1061.39 683.648 L1061.95 683.648 L1062.51 683.648 L1063.07 683.648 L1063.63 683.648 L1064.19 683.648 L1064.75 683.648 L1065.3 683.648 L1065.86 683.648 L1066.42 683.648 L1066.98 683.648 L1067.54 683.648 L1068.1 683.648 L1068.66 683.648 L1069.22 683.648 L1069.78 683.648 L1070.34 683.648 L1070.9 683.648 L1071.46 683.648 L1072.02 683.648 L1072.57 683.648 L1073.13 683.648 L1073.69 683.648 L1074.25 683.648 L1074.81 683.648 L1075.37 683.648 L1075.93 683.648 L1076.49 683.648 L1077.05 683.648 L1077.61 683.648 L1078.17 683.648 L1078.73 683.648 L1079.29 683.648 L1079.85 683.648 L1080.4 683.648 L1080.96 683.648 L1081.52 683.648 L1082.08 683.648 L1082.64 683.648 L1083.2 683.648 L1083.76 683.648 L1084.32 683.648 L1084.88 683.648 L1085.44 683.648 L1086 683.648 L1086.56 683.648 L1087.12 683.648 L1087.67 683.648 L1088.23 683.648 L1088.79 683.648 L1089.35 683.648 L1089.91 683.648 L1090.47 683.648 L1091.03 683.648 L1091.59 683.648 L1092.15 683.648 L1092.71 683.648 L1093.27 683.648 L1093.83 683.648 L1094.39 683.648 L1094.94 683.648 L1095.5 683.648 L1096.06 683.648 L1096.62 683.648 L1097.18 683.648 L1097.74 683.648 L1098.3 683.648 L1098.86 683.648 L1099.42 683.648 L1099.98 683.648 L1100.54 683.648 L1101.1 683.648 L1101.66 683.648 L1102.22 683.648 L1102.77 683.648 L1103.33 683.648 L1103.89 683.648 L1104.45 683.648 L1105.01 683.648 L1105.57 683.648 L1106.13 683.648 L1106.69 683.648 L1107.25 683.648 L1107.81 683.648 L1108.37 683.648 L1108.93 683.648 L1109.49 683.648 L1110.04 683.648 L1110.6 683.648 L1111.16 683.648 L1111.72 683.648 L1112.28 683.648 L1112.84 683.648 L1113.4 683.648 L1113.96 683.648 L1114.52 683.648 L1115.08 683.648 L1115.64 683.648 L1116.2 683.648 L1116.76 683.648 L1117.31 683.648 L1117.87 683.648 L1118.43 683.648 L1118.99 683.648 L1119.55 683.648 L1120.11 683.648 L1120.67 683.648 L1121.23 683.648 L1121.79 683.648 L1122.35 683.648 L1122.91 683.648 L1123.47 683.648 L1124.03 683.648 L1124.59 683.648 L1125.14 683.648 L1125.7 683.648 L1126.26 683.648 L1126.82 683.648 L1127.38 683.648 L1127.94 683.648 L1128.5 683.648 L1129.06 683.648 L1129.62 683.648 L1130.18 683.648 L1130.74 683.648 L1131.3 683.648 L1131.86 683.648 L1132.41 683.648 L1132.97 683.648 L1133.53 683.648 L1134.09 683.648 L1134.65 683.648 L1135.21 683.648 L1135.77 683.648 L1136.33 683.648 L1136.89 683.648 L1137.45 683.648 L1138.01 683.648 L1138.57 683.648 L1139.13 683.648 L1139.68 683.648 L1140.24 683.648 L1140.8 683.648 L1141.36 683.648 L1141.92 683.648 L1142.48 683.648 L1143.04 683.648 L1143.6 683.648 L1144.16 683.648 L1144.72 683.648 L1145.28 683.648 L1145.84 683.648 L1146.4 683.648 L1146.96 683.648 L1147.51 683.648 L1148.07 683.648 L1148.63 683.648 L1149.19 683.648 L1149.75 683.648 L1150.31 683.648 L1150.87 683.648 L1151.43 683.648 L1151.99 683.648 L1152.55 683.648 L1153.11 683.648 L1153.67 683.648 L1154.23 683.648 L1154.78 683.648 L1155.34 683.648 L1155.9 683.648 L1156.46 683.648 L1157.02 683.648 L1157.58 683.648 L1158.14 683.648 L1158.7 683.648 L1159.26 683.648 L1159.82 683.648 L1160.38 683.648 L1160.94 683.648 L1161.5 683.648 L1162.05 683.648 L1162.61 683.648 L1163.17 683.648 L1163.73 683.648 L1164.29 683.648 L1164.85 683.648 L1165.41 683.648 L1165.97 683.648 L1166.53 683.648 L1167.09 683.648 L1167.65 683.648 L1168.21 683.648 L1168.77 683.648 L1169.33 683.648 L1169.88 683.648 L1170.44 683.648 L1171 683.648 L1171.56 683.648 L1172.12 683.648 L1172.68 683.648 L1173.24 683.648 L1173.8 683.648 L1174.36 683.648 L1174.92 683.648 L1175.48 683.648 L1176.04 683.648 L1176.6 683.648 L1177.15 683.648 L1177.71 683.648 L1178.27 683.648 L1178.83 683.648 L1179.39 683.648 L1179.95 683.648 L1180.51 683.648 L1181.07 683.648 L1181.63 683.648 L1182.19 683.648 L1182.75 683.648 L1183.31 683.648 L1183.87 683.648 L1184.43 683.648 L1184.98 683.648 L1185.54 683.648 L1186.1 683.648 L1186.66 683.648 L1187.22 683.648 L1187.78 683.648 L1188.34 683.648 L1188.9 683.648 L1189.46 683.648 L1190.02 683.648 L1190.58 683.648 L1191.14 683.648 L1191.7 683.648 L1192.25 683.648 L1192.81 683.648 L1193.37 683.648 L1193.93 683.648 L1194.49 683.648 L1195.05 683.648 L1195.61 683.648 L1196.17 683.648 L1196.73 683.648 L1197.29 683.648 L1197.85 683.648 L1198.41 683.648 L1198.97 683.648 L1199.52 683.648 L1200.08 683.648 L1200.64 683.648 L1201.2 683.648 L1201.76 683.648 L1202.32 683.648 L1202.88 683.648 L1203.44 683.648 L1204 683.648 L1204.56 683.648 L1205.12 683.648 L1205.68 683.648 L1206.24 683.648 L1206.8 683.648 L1207.35 683.648 L1207.91 683.648 L1208.47 683.648 L1209.03 683.648 L1209.59 683.648 L1210.15 683.648 L1210.71 683.648 L1211.27 683.648 L1211.83 683.648 L1212.39 683.648 L1212.95 683.648 L1213.51 683.648 L1214.07 683.648 L1214.62 683.648 L1215.18 683.648 L1215.74 683.648 L1216.3 683.648 L1216.86 683.648 L1217.42 683.648 L1217.98 683.648 L1218.54 683.648 L1219.1 683.648 L1219.66 683.648 L1220.22 683.648 L1220.78 683.648 L1221.34 683.648 L1221.89 683.648 L1222.45 683.648 L1223.01 683.648 L1223.57 683.648 L1224.13 683.648 L1224.69 683.648 L1225.25 683.648 L1225.81 683.648 L1226.37 683.648 L1226.93 683.648 L1227.49 683.648 L1228.05 683.648 L1228.61 683.648 L1229.17 683.648 L1229.72 683.648 L1230.28 683.648 L1230.84 683.648 L1231.4 683.648 L1231.96 683.648 L1232.52 683.648 L1233.08 683.648 L1233.64 683.648 L1234.2 683.648 L1234.76 683.648 L1235.32 683.648 L1235.88 683.648 L1236.44 683.648 L1236.99 683.648 L1237.55 683.648 L1238.11 683.648 L1238.67 683.648 L1239.23 683.648 L1239.79 683.648 L1240.35 683.648 L1240.91 683.648 L1241.47 683.648 L1242.03 683.648 L1242.59 683.648 L1243.15 683.648 L1243.71 683.648 L1244.26 683.648 L1244.82 683.648 L1245.38 683.648 L1245.94 683.648 L1246.5 683.648 L1247.06 683.648 L1247.62 683.648 L1248.18 683.648 L1248.74 683.648 L1249.3 683.648 L1249.86 683.648 L1250.42 683.648 L1250.98 683.648 L1251.54 683.648 L1252.09 683.648 L1252.65 683.648 L1253.21 683.648 L1253.77 683.648 L1254.33 683.648 L1254.89 683.648 L1255.45 683.648 L1256.01 683.648 L1256.57 683.648 L1257.13 683.648 L1257.69 683.648 L1258.25 683.648 L1258.81 683.648 L1259.36 683.648 L1259.92 683.648 L1260.48 683.648 L1261.04 683.648 L1261.6 683.648 L1262.16 683.648 L1262.72 683.648 L1263.28 683.648 L1263.84 683.648 L1264.4 683.648 L1264.96 683.648 L1265.52 683.648 L1266.08 683.648 L1266.63 683.648 L1267.19 683.648 L1267.75 683.648 L1268.31 683.648 L1268.87 683.648 L1269.43 683.648 L1269.99 683.648 L1270.55 683.648 L1271.11 683.648 L1271.67 683.648 L1272.23 683.648 L1272.79 683.648 L1273.35 683.648 L1273.91 683.648 L1274.46 683.648 L1275.02 683.648 L1275.58 683.648 L1276.14 683.648 L1276.7 683.648 L1277.26 683.648 L1277.82 683.648 L1278.38 683.648 L1278.94 683.648 L1279.5 683.648 L1280.06 683.648 L1280.62 683.648 L1281.18 683.648 L1281.73 683.648 L1282.29 683.648 L1282.85 683.648 L1283.41 683.648 L1283.97 683.648 L1284.53 683.648 L1285.09 683.648 L1285.65 683.648 L1286.21 683.648 L1286.77 683.648 L1287.33 683.648 L1287.89 683.648 L1288.45 683.648 L1289 683.648 L1289.56 683.648 L1290.12 683.648 L1290.68 683.648 L1291.24 683.648 L1291.8 683.648 L1292.36 683.648 L1292.92 683.648 L1293.48 683.648 L1294.04 683.648 L1294.6 683.648 L1295.16 683.648 L1295.72 683.648 L1296.28 683.648 L1296.83 683.648 L1297.39 683.648 L1297.95 683.648 L1298.51 683.648 L1299.07 683.648 L1299.63 683.648 L1300.19 683.648 L1300.75 683.648 L1301.31 683.648 L1301.87 683.648 L1302.43 683.648 L1302.99 683.648 L1303.55 683.648 L1304.1 683.648 L1304.66 683.648 L1305.22 683.648 L1305.78 683.648 L1306.34 683.648 L1306.9 683.648 L1307.46 683.648 L1308.02 683.648 L1308.58 683.648 L1309.14 683.648 L1309.7 683.648 L1310.26 683.648 L1310.82 683.648 L1311.38 683.648 L1311.93 683.648 L1312.49 683.648 L1313.05 683.648 L1313.61 683.648 L1314.17 683.648 L1314.73 683.648 L1315.29 683.648 L1315.85 683.648 L1316.41 683.648 L1316.97 683.648 L1317.53 683.648 L1318.09 683.648 L1318.65 683.648 L1319.2 683.648 L1319.76 683.648 L1320.32 683.648 L1320.88 683.648 L1321.44 683.648 L1322 683.648 L1322.56 683.648 L1323.12 683.648 L1323.68 683.648 L1324.24 683.648 L1324.8 683.648 L1325.36 683.648 L1325.92 683.648 L1326.47 683.648 L1327.03 683.648 L1327.59 683.648 L1328.15 683.648 L1328.71 683.648 L1329.27 683.648 L1329.83 683.648 L1330.39 683.648 L1330.95 683.648 L1331.51 683.648 L1332.07 683.648 L1332.63 683.648 L1333.19 683.648 L1333.75 683.648 L1334.3 683.648 L1334.86 683.648 L1335.42 683.648 L1335.98 683.648 L1336.54 683.648 L1337.1 683.648 L1337.66 683.648 L1338.22 683.648 L1338.78 683.648 L1339.34 683.648 L1339.9 683.648 L1340.46 683.648 L1341.02 683.648 L1341.57 683.648 L1342.13 683.648 L1342.69 683.648 L1343.25 683.648 L1343.81 683.648 L1344.37 683.648 L1344.93 683.648 L1345.49 683.648 L1346.05 683.648 L1346.61 683.648 L1347.17 683.648 L1347.73 683.648 L1348.29 683.648 L1348.84 683.648 L1349.4 683.648 L1349.96 683.648 L1350.52 683.648 L1351.08 683.648 L1351.64 683.648 L1352.2 683.648 L1352.76 683.648 L1353.32 683.648 L1353.88 683.648 L1354.44 683.648 L1355 683.648 L1355.56 683.648 L1356.12 683.648 L1356.67 683.648 L1357.23 683.648 L1357.79 683.648 L1358.35 683.648 L1358.91 683.648 L1359.47 683.648 L1360.03 683.648 L1360.59 683.648 L1361.15 683.648 L1361.71 683.648 L1362.27 683.648 L1362.83 683.648 L1363.39 683.648 L1363.94 683.648 L1364.5 683.648 L1365.06 683.648 L1365.62 683.648 L1366.18 683.648 L1366.74 683.648 L1367.3 683.648 L1367.86 683.648 L1368.42 683.648 L1368.98 683.648 L1369.54 683.648 L1370.1 683.648 L1370.66 683.648 L1371.21 683.648 L1371.77 683.648 L1372.33 683.648 L1372.89 683.648 L1373.45 683.648 L1374.01 683.648 L1374.57 683.648 L1375.13 683.648 L1375.69 683.648 L1376.25 683.648 L1376.81 683.648 L1377.37 683.648 L1377.93 683.648 L1378.49 683.648 L1379.04 683.648 L1379.6 683.648 L1380.16 683.648 L1380.72 683.648 L1381.28 683.648 L1381.84 683.648 L1382.4 683.648 L1382.96 683.648 L1383.52 683.648 L1384.08 683.648 L1384.64 683.648 L1385.2 683.648 L1385.76 683.648 L1386.31 683.648 L1386.87 683.648 L1387.43 683.648 L1387.99 683.648 L1388.55 683.648 L1389.11 683.648 L1389.67 683.648 L1390.23 683.648 L1390.79 683.648 L1391.35 683.648 L1391.91 683.648 L1392.47 683.648 L1393.03 683.648 L1393.58 683.648 L1394.14 683.648 L1394.7 683.648 L1395.26 683.648 L1395.82 683.648 L1396.38 683.648 L1396.94 683.648 L1397.5 683.648 L1398.06 683.648 L1398.62 683.648 L1399.18 683.648 L1399.74 683.648 L1400.3 683.648 L1400.86 683.648 L1401.41 683.648 L1401.97 683.648 L1402.53 683.648 L1403.09 683.648 L1403.65 683.648 L1404.21 683.648 L1404.77 683.648 L1405.33 683.648 L1405.89 683.648 L1406.45 683.648 L1407.01 683.648 L1407.57 683.648 L1408.13 683.648 L1408.68 683.648 L1409.24 683.648 L1409.8 683.648 L1410.36 683.648 L1410.92 683.648 L1411.48 683.648 L1412.04 683.648 L1412.6 683.648 L1413.16 683.648 L1413.72 683.648 L1414.28 683.648 L1414.84 683.648 L1415.4 683.648 L1415.95 683.648 L1416.51 683.648 L1417.07 683.648 L1417.63 683.648 L1418.19 683.648 L1418.75 683.648 L1419.31 683.648 L1419.87 683.648 L1420.43 683.648 L1420.99 683.648 L1421.55 683.648 L1422.11 683.648 L1422.67 683.648 L1423.23 683.648 L1423.78 683.648 L1424.34 683.648 L1424.9 683.648 L1425.46 683.648 L1426.02 683.648 L1426.58 683.648 L1427.14 683.648 L1427.7 683.648 L1428.26 683.648 L1428.82 683.648 L1429.38 683.648 L1429.94 683.648 L1430.5 683.648 L1431.05 683.648 L1431.61 683.648 L1432.17 683.648 L1432.73 683.648 L1433.29 683.648 L1433.85 683.648 L1434.41 683.648 L1434.97 683.648 L1435.53 683.648 L1436.09 683.648 L1436.65 683.648 L1437.21 683.648 L1437.77 683.648 L1438.33 683.648 L1438.88 683.648 L1439.44 683.648 L1440 683.648 L1440.56 683.648 L1441.12 683.648 L1441.68 683.648 L1442.24 683.648 L1442.8 683.648 L1443.36 683.648 L1443.92 683.648 L1444.48 683.648 L1445.04 683.648 L1445.6 683.648 L1446.15 683.648 L1446.71 683.648 L1447.27 683.648 L1447.83 683.648 L1448.39 683.648 L1448.95 683.648 L1449.51 683.648 L1450.07 683.648 L1450.63 683.648 L1451.19 683.648 L1451.75 683.648 L1452.31 683.648 L1452.87 683.648 L1453.42 683.648 L1453.98 683.648 L1454.54 683.648 L1455.1 683.648 L1455.66 683.648 L1456.22 683.648 L1456.78 683.648 L1457.34 683.648 L1457.9 683.648 L1458.46 683.648 L1459.02 683.648 L1459.58 683.648 L1460.14 683.648 L1460.7 683.648 L1461.25 683.648 L1461.81 683.648 L1462.37 683.648 L1462.93 683.648 L1463.49 683.648 L1464.05 683.648 L1464.61 683.648 L1465.17 683.648 L1465.73 683.648 L1466.29 683.648 L1466.85 683.648 L1467.41 683.648 L1467.97 683.648 L1468.52 683.648 L1469.08 683.648 L1469.64 683.648 L1470.2 683.648 L1470.76 683.648 L1471.32 683.648 L1471.88 683.648 L1472.44 683.648 L1473 683.648 L1473.56 683.648 L1474.12 683.648 L1474.68 683.648 L1475.24 683.648 L1475.79 683.648 L1476.35 683.648 L1476.91 683.648 L1477.47 683.648 L1478.03 683.648 L1478.59 683.648 L1479.15 683.648 L1479.71 683.648 L1480.27 683.648 L1480.83 683.648 L1481.39 683.648 L1481.95 683.648 L1482.51 683.648 L1483.07 683.648 L1483.62 683.648 L1484.18 683.648 L1484.74 683.648 L1485.3 683.648 L1485.86 683.648 L1486.42 683.648 L1486.98 683.648 L1487.54 683.648 L1488.1 683.648 L1488.66 683.648 L1489.22 683.648 L1489.78 683.648 L1490.34 683.648 L1490.89 683.648 L1491.45 683.648 L1492.01 683.648 L1492.57 683.648 L1493.13 683.648 L1493.69 683.648 L1494.25 683.648 L1494.81 683.648 L1495.37 683.648 L1495.93 683.648 L1496.49 683.648 L1497.05 683.648 L1497.61 683.648 L1498.16 683.648 L1498.72 683.648 L1499.28 683.648 L1499.84 683.648 L1500.4 683.648 L1500.96 683.648 L1501.52 683.648 L1502.08 683.648 L1502.64 683.648 L1503.2 683.648 L1503.76 683.648 L1504.32 683.648 L1504.88 683.648 L1505.44 683.648 L1505.99 683.648 L1506.55 683.648 L1507.11 683.648 L1507.67 683.648 L1508.23 683.648 L1508.79 683.648 L1509.35 683.648 L1509.91 683.648 L1510.47 683.648 L1511.03 683.648 L1511.59 683.648 L1512.15 683.648 L1512.71 683.648 L1513.26 683.648 L1513.82 683.648 L1514.38 683.648 L1514.94 683.648 L1515.5 683.648 L1516.06 683.648 L1516.62 683.648 L1517.18 683.648 L1517.74 683.648 L1518.3 683.648 L1518.86 683.648 L1519.42 683.648 L1519.98 683.648 L1520.53 683.648 L1521.09 683.648 L1521.65 683.648 L1522.21 683.648 L1522.77 683.648 L1523.33 683.648 L1523.89 683.648 L1524.45 683.648 L1525.01 683.648 L1525.57 683.648 L1526.13 683.648 L1526.69 683.648 L1527.25 683.648 L1527.81 683.648 L1528.36 683.648 L1528.92 683.648 L1529.48 683.648 L1530.04 683.648 L1530.6 683.648 L1531.16 683.648 L1531.72 683.648 L1532.28 683.648 L1532.84 683.648 L1533.4 683.648 L1533.96 683.648 L1534.52 683.648 L1535.08 683.648 L1535.63 683.648 L1536.19 683.648 L1536.75 683.648 L1537.31 683.648 L1537.87 683.648 L1538.43 683.648 L1538.99 683.648 L1539.55 683.648 L1540.11 683.648 L1540.67 683.648 L1541.23 683.648 L1541.79 683.648 L1542.35 683.648 L1542.9 683.648 L1543.46 683.648 L1544.02 683.648 L1544.58 683.648 L1545.14 683.648 L1545.7 683.648 L1546.26 683.648 L1546.82 683.648 L1547.38 683.648 L1547.94 683.648 L1548.5 683.648 L1549.06 683.648 L1549.62 683.648 L1550.18 683.648 L1550.73 683.648 L1551.29 683.648 L1551.85 683.648 L1552.41 683.648 L1552.97 683.648 L1553.53 683.648 L1554.09 683.648 L1554.65 683.648 L1555.21 683.648 L1555.77 683.648 L1556.33 683.648 L1556.89 683.648 L1557.45 683.648 L1558 683.648 L1558.56 683.648 L1559.12 683.648 L1559.68 683.648 L1560.24 683.648 L1560.8 683.648 L1561.36 683.648 L1561.92 683.648 L1562.48 683.648 L1563.04 683.648 L1563.6 683.648 L1564.16 683.648 L1564.72 683.648 L1565.28 683.648 L1565.83 683.648 L1566.39 683.648 L1566.95 683.648 L1567.51 683.648 L1568.07 683.648 L1568.63 683.648 L1569.19 683.648 L1569.75 683.648 L1570.31 683.648 L1570.87 683.648 L1571.43 683.648 L1571.99 683.648 L1572.55 683.648 L1573.1 683.648 L1573.66 683.648 L1574.22 683.648 L1574.78 683.648 L1575.34 683.648 L1575.9 683.648 L1576.46 683.648 L1577.02 683.648 L1577.58 683.648 L1578.14 683.648 L1578.7 683.648 L1579.26 683.648 L1579.82 683.648 L1580.37 683.648 L1580.93 683.648 L1581.49 683.648 L1582.05 683.648 L1582.61 683.648 L1583.17 683.648 L1583.73 683.648 L1584.29 683.648 L1584.85 683.648 L1585.41 683.648 L1585.97 683.648 L1586.53 683.648 L1587.09 683.648 L1587.65 683.648 L1588.2 683.648 L1588.76 683.648 L1589.32 683.648 L1589.88 683.648 L1590.44 683.648 L1591 683.648 L1591.56 683.648 L1592.12 683.648 L1592.68 683.648 L1593.24 683.648 L1593.8 683.648 L1594.36 683.648 L1594.92 683.648 L1595.47 683.648 L1596.03 683.648 L1596.59 683.648 L1597.15 683.648 L1597.71 683.648 L1598.27 683.648 L1598.83 683.648 L1599.39 683.648 L1599.95 683.648 L1600.51 683.648 L1601.07 683.648 L1601.63 683.648 L1602.19 683.648 L1602.74 683.648 L1603.3 683.648 L1603.86 683.648 L1604.42 683.648 L1604.98 683.648 L1605.54 683.648 L1606.1 683.648 L1606.66 683.648 L1607.22 683.648 L1607.78 683.648 L1608.34 683.648 L1608.9 683.648 L1609.46 683.648 L1610.02 683.648 L1610.57 683.648 L1611.13 683.648 L1611.69 683.648 L1612.25 683.648 L1612.81 683.648 L1613.37 683.648 L1613.93 683.648 L1614.49 683.648 L1615.05 683.648 L1615.61 683.648 L1616.17 683.648 L1616.73 683.648 L1617.29 683.648 L1617.84 683.648 L1618.4 683.648 L1618.96 683.648 L1619.52 683.648 L1620.08 683.648 L1620.64 683.648 L1621.2 683.648 L1621.76 683.648 L1622.32 683.648 L1622.88 683.648 L1623.44 683.648 L1624 683.648 L1624.56 683.648 L1625.11 683.648 L1625.67 683.648 L1626.23 683.648 L1626.79 683.648 L1627.35 683.648 L1627.91 683.648 L1628.47 683.648 L1629.03 683.648 L1629.59 683.648 L1630.15 683.648 L1630.71 683.648 L1631.27 683.648 L1631.83 683.648 L1632.39 683.648 L1632.94 683.648 L1633.5 683.648 L1634.06 683.648 L1634.62 683.648 L1635.18 683.648 L1635.74 683.648 L1636.3 683.648 L1636.86 683.648 L1637.42 683.648 L1637.98 683.648 L1638.54 683.648 L1639.1 683.648 L1639.66 683.648 L1640.21 683.648 L1640.77 683.648 L1641.33 683.648 L1641.89 683.648 L1642.45 683.648 L1643.01 683.648 L1643.57 683.648 L1644.13 683.648 L1644.69 683.648 L1645.25 683.648 L1645.81 683.648 L1646.37 683.648 L1646.93 683.648 L1647.48 683.648 L1648.04 683.648 L1648.6 683.648 L1649.16 683.648 L1649.72 683.648 L1650.28 683.648 L1650.84 683.648 L1651.4 683.648 L1651.96 683.648 L1652.52 683.648 L1653.08 683.648 L1653.64 683.648 L1654.2 683.648 L1654.76 683.648 L1655.31 683.648 L1655.87 683.648 L1656.43 683.648 L1656.99 683.648 L1657.55 683.648 L1658.11 683.648 L1658.67 683.648 L1659.23 683.648 L1659.79 683.648 L1660.35 683.648 L1660.91 683.648 L1661.47 683.648 L1662.03 683.648 L1662.58 683.648 L1663.14 683.648 L1663.7 683.648 L1664.26 683.648 L1664.82 683.648 L1665.38 683.648 L1665.94 683.648 L1666.5 683.648 L1667.06 683.648 L1667.62 683.648 L1668.18 683.648 L1668.74 683.648 L1669.3 683.648 L1669.85 683.648 L1670.41 683.648 L1670.97 683.648 L1671.53 683.648 L1672.09 683.648 L1672.65 683.648 L1673.21 683.648 L1673.77 683.648 L1674.33 683.648 L1674.89 683.648 L1675.45 683.648 L1676.01 683.648 L1676.57 683.648 L1677.13 683.648 L1677.68 683.648 L1678.24 683.648 L1678.8 683.648 L1679.36 683.648 L1679.92 683.648 L1680.48 683.648 L1681.04 683.648 L1681.6 683.648 L1682.16 683.648 L1682.72 683.648 L1683.28 683.648 L1683.84 683.648 L1684.4 683.648 L1684.95 683.648 L1685.51 683.648 L1686.07 683.648 L1686.63 683.648 L1687.19 683.648 L1687.75 683.648 L1688.31 683.648 L1688.87 683.648 L1689.43 683.648 L1689.99 683.648 L1690.55 683.648 L1691.11 683.648 L1691.67 683.648 L1692.23 683.648 L1692.78 683.648 L1693.34 683.648 L1693.9 683.648 L1694.46 683.648 L1695.02 683.648 L1695.58 683.648 L1696.14 683.648 L1696.7 683.648 L1697.26 683.648 L1697.82 683.648 L1698.38 683.648 L1698.94 683.648 L1699.5 683.648 L1700.05 683.648 L1700.61 683.648 L1701.17 683.648 L1701.73 683.648 L1702.29 683.648 L1702.85 683.648 L1703.41 683.648 L1703.97 683.648 L1704.53 683.648 L1705.09 683.648 L1705.65 683.648 L1706.21 683.648 L1706.77 683.648 L1707.32 683.648 L1707.88 683.648 L1708.44 683.648 L1709 683.648 L1709.56 683.648 L1710.12 683.648 L1710.68 683.648 L1711.24 683.648 L1711.8 683.648 L1712.36 683.648 L1712.92 683.648 L1713.48 683.648 L1714.04 683.648 L1714.6 683.648 L1715.15 683.648 L1715.71 683.648 L1716.27 683.648 L1716.83 683.648 L1717.39 683.648 L1717.95 683.648 L1718.51 683.648 L1719.07 683.648 L1719.63 683.648 L1720.19 683.648 L1720.75 683.648 L1721.31 683.648 L1721.87 683.648 L1722.42 683.648 L1722.98 683.648 L1723.54 683.648 L1724.1 683.648 L1724.66 683.648 L1725.22 683.648 L1725.78 683.648 L1726.34 683.648 L1726.9 683.648 L1727.46 683.648 L1728.02 683.648 L1728.58 683.648 L1729.14 683.648 L1729.69 683.648 L1730.25 683.648 L1730.81 683.648 L1731.37 683.648 L1731.93 683.648 L1732.49 683.648 L1733.05 683.648 L1733.61 683.648 L1734.17 683.648 L1734.73 683.648 L1735.29 683.648 L1735.85 683.648 L1736.41 683.648 L1736.97 683.648 L1737.52 683.648 L1738.08 683.648 L1738.64 683.648 L1739.2 683.648 L1739.76 683.648 L1740.32 683.648 L1740.88 683.648 L1741.44 683.648 L1742 683.648 L1742.56 683.648 L1743.12 683.648 L1743.68 683.648 L1744.24 683.648 L1744.79 683.648 L1745.35 683.648 L1745.91 683.648 L1746.47 683.648 L1747.03 683.648 L1747.59 683.648 L1748.15 683.648 L1748.71 683.648 L1749.27 683.648 L1749.83 683.648 L1750.39 683.648 L1750.95 683.648 L1751.51 683.648 L1752.06 683.648 L1752.62 683.648 L1753.18 683.648 L1753.74 683.648 L1754.3 683.648 L1754.86 683.648 L1755.42 683.648 L1755.98 683.648 L1756.54 683.648 L1757.1 683.648 L1757.66 683.648 L1758.22 683.648 L1758.78 683.648 L1759.34 683.648 L1759.89 683.648 L1760.45 683.648 L1761.01 683.648 L1761.57 683.648 L1762.13 683.648 L1762.69 683.648 L1763.25 683.648 L1763.81 683.648 L1764.37 683.648 L1764.93 683.648 L1765.49 683.648 L1766.05 683.648 L1766.61 683.648 L1767.16 683.648 L1767.72 683.648 L1768.28 683.648 L1768.84 683.648 L1769.4 683.648 L1769.96 683.648 L1770.52 683.648 L1771.08 683.648 L1771.64 683.648 L1772.2 683.648 L1772.76 683.648 L1773.32 683.648 L1773.88 683.648 L1774.43 683.648 L1774.99 683.648 L1775.55 683.648 L1776.11 683.648 L1776.67 683.648 L1777.23 683.648 L1777.79 683.648 L1778.35 683.648 L1778.91 683.648 L1779.47 683.648 L1780.03 683.648 L1780.59 683.648 L1781.15 683.648 L1781.71 683.648 L1782.26 683.648 L1782.82 683.648 L1783.38 683.648 L1783.94 683.648 L1784.5 683.648 L1785.06 683.648 L1785.62 683.648 L1786.18 683.648 L1786.74 683.648 L1787.3 683.648 L1787.86 683.648 L1788.42 683.648 L1788.98 683.648 L1789.53 683.648 L1790.09 683.648 L1790.65 683.648 L1791.21 683.648 L1791.77 683.648 L1792.33 683.648 L1792.89 683.648 L1793.45 683.648 L1794.01 683.648 L1794.57 683.648 L1795.13 683.648 L1795.69 683.648 L1796.25 683.648 L1796.8 683.648 L1797.36 683.648 L1797.92 683.648 L1798.48 683.648 L1799.04 683.648 L1799.6 683.648 L1800.16 683.648 L1800.72 683.648 L1801.28 683.648 L1801.84 683.648 L1802.4 683.648 L1802.96 683.648 L1803.52 683.648 L1804.08 683.648 L1804.63 683.648 L1805.19 683.648 L1805.75 683.648 L1806.31 683.648 L1806.87 683.648 L1807.43 683.648 L1807.99 683.648 L1808.55 683.648 L1809.11 683.648 L1809.67 683.648 L1810.23 683.648 L1810.79 683.648 L1811.35 683.648 L1811.9 683.648 L1812.46 683.648 L1813.02 683.648 L1813.58 683.648 L1814.14 683.648 L1814.7 683.648 L1815.26 683.648 L1815.82 683.648 L1816.38 683.648 L1816.94 683.648 L1817.5 683.648 L1818.06 683.648 L1818.62 683.648 L1819.18 683.648 L1819.73 683.648 L1820.29 683.648 L1820.85 683.648 L1821.41 683.648 L1821.97 683.648 L1822.53 683.648 L1823.09 683.648 L1823.65 683.648 L1824.21 683.648 L1824.77 683.648 L1825.33 683.648 L1825.89 683.648 L1826.45 683.648 L1827 683.648 L1827.56 683.648 L1828.12 683.648 L1828.68 683.648 L1829.24 683.648 L1829.8 683.648 L1830.36 683.648 L1830.92 683.648 L1831.48 683.648 L1832.04 683.648 L1832.6 683.648 L1833.16 683.648 L1833.72 683.648 L1834.27 683.648 L1834.83 683.648 L1835.39 683.648 L1835.95 683.648 L1836.51 683.648 L1837.07 683.648 L1837.63 683.648 L1838.19 683.648 L1838.19 681.815 L1837.63 681.815 L1837.07 681.815 L1836.51 681.815 L1835.95 681.815 L1835.39 681.815 L1834.83 681.815 L1834.27 681.815 L1833.72 681.815 L1833.16 681.815 L1832.6 681.815 L1832.04 681.815 L1831.48 681.815 L1830.92 681.815 L1830.36 681.815 L1829.8 681.815 L1829.24 681.815 L1828.68 681.815 L1828.12 681.815 L1827.56 681.815 L1827 681.815 L1826.45 681.815 L1825.89 681.815 L1825.33 681.815 L1824.77 681.815 L1824.21 681.815 L1823.65 681.815 L1823.09 681.815 L1822.53 681.815 L1821.97 681.815 L1821.41 681.815 L1820.85 681.815 L1820.29 681.815 L1819.73 681.815 L1819.18 681.815 L1818.62 681.815 L1818.06 681.815 L1817.5 681.815 L1816.94 681.815 L1816.38 681.815 L1815.82 681.815 L1815.26 681.815 L1814.7 681.815 L1814.14 681.815 L1813.58 681.815 L1813.02 681.815 L1812.46 681.815 L1811.9 681.815 L1811.35 681.815 L1810.79 681.815 L1810.23 681.815 L1809.67 681.815 L1809.11 681.815 L1808.55 681.815 L1807.99 681.815 L1807.43 681.815 L1806.87 681.815 L1806.31 681.815 L1805.75 681.815 L1805.19 681.815 L1804.63 681.815 L1804.08 681.815 L1803.52 681.815 L1802.96 681.815 L1802.4 681.815 L1801.84 681.815 L1801.28 681.815 L1800.72 681.815 L1800.16 681.815 L1799.6 681.815 L1799.04 681.815 L1798.48 681.815 L1797.92 681.815 L1797.36 681.815 L1796.8 681.815 L1796.25 681.815 L1795.69 681.815 L1795.13 681.815 L1794.57 681.815 L1794.01 681.815 L1793.45 681.815 L1792.89 681.815 L1792.33 681.815 L1791.77 681.815 L1791.21 681.815 L1790.65 681.815 L1790.09 681.815 L1789.53 681.815 L1788.98 681.815 L1788.42 681.815 L1787.86 681.815 L1787.3 681.815 L1786.74 681.815 L1786.18 681.815 L1785.62 681.815 L1785.06 681.815 L1784.5 681.815 L1783.94 681.815 L1783.38 681.815 L1782.82 681.815 L1782.26 681.815 L1781.71 681.815 L1781.15 681.815 L1780.59 681.815 L1780.03 681.815 L1779.47 681.815 L1778.91 681.815 L1778.35 681.815 L1777.79 681.815 L1777.23 681.815 L1776.67 681.815 L1776.11 681.815 L1775.55 681.815 L1774.99 681.815 L1774.43 681.815 L1773.88 681.815 L1773.32 681.815 L1772.76 681.815 L1772.2 681.815 L1771.64 681.815 L1771.08 681.815 L1770.52 681.815 L1769.96 681.815 L1769.4 681.815 L1768.84 681.815 L1768.28 681.815 L1767.72 681.815 L1767.16 681.815 L1766.61 681.815 L1766.05 681.815 L1765.49 681.815 L1764.93 681.815 L1764.37 681.815 L1763.81 681.815 L1763.25 681.815 L1762.69 681.815 L1762.13 681.815 L1761.57 681.815 L1761.01 681.815 L1760.45 681.815 L1759.89 681.815 L1759.34 681.815 L1758.78 681.815 L1758.22 681.815 L1757.66 681.815 L1757.1 681.815 L1756.54 681.815 L1755.98 681.815 L1755.42 681.815 L1754.86 681.815 L1754.3 681.815 L1753.74 681.815 L1753.18 681.815 L1752.62 681.815 L1752.06 681.815 L1751.51 681.815 L1750.95 681.815 L1750.39 681.815 L1749.83 681.815 L1749.27 681.815 L1748.71 681.815 L1748.15 681.815 L1747.59 681.815 L1747.03 681.815 L1746.47 681.815 L1745.91 681.815 L1745.35 681.815 L1744.79 681.815 L1744.24 681.815 L1743.68 681.815 L1743.12 681.815 L1742.56 681.815 L1742 681.815 L1741.44 681.815 L1740.88 681.815 L1740.32 681.815 L1739.76 681.815 L1739.2 681.815 L1738.64 681.815 L1738.08 681.815 L1737.52 681.815 L1736.97 681.815 L1736.41 681.815 L1735.85 681.815 L1735.29 681.815 L1734.73 681.815 L1734.17 681.815 L1733.61 681.815 L1733.05 681.815 L1732.49 681.815 L1731.93 681.815 L1731.37 681.815 L1730.81 681.815 L1730.25 681.815 L1729.69 681.815 L1729.14 681.815 L1728.58 681.815 L1728.02 681.815 L1727.46 681.815 L1726.9 681.815 L1726.34 681.815 L1725.78 681.815 L1725.22 681.815 L1724.66 681.815 L1724.1 681.815 L1723.54 681.815 L1722.98 681.815 L1722.42 681.815 L1721.87 681.815 L1721.31 681.815 L1720.75 681.815 L1720.19 681.815 L1719.63 681.815 L1719.07 681.815 L1718.51 681.815 L1717.95 681.815 L1717.39 681.815 L1716.83 681.815 L1716.27 681.815 L1715.71 681.815 L1715.15 681.815 L1714.6 681.815 L1714.04 681.815 L1713.48 681.815 L1712.92 681.815 L1712.36 681.815 L1711.8 681.815 L1711.24 681.815 L1710.68 681.815 L1710.12 681.815 L1709.56 681.815 L1709 681.815 L1708.44 681.815 L1707.88 681.815 L1707.32 681.815 L1706.77 681.815 L1706.21 681.815 L1705.65 681.815 L1705.09 681.815 L1704.53 681.815 L1703.97 681.815 L1703.41 681.815 L1702.85 681.815 L1702.29 681.815 L1701.73 681.815 L1701.17 681.815 L1700.61 681.815 L1700.05 681.815 L1699.5 681.815 L1698.94 681.815 L1698.38 681.815 L1697.82 681.815 L1697.26 681.815 L1696.7 681.815 L1696.14 681.815 L1695.58 681.815 L1695.02 681.815 L1694.46 681.815 L1693.9 681.815 L1693.34 681.815 L1692.78 681.815 L1692.23 681.815 L1691.67 681.815 L1691.11 681.815 L1690.55 681.815 L1689.99 681.815 L1689.43 681.815 L1688.87 681.815 L1688.31 681.815 L1687.75 681.815 L1687.19 681.815 L1686.63 681.815 L1686.07 681.815 L1685.51 681.815 L1684.95 681.815 L1684.4 681.815 L1683.84 681.815 L1683.28 681.815 L1682.72 681.815 L1682.16 681.815 L1681.6 681.815 L1681.04 681.815 L1680.48 681.815 L1679.92 681.815 L1679.36 681.815 L1678.8 681.815 L1678.24 681.815 L1677.68 681.815 L1677.13 681.815 L1676.57 681.815 L1676.01 681.815 L1675.45 681.815 L1674.89 681.815 L1674.33 681.815 L1673.77 681.815 L1673.21 681.815 L1672.65 681.815 L1672.09 681.815 L1671.53 681.815 L1670.97 681.815 L1670.41 681.815 L1669.85 681.815 L1669.3 681.815 L1668.74 681.815 L1668.18 681.815 L1667.62 681.815 L1667.06 681.815 L1666.5 681.815 L1665.94 681.815 L1665.38 681.815 L1664.82 681.815 L1664.26 681.815 L1663.7 681.815 L1663.14 681.815 L1662.58 681.815 L1662.03 681.815 L1661.47 681.815 L1660.91 681.815 L1660.35 681.815 L1659.79 681.815 L1659.23 681.815 L1658.67 681.815 L1658.11 681.815 L1657.55 681.815 L1656.99 681.815 L1656.43 681.815 L1655.87 681.815 L1655.31 681.815 L1654.76 681.815 L1654.2 681.815 L1653.64 681.815 L1653.08 681.815 L1652.52 681.815 L1651.96 681.815 L1651.4 681.815 L1650.84 681.815 L1650.28 681.815 L1649.72 681.815 L1649.16 681.815 L1648.6 681.815 L1648.04 681.815 L1647.48 681.815 L1646.93 681.815 L1646.37 681.815 L1645.81 681.815 L1645.25 681.815 L1644.69 681.815 L1644.13 681.815 L1643.57 681.815 L1643.01 681.815 L1642.45 681.815 L1641.89 681.815 L1641.33 681.815 L1640.77 681.815 L1640.21 681.815 L1639.66 681.815 L1639.1 681.815 L1638.54 681.815 L1637.98 681.815 L1637.42 681.815 L1636.86 681.815 L1636.3 681.815 L1635.74 681.815 L1635.18 681.815 L1634.62 681.815 L1634.06 681.815 L1633.5 681.815 L1632.94 681.815 L1632.39 681.815 L1631.83 681.815 L1631.27 681.815 L1630.71 681.815 L1630.15 681.815 L1629.59 681.815 L1629.03 681.815 L1628.47 681.815 L1627.91 681.815 L1627.35 681.815 L1626.79 681.815 L1626.23 681.815 L1625.67 681.815 L1625.11 681.815 L1624.56 681.815 L1624 681.815 L1623.44 681.815 L1622.88 681.815 L1622.32 681.815 L1621.76 681.815 L1621.2 681.815 L1620.64 681.815 L1620.08 681.815 L1619.52 681.815 L1618.96 681.815 L1618.4 681.815 L1617.84 681.815 L1617.29 681.815 L1616.73 681.815 L1616.17 681.815 L1615.61 681.815 L1615.05 681.815 L1614.49 681.815 L1613.93 681.815 L1613.37 681.815 L1612.81 681.815 L1612.25 681.815 L1611.69 681.815 L1611.13 681.815 L1610.57 681.815 L1610.02 681.815 L1609.46 681.815 L1608.9 681.815 L1608.34 681.815 L1607.78 681.815 L1607.22 681.815 L1606.66 681.815 L1606.1 681.815 L1605.54 681.815 L1604.98 681.815 L1604.42 681.815 L1603.86 681.815 L1603.3 681.815 L1602.74 681.815 L1602.19 681.815 L1601.63 681.815 L1601.07 681.815 L1600.51 681.815 L1599.95 681.815 L1599.39 681.815 L1598.83 681.815 L1598.27 681.815 L1597.71 681.815 L1597.15 681.815 L1596.59 681.815 L1596.03 681.815 L1595.47 681.815 L1594.92 681.815 L1594.36 681.815 L1593.8 681.815 L1593.24 681.815 L1592.68 681.815 L1592.12 681.815 L1591.56 681.815 L1591 681.815 L1590.44 681.815 L1589.88 681.815 L1589.32 681.815 L1588.76 681.815 L1588.2 681.815 L1587.65 681.815 L1587.09 681.815 L1586.53 681.815 L1585.97 681.815 L1585.41 681.815 L1584.85 681.815 L1584.29 681.815 L1583.73 681.815 L1583.17 681.815 L1582.61 681.815 L1582.05 681.815 L1581.49 681.815 L1580.93 681.815 L1580.37 681.815 L1579.82 681.815 L1579.26 681.815 L1578.7 681.815 L1578.14 681.815 L1577.58 681.815 L1577.02 681.815 L1576.46 681.815 L1575.9 681.815 L1575.34 681.815 L1574.78 681.815 L1574.22 681.815 L1573.66 681.815 L1573.1 681.815 L1572.55 681.815 L1571.99 681.815 L1571.43 681.815 L1570.87 681.815 L1570.31 681.815 L1569.75 681.815 L1569.19 681.815 L1568.63 681.815 L1568.07 681.815 L1567.51 681.815 L1566.95 681.815 L1566.39 681.815 L1565.83 681.815 L1565.28 681.815 L1564.72 681.815 L1564.16 681.815 L1563.6 681.815 L1563.04 681.815 L1562.48 681.815 L1561.92 681.815 L1561.36 681.815 L1560.8 681.815 L1560.24 681.815 L1559.68 681.815 L1559.12 681.815 L1558.56 681.815 L1558 681.815 L1557.45 681.815 L1556.89 681.815 L1556.33 681.815 L1555.77 681.815 L1555.21 681.815 L1554.65 681.815 L1554.09 681.815 L1553.53 681.815 L1552.97 681.815 L1552.41 681.815 L1551.85 681.815 L1551.29 681.815 L1550.73 681.815 L1550.18 681.815 L1549.62 681.815 L1549.06 681.815 L1548.5 681.815 L1547.94 681.815 L1547.38 681.815 L1546.82 681.815 L1546.26 681.815 L1545.7 681.815 L1545.14 681.815 L1544.58 681.815 L1544.02 681.815 L1543.46 681.815 L1542.9 681.815 L1542.35 681.815 L1541.79 681.815 L1541.23 681.815 L1540.67 681.815 L1540.11 681.815 L1539.55 681.815 L1538.99 681.815 L1538.43 681.815 L1537.87 681.815 L1537.31 681.815 L1536.75 681.815 L1536.19 681.815 L1535.63 681.815 L1535.08 681.815 L1534.52 681.815 L1533.96 681.815 L1533.4 681.815 L1532.84 681.815 L1532.28 681.815 L1531.72 681.815 L1531.16 681.815 L1530.6 681.815 L1530.04 681.815 L1529.48 681.815 L1528.92 681.815 L1528.36 681.815 L1527.81 681.815 L1527.25 681.815 L1526.69 681.815 L1526.13 681.815 L1525.57 681.815 L1525.01 681.815 L1524.45 681.815 L1523.89 681.815 L1523.33 681.815 L1522.77 681.815 L1522.21 681.815 L1521.65 681.815 L1521.09 681.815 L1520.53 681.815 L1519.98 681.815 L1519.42 681.815 L1518.86 681.815 L1518.3 681.815 L1517.74 681.815 L1517.18 681.815 L1516.62 681.815 L1516.06 681.815 L1515.5 681.815 L1514.94 681.815 L1514.38 681.815 L1513.82 681.815 L1513.26 681.815 L1512.71 681.815 L1512.15 681.815 L1511.59 681.815 L1511.03 681.815 L1510.47 681.815 L1509.91 681.815 L1509.35 681.815 L1508.79 681.815 L1508.23 681.815 L1507.67 681.815 L1507.11 681.815 L1506.55 681.815 L1505.99 681.815 L1505.44 681.815 L1504.88 681.815 L1504.32 681.815 L1503.76 681.815 L1503.2 681.815 L1502.64 681.815 L1502.08 681.815 L1501.52 681.815 L1500.96 681.815 L1500.4 681.815 L1499.84 681.815 L1499.28 681.815 L1498.72 681.815 L1498.16 681.815 L1497.61 681.815 L1497.05 681.815 L1496.49 681.815 L1495.93 681.815 L1495.37 681.815 L1494.81 681.815 L1494.25 681.815 L1493.69 681.815 L1493.13 681.815 L1492.57 681.815 L1492.01 681.815 L1491.45 681.815 L1490.89 681.815 L1490.34 681.815 L1489.78 681.815 L1489.22 681.815 L1488.66 681.815 L1488.1 681.815 L1487.54 681.815 L1486.98 681.815 L1486.42 681.815 L1485.86 681.815 L1485.3 681.815 L1484.74 681.815 L1484.18 681.815 L1483.62 681.815 L1483.07 681.815 L1482.51 681.815 L1481.95 681.815 L1481.39 681.815 L1480.83 681.815 L1480.27 681.815 L1479.71 681.815 L1479.15 681.815 L1478.59 681.815 L1478.03 681.815 L1477.47 681.815 L1476.91 681.815 L1476.35 681.815 L1475.79 681.815 L1475.24 681.815 L1474.68 681.815 L1474.12 681.815 L1473.56 681.815 L1473 681.815 L1472.44 681.815 L1471.88 681.815 L1471.32 681.815 L1470.76 681.815 L1470.2 681.815 L1469.64 681.815 L1469.08 681.815 L1468.52 681.815 L1467.97 681.815 L1467.41 681.815 L1466.85 681.815 L1466.29 681.815 L1465.73 681.815 L1465.17 681.815 L1464.61 681.815 L1464.05 681.815 L1463.49 681.815 L1462.93 681.815 L1462.37 681.815 L1461.81 681.815 L1461.25 681.815 L1460.7 681.815 L1460.14 681.815 L1459.58 681.815 L1459.02 681.815 L1458.46 681.815 L1457.9 681.815 L1457.34 681.815 L1456.78 681.815 L1456.22 681.815 L1455.66 681.815 L1455.1 681.815 L1454.54 681.815 L1453.98 681.815 L1453.42 681.815 L1452.87 681.815 L1452.31 681.815 L1451.75 681.815 L1451.19 681.815 L1450.63 681.815 L1450.07 681.815 L1449.51 681.815 L1448.95 681.815 L1448.39 681.815 L1447.83 681.815 L1447.27 681.815 L1446.71 681.815 L1446.15 681.815 L1445.6 681.815 L1445.04 681.815 L1444.48 681.815 L1443.92 681.815 L1443.36 681.815 L1442.8 681.815 L1442.24 681.815 L1441.68 681.815 L1441.12 681.815 L1440.56 681.815 L1440 681.815 L1439.44 681.815 L1438.88 681.815 L1438.33 681.815 L1437.77 681.815 L1437.21 681.815 L1436.65 681.815 L1436.09 681.815 L1435.53 681.815 L1434.97 681.815 L1434.41 681.815 L1433.85 681.815 L1433.29 681.815 L1432.73 681.815 L1432.17 681.815 L1431.61 681.815 L1431.05 681.815 L1430.5 681.815 L1429.94 681.815 L1429.38 681.815 L1428.82 681.815 L1428.26 681.815 L1427.7 681.815 L1427.14 681.815 L1426.58 681.815 L1426.02 681.815 L1425.46 681.815 L1424.9 681.815 L1424.34 681.815 L1423.78 681.815 L1423.23 681.815 L1422.67 681.815 L1422.11 681.815 L1421.55 681.815 L1420.99 681.815 L1420.43 681.815 L1419.87 681.815 L1419.31 681.815 L1418.75 681.815 L1418.19 681.815 L1417.63 681.815 L1417.07 681.815 L1416.51 681.815 L1415.95 681.815 L1415.4 681.815 L1414.84 681.815 L1414.28 681.815 L1413.72 681.815 L1413.16 681.815 L1412.6 681.815 L1412.04 681.815 L1411.48 681.815 L1410.92 681.815 L1410.36 681.815 L1409.8 681.815 L1409.24 681.815 L1408.68 681.815 L1408.13 681.815 L1407.57 681.815 L1407.01 681.815 L1406.45 681.815 L1405.89 681.815 L1405.33 681.815 L1404.77 681.815 L1404.21 681.815 L1403.65 681.815 L1403.09 681.815 L1402.53 681.815 L1401.97 681.815 L1401.41 681.815 L1400.86 681.815 L1400.3 681.815 L1399.74 681.815 L1399.18 681.815 L1398.62 681.815 L1398.06 681.815 L1397.5 681.815 L1396.94 681.815 L1396.38 681.815 L1395.82 681.815 L1395.26 681.815 L1394.7 681.815 L1394.14 681.815 L1393.58 681.815 L1393.03 681.815 L1392.47 681.815 L1391.91 681.815 L1391.35 681.815 L1390.79 681.815 L1390.23 681.815 L1389.67 681.815 L1389.11 681.815 L1388.55 681.815 L1387.99 681.815 L1387.43 681.815 L1386.87 681.815 L1386.31 681.815 L1385.76 681.815 L1385.2 681.815 L1384.64 681.815 L1384.08 681.815 L1383.52 681.815 L1382.96 681.815 L1382.4 681.815 L1381.84 681.815 L1381.28 681.815 L1380.72 681.815 L1380.16 681.815 L1379.6 681.815 L1379.04 681.815 L1378.49 681.815 L1377.93 681.815 L1377.37 681.815 L1376.81 681.815 L1376.25 681.815 L1375.69 681.815 L1375.13 681.815 L1374.57 681.815 L1374.01 681.815 L1373.45 681.815 L1372.89 681.815 L1372.33 681.815 L1371.77 681.815 L1371.21 681.815 L1370.66 681.815 L1370.1 681.815 L1369.54 681.815 L1368.98 681.815 L1368.42 681.815 L1367.86 681.815 L1367.3 681.815 L1366.74 681.815 L1366.18 681.815 L1365.62 681.815 L1365.06 681.815 L1364.5 681.815 L1363.94 681.815 L1363.39 681.815 L1362.83 681.815 L1362.27 681.815 L1361.71 681.815 L1361.15 681.815 L1360.59 681.815 L1360.03 681.815 L1359.47 681.815 L1358.91 681.815 L1358.35 681.815 L1357.79 681.815 L1357.23 681.815 L1356.67 681.815 L1356.12 681.815 L1355.56 681.815 L1355 681.815 L1354.44 681.815 L1353.88 681.815 L1353.32 681.815 L1352.76 681.815 L1352.2 681.815 L1351.64 681.815 L1351.08 681.815 L1350.52 681.815 L1349.96 681.815 L1349.4 681.815 L1348.84 681.815 L1348.29 681.815 L1347.73 681.815 L1347.17 681.815 L1346.61 681.815 L1346.05 681.815 L1345.49 681.815 L1344.93 681.815 L1344.37 681.815 L1343.81 681.815 L1343.25 681.815 L1342.69 681.815 L1342.13 681.815 L1341.57 681.815 L1341.02 681.815 L1340.46 681.815 L1339.9 681.815 L1339.34 681.815 L1338.78 681.815 L1338.22 681.815 L1337.66 681.815 L1337.1 681.815 L1336.54 681.815 L1335.98 681.815 L1335.42 681.815 L1334.86 681.815 L1334.3 681.815 L1333.75 681.815 L1333.19 681.815 L1332.63 681.815 L1332.07 681.815 L1331.51 681.815 L1330.95 681.815 L1330.39 681.815 L1329.83 681.815 L1329.27 681.815 L1328.71 681.815 L1328.15 681.815 L1327.59 681.815 L1327.03 681.815 L1326.47 681.815 L1325.92 681.815 L1325.36 681.815 L1324.8 681.815 L1324.24 681.815 L1323.68 681.815 L1323.12 681.815 L1322.56 681.815 L1322 681.815 L1321.44 681.815 L1320.88 681.815 L1320.32 681.815 L1319.76 681.815 L1319.2 681.815 L1318.65 681.815 L1318.09 681.815 L1317.53 681.815 L1316.97 681.815 L1316.41 681.815 L1315.85 681.815 L1315.29 681.815 L1314.73 681.815 L1314.17 681.815 L1313.61 681.815 L1313.05 681.815 L1312.49 681.815 L1311.93 681.815 L1311.38 681.815 L1310.82 681.815 L1310.26 681.815 L1309.7 681.815 L1309.14 681.815 L1308.58 681.815 L1308.02 681.815 L1307.46 681.815 L1306.9 681.815 L1306.34 681.815 L1305.78 681.815 L1305.22 681.815 L1304.66 681.815 L1304.1 681.815 L1303.55 681.815 L1302.99 681.815 L1302.43 681.815 L1301.87 681.815 L1301.31 681.815 L1300.75 681.815 L1300.19 681.815 L1299.63 681.815 L1299.07 681.815 L1298.51 681.815 L1297.95 681.815 L1297.39 681.815 L1296.83 681.815 L1296.28 681.815 L1295.72 681.815 L1295.16 681.815 L1294.6 681.815 L1294.04 681.815 L1293.48 681.815 L1292.92 681.815 L1292.36 681.815 L1291.8 681.815 L1291.24 681.815 L1290.68 681.815 L1290.12 681.815 L1289.56 681.815 L1289 681.815 L1288.45 681.815 L1287.89 681.815 L1287.33 681.815 L1286.77 681.815 L1286.21 681.815 L1285.65 681.815 L1285.09 681.815 L1284.53 681.815 L1283.97 681.815 L1283.41 681.815 L1282.85 681.815 L1282.29 681.815 L1281.73 681.815 L1281.18 681.815 L1280.62 681.815 L1280.06 681.815 L1279.5 681.815 L1278.94 681.815 L1278.38 681.815 L1277.82 681.815 L1277.26 681.815 L1276.7 681.815 L1276.14 681.815 L1275.58 681.815 L1275.02 681.815 L1274.46 681.815 L1273.91 681.815 L1273.35 681.815 L1272.79 681.815 L1272.23 681.815 L1271.67 681.815 L1271.11 681.815 L1270.55 681.815 L1269.99 681.815 L1269.43 681.815 L1268.87 681.815 L1268.31 681.815 L1267.75 681.815 L1267.19 681.815 L1266.63 681.815 L1266.08 681.815 L1265.52 681.815 L1264.96 681.815 L1264.4 681.815 L1263.84 681.815 L1263.28 681.815 L1262.72 681.815 L1262.16 681.815 L1261.6 681.815 L1261.04 681.815 L1260.48 681.815 L1259.92 681.815 L1259.36 681.815 L1258.81 681.815 L1258.25 681.815 L1257.69 681.815 L1257.13 681.815 L1256.57 681.815 L1256.01 681.815 L1255.45 681.815 L1254.89 681.815 L1254.33 681.815 L1253.77 681.815 L1253.21 681.815 L1252.65 681.815 L1252.09 681.815 L1251.54 681.815 L1250.98 681.815 L1250.42 681.815 L1249.86 681.815 L1249.3 681.815 L1248.74 681.815 L1248.18 681.815 L1247.62 681.815 L1247.06 681.815 L1246.5 681.815 L1245.94 681.815 L1245.38 681.815 L1244.82 681.815 L1244.26 681.815 L1243.71 681.815 L1243.15 681.815 L1242.59 681.815 L1242.03 681.815 L1241.47 681.815 L1240.91 681.815 L1240.35 681.815 L1239.79 681.815 L1239.23 681.815 L1238.67 681.815 L1238.11 681.815 L1237.55 681.815 L1236.99 681.815 L1236.44 681.815 L1235.88 681.815 L1235.32 681.815 L1234.76 681.815 L1234.2 681.815 L1233.64 681.815 L1233.08 681.815 L1232.52 681.815 L1231.96 681.815 L1231.4 681.815 L1230.84 681.815 L1230.28 681.815 L1229.72 681.815 L1229.17 681.815 L1228.61 681.815 L1228.05 681.815 L1227.49 681.815 L1226.93 681.815 L1226.37 681.815 L1225.81 681.815 L1225.25 681.815 L1224.69 681.815 L1224.13 681.815 L1223.57 681.815 L1223.01 681.815 L1222.45 681.815 L1221.89 681.815 L1221.34 681.815 L1220.78 681.815 L1220.22 681.815 L1219.66 681.815 L1219.1 681.815 L1218.54 681.815 L1217.98 681.815 L1217.42 681.815 L1216.86 681.815 L1216.3 681.815 L1215.74 681.815 L1215.18 681.815 L1214.62 681.815 L1214.07 681.815 L1213.51 681.815 L1212.95 681.815 L1212.39 681.815 L1211.83 681.815 L1211.27 681.815 L1210.71 681.815 L1210.15 681.815 L1209.59 681.815 L1209.03 681.815 L1208.47 681.815 L1207.91 681.815 L1207.35 681.815 L1206.8 681.815 L1206.24 681.815 L1205.68 681.815 L1205.12 681.815 L1204.56 681.815 L1204 681.815 L1203.44 681.815 L1202.88 681.815 L1202.32 681.815 L1201.76 681.815 L1201.2 681.815 L1200.64 681.815 L1200.08 681.815 L1199.52 681.815 L1198.97 681.815 L1198.41 681.815 L1197.85 681.815 L1197.29 681.815 L1196.73 681.815 L1196.17 681.815 L1195.61 681.815 L1195.05 681.815 L1194.49 681.815 L1193.93 681.815 L1193.37 681.815 L1192.81 681.815 L1192.25 681.815 L1191.7 681.815 L1191.14 681.815 L1190.58 681.815 L1190.02 681.815 L1189.46 681.815 L1188.9 681.815 L1188.34 681.815 L1187.78 681.815 L1187.22 681.815 L1186.66 681.815 L1186.1 681.815 L1185.54 681.815 L1184.98 681.815 L1184.43 681.815 L1183.87 681.815 L1183.31 681.815 L1182.75 681.815 L1182.19 681.815 L1181.63 681.815 L1181.07 681.815 L1180.51 681.815 L1179.95 681.815 L1179.39 681.815 L1178.83 681.815 L1178.27 681.815 L1177.71 681.815 L1177.15 681.815 L1176.6 681.815 L1176.04 681.815 L1175.48 681.815 L1174.92 681.815 L1174.36 681.815 L1173.8 681.815 L1173.24 681.815 L1172.68 681.815 L1172.12 681.815 L1171.56 681.815 L1171 681.815 L1170.44 681.815 L1169.88 681.815 L1169.33 681.815 L1168.77 681.815 L1168.21 681.815 L1167.65 681.815 L1167.09 681.815 L1166.53 681.815 L1165.97 681.815 L1165.41 681.815 L1164.85 681.815 L1164.29 681.815 L1163.73 681.815 L1163.17 681.815 L1162.61 681.815 L1162.05 681.815 L1161.5 681.815 L1160.94 681.815 L1160.38 681.815 L1159.82 681.815 L1159.26 681.815 L1158.7 681.815 L1158.14 681.815 L1157.58 681.815 L1157.02 681.815 L1156.46 681.815 L1155.9 681.815 L1155.34 681.815 L1154.78 681.815 L1154.23 681.815 L1153.67 681.815 L1153.11 681.815 L1152.55 681.815 L1151.99 681.815 L1151.43 681.815 L1150.87 681.815 L1150.31 681.815 L1149.75 681.815 L1149.19 681.815 L1148.63 681.815 L1148.07 681.815 L1147.51 681.815 L1146.96 681.815 L1146.4 681.815 L1145.84 681.815 L1145.28 681.815 L1144.72 681.815 L1144.16 681.815 L1143.6 681.815 L1143.04 681.815 L1142.48 681.815 L1141.92 681.815 L1141.36 681.815 L1140.8 681.815 L1140.24 681.815 L1139.68 681.815 L1139.13 681.815 L1138.57 681.815 L1138.01 681.815 L1137.45 681.815 L1136.89 681.815 L1136.33 681.815 L1135.77 681.815 L1135.21 681.815 L1134.65 681.815 L1134.09 681.815 L1133.53 681.815 L1132.97 681.815 L1132.41 681.815 L1131.86 681.815 L1131.3 681.815 L1130.74 681.815 L1130.18 681.815 L1129.62 681.815 L1129.06 681.815 L1128.5 681.815 L1127.94 681.815 L1127.38 681.815 L1126.82 681.815 L1126.26 681.815 L1125.7 681.815 L1125.14 681.815 L1124.59 681.815 L1124.03 681.815 L1123.47 681.815 L1122.91 681.815 L1122.35 681.815 L1121.79 681.815 L1121.23 681.815 L1120.67 681.815 L1120.11 681.815 L1119.55 681.815 L1118.99 681.815 L1118.43 681.815 L1117.87 681.815 L1117.31 681.815 L1116.76 681.815 L1116.2 681.815 L1115.64 681.815 L1115.08 681.815 L1114.52 681.815 L1113.96 681.815 L1113.4 681.815 L1112.84 681.815 L1112.28 681.815 L1111.72 681.815 L1111.16 681.815 L1110.6 681.815 L1110.04 681.815 L1109.49 681.815 L1108.93 681.815 L1108.37 681.815 L1107.81 681.815 L1107.25 681.815 L1106.69 681.815 L1106.13 681.815 L1105.57 681.815 L1105.01 681.815 L1104.45 681.815 L1103.89 681.815 L1103.33 681.815 L1102.77 681.815 L1102.22 681.815 L1101.66 681.815 L1101.1 681.815 L1100.54 681.815 L1099.98 681.815 L1099.42 681.815 L1098.86 681.815 L1098.3 681.815 L1097.74 681.815 L1097.18 681.815 L1096.62 681.815 L1096.06 681.815 L1095.5 681.815 L1094.94 681.815 L1094.39 681.815 L1093.83 681.815 L1093.27 681.815 L1092.71 681.815 L1092.15 681.815 L1091.59 681.815 L1091.03 681.815 L1090.47 681.815 L1089.91 681.815 L1089.35 681.815 L1088.79 681.815 L1088.23 681.815 L1087.67 681.815 L1087.12 681.815 L1086.56 681.815 L1086 681.815 L1085.44 681.815 L1084.88 681.815 L1084.32 681.815 L1083.76 681.815 L1083.2 681.815 L1082.64 681.815 L1082.08 681.815 L1081.52 681.815 L1080.96 681.815 L1080.4 681.815 L1079.85 681.815 L1079.29 681.815 L1078.73 681.815 L1078.17 681.815 L1077.61 681.815 L1077.05 681.815 L1076.49 681.815 L1075.93 681.815 L1075.37 681.815 L1074.81 681.815 L1074.25 681.815 L1073.69 681.815 L1073.13 681.815 L1072.57 681.815 L1072.02 681.815 L1071.46 681.815 L1070.9 681.815 L1070.34 681.815 L1069.78 681.815 L1069.22 681.815 L1068.66 681.815 L1068.1 681.815 L1067.54 681.815 L1066.98 681.815 L1066.42 681.815 L1065.86 681.815 L1065.3 681.815 L1064.75 681.815 L1064.19 681.815 L1063.63 681.815 L1063.07 681.815 L1062.51 681.815 L1061.95 681.815 L1061.39 681.815 L1060.83 681.815 L1060.27 681.815 L1059.71 681.815 L1059.15 681.815 L1058.59 681.815 L1058.03 681.815 L1057.48 681.815 L1056.92 681.815 L1056.36 681.815 L1055.8 681.815 L1055.24 681.815 L1054.68 681.815 L1054.12 681.815 L1053.56 681.815 L1053 681.815 L1052.44 681.815 L1051.88 681.815 L1051.32 681.815 L1050.76 681.815 L1050.2 681.815 L1049.65 681.815 L1049.09 681.815 L1048.53 681.815 L1047.97 681.815 L1047.41 681.815 L1046.85 681.815 L1046.29 681.815 L1045.73 681.815 L1045.17 681.815 L1044.61 681.815 L1044.05 681.815 L1043.49 681.815 L1042.93 681.815 L1042.38 681.815 L1041.82 681.815 L1041.26 681.815 L1040.7 681.815 L1040.14 681.815 L1039.58 681.815 L1039.02 681.815 L1038.46 681.815 L1037.9 681.815 L1037.34 681.815 L1036.78 681.815 L1036.22 681.815 L1035.66 681.815 L1035.1 681.815 L1034.55 681.815 L1033.99 681.815 L1033.43 681.815 L1032.87 681.815 L1032.31 681.815 L1031.75 681.815 L1031.19 681.815 L1030.63 681.815 L1030.07 681.815 L1029.51 681.815 L1028.95 681.815 L1028.39 681.815 L1027.83 681.815 L1027.28 681.815 L1026.72 681.815 L1026.16 681.815 L1025.6 681.815 L1025.04 681.815 L1024.48 681.815 L1023.92 681.815 L1023.36 681.815 L1022.8 681.815 L1022.24 681.815 L1021.68 681.815 L1021.12 681.815 L1020.56 681.815 L1020.01 681.815 L1019.45 681.815 L1018.89 681.815 L1018.33 681.815 L1017.77 681.815 L1017.21 681.815 L1016.65 681.815 L1016.09 681.815 L1015.53 681.815 L1014.97 681.815 L1014.41 681.815 L1013.85 681.815 L1013.29 681.815 L1012.73 681.815 L1012.18 681.815 L1011.62 681.815 L1011.06 681.815 L1010.5 681.815 L1009.94 681.815 L1009.38 681.815 L1008.82 681.815 L1008.26 681.815 L1007.7 681.815 L1007.14 681.815 L1006.58 681.815 L1006.02 681.815 L1005.46 681.815 L1004.91 681.815 L1004.35 681.815 L1003.79 681.815 L1003.23 681.815 L1002.67 681.815 L1002.11 681.815 L1001.55 681.815 L1000.99 681.815 L1000.43 681.815 L999.872 681.815 L999.313 681.815 L998.754 681.815 L998.194 681.815 L997.635 681.815 L997.076 681.815 L996.517 681.815 L995.957 681.815 L995.398 681.815 L994.839 681.815 L994.28 681.815 L993.72 681.815 L993.161 681.815 L992.602 681.815 L992.043 681.815 L991.483 681.815 L990.924 681.815 L990.365 681.815 L989.806 681.815 L989.246 681.815 L988.687 681.815 L988.128 681.815 L987.569 681.815 L987.009 681.815 L986.45 681.815 L985.891 681.815 L985.332 681.815 L984.772 681.815 L984.213 681.815 L983.654 681.815 L983.095 681.815 L982.535 681.815 L981.976 681.815 L981.417 681.815 L980.858 681.815 L980.298 681.815 L979.739 681.815 L979.18 681.815 L978.621 681.815 L978.061 681.815 L977.502 681.815 L976.943 681.815 L976.384 681.815 L975.824 681.815 L975.265 681.815 L974.706 681.815 L974.147 681.815 L973.587 681.815 L973.028 681.815 L972.469 681.815 L971.91 681.815 L971.35 681.815 L970.791 681.815 L970.232 681.815 L969.673 681.815 L969.113 681.815 L968.554 681.815 L967.995 681.815 L967.436 681.815 L966.876 681.815 L966.317 681.815 L965.758 681.815 L965.199 681.815 L964.639 681.815 L964.08 681.815 L963.521 681.815 L962.962 681.815 L962.402 681.815 L961.843 681.815 L961.284 681.815 L960.725 681.815 L960.165 681.815 L959.606 681.815 L959.047 681.815 L958.488 681.815 L957.928 681.815 L957.369 681.815 L956.81 681.815 L956.251 681.815 L955.691 681.815 L955.132 681.815 L954.573 681.815 L954.014 681.815 L953.454 681.815 L952.895 681.815 L952.336 681.815 L951.777 681.815 L951.217 681.815 L950.658 681.815 L950.099 681.815 L949.54 681.815 L948.98 681.815 L948.421 681.815 L947.862 681.815 L947.303 681.815 L946.743 681.815 L946.184 681.815 L945.625 681.815 L945.066 681.815 L944.506 681.815 L943.947 681.815 L943.388 681.815 L942.829 681.815 L942.269 681.815 L941.71 681.815 L941.151 681.815 L940.592 681.815 L940.032 681.815 L939.473 681.815 L938.914 681.815 L938.355 681.815 L937.795 681.815 L937.236 681.815 L936.677 681.815 L936.118 681.815 L935.558 681.815 L934.999 681.815 L934.44 681.815 L933.881 681.815 L933.321 681.815 L932.762 681.815 L932.203 681.815 L931.644 681.815 L931.084 681.815 L930.525 681.815 L929.966 681.815 L929.406 681.815 L928.847 681.815 L928.288 681.815 L927.729 681.815 L927.169 681.815 L926.61 681.815 L926.051 681.815 L925.492 681.815 L924.932 681.815 L924.373 681.815 L923.814 681.815 L923.255 681.815 L922.695 681.815 L922.136 681.815 L921.577 681.815 L921.018 681.815 L920.458 681.815 L919.899 681.815 L919.34 681.815 L918.781 681.815 L918.221 681.815 L917.662 681.815 L917.103 681.815 L916.544 681.815 L915.984 681.815 L915.425 681.815 L914.866 681.815 L914.307 681.815 L913.747 681.815 L913.188 681.815 L912.629 681.815 L912.07 681.815 L911.51 681.815 L910.951 681.815 L910.392 681.815 L909.833 681.815 L909.273 681.815 L908.714 681.815 L908.155 681.815 L907.596 681.815 L907.036 681.815 L906.477 681.815 L905.918 681.815 L905.359 681.815 L904.799 681.815 L904.24 681.815 L903.681 681.815 L903.122 681.815 L902.562 681.815 L902.003 681.815 L901.444 681.815 L900.885 681.815 L900.325 681.815 L899.766 681.815 L899.207 681.815 L898.648 681.815 L898.088 681.815 L897.529 681.815 L896.97 681.815 L896.411 681.815 L895.851 681.815 L895.292 681.815 L894.733 681.815 L894.174 681.815 L893.614 681.815 L893.055 681.815 L892.496 681.815 L891.937 681.815 L891.377 681.815 L890.818 681.815 L890.259 681.815 L889.7 681.815 L889.14 681.815 L888.581 681.815 L888.022 681.815 L887.463 681.815 L886.903 681.815 L886.344 681.815 L885.785 681.815 L885.226 681.815 L884.666 681.815 L884.107 681.815 L883.548 681.815 L882.989 681.815 L882.429 681.815 L881.87 681.815 L881.311 681.815 L880.752 681.815 L880.192 681.815 L879.633 681.815 L879.074 681.815 L878.515 681.815 L877.955 681.815 L877.396 681.815 L876.837 681.815 L876.278 681.815 L875.718 681.815 L875.159 681.815 L874.6 681.815 L874.041 681.815 L873.481 681.815 L872.922 681.815 L872.363 681.815 L871.804 681.815 L871.244 681.815 L870.685 681.815 L870.126 681.815 L869.567 681.815 L869.007 681.815 L868.448 681.815 L867.889 681.815 L867.33 681.815 L866.77 681.815 L866.211 681.815 L865.652 681.815 L865.093 681.815 L864.533 681.815 L863.974 681.815 L863.415 681.815 L862.856 681.815 L862.296 681.815 L861.737 681.815 L861.178 681.815 L860.619 681.815 L860.059 681.815 L859.5 681.815 L858.941 681.815 L858.382 681.815 L857.822 681.815 L857.263 681.815 L856.704 681.815 L856.145 681.815 L855.585 681.815 L855.026 681.815 L854.467 681.815 L853.908 681.815 L853.348 681.815 L852.789 681.815 L852.23 681.815 L851.671 681.815 L851.111 681.815 L850.552 681.815 L849.993 681.815 L849.434 681.815 L848.874 681.815 L848.315 681.815 L847.756 681.815 L847.197 681.815 L846.637 681.815 L846.078 681.815 L845.519 681.815 L844.96 681.815 L844.4 681.815 L843.841 681.815 L843.282 681.815 L842.723 681.815 L842.163 681.815 L841.604 681.815 L841.045 681.815 L840.486 681.815 L839.926 681.815 L839.367 681.815 L838.808 681.815 L838.249 681.815 L837.689 681.815 L837.13 681.815 L836.571 681.815 L836.012 681.815 L835.452 681.815 L834.893 681.815 L834.334 681.815 L833.775 681.815 L833.215 681.815 L832.656 681.815 L832.097 681.815 L831.538 681.815 L830.978 681.815 L830.419 681.815 L829.86 681.815 L829.301 681.815 L828.741 681.815 L828.182 681.815 L827.623 681.815 L827.064 681.815 L826.504 681.815 L825.945 681.815 L825.386 681.815 L824.827 681.815 L824.267 681.815 L823.708 681.815 L823.149 681.815 L822.59 681.815 L822.03 681.815 L821.471 681.815 L820.912 681.815 L820.353 681.815 L819.793 681.815 L819.234 681.815 L818.675 681.815 L818.116 681.815 L817.556 681.815 L816.997 681.815 L816.438 681.815 L815.879 681.815 L815.319 681.815 L814.76 681.815 L814.201 681.815 L813.642 681.815 L813.082 681.815 L812.523 681.815 L811.964 681.815 L811.405 681.815 L810.845 681.815 L810.286 681.815 L809.727 681.815 L809.168 681.815 L808.608 681.815 L808.049 681.815 L807.49 681.815 L806.931 681.815 L806.371 681.815 L805.812 681.815 L805.253 681.815 L804.693 681.815 L804.134 681.815 L803.575 681.815 L803.016 681.815 L802.456 681.815 L801.897 681.815 L801.338 681.815 L800.779 681.815 L800.219 681.815 L799.66 681.815 L799.101 681.815 L798.542 681.815 L797.982 681.815 L797.423 681.815 L796.864 681.815 L796.305 681.815 L795.745 681.815 L795.186 681.815 L794.627 681.815 L794.068 681.815 L793.508 681.815 L792.949 681.815 L792.39 681.815 L791.831 681.815 L791.271 681.815 L790.712 681.815 L790.153 681.815 L789.594 681.815 L789.034 681.815 L788.475 681.815 L787.916 681.815 L787.357 681.815 L786.797 681.815 L786.238 681.815 L785.679 681.815 L785.12 681.815 L784.56 681.815 L784.001 681.815 L783.442 681.815 L782.883 681.815 L782.323 681.815 L781.764 681.815 L781.205 681.815 L780.646 681.815 L780.086 681.815 L779.527 681.815 L778.968 681.815 L778.409 681.815 L777.849 681.815 L777.29 681.815 L776.731 681.815 L776.172 681.815 L775.612 681.815 L775.053 681.815 L774.494 681.815 L773.935 681.815 L773.375 681.815 L772.816 681.815 L772.257 681.815 L771.698 681.815 L771.138 681.815 L770.579 681.815 L770.02 681.815 L769.461 681.815 L768.901 681.815 L768.342 681.815 L767.783 681.815 L767.224 681.815 L766.664 681.815 L766.105 681.815 L765.546 681.815 L764.987 681.815 L764.427 681.815 L763.868 681.815 L763.309 681.815 L762.75 681.815 L762.19 681.815 L761.631 681.815 L761.072 681.815 L760.513 681.815 L759.953 681.815 L759.394 681.815 L758.835 681.815 L758.276 681.815 L757.716 681.815 L757.157 681.815 L756.598 681.815 L756.039 681.815 L755.479 681.815 L754.92 681.815 L754.361 681.815 L753.802 681.815 L753.242 681.815 L752.683 681.815 L752.124 681.815 L751.565 681.815 L751.005 681.815 L750.446 681.815 L749.887 681.815 L749.328 681.815 L748.768 681.815 L748.209 681.815 L747.65 681.815 L747.091 681.815 L746.531 681.815 L745.972 681.815 L745.413 681.815 L744.854 681.815 L744.294 681.815 L743.735 681.815 L743.176 681.815 L742.617 681.815 L742.057 681.815 L741.498 681.815 L740.939 681.815 L740.38 681.815 L739.82 681.815 L739.261 681.815 L738.702 681.815 L738.143 681.815 L737.583 681.815 L737.024 681.815 L736.465 681.815 L735.906 681.815 L735.346 681.815 L734.787 681.815 L734.228 681.815 L733.669 681.815 L733.109 681.815 L732.55 681.815 L731.991 681.815 L731.432 681.815 L730.872 681.815 L730.313 681.815 L729.754 681.815 L729.195 681.815 L728.635 681.815 L728.076 681.815 L727.517 681.815 L726.958 681.815 L726.398 681.815 L725.839 681.815 L725.28 681.815 L724.721 681.815 L724.161 681.815 L723.602 681.815 L723.043 681.815 L722.484 681.815 L721.924 681.815 L721.365 681.815 L720.806 681.815 L720.247 681.815  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.725 720.806,682.725 721.365,682.725 721.924,682.725 722.484,682.725 723.043,682.725 723.602,682.725 724.161,682.725 724.721,682.725 725.28,682.725 725.839,682.725 726.398,682.725 726.958,682.725 727.517,682.725 728.076,682.725 728.635,682.725 729.195,682.725 729.754,682.725 730.313,682.725 730.872,682.725 731.432,682.725 731.991,682.725 732.55,682.725 733.109,682.725 733.669,682.725 734.228,682.725 734.787,682.725 735.346,682.725 735.906,682.725 736.465,682.725 737.024,682.725 737.583,682.725 738.143,682.725 738.702,682.725 739.261,682.725 739.82,682.725 740.38,682.725 740.939,682.725 741.498,682.725 742.057,682.725 742.617,682.725 743.176,682.725 743.735,682.725 744.294,682.725 744.854,682.725 745.413,682.725 745.972,682.725 746.531,682.725 747.091,682.725 747.65,682.725 748.209,682.725 748.768,682.725 749.328,682.725 749.887,682.725 750.446,682.725 751.005,682.725 751.565,682.725 752.124,682.725 752.683,682.725 753.242,682.725 753.802,682.725 754.361,682.725 754.92,682.725 755.479,682.725 756.039,682.725 756.598,682.725 757.157,682.725 757.716,682.725 758.276,682.725 758.835,682.725 759.394,682.725 759.953,682.725 760.513,682.725 761.072,682.725 761.631,682.725 762.19,682.725 762.75,682.725 763.309,682.725 763.868,682.725 764.427,682.725 764.987,682.725 765.546,682.725 766.105,682.725 766.664,682.725 767.224,682.725 767.783,682.725 768.342,682.725 768.901,682.725 769.461,682.725 770.02,682.725 770.579,682.725 771.138,682.725 771.698,682.725 772.257,682.725 772.816,682.725 773.375,682.725 773.935,682.725 774.494,682.725 775.053,682.725 775.612,682.725 776.172,682.725 776.731,682.725 777.29,682.725 777.849,682.725 778.409,682.725 778.968,682.725 779.527,682.725 780.086,682.725 780.646,682.725 781.205,682.725 781.764,682.725 782.323,682.725 782.883,682.725 783.442,682.725 784.001,682.725 784.56,682.725 785.12,682.725 785.679,682.725 786.238,682.725 786.797,682.725 787.357,682.725 787.916,682.725 788.475,682.725 789.034,682.725 789.594,682.725 790.153,682.725 790.712,682.725 791.271,682.725 791.831,682.725 792.39,682.725 792.949,682.725 793.508,682.725 794.068,682.725 794.627,682.725 795.186,682.725 795.745,682.725 796.305,682.725 796.864,682.725 797.423,682.725 797.982,682.725 798.542,682.725 799.101,682.725 799.66,682.725 800.219,682.725 800.779,682.725 801.338,682.725 801.897,682.725 802.456,682.725 803.016,682.725 803.575,682.725 804.134,682.725 804.693,682.725 805.253,682.725 805.812,682.725 806.371,682.725 806.931,682.725 807.49,682.725 808.049,682.725 808.608,682.725 809.168,682.725 809.727,682.725 810.286,682.725 810.845,682.725 811.405,682.725 811.964,682.725 812.523,682.725 813.082,682.725 813.642,682.725 814.201,682.725 814.76,682.725 815.319,682.725 815.879,682.725 816.438,682.725 816.997,682.725 817.556,682.725 818.116,682.725 818.675,682.725 819.234,682.725 819.793,682.725 820.353,682.725 820.912,682.725 821.471,682.725 822.03,682.725 822.59,682.725 823.149,682.725 823.708,682.725 824.267,682.725 824.827,682.725 825.386,682.725 825.945,682.725 826.504,682.725 827.064,682.725 827.623,682.725 828.182,682.725 828.741,682.725 829.301,682.725 829.86,682.725 830.419,682.725 830.978,682.725 831.538,682.725 832.097,682.725 832.656,682.725 833.215,682.725 833.775,682.725 834.334,682.725 834.893,682.725 835.452,682.725 836.012,682.725 836.571,682.725 837.13,682.725 837.689,682.725 838.249,682.725 838.808,682.725 839.367,682.725 839.926,682.725 840.486,682.725 841.045,682.725 841.604,682.725 842.163,682.725 842.723,682.725 843.282,682.725 843.841,682.725 844.4,682.725 844.96,682.725 845.519,682.725 846.078,682.725 846.637,682.725 847.197,682.725 847.756,682.725 848.315,682.725 848.874,682.725 849.434,682.725 849.993,682.725 850.552,682.725 851.111,682.725 851.671,682.725 852.23,682.725 852.789,682.725 853.348,682.725 853.908,682.725 854.467,682.725 855.026,682.725 855.585,682.725 856.145,682.725 856.704,682.725 857.263,682.725 857.822,682.725 858.382,682.725 858.941,682.725 859.5,682.725 860.059,682.725 860.619,682.725 861.178,682.725 861.737,682.725 862.296,682.725 862.856,682.725 863.415,682.725 863.974,682.725 864.533,682.725 865.093,682.725 865.652,682.725 866.211,682.725 866.77,682.725 867.33,682.725 867.889,682.725 868.448,682.725 869.007,682.725 869.567,682.725 870.126,682.725 870.685,682.725 871.244,682.725 871.804,682.725 872.363,682.725 872.922,682.725 873.481,682.725 874.041,682.725 874.6,682.725 875.159,682.725 875.718,682.725 876.278,682.725 876.837,682.725 877.396,682.725 877.955,682.725 878.515,682.725 879.074,682.725 879.633,682.725 880.192,682.725 880.752,682.725 881.311,682.725 881.87,682.725 882.429,682.725 882.989,682.725 883.548,682.725 884.107,682.725 884.666,682.725 885.226,682.725 885.785,682.725 886.344,682.725 886.903,682.725 887.463,682.725 888.022,682.725 888.581,682.725 889.14,682.725 889.7,682.725 890.259,682.725 890.818,682.725 891.377,682.725 891.937,682.725 892.496,682.725 893.055,682.725 893.614,682.725 894.174,682.725 894.733,682.725 895.292,682.725 895.851,682.725 896.411,682.725 896.97,682.725 897.529,682.725 898.088,682.725 898.648,682.725 899.207,682.725 899.766,682.725 900.325,682.725 900.885,682.725 901.444,682.725 902.003,682.725 902.562,682.725 903.122,682.725 903.681,682.725 904.24,682.725 904.799,682.725 905.359,682.725 905.918,682.725 906.477,682.725 907.036,682.725 907.596,682.725 908.155,682.725 908.714,682.725 909.273,682.725 909.833,682.725 910.392,682.725 910.951,682.725 911.51,682.725 912.07,682.725 912.629,682.725 913.188,682.725 913.747,682.725 914.307,682.725 914.866,682.725 915.425,682.725 915.984,682.725 916.544,682.725 917.103,682.725 917.662,682.725 918.221,682.725 918.781,682.725 919.34,682.725 919.899,682.725 920.458,682.725 921.018,682.725 921.577,682.725 922.136,682.725 922.695,682.725 923.255,682.725 923.814,682.725 924.373,682.725 924.932,682.725 925.492,682.725 926.051,682.725 926.61,682.725 927.169,682.725 927.729,682.725 928.288,682.725 928.847,682.725 929.406,682.725 929.966,682.725 930.525,682.725 931.084,682.725 931.644,682.725 932.203,682.725 932.762,682.725 933.321,682.725 933.881,682.725 934.44,682.725 934.999,682.725 935.558,682.725 936.118,682.725 936.677,682.725 937.236,682.725 937.795,682.725 938.355,682.725 938.914,682.725 939.473,682.725 940.032,682.725 940.592,682.725 941.151,682.725 941.71,682.725 942.269,682.725 942.829,682.725 943.388,682.725 943.947,682.725 944.506,682.725 945.066,682.725 945.625,682.725 946.184,682.725 946.743,682.725 947.303,682.725 947.862,682.725 948.421,682.725 948.98,682.725 949.54,682.725 950.099,682.725 950.658,682.725 951.217,682.725 951.777,682.725 952.336,682.725 952.895,682.725 953.454,682.725 954.014,682.725 954.573,682.725 955.132,682.725 955.691,682.725 956.251,682.725 956.81,682.725 957.369,682.725 957.928,682.725 958.488,682.725 959.047,682.725 959.606,682.725 960.165,682.725 960.725,682.725 961.284,682.725 961.843,682.725 962.402,682.725 962.962,682.725 963.521,682.725 964.08,682.725 964.639,682.725 965.199,682.725 965.758,682.725 966.317,682.725 966.876,682.725 967.436,682.725 967.995,682.725 968.554,682.725 969.113,682.725 969.673,682.725 970.232,682.725 970.791,682.725 971.35,682.725 971.91,682.725 972.469,682.725 973.028,682.725 973.587,682.725 974.147,682.725 974.706,682.725 975.265,682.725 975.824,682.725 976.384,682.725 976.943,682.725 977.502,682.725 978.061,682.725 978.621,682.725 979.18,682.725 979.739,682.725 980.298,682.725 980.858,682.725 981.417,682.725 981.976,682.725 982.535,682.725 983.095,682.725 983.654,682.725 984.213,682.725 984.772,682.725 985.332,682.725 985.891,682.725 986.45,682.725 987.009,682.725 987.569,682.725 988.128,682.725 988.687,682.725 989.246,682.725 989.806,682.725 990.365,682.725 990.924,682.725 991.483,682.725 992.043,682.725 992.602,682.725 993.161,682.725 993.72,682.725 994.28,682.725 994.839,682.725 995.398,682.725 995.957,682.725 996.517,682.725 997.076,682.725 997.635,682.725 998.194,682.725 998.754,682.725 999.313,682.725 999.872,682.725 1000.43,682.725 1000.99,682.725 1001.55,682.725 1002.11,682.725 1002.67,682.725 1003.23,682.725 1003.79,682.725 1004.35,682.725 1004.91,682.725 1005.46,682.725 1006.02,682.725 1006.58,682.725 1007.14,682.725 1007.7,682.725 1008.26,682.725 1008.82,682.725 1009.38,682.725 1009.94,682.725 1010.5,682.725 1011.06,682.725 1011.62,682.725 1012.18,682.725 1012.73,682.725 1013.29,682.725 1013.85,682.725 1014.41,682.725 1014.97,682.725 1015.53,682.725 1016.09,682.725 1016.65,682.725 1017.21,682.725 1017.77,682.725 1018.33,682.725 1018.89,682.725 1019.45,682.725 1020.01,682.725 1020.56,682.725 1021.12,682.725 1021.68,682.725 1022.24,682.725 1022.8,682.725 1023.36,682.725 1023.92,682.725 1024.48,682.725 1025.04,682.725 1025.6,682.725 1026.16,682.725 1026.72,682.725 1027.28,682.725 1027.83,682.725 1028.39,682.725 1028.95,682.725 1029.51,682.725 1030.07,682.725 1030.63,682.725 1031.19,682.725 1031.75,682.725 1032.31,682.725 1032.87,682.725 1033.43,682.725 1033.99,682.725 1034.55,682.725 1035.1,682.725 1035.66,682.725 1036.22,682.725 1036.78,682.725 1037.34,682.725 1037.9,682.725 1038.46,682.725 1039.02,682.725 1039.58,682.725 1040.14,682.725 1040.7,682.725 1041.26,682.725 1041.82,682.725 1042.38,682.725 1042.93,682.725 1043.49,682.725 1044.05,682.725 1044.61,682.725 1045.17,682.725 1045.73,682.725 1046.29,682.725 1046.85,682.725 1047.41,682.725 1047.97,682.725 1048.53,682.725 1049.09,682.725 1049.65,682.725 1050.2,682.725 1050.76,682.725 1051.32,682.725 1051.88,682.725 1052.44,682.725 1053,682.725 1053.56,682.725 1054.12,682.725 1054.68,682.725 1055.24,682.725 1055.8,682.725 1056.36,682.725 1056.92,682.725 1057.48,682.725 1058.03,682.725 1058.59,682.725 1059.15,682.725 1059.71,682.725 1060.27,682.725 1060.83,682.725 1061.39,682.725 1061.95,682.725 1062.51,682.725 1063.07,682.725 1063.63,682.725 1064.19,682.725 1064.75,682.725 1065.3,682.725 1065.86,682.725 1066.42,682.725 1066.98,682.725 1067.54,682.725 1068.1,682.725 1068.66,682.725 1069.22,682.725 1069.78,682.725 1070.34,682.725 1070.9,682.725 1071.46,682.725 1072.02,682.725 1072.57,682.725 1073.13,682.725 1073.69,682.725 1074.25,682.725 1074.81,682.725 1075.37,682.725 1075.93,682.725 1076.49,682.725 1077.05,682.725 1077.61,682.725 1078.17,682.725 1078.73,682.725 1079.29,682.725 1079.85,682.725 1080.4,682.725 1080.96,682.725 1081.52,682.725 1082.08,682.725 1082.64,682.725 1083.2,682.725 1083.76,682.725 1084.32,682.725 1084.88,682.725 1085.44,682.725 1086,682.725 1086.56,682.725 1087.12,682.725 1087.67,682.725 1088.23,682.725 1088.79,682.725 1089.35,682.725 1089.91,682.725 1090.47,682.725 1091.03,682.725 1091.59,682.725 1092.15,682.725 1092.71,682.725 1093.27,682.725 1093.83,682.725 1094.39,682.725 1094.94,682.725 1095.5,682.725 1096.06,682.725 1096.62,682.725 1097.18,682.725 1097.74,682.725 1098.3,682.725 1098.86,682.725 1099.42,682.725 1099.98,682.725 1100.54,682.725 1101.1,682.725 1101.66,682.725 1102.22,682.725 1102.77,682.725 1103.33,682.725 1103.89,682.725 1104.45,682.725 1105.01,682.725 1105.57,682.725 1106.13,682.725 1106.69,682.725 1107.25,682.725 1107.81,682.725 1108.37,682.725 1108.93,682.725 1109.49,682.725 1110.04,682.725 1110.6,682.725 1111.16,682.725 1111.72,682.725 1112.28,682.725 1112.84,682.725 1113.4,682.725 1113.96,682.725 1114.52,682.725 1115.08,682.725 1115.64,682.725 1116.2,682.725 1116.76,682.725 1117.31,682.725 1117.87,682.725 1118.43,682.725 1118.99,682.725 1119.55,682.725 1120.11,682.725 1120.67,682.725 1121.23,682.725 1121.79,682.725 1122.35,682.725 1122.91,682.725 1123.47,682.725 1124.03,682.725 1124.59,682.725 1125.14,682.725 1125.7,682.725 1126.26,682.725 1126.82,682.725 1127.38,682.725 1127.94,682.725 1128.5,682.725 1129.06,682.725 1129.62,682.725 1130.18,682.725 1130.74,682.725 1131.3,682.725 1131.86,682.725 1132.41,682.725 1132.97,682.725 1133.53,682.725 1134.09,682.725 1134.65,682.725 1135.21,682.725 1135.77,682.725 1136.33,682.725 1136.89,682.725 1137.45,682.725 1138.01,682.725 1138.57,682.725 1139.13,682.725 1139.68,682.725 1140.24,682.725 1140.8,682.725 1141.36,682.725 1141.92,682.725 1142.48,682.725 1143.04,682.725 1143.6,682.725 1144.16,682.725 1144.72,682.725 1145.28,682.725 1145.84,682.725 1146.4,682.725 1146.96,682.725 1147.51,682.725 1148.07,682.725 1148.63,682.725 1149.19,682.725 1149.75,682.725 1150.31,682.725 1150.87,682.725 1151.43,682.725 1151.99,682.725 1152.55,682.725 1153.11,682.725 1153.67,682.725 1154.23,682.725 1154.78,682.725 1155.34,682.725 1155.9,682.725 1156.46,682.725 1157.02,682.725 1157.58,682.725 1158.14,682.725 1158.7,682.725 1159.26,682.725 1159.82,682.725 1160.38,682.725 1160.94,682.725 1161.5,682.725 1162.05,682.725 1162.61,682.725 1163.17,682.725 1163.73,682.725 1164.29,682.725 1164.85,682.725 1165.41,682.725 1165.97,682.725 1166.53,682.725 1167.09,682.725 1167.65,682.725 1168.21,682.725 1168.77,682.725 1169.33,682.725 1169.88,682.725 1170.44,682.725 1171,682.725 1171.56,682.725 1172.12,682.725 1172.68,682.725 1173.24,682.725 1173.8,682.725 1174.36,682.725 1174.92,682.725 1175.48,682.725 1176.04,682.725 1176.6,682.725 1177.15,682.725 1177.71,682.725 1178.27,682.725 1178.83,682.725 1179.39,682.725 1179.95,682.725 1180.51,682.725 1181.07,682.725 1181.63,682.725 1182.19,682.725 1182.75,682.725 1183.31,682.725 1183.87,682.725 1184.43,682.725 1184.98,682.725 1185.54,682.725 1186.1,682.725 1186.66,682.725 1187.22,682.725 1187.78,682.725 1188.34,682.725 1188.9,682.725 1189.46,682.725 1190.02,682.725 1190.58,682.725 1191.14,682.725 1191.7,682.725 1192.25,682.725 1192.81,682.725 1193.37,682.725 1193.93,682.725 1194.49,682.725 1195.05,682.725 1195.61,682.725 1196.17,682.725 1196.73,682.725 1197.29,682.725 1197.85,682.725 1198.41,682.725 1198.97,682.725 1199.52,682.725 1200.08,682.725 1200.64,682.725 1201.2,682.725 1201.76,682.725 1202.32,682.725 1202.88,682.725 1203.44,682.725 1204,682.725 1204.56,682.725 1205.12,682.725 1205.68,682.725 1206.24,682.725 1206.8,682.725 1207.35,682.725 1207.91,682.725 1208.47,682.725 1209.03,682.725 1209.59,682.725 1210.15,682.725 1210.71,682.725 1211.27,682.725 1211.83,682.725 1212.39,682.725 1212.95,682.725 1213.51,682.725 1214.07,682.725 1214.62,682.725 1215.18,682.725 1215.74,682.725 1216.3,682.725 1216.86,682.725 1217.42,682.725 1217.98,682.725 1218.54,682.725 1219.1,682.725 1219.66,682.725 1220.22,682.725 1220.78,682.725 1221.34,682.725 1221.89,682.725 1222.45,682.725 1223.01,682.725 1223.57,682.725 1224.13,682.725 1224.69,682.725 1225.25,682.725 1225.81,682.725 1226.37,682.725 1226.93,682.725 1227.49,682.725 1228.05,682.725 1228.61,682.725 1229.17,682.725 1229.72,682.725 1230.28,682.725 1230.84,682.725 1231.4,682.725 1231.96,682.725 1232.52,682.725 1233.08,682.725 1233.64,682.725 1234.2,682.725 1234.76,682.725 1235.32,682.725 1235.88,682.725 1236.44,682.725 1236.99,682.725 1237.55,682.725 1238.11,682.725 1238.67,682.725 1239.23,682.725 1239.79,682.725 1240.35,682.725 1240.91,682.725 1241.47,682.725 1242.03,682.725 1242.59,682.725 1243.15,682.725 1243.71,682.725 1244.26,682.725 1244.82,682.725 1245.38,682.725 1245.94,682.725 1246.5,682.725 1247.06,682.725 1247.62,682.725 1248.18,682.725 1248.74,682.725 1249.3,682.725 1249.86,682.725 1250.42,682.725 1250.98,682.725 1251.54,682.725 1252.09,682.725 1252.65,682.725 1253.21,682.725 1253.77,682.725 1254.33,682.725 1254.89,682.725 1255.45,682.725 1256.01,682.725 1256.57,682.725 1257.13,682.725 1257.69,682.725 1258.25,682.725 1258.81,682.725 1259.36,682.725 1259.92,682.725 1260.48,682.725 1261.04,682.725 1261.6,682.725 1262.16,682.725 1262.72,682.725 1263.28,682.725 1263.84,682.725 1264.4,682.725 1264.96,682.725 1265.52,682.725 1266.08,682.725 1266.63,682.725 1267.19,682.725 1267.75,682.725 1268.31,682.725 1268.87,682.725 1269.43,682.725 1269.99,682.725 1270.55,682.725 1271.11,682.725 1271.67,682.725 1272.23,682.725 1272.79,682.725 1273.35,682.725 1273.91,682.725 1274.46,682.725 1275.02,682.725 1275.58,682.725 1276.14,682.725 1276.7,682.725 1277.26,682.725 1277.82,682.725 1278.38,682.725 1278.94,682.725 1279.5,682.725 1280.06,682.725 1280.62,682.725 1281.18,682.725 1281.73,682.725 1282.29,682.725 1282.85,682.725 1283.41,682.725 1283.97,682.725 1284.53,682.725 1285.09,682.725 1285.65,682.725 1286.21,682.725 1286.77,682.725 1287.33,682.725 1287.89,682.725 1288.45,682.725 1289,682.725 1289.56,682.725 1290.12,682.725 1290.68,682.725 1291.24,682.725 1291.8,682.725 1292.36,682.725 1292.92,682.725 1293.48,682.725 1294.04,682.725 1294.6,682.725 1295.16,682.725 1295.72,682.725 1296.28,682.725 1296.83,682.725 1297.39,682.725 1297.95,682.725 1298.51,682.725 1299.07,682.725 1299.63,682.725 1300.19,682.725 1300.75,682.725 1301.31,682.725 1301.87,682.725 1302.43,682.725 1302.99,682.725 1303.55,682.725 1304.1,682.725 1304.66,682.725 1305.22,682.725 1305.78,682.725 1306.34,682.725 1306.9,682.725 1307.46,682.725 1308.02,682.725 1308.58,682.725 1309.14,682.725 1309.7,682.725 1310.26,682.725 1310.82,682.725 1311.38,682.725 1311.93,682.725 1312.49,682.725 1313.05,682.725 1313.61,682.725 1314.17,682.725 1314.73,682.725 1315.29,682.725 1315.85,682.725 1316.41,682.725 1316.97,682.725 1317.53,682.725 1318.09,682.725 1318.65,682.725 1319.2,682.725 1319.76,682.725 1320.32,682.725 1320.88,682.725 1321.44,682.725 1322,682.725 1322.56,682.725 1323.12,682.725 1323.68,682.725 1324.24,682.725 1324.8,682.725 1325.36,682.725 1325.92,682.725 1326.47,682.725 1327.03,682.725 1327.59,682.725 1328.15,682.725 1328.71,682.725 1329.27,682.725 1329.83,682.725 1330.39,682.725 1330.95,682.725 1331.51,682.725 1332.07,682.725 1332.63,682.725 1333.19,682.725 1333.75,682.725 1334.3,682.725 1334.86,682.725 1335.42,682.725 1335.98,682.725 1336.54,682.725 1337.1,682.725 1337.66,682.725 1338.22,682.725 1338.78,682.725 1339.34,682.725 1339.9,682.725 1340.46,682.725 1341.02,682.725 1341.57,682.725 1342.13,682.725 1342.69,682.725 1343.25,682.725 1343.81,682.725 1344.37,682.725 1344.93,682.725 1345.49,682.725 1346.05,682.725 1346.61,682.725 1347.17,682.725 1347.73,682.725 1348.29,682.725 1348.84,682.725 1349.4,682.725 1349.96,682.725 1350.52,682.725 1351.08,682.725 1351.64,682.725 1352.2,682.725 1352.76,682.725 1353.32,682.725 1353.88,682.725 1354.44,682.725 1355,682.725 1355.56,682.725 1356.12,682.725 1356.67,682.725 1357.23,682.725 1357.79,682.725 1358.35,682.725 1358.91,682.725 1359.47,682.725 1360.03,682.725 1360.59,682.725 1361.15,682.725 1361.71,682.725 1362.27,682.725 1362.83,682.725 1363.39,682.725 1363.94,682.725 1364.5,682.725 1365.06,682.725 1365.62,682.725 1366.18,682.725 1366.74,682.725 1367.3,682.725 1367.86,682.725 1368.42,682.725 1368.98,682.725 1369.54,682.725 1370.1,682.725 1370.66,682.725 1371.21,682.725 1371.77,682.725 1372.33,682.725 1372.89,682.725 1373.45,682.725 1374.01,682.725 1374.57,682.725 1375.13,682.725 1375.69,682.725 1376.25,682.725 1376.81,682.725 1377.37,682.725 1377.93,682.725 1378.49,682.725 1379.04,682.725 1379.6,682.725 1380.16,682.725 1380.72,682.725 1381.28,682.725 1381.84,682.725 1382.4,682.725 1382.96,682.725 1383.52,682.725 1384.08,682.725 1384.64,682.725 1385.2,682.725 1385.76,682.725 1386.31,682.725 1386.87,682.725 1387.43,682.725 1387.99,682.725 1388.55,682.725 1389.11,682.725 1389.67,682.725 1390.23,682.725 1390.79,682.725 1391.35,682.725 1391.91,682.725 1392.47,682.725 1393.03,682.725 1393.58,682.725 1394.14,682.725 1394.7,682.725 1395.26,682.725 1395.82,682.725 1396.38,682.725 1396.94,682.725 1397.5,682.725 1398.06,682.725 1398.62,682.725 1399.18,682.725 1399.74,682.725 1400.3,682.725 1400.86,682.725 1401.41,682.725 1401.97,682.725 1402.53,682.725 1403.09,682.725 1403.65,682.725 1404.21,682.725 1404.77,682.725 1405.33,682.725 1405.89,682.725 1406.45,682.725 1407.01,682.725 1407.57,682.725 1408.13,682.725 1408.68,682.725 1409.24,682.725 1409.8,682.725 1410.36,682.725 1410.92,682.725 1411.48,682.725 1412.04,682.725 1412.6,682.725 1413.16,682.725 1413.72,682.725 1414.28,682.725 1414.84,682.725 1415.4,682.725 1415.95,682.725 1416.51,682.725 1417.07,682.725 1417.63,682.725 1418.19,682.725 1418.75,682.725 1419.31,682.725 1419.87,682.725 1420.43,682.725 1420.99,682.725 1421.55,682.725 1422.11,682.725 1422.67,682.725 1423.23,682.725 1423.78,682.725 1424.34,682.725 1424.9,682.725 1425.46,682.725 1426.02,682.725 1426.58,682.725 1427.14,682.725 1427.7,682.725 1428.26,682.725 1428.82,682.725 1429.38,682.725 1429.94,682.725 1430.5,682.725 1431.05,682.725 1431.61,682.725 1432.17,682.725 1432.73,682.725 1433.29,682.725 1433.85,682.725 1434.41,682.725 1434.97,682.725 1435.53,682.725 1436.09,682.725 1436.65,682.725 1437.21,682.725 1437.77,682.725 1438.33,682.725 1438.88,682.725 1439.44,682.725 1440,682.725 1440.56,682.725 1441.12,682.725 1441.68,682.725 1442.24,682.725 1442.8,682.725 1443.36,682.725 1443.92,682.725 1444.48,682.725 1445.04,682.725 1445.6,682.725 1446.15,682.725 1446.71,682.725 1447.27,682.725 1447.83,682.725 1448.39,682.725 1448.95,682.725 1449.51,682.725 1450.07,682.725 1450.63,682.725 1451.19,682.725 1451.75,682.725 1452.31,682.725 1452.87,682.725 1453.42,682.725 1453.98,682.725 1454.54,682.725 1455.1,682.725 1455.66,682.725 1456.22,682.725 1456.78,682.725 1457.34,682.725 1457.9,682.725 1458.46,682.725 1459.02,682.725 1459.58,682.725 1460.14,682.725 1460.7,682.725 1461.25,682.725 1461.81,682.725 1462.37,682.725 1462.93,682.725 1463.49,682.725 1464.05,682.725 1464.61,682.725 1465.17,682.725 1465.73,682.725 1466.29,682.725 1466.85,682.725 1467.41,682.725 1467.97,682.725 1468.52,682.725 1469.08,682.725 1469.64,682.725 1470.2,682.725 1470.76,682.725 1471.32,682.725 1471.88,682.725 1472.44,682.725 1473,682.725 1473.56,682.725 1474.12,682.725 1474.68,682.725 1475.24,682.725 1475.79,682.725 1476.35,682.725 1476.91,682.725 1477.47,682.725 1478.03,682.725 1478.59,682.725 1479.15,682.725 1479.71,682.725 1480.27,682.725 1480.83,682.725 1481.39,682.725 1481.95,682.725 1482.51,682.725 1483.07,682.725 1483.62,682.725 1484.18,682.725 1484.74,682.725 1485.3,682.725 1485.86,682.725 1486.42,682.725 1486.98,682.725 1487.54,682.725 1488.1,682.725 1488.66,682.725 1489.22,682.725 1489.78,682.725 1490.34,682.725 1490.89,682.725 1491.45,682.725 1492.01,682.725 1492.57,682.725 1493.13,682.725 1493.69,682.725 1494.25,682.725 1494.81,682.725 1495.37,682.725 1495.93,682.725 1496.49,682.725 1497.05,682.725 1497.61,682.725 1498.16,682.725 1498.72,682.725 1499.28,682.725 1499.84,682.725 1500.4,682.725 1500.96,682.725 1501.52,682.725 1502.08,682.725 1502.64,682.725 1503.2,682.725 1503.76,682.725 1504.32,682.725 1504.88,682.725 1505.44,682.725 1505.99,682.725 1506.55,682.725 1507.11,682.725 1507.67,682.725 1508.23,682.725 1508.79,682.725 1509.35,682.725 1509.91,682.725 1510.47,682.725 1511.03,682.725 1511.59,682.725 1512.15,682.725 1512.71,682.725 1513.26,682.725 1513.82,682.725 1514.38,682.725 1514.94,682.725 1515.5,682.725 1516.06,682.725 1516.62,682.725 1517.18,682.725 1517.74,682.725 1518.3,682.725 1518.86,682.725 1519.42,682.725 1519.98,682.725 1520.53,682.725 1521.09,682.725 1521.65,682.725 1522.21,682.725 1522.77,682.725 1523.33,682.725 1523.89,682.725 1524.45,682.725 1525.01,682.725 1525.57,682.725 1526.13,682.725 1526.69,682.725 1527.25,682.725 1527.81,682.725 1528.36,682.725 1528.92,682.725 1529.48,682.725 1530.04,682.725 1530.6,682.725 1531.16,682.725 1531.72,682.725 1532.28,682.725 1532.84,682.725 1533.4,682.725 1533.96,682.725 1534.52,682.725 1535.08,682.725 1535.63,682.725 1536.19,682.725 1536.75,682.725 1537.31,682.725 1537.87,682.725 1538.43,682.725 1538.99,682.725 1539.55,682.725 1540.11,682.725 1540.67,682.725 1541.23,682.725 1541.79,682.725 1542.35,682.725 1542.9,682.725 1543.46,682.725 1544.02,682.725 1544.58,682.725 1545.14,682.725 1545.7,682.725 1546.26,682.725 1546.82,682.725 1547.38,682.725 1547.94,682.725 1548.5,682.725 1549.06,682.725 1549.62,682.725 1550.18,682.725 1550.73,682.725 1551.29,682.725 1551.85,682.725 1552.41,682.725 1552.97,682.725 1553.53,682.725 1554.09,682.725 1554.65,682.725 1555.21,682.725 1555.77,682.725 1556.33,682.725 1556.89,682.725 1557.45,682.725 1558,682.725 1558.56,682.725 1559.12,682.725 1559.68,682.725 1560.24,682.725 1560.8,682.725 1561.36,682.725 1561.92,682.725 1562.48,682.725 1563.04,682.725 1563.6,682.725 1564.16,682.725 1564.72,682.725 1565.28,682.725 1565.83,682.725 1566.39,682.725 1566.95,682.725 1567.51,682.725 1568.07,682.725 1568.63,682.725 1569.19,682.725 1569.75,682.725 1570.31,682.725 1570.87,682.725 1571.43,682.725 1571.99,682.725 1572.55,682.725 1573.1,682.725 1573.66,682.725 1574.22,682.725 1574.78,682.725 1575.34,682.725 1575.9,682.725 1576.46,682.725 1577.02,682.725 1577.58,682.725 1578.14,682.725 1578.7,682.725 1579.26,682.725 1579.82,682.725 1580.37,682.725 1580.93,682.725 1581.49,682.725 1582.05,682.725 1582.61,682.725 1583.17,682.725 1583.73,682.725 1584.29,682.725 1584.85,682.725 1585.41,682.725 1585.97,682.725 1586.53,682.725 1587.09,682.725 1587.65,682.725 1588.2,682.725 1588.76,682.725 1589.32,682.725 1589.88,682.725 1590.44,682.725 1591,682.725 1591.56,682.725 1592.12,682.725 1592.68,682.725 1593.24,682.725 1593.8,682.725 1594.36,682.725 1594.92,682.725 1595.47,682.725 1596.03,682.725 1596.59,682.725 1597.15,682.725 1597.71,682.725 1598.27,682.725 1598.83,682.725 1599.39,682.725 1599.95,682.725 1600.51,682.725 1601.07,682.725 1601.63,682.725 1602.19,682.725 1602.74,682.725 1603.3,682.725 1603.86,682.725 1604.42,682.725 1604.98,682.725 1605.54,682.725 1606.1,682.725 1606.66,682.725 1607.22,682.725 1607.78,682.725 1608.34,682.725 1608.9,682.725 1609.46,682.725 1610.02,682.725 1610.57,682.725 1611.13,682.725 1611.69,682.725 1612.25,682.725 1612.81,682.725 1613.37,682.725 1613.93,682.725 1614.49,682.725 1615.05,682.725 1615.61,682.725 1616.17,682.725 1616.73,682.725 1617.29,682.725 1617.84,682.725 1618.4,682.725 1618.96,682.725 1619.52,682.725 1620.08,682.725 1620.64,682.725 1621.2,682.725 1621.76,682.725 1622.32,682.725 1622.88,682.725 1623.44,682.725 1624,682.725 1624.56,682.725 1625.11,682.725 1625.67,682.725 1626.23,682.725 1626.79,682.725 1627.35,682.725 1627.91,682.725 1628.47,682.725 1629.03,682.725 1629.59,682.725 1630.15,682.725 1630.71,682.725 1631.27,682.725 1631.83,682.725 1632.39,682.725 1632.94,682.725 1633.5,682.725 1634.06,682.725 1634.62,682.725 1635.18,682.725 1635.74,682.725 1636.3,682.725 1636.86,682.725 1637.42,682.725 1637.98,682.725 1638.54,682.725 1639.1,682.725 1639.66,682.725 1640.21,682.725 1640.77,682.725 1641.33,682.725 1641.89,682.725 1642.45,682.725 1643.01,682.725 1643.57,682.725 1644.13,682.725 1644.69,682.725 1645.25,682.725 1645.81,682.725 1646.37,682.725 1646.93,682.725 1647.48,682.725 1648.04,682.725 1648.6,682.725 1649.16,682.725 1649.72,682.725 1650.28,682.725 1650.84,682.725 1651.4,682.725 1651.96,682.725 1652.52,682.725 1653.08,682.725 1653.64,682.725 1654.2,682.725 1654.76,682.725 1655.31,682.725 1655.87,682.725 1656.43,682.725 1656.99,682.725 1657.55,682.725 1658.11,682.725 1658.67,682.725 1659.23,682.725 1659.79,682.725 1660.35,682.725 1660.91,682.725 1661.47,682.725 1662.03,682.725 1662.58,682.725 1663.14,682.725 1663.7,682.725 1664.26,682.725 1664.82,682.725 1665.38,682.725 1665.94,682.725 1666.5,682.725 1667.06,682.725 1667.62,682.725 1668.18,682.725 1668.74,682.725 1669.3,682.725 1669.85,682.725 1670.41,682.725 1670.97,682.725 1671.53,682.725 1672.09,682.725 1672.65,682.725 1673.21,682.725 1673.77,682.725 1674.33,682.725 1674.89,682.725 1675.45,682.725 1676.01,682.725 1676.57,682.725 1677.13,682.725 1677.68,682.725 1678.24,682.725 1678.8,682.725 1679.36,682.725 1679.92,682.725 1680.48,682.725 1681.04,682.725 1681.6,682.725 1682.16,682.725 1682.72,682.725 1683.28,682.725 1683.84,682.725 1684.4,682.725 1684.95,682.725 1685.51,682.725 1686.07,682.725 1686.63,682.725 1687.19,682.725 1687.75,682.725 1688.31,682.725 1688.87,682.725 1689.43,682.725 1689.99,682.725 1690.55,682.725 1691.11,682.725 1691.67,682.725 1692.23,682.725 1692.78,682.725 1693.34,682.725 1693.9,682.725 1694.46,682.725 1695.02,682.725 1695.58,682.725 1696.14,682.725 1696.7,682.725 1697.26,682.725 1697.82,682.725 1698.38,682.725 1698.94,682.725 1699.5,682.725 1700.05,682.725 1700.61,682.725 1701.17,682.725 1701.73,682.725 1702.29,682.725 1702.85,682.725 1703.41,682.725 1703.97,682.725 1704.53,682.725 1705.09,682.725 1705.65,682.725 1706.21,682.725 1706.77,682.725 1707.32,682.725 1707.88,682.725 1708.44,682.725 1709,682.725 1709.56,682.725 1710.12,682.725 1710.68,682.725 1711.24,682.725 1711.8,682.725 1712.36,682.725 1712.92,682.725 1713.48,682.725 1714.04,682.725 1714.6,682.725 1715.15,682.725 1715.71,682.725 1716.27,682.725 1716.83,682.725 1717.39,682.725 1717.95,682.725 1718.51,682.725 1719.07,682.725 1719.63,682.725 1720.19,682.725 1720.75,682.725 1721.31,682.725 1721.87,682.725 1722.42,682.725 1722.98,682.725 1723.54,682.725 1724.1,682.725 1724.66,682.725 1725.22,682.725 1725.78,682.725 1726.34,682.725 1726.9,682.725 1727.46,682.725 1728.02,682.725 1728.58,682.725 1729.14,682.725 1729.69,682.725 1730.25,682.725 1730.81,682.725 1731.37,682.725 1731.93,682.725 1732.49,682.725 1733.05,682.725 1733.61,682.725 1734.17,682.725 1734.73,682.725 1735.29,682.725 1735.85,682.725 1736.41,682.725 1736.97,682.725 1737.52,682.725 1738.08,682.725 1738.64,682.725 1739.2,682.725 1739.76,682.725 1740.32,682.725 1740.88,682.725 1741.44,682.725 1742,682.725 1742.56,682.725 1743.12,682.725 1743.68,682.725 1744.24,682.725 1744.79,682.725 1745.35,682.725 1745.91,682.725 1746.47,682.725 1747.03,682.725 1747.59,682.725 1748.15,682.725 1748.71,682.725 1749.27,682.725 1749.83,682.725 1750.39,682.725 1750.95,682.725 1751.51,682.725 1752.06,682.725 1752.62,682.725 1753.18,682.725 1753.74,682.725 1754.3,682.725 1754.86,682.725 1755.42,682.725 1755.98,682.725 1756.54,682.725 1757.1,682.725 1757.66,682.725 1758.22,682.725 1758.78,682.725 1759.34,682.725 1759.89,682.725 1760.45,682.725 1761.01,682.725 1761.57,682.725 1762.13,682.725 1762.69,682.725 1763.25,682.725 1763.81,682.725 1764.37,682.725 1764.93,682.725 1765.49,682.725 1766.05,682.725 1766.61,682.725 1767.16,682.725 1767.72,682.725 1768.28,682.725 1768.84,682.725 1769.4,682.725 1769.96,682.725 1770.52,682.725 1771.08,682.725 1771.64,682.725 1772.2,682.725 1772.76,682.725 1773.32,682.725 1773.88,682.725 1774.43,682.725 1774.99,682.725 1775.55,682.725 1776.11,682.725 1776.67,682.725 1777.23,682.725 1777.79,682.725 1778.35,682.725 1778.91,682.725 1779.47,682.725 1780.03,682.725 1780.59,682.725 1781.15,682.725 1781.71,682.725 1782.26,682.725 1782.82,682.725 1783.38,682.725 1783.94,682.725 1784.5,682.725 1785.06,682.725 1785.62,682.725 1786.18,682.725 1786.74,682.725 1787.3,682.725 1787.86,682.725 1788.42,682.725 1788.98,682.725 1789.53,682.725 1790.09,682.725 1790.65,682.725 1791.21,682.725 1791.77,682.725 1792.33,682.725 1792.89,682.725 1793.45,682.725 1794.01,682.725 1794.57,682.725 1795.13,682.725 1795.69,682.725 1796.25,682.725 1796.8,682.725 1797.36,682.725 1797.92,682.725 1798.48,682.725 1799.04,682.725 1799.6,682.725 1800.16,682.725 1800.72,682.725 1801.28,682.725 1801.84,682.725 1802.4,682.725 1802.96,682.725 1803.52,682.725 1804.08,682.725 1804.63,682.725 1805.19,682.725 1805.75,682.725 1806.31,682.725 1806.87,682.725 1807.43,682.725 1807.99,682.725 1808.55,682.725 1809.11,682.725 1809.67,682.725 1810.23,682.725 1810.79,682.725 1811.35,682.725 1811.9,682.725 1812.46,682.725 1813.02,682.725 1813.58,682.725 1814.14,682.725 1814.7,682.725 1815.26,682.725 1815.82,682.725 1816.38,682.725 1816.94,682.725 1817.5,682.725 1818.06,682.725 1818.62,682.725 1819.18,682.725 1819.73,682.725 1820.29,682.725 1820.85,682.725 1821.41,682.725 1821.97,682.725 1822.53,682.725 1823.09,682.725 1823.65,682.725 1824.21,682.725 1824.77,682.725 1825.33,682.725 1825.89,682.725 1826.45,682.725 1827,682.725 1827.56,682.725 1828.12,682.725 1828.68,682.725 1829.24,682.725 1829.8,682.725 1830.36,682.725 1830.92,682.725 1831.48,682.725 1832.04,682.725 1832.6,682.725 1833.16,682.725 1833.72,682.725 1834.27,682.725 1834.83,682.725 1835.39,682.725 1835.95,682.725 1836.51,682.725 1837.07,682.725 1837.63,682.725 1838.19,682.725 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031783529570869 ± 0.02228826666258044\nProjected Energy: -4.0107574413485985 ± (0.004645260633842518, 0.004580941314110021)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.470182</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3054e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.068e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.358e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.202e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.585e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.195e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.36312429161336\n -0.7590191922770835\n  0.13584182219621965\n  0.15789998694608265\n  0.8767114411781485\n  1.5305929970973242\n  1.5835732611867304\n  3.072870330325869\n  3.125672653951832\n  4.862107221562168\n  6.260694850380592\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleReducedDensityMatrix\nTwoParticleReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleReducedDensityMatrix\nTwoParticleReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleReducedDensityMatrix\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleReducedDensityMatrix","text":"SingleParticleReducedDensityMatrix(i, j) <: AbstractHamiltonian\n\nRepresent a {i,j} element of the single-particle reduced density matrix:\n\nhatρ^(1)_ij = langle psi  hat a^_i hat a_j  psi rangle\n\nwhere i and j are the mode and  psi rangle is the state-ket of the given Hamiltonian.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleReducedDensityMatrix\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleReducedDensityMatrix","text":"TwoParticleReducedDensityMatrix(i, j, k, l) <: AbstractHamiltonian\n\nRepresent a {ij, kl} element of the two-particle reduced density matrix:\n\nhatρ^(2)_ij kl = langle psi  hat a^_i hat a^_j hat a_l hat a_k  psi rangle\n\nwhere i, j, k, and l are the mode and  psi rangle is the state-ket of the given Hamiltonian.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleReducedDensityMatrix\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
