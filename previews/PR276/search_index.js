var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21026915583728953 ± 0.00160480864479208\n   G2(1) = 0.9177520608746134 ± 0.000669355419849042\n   G2(2) = 0.9818802096782937 ± 0.000589694360096798\n   G2(3) = 0.9904663030568973 ± 0.0008903509770906598\n   G2(4) = 0.9818802096782937 ± 0.000589694360096798\n   G2(5) = 0.9177520608746134 ± 0.000669355419849042\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.007567950258535 ± 0.14443133006901088\n   Replica 2: -4.096151213332216 ± 0.13880622757464495\n   Replica 3: -4.012507520889219 ± 0.13172060630886048\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip620\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip621\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip622\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.2 2211.02,1003.2 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.574 2211.02,745.574 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.944 2211.02,487.944 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.314 2211.02,230.314 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.2 423.181,1003.2 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.574 423.181,745.574 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.944 423.181,487.944 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.314 423.181,230.314 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M290.043 1016.55 L306.363 1016.55 L306.363 1020.48 L284.418 1020.48 L284.418 1016.55 Q287.08 1013.79 291.664 1009.16 Q296.27 1004.51 297.451 1003.17 Q299.696 1000.65 300.576 998.91 Q301.478 997.151 301.478 995.461 Q301.478 992.706 299.534 990.97 Q297.613 989.234 294.511 989.234 Q292.312 989.234 289.858 989.998 Q287.427 990.762 284.65 992.313 L284.65 987.59 Q287.474 986.456 289.927 985.878 Q292.381 985.299 294.418 985.299 Q299.789 985.299 302.983 987.984 Q306.177 990.669 306.177 995.16 Q306.177 997.289 305.367 999.211 Q304.58 1001.11 302.474 1003.7 Q301.895 1004.37 298.793 1007.59 Q295.691 1010.78 290.043 1016.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M316.224 985.924 L334.58 985.924 L334.58 989.859 L320.506 989.859 L320.506 998.331 Q321.524 997.984 322.543 997.822 Q323.562 997.637 324.58 997.637 Q330.367 997.637 333.747 1000.81 Q337.126 1003.98 337.126 1009.4 Q337.126 1014.97 333.654 1018.08 Q330.182 1021.16 323.862 1021.16 Q321.687 1021.16 319.418 1020.78 Q317.173 1020.41 314.765 1019.67 L314.765 1014.97 Q316.849 1016.11 319.071 1016.66 Q321.293 1017.22 323.77 1017.22 Q327.774 1017.22 330.112 1015.11 Q332.45 1013.01 332.45 1009.4 Q332.45 1005.78 330.112 1003.68 Q327.774 1001.57 323.77 1001.57 Q321.895 1001.57 320.02 1001.99 Q318.168 1002.41 316.224 1003.28 L316.224 985.924 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 989.002 Q352.728 989.002 350.899 992.567 Q349.094 996.109 349.094 1003.24 Q349.094 1010.34 350.899 1013.91 Q352.728 1017.45 356.339 1017.45 Q359.973 1017.45 361.779 1013.91 Q363.608 1010.34 363.608 1003.24 Q363.608 996.109 361.779 992.567 Q359.973 989.002 356.339 989.002 M356.339 985.299 Q362.149 985.299 365.205 989.905 Q368.284 994.489 368.284 1003.24 Q368.284 1011.97 365.205 1016.57 Q362.149 1021.16 356.339 1021.16 Q350.529 1021.16 347.45 1016.57 Q344.395 1011.97 344.395 1003.24 Q344.395 994.489 347.45 989.905 Q350.529 985.299 356.339 985.299 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M286.062 728.294 L304.418 728.294 L304.418 732.229 L290.344 732.229 L290.344 740.701 Q291.363 740.354 292.381 740.192 Q293.4 740.007 294.418 740.007 Q300.205 740.007 303.585 743.178 Q306.964 746.349 306.964 751.766 Q306.964 757.345 303.492 760.446 Q300.02 763.525 293.701 763.525 Q291.525 763.525 289.256 763.155 Q287.011 762.784 284.603 762.044 L284.603 757.345 Q286.687 758.479 288.909 759.034 Q291.131 759.59 293.608 759.59 Q297.613 759.59 299.951 757.484 Q302.288 755.377 302.288 751.766 Q302.288 748.155 299.951 746.048 Q297.613 743.942 293.608 743.942 Q291.733 743.942 289.858 744.359 Q288.006 744.775 286.062 745.655 L286.062 728.294 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M326.177 731.373 Q322.566 731.373 320.737 734.937 Q318.932 738.479 318.932 745.609 Q318.932 752.715 320.737 756.28 Q322.566 759.821 326.177 759.821 Q329.811 759.821 331.617 756.28 Q333.446 752.715 333.446 745.609 Q333.446 738.479 331.617 734.937 Q329.811 731.373 326.177 731.373 M326.177 727.669 Q331.987 727.669 335.043 732.275 Q338.122 736.859 338.122 745.609 Q338.122 754.335 335.043 758.942 Q331.987 763.525 326.177 763.525 Q320.367 763.525 317.288 758.942 Q314.233 754.335 314.233 745.609 Q314.233 736.859 317.288 732.275 Q320.367 727.669 326.177 727.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 731.373 Q352.728 731.373 350.899 734.937 Q349.094 738.479 349.094 745.609 Q349.094 752.715 350.899 756.28 Q352.728 759.821 356.339 759.821 Q359.973 759.821 361.779 756.28 Q363.608 752.715 363.608 745.609 Q363.608 738.479 361.779 734.937 Q359.973 731.373 356.339 731.373 M356.339 727.669 Q362.149 727.669 365.205 732.275 Q368.284 736.859 368.284 745.609 Q368.284 754.335 365.205 758.942 Q362.149 763.525 356.339 763.525 Q350.529 763.525 347.45 758.942 Q344.395 754.335 344.395 745.609 Q344.395 736.859 347.45 732.275 Q350.529 727.669 356.339 727.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M284.835 470.664 L307.057 470.664 L307.057 472.655 L294.511 505.224 L289.627 505.224 L301.432 474.599 L284.835 474.599 L284.835 470.664 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M316.224 470.664 L334.58 470.664 L334.58 474.599 L320.506 474.599 L320.506 483.071 Q321.524 482.724 322.543 482.562 Q323.562 482.377 324.58 482.377 Q330.367 482.377 333.747 485.548 Q337.126 488.719 337.126 494.136 Q337.126 499.715 333.654 502.817 Q330.182 505.895 323.862 505.895 Q321.687 505.895 319.418 505.525 Q317.173 505.154 314.765 504.414 L314.765 499.715 Q316.849 500.849 319.071 501.404 Q321.293 501.96 323.77 501.96 Q327.774 501.96 330.112 499.854 Q332.45 497.747 332.45 494.136 Q332.45 490.525 330.112 488.418 Q327.774 486.312 323.77 486.312 Q321.895 486.312 320.02 486.729 Q318.168 487.145 316.224 488.025 L316.224 470.664 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 473.743 Q352.728 473.743 350.899 477.307 Q349.094 480.849 349.094 487.979 Q349.094 495.085 350.899 498.65 Q352.728 502.192 356.339 502.192 Q359.973 502.192 361.779 498.65 Q363.608 495.085 363.608 487.979 Q363.608 480.849 361.779 477.307 Q359.973 473.743 356.339 473.743 M356.339 470.039 Q362.149 470.039 365.205 474.645 Q368.284 479.229 368.284 487.979 Q368.284 496.705 365.205 501.312 Q362.149 505.895 356.339 505.895 Q350.529 505.895 347.45 501.312 Q344.395 496.705 344.395 487.979 Q344.395 479.229 347.45 474.645 Q350.529 470.039 356.339 470.039 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M256.664 243.659 L264.303 243.659 L264.303 217.293 L255.992 218.96 L255.992 214.701 L264.256 213.034 L268.932 213.034 L268.932 243.659 L276.571 243.659 L276.571 247.594 L256.664 247.594 L256.664 243.659 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M296.015 216.113 Q292.404 216.113 290.576 219.677 Q288.77 223.219 288.77 230.349 Q288.77 237.455 290.576 241.02 Q292.404 244.562 296.015 244.562 Q299.65 244.562 301.455 241.02 Q303.284 237.455 303.284 230.349 Q303.284 223.219 301.455 219.677 Q299.65 216.113 296.015 216.113 M296.015 212.409 Q301.826 212.409 304.881 217.015 Q307.96 221.599 307.96 230.349 Q307.96 239.075 304.881 243.682 Q301.826 248.265 296.015 248.265 Q290.205 248.265 287.127 243.682 Q284.071 239.075 284.071 230.349 Q284.071 221.599 287.127 217.015 Q290.205 212.409 296.015 212.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M326.177 216.113 Q322.566 216.113 320.737 219.677 Q318.932 223.219 318.932 230.349 Q318.932 237.455 320.737 241.02 Q322.566 244.562 326.177 244.562 Q329.811 244.562 331.617 241.02 Q333.446 237.455 333.446 230.349 Q333.446 223.219 331.617 219.677 Q329.811 216.113 326.177 216.113 M326.177 212.409 Q331.987 212.409 335.043 217.015 Q338.122 221.599 338.122 230.349 Q338.122 239.075 335.043 243.682 Q331.987 248.265 326.177 248.265 Q320.367 248.265 317.288 243.682 Q314.233 239.075 314.233 230.349 Q314.233 221.599 317.288 217.015 Q320.367 212.409 326.177 212.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 216.113 Q352.728 216.113 350.899 219.677 Q349.094 223.219 349.094 230.349 Q349.094 237.455 350.899 241.02 Q352.728 244.562 356.339 244.562 Q359.973 244.562 361.779 241.02 Q363.608 237.455 363.608 230.349 Q363.608 223.219 361.779 219.677 Q359.973 216.113 356.339 216.113 M356.339 212.409 Q362.149 212.409 365.205 217.015 Q368.284 221.599 368.284 230.349 Q368.284 239.075 365.205 243.682 Q362.149 248.265 356.339 248.265 Q350.529 248.265 347.45 243.682 Q344.395 239.075 344.395 230.349 Q344.395 221.599 347.45 217.015 Q350.529 212.409 356.339 212.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip622)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.314 4017.76,230.314 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1247.02 459.396,1246.61 459.964,1246.12 460.533,1245.55 461.101,1244.93 461.669,1243.19 462.238,1240.35 462.806,1239.55 463.375,1238.65 463.943,1237.66 464.511,1236.54 465.08,1234.31 465.648,1231.98 466.216,1230.55 466.785,1229.03 467.353,1227.35 467.921,1225.55 468.49,1223.64 469.058,1221.57 469.626,1218.3 470.195,1215.91 470.763,1212.33 471.331,1208.57 471.9,1205.7 472.468,1202.71 473.036,1198.45 473.605,1195.04 474.173,1190.4 474.741,1186.69 475.31,1182.72 475.878,1178.59 476.446,1173.16 477.015,1168.58 477.583,1163.72 478.152,1158.68 478.72,1153.4 479.288,1147.92 479.857,1142.16 480.425,1134.09 480.993,1127.91 481.562,1120.55 482.13,1112.84 482.698,1106.05 483.267,1099.1 483.835,1090.83 484.403,1080.33 484.972,1071.86 485.54,1063.21 486.108,1053.29 486.677,1045.32 487.245,1036.22 487.813,1026.94 488.382,1017.65 488.95,1009.16 489.518,1000.5 490.087,990.713 490.655,978.707 491.224,968.719 491.792,959.72 492.36,948.521 492.929,938.346 493.497,929.062 494.065,915.54 494.634,900.953 495.202,890.582 495.77,880.212 496.339,866.723 496.907,855.463 497.475,842.127 498.044,831.02 498.612,819.942 499.18,807.829 499.749,798.966 500.317,788.945 500.885,779.12 501.454,769.146 502.022,760.122 502.59,748.098 503.159,738.117 503.727,729.189 504.295,718.309 504.864,707.754 505.432,699.364 506.001,687.879 506.569,679.721 507.137,669.68 507.706,659.771 508.274,649.857 508.842,642.12 509.411,634.461 509.979,625.786 510.547,616.267 511.116,608.987 511.684,600.699 512.252,590.473 512.821,582.595 513.389,575.836 513.957,570.221 514.526,559.393 515.094,550.794 515.662,544.524 516.231,537.432 516.799,534.184 517.367,526.785 517.936,519.39 518.504,509.196 519.072,504.731 519.641,498.01 520.209,489.257 520.778,482.897 521.346,477.793 521.914,470.806 522.483,461.8 523.051,456.147 523.619,449.458 524.188,443.15 524.756,437.092 525.324,433.343 525.893,428.393 526.461,424.579 527.029,420.762 527.598,414.864 528.166,409.273 528.734,402.745 529.303,398.43 529.871,395.45 530.439,390.327 531.008,387.228 531.576,383.404 532.144,379.699 532.713,377.045 533.281,374.133 533.85,370.187 534.418,366.432 534.986,361.859 535.555,357.59 536.123,355.293 536.691,353.091 537.26,350.67 537.828,347.37 538.396,345.567 538.965,341.337 539.533,338.383 540.101,336.763 540.67,334.826 541.238,333.024 541.806,329.162 542.375,325.426 542.943,324.236 543.511,323.533 544.08,319.886 544.648,318.422 545.216,316.878 545.785,315.425 546.353,312.783 546.921,308.232 547.49,302.785 548.058,299.782 548.627,299.118 549.195,298.166 549.763,297.413 550.332,295.469 550.9,297.854 551.468,297.029 552.037,295.859 552.605,291.584 553.173,289.613 553.742,285.808 554.31,285.288 554.878,281.776 555.447,280.351 556.015,279.996 556.583,278.697 557.152,278.237 557.72,277.929 558.288,276.679 558.857,277.404 559.425,275.048 559.993,275.75 560.562,275.521 561.13,276.073 561.698,274.448 562.267,271.9 562.835,271.458 563.404,270.138 563.972,269.073 564.54,267.842 565.109,268.708 565.677,268.247 566.245,265.838 566.814,262.7 567.382,262.654 567.95,261.474 568.519,259.439 569.087,256.651 569.655,256.158 570.224,257.608 570.792,257.654 571.36,256.75 571.929,257.077 572.497,257.339 573.065,256.601 573.634,255.667 574.202,253.908 574.77,253.213 575.339,252.551 575.907,254.949 576.476,255.94 577.044,256.014 577.612,257.883 578.181,257.807 578.749,257.616 579.317,256.48 579.886,255.197 580.454,255.213 581.022,253.095 581.591,252.277 582.159,251.278 582.727,248.259 583.296,248.759 583.864,251.19 584.432,248.285 585.001,247.311 585.569,245.631 586.137,244.088 586.706,245.699 587.274,245.963 587.842,245.215 588.411,245.527 588.979,244.891 589.547,246.173 590.116,245.42 590.684,245.468 591.253,247.755 591.821,248.658 592.389,248.656 592.958,247.691 593.526,247.763 594.094,246.907 594.663,246.939 595.231,249.798 595.799,249.746 596.368,250.636 596.936,254.481 597.504,255.85 598.073,256.246 598.641,255.4 599.209,253.779 599.778,254.268 600.346,250.426 600.914,249.632 601.483,247.319 602.051,246.213 602.619,246.099 603.188,244.753 603.756,246.963 604.325,247.841 604.893,247.639 605.461,247.17 606.03,245.749 606.598,245.423 607.166,245.085 607.735,244.71 608.303,244.429 608.871,244.119 609.44,239.773 610.008,239.64 610.576,239.388 611.145,239.424 611.713,239.276 612.281,237.58 612.85,238.88 613.418,235.113 613.986,236.563 614.555,236.718 615.123,234.88 615.691,235.293 616.26,235.676 616.828,235.921 617.396,237.118 617.965,236.104 618.533,237.385 619.102,241.676 619.67,239.706 620.238,236.82 620.807,237.248 621.375,237.415 621.943,237.658 622.512,238.992 623.08,239.215 623.648,239.028 624.217,241.202 624.785,239.954 625.353,238.88 625.922,238.88 626.49,240.041 627.058,240.987 627.627,239.69 628.195,240.692 628.763,238.501 629.332,237.403 629.9,235.684 630.468,234.728 631.037,235.001 631.605,233.152 632.173,235.512 632.742,237.891 633.31,238.087 633.879,237.977 634.447,238.04 635.015,237.128 635.584,237.436 636.152,237.419 636.72,235.665 637.289,233.922 637.857,235.355 638.425,235.6 638.994,237.798 639.562,234.92 640.13,236.925 640.699,234.797 641.267,236.093 641.835,234.163 642.404,233.474 642.972,233.602 643.54,233.839 644.109,233.131 644.677,232.528 645.245,232.982 645.814,231.511 646.382,231.808 646.951,231.116 647.519,231.711 648.087,230.32 648.656,230.814 649.224,230.511 649.792,231.208 650.361,232.707 650.929,231.117 651.497,230.451 652.066,229.966 652.634,230.671 653.202,231.178 653.771,231.525 654.339,229.831 654.907,230.579 655.476,231.209 656.044,233.858 656.612,235.234 657.181,234.205 657.749,233.326 658.317,233.636 658.886,234.872 659.454,237.094 660.022,238.139 660.591,235.968 661.159,237.184 661.728,237.273 662.296,237.168 662.864,238.321 663.433,237.097 664.001,236.1 664.569,237.098 665.138,235.232 665.706,236.334 666.274,237.33 666.843,235.413 667.411,235.53 667.979,235.484 668.548,236.802 669.116,235.794 669.684,234.89 670.253,236.08 670.821,234.95 671.389,235.065 671.958,234.29 672.526,233.649 673.094,233.854 673.663,234.997 674.231,235.007 674.799,236.261 675.368,236.258 675.936,237.098 676.505,238.042 677.073,237.909 677.641,236.783 678.21,238.797 678.778,237.718 679.346,238.699 679.915,239.34 680.483,238.084 681.051,238.915 681.62,238.694 682.188,238.546 682.756,238.339 683.325,239.229 683.893,238.988 684.461,237.663 685.03,238.445 685.598,234.179 686.166,234.258 686.735,232.289 687.303,233.592 687.871,235.663 688.44,235.461 689.008,235.362 689.577,234.309 690.145,234.438 690.713,234.397 691.282,233.532 691.85,234.388 692.418,233.29 692.987,233.552 693.555,233.386 694.123,232.192 694.692,232.139 695.26,233.273 695.828,235.29 696.397,237.384 696.965,238.159 697.533,237.925 698.102,239.783 698.67,239.314 699.238,239.725 699.807,238.302 700.375,237.144 700.943,236.888 701.512,237.635 702.08,238.311 702.648,236.958 703.217,235.456 703.785,235.08 704.354,233.941 704.922,231.816 705.49,231.764 706.059,228.798 706.627,230.217 707.195,232.584 707.764,232.308 708.332,235.224 708.9,231.842 709.469,229.753 710.037,227.764 710.605,225.917 711.174,226.583 711.742,229.309 712.31,229.521 712.879,228.82 713.447,230.259 714.015,230.352 714.584,230.432 715.152,229.546 715.72,228.959 716.289,229.192 716.857,227.232 717.425,227.714 717.994,229.145 718.562,228.534 719.131,229.113 719.699,231.415 720.267,231.589 720.836,232.625 721.404,231.773 721.972,233.061 722.541,231.2 723.109,231.285 723.677,232.328 724.246,231.46 724.814,233.628 725.382,235.558 725.951,236.46 726.519,237.245 727.087,236.778 727.656,236.452 728.224,234.18 728.792,234.06 729.361,233.814 729.929,232.942 730.497,233.77 731.066,231.707 731.634,231.738 732.203,230.785 732.771,230.966 733.339,233.148 733.908,234.247 734.476,234.104 735.044,231.243 735.613,230.319 736.181,229.38 736.749,229.73 737.318,229.992 737.886,230.114 738.454,229.493 739.023,229.678 739.591,228.966 740.159,230.378 740.728,230.641 741.296,230.709 741.864,229.944 742.433,230.217 743.001,232.343 743.569,232.544 744.138,234.602 744.706,234.705 745.274,233.442 745.843,233.423 746.411,233.41 746.98,234.482 747.548,234.576 748.116,230.088 748.685,228.333 749.253,228.612 749.821,231.131 750.39,230.402 750.958,231.588 751.526,232.741 752.095,231.881 752.663,230.799 753.231,228.949 753.8,227.028 754.368,227.347 754.936,227.691 755.505,230.968 756.073,233.168 756.641,233.363 757.21,232.146 757.778,230.237 758.346,228.36 758.915,228.603 759.483,228.934 760.052,231.304 760.62,231.568 761.188,230.738 761.757,230.73 762.325,230.959 762.893,231.254 763.462,231.093 764.03,233.086 764.598,235.969 765.167,234.587 765.735,235.625 766.303,235.393 766.872,236.134 767.44,235.865 768.008,235.732 768.577,235.519 769.145,236.154 769.713,234.684 770.282,234.521 770.85,233.355 771.418,233.44 771.987,233.333 772.555,233.092 773.123,230.855 773.692,229.042 774.26,226.275 774.829,227.929 775.397,229.18 775.965,230.444 776.534,230.497 777.102,228.705 777.67,227.904 778.239,226.212 778.807,226.6 779.375,226.029 779.944,226.412 780.512,226.895 781.08,228.196 781.649,227.506 782.217,227.818 782.785,229.525 783.354,229.924 783.922,233.304 784.49,232.401 785.059,234.5 785.627,235.344 786.195,236.162 786.764,235.652 787.332,235.424 787.9,237.322 788.469,235.841 789.037,234.555 789.606,235.446 790.174,234.217 790.742,234.042 791.311,234.001 791.879,233.965 792.447,233.805 793.016,234.832 793.584,234.685 794.152,233.521 794.721,233.374 795.289,234.408 795.857,233.069 796.426,234.091 796.994,234.764 797.562,233.191 798.131,234.083 798.699,232.912 799.267,232.6 799.836,231.358 800.404,231.321 800.972,231.181 801.541,234.257 802.109,232.03 802.678,228.02 803.246,228.191 803.814,228.206 804.383,229.247 804.951,229.379 805.519,227.478 806.088,228.784 806.656,225.827 807.224,224.396 807.793,226.83 808.361,225.164 808.929,225.559 809.498,225.721 810.066,226.345 810.634,224.786 811.203,228.288 811.771,230.659 812.339,230.974 812.908,230.834 813.476,230.045 814.044,231.307 814.613,230.185 815.181,228.454 815.749,228.599 816.318,228.841 816.886,226.908 817.455,226.086 818.023,227.544 818.591,228.934 819.16,224.077 819.728,226.775 820.296,228.194 820.865,228.577 821.433,230.946 822.001,233.094 822.57,236.235 823.138,234.947 823.706,235.779 824.275,234.507 824.843,231.251 825.411,230.502 825.98,228.749 826.548,229.023 827.116,229.35 827.685,229.422 828.253,230.866 828.821,232.912 829.39,233.806 829.958,230.62 830.526,228.62 831.095,229.113 831.663,229.444 832.232,229.859 832.8,230.008 833.368,231.244 833.937,230.237 834.505,229.389 835.073,228.774 835.642,228.828 836.21,229.066 836.778,231.331 837.347,232.388 837.915,231.188 838.483,231.281 839.052,232.48 839.62,232.741 840.188,230.574 840.757,230.591 841.325,229.878 841.893,230.248 842.462,232.431 843.03,231.536 843.598,230.644 844.167,231.781 844.735,230.86 845.304,230.83 845.872,232.098 846.44,232.023 847.009,233.06 847.577,235.112 848.145,232.786 848.714,233.806 849.282,232.708 849.85,233.73 850.419,234.543 850.987,233.339 851.555,234.218 852.124,235.032 852.692,235.87 853.26,233.322 853.829,231.307 854.397,232.601 854.965,232.692 855.534,234.886 856.102,233.669 856.67,234.482 857.239,234.669 857.807,234.578 858.375,233.411 858.944,234.442 859.512,235.406 860.081,237.185 860.649,239.785 861.217,240.106 861.786,241.633 862.354,240.741 862.922,238.875 863.491,239.082 864.059,239.295 864.627,233.846 865.196,233.524 865.764,232.274 866.332,233.002 866.901,232.579 867.469,235.35 868.037,234.963 868.606,233.358 869.174,232.011 869.742,232.993 870.311,232.753 870.879,230.238 871.447,229.114 872.016,230.066 872.584,229.845 873.152,229.831 873.721,228.932 874.289,225.95 874.858,227.249 875.426,226.591 875.994,226.004 876.563,227.428 877.131,229.796 877.699,229.631 878.268,228.804 878.836,228.149 879.404,230.213 879.973,230.361 880.541,230 881.109,230.189 881.678,230.337 882.246,232.3 882.814,233.178 883.383,233.116 883.951,233.973 884.519,232.579 885.088,230.189 885.656,231.246 886.224,233.059 886.793,233.797 887.361,231.427 887.93,231.418 888.498,230.241 889.066,232.17 889.635,231.987 890.203,233.887 890.771,233.661 891.34,234.486 891.908,229.052 892.476,231.048 893.045,228.903 893.613,227.896 894.181,226.815 894.75,225.986 895.318,225.445 895.886,225.74 896.455,227.194 897.023,229.535 897.591,229.751 898.16,232.971 898.728,232.848 899.296,232.549 899.865,233.855 900.433,233.855 901.001,232.647 901.57,232.546 902.138,234.186 902.707,234.068 903.275,233.653 903.843,233.3 904.412,234.106 904.98,233.903 905.548,234.779 906.117,234.302 906.685,232.974 907.253,231.791 907.822,229.569 908.39,230.535 908.958,230.597 909.527,231.369 910.095,232.345 910.663,231.264 911.232,230.205 911.8,229.987 912.368,228.951 912.937,229.035 913.505,229.998 914.073,228.766 914.642,227.823 915.21,226.999 915.779,223.928 916.347,222.404 916.915,222.859 917.484,221.285 918.052,219.895 918.62,220.607 919.189,221.125 919.757,220.989 920.325,221.772 920.894,223.554 921.462,223.237 922.03,223.638 922.599,225.315 923.167,225.698 923.735,226.125 924.304,225.445 924.872,228.051 925.44,228.401 926.009,229.817 926.577,229.82 927.145,227.674 927.714,232.228 928.282,230.341 928.85,231.57 929.419,232.538 929.987,232.44 930.556,230.265 931.124,230.527 931.692,229.573 932.261,230.832 932.829,227.712 933.397,226.997 933.966,229.315 934.534,231.424 935.102,232.328 935.671,232.353 936.239,233.412 936.807,232.325 937.376,232.286 937.944,232.297 938.512,233.351 939.081,234.317 939.649,234.272 940.217,233.005 940.786,234.059 941.354,237.026 941.922,236.448 942.491,236.087 943.059,233.836 943.627,233.709 944.196,233.552 944.764,233.49 945.333,233.328 945.901,234.266 946.469,230.959 947.038,231.671 947.606,230.652 948.174,229.751 948.743,227.948 949.311,228.236 949.879,227.418 950.448,227.487 951.016,226.818 951.584,227.389 952.153,227.646 952.721,225.818 953.289,229.194 953.858,230.501 954.426,230.463 954.994,229.68 955.563,228.665 956.131,227.951 956.699,229.281 957.268,230.435 957.836,228.38 958.405,227.619 958.973,227.968 959.541,230.339 960.11,230.367 960.678,232.33 961.246,233.311 961.815,235.129 962.383,233.75 962.951,232.588 963.52,230.42 964.088,232.524 964.656,230.312 965.225,231.447 965.793,230.266 966.361,230.287 966.93,229.45 967.498,230.709 968.066,230.706 968.635,230.001 969.203,230.023 969.771,231.259 970.34,231.299 970.908,229.246 971.476,230.477 972.045,231.609 972.613,232.699 973.182,234.671 973.75,234.207 974.318,233.031 974.887,231.942 975.455,232.698 976.023,233.575 976.592,234.472 977.16,234.198 977.728,234.157 978.297,234.931 978.865,235.59 979.433,235.24 980.002,237.12 980.57,236.888 981.138,236.643 981.707,235.244 982.275,235.002 982.843,237.783 983.412,236.22 983.98,235.6 984.548,236.302 985.117,236.801 985.685,236.395 986.253,238.149 986.822,237.522 987.39,235.907 987.959,233.269 988.527,233.865 989.095,234.652 989.664,235.437 990.232,234.857 990.8,233.208 991.369,232.824 991.937,231.477 992.505,232.338 993.074,232.267 993.642,231.829 994.21,231.654 994.779,232.529 995.347,235.262 995.915,234.698 996.484,233.157 997.052,231.537 997.62,230.427 998.189,230.341 998.757,231.351 999.325,233.245 999.894,234.022 1000.46,232.634 1001.03,231.309 1001.6,231.015 1002.17,231.776 1002.74,232.728 1003.3,232.393 1003.87,231.009 1004.44,231.948 1005.01,231.573 1005.58,231.321 1006.15,233.339 1006.71,232.15 1007.28,227.827 1007.85,229.787 1008.42,230.575 1008.99,230.449 1009.56,230.398 1010.12,230.378 1010.69,229.198 1011.26,228.042 1011.83,225.822 1012.4,225.087 1012.97,225.268 1013.53,225.468 1014.1,227.764 1014.67,224.589 1015.24,228.996 1015.81,228.142 1016.38,227.216 1016.94,227.4 1017.51,224.56 1018.08,225.026 1018.65,225.469 1019.22,228.643 1019.79,227.617 1020.35,225.498 1020.92,224.767 1021.49,223.087 1022.06,223.819 1022.63,225.265 1023.2,225.533 1023.76,226.993 1024.33,227.092 1024.9,225.189 1025.47,226.683 1026.04,228.979 1026.61,229.03 1027.17,229.092 1027.74,226.948 1028.31,226.349 1028.88,225.4 1029.45,226.935 1030.02,228.21 1030.58,226.247 1031.15,227.634 1031.72,225.732 1032.29,226.368 1032.86,225.492 1033.43,225.797 1033.99,226.425 1034.56,226.575 1035.13,229.096 1035.7,230.265 1036.27,230.259 1036.84,228.398 1037.4,231.851 1037.97,233.969 1038.54,234.85 1039.11,235.608 1039.68,235.105 1040.25,236.593 1040.81,236.291 1041.38,236.478 1041.95,237.129 1042.52,235.682 1043.09,235.352 1043.66,234.005 1044.22,232.863 1044.79,231.745 1045.36,228.615 1045.93,228.495 1046.5,227.437 1047.07,226.712 1047.63,228.14 1048.2,230.367 1048.77,230.441 1049.34,233.422 1049.91,233.187 1050.48,235.223 1051.05,232.606 1051.61,230.482 1052.18,229.436 1052.75,228.293 1053.32,230.495 1053.89,229.529 1054.46,229.619 1055.02,228.561 1055.59,228.646 1056.16,230.064 1056.73,231.164 1057.3,233.198 1057.87,232.92 1058.43,232.722 1059,229.373 1059.57,227.277 1060.14,225.428 1060.71,223.686 1061.28,224.208 1061.84,226.93 1062.41,226.938 1062.98,228.289 1063.55,230.436 1064.12,230.364 1064.69,229.435 1065.25,229.526 1065.82,229.461 1066.39,230.652 1066.96,231.672 1067.53,230.394 1068.1,231.619 1068.66,232.645 1069.23,233.729 1069.8,234.636 1070.37,234.488 1070.94,234.108 1071.51,233.677 1072.07,232.491 1072.64,232.343 1073.21,229.182 1073.78,229.277 1074.35,229.448 1074.92,232.749 1075.48,233.5 1076.05,232.128 1076.62,232.947 1077.19,231.667 1077.76,230.33 1078.33,229.221 1078.89,227.515 1079.46,228.846 1080.03,226.922 1080.6,227.144 1081.17,226.404 1081.74,227.831 1082.3,228.79 1082.87,227.671 1083.44,226.78 1084.01,229.043 1084.58,227.985 1085.15,230.298 1085.71,229.359 1086.28,228.616 1086.85,228.727 1087.42,230.888 1087.99,233.038 1088.56,233.785 1089.12,232.323 1089.69,230.137 1090.26,231.158 1090.83,232.14 1091.4,232.885 1091.97,232.922 1092.53,231.793 1093.1,231.634 1093.67,230.361 1094.24,232.337 1094.81,233.194 1095.38,231.938 1095.94,230.982 1096.51,231.83 1097.08,230.638 1097.65,230.473 1098.22,230.56 1098.79,229.7 1099.35,228.822 1099.92,227.921 1100.49,228.223 1101.06,226.221 1101.63,227.712 1102.2,226.918 1102.76,223.133 1103.33,222.701 1103.9,222.337 1104.47,223.99 1105.04,224.409 1105.61,224.812 1106.17,225.115 1106.74,224.505 1107.31,225.031 1107.88,225.507 1108.45,226.121 1109.02,227.398 1109.58,227.704 1110.15,229.845 1110.72,232.111 1111.29,232.111 1111.86,234.294 1112.43,235.062 1112.99,234.807 1113.56,234.732 1114.13,234.596 1114.7,236.66 1115.27,235.185 1115.84,234.785 1116.4,235.328 1116.97,234.929 1117.54,236.798 1118.11,237.344 1118.68,235.625 1119.25,236.219 1119.81,237.13 1120.38,237.726 1120.95,239.465 1121.52,238.734 1122.09,239.101 1122.66,239.442 1123.23,237.738 1123.79,237.247 1124.36,236.645 1124.93,235.086 1125.5,233.663 1126.07,234.573 1126.64,235.231 1127.2,233.805 1127.77,232.26 1128.34,231.997 1128.91,229.907 1129.48,230.825 1130.05,230.543 1130.61,229.246 1131.18,230.418 1131.75,227.424 1132.32,228.778 1132.89,227.783 1133.46,227.755 1134.02,228.919 1134.59,229.809 1135.16,230.851 1135.73,232.712 1136.3,232.544 1136.87,233.201 1137.43,234.028 1138,230.511 1138.57,230.378 1139.14,229.156 1139.71,228.116 1140.28,229.193 1140.84,227.069 1141.41,226.069 1141.98,229.335 1142.55,228.202 1143.12,227.267 1143.69,230.589 1144.25,232.431 1144.82,233.118 1145.39,232.796 1145.96,232.402 1146.53,232.273 1147.1,232.153 1147.66,230.764 1148.23,230.53 1148.8,229.251 1149.37,229.072 1149.94,230.243 1150.51,229.271 1151.07,227.163 1151.64,226.221 1152.21,226.519 1152.78,226.965 1153.35,226.027 1153.92,226.265 1154.48,227.541 1155.05,227.511 1155.62,227.631 1156.19,225.641 1156.76,225.839 1157.33,225.052 1157.89,225.212 1158.46,222.353 1159.03,223.916 1159.6,222.429 1160.17,222.105 1160.74,223.548 1161.3,223.003 1161.87,222.707 1162.44,225.294 1163.01,224.738 1163.58,225.242 1164.15,225.741 1164.71,226.19 1165.28,226.569 1165.85,224.881 1166.42,223.448 1166.99,222.983 1167.56,225.631 1168.12,226.409 1168.69,227.896 1169.26,228.052 1169.83,226.277 1170.4,224.377 1170.97,225.829 1171.53,226.062 1172.1,226.406 1172.67,226.615 1173.24,229.177 1173.81,228.424 1174.38,227.832 1174.94,227.211 1175.51,228.378 1176.08,227.495 1176.65,227.8 1177.22,229.159 1177.79,229.548 1178.35,229.613 1178.92,227.663 1179.49,231.065 1180.06,233.203 1180.63,234.296 1181.2,232.931 1181.76,234.275 1182.33,235 1182.9,235.695 1183.47,234.424 1184.04,234.214 1184.61,236.151 1185.17,237.888 1185.74,235.428 1186.31,234.054 1186.88,234.934 1187.45,233.54 1188.02,231.304 1188.58,231.147 1189.15,230.116 1189.72,231.213 1190.29,230.244 1190.86,229.42 1191.43,229.712 1192,230.003 1192.56,230.008 1193.13,231.151 1193.7,232.093 1194.27,230.849 1194.84,231.199 1195.41,231.18 1195.97,230.169 1196.54,231.388 1197.11,229.413 1197.68,229.768 1198.25,228.948 1198.82,229.07 1199.38,230.207 1199.95,229.254 1200.52,230.356 1201.09,233.459 1201.66,233.253 1202.23,232.234 1202.79,230.201 1203.36,229.222 1203.93,226.291 1204.5,226.68 1205.07,229.078 1205.64,234.403 1206.2,236.21 1206.77,235.979 1207.34,232.6 1207.91,232.502 1208.48,232.42 1209.05,234.19 1209.61,235.017 1210.18,234.793 1210.75,232.271 1211.32,232.235 1211.89,232.189 1212.46,232.034 1213.02,230.85 1213.59,229.933 1214.16,229.045 1214.73,228.948 1215.3,230.037 1215.87,230.22 1216.43,229.215 1217,229.332 1217.57,230.399 1218.14,230.565 1218.71,229.474 1219.28,231.776 1219.84,232.647 1220.41,235.731 1220.98,235.457 1221.55,236.208 1222.12,236.777 1222.69,234.282 1223.25,233.913 1223.82,231.767 1224.39,231.761 1224.96,233.525 1225.53,232.372 1226.1,234.277 1226.66,235.134 1227.23,233.929 1227.8,230.439 1228.37,229.429 1228.94,230.591 1229.51,230.66 1230.07,229.67 1230.64,228.466 1231.21,227.576 1231.78,228.861 1232.35,227.852 1232.92,228.906 1233.48,228.167 1234.05,231.448 1234.62,232.326 1235.19,233.054 1235.76,236.046 1236.33,235.456 1236.89,236.362 1237.46,236 1238.03,238.665 1238.6,236.086 1239.17,235.811 1239.74,236.397 1240.3,234.946 1240.87,234.688 1241.44,232.971 1242.01,234.629 1242.58,232.247 1243.15,230.82 1243.71,229.472 1244.28,230.598 1244.85,230.456 1245.42,229.302 1245.99,229.33 1246.56,229.411 1247.12,228.618 1247.69,228.386 1248.26,227.223 1248.83,228.645 1249.4,227.863 1249.97,228.725 1250.53,228.736 1251.1,227.899 1251.67,230.181 1252.24,231.18 1252.81,231.175 1253.38,231.941 1253.94,231.932 1254.51,232.721 1255.08,231.53 1255.65,230.257 1256.22,228.097 1256.79,227.171 1257.35,227.344 1257.92,227.398 1258.49,226.43 1259.06,226.545 1259.63,227.837 1260.2,229.03 1260.76,229.196 1261.33,227.351 1261.9,228.557 1262.47,225.807 1263.04,226.062 1263.61,226.402 1264.18,223.559 1264.74,226.012 1265.31,228.305 1265.88,229.639 1266.45,227.868 1267.02,228.29 1267.59,228.414 1268.15,229.518 1268.72,230.691 1269.29,230.661 1269.86,228.654 1270.43,229.954 1271,230.031 1271.56,231.167 1272.13,229.128 1272.7,230.364 1273.27,231.413 1273.84,233.497 1274.41,232.414 1274.97,232.235 1275.54,233.211 1276.11,235.057 1276.68,234.498 1277.25,235.184 1277.82,235.981 1278.38,235.593 1278.95,235.121 1279.52,235.799 1280.09,234.335 1280.66,233.858 1281.23,231.611 1281.79,232.441 1282.36,232.329 1282.93,232.328 1283.5,233.131 1284.07,233 1284.64,231.884 1285.2,231.689 1285.77,231.486 1286.34,228.488 1286.91,228.633 1287.48,228.808 1288.05,227.775 1288.61,229.916 1289.18,228.598 1289.75,229.343 1290.32,229.296 1290.89,228.389 1291.46,229.398 1292.02,229.12 1292.59,230.006 1293.16,231.153 1293.73,231.012 1294.3,229.032 1294.87,229.108 1295.43,229.231 1296,227.985 1296.57,226.144 1297.14,226.458 1297.71,226.862 1298.28,227.051 1298.84,228.338 1299.41,227.71 1299.98,229.874 1300.55,228.776 1301.12,228.892 1301.69,226.035 1302.25,224.339 1302.82,223.652 1303.39,224.298 1303.96,225.805 1304.53,226.031 1305.1,227.297 1305.66,228.708 1306.23,227.714 1306.8,227.655 1307.37,227.901 1307.94,227.058 1308.51,226.37 1309.07,224.602 1309.64,227.959 1310.21,230.137 1310.78,229.14 1311.35,228.282 1311.92,227.454 1312.48,227.681 1313.05,226.18 1313.62,226.585 1314.19,225.878 1314.76,226.429 1315.33,226.824 1315.89,226.235 1316.46,226.811 1317.03,228.315 1317.6,228.584 1318.17,227.794 1318.74,229.328 1319.3,231.663 1319.87,230.341 1320.44,232.655 1321.01,234.568 1321.58,234.155 1322.15,233.937 1322.71,234.706 1323.28,234.562 1323.85,237.458 1324.42,237.997 1324.99,236.576 1325.56,236.112 1326.12,235.661 1326.69,233.335 1327.26,232.285 1327.83,232.137 1328.4,235.064 1328.97,234.684 1329.53,235.429 1330.1,236.28 1330.67,235.683 1331.24,236.073 1331.81,237.677 1332.38,238.124 1332.94,236.532 1333.51,239.322 1334.08,235.742 1334.65,236.529 1335.22,236.977 1335.79,236.399 1336.36,234.777 1336.92,233.367 1337.49,234.225 1338.06,235.014 1338.63,234.507 1339.2,236.134 1339.77,236.695 1340.33,236.203 1340.9,234.657 1341.47,233.408 1342.04,232.003 1342.61,230.568 1343.18,228.43 1343.74,227.248 1344.31,228.22 1344.88,226.208 1345.45,228.569 1346.02,228.464 1346.59,227.529 1347.15,227.51 1347.72,226.728 1348.29,226.943 1348.86,228.35 1349.43,228.359 1350,229.577 1350.56,229.518 1351.13,231.414 1351.7,230.24 1352.27,228.163 1352.84,227.114 1353.41,226.237 1353.97,224.196 1354.54,226.753 1355.11,228.188 1355.68,226.058 1356.25,224.287 1356.82,224.596 1357.38,226.92 1357.95,228.251 1358.52,229.299 1359.09,227.096 1359.66,229.402 1360.23,229.542 1360.79,230.593 1361.36,230.495 1361.93,231.608 1362.5,231.44 1363.07,232.421 1363.64,234.285 1364.2,234.974 1364.77,233.452 1365.34,232.148 1365.91,232.217 1366.48,230.831 1367.05,231.647 1367.61,231.531 1368.18,233.48 1368.75,233.092 1369.32,233.874 1369.89,232.457 1370.46,231.397 1371.02,230.325 1371.59,230.471 1372.16,229.097 1372.73,228.233 1373.3,228.278 1373.87,225.211 1374.43,226.445 1375,228.585 1375.57,228.566 1376.14,227.401 1376.71,226.669 1377.28,225.938 1377.84,225.102 1378.41,227.405 1378.98,227.509 1379.55,227.599 1380.12,226.862 1380.69,226.085 1381.25,227.405 1381.82,223.489 1382.39,224.879 1382.96,224.139 1383.53,224.645 1384.1,223.996 1384.66,221.362 1385.23,221.954 1385.8,221.646 1386.37,220.976 1386.94,221.629 1387.51,222.37 1388.07,225.383 1388.64,223.664 1389.21,226.217 1389.78,226.379 1390.35,225.841 1390.92,225.213 1391.48,226.585 1392.05,225.898 1392.62,226.355 1393.19,226.726 1393.76,227.134 1394.33,226.503 1394.89,226.708 1395.46,227.031 1396.03,227.444 1396.6,228.03 1397.17,227.273 1397.74,230.645 1398.3,229.876 1398.87,231.228 1399.44,230.373 1400.01,231.741 1400.58,232.811 1401.15,230.89 1401.71,232.052 1402.28,230.194 1402.85,233.645 1403.42,231.634 1403.99,230.498 1404.56,231.474 1405.13,230.494 1405.69,230.403 1406.26,231.702 1406.83,230.961 1407.4,229.064 1407.97,229.506 1408.54,227.761 1409.1,229.191 1409.67,230.524 1410.24,231.8 1410.81,232.605 1411.38,234.612 1411.95,232.496 1412.51,233.548 1413.08,232.366 1413.65,232.368 1414.22,231.062 1414.79,235.411 1415.36,237.171 1415.92,232.909 1416.49,230.901 1417.06,229.921 1417.63,230.171 1418.2,231.49 1418.77,233.63 1419.33,231.382 1419.9,230.423 1420.47,230.225 1421.04,229.358 1421.61,227.52 1422.18,230.145 1422.74,232.03 1423.31,231.933 1423.88,231.938 1424.45,232.944 1425.02,234.828 1425.59,233.613 1426.15,232.372 1426.72,234.425 1427.29,233.299 1427.86,234.049 1428.43,234.857 1429,234.742 1429.56,235.692 1430.13,234.262 1430.7,234.13 1431.27,234.86 1431.84,232.658 1432.41,231.492 1432.97,234.442 1433.54,236.234 1434.11,234.592 1434.68,234.337 1435.25,233.118 1435.82,232.921 1436.38,232.664 1436.95,232.444 1437.52,232.691 1438.09,232.53 1438.66,232.234 1439.23,234.028 1439.79,233.703 1440.36,236.321 1440.93,234.699 1441.5,232.284 1442.07,235.287 1442.64,232.803 1443.2,232.402 1443.77,232.083 1444.34,231.715 1444.91,231.559 1445.48,233.717 1446.05,236.584 1446.61,235.019 1447.18,233.753 1447.75,233.346 1448.32,234.068 1448.89,232.777 1449.46,231.499 1450.02,233.507 1450.59,233.198 1451.16,230.717 1451.73,229.599 1452.3,230.836 1452.87,230.83 1453.43,229.787 1454,229.83 1454.57,228.543 1455.14,226.6 1455.71,229.029 1456.28,229.891 1456.84,230.819 1457.41,231.969 1457.98,231.646 1458.55,231.401 1459.12,233.268 1459.69,233.981 1460.25,231.378 1460.82,231.211 1461.39,231.826 1461.96,231.625 1462.53,232.331 1463.1,232.092 1463.66,231.934 1464.23,232.688 1464.8,231.4 1465.37,230.44 1465.94,229.336 1466.51,229.337 1467.07,232.589 1467.64,233.445 1468.21,234.102 1468.78,233.876 1469.35,233.527 1469.92,235.475 1470.48,232.979 1471.05,232.584 1471.62,231.601 1472.19,232.341 1472.76,232.121 1473.33,228.773 1473.89,227.434 1474.46,227.484 1475.03,227.556 1475.6,227.53 1476.17,226.51 1476.74,225.59 1477.31,226.07 1477.87,225.192 1478.44,224.341 1479.01,224.706 1479.58,225.294 1480.15,224.501 1480.72,224.898 1481.28,226.148 1481.85,226.283 1482.42,228.61 1482.99,228.622 1483.56,228.95 1484.13,231.188 1484.69,229.066 1485.26,226.92 1485.83,228.149 1486.4,229.343 1486.97,229.337 1487.54,229.269 1488.1,228.225 1488.67,230.333 1489.24,230.242 1489.81,230.258 1490.38,228.163 1490.95,226.135 1491.51,226.303 1492.08,226.392 1492.65,227.591 1493.22,229.866 1493.79,230.848 1494.36,231.756 1494.92,232.703 1495.49,232.698 1496.06,232.622 1496.63,231.497 1497.2,230.41 1497.77,228.175 1498.33,226.186 1498.9,226.375 1499.47,226.414 1500.04,226.658 1500.61,226.941 1501.18,226.985 1501.74,228.391 1502.31,227.287 1502.88,227.628 1503.45,225.828 1504.02,226.284 1504.59,225.761 1505.15,225.058 1505.72,225.511 1506.29,227.888 1506.86,227.104 1507.43,231.481 1508,228.074 1508.56,229.33 1509.13,228.24 1509.7,226.229 1510.27,226.406 1510.84,225.706 1511.41,225.817 1511.97,225.181 1512.54,225.688 1513.11,227.29 1513.68,227.775 1514.25,230.003 1514.82,231.967 1515.38,232.046 1515.95,231.789 1516.52,230.706 1517.09,229.776 1517.66,227.863 1518.23,228.995 1518.79,229.106 1519.36,229.244 1519.93,228.226 1520.5,227.314 1521.07,225.564 1521.64,226.917 1522.2,229.041 1522.77,230.239 1523.34,228.267 1523.91,229.387 1524.48,229.734 1525.05,228.799 1525.61,230.09 1526.18,231.277 1526.75,231.285 1527.32,231.326 1527.89,231.25 1528.46,231.327 1529.02,230.328 1529.59,229.51 1530.16,229.615 1530.73,229.857 1531.3,229.924 1531.87,229.848 1532.43,228.828 1533,229.058 1533.57,232.163 1534.14,231.301 1534.71,232.24 1535.28,231.372 1535.84,231.336 1536.41,235.47 1536.98,236.404 1537.55,237.404 1538.12,236.977 1538.69,234.718 1539.25,236.719 1539.82,236.365 1540.39,233.881 1540.96,233.632 1541.53,235.455 1542.1,235.133 1542.66,234.783 1543.23,233.46 1543.8,232.33 1544.37,232.133 1544.94,231 1545.51,230.749 1546.08,229.628 1546.64,229.549 1547.21,229.638 1547.78,227.753 1548.35,228.016 1548.92,228.209 1549.49,228.173 1550.05,230.455 1550.62,230.476 1551.19,228.307 1551.76,228.447 1552.33,227.29 1552.9,226.629 1553.46,228.85 1554.03,229.083 1554.6,228.15 1555.17,228.404 1555.74,228.578 1556.31,227.524 1556.87,228.702 1557.44,228.786 1558.01,226.918 1558.58,225.176 1559.15,229.631 1559.72,229.78 1560.28,227.667 1560.85,227.931 1561.42,229.197 1561.99,230.292 1562.56,233.574 1563.13,232.352 1563.69,232.244 1564.26,231.996 1564.83,231.084 1565.4,231.143 1565.97,231.393 1566.54,232.413 1567.1,232.401 1567.67,233.36 1568.24,231.065 1568.81,228.846 1569.38,232.155 1569.95,231.211 1570.51,229.051 1571.08,229.09 1571.65,232.509 1572.22,232.472 1572.79,234.387 1573.36,235.256 1573.92,235.946 1574.49,234.595 1575.06,231.002 1575.63,231.044 1576.2,230.999 1576.77,229.969 1577.33,230.877 1577.9,233.874 1578.47,233.74 1579.04,232.59 1579.61,232.259 1580.18,230.949 1580.74,228.93 1581.31,227.06 1581.88,228.08 1582.45,228.085 1583.02,229.489 1583.59,230.746 1584.15,232.605 1584.72,232.366 1585.29,233.185 1585.86,234.837 1586.43,236.62 1587,235.18 1587.56,232.781 1588.13,232.731 1588.7,233.607 1589.27,231.396 1589.84,230.222 1590.41,228.054 1590.97,227.115 1591.54,226.341 1592.11,227.938 1592.68,228.064 1593.25,227.48 1593.82,227.91 1594.38,226.063 1594.95,228.363 1595.52,231.533 1596.09,231.345 1596.66,231.457 1597.23,230.488 1597.79,231.851 1598.36,231.555 1598.93,230.577 1599.5,229.361 1600.07,231.548 1600.64,232.226 1601.2,233.097 1601.77,232.015 1602.34,234.023 1602.91,233.841 1603.48,232.435 1604.05,230.304 1604.61,231.12 1605.18,231.337 1605.75,231.096 1606.32,231.872 1606.89,229.886 1607.46,232.901 1608.02,232.558 1608.59,232.364 1609.16,232.123 1609.73,231.775 1610.3,230.702 1610.87,232.795 1611.43,232.613 1612,232.294 1612.57,234.046 1613.14,234.653 1613.71,234.098 1614.28,234.712 1614.84,234.555 1615.41,234.157 1615.98,233.684 1616.55,233.445 1617.12,232.908 1617.69,231.597 1618.26,234.593 1618.82,234.218 1619.39,234.971 1619.96,234.562 1620.53,234.059 1621.1,232.856 1621.67,231.67 1622.23,231.696 1622.8,229.604 1623.37,228.611 1623.94,228.755 1624.51,227.581 1625.08,227.87 1625.64,225.027 1626.21,228.343 1626.78,228.259 1627.35,228.276 1627.92,228.161 1628.49,227.037 1629.05,228.314 1629.62,227.408 1630.19,227.604 1630.76,227.844 1631.33,228.139 1631.9,226.23 1632.46,226.301 1633.03,225.326 1633.6,224.651 1634.17,225.026 1634.74,226.459 1635.31,227.706 1635.87,228.089 1636.44,229.353 1637.01,228.294 1637.58,228.266 1638.15,227.424 1638.72,227.686 1639.28,230.078 1639.85,230.075 1640.42,229.851 1640.99,230.716 1641.56,230.764 1642.13,231.731 1642.69,229.579 1643.26,228.615 1643.83,227.598 1644.4,226.792 1644.97,226.904 1645.54,227.206 1646.1,228.371 1646.67,230.561 1647.24,230.602 1647.81,230.413 1648.38,232.482 1648.95,231.195 1649.51,230.705 1650.08,231.731 1650.65,231.54 1651.22,231.376 1651.79,230.222 1652.36,233.314 1652.92,235.208 1653.49,234.754 1654.06,233.49 1654.63,234.216 1655.2,234.094 1655.77,232.643 1656.33,233.429 1656.9,232.191 1657.47,232.285 1658.04,233.196 1658.61,233.854 1659.18,233.573 1659.74,231.242 1660.31,230.098 1660.88,230.103 1661.45,232.122 1662.02,231.913 1662.59,231.919 1663.15,231.726 1663.72,231.397 1664.29,230.119 1664.86,229.992 1665.43,231.891 1666,229.524 1666.56,229.534 1667.13,230.448 1667.7,230.327 1668.27,229.174 1668.84,229.069 1669.41,231.033 1669.97,231.186 1670.54,231 1671.11,230.872 1671.68,230.685 1672.25,229.752 1672.82,229.798 1673.38,228.644 1673.95,228.556 1674.52,229.656 1675.09,230.896 1675.66,230.78 1676.23,231.966 1676.79,231.717 1677.36,230.365 1677.93,229.342 1678.5,227.241 1679.07,228.395 1679.64,228.24 1680.2,228.44 1680.77,228.712 1681.34,231.783 1681.91,230.528 1682.48,229.132 1683.05,230.416 1683.61,230.436 1684.18,229.476 1684.75,229.293 1685.32,230.137 1685.89,231.18 1686.46,233.026 1687.02,229.788 1687.59,230.018 1688.16,230.011 1688.73,229.757 1689.3,227.632 1689.87,229.843 1690.44,226.797 1691,226.603 1691.57,225.644 1692.14,224.955 1692.71,225.242 1693.28,226.522 1693.85,225.828 1694.41,226.043 1694.98,225.231 1695.55,227.696 1696.12,227.817 1696.69,227.989 1697.26,228.151 1697.82,225.238 1698.39,222.807 1698.96,222.288 1699.53,221.761 1700.1,224.557 1700.67,224.126 1701.23,224.777 1701.8,225.348 1702.37,228.927 1702.94,227.063 1703.51,226.279 1704.08,226.727 1704.64,227.194 1705.21,226.741 1705.78,229.257 1706.35,229.439 1706.92,229.64 1707.49,230.934 1708.05,232.964 1708.62,232.033 1709.19,232.133 1709.76,231.957 1710.33,229.738 1710.9,232.102 1711.46,231.093 1712.03,229.302 1712.6,229.633 1713.17,227.588 1713.74,226.735 1714.31,232.143 1714.87,228.985 1715.44,231.244 1716.01,232.427 1716.58,233.48 1717.15,234.49 1717.72,233.239 1718.28,230.009 1718.85,231.074 1719.42,230.004 1719.99,231.152 1720.56,231.287 1721.13,229.286 1721.69,228.453 1722.26,228.78 1722.83,228.833 1723.4,228.917 1723.97,229.152 1724.54,229.253 1725.1,230.353 1725.67,232.58 1726.24,234.713 1726.81,231.373 1727.38,231.374 1727.95,235.331 1728.51,237.06 1729.08,236.873 1729.65,236.393 1730.22,236.249 1730.79,236.908 1731.36,234.391 1731.92,234.128 1732.49,231.842 1733.06,231.888 1733.63,231.76 1734.2,230.577 1734.77,231.599 1735.33,232.623 1735.9,233.509 1736.47,233.26 1737.04,233.059 1737.61,230.725 1738.18,230.776 1738.74,231.812 1739.31,232.7 1739.88,231.512 1740.45,230.212 1741.02,229.337 1741.59,230.191 1742.15,231.208 1742.72,231.225 1743.29,231.293 1743.86,231.225 1744.43,231.104 1745,230.028 1745.56,228.988 1746.13,233.161 1746.7,232.92 1747.27,232.838 1747.84,233.685 1748.41,233.093 1748.97,232.744 1749.54,233.586 1750.11,233.116 1750.68,234.096 1751.25,234.867 1751.82,235.351 1752.38,233.004 1752.95,233.917 1753.52,236.545 1754.09,235.923 1754.66,234.561 1755.23,234.269 1755.79,232.716 1756.36,232.478 1756.93,232.518 1757.5,231.266 1758.07,232.138 1758.64,230.074 1759.21,230.055 1759.77,227.883 1760.34,226.927 1760.91,226.942 1761.48,224.964 1762.05,227.316 1762.62,228.516 1763.18,231.582 1763.75,226.214 1764.32,227.624 1764.89,227.689 1765.46,230.83 1766.03,230.689 1766.59,232.705 1767.16,228.275 1767.73,227.297 1768.3,224.344 1768.87,221.83 1769.44,224.469 1770,224.956 1770.57,225.358 1771.14,224.753 1771.71,223.059 1772.28,222.434 1772.85,221.954 1773.41,221.572 1773.98,220.878 1774.55,223.833 1775.12,226.242 1775.69,225.401 1776.26,228.029 1776.82,229.282 1777.39,230.293 1777.96,231.477 1778.53,237.595 1779.1,236.026 1779.67,235.489 1780.23,237.407 1780.8,237.849 1781.37,237.34 1781.94,235.801 1782.51,234.283 1783.08,235.125 1783.64,234.821 1784.21,235.541 1784.78,235.115 1785.35,232.828 1785.92,233.593 1786.49,233.239 1787.05,233.097 1787.62,232.995 1788.19,232.713 1788.76,231.413 1789.33,231.066 1789.9,230.023 1790.46,232.138 1791.03,232.149 1791.6,229.832 1792.17,229.598 1792.74,229.542 1793.31,227.554 1793.87,226.873 1794.44,227.049 1795.01,225.055 1795.58,224.212 1796.15,223.818 1796.72,224.171 1797.28,224.356 1797.85,224.731 1798.42,227.359 1798.99,229.81 1799.56,230.854 1800.13,230.94 1800.69,231.834 1801.26,233.755 1801.83,234.347 1802.4,234.177 1802.97,233.849 1803.54,234.65 1804.1,234.609 1804.67,232.119 1805.24,230.701 1805.81,231.581 1806.38,230.614 1806.95,228.413 1807.51,226.365 1808.08,227.54 1808.65,229.005 1809.22,227.962 1809.79,228.99 1810.36,229.12 1810.92,230.328 1811.49,231.34 1812.06,232.329 1812.63,231.12 1813.2,231.029 1813.77,230.012 1814.33,231.266 1814.9,234.301 1815.47,232.825 1816.04,231.561 1816.61,233.509 1817.18,231.257 1817.74,230.251 1818.31,234.225 1818.88,233.919 1819.45,232.769 1820.02,231.481 1820.59,230.141 1821.15,229.363 1821.72,230.335 1822.29,228.953 1822.86,227.977 1823.43,227.019 1824,227.048 1824.56,227.308 1825.13,225.79 1825.7,224.863 1826.27,226.45 1826.84,226.94 1827.41,229.377 1827.97,229.427 1828.54,228.494 1829.11,229.466 1829.68,231.595 1830.25,233.336 1830.82,230.842 1831.39,231.074 1831.95,227.991 1832.52,229.018 1833.09,231.205 1833.66,231.147 1834.23,226.02 1834.8,227.554 1835.36,225.487 1835.93,226.595 1836.5,226.031 1837.07,224.28 1837.64,226.558 1838.21,225.671 1838.77,227.999 1839.34,227.002 1839.91,228.104 1840.48,229.46 1841.05,229.698 1841.62,229.858 1842.18,231.803 1842.75,230.744 1843.32,229.93 1843.89,230.016 1844.46,230.144 1845.03,230.252 1845.59,230.388 1846.16,231.194 1846.73,230.048 1847.3,230.151 1847.87,231.174 1848.44,232.17 1849,231.887 1849.57,230.672 1850.14,230.639 1850.71,230.685 1851.28,233.758 1851.85,231.641 1852.41,231.423 1852.98,228.463 1853.55,229.795 1854.12,225.658 1854.69,225.961 1855.26,230.427 1855.82,231.333 1856.39,231.18 1856.96,229.075 1857.53,229.011 1858.1,227.231 1858.67,228.661 1859.23,228.914 1859.8,230.145 1860.37,229.374 1860.94,229.412 1861.51,228.776 1862.08,227.994 1862.64,229.313 1863.21,229.626 1863.78,229.813 1864.35,230.055 1864.92,227.171 1865.49,225.302 1866.05,225.823 1866.62,226.172 1867.19,227.582 1867.76,224.92 1868.33,224.398 1868.9,224.989 1869.46,226.315 1870.03,224.681 1870.6,226.181 1871.17,225.878 1871.74,226.331 1872.31,228.666 1872.87,229.954 1873.44,231.15 1874.01,232.267 1874.58,233.4 1875.15,232.192 1875.72,232.053 1876.28,234.009 1876.85,234.758 1877.42,234.421 1877.99,234.226 1878.56,232.956 1879.13,233.907 1879.69,233.822 1880.26,233.484 1880.83,234.173 1881.4,235.008 1881.97,234.759 1882.54,232.542 1883.1,230.488 1883.67,231.759 1884.24,231.064 1884.81,232.242 1885.38,230.982 1885.95,230.958 1886.51,229.885 1887.08,229.015 1887.65,230.113 1888.22,229.32 1888.79,231.747 1889.36,229.54 1889.92,231.636 1890.49,233.534 1891.06,233.284 1891.63,230.939 1892.2,232.969 1892.77,232.738 1893.33,233.714 1893.9,234.744 1894.47,232.201 1895.04,232.011 1895.61,231.825 1896.18,232.688 1896.74,233.616 1897.31,233.313 1897.88,233.141 1898.45,231.768 1899.02,229.746 1899.59,230.796 1900.16,227.81 1900.72,227.94 1901.29,229.402 1901.86,229.526 1902.43,229.687 1903,229.868 1903.57,228.804 1904.13,229.864 1904.7,228.943 1905.27,232.103 1905.84,234.02 1906.41,231.761 1906.98,232.011 1907.54,231.019 1908.11,231.996 1908.68,231.912 1909.25,232.9 1909.82,230.75 1910.39,231.658 1910.95,231.698 1911.52,230.468 1912.09,230.367 1912.66,230.316 1913.23,229.219 1913.8,229.035 1914.36,228.981 1914.93,228.619 1915.5,228.643 1916.07,229.601 1916.64,230.599 1917.21,230.458 1917.77,231.68 1918.34,230.552 1918.91,230.595 1919.48,232.531 1920.05,233.284 1920.62,232.914 1921.18,232.72 1921.75,232.448 1922.32,232.094 1922.89,233.036 1923.46,232.617 1924.03,232.406 1924.59,233.212 1925.16,232.656 1925.73,233.395 1926.3,230.19 1926.87,230.236 1927.44,232.202 1928,235.093 1928.57,234.583 1929.14,234.129 1929.71,233.759 1930.28,233.355 1930.85,234.06 1931.41,233.74 1931.98,232.429 1932.55,231.129 1933.12,228.931 1933.69,229.94 1934.26,229.879 1934.82,225.779 1935.39,228.069 1935.96,232.206 1936.53,231.026 1937.1,232.161 1937.67,230.909 1938.23,231.054 1938.8,231.966 1939.37,227.682 1939.94,227.834 1940.51,227.91 1941.08,228.223 1941.64,227.411 1942.21,226.865 1942.78,227.217 1943.35,227.598 1943.92,230.028 1944.49,230.157 1945.05,228.124 1945.62,228.219 1946.19,229.095 1946.76,227.026 1947.33,227.252 1947.9,227.246 1948.46,226.495 1949.03,227.715 1949.6,228.814 1950.17,228.198 1950.74,228.095 1951.31,230.531 1951.87,230.09 1952.44,231.131 1953.01,230.046 1953.58,230.011 1954.15,232.056 1954.72,229.848 1955.28,230.132 1955.85,227.426 1956.42,226.749 1956.99,225.075 1957.56,227.643 1958.13,227.878 1958.69,226.009 1959.26,226.323 1959.83,224.525 1960.4,223.75 1960.97,223.197 1961.54,226.964 1962.1,229.255 1962.67,229.373 1963.24,229.523 1963.81,229.63 1964.38,228.675 1964.95,228.903 1965.51,228.986 1966.08,230.302 1966.65,230.488 1967.22,230.517 1967.79,230.476 1968.36,229.651 1968.92,229.95 1969.49,230.955 1970.06,232.068 1970.63,231.108 1971.2,231.344 1971.77,231.317 1972.34,231.275 1972.9,231.256 1973.47,231.182 1974.04,231.287 1974.61,231.347 1975.18,230.255 1975.75,231.54 1976.31,232.721 1976.88,232.414 1977.45,234.494 1978.02,231.142 1978.59,230.126 1979.16,230.074 1979.72,230.206 1980.29,230.252 1980.86,229.313 1981.43,231.402 1982,230.459 1982.57,229.562 1983.13,230.751 1983.7,228.827 1984.27,230.05 1984.84,231.226 1985.41,232.111 1985.98,229.896 1986.54,231.071 1987.11,229.972 1987.68,230.15 1988.25,231.195 1988.82,231.353 1989.39,233.379 1989.95,233.299 1990.52,234.261 1991.09,234.04 1991.66,234.85 1992.23,236.515 1992.8,236.992 1993.36,235.724 1993.93,237.577 1994.5,236.823 1995.07,237.313 1995.64,237.799 1996.21,236.108 1996.77,235.941 1997.34,232.381 1997.91,234.264 1998.48,236.108 1999.05,235.969 1999.62,237.565 2000.18,238.919 2000.75,238.18 2001.32,237.365 2001.89,236.636 2002.46,235.066 2003.03,232.366 2003.59,232.172 2004.16,229.986 2004.73,227.733 2005.3,229.986 2005.87,230.031 2006.44,230.839 2007,229.586 2007.57,226.605 2008.14,227.894 2008.71,229.112 2009.28,226.943 2009.85,226.96 2010.41,226.002 2010.98,226.073 2011.55,225.432 2012.12,227.629 2012.69,228.652 2013.26,227.673 2013.82,226.761 2014.39,226.981 2014.96,228.241 2015.53,229.423 2016.1,229.407 2016.67,229.364 2017.23,227.36 2017.8,226.533 2018.37,226.723 2018.94,225.688 2019.51,227.988 2020.08,226.09 2020.64,225.182 2021.21,228.445 2021.78,230.718 2022.35,230.566 2022.92,230.687 2023.49,230.468 2024.05,229.302 2024.62,230.221 2025.19,229.214 2025.76,229.106 2026.33,228.264 2026.9,225.197 2027.46,225.533 2028.03,224.759 2028.6,224.265 2029.17,224.806 2029.74,222.104 2030.31,223.688 2030.87,223.278 2031.44,223.613 2032.01,224.233 2032.58,225.673 2033.15,226.023 2033.72,224.277 2034.28,221.631 2034.85,221.374 2035.42,222.238 2035.99,222.929 2036.56,225.749 2037.13,227.369 2037.69,234.054 2038.26,232.732 2038.83,234.696 2039.4,234.47 2039.97,232.232 2040.54,233.103 2041.11,233 2041.67,231.825 2042.24,231.767 2042.81,230.658 2043.38,232.949 2043.95,232.77 2044.52,234.791 2045.08,234.444 2045.65,234.222 2046.22,233.957 2046.79,233.796 2047.36,237.629 2047.93,237.188 2048.49,235.572 2049.06,233.115 2049.63,232.031 2050.2,233.105 2050.77,235.116 2051.34,232.746 2051.9,231.769 2052.47,232.588 2053.04,234.496 2053.61,236.316 2054.18,235.809 2054.75,234.62 2055.31,234.186 2055.88,231.789 2056.45,232.6 2057.02,234.554 2057.59,232.067 2058.16,232.801 2058.72,232.834 2059.29,231.621 2059.86,229.436 2060.43,229.212 2061,229.25 2061.57,229.252 2062.13,227.249 2062.7,229.483 2063.27,228.429 2063.84,226.733 2064.41,227.971 2064.98,227.101 2065.54,227.289 2066.11,229.418 2066.68,229.325 2067.25,229.647 2067.82,229.86 2068.39,229.764 2068.95,227.882 2069.52,229.122 2070.09,231.465 2070.66,231.543 2071.23,233.469 2071.8,233.382 2072.36,233.097 2072.93,234.07 2073.5,233.757 2074.07,232.361 2074.64,235.177 2075.21,234.708 2075.77,235.27 2076.34,237.008 2076.91,233.336 2077.48,230.183 2078.05,230.997 2078.62,230.916 2079.18,229.897 2079.75,230.033 2080.32,227.732 2080.89,226.862 2081.46,226.002 2082.03,226.081 2082.59,227.397 2083.16,229.77 2083.73,228.641 2084.3,229.664 2084.87,229.727 2085.44,229.614 2086,230.727 2086.57,231.661 2087.14,231.65 2087.71,230.375 2088.28,230.23 2088.85,230.298 2089.41,230.238 2089.98,230.261 2090.55,229.492 2091.12,230.447 2091.69,230.39 2092.26,227.495 2092.82,229.799 2093.39,229.802 2093.96,230.824 2094.53,230.596 2095.1,230.616 2095.67,230.447 2096.23,230.264 2096.8,230.403 2097.37,230.283 2097.94,229.171 2098.51,229.143 2099.08,227.12 2099.64,226.51 2100.21,225.749 2100.78,225.874 2101.35,225.029 2101.92,225.416 2102.49,226.682 2103.05,225.954 2103.62,228.359 2104.19,230.533 2104.76,231.79 2105.33,230.521 2105.9,228.453 2106.46,229.687 2107.03,231.883 2107.6,231.716 2108.17,230.239 2108.74,230.267 2109.31,231.523 2109.87,233.298 2110.44,233.2 2111.01,230.906 2111.58,230.735 2112.15,230.62 2112.72,231.75 2113.29,232.887 2113.85,230.663 2114.42,228.52 2114.99,230.811 2115.56,231.769 2116.13,230.471 2116.7,227.546 2117.26,228.903 2117.83,229.915 2118.4,230.982 2118.97,230.927 2119.54,230.657 2120.11,227.482 2120.67,228.803 2121.24,229.92 2121.81,232.023 2122.38,232.661 2122.95,232.334 2123.52,232.142 2124.08,230.924 2124.65,231.589 2125.22,230.424 2125.79,230.247 2126.36,231.324 2126.93,233.337 2127.49,234.006 2128.06,232.736 2128.63,231.452 2129.2,232.42 2129.77,233.064 2130.34,235.116 2130.9,234.658 2131.47,234.226 2132.04,231.847 2132.61,232.426 2133.18,232.348 2133.75,233.164 2134.31,232.031 2134.88,234.816 2135.45,234.369 2136.02,232.068 2136.59,230.792 2137.16,230.792 2137.72,228.593 2138.29,229.551 2138.86,229.631 2139.43,228.681 2140,229.89 2140.57,230.712 2141.13,229.665 2141.7,230.383 2142.27,229.316 2142.84,230.334 2143.41,230.258 2143.98,230.093 2144.54,230.07 2145.11,229.74 2145.68,229.753 2146.25,227.887 2146.82,229.138 2147.39,226.095 2147.95,227.575 2148.52,227.628 2149.09,227.91 2149.66,227.017 2150.23,228.488 2150.8,227.54 2151.36,230.684 2151.93,231.495 2152.5,231.38 2153.07,231.126 2153.64,231.099 2154.21,233.312 2154.77,232.145 2155.34,233.169 2155.91,232.861 2156.48,229.358 2157.05,229.199 2157.62,228.03 2158.18,228.064 2158.75,229.12 2159.32,228.984 2159.89,227.942 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.022\n  with uncertainty of ± 0.0019882691432096446\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0094 ± (0.00340108, 0.00339133) (MC)\n  95% confidence interval: [-4.01621, -4.00276]) (MC)\n  linear error propagation: -4.00965 ± 0.00339985\n  |δ_y| = |0.00250591| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.009404269699356, val_l = 0.006803681067979461, val_u = 0.006643590512400266)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip650\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip651\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip652\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1138.04 2211.02,1138.04 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,961.634 2211.02,961.634 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,785.229 2211.02,785.229 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,608.824 2211.02,608.824 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,432.419 2211.02,432.419 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,256.015 2211.02,256.015 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1138.04 365.751,1138.04 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,961.634 365.751,961.634 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,785.229 365.751,785.229 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,608.824 365.751,608.824 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,432.419 365.751,432.419 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,256.015 365.751,256.015 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M298.909 1123.84 Q295.298 1123.84 293.469 1127.4 Q291.664 1130.94 291.664 1138.07 Q291.664 1145.18 293.469 1148.74 Q295.298 1152.29 298.909 1152.29 Q302.543 1152.29 304.349 1148.74 Q306.177 1145.18 306.177 1138.07 Q306.177 1130.94 304.349 1127.4 Q302.543 1123.84 298.909 1123.84 M298.909 1120.13 Q304.719 1120.13 307.775 1124.74 Q310.853 1129.32 310.853 1138.07 Q310.853 1146.8 307.775 1151.41 Q304.719 1155.99 298.909 1155.99 Q293.099 1155.99 290.02 1151.41 Q286.964 1146.8 286.964 1138.07 Q286.964 1129.32 290.02 1124.74 Q293.099 1120.13 298.909 1120.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M259.557 974.979 L267.196 974.979 L267.196 948.613 L258.886 950.28 L258.886 946.02 L267.15 944.354 L271.826 944.354 L271.826 974.979 L279.465 974.979 L279.465 978.914 L259.557 978.914 L259.557 974.979 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 947.432 Q295.298 947.432 293.469 950.997 Q291.664 954.539 291.664 961.668 Q291.664 968.775 293.469 972.34 Q295.298 975.881 298.909 975.881 Q302.543 975.881 304.349 972.34 Q306.177 968.775 306.177 961.668 Q306.177 954.539 304.349 950.997 Q302.543 947.432 298.909 947.432 M298.909 943.729 Q304.719 943.729 307.775 948.335 Q310.853 952.919 310.853 961.668 Q310.853 970.395 307.775 975.002 Q304.719 979.585 298.909 979.585 Q293.099 979.585 290.02 975.002 Q286.964 970.395 286.964 961.668 Q286.964 952.919 290.02 948.335 Q293.099 943.729 298.909 943.729 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M262.775 798.574 L279.094 798.574 L279.094 802.509 L257.15 802.509 L257.15 798.574 Q259.812 795.819 264.395 791.19 Q269.002 786.537 270.182 785.194 Q272.428 782.671 273.307 780.935 Q274.21 779.176 274.21 777.486 Q274.21 774.731 272.266 772.995 Q270.344 771.259 267.242 771.259 Q265.043 771.259 262.59 772.023 Q260.159 772.787 257.381 774.338 L257.381 769.616 Q260.205 768.481 262.659 767.903 Q265.113 767.324 267.15 767.324 Q272.52 767.324 275.715 770.009 Q278.909 772.694 278.909 777.185 Q278.909 779.315 278.099 781.236 Q277.312 783.134 275.205 785.727 Q274.627 786.398 271.525 789.616 Q268.423 792.81 262.775 798.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 771.028 Q295.298 771.028 293.469 774.592 Q291.664 778.134 291.664 785.264 Q291.664 792.37 293.469 795.935 Q295.298 799.477 298.909 799.477 Q302.543 799.477 304.349 795.935 Q306.177 792.37 306.177 785.264 Q306.177 778.134 304.349 774.592 Q302.543 771.028 298.909 771.028 M298.909 767.324 Q304.719 767.324 307.775 771.93 Q310.853 776.514 310.853 785.264 Q310.853 793.99 307.775 798.597 Q304.719 803.18 298.909 803.18 Q293.099 803.18 290.02 798.597 Q286.964 793.99 286.964 785.264 Q286.964 776.514 290.02 771.93 Q293.099 767.324 298.909 767.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M272.914 607.47 Q276.27 608.188 278.145 610.456 Q280.043 612.725 280.043 616.058 Q280.043 621.174 276.525 623.975 Q273.006 626.775 266.525 626.775 Q264.349 626.775 262.034 626.336 Q259.742 625.919 257.289 625.063 L257.289 620.549 Q259.233 621.683 261.548 622.262 Q263.863 622.84 266.386 622.84 Q270.784 622.84 273.076 621.104 Q275.39 619.368 275.39 616.058 Q275.39 613.002 273.238 611.289 Q271.108 609.553 267.289 609.553 L263.261 609.553 L263.261 605.711 L267.474 605.711 Q270.923 605.711 272.752 604.345 Q274.58 602.956 274.58 600.364 Q274.58 597.702 272.682 596.29 Q270.807 594.854 267.289 594.854 Q265.367 594.854 263.168 595.271 Q260.969 595.688 258.33 596.567 L258.33 592.401 Q260.992 591.66 263.307 591.29 Q265.645 590.919 267.705 590.919 Q273.029 590.919 276.131 593.35 Q279.233 595.757 279.233 599.877 Q279.233 602.748 277.59 604.739 Q275.946 606.706 272.914 607.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 594.623 Q295.298 594.623 293.469 598.188 Q291.664 601.729 291.664 608.859 Q291.664 615.965 293.469 619.53 Q295.298 623.072 298.909 623.072 Q302.543 623.072 304.349 619.53 Q306.177 615.965 306.177 608.859 Q306.177 601.729 304.349 598.188 Q302.543 594.623 298.909 594.623 M298.909 590.919 Q304.719 590.919 307.775 595.526 Q310.853 600.109 310.853 608.859 Q310.853 617.586 307.775 622.192 Q304.719 626.775 298.909 626.775 Q293.099 626.775 290.02 622.192 Q286.964 617.586 286.964 608.859 Q286.964 600.109 290.02 595.526 Q293.099 590.919 298.909 590.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M271.594 419.213 L259.789 437.662 L271.594 437.662 L271.594 419.213 M270.367 415.139 L276.247 415.139 L276.247 437.662 L281.177 437.662 L281.177 441.551 L276.247 441.551 L276.247 449.699 L271.594 449.699 L271.594 441.551 L255.992 441.551 L255.992 437.037 L270.367 415.139 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 418.218 Q295.298 418.218 293.469 421.783 Q291.664 425.324 291.664 432.454 Q291.664 439.561 293.469 443.125 Q295.298 446.667 298.909 446.667 Q302.543 446.667 304.349 443.125 Q306.177 439.561 306.177 432.454 Q306.177 425.324 304.349 421.783 Q302.543 418.218 298.909 418.218 M298.909 414.514 Q304.719 414.514 307.775 419.121 Q310.853 423.704 310.853 432.454 Q310.853 441.181 307.775 445.787 Q304.719 450.371 298.909 450.371 Q293.099 450.371 290.02 445.787 Q286.964 441.181 286.964 432.454 Q286.964 423.704 290.02 419.121 Q293.099 414.514 298.909 414.514 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M258.793 238.735 L277.15 238.735 L277.15 242.67 L263.076 242.67 L263.076 251.142 Q264.094 250.795 265.113 250.633 Q266.131 250.447 267.15 250.447 Q272.937 250.447 276.316 253.619 Q279.696 256.79 279.696 262.207 Q279.696 267.785 276.224 270.887 Q272.752 273.966 266.432 273.966 Q264.256 273.966 261.988 273.595 Q259.742 273.225 257.335 272.484 L257.335 267.785 Q259.418 268.92 261.641 269.475 Q263.863 270.031 266.34 270.031 Q270.344 270.031 272.682 267.924 Q275.02 265.818 275.02 262.207 Q275.02 258.596 272.682 256.489 Q270.344 254.383 266.34 254.383 Q264.465 254.383 262.59 254.799 Q260.738 255.216 258.793 256.096 L258.793 238.735 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 241.813 Q295.298 241.813 293.469 245.378 Q291.664 248.92 291.664 256.049 Q291.664 263.156 293.469 266.721 Q295.298 270.262 298.909 270.262 Q302.543 270.262 304.349 266.721 Q306.177 263.156 306.177 256.049 Q306.177 248.92 304.349 245.378 Q302.543 241.813 298.909 241.813 M298.909 238.11 Q304.719 238.11 307.775 242.716 Q310.853 247.299 310.853 256.049 Q310.853 264.776 307.775 269.383 Q304.719 273.966 298.909 273.966 Q293.099 273.966 290.02 269.383 Q286.964 264.776 286.964 256.049 Q286.964 247.299 290.02 242.716 Q293.099 238.11 298.909 238.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1008.06 400.199,888.646 400.786,779.082 401.372,678.702 401.958,586.896 402.545,628.027 403.131,659.141 403.718,579.918 404.304,507.704 404.891,441.826 405.477,380.68 406.063,412.077 406.65,512.375 407.236,456.524 407.823,407.079 408.409,361.65 408.995,322.329 409.582,343.033 410.168,360.704 410.755,329.66 411.341,300.441 411.927,276.578 412.514,254.855 413.1,235.589 413.687,219.895 414.273,242.957 414.86,231.673 415.446,253.371 416.032,274.615 416.619,267.495 417.205,260.919 417.792,281.573 418.378,278.937 418.964,299.432 419.551,297.554 420.137,298.377 420.724,299.748 421.31,320.508 421.896,324.158 422.483,329.948 423.069,336.196 423.656,343.46 424.242,351.247 424.829,360.443 425.415,394.153 426.001,403.528 426.588,423.301 427.174,444.017 427.761,453.788 428.347,463.508 428.933,483.076 429.52,518.502 430.106,535.314 430.693,551.866 431.279,575.74 431.865,584.742 432.452,600.102 433.038,615.424 433.625,629.594 434.211,638.261 434.798,647.158 435.384,661.453 435.97,686.258 436.557,699.774 437.143,707.87 437.73,725.706 438.316,738.162 438.902,746.224 439.489,771.743 440.075,800.442 440.662,811.644 441.248,822.513 441.835,844.53 442.421,857.951 443.007,878.213 443.594,890.478 444.18,902.428 444.767,917.478 445.353,922.171 445.939,930.415 446.526,938.032 447.112,946.069 447.699,951.363 448.285,965.148 448.871,973.197 449.458,978.417 450.044,988.897 450.631,998.525 451.217,1002.63 451.804,1014.64 452.39,1018.42 452.976,1026.92 453.563,1035.16 454.149,1043.49 454.736,1046.85 455.322,1050.16 455.908,1055.91 456.495,1063.66 457.081,1066.58 457.668,1071.84 458.254,1081.4 458.84,1086.08 459.427,1088.55 460.013,1088.77 460.6,1099.87 461.186,1106.55 461.773,1108.69 462.359,1112.61 462.945,1109.07 463.532,1113.79 464.118,1118.64 464.705,1129.01 465.291,1128.63 465.877,1132.63 466.464,1140.56 467.05,1144.21 467.637,1145.68 468.223,1150.72 468.809,1159.54 469.396,1162.5 469.982,1167.44 470.569,1171.84 471.155,1175.93 471.742,1176.15 472.328,1178.54 472.914,1179.1 473.501,1179.76 474.087,1184.06 474.674,1187.97 475.26,1193.58 475.846,1195.63 476.433,1195.57 477.019,1199.14 477.606,1199.49 478.192,1201.12 478.778,1202.64 479.365,1202.55 479.951,1202.95 480.538,1205.1 481.124,1207.04 481.711,1210.38 482.297,1213.35 482.883,1213.28 483.47,1213.13 484.056,1213.38 484.643,1215.09 485.229,1214.52 485.815,1217.81 486.402,1219.21 486.988,1218.61 487.575,1218.55 488.161,1218.33 488.748,1221.34 489.334,1224.26 489.92,1223.35 490.507,1221.74 491.093,1224.65 491.68,1224.32 492.266,1224.16 492.852,1223.89 493.439,1225.48 494.025,1230.02 494.612,1236.01 495.198,1238.45 495.784,1237.48 496.371,1236.95 496.957,1236.15 497.544,1237.16 498.13,1231.75 498.717,1231.07 499.303,1230.93 499.889,1235.44 500.476,1236.63 501.062,1240.59 501.649,1239.79 502.235,1243.42 502.821,1244.06 503.408,1243.18 503.994,1243.69 504.581,1243.01 505.167,1242.11 505.753,1242.61 506.34,1240.25 506.926,1242.37 507.513,1240.1 508.099,1239.16 508.686,1237.08 509.272,1238.18 509.858,1240.65 510.445,1240.13 511.031,1240.9 511.618,1241.34 512.204,1242.04 512.79,1239.74 513.377,1239.34 513.963,1241.77 514.55,1245.31 515.136,1244.47 515.722,1245.28 516.309,1247.34 516.895,1250.53 517.482,1250.51 518.068,1247.71 518.655,1246.89 519.241,1247.42 519.827,1246.22 520.414,1245.1 521,1245.41 521.587,1246.02 522.173,1247.83 522.759,1248.17 523.346,1248.48 523.932,1244.44 524.519,1242.34 525.105,1241.52 525.691,1238.13 526.278,1237.47 526.864,1236.98 527.451,1237.85 528.037,1238.97 528.624,1238.25 529.21,1240.59 529.796,1241.13 530.383,1241.95 530.969,1245.66 531.556,1244.46 532.142,1240.49 532.728,1244.04 533.315,1244.93 533.901,1246.85 534.488,1248.61 535.074,1245.95 535.661,1245.15 536.247,1245.78 536.833,1244.92 537.42,1245.41 538.006,1243.18 538.593,1243.81 539.179,1243.33 539.765,1239.67 540.352,1237.9 540.938,1237.4 541.525,1238.26 542.111,1237.68 542.697,1238.41 543.284,1237.91 543.87,1233.39 544.457,1232.92 545.043,1231.12 545.63,1225.06 546.216,1222.44 546.802,1221.16 547.389,1221.65 547.975,1223.28 548.562,1221.93 549.148,1226.75 549.734,1227.32 550.321,1230.08 550.907,1231.18 551.494,1230.9 552.08,1232.37 552.666,1228.84 553.253,1227.13 553.839,1226.93 554.426,1227.12 555.012,1228.67 555.599,1228.71 556.185,1228.77 556.771,1228.9 557.358,1228.9 557.944,1228.95 558.531,1234.71 559.117,1234.63 559.703,1234.73 560.29,1234.43 560.876,1234.39 561.463,1236.53 562.049,1234.5 562.635,1239.56 563.222,1237.39 563.808,1237 564.395,1239.41 564.981,1238.7 565.568,1238.03 566.154,1237.54 566.74,1235.7 567.327,1236.94 567.913,1234.98 568.5,1228.74 569.086,1231.2 569.672,1235.01 570.259,1234.23 570.845,1233.8 571.432,1233.27 572.018,1231.19 572.605,1230.63 573.191,1230.65 573.777,1227.35 574.364,1228.81 574.95,1230.06 575.537,1229.82 576.123,1227.95 576.709,1226.35 577.296,1227.88 577.882,1226.21 578.469,1229.01 579.055,1230.33 579.641,1232.55 580.228,1233.75 580.814,1233.24 581.401,1235.71 581.987,1232.32 582.574,1228.83 583.16,1228.35 583.746,1228.29 584.333,1227.99 584.919,1229.06 585.506,1228.44 586.092,1228.27 586.678,1230.54 587.265,1232.84 587.851,1230.73 588.438,1230.25 589.024,1227.01 589.61,1230.85 590.197,1227.91 590.783,1230.71 591.37,1228.77 591.956,1231.32 592.543,1232.18 593.129,1231.92 593.715,1231.49 594.302,1232.39 594.888,1233.16 595.475,1232.46 596.061,1234.44 596.647,1234 597.234,1234.92 597.82,1234.07 598.407,1235.98 598.993,1235.29 599.579,1235.7 600.166,1234.71 600.752,1232.59 601.339,1234.75 601.925,1235.66 602.512,1236.34 603.098,1235.36 603.684,1234.64 604.271,1234.13 604.857,1236.47 605.444,1235.43 606.03,1234.55 606.616,1230.81 607.203,1228.79 607.789,1230.1 608.376,1231.22 608.962,1230.7 609.548,1228.88 610.135,1225.63 610.721,1223.98 611.308,1226.82 611.894,1224.95 612.481,1224.64 613.067,1224.59 613.653,1222.78 614.24,1224.28 614.826,1225.5 615.413,1223.94 615.999,1226.37 616.585,1224.69 617.172,1223.12 617.758,1225.62 618.345,1225.32 618.931,1225.24 619.518,1223.25 620.104,1224.49 620.69,1225.6 621.277,1223.81 621.863,1225.24 622.45,1224.95 623.036,1225.9 623.622,1226.7 624.209,1226.32 624.795,1224.62 625.382,1224.47 625.968,1222.58 626.554,1222.43 627.141,1221.08 627.727,1219.57 628.314,1219.54 628.9,1220.92 629.487,1217.9 630.073,1219.19 630.659,1217.61 631.246,1216.47 631.832,1217.99 632.419,1216.61 633.005,1216.68 633.591,1216.66 634.178,1216.73 634.764,1215.25 635.351,1215.35 635.937,1216.97 636.523,1215.67 637.11,1221.44 637.696,1221.22 638.283,1223.87 638.869,1222 639.456,1219 640.042,1219.14 640.628,1219.14 641.215,1220.47 641.801,1220.18 642.388,1220.13 642.974,1221.23 643.56,1219.94 644.147,1221.37 644.733,1220.92 645.32,1221.06 645.906,1222.65 646.492,1222.67 647.079,1221.03 647.665,1218.13 648.252,1215.05 648.838,1213.76 649.425,1213.87 650.011,1211.05 650.597,1211.45 651.184,1210.62 651.77,1212.37 652.357,1213.78 652.943,1213.95 653.529,1212.72 654.116,1211.57 654.702,1213.25 655.289,1215.18 655.875,1215.56 656.462,1217.03 657.048,1219.91 657.634,1219.94 658.221,1224.04 658.807,1222.1 659.394,1218.79 659.98,1219.12 660.566,1214.98 661.153,1219.58 661.739,1222.46 662.326,1225.25 662.912,1227.89 663.498,1227.08 664.085,1223.39 664.671,1223.12 665.258,1224.12 665.844,1222.15 666.431,1222.02 667.017,1221.91 667.603,1223.14 668.19,1223.98 668.776,1223.69 669.363,1226.46 669.949,1225.87 670.535,1223.95 671.122,1224.83 671.708,1224.07 672.295,1220.89 672.881,1220.62 673.467,1219.13 674.054,1220.26 674.64,1218.42 675.227,1220.95 675.813,1220.8 676.4,1219.32 676.986,1220.48 677.572,1217.41 678.159,1214.61 678.745,1213.2 679.332,1211.93 679.918,1212.39 680.504,1212.68 681.091,1215.7 681.677,1215.76 682.264,1216 682.85,1217.13 683.436,1215.89 684.023,1218.69 684.609,1218.61 685.196,1219.9 685.782,1219.63 686.369,1216.56 686.955,1214.94 687.541,1215.04 688.128,1218.94 688.714,1220.2 689.301,1221.51 689.887,1221.05 690.473,1220.7 691.06,1220.54 691.646,1221.41 692.233,1221.18 692.819,1222.19 693.405,1220.25 693.992,1219.88 694.578,1219.78 695.165,1220.84 695.751,1220.47 696.338,1217.5 696.924,1217.16 697.51,1214.22 698.097,1213.95 698.683,1215.6 699.27,1215.54 699.856,1215.48 700.442,1213.89 701.029,1213.64 701.615,1219.81 702.202,1222.26 702.788,1221.93 703.375,1218.46 703.961,1219.45 704.547,1217.79 705.134,1216.15 705.72,1217.28 706.307,1218.75 706.893,1221.32 707.479,1224.04 708.066,1223.68 708.652,1223.28 709.239,1218.78 709.825,1215.69 710.411,1215.34 710.998,1216.96 711.584,1219.57 712.171,1222.2 712.757,1221.91 713.344,1221.5 713.93,1218.22 714.516,1217.83 715.103,1218.95 715.689,1218.95 716.276,1218.62 716.862,1218.19 717.448,1218.39 718.035,1215.58 718.621,1211.46 719.208,1213.25 719.794,1211.67 720.38,1211.85 720.967,1210.67 721.553,1210.89 722.14,1210.92 722.726,1211.07 723.313,1210.04 723.899,1211.94 724.485,1212.05 725.072,1213.57 725.658,1213.37 726.245,1213.43 726.831,1213.69 727.417,1216.74 728.004,1219.26 728.59,1223.15 729.177,1220.95 729.763,1219.27 730.349,1217.54 730.936,1217.46 731.522,1219.96 732.109,1221.12 732.695,1223.54 733.282,1223.11 733.868,1224.01 734.454,1223.59 735.041,1223.03 735.627,1221.31 736.214,1222.33 736.8,1221.97 737.386,1219.66 737.973,1219.12 738.559,1214.41 739.146,1215.59 739.732,1212.59 740.318,1211.29 740.905,1210.01 741.491,1210.56 742.078,1210.74 742.664,1207.93 743.251,1209.82 743.837,1211.47 744.423,1210.1 745.01,1211.69 745.596,1211.82 746.183,1211.78 746.769,1211.73 747.355,1211.85 747.942,1210.32 748.528,1210.4 749.115,1211.91 749.701,1212.03 750.288,1210.5 750.874,1212.26 751.46,1210.75 752.047,1209.71 752.633,1211.79 753.22,1210.46 753.806,1212 754.392,1212.36 754.979,1214.04 755.565,1214.06 756.152,1214.23 756.738,1209.9 757.324,1212.91 757.911,1218.46 758.497,1218.29 759.084,1218.32 759.67,1216.93 760.257,1216.77 760.843,1219.45 761.429,1217.71 762.016,1221.87 762.602,1223.98 763.189,1220.76 763.775,1223.17 764.361,1222.76 764.948,1222.67 765.534,1221.92 766.121,1224.2 766.707,1219.48 767.293,1216.22 767.88,1215.77 768.466,1215.95 769.053,1217.04 769.639,1215.28 770.226,1216.82 770.812,1219.24 771.398,1219.09 771.985,1218.8 772.571,1221.53 773.158,1222.77 773.744,1220.86 774.33,1219 774.917,1225.79 775.503,1222.21 776.09,1220.33 776.676,1219.86 777.262,1216.6 777.849,1213.57 778.435,1209.09 779.022,1210.74 779.608,1209.44 780.195,1211.08 780.781,1215.52 781.367,1216.54 781.954,1218.98 782.54,1218.65 783.127,1218.22 783.713,1218.15 784.299,1216.16 784.886,1213.28 785.472,1211.96 786.059,1216.32 786.645,1219.1 787.232,1218.46 787.818,1218.03 788.404,1217.48 788.991,1217.28 789.577,1215.56 790.164,1216.95 790.75,1218.13 791.336,1219.01 791.923,1218.98 792.509,1218.69 793.096,1215.56 793.682,1214.05 794.268,1215.68 794.855,1215.52 795.441,1213.82 796.028,1213.39 796.614,1216.36 797.201,1216.33 797.787,1217.31 798.373,1216.81 798.96,1213.76 799.546,1214.95 800.133,1216.17 800.719,1214.57 801.305,1215.82 801.892,1215.84 802.478,1214.06 803.065,1214.11 803.651,1212.61 804.237,1209.66 804.824,1212.79 805.41,1211.29 805.997,1212.73 806.583,1211.24 807.17,1210 807.756,1211.58 808.342,1210.26 808.929,1209.01 809.515,1207.71 810.102,1211.13 810.688,1213.87 811.274,1212.03 811.861,1211.84 812.447,1208.7 813.034,1210.28 813.62,1209.05 814.206,1208.67 814.793,1208.68 815.379,1210.2 815.966,1208.67 816.552,1207.2 817.139,1204.56 817.725,1200.71 818.311,1200 818.898,1197.57 819.484,1198.52 820.071,1200.87 820.657,1200.34 821.243,1199.8 821.83,1207.21 822.416,1207.56 823.003,1209.22 823.589,1208.15 824.175,1208.67 824.762,1204.72 825.348,1205.13 825.935,1207.25 826.521,1209.05 827.108,1207.63 827.694,1207.9 828.28,1211.35 828.867,1212.92 829.453,1211.62 830.04,1211.94 830.626,1211.97 831.212,1213.24 831.799,1217.43 832.385,1215.74 832.972,1216.74 833.558,1217.66 834.145,1215.79 834.731,1212.57 835.317,1212.82 835.904,1213.99 836.49,1214.94 837.077,1212.12 837.663,1211.92 838.249,1212.42 838.836,1212.17 839.422,1211.96 840.009,1209.22 840.595,1207.93 841.181,1207.94 841.768,1206.66 842.354,1208.51 842.941,1211.79 843.527,1210.32 844.114,1207.76 844.7,1206.65 845.286,1209.87 845.873,1209.85 846.459,1211.47 847.046,1208.77 847.632,1208.98 848.218,1206.27 848.805,1206.49 849.391,1205.24 849.978,1212.73 850.564,1209.98 851.15,1212.95 851.737,1214.39 852.323,1215.97 852.91,1217.22 853.496,1218.09 854.083,1217.81 854.669,1215.91 855.255,1212.73 855.842,1212.45 856.428,1207.96 857.015,1208.06 857.601,1208.41 858.187,1206.52 858.774,1206.43 859.36,1208.02 859.947,1208.1 860.533,1205.74 861.119,1205.8 861.706,1206.28 862.292,1206.68 862.879,1205.47 863.465,1205.65 864.052,1204.32 864.638,1204.87 865.224,1206.62 865.811,1208.2 866.397,1211.27 866.984,1209.94 867.57,1209.85 868.156,1208.76 868.743,1207.37 869.329,1208.82 869.916,1210.28 870.502,1210.58 871.089,1212.04 871.675,1211.96 872.261,1210.65 872.848,1212.38 873.434,1213.73 874.021,1214.95 874.607,1219.31 875.193,1221.6 875.78,1221.18 876.366,1223.57 876.953,1225.74 877.539,1225.04 878.125,1224.58 878.712,1225.02 879.298,1224.19 879.885,1221.96 880.471,1222.58 881.058,1222.22 881.644,1220.07 882.23,1219.67 882.817,1219.21 883.403,1220.27 883.99,1216.77 884.576,1216.35 885.162,1214.42 885.749,1214.43 886.335,1217.44 886.922,1211.15 887.508,1213.74 888.094,1212.02 888.681,1210.63 889.267,1210.71 889.854,1213.69 890.44,1213.32 891.027,1214.65 891.613,1212.91 892.199,1217.25 892.786,1218.32 893.372,1215.18 893.959,1212.26 894.545,1210.97 895.131,1210.87 895.718,1209.34 896.304,1210.77 896.891,1210.77 897.477,1210.7 898.063,1209.17 898.65,1207.73 899.236,1207.69 899.823,1209.36 900.409,1207.8 900.996,1203.54 901.582,1204.16 902.168,1204.5 902.755,1207.5 903.341,1207.58 903.928,1207.71 904.514,1207.71 905.1,1207.85 905.687,1206.45 906.273,1210.97 906.86,1209.96 907.446,1211.35 908.032,1212.6 908.619,1215.13 909.205,1214.79 909.792,1215.99 910.378,1215.97 910.965,1216.98 911.551,1216.28 912.137,1216 912.724,1218.62 913.31,1214.04 913.897,1212.25 914.483,1212.29 915.069,1213.38 915.656,1214.82 916.242,1215.86 916.829,1214.07 917.415,1212.48 918.002,1215.35 918.588,1216.46 919.174,1216.05 919.761,1212.8 920.347,1212.77 920.934,1210.02 921.52,1208.59 922.106,1205.96 922.693,1207.76 923.279,1209.29 923.866,1212.26 924.452,1209.32 925.038,1212.35 925.625,1210.76 926.211,1212.38 926.798,1212.36 927.384,1213.52 927.971,1211.79 928.557,1211.78 929.143,1212.76 929.73,1212.74 930.316,1211.02 930.903,1210.93 931.489,1213.77 932.075,1212.09 932.662,1210.5 933.248,1208.94 933.835,1206.11 934.421,1206.64 935.007,1208.18 935.594,1209.63 936.18,1208.53 936.767,1207.24 937.353,1205.89 937.94,1206.16 938.526,1206.11 939.112,1204.92 939.699,1203.87 940.285,1204.21 940.872,1201.44 941.458,1201.58 942.044,1201.74 942.631,1203.53 943.217,1203.73 943.804,1199.7 944.39,1201.69 944.976,1202.4 945.563,1201.27 946.149,1200.4 946.736,1200.79 947.322,1198.16 947.909,1198.83 948.495,1200.9 949.081,1204.45 949.668,1203.53 950.254,1202.33 950.841,1201.11 951.427,1201.78 952.013,1203.97 952.6,1204.43 953.186,1206.24 953.773,1205.01 954.359,1205.05 954.945,1205.61 955.532,1205.81 956.118,1204.55 956.705,1200.66 957.291,1201.32 957.878,1203.36 958.464,1205.55 959.05,1207.06 959.637,1207.18 960.223,1205.77 960.81,1203.09 961.396,1201.92 961.982,1203.76 962.569,1205.55 963.155,1205.94 963.742,1204.85 964.328,1203.48 964.915,1203.88 965.501,1205.76 966.087,1204.43 966.674,1204.91 967.26,1205.23 967.847,1202.38 968.433,1203.96 969.019,1209.94 969.606,1207.28 970.192,1206.19 970.779,1206.36 971.365,1206.43 971.951,1206.45 972.538,1208.1 973.124,1209.74 973.711,1212.9 974.297,1214.04 974.884,1213.93 975.47,1213.79 976.056,1210.73 976.643,1215.21 977.229,1209.24 977.816,1210.46 978.402,1211.81 978.988,1211.64 979.575,1215.67 980.161,1215.18 980.748,1214.71 981.334,1210.42 981.92,1211.9 982.507,1214.92 983.093,1216.07 983.68,1218.55 984.266,1217.73 984.853,1215.9 985.439,1215.67 986.025,1213.77 986.612,1213.72 987.198,1216.46 987.785,1214.52 988.371,1211.42 988.957,1211.38 989.544,1211.33 990.13,1214.35 990.717,1215.28 991.303,1216.71 991.889,1214.71 992.476,1213.02 993.062,1215.81 993.649,1213.99 994.235,1216.71 994.822,1215.96 995.408,1217.28 995.994,1216.99 996.581,1216.24 997.167,1216.14 997.754,1212.72 998.34,1211.13 998.926,1211.14 999.513,1213.74 1000.1,1208.97 1000.69,1205.96 1001.27,1204.62 1001.86,1203.43 1002.44,1203.99 1003.03,1201.77 1003.62,1202.02 1004.2,1201.6 1004.79,1200.51 1005.38,1202.36 1005.96,1202.67 1006.55,1204.43 1007.14,1205.93 1007.72,1207.42 1008.31,1211.75 1008.9,1211.97 1009.48,1213.49 1010.07,1214.58 1010.65,1212.69 1011.24,1209.64 1011.83,1209.53 1012.41,1205.36 1013,1205.6 1013.59,1202.67 1014.17,1206.2 1014.76,1209.11 1015.35,1210.57 1015.93,1212.19 1016.52,1209.17 1017.11,1210.51 1017.69,1210.41 1018.28,1211.9 1018.86,1211.83 1019.45,1209.9 1020.04,1208.37 1020.62,1205.5 1021.21,1205.81 1021.8,1206.02 1022.38,1210.63 1022.97,1213.58 1023.56,1216.24 1024.14,1218.79 1024.73,1218.25 1025.32,1214.63 1025.9,1214.71 1026.49,1212.92 1027.07,1209.98 1027.66,1210.07 1028.25,1211.37 1028.83,1211.27 1029.42,1211.38 1030.01,1209.74 1030.59,1208.3 1031.18,1210.05 1031.77,1208.34 1032.35,1206.87 1032.94,1205.29 1033.52,1203.92 1034.11,1204.01 1034.7,1204.43 1035.28,1204.93 1035.87,1206.5 1036.46,1206.64 1037.04,1211.01 1037.63,1210.9 1038.22,1210.69 1038.8,1206.1 1039.39,1204.98 1039.98,1206.82 1040.56,1205.62 1041.15,1207.34 1041.73,1209.17 1042.32,1210.72 1042.91,1213.13 1043.49,1211.35 1044.08,1214.07 1044.67,1213.86 1045.25,1214.97 1045.84,1213.09 1046.43,1211.82 1047.01,1213.42 1047.6,1214.74 1048.19,1211.68 1048.77,1213.19 1049.36,1210.03 1049.94,1211.34 1050.53,1212.4 1051.12,1212.29 1051.7,1209.32 1052.29,1206.3 1052.88,1205.17 1053.46,1207.13 1054.05,1210.13 1054.64,1208.71 1055.22,1207.31 1055.81,1206.22 1056.39,1206.09 1056.98,1207.6 1057.57,1207.78 1058.15,1209.53 1058.74,1206.76 1059.33,1205.51 1059.91,1207.19 1060.5,1208.48 1061.09,1207.28 1061.67,1208.9 1062.26,1209.12 1062.85,1209 1063.43,1210.19 1064.02,1211.43 1064.6,1212.73 1065.19,1212.37 1065.78,1215.22 1066.36,1213.26 1066.95,1214.43 1067.54,1219.79 1068.12,1220.58 1068.71,1221.29 1069.3,1219.22 1069.88,1218.81 1070.47,1218.41 1071.06,1218.14 1071.64,1219.13 1072.23,1218.56 1072.81,1218.04 1073.4,1217.32 1073.99,1215.65 1074.57,1215.31 1075.16,1212.39 1075.75,1209.24 1076.33,1209.19 1076.92,1206.08 1077.51,1204.9 1078.09,1205.12 1078.68,1205.1 1079.26,1205.17 1079.85,1202.16 1080.44,1204.05 1081.02,1204.48 1081.61,1203.6 1082.2,1204.02 1082.78,1201.27 1083.37,1200.32 1083.96,1202.55 1084.54,1201.57 1085.13,1200.12 1085.72,1199.1 1086.3,1196.45 1086.89,1197.22 1087.47,1196.48 1088.06,1195.75 1088.65,1197.9 1089.23,1198.39 1089.82,1199.04 1090.41,1201.06 1090.99,1202.92 1091.58,1201.56 1092.17,1200.51 1092.75,1202.38 1093.34,1204.45 1093.93,1204.76 1094.51,1207.64 1095.1,1206.37 1095.68,1206.75 1096.27,1208.55 1096.86,1206.94 1097.44,1211.12 1098.03,1209.31 1098.62,1210.74 1099.2,1210.85 1099.79,1209.3 1100.38,1208.09 1100.96,1206.65 1101.55,1204.03 1102.14,1204.2 1102.72,1203.22 1103.31,1201.98 1103.89,1206.8 1104.48,1206.98 1105.07,1208.69 1105.65,1210.17 1106.24,1208.73 1106.83,1211.72 1107.41,1213.2 1108,1208.76 1108.59,1210.37 1109.17,1211.73 1109.76,1207.18 1110.34,1204.6 1110.93,1203.58 1111.52,1203.95 1112.1,1204.43 1112.69,1204.56 1113.28,1204.67 1113.86,1206.56 1114.45,1206.88 1115.04,1208.66 1115.62,1208.94 1116.21,1207.34 1116.8,1208.7 1117.38,1211.66 1117.97,1213.06 1118.55,1212.76 1119.14,1212.24 1119.73,1213.64 1120.31,1213.42 1120.9,1211.76 1121.49,1211.87 1122.07,1211.78 1122.66,1214.63 1123.25,1214.48 1123.83,1215.7 1124.42,1215.62 1125.01,1219.73 1125.59,1217.78 1126.18,1220.01 1126.76,1220.68 1127.35,1218.9 1127.94,1219.84 1128.52,1220.45 1129.11,1217.07 1129.7,1217.98 1130.28,1217.43 1130.87,1216.87 1131.46,1216.37 1132.04,1215.96 1132.63,1218.41 1133.21,1220.55 1133.8,1221.38 1134.39,1217.9 1134.97,1216.95 1135.56,1214.98 1136.15,1214.83 1136.73,1217.37 1137.32,1220.12 1137.91,1218.26 1138.49,1218.06 1139.08,1217.7 1139.67,1217.51 1140.25,1214.05 1140.84,1215.13 1141.42,1216 1142.01,1216.94 1142.6,1215.39 1143.18,1216.68 1143.77,1216.33 1144.36,1214.5 1144.94,1213.99 1145.53,1213.92 1146.12,1216.66 1146.7,1211.99 1147.29,1208.97 1147.88,1207.36 1148.46,1209.17 1149.05,1207.21 1149.63,1206.09 1150.22,1204.98 1150.81,1206.62 1151.39,1206.8 1151.98,1203.97 1152.57,1201.37 1153.15,1204.62 1153.74,1206.41 1154.33,1205.07 1154.91,1206.9 1155.5,1209.94 1156.09,1210.13 1156.67,1211.55 1157.26,1210.02 1157.84,1211.35 1158.43,1212.5 1159.02,1212.12 1159.6,1211.73 1160.19,1211.73 1160.78,1210.14 1161.36,1208.8 1161.95,1210.49 1162.54,1209.99 1163.12,1209.99 1163.71,1211.38 1164.29,1209.68 1164.88,1212.41 1165.47,1211.94 1166.05,1213.1 1166.64,1212.97 1167.23,1211.42 1167.81,1212.75 1168.4,1211.24 1168.99,1206.9 1169.57,1207.1 1170.16,1208.44 1170.75,1211.23 1171.33,1212.6 1171.92,1216.72 1172.5,1216.29 1173.09,1213.04 1173.68,1205.63 1174.26,1202.98 1174.85,1203.14 1175.44,1207.73 1176.02,1207.8 1176.61,1207.85 1177.2,1205.32 1177.78,1204.05 1178.37,1204.24 1178.96,1207.65 1179.54,1207.64 1180.13,1207.66 1180.71,1207.82 1181.3,1209.43 1181.89,1210.7 1182.47,1211.95 1183.06,1212.12 1183.65,1210.63 1184.23,1210.39 1184.82,1211.79 1185.41,1211.66 1185.99,1210.2 1186.58,1209.96 1187.16,1211.48 1187.75,1208.28 1188.34,1207.02 1188.92,1202.64 1189.51,1202.87 1190.1,1201.68 1190.68,1200.72 1191.27,1204.04 1191.86,1204.45 1192.44,1207.36 1193.03,1207.32 1193.62,1204.82 1194.2,1206.34 1194.79,1203.62 1195.37,1202.31 1195.96,1203.86 1196.55,1208.65 1197.13,1210.06 1197.72,1208.46 1198.31,1208.35 1198.89,1209.73 1199.48,1211.42 1200.07,1212.71 1200.65,1211 1201.24,1212.44 1201.83,1211.04 1202.41,1212.11 1203,1207.59 1203.58,1206.33 1204.17,1205.26 1204.76,1200.98 1205.34,1201.65 1205.93,1200.24 1206.52,1200.58 1207.1,1196.68 1207.69,1200.08 1208.28,1200.3 1208.86,1199.33 1209.45,1201.2 1210.03,1201.44 1210.62,1203.72 1211.21,1201.33 1211.79,1204.54 1212.38,1206.49 1212.97,1208.36 1213.55,1206.81 1214.14,1207 1214.73,1208.6 1215.31,1208.59 1215.9,1208.51 1216.49,1209.64 1217.07,1210.01 1217.66,1211.68 1218.24,1209.78 1218.83,1210.92 1219.42,1209.78 1220,1209.81 1220.59,1211.02 1221.18,1207.91 1221.76,1206.51 1222.35,1206.5 1222.94,1205.4 1223.52,1205.37 1224.11,1204.22 1224.7,1205.82 1225.28,1207.57 1225.87,1210.58 1226.45,1211.93 1227.04,1211.78 1227.63,1211.78 1228.21,1213.21 1228.8,1213.16 1229.39,1211.46 1229.97,1209.87 1230.56,1209.67 1231.15,1212.27 1231.73,1210.67 1232.32,1214.55 1232.91,1214.32 1233.49,1213.96 1234.08,1218.02 1234.66,1214.8 1235.25,1211.72 1235.84,1209.91 1236.42,1212.4 1237.01,1211.88 1237.6,1211.76 1238.18,1210.28 1238.77,1208.66 1239.36,1208.69 1239.94,1211.48 1240.53,1209.71 1241.11,1209.62 1241.7,1208.04 1242.29,1210.86 1242.87,1209.17 1243.46,1207.7 1244.05,1204.75 1244.63,1206.18 1245.22,1206.38 1245.81,1204.96 1246.39,1202.29 1246.98,1202.94 1247.57,1201.87 1248.15,1200.61 1248.74,1201 1249.32,1201.52 1249.91,1200.44 1250.5,1202.34 1251.08,1202.9 1251.67,1205.95 1252.26,1204.75 1252.84,1204.85 1253.43,1204.8 1254.02,1203.62 1254.6,1203.72 1255.19,1205.21 1255.78,1205.44 1256.36,1205.69 1256.95,1209.84 1257.53,1209.69 1258.12,1209.49 1258.71,1210.97 1259.29,1208.05 1259.88,1209.91 1260.47,1208.91 1261.05,1209.01 1261.64,1210.3 1262.23,1208.94 1262.81,1209.36 1263.4,1208.15 1263.98,1206.56 1264.57,1206.73 1265.16,1209.48 1265.74,1209.41 1266.33,1209.27 1266.92,1211.04 1267.5,1213.66 1268.09,1213.34 1268.68,1212.88 1269.26,1212.71 1269.85,1211.01 1270.44,1211.94 1271.02,1208.99 1271.61,1210.54 1272.19,1210.42 1272.78,1214.44 1273.37,1216.91 1273.95,1218.03 1274.54,1217.31 1275.13,1215.38 1275.71,1215.19 1276.3,1213.55 1276.89,1211.66 1277.47,1213.09 1278.06,1213.25 1278.65,1212.97 1279.23,1214.21 1279.82,1215.26 1280.4,1217.83 1280.99,1213.31 1281.58,1210.34 1282.16,1211.74 1282.75,1212.96 1283.34,1214.17 1283.92,1213.94 1284.51,1216.1 1285.1,1215.65 1285.68,1216.73 1286.27,1216.09 1286.86,1215.64 1287.44,1216.56 1288.03,1215.87 1288.61,1213.87 1289.2,1213.55 1289.79,1214.7 1290.37,1212.63 1290.96,1209.39 1291.55,1211.2 1292.13,1207.97 1292.72,1205.22 1293.31,1205.68 1293.89,1205.88 1294.48,1204.71 1295.06,1204.79 1295.65,1200.6 1296.24,1199.65 1296.82,1201.44 1297.41,1201.92 1298,1202.39 1298.58,1205.5 1299.17,1206.89 1299.76,1207.05 1300.34,1202.89 1300.93,1203.3 1301.52,1202.13 1302.1,1200.8 1302.69,1201.47 1303.27,1200.78 1303.86,1198.36 1304.45,1197.53 1305.03,1199.55 1305.62,1195.46 1306.21,1200.25 1306.79,1198.99 1307.38,1198.19 1307.97,1198.82 1308.55,1200.93 1309.14,1202.79 1309.73,1201.5 1310.31,1200.28 1310.9,1200.87 1311.48,1198.47 1312.07,1197.52 1312.66,1198.04 1313.24,1200.04 1313.83,1201.68 1314.42,1203.56 1315,1205.52 1315.59,1208.5 1316.18,1210.19 1316.76,1208.92 1317.35,1211.78 1317.93,1208.61 1318.52,1208.8 1319.11,1210.15 1319.69,1210.26 1320.28,1211.42 1320.87,1211.22 1321.45,1209.35 1322.04,1209.39 1322.63,1207.75 1323.21,1207.85 1323.8,1205.22 1324.39,1206.83 1324.97,1209.74 1325.56,1211.26 1326.14,1212.56 1326.73,1215.51 1327.32,1212.12 1327.9,1210.22 1328.49,1213.25 1329.08,1215.82 1329.66,1215.56 1330.25,1212.48 1330.84,1210.72 1331.42,1209.32 1332.01,1212.42 1332.6,1209.29 1333.18,1209.12 1333.77,1207.67 1334.35,1207.8 1334.94,1206.24 1335.53,1206.44 1336.11,1205.04 1336.7,1202.37 1337.29,1201.29 1337.87,1203.3 1338.46,1205.04 1339.05,1204.89 1339.63,1206.78 1340.22,1205.62 1340.8,1205.75 1341.39,1202.99 1341.98,1203.44 1342.56,1202.27 1343.15,1204.16 1343.74,1205.58 1344.32,1207.05 1344.91,1206.85 1345.5,1208.76 1346.08,1210 1346.67,1209.99 1347.26,1214.32 1347.84,1212.74 1348.43,1209.87 1349.01,1209.94 1349.6,1211.61 1350.19,1212.71 1350.77,1213.83 1351.36,1215.11 1351.95,1212.05 1352.53,1211.98 1353.12,1211.93 1353.71,1213.03 1354.29,1214.21 1354.88,1212.49 1355.47,1218.01 1356.05,1216.27 1356.64,1217.44 1357.22,1216.91 1357.81,1217.97 1358.4,1221.79 1358.98,1221.22 1359.57,1221.87 1360.16,1223.03 1360.74,1222.38 1361.33,1221.59 1361.92,1217.63 1362.5,1220.15 1363.09,1216.78 1363.68,1216.67 1364.26,1217.53 1364.85,1218.52 1365.43,1216.75 1366.02,1217.81 1366.61,1217.3 1367.19,1216.89 1367.78,1216.42 1368.37,1217.38 1368.95,1217.2 1369.54,1216.85 1370.13,1216.37 1370.71,1215.63 1371.3,1216.75 1371.88,1212.13 1372.47,1213.19 1373.06,1211.31 1373.64,1212.48 1374.23,1210.57 1374.82,1209.03 1375.4,1211.65 1375.99,1210.01 1376.58,1212.56 1377.16,1207.74 1377.75,1210.46 1378.34,1212.01 1378.92,1210.64 1379.51,1211.98 1380.09,1212.1 1380.68,1210.28 1381.27,1211.28 1381.85,1213.91 1382.44,1213.33 1383.03,1215.79 1383.61,1213.86 1384.2,1212.03 1384.79,1210.24 1385.37,1209.08 1385.96,1206.2 1386.55,1209.05 1387.13,1207.51 1387.72,1209.08 1388.3,1209.02 1388.89,1210.79 1389.48,1204.68 1390.06,1202.07 1390.65,1207.86 1391.24,1210.6 1391.82,1211.95 1392.41,1211.61 1393,1209.77 1393.58,1206.74 1394.17,1209.8 1394.75,1211.11 1395.34,1211.38 1395.93,1212.6 1396.51,1215.19 1397.1,1211.6 1397.69,1208.97 1398.27,1209.06 1398.86,1209.01 1399.45,1207.56 1400.03,1204.84 1400.62,1206.42 1401.21,1208.07 1401.79,1205.14 1402.38,1206.6 1402.96,1205.47 1403.55,1204.23 1404.14,1204.27 1404.72,1202.82 1405.31,1204.67 1405.9,1204.75 1406.48,1203.62 1407.07,1206.58 1407.66,1208.15 1408.24,1203.99 1408.83,1201.36 1409.42,1203.5 1410,1203.74 1410.59,1205.34 1411.17,1205.54 1411.76,1205.83 1412.35,1206.07 1412.93,1205.67 1413.52,1205.83 1414.11,1206.18 1414.69,1203.61 1415.28,1203.97 1415.87,1200.2 1416.45,1202.31 1417.04,1205.58 1417.63,1201.32 1418.21,1204.66 1418.8,1205.15 1419.38,1205.54 1419.97,1206.01 1420.56,1206.19 1421.14,1203.13 1421.73,1199.02 1422.32,1201.04 1422.9,1202.69 1423.49,1203.16 1424.08,1202.07 1424.66,1203.77 1425.25,1205.5 1425.83,1202.65 1426.42,1203 1427.01,1206.39 1427.59,1207.94 1428.18,1206.23 1428.77,1206.23 1429.35,1207.67 1429.94,1207.62 1430.53,1209.43 1431.11,1212.19 1431.7,1208.9 1432.29,1207.74 1432.87,1206.45 1433.46,1204.83 1434.04,1205.24 1434.63,1205.54 1435.22,1202.9 1435.8,1201.82 1436.39,1205.36 1436.98,1205.57 1437.56,1204.68 1438.15,1204.92 1438.74,1203.9 1439.32,1204.18 1439.91,1204.35 1440.5,1203.25 1441.08,1204.99 1441.67,1206.3 1442.25,1207.84 1442.84,1207.86 1443.43,1203.34 1444.01,1202.08 1444.6,1201.08 1445.19,1201.29 1445.77,1201.68 1446.36,1198.86 1446.95,1202.22 1447.53,1202.7 1448.12,1204.01 1448.7,1202.94 1449.29,1203.19 1449.88,1207.82 1450.46,1209.73 1451.05,1209.74 1451.64,1209.72 1452.22,1209.83 1452.81,1211.32 1453.4,1212.71 1453.98,1212.17 1454.57,1213.51 1455.16,1214.83 1455.74,1214.48 1456.33,1213.82 1456.91,1215.06 1457.5,1214.67 1458.09,1213.08 1458.67,1213 1459.26,1209.87 1459.85,1209.9 1460.43,1209.49 1461.02,1206.4 1461.61,1209.34 1462.19,1212.37 1462.78,1210.75 1463.37,1209.14 1463.95,1209.18 1464.54,1209.3 1465.12,1210.78 1465.71,1207.9 1466.3,1208.02 1466.88,1208.01 1467.47,1210.93 1468.06,1213.81 1468.64,1213.69 1469.23,1213.68 1469.82,1212.12 1470.4,1209.02 1470.99,1207.66 1471.57,1206.37 1472.16,1205.01 1472.75,1204.95 1473.33,1204.99 1473.92,1206.5 1474.51,1207.99 1475.09,1211.11 1475.68,1213.93 1476.27,1213.78 1476.85,1213.84 1477.44,1213.6 1478.03,1213.31 1478.61,1213.34 1479.2,1211.47 1479.78,1213.06 1480.37,1212.67 1480.96,1215.25 1481.54,1214.74 1482.13,1215.58 1482.72,1216.68 1483.3,1216.19 1483.89,1213.02 1484.48,1214.17 1485.06,1208.15 1485.65,1212.88 1486.24,1211.19 1486.82,1212.74 1487.41,1215.59 1487.99,1215.46 1488.58,1216.54 1489.17,1216.51 1489.75,1217.52 1490.34,1216.95 1490.93,1214.85 1491.51,1214.26 1492.1,1211.22 1492.69,1208.48 1493.27,1208.33 1493.86,1208.64 1494.45,1210.11 1495.03,1211.4 1495.62,1214.08 1496.2,1212.57 1496.79,1212.45 1497.38,1212.29 1497.96,1213.74 1498.55,1215.07 1499.14,1217.59 1499.72,1215.84 1500.31,1212.97 1500.9,1211.33 1501.48,1214.08 1502.07,1212.58 1502.65,1212.12 1503.24,1213.44 1503.83,1211.68 1504.41,1210.03 1505,1209.99 1505.59,1209.91 1506.17,1209.98 1506.76,1209.85 1507.35,1211.22 1507.93,1212.36 1508.52,1212.24 1509.11,1211.92 1509.69,1211.84 1510.28,1211.95 1510.86,1213.39 1511.45,1213.11 1512.04,1208.81 1512.62,1209.96 1513.21,1208.62 1513.8,1209.78 1514.38,1209.8 1514.97,1203.98 1515.56,1202.53 1516.14,1200.96 1516.73,1201.36 1517.32,1204.35 1517.9,1201.42 1518.49,1201.74 1519.07,1205.06 1519.66,1205.31 1520.25,1202.66 1520.83,1202.98 1521.42,1203.33 1522.01,1205.07 1522.59,1206.56 1523.18,1206.78 1523.77,1208.32 1524.35,1208.65 1524.94,1210.2 1525.52,1210.33 1526.11,1210.23 1526.7,1212.88 1527.28,1212.58 1527.87,1212.37 1528.46,1212.48 1529.04,1209.36 1529.63,1209.32 1530.22,1212.35 1530.8,1212.21 1531.39,1213.87 1531.98,1214.87 1532.56,1211.88 1533.15,1211.59 1533.73,1212.93 1534.32,1212.63 1534.91,1212.44 1535.49,1213.96 1536.08,1212.39 1536.67,1212.32 1537.25,1214.96 1537.84,1217.48 1538.43,1211.42 1539.01,1211.23 1539.6,1214.19 1540.19,1213.89 1540.77,1212.19 1541.36,1210.69 1541.94,1206.1 1542.53,1207.72 1543.12,1207.82 1543.7,1208.11 1544.29,1209.34 1544.88,1209.24 1545.46,1208.87 1546.05,1207.41 1546.64,1207.37 1547.22,1205.97 1547.81,1209.1 1548.4,1212.18 1548.98,1207.59 1549.57,1208.86 1550.15,1211.86 1550.74,1211.84 1551.33,1207.09 1551.91,1207.08 1552.5,1204.34 1553.09,1203.01 1553.67,1201.9 1554.26,1203.65 1554.85,1208.56 1555.43,1208.48 1556.02,1208.53 1556.6,1209.95 1557.19,1208.69 1557.78,1204.48 1558.36,1204.57 1558.95,1206.08 1559.54,1206.48 1560.12,1208.26 1560.71,1211.07 1561.3,1213.71 1561.88,1212.38 1562.47,1212.43 1563.06,1210.53 1563.64,1208.8 1564.23,1206.19 1564.81,1206.46 1565.4,1205.26 1565.99,1202.86 1566.57,1200.24 1567.16,1202.08 1567.75,1205.31 1568.33,1205.32 1568.92,1204.02 1569.51,1207.03 1570.09,1208.64 1570.68,1211.67 1571.27,1213.04 1571.85,1214.2 1572.44,1212.09 1573.02,1211.98 1573.61,1212.85 1574.2,1212.33 1574.78,1214.97 1575.37,1211.88 1575.96,1207.51 1576.54,1207.74 1577.13,1207.55 1577.72,1208.87 1578.3,1206.96 1578.89,1207.34 1579.47,1208.67 1580.06,1210.36 1580.65,1207.33 1581.23,1206.35 1581.82,1205.08 1582.41,1206.51 1582.99,1203.66 1583.58,1203.81 1584.17,1205.68 1584.75,1208.6 1585.34,1207.46 1585.93,1207.14 1586.51,1207.45 1587.1,1206.34 1587.68,1209.07 1588.27,1204.87 1588.86,1205.28 1589.44,1205.49 1590.03,1205.77 1590.62,1206.21 1591.2,1207.67 1591.79,1204.73 1592.38,1204.91 1592.96,1205.3 1593.55,1202.79 1594.14,1201.84 1594.72,1202.5 1595.31,1201.53 1595.89,1201.63 1596.48,1202.07 1597.07,1202.63 1597.65,1202.87 1598.24,1203.54 1598.83,1205.3 1599.41,1201.07 1600,1201.48 1600.59,1200.32 1601.17,1200.76 1601.76,1201.35 1602.34,1202.93 1602.93,1204.52 1603.52,1204.45 1604.1,1207.34 1604.69,1208.74 1605.28,1208.59 1605.86,1210.26 1606.45,1209.94 1607.04,1213.96 1607.62,1209.49 1608.21,1209.66 1608.8,1209.69 1609.38,1209.91 1609.97,1211.53 1610.55,1209.84 1611.14,1211.16 1611.73,1210.97 1612.31,1210.71 1612.9,1210.36 1613.49,1213.08 1614.07,1213.09 1614.66,1214.56 1615.25,1215.63 1615.83,1215.27 1616.42,1213.42 1617.01,1211.79 1617.59,1211.33 1618.18,1209.62 1618.76,1211.13 1619.35,1211.22 1619.94,1212.45 1620.52,1212.17 1621.11,1208.9 1621.7,1208.91 1622.28,1209.23 1622.87,1208.04 1623.46,1207.96 1624.04,1206.59 1624.63,1209.56 1625.22,1210.93 1625.8,1212.39 1626.39,1213.59 1626.97,1213.53 1627.56,1213.2 1628.15,1211.66 1628.73,1208.66 1629.32,1208.59 1629.91,1208.85 1630.49,1205.95 1631.08,1207.69 1631.67,1208.36 1632.25,1206.91 1632.84,1207.14 1633.42,1207.34 1634.01,1208.92 1634.6,1204.6 1635.18,1201.86 1635.77,1202.36 1636.36,1204.01 1636.94,1202.91 1637.53,1202.97 1638.12,1204.9 1638.7,1203.73 1639.29,1205.38 1639.88,1205.2 1640.46,1203.87 1641.05,1202.87 1641.63,1203.17 1642.22,1206.34 1642.81,1207.91 1643.39,1207.91 1643.98,1205.09 1644.57,1205.34 1645.15,1205.29 1645.74,1205.51 1646.33,1205.93 1646.91,1207.69 1647.5,1207.87 1648.09,1205.23 1648.67,1208.49 1649.26,1208.5 1649.84,1207.24 1650.43,1207.41 1651.02,1209.02 1651.6,1209.2 1652.19,1206.49 1652.78,1206.25 1653.36,1206.49 1653.95,1206.65 1654.54,1206.9 1655.12,1208.19 1655.71,1208.14 1656.29,1209.76 1656.88,1209.93 1657.47,1208.45 1658.05,1206.73 1658.64,1206.88 1659.23,1205.21 1659.81,1205.51 1660.4,1207.36 1660.99,1208.79 1661.57,1211.74 1662.16,1210.22 1662.75,1210.49 1663.33,1210.27 1663.92,1209.94 1664.5,1205.69 1665.09,1207.41 1665.68,1209.35 1666.26,1207.59 1666.85,1207.56 1667.44,1208.9 1668.02,1209.17 1668.61,1208.02 1669.2,1206.57 1669.78,1203.96 1670.37,1208.42 1670.96,1208.11 1671.54,1208.13 1672.13,1208.49 1672.71,1211.47 1673.3,1208.46 1673.89,1212.72 1674.47,1213.09 1675.06,1214.52 1675.65,1215.61 1676.23,1215.36 1676.82,1213.71 1677.41,1214.78 1677.99,1214.61 1678.58,1215.85 1679.17,1212.56 1679.75,1212.46 1680.34,1212.29 1680.92,1212.13 1681.51,1216.24 1682.1,1219.76 1682.68,1220.68 1683.27,1221.63 1683.86,1217.99 1684.44,1218.74 1685.03,1218.01 1685.62,1217.36 1686.2,1212.52 1686.79,1215.15 1687.37,1216.33 1687.96,1215.82 1688.55,1215.27 1689.13,1215.98 1689.72,1212.57 1690.31,1212.35 1690.89,1212.09 1691.48,1210.3 1692.07,1207.45 1692.65,1208.68 1693.24,1208.49 1693.83,1208.69 1694.41,1211.74 1695,1208.45 1695.58,1209.82 1696.17,1212.3 1696.76,1211.86 1697.34,1214.73 1697.93,1215.99 1698.52,1208.55 1699.1,1212.91 1699.69,1209.79 1700.28,1208.11 1700.86,1206.58 1701.45,1205.07 1702.04,1206.71 1702.62,1211.15 1703.21,1209.67 1703.79,1211.14 1704.38,1209.55 1704.97,1209.34 1705.55,1212.1 1706.14,1213.29 1706.73,1212.89 1707.31,1212.86 1707.9,1212.78 1708.49,1212.49 1709.07,1212.38 1709.66,1210.88 1710.24,1207.76 1710.83,1204.71 1711.42,1209.27 1712,1209.24 1712.59,1203.66 1713.18,1201.1 1713.76,1201.17 1714.35,1201.67 1714.94,1201.7 1715.52,1200.61 1716.11,1203.97 1716.7,1204.22 1717.28,1207.32 1717.87,1207.21 1718.45,1207.35 1719.04,1208.96 1719.63,1207.53 1720.21,1206.06 1720.8,1204.76 1721.39,1205.02 1721.97,1205.22 1722.56,1208.41 1723.15,1208.33 1723.73,1206.86 1724.32,1205.58 1724.91,1207.18 1725.49,1208.96 1726.08,1210.19 1726.66,1209.02 1727.25,1207.6 1727.84,1207.55 1728.42,1207.43 1729.01,1207.5 1729.6,1207.65 1730.18,1209.13 1730.77,1210.59 1731.36,1204.79 1731.94,1205.05 1732.53,1205.09 1733.11,1203.84 1733.7,1204.57 1734.29,1204.99 1734.87,1203.74 1735.46,1204.31 1736.05,1202.86 1736.63,1201.68 1737.22,1200.87 1737.81,1204.02 1738.39,1202.67 1738.98,1198.88 1739.57,1199.59 1740.15,1201.34 1740.74,1201.64 1741.32,1203.7 1741.91,1203.97 1742.5,1203.86 1743.08,1205.55 1743.67,1204.3 1744.26,1207.14 1744.84,1207.17 1745.43,1210.21 1746.02,1211.6 1746.6,1211.68 1747.19,1214.52 1747.78,1211.39 1748.36,1209.8 1748.95,1205.57 1749.53,1213.02 1750.12,1211.17 1750.71,1211.16 1751.29,1206.85 1751.88,1207.03 1752.47,1204.2 1753.05,1210.32 1753.64,1211.74 1754.23,1215.93 1754.81,1219.58 1755.4,1216.15 1755.99,1215.63 1756.57,1215.22 1757.16,1216.2 1757.74,1218.7 1758.33,1219.77 1758.92,1220.65 1759.5,1221.4 1760.09,1222.6 1760.68,1218.76 1761.26,1215.59 1761.85,1216.87 1762.44,1213.35 1763.02,1211.67 1763.61,1210.28 1764.19,1208.63 1764.78,1200.02 1765.37,1202.02 1765.95,1202.62 1766.54,1199.78 1767.13,1198.96 1767.71,1199.47 1768.3,1201.44 1768.89,1203.42 1769.47,1202.13 1770.06,1202.43 1770.65,1201.29 1771.23,1201.75 1771.82,1204.82 1772.4,1203.68 1772.99,1204.09 1773.58,1204.2 1774.16,1204.27 1774.75,1204.59 1775.34,1206.34 1775.92,1206.8 1776.51,1208.24 1777.1,1205.29 1777.68,1205.22 1778.27,1208.41 1778.86,1208.75 1779.44,1208.85 1780.03,1211.64 1780.61,1212.67 1781.2,1212.52 1781.79,1215.38 1782.37,1216.69 1782.96,1217.41 1783.55,1217.09 1784.13,1217.01 1784.72,1216.65 1785.31,1213.14 1785.89,1209.81 1786.48,1208.36 1787.06,1208.23 1787.65,1206.96 1788.24,1204.23 1788.82,1203.3 1789.41,1203.43 1790,1203.79 1790.58,1202.57 1791.17,1202.5 1791.76,1205.87 1792.34,1207.81 1792.93,1206.57 1793.52,1207.88 1794.1,1210.95 1794.69,1213.85 1795.27,1212.32 1795.86,1210.36 1796.45,1211.85 1797.03,1210.48 1797.62,1210.33 1798.21,1208.68 1798.79,1207.27 1799.38,1205.85 1799.97,1207.49 1800.55,1207.6 1801.14,1209 1801.73,1207.25 1802.31,1202.98 1802.9,1204.93 1803.48,1206.63 1804.07,1203.87 1804.66,1206.94 1805.24,1208.32 1805.83,1202.76 1806.42,1203.08 1807,1204.59 1807.59,1206.33 1808.18,1208.17 1808.76,1209.26 1809.35,1207.93 1809.94,1209.86 1810.52,1211.26 1811.11,1212.65 1811.69,1212.7 1812.28,1212.43 1812.87,1214.62 1813.45,1216.04 1814.04,1213.98 1814.63,1213.4 1815.21,1210.1 1815.8,1210.05 1816.39,1211.38 1816.97,1210.07 1817.56,1207.12 1818.14,1204.65 1818.73,1208.06 1819.32,1207.72 1819.9,1212 1820.49,1210.63 1821.08,1207.61 1821.66,1207.67 1822.25,1214.8 1822.84,1212.78 1823.42,1215.73 1824.01,1214.32 1824.6,1215.21 1825.18,1217.76 1825.77,1214.76 1826.35,1216.09 1826.94,1212.98 1827.53,1214.43 1828.11,1212.99 1828.7,1211.16 1829.29,1210.85 1829.87,1210.64 1830.46,1207.94 1831.05,1209.37 1831.63,1210.5 1832.22,1210.39 1832.81,1210.22 1833.39,1210.07 1833.98,1209.89 1834.56,1208.76 1835.15,1210.33 1835.74,1210.2 1836.32,1208.77 1836.91,1207.36 1837.5,1207.7 1838.08,1209.36 1838.67,1209.39 1839.26,1209.32 1839.84,1205.01 1840.43,1207.88 1841.01,1208.15 1841.6,1212.25 1842.19,1210.44 1842.77,1216.22 1843.36,1215.93 1843.95,1209.82 1844.53,1208.55 1845.12,1208.74 1845.71,1211.65 1846.29,1211.78 1846.88,1214.29 1847.47,1212.38 1848.05,1212.08 1848.64,1210.4 1849.22,1211.48 1849.81,1211.45 1850.4,1212.36 1850.98,1213.49 1851.57,1211.72 1852.16,1211.31 1852.74,1211.07 1853.33,1210.74 1853.92,1214.77 1854.5,1217.46 1855.09,1216.87 1855.68,1216.51 1856.26,1214.66 1856.85,1218.44 1857.43,1219.31 1858.02,1218.65 1858.61,1216.95 1859.19,1219.33 1859.78,1217.4 1860.37,1217.94 1860.95,1217.43 1861.54,1214.28 1862.13,1212.53 1862.71,1210.87 1863.3,1209.28 1863.88,1207.64 1864.47,1209.25 1865.06,1209.39 1865.64,1206.61 1866.23,1205.45 1866.82,1205.81 1867.4,1205.97 1867.99,1207.64 1868.58,1206.23 1869.16,1206.25 1869.75,1206.63 1870.34,1205.58 1870.92,1204.3 1871.51,1204.52 1872.09,1207.51 1872.68,1210.32 1873.27,1208.54 1873.85,1209.47 1874.44,1207.8 1875.03,1209.51 1875.61,1209.53 1876.2,1211.01 1876.79,1212.23 1877.37,1210.74 1877.96,1211.85 1878.55,1208.48 1879.13,1211.53 1879.72,1208.62 1880.3,1205.93 1880.89,1206.19 1881.48,1209.39 1882.06,1206.53 1882.65,1206.78 1883.24,1205.35 1883.82,1203.81 1884.41,1207.25 1885,1207.47 1885.58,1207.68 1886.17,1206.43 1886.76,1205.07 1887.34,1205.4 1887.93,1205.56 1888.51,1207.4 1889.1,1210.19 1889.69,1208.74 1890.27,1212.89 1890.86,1212.78 1891.45,1210.81 1892.03,1210.66 1892.62,1210.46 1893.21,1210.22 1893.79,1211.72 1894.38,1210.28 1894.96,1211.58 1895.55,1207.2 1896.14,1204.46 1896.72,1207.53 1897.31,1207.14 1897.9,1208.48 1898.48,1207.09 1899.07,1207.16 1899.66,1205.74 1900.24,1208.67 1900.83,1207.39 1901.42,1207.3 1902,1208.98 1902.59,1209.12 1903.17,1209.19 1903.76,1210.72 1904.35,1211.01 1904.93,1211.12 1905.52,1211.66 1906.11,1211.67 1906.69,1210.38 1907.28,1209.01 1907.87,1209.2 1908.45,1207.48 1909.04,1209.02 1909.63,1208.96 1910.21,1206.24 1910.8,1205.12 1911.38,1205.56 1911.97,1205.76 1912.56,1206.08 1913.14,1206.51 1913.73,1205.15 1914.32,1205.66 1914.9,1205.89 1915.49,1204.7 1916.08,1205.4 1916.66,1204.31 1917.25,1208.7 1917.83,1208.64 1918.42,1205.9 1919.01,1201.79 1919.59,1202.38 1920.18,1202.9 1920.77,1203.31 1921.35,1203.78 1921.94,1202.71 1922.53,1203.06 1923.11,1204.8 1923.7,1206.56 1924.29,1209.61 1924.87,1208.24 1925.46,1208.33 1926.04,1214.06 1926.63,1210.99 1927.22,1205.28 1927.8,1206.87 1928.39,1205.27 1928.98,1206.97 1929.56,1206.75 1930.15,1205.45 1930.74,1211.39 1931.32,1211.25 1931.91,1211.21 1932.5,1210.84 1933.08,1212.03 1933.67,1212.87 1934.25,1212.47 1934.84,1212.03 1935.43,1208.71 1936.01,1208.54 1936.6,1211.38 1937.19,1211.31 1937.77,1210.14 1938.36,1213.06 1938.95,1212.84 1939.53,1212.93 1940.12,1214.06 1940.71,1212.46 1941.29,1211 1941.88,1211.9 1942.46,1212.1 1943.05,1208.77 1943.64,1209.38 1944.22,1207.93 1944.81,1209.42 1945.4,1209.48 1945.98,1206.63 1946.57,1209.66 1947.16,1209.28 1947.74,1213.06 1948.33,1214.08 1948.91,1216.51 1949.5,1213.08 1950.09,1212.82 1950.67,1215.49 1951.26,1215.17 1951.85,1217.78 1952.43,1219.02 1953.02,1219.96 1953.61,1214.92 1954.19,1211.82 1954.78,1211.68 1955.37,1211.5 1955.95,1211.37 1956.54,1212.72 1957.12,1212.45 1957.71,1212.37 1958.3,1210.57 1958.88,1210.31 1959.47,1210.27 1960.06,1210.32 1960.64,1211.47 1961.23,1211.07 1961.82,1209.67 1962.4,1208.1 1962.99,1209.39 1963.58,1209.04 1964.16,1209.05 1964.75,1209.08 1965.33,1209.08 1965.92,1209.16 1966.51,1208.99 1967.09,1208.88 1967.68,1210.38 1968.27,1208.58 1968.85,1206.9 1969.44,1207.26 1970.03,1204.29 1970.61,1208.87 1971.2,1210.27 1971.78,1210.34 1972.37,1210.16 1972.96,1210.1 1973.54,1211.42 1974.13,1208.53 1974.72,1209.81 1975.3,1211.06 1975.89,1209.42 1976.48,1212.1 1977.06,1210.43 1977.65,1208.79 1978.24,1207.53 1978.82,1210.58 1979.41,1208.95 1979.99,1210.46 1980.58,1210.22 1981.17,1208.77 1981.75,1208.52 1982.34,1205.66 1982.93,1205.69 1983.51,1204.26 1984.1,1204.46 1984.69,1203.22 1985.27,1200.76 1985.86,1199.92 1986.45,1201.52 1987.03,1198.76 1987.62,1199.62 1988.2,1198.76 1988.79,1197.88 1989.38,1200.05 1989.96,1200.13 1990.55,1204.96 1991.14,1202.27 1991.72,1199.57 1992.31,1199.61 1992.9,1197.21 1993.48,1195.1 1994.07,1195.91 1994.65,1196.84 1995.24,1197.67 1995.83,1199.7 1996.41,1203.35 1997,1203.57 1997.59,1206.57 1998.17,1209.73 1998.76,1206.65 1999.35,1206.6 1999.93,1205.48 2000.52,1207.21 2001.11,1211.39 2001.69,1209.7 2002.28,1208.06 2002.86,1211.12 2003.45,1211.19 2004.04,1212.61 2004.62,1212.63 2005.21,1213.64 2005.8,1210.72 2006.38,1209.36 2006.97,1210.77 2007.56,1212.11 2008.14,1211.91 2008.73,1210.24 2009.32,1208.65 2009.9,1208.7 2010.49,1208.78 2011.07,1211.6 2011.66,1212.83 2012.25,1212.67 2012.83,1214.21 2013.42,1211.14 2014.01,1213.84 2014.59,1215.22 2015.18,1210.82 2015.77,1207.7 2016.35,1207.9 2016.94,1207.72 2017.53,1208.02 2018.11,1209.64 2018.7,1208.39 2019.28,1209.79 2019.87,1209.97 2020.46,1211.18 2021.04,1215.51 2021.63,1215.18 2022.22,1216.39 2022.8,1217.23 2023.39,1216.64 2023.98,1220.54 2024.56,1218.57 2025.15,1219.32 2025.73,1219.04 2026.32,1218.36 2026.91,1216.53 2027.49,1216.17 2028.08,1218.71 2028.67,1222.55 2029.25,1223.14 2029.84,1222.19 2030.43,1221.45 2031.01,1217.74 2031.6,1215.6 2032.19,1206.34 2032.77,1208.09 2033.36,1205.27 2033.94,1205.47 2034.53,1208.49 2035.12,1207.22 2035.7,1207.29 2036.29,1208.86 2036.88,1208.9 2037.46,1210.41 2038.05,1207.2 2038.64,1207.37 2039.22,1204.48 2039.81,1204.84 2040.4,1205.04 2040.98,1205.3 2041.57,1205.43 2042.15,1199.95 2042.74,1200.37 2043.33,1202.45 2043.91,1205.75 2044.5,1207.19 2045.09,1205.64 2045.67,1202.75 2046.26,1205.94 2046.85,1207.24 2047.43,1206.05 2048.02,1203.31 2048.6,1200.64 2049.19,1201.19 2049.78,1202.71 2050.36,1203.2 2050.95,1206.45 2051.54,1205.27 2052.12,1202.47 2052.71,1205.84 2053.3,1204.77 2053.88,1204.65 2054.47,1206.28 2055.06,1209.3 2055.64,1209.63 2056.23,1209.61 2056.81,1209.64 2057.4,1212.46 2057.99,1209.43 2058.57,1210.92 2059.16,1213.34 2059.75,1211.71 2060.33,1212.99 2060.92,1212.81 2061.51,1209.93 2062.09,1210.08 2062.68,1209.66 2063.27,1209.38 2063.85,1209.52 2064.44,1212.17 2065.02,1210.5 2065.61,1207.26 2066.2,1207.12 2066.78,1204.39 2067.37,1204.43 2067.96,1204.74 2068.54,1203.3 2069.13,1203.64 2069.72,1205.5 2070.3,1201.5 2070.89,1202.02 2071.48,1201.11 2072.06,1198.53 2072.65,1203.5 2073.23,1207.83 2073.82,1206.7 2074.41,1206.79 2074.99,1208.2 2075.58,1208.02 2076.17,1211.24 2076.75,1212.52 2077.34,1213.81 2077.93,1213.82 2078.51,1212.1 2079.1,1208.87 2079.68,1210.46 2080.27,1209.08 2080.86,1209.01 2081.44,1209.19 2082.03,1207.65 2082.62,1206.33 2083.2,1206.31 2083.79,1208.06 2084.38,1208.26 2084.96,1208.17 2085.55,1208.25 2086.14,1208.22 2086.72,1209.3 2087.31,1207.98 2087.89,1208.06 2088.48,1212.1 2089.07,1208.96 2089.65,1208.97 2090.24,1207.56 2090.83,1207.86 2091.41,1207.83 2092,1208.05 2092.59,1208.31 2093.17,1208.11 2093.76,1208.28 2094.35,1209.83 2094.93,1209.9 2095.52,1212.75 2096.1,1213.69 2096.69,1214.85 2097.28,1214.8 2097.86,1216.1 2098.45,1215.71 2099.04,1214.08 2099.62,1215.19 2100.21,1211.96 2100.8,1208.98 2101.38,1207.22 2101.97,1208.95 2102.55,1211.83 2103.14,1210.16 2103.73,1207.11 2104.31,1207.3 2104.9,1209.33 2105.49,1209.29 2106.07,1207.54 2106.66,1205.02 2107.25,1205.07 2107.83,1208.2 2108.42,1208.43 2109.01,1208.58 2109.59,1206.99 2110.18,1205.36 2110.76,1208.4 2111.35,1211.38 2111.94,1208.23 2112.52,1206.88 2113.11,1208.65 2113.7,1212.73 2114.28,1210.91 2114.87,1209.54 2115.46,1208.06 2116.04,1208.12 2116.63,1208.48 2117.22,1212.9 2117.8,1211.13 2118.39,1209.62 2118.97,1206.69 2119.56,1205.75 2120.15,1206.14 2120.73,1206.35 2121.32,1208.01 2121.91,1207.06 2122.49,1208.65 2123.08,1208.9 2123.67,1207.4 2124.25,1204.55 2124.84,1203.53 2125.42,1205.21 2126.01,1206.94 2126.6,1205.55 2127.18,1204.59 2127.77,1201.64 2128.36,1202.15 2128.94,1202.64 2129.53,1205.86 2130.12,1205.01 2130.7,1205.06 2131.29,1203.86 2131.88,1205.37 2132.46,1201.42 2133.05,1201.93 2133.63,1205.04 2134.22,1206.77 2134.81,1206.76 2135.39,1209.82 2135.98,1208.53 2136.57,1208.44 2137.15,1209.78 2137.74,1208.14 2138.33,1207 2138.91,1208.45 2139.5,1207.47 2140.09,1208.96 2140.67,1207.56 2141.26,1207.67 2141.84,1207.9 2142.43,1207.94 2143.02,1208.41 2143.6,1208.4 2144.19,1211.02 2144.78,1209.34 2145.36,1213.62 2145.95,1211.67 2146.54,1211.67 2147.12,1211.35 2147.71,1212.66 2148.3,1210.7 2148.88,1212.07 2149.47,1207.76 2150.05,1206.62 2150.64,1206.75 2151.23,1207.07 2151.81,1207.09 2152.4,1203.97 2152.99,1205.52 2153.57,1204.04 2154.16,1204.39 2154.75,1209.22 2155.33,1209.47 2155.92,1211.13 2156.5,1211.14 2157.09,1209.73 2157.68,1209.95 2158.26,1211.44 \"/>\n<path clip-path=\"url(#clip652)\" d=\"M986.025 1209.45 L986.612 1209.45 L987.198 1209.45 L987.785 1209.45 L988.371 1209.45 L988.957 1209.45 L989.544 1209.45 L990.13 1209.45 L990.717 1209.45 L991.303 1209.45 L991.889 1209.45 L992.476 1209.45 L993.062 1209.45 L993.649 1209.45 L994.235 1209.45 L994.822 1209.45 L995.408 1209.45 L995.994 1209.45 L996.581 1209.45 L997.167 1209.45 L997.754 1209.45 L998.34 1209.45 L998.926 1209.45 L999.513 1209.45 L1000.1 1209.45 L1000.69 1209.45 L1001.27 1209.45 L1001.86 1209.45 L1002.44 1209.45 L1003.03 1209.45 L1003.62 1209.45 L1004.2 1209.45 L1004.79 1209.45 L1005.38 1209.45 L1005.96 1209.45 L1006.55 1209.45 L1007.14 1209.45 L1007.72 1209.45 L1008.31 1209.45 L1008.9 1209.45 L1009.48 1209.45 L1010.07 1209.45 L1010.65 1209.45 L1011.24 1209.45 L1011.83 1209.45 L1012.41 1209.45 L1013 1209.45 L1013.59 1209.45 L1014.17 1209.45 L1014.76 1209.45 L1015.35 1209.45 L1015.93 1209.45 L1016.52 1209.45 L1017.11 1209.45 L1017.69 1209.45 L1018.28 1209.45 L1018.86 1209.45 L1019.45 1209.45 L1020.04 1209.45 L1020.62 1209.45 L1021.21 1209.45 L1021.8 1209.45 L1022.38 1209.45 L1022.97 1209.45 L1023.56 1209.45 L1024.14 1209.45 L1024.73 1209.45 L1025.32 1209.45 L1025.9 1209.45 L1026.49 1209.45 L1027.07 1209.45 L1027.66 1209.45 L1028.25 1209.45 L1028.83 1209.45 L1029.42 1209.45 L1030.01 1209.45 L1030.59 1209.45 L1031.18 1209.45 L1031.77 1209.45 L1032.35 1209.45 L1032.94 1209.45 L1033.52 1209.45 L1034.11 1209.45 L1034.7 1209.45 L1035.28 1209.45 L1035.87 1209.45 L1036.46 1209.45 L1037.04 1209.45 L1037.63 1209.45 L1038.22 1209.45 L1038.8 1209.45 L1039.39 1209.45 L1039.98 1209.45 L1040.56 1209.45 L1041.15 1209.45 L1041.73 1209.45 L1042.32 1209.45 L1042.91 1209.45 L1043.49 1209.45 L1044.08 1209.45 L1044.67 1209.45 L1045.25 1209.45 L1045.84 1209.45 L1046.43 1209.45 L1047.01 1209.45 L1047.6 1209.45 L1048.19 1209.45 L1048.77 1209.45 L1049.36 1209.45 L1049.94 1209.45 L1050.53 1209.45 L1051.12 1209.45 L1051.7 1209.45 L1052.29 1209.45 L1052.88 1209.45 L1053.46 1209.45 L1054.05 1209.45 L1054.64 1209.45 L1055.22 1209.45 L1055.81 1209.45 L1056.39 1209.45 L1056.98 1209.45 L1057.57 1209.45 L1058.15 1209.45 L1058.74 1209.45 L1059.33 1209.45 L1059.91 1209.45 L1060.5 1209.45 L1061.09 1209.45 L1061.67 1209.45 L1062.26 1209.45 L1062.85 1209.45 L1063.43 1209.45 L1064.02 1209.45 L1064.6 1209.45 L1065.19 1209.45 L1065.78 1209.45 L1066.36 1209.45 L1066.95 1209.45 L1067.54 1209.45 L1068.12 1209.45 L1068.71 1209.45 L1069.3 1209.45 L1069.88 1209.45 L1070.47 1209.45 L1071.06 1209.45 L1071.64 1209.45 L1072.23 1209.45 L1072.81 1209.45 L1073.4 1209.45 L1073.99 1209.45 L1074.57 1209.45 L1075.16 1209.45 L1075.75 1209.45 L1076.33 1209.45 L1076.92 1209.45 L1077.51 1209.45 L1078.09 1209.45 L1078.68 1209.45 L1079.26 1209.45 L1079.85 1209.45 L1080.44 1209.45 L1081.02 1209.45 L1081.61 1209.45 L1082.2 1209.45 L1082.78 1209.45 L1083.37 1209.45 L1083.96 1209.45 L1084.54 1209.45 L1085.13 1209.45 L1085.72 1209.45 L1086.3 1209.45 L1086.89 1209.45 L1087.47 1209.45 L1088.06 1209.45 L1088.65 1209.45 L1089.23 1209.45 L1089.82 1209.45 L1090.41 1209.45 L1090.99 1209.45 L1091.58 1209.45 L1092.17 1209.45 L1092.75 1209.45 L1093.34 1209.45 L1093.93 1209.45 L1094.51 1209.45 L1095.1 1209.45 L1095.68 1209.45 L1096.27 1209.45 L1096.86 1209.45 L1097.44 1209.45 L1098.03 1209.45 L1098.62 1209.45 L1099.2 1209.45 L1099.79 1209.45 L1100.38 1209.45 L1100.96 1209.45 L1101.55 1209.45 L1102.14 1209.45 L1102.72 1209.45 L1103.31 1209.45 L1103.89 1209.45 L1104.48 1209.45 L1105.07 1209.45 L1105.65 1209.45 L1106.24 1209.45 L1106.83 1209.45 L1107.41 1209.45 L1108 1209.45 L1108.59 1209.45 L1109.17 1209.45 L1109.76 1209.45 L1110.34 1209.45 L1110.93 1209.45 L1111.52 1209.45 L1112.1 1209.45 L1112.69 1209.45 L1113.28 1209.45 L1113.86 1209.45 L1114.45 1209.45 L1115.04 1209.45 L1115.62 1209.45 L1116.21 1209.45 L1116.8 1209.45 L1117.38 1209.45 L1117.97 1209.45 L1118.55 1209.45 L1119.14 1209.45 L1119.73 1209.45 L1120.31 1209.45 L1120.9 1209.45 L1121.49 1209.45 L1122.07 1209.45 L1122.66 1209.45 L1123.25 1209.45 L1123.83 1209.45 L1124.42 1209.45 L1125.01 1209.45 L1125.59 1209.45 L1126.18 1209.45 L1126.76 1209.45 L1127.35 1209.45 L1127.94 1209.45 L1128.52 1209.45 L1129.11 1209.45 L1129.7 1209.45 L1130.28 1209.45 L1130.87 1209.45 L1131.46 1209.45 L1132.04 1209.45 L1132.63 1209.45 L1133.21 1209.45 L1133.8 1209.45 L1134.39 1209.45 L1134.97 1209.45 L1135.56 1209.45 L1136.15 1209.45 L1136.73 1209.45 L1137.32 1209.45 L1137.91 1209.45 L1138.49 1209.45 L1139.08 1209.45 L1139.67 1209.45 L1140.25 1209.45 L1140.84 1209.45 L1141.42 1209.45 L1142.01 1209.45 L1142.6 1209.45 L1143.18 1209.45 L1143.77 1209.45 L1144.36 1209.45 L1144.94 1209.45 L1145.53 1209.45 L1146.12 1209.45 L1146.7 1209.45 L1147.29 1209.45 L1147.88 1209.45 L1148.46 1209.45 L1149.05 1209.45 L1149.63 1209.45 L1150.22 1209.45 L1150.81 1209.45 L1151.39 1209.45 L1151.98 1209.45 L1152.57 1209.45 L1153.15 1209.45 L1153.74 1209.45 L1154.33 1209.45 L1154.91 1209.45 L1155.5 1209.45 L1156.09 1209.45 L1156.67 1209.45 L1157.26 1209.45 L1157.84 1209.45 L1158.43 1209.45 L1159.02 1209.45 L1159.6 1209.45 L1160.19 1209.45 L1160.78 1209.45 L1161.36 1209.45 L1161.95 1209.45 L1162.54 1209.45 L1163.12 1209.45 L1163.71 1209.45 L1164.29 1209.45 L1164.88 1209.45 L1165.47 1209.45 L1166.05 1209.45 L1166.64 1209.45 L1167.23 1209.45 L1167.81 1209.45 L1168.4 1209.45 L1168.99 1209.45 L1169.57 1209.45 L1170.16 1209.45 L1170.75 1209.45 L1171.33 1209.45 L1171.92 1209.45 L1172.5 1209.45 L1173.09 1209.45 L1173.68 1209.45 L1174.26 1209.45 L1174.85 1209.45 L1175.44 1209.45 L1176.02 1209.45 L1176.61 1209.45 L1177.2 1209.45 L1177.78 1209.45 L1178.37 1209.45 L1178.96 1209.45 L1179.54 1209.45 L1180.13 1209.45 L1180.71 1209.45 L1181.3 1209.45 L1181.89 1209.45 L1182.47 1209.45 L1183.06 1209.45 L1183.65 1209.45 L1184.23 1209.45 L1184.82 1209.45 L1185.41 1209.45 L1185.99 1209.45 L1186.58 1209.45 L1187.16 1209.45 L1187.75 1209.45 L1188.34 1209.45 L1188.92 1209.45 L1189.51 1209.45 L1190.1 1209.45 L1190.68 1209.45 L1191.27 1209.45 L1191.86 1209.45 L1192.44 1209.45 L1193.03 1209.45 L1193.62 1209.45 L1194.2 1209.45 L1194.79 1209.45 L1195.37 1209.45 L1195.96 1209.45 L1196.55 1209.45 L1197.13 1209.45 L1197.72 1209.45 L1198.31 1209.45 L1198.89 1209.45 L1199.48 1209.45 L1200.07 1209.45 L1200.65 1209.45 L1201.24 1209.45 L1201.83 1209.45 L1202.41 1209.45 L1203 1209.45 L1203.58 1209.45 L1204.17 1209.45 L1204.76 1209.45 L1205.34 1209.45 L1205.93 1209.45 L1206.52 1209.45 L1207.1 1209.45 L1207.69 1209.45 L1208.28 1209.45 L1208.86 1209.45 L1209.45 1209.45 L1210.03 1209.45 L1210.62 1209.45 L1211.21 1209.45 L1211.79 1209.45 L1212.38 1209.45 L1212.97 1209.45 L1213.55 1209.45 L1214.14 1209.45 L1214.73 1209.45 L1215.31 1209.45 L1215.9 1209.45 L1216.49 1209.45 L1217.07 1209.45 L1217.66 1209.45 L1218.24 1209.45 L1218.83 1209.45 L1219.42 1209.45 L1220 1209.45 L1220.59 1209.45 L1221.18 1209.45 L1221.76 1209.45 L1222.35 1209.45 L1222.94 1209.45 L1223.52 1209.45 L1224.11 1209.45 L1224.7 1209.45 L1225.28 1209.45 L1225.87 1209.45 L1226.45 1209.45 L1227.04 1209.45 L1227.63 1209.45 L1228.21 1209.45 L1228.8 1209.45 L1229.39 1209.45 L1229.97 1209.45 L1230.56 1209.45 L1231.15 1209.45 L1231.73 1209.45 L1232.32 1209.45 L1232.91 1209.45 L1233.49 1209.45 L1234.08 1209.45 L1234.66 1209.45 L1235.25 1209.45 L1235.84 1209.45 L1236.42 1209.45 L1237.01 1209.45 L1237.6 1209.45 L1238.18 1209.45 L1238.77 1209.45 L1239.36 1209.45 L1239.94 1209.45 L1240.53 1209.45 L1241.11 1209.45 L1241.7 1209.45 L1242.29 1209.45 L1242.87 1209.45 L1243.46 1209.45 L1244.05 1209.45 L1244.63 1209.45 L1245.22 1209.45 L1245.81 1209.45 L1246.39 1209.45 L1246.98 1209.45 L1247.57 1209.45 L1248.15 1209.45 L1248.74 1209.45 L1249.32 1209.45 L1249.91 1209.45 L1250.5 1209.45 L1251.08 1209.45 L1251.67 1209.45 L1252.26 1209.45 L1252.84 1209.45 L1253.43 1209.45 L1254.02 1209.45 L1254.6 1209.45 L1255.19 1209.45 L1255.78 1209.45 L1256.36 1209.45 L1256.95 1209.45 L1257.53 1209.45 L1258.12 1209.45 L1258.71 1209.45 L1259.29 1209.45 L1259.88 1209.45 L1260.47 1209.45 L1261.05 1209.45 L1261.64 1209.45 L1262.23 1209.45 L1262.81 1209.45 L1263.4 1209.45 L1263.98 1209.45 L1264.57 1209.45 L1265.16 1209.45 L1265.74 1209.45 L1266.33 1209.45 L1266.92 1209.45 L1267.5 1209.45 L1268.09 1209.45 L1268.68 1209.45 L1269.26 1209.45 L1269.85 1209.45 L1270.44 1209.45 L1271.02 1209.45 L1271.61 1209.45 L1272.19 1209.45 L1272.78 1209.45 L1273.37 1209.45 L1273.95 1209.45 L1274.54 1209.45 L1275.13 1209.45 L1275.71 1209.45 L1276.3 1209.45 L1276.89 1209.45 L1277.47 1209.45 L1278.06 1209.45 L1278.65 1209.45 L1279.23 1209.45 L1279.82 1209.45 L1280.4 1209.45 L1280.99 1209.45 L1281.58 1209.45 L1282.16 1209.45 L1282.75 1209.45 L1283.34 1209.45 L1283.92 1209.45 L1284.51 1209.45 L1285.1 1209.45 L1285.68 1209.45 L1286.27 1209.45 L1286.86 1209.45 L1287.44 1209.45 L1288.03 1209.45 L1288.61 1209.45 L1289.2 1209.45 L1289.79 1209.45 L1290.37 1209.45 L1290.96 1209.45 L1291.55 1209.45 L1292.13 1209.45 L1292.72 1209.45 L1293.31 1209.45 L1293.89 1209.45 L1294.48 1209.45 L1295.06 1209.45 L1295.65 1209.45 L1296.24 1209.45 L1296.82 1209.45 L1297.41 1209.45 L1298 1209.45 L1298.58 1209.45 L1299.17 1209.45 L1299.76 1209.45 L1300.34 1209.45 L1300.93 1209.45 L1301.52 1209.45 L1302.1 1209.45 L1302.69 1209.45 L1303.27 1209.45 L1303.86 1209.45 L1304.45 1209.45 L1305.03 1209.45 L1305.62 1209.45 L1306.21 1209.45 L1306.79 1209.45 L1307.38 1209.45 L1307.97 1209.45 L1308.55 1209.45 L1309.14 1209.45 L1309.73 1209.45 L1310.31 1209.45 L1310.9 1209.45 L1311.48 1209.45 L1312.07 1209.45 L1312.66 1209.45 L1313.24 1209.45 L1313.83 1209.45 L1314.42 1209.45 L1315 1209.45 L1315.59 1209.45 L1316.18 1209.45 L1316.76 1209.45 L1317.35 1209.45 L1317.93 1209.45 L1318.52 1209.45 L1319.11 1209.45 L1319.69 1209.45 L1320.28 1209.45 L1320.87 1209.45 L1321.45 1209.45 L1322.04 1209.45 L1322.63 1209.45 L1323.21 1209.45 L1323.8 1209.45 L1324.39 1209.45 L1324.97 1209.45 L1325.56 1209.45 L1326.14 1209.45 L1326.73 1209.45 L1327.32 1209.45 L1327.9 1209.45 L1328.49 1209.45 L1329.08 1209.45 L1329.66 1209.45 L1330.25 1209.45 L1330.84 1209.45 L1331.42 1209.45 L1332.01 1209.45 L1332.6 1209.45 L1333.18 1209.45 L1333.77 1209.45 L1334.35 1209.45 L1334.94 1209.45 L1335.53 1209.45 L1336.11 1209.45 L1336.7 1209.45 L1337.29 1209.45 L1337.87 1209.45 L1338.46 1209.45 L1339.05 1209.45 L1339.63 1209.45 L1340.22 1209.45 L1340.8 1209.45 L1341.39 1209.45 L1341.98 1209.45 L1342.56 1209.45 L1343.15 1209.45 L1343.74 1209.45 L1344.32 1209.45 L1344.91 1209.45 L1345.5 1209.45 L1346.08 1209.45 L1346.67 1209.45 L1347.26 1209.45 L1347.84 1209.45 L1348.43 1209.45 L1349.01 1209.45 L1349.6 1209.45 L1350.19 1209.45 L1350.77 1209.45 L1351.36 1209.45 L1351.95 1209.45 L1352.53 1209.45 L1353.12 1209.45 L1353.71 1209.45 L1354.29 1209.45 L1354.88 1209.45 L1355.47 1209.45 L1356.05 1209.45 L1356.64 1209.45 L1357.22 1209.45 L1357.81 1209.45 L1358.4 1209.45 L1358.98 1209.45 L1359.57 1209.45 L1360.16 1209.45 L1360.74 1209.45 L1361.33 1209.45 L1361.92 1209.45 L1362.5 1209.45 L1363.09 1209.45 L1363.68 1209.45 L1364.26 1209.45 L1364.85 1209.45 L1365.43 1209.45 L1366.02 1209.45 L1366.61 1209.45 L1367.19 1209.45 L1367.78 1209.45 L1368.37 1209.45 L1368.95 1209.45 L1369.54 1209.45 L1370.13 1209.45 L1370.71 1209.45 L1371.3 1209.45 L1371.88 1209.45 L1372.47 1209.45 L1373.06 1209.45 L1373.64 1209.45 L1374.23 1209.45 L1374.82 1209.45 L1375.4 1209.45 L1375.99 1209.45 L1376.58 1209.45 L1377.16 1209.45 L1377.75 1209.45 L1378.34 1209.45 L1378.92 1209.45 L1379.51 1209.45 L1380.09 1209.45 L1380.68 1209.45 L1381.27 1209.45 L1381.85 1209.45 L1382.44 1209.45 L1383.03 1209.45 L1383.61 1209.45 L1384.2 1209.45 L1384.79 1209.45 L1385.37 1209.45 L1385.96 1209.45 L1386.55 1209.45 L1387.13 1209.45 L1387.72 1209.45 L1388.3 1209.45 L1388.89 1209.45 L1389.48 1209.45 L1390.06 1209.45 L1390.65 1209.45 L1391.24 1209.45 L1391.82 1209.45 L1392.41 1209.45 L1393 1209.45 L1393.58 1209.45 L1394.17 1209.45 L1394.75 1209.45 L1395.34 1209.45 L1395.93 1209.45 L1396.51 1209.45 L1397.1 1209.45 L1397.69 1209.45 L1398.27 1209.45 L1398.86 1209.45 L1399.45 1209.45 L1400.03 1209.45 L1400.62 1209.45 L1401.21 1209.45 L1401.79 1209.45 L1402.38 1209.45 L1402.96 1209.45 L1403.55 1209.45 L1404.14 1209.45 L1404.72 1209.45 L1405.31 1209.45 L1405.9 1209.45 L1406.48 1209.45 L1407.07 1209.45 L1407.66 1209.45 L1408.24 1209.45 L1408.83 1209.45 L1409.42 1209.45 L1410 1209.45 L1410.59 1209.45 L1411.17 1209.45 L1411.76 1209.45 L1412.35 1209.45 L1412.93 1209.45 L1413.52 1209.45 L1414.11 1209.45 L1414.69 1209.45 L1415.28 1209.45 L1415.87 1209.45 L1416.45 1209.45 L1417.04 1209.45 L1417.63 1209.45 L1418.21 1209.45 L1418.8 1209.45 L1419.38 1209.45 L1419.97 1209.45 L1420.56 1209.45 L1421.14 1209.45 L1421.73 1209.45 L1422.32 1209.45 L1422.9 1209.45 L1423.49 1209.45 L1424.08 1209.45 L1424.66 1209.45 L1425.25 1209.45 L1425.83 1209.45 L1426.42 1209.45 L1427.01 1209.45 L1427.59 1209.45 L1428.18 1209.45 L1428.77 1209.45 L1429.35 1209.45 L1429.94 1209.45 L1430.53 1209.45 L1431.11 1209.45 L1431.7 1209.45 L1432.29 1209.45 L1432.87 1209.45 L1433.46 1209.45 L1434.04 1209.45 L1434.63 1209.45 L1435.22 1209.45 L1435.8 1209.45 L1436.39 1209.45 L1436.98 1209.45 L1437.56 1209.45 L1438.15 1209.45 L1438.74 1209.45 L1439.32 1209.45 L1439.91 1209.45 L1440.5 1209.45 L1441.08 1209.45 L1441.67 1209.45 L1442.25 1209.45 L1442.84 1209.45 L1443.43 1209.45 L1444.01 1209.45 L1444.6 1209.45 L1445.19 1209.45 L1445.77 1209.45 L1446.36 1209.45 L1446.95 1209.45 L1447.53 1209.45 L1448.12 1209.45 L1448.7 1209.45 L1449.29 1209.45 L1449.88 1209.45 L1450.46 1209.45 L1451.05 1209.45 L1451.64 1209.45 L1452.22 1209.45 L1452.81 1209.45 L1453.4 1209.45 L1453.98 1209.45 L1454.57 1209.45 L1455.16 1209.45 L1455.74 1209.45 L1456.33 1209.45 L1456.91 1209.45 L1457.5 1209.45 L1458.09 1209.45 L1458.67 1209.45 L1459.26 1209.45 L1459.85 1209.45 L1460.43 1209.45 L1461.02 1209.45 L1461.61 1209.45 L1462.19 1209.45 L1462.78 1209.45 L1463.37 1209.45 L1463.95 1209.45 L1464.54 1209.45 L1465.12 1209.45 L1465.71 1209.45 L1466.3 1209.45 L1466.88 1209.45 L1467.47 1209.45 L1468.06 1209.45 L1468.64 1209.45 L1469.23 1209.45 L1469.82 1209.45 L1470.4 1209.45 L1470.99 1209.45 L1471.57 1209.45 L1472.16 1209.45 L1472.75 1209.45 L1473.33 1209.45 L1473.92 1209.45 L1474.51 1209.45 L1475.09 1209.45 L1475.68 1209.45 L1476.27 1209.45 L1476.85 1209.45 L1477.44 1209.45 L1478.03 1209.45 L1478.61 1209.45 L1479.2 1209.45 L1479.78 1209.45 L1480.37 1209.45 L1480.96 1209.45 L1481.54 1209.45 L1482.13 1209.45 L1482.72 1209.45 L1483.3 1209.45 L1483.89 1209.45 L1484.48 1209.45 L1485.06 1209.45 L1485.65 1209.45 L1486.24 1209.45 L1486.82 1209.45 L1487.41 1209.45 L1487.99 1209.45 L1488.58 1209.45 L1489.17 1209.45 L1489.75 1209.45 L1490.34 1209.45 L1490.93 1209.45 L1491.51 1209.45 L1492.1 1209.45 L1492.69 1209.45 L1493.27 1209.45 L1493.86 1209.45 L1494.45 1209.45 L1495.03 1209.45 L1495.62 1209.45 L1496.2 1209.45 L1496.79 1209.45 L1497.38 1209.45 L1497.96 1209.45 L1498.55 1209.45 L1499.14 1209.45 L1499.72 1209.45 L1500.31 1209.45 L1500.9 1209.45 L1501.48 1209.45 L1502.07 1209.45 L1502.65 1209.45 L1503.24 1209.45 L1503.83 1209.45 L1504.41 1209.45 L1505 1209.45 L1505.59 1209.45 L1506.17 1209.45 L1506.76 1209.45 L1507.35 1209.45 L1507.93 1209.45 L1508.52 1209.45 L1509.11 1209.45 L1509.69 1209.45 L1510.28 1209.45 L1510.86 1209.45 L1511.45 1209.45 L1512.04 1209.45 L1512.62 1209.45 L1513.21 1209.45 L1513.8 1209.45 L1514.38 1209.45 L1514.97 1209.45 L1515.56 1209.45 L1516.14 1209.45 L1516.73 1209.45 L1517.32 1209.45 L1517.9 1209.45 L1518.49 1209.45 L1519.07 1209.45 L1519.66 1209.45 L1520.25 1209.45 L1520.83 1209.45 L1521.42 1209.45 L1522.01 1209.45 L1522.59 1209.45 L1523.18 1209.45 L1523.77 1209.45 L1524.35 1209.45 L1524.94 1209.45 L1525.52 1209.45 L1526.11 1209.45 L1526.7 1209.45 L1527.28 1209.45 L1527.87 1209.45 L1528.46 1209.45 L1529.04 1209.45 L1529.63 1209.45 L1530.22 1209.45 L1530.8 1209.45 L1531.39 1209.45 L1531.98 1209.45 L1532.56 1209.45 L1533.15 1209.45 L1533.73 1209.45 L1534.32 1209.45 L1534.91 1209.45 L1535.49 1209.45 L1536.08 1209.45 L1536.67 1209.45 L1537.25 1209.45 L1537.84 1209.45 L1538.43 1209.45 L1539.01 1209.45 L1539.6 1209.45 L1540.19 1209.45 L1540.77 1209.45 L1541.36 1209.45 L1541.94 1209.45 L1542.53 1209.45 L1543.12 1209.45 L1543.7 1209.45 L1544.29 1209.45 L1544.88 1209.45 L1545.46 1209.45 L1546.05 1209.45 L1546.64 1209.45 L1547.22 1209.45 L1547.81 1209.45 L1548.4 1209.45 L1548.98 1209.45 L1549.57 1209.45 L1550.15 1209.45 L1550.74 1209.45 L1551.33 1209.45 L1551.91 1209.45 L1552.5 1209.45 L1553.09 1209.45 L1553.67 1209.45 L1554.26 1209.45 L1554.85 1209.45 L1555.43 1209.45 L1556.02 1209.45 L1556.6 1209.45 L1557.19 1209.45 L1557.78 1209.45 L1558.36 1209.45 L1558.95 1209.45 L1559.54 1209.45 L1560.12 1209.45 L1560.71 1209.45 L1561.3 1209.45 L1561.88 1209.45 L1562.47 1209.45 L1563.06 1209.45 L1563.64 1209.45 L1564.23 1209.45 L1564.81 1209.45 L1565.4 1209.45 L1565.99 1209.45 L1566.57 1209.45 L1567.16 1209.45 L1567.75 1209.45 L1568.33 1209.45 L1568.92 1209.45 L1569.51 1209.45 L1570.09 1209.45 L1570.68 1209.45 L1571.27 1209.45 L1571.85 1209.45 L1572.44 1209.45 L1573.02 1209.45 L1573.61 1209.45 L1574.2 1209.45 L1574.78 1209.45 L1575.37 1209.45 L1575.96 1209.45 L1576.54 1209.45 L1577.13 1209.45 L1577.72 1209.45 L1578.3 1209.45 L1578.89 1209.45 L1579.47 1209.45 L1580.06 1209.45 L1580.65 1209.45 L1581.23 1209.45 L1581.82 1209.45 L1582.41 1209.45 L1582.99 1209.45 L1583.58 1209.45 L1584.17 1209.45 L1584.75 1209.45 L1585.34 1209.45 L1585.93 1209.45 L1586.51 1209.45 L1587.1 1209.45 L1587.68 1209.45 L1588.27 1209.45 L1588.86 1209.45 L1589.44 1209.45 L1590.03 1209.45 L1590.62 1209.45 L1591.2 1209.45 L1591.79 1209.45 L1592.38 1209.45 L1592.96 1209.45 L1593.55 1209.45 L1594.14 1209.45 L1594.72 1209.45 L1595.31 1209.45 L1595.89 1209.45 L1596.48 1209.45 L1597.07 1209.45 L1597.65 1209.45 L1598.24 1209.45 L1598.83 1209.45 L1599.41 1209.45 L1600 1209.45 L1600.59 1209.45 L1601.17 1209.45 L1601.76 1209.45 L1602.34 1209.45 L1602.93 1209.45 L1603.52 1209.45 L1604.1 1209.45 L1604.69 1209.45 L1605.28 1209.45 L1605.86 1209.45 L1606.45 1209.45 L1607.04 1209.45 L1607.62 1209.45 L1608.21 1209.45 L1608.8 1209.45 L1609.38 1209.45 L1609.97 1209.45 L1610.55 1209.45 L1611.14 1209.45 L1611.73 1209.45 L1612.31 1209.45 L1612.9 1209.45 L1613.49 1209.45 L1614.07 1209.45 L1614.66 1209.45 L1615.25 1209.45 L1615.83 1209.45 L1616.42 1209.45 L1617.01 1209.45 L1617.59 1209.45 L1618.18 1209.45 L1618.76 1209.45 L1619.35 1209.45 L1619.94 1209.45 L1620.52 1209.45 L1621.11 1209.45 L1621.7 1209.45 L1622.28 1209.45 L1622.87 1209.45 L1623.46 1209.45 L1624.04 1209.45 L1624.63 1209.45 L1625.22 1209.45 L1625.8 1209.45 L1626.39 1209.45 L1626.97 1209.45 L1627.56 1209.45 L1628.15 1209.45 L1628.73 1209.45 L1629.32 1209.45 L1629.91 1209.45 L1630.49 1209.45 L1631.08 1209.45 L1631.67 1209.45 L1632.25 1209.45 L1632.84 1209.45 L1633.42 1209.45 L1634.01 1209.45 L1634.6 1209.45 L1635.18 1209.45 L1635.77 1209.45 L1636.36 1209.45 L1636.94 1209.45 L1637.53 1209.45 L1638.12 1209.45 L1638.7 1209.45 L1639.29 1209.45 L1639.88 1209.45 L1640.46 1209.45 L1641.05 1209.45 L1641.63 1209.45 L1642.22 1209.45 L1642.81 1209.45 L1643.39 1209.45 L1643.98 1209.45 L1644.57 1209.45 L1645.15 1209.45 L1645.74 1209.45 L1646.33 1209.45 L1646.91 1209.45 L1647.5 1209.45 L1648.09 1209.45 L1648.67 1209.45 L1649.26 1209.45 L1649.84 1209.45 L1650.43 1209.45 L1651.02 1209.45 L1651.6 1209.45 L1652.19 1209.45 L1652.78 1209.45 L1653.36 1209.45 L1653.95 1209.45 L1654.54 1209.45 L1655.12 1209.45 L1655.71 1209.45 L1656.29 1209.45 L1656.88 1209.45 L1657.47 1209.45 L1658.05 1209.45 L1658.64 1209.45 L1659.23 1209.45 L1659.81 1209.45 L1660.4 1209.45 L1660.99 1209.45 L1661.57 1209.45 L1662.16 1209.45 L1662.75 1209.45 L1663.33 1209.45 L1663.92 1209.45 L1664.5 1209.45 L1665.09 1209.45 L1665.68 1209.45 L1666.26 1209.45 L1666.85 1209.45 L1667.44 1209.45 L1668.02 1209.45 L1668.61 1209.45 L1669.2 1209.45 L1669.78 1209.45 L1670.37 1209.45 L1670.96 1209.45 L1671.54 1209.45 L1672.13 1209.45 L1672.71 1209.45 L1673.3 1209.45 L1673.89 1209.45 L1674.47 1209.45 L1675.06 1209.45 L1675.65 1209.45 L1676.23 1209.45 L1676.82 1209.45 L1677.41 1209.45 L1677.99 1209.45 L1678.58 1209.45 L1679.17 1209.45 L1679.75 1209.45 L1680.34 1209.45 L1680.92 1209.45 L1681.51 1209.45 L1682.1 1209.45 L1682.68 1209.45 L1683.27 1209.45 L1683.86 1209.45 L1684.44 1209.45 L1685.03 1209.45 L1685.62 1209.45 L1686.2 1209.45 L1686.79 1209.45 L1687.37 1209.45 L1687.96 1209.45 L1688.55 1209.45 L1689.13 1209.45 L1689.72 1209.45 L1690.31 1209.45 L1690.89 1209.45 L1691.48 1209.45 L1692.07 1209.45 L1692.65 1209.45 L1693.24 1209.45 L1693.83 1209.45 L1694.41 1209.45 L1695 1209.45 L1695.58 1209.45 L1696.17 1209.45 L1696.76 1209.45 L1697.34 1209.45 L1697.93 1209.45 L1698.52 1209.45 L1699.1 1209.45 L1699.69 1209.45 L1700.28 1209.45 L1700.86 1209.45 L1701.45 1209.45 L1702.04 1209.45 L1702.62 1209.45 L1703.21 1209.45 L1703.79 1209.45 L1704.38 1209.45 L1704.97 1209.45 L1705.55 1209.45 L1706.14 1209.45 L1706.73 1209.45 L1707.31 1209.45 L1707.9 1209.45 L1708.49 1209.45 L1709.07 1209.45 L1709.66 1209.45 L1710.24 1209.45 L1710.83 1209.45 L1711.42 1209.45 L1712 1209.45 L1712.59 1209.45 L1713.18 1209.45 L1713.76 1209.45 L1714.35 1209.45 L1714.94 1209.45 L1715.52 1209.45 L1716.11 1209.45 L1716.7 1209.45 L1717.28 1209.45 L1717.87 1209.45 L1718.45 1209.45 L1719.04 1209.45 L1719.63 1209.45 L1720.21 1209.45 L1720.8 1209.45 L1721.39 1209.45 L1721.97 1209.45 L1722.56 1209.45 L1723.15 1209.45 L1723.73 1209.45 L1724.32 1209.45 L1724.91 1209.45 L1725.49 1209.45 L1726.08 1209.45 L1726.66 1209.45 L1727.25 1209.45 L1727.84 1209.45 L1728.42 1209.45 L1729.01 1209.45 L1729.6 1209.45 L1730.18 1209.45 L1730.77 1209.45 L1731.36 1209.45 L1731.94 1209.45 L1732.53 1209.45 L1733.11 1209.45 L1733.7 1209.45 L1734.29 1209.45 L1734.87 1209.45 L1735.46 1209.45 L1736.05 1209.45 L1736.63 1209.45 L1737.22 1209.45 L1737.81 1209.45 L1738.39 1209.45 L1738.98 1209.45 L1739.57 1209.45 L1740.15 1209.45 L1740.74 1209.45 L1741.32 1209.45 L1741.91 1209.45 L1742.5 1209.45 L1743.08 1209.45 L1743.67 1209.45 L1744.26 1209.45 L1744.84 1209.45 L1745.43 1209.45 L1746.02 1209.45 L1746.6 1209.45 L1747.19 1209.45 L1747.78 1209.45 L1748.36 1209.45 L1748.95 1209.45 L1749.53 1209.45 L1750.12 1209.45 L1750.71 1209.45 L1751.29 1209.45 L1751.88 1209.45 L1752.47 1209.45 L1753.05 1209.45 L1753.64 1209.45 L1754.23 1209.45 L1754.81 1209.45 L1755.4 1209.45 L1755.99 1209.45 L1756.57 1209.45 L1757.16 1209.45 L1757.74 1209.45 L1758.33 1209.45 L1758.92 1209.45 L1759.5 1209.45 L1760.09 1209.45 L1760.68 1209.45 L1761.26 1209.45 L1761.85 1209.45 L1762.44 1209.45 L1763.02 1209.45 L1763.61 1209.45 L1764.19 1209.45 L1764.78 1209.45 L1765.37 1209.45 L1765.95 1209.45 L1766.54 1209.45 L1767.13 1209.45 L1767.71 1209.45 L1768.3 1209.45 L1768.89 1209.45 L1769.47 1209.45 L1770.06 1209.45 L1770.65 1209.45 L1771.23 1209.45 L1771.82 1209.45 L1772.4 1209.45 L1772.99 1209.45 L1773.58 1209.45 L1774.16 1209.45 L1774.75 1209.45 L1775.34 1209.45 L1775.92 1209.45 L1776.51 1209.45 L1777.1 1209.45 L1777.68 1209.45 L1778.27 1209.45 L1778.86 1209.45 L1779.44 1209.45 L1780.03 1209.45 L1780.61 1209.45 L1781.2 1209.45 L1781.79 1209.45 L1782.37 1209.45 L1782.96 1209.45 L1783.55 1209.45 L1784.13 1209.45 L1784.72 1209.45 L1785.31 1209.45 L1785.89 1209.45 L1786.48 1209.45 L1787.06 1209.45 L1787.65 1209.45 L1788.24 1209.45 L1788.82 1209.45 L1789.41 1209.45 L1790 1209.45 L1790.58 1209.45 L1791.17 1209.45 L1791.76 1209.45 L1792.34 1209.45 L1792.93 1209.45 L1793.52 1209.45 L1794.1 1209.45 L1794.69 1209.45 L1795.27 1209.45 L1795.86 1209.45 L1796.45 1209.45 L1797.03 1209.45 L1797.62 1209.45 L1798.21 1209.45 L1798.79 1209.45 L1799.38 1209.45 L1799.97 1209.45 L1800.55 1209.45 L1801.14 1209.45 L1801.73 1209.45 L1802.31 1209.45 L1802.9 1209.45 L1803.48 1209.45 L1804.07 1209.45 L1804.66 1209.45 L1805.24 1209.45 L1805.83 1209.45 L1806.42 1209.45 L1807 1209.45 L1807.59 1209.45 L1808.18 1209.45 L1808.76 1209.45 L1809.35 1209.45 L1809.94 1209.45 L1810.52 1209.45 L1811.11 1209.45 L1811.69 1209.45 L1812.28 1209.45 L1812.87 1209.45 L1813.45 1209.45 L1814.04 1209.45 L1814.63 1209.45 L1815.21 1209.45 L1815.8 1209.45 L1816.39 1209.45 L1816.97 1209.45 L1817.56 1209.45 L1818.14 1209.45 L1818.73 1209.45 L1819.32 1209.45 L1819.9 1209.45 L1820.49 1209.45 L1821.08 1209.45 L1821.66 1209.45 L1822.25 1209.45 L1822.84 1209.45 L1823.42 1209.45 L1824.01 1209.45 L1824.6 1209.45 L1825.18 1209.45 L1825.77 1209.45 L1826.35 1209.45 L1826.94 1209.45 L1827.53 1209.45 L1828.11 1209.45 L1828.7 1209.45 L1829.29 1209.45 L1829.87 1209.45 L1830.46 1209.45 L1831.05 1209.45 L1831.63 1209.45 L1832.22 1209.45 L1832.81 1209.45 L1833.39 1209.45 L1833.98 1209.45 L1834.56 1209.45 L1835.15 1209.45 L1835.74 1209.45 L1836.32 1209.45 L1836.91 1209.45 L1837.5 1209.45 L1838.08 1209.45 L1838.67 1209.45 L1839.26 1209.45 L1839.84 1209.45 L1840.43 1209.45 L1841.01 1209.45 L1841.6 1209.45 L1842.19 1209.45 L1842.77 1209.45 L1843.36 1209.45 L1843.95 1209.45 L1844.53 1209.45 L1845.12 1209.45 L1845.71 1209.45 L1846.29 1209.45 L1846.88 1209.45 L1847.47 1209.45 L1848.05 1209.45 L1848.64 1209.45 L1849.22 1209.45 L1849.81 1209.45 L1850.4 1209.45 L1850.98 1209.45 L1851.57 1209.45 L1852.16 1209.45 L1852.74 1209.45 L1853.33 1209.45 L1853.92 1209.45 L1854.5 1209.45 L1855.09 1209.45 L1855.68 1209.45 L1856.26 1209.45 L1856.85 1209.45 L1857.43 1209.45 L1858.02 1209.45 L1858.61 1209.45 L1859.19 1209.45 L1859.78 1209.45 L1860.37 1209.45 L1860.95 1209.45 L1861.54 1209.45 L1862.13 1209.45 L1862.71 1209.45 L1863.3 1209.45 L1863.88 1209.45 L1864.47 1209.45 L1865.06 1209.45 L1865.64 1209.45 L1866.23 1209.45 L1866.82 1209.45 L1867.4 1209.45 L1867.99 1209.45 L1868.58 1209.45 L1869.16 1209.45 L1869.75 1209.45 L1870.34 1209.45 L1870.92 1209.45 L1871.51 1209.45 L1872.09 1209.45 L1872.68 1209.45 L1873.27 1209.45 L1873.85 1209.45 L1874.44 1209.45 L1875.03 1209.45 L1875.61 1209.45 L1876.2 1209.45 L1876.79 1209.45 L1877.37 1209.45 L1877.96 1209.45 L1878.55 1209.45 L1879.13 1209.45 L1879.72 1209.45 L1880.3 1209.45 L1880.89 1209.45 L1881.48 1209.45 L1882.06 1209.45 L1882.65 1209.45 L1883.24 1209.45 L1883.82 1209.45 L1884.41 1209.45 L1885 1209.45 L1885.58 1209.45 L1886.17 1209.45 L1886.76 1209.45 L1887.34 1209.45 L1887.93 1209.45 L1888.51 1209.45 L1889.1 1209.45 L1889.69 1209.45 L1890.27 1209.45 L1890.86 1209.45 L1891.45 1209.45 L1892.03 1209.45 L1892.62 1209.45 L1893.21 1209.45 L1893.79 1209.45 L1894.38 1209.45 L1894.96 1209.45 L1895.55 1209.45 L1896.14 1209.45 L1896.72 1209.45 L1897.31 1209.45 L1897.9 1209.45 L1898.48 1209.45 L1899.07 1209.45 L1899.66 1209.45 L1900.24 1209.45 L1900.83 1209.45 L1901.42 1209.45 L1902 1209.45 L1902.59 1209.45 L1903.17 1209.45 L1903.76 1209.45 L1904.35 1209.45 L1904.93 1209.45 L1905.52 1209.45 L1906.11 1209.45 L1906.69 1209.45 L1907.28 1209.45 L1907.87 1209.45 L1908.45 1209.45 L1909.04 1209.45 L1909.63 1209.45 L1910.21 1209.45 L1910.8 1209.45 L1911.38 1209.45 L1911.97 1209.45 L1912.56 1209.45 L1913.14 1209.45 L1913.73 1209.45 L1914.32 1209.45 L1914.9 1209.45 L1915.49 1209.45 L1916.08 1209.45 L1916.66 1209.45 L1917.25 1209.45 L1917.83 1209.45 L1918.42 1209.45 L1919.01 1209.45 L1919.59 1209.45 L1920.18 1209.45 L1920.77 1209.45 L1921.35 1209.45 L1921.94 1209.45 L1922.53 1209.45 L1923.11 1209.45 L1923.7 1209.45 L1924.29 1209.45 L1924.87 1209.45 L1925.46 1209.45 L1926.04 1209.45 L1926.63 1209.45 L1927.22 1209.45 L1927.8 1209.45 L1928.39 1209.45 L1928.98 1209.45 L1929.56 1209.45 L1930.15 1209.45 L1930.74 1209.45 L1931.32 1209.45 L1931.91 1209.45 L1932.5 1209.45 L1933.08 1209.45 L1933.67 1209.45 L1934.25 1209.45 L1934.84 1209.45 L1935.43 1209.45 L1936.01 1209.45 L1936.6 1209.45 L1937.19 1209.45 L1937.77 1209.45 L1938.36 1209.45 L1938.95 1209.45 L1939.53 1209.45 L1940.12 1209.45 L1940.71 1209.45 L1941.29 1209.45 L1941.88 1209.45 L1942.46 1209.45 L1943.05 1209.45 L1943.64 1209.45 L1944.22 1209.45 L1944.81 1209.45 L1945.4 1209.45 L1945.98 1209.45 L1946.57 1209.45 L1947.16 1209.45 L1947.74 1209.45 L1948.33 1209.45 L1948.91 1209.45 L1949.5 1209.45 L1950.09 1209.45 L1950.67 1209.45 L1951.26 1209.45 L1951.85 1209.45 L1952.43 1209.45 L1953.02 1209.45 L1953.61 1209.45 L1954.19 1209.45 L1954.78 1209.45 L1955.37 1209.45 L1955.95 1209.45 L1956.54 1209.45 L1957.12 1209.45 L1957.71 1209.45 L1958.3 1209.45 L1958.88 1209.45 L1959.47 1209.45 L1960.06 1209.45 L1960.64 1209.45 L1961.23 1209.45 L1961.82 1209.45 L1962.4 1209.45 L1962.99 1209.45 L1963.58 1209.45 L1964.16 1209.45 L1964.75 1209.45 L1965.33 1209.45 L1965.92 1209.45 L1966.51 1209.45 L1967.09 1209.45 L1967.68 1209.45 L1968.27 1209.45 L1968.85 1209.45 L1969.44 1209.45 L1970.03 1209.45 L1970.61 1209.45 L1971.2 1209.45 L1971.78 1209.45 L1972.37 1209.45 L1972.96 1209.45 L1973.54 1209.45 L1974.13 1209.45 L1974.72 1209.45 L1975.3 1209.45 L1975.89 1209.45 L1976.48 1209.45 L1977.06 1209.45 L1977.65 1209.45 L1978.24 1209.45 L1978.82 1209.45 L1979.41 1209.45 L1979.99 1209.45 L1980.58 1209.45 L1981.17 1209.45 L1981.75 1209.45 L1982.34 1209.45 L1982.93 1209.45 L1983.51 1209.45 L1984.1 1209.45 L1984.69 1209.45 L1985.27 1209.45 L1985.86 1209.45 L1986.45 1209.45 L1987.03 1209.45 L1987.62 1209.45 L1988.2 1209.45 L1988.79 1209.45 L1989.38 1209.45 L1989.96 1209.45 L1990.55 1209.45 L1991.14 1209.45 L1991.72 1209.45 L1992.31 1209.45 L1992.9 1209.45 L1993.48 1209.45 L1994.07 1209.45 L1994.65 1209.45 L1995.24 1209.45 L1995.83 1209.45 L1996.41 1209.45 L1997 1209.45 L1997.59 1209.45 L1998.17 1209.45 L1998.76 1209.45 L1999.35 1209.45 L1999.93 1209.45 L2000.52 1209.45 L2001.11 1209.45 L2001.69 1209.45 L2002.28 1209.45 L2002.86 1209.45 L2003.45 1209.45 L2004.04 1209.45 L2004.62 1209.45 L2005.21 1209.45 L2005.8 1209.45 L2006.38 1209.45 L2006.97 1209.45 L2007.56 1209.45 L2008.14 1209.45 L2008.73 1209.45 L2009.32 1209.45 L2009.9 1209.45 L2010.49 1209.45 L2011.07 1209.45 L2011.66 1209.45 L2012.25 1209.45 L2012.83 1209.45 L2013.42 1209.45 L2014.01 1209.45 L2014.59 1209.45 L2015.18 1209.45 L2015.77 1209.45 L2016.35 1209.45 L2016.94 1209.45 L2017.53 1209.45 L2018.11 1209.45 L2018.7 1209.45 L2019.28 1209.45 L2019.87 1209.45 L2020.46 1209.45 L2021.04 1209.45 L2021.63 1209.45 L2022.22 1209.45 L2022.8 1209.45 L2023.39 1209.45 L2023.98 1209.45 L2024.56 1209.45 L2025.15 1209.45 L2025.73 1209.45 L2026.32 1209.45 L2026.91 1209.45 L2027.49 1209.45 L2028.08 1209.45 L2028.67 1209.45 L2029.25 1209.45 L2029.84 1209.45 L2030.43 1209.45 L2031.01 1209.45 L2031.6 1209.45 L2032.19 1209.45 L2032.77 1209.45 L2033.36 1209.45 L2033.94 1209.45 L2034.53 1209.45 L2035.12 1209.45 L2035.7 1209.45 L2036.29 1209.45 L2036.88 1209.45 L2037.46 1209.45 L2038.05 1209.45 L2038.64 1209.45 L2039.22 1209.45 L2039.81 1209.45 L2040.4 1209.45 L2040.98 1209.45 L2041.57 1209.45 L2042.15 1209.45 L2042.74 1209.45 L2043.33 1209.45 L2043.91 1209.45 L2044.5 1209.45 L2045.09 1209.45 L2045.67 1209.45 L2046.26 1209.45 L2046.85 1209.45 L2047.43 1209.45 L2048.02 1209.45 L2048.6 1209.45 L2049.19 1209.45 L2049.78 1209.45 L2050.36 1209.45 L2050.95 1209.45 L2051.54 1209.45 L2052.12 1209.45 L2052.71 1209.45 L2053.3 1209.45 L2053.88 1209.45 L2054.47 1209.45 L2055.06 1209.45 L2055.64 1209.45 L2056.23 1209.45 L2056.81 1209.45 L2057.4 1209.45 L2057.99 1209.45 L2058.57 1209.45 L2059.16 1209.45 L2059.75 1209.45 L2060.33 1209.45 L2060.92 1209.45 L2061.51 1209.45 L2062.09 1209.45 L2062.68 1209.45 L2063.27 1209.45 L2063.85 1209.45 L2064.44 1209.45 L2065.02 1209.45 L2065.61 1209.45 L2066.2 1209.45 L2066.78 1209.45 L2067.37 1209.45 L2067.96 1209.45 L2068.54 1209.45 L2069.13 1209.45 L2069.72 1209.45 L2070.3 1209.45 L2070.89 1209.45 L2071.48 1209.45 L2072.06 1209.45 L2072.65 1209.45 L2073.23 1209.45 L2073.82 1209.45 L2074.41 1209.45 L2074.99 1209.45 L2075.58 1209.45 L2076.17 1209.45 L2076.75 1209.45 L2077.34 1209.45 L2077.93 1209.45 L2078.51 1209.45 L2079.1 1209.45 L2079.68 1209.45 L2080.27 1209.45 L2080.86 1209.45 L2081.44 1209.45 L2082.03 1209.45 L2082.62 1209.45 L2083.2 1209.45 L2083.79 1209.45 L2084.38 1209.45 L2084.96 1209.45 L2085.55 1209.45 L2086.14 1209.45 L2086.72 1209.45 L2087.31 1209.45 L2087.89 1209.45 L2088.48 1209.45 L2089.07 1209.45 L2089.65 1209.45 L2090.24 1209.45 L2090.83 1209.45 L2091.41 1209.45 L2092 1209.45 L2092.59 1209.45 L2093.17 1209.45 L2093.76 1209.45 L2094.35 1209.45 L2094.93 1209.45 L2095.52 1209.45 L2096.1 1209.45 L2096.69 1209.45 L2097.28 1209.45 L2097.86 1209.45 L2098.45 1209.45 L2099.04 1209.45 L2099.62 1209.45 L2100.21 1209.45 L2100.8 1209.45 L2101.38 1209.45 L2101.97 1209.45 L2102.55 1209.45 L2103.14 1209.45 L2103.73 1209.45 L2104.31 1209.45 L2104.9 1209.45 L2105.49 1209.45 L2106.07 1209.45 L2106.66 1209.45 L2107.25 1209.45 L2107.83 1209.45 L2108.42 1209.45 L2109.01 1209.45 L2109.59 1209.45 L2110.18 1209.45 L2110.76 1209.45 L2111.35 1209.45 L2111.94 1209.45 L2112.52 1209.45 L2113.11 1209.45 L2113.7 1209.45 L2114.28 1209.45 L2114.87 1209.45 L2115.46 1209.45 L2116.04 1209.45 L2116.63 1209.45 L2117.22 1209.45 L2117.8 1209.45 L2118.39 1209.45 L2118.97 1209.45 L2119.56 1209.45 L2120.15 1209.45 L2120.73 1209.45 L2121.32 1209.45 L2121.91 1209.45 L2122.49 1209.45 L2123.08 1209.45 L2123.67 1209.45 L2124.25 1209.45 L2124.84 1209.45 L2125.42 1209.45 L2126.01 1209.45 L2126.6 1209.45 L2127.18 1209.45 L2127.77 1209.45 L2128.36 1209.45 L2128.94 1209.45 L2129.53 1209.45 L2130.12 1209.45 L2130.7 1209.45 L2131.29 1209.45 L2131.88 1209.45 L2132.46 1209.45 L2133.05 1209.45 L2133.63 1209.45 L2134.22 1209.45 L2134.81 1209.45 L2135.39 1209.45 L2135.98 1209.45 L2136.57 1209.45 L2137.15 1209.45 L2137.74 1209.45 L2138.33 1209.45 L2138.91 1209.45 L2139.5 1209.45 L2140.09 1209.45 L2140.67 1209.45 L2141.26 1209.45 L2141.84 1209.45 L2142.43 1209.45 L2143.02 1209.45 L2143.6 1209.45 L2144.19 1209.45 L2144.78 1209.45 L2145.36 1209.45 L2145.95 1209.45 L2146.54 1209.45 L2147.12 1209.45 L2147.71 1209.45 L2148.3 1209.45 L2148.88 1209.45 L2149.47 1209.45 L2150.05 1209.45 L2150.64 1209.45 L2151.23 1209.45 L2151.81 1209.45 L2152.4 1209.45 L2152.99 1209.45 L2153.57 1209.45 L2154.16 1209.45 L2154.75 1209.45 L2155.33 1209.45 L2155.92 1209.45 L2156.5 1209.45 L2157.09 1209.45 L2157.68 1209.45 L2158.26 1209.45 L2158.26 1208.67 L2157.68 1208.67 L2157.09 1208.67 L2156.5 1208.67 L2155.92 1208.67 L2155.33 1208.67 L2154.75 1208.67 L2154.16 1208.67 L2153.57 1208.67 L2152.99 1208.67 L2152.4 1208.67 L2151.81 1208.67 L2151.23 1208.67 L2150.64 1208.67 L2150.05 1208.67 L2149.47 1208.67 L2148.88 1208.67 L2148.3 1208.67 L2147.71 1208.67 L2147.12 1208.67 L2146.54 1208.67 L2145.95 1208.67 L2145.36 1208.67 L2144.78 1208.67 L2144.19 1208.67 L2143.6 1208.67 L2143.02 1208.67 L2142.43 1208.67 L2141.84 1208.67 L2141.26 1208.67 L2140.67 1208.67 L2140.09 1208.67 L2139.5 1208.67 L2138.91 1208.67 L2138.33 1208.67 L2137.74 1208.67 L2137.15 1208.67 L2136.57 1208.67 L2135.98 1208.67 L2135.39 1208.67 L2134.81 1208.67 L2134.22 1208.67 L2133.63 1208.67 L2133.05 1208.67 L2132.46 1208.67 L2131.88 1208.67 L2131.29 1208.67 L2130.7 1208.67 L2130.12 1208.67 L2129.53 1208.67 L2128.94 1208.67 L2128.36 1208.67 L2127.77 1208.67 L2127.18 1208.67 L2126.6 1208.67 L2126.01 1208.67 L2125.42 1208.67 L2124.84 1208.67 L2124.25 1208.67 L2123.67 1208.67 L2123.08 1208.67 L2122.49 1208.67 L2121.91 1208.67 L2121.32 1208.67 L2120.73 1208.67 L2120.15 1208.67 L2119.56 1208.67 L2118.97 1208.67 L2118.39 1208.67 L2117.8 1208.67 L2117.22 1208.67 L2116.63 1208.67 L2116.04 1208.67 L2115.46 1208.67 L2114.87 1208.67 L2114.28 1208.67 L2113.7 1208.67 L2113.11 1208.67 L2112.52 1208.67 L2111.94 1208.67 L2111.35 1208.67 L2110.76 1208.67 L2110.18 1208.67 L2109.59 1208.67 L2109.01 1208.67 L2108.42 1208.67 L2107.83 1208.67 L2107.25 1208.67 L2106.66 1208.67 L2106.07 1208.67 L2105.49 1208.67 L2104.9 1208.67 L2104.31 1208.67 L2103.73 1208.67 L2103.14 1208.67 L2102.55 1208.67 L2101.97 1208.67 L2101.38 1208.67 L2100.8 1208.67 L2100.21 1208.67 L2099.62 1208.67 L2099.04 1208.67 L2098.45 1208.67 L2097.86 1208.67 L2097.28 1208.67 L2096.69 1208.67 L2096.1 1208.67 L2095.52 1208.67 L2094.93 1208.67 L2094.35 1208.67 L2093.76 1208.67 L2093.17 1208.67 L2092.59 1208.67 L2092 1208.67 L2091.41 1208.67 L2090.83 1208.67 L2090.24 1208.67 L2089.65 1208.67 L2089.07 1208.67 L2088.48 1208.67 L2087.89 1208.67 L2087.31 1208.67 L2086.72 1208.67 L2086.14 1208.67 L2085.55 1208.67 L2084.96 1208.67 L2084.38 1208.67 L2083.79 1208.67 L2083.2 1208.67 L2082.62 1208.67 L2082.03 1208.67 L2081.44 1208.67 L2080.86 1208.67 L2080.27 1208.67 L2079.68 1208.67 L2079.1 1208.67 L2078.51 1208.67 L2077.93 1208.67 L2077.34 1208.67 L2076.75 1208.67 L2076.17 1208.67 L2075.58 1208.67 L2074.99 1208.67 L2074.41 1208.67 L2073.82 1208.67 L2073.23 1208.67 L2072.65 1208.67 L2072.06 1208.67 L2071.48 1208.67 L2070.89 1208.67 L2070.3 1208.67 L2069.72 1208.67 L2069.13 1208.67 L2068.54 1208.67 L2067.96 1208.67 L2067.37 1208.67 L2066.78 1208.67 L2066.2 1208.67 L2065.61 1208.67 L2065.02 1208.67 L2064.44 1208.67 L2063.85 1208.67 L2063.27 1208.67 L2062.68 1208.67 L2062.09 1208.67 L2061.51 1208.67 L2060.92 1208.67 L2060.33 1208.67 L2059.75 1208.67 L2059.16 1208.67 L2058.57 1208.67 L2057.99 1208.67 L2057.4 1208.67 L2056.81 1208.67 L2056.23 1208.67 L2055.64 1208.67 L2055.06 1208.67 L2054.47 1208.67 L2053.88 1208.67 L2053.3 1208.67 L2052.71 1208.67 L2052.12 1208.67 L2051.54 1208.67 L2050.95 1208.67 L2050.36 1208.67 L2049.78 1208.67 L2049.19 1208.67 L2048.6 1208.67 L2048.02 1208.67 L2047.43 1208.67 L2046.85 1208.67 L2046.26 1208.67 L2045.67 1208.67 L2045.09 1208.67 L2044.5 1208.67 L2043.91 1208.67 L2043.33 1208.67 L2042.74 1208.67 L2042.15 1208.67 L2041.57 1208.67 L2040.98 1208.67 L2040.4 1208.67 L2039.81 1208.67 L2039.22 1208.67 L2038.64 1208.67 L2038.05 1208.67 L2037.46 1208.67 L2036.88 1208.67 L2036.29 1208.67 L2035.7 1208.67 L2035.12 1208.67 L2034.53 1208.67 L2033.94 1208.67 L2033.36 1208.67 L2032.77 1208.67 L2032.19 1208.67 L2031.6 1208.67 L2031.01 1208.67 L2030.43 1208.67 L2029.84 1208.67 L2029.25 1208.67 L2028.67 1208.67 L2028.08 1208.67 L2027.49 1208.67 L2026.91 1208.67 L2026.32 1208.67 L2025.73 1208.67 L2025.15 1208.67 L2024.56 1208.67 L2023.98 1208.67 L2023.39 1208.67 L2022.8 1208.67 L2022.22 1208.67 L2021.63 1208.67 L2021.04 1208.67 L2020.46 1208.67 L2019.87 1208.67 L2019.28 1208.67 L2018.7 1208.67 L2018.11 1208.67 L2017.53 1208.67 L2016.94 1208.67 L2016.35 1208.67 L2015.77 1208.67 L2015.18 1208.67 L2014.59 1208.67 L2014.01 1208.67 L2013.42 1208.67 L2012.83 1208.67 L2012.25 1208.67 L2011.66 1208.67 L2011.07 1208.67 L2010.49 1208.67 L2009.9 1208.67 L2009.32 1208.67 L2008.73 1208.67 L2008.14 1208.67 L2007.56 1208.67 L2006.97 1208.67 L2006.38 1208.67 L2005.8 1208.67 L2005.21 1208.67 L2004.62 1208.67 L2004.04 1208.67 L2003.45 1208.67 L2002.86 1208.67 L2002.28 1208.67 L2001.69 1208.67 L2001.11 1208.67 L2000.52 1208.67 L1999.93 1208.67 L1999.35 1208.67 L1998.76 1208.67 L1998.17 1208.67 L1997.59 1208.67 L1997 1208.67 L1996.41 1208.67 L1995.83 1208.67 L1995.24 1208.67 L1994.65 1208.67 L1994.07 1208.67 L1993.48 1208.67 L1992.9 1208.67 L1992.31 1208.67 L1991.72 1208.67 L1991.14 1208.67 L1990.55 1208.67 L1989.96 1208.67 L1989.38 1208.67 L1988.79 1208.67 L1988.2 1208.67 L1987.62 1208.67 L1987.03 1208.67 L1986.45 1208.67 L1985.86 1208.67 L1985.27 1208.67 L1984.69 1208.67 L1984.1 1208.67 L1983.51 1208.67 L1982.93 1208.67 L1982.34 1208.67 L1981.75 1208.67 L1981.17 1208.67 L1980.58 1208.67 L1979.99 1208.67 L1979.41 1208.67 L1978.82 1208.67 L1978.24 1208.67 L1977.65 1208.67 L1977.06 1208.67 L1976.48 1208.67 L1975.89 1208.67 L1975.3 1208.67 L1974.72 1208.67 L1974.13 1208.67 L1973.54 1208.67 L1972.96 1208.67 L1972.37 1208.67 L1971.78 1208.67 L1971.2 1208.67 L1970.61 1208.67 L1970.03 1208.67 L1969.44 1208.67 L1968.85 1208.67 L1968.27 1208.67 L1967.68 1208.67 L1967.09 1208.67 L1966.51 1208.67 L1965.92 1208.67 L1965.33 1208.67 L1964.75 1208.67 L1964.16 1208.67 L1963.58 1208.67 L1962.99 1208.67 L1962.4 1208.67 L1961.82 1208.67 L1961.23 1208.67 L1960.64 1208.67 L1960.06 1208.67 L1959.47 1208.67 L1958.88 1208.67 L1958.3 1208.67 L1957.71 1208.67 L1957.12 1208.67 L1956.54 1208.67 L1955.95 1208.67 L1955.37 1208.67 L1954.78 1208.67 L1954.19 1208.67 L1953.61 1208.67 L1953.02 1208.67 L1952.43 1208.67 L1951.85 1208.67 L1951.26 1208.67 L1950.67 1208.67 L1950.09 1208.67 L1949.5 1208.67 L1948.91 1208.67 L1948.33 1208.67 L1947.74 1208.67 L1947.16 1208.67 L1946.57 1208.67 L1945.98 1208.67 L1945.4 1208.67 L1944.81 1208.67 L1944.22 1208.67 L1943.64 1208.67 L1943.05 1208.67 L1942.46 1208.67 L1941.88 1208.67 L1941.29 1208.67 L1940.71 1208.67 L1940.12 1208.67 L1939.53 1208.67 L1938.95 1208.67 L1938.36 1208.67 L1937.77 1208.67 L1937.19 1208.67 L1936.6 1208.67 L1936.01 1208.67 L1935.43 1208.67 L1934.84 1208.67 L1934.25 1208.67 L1933.67 1208.67 L1933.08 1208.67 L1932.5 1208.67 L1931.91 1208.67 L1931.32 1208.67 L1930.74 1208.67 L1930.15 1208.67 L1929.56 1208.67 L1928.98 1208.67 L1928.39 1208.67 L1927.8 1208.67 L1927.22 1208.67 L1926.63 1208.67 L1926.04 1208.67 L1925.46 1208.67 L1924.87 1208.67 L1924.29 1208.67 L1923.7 1208.67 L1923.11 1208.67 L1922.53 1208.67 L1921.94 1208.67 L1921.35 1208.67 L1920.77 1208.67 L1920.18 1208.67 L1919.59 1208.67 L1919.01 1208.67 L1918.42 1208.67 L1917.83 1208.67 L1917.25 1208.67 L1916.66 1208.67 L1916.08 1208.67 L1915.49 1208.67 L1914.9 1208.67 L1914.32 1208.67 L1913.73 1208.67 L1913.14 1208.67 L1912.56 1208.67 L1911.97 1208.67 L1911.38 1208.67 L1910.8 1208.67 L1910.21 1208.67 L1909.63 1208.67 L1909.04 1208.67 L1908.45 1208.67 L1907.87 1208.67 L1907.28 1208.67 L1906.69 1208.67 L1906.11 1208.67 L1905.52 1208.67 L1904.93 1208.67 L1904.35 1208.67 L1903.76 1208.67 L1903.17 1208.67 L1902.59 1208.67 L1902 1208.67 L1901.42 1208.67 L1900.83 1208.67 L1900.24 1208.67 L1899.66 1208.67 L1899.07 1208.67 L1898.48 1208.67 L1897.9 1208.67 L1897.31 1208.67 L1896.72 1208.67 L1896.14 1208.67 L1895.55 1208.67 L1894.96 1208.67 L1894.38 1208.67 L1893.79 1208.67 L1893.21 1208.67 L1892.62 1208.67 L1892.03 1208.67 L1891.45 1208.67 L1890.86 1208.67 L1890.27 1208.67 L1889.69 1208.67 L1889.1 1208.67 L1888.51 1208.67 L1887.93 1208.67 L1887.34 1208.67 L1886.76 1208.67 L1886.17 1208.67 L1885.58 1208.67 L1885 1208.67 L1884.41 1208.67 L1883.82 1208.67 L1883.24 1208.67 L1882.65 1208.67 L1882.06 1208.67 L1881.48 1208.67 L1880.89 1208.67 L1880.3 1208.67 L1879.72 1208.67 L1879.13 1208.67 L1878.55 1208.67 L1877.96 1208.67 L1877.37 1208.67 L1876.79 1208.67 L1876.2 1208.67 L1875.61 1208.67 L1875.03 1208.67 L1874.44 1208.67 L1873.85 1208.67 L1873.27 1208.67 L1872.68 1208.67 L1872.09 1208.67 L1871.51 1208.67 L1870.92 1208.67 L1870.34 1208.67 L1869.75 1208.67 L1869.16 1208.67 L1868.58 1208.67 L1867.99 1208.67 L1867.4 1208.67 L1866.82 1208.67 L1866.23 1208.67 L1865.64 1208.67 L1865.06 1208.67 L1864.47 1208.67 L1863.88 1208.67 L1863.3 1208.67 L1862.71 1208.67 L1862.13 1208.67 L1861.54 1208.67 L1860.95 1208.67 L1860.37 1208.67 L1859.78 1208.67 L1859.19 1208.67 L1858.61 1208.67 L1858.02 1208.67 L1857.43 1208.67 L1856.85 1208.67 L1856.26 1208.67 L1855.68 1208.67 L1855.09 1208.67 L1854.5 1208.67 L1853.92 1208.67 L1853.33 1208.67 L1852.74 1208.67 L1852.16 1208.67 L1851.57 1208.67 L1850.98 1208.67 L1850.4 1208.67 L1849.81 1208.67 L1849.22 1208.67 L1848.64 1208.67 L1848.05 1208.67 L1847.47 1208.67 L1846.88 1208.67 L1846.29 1208.67 L1845.71 1208.67 L1845.12 1208.67 L1844.53 1208.67 L1843.95 1208.67 L1843.36 1208.67 L1842.77 1208.67 L1842.19 1208.67 L1841.6 1208.67 L1841.01 1208.67 L1840.43 1208.67 L1839.84 1208.67 L1839.26 1208.67 L1838.67 1208.67 L1838.08 1208.67 L1837.5 1208.67 L1836.91 1208.67 L1836.32 1208.67 L1835.74 1208.67 L1835.15 1208.67 L1834.56 1208.67 L1833.98 1208.67 L1833.39 1208.67 L1832.81 1208.67 L1832.22 1208.67 L1831.63 1208.67 L1831.05 1208.67 L1830.46 1208.67 L1829.87 1208.67 L1829.29 1208.67 L1828.7 1208.67 L1828.11 1208.67 L1827.53 1208.67 L1826.94 1208.67 L1826.35 1208.67 L1825.77 1208.67 L1825.18 1208.67 L1824.6 1208.67 L1824.01 1208.67 L1823.42 1208.67 L1822.84 1208.67 L1822.25 1208.67 L1821.66 1208.67 L1821.08 1208.67 L1820.49 1208.67 L1819.9 1208.67 L1819.32 1208.67 L1818.73 1208.67 L1818.14 1208.67 L1817.56 1208.67 L1816.97 1208.67 L1816.39 1208.67 L1815.8 1208.67 L1815.21 1208.67 L1814.63 1208.67 L1814.04 1208.67 L1813.45 1208.67 L1812.87 1208.67 L1812.28 1208.67 L1811.69 1208.67 L1811.11 1208.67 L1810.52 1208.67 L1809.94 1208.67 L1809.35 1208.67 L1808.76 1208.67 L1808.18 1208.67 L1807.59 1208.67 L1807 1208.67 L1806.42 1208.67 L1805.83 1208.67 L1805.24 1208.67 L1804.66 1208.67 L1804.07 1208.67 L1803.48 1208.67 L1802.9 1208.67 L1802.31 1208.67 L1801.73 1208.67 L1801.14 1208.67 L1800.55 1208.67 L1799.97 1208.67 L1799.38 1208.67 L1798.79 1208.67 L1798.21 1208.67 L1797.62 1208.67 L1797.03 1208.67 L1796.45 1208.67 L1795.86 1208.67 L1795.27 1208.67 L1794.69 1208.67 L1794.1 1208.67 L1793.52 1208.67 L1792.93 1208.67 L1792.34 1208.67 L1791.76 1208.67 L1791.17 1208.67 L1790.58 1208.67 L1790 1208.67 L1789.41 1208.67 L1788.82 1208.67 L1788.24 1208.67 L1787.65 1208.67 L1787.06 1208.67 L1786.48 1208.67 L1785.89 1208.67 L1785.31 1208.67 L1784.72 1208.67 L1784.13 1208.67 L1783.55 1208.67 L1782.96 1208.67 L1782.37 1208.67 L1781.79 1208.67 L1781.2 1208.67 L1780.61 1208.67 L1780.03 1208.67 L1779.44 1208.67 L1778.86 1208.67 L1778.27 1208.67 L1777.68 1208.67 L1777.1 1208.67 L1776.51 1208.67 L1775.92 1208.67 L1775.34 1208.67 L1774.75 1208.67 L1774.16 1208.67 L1773.58 1208.67 L1772.99 1208.67 L1772.4 1208.67 L1771.82 1208.67 L1771.23 1208.67 L1770.65 1208.67 L1770.06 1208.67 L1769.47 1208.67 L1768.89 1208.67 L1768.3 1208.67 L1767.71 1208.67 L1767.13 1208.67 L1766.54 1208.67 L1765.95 1208.67 L1765.37 1208.67 L1764.78 1208.67 L1764.19 1208.67 L1763.61 1208.67 L1763.02 1208.67 L1762.44 1208.67 L1761.85 1208.67 L1761.26 1208.67 L1760.68 1208.67 L1760.09 1208.67 L1759.5 1208.67 L1758.92 1208.67 L1758.33 1208.67 L1757.74 1208.67 L1757.16 1208.67 L1756.57 1208.67 L1755.99 1208.67 L1755.4 1208.67 L1754.81 1208.67 L1754.23 1208.67 L1753.64 1208.67 L1753.05 1208.67 L1752.47 1208.67 L1751.88 1208.67 L1751.29 1208.67 L1750.71 1208.67 L1750.12 1208.67 L1749.53 1208.67 L1748.95 1208.67 L1748.36 1208.67 L1747.78 1208.67 L1747.19 1208.67 L1746.6 1208.67 L1746.02 1208.67 L1745.43 1208.67 L1744.84 1208.67 L1744.26 1208.67 L1743.67 1208.67 L1743.08 1208.67 L1742.5 1208.67 L1741.91 1208.67 L1741.32 1208.67 L1740.74 1208.67 L1740.15 1208.67 L1739.57 1208.67 L1738.98 1208.67 L1738.39 1208.67 L1737.81 1208.67 L1737.22 1208.67 L1736.63 1208.67 L1736.05 1208.67 L1735.46 1208.67 L1734.87 1208.67 L1734.29 1208.67 L1733.7 1208.67 L1733.11 1208.67 L1732.53 1208.67 L1731.94 1208.67 L1731.36 1208.67 L1730.77 1208.67 L1730.18 1208.67 L1729.6 1208.67 L1729.01 1208.67 L1728.42 1208.67 L1727.84 1208.67 L1727.25 1208.67 L1726.66 1208.67 L1726.08 1208.67 L1725.49 1208.67 L1724.91 1208.67 L1724.32 1208.67 L1723.73 1208.67 L1723.15 1208.67 L1722.56 1208.67 L1721.97 1208.67 L1721.39 1208.67 L1720.8 1208.67 L1720.21 1208.67 L1719.63 1208.67 L1719.04 1208.67 L1718.45 1208.67 L1717.87 1208.67 L1717.28 1208.67 L1716.7 1208.67 L1716.11 1208.67 L1715.52 1208.67 L1714.94 1208.67 L1714.35 1208.67 L1713.76 1208.67 L1713.18 1208.67 L1712.59 1208.67 L1712 1208.67 L1711.42 1208.67 L1710.83 1208.67 L1710.24 1208.67 L1709.66 1208.67 L1709.07 1208.67 L1708.49 1208.67 L1707.9 1208.67 L1707.31 1208.67 L1706.73 1208.67 L1706.14 1208.67 L1705.55 1208.67 L1704.97 1208.67 L1704.38 1208.67 L1703.79 1208.67 L1703.21 1208.67 L1702.62 1208.67 L1702.04 1208.67 L1701.45 1208.67 L1700.86 1208.67 L1700.28 1208.67 L1699.69 1208.67 L1699.1 1208.67 L1698.52 1208.67 L1697.93 1208.67 L1697.34 1208.67 L1696.76 1208.67 L1696.17 1208.67 L1695.58 1208.67 L1695 1208.67 L1694.41 1208.67 L1693.83 1208.67 L1693.24 1208.67 L1692.65 1208.67 L1692.07 1208.67 L1691.48 1208.67 L1690.89 1208.67 L1690.31 1208.67 L1689.72 1208.67 L1689.13 1208.67 L1688.55 1208.67 L1687.96 1208.67 L1687.37 1208.67 L1686.79 1208.67 L1686.2 1208.67 L1685.62 1208.67 L1685.03 1208.67 L1684.44 1208.67 L1683.86 1208.67 L1683.27 1208.67 L1682.68 1208.67 L1682.1 1208.67 L1681.51 1208.67 L1680.92 1208.67 L1680.34 1208.67 L1679.75 1208.67 L1679.17 1208.67 L1678.58 1208.67 L1677.99 1208.67 L1677.41 1208.67 L1676.82 1208.67 L1676.23 1208.67 L1675.65 1208.67 L1675.06 1208.67 L1674.47 1208.67 L1673.89 1208.67 L1673.3 1208.67 L1672.71 1208.67 L1672.13 1208.67 L1671.54 1208.67 L1670.96 1208.67 L1670.37 1208.67 L1669.78 1208.67 L1669.2 1208.67 L1668.61 1208.67 L1668.02 1208.67 L1667.44 1208.67 L1666.85 1208.67 L1666.26 1208.67 L1665.68 1208.67 L1665.09 1208.67 L1664.5 1208.67 L1663.92 1208.67 L1663.33 1208.67 L1662.75 1208.67 L1662.16 1208.67 L1661.57 1208.67 L1660.99 1208.67 L1660.4 1208.67 L1659.81 1208.67 L1659.23 1208.67 L1658.64 1208.67 L1658.05 1208.67 L1657.47 1208.67 L1656.88 1208.67 L1656.29 1208.67 L1655.71 1208.67 L1655.12 1208.67 L1654.54 1208.67 L1653.95 1208.67 L1653.36 1208.67 L1652.78 1208.67 L1652.19 1208.67 L1651.6 1208.67 L1651.02 1208.67 L1650.43 1208.67 L1649.84 1208.67 L1649.26 1208.67 L1648.67 1208.67 L1648.09 1208.67 L1647.5 1208.67 L1646.91 1208.67 L1646.33 1208.67 L1645.74 1208.67 L1645.15 1208.67 L1644.57 1208.67 L1643.98 1208.67 L1643.39 1208.67 L1642.81 1208.67 L1642.22 1208.67 L1641.63 1208.67 L1641.05 1208.67 L1640.46 1208.67 L1639.88 1208.67 L1639.29 1208.67 L1638.7 1208.67 L1638.12 1208.67 L1637.53 1208.67 L1636.94 1208.67 L1636.36 1208.67 L1635.77 1208.67 L1635.18 1208.67 L1634.6 1208.67 L1634.01 1208.67 L1633.42 1208.67 L1632.84 1208.67 L1632.25 1208.67 L1631.67 1208.67 L1631.08 1208.67 L1630.49 1208.67 L1629.91 1208.67 L1629.32 1208.67 L1628.73 1208.67 L1628.15 1208.67 L1627.56 1208.67 L1626.97 1208.67 L1626.39 1208.67 L1625.8 1208.67 L1625.22 1208.67 L1624.63 1208.67 L1624.04 1208.67 L1623.46 1208.67 L1622.87 1208.67 L1622.28 1208.67 L1621.7 1208.67 L1621.11 1208.67 L1620.52 1208.67 L1619.94 1208.67 L1619.35 1208.67 L1618.76 1208.67 L1618.18 1208.67 L1617.59 1208.67 L1617.01 1208.67 L1616.42 1208.67 L1615.83 1208.67 L1615.25 1208.67 L1614.66 1208.67 L1614.07 1208.67 L1613.49 1208.67 L1612.9 1208.67 L1612.31 1208.67 L1611.73 1208.67 L1611.14 1208.67 L1610.55 1208.67 L1609.97 1208.67 L1609.38 1208.67 L1608.8 1208.67 L1608.21 1208.67 L1607.62 1208.67 L1607.04 1208.67 L1606.45 1208.67 L1605.86 1208.67 L1605.28 1208.67 L1604.69 1208.67 L1604.1 1208.67 L1603.52 1208.67 L1602.93 1208.67 L1602.34 1208.67 L1601.76 1208.67 L1601.17 1208.67 L1600.59 1208.67 L1600 1208.67 L1599.41 1208.67 L1598.83 1208.67 L1598.24 1208.67 L1597.65 1208.67 L1597.07 1208.67 L1596.48 1208.67 L1595.89 1208.67 L1595.31 1208.67 L1594.72 1208.67 L1594.14 1208.67 L1593.55 1208.67 L1592.96 1208.67 L1592.38 1208.67 L1591.79 1208.67 L1591.2 1208.67 L1590.62 1208.67 L1590.03 1208.67 L1589.44 1208.67 L1588.86 1208.67 L1588.27 1208.67 L1587.68 1208.67 L1587.1 1208.67 L1586.51 1208.67 L1585.93 1208.67 L1585.34 1208.67 L1584.75 1208.67 L1584.17 1208.67 L1583.58 1208.67 L1582.99 1208.67 L1582.41 1208.67 L1581.82 1208.67 L1581.23 1208.67 L1580.65 1208.67 L1580.06 1208.67 L1579.47 1208.67 L1578.89 1208.67 L1578.3 1208.67 L1577.72 1208.67 L1577.13 1208.67 L1576.54 1208.67 L1575.96 1208.67 L1575.37 1208.67 L1574.78 1208.67 L1574.2 1208.67 L1573.61 1208.67 L1573.02 1208.67 L1572.44 1208.67 L1571.85 1208.67 L1571.27 1208.67 L1570.68 1208.67 L1570.09 1208.67 L1569.51 1208.67 L1568.92 1208.67 L1568.33 1208.67 L1567.75 1208.67 L1567.16 1208.67 L1566.57 1208.67 L1565.99 1208.67 L1565.4 1208.67 L1564.81 1208.67 L1564.23 1208.67 L1563.64 1208.67 L1563.06 1208.67 L1562.47 1208.67 L1561.88 1208.67 L1561.3 1208.67 L1560.71 1208.67 L1560.12 1208.67 L1559.54 1208.67 L1558.95 1208.67 L1558.36 1208.67 L1557.78 1208.67 L1557.19 1208.67 L1556.6 1208.67 L1556.02 1208.67 L1555.43 1208.67 L1554.85 1208.67 L1554.26 1208.67 L1553.67 1208.67 L1553.09 1208.67 L1552.5 1208.67 L1551.91 1208.67 L1551.33 1208.67 L1550.74 1208.67 L1550.15 1208.67 L1549.57 1208.67 L1548.98 1208.67 L1548.4 1208.67 L1547.81 1208.67 L1547.22 1208.67 L1546.64 1208.67 L1546.05 1208.67 L1545.46 1208.67 L1544.88 1208.67 L1544.29 1208.67 L1543.7 1208.67 L1543.12 1208.67 L1542.53 1208.67 L1541.94 1208.67 L1541.36 1208.67 L1540.77 1208.67 L1540.19 1208.67 L1539.6 1208.67 L1539.01 1208.67 L1538.43 1208.67 L1537.84 1208.67 L1537.25 1208.67 L1536.67 1208.67 L1536.08 1208.67 L1535.49 1208.67 L1534.91 1208.67 L1534.32 1208.67 L1533.73 1208.67 L1533.15 1208.67 L1532.56 1208.67 L1531.98 1208.67 L1531.39 1208.67 L1530.8 1208.67 L1530.22 1208.67 L1529.63 1208.67 L1529.04 1208.67 L1528.46 1208.67 L1527.87 1208.67 L1527.28 1208.67 L1526.7 1208.67 L1526.11 1208.67 L1525.52 1208.67 L1524.94 1208.67 L1524.35 1208.67 L1523.77 1208.67 L1523.18 1208.67 L1522.59 1208.67 L1522.01 1208.67 L1521.42 1208.67 L1520.83 1208.67 L1520.25 1208.67 L1519.66 1208.67 L1519.07 1208.67 L1518.49 1208.67 L1517.9 1208.67 L1517.32 1208.67 L1516.73 1208.67 L1516.14 1208.67 L1515.56 1208.67 L1514.97 1208.67 L1514.38 1208.67 L1513.8 1208.67 L1513.21 1208.67 L1512.62 1208.67 L1512.04 1208.67 L1511.45 1208.67 L1510.86 1208.67 L1510.28 1208.67 L1509.69 1208.67 L1509.11 1208.67 L1508.52 1208.67 L1507.93 1208.67 L1507.35 1208.67 L1506.76 1208.67 L1506.17 1208.67 L1505.59 1208.67 L1505 1208.67 L1504.41 1208.67 L1503.83 1208.67 L1503.24 1208.67 L1502.65 1208.67 L1502.07 1208.67 L1501.48 1208.67 L1500.9 1208.67 L1500.31 1208.67 L1499.72 1208.67 L1499.14 1208.67 L1498.55 1208.67 L1497.96 1208.67 L1497.38 1208.67 L1496.79 1208.67 L1496.2 1208.67 L1495.62 1208.67 L1495.03 1208.67 L1494.45 1208.67 L1493.86 1208.67 L1493.27 1208.67 L1492.69 1208.67 L1492.1 1208.67 L1491.51 1208.67 L1490.93 1208.67 L1490.34 1208.67 L1489.75 1208.67 L1489.17 1208.67 L1488.58 1208.67 L1487.99 1208.67 L1487.41 1208.67 L1486.82 1208.67 L1486.24 1208.67 L1485.65 1208.67 L1485.06 1208.67 L1484.48 1208.67 L1483.89 1208.67 L1483.3 1208.67 L1482.72 1208.67 L1482.13 1208.67 L1481.54 1208.67 L1480.96 1208.67 L1480.37 1208.67 L1479.78 1208.67 L1479.2 1208.67 L1478.61 1208.67 L1478.03 1208.67 L1477.44 1208.67 L1476.85 1208.67 L1476.27 1208.67 L1475.68 1208.67 L1475.09 1208.67 L1474.51 1208.67 L1473.92 1208.67 L1473.33 1208.67 L1472.75 1208.67 L1472.16 1208.67 L1471.57 1208.67 L1470.99 1208.67 L1470.4 1208.67 L1469.82 1208.67 L1469.23 1208.67 L1468.64 1208.67 L1468.06 1208.67 L1467.47 1208.67 L1466.88 1208.67 L1466.3 1208.67 L1465.71 1208.67 L1465.12 1208.67 L1464.54 1208.67 L1463.95 1208.67 L1463.37 1208.67 L1462.78 1208.67 L1462.19 1208.67 L1461.61 1208.67 L1461.02 1208.67 L1460.43 1208.67 L1459.85 1208.67 L1459.26 1208.67 L1458.67 1208.67 L1458.09 1208.67 L1457.5 1208.67 L1456.91 1208.67 L1456.33 1208.67 L1455.74 1208.67 L1455.16 1208.67 L1454.57 1208.67 L1453.98 1208.67 L1453.4 1208.67 L1452.81 1208.67 L1452.22 1208.67 L1451.64 1208.67 L1451.05 1208.67 L1450.46 1208.67 L1449.88 1208.67 L1449.29 1208.67 L1448.7 1208.67 L1448.12 1208.67 L1447.53 1208.67 L1446.95 1208.67 L1446.36 1208.67 L1445.77 1208.67 L1445.19 1208.67 L1444.6 1208.67 L1444.01 1208.67 L1443.43 1208.67 L1442.84 1208.67 L1442.25 1208.67 L1441.67 1208.67 L1441.08 1208.67 L1440.5 1208.67 L1439.91 1208.67 L1439.32 1208.67 L1438.74 1208.67 L1438.15 1208.67 L1437.56 1208.67 L1436.98 1208.67 L1436.39 1208.67 L1435.8 1208.67 L1435.22 1208.67 L1434.63 1208.67 L1434.04 1208.67 L1433.46 1208.67 L1432.87 1208.67 L1432.29 1208.67 L1431.7 1208.67 L1431.11 1208.67 L1430.53 1208.67 L1429.94 1208.67 L1429.35 1208.67 L1428.77 1208.67 L1428.18 1208.67 L1427.59 1208.67 L1427.01 1208.67 L1426.42 1208.67 L1425.83 1208.67 L1425.25 1208.67 L1424.66 1208.67 L1424.08 1208.67 L1423.49 1208.67 L1422.9 1208.67 L1422.32 1208.67 L1421.73 1208.67 L1421.14 1208.67 L1420.56 1208.67 L1419.97 1208.67 L1419.38 1208.67 L1418.8 1208.67 L1418.21 1208.67 L1417.63 1208.67 L1417.04 1208.67 L1416.45 1208.67 L1415.87 1208.67 L1415.28 1208.67 L1414.69 1208.67 L1414.11 1208.67 L1413.52 1208.67 L1412.93 1208.67 L1412.35 1208.67 L1411.76 1208.67 L1411.17 1208.67 L1410.59 1208.67 L1410 1208.67 L1409.42 1208.67 L1408.83 1208.67 L1408.24 1208.67 L1407.66 1208.67 L1407.07 1208.67 L1406.48 1208.67 L1405.9 1208.67 L1405.31 1208.67 L1404.72 1208.67 L1404.14 1208.67 L1403.55 1208.67 L1402.96 1208.67 L1402.38 1208.67 L1401.79 1208.67 L1401.21 1208.67 L1400.62 1208.67 L1400.03 1208.67 L1399.45 1208.67 L1398.86 1208.67 L1398.27 1208.67 L1397.69 1208.67 L1397.1 1208.67 L1396.51 1208.67 L1395.93 1208.67 L1395.34 1208.67 L1394.75 1208.67 L1394.17 1208.67 L1393.58 1208.67 L1393 1208.67 L1392.41 1208.67 L1391.82 1208.67 L1391.24 1208.67 L1390.65 1208.67 L1390.06 1208.67 L1389.48 1208.67 L1388.89 1208.67 L1388.3 1208.67 L1387.72 1208.67 L1387.13 1208.67 L1386.55 1208.67 L1385.96 1208.67 L1385.37 1208.67 L1384.79 1208.67 L1384.2 1208.67 L1383.61 1208.67 L1383.03 1208.67 L1382.44 1208.67 L1381.85 1208.67 L1381.27 1208.67 L1380.68 1208.67 L1380.09 1208.67 L1379.51 1208.67 L1378.92 1208.67 L1378.34 1208.67 L1377.75 1208.67 L1377.16 1208.67 L1376.58 1208.67 L1375.99 1208.67 L1375.4 1208.67 L1374.82 1208.67 L1374.23 1208.67 L1373.64 1208.67 L1373.06 1208.67 L1372.47 1208.67 L1371.88 1208.67 L1371.3 1208.67 L1370.71 1208.67 L1370.13 1208.67 L1369.54 1208.67 L1368.95 1208.67 L1368.37 1208.67 L1367.78 1208.67 L1367.19 1208.67 L1366.61 1208.67 L1366.02 1208.67 L1365.43 1208.67 L1364.85 1208.67 L1364.26 1208.67 L1363.68 1208.67 L1363.09 1208.67 L1362.5 1208.67 L1361.92 1208.67 L1361.33 1208.67 L1360.74 1208.67 L1360.16 1208.67 L1359.57 1208.67 L1358.98 1208.67 L1358.4 1208.67 L1357.81 1208.67 L1357.22 1208.67 L1356.64 1208.67 L1356.05 1208.67 L1355.47 1208.67 L1354.88 1208.67 L1354.29 1208.67 L1353.71 1208.67 L1353.12 1208.67 L1352.53 1208.67 L1351.95 1208.67 L1351.36 1208.67 L1350.77 1208.67 L1350.19 1208.67 L1349.6 1208.67 L1349.01 1208.67 L1348.43 1208.67 L1347.84 1208.67 L1347.26 1208.67 L1346.67 1208.67 L1346.08 1208.67 L1345.5 1208.67 L1344.91 1208.67 L1344.32 1208.67 L1343.74 1208.67 L1343.15 1208.67 L1342.56 1208.67 L1341.98 1208.67 L1341.39 1208.67 L1340.8 1208.67 L1340.22 1208.67 L1339.63 1208.67 L1339.05 1208.67 L1338.46 1208.67 L1337.87 1208.67 L1337.29 1208.67 L1336.7 1208.67 L1336.11 1208.67 L1335.53 1208.67 L1334.94 1208.67 L1334.35 1208.67 L1333.77 1208.67 L1333.18 1208.67 L1332.6 1208.67 L1332.01 1208.67 L1331.42 1208.67 L1330.84 1208.67 L1330.25 1208.67 L1329.66 1208.67 L1329.08 1208.67 L1328.49 1208.67 L1327.9 1208.67 L1327.32 1208.67 L1326.73 1208.67 L1326.14 1208.67 L1325.56 1208.67 L1324.97 1208.67 L1324.39 1208.67 L1323.8 1208.67 L1323.21 1208.67 L1322.63 1208.67 L1322.04 1208.67 L1321.45 1208.67 L1320.87 1208.67 L1320.28 1208.67 L1319.69 1208.67 L1319.11 1208.67 L1318.52 1208.67 L1317.93 1208.67 L1317.35 1208.67 L1316.76 1208.67 L1316.18 1208.67 L1315.59 1208.67 L1315 1208.67 L1314.42 1208.67 L1313.83 1208.67 L1313.24 1208.67 L1312.66 1208.67 L1312.07 1208.67 L1311.48 1208.67 L1310.9 1208.67 L1310.31 1208.67 L1309.73 1208.67 L1309.14 1208.67 L1308.55 1208.67 L1307.97 1208.67 L1307.38 1208.67 L1306.79 1208.67 L1306.21 1208.67 L1305.62 1208.67 L1305.03 1208.67 L1304.45 1208.67 L1303.86 1208.67 L1303.27 1208.67 L1302.69 1208.67 L1302.1 1208.67 L1301.52 1208.67 L1300.93 1208.67 L1300.34 1208.67 L1299.76 1208.67 L1299.17 1208.67 L1298.58 1208.67 L1298 1208.67 L1297.41 1208.67 L1296.82 1208.67 L1296.24 1208.67 L1295.65 1208.67 L1295.06 1208.67 L1294.48 1208.67 L1293.89 1208.67 L1293.31 1208.67 L1292.72 1208.67 L1292.13 1208.67 L1291.55 1208.67 L1290.96 1208.67 L1290.37 1208.67 L1289.79 1208.67 L1289.2 1208.67 L1288.61 1208.67 L1288.03 1208.67 L1287.44 1208.67 L1286.86 1208.67 L1286.27 1208.67 L1285.68 1208.67 L1285.1 1208.67 L1284.51 1208.67 L1283.92 1208.67 L1283.34 1208.67 L1282.75 1208.67 L1282.16 1208.67 L1281.58 1208.67 L1280.99 1208.67 L1280.4 1208.67 L1279.82 1208.67 L1279.23 1208.67 L1278.65 1208.67 L1278.06 1208.67 L1277.47 1208.67 L1276.89 1208.67 L1276.3 1208.67 L1275.71 1208.67 L1275.13 1208.67 L1274.54 1208.67 L1273.95 1208.67 L1273.37 1208.67 L1272.78 1208.67 L1272.19 1208.67 L1271.61 1208.67 L1271.02 1208.67 L1270.44 1208.67 L1269.85 1208.67 L1269.26 1208.67 L1268.68 1208.67 L1268.09 1208.67 L1267.5 1208.67 L1266.92 1208.67 L1266.33 1208.67 L1265.74 1208.67 L1265.16 1208.67 L1264.57 1208.67 L1263.98 1208.67 L1263.4 1208.67 L1262.81 1208.67 L1262.23 1208.67 L1261.64 1208.67 L1261.05 1208.67 L1260.47 1208.67 L1259.88 1208.67 L1259.29 1208.67 L1258.71 1208.67 L1258.12 1208.67 L1257.53 1208.67 L1256.95 1208.67 L1256.36 1208.67 L1255.78 1208.67 L1255.19 1208.67 L1254.6 1208.67 L1254.02 1208.67 L1253.43 1208.67 L1252.84 1208.67 L1252.26 1208.67 L1251.67 1208.67 L1251.08 1208.67 L1250.5 1208.67 L1249.91 1208.67 L1249.32 1208.67 L1248.74 1208.67 L1248.15 1208.67 L1247.57 1208.67 L1246.98 1208.67 L1246.39 1208.67 L1245.81 1208.67 L1245.22 1208.67 L1244.63 1208.67 L1244.05 1208.67 L1243.46 1208.67 L1242.87 1208.67 L1242.29 1208.67 L1241.7 1208.67 L1241.11 1208.67 L1240.53 1208.67 L1239.94 1208.67 L1239.36 1208.67 L1238.77 1208.67 L1238.18 1208.67 L1237.6 1208.67 L1237.01 1208.67 L1236.42 1208.67 L1235.84 1208.67 L1235.25 1208.67 L1234.66 1208.67 L1234.08 1208.67 L1233.49 1208.67 L1232.91 1208.67 L1232.32 1208.67 L1231.73 1208.67 L1231.15 1208.67 L1230.56 1208.67 L1229.97 1208.67 L1229.39 1208.67 L1228.8 1208.67 L1228.21 1208.67 L1227.63 1208.67 L1227.04 1208.67 L1226.45 1208.67 L1225.87 1208.67 L1225.28 1208.67 L1224.7 1208.67 L1224.11 1208.67 L1223.52 1208.67 L1222.94 1208.67 L1222.35 1208.67 L1221.76 1208.67 L1221.18 1208.67 L1220.59 1208.67 L1220 1208.67 L1219.42 1208.67 L1218.83 1208.67 L1218.24 1208.67 L1217.66 1208.67 L1217.07 1208.67 L1216.49 1208.67 L1215.9 1208.67 L1215.31 1208.67 L1214.73 1208.67 L1214.14 1208.67 L1213.55 1208.67 L1212.97 1208.67 L1212.38 1208.67 L1211.79 1208.67 L1211.21 1208.67 L1210.62 1208.67 L1210.03 1208.67 L1209.45 1208.67 L1208.86 1208.67 L1208.28 1208.67 L1207.69 1208.67 L1207.1 1208.67 L1206.52 1208.67 L1205.93 1208.67 L1205.34 1208.67 L1204.76 1208.67 L1204.17 1208.67 L1203.58 1208.67 L1203 1208.67 L1202.41 1208.67 L1201.83 1208.67 L1201.24 1208.67 L1200.65 1208.67 L1200.07 1208.67 L1199.48 1208.67 L1198.89 1208.67 L1198.31 1208.67 L1197.72 1208.67 L1197.13 1208.67 L1196.55 1208.67 L1195.96 1208.67 L1195.37 1208.67 L1194.79 1208.67 L1194.2 1208.67 L1193.62 1208.67 L1193.03 1208.67 L1192.44 1208.67 L1191.86 1208.67 L1191.27 1208.67 L1190.68 1208.67 L1190.1 1208.67 L1189.51 1208.67 L1188.92 1208.67 L1188.34 1208.67 L1187.75 1208.67 L1187.16 1208.67 L1186.58 1208.67 L1185.99 1208.67 L1185.41 1208.67 L1184.82 1208.67 L1184.23 1208.67 L1183.65 1208.67 L1183.06 1208.67 L1182.47 1208.67 L1181.89 1208.67 L1181.3 1208.67 L1180.71 1208.67 L1180.13 1208.67 L1179.54 1208.67 L1178.96 1208.67 L1178.37 1208.67 L1177.78 1208.67 L1177.2 1208.67 L1176.61 1208.67 L1176.02 1208.67 L1175.44 1208.67 L1174.85 1208.67 L1174.26 1208.67 L1173.68 1208.67 L1173.09 1208.67 L1172.5 1208.67 L1171.92 1208.67 L1171.33 1208.67 L1170.75 1208.67 L1170.16 1208.67 L1169.57 1208.67 L1168.99 1208.67 L1168.4 1208.67 L1167.81 1208.67 L1167.23 1208.67 L1166.64 1208.67 L1166.05 1208.67 L1165.47 1208.67 L1164.88 1208.67 L1164.29 1208.67 L1163.71 1208.67 L1163.12 1208.67 L1162.54 1208.67 L1161.95 1208.67 L1161.36 1208.67 L1160.78 1208.67 L1160.19 1208.67 L1159.6 1208.67 L1159.02 1208.67 L1158.43 1208.67 L1157.84 1208.67 L1157.26 1208.67 L1156.67 1208.67 L1156.09 1208.67 L1155.5 1208.67 L1154.91 1208.67 L1154.33 1208.67 L1153.74 1208.67 L1153.15 1208.67 L1152.57 1208.67 L1151.98 1208.67 L1151.39 1208.67 L1150.81 1208.67 L1150.22 1208.67 L1149.63 1208.67 L1149.05 1208.67 L1148.46 1208.67 L1147.88 1208.67 L1147.29 1208.67 L1146.7 1208.67 L1146.12 1208.67 L1145.53 1208.67 L1144.94 1208.67 L1144.36 1208.67 L1143.77 1208.67 L1143.18 1208.67 L1142.6 1208.67 L1142.01 1208.67 L1141.42 1208.67 L1140.84 1208.67 L1140.25 1208.67 L1139.67 1208.67 L1139.08 1208.67 L1138.49 1208.67 L1137.91 1208.67 L1137.32 1208.67 L1136.73 1208.67 L1136.15 1208.67 L1135.56 1208.67 L1134.97 1208.67 L1134.39 1208.67 L1133.8 1208.67 L1133.21 1208.67 L1132.63 1208.67 L1132.04 1208.67 L1131.46 1208.67 L1130.87 1208.67 L1130.28 1208.67 L1129.7 1208.67 L1129.11 1208.67 L1128.52 1208.67 L1127.94 1208.67 L1127.35 1208.67 L1126.76 1208.67 L1126.18 1208.67 L1125.59 1208.67 L1125.01 1208.67 L1124.42 1208.67 L1123.83 1208.67 L1123.25 1208.67 L1122.66 1208.67 L1122.07 1208.67 L1121.49 1208.67 L1120.9 1208.67 L1120.31 1208.67 L1119.73 1208.67 L1119.14 1208.67 L1118.55 1208.67 L1117.97 1208.67 L1117.38 1208.67 L1116.8 1208.67 L1116.21 1208.67 L1115.62 1208.67 L1115.04 1208.67 L1114.45 1208.67 L1113.86 1208.67 L1113.28 1208.67 L1112.69 1208.67 L1112.1 1208.67 L1111.52 1208.67 L1110.93 1208.67 L1110.34 1208.67 L1109.76 1208.67 L1109.17 1208.67 L1108.59 1208.67 L1108 1208.67 L1107.41 1208.67 L1106.83 1208.67 L1106.24 1208.67 L1105.65 1208.67 L1105.07 1208.67 L1104.48 1208.67 L1103.89 1208.67 L1103.31 1208.67 L1102.72 1208.67 L1102.14 1208.67 L1101.55 1208.67 L1100.96 1208.67 L1100.38 1208.67 L1099.79 1208.67 L1099.2 1208.67 L1098.62 1208.67 L1098.03 1208.67 L1097.44 1208.67 L1096.86 1208.67 L1096.27 1208.67 L1095.68 1208.67 L1095.1 1208.67 L1094.51 1208.67 L1093.93 1208.67 L1093.34 1208.67 L1092.75 1208.67 L1092.17 1208.67 L1091.58 1208.67 L1090.99 1208.67 L1090.41 1208.67 L1089.82 1208.67 L1089.23 1208.67 L1088.65 1208.67 L1088.06 1208.67 L1087.47 1208.67 L1086.89 1208.67 L1086.3 1208.67 L1085.72 1208.67 L1085.13 1208.67 L1084.54 1208.67 L1083.96 1208.67 L1083.37 1208.67 L1082.78 1208.67 L1082.2 1208.67 L1081.61 1208.67 L1081.02 1208.67 L1080.44 1208.67 L1079.85 1208.67 L1079.26 1208.67 L1078.68 1208.67 L1078.09 1208.67 L1077.51 1208.67 L1076.92 1208.67 L1076.33 1208.67 L1075.75 1208.67 L1075.16 1208.67 L1074.57 1208.67 L1073.99 1208.67 L1073.4 1208.67 L1072.81 1208.67 L1072.23 1208.67 L1071.64 1208.67 L1071.06 1208.67 L1070.47 1208.67 L1069.88 1208.67 L1069.3 1208.67 L1068.71 1208.67 L1068.12 1208.67 L1067.54 1208.67 L1066.95 1208.67 L1066.36 1208.67 L1065.78 1208.67 L1065.19 1208.67 L1064.6 1208.67 L1064.02 1208.67 L1063.43 1208.67 L1062.85 1208.67 L1062.26 1208.67 L1061.67 1208.67 L1061.09 1208.67 L1060.5 1208.67 L1059.91 1208.67 L1059.33 1208.67 L1058.74 1208.67 L1058.15 1208.67 L1057.57 1208.67 L1056.98 1208.67 L1056.39 1208.67 L1055.81 1208.67 L1055.22 1208.67 L1054.64 1208.67 L1054.05 1208.67 L1053.46 1208.67 L1052.88 1208.67 L1052.29 1208.67 L1051.7 1208.67 L1051.12 1208.67 L1050.53 1208.67 L1049.94 1208.67 L1049.36 1208.67 L1048.77 1208.67 L1048.19 1208.67 L1047.6 1208.67 L1047.01 1208.67 L1046.43 1208.67 L1045.84 1208.67 L1045.25 1208.67 L1044.67 1208.67 L1044.08 1208.67 L1043.49 1208.67 L1042.91 1208.67 L1042.32 1208.67 L1041.73 1208.67 L1041.15 1208.67 L1040.56 1208.67 L1039.98 1208.67 L1039.39 1208.67 L1038.8 1208.67 L1038.22 1208.67 L1037.63 1208.67 L1037.04 1208.67 L1036.46 1208.67 L1035.87 1208.67 L1035.28 1208.67 L1034.7 1208.67 L1034.11 1208.67 L1033.52 1208.67 L1032.94 1208.67 L1032.35 1208.67 L1031.77 1208.67 L1031.18 1208.67 L1030.59 1208.67 L1030.01 1208.67 L1029.42 1208.67 L1028.83 1208.67 L1028.25 1208.67 L1027.66 1208.67 L1027.07 1208.67 L1026.49 1208.67 L1025.9 1208.67 L1025.32 1208.67 L1024.73 1208.67 L1024.14 1208.67 L1023.56 1208.67 L1022.97 1208.67 L1022.38 1208.67 L1021.8 1208.67 L1021.21 1208.67 L1020.62 1208.67 L1020.04 1208.67 L1019.45 1208.67 L1018.86 1208.67 L1018.28 1208.67 L1017.69 1208.67 L1017.11 1208.67 L1016.52 1208.67 L1015.93 1208.67 L1015.35 1208.67 L1014.76 1208.67 L1014.17 1208.67 L1013.59 1208.67 L1013 1208.67 L1012.41 1208.67 L1011.83 1208.67 L1011.24 1208.67 L1010.65 1208.67 L1010.07 1208.67 L1009.48 1208.67 L1008.9 1208.67 L1008.31 1208.67 L1007.72 1208.67 L1007.14 1208.67 L1006.55 1208.67 L1005.96 1208.67 L1005.38 1208.67 L1004.79 1208.67 L1004.2 1208.67 L1003.62 1208.67 L1003.03 1208.67 L1002.44 1208.67 L1001.86 1208.67 L1001.27 1208.67 L1000.69 1208.67 L1000.1 1208.67 L999.513 1208.67 L998.926 1208.67 L998.34 1208.67 L997.754 1208.67 L997.167 1208.67 L996.581 1208.67 L995.994 1208.67 L995.408 1208.67 L994.822 1208.67 L994.235 1208.67 L993.649 1208.67 L993.062 1208.67 L992.476 1208.67 L991.889 1208.67 L991.303 1208.67 L990.717 1208.67 L990.13 1208.67 L989.544 1208.67 L988.957 1208.67 L988.371 1208.67 L987.785 1208.67 L987.198 1208.67 L986.612 1208.67 L986.025 1208.67  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.06 986.612,1209.06 987.198,1209.06 987.785,1209.06 988.371,1209.06 988.957,1209.06 989.544,1209.06 990.13,1209.06 990.717,1209.06 991.303,1209.06 991.889,1209.06 992.476,1209.06 993.062,1209.06 993.649,1209.06 994.235,1209.06 994.822,1209.06 995.408,1209.06 995.994,1209.06 996.581,1209.06 997.167,1209.06 997.754,1209.06 998.34,1209.06 998.926,1209.06 999.513,1209.06 1000.1,1209.06 1000.69,1209.06 1001.27,1209.06 1001.86,1209.06 1002.44,1209.06 1003.03,1209.06 1003.62,1209.06 1004.2,1209.06 1004.79,1209.06 1005.38,1209.06 1005.96,1209.06 1006.55,1209.06 1007.14,1209.06 1007.72,1209.06 1008.31,1209.06 1008.9,1209.06 1009.48,1209.06 1010.07,1209.06 1010.65,1209.06 1011.24,1209.06 1011.83,1209.06 1012.41,1209.06 1013,1209.06 1013.59,1209.06 1014.17,1209.06 1014.76,1209.06 1015.35,1209.06 1015.93,1209.06 1016.52,1209.06 1017.11,1209.06 1017.69,1209.06 1018.28,1209.06 1018.86,1209.06 1019.45,1209.06 1020.04,1209.06 1020.62,1209.06 1021.21,1209.06 1021.8,1209.06 1022.38,1209.06 1022.97,1209.06 1023.56,1209.06 1024.14,1209.06 1024.73,1209.06 1025.32,1209.06 1025.9,1209.06 1026.49,1209.06 1027.07,1209.06 1027.66,1209.06 1028.25,1209.06 1028.83,1209.06 1029.42,1209.06 1030.01,1209.06 1030.59,1209.06 1031.18,1209.06 1031.77,1209.06 1032.35,1209.06 1032.94,1209.06 1033.52,1209.06 1034.11,1209.06 1034.7,1209.06 1035.28,1209.06 1035.87,1209.06 1036.46,1209.06 1037.04,1209.06 1037.63,1209.06 1038.22,1209.06 1038.8,1209.06 1039.39,1209.06 1039.98,1209.06 1040.56,1209.06 1041.15,1209.06 1041.73,1209.06 1042.32,1209.06 1042.91,1209.06 1043.49,1209.06 1044.08,1209.06 1044.67,1209.06 1045.25,1209.06 1045.84,1209.06 1046.43,1209.06 1047.01,1209.06 1047.6,1209.06 1048.19,1209.06 1048.77,1209.06 1049.36,1209.06 1049.94,1209.06 1050.53,1209.06 1051.12,1209.06 1051.7,1209.06 1052.29,1209.06 1052.88,1209.06 1053.46,1209.06 1054.05,1209.06 1054.64,1209.06 1055.22,1209.06 1055.81,1209.06 1056.39,1209.06 1056.98,1209.06 1057.57,1209.06 1058.15,1209.06 1058.74,1209.06 1059.33,1209.06 1059.91,1209.06 1060.5,1209.06 1061.09,1209.06 1061.67,1209.06 1062.26,1209.06 1062.85,1209.06 1063.43,1209.06 1064.02,1209.06 1064.6,1209.06 1065.19,1209.06 1065.78,1209.06 1066.36,1209.06 1066.95,1209.06 1067.54,1209.06 1068.12,1209.06 1068.71,1209.06 1069.3,1209.06 1069.88,1209.06 1070.47,1209.06 1071.06,1209.06 1071.64,1209.06 1072.23,1209.06 1072.81,1209.06 1073.4,1209.06 1073.99,1209.06 1074.57,1209.06 1075.16,1209.06 1075.75,1209.06 1076.33,1209.06 1076.92,1209.06 1077.51,1209.06 1078.09,1209.06 1078.68,1209.06 1079.26,1209.06 1079.85,1209.06 1080.44,1209.06 1081.02,1209.06 1081.61,1209.06 1082.2,1209.06 1082.78,1209.06 1083.37,1209.06 1083.96,1209.06 1084.54,1209.06 1085.13,1209.06 1085.72,1209.06 1086.3,1209.06 1086.89,1209.06 1087.47,1209.06 1088.06,1209.06 1088.65,1209.06 1089.23,1209.06 1089.82,1209.06 1090.41,1209.06 1090.99,1209.06 1091.58,1209.06 1092.17,1209.06 1092.75,1209.06 1093.34,1209.06 1093.93,1209.06 1094.51,1209.06 1095.1,1209.06 1095.68,1209.06 1096.27,1209.06 1096.86,1209.06 1097.44,1209.06 1098.03,1209.06 1098.62,1209.06 1099.2,1209.06 1099.79,1209.06 1100.38,1209.06 1100.96,1209.06 1101.55,1209.06 1102.14,1209.06 1102.72,1209.06 1103.31,1209.06 1103.89,1209.06 1104.48,1209.06 1105.07,1209.06 1105.65,1209.06 1106.24,1209.06 1106.83,1209.06 1107.41,1209.06 1108,1209.06 1108.59,1209.06 1109.17,1209.06 1109.76,1209.06 1110.34,1209.06 1110.93,1209.06 1111.52,1209.06 1112.1,1209.06 1112.69,1209.06 1113.28,1209.06 1113.86,1209.06 1114.45,1209.06 1115.04,1209.06 1115.62,1209.06 1116.21,1209.06 1116.8,1209.06 1117.38,1209.06 1117.97,1209.06 1118.55,1209.06 1119.14,1209.06 1119.73,1209.06 1120.31,1209.06 1120.9,1209.06 1121.49,1209.06 1122.07,1209.06 1122.66,1209.06 1123.25,1209.06 1123.83,1209.06 1124.42,1209.06 1125.01,1209.06 1125.59,1209.06 1126.18,1209.06 1126.76,1209.06 1127.35,1209.06 1127.94,1209.06 1128.52,1209.06 1129.11,1209.06 1129.7,1209.06 1130.28,1209.06 1130.87,1209.06 1131.46,1209.06 1132.04,1209.06 1132.63,1209.06 1133.21,1209.06 1133.8,1209.06 1134.39,1209.06 1134.97,1209.06 1135.56,1209.06 1136.15,1209.06 1136.73,1209.06 1137.32,1209.06 1137.91,1209.06 1138.49,1209.06 1139.08,1209.06 1139.67,1209.06 1140.25,1209.06 1140.84,1209.06 1141.42,1209.06 1142.01,1209.06 1142.6,1209.06 1143.18,1209.06 1143.77,1209.06 1144.36,1209.06 1144.94,1209.06 1145.53,1209.06 1146.12,1209.06 1146.7,1209.06 1147.29,1209.06 1147.88,1209.06 1148.46,1209.06 1149.05,1209.06 1149.63,1209.06 1150.22,1209.06 1150.81,1209.06 1151.39,1209.06 1151.98,1209.06 1152.57,1209.06 1153.15,1209.06 1153.74,1209.06 1154.33,1209.06 1154.91,1209.06 1155.5,1209.06 1156.09,1209.06 1156.67,1209.06 1157.26,1209.06 1157.84,1209.06 1158.43,1209.06 1159.02,1209.06 1159.6,1209.06 1160.19,1209.06 1160.78,1209.06 1161.36,1209.06 1161.95,1209.06 1162.54,1209.06 1163.12,1209.06 1163.71,1209.06 1164.29,1209.06 1164.88,1209.06 1165.47,1209.06 1166.05,1209.06 1166.64,1209.06 1167.23,1209.06 1167.81,1209.06 1168.4,1209.06 1168.99,1209.06 1169.57,1209.06 1170.16,1209.06 1170.75,1209.06 1171.33,1209.06 1171.92,1209.06 1172.5,1209.06 1173.09,1209.06 1173.68,1209.06 1174.26,1209.06 1174.85,1209.06 1175.44,1209.06 1176.02,1209.06 1176.61,1209.06 1177.2,1209.06 1177.78,1209.06 1178.37,1209.06 1178.96,1209.06 1179.54,1209.06 1180.13,1209.06 1180.71,1209.06 1181.3,1209.06 1181.89,1209.06 1182.47,1209.06 1183.06,1209.06 1183.65,1209.06 1184.23,1209.06 1184.82,1209.06 1185.41,1209.06 1185.99,1209.06 1186.58,1209.06 1187.16,1209.06 1187.75,1209.06 1188.34,1209.06 1188.92,1209.06 1189.51,1209.06 1190.1,1209.06 1190.68,1209.06 1191.27,1209.06 1191.86,1209.06 1192.44,1209.06 1193.03,1209.06 1193.62,1209.06 1194.2,1209.06 1194.79,1209.06 1195.37,1209.06 1195.96,1209.06 1196.55,1209.06 1197.13,1209.06 1197.72,1209.06 1198.31,1209.06 1198.89,1209.06 1199.48,1209.06 1200.07,1209.06 1200.65,1209.06 1201.24,1209.06 1201.83,1209.06 1202.41,1209.06 1203,1209.06 1203.58,1209.06 1204.17,1209.06 1204.76,1209.06 1205.34,1209.06 1205.93,1209.06 1206.52,1209.06 1207.1,1209.06 1207.69,1209.06 1208.28,1209.06 1208.86,1209.06 1209.45,1209.06 1210.03,1209.06 1210.62,1209.06 1211.21,1209.06 1211.79,1209.06 1212.38,1209.06 1212.97,1209.06 1213.55,1209.06 1214.14,1209.06 1214.73,1209.06 1215.31,1209.06 1215.9,1209.06 1216.49,1209.06 1217.07,1209.06 1217.66,1209.06 1218.24,1209.06 1218.83,1209.06 1219.42,1209.06 1220,1209.06 1220.59,1209.06 1221.18,1209.06 1221.76,1209.06 1222.35,1209.06 1222.94,1209.06 1223.52,1209.06 1224.11,1209.06 1224.7,1209.06 1225.28,1209.06 1225.87,1209.06 1226.45,1209.06 1227.04,1209.06 1227.63,1209.06 1228.21,1209.06 1228.8,1209.06 1229.39,1209.06 1229.97,1209.06 1230.56,1209.06 1231.15,1209.06 1231.73,1209.06 1232.32,1209.06 1232.91,1209.06 1233.49,1209.06 1234.08,1209.06 1234.66,1209.06 1235.25,1209.06 1235.84,1209.06 1236.42,1209.06 1237.01,1209.06 1237.6,1209.06 1238.18,1209.06 1238.77,1209.06 1239.36,1209.06 1239.94,1209.06 1240.53,1209.06 1241.11,1209.06 1241.7,1209.06 1242.29,1209.06 1242.87,1209.06 1243.46,1209.06 1244.05,1209.06 1244.63,1209.06 1245.22,1209.06 1245.81,1209.06 1246.39,1209.06 1246.98,1209.06 1247.57,1209.06 1248.15,1209.06 1248.74,1209.06 1249.32,1209.06 1249.91,1209.06 1250.5,1209.06 1251.08,1209.06 1251.67,1209.06 1252.26,1209.06 1252.84,1209.06 1253.43,1209.06 1254.02,1209.06 1254.6,1209.06 1255.19,1209.06 1255.78,1209.06 1256.36,1209.06 1256.95,1209.06 1257.53,1209.06 1258.12,1209.06 1258.71,1209.06 1259.29,1209.06 1259.88,1209.06 1260.47,1209.06 1261.05,1209.06 1261.64,1209.06 1262.23,1209.06 1262.81,1209.06 1263.4,1209.06 1263.98,1209.06 1264.57,1209.06 1265.16,1209.06 1265.74,1209.06 1266.33,1209.06 1266.92,1209.06 1267.5,1209.06 1268.09,1209.06 1268.68,1209.06 1269.26,1209.06 1269.85,1209.06 1270.44,1209.06 1271.02,1209.06 1271.61,1209.06 1272.19,1209.06 1272.78,1209.06 1273.37,1209.06 1273.95,1209.06 1274.54,1209.06 1275.13,1209.06 1275.71,1209.06 1276.3,1209.06 1276.89,1209.06 1277.47,1209.06 1278.06,1209.06 1278.65,1209.06 1279.23,1209.06 1279.82,1209.06 1280.4,1209.06 1280.99,1209.06 1281.58,1209.06 1282.16,1209.06 1282.75,1209.06 1283.34,1209.06 1283.92,1209.06 1284.51,1209.06 1285.1,1209.06 1285.68,1209.06 1286.27,1209.06 1286.86,1209.06 1287.44,1209.06 1288.03,1209.06 1288.61,1209.06 1289.2,1209.06 1289.79,1209.06 1290.37,1209.06 1290.96,1209.06 1291.55,1209.06 1292.13,1209.06 1292.72,1209.06 1293.31,1209.06 1293.89,1209.06 1294.48,1209.06 1295.06,1209.06 1295.65,1209.06 1296.24,1209.06 1296.82,1209.06 1297.41,1209.06 1298,1209.06 1298.58,1209.06 1299.17,1209.06 1299.76,1209.06 1300.34,1209.06 1300.93,1209.06 1301.52,1209.06 1302.1,1209.06 1302.69,1209.06 1303.27,1209.06 1303.86,1209.06 1304.45,1209.06 1305.03,1209.06 1305.62,1209.06 1306.21,1209.06 1306.79,1209.06 1307.38,1209.06 1307.97,1209.06 1308.55,1209.06 1309.14,1209.06 1309.73,1209.06 1310.31,1209.06 1310.9,1209.06 1311.48,1209.06 1312.07,1209.06 1312.66,1209.06 1313.24,1209.06 1313.83,1209.06 1314.42,1209.06 1315,1209.06 1315.59,1209.06 1316.18,1209.06 1316.76,1209.06 1317.35,1209.06 1317.93,1209.06 1318.52,1209.06 1319.11,1209.06 1319.69,1209.06 1320.28,1209.06 1320.87,1209.06 1321.45,1209.06 1322.04,1209.06 1322.63,1209.06 1323.21,1209.06 1323.8,1209.06 1324.39,1209.06 1324.97,1209.06 1325.56,1209.06 1326.14,1209.06 1326.73,1209.06 1327.32,1209.06 1327.9,1209.06 1328.49,1209.06 1329.08,1209.06 1329.66,1209.06 1330.25,1209.06 1330.84,1209.06 1331.42,1209.06 1332.01,1209.06 1332.6,1209.06 1333.18,1209.06 1333.77,1209.06 1334.35,1209.06 1334.94,1209.06 1335.53,1209.06 1336.11,1209.06 1336.7,1209.06 1337.29,1209.06 1337.87,1209.06 1338.46,1209.06 1339.05,1209.06 1339.63,1209.06 1340.22,1209.06 1340.8,1209.06 1341.39,1209.06 1341.98,1209.06 1342.56,1209.06 1343.15,1209.06 1343.74,1209.06 1344.32,1209.06 1344.91,1209.06 1345.5,1209.06 1346.08,1209.06 1346.67,1209.06 1347.26,1209.06 1347.84,1209.06 1348.43,1209.06 1349.01,1209.06 1349.6,1209.06 1350.19,1209.06 1350.77,1209.06 1351.36,1209.06 1351.95,1209.06 1352.53,1209.06 1353.12,1209.06 1353.71,1209.06 1354.29,1209.06 1354.88,1209.06 1355.47,1209.06 1356.05,1209.06 1356.64,1209.06 1357.22,1209.06 1357.81,1209.06 1358.4,1209.06 1358.98,1209.06 1359.57,1209.06 1360.16,1209.06 1360.74,1209.06 1361.33,1209.06 1361.92,1209.06 1362.5,1209.06 1363.09,1209.06 1363.68,1209.06 1364.26,1209.06 1364.85,1209.06 1365.43,1209.06 1366.02,1209.06 1366.61,1209.06 1367.19,1209.06 1367.78,1209.06 1368.37,1209.06 1368.95,1209.06 1369.54,1209.06 1370.13,1209.06 1370.71,1209.06 1371.3,1209.06 1371.88,1209.06 1372.47,1209.06 1373.06,1209.06 1373.64,1209.06 1374.23,1209.06 1374.82,1209.06 1375.4,1209.06 1375.99,1209.06 1376.58,1209.06 1377.16,1209.06 1377.75,1209.06 1378.34,1209.06 1378.92,1209.06 1379.51,1209.06 1380.09,1209.06 1380.68,1209.06 1381.27,1209.06 1381.85,1209.06 1382.44,1209.06 1383.03,1209.06 1383.61,1209.06 1384.2,1209.06 1384.79,1209.06 1385.37,1209.06 1385.96,1209.06 1386.55,1209.06 1387.13,1209.06 1387.72,1209.06 1388.3,1209.06 1388.89,1209.06 1389.48,1209.06 1390.06,1209.06 1390.65,1209.06 1391.24,1209.06 1391.82,1209.06 1392.41,1209.06 1393,1209.06 1393.58,1209.06 1394.17,1209.06 1394.75,1209.06 1395.34,1209.06 1395.93,1209.06 1396.51,1209.06 1397.1,1209.06 1397.69,1209.06 1398.27,1209.06 1398.86,1209.06 1399.45,1209.06 1400.03,1209.06 1400.62,1209.06 1401.21,1209.06 1401.79,1209.06 1402.38,1209.06 1402.96,1209.06 1403.55,1209.06 1404.14,1209.06 1404.72,1209.06 1405.31,1209.06 1405.9,1209.06 1406.48,1209.06 1407.07,1209.06 1407.66,1209.06 1408.24,1209.06 1408.83,1209.06 1409.42,1209.06 1410,1209.06 1410.59,1209.06 1411.17,1209.06 1411.76,1209.06 1412.35,1209.06 1412.93,1209.06 1413.52,1209.06 1414.11,1209.06 1414.69,1209.06 1415.28,1209.06 1415.87,1209.06 1416.45,1209.06 1417.04,1209.06 1417.63,1209.06 1418.21,1209.06 1418.8,1209.06 1419.38,1209.06 1419.97,1209.06 1420.56,1209.06 1421.14,1209.06 1421.73,1209.06 1422.32,1209.06 1422.9,1209.06 1423.49,1209.06 1424.08,1209.06 1424.66,1209.06 1425.25,1209.06 1425.83,1209.06 1426.42,1209.06 1427.01,1209.06 1427.59,1209.06 1428.18,1209.06 1428.77,1209.06 1429.35,1209.06 1429.94,1209.06 1430.53,1209.06 1431.11,1209.06 1431.7,1209.06 1432.29,1209.06 1432.87,1209.06 1433.46,1209.06 1434.04,1209.06 1434.63,1209.06 1435.22,1209.06 1435.8,1209.06 1436.39,1209.06 1436.98,1209.06 1437.56,1209.06 1438.15,1209.06 1438.74,1209.06 1439.32,1209.06 1439.91,1209.06 1440.5,1209.06 1441.08,1209.06 1441.67,1209.06 1442.25,1209.06 1442.84,1209.06 1443.43,1209.06 1444.01,1209.06 1444.6,1209.06 1445.19,1209.06 1445.77,1209.06 1446.36,1209.06 1446.95,1209.06 1447.53,1209.06 1448.12,1209.06 1448.7,1209.06 1449.29,1209.06 1449.88,1209.06 1450.46,1209.06 1451.05,1209.06 1451.64,1209.06 1452.22,1209.06 1452.81,1209.06 1453.4,1209.06 1453.98,1209.06 1454.57,1209.06 1455.16,1209.06 1455.74,1209.06 1456.33,1209.06 1456.91,1209.06 1457.5,1209.06 1458.09,1209.06 1458.67,1209.06 1459.26,1209.06 1459.85,1209.06 1460.43,1209.06 1461.02,1209.06 1461.61,1209.06 1462.19,1209.06 1462.78,1209.06 1463.37,1209.06 1463.95,1209.06 1464.54,1209.06 1465.12,1209.06 1465.71,1209.06 1466.3,1209.06 1466.88,1209.06 1467.47,1209.06 1468.06,1209.06 1468.64,1209.06 1469.23,1209.06 1469.82,1209.06 1470.4,1209.06 1470.99,1209.06 1471.57,1209.06 1472.16,1209.06 1472.75,1209.06 1473.33,1209.06 1473.92,1209.06 1474.51,1209.06 1475.09,1209.06 1475.68,1209.06 1476.27,1209.06 1476.85,1209.06 1477.44,1209.06 1478.03,1209.06 1478.61,1209.06 1479.2,1209.06 1479.78,1209.06 1480.37,1209.06 1480.96,1209.06 1481.54,1209.06 1482.13,1209.06 1482.72,1209.06 1483.3,1209.06 1483.89,1209.06 1484.48,1209.06 1485.06,1209.06 1485.65,1209.06 1486.24,1209.06 1486.82,1209.06 1487.41,1209.06 1487.99,1209.06 1488.58,1209.06 1489.17,1209.06 1489.75,1209.06 1490.34,1209.06 1490.93,1209.06 1491.51,1209.06 1492.1,1209.06 1492.69,1209.06 1493.27,1209.06 1493.86,1209.06 1494.45,1209.06 1495.03,1209.06 1495.62,1209.06 1496.2,1209.06 1496.79,1209.06 1497.38,1209.06 1497.96,1209.06 1498.55,1209.06 1499.14,1209.06 1499.72,1209.06 1500.31,1209.06 1500.9,1209.06 1501.48,1209.06 1502.07,1209.06 1502.65,1209.06 1503.24,1209.06 1503.83,1209.06 1504.41,1209.06 1505,1209.06 1505.59,1209.06 1506.17,1209.06 1506.76,1209.06 1507.35,1209.06 1507.93,1209.06 1508.52,1209.06 1509.11,1209.06 1509.69,1209.06 1510.28,1209.06 1510.86,1209.06 1511.45,1209.06 1512.04,1209.06 1512.62,1209.06 1513.21,1209.06 1513.8,1209.06 1514.38,1209.06 1514.97,1209.06 1515.56,1209.06 1516.14,1209.06 1516.73,1209.06 1517.32,1209.06 1517.9,1209.06 1518.49,1209.06 1519.07,1209.06 1519.66,1209.06 1520.25,1209.06 1520.83,1209.06 1521.42,1209.06 1522.01,1209.06 1522.59,1209.06 1523.18,1209.06 1523.77,1209.06 1524.35,1209.06 1524.94,1209.06 1525.52,1209.06 1526.11,1209.06 1526.7,1209.06 1527.28,1209.06 1527.87,1209.06 1528.46,1209.06 1529.04,1209.06 1529.63,1209.06 1530.22,1209.06 1530.8,1209.06 1531.39,1209.06 1531.98,1209.06 1532.56,1209.06 1533.15,1209.06 1533.73,1209.06 1534.32,1209.06 1534.91,1209.06 1535.49,1209.06 1536.08,1209.06 1536.67,1209.06 1537.25,1209.06 1537.84,1209.06 1538.43,1209.06 1539.01,1209.06 1539.6,1209.06 1540.19,1209.06 1540.77,1209.06 1541.36,1209.06 1541.94,1209.06 1542.53,1209.06 1543.12,1209.06 1543.7,1209.06 1544.29,1209.06 1544.88,1209.06 1545.46,1209.06 1546.05,1209.06 1546.64,1209.06 1547.22,1209.06 1547.81,1209.06 1548.4,1209.06 1548.98,1209.06 1549.57,1209.06 1550.15,1209.06 1550.74,1209.06 1551.33,1209.06 1551.91,1209.06 1552.5,1209.06 1553.09,1209.06 1553.67,1209.06 1554.26,1209.06 1554.85,1209.06 1555.43,1209.06 1556.02,1209.06 1556.6,1209.06 1557.19,1209.06 1557.78,1209.06 1558.36,1209.06 1558.95,1209.06 1559.54,1209.06 1560.12,1209.06 1560.71,1209.06 1561.3,1209.06 1561.88,1209.06 1562.47,1209.06 1563.06,1209.06 1563.64,1209.06 1564.23,1209.06 1564.81,1209.06 1565.4,1209.06 1565.99,1209.06 1566.57,1209.06 1567.16,1209.06 1567.75,1209.06 1568.33,1209.06 1568.92,1209.06 1569.51,1209.06 1570.09,1209.06 1570.68,1209.06 1571.27,1209.06 1571.85,1209.06 1572.44,1209.06 1573.02,1209.06 1573.61,1209.06 1574.2,1209.06 1574.78,1209.06 1575.37,1209.06 1575.96,1209.06 1576.54,1209.06 1577.13,1209.06 1577.72,1209.06 1578.3,1209.06 1578.89,1209.06 1579.47,1209.06 1580.06,1209.06 1580.65,1209.06 1581.23,1209.06 1581.82,1209.06 1582.41,1209.06 1582.99,1209.06 1583.58,1209.06 1584.17,1209.06 1584.75,1209.06 1585.34,1209.06 1585.93,1209.06 1586.51,1209.06 1587.1,1209.06 1587.68,1209.06 1588.27,1209.06 1588.86,1209.06 1589.44,1209.06 1590.03,1209.06 1590.62,1209.06 1591.2,1209.06 1591.79,1209.06 1592.38,1209.06 1592.96,1209.06 1593.55,1209.06 1594.14,1209.06 1594.72,1209.06 1595.31,1209.06 1595.89,1209.06 1596.48,1209.06 1597.07,1209.06 1597.65,1209.06 1598.24,1209.06 1598.83,1209.06 1599.41,1209.06 1600,1209.06 1600.59,1209.06 1601.17,1209.06 1601.76,1209.06 1602.34,1209.06 1602.93,1209.06 1603.52,1209.06 1604.1,1209.06 1604.69,1209.06 1605.28,1209.06 1605.86,1209.06 1606.45,1209.06 1607.04,1209.06 1607.62,1209.06 1608.21,1209.06 1608.8,1209.06 1609.38,1209.06 1609.97,1209.06 1610.55,1209.06 1611.14,1209.06 1611.73,1209.06 1612.31,1209.06 1612.9,1209.06 1613.49,1209.06 1614.07,1209.06 1614.66,1209.06 1615.25,1209.06 1615.83,1209.06 1616.42,1209.06 1617.01,1209.06 1617.59,1209.06 1618.18,1209.06 1618.76,1209.06 1619.35,1209.06 1619.94,1209.06 1620.52,1209.06 1621.11,1209.06 1621.7,1209.06 1622.28,1209.06 1622.87,1209.06 1623.46,1209.06 1624.04,1209.06 1624.63,1209.06 1625.22,1209.06 1625.8,1209.06 1626.39,1209.06 1626.97,1209.06 1627.56,1209.06 1628.15,1209.06 1628.73,1209.06 1629.32,1209.06 1629.91,1209.06 1630.49,1209.06 1631.08,1209.06 1631.67,1209.06 1632.25,1209.06 1632.84,1209.06 1633.42,1209.06 1634.01,1209.06 1634.6,1209.06 1635.18,1209.06 1635.77,1209.06 1636.36,1209.06 1636.94,1209.06 1637.53,1209.06 1638.12,1209.06 1638.7,1209.06 1639.29,1209.06 1639.88,1209.06 1640.46,1209.06 1641.05,1209.06 1641.63,1209.06 1642.22,1209.06 1642.81,1209.06 1643.39,1209.06 1643.98,1209.06 1644.57,1209.06 1645.15,1209.06 1645.74,1209.06 1646.33,1209.06 1646.91,1209.06 1647.5,1209.06 1648.09,1209.06 1648.67,1209.06 1649.26,1209.06 1649.84,1209.06 1650.43,1209.06 1651.02,1209.06 1651.6,1209.06 1652.19,1209.06 1652.78,1209.06 1653.36,1209.06 1653.95,1209.06 1654.54,1209.06 1655.12,1209.06 1655.71,1209.06 1656.29,1209.06 1656.88,1209.06 1657.47,1209.06 1658.05,1209.06 1658.64,1209.06 1659.23,1209.06 1659.81,1209.06 1660.4,1209.06 1660.99,1209.06 1661.57,1209.06 1662.16,1209.06 1662.75,1209.06 1663.33,1209.06 1663.92,1209.06 1664.5,1209.06 1665.09,1209.06 1665.68,1209.06 1666.26,1209.06 1666.85,1209.06 1667.44,1209.06 1668.02,1209.06 1668.61,1209.06 1669.2,1209.06 1669.78,1209.06 1670.37,1209.06 1670.96,1209.06 1671.54,1209.06 1672.13,1209.06 1672.71,1209.06 1673.3,1209.06 1673.89,1209.06 1674.47,1209.06 1675.06,1209.06 1675.65,1209.06 1676.23,1209.06 1676.82,1209.06 1677.41,1209.06 1677.99,1209.06 1678.58,1209.06 1679.17,1209.06 1679.75,1209.06 1680.34,1209.06 1680.92,1209.06 1681.51,1209.06 1682.1,1209.06 1682.68,1209.06 1683.27,1209.06 1683.86,1209.06 1684.44,1209.06 1685.03,1209.06 1685.62,1209.06 1686.2,1209.06 1686.79,1209.06 1687.37,1209.06 1687.96,1209.06 1688.55,1209.06 1689.13,1209.06 1689.72,1209.06 1690.31,1209.06 1690.89,1209.06 1691.48,1209.06 1692.07,1209.06 1692.65,1209.06 1693.24,1209.06 1693.83,1209.06 1694.41,1209.06 1695,1209.06 1695.58,1209.06 1696.17,1209.06 1696.76,1209.06 1697.34,1209.06 1697.93,1209.06 1698.52,1209.06 1699.1,1209.06 1699.69,1209.06 1700.28,1209.06 1700.86,1209.06 1701.45,1209.06 1702.04,1209.06 1702.62,1209.06 1703.21,1209.06 1703.79,1209.06 1704.38,1209.06 1704.97,1209.06 1705.55,1209.06 1706.14,1209.06 1706.73,1209.06 1707.31,1209.06 1707.9,1209.06 1708.49,1209.06 1709.07,1209.06 1709.66,1209.06 1710.24,1209.06 1710.83,1209.06 1711.42,1209.06 1712,1209.06 1712.59,1209.06 1713.18,1209.06 1713.76,1209.06 1714.35,1209.06 1714.94,1209.06 1715.52,1209.06 1716.11,1209.06 1716.7,1209.06 1717.28,1209.06 1717.87,1209.06 1718.45,1209.06 1719.04,1209.06 1719.63,1209.06 1720.21,1209.06 1720.8,1209.06 1721.39,1209.06 1721.97,1209.06 1722.56,1209.06 1723.15,1209.06 1723.73,1209.06 1724.32,1209.06 1724.91,1209.06 1725.49,1209.06 1726.08,1209.06 1726.66,1209.06 1727.25,1209.06 1727.84,1209.06 1728.42,1209.06 1729.01,1209.06 1729.6,1209.06 1730.18,1209.06 1730.77,1209.06 1731.36,1209.06 1731.94,1209.06 1732.53,1209.06 1733.11,1209.06 1733.7,1209.06 1734.29,1209.06 1734.87,1209.06 1735.46,1209.06 1736.05,1209.06 1736.63,1209.06 1737.22,1209.06 1737.81,1209.06 1738.39,1209.06 1738.98,1209.06 1739.57,1209.06 1740.15,1209.06 1740.74,1209.06 1741.32,1209.06 1741.91,1209.06 1742.5,1209.06 1743.08,1209.06 1743.67,1209.06 1744.26,1209.06 1744.84,1209.06 1745.43,1209.06 1746.02,1209.06 1746.6,1209.06 1747.19,1209.06 1747.78,1209.06 1748.36,1209.06 1748.95,1209.06 1749.53,1209.06 1750.12,1209.06 1750.71,1209.06 1751.29,1209.06 1751.88,1209.06 1752.47,1209.06 1753.05,1209.06 1753.64,1209.06 1754.23,1209.06 1754.81,1209.06 1755.4,1209.06 1755.99,1209.06 1756.57,1209.06 1757.16,1209.06 1757.74,1209.06 1758.33,1209.06 1758.92,1209.06 1759.5,1209.06 1760.09,1209.06 1760.68,1209.06 1761.26,1209.06 1761.85,1209.06 1762.44,1209.06 1763.02,1209.06 1763.61,1209.06 1764.19,1209.06 1764.78,1209.06 1765.37,1209.06 1765.95,1209.06 1766.54,1209.06 1767.13,1209.06 1767.71,1209.06 1768.3,1209.06 1768.89,1209.06 1769.47,1209.06 1770.06,1209.06 1770.65,1209.06 1771.23,1209.06 1771.82,1209.06 1772.4,1209.06 1772.99,1209.06 1773.58,1209.06 1774.16,1209.06 1774.75,1209.06 1775.34,1209.06 1775.92,1209.06 1776.51,1209.06 1777.1,1209.06 1777.68,1209.06 1778.27,1209.06 1778.86,1209.06 1779.44,1209.06 1780.03,1209.06 1780.61,1209.06 1781.2,1209.06 1781.79,1209.06 1782.37,1209.06 1782.96,1209.06 1783.55,1209.06 1784.13,1209.06 1784.72,1209.06 1785.31,1209.06 1785.89,1209.06 1786.48,1209.06 1787.06,1209.06 1787.65,1209.06 1788.24,1209.06 1788.82,1209.06 1789.41,1209.06 1790,1209.06 1790.58,1209.06 1791.17,1209.06 1791.76,1209.06 1792.34,1209.06 1792.93,1209.06 1793.52,1209.06 1794.1,1209.06 1794.69,1209.06 1795.27,1209.06 1795.86,1209.06 1796.45,1209.06 1797.03,1209.06 1797.62,1209.06 1798.21,1209.06 1798.79,1209.06 1799.38,1209.06 1799.97,1209.06 1800.55,1209.06 1801.14,1209.06 1801.73,1209.06 1802.31,1209.06 1802.9,1209.06 1803.48,1209.06 1804.07,1209.06 1804.66,1209.06 1805.24,1209.06 1805.83,1209.06 1806.42,1209.06 1807,1209.06 1807.59,1209.06 1808.18,1209.06 1808.76,1209.06 1809.35,1209.06 1809.94,1209.06 1810.52,1209.06 1811.11,1209.06 1811.69,1209.06 1812.28,1209.06 1812.87,1209.06 1813.45,1209.06 1814.04,1209.06 1814.63,1209.06 1815.21,1209.06 1815.8,1209.06 1816.39,1209.06 1816.97,1209.06 1817.56,1209.06 1818.14,1209.06 1818.73,1209.06 1819.32,1209.06 1819.9,1209.06 1820.49,1209.06 1821.08,1209.06 1821.66,1209.06 1822.25,1209.06 1822.84,1209.06 1823.42,1209.06 1824.01,1209.06 1824.6,1209.06 1825.18,1209.06 1825.77,1209.06 1826.35,1209.06 1826.94,1209.06 1827.53,1209.06 1828.11,1209.06 1828.7,1209.06 1829.29,1209.06 1829.87,1209.06 1830.46,1209.06 1831.05,1209.06 1831.63,1209.06 1832.22,1209.06 1832.81,1209.06 1833.39,1209.06 1833.98,1209.06 1834.56,1209.06 1835.15,1209.06 1835.74,1209.06 1836.32,1209.06 1836.91,1209.06 1837.5,1209.06 1838.08,1209.06 1838.67,1209.06 1839.26,1209.06 1839.84,1209.06 1840.43,1209.06 1841.01,1209.06 1841.6,1209.06 1842.19,1209.06 1842.77,1209.06 1843.36,1209.06 1843.95,1209.06 1844.53,1209.06 1845.12,1209.06 1845.71,1209.06 1846.29,1209.06 1846.88,1209.06 1847.47,1209.06 1848.05,1209.06 1848.64,1209.06 1849.22,1209.06 1849.81,1209.06 1850.4,1209.06 1850.98,1209.06 1851.57,1209.06 1852.16,1209.06 1852.74,1209.06 1853.33,1209.06 1853.92,1209.06 1854.5,1209.06 1855.09,1209.06 1855.68,1209.06 1856.26,1209.06 1856.85,1209.06 1857.43,1209.06 1858.02,1209.06 1858.61,1209.06 1859.19,1209.06 1859.78,1209.06 1860.37,1209.06 1860.95,1209.06 1861.54,1209.06 1862.13,1209.06 1862.71,1209.06 1863.3,1209.06 1863.88,1209.06 1864.47,1209.06 1865.06,1209.06 1865.64,1209.06 1866.23,1209.06 1866.82,1209.06 1867.4,1209.06 1867.99,1209.06 1868.58,1209.06 1869.16,1209.06 1869.75,1209.06 1870.34,1209.06 1870.92,1209.06 1871.51,1209.06 1872.09,1209.06 1872.68,1209.06 1873.27,1209.06 1873.85,1209.06 1874.44,1209.06 1875.03,1209.06 1875.61,1209.06 1876.2,1209.06 1876.79,1209.06 1877.37,1209.06 1877.96,1209.06 1878.55,1209.06 1879.13,1209.06 1879.72,1209.06 1880.3,1209.06 1880.89,1209.06 1881.48,1209.06 1882.06,1209.06 1882.65,1209.06 1883.24,1209.06 1883.82,1209.06 1884.41,1209.06 1885,1209.06 1885.58,1209.06 1886.17,1209.06 1886.76,1209.06 1887.34,1209.06 1887.93,1209.06 1888.51,1209.06 1889.1,1209.06 1889.69,1209.06 1890.27,1209.06 1890.86,1209.06 1891.45,1209.06 1892.03,1209.06 1892.62,1209.06 1893.21,1209.06 1893.79,1209.06 1894.38,1209.06 1894.96,1209.06 1895.55,1209.06 1896.14,1209.06 1896.72,1209.06 1897.31,1209.06 1897.9,1209.06 1898.48,1209.06 1899.07,1209.06 1899.66,1209.06 1900.24,1209.06 1900.83,1209.06 1901.42,1209.06 1902,1209.06 1902.59,1209.06 1903.17,1209.06 1903.76,1209.06 1904.35,1209.06 1904.93,1209.06 1905.52,1209.06 1906.11,1209.06 1906.69,1209.06 1907.28,1209.06 1907.87,1209.06 1908.45,1209.06 1909.04,1209.06 1909.63,1209.06 1910.21,1209.06 1910.8,1209.06 1911.38,1209.06 1911.97,1209.06 1912.56,1209.06 1913.14,1209.06 1913.73,1209.06 1914.32,1209.06 1914.9,1209.06 1915.49,1209.06 1916.08,1209.06 1916.66,1209.06 1917.25,1209.06 1917.83,1209.06 1918.42,1209.06 1919.01,1209.06 1919.59,1209.06 1920.18,1209.06 1920.77,1209.06 1921.35,1209.06 1921.94,1209.06 1922.53,1209.06 1923.11,1209.06 1923.7,1209.06 1924.29,1209.06 1924.87,1209.06 1925.46,1209.06 1926.04,1209.06 1926.63,1209.06 1927.22,1209.06 1927.8,1209.06 1928.39,1209.06 1928.98,1209.06 1929.56,1209.06 1930.15,1209.06 1930.74,1209.06 1931.32,1209.06 1931.91,1209.06 1932.5,1209.06 1933.08,1209.06 1933.67,1209.06 1934.25,1209.06 1934.84,1209.06 1935.43,1209.06 1936.01,1209.06 1936.6,1209.06 1937.19,1209.06 1937.77,1209.06 1938.36,1209.06 1938.95,1209.06 1939.53,1209.06 1940.12,1209.06 1940.71,1209.06 1941.29,1209.06 1941.88,1209.06 1942.46,1209.06 1943.05,1209.06 1943.64,1209.06 1944.22,1209.06 1944.81,1209.06 1945.4,1209.06 1945.98,1209.06 1946.57,1209.06 1947.16,1209.06 1947.74,1209.06 1948.33,1209.06 1948.91,1209.06 1949.5,1209.06 1950.09,1209.06 1950.67,1209.06 1951.26,1209.06 1951.85,1209.06 1952.43,1209.06 1953.02,1209.06 1953.61,1209.06 1954.19,1209.06 1954.78,1209.06 1955.37,1209.06 1955.95,1209.06 1956.54,1209.06 1957.12,1209.06 1957.71,1209.06 1958.3,1209.06 1958.88,1209.06 1959.47,1209.06 1960.06,1209.06 1960.64,1209.06 1961.23,1209.06 1961.82,1209.06 1962.4,1209.06 1962.99,1209.06 1963.58,1209.06 1964.16,1209.06 1964.75,1209.06 1965.33,1209.06 1965.92,1209.06 1966.51,1209.06 1967.09,1209.06 1967.68,1209.06 1968.27,1209.06 1968.85,1209.06 1969.44,1209.06 1970.03,1209.06 1970.61,1209.06 1971.2,1209.06 1971.78,1209.06 1972.37,1209.06 1972.96,1209.06 1973.54,1209.06 1974.13,1209.06 1974.72,1209.06 1975.3,1209.06 1975.89,1209.06 1976.48,1209.06 1977.06,1209.06 1977.65,1209.06 1978.24,1209.06 1978.82,1209.06 1979.41,1209.06 1979.99,1209.06 1980.58,1209.06 1981.17,1209.06 1981.75,1209.06 1982.34,1209.06 1982.93,1209.06 1983.51,1209.06 1984.1,1209.06 1984.69,1209.06 1985.27,1209.06 1985.86,1209.06 1986.45,1209.06 1987.03,1209.06 1987.62,1209.06 1988.2,1209.06 1988.79,1209.06 1989.38,1209.06 1989.96,1209.06 1990.55,1209.06 1991.14,1209.06 1991.72,1209.06 1992.31,1209.06 1992.9,1209.06 1993.48,1209.06 1994.07,1209.06 1994.65,1209.06 1995.24,1209.06 1995.83,1209.06 1996.41,1209.06 1997,1209.06 1997.59,1209.06 1998.17,1209.06 1998.76,1209.06 1999.35,1209.06 1999.93,1209.06 2000.52,1209.06 2001.11,1209.06 2001.69,1209.06 2002.28,1209.06 2002.86,1209.06 2003.45,1209.06 2004.04,1209.06 2004.62,1209.06 2005.21,1209.06 2005.8,1209.06 2006.38,1209.06 2006.97,1209.06 2007.56,1209.06 2008.14,1209.06 2008.73,1209.06 2009.32,1209.06 2009.9,1209.06 2010.49,1209.06 2011.07,1209.06 2011.66,1209.06 2012.25,1209.06 2012.83,1209.06 2013.42,1209.06 2014.01,1209.06 2014.59,1209.06 2015.18,1209.06 2015.77,1209.06 2016.35,1209.06 2016.94,1209.06 2017.53,1209.06 2018.11,1209.06 2018.7,1209.06 2019.28,1209.06 2019.87,1209.06 2020.46,1209.06 2021.04,1209.06 2021.63,1209.06 2022.22,1209.06 2022.8,1209.06 2023.39,1209.06 2023.98,1209.06 2024.56,1209.06 2025.15,1209.06 2025.73,1209.06 2026.32,1209.06 2026.91,1209.06 2027.49,1209.06 2028.08,1209.06 2028.67,1209.06 2029.25,1209.06 2029.84,1209.06 2030.43,1209.06 2031.01,1209.06 2031.6,1209.06 2032.19,1209.06 2032.77,1209.06 2033.36,1209.06 2033.94,1209.06 2034.53,1209.06 2035.12,1209.06 2035.7,1209.06 2036.29,1209.06 2036.88,1209.06 2037.46,1209.06 2038.05,1209.06 2038.64,1209.06 2039.22,1209.06 2039.81,1209.06 2040.4,1209.06 2040.98,1209.06 2041.57,1209.06 2042.15,1209.06 2042.74,1209.06 2043.33,1209.06 2043.91,1209.06 2044.5,1209.06 2045.09,1209.06 2045.67,1209.06 2046.26,1209.06 2046.85,1209.06 2047.43,1209.06 2048.02,1209.06 2048.6,1209.06 2049.19,1209.06 2049.78,1209.06 2050.36,1209.06 2050.95,1209.06 2051.54,1209.06 2052.12,1209.06 2052.71,1209.06 2053.3,1209.06 2053.88,1209.06 2054.47,1209.06 2055.06,1209.06 2055.64,1209.06 2056.23,1209.06 2056.81,1209.06 2057.4,1209.06 2057.99,1209.06 2058.57,1209.06 2059.16,1209.06 2059.75,1209.06 2060.33,1209.06 2060.92,1209.06 2061.51,1209.06 2062.09,1209.06 2062.68,1209.06 2063.27,1209.06 2063.85,1209.06 2064.44,1209.06 2065.02,1209.06 2065.61,1209.06 2066.2,1209.06 2066.78,1209.06 2067.37,1209.06 2067.96,1209.06 2068.54,1209.06 2069.13,1209.06 2069.72,1209.06 2070.3,1209.06 2070.89,1209.06 2071.48,1209.06 2072.06,1209.06 2072.65,1209.06 2073.23,1209.06 2073.82,1209.06 2074.41,1209.06 2074.99,1209.06 2075.58,1209.06 2076.17,1209.06 2076.75,1209.06 2077.34,1209.06 2077.93,1209.06 2078.51,1209.06 2079.1,1209.06 2079.68,1209.06 2080.27,1209.06 2080.86,1209.06 2081.44,1209.06 2082.03,1209.06 2082.62,1209.06 2083.2,1209.06 2083.79,1209.06 2084.38,1209.06 2084.96,1209.06 2085.55,1209.06 2086.14,1209.06 2086.72,1209.06 2087.31,1209.06 2087.89,1209.06 2088.48,1209.06 2089.07,1209.06 2089.65,1209.06 2090.24,1209.06 2090.83,1209.06 2091.41,1209.06 2092,1209.06 2092.59,1209.06 2093.17,1209.06 2093.76,1209.06 2094.35,1209.06 2094.93,1209.06 2095.52,1209.06 2096.1,1209.06 2096.69,1209.06 2097.28,1209.06 2097.86,1209.06 2098.45,1209.06 2099.04,1209.06 2099.62,1209.06 2100.21,1209.06 2100.8,1209.06 2101.38,1209.06 2101.97,1209.06 2102.55,1209.06 2103.14,1209.06 2103.73,1209.06 2104.31,1209.06 2104.9,1209.06 2105.49,1209.06 2106.07,1209.06 2106.66,1209.06 2107.25,1209.06 2107.83,1209.06 2108.42,1209.06 2109.01,1209.06 2109.59,1209.06 2110.18,1209.06 2110.76,1209.06 2111.35,1209.06 2111.94,1209.06 2112.52,1209.06 2113.11,1209.06 2113.7,1209.06 2114.28,1209.06 2114.87,1209.06 2115.46,1209.06 2116.04,1209.06 2116.63,1209.06 2117.22,1209.06 2117.8,1209.06 2118.39,1209.06 2118.97,1209.06 2119.56,1209.06 2120.15,1209.06 2120.73,1209.06 2121.32,1209.06 2121.91,1209.06 2122.49,1209.06 2123.08,1209.06 2123.67,1209.06 2124.25,1209.06 2124.84,1209.06 2125.42,1209.06 2126.01,1209.06 2126.6,1209.06 2127.18,1209.06 2127.77,1209.06 2128.36,1209.06 2128.94,1209.06 2129.53,1209.06 2130.12,1209.06 2130.7,1209.06 2131.29,1209.06 2131.88,1209.06 2132.46,1209.06 2133.05,1209.06 2133.63,1209.06 2134.22,1209.06 2134.81,1209.06 2135.39,1209.06 2135.98,1209.06 2136.57,1209.06 2137.15,1209.06 2137.74,1209.06 2138.33,1209.06 2138.91,1209.06 2139.5,1209.06 2140.09,1209.06 2140.67,1209.06 2141.26,1209.06 2141.84,1209.06 2142.43,1209.06 2143.02,1209.06 2143.6,1209.06 2144.19,1209.06 2144.78,1209.06 2145.36,1209.06 2145.95,1209.06 2146.54,1209.06 2147.12,1209.06 2147.71,1209.06 2148.3,1209.06 2148.88,1209.06 2149.47,1209.06 2150.05,1209.06 2150.64,1209.06 2151.23,1209.06 2151.81,1209.06 2152.4,1209.06 2152.99,1209.06 2153.57,1209.06 2154.16,1209.06 2154.75,1209.06 2155.33,1209.06 2155.92,1209.06 2156.5,1209.06 2157.09,1209.06 2157.68,1209.06 2158.26,1209.06 \"/>\n<path clip-path=\"url(#clip652)\" d=\"M986.025 1208.89 L986.612 1208.89 L987.198 1208.89 L987.785 1208.89 L988.371 1208.89 L988.957 1208.89 L989.544 1208.89 L990.13 1208.89 L990.717 1208.89 L991.303 1208.89 L991.889 1208.89 L992.476 1208.89 L993.062 1208.89 L993.649 1208.89 L994.235 1208.89 L994.822 1208.89 L995.408 1208.89 L995.994 1208.89 L996.581 1208.89 L997.167 1208.89 L997.754 1208.89 L998.34 1208.89 L998.926 1208.89 L999.513 1208.89 L1000.1 1208.89 L1000.69 1208.89 L1001.27 1208.89 L1001.86 1208.89 L1002.44 1208.89 L1003.03 1208.89 L1003.62 1208.89 L1004.2 1208.89 L1004.79 1208.89 L1005.38 1208.89 L1005.96 1208.89 L1006.55 1208.89 L1007.14 1208.89 L1007.72 1208.89 L1008.31 1208.89 L1008.9 1208.89 L1009.48 1208.89 L1010.07 1208.89 L1010.65 1208.89 L1011.24 1208.89 L1011.83 1208.89 L1012.41 1208.89 L1013 1208.89 L1013.59 1208.89 L1014.17 1208.89 L1014.76 1208.89 L1015.35 1208.89 L1015.93 1208.89 L1016.52 1208.89 L1017.11 1208.89 L1017.69 1208.89 L1018.28 1208.89 L1018.86 1208.89 L1019.45 1208.89 L1020.04 1208.89 L1020.62 1208.89 L1021.21 1208.89 L1021.8 1208.89 L1022.38 1208.89 L1022.97 1208.89 L1023.56 1208.89 L1024.14 1208.89 L1024.73 1208.89 L1025.32 1208.89 L1025.9 1208.89 L1026.49 1208.89 L1027.07 1208.89 L1027.66 1208.89 L1028.25 1208.89 L1028.83 1208.89 L1029.42 1208.89 L1030.01 1208.89 L1030.59 1208.89 L1031.18 1208.89 L1031.77 1208.89 L1032.35 1208.89 L1032.94 1208.89 L1033.52 1208.89 L1034.11 1208.89 L1034.7 1208.89 L1035.28 1208.89 L1035.87 1208.89 L1036.46 1208.89 L1037.04 1208.89 L1037.63 1208.89 L1038.22 1208.89 L1038.8 1208.89 L1039.39 1208.89 L1039.98 1208.89 L1040.56 1208.89 L1041.15 1208.89 L1041.73 1208.89 L1042.32 1208.89 L1042.91 1208.89 L1043.49 1208.89 L1044.08 1208.89 L1044.67 1208.89 L1045.25 1208.89 L1045.84 1208.89 L1046.43 1208.89 L1047.01 1208.89 L1047.6 1208.89 L1048.19 1208.89 L1048.77 1208.89 L1049.36 1208.89 L1049.94 1208.89 L1050.53 1208.89 L1051.12 1208.89 L1051.7 1208.89 L1052.29 1208.89 L1052.88 1208.89 L1053.46 1208.89 L1054.05 1208.89 L1054.64 1208.89 L1055.22 1208.89 L1055.81 1208.89 L1056.39 1208.89 L1056.98 1208.89 L1057.57 1208.89 L1058.15 1208.89 L1058.74 1208.89 L1059.33 1208.89 L1059.91 1208.89 L1060.5 1208.89 L1061.09 1208.89 L1061.67 1208.89 L1062.26 1208.89 L1062.85 1208.89 L1063.43 1208.89 L1064.02 1208.89 L1064.6 1208.89 L1065.19 1208.89 L1065.78 1208.89 L1066.36 1208.89 L1066.95 1208.89 L1067.54 1208.89 L1068.12 1208.89 L1068.71 1208.89 L1069.3 1208.89 L1069.88 1208.89 L1070.47 1208.89 L1071.06 1208.89 L1071.64 1208.89 L1072.23 1208.89 L1072.81 1208.89 L1073.4 1208.89 L1073.99 1208.89 L1074.57 1208.89 L1075.16 1208.89 L1075.75 1208.89 L1076.33 1208.89 L1076.92 1208.89 L1077.51 1208.89 L1078.09 1208.89 L1078.68 1208.89 L1079.26 1208.89 L1079.85 1208.89 L1080.44 1208.89 L1081.02 1208.89 L1081.61 1208.89 L1082.2 1208.89 L1082.78 1208.89 L1083.37 1208.89 L1083.96 1208.89 L1084.54 1208.89 L1085.13 1208.89 L1085.72 1208.89 L1086.3 1208.89 L1086.89 1208.89 L1087.47 1208.89 L1088.06 1208.89 L1088.65 1208.89 L1089.23 1208.89 L1089.82 1208.89 L1090.41 1208.89 L1090.99 1208.89 L1091.58 1208.89 L1092.17 1208.89 L1092.75 1208.89 L1093.34 1208.89 L1093.93 1208.89 L1094.51 1208.89 L1095.1 1208.89 L1095.68 1208.89 L1096.27 1208.89 L1096.86 1208.89 L1097.44 1208.89 L1098.03 1208.89 L1098.62 1208.89 L1099.2 1208.89 L1099.79 1208.89 L1100.38 1208.89 L1100.96 1208.89 L1101.55 1208.89 L1102.14 1208.89 L1102.72 1208.89 L1103.31 1208.89 L1103.89 1208.89 L1104.48 1208.89 L1105.07 1208.89 L1105.65 1208.89 L1106.24 1208.89 L1106.83 1208.89 L1107.41 1208.89 L1108 1208.89 L1108.59 1208.89 L1109.17 1208.89 L1109.76 1208.89 L1110.34 1208.89 L1110.93 1208.89 L1111.52 1208.89 L1112.1 1208.89 L1112.69 1208.89 L1113.28 1208.89 L1113.86 1208.89 L1114.45 1208.89 L1115.04 1208.89 L1115.62 1208.89 L1116.21 1208.89 L1116.8 1208.89 L1117.38 1208.89 L1117.97 1208.89 L1118.55 1208.89 L1119.14 1208.89 L1119.73 1208.89 L1120.31 1208.89 L1120.9 1208.89 L1121.49 1208.89 L1122.07 1208.89 L1122.66 1208.89 L1123.25 1208.89 L1123.83 1208.89 L1124.42 1208.89 L1125.01 1208.89 L1125.59 1208.89 L1126.18 1208.89 L1126.76 1208.89 L1127.35 1208.89 L1127.94 1208.89 L1128.52 1208.89 L1129.11 1208.89 L1129.7 1208.89 L1130.28 1208.89 L1130.87 1208.89 L1131.46 1208.89 L1132.04 1208.89 L1132.63 1208.89 L1133.21 1208.89 L1133.8 1208.89 L1134.39 1208.89 L1134.97 1208.89 L1135.56 1208.89 L1136.15 1208.89 L1136.73 1208.89 L1137.32 1208.89 L1137.91 1208.89 L1138.49 1208.89 L1139.08 1208.89 L1139.67 1208.89 L1140.25 1208.89 L1140.84 1208.89 L1141.42 1208.89 L1142.01 1208.89 L1142.6 1208.89 L1143.18 1208.89 L1143.77 1208.89 L1144.36 1208.89 L1144.94 1208.89 L1145.53 1208.89 L1146.12 1208.89 L1146.7 1208.89 L1147.29 1208.89 L1147.88 1208.89 L1148.46 1208.89 L1149.05 1208.89 L1149.63 1208.89 L1150.22 1208.89 L1150.81 1208.89 L1151.39 1208.89 L1151.98 1208.89 L1152.57 1208.89 L1153.15 1208.89 L1153.74 1208.89 L1154.33 1208.89 L1154.91 1208.89 L1155.5 1208.89 L1156.09 1208.89 L1156.67 1208.89 L1157.26 1208.89 L1157.84 1208.89 L1158.43 1208.89 L1159.02 1208.89 L1159.6 1208.89 L1160.19 1208.89 L1160.78 1208.89 L1161.36 1208.89 L1161.95 1208.89 L1162.54 1208.89 L1163.12 1208.89 L1163.71 1208.89 L1164.29 1208.89 L1164.88 1208.89 L1165.47 1208.89 L1166.05 1208.89 L1166.64 1208.89 L1167.23 1208.89 L1167.81 1208.89 L1168.4 1208.89 L1168.99 1208.89 L1169.57 1208.89 L1170.16 1208.89 L1170.75 1208.89 L1171.33 1208.89 L1171.92 1208.89 L1172.5 1208.89 L1173.09 1208.89 L1173.68 1208.89 L1174.26 1208.89 L1174.85 1208.89 L1175.44 1208.89 L1176.02 1208.89 L1176.61 1208.89 L1177.2 1208.89 L1177.78 1208.89 L1178.37 1208.89 L1178.96 1208.89 L1179.54 1208.89 L1180.13 1208.89 L1180.71 1208.89 L1181.3 1208.89 L1181.89 1208.89 L1182.47 1208.89 L1183.06 1208.89 L1183.65 1208.89 L1184.23 1208.89 L1184.82 1208.89 L1185.41 1208.89 L1185.99 1208.89 L1186.58 1208.89 L1187.16 1208.89 L1187.75 1208.89 L1188.34 1208.89 L1188.92 1208.89 L1189.51 1208.89 L1190.1 1208.89 L1190.68 1208.89 L1191.27 1208.89 L1191.86 1208.89 L1192.44 1208.89 L1193.03 1208.89 L1193.62 1208.89 L1194.2 1208.89 L1194.79 1208.89 L1195.37 1208.89 L1195.96 1208.89 L1196.55 1208.89 L1197.13 1208.89 L1197.72 1208.89 L1198.31 1208.89 L1198.89 1208.89 L1199.48 1208.89 L1200.07 1208.89 L1200.65 1208.89 L1201.24 1208.89 L1201.83 1208.89 L1202.41 1208.89 L1203 1208.89 L1203.58 1208.89 L1204.17 1208.89 L1204.76 1208.89 L1205.34 1208.89 L1205.93 1208.89 L1206.52 1208.89 L1207.1 1208.89 L1207.69 1208.89 L1208.28 1208.89 L1208.86 1208.89 L1209.45 1208.89 L1210.03 1208.89 L1210.62 1208.89 L1211.21 1208.89 L1211.79 1208.89 L1212.38 1208.89 L1212.97 1208.89 L1213.55 1208.89 L1214.14 1208.89 L1214.73 1208.89 L1215.31 1208.89 L1215.9 1208.89 L1216.49 1208.89 L1217.07 1208.89 L1217.66 1208.89 L1218.24 1208.89 L1218.83 1208.89 L1219.42 1208.89 L1220 1208.89 L1220.59 1208.89 L1221.18 1208.89 L1221.76 1208.89 L1222.35 1208.89 L1222.94 1208.89 L1223.52 1208.89 L1224.11 1208.89 L1224.7 1208.89 L1225.28 1208.89 L1225.87 1208.89 L1226.45 1208.89 L1227.04 1208.89 L1227.63 1208.89 L1228.21 1208.89 L1228.8 1208.89 L1229.39 1208.89 L1229.97 1208.89 L1230.56 1208.89 L1231.15 1208.89 L1231.73 1208.89 L1232.32 1208.89 L1232.91 1208.89 L1233.49 1208.89 L1234.08 1208.89 L1234.66 1208.89 L1235.25 1208.89 L1235.84 1208.89 L1236.42 1208.89 L1237.01 1208.89 L1237.6 1208.89 L1238.18 1208.89 L1238.77 1208.89 L1239.36 1208.89 L1239.94 1208.89 L1240.53 1208.89 L1241.11 1208.89 L1241.7 1208.89 L1242.29 1208.89 L1242.87 1208.89 L1243.46 1208.89 L1244.05 1208.89 L1244.63 1208.89 L1245.22 1208.89 L1245.81 1208.89 L1246.39 1208.89 L1246.98 1208.89 L1247.57 1208.89 L1248.15 1208.89 L1248.74 1208.89 L1249.32 1208.89 L1249.91 1208.89 L1250.5 1208.89 L1251.08 1208.89 L1251.67 1208.89 L1252.26 1208.89 L1252.84 1208.89 L1253.43 1208.89 L1254.02 1208.89 L1254.6 1208.89 L1255.19 1208.89 L1255.78 1208.89 L1256.36 1208.89 L1256.95 1208.89 L1257.53 1208.89 L1258.12 1208.89 L1258.71 1208.89 L1259.29 1208.89 L1259.88 1208.89 L1260.47 1208.89 L1261.05 1208.89 L1261.64 1208.89 L1262.23 1208.89 L1262.81 1208.89 L1263.4 1208.89 L1263.98 1208.89 L1264.57 1208.89 L1265.16 1208.89 L1265.74 1208.89 L1266.33 1208.89 L1266.92 1208.89 L1267.5 1208.89 L1268.09 1208.89 L1268.68 1208.89 L1269.26 1208.89 L1269.85 1208.89 L1270.44 1208.89 L1271.02 1208.89 L1271.61 1208.89 L1272.19 1208.89 L1272.78 1208.89 L1273.37 1208.89 L1273.95 1208.89 L1274.54 1208.89 L1275.13 1208.89 L1275.71 1208.89 L1276.3 1208.89 L1276.89 1208.89 L1277.47 1208.89 L1278.06 1208.89 L1278.65 1208.89 L1279.23 1208.89 L1279.82 1208.89 L1280.4 1208.89 L1280.99 1208.89 L1281.58 1208.89 L1282.16 1208.89 L1282.75 1208.89 L1283.34 1208.89 L1283.92 1208.89 L1284.51 1208.89 L1285.1 1208.89 L1285.68 1208.89 L1286.27 1208.89 L1286.86 1208.89 L1287.44 1208.89 L1288.03 1208.89 L1288.61 1208.89 L1289.2 1208.89 L1289.79 1208.89 L1290.37 1208.89 L1290.96 1208.89 L1291.55 1208.89 L1292.13 1208.89 L1292.72 1208.89 L1293.31 1208.89 L1293.89 1208.89 L1294.48 1208.89 L1295.06 1208.89 L1295.65 1208.89 L1296.24 1208.89 L1296.82 1208.89 L1297.41 1208.89 L1298 1208.89 L1298.58 1208.89 L1299.17 1208.89 L1299.76 1208.89 L1300.34 1208.89 L1300.93 1208.89 L1301.52 1208.89 L1302.1 1208.89 L1302.69 1208.89 L1303.27 1208.89 L1303.86 1208.89 L1304.45 1208.89 L1305.03 1208.89 L1305.62 1208.89 L1306.21 1208.89 L1306.79 1208.89 L1307.38 1208.89 L1307.97 1208.89 L1308.55 1208.89 L1309.14 1208.89 L1309.73 1208.89 L1310.31 1208.89 L1310.9 1208.89 L1311.48 1208.89 L1312.07 1208.89 L1312.66 1208.89 L1313.24 1208.89 L1313.83 1208.89 L1314.42 1208.89 L1315 1208.89 L1315.59 1208.89 L1316.18 1208.89 L1316.76 1208.89 L1317.35 1208.89 L1317.93 1208.89 L1318.52 1208.89 L1319.11 1208.89 L1319.69 1208.89 L1320.28 1208.89 L1320.87 1208.89 L1321.45 1208.89 L1322.04 1208.89 L1322.63 1208.89 L1323.21 1208.89 L1323.8 1208.89 L1324.39 1208.89 L1324.97 1208.89 L1325.56 1208.89 L1326.14 1208.89 L1326.73 1208.89 L1327.32 1208.89 L1327.9 1208.89 L1328.49 1208.89 L1329.08 1208.89 L1329.66 1208.89 L1330.25 1208.89 L1330.84 1208.89 L1331.42 1208.89 L1332.01 1208.89 L1332.6 1208.89 L1333.18 1208.89 L1333.77 1208.89 L1334.35 1208.89 L1334.94 1208.89 L1335.53 1208.89 L1336.11 1208.89 L1336.7 1208.89 L1337.29 1208.89 L1337.87 1208.89 L1338.46 1208.89 L1339.05 1208.89 L1339.63 1208.89 L1340.22 1208.89 L1340.8 1208.89 L1341.39 1208.89 L1341.98 1208.89 L1342.56 1208.89 L1343.15 1208.89 L1343.74 1208.89 L1344.32 1208.89 L1344.91 1208.89 L1345.5 1208.89 L1346.08 1208.89 L1346.67 1208.89 L1347.26 1208.89 L1347.84 1208.89 L1348.43 1208.89 L1349.01 1208.89 L1349.6 1208.89 L1350.19 1208.89 L1350.77 1208.89 L1351.36 1208.89 L1351.95 1208.89 L1352.53 1208.89 L1353.12 1208.89 L1353.71 1208.89 L1354.29 1208.89 L1354.88 1208.89 L1355.47 1208.89 L1356.05 1208.89 L1356.64 1208.89 L1357.22 1208.89 L1357.81 1208.89 L1358.4 1208.89 L1358.98 1208.89 L1359.57 1208.89 L1360.16 1208.89 L1360.74 1208.89 L1361.33 1208.89 L1361.92 1208.89 L1362.5 1208.89 L1363.09 1208.89 L1363.68 1208.89 L1364.26 1208.89 L1364.85 1208.89 L1365.43 1208.89 L1366.02 1208.89 L1366.61 1208.89 L1367.19 1208.89 L1367.78 1208.89 L1368.37 1208.89 L1368.95 1208.89 L1369.54 1208.89 L1370.13 1208.89 L1370.71 1208.89 L1371.3 1208.89 L1371.88 1208.89 L1372.47 1208.89 L1373.06 1208.89 L1373.64 1208.89 L1374.23 1208.89 L1374.82 1208.89 L1375.4 1208.89 L1375.99 1208.89 L1376.58 1208.89 L1377.16 1208.89 L1377.75 1208.89 L1378.34 1208.89 L1378.92 1208.89 L1379.51 1208.89 L1380.09 1208.89 L1380.68 1208.89 L1381.27 1208.89 L1381.85 1208.89 L1382.44 1208.89 L1383.03 1208.89 L1383.61 1208.89 L1384.2 1208.89 L1384.79 1208.89 L1385.37 1208.89 L1385.96 1208.89 L1386.55 1208.89 L1387.13 1208.89 L1387.72 1208.89 L1388.3 1208.89 L1388.89 1208.89 L1389.48 1208.89 L1390.06 1208.89 L1390.65 1208.89 L1391.24 1208.89 L1391.82 1208.89 L1392.41 1208.89 L1393 1208.89 L1393.58 1208.89 L1394.17 1208.89 L1394.75 1208.89 L1395.34 1208.89 L1395.93 1208.89 L1396.51 1208.89 L1397.1 1208.89 L1397.69 1208.89 L1398.27 1208.89 L1398.86 1208.89 L1399.45 1208.89 L1400.03 1208.89 L1400.62 1208.89 L1401.21 1208.89 L1401.79 1208.89 L1402.38 1208.89 L1402.96 1208.89 L1403.55 1208.89 L1404.14 1208.89 L1404.72 1208.89 L1405.31 1208.89 L1405.9 1208.89 L1406.48 1208.89 L1407.07 1208.89 L1407.66 1208.89 L1408.24 1208.89 L1408.83 1208.89 L1409.42 1208.89 L1410 1208.89 L1410.59 1208.89 L1411.17 1208.89 L1411.76 1208.89 L1412.35 1208.89 L1412.93 1208.89 L1413.52 1208.89 L1414.11 1208.89 L1414.69 1208.89 L1415.28 1208.89 L1415.87 1208.89 L1416.45 1208.89 L1417.04 1208.89 L1417.63 1208.89 L1418.21 1208.89 L1418.8 1208.89 L1419.38 1208.89 L1419.97 1208.89 L1420.56 1208.89 L1421.14 1208.89 L1421.73 1208.89 L1422.32 1208.89 L1422.9 1208.89 L1423.49 1208.89 L1424.08 1208.89 L1424.66 1208.89 L1425.25 1208.89 L1425.83 1208.89 L1426.42 1208.89 L1427.01 1208.89 L1427.59 1208.89 L1428.18 1208.89 L1428.77 1208.89 L1429.35 1208.89 L1429.94 1208.89 L1430.53 1208.89 L1431.11 1208.89 L1431.7 1208.89 L1432.29 1208.89 L1432.87 1208.89 L1433.46 1208.89 L1434.04 1208.89 L1434.63 1208.89 L1435.22 1208.89 L1435.8 1208.89 L1436.39 1208.89 L1436.98 1208.89 L1437.56 1208.89 L1438.15 1208.89 L1438.74 1208.89 L1439.32 1208.89 L1439.91 1208.89 L1440.5 1208.89 L1441.08 1208.89 L1441.67 1208.89 L1442.25 1208.89 L1442.84 1208.89 L1443.43 1208.89 L1444.01 1208.89 L1444.6 1208.89 L1445.19 1208.89 L1445.77 1208.89 L1446.36 1208.89 L1446.95 1208.89 L1447.53 1208.89 L1448.12 1208.89 L1448.7 1208.89 L1449.29 1208.89 L1449.88 1208.89 L1450.46 1208.89 L1451.05 1208.89 L1451.64 1208.89 L1452.22 1208.89 L1452.81 1208.89 L1453.4 1208.89 L1453.98 1208.89 L1454.57 1208.89 L1455.16 1208.89 L1455.74 1208.89 L1456.33 1208.89 L1456.91 1208.89 L1457.5 1208.89 L1458.09 1208.89 L1458.67 1208.89 L1459.26 1208.89 L1459.85 1208.89 L1460.43 1208.89 L1461.02 1208.89 L1461.61 1208.89 L1462.19 1208.89 L1462.78 1208.89 L1463.37 1208.89 L1463.95 1208.89 L1464.54 1208.89 L1465.12 1208.89 L1465.71 1208.89 L1466.3 1208.89 L1466.88 1208.89 L1467.47 1208.89 L1468.06 1208.89 L1468.64 1208.89 L1469.23 1208.89 L1469.82 1208.89 L1470.4 1208.89 L1470.99 1208.89 L1471.57 1208.89 L1472.16 1208.89 L1472.75 1208.89 L1473.33 1208.89 L1473.92 1208.89 L1474.51 1208.89 L1475.09 1208.89 L1475.68 1208.89 L1476.27 1208.89 L1476.85 1208.89 L1477.44 1208.89 L1478.03 1208.89 L1478.61 1208.89 L1479.2 1208.89 L1479.78 1208.89 L1480.37 1208.89 L1480.96 1208.89 L1481.54 1208.89 L1482.13 1208.89 L1482.72 1208.89 L1483.3 1208.89 L1483.89 1208.89 L1484.48 1208.89 L1485.06 1208.89 L1485.65 1208.89 L1486.24 1208.89 L1486.82 1208.89 L1487.41 1208.89 L1487.99 1208.89 L1488.58 1208.89 L1489.17 1208.89 L1489.75 1208.89 L1490.34 1208.89 L1490.93 1208.89 L1491.51 1208.89 L1492.1 1208.89 L1492.69 1208.89 L1493.27 1208.89 L1493.86 1208.89 L1494.45 1208.89 L1495.03 1208.89 L1495.62 1208.89 L1496.2 1208.89 L1496.79 1208.89 L1497.38 1208.89 L1497.96 1208.89 L1498.55 1208.89 L1499.14 1208.89 L1499.72 1208.89 L1500.31 1208.89 L1500.9 1208.89 L1501.48 1208.89 L1502.07 1208.89 L1502.65 1208.89 L1503.24 1208.89 L1503.83 1208.89 L1504.41 1208.89 L1505 1208.89 L1505.59 1208.89 L1506.17 1208.89 L1506.76 1208.89 L1507.35 1208.89 L1507.93 1208.89 L1508.52 1208.89 L1509.11 1208.89 L1509.69 1208.89 L1510.28 1208.89 L1510.86 1208.89 L1511.45 1208.89 L1512.04 1208.89 L1512.62 1208.89 L1513.21 1208.89 L1513.8 1208.89 L1514.38 1208.89 L1514.97 1208.89 L1515.56 1208.89 L1516.14 1208.89 L1516.73 1208.89 L1517.32 1208.89 L1517.9 1208.89 L1518.49 1208.89 L1519.07 1208.89 L1519.66 1208.89 L1520.25 1208.89 L1520.83 1208.89 L1521.42 1208.89 L1522.01 1208.89 L1522.59 1208.89 L1523.18 1208.89 L1523.77 1208.89 L1524.35 1208.89 L1524.94 1208.89 L1525.52 1208.89 L1526.11 1208.89 L1526.7 1208.89 L1527.28 1208.89 L1527.87 1208.89 L1528.46 1208.89 L1529.04 1208.89 L1529.63 1208.89 L1530.22 1208.89 L1530.8 1208.89 L1531.39 1208.89 L1531.98 1208.89 L1532.56 1208.89 L1533.15 1208.89 L1533.73 1208.89 L1534.32 1208.89 L1534.91 1208.89 L1535.49 1208.89 L1536.08 1208.89 L1536.67 1208.89 L1537.25 1208.89 L1537.84 1208.89 L1538.43 1208.89 L1539.01 1208.89 L1539.6 1208.89 L1540.19 1208.89 L1540.77 1208.89 L1541.36 1208.89 L1541.94 1208.89 L1542.53 1208.89 L1543.12 1208.89 L1543.7 1208.89 L1544.29 1208.89 L1544.88 1208.89 L1545.46 1208.89 L1546.05 1208.89 L1546.64 1208.89 L1547.22 1208.89 L1547.81 1208.89 L1548.4 1208.89 L1548.98 1208.89 L1549.57 1208.89 L1550.15 1208.89 L1550.74 1208.89 L1551.33 1208.89 L1551.91 1208.89 L1552.5 1208.89 L1553.09 1208.89 L1553.67 1208.89 L1554.26 1208.89 L1554.85 1208.89 L1555.43 1208.89 L1556.02 1208.89 L1556.6 1208.89 L1557.19 1208.89 L1557.78 1208.89 L1558.36 1208.89 L1558.95 1208.89 L1559.54 1208.89 L1560.12 1208.89 L1560.71 1208.89 L1561.3 1208.89 L1561.88 1208.89 L1562.47 1208.89 L1563.06 1208.89 L1563.64 1208.89 L1564.23 1208.89 L1564.81 1208.89 L1565.4 1208.89 L1565.99 1208.89 L1566.57 1208.89 L1567.16 1208.89 L1567.75 1208.89 L1568.33 1208.89 L1568.92 1208.89 L1569.51 1208.89 L1570.09 1208.89 L1570.68 1208.89 L1571.27 1208.89 L1571.85 1208.89 L1572.44 1208.89 L1573.02 1208.89 L1573.61 1208.89 L1574.2 1208.89 L1574.78 1208.89 L1575.37 1208.89 L1575.96 1208.89 L1576.54 1208.89 L1577.13 1208.89 L1577.72 1208.89 L1578.3 1208.89 L1578.89 1208.89 L1579.47 1208.89 L1580.06 1208.89 L1580.65 1208.89 L1581.23 1208.89 L1581.82 1208.89 L1582.41 1208.89 L1582.99 1208.89 L1583.58 1208.89 L1584.17 1208.89 L1584.75 1208.89 L1585.34 1208.89 L1585.93 1208.89 L1586.51 1208.89 L1587.1 1208.89 L1587.68 1208.89 L1588.27 1208.89 L1588.86 1208.89 L1589.44 1208.89 L1590.03 1208.89 L1590.62 1208.89 L1591.2 1208.89 L1591.79 1208.89 L1592.38 1208.89 L1592.96 1208.89 L1593.55 1208.89 L1594.14 1208.89 L1594.72 1208.89 L1595.31 1208.89 L1595.89 1208.89 L1596.48 1208.89 L1597.07 1208.89 L1597.65 1208.89 L1598.24 1208.89 L1598.83 1208.89 L1599.41 1208.89 L1600 1208.89 L1600.59 1208.89 L1601.17 1208.89 L1601.76 1208.89 L1602.34 1208.89 L1602.93 1208.89 L1603.52 1208.89 L1604.1 1208.89 L1604.69 1208.89 L1605.28 1208.89 L1605.86 1208.89 L1606.45 1208.89 L1607.04 1208.89 L1607.62 1208.89 L1608.21 1208.89 L1608.8 1208.89 L1609.38 1208.89 L1609.97 1208.89 L1610.55 1208.89 L1611.14 1208.89 L1611.73 1208.89 L1612.31 1208.89 L1612.9 1208.89 L1613.49 1208.89 L1614.07 1208.89 L1614.66 1208.89 L1615.25 1208.89 L1615.83 1208.89 L1616.42 1208.89 L1617.01 1208.89 L1617.59 1208.89 L1618.18 1208.89 L1618.76 1208.89 L1619.35 1208.89 L1619.94 1208.89 L1620.52 1208.89 L1621.11 1208.89 L1621.7 1208.89 L1622.28 1208.89 L1622.87 1208.89 L1623.46 1208.89 L1624.04 1208.89 L1624.63 1208.89 L1625.22 1208.89 L1625.8 1208.89 L1626.39 1208.89 L1626.97 1208.89 L1627.56 1208.89 L1628.15 1208.89 L1628.73 1208.89 L1629.32 1208.89 L1629.91 1208.89 L1630.49 1208.89 L1631.08 1208.89 L1631.67 1208.89 L1632.25 1208.89 L1632.84 1208.89 L1633.42 1208.89 L1634.01 1208.89 L1634.6 1208.89 L1635.18 1208.89 L1635.77 1208.89 L1636.36 1208.89 L1636.94 1208.89 L1637.53 1208.89 L1638.12 1208.89 L1638.7 1208.89 L1639.29 1208.89 L1639.88 1208.89 L1640.46 1208.89 L1641.05 1208.89 L1641.63 1208.89 L1642.22 1208.89 L1642.81 1208.89 L1643.39 1208.89 L1643.98 1208.89 L1644.57 1208.89 L1645.15 1208.89 L1645.74 1208.89 L1646.33 1208.89 L1646.91 1208.89 L1647.5 1208.89 L1648.09 1208.89 L1648.67 1208.89 L1649.26 1208.89 L1649.84 1208.89 L1650.43 1208.89 L1651.02 1208.89 L1651.6 1208.89 L1652.19 1208.89 L1652.78 1208.89 L1653.36 1208.89 L1653.95 1208.89 L1654.54 1208.89 L1655.12 1208.89 L1655.71 1208.89 L1656.29 1208.89 L1656.88 1208.89 L1657.47 1208.89 L1658.05 1208.89 L1658.64 1208.89 L1659.23 1208.89 L1659.81 1208.89 L1660.4 1208.89 L1660.99 1208.89 L1661.57 1208.89 L1662.16 1208.89 L1662.75 1208.89 L1663.33 1208.89 L1663.92 1208.89 L1664.5 1208.89 L1665.09 1208.89 L1665.68 1208.89 L1666.26 1208.89 L1666.85 1208.89 L1667.44 1208.89 L1668.02 1208.89 L1668.61 1208.89 L1669.2 1208.89 L1669.78 1208.89 L1670.37 1208.89 L1670.96 1208.89 L1671.54 1208.89 L1672.13 1208.89 L1672.71 1208.89 L1673.3 1208.89 L1673.89 1208.89 L1674.47 1208.89 L1675.06 1208.89 L1675.65 1208.89 L1676.23 1208.89 L1676.82 1208.89 L1677.41 1208.89 L1677.99 1208.89 L1678.58 1208.89 L1679.17 1208.89 L1679.75 1208.89 L1680.34 1208.89 L1680.92 1208.89 L1681.51 1208.89 L1682.1 1208.89 L1682.68 1208.89 L1683.27 1208.89 L1683.86 1208.89 L1684.44 1208.89 L1685.03 1208.89 L1685.62 1208.89 L1686.2 1208.89 L1686.79 1208.89 L1687.37 1208.89 L1687.96 1208.89 L1688.55 1208.89 L1689.13 1208.89 L1689.72 1208.89 L1690.31 1208.89 L1690.89 1208.89 L1691.48 1208.89 L1692.07 1208.89 L1692.65 1208.89 L1693.24 1208.89 L1693.83 1208.89 L1694.41 1208.89 L1695 1208.89 L1695.58 1208.89 L1696.17 1208.89 L1696.76 1208.89 L1697.34 1208.89 L1697.93 1208.89 L1698.52 1208.89 L1699.1 1208.89 L1699.69 1208.89 L1700.28 1208.89 L1700.86 1208.89 L1701.45 1208.89 L1702.04 1208.89 L1702.62 1208.89 L1703.21 1208.89 L1703.79 1208.89 L1704.38 1208.89 L1704.97 1208.89 L1705.55 1208.89 L1706.14 1208.89 L1706.73 1208.89 L1707.31 1208.89 L1707.9 1208.89 L1708.49 1208.89 L1709.07 1208.89 L1709.66 1208.89 L1710.24 1208.89 L1710.83 1208.89 L1711.42 1208.89 L1712 1208.89 L1712.59 1208.89 L1713.18 1208.89 L1713.76 1208.89 L1714.35 1208.89 L1714.94 1208.89 L1715.52 1208.89 L1716.11 1208.89 L1716.7 1208.89 L1717.28 1208.89 L1717.87 1208.89 L1718.45 1208.89 L1719.04 1208.89 L1719.63 1208.89 L1720.21 1208.89 L1720.8 1208.89 L1721.39 1208.89 L1721.97 1208.89 L1722.56 1208.89 L1723.15 1208.89 L1723.73 1208.89 L1724.32 1208.89 L1724.91 1208.89 L1725.49 1208.89 L1726.08 1208.89 L1726.66 1208.89 L1727.25 1208.89 L1727.84 1208.89 L1728.42 1208.89 L1729.01 1208.89 L1729.6 1208.89 L1730.18 1208.89 L1730.77 1208.89 L1731.36 1208.89 L1731.94 1208.89 L1732.53 1208.89 L1733.11 1208.89 L1733.7 1208.89 L1734.29 1208.89 L1734.87 1208.89 L1735.46 1208.89 L1736.05 1208.89 L1736.63 1208.89 L1737.22 1208.89 L1737.81 1208.89 L1738.39 1208.89 L1738.98 1208.89 L1739.57 1208.89 L1740.15 1208.89 L1740.74 1208.89 L1741.32 1208.89 L1741.91 1208.89 L1742.5 1208.89 L1743.08 1208.89 L1743.67 1208.89 L1744.26 1208.89 L1744.84 1208.89 L1745.43 1208.89 L1746.02 1208.89 L1746.6 1208.89 L1747.19 1208.89 L1747.78 1208.89 L1748.36 1208.89 L1748.95 1208.89 L1749.53 1208.89 L1750.12 1208.89 L1750.71 1208.89 L1751.29 1208.89 L1751.88 1208.89 L1752.47 1208.89 L1753.05 1208.89 L1753.64 1208.89 L1754.23 1208.89 L1754.81 1208.89 L1755.4 1208.89 L1755.99 1208.89 L1756.57 1208.89 L1757.16 1208.89 L1757.74 1208.89 L1758.33 1208.89 L1758.92 1208.89 L1759.5 1208.89 L1760.09 1208.89 L1760.68 1208.89 L1761.26 1208.89 L1761.85 1208.89 L1762.44 1208.89 L1763.02 1208.89 L1763.61 1208.89 L1764.19 1208.89 L1764.78 1208.89 L1765.37 1208.89 L1765.95 1208.89 L1766.54 1208.89 L1767.13 1208.89 L1767.71 1208.89 L1768.3 1208.89 L1768.89 1208.89 L1769.47 1208.89 L1770.06 1208.89 L1770.65 1208.89 L1771.23 1208.89 L1771.82 1208.89 L1772.4 1208.89 L1772.99 1208.89 L1773.58 1208.89 L1774.16 1208.89 L1774.75 1208.89 L1775.34 1208.89 L1775.92 1208.89 L1776.51 1208.89 L1777.1 1208.89 L1777.68 1208.89 L1778.27 1208.89 L1778.86 1208.89 L1779.44 1208.89 L1780.03 1208.89 L1780.61 1208.89 L1781.2 1208.89 L1781.79 1208.89 L1782.37 1208.89 L1782.96 1208.89 L1783.55 1208.89 L1784.13 1208.89 L1784.72 1208.89 L1785.31 1208.89 L1785.89 1208.89 L1786.48 1208.89 L1787.06 1208.89 L1787.65 1208.89 L1788.24 1208.89 L1788.82 1208.89 L1789.41 1208.89 L1790 1208.89 L1790.58 1208.89 L1791.17 1208.89 L1791.76 1208.89 L1792.34 1208.89 L1792.93 1208.89 L1793.52 1208.89 L1794.1 1208.89 L1794.69 1208.89 L1795.27 1208.89 L1795.86 1208.89 L1796.45 1208.89 L1797.03 1208.89 L1797.62 1208.89 L1798.21 1208.89 L1798.79 1208.89 L1799.38 1208.89 L1799.97 1208.89 L1800.55 1208.89 L1801.14 1208.89 L1801.73 1208.89 L1802.31 1208.89 L1802.9 1208.89 L1803.48 1208.89 L1804.07 1208.89 L1804.66 1208.89 L1805.24 1208.89 L1805.83 1208.89 L1806.42 1208.89 L1807 1208.89 L1807.59 1208.89 L1808.18 1208.89 L1808.76 1208.89 L1809.35 1208.89 L1809.94 1208.89 L1810.52 1208.89 L1811.11 1208.89 L1811.69 1208.89 L1812.28 1208.89 L1812.87 1208.89 L1813.45 1208.89 L1814.04 1208.89 L1814.63 1208.89 L1815.21 1208.89 L1815.8 1208.89 L1816.39 1208.89 L1816.97 1208.89 L1817.56 1208.89 L1818.14 1208.89 L1818.73 1208.89 L1819.32 1208.89 L1819.9 1208.89 L1820.49 1208.89 L1821.08 1208.89 L1821.66 1208.89 L1822.25 1208.89 L1822.84 1208.89 L1823.42 1208.89 L1824.01 1208.89 L1824.6 1208.89 L1825.18 1208.89 L1825.77 1208.89 L1826.35 1208.89 L1826.94 1208.89 L1827.53 1208.89 L1828.11 1208.89 L1828.7 1208.89 L1829.29 1208.89 L1829.87 1208.89 L1830.46 1208.89 L1831.05 1208.89 L1831.63 1208.89 L1832.22 1208.89 L1832.81 1208.89 L1833.39 1208.89 L1833.98 1208.89 L1834.56 1208.89 L1835.15 1208.89 L1835.74 1208.89 L1836.32 1208.89 L1836.91 1208.89 L1837.5 1208.89 L1838.08 1208.89 L1838.67 1208.89 L1839.26 1208.89 L1839.84 1208.89 L1840.43 1208.89 L1841.01 1208.89 L1841.6 1208.89 L1842.19 1208.89 L1842.77 1208.89 L1843.36 1208.89 L1843.95 1208.89 L1844.53 1208.89 L1845.12 1208.89 L1845.71 1208.89 L1846.29 1208.89 L1846.88 1208.89 L1847.47 1208.89 L1848.05 1208.89 L1848.64 1208.89 L1849.22 1208.89 L1849.81 1208.89 L1850.4 1208.89 L1850.98 1208.89 L1851.57 1208.89 L1852.16 1208.89 L1852.74 1208.89 L1853.33 1208.89 L1853.92 1208.89 L1854.5 1208.89 L1855.09 1208.89 L1855.68 1208.89 L1856.26 1208.89 L1856.85 1208.89 L1857.43 1208.89 L1858.02 1208.89 L1858.61 1208.89 L1859.19 1208.89 L1859.78 1208.89 L1860.37 1208.89 L1860.95 1208.89 L1861.54 1208.89 L1862.13 1208.89 L1862.71 1208.89 L1863.3 1208.89 L1863.88 1208.89 L1864.47 1208.89 L1865.06 1208.89 L1865.64 1208.89 L1866.23 1208.89 L1866.82 1208.89 L1867.4 1208.89 L1867.99 1208.89 L1868.58 1208.89 L1869.16 1208.89 L1869.75 1208.89 L1870.34 1208.89 L1870.92 1208.89 L1871.51 1208.89 L1872.09 1208.89 L1872.68 1208.89 L1873.27 1208.89 L1873.85 1208.89 L1874.44 1208.89 L1875.03 1208.89 L1875.61 1208.89 L1876.2 1208.89 L1876.79 1208.89 L1877.37 1208.89 L1877.96 1208.89 L1878.55 1208.89 L1879.13 1208.89 L1879.72 1208.89 L1880.3 1208.89 L1880.89 1208.89 L1881.48 1208.89 L1882.06 1208.89 L1882.65 1208.89 L1883.24 1208.89 L1883.82 1208.89 L1884.41 1208.89 L1885 1208.89 L1885.58 1208.89 L1886.17 1208.89 L1886.76 1208.89 L1887.34 1208.89 L1887.93 1208.89 L1888.51 1208.89 L1889.1 1208.89 L1889.69 1208.89 L1890.27 1208.89 L1890.86 1208.89 L1891.45 1208.89 L1892.03 1208.89 L1892.62 1208.89 L1893.21 1208.89 L1893.79 1208.89 L1894.38 1208.89 L1894.96 1208.89 L1895.55 1208.89 L1896.14 1208.89 L1896.72 1208.89 L1897.31 1208.89 L1897.9 1208.89 L1898.48 1208.89 L1899.07 1208.89 L1899.66 1208.89 L1900.24 1208.89 L1900.83 1208.89 L1901.42 1208.89 L1902 1208.89 L1902.59 1208.89 L1903.17 1208.89 L1903.76 1208.89 L1904.35 1208.89 L1904.93 1208.89 L1905.52 1208.89 L1906.11 1208.89 L1906.69 1208.89 L1907.28 1208.89 L1907.87 1208.89 L1908.45 1208.89 L1909.04 1208.89 L1909.63 1208.89 L1910.21 1208.89 L1910.8 1208.89 L1911.38 1208.89 L1911.97 1208.89 L1912.56 1208.89 L1913.14 1208.89 L1913.73 1208.89 L1914.32 1208.89 L1914.9 1208.89 L1915.49 1208.89 L1916.08 1208.89 L1916.66 1208.89 L1917.25 1208.89 L1917.83 1208.89 L1918.42 1208.89 L1919.01 1208.89 L1919.59 1208.89 L1920.18 1208.89 L1920.77 1208.89 L1921.35 1208.89 L1921.94 1208.89 L1922.53 1208.89 L1923.11 1208.89 L1923.7 1208.89 L1924.29 1208.89 L1924.87 1208.89 L1925.46 1208.89 L1926.04 1208.89 L1926.63 1208.89 L1927.22 1208.89 L1927.8 1208.89 L1928.39 1208.89 L1928.98 1208.89 L1929.56 1208.89 L1930.15 1208.89 L1930.74 1208.89 L1931.32 1208.89 L1931.91 1208.89 L1932.5 1208.89 L1933.08 1208.89 L1933.67 1208.89 L1934.25 1208.89 L1934.84 1208.89 L1935.43 1208.89 L1936.01 1208.89 L1936.6 1208.89 L1937.19 1208.89 L1937.77 1208.89 L1938.36 1208.89 L1938.95 1208.89 L1939.53 1208.89 L1940.12 1208.89 L1940.71 1208.89 L1941.29 1208.89 L1941.88 1208.89 L1942.46 1208.89 L1943.05 1208.89 L1943.64 1208.89 L1944.22 1208.89 L1944.81 1208.89 L1945.4 1208.89 L1945.98 1208.89 L1946.57 1208.89 L1947.16 1208.89 L1947.74 1208.89 L1948.33 1208.89 L1948.91 1208.89 L1949.5 1208.89 L1950.09 1208.89 L1950.67 1208.89 L1951.26 1208.89 L1951.85 1208.89 L1952.43 1208.89 L1953.02 1208.89 L1953.61 1208.89 L1954.19 1208.89 L1954.78 1208.89 L1955.37 1208.89 L1955.95 1208.89 L1956.54 1208.89 L1957.12 1208.89 L1957.71 1208.89 L1958.3 1208.89 L1958.88 1208.89 L1959.47 1208.89 L1960.06 1208.89 L1960.64 1208.89 L1961.23 1208.89 L1961.82 1208.89 L1962.4 1208.89 L1962.99 1208.89 L1963.58 1208.89 L1964.16 1208.89 L1964.75 1208.89 L1965.33 1208.89 L1965.92 1208.89 L1966.51 1208.89 L1967.09 1208.89 L1967.68 1208.89 L1968.27 1208.89 L1968.85 1208.89 L1969.44 1208.89 L1970.03 1208.89 L1970.61 1208.89 L1971.2 1208.89 L1971.78 1208.89 L1972.37 1208.89 L1972.96 1208.89 L1973.54 1208.89 L1974.13 1208.89 L1974.72 1208.89 L1975.3 1208.89 L1975.89 1208.89 L1976.48 1208.89 L1977.06 1208.89 L1977.65 1208.89 L1978.24 1208.89 L1978.82 1208.89 L1979.41 1208.89 L1979.99 1208.89 L1980.58 1208.89 L1981.17 1208.89 L1981.75 1208.89 L1982.34 1208.89 L1982.93 1208.89 L1983.51 1208.89 L1984.1 1208.89 L1984.69 1208.89 L1985.27 1208.89 L1985.86 1208.89 L1986.45 1208.89 L1987.03 1208.89 L1987.62 1208.89 L1988.2 1208.89 L1988.79 1208.89 L1989.38 1208.89 L1989.96 1208.89 L1990.55 1208.89 L1991.14 1208.89 L1991.72 1208.89 L1992.31 1208.89 L1992.9 1208.89 L1993.48 1208.89 L1994.07 1208.89 L1994.65 1208.89 L1995.24 1208.89 L1995.83 1208.89 L1996.41 1208.89 L1997 1208.89 L1997.59 1208.89 L1998.17 1208.89 L1998.76 1208.89 L1999.35 1208.89 L1999.93 1208.89 L2000.52 1208.89 L2001.11 1208.89 L2001.69 1208.89 L2002.28 1208.89 L2002.86 1208.89 L2003.45 1208.89 L2004.04 1208.89 L2004.62 1208.89 L2005.21 1208.89 L2005.8 1208.89 L2006.38 1208.89 L2006.97 1208.89 L2007.56 1208.89 L2008.14 1208.89 L2008.73 1208.89 L2009.32 1208.89 L2009.9 1208.89 L2010.49 1208.89 L2011.07 1208.89 L2011.66 1208.89 L2012.25 1208.89 L2012.83 1208.89 L2013.42 1208.89 L2014.01 1208.89 L2014.59 1208.89 L2015.18 1208.89 L2015.77 1208.89 L2016.35 1208.89 L2016.94 1208.89 L2017.53 1208.89 L2018.11 1208.89 L2018.7 1208.89 L2019.28 1208.89 L2019.87 1208.89 L2020.46 1208.89 L2021.04 1208.89 L2021.63 1208.89 L2022.22 1208.89 L2022.8 1208.89 L2023.39 1208.89 L2023.98 1208.89 L2024.56 1208.89 L2025.15 1208.89 L2025.73 1208.89 L2026.32 1208.89 L2026.91 1208.89 L2027.49 1208.89 L2028.08 1208.89 L2028.67 1208.89 L2029.25 1208.89 L2029.84 1208.89 L2030.43 1208.89 L2031.01 1208.89 L2031.6 1208.89 L2032.19 1208.89 L2032.77 1208.89 L2033.36 1208.89 L2033.94 1208.89 L2034.53 1208.89 L2035.12 1208.89 L2035.7 1208.89 L2036.29 1208.89 L2036.88 1208.89 L2037.46 1208.89 L2038.05 1208.89 L2038.64 1208.89 L2039.22 1208.89 L2039.81 1208.89 L2040.4 1208.89 L2040.98 1208.89 L2041.57 1208.89 L2042.15 1208.89 L2042.74 1208.89 L2043.33 1208.89 L2043.91 1208.89 L2044.5 1208.89 L2045.09 1208.89 L2045.67 1208.89 L2046.26 1208.89 L2046.85 1208.89 L2047.43 1208.89 L2048.02 1208.89 L2048.6 1208.89 L2049.19 1208.89 L2049.78 1208.89 L2050.36 1208.89 L2050.95 1208.89 L2051.54 1208.89 L2052.12 1208.89 L2052.71 1208.89 L2053.3 1208.89 L2053.88 1208.89 L2054.47 1208.89 L2055.06 1208.89 L2055.64 1208.89 L2056.23 1208.89 L2056.81 1208.89 L2057.4 1208.89 L2057.99 1208.89 L2058.57 1208.89 L2059.16 1208.89 L2059.75 1208.89 L2060.33 1208.89 L2060.92 1208.89 L2061.51 1208.89 L2062.09 1208.89 L2062.68 1208.89 L2063.27 1208.89 L2063.85 1208.89 L2064.44 1208.89 L2065.02 1208.89 L2065.61 1208.89 L2066.2 1208.89 L2066.78 1208.89 L2067.37 1208.89 L2067.96 1208.89 L2068.54 1208.89 L2069.13 1208.89 L2069.72 1208.89 L2070.3 1208.89 L2070.89 1208.89 L2071.48 1208.89 L2072.06 1208.89 L2072.65 1208.89 L2073.23 1208.89 L2073.82 1208.89 L2074.41 1208.89 L2074.99 1208.89 L2075.58 1208.89 L2076.17 1208.89 L2076.75 1208.89 L2077.34 1208.89 L2077.93 1208.89 L2078.51 1208.89 L2079.1 1208.89 L2079.68 1208.89 L2080.27 1208.89 L2080.86 1208.89 L2081.44 1208.89 L2082.03 1208.89 L2082.62 1208.89 L2083.2 1208.89 L2083.79 1208.89 L2084.38 1208.89 L2084.96 1208.89 L2085.55 1208.89 L2086.14 1208.89 L2086.72 1208.89 L2087.31 1208.89 L2087.89 1208.89 L2088.48 1208.89 L2089.07 1208.89 L2089.65 1208.89 L2090.24 1208.89 L2090.83 1208.89 L2091.41 1208.89 L2092 1208.89 L2092.59 1208.89 L2093.17 1208.89 L2093.76 1208.89 L2094.35 1208.89 L2094.93 1208.89 L2095.52 1208.89 L2096.1 1208.89 L2096.69 1208.89 L2097.28 1208.89 L2097.86 1208.89 L2098.45 1208.89 L2099.04 1208.89 L2099.62 1208.89 L2100.21 1208.89 L2100.8 1208.89 L2101.38 1208.89 L2101.97 1208.89 L2102.55 1208.89 L2103.14 1208.89 L2103.73 1208.89 L2104.31 1208.89 L2104.9 1208.89 L2105.49 1208.89 L2106.07 1208.89 L2106.66 1208.89 L2107.25 1208.89 L2107.83 1208.89 L2108.42 1208.89 L2109.01 1208.89 L2109.59 1208.89 L2110.18 1208.89 L2110.76 1208.89 L2111.35 1208.89 L2111.94 1208.89 L2112.52 1208.89 L2113.11 1208.89 L2113.7 1208.89 L2114.28 1208.89 L2114.87 1208.89 L2115.46 1208.89 L2116.04 1208.89 L2116.63 1208.89 L2117.22 1208.89 L2117.8 1208.89 L2118.39 1208.89 L2118.97 1208.89 L2119.56 1208.89 L2120.15 1208.89 L2120.73 1208.89 L2121.32 1208.89 L2121.91 1208.89 L2122.49 1208.89 L2123.08 1208.89 L2123.67 1208.89 L2124.25 1208.89 L2124.84 1208.89 L2125.42 1208.89 L2126.01 1208.89 L2126.6 1208.89 L2127.18 1208.89 L2127.77 1208.89 L2128.36 1208.89 L2128.94 1208.89 L2129.53 1208.89 L2130.12 1208.89 L2130.7 1208.89 L2131.29 1208.89 L2131.88 1208.89 L2132.46 1208.89 L2133.05 1208.89 L2133.63 1208.89 L2134.22 1208.89 L2134.81 1208.89 L2135.39 1208.89 L2135.98 1208.89 L2136.57 1208.89 L2137.15 1208.89 L2137.74 1208.89 L2138.33 1208.89 L2138.91 1208.89 L2139.5 1208.89 L2140.09 1208.89 L2140.67 1208.89 L2141.26 1208.89 L2141.84 1208.89 L2142.43 1208.89 L2143.02 1208.89 L2143.6 1208.89 L2144.19 1208.89 L2144.78 1208.89 L2145.36 1208.89 L2145.95 1208.89 L2146.54 1208.89 L2147.12 1208.89 L2147.71 1208.89 L2148.3 1208.89 L2148.88 1208.89 L2149.47 1208.89 L2150.05 1208.89 L2150.64 1208.89 L2151.23 1208.89 L2151.81 1208.89 L2152.4 1208.89 L2152.99 1208.89 L2153.57 1208.89 L2154.16 1208.89 L2154.75 1208.89 L2155.33 1208.89 L2155.92 1208.89 L2156.5 1208.89 L2157.09 1208.89 L2157.68 1208.89 L2158.26 1208.89 L2158.26 1208.65 L2157.68 1208.65 L2157.09 1208.65 L2156.5 1208.65 L2155.92 1208.65 L2155.33 1208.65 L2154.75 1208.65 L2154.16 1208.65 L2153.57 1208.65 L2152.99 1208.65 L2152.4 1208.65 L2151.81 1208.65 L2151.23 1208.65 L2150.64 1208.65 L2150.05 1208.65 L2149.47 1208.65 L2148.88 1208.65 L2148.3 1208.65 L2147.71 1208.65 L2147.12 1208.65 L2146.54 1208.65 L2145.95 1208.65 L2145.36 1208.65 L2144.78 1208.65 L2144.19 1208.65 L2143.6 1208.65 L2143.02 1208.65 L2142.43 1208.65 L2141.84 1208.65 L2141.26 1208.65 L2140.67 1208.65 L2140.09 1208.65 L2139.5 1208.65 L2138.91 1208.65 L2138.33 1208.65 L2137.74 1208.65 L2137.15 1208.65 L2136.57 1208.65 L2135.98 1208.65 L2135.39 1208.65 L2134.81 1208.65 L2134.22 1208.65 L2133.63 1208.65 L2133.05 1208.65 L2132.46 1208.65 L2131.88 1208.65 L2131.29 1208.65 L2130.7 1208.65 L2130.12 1208.65 L2129.53 1208.65 L2128.94 1208.65 L2128.36 1208.65 L2127.77 1208.65 L2127.18 1208.65 L2126.6 1208.65 L2126.01 1208.65 L2125.42 1208.65 L2124.84 1208.65 L2124.25 1208.65 L2123.67 1208.65 L2123.08 1208.65 L2122.49 1208.65 L2121.91 1208.65 L2121.32 1208.65 L2120.73 1208.65 L2120.15 1208.65 L2119.56 1208.65 L2118.97 1208.65 L2118.39 1208.65 L2117.8 1208.65 L2117.22 1208.65 L2116.63 1208.65 L2116.04 1208.65 L2115.46 1208.65 L2114.87 1208.65 L2114.28 1208.65 L2113.7 1208.65 L2113.11 1208.65 L2112.52 1208.65 L2111.94 1208.65 L2111.35 1208.65 L2110.76 1208.65 L2110.18 1208.65 L2109.59 1208.65 L2109.01 1208.65 L2108.42 1208.65 L2107.83 1208.65 L2107.25 1208.65 L2106.66 1208.65 L2106.07 1208.65 L2105.49 1208.65 L2104.9 1208.65 L2104.31 1208.65 L2103.73 1208.65 L2103.14 1208.65 L2102.55 1208.65 L2101.97 1208.65 L2101.38 1208.65 L2100.8 1208.65 L2100.21 1208.65 L2099.62 1208.65 L2099.04 1208.65 L2098.45 1208.65 L2097.86 1208.65 L2097.28 1208.65 L2096.69 1208.65 L2096.1 1208.65 L2095.52 1208.65 L2094.93 1208.65 L2094.35 1208.65 L2093.76 1208.65 L2093.17 1208.65 L2092.59 1208.65 L2092 1208.65 L2091.41 1208.65 L2090.83 1208.65 L2090.24 1208.65 L2089.65 1208.65 L2089.07 1208.65 L2088.48 1208.65 L2087.89 1208.65 L2087.31 1208.65 L2086.72 1208.65 L2086.14 1208.65 L2085.55 1208.65 L2084.96 1208.65 L2084.38 1208.65 L2083.79 1208.65 L2083.2 1208.65 L2082.62 1208.65 L2082.03 1208.65 L2081.44 1208.65 L2080.86 1208.65 L2080.27 1208.65 L2079.68 1208.65 L2079.1 1208.65 L2078.51 1208.65 L2077.93 1208.65 L2077.34 1208.65 L2076.75 1208.65 L2076.17 1208.65 L2075.58 1208.65 L2074.99 1208.65 L2074.41 1208.65 L2073.82 1208.65 L2073.23 1208.65 L2072.65 1208.65 L2072.06 1208.65 L2071.48 1208.65 L2070.89 1208.65 L2070.3 1208.65 L2069.72 1208.65 L2069.13 1208.65 L2068.54 1208.65 L2067.96 1208.65 L2067.37 1208.65 L2066.78 1208.65 L2066.2 1208.65 L2065.61 1208.65 L2065.02 1208.65 L2064.44 1208.65 L2063.85 1208.65 L2063.27 1208.65 L2062.68 1208.65 L2062.09 1208.65 L2061.51 1208.65 L2060.92 1208.65 L2060.33 1208.65 L2059.75 1208.65 L2059.16 1208.65 L2058.57 1208.65 L2057.99 1208.65 L2057.4 1208.65 L2056.81 1208.65 L2056.23 1208.65 L2055.64 1208.65 L2055.06 1208.65 L2054.47 1208.65 L2053.88 1208.65 L2053.3 1208.65 L2052.71 1208.65 L2052.12 1208.65 L2051.54 1208.65 L2050.95 1208.65 L2050.36 1208.65 L2049.78 1208.65 L2049.19 1208.65 L2048.6 1208.65 L2048.02 1208.65 L2047.43 1208.65 L2046.85 1208.65 L2046.26 1208.65 L2045.67 1208.65 L2045.09 1208.65 L2044.5 1208.65 L2043.91 1208.65 L2043.33 1208.65 L2042.74 1208.65 L2042.15 1208.65 L2041.57 1208.65 L2040.98 1208.65 L2040.4 1208.65 L2039.81 1208.65 L2039.22 1208.65 L2038.64 1208.65 L2038.05 1208.65 L2037.46 1208.65 L2036.88 1208.65 L2036.29 1208.65 L2035.7 1208.65 L2035.12 1208.65 L2034.53 1208.65 L2033.94 1208.65 L2033.36 1208.65 L2032.77 1208.65 L2032.19 1208.65 L2031.6 1208.65 L2031.01 1208.65 L2030.43 1208.65 L2029.84 1208.65 L2029.25 1208.65 L2028.67 1208.65 L2028.08 1208.65 L2027.49 1208.65 L2026.91 1208.65 L2026.32 1208.65 L2025.73 1208.65 L2025.15 1208.65 L2024.56 1208.65 L2023.98 1208.65 L2023.39 1208.65 L2022.8 1208.65 L2022.22 1208.65 L2021.63 1208.65 L2021.04 1208.65 L2020.46 1208.65 L2019.87 1208.65 L2019.28 1208.65 L2018.7 1208.65 L2018.11 1208.65 L2017.53 1208.65 L2016.94 1208.65 L2016.35 1208.65 L2015.77 1208.65 L2015.18 1208.65 L2014.59 1208.65 L2014.01 1208.65 L2013.42 1208.65 L2012.83 1208.65 L2012.25 1208.65 L2011.66 1208.65 L2011.07 1208.65 L2010.49 1208.65 L2009.9 1208.65 L2009.32 1208.65 L2008.73 1208.65 L2008.14 1208.65 L2007.56 1208.65 L2006.97 1208.65 L2006.38 1208.65 L2005.8 1208.65 L2005.21 1208.65 L2004.62 1208.65 L2004.04 1208.65 L2003.45 1208.65 L2002.86 1208.65 L2002.28 1208.65 L2001.69 1208.65 L2001.11 1208.65 L2000.52 1208.65 L1999.93 1208.65 L1999.35 1208.65 L1998.76 1208.65 L1998.17 1208.65 L1997.59 1208.65 L1997 1208.65 L1996.41 1208.65 L1995.83 1208.65 L1995.24 1208.65 L1994.65 1208.65 L1994.07 1208.65 L1993.48 1208.65 L1992.9 1208.65 L1992.31 1208.65 L1991.72 1208.65 L1991.14 1208.65 L1990.55 1208.65 L1989.96 1208.65 L1989.38 1208.65 L1988.79 1208.65 L1988.2 1208.65 L1987.62 1208.65 L1987.03 1208.65 L1986.45 1208.65 L1985.86 1208.65 L1985.27 1208.65 L1984.69 1208.65 L1984.1 1208.65 L1983.51 1208.65 L1982.93 1208.65 L1982.34 1208.65 L1981.75 1208.65 L1981.17 1208.65 L1980.58 1208.65 L1979.99 1208.65 L1979.41 1208.65 L1978.82 1208.65 L1978.24 1208.65 L1977.65 1208.65 L1977.06 1208.65 L1976.48 1208.65 L1975.89 1208.65 L1975.3 1208.65 L1974.72 1208.65 L1974.13 1208.65 L1973.54 1208.65 L1972.96 1208.65 L1972.37 1208.65 L1971.78 1208.65 L1971.2 1208.65 L1970.61 1208.65 L1970.03 1208.65 L1969.44 1208.65 L1968.85 1208.65 L1968.27 1208.65 L1967.68 1208.65 L1967.09 1208.65 L1966.51 1208.65 L1965.92 1208.65 L1965.33 1208.65 L1964.75 1208.65 L1964.16 1208.65 L1963.58 1208.65 L1962.99 1208.65 L1962.4 1208.65 L1961.82 1208.65 L1961.23 1208.65 L1960.64 1208.65 L1960.06 1208.65 L1959.47 1208.65 L1958.88 1208.65 L1958.3 1208.65 L1957.71 1208.65 L1957.12 1208.65 L1956.54 1208.65 L1955.95 1208.65 L1955.37 1208.65 L1954.78 1208.65 L1954.19 1208.65 L1953.61 1208.65 L1953.02 1208.65 L1952.43 1208.65 L1951.85 1208.65 L1951.26 1208.65 L1950.67 1208.65 L1950.09 1208.65 L1949.5 1208.65 L1948.91 1208.65 L1948.33 1208.65 L1947.74 1208.65 L1947.16 1208.65 L1946.57 1208.65 L1945.98 1208.65 L1945.4 1208.65 L1944.81 1208.65 L1944.22 1208.65 L1943.64 1208.65 L1943.05 1208.65 L1942.46 1208.65 L1941.88 1208.65 L1941.29 1208.65 L1940.71 1208.65 L1940.12 1208.65 L1939.53 1208.65 L1938.95 1208.65 L1938.36 1208.65 L1937.77 1208.65 L1937.19 1208.65 L1936.6 1208.65 L1936.01 1208.65 L1935.43 1208.65 L1934.84 1208.65 L1934.25 1208.65 L1933.67 1208.65 L1933.08 1208.65 L1932.5 1208.65 L1931.91 1208.65 L1931.32 1208.65 L1930.74 1208.65 L1930.15 1208.65 L1929.56 1208.65 L1928.98 1208.65 L1928.39 1208.65 L1927.8 1208.65 L1927.22 1208.65 L1926.63 1208.65 L1926.04 1208.65 L1925.46 1208.65 L1924.87 1208.65 L1924.29 1208.65 L1923.7 1208.65 L1923.11 1208.65 L1922.53 1208.65 L1921.94 1208.65 L1921.35 1208.65 L1920.77 1208.65 L1920.18 1208.65 L1919.59 1208.65 L1919.01 1208.65 L1918.42 1208.65 L1917.83 1208.65 L1917.25 1208.65 L1916.66 1208.65 L1916.08 1208.65 L1915.49 1208.65 L1914.9 1208.65 L1914.32 1208.65 L1913.73 1208.65 L1913.14 1208.65 L1912.56 1208.65 L1911.97 1208.65 L1911.38 1208.65 L1910.8 1208.65 L1910.21 1208.65 L1909.63 1208.65 L1909.04 1208.65 L1908.45 1208.65 L1907.87 1208.65 L1907.28 1208.65 L1906.69 1208.65 L1906.11 1208.65 L1905.52 1208.65 L1904.93 1208.65 L1904.35 1208.65 L1903.76 1208.65 L1903.17 1208.65 L1902.59 1208.65 L1902 1208.65 L1901.42 1208.65 L1900.83 1208.65 L1900.24 1208.65 L1899.66 1208.65 L1899.07 1208.65 L1898.48 1208.65 L1897.9 1208.65 L1897.31 1208.65 L1896.72 1208.65 L1896.14 1208.65 L1895.55 1208.65 L1894.96 1208.65 L1894.38 1208.65 L1893.79 1208.65 L1893.21 1208.65 L1892.62 1208.65 L1892.03 1208.65 L1891.45 1208.65 L1890.86 1208.65 L1890.27 1208.65 L1889.69 1208.65 L1889.1 1208.65 L1888.51 1208.65 L1887.93 1208.65 L1887.34 1208.65 L1886.76 1208.65 L1886.17 1208.65 L1885.58 1208.65 L1885 1208.65 L1884.41 1208.65 L1883.82 1208.65 L1883.24 1208.65 L1882.65 1208.65 L1882.06 1208.65 L1881.48 1208.65 L1880.89 1208.65 L1880.3 1208.65 L1879.72 1208.65 L1879.13 1208.65 L1878.55 1208.65 L1877.96 1208.65 L1877.37 1208.65 L1876.79 1208.65 L1876.2 1208.65 L1875.61 1208.65 L1875.03 1208.65 L1874.44 1208.65 L1873.85 1208.65 L1873.27 1208.65 L1872.68 1208.65 L1872.09 1208.65 L1871.51 1208.65 L1870.92 1208.65 L1870.34 1208.65 L1869.75 1208.65 L1869.16 1208.65 L1868.58 1208.65 L1867.99 1208.65 L1867.4 1208.65 L1866.82 1208.65 L1866.23 1208.65 L1865.64 1208.65 L1865.06 1208.65 L1864.47 1208.65 L1863.88 1208.65 L1863.3 1208.65 L1862.71 1208.65 L1862.13 1208.65 L1861.54 1208.65 L1860.95 1208.65 L1860.37 1208.65 L1859.78 1208.65 L1859.19 1208.65 L1858.61 1208.65 L1858.02 1208.65 L1857.43 1208.65 L1856.85 1208.65 L1856.26 1208.65 L1855.68 1208.65 L1855.09 1208.65 L1854.5 1208.65 L1853.92 1208.65 L1853.33 1208.65 L1852.74 1208.65 L1852.16 1208.65 L1851.57 1208.65 L1850.98 1208.65 L1850.4 1208.65 L1849.81 1208.65 L1849.22 1208.65 L1848.64 1208.65 L1848.05 1208.65 L1847.47 1208.65 L1846.88 1208.65 L1846.29 1208.65 L1845.71 1208.65 L1845.12 1208.65 L1844.53 1208.65 L1843.95 1208.65 L1843.36 1208.65 L1842.77 1208.65 L1842.19 1208.65 L1841.6 1208.65 L1841.01 1208.65 L1840.43 1208.65 L1839.84 1208.65 L1839.26 1208.65 L1838.67 1208.65 L1838.08 1208.65 L1837.5 1208.65 L1836.91 1208.65 L1836.32 1208.65 L1835.74 1208.65 L1835.15 1208.65 L1834.56 1208.65 L1833.98 1208.65 L1833.39 1208.65 L1832.81 1208.65 L1832.22 1208.65 L1831.63 1208.65 L1831.05 1208.65 L1830.46 1208.65 L1829.87 1208.65 L1829.29 1208.65 L1828.7 1208.65 L1828.11 1208.65 L1827.53 1208.65 L1826.94 1208.65 L1826.35 1208.65 L1825.77 1208.65 L1825.18 1208.65 L1824.6 1208.65 L1824.01 1208.65 L1823.42 1208.65 L1822.84 1208.65 L1822.25 1208.65 L1821.66 1208.65 L1821.08 1208.65 L1820.49 1208.65 L1819.9 1208.65 L1819.32 1208.65 L1818.73 1208.65 L1818.14 1208.65 L1817.56 1208.65 L1816.97 1208.65 L1816.39 1208.65 L1815.8 1208.65 L1815.21 1208.65 L1814.63 1208.65 L1814.04 1208.65 L1813.45 1208.65 L1812.87 1208.65 L1812.28 1208.65 L1811.69 1208.65 L1811.11 1208.65 L1810.52 1208.65 L1809.94 1208.65 L1809.35 1208.65 L1808.76 1208.65 L1808.18 1208.65 L1807.59 1208.65 L1807 1208.65 L1806.42 1208.65 L1805.83 1208.65 L1805.24 1208.65 L1804.66 1208.65 L1804.07 1208.65 L1803.48 1208.65 L1802.9 1208.65 L1802.31 1208.65 L1801.73 1208.65 L1801.14 1208.65 L1800.55 1208.65 L1799.97 1208.65 L1799.38 1208.65 L1798.79 1208.65 L1798.21 1208.65 L1797.62 1208.65 L1797.03 1208.65 L1796.45 1208.65 L1795.86 1208.65 L1795.27 1208.65 L1794.69 1208.65 L1794.1 1208.65 L1793.52 1208.65 L1792.93 1208.65 L1792.34 1208.65 L1791.76 1208.65 L1791.17 1208.65 L1790.58 1208.65 L1790 1208.65 L1789.41 1208.65 L1788.82 1208.65 L1788.24 1208.65 L1787.65 1208.65 L1787.06 1208.65 L1786.48 1208.65 L1785.89 1208.65 L1785.31 1208.65 L1784.72 1208.65 L1784.13 1208.65 L1783.55 1208.65 L1782.96 1208.65 L1782.37 1208.65 L1781.79 1208.65 L1781.2 1208.65 L1780.61 1208.65 L1780.03 1208.65 L1779.44 1208.65 L1778.86 1208.65 L1778.27 1208.65 L1777.68 1208.65 L1777.1 1208.65 L1776.51 1208.65 L1775.92 1208.65 L1775.34 1208.65 L1774.75 1208.65 L1774.16 1208.65 L1773.58 1208.65 L1772.99 1208.65 L1772.4 1208.65 L1771.82 1208.65 L1771.23 1208.65 L1770.65 1208.65 L1770.06 1208.65 L1769.47 1208.65 L1768.89 1208.65 L1768.3 1208.65 L1767.71 1208.65 L1767.13 1208.65 L1766.54 1208.65 L1765.95 1208.65 L1765.37 1208.65 L1764.78 1208.65 L1764.19 1208.65 L1763.61 1208.65 L1763.02 1208.65 L1762.44 1208.65 L1761.85 1208.65 L1761.26 1208.65 L1760.68 1208.65 L1760.09 1208.65 L1759.5 1208.65 L1758.92 1208.65 L1758.33 1208.65 L1757.74 1208.65 L1757.16 1208.65 L1756.57 1208.65 L1755.99 1208.65 L1755.4 1208.65 L1754.81 1208.65 L1754.23 1208.65 L1753.64 1208.65 L1753.05 1208.65 L1752.47 1208.65 L1751.88 1208.65 L1751.29 1208.65 L1750.71 1208.65 L1750.12 1208.65 L1749.53 1208.65 L1748.95 1208.65 L1748.36 1208.65 L1747.78 1208.65 L1747.19 1208.65 L1746.6 1208.65 L1746.02 1208.65 L1745.43 1208.65 L1744.84 1208.65 L1744.26 1208.65 L1743.67 1208.65 L1743.08 1208.65 L1742.5 1208.65 L1741.91 1208.65 L1741.32 1208.65 L1740.74 1208.65 L1740.15 1208.65 L1739.57 1208.65 L1738.98 1208.65 L1738.39 1208.65 L1737.81 1208.65 L1737.22 1208.65 L1736.63 1208.65 L1736.05 1208.65 L1735.46 1208.65 L1734.87 1208.65 L1734.29 1208.65 L1733.7 1208.65 L1733.11 1208.65 L1732.53 1208.65 L1731.94 1208.65 L1731.36 1208.65 L1730.77 1208.65 L1730.18 1208.65 L1729.6 1208.65 L1729.01 1208.65 L1728.42 1208.65 L1727.84 1208.65 L1727.25 1208.65 L1726.66 1208.65 L1726.08 1208.65 L1725.49 1208.65 L1724.91 1208.65 L1724.32 1208.65 L1723.73 1208.65 L1723.15 1208.65 L1722.56 1208.65 L1721.97 1208.65 L1721.39 1208.65 L1720.8 1208.65 L1720.21 1208.65 L1719.63 1208.65 L1719.04 1208.65 L1718.45 1208.65 L1717.87 1208.65 L1717.28 1208.65 L1716.7 1208.65 L1716.11 1208.65 L1715.52 1208.65 L1714.94 1208.65 L1714.35 1208.65 L1713.76 1208.65 L1713.18 1208.65 L1712.59 1208.65 L1712 1208.65 L1711.42 1208.65 L1710.83 1208.65 L1710.24 1208.65 L1709.66 1208.65 L1709.07 1208.65 L1708.49 1208.65 L1707.9 1208.65 L1707.31 1208.65 L1706.73 1208.65 L1706.14 1208.65 L1705.55 1208.65 L1704.97 1208.65 L1704.38 1208.65 L1703.79 1208.65 L1703.21 1208.65 L1702.62 1208.65 L1702.04 1208.65 L1701.45 1208.65 L1700.86 1208.65 L1700.28 1208.65 L1699.69 1208.65 L1699.1 1208.65 L1698.52 1208.65 L1697.93 1208.65 L1697.34 1208.65 L1696.76 1208.65 L1696.17 1208.65 L1695.58 1208.65 L1695 1208.65 L1694.41 1208.65 L1693.83 1208.65 L1693.24 1208.65 L1692.65 1208.65 L1692.07 1208.65 L1691.48 1208.65 L1690.89 1208.65 L1690.31 1208.65 L1689.72 1208.65 L1689.13 1208.65 L1688.55 1208.65 L1687.96 1208.65 L1687.37 1208.65 L1686.79 1208.65 L1686.2 1208.65 L1685.62 1208.65 L1685.03 1208.65 L1684.44 1208.65 L1683.86 1208.65 L1683.27 1208.65 L1682.68 1208.65 L1682.1 1208.65 L1681.51 1208.65 L1680.92 1208.65 L1680.34 1208.65 L1679.75 1208.65 L1679.17 1208.65 L1678.58 1208.65 L1677.99 1208.65 L1677.41 1208.65 L1676.82 1208.65 L1676.23 1208.65 L1675.65 1208.65 L1675.06 1208.65 L1674.47 1208.65 L1673.89 1208.65 L1673.3 1208.65 L1672.71 1208.65 L1672.13 1208.65 L1671.54 1208.65 L1670.96 1208.65 L1670.37 1208.65 L1669.78 1208.65 L1669.2 1208.65 L1668.61 1208.65 L1668.02 1208.65 L1667.44 1208.65 L1666.85 1208.65 L1666.26 1208.65 L1665.68 1208.65 L1665.09 1208.65 L1664.5 1208.65 L1663.92 1208.65 L1663.33 1208.65 L1662.75 1208.65 L1662.16 1208.65 L1661.57 1208.65 L1660.99 1208.65 L1660.4 1208.65 L1659.81 1208.65 L1659.23 1208.65 L1658.64 1208.65 L1658.05 1208.65 L1657.47 1208.65 L1656.88 1208.65 L1656.29 1208.65 L1655.71 1208.65 L1655.12 1208.65 L1654.54 1208.65 L1653.95 1208.65 L1653.36 1208.65 L1652.78 1208.65 L1652.19 1208.65 L1651.6 1208.65 L1651.02 1208.65 L1650.43 1208.65 L1649.84 1208.65 L1649.26 1208.65 L1648.67 1208.65 L1648.09 1208.65 L1647.5 1208.65 L1646.91 1208.65 L1646.33 1208.65 L1645.74 1208.65 L1645.15 1208.65 L1644.57 1208.65 L1643.98 1208.65 L1643.39 1208.65 L1642.81 1208.65 L1642.22 1208.65 L1641.63 1208.65 L1641.05 1208.65 L1640.46 1208.65 L1639.88 1208.65 L1639.29 1208.65 L1638.7 1208.65 L1638.12 1208.65 L1637.53 1208.65 L1636.94 1208.65 L1636.36 1208.65 L1635.77 1208.65 L1635.18 1208.65 L1634.6 1208.65 L1634.01 1208.65 L1633.42 1208.65 L1632.84 1208.65 L1632.25 1208.65 L1631.67 1208.65 L1631.08 1208.65 L1630.49 1208.65 L1629.91 1208.65 L1629.32 1208.65 L1628.73 1208.65 L1628.15 1208.65 L1627.56 1208.65 L1626.97 1208.65 L1626.39 1208.65 L1625.8 1208.65 L1625.22 1208.65 L1624.63 1208.65 L1624.04 1208.65 L1623.46 1208.65 L1622.87 1208.65 L1622.28 1208.65 L1621.7 1208.65 L1621.11 1208.65 L1620.52 1208.65 L1619.94 1208.65 L1619.35 1208.65 L1618.76 1208.65 L1618.18 1208.65 L1617.59 1208.65 L1617.01 1208.65 L1616.42 1208.65 L1615.83 1208.65 L1615.25 1208.65 L1614.66 1208.65 L1614.07 1208.65 L1613.49 1208.65 L1612.9 1208.65 L1612.31 1208.65 L1611.73 1208.65 L1611.14 1208.65 L1610.55 1208.65 L1609.97 1208.65 L1609.38 1208.65 L1608.8 1208.65 L1608.21 1208.65 L1607.62 1208.65 L1607.04 1208.65 L1606.45 1208.65 L1605.86 1208.65 L1605.28 1208.65 L1604.69 1208.65 L1604.1 1208.65 L1603.52 1208.65 L1602.93 1208.65 L1602.34 1208.65 L1601.76 1208.65 L1601.17 1208.65 L1600.59 1208.65 L1600 1208.65 L1599.41 1208.65 L1598.83 1208.65 L1598.24 1208.65 L1597.65 1208.65 L1597.07 1208.65 L1596.48 1208.65 L1595.89 1208.65 L1595.31 1208.65 L1594.72 1208.65 L1594.14 1208.65 L1593.55 1208.65 L1592.96 1208.65 L1592.38 1208.65 L1591.79 1208.65 L1591.2 1208.65 L1590.62 1208.65 L1590.03 1208.65 L1589.44 1208.65 L1588.86 1208.65 L1588.27 1208.65 L1587.68 1208.65 L1587.1 1208.65 L1586.51 1208.65 L1585.93 1208.65 L1585.34 1208.65 L1584.75 1208.65 L1584.17 1208.65 L1583.58 1208.65 L1582.99 1208.65 L1582.41 1208.65 L1581.82 1208.65 L1581.23 1208.65 L1580.65 1208.65 L1580.06 1208.65 L1579.47 1208.65 L1578.89 1208.65 L1578.3 1208.65 L1577.72 1208.65 L1577.13 1208.65 L1576.54 1208.65 L1575.96 1208.65 L1575.37 1208.65 L1574.78 1208.65 L1574.2 1208.65 L1573.61 1208.65 L1573.02 1208.65 L1572.44 1208.65 L1571.85 1208.65 L1571.27 1208.65 L1570.68 1208.65 L1570.09 1208.65 L1569.51 1208.65 L1568.92 1208.65 L1568.33 1208.65 L1567.75 1208.65 L1567.16 1208.65 L1566.57 1208.65 L1565.99 1208.65 L1565.4 1208.65 L1564.81 1208.65 L1564.23 1208.65 L1563.64 1208.65 L1563.06 1208.65 L1562.47 1208.65 L1561.88 1208.65 L1561.3 1208.65 L1560.71 1208.65 L1560.12 1208.65 L1559.54 1208.65 L1558.95 1208.65 L1558.36 1208.65 L1557.78 1208.65 L1557.19 1208.65 L1556.6 1208.65 L1556.02 1208.65 L1555.43 1208.65 L1554.85 1208.65 L1554.26 1208.65 L1553.67 1208.65 L1553.09 1208.65 L1552.5 1208.65 L1551.91 1208.65 L1551.33 1208.65 L1550.74 1208.65 L1550.15 1208.65 L1549.57 1208.65 L1548.98 1208.65 L1548.4 1208.65 L1547.81 1208.65 L1547.22 1208.65 L1546.64 1208.65 L1546.05 1208.65 L1545.46 1208.65 L1544.88 1208.65 L1544.29 1208.65 L1543.7 1208.65 L1543.12 1208.65 L1542.53 1208.65 L1541.94 1208.65 L1541.36 1208.65 L1540.77 1208.65 L1540.19 1208.65 L1539.6 1208.65 L1539.01 1208.65 L1538.43 1208.65 L1537.84 1208.65 L1537.25 1208.65 L1536.67 1208.65 L1536.08 1208.65 L1535.49 1208.65 L1534.91 1208.65 L1534.32 1208.65 L1533.73 1208.65 L1533.15 1208.65 L1532.56 1208.65 L1531.98 1208.65 L1531.39 1208.65 L1530.8 1208.65 L1530.22 1208.65 L1529.63 1208.65 L1529.04 1208.65 L1528.46 1208.65 L1527.87 1208.65 L1527.28 1208.65 L1526.7 1208.65 L1526.11 1208.65 L1525.52 1208.65 L1524.94 1208.65 L1524.35 1208.65 L1523.77 1208.65 L1523.18 1208.65 L1522.59 1208.65 L1522.01 1208.65 L1521.42 1208.65 L1520.83 1208.65 L1520.25 1208.65 L1519.66 1208.65 L1519.07 1208.65 L1518.49 1208.65 L1517.9 1208.65 L1517.32 1208.65 L1516.73 1208.65 L1516.14 1208.65 L1515.56 1208.65 L1514.97 1208.65 L1514.38 1208.65 L1513.8 1208.65 L1513.21 1208.65 L1512.62 1208.65 L1512.04 1208.65 L1511.45 1208.65 L1510.86 1208.65 L1510.28 1208.65 L1509.69 1208.65 L1509.11 1208.65 L1508.52 1208.65 L1507.93 1208.65 L1507.35 1208.65 L1506.76 1208.65 L1506.17 1208.65 L1505.59 1208.65 L1505 1208.65 L1504.41 1208.65 L1503.83 1208.65 L1503.24 1208.65 L1502.65 1208.65 L1502.07 1208.65 L1501.48 1208.65 L1500.9 1208.65 L1500.31 1208.65 L1499.72 1208.65 L1499.14 1208.65 L1498.55 1208.65 L1497.96 1208.65 L1497.38 1208.65 L1496.79 1208.65 L1496.2 1208.65 L1495.62 1208.65 L1495.03 1208.65 L1494.45 1208.65 L1493.86 1208.65 L1493.27 1208.65 L1492.69 1208.65 L1492.1 1208.65 L1491.51 1208.65 L1490.93 1208.65 L1490.34 1208.65 L1489.75 1208.65 L1489.17 1208.65 L1488.58 1208.65 L1487.99 1208.65 L1487.41 1208.65 L1486.82 1208.65 L1486.24 1208.65 L1485.65 1208.65 L1485.06 1208.65 L1484.48 1208.65 L1483.89 1208.65 L1483.3 1208.65 L1482.72 1208.65 L1482.13 1208.65 L1481.54 1208.65 L1480.96 1208.65 L1480.37 1208.65 L1479.78 1208.65 L1479.2 1208.65 L1478.61 1208.65 L1478.03 1208.65 L1477.44 1208.65 L1476.85 1208.65 L1476.27 1208.65 L1475.68 1208.65 L1475.09 1208.65 L1474.51 1208.65 L1473.92 1208.65 L1473.33 1208.65 L1472.75 1208.65 L1472.16 1208.65 L1471.57 1208.65 L1470.99 1208.65 L1470.4 1208.65 L1469.82 1208.65 L1469.23 1208.65 L1468.64 1208.65 L1468.06 1208.65 L1467.47 1208.65 L1466.88 1208.65 L1466.3 1208.65 L1465.71 1208.65 L1465.12 1208.65 L1464.54 1208.65 L1463.95 1208.65 L1463.37 1208.65 L1462.78 1208.65 L1462.19 1208.65 L1461.61 1208.65 L1461.02 1208.65 L1460.43 1208.65 L1459.85 1208.65 L1459.26 1208.65 L1458.67 1208.65 L1458.09 1208.65 L1457.5 1208.65 L1456.91 1208.65 L1456.33 1208.65 L1455.74 1208.65 L1455.16 1208.65 L1454.57 1208.65 L1453.98 1208.65 L1453.4 1208.65 L1452.81 1208.65 L1452.22 1208.65 L1451.64 1208.65 L1451.05 1208.65 L1450.46 1208.65 L1449.88 1208.65 L1449.29 1208.65 L1448.7 1208.65 L1448.12 1208.65 L1447.53 1208.65 L1446.95 1208.65 L1446.36 1208.65 L1445.77 1208.65 L1445.19 1208.65 L1444.6 1208.65 L1444.01 1208.65 L1443.43 1208.65 L1442.84 1208.65 L1442.25 1208.65 L1441.67 1208.65 L1441.08 1208.65 L1440.5 1208.65 L1439.91 1208.65 L1439.32 1208.65 L1438.74 1208.65 L1438.15 1208.65 L1437.56 1208.65 L1436.98 1208.65 L1436.39 1208.65 L1435.8 1208.65 L1435.22 1208.65 L1434.63 1208.65 L1434.04 1208.65 L1433.46 1208.65 L1432.87 1208.65 L1432.29 1208.65 L1431.7 1208.65 L1431.11 1208.65 L1430.53 1208.65 L1429.94 1208.65 L1429.35 1208.65 L1428.77 1208.65 L1428.18 1208.65 L1427.59 1208.65 L1427.01 1208.65 L1426.42 1208.65 L1425.83 1208.65 L1425.25 1208.65 L1424.66 1208.65 L1424.08 1208.65 L1423.49 1208.65 L1422.9 1208.65 L1422.32 1208.65 L1421.73 1208.65 L1421.14 1208.65 L1420.56 1208.65 L1419.97 1208.65 L1419.38 1208.65 L1418.8 1208.65 L1418.21 1208.65 L1417.63 1208.65 L1417.04 1208.65 L1416.45 1208.65 L1415.87 1208.65 L1415.28 1208.65 L1414.69 1208.65 L1414.11 1208.65 L1413.52 1208.65 L1412.93 1208.65 L1412.35 1208.65 L1411.76 1208.65 L1411.17 1208.65 L1410.59 1208.65 L1410 1208.65 L1409.42 1208.65 L1408.83 1208.65 L1408.24 1208.65 L1407.66 1208.65 L1407.07 1208.65 L1406.48 1208.65 L1405.9 1208.65 L1405.31 1208.65 L1404.72 1208.65 L1404.14 1208.65 L1403.55 1208.65 L1402.96 1208.65 L1402.38 1208.65 L1401.79 1208.65 L1401.21 1208.65 L1400.62 1208.65 L1400.03 1208.65 L1399.45 1208.65 L1398.86 1208.65 L1398.27 1208.65 L1397.69 1208.65 L1397.1 1208.65 L1396.51 1208.65 L1395.93 1208.65 L1395.34 1208.65 L1394.75 1208.65 L1394.17 1208.65 L1393.58 1208.65 L1393 1208.65 L1392.41 1208.65 L1391.82 1208.65 L1391.24 1208.65 L1390.65 1208.65 L1390.06 1208.65 L1389.48 1208.65 L1388.89 1208.65 L1388.3 1208.65 L1387.72 1208.65 L1387.13 1208.65 L1386.55 1208.65 L1385.96 1208.65 L1385.37 1208.65 L1384.79 1208.65 L1384.2 1208.65 L1383.61 1208.65 L1383.03 1208.65 L1382.44 1208.65 L1381.85 1208.65 L1381.27 1208.65 L1380.68 1208.65 L1380.09 1208.65 L1379.51 1208.65 L1378.92 1208.65 L1378.34 1208.65 L1377.75 1208.65 L1377.16 1208.65 L1376.58 1208.65 L1375.99 1208.65 L1375.4 1208.65 L1374.82 1208.65 L1374.23 1208.65 L1373.64 1208.65 L1373.06 1208.65 L1372.47 1208.65 L1371.88 1208.65 L1371.3 1208.65 L1370.71 1208.65 L1370.13 1208.65 L1369.54 1208.65 L1368.95 1208.65 L1368.37 1208.65 L1367.78 1208.65 L1367.19 1208.65 L1366.61 1208.65 L1366.02 1208.65 L1365.43 1208.65 L1364.85 1208.65 L1364.26 1208.65 L1363.68 1208.65 L1363.09 1208.65 L1362.5 1208.65 L1361.92 1208.65 L1361.33 1208.65 L1360.74 1208.65 L1360.16 1208.65 L1359.57 1208.65 L1358.98 1208.65 L1358.4 1208.65 L1357.81 1208.65 L1357.22 1208.65 L1356.64 1208.65 L1356.05 1208.65 L1355.47 1208.65 L1354.88 1208.65 L1354.29 1208.65 L1353.71 1208.65 L1353.12 1208.65 L1352.53 1208.65 L1351.95 1208.65 L1351.36 1208.65 L1350.77 1208.65 L1350.19 1208.65 L1349.6 1208.65 L1349.01 1208.65 L1348.43 1208.65 L1347.84 1208.65 L1347.26 1208.65 L1346.67 1208.65 L1346.08 1208.65 L1345.5 1208.65 L1344.91 1208.65 L1344.32 1208.65 L1343.74 1208.65 L1343.15 1208.65 L1342.56 1208.65 L1341.98 1208.65 L1341.39 1208.65 L1340.8 1208.65 L1340.22 1208.65 L1339.63 1208.65 L1339.05 1208.65 L1338.46 1208.65 L1337.87 1208.65 L1337.29 1208.65 L1336.7 1208.65 L1336.11 1208.65 L1335.53 1208.65 L1334.94 1208.65 L1334.35 1208.65 L1333.77 1208.65 L1333.18 1208.65 L1332.6 1208.65 L1332.01 1208.65 L1331.42 1208.65 L1330.84 1208.65 L1330.25 1208.65 L1329.66 1208.65 L1329.08 1208.65 L1328.49 1208.65 L1327.9 1208.65 L1327.32 1208.65 L1326.73 1208.65 L1326.14 1208.65 L1325.56 1208.65 L1324.97 1208.65 L1324.39 1208.65 L1323.8 1208.65 L1323.21 1208.65 L1322.63 1208.65 L1322.04 1208.65 L1321.45 1208.65 L1320.87 1208.65 L1320.28 1208.65 L1319.69 1208.65 L1319.11 1208.65 L1318.52 1208.65 L1317.93 1208.65 L1317.35 1208.65 L1316.76 1208.65 L1316.18 1208.65 L1315.59 1208.65 L1315 1208.65 L1314.42 1208.65 L1313.83 1208.65 L1313.24 1208.65 L1312.66 1208.65 L1312.07 1208.65 L1311.48 1208.65 L1310.9 1208.65 L1310.31 1208.65 L1309.73 1208.65 L1309.14 1208.65 L1308.55 1208.65 L1307.97 1208.65 L1307.38 1208.65 L1306.79 1208.65 L1306.21 1208.65 L1305.62 1208.65 L1305.03 1208.65 L1304.45 1208.65 L1303.86 1208.65 L1303.27 1208.65 L1302.69 1208.65 L1302.1 1208.65 L1301.52 1208.65 L1300.93 1208.65 L1300.34 1208.65 L1299.76 1208.65 L1299.17 1208.65 L1298.58 1208.65 L1298 1208.65 L1297.41 1208.65 L1296.82 1208.65 L1296.24 1208.65 L1295.65 1208.65 L1295.06 1208.65 L1294.48 1208.65 L1293.89 1208.65 L1293.31 1208.65 L1292.72 1208.65 L1292.13 1208.65 L1291.55 1208.65 L1290.96 1208.65 L1290.37 1208.65 L1289.79 1208.65 L1289.2 1208.65 L1288.61 1208.65 L1288.03 1208.65 L1287.44 1208.65 L1286.86 1208.65 L1286.27 1208.65 L1285.68 1208.65 L1285.1 1208.65 L1284.51 1208.65 L1283.92 1208.65 L1283.34 1208.65 L1282.75 1208.65 L1282.16 1208.65 L1281.58 1208.65 L1280.99 1208.65 L1280.4 1208.65 L1279.82 1208.65 L1279.23 1208.65 L1278.65 1208.65 L1278.06 1208.65 L1277.47 1208.65 L1276.89 1208.65 L1276.3 1208.65 L1275.71 1208.65 L1275.13 1208.65 L1274.54 1208.65 L1273.95 1208.65 L1273.37 1208.65 L1272.78 1208.65 L1272.19 1208.65 L1271.61 1208.65 L1271.02 1208.65 L1270.44 1208.65 L1269.85 1208.65 L1269.26 1208.65 L1268.68 1208.65 L1268.09 1208.65 L1267.5 1208.65 L1266.92 1208.65 L1266.33 1208.65 L1265.74 1208.65 L1265.16 1208.65 L1264.57 1208.65 L1263.98 1208.65 L1263.4 1208.65 L1262.81 1208.65 L1262.23 1208.65 L1261.64 1208.65 L1261.05 1208.65 L1260.47 1208.65 L1259.88 1208.65 L1259.29 1208.65 L1258.71 1208.65 L1258.12 1208.65 L1257.53 1208.65 L1256.95 1208.65 L1256.36 1208.65 L1255.78 1208.65 L1255.19 1208.65 L1254.6 1208.65 L1254.02 1208.65 L1253.43 1208.65 L1252.84 1208.65 L1252.26 1208.65 L1251.67 1208.65 L1251.08 1208.65 L1250.5 1208.65 L1249.91 1208.65 L1249.32 1208.65 L1248.74 1208.65 L1248.15 1208.65 L1247.57 1208.65 L1246.98 1208.65 L1246.39 1208.65 L1245.81 1208.65 L1245.22 1208.65 L1244.63 1208.65 L1244.05 1208.65 L1243.46 1208.65 L1242.87 1208.65 L1242.29 1208.65 L1241.7 1208.65 L1241.11 1208.65 L1240.53 1208.65 L1239.94 1208.65 L1239.36 1208.65 L1238.77 1208.65 L1238.18 1208.65 L1237.6 1208.65 L1237.01 1208.65 L1236.42 1208.65 L1235.84 1208.65 L1235.25 1208.65 L1234.66 1208.65 L1234.08 1208.65 L1233.49 1208.65 L1232.91 1208.65 L1232.32 1208.65 L1231.73 1208.65 L1231.15 1208.65 L1230.56 1208.65 L1229.97 1208.65 L1229.39 1208.65 L1228.8 1208.65 L1228.21 1208.65 L1227.63 1208.65 L1227.04 1208.65 L1226.45 1208.65 L1225.87 1208.65 L1225.28 1208.65 L1224.7 1208.65 L1224.11 1208.65 L1223.52 1208.65 L1222.94 1208.65 L1222.35 1208.65 L1221.76 1208.65 L1221.18 1208.65 L1220.59 1208.65 L1220 1208.65 L1219.42 1208.65 L1218.83 1208.65 L1218.24 1208.65 L1217.66 1208.65 L1217.07 1208.65 L1216.49 1208.65 L1215.9 1208.65 L1215.31 1208.65 L1214.73 1208.65 L1214.14 1208.65 L1213.55 1208.65 L1212.97 1208.65 L1212.38 1208.65 L1211.79 1208.65 L1211.21 1208.65 L1210.62 1208.65 L1210.03 1208.65 L1209.45 1208.65 L1208.86 1208.65 L1208.28 1208.65 L1207.69 1208.65 L1207.1 1208.65 L1206.52 1208.65 L1205.93 1208.65 L1205.34 1208.65 L1204.76 1208.65 L1204.17 1208.65 L1203.58 1208.65 L1203 1208.65 L1202.41 1208.65 L1201.83 1208.65 L1201.24 1208.65 L1200.65 1208.65 L1200.07 1208.65 L1199.48 1208.65 L1198.89 1208.65 L1198.31 1208.65 L1197.72 1208.65 L1197.13 1208.65 L1196.55 1208.65 L1195.96 1208.65 L1195.37 1208.65 L1194.79 1208.65 L1194.2 1208.65 L1193.62 1208.65 L1193.03 1208.65 L1192.44 1208.65 L1191.86 1208.65 L1191.27 1208.65 L1190.68 1208.65 L1190.1 1208.65 L1189.51 1208.65 L1188.92 1208.65 L1188.34 1208.65 L1187.75 1208.65 L1187.16 1208.65 L1186.58 1208.65 L1185.99 1208.65 L1185.41 1208.65 L1184.82 1208.65 L1184.23 1208.65 L1183.65 1208.65 L1183.06 1208.65 L1182.47 1208.65 L1181.89 1208.65 L1181.3 1208.65 L1180.71 1208.65 L1180.13 1208.65 L1179.54 1208.65 L1178.96 1208.65 L1178.37 1208.65 L1177.78 1208.65 L1177.2 1208.65 L1176.61 1208.65 L1176.02 1208.65 L1175.44 1208.65 L1174.85 1208.65 L1174.26 1208.65 L1173.68 1208.65 L1173.09 1208.65 L1172.5 1208.65 L1171.92 1208.65 L1171.33 1208.65 L1170.75 1208.65 L1170.16 1208.65 L1169.57 1208.65 L1168.99 1208.65 L1168.4 1208.65 L1167.81 1208.65 L1167.23 1208.65 L1166.64 1208.65 L1166.05 1208.65 L1165.47 1208.65 L1164.88 1208.65 L1164.29 1208.65 L1163.71 1208.65 L1163.12 1208.65 L1162.54 1208.65 L1161.95 1208.65 L1161.36 1208.65 L1160.78 1208.65 L1160.19 1208.65 L1159.6 1208.65 L1159.02 1208.65 L1158.43 1208.65 L1157.84 1208.65 L1157.26 1208.65 L1156.67 1208.65 L1156.09 1208.65 L1155.5 1208.65 L1154.91 1208.65 L1154.33 1208.65 L1153.74 1208.65 L1153.15 1208.65 L1152.57 1208.65 L1151.98 1208.65 L1151.39 1208.65 L1150.81 1208.65 L1150.22 1208.65 L1149.63 1208.65 L1149.05 1208.65 L1148.46 1208.65 L1147.88 1208.65 L1147.29 1208.65 L1146.7 1208.65 L1146.12 1208.65 L1145.53 1208.65 L1144.94 1208.65 L1144.36 1208.65 L1143.77 1208.65 L1143.18 1208.65 L1142.6 1208.65 L1142.01 1208.65 L1141.42 1208.65 L1140.84 1208.65 L1140.25 1208.65 L1139.67 1208.65 L1139.08 1208.65 L1138.49 1208.65 L1137.91 1208.65 L1137.32 1208.65 L1136.73 1208.65 L1136.15 1208.65 L1135.56 1208.65 L1134.97 1208.65 L1134.39 1208.65 L1133.8 1208.65 L1133.21 1208.65 L1132.63 1208.65 L1132.04 1208.65 L1131.46 1208.65 L1130.87 1208.65 L1130.28 1208.65 L1129.7 1208.65 L1129.11 1208.65 L1128.52 1208.65 L1127.94 1208.65 L1127.35 1208.65 L1126.76 1208.65 L1126.18 1208.65 L1125.59 1208.65 L1125.01 1208.65 L1124.42 1208.65 L1123.83 1208.65 L1123.25 1208.65 L1122.66 1208.65 L1122.07 1208.65 L1121.49 1208.65 L1120.9 1208.65 L1120.31 1208.65 L1119.73 1208.65 L1119.14 1208.65 L1118.55 1208.65 L1117.97 1208.65 L1117.38 1208.65 L1116.8 1208.65 L1116.21 1208.65 L1115.62 1208.65 L1115.04 1208.65 L1114.45 1208.65 L1113.86 1208.65 L1113.28 1208.65 L1112.69 1208.65 L1112.1 1208.65 L1111.52 1208.65 L1110.93 1208.65 L1110.34 1208.65 L1109.76 1208.65 L1109.17 1208.65 L1108.59 1208.65 L1108 1208.65 L1107.41 1208.65 L1106.83 1208.65 L1106.24 1208.65 L1105.65 1208.65 L1105.07 1208.65 L1104.48 1208.65 L1103.89 1208.65 L1103.31 1208.65 L1102.72 1208.65 L1102.14 1208.65 L1101.55 1208.65 L1100.96 1208.65 L1100.38 1208.65 L1099.79 1208.65 L1099.2 1208.65 L1098.62 1208.65 L1098.03 1208.65 L1097.44 1208.65 L1096.86 1208.65 L1096.27 1208.65 L1095.68 1208.65 L1095.1 1208.65 L1094.51 1208.65 L1093.93 1208.65 L1093.34 1208.65 L1092.75 1208.65 L1092.17 1208.65 L1091.58 1208.65 L1090.99 1208.65 L1090.41 1208.65 L1089.82 1208.65 L1089.23 1208.65 L1088.65 1208.65 L1088.06 1208.65 L1087.47 1208.65 L1086.89 1208.65 L1086.3 1208.65 L1085.72 1208.65 L1085.13 1208.65 L1084.54 1208.65 L1083.96 1208.65 L1083.37 1208.65 L1082.78 1208.65 L1082.2 1208.65 L1081.61 1208.65 L1081.02 1208.65 L1080.44 1208.65 L1079.85 1208.65 L1079.26 1208.65 L1078.68 1208.65 L1078.09 1208.65 L1077.51 1208.65 L1076.92 1208.65 L1076.33 1208.65 L1075.75 1208.65 L1075.16 1208.65 L1074.57 1208.65 L1073.99 1208.65 L1073.4 1208.65 L1072.81 1208.65 L1072.23 1208.65 L1071.64 1208.65 L1071.06 1208.65 L1070.47 1208.65 L1069.88 1208.65 L1069.3 1208.65 L1068.71 1208.65 L1068.12 1208.65 L1067.54 1208.65 L1066.95 1208.65 L1066.36 1208.65 L1065.78 1208.65 L1065.19 1208.65 L1064.6 1208.65 L1064.02 1208.65 L1063.43 1208.65 L1062.85 1208.65 L1062.26 1208.65 L1061.67 1208.65 L1061.09 1208.65 L1060.5 1208.65 L1059.91 1208.65 L1059.33 1208.65 L1058.74 1208.65 L1058.15 1208.65 L1057.57 1208.65 L1056.98 1208.65 L1056.39 1208.65 L1055.81 1208.65 L1055.22 1208.65 L1054.64 1208.65 L1054.05 1208.65 L1053.46 1208.65 L1052.88 1208.65 L1052.29 1208.65 L1051.7 1208.65 L1051.12 1208.65 L1050.53 1208.65 L1049.94 1208.65 L1049.36 1208.65 L1048.77 1208.65 L1048.19 1208.65 L1047.6 1208.65 L1047.01 1208.65 L1046.43 1208.65 L1045.84 1208.65 L1045.25 1208.65 L1044.67 1208.65 L1044.08 1208.65 L1043.49 1208.65 L1042.91 1208.65 L1042.32 1208.65 L1041.73 1208.65 L1041.15 1208.65 L1040.56 1208.65 L1039.98 1208.65 L1039.39 1208.65 L1038.8 1208.65 L1038.22 1208.65 L1037.63 1208.65 L1037.04 1208.65 L1036.46 1208.65 L1035.87 1208.65 L1035.28 1208.65 L1034.7 1208.65 L1034.11 1208.65 L1033.52 1208.65 L1032.94 1208.65 L1032.35 1208.65 L1031.77 1208.65 L1031.18 1208.65 L1030.59 1208.65 L1030.01 1208.65 L1029.42 1208.65 L1028.83 1208.65 L1028.25 1208.65 L1027.66 1208.65 L1027.07 1208.65 L1026.49 1208.65 L1025.9 1208.65 L1025.32 1208.65 L1024.73 1208.65 L1024.14 1208.65 L1023.56 1208.65 L1022.97 1208.65 L1022.38 1208.65 L1021.8 1208.65 L1021.21 1208.65 L1020.62 1208.65 L1020.04 1208.65 L1019.45 1208.65 L1018.86 1208.65 L1018.28 1208.65 L1017.69 1208.65 L1017.11 1208.65 L1016.52 1208.65 L1015.93 1208.65 L1015.35 1208.65 L1014.76 1208.65 L1014.17 1208.65 L1013.59 1208.65 L1013 1208.65 L1012.41 1208.65 L1011.83 1208.65 L1011.24 1208.65 L1010.65 1208.65 L1010.07 1208.65 L1009.48 1208.65 L1008.9 1208.65 L1008.31 1208.65 L1007.72 1208.65 L1007.14 1208.65 L1006.55 1208.65 L1005.96 1208.65 L1005.38 1208.65 L1004.79 1208.65 L1004.2 1208.65 L1003.62 1208.65 L1003.03 1208.65 L1002.44 1208.65 L1001.86 1208.65 L1001.27 1208.65 L1000.69 1208.65 L1000.1 1208.65 L999.513 1208.65 L998.926 1208.65 L998.34 1208.65 L997.754 1208.65 L997.167 1208.65 L996.581 1208.65 L995.994 1208.65 L995.408 1208.65 L994.822 1208.65 L994.235 1208.65 L993.649 1208.65 L993.062 1208.65 L992.476 1208.65 L991.889 1208.65 L991.303 1208.65 L990.717 1208.65 L990.13 1208.65 L989.544 1208.65 L988.957 1208.65 L988.371 1208.65 L987.785 1208.65 L987.198 1208.65 L986.612 1208.65 L986.025 1208.65  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.77 986.612,1208.77 987.198,1208.77 987.785,1208.77 988.371,1208.77 988.957,1208.77 989.544,1208.77 990.13,1208.77 990.717,1208.77 991.303,1208.77 991.889,1208.77 992.476,1208.77 993.062,1208.77 993.649,1208.77 994.235,1208.77 994.822,1208.77 995.408,1208.77 995.994,1208.77 996.581,1208.77 997.167,1208.77 997.754,1208.77 998.34,1208.77 998.926,1208.77 999.513,1208.77 1000.1,1208.77 1000.69,1208.77 1001.27,1208.77 1001.86,1208.77 1002.44,1208.77 1003.03,1208.77 1003.62,1208.77 1004.2,1208.77 1004.79,1208.77 1005.38,1208.77 1005.96,1208.77 1006.55,1208.77 1007.14,1208.77 1007.72,1208.77 1008.31,1208.77 1008.9,1208.77 1009.48,1208.77 1010.07,1208.77 1010.65,1208.77 1011.24,1208.77 1011.83,1208.77 1012.41,1208.77 1013,1208.77 1013.59,1208.77 1014.17,1208.77 1014.76,1208.77 1015.35,1208.77 1015.93,1208.77 1016.52,1208.77 1017.11,1208.77 1017.69,1208.77 1018.28,1208.77 1018.86,1208.77 1019.45,1208.77 1020.04,1208.77 1020.62,1208.77 1021.21,1208.77 1021.8,1208.77 1022.38,1208.77 1022.97,1208.77 1023.56,1208.77 1024.14,1208.77 1024.73,1208.77 1025.32,1208.77 1025.9,1208.77 1026.49,1208.77 1027.07,1208.77 1027.66,1208.77 1028.25,1208.77 1028.83,1208.77 1029.42,1208.77 1030.01,1208.77 1030.59,1208.77 1031.18,1208.77 1031.77,1208.77 1032.35,1208.77 1032.94,1208.77 1033.52,1208.77 1034.11,1208.77 1034.7,1208.77 1035.28,1208.77 1035.87,1208.77 1036.46,1208.77 1037.04,1208.77 1037.63,1208.77 1038.22,1208.77 1038.8,1208.77 1039.39,1208.77 1039.98,1208.77 1040.56,1208.77 1041.15,1208.77 1041.73,1208.77 1042.32,1208.77 1042.91,1208.77 1043.49,1208.77 1044.08,1208.77 1044.67,1208.77 1045.25,1208.77 1045.84,1208.77 1046.43,1208.77 1047.01,1208.77 1047.6,1208.77 1048.19,1208.77 1048.77,1208.77 1049.36,1208.77 1049.94,1208.77 1050.53,1208.77 1051.12,1208.77 1051.7,1208.77 1052.29,1208.77 1052.88,1208.77 1053.46,1208.77 1054.05,1208.77 1054.64,1208.77 1055.22,1208.77 1055.81,1208.77 1056.39,1208.77 1056.98,1208.77 1057.57,1208.77 1058.15,1208.77 1058.74,1208.77 1059.33,1208.77 1059.91,1208.77 1060.5,1208.77 1061.09,1208.77 1061.67,1208.77 1062.26,1208.77 1062.85,1208.77 1063.43,1208.77 1064.02,1208.77 1064.6,1208.77 1065.19,1208.77 1065.78,1208.77 1066.36,1208.77 1066.95,1208.77 1067.54,1208.77 1068.12,1208.77 1068.71,1208.77 1069.3,1208.77 1069.88,1208.77 1070.47,1208.77 1071.06,1208.77 1071.64,1208.77 1072.23,1208.77 1072.81,1208.77 1073.4,1208.77 1073.99,1208.77 1074.57,1208.77 1075.16,1208.77 1075.75,1208.77 1076.33,1208.77 1076.92,1208.77 1077.51,1208.77 1078.09,1208.77 1078.68,1208.77 1079.26,1208.77 1079.85,1208.77 1080.44,1208.77 1081.02,1208.77 1081.61,1208.77 1082.2,1208.77 1082.78,1208.77 1083.37,1208.77 1083.96,1208.77 1084.54,1208.77 1085.13,1208.77 1085.72,1208.77 1086.3,1208.77 1086.89,1208.77 1087.47,1208.77 1088.06,1208.77 1088.65,1208.77 1089.23,1208.77 1089.82,1208.77 1090.41,1208.77 1090.99,1208.77 1091.58,1208.77 1092.17,1208.77 1092.75,1208.77 1093.34,1208.77 1093.93,1208.77 1094.51,1208.77 1095.1,1208.77 1095.68,1208.77 1096.27,1208.77 1096.86,1208.77 1097.44,1208.77 1098.03,1208.77 1098.62,1208.77 1099.2,1208.77 1099.79,1208.77 1100.38,1208.77 1100.96,1208.77 1101.55,1208.77 1102.14,1208.77 1102.72,1208.77 1103.31,1208.77 1103.89,1208.77 1104.48,1208.77 1105.07,1208.77 1105.65,1208.77 1106.24,1208.77 1106.83,1208.77 1107.41,1208.77 1108,1208.77 1108.59,1208.77 1109.17,1208.77 1109.76,1208.77 1110.34,1208.77 1110.93,1208.77 1111.52,1208.77 1112.1,1208.77 1112.69,1208.77 1113.28,1208.77 1113.86,1208.77 1114.45,1208.77 1115.04,1208.77 1115.62,1208.77 1116.21,1208.77 1116.8,1208.77 1117.38,1208.77 1117.97,1208.77 1118.55,1208.77 1119.14,1208.77 1119.73,1208.77 1120.31,1208.77 1120.9,1208.77 1121.49,1208.77 1122.07,1208.77 1122.66,1208.77 1123.25,1208.77 1123.83,1208.77 1124.42,1208.77 1125.01,1208.77 1125.59,1208.77 1126.18,1208.77 1126.76,1208.77 1127.35,1208.77 1127.94,1208.77 1128.52,1208.77 1129.11,1208.77 1129.7,1208.77 1130.28,1208.77 1130.87,1208.77 1131.46,1208.77 1132.04,1208.77 1132.63,1208.77 1133.21,1208.77 1133.8,1208.77 1134.39,1208.77 1134.97,1208.77 1135.56,1208.77 1136.15,1208.77 1136.73,1208.77 1137.32,1208.77 1137.91,1208.77 1138.49,1208.77 1139.08,1208.77 1139.67,1208.77 1140.25,1208.77 1140.84,1208.77 1141.42,1208.77 1142.01,1208.77 1142.6,1208.77 1143.18,1208.77 1143.77,1208.77 1144.36,1208.77 1144.94,1208.77 1145.53,1208.77 1146.12,1208.77 1146.7,1208.77 1147.29,1208.77 1147.88,1208.77 1148.46,1208.77 1149.05,1208.77 1149.63,1208.77 1150.22,1208.77 1150.81,1208.77 1151.39,1208.77 1151.98,1208.77 1152.57,1208.77 1153.15,1208.77 1153.74,1208.77 1154.33,1208.77 1154.91,1208.77 1155.5,1208.77 1156.09,1208.77 1156.67,1208.77 1157.26,1208.77 1157.84,1208.77 1158.43,1208.77 1159.02,1208.77 1159.6,1208.77 1160.19,1208.77 1160.78,1208.77 1161.36,1208.77 1161.95,1208.77 1162.54,1208.77 1163.12,1208.77 1163.71,1208.77 1164.29,1208.77 1164.88,1208.77 1165.47,1208.77 1166.05,1208.77 1166.64,1208.77 1167.23,1208.77 1167.81,1208.77 1168.4,1208.77 1168.99,1208.77 1169.57,1208.77 1170.16,1208.77 1170.75,1208.77 1171.33,1208.77 1171.92,1208.77 1172.5,1208.77 1173.09,1208.77 1173.68,1208.77 1174.26,1208.77 1174.85,1208.77 1175.44,1208.77 1176.02,1208.77 1176.61,1208.77 1177.2,1208.77 1177.78,1208.77 1178.37,1208.77 1178.96,1208.77 1179.54,1208.77 1180.13,1208.77 1180.71,1208.77 1181.3,1208.77 1181.89,1208.77 1182.47,1208.77 1183.06,1208.77 1183.65,1208.77 1184.23,1208.77 1184.82,1208.77 1185.41,1208.77 1185.99,1208.77 1186.58,1208.77 1187.16,1208.77 1187.75,1208.77 1188.34,1208.77 1188.92,1208.77 1189.51,1208.77 1190.1,1208.77 1190.68,1208.77 1191.27,1208.77 1191.86,1208.77 1192.44,1208.77 1193.03,1208.77 1193.62,1208.77 1194.2,1208.77 1194.79,1208.77 1195.37,1208.77 1195.96,1208.77 1196.55,1208.77 1197.13,1208.77 1197.72,1208.77 1198.31,1208.77 1198.89,1208.77 1199.48,1208.77 1200.07,1208.77 1200.65,1208.77 1201.24,1208.77 1201.83,1208.77 1202.41,1208.77 1203,1208.77 1203.58,1208.77 1204.17,1208.77 1204.76,1208.77 1205.34,1208.77 1205.93,1208.77 1206.52,1208.77 1207.1,1208.77 1207.69,1208.77 1208.28,1208.77 1208.86,1208.77 1209.45,1208.77 1210.03,1208.77 1210.62,1208.77 1211.21,1208.77 1211.79,1208.77 1212.38,1208.77 1212.97,1208.77 1213.55,1208.77 1214.14,1208.77 1214.73,1208.77 1215.31,1208.77 1215.9,1208.77 1216.49,1208.77 1217.07,1208.77 1217.66,1208.77 1218.24,1208.77 1218.83,1208.77 1219.42,1208.77 1220,1208.77 1220.59,1208.77 1221.18,1208.77 1221.76,1208.77 1222.35,1208.77 1222.94,1208.77 1223.52,1208.77 1224.11,1208.77 1224.7,1208.77 1225.28,1208.77 1225.87,1208.77 1226.45,1208.77 1227.04,1208.77 1227.63,1208.77 1228.21,1208.77 1228.8,1208.77 1229.39,1208.77 1229.97,1208.77 1230.56,1208.77 1231.15,1208.77 1231.73,1208.77 1232.32,1208.77 1232.91,1208.77 1233.49,1208.77 1234.08,1208.77 1234.66,1208.77 1235.25,1208.77 1235.84,1208.77 1236.42,1208.77 1237.01,1208.77 1237.6,1208.77 1238.18,1208.77 1238.77,1208.77 1239.36,1208.77 1239.94,1208.77 1240.53,1208.77 1241.11,1208.77 1241.7,1208.77 1242.29,1208.77 1242.87,1208.77 1243.46,1208.77 1244.05,1208.77 1244.63,1208.77 1245.22,1208.77 1245.81,1208.77 1246.39,1208.77 1246.98,1208.77 1247.57,1208.77 1248.15,1208.77 1248.74,1208.77 1249.32,1208.77 1249.91,1208.77 1250.5,1208.77 1251.08,1208.77 1251.67,1208.77 1252.26,1208.77 1252.84,1208.77 1253.43,1208.77 1254.02,1208.77 1254.6,1208.77 1255.19,1208.77 1255.78,1208.77 1256.36,1208.77 1256.95,1208.77 1257.53,1208.77 1258.12,1208.77 1258.71,1208.77 1259.29,1208.77 1259.88,1208.77 1260.47,1208.77 1261.05,1208.77 1261.64,1208.77 1262.23,1208.77 1262.81,1208.77 1263.4,1208.77 1263.98,1208.77 1264.57,1208.77 1265.16,1208.77 1265.74,1208.77 1266.33,1208.77 1266.92,1208.77 1267.5,1208.77 1268.09,1208.77 1268.68,1208.77 1269.26,1208.77 1269.85,1208.77 1270.44,1208.77 1271.02,1208.77 1271.61,1208.77 1272.19,1208.77 1272.78,1208.77 1273.37,1208.77 1273.95,1208.77 1274.54,1208.77 1275.13,1208.77 1275.71,1208.77 1276.3,1208.77 1276.89,1208.77 1277.47,1208.77 1278.06,1208.77 1278.65,1208.77 1279.23,1208.77 1279.82,1208.77 1280.4,1208.77 1280.99,1208.77 1281.58,1208.77 1282.16,1208.77 1282.75,1208.77 1283.34,1208.77 1283.92,1208.77 1284.51,1208.77 1285.1,1208.77 1285.68,1208.77 1286.27,1208.77 1286.86,1208.77 1287.44,1208.77 1288.03,1208.77 1288.61,1208.77 1289.2,1208.77 1289.79,1208.77 1290.37,1208.77 1290.96,1208.77 1291.55,1208.77 1292.13,1208.77 1292.72,1208.77 1293.31,1208.77 1293.89,1208.77 1294.48,1208.77 1295.06,1208.77 1295.65,1208.77 1296.24,1208.77 1296.82,1208.77 1297.41,1208.77 1298,1208.77 1298.58,1208.77 1299.17,1208.77 1299.76,1208.77 1300.34,1208.77 1300.93,1208.77 1301.52,1208.77 1302.1,1208.77 1302.69,1208.77 1303.27,1208.77 1303.86,1208.77 1304.45,1208.77 1305.03,1208.77 1305.62,1208.77 1306.21,1208.77 1306.79,1208.77 1307.38,1208.77 1307.97,1208.77 1308.55,1208.77 1309.14,1208.77 1309.73,1208.77 1310.31,1208.77 1310.9,1208.77 1311.48,1208.77 1312.07,1208.77 1312.66,1208.77 1313.24,1208.77 1313.83,1208.77 1314.42,1208.77 1315,1208.77 1315.59,1208.77 1316.18,1208.77 1316.76,1208.77 1317.35,1208.77 1317.93,1208.77 1318.52,1208.77 1319.11,1208.77 1319.69,1208.77 1320.28,1208.77 1320.87,1208.77 1321.45,1208.77 1322.04,1208.77 1322.63,1208.77 1323.21,1208.77 1323.8,1208.77 1324.39,1208.77 1324.97,1208.77 1325.56,1208.77 1326.14,1208.77 1326.73,1208.77 1327.32,1208.77 1327.9,1208.77 1328.49,1208.77 1329.08,1208.77 1329.66,1208.77 1330.25,1208.77 1330.84,1208.77 1331.42,1208.77 1332.01,1208.77 1332.6,1208.77 1333.18,1208.77 1333.77,1208.77 1334.35,1208.77 1334.94,1208.77 1335.53,1208.77 1336.11,1208.77 1336.7,1208.77 1337.29,1208.77 1337.87,1208.77 1338.46,1208.77 1339.05,1208.77 1339.63,1208.77 1340.22,1208.77 1340.8,1208.77 1341.39,1208.77 1341.98,1208.77 1342.56,1208.77 1343.15,1208.77 1343.74,1208.77 1344.32,1208.77 1344.91,1208.77 1345.5,1208.77 1346.08,1208.77 1346.67,1208.77 1347.26,1208.77 1347.84,1208.77 1348.43,1208.77 1349.01,1208.77 1349.6,1208.77 1350.19,1208.77 1350.77,1208.77 1351.36,1208.77 1351.95,1208.77 1352.53,1208.77 1353.12,1208.77 1353.71,1208.77 1354.29,1208.77 1354.88,1208.77 1355.47,1208.77 1356.05,1208.77 1356.64,1208.77 1357.22,1208.77 1357.81,1208.77 1358.4,1208.77 1358.98,1208.77 1359.57,1208.77 1360.16,1208.77 1360.74,1208.77 1361.33,1208.77 1361.92,1208.77 1362.5,1208.77 1363.09,1208.77 1363.68,1208.77 1364.26,1208.77 1364.85,1208.77 1365.43,1208.77 1366.02,1208.77 1366.61,1208.77 1367.19,1208.77 1367.78,1208.77 1368.37,1208.77 1368.95,1208.77 1369.54,1208.77 1370.13,1208.77 1370.71,1208.77 1371.3,1208.77 1371.88,1208.77 1372.47,1208.77 1373.06,1208.77 1373.64,1208.77 1374.23,1208.77 1374.82,1208.77 1375.4,1208.77 1375.99,1208.77 1376.58,1208.77 1377.16,1208.77 1377.75,1208.77 1378.34,1208.77 1378.92,1208.77 1379.51,1208.77 1380.09,1208.77 1380.68,1208.77 1381.27,1208.77 1381.85,1208.77 1382.44,1208.77 1383.03,1208.77 1383.61,1208.77 1384.2,1208.77 1384.79,1208.77 1385.37,1208.77 1385.96,1208.77 1386.55,1208.77 1387.13,1208.77 1387.72,1208.77 1388.3,1208.77 1388.89,1208.77 1389.48,1208.77 1390.06,1208.77 1390.65,1208.77 1391.24,1208.77 1391.82,1208.77 1392.41,1208.77 1393,1208.77 1393.58,1208.77 1394.17,1208.77 1394.75,1208.77 1395.34,1208.77 1395.93,1208.77 1396.51,1208.77 1397.1,1208.77 1397.69,1208.77 1398.27,1208.77 1398.86,1208.77 1399.45,1208.77 1400.03,1208.77 1400.62,1208.77 1401.21,1208.77 1401.79,1208.77 1402.38,1208.77 1402.96,1208.77 1403.55,1208.77 1404.14,1208.77 1404.72,1208.77 1405.31,1208.77 1405.9,1208.77 1406.48,1208.77 1407.07,1208.77 1407.66,1208.77 1408.24,1208.77 1408.83,1208.77 1409.42,1208.77 1410,1208.77 1410.59,1208.77 1411.17,1208.77 1411.76,1208.77 1412.35,1208.77 1412.93,1208.77 1413.52,1208.77 1414.11,1208.77 1414.69,1208.77 1415.28,1208.77 1415.87,1208.77 1416.45,1208.77 1417.04,1208.77 1417.63,1208.77 1418.21,1208.77 1418.8,1208.77 1419.38,1208.77 1419.97,1208.77 1420.56,1208.77 1421.14,1208.77 1421.73,1208.77 1422.32,1208.77 1422.9,1208.77 1423.49,1208.77 1424.08,1208.77 1424.66,1208.77 1425.25,1208.77 1425.83,1208.77 1426.42,1208.77 1427.01,1208.77 1427.59,1208.77 1428.18,1208.77 1428.77,1208.77 1429.35,1208.77 1429.94,1208.77 1430.53,1208.77 1431.11,1208.77 1431.7,1208.77 1432.29,1208.77 1432.87,1208.77 1433.46,1208.77 1434.04,1208.77 1434.63,1208.77 1435.22,1208.77 1435.8,1208.77 1436.39,1208.77 1436.98,1208.77 1437.56,1208.77 1438.15,1208.77 1438.74,1208.77 1439.32,1208.77 1439.91,1208.77 1440.5,1208.77 1441.08,1208.77 1441.67,1208.77 1442.25,1208.77 1442.84,1208.77 1443.43,1208.77 1444.01,1208.77 1444.6,1208.77 1445.19,1208.77 1445.77,1208.77 1446.36,1208.77 1446.95,1208.77 1447.53,1208.77 1448.12,1208.77 1448.7,1208.77 1449.29,1208.77 1449.88,1208.77 1450.46,1208.77 1451.05,1208.77 1451.64,1208.77 1452.22,1208.77 1452.81,1208.77 1453.4,1208.77 1453.98,1208.77 1454.57,1208.77 1455.16,1208.77 1455.74,1208.77 1456.33,1208.77 1456.91,1208.77 1457.5,1208.77 1458.09,1208.77 1458.67,1208.77 1459.26,1208.77 1459.85,1208.77 1460.43,1208.77 1461.02,1208.77 1461.61,1208.77 1462.19,1208.77 1462.78,1208.77 1463.37,1208.77 1463.95,1208.77 1464.54,1208.77 1465.12,1208.77 1465.71,1208.77 1466.3,1208.77 1466.88,1208.77 1467.47,1208.77 1468.06,1208.77 1468.64,1208.77 1469.23,1208.77 1469.82,1208.77 1470.4,1208.77 1470.99,1208.77 1471.57,1208.77 1472.16,1208.77 1472.75,1208.77 1473.33,1208.77 1473.92,1208.77 1474.51,1208.77 1475.09,1208.77 1475.68,1208.77 1476.27,1208.77 1476.85,1208.77 1477.44,1208.77 1478.03,1208.77 1478.61,1208.77 1479.2,1208.77 1479.78,1208.77 1480.37,1208.77 1480.96,1208.77 1481.54,1208.77 1482.13,1208.77 1482.72,1208.77 1483.3,1208.77 1483.89,1208.77 1484.48,1208.77 1485.06,1208.77 1485.65,1208.77 1486.24,1208.77 1486.82,1208.77 1487.41,1208.77 1487.99,1208.77 1488.58,1208.77 1489.17,1208.77 1489.75,1208.77 1490.34,1208.77 1490.93,1208.77 1491.51,1208.77 1492.1,1208.77 1492.69,1208.77 1493.27,1208.77 1493.86,1208.77 1494.45,1208.77 1495.03,1208.77 1495.62,1208.77 1496.2,1208.77 1496.79,1208.77 1497.38,1208.77 1497.96,1208.77 1498.55,1208.77 1499.14,1208.77 1499.72,1208.77 1500.31,1208.77 1500.9,1208.77 1501.48,1208.77 1502.07,1208.77 1502.65,1208.77 1503.24,1208.77 1503.83,1208.77 1504.41,1208.77 1505,1208.77 1505.59,1208.77 1506.17,1208.77 1506.76,1208.77 1507.35,1208.77 1507.93,1208.77 1508.52,1208.77 1509.11,1208.77 1509.69,1208.77 1510.28,1208.77 1510.86,1208.77 1511.45,1208.77 1512.04,1208.77 1512.62,1208.77 1513.21,1208.77 1513.8,1208.77 1514.38,1208.77 1514.97,1208.77 1515.56,1208.77 1516.14,1208.77 1516.73,1208.77 1517.32,1208.77 1517.9,1208.77 1518.49,1208.77 1519.07,1208.77 1519.66,1208.77 1520.25,1208.77 1520.83,1208.77 1521.42,1208.77 1522.01,1208.77 1522.59,1208.77 1523.18,1208.77 1523.77,1208.77 1524.35,1208.77 1524.94,1208.77 1525.52,1208.77 1526.11,1208.77 1526.7,1208.77 1527.28,1208.77 1527.87,1208.77 1528.46,1208.77 1529.04,1208.77 1529.63,1208.77 1530.22,1208.77 1530.8,1208.77 1531.39,1208.77 1531.98,1208.77 1532.56,1208.77 1533.15,1208.77 1533.73,1208.77 1534.32,1208.77 1534.91,1208.77 1535.49,1208.77 1536.08,1208.77 1536.67,1208.77 1537.25,1208.77 1537.84,1208.77 1538.43,1208.77 1539.01,1208.77 1539.6,1208.77 1540.19,1208.77 1540.77,1208.77 1541.36,1208.77 1541.94,1208.77 1542.53,1208.77 1543.12,1208.77 1543.7,1208.77 1544.29,1208.77 1544.88,1208.77 1545.46,1208.77 1546.05,1208.77 1546.64,1208.77 1547.22,1208.77 1547.81,1208.77 1548.4,1208.77 1548.98,1208.77 1549.57,1208.77 1550.15,1208.77 1550.74,1208.77 1551.33,1208.77 1551.91,1208.77 1552.5,1208.77 1553.09,1208.77 1553.67,1208.77 1554.26,1208.77 1554.85,1208.77 1555.43,1208.77 1556.02,1208.77 1556.6,1208.77 1557.19,1208.77 1557.78,1208.77 1558.36,1208.77 1558.95,1208.77 1559.54,1208.77 1560.12,1208.77 1560.71,1208.77 1561.3,1208.77 1561.88,1208.77 1562.47,1208.77 1563.06,1208.77 1563.64,1208.77 1564.23,1208.77 1564.81,1208.77 1565.4,1208.77 1565.99,1208.77 1566.57,1208.77 1567.16,1208.77 1567.75,1208.77 1568.33,1208.77 1568.92,1208.77 1569.51,1208.77 1570.09,1208.77 1570.68,1208.77 1571.27,1208.77 1571.85,1208.77 1572.44,1208.77 1573.02,1208.77 1573.61,1208.77 1574.2,1208.77 1574.78,1208.77 1575.37,1208.77 1575.96,1208.77 1576.54,1208.77 1577.13,1208.77 1577.72,1208.77 1578.3,1208.77 1578.89,1208.77 1579.47,1208.77 1580.06,1208.77 1580.65,1208.77 1581.23,1208.77 1581.82,1208.77 1582.41,1208.77 1582.99,1208.77 1583.58,1208.77 1584.17,1208.77 1584.75,1208.77 1585.34,1208.77 1585.93,1208.77 1586.51,1208.77 1587.1,1208.77 1587.68,1208.77 1588.27,1208.77 1588.86,1208.77 1589.44,1208.77 1590.03,1208.77 1590.62,1208.77 1591.2,1208.77 1591.79,1208.77 1592.38,1208.77 1592.96,1208.77 1593.55,1208.77 1594.14,1208.77 1594.72,1208.77 1595.31,1208.77 1595.89,1208.77 1596.48,1208.77 1597.07,1208.77 1597.65,1208.77 1598.24,1208.77 1598.83,1208.77 1599.41,1208.77 1600,1208.77 1600.59,1208.77 1601.17,1208.77 1601.76,1208.77 1602.34,1208.77 1602.93,1208.77 1603.52,1208.77 1604.1,1208.77 1604.69,1208.77 1605.28,1208.77 1605.86,1208.77 1606.45,1208.77 1607.04,1208.77 1607.62,1208.77 1608.21,1208.77 1608.8,1208.77 1609.38,1208.77 1609.97,1208.77 1610.55,1208.77 1611.14,1208.77 1611.73,1208.77 1612.31,1208.77 1612.9,1208.77 1613.49,1208.77 1614.07,1208.77 1614.66,1208.77 1615.25,1208.77 1615.83,1208.77 1616.42,1208.77 1617.01,1208.77 1617.59,1208.77 1618.18,1208.77 1618.76,1208.77 1619.35,1208.77 1619.94,1208.77 1620.52,1208.77 1621.11,1208.77 1621.7,1208.77 1622.28,1208.77 1622.87,1208.77 1623.46,1208.77 1624.04,1208.77 1624.63,1208.77 1625.22,1208.77 1625.8,1208.77 1626.39,1208.77 1626.97,1208.77 1627.56,1208.77 1628.15,1208.77 1628.73,1208.77 1629.32,1208.77 1629.91,1208.77 1630.49,1208.77 1631.08,1208.77 1631.67,1208.77 1632.25,1208.77 1632.84,1208.77 1633.42,1208.77 1634.01,1208.77 1634.6,1208.77 1635.18,1208.77 1635.77,1208.77 1636.36,1208.77 1636.94,1208.77 1637.53,1208.77 1638.12,1208.77 1638.7,1208.77 1639.29,1208.77 1639.88,1208.77 1640.46,1208.77 1641.05,1208.77 1641.63,1208.77 1642.22,1208.77 1642.81,1208.77 1643.39,1208.77 1643.98,1208.77 1644.57,1208.77 1645.15,1208.77 1645.74,1208.77 1646.33,1208.77 1646.91,1208.77 1647.5,1208.77 1648.09,1208.77 1648.67,1208.77 1649.26,1208.77 1649.84,1208.77 1650.43,1208.77 1651.02,1208.77 1651.6,1208.77 1652.19,1208.77 1652.78,1208.77 1653.36,1208.77 1653.95,1208.77 1654.54,1208.77 1655.12,1208.77 1655.71,1208.77 1656.29,1208.77 1656.88,1208.77 1657.47,1208.77 1658.05,1208.77 1658.64,1208.77 1659.23,1208.77 1659.81,1208.77 1660.4,1208.77 1660.99,1208.77 1661.57,1208.77 1662.16,1208.77 1662.75,1208.77 1663.33,1208.77 1663.92,1208.77 1664.5,1208.77 1665.09,1208.77 1665.68,1208.77 1666.26,1208.77 1666.85,1208.77 1667.44,1208.77 1668.02,1208.77 1668.61,1208.77 1669.2,1208.77 1669.78,1208.77 1670.37,1208.77 1670.96,1208.77 1671.54,1208.77 1672.13,1208.77 1672.71,1208.77 1673.3,1208.77 1673.89,1208.77 1674.47,1208.77 1675.06,1208.77 1675.65,1208.77 1676.23,1208.77 1676.82,1208.77 1677.41,1208.77 1677.99,1208.77 1678.58,1208.77 1679.17,1208.77 1679.75,1208.77 1680.34,1208.77 1680.92,1208.77 1681.51,1208.77 1682.1,1208.77 1682.68,1208.77 1683.27,1208.77 1683.86,1208.77 1684.44,1208.77 1685.03,1208.77 1685.62,1208.77 1686.2,1208.77 1686.79,1208.77 1687.37,1208.77 1687.96,1208.77 1688.55,1208.77 1689.13,1208.77 1689.72,1208.77 1690.31,1208.77 1690.89,1208.77 1691.48,1208.77 1692.07,1208.77 1692.65,1208.77 1693.24,1208.77 1693.83,1208.77 1694.41,1208.77 1695,1208.77 1695.58,1208.77 1696.17,1208.77 1696.76,1208.77 1697.34,1208.77 1697.93,1208.77 1698.52,1208.77 1699.1,1208.77 1699.69,1208.77 1700.28,1208.77 1700.86,1208.77 1701.45,1208.77 1702.04,1208.77 1702.62,1208.77 1703.21,1208.77 1703.79,1208.77 1704.38,1208.77 1704.97,1208.77 1705.55,1208.77 1706.14,1208.77 1706.73,1208.77 1707.31,1208.77 1707.9,1208.77 1708.49,1208.77 1709.07,1208.77 1709.66,1208.77 1710.24,1208.77 1710.83,1208.77 1711.42,1208.77 1712,1208.77 1712.59,1208.77 1713.18,1208.77 1713.76,1208.77 1714.35,1208.77 1714.94,1208.77 1715.52,1208.77 1716.11,1208.77 1716.7,1208.77 1717.28,1208.77 1717.87,1208.77 1718.45,1208.77 1719.04,1208.77 1719.63,1208.77 1720.21,1208.77 1720.8,1208.77 1721.39,1208.77 1721.97,1208.77 1722.56,1208.77 1723.15,1208.77 1723.73,1208.77 1724.32,1208.77 1724.91,1208.77 1725.49,1208.77 1726.08,1208.77 1726.66,1208.77 1727.25,1208.77 1727.84,1208.77 1728.42,1208.77 1729.01,1208.77 1729.6,1208.77 1730.18,1208.77 1730.77,1208.77 1731.36,1208.77 1731.94,1208.77 1732.53,1208.77 1733.11,1208.77 1733.7,1208.77 1734.29,1208.77 1734.87,1208.77 1735.46,1208.77 1736.05,1208.77 1736.63,1208.77 1737.22,1208.77 1737.81,1208.77 1738.39,1208.77 1738.98,1208.77 1739.57,1208.77 1740.15,1208.77 1740.74,1208.77 1741.32,1208.77 1741.91,1208.77 1742.5,1208.77 1743.08,1208.77 1743.67,1208.77 1744.26,1208.77 1744.84,1208.77 1745.43,1208.77 1746.02,1208.77 1746.6,1208.77 1747.19,1208.77 1747.78,1208.77 1748.36,1208.77 1748.95,1208.77 1749.53,1208.77 1750.12,1208.77 1750.71,1208.77 1751.29,1208.77 1751.88,1208.77 1752.47,1208.77 1753.05,1208.77 1753.64,1208.77 1754.23,1208.77 1754.81,1208.77 1755.4,1208.77 1755.99,1208.77 1756.57,1208.77 1757.16,1208.77 1757.74,1208.77 1758.33,1208.77 1758.92,1208.77 1759.5,1208.77 1760.09,1208.77 1760.68,1208.77 1761.26,1208.77 1761.85,1208.77 1762.44,1208.77 1763.02,1208.77 1763.61,1208.77 1764.19,1208.77 1764.78,1208.77 1765.37,1208.77 1765.95,1208.77 1766.54,1208.77 1767.13,1208.77 1767.71,1208.77 1768.3,1208.77 1768.89,1208.77 1769.47,1208.77 1770.06,1208.77 1770.65,1208.77 1771.23,1208.77 1771.82,1208.77 1772.4,1208.77 1772.99,1208.77 1773.58,1208.77 1774.16,1208.77 1774.75,1208.77 1775.34,1208.77 1775.92,1208.77 1776.51,1208.77 1777.1,1208.77 1777.68,1208.77 1778.27,1208.77 1778.86,1208.77 1779.44,1208.77 1780.03,1208.77 1780.61,1208.77 1781.2,1208.77 1781.79,1208.77 1782.37,1208.77 1782.96,1208.77 1783.55,1208.77 1784.13,1208.77 1784.72,1208.77 1785.31,1208.77 1785.89,1208.77 1786.48,1208.77 1787.06,1208.77 1787.65,1208.77 1788.24,1208.77 1788.82,1208.77 1789.41,1208.77 1790,1208.77 1790.58,1208.77 1791.17,1208.77 1791.76,1208.77 1792.34,1208.77 1792.93,1208.77 1793.52,1208.77 1794.1,1208.77 1794.69,1208.77 1795.27,1208.77 1795.86,1208.77 1796.45,1208.77 1797.03,1208.77 1797.62,1208.77 1798.21,1208.77 1798.79,1208.77 1799.38,1208.77 1799.97,1208.77 1800.55,1208.77 1801.14,1208.77 1801.73,1208.77 1802.31,1208.77 1802.9,1208.77 1803.48,1208.77 1804.07,1208.77 1804.66,1208.77 1805.24,1208.77 1805.83,1208.77 1806.42,1208.77 1807,1208.77 1807.59,1208.77 1808.18,1208.77 1808.76,1208.77 1809.35,1208.77 1809.94,1208.77 1810.52,1208.77 1811.11,1208.77 1811.69,1208.77 1812.28,1208.77 1812.87,1208.77 1813.45,1208.77 1814.04,1208.77 1814.63,1208.77 1815.21,1208.77 1815.8,1208.77 1816.39,1208.77 1816.97,1208.77 1817.56,1208.77 1818.14,1208.77 1818.73,1208.77 1819.32,1208.77 1819.9,1208.77 1820.49,1208.77 1821.08,1208.77 1821.66,1208.77 1822.25,1208.77 1822.84,1208.77 1823.42,1208.77 1824.01,1208.77 1824.6,1208.77 1825.18,1208.77 1825.77,1208.77 1826.35,1208.77 1826.94,1208.77 1827.53,1208.77 1828.11,1208.77 1828.7,1208.77 1829.29,1208.77 1829.87,1208.77 1830.46,1208.77 1831.05,1208.77 1831.63,1208.77 1832.22,1208.77 1832.81,1208.77 1833.39,1208.77 1833.98,1208.77 1834.56,1208.77 1835.15,1208.77 1835.74,1208.77 1836.32,1208.77 1836.91,1208.77 1837.5,1208.77 1838.08,1208.77 1838.67,1208.77 1839.26,1208.77 1839.84,1208.77 1840.43,1208.77 1841.01,1208.77 1841.6,1208.77 1842.19,1208.77 1842.77,1208.77 1843.36,1208.77 1843.95,1208.77 1844.53,1208.77 1845.12,1208.77 1845.71,1208.77 1846.29,1208.77 1846.88,1208.77 1847.47,1208.77 1848.05,1208.77 1848.64,1208.77 1849.22,1208.77 1849.81,1208.77 1850.4,1208.77 1850.98,1208.77 1851.57,1208.77 1852.16,1208.77 1852.74,1208.77 1853.33,1208.77 1853.92,1208.77 1854.5,1208.77 1855.09,1208.77 1855.68,1208.77 1856.26,1208.77 1856.85,1208.77 1857.43,1208.77 1858.02,1208.77 1858.61,1208.77 1859.19,1208.77 1859.78,1208.77 1860.37,1208.77 1860.95,1208.77 1861.54,1208.77 1862.13,1208.77 1862.71,1208.77 1863.3,1208.77 1863.88,1208.77 1864.47,1208.77 1865.06,1208.77 1865.64,1208.77 1866.23,1208.77 1866.82,1208.77 1867.4,1208.77 1867.99,1208.77 1868.58,1208.77 1869.16,1208.77 1869.75,1208.77 1870.34,1208.77 1870.92,1208.77 1871.51,1208.77 1872.09,1208.77 1872.68,1208.77 1873.27,1208.77 1873.85,1208.77 1874.44,1208.77 1875.03,1208.77 1875.61,1208.77 1876.2,1208.77 1876.79,1208.77 1877.37,1208.77 1877.96,1208.77 1878.55,1208.77 1879.13,1208.77 1879.72,1208.77 1880.3,1208.77 1880.89,1208.77 1881.48,1208.77 1882.06,1208.77 1882.65,1208.77 1883.24,1208.77 1883.82,1208.77 1884.41,1208.77 1885,1208.77 1885.58,1208.77 1886.17,1208.77 1886.76,1208.77 1887.34,1208.77 1887.93,1208.77 1888.51,1208.77 1889.1,1208.77 1889.69,1208.77 1890.27,1208.77 1890.86,1208.77 1891.45,1208.77 1892.03,1208.77 1892.62,1208.77 1893.21,1208.77 1893.79,1208.77 1894.38,1208.77 1894.96,1208.77 1895.55,1208.77 1896.14,1208.77 1896.72,1208.77 1897.31,1208.77 1897.9,1208.77 1898.48,1208.77 1899.07,1208.77 1899.66,1208.77 1900.24,1208.77 1900.83,1208.77 1901.42,1208.77 1902,1208.77 1902.59,1208.77 1903.17,1208.77 1903.76,1208.77 1904.35,1208.77 1904.93,1208.77 1905.52,1208.77 1906.11,1208.77 1906.69,1208.77 1907.28,1208.77 1907.87,1208.77 1908.45,1208.77 1909.04,1208.77 1909.63,1208.77 1910.21,1208.77 1910.8,1208.77 1911.38,1208.77 1911.97,1208.77 1912.56,1208.77 1913.14,1208.77 1913.73,1208.77 1914.32,1208.77 1914.9,1208.77 1915.49,1208.77 1916.08,1208.77 1916.66,1208.77 1917.25,1208.77 1917.83,1208.77 1918.42,1208.77 1919.01,1208.77 1919.59,1208.77 1920.18,1208.77 1920.77,1208.77 1921.35,1208.77 1921.94,1208.77 1922.53,1208.77 1923.11,1208.77 1923.7,1208.77 1924.29,1208.77 1924.87,1208.77 1925.46,1208.77 1926.04,1208.77 1926.63,1208.77 1927.22,1208.77 1927.8,1208.77 1928.39,1208.77 1928.98,1208.77 1929.56,1208.77 1930.15,1208.77 1930.74,1208.77 1931.32,1208.77 1931.91,1208.77 1932.5,1208.77 1933.08,1208.77 1933.67,1208.77 1934.25,1208.77 1934.84,1208.77 1935.43,1208.77 1936.01,1208.77 1936.6,1208.77 1937.19,1208.77 1937.77,1208.77 1938.36,1208.77 1938.95,1208.77 1939.53,1208.77 1940.12,1208.77 1940.71,1208.77 1941.29,1208.77 1941.88,1208.77 1942.46,1208.77 1943.05,1208.77 1943.64,1208.77 1944.22,1208.77 1944.81,1208.77 1945.4,1208.77 1945.98,1208.77 1946.57,1208.77 1947.16,1208.77 1947.74,1208.77 1948.33,1208.77 1948.91,1208.77 1949.5,1208.77 1950.09,1208.77 1950.67,1208.77 1951.26,1208.77 1951.85,1208.77 1952.43,1208.77 1953.02,1208.77 1953.61,1208.77 1954.19,1208.77 1954.78,1208.77 1955.37,1208.77 1955.95,1208.77 1956.54,1208.77 1957.12,1208.77 1957.71,1208.77 1958.3,1208.77 1958.88,1208.77 1959.47,1208.77 1960.06,1208.77 1960.64,1208.77 1961.23,1208.77 1961.82,1208.77 1962.4,1208.77 1962.99,1208.77 1963.58,1208.77 1964.16,1208.77 1964.75,1208.77 1965.33,1208.77 1965.92,1208.77 1966.51,1208.77 1967.09,1208.77 1967.68,1208.77 1968.27,1208.77 1968.85,1208.77 1969.44,1208.77 1970.03,1208.77 1970.61,1208.77 1971.2,1208.77 1971.78,1208.77 1972.37,1208.77 1972.96,1208.77 1973.54,1208.77 1974.13,1208.77 1974.72,1208.77 1975.3,1208.77 1975.89,1208.77 1976.48,1208.77 1977.06,1208.77 1977.65,1208.77 1978.24,1208.77 1978.82,1208.77 1979.41,1208.77 1979.99,1208.77 1980.58,1208.77 1981.17,1208.77 1981.75,1208.77 1982.34,1208.77 1982.93,1208.77 1983.51,1208.77 1984.1,1208.77 1984.69,1208.77 1985.27,1208.77 1985.86,1208.77 1986.45,1208.77 1987.03,1208.77 1987.62,1208.77 1988.2,1208.77 1988.79,1208.77 1989.38,1208.77 1989.96,1208.77 1990.55,1208.77 1991.14,1208.77 1991.72,1208.77 1992.31,1208.77 1992.9,1208.77 1993.48,1208.77 1994.07,1208.77 1994.65,1208.77 1995.24,1208.77 1995.83,1208.77 1996.41,1208.77 1997,1208.77 1997.59,1208.77 1998.17,1208.77 1998.76,1208.77 1999.35,1208.77 1999.93,1208.77 2000.52,1208.77 2001.11,1208.77 2001.69,1208.77 2002.28,1208.77 2002.86,1208.77 2003.45,1208.77 2004.04,1208.77 2004.62,1208.77 2005.21,1208.77 2005.8,1208.77 2006.38,1208.77 2006.97,1208.77 2007.56,1208.77 2008.14,1208.77 2008.73,1208.77 2009.32,1208.77 2009.9,1208.77 2010.49,1208.77 2011.07,1208.77 2011.66,1208.77 2012.25,1208.77 2012.83,1208.77 2013.42,1208.77 2014.01,1208.77 2014.59,1208.77 2015.18,1208.77 2015.77,1208.77 2016.35,1208.77 2016.94,1208.77 2017.53,1208.77 2018.11,1208.77 2018.7,1208.77 2019.28,1208.77 2019.87,1208.77 2020.46,1208.77 2021.04,1208.77 2021.63,1208.77 2022.22,1208.77 2022.8,1208.77 2023.39,1208.77 2023.98,1208.77 2024.56,1208.77 2025.15,1208.77 2025.73,1208.77 2026.32,1208.77 2026.91,1208.77 2027.49,1208.77 2028.08,1208.77 2028.67,1208.77 2029.25,1208.77 2029.84,1208.77 2030.43,1208.77 2031.01,1208.77 2031.6,1208.77 2032.19,1208.77 2032.77,1208.77 2033.36,1208.77 2033.94,1208.77 2034.53,1208.77 2035.12,1208.77 2035.7,1208.77 2036.29,1208.77 2036.88,1208.77 2037.46,1208.77 2038.05,1208.77 2038.64,1208.77 2039.22,1208.77 2039.81,1208.77 2040.4,1208.77 2040.98,1208.77 2041.57,1208.77 2042.15,1208.77 2042.74,1208.77 2043.33,1208.77 2043.91,1208.77 2044.5,1208.77 2045.09,1208.77 2045.67,1208.77 2046.26,1208.77 2046.85,1208.77 2047.43,1208.77 2048.02,1208.77 2048.6,1208.77 2049.19,1208.77 2049.78,1208.77 2050.36,1208.77 2050.95,1208.77 2051.54,1208.77 2052.12,1208.77 2052.71,1208.77 2053.3,1208.77 2053.88,1208.77 2054.47,1208.77 2055.06,1208.77 2055.64,1208.77 2056.23,1208.77 2056.81,1208.77 2057.4,1208.77 2057.99,1208.77 2058.57,1208.77 2059.16,1208.77 2059.75,1208.77 2060.33,1208.77 2060.92,1208.77 2061.51,1208.77 2062.09,1208.77 2062.68,1208.77 2063.27,1208.77 2063.85,1208.77 2064.44,1208.77 2065.02,1208.77 2065.61,1208.77 2066.2,1208.77 2066.78,1208.77 2067.37,1208.77 2067.96,1208.77 2068.54,1208.77 2069.13,1208.77 2069.72,1208.77 2070.3,1208.77 2070.89,1208.77 2071.48,1208.77 2072.06,1208.77 2072.65,1208.77 2073.23,1208.77 2073.82,1208.77 2074.41,1208.77 2074.99,1208.77 2075.58,1208.77 2076.17,1208.77 2076.75,1208.77 2077.34,1208.77 2077.93,1208.77 2078.51,1208.77 2079.1,1208.77 2079.68,1208.77 2080.27,1208.77 2080.86,1208.77 2081.44,1208.77 2082.03,1208.77 2082.62,1208.77 2083.2,1208.77 2083.79,1208.77 2084.38,1208.77 2084.96,1208.77 2085.55,1208.77 2086.14,1208.77 2086.72,1208.77 2087.31,1208.77 2087.89,1208.77 2088.48,1208.77 2089.07,1208.77 2089.65,1208.77 2090.24,1208.77 2090.83,1208.77 2091.41,1208.77 2092,1208.77 2092.59,1208.77 2093.17,1208.77 2093.76,1208.77 2094.35,1208.77 2094.93,1208.77 2095.52,1208.77 2096.1,1208.77 2096.69,1208.77 2097.28,1208.77 2097.86,1208.77 2098.45,1208.77 2099.04,1208.77 2099.62,1208.77 2100.21,1208.77 2100.8,1208.77 2101.38,1208.77 2101.97,1208.77 2102.55,1208.77 2103.14,1208.77 2103.73,1208.77 2104.31,1208.77 2104.9,1208.77 2105.49,1208.77 2106.07,1208.77 2106.66,1208.77 2107.25,1208.77 2107.83,1208.77 2108.42,1208.77 2109.01,1208.77 2109.59,1208.77 2110.18,1208.77 2110.76,1208.77 2111.35,1208.77 2111.94,1208.77 2112.52,1208.77 2113.11,1208.77 2113.7,1208.77 2114.28,1208.77 2114.87,1208.77 2115.46,1208.77 2116.04,1208.77 2116.63,1208.77 2117.22,1208.77 2117.8,1208.77 2118.39,1208.77 2118.97,1208.77 2119.56,1208.77 2120.15,1208.77 2120.73,1208.77 2121.32,1208.77 2121.91,1208.77 2122.49,1208.77 2123.08,1208.77 2123.67,1208.77 2124.25,1208.77 2124.84,1208.77 2125.42,1208.77 2126.01,1208.77 2126.6,1208.77 2127.18,1208.77 2127.77,1208.77 2128.36,1208.77 2128.94,1208.77 2129.53,1208.77 2130.12,1208.77 2130.7,1208.77 2131.29,1208.77 2131.88,1208.77 2132.46,1208.77 2133.05,1208.77 2133.63,1208.77 2134.22,1208.77 2134.81,1208.77 2135.39,1208.77 2135.98,1208.77 2136.57,1208.77 2137.15,1208.77 2137.74,1208.77 2138.33,1208.77 2138.91,1208.77 2139.5,1208.77 2140.09,1208.77 2140.67,1208.77 2141.26,1208.77 2141.84,1208.77 2142.43,1208.77 2143.02,1208.77 2143.6,1208.77 2144.19,1208.77 2144.78,1208.77 2145.36,1208.77 2145.95,1208.77 2146.54,1208.77 2147.12,1208.77 2147.71,1208.77 2148.3,1208.77 2148.88,1208.77 2149.47,1208.77 2150.05,1208.77 2150.64,1208.77 2151.23,1208.77 2151.81,1208.77 2152.4,1208.77 2152.99,1208.77 2153.57,1208.77 2154.16,1208.77 2154.75,1208.77 2155.33,1208.77 2155.92,1208.77 2156.5,1208.77 2157.09,1208.77 2157.68,1208.77 2158.26,1208.77 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.09,1189.2 1400.15,899.083 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.01 985.439,1189.2 2158.26,1189.2 2158.26,1228.01 985.439,1228.01 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip653\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip653)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-5506.3 164.91,-6398.35 165.469,-7211.48 166.029,-7953.26 166.588,-8641.76 167.147,-8288.23 167.706,-7158.88 168.266,-7787.76 168.825,-8344.51 169.384,-8856.04 169.943,-9298.79 170.503,-9065.67 171.062,-8866.7 171.621,-9216.24 172.18,-9545.26 172.74,-9813.95 173.299,-10058.6 173.858,-10275.5 174.417,-10452.2 174.977,-10192.5 175.536,-10319.6 176.095,-10075.3 176.655,-9836.05 177.214,-9916.22 177.773,-9990.27 178.332,-9757.7 178.892,-9787.39 179.451,-9556.62 180.01,-9577.76 180.569,-9568.49 181.129,-9553.05 181.688,-9319.29 182.247,-9278.2 182.806,-9213 183.366,-9142.66 183.925,-9060.86 184.484,-8973.18 185.043,-8869.63 185.603,-8490.06 186.162,-8384.5 186.721,-8161.86 187.28,-7928.59 187.84,-7818.57 188.399,-7709.12 188.958,-7488.79 189.517,-7089.9 190.077,-6900.59 190.636,-6714.22 191.195,-6445.39 191.754,-6344.03 192.314,-6171.09 192.873,-5998.55 193.432,-5839.01 193.991,-5741.41 194.551,-5641.23 195.11,-5480.27 195.669,-5200.97 196.228,-5048.78 196.788,-4957.62 197.347,-4756.78 197.906,-4616.53 198.465,-4525.75 199.025,-4238.41 199.584,-3915.26 200.143,-3789.13 200.702,-3666.74 201.262,-3418.84 201.821,-3267.71 202.38,-3039.57 202.939,-2901.46 203.499,-2766.91 204.058,-2597.44 204.617,-2544.59 205.176,-2451.77 205.736,-2366.01 206.295,-2275.5 206.854,-2215.89 207.413,-2060.68 207.973,-1970.04 208.532,-1911.27 209.091,-1793.26 209.65,-1684.86 210.21,-1638.6 210.769,-1503.4 211.328,-1460.8 211.887,-1365.18 212.447,-1272.38 213.006,-1178.56 213.565,-1140.74 214.124,-1103.44 214.684,-1038.76 215.243,-951.463 215.802,-918.553 216.361,-859.325 216.921,-751.701 217.48,-699.002 218.039,-671.214 218.598,-668.699 219.158,-543.746 219.717,-468.5 220.276,-444.394 220.835,-400.291 221.395,-440.136 221.954,-386.98 222.513,-332.319 223.072,-215.631 223.632,-219.904 224.191,-174.876 224.75,-85.5593 225.309,-44.4709 225.869,-27.8421 226.428,28.8726 226.987,128.126 227.546,161.538 228.106,217.104 228.665,266.636 229.224,312.755 229.783,315.186 230.343,342.123 230.902,348.369 231.461,355.805 232.02,404.26 232.58,448.319 233.139,511.464 233.698,534.572 234.257,533.884 234.817,574.042 235.376,578.028 235.935,596.312 236.494,613.509 237.054,612.475 237.613,616.985 238.172,641.169 238.731,663.008 239.291,700.639 239.85,734.033 240.409,733.309 240.968,731.586 241.528,734.433 242.087,753.622 242.646,747.271 243.205,784.307 243.765,800.067 244.324,793.302 244.883,792.585 245.442,790.113 246.002,824.078 246.561,856.896 247.12,846.72 247.679,828.51 248.239,861.318 248.798,857.624 249.357,855.744 249.916,852.789 250.476,870.626 251.035,921.748 251.594,989.166 252.153,1016.72 252.713,1005.74 253.272,999.808 253.831,990.835 254.39,1002.12 254.95,941.27 255.509,933.61 256.068,932.001 256.627,982.75 257.187,996.199 257.746,1040.75 258.305,1031.79 258.864,1072.61 259.424,1079.91 259.983,1069.95 260.542,1075.7 261.101,1068.01 261.661,1057.95 262.22,1063.53 262.779,1036.94 263.338,1060.87 263.898,1035.22 264.457,1024.65 265.016,1001.32 265.575,1013.6 266.135,1041.5 266.694,1035.66 267.253,1044.32 267.812,1049.21 268.372,1057.13 268.931,1031.2 269.49,1026.66 270.049,1054.04 270.609,1093.93 271.168,1084.51 271.727,1093.54 272.286,1116.76 272.846,1152.7 273.405,1152.44 273.964,1120.94 274.523,1111.67 275.083,1117.73 275.642,1104.19 276.201,1091.59 276.76,1095.07 277.32,1101.92 277.879,1122.34 278.438,1126.16 278.997,1129.67 279.557,1084.15 280.116,1060.48 280.675,1051.28 281.234,1013.08 281.794,1005.69 282.353,1000.17 282.912,1009.99 283.471,1022.5 284.031,1014.48 284.59,1040.81 285.149,1046.85 285.708,1056.06 286.268,1097.93 286.827,1084.34 287.386,1039.61 287.945,1079.68 288.505,1089.68 289.064,1111.23 289.623,1131.09 290.182,1101.11 290.742,1092.11 291.301,1099.18 291.86,1089.58 292.419,1095.01 292.979,1070.01 293.538,1077.1 294.097,1071.66 294.656,1030.39 295.216,1010.52 295.775,1004.84 296.334,1014.57 296.893,1008.02 297.453,1016.28 298.012,1010.61 298.571,959.67 299.13,954.435 299.69,934.116 300.249,865.975 300.808,836.37 301.368,822.012 301.927,827.557 302.486,845.835 303.045,830.631 303.605,884.916 304.164,891.384 304.723,922.404 305.282,934.789 305.842,931.66 306.401,948.239 306.96,908.471 307.519,889.246 308.079,887.031 308.638,889.151 309.197,906.605 309.756,907.014 310.316,907.722 310.875,909.106 311.434,909.12 311.993,909.682 312.553,974.537 313.112,973.705 313.671,974.821 314.23,971.446 314.79,970.973 315.349,995.074 315.908,972.217 316.467,1029.2 317.027,1004.8 317.586,1000.41 318.145,1027.49 318.704,1019.55 319.264,1011.96 319.823,1006.42 320.382,985.744 320.941,999.69 321.501,977.63 322.06,907.34 322.619,935.114 323.178,977.956 323.738,969.157 324.297,964.366 324.856,958.321 325.415,934.9 325.975,928.679 326.534,928.89 327.093,891.673 327.652,908.118 328.212,922.184 328.771,919.527 329.33,898.443 329.889,880.407 330.449,897.697 331.008,878.872 331.567,910.432 332.126,925.296 332.686,950.303 333.245,963.75 333.804,958.08 334.363,985.811 334.923,947.68 335.482,908.423 336.041,902.963 336.6,902.312 337.16,898.926 337.719,910.983 338.278,904.003 338.837,902.062 339.397,927.626 339.956,953.504 340.515,929.757 341.074,924.317 341.634,887.9 342.193,931.124 342.752,897.982 343.311,929.588 343.871,907.718 344.43,936.439 344.989,946.117 345.548,943.114 346.108,938.363 346.667,948.44 347.226,957.091 347.785,949.24 348.345,971.594 348.904,966.553 349.463,976.994 350.022,967.368 350.582,988.827 351.141,981.063 351.7,985.678 352.259,974.636 352.819,950.757 353.378,975.068 353.937,985.298 354.496,992.882 355.056,981.901 355.615,973.815 356.174,968.083 356.733,994.357 357.293,982.74 357.852,972.742 358.411,930.717 358.97,907.894 359.53,922.619 360.089,935.298 360.648,929.479 361.207,908.928 361.767,872.378 362.326,853.728 362.885,885.683 363.444,864.688 364.004,861.148 364.563,860.664 365.122,840.273 365.681,857.184 366.241,870.857 366.8,853.281 367.359,880.696 367.918,861.755 368.478,844.13 369.037,872.279 369.596,868.854 370.155,867.975 370.715,845.527 371.274,859.465 371.833,872.055 372.392,851.836 372.952,867.919 373.511,864.67 374.07,875.431 374.629,884.334 375.189,880.054 375.748,860.919 376.307,859.314 376.866,838.042 377.426,836.252 377.985,821.106 378.544,804.067 379.103,803.778 379.663,819.262 380.222,785.345 380.781,799.829 381.34,781.982 381.9,769.218 382.459,786.346 383.018,770.762 383.577,771.598 384.137,771.358 384.696,772.09 385.255,755.481 385.814,756.546 386.374,774.861 386.933,760.203 387.492,825.17 388.051,822.734 388.611,852.563 389.17,831.419 389.729,797.684 390.288,799.225 390.848,799.21 391.407,814.279 391.966,811.009 392.525,810.382 393.085,822.777 393.644,808.268 394.203,824.334 394.762,819.276 395.322,820.893 395.881,838.776 396.44,839.032 396.999,820.585 397.559,787.835 398.118,753.168 398.677,738.703 399.236,739.974 399.796,708.154 400.355,712.662 400.914,703.356 401.473,723.012 402.033,738.882 402.592,740.823 403.151,726.955 403.71,713.978 404.27,732.935 404.829,754.636 405.388,758.991 405.947,775.504 406.507,807.89 407.066,808.246 407.625,854.452 408.184,832.619 408.744,795.377 409.303,799.035 409.862,752.391 410.421,804.23 410.981,836.638 411.54,868.041 412.099,897.788 412.658,888.71 413.218,847.072 413.777,844.048 414.336,855.303 414.895,833.16 415.455,831.702 416.014,830.434 416.573,844.341 417.132,853.796 417.692,850.549 418.251,881.661 418.81,875.044 419.369,853.378 419.929,863.333 420.488,854.801 421.047,818.956 421.606,815.881 422.166,799.158 422.725,811.871 423.284,791.127 423.843,819.596 424.403,817.996 424.962,801.261 425.521,814.315 426.08,779.787 426.64,748.278 427.199,732.398 427.758,718.068 428.318,723.308 428.877,726.474 429.436,760.483 429.995,761.183 430.555,763.905 431.114,776.586 431.673,762.714 432.232,794.159 432.792,793.252 433.351,807.817 433.91,804.825 434.469,770.248 435.029,752.02 435.588,753.064 436.147,796.993 436.706,811.251 437.266,826.003 437.825,820.796 438.384,816.851 438.943,815.043 439.503,824.87 440.062,822.203 440.621,833.59 441.18,811.809 441.74,807.648 442.299,806.483 442.858,818.402 443.417,814.214 443.977,780.771 444.536,776.984 445.095,743.823 445.654,740.873 446.214,759.456 446.773,758.781 447.332,758.024 447.891,740.155 448.451,737.387 449.01,806.789 449.569,834.432 450.128,830.66 450.688,791.589 451.247,802.798 451.806,784.112 452.365,765.552 452.925,778.361 453.484,794.904 454.043,823.846 454.602,854.4 455.162,850.414 455.721,845.927 456.28,795.254 456.839,760.387 457.399,756.426 457.958,774.67 458.517,804.16 459.076,833.669 459.636,830.461 460.195,825.786 460.754,788.946 461.313,784.482 461.873,797.165 462.432,797.155 462.991,793.421 463.55,788.579 464.11,790.829 464.669,759.183 465.228,712.794 465.787,732.889 466.347,715.177 466.906,717.189 467.465,703.912 468.024,706.359 468.584,706.743 469.143,708.439 469.702,696.79 470.261,718.226 470.821,719.451 471.38,736.553 471.939,734.27 472.498,734.994 473.058,737.86 473.617,772.241 474.176,800.58 474.735,844.38 475.295,819.686 475.854,800.778 476.413,781.259 476.972,780.383 477.532,808.502 478.091,821.564 478.65,848.832 479.209,844.019 479.769,854.102 480.328,849.421 480.887,843.054 481.446,823.71 482.006,835.182 482.565,831.161 483.124,805.119 483.683,799.082 484.243,745.983 484.802,759.297 485.361,725.536 485.92,710.901 486.48,696.413 487.039,702.673 487.598,704.624 488.157,673.023 488.717,694.292 489.276,712.904 489.835,697.514 490.394,715.335 490.954,716.891 491.513,716.393 492.072,715.83 492.631,717.219 493.191,699.922 493.75,700.845 494.309,717.88 494.868,719.208 495.428,701.937 495.987,721.805 496.546,704.833 497.105,693.04 497.665,716.494 498.224,701.516 498.783,718.834 499.342,722.951 499.902,741.818 500.461,742.075 501.02,743.959 501.579,695.201 502.139,729.106 502.698,791.63 503.257,789.661 503.816,790.076 504.376,774.37 504.935,772.625 505.494,802.762 506.053,783.145 506.613,829.985 507.172,853.759 507.731,817.466 508.29,844.639 508.85,840.043 509.409,838.966 509.968,830.603 510.527,856.231 511.087,803.05 511.646,766.42 512.205,761.347 512.764,763.349 513.324,775.6 513.883,755.823 514.442,773.179 515.001,800.412 515.561,798.717 516.12,795.439 516.679,826.221 517.238,840.162 517.798,818.599 518.357,797.644 518.916,874.181 519.475,833.851 520.035,812.684 520.594,807.323 521.153,770.63 521.712,736.585 522.272,686.117 522.831,704.655 523.39,690.068 523.949,708.476 524.509,758.523 525.068,770.025 525.627,797.512 526.186,793.699 526.746,788.959 527.305,788.117 527.864,765.68 528.423,733.285 528.983,718.376 529.542,767.505 530.101,798.854 530.66,791.63 531.22,786.801 531.779,780.541 532.338,778.331 532.897,758.98 533.457,774.549 534.016,787.898 534.575,797.84 535.134,797.465 535.694,794.198 536.253,758.951 536.812,741.992 537.371,760.259 537.931,758.526 538.49,739.329 539.049,734.552 539.608,767.927 540.168,767.588 540.727,778.705 541.286,773.033 541.845,738.683 542.405,752.127 542.964,765.791 543.523,747.793 544.082,761.832 544.642,762.142 545.201,742.007 545.76,742.643 546.319,725.777 546.879,692.536 547.438,727.763 547.997,710.9 548.556,727.142 549.116,710.283 549.675,696.4 550.234,714.102 550.793,699.293 551.353,685.226 551.912,670.525 552.471,709.053 553.031,739.869 553.59,719.174 554.149,717.035 554.708,681.675 555.268,699.482 555.827,685.615 556.386,681.366 556.945,681.455 557.505,698.561 558.064,681.343 558.623,664.827 559.182,635.11 559.742,591.77 560.301,583.731 560.86,556.433 561.419,567.098 561.979,593.497 562.538,587.558 563.097,581.463 563.656,664.916 564.216,668.906 564.775,687.61 565.334,675.532 565.893,681.37 566.453,636.943 567.012,641.498 567.571,665.391 568.13,685.689 568.69,669.685 569.249,672.65 569.808,711.503 570.367,729.183 570.927,714.601 571.486,718.149 572.045,718.513 572.604,732.789 573.164,779.986 573.723,760.967 574.282,772.222 574.841,782.576 575.401,761.571 575.96,725.278 576.519,728.044 577.078,741.244 577.638,751.987 578.197,720.223 578.756,717.926 579.315,723.594 579.875,720.725 580.434,718.43 580.993,687.527 581.552,673.062 582.112,673.161 582.671,658.767 583.23,679.624 583.789,716.552 584.349,699.962 584.908,671.107 585.467,658.616 586.026,694.912 586.586,694.703 587.145,712.88 587.704,682.54 588.263,684.853 588.823,654.379 589.382,656.839 589.941,642.776 590.5,727.075 591.06,696.08 591.619,729.586 592.178,745.818 592.737,763.532 593.297,777.594 593.856,787.397 594.415,784.274 594.974,762.89 595.534,727.104 596.093,723.948 596.652,673.424 597.211,674.547 597.771,678.473 598.33,657.193 598.889,656.098 599.448,674.058 600.008,674.923 600.567,648.362 601.126,649.027 601.685,654.432 602.245,658.959 602.804,645.321 603.363,647.352 603.922,632.41 604.482,638.561 605.041,658.281 605.6,676.113 606.159,710.616 606.719,695.656 607.278,694.62 607.837,682.379 608.396,666.682 608.956,683.071 609.515,699.451 610.074,702.913 610.633,719.285 611.193,718.393 611.752,703.655 612.311,723.101 612.87,738.392 613.43,752.074 613.989,801.175 614.548,826.949 615.107,822.268 615.667,849.119 616.226,873.543 616.785,865.651 617.344,860.559 617.904,865.497 618.463,856.161 619.022,830.964 619.581,837.985 620.141,833.897 620.7,809.722 621.259,805.267 621.818,800 622.378,811.942 622.937,772.593 623.496,767.793 624.055,746.136 624.615,746.24 625.174,780.092 625.733,709.305 626.292,738.425 626.852,719.073 627.411,703.438 627.97,704.288 628.529,737.881 629.089,733.778 629.648,748.704 630.207,729.142 630.766,778.007 631.326,790.012 631.885,754.651 632.444,721.788 633.003,707.215 633.563,706.192 634.122,688.863 634.681,705.041 635.24,705.044 635.8,704.261 636.359,687.028 636.918,670.837 637.477,670.323 638.037,689.086 638.596,671.623 639.155,623.568 639.714,630.643 640.274,634.451 640.833,668.236 641.392,669.144 641.951,670.583 642.511,670.553 643.07,672.133 643.629,656.402 644.188,707.296 644.748,695.896 645.307,711.511 645.866,725.586 646.425,754.069 646.985,750.284 647.544,763.751 648.103,763.56 648.662,774.928 649.222,767.047 649.781,763.915 650.34,793.392 650.899,741.828 651.459,721.626 652.018,722.166 652.577,734.433 653.136,750.564 653.696,762.278 654.255,742.128 654.814,724.305 655.373,756.564 655.933,769.105 656.492,764.457 657.051,727.92 657.61,727.485 658.17,696.552 658.729,680.461 659.288,650.835 659.847,671.12 660.407,688.39 660.966,721.833 661.525,688.664 662.084,722.805 662.644,704.951 663.203,723.189 663.762,722.867 664.321,736.036 664.881,716.51 665.44,716.43 665.999,727.393 666.558,727.156 667.118,707.79 667.677,706.874 668.236,738.852 668.795,719.829 669.355,701.969 669.914,684.394 670.473,652.535 671.032,658.522 671.592,675.869 672.151,692.194 672.71,679.778 673.269,665.216 673.829,650.046 674.388,653.091 674.947,652.53 675.506,639.12 676.066,627.288 676.625,631.189 677.184,599.916 677.743,601.491 678.303,603.331 678.862,623.494 679.421,625.799 679.981,580.347 680.54,602.778 681.099,610.759 681.658,598.027 682.218,588.281 682.777,592.696 683.336,563.036 683.895,570.547 684.455,593.87 685.014,633.802 685.573,623.493 686.132,609.969 686.692,596.23 687.251,603.809 687.81,628.427 688.369,633.601 688.929,654.045 689.488,640.127 690.047,640.615 690.606,646.918 691.166,649.196 691.725,635.001 692.284,591.179 692.843,598.566 693.403,621.53 693.962,646.19 694.521,663.281 695.08,664.599 695.64,648.687 696.199,618.524 696.758,605.368 697.317,626.112 697.877,646.268 698.436,650.586 698.995,638.387 699.554,622.934 700.114,627.467 700.673,648.625 701.232,633.621 701.791,639.031 702.351,642.609 702.91,610.5 703.469,628.309 704.028,695.706 704.588,665.698 705.147,653.468 705.706,655.375 706.265,656.129 706.825,656.418 707.384,674.953 707.943,693.447 708.502,728.953 709.062,741.827 709.621,740.616 710.18,739.031 710.739,704.54 711.299,755.063 711.858,687.744 712.417,701.554 712.976,716.749 713.536,714.819 714.095,760.205 714.654,754.689 715.213,749.372 715.773,701.097 716.332,717.719 716.891,751.754 717.45,764.675 718.01,792.653 718.569,783.425 719.128,762.815 719.687,760.174 720.247,738.763 720.806,738.24 721.365,769.046 721.924,747.221 722.484,712.311 723.043,711.927 723.602,711.335 724.161,745.361 724.721,755.79 725.28,771.876 725.839,749.339 726.398,730.383 726.958,761.809 727.517,741.309 728.076,771.949 728.635,763.407 729.195,778.339 729.754,775.047 730.313,766.601 730.872,765.435 731.432,727.029 731.991,709.037 732.55,709.143 733.109,738.408 733.669,684.699 734.228,650.819 734.787,635.791 735.346,622.401 735.906,628.711 736.465,603.711 737.024,606.541 737.583,601.737 738.143,589.529 738.702,610.308 739.261,613.86 739.82,633.589 740.38,650.467 740.939,667.298 741.498,716.067 742.057,718.482 742.617,735.642 743.176,747.904 743.735,726.609 744.294,692.281 744.854,691.107 745.413,644.109 745.972,646.855 746.531,613.824 747.091,653.605 747.65,686.347 748.209,702.744 748.768,720.971 749.328,686.99 749.887,702.126 750.446,700.951 751.005,717.775 751.565,716.991 752.124,695.213 752.683,677.988 753.242,645.68 753.802,649.169 754.361,651.491 754.92,703.452 755.479,736.645 756.039,766.558 756.598,795.301 757.157,789.191 757.716,748.45 758.276,749.355 758.835,729.21 759.394,696.098 759.953,697.191 760.513,711.785 761.072,710.628 761.631,711.892 762.19,693.417 762.75,677.259 763.309,696.956 763.868,677.654 764.427,661.079 764.987,643.265 765.546,627.896 766.105,628.894 766.664,633.599 767.224,639.238 767.783,656.905 768.342,658.559 768.901,707.675 769.461,706.521 770.02,704.164 770.579,652.466 771.138,639.865 771.698,660.513 772.257,647.043 772.816,666.409 773.375,687.038 773.935,704.47 774.494,731.575 775.053,711.544 775.612,742.19 776.172,739.755 776.731,752.332 777.29,731.163 777.849,716.874 778.409,734.905 778.968,749.687 779.527,715.263 780.086,732.272 780.646,696.65 781.205,711.42 781.764,723.388 782.323,722.169 782.883,688.683 783.442,654.632 784.001,642.008 784.56,663.986 785.12,697.782 785.679,681.772 786.238,666.047 786.797,653.749 787.357,652.372 787.916,669.36 788.475,671.394 789.034,691.036 789.594,659.91 790.153,645.763 790.712,664.678 791.271,679.222 791.831,665.67 792.39,683.973 792.949,686.458 793.508,685.044 794.068,698.498 794.627,712.484 795.186,727.091 795.745,723.081 796.305,755.117 796.864,733.003 797.423,746.256 797.982,806.536 798.542,815.491 799.101,823.508 799.66,800.141 800.219,795.536 800.779,791.045 801.338,787.992 801.897,799.134 802.456,792.697 803.016,786.875 803.575,778.726 804.134,760.011 804.693,756.103 805.253,723.291 805.812,687.772 806.371,687.208 806.931,652.225 807.49,638.871 808.049,641.433 808.608,641.219 809.168,641.997 809.727,608.046 810.286,629.406 810.845,634.22 811.405,624.263 811.964,629.019 812.523,598.042 813.082,587.383 813.642,612.419 814.201,601.372 814.76,585.14 815.319,573.579 815.879,543.724 816.438,552.481 816.997,544.058 817.556,535.911 818.116,560.115 818.675,565.581 819.234,572.98 819.793,595.672 820.353,616.665 820.912,601.265 821.471,589.542 822.03,610.55 822.59,633.834 823.149,637.381 823.708,669.745 824.267,655.438 824.827,659.725 825.386,680.045 825.945,661.936 826.504,708.938 827.064,688.581 827.623,704.665 828.182,705.881 828.741,688.409 829.301,674.841 829.86,658.608 830.419,629.132 830.978,631.046 831.538,619.997 832.097,606.055 832.656,660.333 833.215,662.363 833.775,681.547 834.334,698.246 834.893,681.997 835.452,715.686 836.012,732.363 836.571,682.419 837.13,700.512 837.689,715.846 838.249,664.604 838.808,635.503 839.367,624.021 839.926,628.228 840.486,633.672 841.045,635.074 841.604,636.36 842.163,657.661 842.723,661.208 843.282,681.238 843.841,684.383 844.4,666.354 844.96,681.661 845.519,715.068 846.078,730.808 846.637,727.395 847.197,721.573 847.756,737.305 848.315,734.898 848.874,716.13 849.434,717.455 849.993,716.439 850.552,748.453 851.111,746.794 851.671,760.488 852.23,759.6 852.789,805.863 853.348,783.893 853.908,809.092 854.467,816.559 855.026,796.561 855.585,807.143 856.145,814.02 856.704,775.917 857.263,786.16 857.822,779.988 858.382,773.74 858.941,768.112 859.5,763.435 860.059,791.021 860.619,815.096 861.178,824.469 861.737,785.317 862.296,774.577 862.856,752.453 863.415,750.761 863.974,779.285 864.533,810.265 865.093,789.375 865.652,787.109 866.211,783.025 866.77,780.951 867.33,741.894 867.889,754.064 868.448,763.944 869.007,774.45 869.567,757.088 870.126,771.548 870.685,767.618 871.244,747.064 871.804,741.313 872.363,740.515 872.922,771.353 873.481,718.72 874.041,684.799 874.6,666.649 875.159,686.97 875.718,664.944 876.278,652.273 876.837,639.847 877.396,658.265 877.955,660.302 878.515,628.492 879.074,599.185 879.633,635.781 880.192,655.899 880.752,640.836 881.311,661.425 881.87,695.669 882.429,697.831 882.989,713.796 883.548,696.596 884.107,711.572 884.666,724.541 885.226,720.223 885.785,715.835 886.344,715.856 886.903,697.971 887.463,682.882 888.022,701.919 888.581,696.236 889.14,696.267 889.7,711.915 890.259,692.775 890.818,723.512 891.377,718.201 891.937,731.252 892.496,729.758 893.055,712.28 893.614,727.295 894.174,710.29 894.733,661.402 895.292,663.681 895.851,678.831 896.411,710.249 896.97,725.669 897.529,771.992 898.088,767.135 898.648,730.616 899.207,647.14 899.766,617.319 900.325,619.138 900.885,670.74 901.444,671.584 902.003,672.191 902.562,643.624 903.122,629.376 903.681,631.458 904.24,669.863 904.799,669.828 905.359,669.961 905.918,671.826 906.477,689.925 907.036,704.189 907.596,718.264 908.155,720.182 908.714,703.49 909.273,700.699 909.833,716.52 910.392,715.014 910.951,698.549 911.51,695.911 912.07,712.981 912.629,677.035 913.188,662.846 913.747,613.449 914.307,616.099 914.866,602.626 915.425,591.812 915.984,629.256 916.544,633.849 917.103,666.576 917.662,666.219 918.221,637.966 918.781,655.151 919.34,624.466 919.899,609.709 920.458,627.25 921.018,681.119 921.577,696.97 922.136,678.972 922.695,677.79 923.255,693.262 923.814,712.369 924.373,726.899 924.932,707.572 925.492,723.86 926.051,708.076 926.61,720.11 927.169,669.192 927.729,655.012 928.288,642.92 928.847,594.812 929.406,602.376 929.966,586.454 930.525,590.319 931.084,546.354 931.644,584.617 932.203,587.176 932.762,576.201 933.321,597.267 933.881,599.913 934.44,625.658 934.999,598.672 935.558,634.907 936.118,656.792 936.677,677.832 937.236,660.378 937.795,662.528 938.355,680.627 938.914,680.496 939.473,679.537 940.032,692.273 940.592,696.434 941.151,715.279 941.71,693.915 942.269,706.707 942.829,693.918 943.388,694.241 943.947,707.868 944.506,672.759 945.066,657.091 945.625,656.903 946.184,644.576 946.743,644.203 947.303,631.28 947.862,649.3 948.421,668.95 948.98,702.914 949.54,718.117 950.099,716.367 950.658,716.441 951.217,732.518 951.777,731.908 952.336,712.809 952.895,694.836 953.454,692.632 954.014,721.943 954.573,703.927 955.132,747.586 955.691,744.972 956.251,740.954 956.81,786.657 957.369,750.353 957.928,715.726 958.488,695.38 959.047,723.412 959.606,717.53 960.165,716.21 960.725,699.461 961.284,681.258 961.843,681.613 962.402,713.059 962.962,693.137 963.521,692.034 964.08,674.258 964.639,706.049 965.199,686.986 965.758,670.459 966.317,637.28 966.876,653.378 967.436,655.553 967.995,639.566 968.554,609.527 969.113,616.889 969.673,604.767 970.232,590.664 970.791,595.041 971.35,600.865 971.91,588.673 972.469,610.109 973.028,616.395 973.587,650.728 974.147,637.251 974.706,638.354 975.265,637.749 975.824,624.464 976.384,625.657 976.943,642.417 977.502,645.006 978.061,647.776 978.621,694.557 979.18,692.848 979.739,690.612 980.298,707.3 980.858,674.443 981.417,695.287 981.976,684.107 982.535,685.152 983.095,699.706 983.654,684.442 984.213,689.105 984.772,675.539 985.332,657.592 985.891,659.554 986.45,690.467 987.009,689.671 987.569,688.108 988.128,708.003 988.687,737.585 989.246,733.955 989.806,728.815 990.365,726.909 990.924,707.72 991.483,718.191 992.043,685.012 992.602,702.393 993.161,701.041 993.72,746.289 994.28,774.161 994.839,786.736 995.398,778.679 995.957,756.957 996.517,754.795 997.076,736.27 997.635,715.06 998.194,731.155 998.754,732.891 999.313,729.844 999.872,743.801 1000.43,755.596 1000.99,784.492 1001.55,733.654 1002.11,700.165 1002.67,715.894 1003.23,729.722 1003.79,743.343 1004.35,740.658 1004.91,765.008 1005.46,759.923 1006.02,772.157 1006.58,764.885 1007.14,759.897 1007.7,770.201 1008.26,762.421 1008.82,739.91 1009.38,736.307 1009.94,749.239 1010.5,725.925 1011.06,689.495 1011.62,709.886 1012.18,673.451 1012.73,642.538 1013.29,647.751 1013.85,649.999 1014.41,636.74 1014.97,637.655 1015.53,590.536 1016.09,579.788 1016.65,599.906 1017.21,605.318 1017.77,610.652 1018.33,645.732 1018.89,661.364 1019.45,663.077 1020.01,616.332 1020.56,620.862 1021.12,607.741 1021.68,592.707 1022.24,600.302 1022.8,592.479 1023.36,565.304 1023.92,555.938 1024.48,578.733 1025.04,532.613 1025.6,586.52 1026.16,572.386 1026.72,563.378 1027.28,570.46 1027.83,594.23 1028.39,615.108 1028.95,600.622 1029.51,586.948 1030.07,593.504 1030.63,566.491 1031.19,555.824 1031.75,561.623 1032.31,584.243 1032.87,602.613 1033.43,623.817 1033.99,645.883 1034.55,679.401 1035.1,698.53 1035.66,684.227 1036.22,716.422 1036.78,680.662 1037.34,682.841 1037.9,698.078 1038.46,699.236 1039.02,712.36 1039.58,710.107 1040.14,689.061 1040.7,689.527 1041.26,671.001 1041.82,672.149 1042.38,642.571 1042.93,660.707 1043.49,693.369 1044.05,710.484 1044.61,725.214 1045.17,758.413 1045.73,720.264 1046.29,698.847 1046.85,732.897 1047.41,761.931 1047.97,758.957 1048.53,724.326 1049.09,704.482 1049.65,688.663 1050.2,723.558 1050.76,688.342 1051.32,686.434 1051.88,670.141 1052.44,671.59 1053,654.023 1053.56,656.269 1054.12,640.468 1054.68,610.412 1055.24,598.294 1055.8,620.886 1056.36,640.487 1056.92,638.833 1057.48,660.064 1058.03,647.064 1058.59,648.477 1059.15,617.376 1059.71,622.528 1060.27,609.322 1060.83,630.568 1061.39,646.616 1061.95,663.154 1062.51,660.844 1063.07,682.393 1063.63,696.344 1064.19,696.278 1064.75,744.981 1065.3,727.221 1065.86,694.848 1066.42,695.683 1066.98,714.503 1067.54,726.873 1068.1,739.446 1068.66,753.879 1069.22,719.4 1069.78,718.669 1070.34,718.115 1070.9,730.512 1071.46,743.746 1072.02,724.365 1072.57,786.557 1073.13,766.93 1073.69,780.17 1074.25,774.154 1074.81,786.051 1075.37,829.121 1075.93,822.638 1076.49,830.005 1077.05,843.114 1077.61,835.793 1078.17,826.898 1078.73,782.25 1079.29,810.65 1079.85,772.746 1080.4,771.477 1080.96,781.108 1081.52,792.323 1082.08,772.397 1082.64,784.311 1083.2,778.512 1083.76,773.921 1084.32,768.624 1084.88,779.491 1085.44,777.455 1086,773.51 1086.56,768.043 1087.12,759.721 1087.67,772.31 1088.23,720.278 1088.79,732.272 1089.35,711.14 1089.91,724.3 1090.47,702.76 1091.03,685.457 1091.59,714.951 1092.15,696.476 1092.71,725.172 1093.27,670.85 1093.83,701.526 1094.39,718.994 1094.94,703.585 1095.5,718.646 1096.06,720.027 1096.62,699.546 1097.18,710.789 1097.74,740.422 1098.3,733.86 1098.86,761.498 1099.42,739.844 1099.98,719.229 1100.54,699.084 1101.1,685.943 1101.66,653.566 1102.22,685.612 1102.77,668.348 1103.33,685.995 1103.89,685.335 1104.45,705.271 1105.01,636.432 1105.57,607.025 1106.13,672.243 1106.69,703.064 1107.25,718.308 1107.81,714.494 1108.37,693.784 1108.93,659.685 1109.49,694.097 1110.04,708.861 1110.6,711.932 1111.16,725.589 1111.72,754.742 1112.28,714.372 1112.84,684.757 1113.4,685.767 1113.96,685.187 1114.52,668.817 1115.08,638.282 1115.64,656.058 1116.2,674.62 1116.76,641.596 1117.31,658.091 1117.87,645.344 1118.43,631.416 1118.99,631.828 1119.55,615.448 1120.11,636.38 1120.67,637.25 1121.23,624.534 1121.79,657.884 1122.35,675.539 1122.91,628.652 1123.47,599.053 1124.03,623.173 1124.59,625.874 1125.14,643.879 1125.7,646.114 1126.26,649.365 1126.82,652.107 1127.38,647.544 1127.94,649.352 1128.5,653.331 1129.06,624.452 1129.62,628.425 1130.18,586.022 1130.74,609.795 1131.3,646.55 1131.86,598.555 1132.41,636.223 1132.97,641.777 1133.53,646.158 1134.09,651.412 1134.65,653.426 1135.21,619.035 1135.77,572.671 1136.33,595.477 1136.89,614.009 1137.45,619.374 1138.01,607.04 1138.57,626.249 1139.13,645.625 1139.68,613.619 1140.24,617.504 1140.8,655.695 1141.36,673.144 1141.92,653.916 1142.48,653.858 1143.04,670.098 1143.6,669.577 1144.16,689.958 1144.72,720.976 1145.28,684.002 1145.84,670.858 1146.4,656.398 1146.96,638.127 1147.51,642.712 1148.07,646.147 1148.63,616.39 1149.19,604.233 1149.75,644.129 1150.31,646.443 1150.87,636.475 1151.43,639.169 1151.99,627.64 1152.55,630.787 1153.11,632.732 1153.67,620.354 1154.23,639.91 1154.78,654.688 1155.34,672.006 1155.9,672.284 1156.46,621.399 1157.02,607.21 1157.58,595.862 1158.14,598.26 1158.7,602.669 1159.26,570.911 1159.82,608.724 1160.38,614.131 1160.94,628.916 1161.5,616.861 1162.05,619.702 1162.61,671.806 1163.17,693.299 1163.73,693.406 1164.29,693.149 1164.85,694.397 1165.41,711.246 1165.97,726.83 1166.53,720.772 1167.09,735.831 1167.65,750.714 1168.21,746.833 1168.77,739.358 1169.33,753.315 1169.88,748.899 1170.44,730.993 1171,730.159 1171.56,694.905 1172.12,695.235 1172.68,690.613 1173.24,655.83 1173.8,688.931 1174.36,722.995 1174.92,704.771 1175.48,686.673 1176.04,687.068 1176.6,688.44 1177.15,705.161 1177.71,672.689 1178.27,674.105 1178.83,673.883 1179.39,706.814 1179.95,739.275 1180.51,737.928 1181.07,737.765 1181.63,720.181 1182.19,685.294 1182.75,669.978 1183.31,655.517 1183.87,640.148 1184.43,639.501 1184.98,639.957 1185.54,656.971 1186.1,673.71 1186.66,708.796 1187.22,740.646 1187.78,738.954 1188.34,739.565 1188.9,736.934 1189.46,733.62 1190.02,733.976 1190.58,712.941 1191.14,730.849 1191.7,726.436 1192.25,755.479 1192.81,749.712 1193.37,759.152 1193.93,771.555 1194.49,766.073 1195.05,730.308 1195.61,743.351 1196.17,675.557 1196.73,728.761 1197.29,709.726 1197.85,727.153 1198.41,759.324 1198.97,757.808 1199.52,769.971 1200.08,769.659 1200.64,780.995 1201.2,774.636 1201.76,750.952 1202.32,744.283 1202.88,710.075 1203.44,679.253 1204,677.503 1204.56,681.006 1205.12,697.601 1205.68,712.118 1206.24,742.317 1206.8,725.302 1207.35,723.972 1207.91,722.178 1208.47,738.494 1209.03,753.437 1209.59,781.793 1210.15,762.058 1210.71,729.759 1211.27,711.327 1211.83,742.34 1212.39,725.375 1212.95,720.209 1213.51,735.084 1214.07,715.249 1214.62,696.648 1215.18,696.228 1215.74,695.284 1216.3,696.16 1216.86,694.667 1217.42,710.071 1217.98,722.928 1218.54,721.519 1219.1,717.931 1219.66,717.022 1220.22,718.341 1220.78,734.516 1221.34,731.362 1221.89,682.895 1222.45,695.899 1223.01,680.806 1223.57,693.885 1224.13,694.115 1224.69,628.588 1225.25,612.224 1225.81,594.52 1226.37,599.078 1226.93,632.74 1227.49,599.742 1228.05,603.361 1228.61,640.745 1229.17,643.569 1229.72,613.753 1230.28,617.248 1230.84,621.293 1231.4,640.79 1231.96,657.639 1232.52,660.127 1233.08,677.4 1233.64,681.139 1234.2,698.631 1234.76,700.087 1235.32,698.935 1235.88,728.734 1236.44,725.407 1236.99,723.078 1237.55,724.288 1238.11,689.101 1238.67,688.714 1239.23,722.755 1239.79,721.176 1240.35,739.91 1240.91,751.204 1241.47,717.487 1242.03,714.276 1242.59,729.311 1243.15,725.982 1243.71,723.847 1244.26,740.925 1244.82,723.297 1245.38,722.478 1245.94,752.249 1246.5,780.581 1247.06,712.29 1247.62,710.164 1248.18,743.507 1248.74,740.181 1249.3,721.029 1249.86,704.161 1250.42,652.473 1250.98,670.73 1251.54,671.812 1252.09,675.117 1252.65,688.956 1253.21,687.797 1253.77,683.598 1254.33,667.199 1254.89,666.738 1255.45,650.985 1256.01,686.208 1256.57,720.862 1257.13,669.252 1257.69,683.554 1258.25,717.241 1258.81,717.019 1259.36,663.593 1259.92,663.509 1260.48,632.62 1261.04,617.64 1261.6,605.197 1262.16,624.814 1262.72,680.146 1263.28,679.258 1263.84,679.742 1264.4,695.741 1264.96,681.565 1265.52,634.151 1266.08,635.171 1266.63,652.246 1267.19,656.766 1267.75,676.792 1268.31,708.339 1268.87,738.112 1269.43,723.116 1269.99,723.734 1270.55,702.365 1271.11,682.846 1271.67,653.44 1272.23,656.499 1272.79,642.952 1273.35,615.994 1273.91,586.401 1274.46,607.218 1275.02,643.59 1275.58,643.619 1276.14,629.053 1276.7,662.88 1277.26,681.021 1277.82,715.106 1278.38,730.537 1278.94,743.654 1279.5,719.835 1280.06,718.595 1280.62,728.438 1281.18,722.57 1281.73,752.268 1282.29,717.518 1282.85,668.273 1283.41,670.847 1283.97,668.78 1284.53,683.674 1285.09,662.163 1285.65,666.349 1286.21,681.354 1286.77,700.392 1287.33,666.282 1287.89,655.229 1288.45,640.907 1289,657.096 1289.56,624.906 1290.12,626.633 1290.68,647.725 1291.24,680.614 1291.8,667.781 1292.36,664.114 1292.92,667.603 1293.48,655.141 1294.04,685.917 1294.6,638.569 1295.16,643.183 1295.72,645.551 1296.28,648.703 1296.83,653.628 1297.39,670.067 1297.95,636.983 1298.51,639.085 1299.07,643.409 1299.63,615.173 1300.19,604.436 1300.75,611.856 1301.31,600.987 1301.87,602.101 1302.43,607.078 1302.99,613.36 1303.55,616.082 1304.1,623.595 1304.66,643.455 1305.22,595.799 1305.78,600.399 1306.34,587.307 1306.9,592.327 1307.46,598.959 1308.02,616.769 1308.58,634.673 1309.14,633.848 1309.7,666.34 1310.26,682.159 1310.82,680.423 1311.38,699.328 1311.93,695.641 1312.49,740.935 1313.05,690.592 1313.61,692.523 1314.17,692.884 1314.73,695.324 1315.29,713.608 1315.85,694.582 1316.41,709.422 1316.97,707.237 1317.53,704.308 1318.09,700.449 1318.65,731.042 1319.2,731.193 1319.76,747.692 1320.32,759.787 1320.88,755.673 1321.44,734.86 1322,716.489 1322.56,711.288 1323.12,692.11 1323.68,709.044 1324.24,710.1 1324.8,723.948 1325.36,720.737 1325.92,683.969 1326.47,684.096 1327.03,687.687 1327.59,674.224 1328.15,673.343 1328.71,657.977 1329.27,691.4 1329.83,706.775 1330.39,723.253 1330.95,736.739 1331.51,736.061 1332.07,732.383 1332.63,715.057 1333.19,681.235 1333.75,680.516 1334.3,683.403 1334.86,650.792 1335.42,670.39 1335.98,677.831 1336.54,661.571 1337.1,664.14 1337.66,666.343 1338.22,684.165 1338.78,635.495 1339.34,604.669 1339.9,610.327 1340.46,628.908 1341.02,616.469 1341.57,617.189 1342.13,638.915 1342.69,625.802 1343.25,644.347 1343.81,642.29 1344.37,627.32 1344.93,616.047 1345.49,619.397 1346.05,655.128 1346.61,672.84 1347.17,672.826 1347.73,641.108 1348.29,643.851 1348.84,643.262 1349.4,645.796 1349.96,650.538 1350.52,670.316 1351.08,672.383 1351.64,642.59 1352.2,679.34 1352.76,679.44 1353.32,665.309 1353.88,667.164 1354.44,685.28 1355,687.294 1355.56,656.79 1356.12,654.165 1356.67,656.812 1357.23,658.612 1357.79,661.391 1358.35,675.955 1358.91,675.405 1359.47,693.689 1360.03,695.584 1360.59,678.843 1361.15,659.545 1361.71,661.197 1362.27,642.379 1362.83,645.782 1363.39,666.633 1363.94,682.703 1364.5,715.979 1365.06,698.82 1365.62,701.839 1366.18,699.344 1366.74,695.649 1367.3,647.845 1367.86,667.156 1368.42,689.032 1368.98,669.21 1369.54,668.869 1370.1,683.916 1370.66,687.045 1371.21,674.097 1371.77,657.741 1372.33,628.39 1372.89,678.533 1373.45,675.077 1374.01,675.283 1374.57,679.371 1375.13,712.91 1375.69,679.01 1376.25,726.973 1376.81,731.106 1377.37,747.271 1377.93,759.49 1378.49,756.651 1379.04,738.158 1379.6,750.194 1380.16,748.207 1380.72,762.241 1381.28,725.183 1381.84,724.088 1382.4,722.16 1382.96,720.322 1383.52,766.65 1384.08,806.215 1384.64,816.62 1385.2,827.311 1385.76,786.261 1386.31,794.777 1386.87,786.506 1387.43,779.264 1387.99,724.676 1388.55,754.351 1389.11,767.651 1389.67,761.87 1390.23,755.653 1390.79,763.71 1391.35,725.329 1391.91,722.8 1392.47,719.912 1393.03,699.753 1393.58,667.594 1394.14,681.438 1394.7,679.337 1395.26,681.549 1395.82,715.965 1396.38,678.934 1396.94,694.272 1397.5,722.197 1398.06,717.315 1398.62,749.626 1399.18,763.847 1399.74,679.966 1400.3,729.072 1400.86,693.962 1401.41,675.046 1401.97,657.79 1402.53,640.868 1403.09,659.325 1403.65,709.291 1404.21,692.626 1404.77,709.217 1405.33,691.25 1405.89,688.88 1406.45,720.041 1407.01,733.44 1407.57,728.89 1408.13,728.522 1408.68,727.656 1409.24,724.405 1409.8,723.175 1410.36,706.204 1410.92,671.13 1411.48,636.766 1412.04,688.089 1412.6,687.737 1413.16,624.991 1413.72,596.092 1414.28,596.97 1414.84,602.526 1415.4,602.936 1415.95,590.67 1416.51,628.427 1417.07,631.316 1417.63,666.185 1418.19,664.982 1418.75,666.509 1419.31,684.69 1419.87,668.523 1420.43,651.991 1420.99,637.311 1421.55,640.246 1422.11,642.507 1422.67,678.428 1423.23,677.502 1423.78,661.04 1424.34,646.596 1424.9,664.575 1425.46,684.655 1426.02,698.442 1426.58,685.315 1427.14,669.356 1427.7,668.816 1428.26,667.462 1428.82,668.24 1429.38,669.858 1429.94,686.544 1430.5,702.974 1431.05,637.706 1431.61,640.625 1432.17,641.108 1432.73,626.962 1433.29,635.26 1433.85,639.919 1434.41,625.878 1434.97,632.281 1435.53,615.963 1436.09,602.618 1436.65,593.555 1437.21,629.048 1437.77,613.82 1438.33,571.179 1438.88,579.089 1439.44,598.87 1440,602.18 1440.56,625.454 1441.12,628.467 1441.68,627.171 1442.24,646.203 1442.8,632.181 1443.36,664.097 1443.92,664.481 1444.48,698.667 1445.04,714.418 1445.6,715.224 1446.15,747.244 1446.71,712.046 1447.27,694.141 1447.83,646.485 1448.39,730.401 1448.95,709.553 1449.51,709.367 1450.07,660.828 1450.63,662.889 1451.19,631.025 1451.75,699.964 1452.31,715.943 1452.87,763.121 1453.42,804.217 1453.98,765.602 1454.54,759.782 1455.1,755.145 1455.66,766.137 1456.22,794.326 1456.78,806.302 1457.34,816.22 1457.9,824.744 1458.46,838.257 1459.02,795.02 1459.58,759.321 1460.14,773.743 1460.7,734.066 1461.25,715.099 1461.81,699.516 1462.37,680.887 1462.93,583.918 1463.49,606.493 1464.05,613.215 1464.61,581.277 1465.17,572.069 1465.73,577.805 1466.29,599.988 1466.85,622.267 1467.41,607.741 1467.97,611.065 1468.52,598.289 1469.08,603.403 1469.64,638.018 1470.2,625.185 1470.76,629.759 1471.32,631.084 1471.88,631.843 1472.44,635.455 1473,655.189 1473.56,660.327 1474.12,676.502 1474.68,643.3 1475.24,642.564 1475.79,678.462 1476.35,682.287 1476.91,683.396 1477.47,714.833 1478.03,726.371 1478.59,724.675 1479.15,756.912 1479.71,771.718 1480.27,779.74 1480.83,776.233 1481.39,775.226 1481.95,771.187 1482.51,731.739 1483.07,694.172 1483.62,677.91 1484.18,676.377 1484.74,662.112 1485.3,631.356 1485.86,620.956 1486.42,622.384 1486.98,626.37 1487.54,612.632 1488.1,611.933 1488.66,649.893 1489.22,671.655 1489.78,657.683 1490.34,672.513 1490.89,707.014 1491.45,739.719 1492.01,722.521 1492.57,700.372 1493.13,717.161 1493.69,701.74 1494.25,700.101 1494.81,681.487 1495.37,665.561 1495.93,649.663 1496.49,668.076 1497.05,669.271 1497.61,685.035 1498.16,665.4 1498.72,617.26 1499.28,639.311 1499.84,658.456 1500.4,627.364 1500.96,661.872 1501.52,677.415 1502.08,614.806 1502.64,618.439 1503.2,635.454 1503.76,654.994 1504.32,675.725 1504.88,688.005 1505.44,673.012 1505.99,694.728 1506.55,710.483 1507.11,726.218 1507.67,726.786 1508.23,723.706 1508.79,748.422 1509.35,764.328 1509.91,741.159 1510.47,734.663 1511.03,697.458 1511.59,696.961 1512.15,711.88 1512.71,697.177 1513.26,663.948 1513.82,636.108 1514.38,674.466 1514.94,670.664 1515.5,718.87 1516.06,703.473 1516.62,669.483 1517.18,670.116 1517.74,750.367 1518.3,727.631 1518.86,760.875 1519.42,745.013 1519.98,754.994 1520.53,783.708 1521.09,749.914 1521.65,764.953 1522.21,729.9 1522.77,746.248 1523.33,729.977 1523.89,709.369 1524.45,705.881 1525.01,703.559 1525.57,673.101 1526.13,689.309 1526.69,701.982 1527.25,700.743 1527.81,698.83 1528.36,697.183 1528.92,695.053 1529.48,682.352 1530.04,700.112 1530.6,698.58 1531.16,682.529 1531.72,666.569 1532.28,670.463 1532.84,689.098 1533.4,689.511 1533.96,688.687 1534.52,640.145 1535.08,672.455 1535.63,675.483 1536.19,721.682 1536.75,701.322 1537.31,766.389 1537.87,763.079 1538.43,694.323 1538.99,680.026 1539.55,682.117 1540.11,714.963 1540.67,716.342 1541.23,744.689 1541.79,723.19 1542.35,719.729 1542.9,700.806 1543.46,712.982 1544.02,712.682 1544.58,722.95 1545.14,735.697 1545.7,715.698 1546.26,711.088 1546.82,708.361 1547.38,704.709 1547.94,750.069 1548.5,780.33 1549.06,773.707 1549.62,769.62 1550.18,748.794 1550.73,791.347 1551.29,801.162 1551.85,793.745 1552.41,774.618 1552.97,801.433 1553.53,779.687 1554.09,785.705 1554.65,779.972 1555.21,744.565 1555.77,724.832 1556.33,706.133 1556.89,688.291 1557.45,669.812 1558,687.911 1558.56,689.512 1559.12,658.132 1559.68,645.162 1560.24,649.112 1560.8,650.924 1561.36,669.749 1561.92,653.931 1562.48,654.162 1563.04,658.421 1563.6,646.563 1564.16,632.186 1564.72,634.661 1565.28,668.281 1565.83,699.94 1566.39,679.868 1566.95,690.373 1567.51,671.584 1568.07,690.841 1568.63,691.008 1569.19,707.69 1569.75,721.491 1570.31,704.625 1570.87,717.162 1571.43,679.285 1571.99,713.566 1572.55,680.832 1573.1,650.511 1573.66,653.451 1574.22,689.481 1574.78,657.313 1575.34,660.14 1575.9,643.988 1576.46,626.684 1577.02,665.425 1577.58,667.843 1578.14,670.239 1578.7,656.186 1579.26,640.818 1579.82,644.575 1580.37,646.364 1580.93,667.122 1581.49,698.489 1582.05,682.157 1582.61,728.93 1583.17,727.651 1583.73,705.437 1584.29,703.756 1584.85,701.476 1585.41,698.825 1585.97,715.675 1586.53,699.486 1587.09,714.096 1587.65,664.803 1588.2,634.019 1588.76,668.503 1589.32,664.117 1589.88,679.22 1590.44,663.611 1591,664.423 1591.56,648.358 1592.12,681.41 1592.68,666.99 1593.24,665.944 1593.8,684.884 1594.36,686.426 1594.92,687.208 1595.47,704.453 1596.03,707.672 1596.59,708.922 1597.15,715.023 1597.71,715.165 1598.27,700.628 1598.83,685.155 1599.39,687.287 1599.95,667.999 1600.51,685.33 1601.07,684.593 1601.63,654.015 1602.19,641.45 1602.74,646.376 1603.3,648.637 1603.86,652.176 1604.42,657.097 1604.98,641.692 1605.54,647.458 1606.1,650.075 1606.66,636.722 1607.22,644.602 1607.78,632.226 1608.34,681.749 1608.9,681.057 1609.46,650.146 1610.02,603.944 1610.57,610.514 1611.13,616.368 1611.69,621.028 1612.25,626.333 1612.81,614.275 1613.37,618.169 1613.93,637.79 1614.49,657.613 1615.05,691.921 1615.61,676.488 1616.17,677.559 1616.73,742.031 1617.29,707.516 1617.84,643.163 1618.4,661.151 1618.96,643.069 1619.52,662.206 1620.08,659.749 1620.64,645.155 1621.2,711.991 1621.76,710.414 1622.32,709.989 1622.88,705.81 1623.44,719.198 1624,728.657 1624.56,724.196 1625.11,719.18 1625.67,681.854 1626.23,679.911 1626.79,711.894 1627.35,711.082 1627.91,697.966 1628.47,730.815 1629.03,728.283 1629.59,729.329 1630.15,742.035 1630.71,724.09 1631.27,707.64 1631.83,717.775 1632.39,720.045 1632.94,682.441 1633.5,689.312 1634.06,673.008 1634.62,689.83 1635.18,690.461 1635.74,658.357 1636.3,692.568 1636.86,688.252 1637.42,730.805 1637.98,742.305 1638.54,769.631 1639.1,730.994 1639.66,728.137 1640.21,758.184 1640.77,754.592 1641.33,783.968 1641.89,797.857 1642.45,808.519 1643.01,751.757 1643.57,716.836 1644.13,715.309 1644.69,713.244 1645.25,711.806 1645.81,727.018 1646.37,723.941 1646.93,723.071 1647.48,702.796 1648.04,699.87 1648.6,699.362 1649.16,699.943 1649.72,712.862 1650.28,708.376 1650.84,692.676 1651.4,674.949 1651.96,689.53 1652.52,685.562 1653.08,685.675 1653.64,686.025 1654.2,686.027 1654.76,686.91 1655.31,684.989 1655.87,683.744 1656.43,700.609 1656.99,680.4 1657.55,661.418 1658.11,665.513 1658.67,632.049 1659.23,683.608 1659.79,699.337 1660.35,700.212 1660.91,698.201 1661.47,697.521 1662.03,712.3 1662.58,679.754 1663.14,694.249 1663.7,708.317 1664.26,689.842 1664.82,719.958 1665.38,701.198 1665.94,682.775 1666.5,668.553 1667.06,702.867 1667.62,684.504 1668.18,701.563 1668.74,698.871 1669.3,682.476 1669.85,679.713 1670.41,647.464 1670.97,647.778 1671.53,631.689 1672.09,633.946 1672.65,620.007 1673.21,592.289 1673.77,582.817 1674.33,600.814 1674.89,569.812 1675.45,579.502 1676.01,569.736 1676.57,559.869 1677.13,584.323 1677.68,585.175 1678.24,639.634 1678.8,609.294 1679.36,578.923 1679.92,579.338 1680.48,552.327 1681.04,528.615 1681.6,537.667 1682.16,548.152 1682.72,557.51 1683.28,580.384 1683.84,621.512 1684.4,623.937 1684.95,657.781 1685.51,693.269 1686.07,658.67 1686.63,658.065 1687.19,645.448 1687.75,664.985 1688.31,711.997 1688.87,692.917 1689.43,674.541 1689.99,708.962 1690.55,709.723 1691.11,725.765 1691.67,725.992 1692.23,737.335 1692.78,704.406 1693.34,689.17 1693.9,705.056 1694.46,720.159 1695.02,717.807 1695.58,699.064 1696.14,681.149 1696.7,681.677 1697.26,682.629 1697.82,714.381 1698.38,728.26 1698.94,726.434 1699.5,743.757 1700.05,709.136 1700.61,739.599 1701.17,755.114 1701.73,705.559 1702.29,670.408 1702.85,672.667 1703.41,670.691 1703.97,674.027 1704.53,692.31 1705.09,678.167 1705.65,694.022 1706.21,696.063 1706.77,709.655 1707.32,758.365 1707.88,754.668 1708.44,768.261 1709,777.701 1709.56,771.094 1710.12,815 1710.68,792.795 1711.24,801.237 1711.8,798.154 1712.36,790.523 1712.92,769.868 1713.48,765.818 1714.04,794.467 1714.6,837.646 1715.15,844.319 1715.71,833.578 1716.27,825.276 1716.83,783.452 1717.39,759.456 1717.95,655.183 1718.51,674.892 1719.07,643.14 1719.63,645.356 1720.19,679.375 1720.75,665.055 1721.31,665.82 1721.87,683.507 1722.42,683.961 1722.98,700.967 1723.54,664.767 1724.1,666.781 1724.66,634.136 1725.22,638.221 1725.78,640.462 1726.34,643.432 1726.9,644.84 1727.46,583.163 1728.02,587.887 1728.58,611.327 1729.14,648.495 1729.69,664.715 1730.25,647.263 1730.81,614.66 1731.37,650.579 1731.93,665.214 1732.49,651.87 1733.05,621.061 1733.61,591.008 1734.17,597.168 1734.73,614.254 1735.29,619.78 1735.85,656.376 1736.41,643.139 1736.97,611.603 1737.52,649.531 1738.08,637.42 1738.64,636.127 1739.2,654.462 1739.76,688.439 1740.32,692.22 1740.88,691.966 1741.44,692.258 1742,724.035 1742.56,689.914 1743.12,706.724 1743.68,733.901 1744.24,715.584 1744.79,729.965 1745.35,727.995 1745.91,695.515 1746.47,697.25 1747.03,692.494 1747.59,689.343 1748.15,690.993 1748.71,720.727 1749.27,702.008 1749.83,665.524 1750.39,663.945 1750.95,633.209 1751.51,633.594 1752.06,637.155 1752.62,620.936 1753.18,624.715 1753.74,645.662 1754.3,600.592 1754.86,606.508 1755.42,596.261 1755.98,567.241 1756.54,623.203 1757.1,671.931 1757.66,659.154 1758.22,660.222 1758.78,676.072 1759.34,674.055 1759.89,710.28 1760.45,724.726 1761.01,739.269 1761.57,739.358 1762.13,720.024 1762.69,683.659 1763.25,701.578 1763.81,686.019 1764.37,685.222 1764.93,687.182 1765.49,669.9 1766.05,655.065 1766.61,654.824 1767.16,674.477 1767.72,676.74 1768.28,675.695 1768.84,676.643 1769.4,676.306 1769.96,688.415 1770.52,673.647 1771.08,674.505 1771.64,719.955 1772.2,684.644 1772.76,684.752 1773.32,668.842 1773.88,672.266 1774.43,671.87 1774.99,674.428 1775.55,677.273 1776.11,675.104 1776.67,676.957 1777.23,694.453 1777.79,695.239 1778.35,727.359 1778.91,737.891 1779.47,750.985 1780.03,750.433 1780.59,765.038 1781.15,760.602 1781.71,742.28 1782.26,754.799 1782.82,718.439 1783.38,684.866 1783.94,665.009 1784.5,684.542 1785.06,716.972 1785.62,698.154 1786.18,663.805 1786.74,665.945 1787.3,688.764 1787.86,688.345 1788.42,668.593 1788.98,640.241 1789.53,640.862 1790.09,676.116 1790.65,678.618 1791.21,680.302 1791.77,662.422 1792.33,644.06 1792.89,678.302 1793.45,711.871 1794.01,676.419 1794.57,661.17 1795.13,681.165 1795.69,727.062 1796.25,706.606 1796.8,691.136 1797.36,674.48 1797.92,675.136 1798.48,679.192 1799.04,728.963 1799.6,709.106 1800.16,692.022 1800.72,659.045 1801.28,648.466 1801.84,652.889 1802.4,655.299 1802.96,673.911 1803.52,663.251 1804.08,681.189 1804.63,683.941 1805.19,667.018 1805.75,634.988 1806.31,623.501 1806.87,642.384 1807.43,661.875 1807.99,646.267 1808.55,635.47 1809.11,602.218 1809.67,607.974 1810.23,613.458 1810.79,649.76 1811.35,640.163 1811.9,640.738 1812.46,627.244 1813.02,644.227 1813.58,599.758 1814.14,605.441 1814.7,640.479 1815.26,660.016 1815.82,659.874 1816.38,694.297 1816.94,679.772 1817.5,678.758 1818.06,693.888 1818.62,675.389 1819.18,662.6 1819.73,678.942 1820.29,667.848 1820.85,684.601 1821.41,668.906 1821.97,670.098 1822.53,672.704 1823.09,673.139 1823.65,678.405 1824.21,678.367 1824.77,707.851 1825.33,688.967 1825.89,737.056 1826.45,715.164 1827,715.173 1827.56,711.572 1828.12,726.315 1828.68,704.251 1829.24,719.7 1829.8,671.164 1830.36,658.283 1830.92,659.726 1831.48,663.391 1832.04,663.564 1832.6,628.461 1833.16,645.935 1833.72,629.216 1834.27,633.198 1834.83,687.541 1835.39,690.342 1835.95,709.045 1836.51,709.211 1837.07,693.319 1837.63,695.822 1838.19,712.598 \"/>\n<path clip-path=\"url(#clip653)\" d=\"M720.247 690.112 L720.806 690.112 L721.365 690.112 L721.924 690.112 L722.484 690.112 L723.043 690.112 L723.602 690.112 L724.161 690.112 L724.721 690.112 L725.28 690.112 L725.839 690.112 L726.398 690.112 L726.958 690.112 L727.517 690.112 L728.076 690.112 L728.635 690.112 L729.195 690.112 L729.754 690.112 L730.313 690.112 L730.872 690.112 L731.432 690.112 L731.991 690.112 L732.55 690.112 L733.109 690.112 L733.669 690.112 L734.228 690.112 L734.787 690.112 L735.346 690.112 L735.906 690.112 L736.465 690.112 L737.024 690.112 L737.583 690.112 L738.143 690.112 L738.702 690.112 L739.261 690.112 L739.82 690.112 L740.38 690.112 L740.939 690.112 L741.498 690.112 L742.057 690.112 L742.617 690.112 L743.176 690.112 L743.735 690.112 L744.294 690.112 L744.854 690.112 L745.413 690.112 L745.972 690.112 L746.531 690.112 L747.091 690.112 L747.65 690.112 L748.209 690.112 L748.768 690.112 L749.328 690.112 L749.887 690.112 L750.446 690.112 L751.005 690.112 L751.565 690.112 L752.124 690.112 L752.683 690.112 L753.242 690.112 L753.802 690.112 L754.361 690.112 L754.92 690.112 L755.479 690.112 L756.039 690.112 L756.598 690.112 L757.157 690.112 L757.716 690.112 L758.276 690.112 L758.835 690.112 L759.394 690.112 L759.953 690.112 L760.513 690.112 L761.072 690.112 L761.631 690.112 L762.19 690.112 L762.75 690.112 L763.309 690.112 L763.868 690.112 L764.427 690.112 L764.987 690.112 L765.546 690.112 L766.105 690.112 L766.664 690.112 L767.224 690.112 L767.783 690.112 L768.342 690.112 L768.901 690.112 L769.461 690.112 L770.02 690.112 L770.579 690.112 L771.138 690.112 L771.698 690.112 L772.257 690.112 L772.816 690.112 L773.375 690.112 L773.935 690.112 L774.494 690.112 L775.053 690.112 L775.612 690.112 L776.172 690.112 L776.731 690.112 L777.29 690.112 L777.849 690.112 L778.409 690.112 L778.968 690.112 L779.527 690.112 L780.086 690.112 L780.646 690.112 L781.205 690.112 L781.764 690.112 L782.323 690.112 L782.883 690.112 L783.442 690.112 L784.001 690.112 L784.56 690.112 L785.12 690.112 L785.679 690.112 L786.238 690.112 L786.797 690.112 L787.357 690.112 L787.916 690.112 L788.475 690.112 L789.034 690.112 L789.594 690.112 L790.153 690.112 L790.712 690.112 L791.271 690.112 L791.831 690.112 L792.39 690.112 L792.949 690.112 L793.508 690.112 L794.068 690.112 L794.627 690.112 L795.186 690.112 L795.745 690.112 L796.305 690.112 L796.864 690.112 L797.423 690.112 L797.982 690.112 L798.542 690.112 L799.101 690.112 L799.66 690.112 L800.219 690.112 L800.779 690.112 L801.338 690.112 L801.897 690.112 L802.456 690.112 L803.016 690.112 L803.575 690.112 L804.134 690.112 L804.693 690.112 L805.253 690.112 L805.812 690.112 L806.371 690.112 L806.931 690.112 L807.49 690.112 L808.049 690.112 L808.608 690.112 L809.168 690.112 L809.727 690.112 L810.286 690.112 L810.845 690.112 L811.405 690.112 L811.964 690.112 L812.523 690.112 L813.082 690.112 L813.642 690.112 L814.201 690.112 L814.76 690.112 L815.319 690.112 L815.879 690.112 L816.438 690.112 L816.997 690.112 L817.556 690.112 L818.116 690.112 L818.675 690.112 L819.234 690.112 L819.793 690.112 L820.353 690.112 L820.912 690.112 L821.471 690.112 L822.03 690.112 L822.59 690.112 L823.149 690.112 L823.708 690.112 L824.267 690.112 L824.827 690.112 L825.386 690.112 L825.945 690.112 L826.504 690.112 L827.064 690.112 L827.623 690.112 L828.182 690.112 L828.741 690.112 L829.301 690.112 L829.86 690.112 L830.419 690.112 L830.978 690.112 L831.538 690.112 L832.097 690.112 L832.656 690.112 L833.215 690.112 L833.775 690.112 L834.334 690.112 L834.893 690.112 L835.452 690.112 L836.012 690.112 L836.571 690.112 L837.13 690.112 L837.689 690.112 L838.249 690.112 L838.808 690.112 L839.367 690.112 L839.926 690.112 L840.486 690.112 L841.045 690.112 L841.604 690.112 L842.163 690.112 L842.723 690.112 L843.282 690.112 L843.841 690.112 L844.4 690.112 L844.96 690.112 L845.519 690.112 L846.078 690.112 L846.637 690.112 L847.197 690.112 L847.756 690.112 L848.315 690.112 L848.874 690.112 L849.434 690.112 L849.993 690.112 L850.552 690.112 L851.111 690.112 L851.671 690.112 L852.23 690.112 L852.789 690.112 L853.348 690.112 L853.908 690.112 L854.467 690.112 L855.026 690.112 L855.585 690.112 L856.145 690.112 L856.704 690.112 L857.263 690.112 L857.822 690.112 L858.382 690.112 L858.941 690.112 L859.5 690.112 L860.059 690.112 L860.619 690.112 L861.178 690.112 L861.737 690.112 L862.296 690.112 L862.856 690.112 L863.415 690.112 L863.974 690.112 L864.533 690.112 L865.093 690.112 L865.652 690.112 L866.211 690.112 L866.77 690.112 L867.33 690.112 L867.889 690.112 L868.448 690.112 L869.007 690.112 L869.567 690.112 L870.126 690.112 L870.685 690.112 L871.244 690.112 L871.804 690.112 L872.363 690.112 L872.922 690.112 L873.481 690.112 L874.041 690.112 L874.6 690.112 L875.159 690.112 L875.718 690.112 L876.278 690.112 L876.837 690.112 L877.396 690.112 L877.955 690.112 L878.515 690.112 L879.074 690.112 L879.633 690.112 L880.192 690.112 L880.752 690.112 L881.311 690.112 L881.87 690.112 L882.429 690.112 L882.989 690.112 L883.548 690.112 L884.107 690.112 L884.666 690.112 L885.226 690.112 L885.785 690.112 L886.344 690.112 L886.903 690.112 L887.463 690.112 L888.022 690.112 L888.581 690.112 L889.14 690.112 L889.7 690.112 L890.259 690.112 L890.818 690.112 L891.377 690.112 L891.937 690.112 L892.496 690.112 L893.055 690.112 L893.614 690.112 L894.174 690.112 L894.733 690.112 L895.292 690.112 L895.851 690.112 L896.411 690.112 L896.97 690.112 L897.529 690.112 L898.088 690.112 L898.648 690.112 L899.207 690.112 L899.766 690.112 L900.325 690.112 L900.885 690.112 L901.444 690.112 L902.003 690.112 L902.562 690.112 L903.122 690.112 L903.681 690.112 L904.24 690.112 L904.799 690.112 L905.359 690.112 L905.918 690.112 L906.477 690.112 L907.036 690.112 L907.596 690.112 L908.155 690.112 L908.714 690.112 L909.273 690.112 L909.833 690.112 L910.392 690.112 L910.951 690.112 L911.51 690.112 L912.07 690.112 L912.629 690.112 L913.188 690.112 L913.747 690.112 L914.307 690.112 L914.866 690.112 L915.425 690.112 L915.984 690.112 L916.544 690.112 L917.103 690.112 L917.662 690.112 L918.221 690.112 L918.781 690.112 L919.34 690.112 L919.899 690.112 L920.458 690.112 L921.018 690.112 L921.577 690.112 L922.136 690.112 L922.695 690.112 L923.255 690.112 L923.814 690.112 L924.373 690.112 L924.932 690.112 L925.492 690.112 L926.051 690.112 L926.61 690.112 L927.169 690.112 L927.729 690.112 L928.288 690.112 L928.847 690.112 L929.406 690.112 L929.966 690.112 L930.525 690.112 L931.084 690.112 L931.644 690.112 L932.203 690.112 L932.762 690.112 L933.321 690.112 L933.881 690.112 L934.44 690.112 L934.999 690.112 L935.558 690.112 L936.118 690.112 L936.677 690.112 L937.236 690.112 L937.795 690.112 L938.355 690.112 L938.914 690.112 L939.473 690.112 L940.032 690.112 L940.592 690.112 L941.151 690.112 L941.71 690.112 L942.269 690.112 L942.829 690.112 L943.388 690.112 L943.947 690.112 L944.506 690.112 L945.066 690.112 L945.625 690.112 L946.184 690.112 L946.743 690.112 L947.303 690.112 L947.862 690.112 L948.421 690.112 L948.98 690.112 L949.54 690.112 L950.099 690.112 L950.658 690.112 L951.217 690.112 L951.777 690.112 L952.336 690.112 L952.895 690.112 L953.454 690.112 L954.014 690.112 L954.573 690.112 L955.132 690.112 L955.691 690.112 L956.251 690.112 L956.81 690.112 L957.369 690.112 L957.928 690.112 L958.488 690.112 L959.047 690.112 L959.606 690.112 L960.165 690.112 L960.725 690.112 L961.284 690.112 L961.843 690.112 L962.402 690.112 L962.962 690.112 L963.521 690.112 L964.08 690.112 L964.639 690.112 L965.199 690.112 L965.758 690.112 L966.317 690.112 L966.876 690.112 L967.436 690.112 L967.995 690.112 L968.554 690.112 L969.113 690.112 L969.673 690.112 L970.232 690.112 L970.791 690.112 L971.35 690.112 L971.91 690.112 L972.469 690.112 L973.028 690.112 L973.587 690.112 L974.147 690.112 L974.706 690.112 L975.265 690.112 L975.824 690.112 L976.384 690.112 L976.943 690.112 L977.502 690.112 L978.061 690.112 L978.621 690.112 L979.18 690.112 L979.739 690.112 L980.298 690.112 L980.858 690.112 L981.417 690.112 L981.976 690.112 L982.535 690.112 L983.095 690.112 L983.654 690.112 L984.213 690.112 L984.772 690.112 L985.332 690.112 L985.891 690.112 L986.45 690.112 L987.009 690.112 L987.569 690.112 L988.128 690.112 L988.687 690.112 L989.246 690.112 L989.806 690.112 L990.365 690.112 L990.924 690.112 L991.483 690.112 L992.043 690.112 L992.602 690.112 L993.161 690.112 L993.72 690.112 L994.28 690.112 L994.839 690.112 L995.398 690.112 L995.957 690.112 L996.517 690.112 L997.076 690.112 L997.635 690.112 L998.194 690.112 L998.754 690.112 L999.313 690.112 L999.872 690.112 L1000.43 690.112 L1000.99 690.112 L1001.55 690.112 L1002.11 690.112 L1002.67 690.112 L1003.23 690.112 L1003.79 690.112 L1004.35 690.112 L1004.91 690.112 L1005.46 690.112 L1006.02 690.112 L1006.58 690.112 L1007.14 690.112 L1007.7 690.112 L1008.26 690.112 L1008.82 690.112 L1009.38 690.112 L1009.94 690.112 L1010.5 690.112 L1011.06 690.112 L1011.62 690.112 L1012.18 690.112 L1012.73 690.112 L1013.29 690.112 L1013.85 690.112 L1014.41 690.112 L1014.97 690.112 L1015.53 690.112 L1016.09 690.112 L1016.65 690.112 L1017.21 690.112 L1017.77 690.112 L1018.33 690.112 L1018.89 690.112 L1019.45 690.112 L1020.01 690.112 L1020.56 690.112 L1021.12 690.112 L1021.68 690.112 L1022.24 690.112 L1022.8 690.112 L1023.36 690.112 L1023.92 690.112 L1024.48 690.112 L1025.04 690.112 L1025.6 690.112 L1026.16 690.112 L1026.72 690.112 L1027.28 690.112 L1027.83 690.112 L1028.39 690.112 L1028.95 690.112 L1029.51 690.112 L1030.07 690.112 L1030.63 690.112 L1031.19 690.112 L1031.75 690.112 L1032.31 690.112 L1032.87 690.112 L1033.43 690.112 L1033.99 690.112 L1034.55 690.112 L1035.1 690.112 L1035.66 690.112 L1036.22 690.112 L1036.78 690.112 L1037.34 690.112 L1037.9 690.112 L1038.46 690.112 L1039.02 690.112 L1039.58 690.112 L1040.14 690.112 L1040.7 690.112 L1041.26 690.112 L1041.82 690.112 L1042.38 690.112 L1042.93 690.112 L1043.49 690.112 L1044.05 690.112 L1044.61 690.112 L1045.17 690.112 L1045.73 690.112 L1046.29 690.112 L1046.85 690.112 L1047.41 690.112 L1047.97 690.112 L1048.53 690.112 L1049.09 690.112 L1049.65 690.112 L1050.2 690.112 L1050.76 690.112 L1051.32 690.112 L1051.88 690.112 L1052.44 690.112 L1053 690.112 L1053.56 690.112 L1054.12 690.112 L1054.68 690.112 L1055.24 690.112 L1055.8 690.112 L1056.36 690.112 L1056.92 690.112 L1057.48 690.112 L1058.03 690.112 L1058.59 690.112 L1059.15 690.112 L1059.71 690.112 L1060.27 690.112 L1060.83 690.112 L1061.39 690.112 L1061.95 690.112 L1062.51 690.112 L1063.07 690.112 L1063.63 690.112 L1064.19 690.112 L1064.75 690.112 L1065.3 690.112 L1065.86 690.112 L1066.42 690.112 L1066.98 690.112 L1067.54 690.112 L1068.1 690.112 L1068.66 690.112 L1069.22 690.112 L1069.78 690.112 L1070.34 690.112 L1070.9 690.112 L1071.46 690.112 L1072.02 690.112 L1072.57 690.112 L1073.13 690.112 L1073.69 690.112 L1074.25 690.112 L1074.81 690.112 L1075.37 690.112 L1075.93 690.112 L1076.49 690.112 L1077.05 690.112 L1077.61 690.112 L1078.17 690.112 L1078.73 690.112 L1079.29 690.112 L1079.85 690.112 L1080.4 690.112 L1080.96 690.112 L1081.52 690.112 L1082.08 690.112 L1082.64 690.112 L1083.2 690.112 L1083.76 690.112 L1084.32 690.112 L1084.88 690.112 L1085.44 690.112 L1086 690.112 L1086.56 690.112 L1087.12 690.112 L1087.67 690.112 L1088.23 690.112 L1088.79 690.112 L1089.35 690.112 L1089.91 690.112 L1090.47 690.112 L1091.03 690.112 L1091.59 690.112 L1092.15 690.112 L1092.71 690.112 L1093.27 690.112 L1093.83 690.112 L1094.39 690.112 L1094.94 690.112 L1095.5 690.112 L1096.06 690.112 L1096.62 690.112 L1097.18 690.112 L1097.74 690.112 L1098.3 690.112 L1098.86 690.112 L1099.42 690.112 L1099.98 690.112 L1100.54 690.112 L1101.1 690.112 L1101.66 690.112 L1102.22 690.112 L1102.77 690.112 L1103.33 690.112 L1103.89 690.112 L1104.45 690.112 L1105.01 690.112 L1105.57 690.112 L1106.13 690.112 L1106.69 690.112 L1107.25 690.112 L1107.81 690.112 L1108.37 690.112 L1108.93 690.112 L1109.49 690.112 L1110.04 690.112 L1110.6 690.112 L1111.16 690.112 L1111.72 690.112 L1112.28 690.112 L1112.84 690.112 L1113.4 690.112 L1113.96 690.112 L1114.52 690.112 L1115.08 690.112 L1115.64 690.112 L1116.2 690.112 L1116.76 690.112 L1117.31 690.112 L1117.87 690.112 L1118.43 690.112 L1118.99 690.112 L1119.55 690.112 L1120.11 690.112 L1120.67 690.112 L1121.23 690.112 L1121.79 690.112 L1122.35 690.112 L1122.91 690.112 L1123.47 690.112 L1124.03 690.112 L1124.59 690.112 L1125.14 690.112 L1125.7 690.112 L1126.26 690.112 L1126.82 690.112 L1127.38 690.112 L1127.94 690.112 L1128.5 690.112 L1129.06 690.112 L1129.62 690.112 L1130.18 690.112 L1130.74 690.112 L1131.3 690.112 L1131.86 690.112 L1132.41 690.112 L1132.97 690.112 L1133.53 690.112 L1134.09 690.112 L1134.65 690.112 L1135.21 690.112 L1135.77 690.112 L1136.33 690.112 L1136.89 690.112 L1137.45 690.112 L1138.01 690.112 L1138.57 690.112 L1139.13 690.112 L1139.68 690.112 L1140.24 690.112 L1140.8 690.112 L1141.36 690.112 L1141.92 690.112 L1142.48 690.112 L1143.04 690.112 L1143.6 690.112 L1144.16 690.112 L1144.72 690.112 L1145.28 690.112 L1145.84 690.112 L1146.4 690.112 L1146.96 690.112 L1147.51 690.112 L1148.07 690.112 L1148.63 690.112 L1149.19 690.112 L1149.75 690.112 L1150.31 690.112 L1150.87 690.112 L1151.43 690.112 L1151.99 690.112 L1152.55 690.112 L1153.11 690.112 L1153.67 690.112 L1154.23 690.112 L1154.78 690.112 L1155.34 690.112 L1155.9 690.112 L1156.46 690.112 L1157.02 690.112 L1157.58 690.112 L1158.14 690.112 L1158.7 690.112 L1159.26 690.112 L1159.82 690.112 L1160.38 690.112 L1160.94 690.112 L1161.5 690.112 L1162.05 690.112 L1162.61 690.112 L1163.17 690.112 L1163.73 690.112 L1164.29 690.112 L1164.85 690.112 L1165.41 690.112 L1165.97 690.112 L1166.53 690.112 L1167.09 690.112 L1167.65 690.112 L1168.21 690.112 L1168.77 690.112 L1169.33 690.112 L1169.88 690.112 L1170.44 690.112 L1171 690.112 L1171.56 690.112 L1172.12 690.112 L1172.68 690.112 L1173.24 690.112 L1173.8 690.112 L1174.36 690.112 L1174.92 690.112 L1175.48 690.112 L1176.04 690.112 L1176.6 690.112 L1177.15 690.112 L1177.71 690.112 L1178.27 690.112 L1178.83 690.112 L1179.39 690.112 L1179.95 690.112 L1180.51 690.112 L1181.07 690.112 L1181.63 690.112 L1182.19 690.112 L1182.75 690.112 L1183.31 690.112 L1183.87 690.112 L1184.43 690.112 L1184.98 690.112 L1185.54 690.112 L1186.1 690.112 L1186.66 690.112 L1187.22 690.112 L1187.78 690.112 L1188.34 690.112 L1188.9 690.112 L1189.46 690.112 L1190.02 690.112 L1190.58 690.112 L1191.14 690.112 L1191.7 690.112 L1192.25 690.112 L1192.81 690.112 L1193.37 690.112 L1193.93 690.112 L1194.49 690.112 L1195.05 690.112 L1195.61 690.112 L1196.17 690.112 L1196.73 690.112 L1197.29 690.112 L1197.85 690.112 L1198.41 690.112 L1198.97 690.112 L1199.52 690.112 L1200.08 690.112 L1200.64 690.112 L1201.2 690.112 L1201.76 690.112 L1202.32 690.112 L1202.88 690.112 L1203.44 690.112 L1204 690.112 L1204.56 690.112 L1205.12 690.112 L1205.68 690.112 L1206.24 690.112 L1206.8 690.112 L1207.35 690.112 L1207.91 690.112 L1208.47 690.112 L1209.03 690.112 L1209.59 690.112 L1210.15 690.112 L1210.71 690.112 L1211.27 690.112 L1211.83 690.112 L1212.39 690.112 L1212.95 690.112 L1213.51 690.112 L1214.07 690.112 L1214.62 690.112 L1215.18 690.112 L1215.74 690.112 L1216.3 690.112 L1216.86 690.112 L1217.42 690.112 L1217.98 690.112 L1218.54 690.112 L1219.1 690.112 L1219.66 690.112 L1220.22 690.112 L1220.78 690.112 L1221.34 690.112 L1221.89 690.112 L1222.45 690.112 L1223.01 690.112 L1223.57 690.112 L1224.13 690.112 L1224.69 690.112 L1225.25 690.112 L1225.81 690.112 L1226.37 690.112 L1226.93 690.112 L1227.49 690.112 L1228.05 690.112 L1228.61 690.112 L1229.17 690.112 L1229.72 690.112 L1230.28 690.112 L1230.84 690.112 L1231.4 690.112 L1231.96 690.112 L1232.52 690.112 L1233.08 690.112 L1233.64 690.112 L1234.2 690.112 L1234.76 690.112 L1235.32 690.112 L1235.88 690.112 L1236.44 690.112 L1236.99 690.112 L1237.55 690.112 L1238.11 690.112 L1238.67 690.112 L1239.23 690.112 L1239.79 690.112 L1240.35 690.112 L1240.91 690.112 L1241.47 690.112 L1242.03 690.112 L1242.59 690.112 L1243.15 690.112 L1243.71 690.112 L1244.26 690.112 L1244.82 690.112 L1245.38 690.112 L1245.94 690.112 L1246.5 690.112 L1247.06 690.112 L1247.62 690.112 L1248.18 690.112 L1248.74 690.112 L1249.3 690.112 L1249.86 690.112 L1250.42 690.112 L1250.98 690.112 L1251.54 690.112 L1252.09 690.112 L1252.65 690.112 L1253.21 690.112 L1253.77 690.112 L1254.33 690.112 L1254.89 690.112 L1255.45 690.112 L1256.01 690.112 L1256.57 690.112 L1257.13 690.112 L1257.69 690.112 L1258.25 690.112 L1258.81 690.112 L1259.36 690.112 L1259.92 690.112 L1260.48 690.112 L1261.04 690.112 L1261.6 690.112 L1262.16 690.112 L1262.72 690.112 L1263.28 690.112 L1263.84 690.112 L1264.4 690.112 L1264.96 690.112 L1265.52 690.112 L1266.08 690.112 L1266.63 690.112 L1267.19 690.112 L1267.75 690.112 L1268.31 690.112 L1268.87 690.112 L1269.43 690.112 L1269.99 690.112 L1270.55 690.112 L1271.11 690.112 L1271.67 690.112 L1272.23 690.112 L1272.79 690.112 L1273.35 690.112 L1273.91 690.112 L1274.46 690.112 L1275.02 690.112 L1275.58 690.112 L1276.14 690.112 L1276.7 690.112 L1277.26 690.112 L1277.82 690.112 L1278.38 690.112 L1278.94 690.112 L1279.5 690.112 L1280.06 690.112 L1280.62 690.112 L1281.18 690.112 L1281.73 690.112 L1282.29 690.112 L1282.85 690.112 L1283.41 690.112 L1283.97 690.112 L1284.53 690.112 L1285.09 690.112 L1285.65 690.112 L1286.21 690.112 L1286.77 690.112 L1287.33 690.112 L1287.89 690.112 L1288.45 690.112 L1289 690.112 L1289.56 690.112 L1290.12 690.112 L1290.68 690.112 L1291.24 690.112 L1291.8 690.112 L1292.36 690.112 L1292.92 690.112 L1293.48 690.112 L1294.04 690.112 L1294.6 690.112 L1295.16 690.112 L1295.72 690.112 L1296.28 690.112 L1296.83 690.112 L1297.39 690.112 L1297.95 690.112 L1298.51 690.112 L1299.07 690.112 L1299.63 690.112 L1300.19 690.112 L1300.75 690.112 L1301.31 690.112 L1301.87 690.112 L1302.43 690.112 L1302.99 690.112 L1303.55 690.112 L1304.1 690.112 L1304.66 690.112 L1305.22 690.112 L1305.78 690.112 L1306.34 690.112 L1306.9 690.112 L1307.46 690.112 L1308.02 690.112 L1308.58 690.112 L1309.14 690.112 L1309.7 690.112 L1310.26 690.112 L1310.82 690.112 L1311.38 690.112 L1311.93 690.112 L1312.49 690.112 L1313.05 690.112 L1313.61 690.112 L1314.17 690.112 L1314.73 690.112 L1315.29 690.112 L1315.85 690.112 L1316.41 690.112 L1316.97 690.112 L1317.53 690.112 L1318.09 690.112 L1318.65 690.112 L1319.2 690.112 L1319.76 690.112 L1320.32 690.112 L1320.88 690.112 L1321.44 690.112 L1322 690.112 L1322.56 690.112 L1323.12 690.112 L1323.68 690.112 L1324.24 690.112 L1324.8 690.112 L1325.36 690.112 L1325.92 690.112 L1326.47 690.112 L1327.03 690.112 L1327.59 690.112 L1328.15 690.112 L1328.71 690.112 L1329.27 690.112 L1329.83 690.112 L1330.39 690.112 L1330.95 690.112 L1331.51 690.112 L1332.07 690.112 L1332.63 690.112 L1333.19 690.112 L1333.75 690.112 L1334.3 690.112 L1334.86 690.112 L1335.42 690.112 L1335.98 690.112 L1336.54 690.112 L1337.1 690.112 L1337.66 690.112 L1338.22 690.112 L1338.78 690.112 L1339.34 690.112 L1339.9 690.112 L1340.46 690.112 L1341.02 690.112 L1341.57 690.112 L1342.13 690.112 L1342.69 690.112 L1343.25 690.112 L1343.81 690.112 L1344.37 690.112 L1344.93 690.112 L1345.49 690.112 L1346.05 690.112 L1346.61 690.112 L1347.17 690.112 L1347.73 690.112 L1348.29 690.112 L1348.84 690.112 L1349.4 690.112 L1349.96 690.112 L1350.52 690.112 L1351.08 690.112 L1351.64 690.112 L1352.2 690.112 L1352.76 690.112 L1353.32 690.112 L1353.88 690.112 L1354.44 690.112 L1355 690.112 L1355.56 690.112 L1356.12 690.112 L1356.67 690.112 L1357.23 690.112 L1357.79 690.112 L1358.35 690.112 L1358.91 690.112 L1359.47 690.112 L1360.03 690.112 L1360.59 690.112 L1361.15 690.112 L1361.71 690.112 L1362.27 690.112 L1362.83 690.112 L1363.39 690.112 L1363.94 690.112 L1364.5 690.112 L1365.06 690.112 L1365.62 690.112 L1366.18 690.112 L1366.74 690.112 L1367.3 690.112 L1367.86 690.112 L1368.42 690.112 L1368.98 690.112 L1369.54 690.112 L1370.1 690.112 L1370.66 690.112 L1371.21 690.112 L1371.77 690.112 L1372.33 690.112 L1372.89 690.112 L1373.45 690.112 L1374.01 690.112 L1374.57 690.112 L1375.13 690.112 L1375.69 690.112 L1376.25 690.112 L1376.81 690.112 L1377.37 690.112 L1377.93 690.112 L1378.49 690.112 L1379.04 690.112 L1379.6 690.112 L1380.16 690.112 L1380.72 690.112 L1381.28 690.112 L1381.84 690.112 L1382.4 690.112 L1382.96 690.112 L1383.52 690.112 L1384.08 690.112 L1384.64 690.112 L1385.2 690.112 L1385.76 690.112 L1386.31 690.112 L1386.87 690.112 L1387.43 690.112 L1387.99 690.112 L1388.55 690.112 L1389.11 690.112 L1389.67 690.112 L1390.23 690.112 L1390.79 690.112 L1391.35 690.112 L1391.91 690.112 L1392.47 690.112 L1393.03 690.112 L1393.58 690.112 L1394.14 690.112 L1394.7 690.112 L1395.26 690.112 L1395.82 690.112 L1396.38 690.112 L1396.94 690.112 L1397.5 690.112 L1398.06 690.112 L1398.62 690.112 L1399.18 690.112 L1399.74 690.112 L1400.3 690.112 L1400.86 690.112 L1401.41 690.112 L1401.97 690.112 L1402.53 690.112 L1403.09 690.112 L1403.65 690.112 L1404.21 690.112 L1404.77 690.112 L1405.33 690.112 L1405.89 690.112 L1406.45 690.112 L1407.01 690.112 L1407.57 690.112 L1408.13 690.112 L1408.68 690.112 L1409.24 690.112 L1409.8 690.112 L1410.36 690.112 L1410.92 690.112 L1411.48 690.112 L1412.04 690.112 L1412.6 690.112 L1413.16 690.112 L1413.72 690.112 L1414.28 690.112 L1414.84 690.112 L1415.4 690.112 L1415.95 690.112 L1416.51 690.112 L1417.07 690.112 L1417.63 690.112 L1418.19 690.112 L1418.75 690.112 L1419.31 690.112 L1419.87 690.112 L1420.43 690.112 L1420.99 690.112 L1421.55 690.112 L1422.11 690.112 L1422.67 690.112 L1423.23 690.112 L1423.78 690.112 L1424.34 690.112 L1424.9 690.112 L1425.46 690.112 L1426.02 690.112 L1426.58 690.112 L1427.14 690.112 L1427.7 690.112 L1428.26 690.112 L1428.82 690.112 L1429.38 690.112 L1429.94 690.112 L1430.5 690.112 L1431.05 690.112 L1431.61 690.112 L1432.17 690.112 L1432.73 690.112 L1433.29 690.112 L1433.85 690.112 L1434.41 690.112 L1434.97 690.112 L1435.53 690.112 L1436.09 690.112 L1436.65 690.112 L1437.21 690.112 L1437.77 690.112 L1438.33 690.112 L1438.88 690.112 L1439.44 690.112 L1440 690.112 L1440.56 690.112 L1441.12 690.112 L1441.68 690.112 L1442.24 690.112 L1442.8 690.112 L1443.36 690.112 L1443.92 690.112 L1444.48 690.112 L1445.04 690.112 L1445.6 690.112 L1446.15 690.112 L1446.71 690.112 L1447.27 690.112 L1447.83 690.112 L1448.39 690.112 L1448.95 690.112 L1449.51 690.112 L1450.07 690.112 L1450.63 690.112 L1451.19 690.112 L1451.75 690.112 L1452.31 690.112 L1452.87 690.112 L1453.42 690.112 L1453.98 690.112 L1454.54 690.112 L1455.1 690.112 L1455.66 690.112 L1456.22 690.112 L1456.78 690.112 L1457.34 690.112 L1457.9 690.112 L1458.46 690.112 L1459.02 690.112 L1459.58 690.112 L1460.14 690.112 L1460.7 690.112 L1461.25 690.112 L1461.81 690.112 L1462.37 690.112 L1462.93 690.112 L1463.49 690.112 L1464.05 690.112 L1464.61 690.112 L1465.17 690.112 L1465.73 690.112 L1466.29 690.112 L1466.85 690.112 L1467.41 690.112 L1467.97 690.112 L1468.52 690.112 L1469.08 690.112 L1469.64 690.112 L1470.2 690.112 L1470.76 690.112 L1471.32 690.112 L1471.88 690.112 L1472.44 690.112 L1473 690.112 L1473.56 690.112 L1474.12 690.112 L1474.68 690.112 L1475.24 690.112 L1475.79 690.112 L1476.35 690.112 L1476.91 690.112 L1477.47 690.112 L1478.03 690.112 L1478.59 690.112 L1479.15 690.112 L1479.71 690.112 L1480.27 690.112 L1480.83 690.112 L1481.39 690.112 L1481.95 690.112 L1482.51 690.112 L1483.07 690.112 L1483.62 690.112 L1484.18 690.112 L1484.74 690.112 L1485.3 690.112 L1485.86 690.112 L1486.42 690.112 L1486.98 690.112 L1487.54 690.112 L1488.1 690.112 L1488.66 690.112 L1489.22 690.112 L1489.78 690.112 L1490.34 690.112 L1490.89 690.112 L1491.45 690.112 L1492.01 690.112 L1492.57 690.112 L1493.13 690.112 L1493.69 690.112 L1494.25 690.112 L1494.81 690.112 L1495.37 690.112 L1495.93 690.112 L1496.49 690.112 L1497.05 690.112 L1497.61 690.112 L1498.16 690.112 L1498.72 690.112 L1499.28 690.112 L1499.84 690.112 L1500.4 690.112 L1500.96 690.112 L1501.52 690.112 L1502.08 690.112 L1502.64 690.112 L1503.2 690.112 L1503.76 690.112 L1504.32 690.112 L1504.88 690.112 L1505.44 690.112 L1505.99 690.112 L1506.55 690.112 L1507.11 690.112 L1507.67 690.112 L1508.23 690.112 L1508.79 690.112 L1509.35 690.112 L1509.91 690.112 L1510.47 690.112 L1511.03 690.112 L1511.59 690.112 L1512.15 690.112 L1512.71 690.112 L1513.26 690.112 L1513.82 690.112 L1514.38 690.112 L1514.94 690.112 L1515.5 690.112 L1516.06 690.112 L1516.62 690.112 L1517.18 690.112 L1517.74 690.112 L1518.3 690.112 L1518.86 690.112 L1519.42 690.112 L1519.98 690.112 L1520.53 690.112 L1521.09 690.112 L1521.65 690.112 L1522.21 690.112 L1522.77 690.112 L1523.33 690.112 L1523.89 690.112 L1524.45 690.112 L1525.01 690.112 L1525.57 690.112 L1526.13 690.112 L1526.69 690.112 L1527.25 690.112 L1527.81 690.112 L1528.36 690.112 L1528.92 690.112 L1529.48 690.112 L1530.04 690.112 L1530.6 690.112 L1531.16 690.112 L1531.72 690.112 L1532.28 690.112 L1532.84 690.112 L1533.4 690.112 L1533.96 690.112 L1534.52 690.112 L1535.08 690.112 L1535.63 690.112 L1536.19 690.112 L1536.75 690.112 L1537.31 690.112 L1537.87 690.112 L1538.43 690.112 L1538.99 690.112 L1539.55 690.112 L1540.11 690.112 L1540.67 690.112 L1541.23 690.112 L1541.79 690.112 L1542.35 690.112 L1542.9 690.112 L1543.46 690.112 L1544.02 690.112 L1544.58 690.112 L1545.14 690.112 L1545.7 690.112 L1546.26 690.112 L1546.82 690.112 L1547.38 690.112 L1547.94 690.112 L1548.5 690.112 L1549.06 690.112 L1549.62 690.112 L1550.18 690.112 L1550.73 690.112 L1551.29 690.112 L1551.85 690.112 L1552.41 690.112 L1552.97 690.112 L1553.53 690.112 L1554.09 690.112 L1554.65 690.112 L1555.21 690.112 L1555.77 690.112 L1556.33 690.112 L1556.89 690.112 L1557.45 690.112 L1558 690.112 L1558.56 690.112 L1559.12 690.112 L1559.68 690.112 L1560.24 690.112 L1560.8 690.112 L1561.36 690.112 L1561.92 690.112 L1562.48 690.112 L1563.04 690.112 L1563.6 690.112 L1564.16 690.112 L1564.72 690.112 L1565.28 690.112 L1565.83 690.112 L1566.39 690.112 L1566.95 690.112 L1567.51 690.112 L1568.07 690.112 L1568.63 690.112 L1569.19 690.112 L1569.75 690.112 L1570.31 690.112 L1570.87 690.112 L1571.43 690.112 L1571.99 690.112 L1572.55 690.112 L1573.1 690.112 L1573.66 690.112 L1574.22 690.112 L1574.78 690.112 L1575.34 690.112 L1575.9 690.112 L1576.46 690.112 L1577.02 690.112 L1577.58 690.112 L1578.14 690.112 L1578.7 690.112 L1579.26 690.112 L1579.82 690.112 L1580.37 690.112 L1580.93 690.112 L1581.49 690.112 L1582.05 690.112 L1582.61 690.112 L1583.17 690.112 L1583.73 690.112 L1584.29 690.112 L1584.85 690.112 L1585.41 690.112 L1585.97 690.112 L1586.53 690.112 L1587.09 690.112 L1587.65 690.112 L1588.2 690.112 L1588.76 690.112 L1589.32 690.112 L1589.88 690.112 L1590.44 690.112 L1591 690.112 L1591.56 690.112 L1592.12 690.112 L1592.68 690.112 L1593.24 690.112 L1593.8 690.112 L1594.36 690.112 L1594.92 690.112 L1595.47 690.112 L1596.03 690.112 L1596.59 690.112 L1597.15 690.112 L1597.71 690.112 L1598.27 690.112 L1598.83 690.112 L1599.39 690.112 L1599.95 690.112 L1600.51 690.112 L1601.07 690.112 L1601.63 690.112 L1602.19 690.112 L1602.74 690.112 L1603.3 690.112 L1603.86 690.112 L1604.42 690.112 L1604.98 690.112 L1605.54 690.112 L1606.1 690.112 L1606.66 690.112 L1607.22 690.112 L1607.78 690.112 L1608.34 690.112 L1608.9 690.112 L1609.46 690.112 L1610.02 690.112 L1610.57 690.112 L1611.13 690.112 L1611.69 690.112 L1612.25 690.112 L1612.81 690.112 L1613.37 690.112 L1613.93 690.112 L1614.49 690.112 L1615.05 690.112 L1615.61 690.112 L1616.17 690.112 L1616.73 690.112 L1617.29 690.112 L1617.84 690.112 L1618.4 690.112 L1618.96 690.112 L1619.52 690.112 L1620.08 690.112 L1620.64 690.112 L1621.2 690.112 L1621.76 690.112 L1622.32 690.112 L1622.88 690.112 L1623.44 690.112 L1624 690.112 L1624.56 690.112 L1625.11 690.112 L1625.67 690.112 L1626.23 690.112 L1626.79 690.112 L1627.35 690.112 L1627.91 690.112 L1628.47 690.112 L1629.03 690.112 L1629.59 690.112 L1630.15 690.112 L1630.71 690.112 L1631.27 690.112 L1631.83 690.112 L1632.39 690.112 L1632.94 690.112 L1633.5 690.112 L1634.06 690.112 L1634.62 690.112 L1635.18 690.112 L1635.74 690.112 L1636.3 690.112 L1636.86 690.112 L1637.42 690.112 L1637.98 690.112 L1638.54 690.112 L1639.1 690.112 L1639.66 690.112 L1640.21 690.112 L1640.77 690.112 L1641.33 690.112 L1641.89 690.112 L1642.45 690.112 L1643.01 690.112 L1643.57 690.112 L1644.13 690.112 L1644.69 690.112 L1645.25 690.112 L1645.81 690.112 L1646.37 690.112 L1646.93 690.112 L1647.48 690.112 L1648.04 690.112 L1648.6 690.112 L1649.16 690.112 L1649.72 690.112 L1650.28 690.112 L1650.84 690.112 L1651.4 690.112 L1651.96 690.112 L1652.52 690.112 L1653.08 690.112 L1653.64 690.112 L1654.2 690.112 L1654.76 690.112 L1655.31 690.112 L1655.87 690.112 L1656.43 690.112 L1656.99 690.112 L1657.55 690.112 L1658.11 690.112 L1658.67 690.112 L1659.23 690.112 L1659.79 690.112 L1660.35 690.112 L1660.91 690.112 L1661.47 690.112 L1662.03 690.112 L1662.58 690.112 L1663.14 690.112 L1663.7 690.112 L1664.26 690.112 L1664.82 690.112 L1665.38 690.112 L1665.94 690.112 L1666.5 690.112 L1667.06 690.112 L1667.62 690.112 L1668.18 690.112 L1668.74 690.112 L1669.3 690.112 L1669.85 690.112 L1670.41 690.112 L1670.97 690.112 L1671.53 690.112 L1672.09 690.112 L1672.65 690.112 L1673.21 690.112 L1673.77 690.112 L1674.33 690.112 L1674.89 690.112 L1675.45 690.112 L1676.01 690.112 L1676.57 690.112 L1677.13 690.112 L1677.68 690.112 L1678.24 690.112 L1678.8 690.112 L1679.36 690.112 L1679.92 690.112 L1680.48 690.112 L1681.04 690.112 L1681.6 690.112 L1682.16 690.112 L1682.72 690.112 L1683.28 690.112 L1683.84 690.112 L1684.4 690.112 L1684.95 690.112 L1685.51 690.112 L1686.07 690.112 L1686.63 690.112 L1687.19 690.112 L1687.75 690.112 L1688.31 690.112 L1688.87 690.112 L1689.43 690.112 L1689.99 690.112 L1690.55 690.112 L1691.11 690.112 L1691.67 690.112 L1692.23 690.112 L1692.78 690.112 L1693.34 690.112 L1693.9 690.112 L1694.46 690.112 L1695.02 690.112 L1695.58 690.112 L1696.14 690.112 L1696.7 690.112 L1697.26 690.112 L1697.82 690.112 L1698.38 690.112 L1698.94 690.112 L1699.5 690.112 L1700.05 690.112 L1700.61 690.112 L1701.17 690.112 L1701.73 690.112 L1702.29 690.112 L1702.85 690.112 L1703.41 690.112 L1703.97 690.112 L1704.53 690.112 L1705.09 690.112 L1705.65 690.112 L1706.21 690.112 L1706.77 690.112 L1707.32 690.112 L1707.88 690.112 L1708.44 690.112 L1709 690.112 L1709.56 690.112 L1710.12 690.112 L1710.68 690.112 L1711.24 690.112 L1711.8 690.112 L1712.36 690.112 L1712.92 690.112 L1713.48 690.112 L1714.04 690.112 L1714.6 690.112 L1715.15 690.112 L1715.71 690.112 L1716.27 690.112 L1716.83 690.112 L1717.39 690.112 L1717.95 690.112 L1718.51 690.112 L1719.07 690.112 L1719.63 690.112 L1720.19 690.112 L1720.75 690.112 L1721.31 690.112 L1721.87 690.112 L1722.42 690.112 L1722.98 690.112 L1723.54 690.112 L1724.1 690.112 L1724.66 690.112 L1725.22 690.112 L1725.78 690.112 L1726.34 690.112 L1726.9 690.112 L1727.46 690.112 L1728.02 690.112 L1728.58 690.112 L1729.14 690.112 L1729.69 690.112 L1730.25 690.112 L1730.81 690.112 L1731.37 690.112 L1731.93 690.112 L1732.49 690.112 L1733.05 690.112 L1733.61 690.112 L1734.17 690.112 L1734.73 690.112 L1735.29 690.112 L1735.85 690.112 L1736.41 690.112 L1736.97 690.112 L1737.52 690.112 L1738.08 690.112 L1738.64 690.112 L1739.2 690.112 L1739.76 690.112 L1740.32 690.112 L1740.88 690.112 L1741.44 690.112 L1742 690.112 L1742.56 690.112 L1743.12 690.112 L1743.68 690.112 L1744.24 690.112 L1744.79 690.112 L1745.35 690.112 L1745.91 690.112 L1746.47 690.112 L1747.03 690.112 L1747.59 690.112 L1748.15 690.112 L1748.71 690.112 L1749.27 690.112 L1749.83 690.112 L1750.39 690.112 L1750.95 690.112 L1751.51 690.112 L1752.06 690.112 L1752.62 690.112 L1753.18 690.112 L1753.74 690.112 L1754.3 690.112 L1754.86 690.112 L1755.42 690.112 L1755.98 690.112 L1756.54 690.112 L1757.1 690.112 L1757.66 690.112 L1758.22 690.112 L1758.78 690.112 L1759.34 690.112 L1759.89 690.112 L1760.45 690.112 L1761.01 690.112 L1761.57 690.112 L1762.13 690.112 L1762.69 690.112 L1763.25 690.112 L1763.81 690.112 L1764.37 690.112 L1764.93 690.112 L1765.49 690.112 L1766.05 690.112 L1766.61 690.112 L1767.16 690.112 L1767.72 690.112 L1768.28 690.112 L1768.84 690.112 L1769.4 690.112 L1769.96 690.112 L1770.52 690.112 L1771.08 690.112 L1771.64 690.112 L1772.2 690.112 L1772.76 690.112 L1773.32 690.112 L1773.88 690.112 L1774.43 690.112 L1774.99 690.112 L1775.55 690.112 L1776.11 690.112 L1776.67 690.112 L1777.23 690.112 L1777.79 690.112 L1778.35 690.112 L1778.91 690.112 L1779.47 690.112 L1780.03 690.112 L1780.59 690.112 L1781.15 690.112 L1781.71 690.112 L1782.26 690.112 L1782.82 690.112 L1783.38 690.112 L1783.94 690.112 L1784.5 690.112 L1785.06 690.112 L1785.62 690.112 L1786.18 690.112 L1786.74 690.112 L1787.3 690.112 L1787.86 690.112 L1788.42 690.112 L1788.98 690.112 L1789.53 690.112 L1790.09 690.112 L1790.65 690.112 L1791.21 690.112 L1791.77 690.112 L1792.33 690.112 L1792.89 690.112 L1793.45 690.112 L1794.01 690.112 L1794.57 690.112 L1795.13 690.112 L1795.69 690.112 L1796.25 690.112 L1796.8 690.112 L1797.36 690.112 L1797.92 690.112 L1798.48 690.112 L1799.04 690.112 L1799.6 690.112 L1800.16 690.112 L1800.72 690.112 L1801.28 690.112 L1801.84 690.112 L1802.4 690.112 L1802.96 690.112 L1803.52 690.112 L1804.08 690.112 L1804.63 690.112 L1805.19 690.112 L1805.75 690.112 L1806.31 690.112 L1806.87 690.112 L1807.43 690.112 L1807.99 690.112 L1808.55 690.112 L1809.11 690.112 L1809.67 690.112 L1810.23 690.112 L1810.79 690.112 L1811.35 690.112 L1811.9 690.112 L1812.46 690.112 L1813.02 690.112 L1813.58 690.112 L1814.14 690.112 L1814.7 690.112 L1815.26 690.112 L1815.82 690.112 L1816.38 690.112 L1816.94 690.112 L1817.5 690.112 L1818.06 690.112 L1818.62 690.112 L1819.18 690.112 L1819.73 690.112 L1820.29 690.112 L1820.85 690.112 L1821.41 690.112 L1821.97 690.112 L1822.53 690.112 L1823.09 690.112 L1823.65 690.112 L1824.21 690.112 L1824.77 690.112 L1825.33 690.112 L1825.89 690.112 L1826.45 690.112 L1827 690.112 L1827.56 690.112 L1828.12 690.112 L1828.68 690.112 L1829.24 690.112 L1829.8 690.112 L1830.36 690.112 L1830.92 690.112 L1831.48 690.112 L1832.04 690.112 L1832.6 690.112 L1833.16 690.112 L1833.72 690.112 L1834.27 690.112 L1834.83 690.112 L1835.39 690.112 L1835.95 690.112 L1836.51 690.112 L1837.07 690.112 L1837.63 690.112 L1838.19 690.112 L1838.19 681.388 L1837.63 681.388 L1837.07 681.388 L1836.51 681.388 L1835.95 681.388 L1835.39 681.388 L1834.83 681.388 L1834.27 681.388 L1833.72 681.388 L1833.16 681.388 L1832.6 681.388 L1832.04 681.388 L1831.48 681.388 L1830.92 681.388 L1830.36 681.388 L1829.8 681.388 L1829.24 681.388 L1828.68 681.388 L1828.12 681.388 L1827.56 681.388 L1827 681.388 L1826.45 681.388 L1825.89 681.388 L1825.33 681.388 L1824.77 681.388 L1824.21 681.388 L1823.65 681.388 L1823.09 681.388 L1822.53 681.388 L1821.97 681.388 L1821.41 681.388 L1820.85 681.388 L1820.29 681.388 L1819.73 681.388 L1819.18 681.388 L1818.62 681.388 L1818.06 681.388 L1817.5 681.388 L1816.94 681.388 L1816.38 681.388 L1815.82 681.388 L1815.26 681.388 L1814.7 681.388 L1814.14 681.388 L1813.58 681.388 L1813.02 681.388 L1812.46 681.388 L1811.9 681.388 L1811.35 681.388 L1810.79 681.388 L1810.23 681.388 L1809.67 681.388 L1809.11 681.388 L1808.55 681.388 L1807.99 681.388 L1807.43 681.388 L1806.87 681.388 L1806.31 681.388 L1805.75 681.388 L1805.19 681.388 L1804.63 681.388 L1804.08 681.388 L1803.52 681.388 L1802.96 681.388 L1802.4 681.388 L1801.84 681.388 L1801.28 681.388 L1800.72 681.388 L1800.16 681.388 L1799.6 681.388 L1799.04 681.388 L1798.48 681.388 L1797.92 681.388 L1797.36 681.388 L1796.8 681.388 L1796.25 681.388 L1795.69 681.388 L1795.13 681.388 L1794.57 681.388 L1794.01 681.388 L1793.45 681.388 L1792.89 681.388 L1792.33 681.388 L1791.77 681.388 L1791.21 681.388 L1790.65 681.388 L1790.09 681.388 L1789.53 681.388 L1788.98 681.388 L1788.42 681.388 L1787.86 681.388 L1787.3 681.388 L1786.74 681.388 L1786.18 681.388 L1785.62 681.388 L1785.06 681.388 L1784.5 681.388 L1783.94 681.388 L1783.38 681.388 L1782.82 681.388 L1782.26 681.388 L1781.71 681.388 L1781.15 681.388 L1780.59 681.388 L1780.03 681.388 L1779.47 681.388 L1778.91 681.388 L1778.35 681.388 L1777.79 681.388 L1777.23 681.388 L1776.67 681.388 L1776.11 681.388 L1775.55 681.388 L1774.99 681.388 L1774.43 681.388 L1773.88 681.388 L1773.32 681.388 L1772.76 681.388 L1772.2 681.388 L1771.64 681.388 L1771.08 681.388 L1770.52 681.388 L1769.96 681.388 L1769.4 681.388 L1768.84 681.388 L1768.28 681.388 L1767.72 681.388 L1767.16 681.388 L1766.61 681.388 L1766.05 681.388 L1765.49 681.388 L1764.93 681.388 L1764.37 681.388 L1763.81 681.388 L1763.25 681.388 L1762.69 681.388 L1762.13 681.388 L1761.57 681.388 L1761.01 681.388 L1760.45 681.388 L1759.89 681.388 L1759.34 681.388 L1758.78 681.388 L1758.22 681.388 L1757.66 681.388 L1757.1 681.388 L1756.54 681.388 L1755.98 681.388 L1755.42 681.388 L1754.86 681.388 L1754.3 681.388 L1753.74 681.388 L1753.18 681.388 L1752.62 681.388 L1752.06 681.388 L1751.51 681.388 L1750.95 681.388 L1750.39 681.388 L1749.83 681.388 L1749.27 681.388 L1748.71 681.388 L1748.15 681.388 L1747.59 681.388 L1747.03 681.388 L1746.47 681.388 L1745.91 681.388 L1745.35 681.388 L1744.79 681.388 L1744.24 681.388 L1743.68 681.388 L1743.12 681.388 L1742.56 681.388 L1742 681.388 L1741.44 681.388 L1740.88 681.388 L1740.32 681.388 L1739.76 681.388 L1739.2 681.388 L1738.64 681.388 L1738.08 681.388 L1737.52 681.388 L1736.97 681.388 L1736.41 681.388 L1735.85 681.388 L1735.29 681.388 L1734.73 681.388 L1734.17 681.388 L1733.61 681.388 L1733.05 681.388 L1732.49 681.388 L1731.93 681.388 L1731.37 681.388 L1730.81 681.388 L1730.25 681.388 L1729.69 681.388 L1729.14 681.388 L1728.58 681.388 L1728.02 681.388 L1727.46 681.388 L1726.9 681.388 L1726.34 681.388 L1725.78 681.388 L1725.22 681.388 L1724.66 681.388 L1724.1 681.388 L1723.54 681.388 L1722.98 681.388 L1722.42 681.388 L1721.87 681.388 L1721.31 681.388 L1720.75 681.388 L1720.19 681.388 L1719.63 681.388 L1719.07 681.388 L1718.51 681.388 L1717.95 681.388 L1717.39 681.388 L1716.83 681.388 L1716.27 681.388 L1715.71 681.388 L1715.15 681.388 L1714.6 681.388 L1714.04 681.388 L1713.48 681.388 L1712.92 681.388 L1712.36 681.388 L1711.8 681.388 L1711.24 681.388 L1710.68 681.388 L1710.12 681.388 L1709.56 681.388 L1709 681.388 L1708.44 681.388 L1707.88 681.388 L1707.32 681.388 L1706.77 681.388 L1706.21 681.388 L1705.65 681.388 L1705.09 681.388 L1704.53 681.388 L1703.97 681.388 L1703.41 681.388 L1702.85 681.388 L1702.29 681.388 L1701.73 681.388 L1701.17 681.388 L1700.61 681.388 L1700.05 681.388 L1699.5 681.388 L1698.94 681.388 L1698.38 681.388 L1697.82 681.388 L1697.26 681.388 L1696.7 681.388 L1696.14 681.388 L1695.58 681.388 L1695.02 681.388 L1694.46 681.388 L1693.9 681.388 L1693.34 681.388 L1692.78 681.388 L1692.23 681.388 L1691.67 681.388 L1691.11 681.388 L1690.55 681.388 L1689.99 681.388 L1689.43 681.388 L1688.87 681.388 L1688.31 681.388 L1687.75 681.388 L1687.19 681.388 L1686.63 681.388 L1686.07 681.388 L1685.51 681.388 L1684.95 681.388 L1684.4 681.388 L1683.84 681.388 L1683.28 681.388 L1682.72 681.388 L1682.16 681.388 L1681.6 681.388 L1681.04 681.388 L1680.48 681.388 L1679.92 681.388 L1679.36 681.388 L1678.8 681.388 L1678.24 681.388 L1677.68 681.388 L1677.13 681.388 L1676.57 681.388 L1676.01 681.388 L1675.45 681.388 L1674.89 681.388 L1674.33 681.388 L1673.77 681.388 L1673.21 681.388 L1672.65 681.388 L1672.09 681.388 L1671.53 681.388 L1670.97 681.388 L1670.41 681.388 L1669.85 681.388 L1669.3 681.388 L1668.74 681.388 L1668.18 681.388 L1667.62 681.388 L1667.06 681.388 L1666.5 681.388 L1665.94 681.388 L1665.38 681.388 L1664.82 681.388 L1664.26 681.388 L1663.7 681.388 L1663.14 681.388 L1662.58 681.388 L1662.03 681.388 L1661.47 681.388 L1660.91 681.388 L1660.35 681.388 L1659.79 681.388 L1659.23 681.388 L1658.67 681.388 L1658.11 681.388 L1657.55 681.388 L1656.99 681.388 L1656.43 681.388 L1655.87 681.388 L1655.31 681.388 L1654.76 681.388 L1654.2 681.388 L1653.64 681.388 L1653.08 681.388 L1652.52 681.388 L1651.96 681.388 L1651.4 681.388 L1650.84 681.388 L1650.28 681.388 L1649.72 681.388 L1649.16 681.388 L1648.6 681.388 L1648.04 681.388 L1647.48 681.388 L1646.93 681.388 L1646.37 681.388 L1645.81 681.388 L1645.25 681.388 L1644.69 681.388 L1644.13 681.388 L1643.57 681.388 L1643.01 681.388 L1642.45 681.388 L1641.89 681.388 L1641.33 681.388 L1640.77 681.388 L1640.21 681.388 L1639.66 681.388 L1639.1 681.388 L1638.54 681.388 L1637.98 681.388 L1637.42 681.388 L1636.86 681.388 L1636.3 681.388 L1635.74 681.388 L1635.18 681.388 L1634.62 681.388 L1634.06 681.388 L1633.5 681.388 L1632.94 681.388 L1632.39 681.388 L1631.83 681.388 L1631.27 681.388 L1630.71 681.388 L1630.15 681.388 L1629.59 681.388 L1629.03 681.388 L1628.47 681.388 L1627.91 681.388 L1627.35 681.388 L1626.79 681.388 L1626.23 681.388 L1625.67 681.388 L1625.11 681.388 L1624.56 681.388 L1624 681.388 L1623.44 681.388 L1622.88 681.388 L1622.32 681.388 L1621.76 681.388 L1621.2 681.388 L1620.64 681.388 L1620.08 681.388 L1619.52 681.388 L1618.96 681.388 L1618.4 681.388 L1617.84 681.388 L1617.29 681.388 L1616.73 681.388 L1616.17 681.388 L1615.61 681.388 L1615.05 681.388 L1614.49 681.388 L1613.93 681.388 L1613.37 681.388 L1612.81 681.388 L1612.25 681.388 L1611.69 681.388 L1611.13 681.388 L1610.57 681.388 L1610.02 681.388 L1609.46 681.388 L1608.9 681.388 L1608.34 681.388 L1607.78 681.388 L1607.22 681.388 L1606.66 681.388 L1606.1 681.388 L1605.54 681.388 L1604.98 681.388 L1604.42 681.388 L1603.86 681.388 L1603.3 681.388 L1602.74 681.388 L1602.19 681.388 L1601.63 681.388 L1601.07 681.388 L1600.51 681.388 L1599.95 681.388 L1599.39 681.388 L1598.83 681.388 L1598.27 681.388 L1597.71 681.388 L1597.15 681.388 L1596.59 681.388 L1596.03 681.388 L1595.47 681.388 L1594.92 681.388 L1594.36 681.388 L1593.8 681.388 L1593.24 681.388 L1592.68 681.388 L1592.12 681.388 L1591.56 681.388 L1591 681.388 L1590.44 681.388 L1589.88 681.388 L1589.32 681.388 L1588.76 681.388 L1588.2 681.388 L1587.65 681.388 L1587.09 681.388 L1586.53 681.388 L1585.97 681.388 L1585.41 681.388 L1584.85 681.388 L1584.29 681.388 L1583.73 681.388 L1583.17 681.388 L1582.61 681.388 L1582.05 681.388 L1581.49 681.388 L1580.93 681.388 L1580.37 681.388 L1579.82 681.388 L1579.26 681.388 L1578.7 681.388 L1578.14 681.388 L1577.58 681.388 L1577.02 681.388 L1576.46 681.388 L1575.9 681.388 L1575.34 681.388 L1574.78 681.388 L1574.22 681.388 L1573.66 681.388 L1573.1 681.388 L1572.55 681.388 L1571.99 681.388 L1571.43 681.388 L1570.87 681.388 L1570.31 681.388 L1569.75 681.388 L1569.19 681.388 L1568.63 681.388 L1568.07 681.388 L1567.51 681.388 L1566.95 681.388 L1566.39 681.388 L1565.83 681.388 L1565.28 681.388 L1564.72 681.388 L1564.16 681.388 L1563.6 681.388 L1563.04 681.388 L1562.48 681.388 L1561.92 681.388 L1561.36 681.388 L1560.8 681.388 L1560.24 681.388 L1559.68 681.388 L1559.12 681.388 L1558.56 681.388 L1558 681.388 L1557.45 681.388 L1556.89 681.388 L1556.33 681.388 L1555.77 681.388 L1555.21 681.388 L1554.65 681.388 L1554.09 681.388 L1553.53 681.388 L1552.97 681.388 L1552.41 681.388 L1551.85 681.388 L1551.29 681.388 L1550.73 681.388 L1550.18 681.388 L1549.62 681.388 L1549.06 681.388 L1548.5 681.388 L1547.94 681.388 L1547.38 681.388 L1546.82 681.388 L1546.26 681.388 L1545.7 681.388 L1545.14 681.388 L1544.58 681.388 L1544.02 681.388 L1543.46 681.388 L1542.9 681.388 L1542.35 681.388 L1541.79 681.388 L1541.23 681.388 L1540.67 681.388 L1540.11 681.388 L1539.55 681.388 L1538.99 681.388 L1538.43 681.388 L1537.87 681.388 L1537.31 681.388 L1536.75 681.388 L1536.19 681.388 L1535.63 681.388 L1535.08 681.388 L1534.52 681.388 L1533.96 681.388 L1533.4 681.388 L1532.84 681.388 L1532.28 681.388 L1531.72 681.388 L1531.16 681.388 L1530.6 681.388 L1530.04 681.388 L1529.48 681.388 L1528.92 681.388 L1528.36 681.388 L1527.81 681.388 L1527.25 681.388 L1526.69 681.388 L1526.13 681.388 L1525.57 681.388 L1525.01 681.388 L1524.45 681.388 L1523.89 681.388 L1523.33 681.388 L1522.77 681.388 L1522.21 681.388 L1521.65 681.388 L1521.09 681.388 L1520.53 681.388 L1519.98 681.388 L1519.42 681.388 L1518.86 681.388 L1518.3 681.388 L1517.74 681.388 L1517.18 681.388 L1516.62 681.388 L1516.06 681.388 L1515.5 681.388 L1514.94 681.388 L1514.38 681.388 L1513.82 681.388 L1513.26 681.388 L1512.71 681.388 L1512.15 681.388 L1511.59 681.388 L1511.03 681.388 L1510.47 681.388 L1509.91 681.388 L1509.35 681.388 L1508.79 681.388 L1508.23 681.388 L1507.67 681.388 L1507.11 681.388 L1506.55 681.388 L1505.99 681.388 L1505.44 681.388 L1504.88 681.388 L1504.32 681.388 L1503.76 681.388 L1503.2 681.388 L1502.64 681.388 L1502.08 681.388 L1501.52 681.388 L1500.96 681.388 L1500.4 681.388 L1499.84 681.388 L1499.28 681.388 L1498.72 681.388 L1498.16 681.388 L1497.61 681.388 L1497.05 681.388 L1496.49 681.388 L1495.93 681.388 L1495.37 681.388 L1494.81 681.388 L1494.25 681.388 L1493.69 681.388 L1493.13 681.388 L1492.57 681.388 L1492.01 681.388 L1491.45 681.388 L1490.89 681.388 L1490.34 681.388 L1489.78 681.388 L1489.22 681.388 L1488.66 681.388 L1488.1 681.388 L1487.54 681.388 L1486.98 681.388 L1486.42 681.388 L1485.86 681.388 L1485.3 681.388 L1484.74 681.388 L1484.18 681.388 L1483.62 681.388 L1483.07 681.388 L1482.51 681.388 L1481.95 681.388 L1481.39 681.388 L1480.83 681.388 L1480.27 681.388 L1479.71 681.388 L1479.15 681.388 L1478.59 681.388 L1478.03 681.388 L1477.47 681.388 L1476.91 681.388 L1476.35 681.388 L1475.79 681.388 L1475.24 681.388 L1474.68 681.388 L1474.12 681.388 L1473.56 681.388 L1473 681.388 L1472.44 681.388 L1471.88 681.388 L1471.32 681.388 L1470.76 681.388 L1470.2 681.388 L1469.64 681.388 L1469.08 681.388 L1468.52 681.388 L1467.97 681.388 L1467.41 681.388 L1466.85 681.388 L1466.29 681.388 L1465.73 681.388 L1465.17 681.388 L1464.61 681.388 L1464.05 681.388 L1463.49 681.388 L1462.93 681.388 L1462.37 681.388 L1461.81 681.388 L1461.25 681.388 L1460.7 681.388 L1460.14 681.388 L1459.58 681.388 L1459.02 681.388 L1458.46 681.388 L1457.9 681.388 L1457.34 681.388 L1456.78 681.388 L1456.22 681.388 L1455.66 681.388 L1455.1 681.388 L1454.54 681.388 L1453.98 681.388 L1453.42 681.388 L1452.87 681.388 L1452.31 681.388 L1451.75 681.388 L1451.19 681.388 L1450.63 681.388 L1450.07 681.388 L1449.51 681.388 L1448.95 681.388 L1448.39 681.388 L1447.83 681.388 L1447.27 681.388 L1446.71 681.388 L1446.15 681.388 L1445.6 681.388 L1445.04 681.388 L1444.48 681.388 L1443.92 681.388 L1443.36 681.388 L1442.8 681.388 L1442.24 681.388 L1441.68 681.388 L1441.12 681.388 L1440.56 681.388 L1440 681.388 L1439.44 681.388 L1438.88 681.388 L1438.33 681.388 L1437.77 681.388 L1437.21 681.388 L1436.65 681.388 L1436.09 681.388 L1435.53 681.388 L1434.97 681.388 L1434.41 681.388 L1433.85 681.388 L1433.29 681.388 L1432.73 681.388 L1432.17 681.388 L1431.61 681.388 L1431.05 681.388 L1430.5 681.388 L1429.94 681.388 L1429.38 681.388 L1428.82 681.388 L1428.26 681.388 L1427.7 681.388 L1427.14 681.388 L1426.58 681.388 L1426.02 681.388 L1425.46 681.388 L1424.9 681.388 L1424.34 681.388 L1423.78 681.388 L1423.23 681.388 L1422.67 681.388 L1422.11 681.388 L1421.55 681.388 L1420.99 681.388 L1420.43 681.388 L1419.87 681.388 L1419.31 681.388 L1418.75 681.388 L1418.19 681.388 L1417.63 681.388 L1417.07 681.388 L1416.51 681.388 L1415.95 681.388 L1415.4 681.388 L1414.84 681.388 L1414.28 681.388 L1413.72 681.388 L1413.16 681.388 L1412.6 681.388 L1412.04 681.388 L1411.48 681.388 L1410.92 681.388 L1410.36 681.388 L1409.8 681.388 L1409.24 681.388 L1408.68 681.388 L1408.13 681.388 L1407.57 681.388 L1407.01 681.388 L1406.45 681.388 L1405.89 681.388 L1405.33 681.388 L1404.77 681.388 L1404.21 681.388 L1403.65 681.388 L1403.09 681.388 L1402.53 681.388 L1401.97 681.388 L1401.41 681.388 L1400.86 681.388 L1400.3 681.388 L1399.74 681.388 L1399.18 681.388 L1398.62 681.388 L1398.06 681.388 L1397.5 681.388 L1396.94 681.388 L1396.38 681.388 L1395.82 681.388 L1395.26 681.388 L1394.7 681.388 L1394.14 681.388 L1393.58 681.388 L1393.03 681.388 L1392.47 681.388 L1391.91 681.388 L1391.35 681.388 L1390.79 681.388 L1390.23 681.388 L1389.67 681.388 L1389.11 681.388 L1388.55 681.388 L1387.99 681.388 L1387.43 681.388 L1386.87 681.388 L1386.31 681.388 L1385.76 681.388 L1385.2 681.388 L1384.64 681.388 L1384.08 681.388 L1383.52 681.388 L1382.96 681.388 L1382.4 681.388 L1381.84 681.388 L1381.28 681.388 L1380.72 681.388 L1380.16 681.388 L1379.6 681.388 L1379.04 681.388 L1378.49 681.388 L1377.93 681.388 L1377.37 681.388 L1376.81 681.388 L1376.25 681.388 L1375.69 681.388 L1375.13 681.388 L1374.57 681.388 L1374.01 681.388 L1373.45 681.388 L1372.89 681.388 L1372.33 681.388 L1371.77 681.388 L1371.21 681.388 L1370.66 681.388 L1370.1 681.388 L1369.54 681.388 L1368.98 681.388 L1368.42 681.388 L1367.86 681.388 L1367.3 681.388 L1366.74 681.388 L1366.18 681.388 L1365.62 681.388 L1365.06 681.388 L1364.5 681.388 L1363.94 681.388 L1363.39 681.388 L1362.83 681.388 L1362.27 681.388 L1361.71 681.388 L1361.15 681.388 L1360.59 681.388 L1360.03 681.388 L1359.47 681.388 L1358.91 681.388 L1358.35 681.388 L1357.79 681.388 L1357.23 681.388 L1356.67 681.388 L1356.12 681.388 L1355.56 681.388 L1355 681.388 L1354.44 681.388 L1353.88 681.388 L1353.32 681.388 L1352.76 681.388 L1352.2 681.388 L1351.64 681.388 L1351.08 681.388 L1350.52 681.388 L1349.96 681.388 L1349.4 681.388 L1348.84 681.388 L1348.29 681.388 L1347.73 681.388 L1347.17 681.388 L1346.61 681.388 L1346.05 681.388 L1345.49 681.388 L1344.93 681.388 L1344.37 681.388 L1343.81 681.388 L1343.25 681.388 L1342.69 681.388 L1342.13 681.388 L1341.57 681.388 L1341.02 681.388 L1340.46 681.388 L1339.9 681.388 L1339.34 681.388 L1338.78 681.388 L1338.22 681.388 L1337.66 681.388 L1337.1 681.388 L1336.54 681.388 L1335.98 681.388 L1335.42 681.388 L1334.86 681.388 L1334.3 681.388 L1333.75 681.388 L1333.19 681.388 L1332.63 681.388 L1332.07 681.388 L1331.51 681.388 L1330.95 681.388 L1330.39 681.388 L1329.83 681.388 L1329.27 681.388 L1328.71 681.388 L1328.15 681.388 L1327.59 681.388 L1327.03 681.388 L1326.47 681.388 L1325.92 681.388 L1325.36 681.388 L1324.8 681.388 L1324.24 681.388 L1323.68 681.388 L1323.12 681.388 L1322.56 681.388 L1322 681.388 L1321.44 681.388 L1320.88 681.388 L1320.32 681.388 L1319.76 681.388 L1319.2 681.388 L1318.65 681.388 L1318.09 681.388 L1317.53 681.388 L1316.97 681.388 L1316.41 681.388 L1315.85 681.388 L1315.29 681.388 L1314.73 681.388 L1314.17 681.388 L1313.61 681.388 L1313.05 681.388 L1312.49 681.388 L1311.93 681.388 L1311.38 681.388 L1310.82 681.388 L1310.26 681.388 L1309.7 681.388 L1309.14 681.388 L1308.58 681.388 L1308.02 681.388 L1307.46 681.388 L1306.9 681.388 L1306.34 681.388 L1305.78 681.388 L1305.22 681.388 L1304.66 681.388 L1304.1 681.388 L1303.55 681.388 L1302.99 681.388 L1302.43 681.388 L1301.87 681.388 L1301.31 681.388 L1300.75 681.388 L1300.19 681.388 L1299.63 681.388 L1299.07 681.388 L1298.51 681.388 L1297.95 681.388 L1297.39 681.388 L1296.83 681.388 L1296.28 681.388 L1295.72 681.388 L1295.16 681.388 L1294.6 681.388 L1294.04 681.388 L1293.48 681.388 L1292.92 681.388 L1292.36 681.388 L1291.8 681.388 L1291.24 681.388 L1290.68 681.388 L1290.12 681.388 L1289.56 681.388 L1289 681.388 L1288.45 681.388 L1287.89 681.388 L1287.33 681.388 L1286.77 681.388 L1286.21 681.388 L1285.65 681.388 L1285.09 681.388 L1284.53 681.388 L1283.97 681.388 L1283.41 681.388 L1282.85 681.388 L1282.29 681.388 L1281.73 681.388 L1281.18 681.388 L1280.62 681.388 L1280.06 681.388 L1279.5 681.388 L1278.94 681.388 L1278.38 681.388 L1277.82 681.388 L1277.26 681.388 L1276.7 681.388 L1276.14 681.388 L1275.58 681.388 L1275.02 681.388 L1274.46 681.388 L1273.91 681.388 L1273.35 681.388 L1272.79 681.388 L1272.23 681.388 L1271.67 681.388 L1271.11 681.388 L1270.55 681.388 L1269.99 681.388 L1269.43 681.388 L1268.87 681.388 L1268.31 681.388 L1267.75 681.388 L1267.19 681.388 L1266.63 681.388 L1266.08 681.388 L1265.52 681.388 L1264.96 681.388 L1264.4 681.388 L1263.84 681.388 L1263.28 681.388 L1262.72 681.388 L1262.16 681.388 L1261.6 681.388 L1261.04 681.388 L1260.48 681.388 L1259.92 681.388 L1259.36 681.388 L1258.81 681.388 L1258.25 681.388 L1257.69 681.388 L1257.13 681.388 L1256.57 681.388 L1256.01 681.388 L1255.45 681.388 L1254.89 681.388 L1254.33 681.388 L1253.77 681.388 L1253.21 681.388 L1252.65 681.388 L1252.09 681.388 L1251.54 681.388 L1250.98 681.388 L1250.42 681.388 L1249.86 681.388 L1249.3 681.388 L1248.74 681.388 L1248.18 681.388 L1247.62 681.388 L1247.06 681.388 L1246.5 681.388 L1245.94 681.388 L1245.38 681.388 L1244.82 681.388 L1244.26 681.388 L1243.71 681.388 L1243.15 681.388 L1242.59 681.388 L1242.03 681.388 L1241.47 681.388 L1240.91 681.388 L1240.35 681.388 L1239.79 681.388 L1239.23 681.388 L1238.67 681.388 L1238.11 681.388 L1237.55 681.388 L1236.99 681.388 L1236.44 681.388 L1235.88 681.388 L1235.32 681.388 L1234.76 681.388 L1234.2 681.388 L1233.64 681.388 L1233.08 681.388 L1232.52 681.388 L1231.96 681.388 L1231.4 681.388 L1230.84 681.388 L1230.28 681.388 L1229.72 681.388 L1229.17 681.388 L1228.61 681.388 L1228.05 681.388 L1227.49 681.388 L1226.93 681.388 L1226.37 681.388 L1225.81 681.388 L1225.25 681.388 L1224.69 681.388 L1224.13 681.388 L1223.57 681.388 L1223.01 681.388 L1222.45 681.388 L1221.89 681.388 L1221.34 681.388 L1220.78 681.388 L1220.22 681.388 L1219.66 681.388 L1219.1 681.388 L1218.54 681.388 L1217.98 681.388 L1217.42 681.388 L1216.86 681.388 L1216.3 681.388 L1215.74 681.388 L1215.18 681.388 L1214.62 681.388 L1214.07 681.388 L1213.51 681.388 L1212.95 681.388 L1212.39 681.388 L1211.83 681.388 L1211.27 681.388 L1210.71 681.388 L1210.15 681.388 L1209.59 681.388 L1209.03 681.388 L1208.47 681.388 L1207.91 681.388 L1207.35 681.388 L1206.8 681.388 L1206.24 681.388 L1205.68 681.388 L1205.12 681.388 L1204.56 681.388 L1204 681.388 L1203.44 681.388 L1202.88 681.388 L1202.32 681.388 L1201.76 681.388 L1201.2 681.388 L1200.64 681.388 L1200.08 681.388 L1199.52 681.388 L1198.97 681.388 L1198.41 681.388 L1197.85 681.388 L1197.29 681.388 L1196.73 681.388 L1196.17 681.388 L1195.61 681.388 L1195.05 681.388 L1194.49 681.388 L1193.93 681.388 L1193.37 681.388 L1192.81 681.388 L1192.25 681.388 L1191.7 681.388 L1191.14 681.388 L1190.58 681.388 L1190.02 681.388 L1189.46 681.388 L1188.9 681.388 L1188.34 681.388 L1187.78 681.388 L1187.22 681.388 L1186.66 681.388 L1186.1 681.388 L1185.54 681.388 L1184.98 681.388 L1184.43 681.388 L1183.87 681.388 L1183.31 681.388 L1182.75 681.388 L1182.19 681.388 L1181.63 681.388 L1181.07 681.388 L1180.51 681.388 L1179.95 681.388 L1179.39 681.388 L1178.83 681.388 L1178.27 681.388 L1177.71 681.388 L1177.15 681.388 L1176.6 681.388 L1176.04 681.388 L1175.48 681.388 L1174.92 681.388 L1174.36 681.388 L1173.8 681.388 L1173.24 681.388 L1172.68 681.388 L1172.12 681.388 L1171.56 681.388 L1171 681.388 L1170.44 681.388 L1169.88 681.388 L1169.33 681.388 L1168.77 681.388 L1168.21 681.388 L1167.65 681.388 L1167.09 681.388 L1166.53 681.388 L1165.97 681.388 L1165.41 681.388 L1164.85 681.388 L1164.29 681.388 L1163.73 681.388 L1163.17 681.388 L1162.61 681.388 L1162.05 681.388 L1161.5 681.388 L1160.94 681.388 L1160.38 681.388 L1159.82 681.388 L1159.26 681.388 L1158.7 681.388 L1158.14 681.388 L1157.58 681.388 L1157.02 681.388 L1156.46 681.388 L1155.9 681.388 L1155.34 681.388 L1154.78 681.388 L1154.23 681.388 L1153.67 681.388 L1153.11 681.388 L1152.55 681.388 L1151.99 681.388 L1151.43 681.388 L1150.87 681.388 L1150.31 681.388 L1149.75 681.388 L1149.19 681.388 L1148.63 681.388 L1148.07 681.388 L1147.51 681.388 L1146.96 681.388 L1146.4 681.388 L1145.84 681.388 L1145.28 681.388 L1144.72 681.388 L1144.16 681.388 L1143.6 681.388 L1143.04 681.388 L1142.48 681.388 L1141.92 681.388 L1141.36 681.388 L1140.8 681.388 L1140.24 681.388 L1139.68 681.388 L1139.13 681.388 L1138.57 681.388 L1138.01 681.388 L1137.45 681.388 L1136.89 681.388 L1136.33 681.388 L1135.77 681.388 L1135.21 681.388 L1134.65 681.388 L1134.09 681.388 L1133.53 681.388 L1132.97 681.388 L1132.41 681.388 L1131.86 681.388 L1131.3 681.388 L1130.74 681.388 L1130.18 681.388 L1129.62 681.388 L1129.06 681.388 L1128.5 681.388 L1127.94 681.388 L1127.38 681.388 L1126.82 681.388 L1126.26 681.388 L1125.7 681.388 L1125.14 681.388 L1124.59 681.388 L1124.03 681.388 L1123.47 681.388 L1122.91 681.388 L1122.35 681.388 L1121.79 681.388 L1121.23 681.388 L1120.67 681.388 L1120.11 681.388 L1119.55 681.388 L1118.99 681.388 L1118.43 681.388 L1117.87 681.388 L1117.31 681.388 L1116.76 681.388 L1116.2 681.388 L1115.64 681.388 L1115.08 681.388 L1114.52 681.388 L1113.96 681.388 L1113.4 681.388 L1112.84 681.388 L1112.28 681.388 L1111.72 681.388 L1111.16 681.388 L1110.6 681.388 L1110.04 681.388 L1109.49 681.388 L1108.93 681.388 L1108.37 681.388 L1107.81 681.388 L1107.25 681.388 L1106.69 681.388 L1106.13 681.388 L1105.57 681.388 L1105.01 681.388 L1104.45 681.388 L1103.89 681.388 L1103.33 681.388 L1102.77 681.388 L1102.22 681.388 L1101.66 681.388 L1101.1 681.388 L1100.54 681.388 L1099.98 681.388 L1099.42 681.388 L1098.86 681.388 L1098.3 681.388 L1097.74 681.388 L1097.18 681.388 L1096.62 681.388 L1096.06 681.388 L1095.5 681.388 L1094.94 681.388 L1094.39 681.388 L1093.83 681.388 L1093.27 681.388 L1092.71 681.388 L1092.15 681.388 L1091.59 681.388 L1091.03 681.388 L1090.47 681.388 L1089.91 681.388 L1089.35 681.388 L1088.79 681.388 L1088.23 681.388 L1087.67 681.388 L1087.12 681.388 L1086.56 681.388 L1086 681.388 L1085.44 681.388 L1084.88 681.388 L1084.32 681.388 L1083.76 681.388 L1083.2 681.388 L1082.64 681.388 L1082.08 681.388 L1081.52 681.388 L1080.96 681.388 L1080.4 681.388 L1079.85 681.388 L1079.29 681.388 L1078.73 681.388 L1078.17 681.388 L1077.61 681.388 L1077.05 681.388 L1076.49 681.388 L1075.93 681.388 L1075.37 681.388 L1074.81 681.388 L1074.25 681.388 L1073.69 681.388 L1073.13 681.388 L1072.57 681.388 L1072.02 681.388 L1071.46 681.388 L1070.9 681.388 L1070.34 681.388 L1069.78 681.388 L1069.22 681.388 L1068.66 681.388 L1068.1 681.388 L1067.54 681.388 L1066.98 681.388 L1066.42 681.388 L1065.86 681.388 L1065.3 681.388 L1064.75 681.388 L1064.19 681.388 L1063.63 681.388 L1063.07 681.388 L1062.51 681.388 L1061.95 681.388 L1061.39 681.388 L1060.83 681.388 L1060.27 681.388 L1059.71 681.388 L1059.15 681.388 L1058.59 681.388 L1058.03 681.388 L1057.48 681.388 L1056.92 681.388 L1056.36 681.388 L1055.8 681.388 L1055.24 681.388 L1054.68 681.388 L1054.12 681.388 L1053.56 681.388 L1053 681.388 L1052.44 681.388 L1051.88 681.388 L1051.32 681.388 L1050.76 681.388 L1050.2 681.388 L1049.65 681.388 L1049.09 681.388 L1048.53 681.388 L1047.97 681.388 L1047.41 681.388 L1046.85 681.388 L1046.29 681.388 L1045.73 681.388 L1045.17 681.388 L1044.61 681.388 L1044.05 681.388 L1043.49 681.388 L1042.93 681.388 L1042.38 681.388 L1041.82 681.388 L1041.26 681.388 L1040.7 681.388 L1040.14 681.388 L1039.58 681.388 L1039.02 681.388 L1038.46 681.388 L1037.9 681.388 L1037.34 681.388 L1036.78 681.388 L1036.22 681.388 L1035.66 681.388 L1035.1 681.388 L1034.55 681.388 L1033.99 681.388 L1033.43 681.388 L1032.87 681.388 L1032.31 681.388 L1031.75 681.388 L1031.19 681.388 L1030.63 681.388 L1030.07 681.388 L1029.51 681.388 L1028.95 681.388 L1028.39 681.388 L1027.83 681.388 L1027.28 681.388 L1026.72 681.388 L1026.16 681.388 L1025.6 681.388 L1025.04 681.388 L1024.48 681.388 L1023.92 681.388 L1023.36 681.388 L1022.8 681.388 L1022.24 681.388 L1021.68 681.388 L1021.12 681.388 L1020.56 681.388 L1020.01 681.388 L1019.45 681.388 L1018.89 681.388 L1018.33 681.388 L1017.77 681.388 L1017.21 681.388 L1016.65 681.388 L1016.09 681.388 L1015.53 681.388 L1014.97 681.388 L1014.41 681.388 L1013.85 681.388 L1013.29 681.388 L1012.73 681.388 L1012.18 681.388 L1011.62 681.388 L1011.06 681.388 L1010.5 681.388 L1009.94 681.388 L1009.38 681.388 L1008.82 681.388 L1008.26 681.388 L1007.7 681.388 L1007.14 681.388 L1006.58 681.388 L1006.02 681.388 L1005.46 681.388 L1004.91 681.388 L1004.35 681.388 L1003.79 681.388 L1003.23 681.388 L1002.67 681.388 L1002.11 681.388 L1001.55 681.388 L1000.99 681.388 L1000.43 681.388 L999.872 681.388 L999.313 681.388 L998.754 681.388 L998.194 681.388 L997.635 681.388 L997.076 681.388 L996.517 681.388 L995.957 681.388 L995.398 681.388 L994.839 681.388 L994.28 681.388 L993.72 681.388 L993.161 681.388 L992.602 681.388 L992.043 681.388 L991.483 681.388 L990.924 681.388 L990.365 681.388 L989.806 681.388 L989.246 681.388 L988.687 681.388 L988.128 681.388 L987.569 681.388 L987.009 681.388 L986.45 681.388 L985.891 681.388 L985.332 681.388 L984.772 681.388 L984.213 681.388 L983.654 681.388 L983.095 681.388 L982.535 681.388 L981.976 681.388 L981.417 681.388 L980.858 681.388 L980.298 681.388 L979.739 681.388 L979.18 681.388 L978.621 681.388 L978.061 681.388 L977.502 681.388 L976.943 681.388 L976.384 681.388 L975.824 681.388 L975.265 681.388 L974.706 681.388 L974.147 681.388 L973.587 681.388 L973.028 681.388 L972.469 681.388 L971.91 681.388 L971.35 681.388 L970.791 681.388 L970.232 681.388 L969.673 681.388 L969.113 681.388 L968.554 681.388 L967.995 681.388 L967.436 681.388 L966.876 681.388 L966.317 681.388 L965.758 681.388 L965.199 681.388 L964.639 681.388 L964.08 681.388 L963.521 681.388 L962.962 681.388 L962.402 681.388 L961.843 681.388 L961.284 681.388 L960.725 681.388 L960.165 681.388 L959.606 681.388 L959.047 681.388 L958.488 681.388 L957.928 681.388 L957.369 681.388 L956.81 681.388 L956.251 681.388 L955.691 681.388 L955.132 681.388 L954.573 681.388 L954.014 681.388 L953.454 681.388 L952.895 681.388 L952.336 681.388 L951.777 681.388 L951.217 681.388 L950.658 681.388 L950.099 681.388 L949.54 681.388 L948.98 681.388 L948.421 681.388 L947.862 681.388 L947.303 681.388 L946.743 681.388 L946.184 681.388 L945.625 681.388 L945.066 681.388 L944.506 681.388 L943.947 681.388 L943.388 681.388 L942.829 681.388 L942.269 681.388 L941.71 681.388 L941.151 681.388 L940.592 681.388 L940.032 681.388 L939.473 681.388 L938.914 681.388 L938.355 681.388 L937.795 681.388 L937.236 681.388 L936.677 681.388 L936.118 681.388 L935.558 681.388 L934.999 681.388 L934.44 681.388 L933.881 681.388 L933.321 681.388 L932.762 681.388 L932.203 681.388 L931.644 681.388 L931.084 681.388 L930.525 681.388 L929.966 681.388 L929.406 681.388 L928.847 681.388 L928.288 681.388 L927.729 681.388 L927.169 681.388 L926.61 681.388 L926.051 681.388 L925.492 681.388 L924.932 681.388 L924.373 681.388 L923.814 681.388 L923.255 681.388 L922.695 681.388 L922.136 681.388 L921.577 681.388 L921.018 681.388 L920.458 681.388 L919.899 681.388 L919.34 681.388 L918.781 681.388 L918.221 681.388 L917.662 681.388 L917.103 681.388 L916.544 681.388 L915.984 681.388 L915.425 681.388 L914.866 681.388 L914.307 681.388 L913.747 681.388 L913.188 681.388 L912.629 681.388 L912.07 681.388 L911.51 681.388 L910.951 681.388 L910.392 681.388 L909.833 681.388 L909.273 681.388 L908.714 681.388 L908.155 681.388 L907.596 681.388 L907.036 681.388 L906.477 681.388 L905.918 681.388 L905.359 681.388 L904.799 681.388 L904.24 681.388 L903.681 681.388 L903.122 681.388 L902.562 681.388 L902.003 681.388 L901.444 681.388 L900.885 681.388 L900.325 681.388 L899.766 681.388 L899.207 681.388 L898.648 681.388 L898.088 681.388 L897.529 681.388 L896.97 681.388 L896.411 681.388 L895.851 681.388 L895.292 681.388 L894.733 681.388 L894.174 681.388 L893.614 681.388 L893.055 681.388 L892.496 681.388 L891.937 681.388 L891.377 681.388 L890.818 681.388 L890.259 681.388 L889.7 681.388 L889.14 681.388 L888.581 681.388 L888.022 681.388 L887.463 681.388 L886.903 681.388 L886.344 681.388 L885.785 681.388 L885.226 681.388 L884.666 681.388 L884.107 681.388 L883.548 681.388 L882.989 681.388 L882.429 681.388 L881.87 681.388 L881.311 681.388 L880.752 681.388 L880.192 681.388 L879.633 681.388 L879.074 681.388 L878.515 681.388 L877.955 681.388 L877.396 681.388 L876.837 681.388 L876.278 681.388 L875.718 681.388 L875.159 681.388 L874.6 681.388 L874.041 681.388 L873.481 681.388 L872.922 681.388 L872.363 681.388 L871.804 681.388 L871.244 681.388 L870.685 681.388 L870.126 681.388 L869.567 681.388 L869.007 681.388 L868.448 681.388 L867.889 681.388 L867.33 681.388 L866.77 681.388 L866.211 681.388 L865.652 681.388 L865.093 681.388 L864.533 681.388 L863.974 681.388 L863.415 681.388 L862.856 681.388 L862.296 681.388 L861.737 681.388 L861.178 681.388 L860.619 681.388 L860.059 681.388 L859.5 681.388 L858.941 681.388 L858.382 681.388 L857.822 681.388 L857.263 681.388 L856.704 681.388 L856.145 681.388 L855.585 681.388 L855.026 681.388 L854.467 681.388 L853.908 681.388 L853.348 681.388 L852.789 681.388 L852.23 681.388 L851.671 681.388 L851.111 681.388 L850.552 681.388 L849.993 681.388 L849.434 681.388 L848.874 681.388 L848.315 681.388 L847.756 681.388 L847.197 681.388 L846.637 681.388 L846.078 681.388 L845.519 681.388 L844.96 681.388 L844.4 681.388 L843.841 681.388 L843.282 681.388 L842.723 681.388 L842.163 681.388 L841.604 681.388 L841.045 681.388 L840.486 681.388 L839.926 681.388 L839.367 681.388 L838.808 681.388 L838.249 681.388 L837.689 681.388 L837.13 681.388 L836.571 681.388 L836.012 681.388 L835.452 681.388 L834.893 681.388 L834.334 681.388 L833.775 681.388 L833.215 681.388 L832.656 681.388 L832.097 681.388 L831.538 681.388 L830.978 681.388 L830.419 681.388 L829.86 681.388 L829.301 681.388 L828.741 681.388 L828.182 681.388 L827.623 681.388 L827.064 681.388 L826.504 681.388 L825.945 681.388 L825.386 681.388 L824.827 681.388 L824.267 681.388 L823.708 681.388 L823.149 681.388 L822.59 681.388 L822.03 681.388 L821.471 681.388 L820.912 681.388 L820.353 681.388 L819.793 681.388 L819.234 681.388 L818.675 681.388 L818.116 681.388 L817.556 681.388 L816.997 681.388 L816.438 681.388 L815.879 681.388 L815.319 681.388 L814.76 681.388 L814.201 681.388 L813.642 681.388 L813.082 681.388 L812.523 681.388 L811.964 681.388 L811.405 681.388 L810.845 681.388 L810.286 681.388 L809.727 681.388 L809.168 681.388 L808.608 681.388 L808.049 681.388 L807.49 681.388 L806.931 681.388 L806.371 681.388 L805.812 681.388 L805.253 681.388 L804.693 681.388 L804.134 681.388 L803.575 681.388 L803.016 681.388 L802.456 681.388 L801.897 681.388 L801.338 681.388 L800.779 681.388 L800.219 681.388 L799.66 681.388 L799.101 681.388 L798.542 681.388 L797.982 681.388 L797.423 681.388 L796.864 681.388 L796.305 681.388 L795.745 681.388 L795.186 681.388 L794.627 681.388 L794.068 681.388 L793.508 681.388 L792.949 681.388 L792.39 681.388 L791.831 681.388 L791.271 681.388 L790.712 681.388 L790.153 681.388 L789.594 681.388 L789.034 681.388 L788.475 681.388 L787.916 681.388 L787.357 681.388 L786.797 681.388 L786.238 681.388 L785.679 681.388 L785.12 681.388 L784.56 681.388 L784.001 681.388 L783.442 681.388 L782.883 681.388 L782.323 681.388 L781.764 681.388 L781.205 681.388 L780.646 681.388 L780.086 681.388 L779.527 681.388 L778.968 681.388 L778.409 681.388 L777.849 681.388 L777.29 681.388 L776.731 681.388 L776.172 681.388 L775.612 681.388 L775.053 681.388 L774.494 681.388 L773.935 681.388 L773.375 681.388 L772.816 681.388 L772.257 681.388 L771.698 681.388 L771.138 681.388 L770.579 681.388 L770.02 681.388 L769.461 681.388 L768.901 681.388 L768.342 681.388 L767.783 681.388 L767.224 681.388 L766.664 681.388 L766.105 681.388 L765.546 681.388 L764.987 681.388 L764.427 681.388 L763.868 681.388 L763.309 681.388 L762.75 681.388 L762.19 681.388 L761.631 681.388 L761.072 681.388 L760.513 681.388 L759.953 681.388 L759.394 681.388 L758.835 681.388 L758.276 681.388 L757.716 681.388 L757.157 681.388 L756.598 681.388 L756.039 681.388 L755.479 681.388 L754.92 681.388 L754.361 681.388 L753.802 681.388 L753.242 681.388 L752.683 681.388 L752.124 681.388 L751.565 681.388 L751.005 681.388 L750.446 681.388 L749.887 681.388 L749.328 681.388 L748.768 681.388 L748.209 681.388 L747.65 681.388 L747.091 681.388 L746.531 681.388 L745.972 681.388 L745.413 681.388 L744.854 681.388 L744.294 681.388 L743.735 681.388 L743.176 681.388 L742.617 681.388 L742.057 681.388 L741.498 681.388 L740.939 681.388 L740.38 681.388 L739.82 681.388 L739.261 681.388 L738.702 681.388 L738.143 681.388 L737.583 681.388 L737.024 681.388 L736.465 681.388 L735.906 681.388 L735.346 681.388 L734.787 681.388 L734.228 681.388 L733.669 681.388 L733.109 681.388 L732.55 681.388 L731.991 681.388 L731.432 681.388 L730.872 681.388 L730.313 681.388 L729.754 681.388 L729.195 681.388 L728.635 681.388 L728.076 681.388 L727.517 681.388 L726.958 681.388 L726.398 681.388 L725.839 681.388 L725.28 681.388 L724.721 681.388 L724.161 681.388 L723.602 681.388 L723.043 681.388 L722.484 681.388 L721.924 681.388 L721.365 681.388 L720.806 681.388 L720.247 681.388  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.75 720.806,685.75 721.365,685.75 721.924,685.75 722.484,685.75 723.043,685.75 723.602,685.75 724.161,685.75 724.721,685.75 725.28,685.75 725.839,685.75 726.398,685.75 726.958,685.75 727.517,685.75 728.076,685.75 728.635,685.75 729.195,685.75 729.754,685.75 730.313,685.75 730.872,685.75 731.432,685.75 731.991,685.75 732.55,685.75 733.109,685.75 733.669,685.75 734.228,685.75 734.787,685.75 735.346,685.75 735.906,685.75 736.465,685.75 737.024,685.75 737.583,685.75 738.143,685.75 738.702,685.75 739.261,685.75 739.82,685.75 740.38,685.75 740.939,685.75 741.498,685.75 742.057,685.75 742.617,685.75 743.176,685.75 743.735,685.75 744.294,685.75 744.854,685.75 745.413,685.75 745.972,685.75 746.531,685.75 747.091,685.75 747.65,685.75 748.209,685.75 748.768,685.75 749.328,685.75 749.887,685.75 750.446,685.75 751.005,685.75 751.565,685.75 752.124,685.75 752.683,685.75 753.242,685.75 753.802,685.75 754.361,685.75 754.92,685.75 755.479,685.75 756.039,685.75 756.598,685.75 757.157,685.75 757.716,685.75 758.276,685.75 758.835,685.75 759.394,685.75 759.953,685.75 760.513,685.75 761.072,685.75 761.631,685.75 762.19,685.75 762.75,685.75 763.309,685.75 763.868,685.75 764.427,685.75 764.987,685.75 765.546,685.75 766.105,685.75 766.664,685.75 767.224,685.75 767.783,685.75 768.342,685.75 768.901,685.75 769.461,685.75 770.02,685.75 770.579,685.75 771.138,685.75 771.698,685.75 772.257,685.75 772.816,685.75 773.375,685.75 773.935,685.75 774.494,685.75 775.053,685.75 775.612,685.75 776.172,685.75 776.731,685.75 777.29,685.75 777.849,685.75 778.409,685.75 778.968,685.75 779.527,685.75 780.086,685.75 780.646,685.75 781.205,685.75 781.764,685.75 782.323,685.75 782.883,685.75 783.442,685.75 784.001,685.75 784.56,685.75 785.12,685.75 785.679,685.75 786.238,685.75 786.797,685.75 787.357,685.75 787.916,685.75 788.475,685.75 789.034,685.75 789.594,685.75 790.153,685.75 790.712,685.75 791.271,685.75 791.831,685.75 792.39,685.75 792.949,685.75 793.508,685.75 794.068,685.75 794.627,685.75 795.186,685.75 795.745,685.75 796.305,685.75 796.864,685.75 797.423,685.75 797.982,685.75 798.542,685.75 799.101,685.75 799.66,685.75 800.219,685.75 800.779,685.75 801.338,685.75 801.897,685.75 802.456,685.75 803.016,685.75 803.575,685.75 804.134,685.75 804.693,685.75 805.253,685.75 805.812,685.75 806.371,685.75 806.931,685.75 807.49,685.75 808.049,685.75 808.608,685.75 809.168,685.75 809.727,685.75 810.286,685.75 810.845,685.75 811.405,685.75 811.964,685.75 812.523,685.75 813.082,685.75 813.642,685.75 814.201,685.75 814.76,685.75 815.319,685.75 815.879,685.75 816.438,685.75 816.997,685.75 817.556,685.75 818.116,685.75 818.675,685.75 819.234,685.75 819.793,685.75 820.353,685.75 820.912,685.75 821.471,685.75 822.03,685.75 822.59,685.75 823.149,685.75 823.708,685.75 824.267,685.75 824.827,685.75 825.386,685.75 825.945,685.75 826.504,685.75 827.064,685.75 827.623,685.75 828.182,685.75 828.741,685.75 829.301,685.75 829.86,685.75 830.419,685.75 830.978,685.75 831.538,685.75 832.097,685.75 832.656,685.75 833.215,685.75 833.775,685.75 834.334,685.75 834.893,685.75 835.452,685.75 836.012,685.75 836.571,685.75 837.13,685.75 837.689,685.75 838.249,685.75 838.808,685.75 839.367,685.75 839.926,685.75 840.486,685.75 841.045,685.75 841.604,685.75 842.163,685.75 842.723,685.75 843.282,685.75 843.841,685.75 844.4,685.75 844.96,685.75 845.519,685.75 846.078,685.75 846.637,685.75 847.197,685.75 847.756,685.75 848.315,685.75 848.874,685.75 849.434,685.75 849.993,685.75 850.552,685.75 851.111,685.75 851.671,685.75 852.23,685.75 852.789,685.75 853.348,685.75 853.908,685.75 854.467,685.75 855.026,685.75 855.585,685.75 856.145,685.75 856.704,685.75 857.263,685.75 857.822,685.75 858.382,685.75 858.941,685.75 859.5,685.75 860.059,685.75 860.619,685.75 861.178,685.75 861.737,685.75 862.296,685.75 862.856,685.75 863.415,685.75 863.974,685.75 864.533,685.75 865.093,685.75 865.652,685.75 866.211,685.75 866.77,685.75 867.33,685.75 867.889,685.75 868.448,685.75 869.007,685.75 869.567,685.75 870.126,685.75 870.685,685.75 871.244,685.75 871.804,685.75 872.363,685.75 872.922,685.75 873.481,685.75 874.041,685.75 874.6,685.75 875.159,685.75 875.718,685.75 876.278,685.75 876.837,685.75 877.396,685.75 877.955,685.75 878.515,685.75 879.074,685.75 879.633,685.75 880.192,685.75 880.752,685.75 881.311,685.75 881.87,685.75 882.429,685.75 882.989,685.75 883.548,685.75 884.107,685.75 884.666,685.75 885.226,685.75 885.785,685.75 886.344,685.75 886.903,685.75 887.463,685.75 888.022,685.75 888.581,685.75 889.14,685.75 889.7,685.75 890.259,685.75 890.818,685.75 891.377,685.75 891.937,685.75 892.496,685.75 893.055,685.75 893.614,685.75 894.174,685.75 894.733,685.75 895.292,685.75 895.851,685.75 896.411,685.75 896.97,685.75 897.529,685.75 898.088,685.75 898.648,685.75 899.207,685.75 899.766,685.75 900.325,685.75 900.885,685.75 901.444,685.75 902.003,685.75 902.562,685.75 903.122,685.75 903.681,685.75 904.24,685.75 904.799,685.75 905.359,685.75 905.918,685.75 906.477,685.75 907.036,685.75 907.596,685.75 908.155,685.75 908.714,685.75 909.273,685.75 909.833,685.75 910.392,685.75 910.951,685.75 911.51,685.75 912.07,685.75 912.629,685.75 913.188,685.75 913.747,685.75 914.307,685.75 914.866,685.75 915.425,685.75 915.984,685.75 916.544,685.75 917.103,685.75 917.662,685.75 918.221,685.75 918.781,685.75 919.34,685.75 919.899,685.75 920.458,685.75 921.018,685.75 921.577,685.75 922.136,685.75 922.695,685.75 923.255,685.75 923.814,685.75 924.373,685.75 924.932,685.75 925.492,685.75 926.051,685.75 926.61,685.75 927.169,685.75 927.729,685.75 928.288,685.75 928.847,685.75 929.406,685.75 929.966,685.75 930.525,685.75 931.084,685.75 931.644,685.75 932.203,685.75 932.762,685.75 933.321,685.75 933.881,685.75 934.44,685.75 934.999,685.75 935.558,685.75 936.118,685.75 936.677,685.75 937.236,685.75 937.795,685.75 938.355,685.75 938.914,685.75 939.473,685.75 940.032,685.75 940.592,685.75 941.151,685.75 941.71,685.75 942.269,685.75 942.829,685.75 943.388,685.75 943.947,685.75 944.506,685.75 945.066,685.75 945.625,685.75 946.184,685.75 946.743,685.75 947.303,685.75 947.862,685.75 948.421,685.75 948.98,685.75 949.54,685.75 950.099,685.75 950.658,685.75 951.217,685.75 951.777,685.75 952.336,685.75 952.895,685.75 953.454,685.75 954.014,685.75 954.573,685.75 955.132,685.75 955.691,685.75 956.251,685.75 956.81,685.75 957.369,685.75 957.928,685.75 958.488,685.75 959.047,685.75 959.606,685.75 960.165,685.75 960.725,685.75 961.284,685.75 961.843,685.75 962.402,685.75 962.962,685.75 963.521,685.75 964.08,685.75 964.639,685.75 965.199,685.75 965.758,685.75 966.317,685.75 966.876,685.75 967.436,685.75 967.995,685.75 968.554,685.75 969.113,685.75 969.673,685.75 970.232,685.75 970.791,685.75 971.35,685.75 971.91,685.75 972.469,685.75 973.028,685.75 973.587,685.75 974.147,685.75 974.706,685.75 975.265,685.75 975.824,685.75 976.384,685.75 976.943,685.75 977.502,685.75 978.061,685.75 978.621,685.75 979.18,685.75 979.739,685.75 980.298,685.75 980.858,685.75 981.417,685.75 981.976,685.75 982.535,685.75 983.095,685.75 983.654,685.75 984.213,685.75 984.772,685.75 985.332,685.75 985.891,685.75 986.45,685.75 987.009,685.75 987.569,685.75 988.128,685.75 988.687,685.75 989.246,685.75 989.806,685.75 990.365,685.75 990.924,685.75 991.483,685.75 992.043,685.75 992.602,685.75 993.161,685.75 993.72,685.75 994.28,685.75 994.839,685.75 995.398,685.75 995.957,685.75 996.517,685.75 997.076,685.75 997.635,685.75 998.194,685.75 998.754,685.75 999.313,685.75 999.872,685.75 1000.43,685.75 1000.99,685.75 1001.55,685.75 1002.11,685.75 1002.67,685.75 1003.23,685.75 1003.79,685.75 1004.35,685.75 1004.91,685.75 1005.46,685.75 1006.02,685.75 1006.58,685.75 1007.14,685.75 1007.7,685.75 1008.26,685.75 1008.82,685.75 1009.38,685.75 1009.94,685.75 1010.5,685.75 1011.06,685.75 1011.62,685.75 1012.18,685.75 1012.73,685.75 1013.29,685.75 1013.85,685.75 1014.41,685.75 1014.97,685.75 1015.53,685.75 1016.09,685.75 1016.65,685.75 1017.21,685.75 1017.77,685.75 1018.33,685.75 1018.89,685.75 1019.45,685.75 1020.01,685.75 1020.56,685.75 1021.12,685.75 1021.68,685.75 1022.24,685.75 1022.8,685.75 1023.36,685.75 1023.92,685.75 1024.48,685.75 1025.04,685.75 1025.6,685.75 1026.16,685.75 1026.72,685.75 1027.28,685.75 1027.83,685.75 1028.39,685.75 1028.95,685.75 1029.51,685.75 1030.07,685.75 1030.63,685.75 1031.19,685.75 1031.75,685.75 1032.31,685.75 1032.87,685.75 1033.43,685.75 1033.99,685.75 1034.55,685.75 1035.1,685.75 1035.66,685.75 1036.22,685.75 1036.78,685.75 1037.34,685.75 1037.9,685.75 1038.46,685.75 1039.02,685.75 1039.58,685.75 1040.14,685.75 1040.7,685.75 1041.26,685.75 1041.82,685.75 1042.38,685.75 1042.93,685.75 1043.49,685.75 1044.05,685.75 1044.61,685.75 1045.17,685.75 1045.73,685.75 1046.29,685.75 1046.85,685.75 1047.41,685.75 1047.97,685.75 1048.53,685.75 1049.09,685.75 1049.65,685.75 1050.2,685.75 1050.76,685.75 1051.32,685.75 1051.88,685.75 1052.44,685.75 1053,685.75 1053.56,685.75 1054.12,685.75 1054.68,685.75 1055.24,685.75 1055.8,685.75 1056.36,685.75 1056.92,685.75 1057.48,685.75 1058.03,685.75 1058.59,685.75 1059.15,685.75 1059.71,685.75 1060.27,685.75 1060.83,685.75 1061.39,685.75 1061.95,685.75 1062.51,685.75 1063.07,685.75 1063.63,685.75 1064.19,685.75 1064.75,685.75 1065.3,685.75 1065.86,685.75 1066.42,685.75 1066.98,685.75 1067.54,685.75 1068.1,685.75 1068.66,685.75 1069.22,685.75 1069.78,685.75 1070.34,685.75 1070.9,685.75 1071.46,685.75 1072.02,685.75 1072.57,685.75 1073.13,685.75 1073.69,685.75 1074.25,685.75 1074.81,685.75 1075.37,685.75 1075.93,685.75 1076.49,685.75 1077.05,685.75 1077.61,685.75 1078.17,685.75 1078.73,685.75 1079.29,685.75 1079.85,685.75 1080.4,685.75 1080.96,685.75 1081.52,685.75 1082.08,685.75 1082.64,685.75 1083.2,685.75 1083.76,685.75 1084.32,685.75 1084.88,685.75 1085.44,685.75 1086,685.75 1086.56,685.75 1087.12,685.75 1087.67,685.75 1088.23,685.75 1088.79,685.75 1089.35,685.75 1089.91,685.75 1090.47,685.75 1091.03,685.75 1091.59,685.75 1092.15,685.75 1092.71,685.75 1093.27,685.75 1093.83,685.75 1094.39,685.75 1094.94,685.75 1095.5,685.75 1096.06,685.75 1096.62,685.75 1097.18,685.75 1097.74,685.75 1098.3,685.75 1098.86,685.75 1099.42,685.75 1099.98,685.75 1100.54,685.75 1101.1,685.75 1101.66,685.75 1102.22,685.75 1102.77,685.75 1103.33,685.75 1103.89,685.75 1104.45,685.75 1105.01,685.75 1105.57,685.75 1106.13,685.75 1106.69,685.75 1107.25,685.75 1107.81,685.75 1108.37,685.75 1108.93,685.75 1109.49,685.75 1110.04,685.75 1110.6,685.75 1111.16,685.75 1111.72,685.75 1112.28,685.75 1112.84,685.75 1113.4,685.75 1113.96,685.75 1114.52,685.75 1115.08,685.75 1115.64,685.75 1116.2,685.75 1116.76,685.75 1117.31,685.75 1117.87,685.75 1118.43,685.75 1118.99,685.75 1119.55,685.75 1120.11,685.75 1120.67,685.75 1121.23,685.75 1121.79,685.75 1122.35,685.75 1122.91,685.75 1123.47,685.75 1124.03,685.75 1124.59,685.75 1125.14,685.75 1125.7,685.75 1126.26,685.75 1126.82,685.75 1127.38,685.75 1127.94,685.75 1128.5,685.75 1129.06,685.75 1129.62,685.75 1130.18,685.75 1130.74,685.75 1131.3,685.75 1131.86,685.75 1132.41,685.75 1132.97,685.75 1133.53,685.75 1134.09,685.75 1134.65,685.75 1135.21,685.75 1135.77,685.75 1136.33,685.75 1136.89,685.75 1137.45,685.75 1138.01,685.75 1138.57,685.75 1139.13,685.75 1139.68,685.75 1140.24,685.75 1140.8,685.75 1141.36,685.75 1141.92,685.75 1142.48,685.75 1143.04,685.75 1143.6,685.75 1144.16,685.75 1144.72,685.75 1145.28,685.75 1145.84,685.75 1146.4,685.75 1146.96,685.75 1147.51,685.75 1148.07,685.75 1148.63,685.75 1149.19,685.75 1149.75,685.75 1150.31,685.75 1150.87,685.75 1151.43,685.75 1151.99,685.75 1152.55,685.75 1153.11,685.75 1153.67,685.75 1154.23,685.75 1154.78,685.75 1155.34,685.75 1155.9,685.75 1156.46,685.75 1157.02,685.75 1157.58,685.75 1158.14,685.75 1158.7,685.75 1159.26,685.75 1159.82,685.75 1160.38,685.75 1160.94,685.75 1161.5,685.75 1162.05,685.75 1162.61,685.75 1163.17,685.75 1163.73,685.75 1164.29,685.75 1164.85,685.75 1165.41,685.75 1165.97,685.75 1166.53,685.75 1167.09,685.75 1167.65,685.75 1168.21,685.75 1168.77,685.75 1169.33,685.75 1169.88,685.75 1170.44,685.75 1171,685.75 1171.56,685.75 1172.12,685.75 1172.68,685.75 1173.24,685.75 1173.8,685.75 1174.36,685.75 1174.92,685.75 1175.48,685.75 1176.04,685.75 1176.6,685.75 1177.15,685.75 1177.71,685.75 1178.27,685.75 1178.83,685.75 1179.39,685.75 1179.95,685.75 1180.51,685.75 1181.07,685.75 1181.63,685.75 1182.19,685.75 1182.75,685.75 1183.31,685.75 1183.87,685.75 1184.43,685.75 1184.98,685.75 1185.54,685.75 1186.1,685.75 1186.66,685.75 1187.22,685.75 1187.78,685.75 1188.34,685.75 1188.9,685.75 1189.46,685.75 1190.02,685.75 1190.58,685.75 1191.14,685.75 1191.7,685.75 1192.25,685.75 1192.81,685.75 1193.37,685.75 1193.93,685.75 1194.49,685.75 1195.05,685.75 1195.61,685.75 1196.17,685.75 1196.73,685.75 1197.29,685.75 1197.85,685.75 1198.41,685.75 1198.97,685.75 1199.52,685.75 1200.08,685.75 1200.64,685.75 1201.2,685.75 1201.76,685.75 1202.32,685.75 1202.88,685.75 1203.44,685.75 1204,685.75 1204.56,685.75 1205.12,685.75 1205.68,685.75 1206.24,685.75 1206.8,685.75 1207.35,685.75 1207.91,685.75 1208.47,685.75 1209.03,685.75 1209.59,685.75 1210.15,685.75 1210.71,685.75 1211.27,685.75 1211.83,685.75 1212.39,685.75 1212.95,685.75 1213.51,685.75 1214.07,685.75 1214.62,685.75 1215.18,685.75 1215.74,685.75 1216.3,685.75 1216.86,685.75 1217.42,685.75 1217.98,685.75 1218.54,685.75 1219.1,685.75 1219.66,685.75 1220.22,685.75 1220.78,685.75 1221.34,685.75 1221.89,685.75 1222.45,685.75 1223.01,685.75 1223.57,685.75 1224.13,685.75 1224.69,685.75 1225.25,685.75 1225.81,685.75 1226.37,685.75 1226.93,685.75 1227.49,685.75 1228.05,685.75 1228.61,685.75 1229.17,685.75 1229.72,685.75 1230.28,685.75 1230.84,685.75 1231.4,685.75 1231.96,685.75 1232.52,685.75 1233.08,685.75 1233.64,685.75 1234.2,685.75 1234.76,685.75 1235.32,685.75 1235.88,685.75 1236.44,685.75 1236.99,685.75 1237.55,685.75 1238.11,685.75 1238.67,685.75 1239.23,685.75 1239.79,685.75 1240.35,685.75 1240.91,685.75 1241.47,685.75 1242.03,685.75 1242.59,685.75 1243.15,685.75 1243.71,685.75 1244.26,685.75 1244.82,685.75 1245.38,685.75 1245.94,685.75 1246.5,685.75 1247.06,685.75 1247.62,685.75 1248.18,685.75 1248.74,685.75 1249.3,685.75 1249.86,685.75 1250.42,685.75 1250.98,685.75 1251.54,685.75 1252.09,685.75 1252.65,685.75 1253.21,685.75 1253.77,685.75 1254.33,685.75 1254.89,685.75 1255.45,685.75 1256.01,685.75 1256.57,685.75 1257.13,685.75 1257.69,685.75 1258.25,685.75 1258.81,685.75 1259.36,685.75 1259.92,685.75 1260.48,685.75 1261.04,685.75 1261.6,685.75 1262.16,685.75 1262.72,685.75 1263.28,685.75 1263.84,685.75 1264.4,685.75 1264.96,685.75 1265.52,685.75 1266.08,685.75 1266.63,685.75 1267.19,685.75 1267.75,685.75 1268.31,685.75 1268.87,685.75 1269.43,685.75 1269.99,685.75 1270.55,685.75 1271.11,685.75 1271.67,685.75 1272.23,685.75 1272.79,685.75 1273.35,685.75 1273.91,685.75 1274.46,685.75 1275.02,685.75 1275.58,685.75 1276.14,685.75 1276.7,685.75 1277.26,685.75 1277.82,685.75 1278.38,685.75 1278.94,685.75 1279.5,685.75 1280.06,685.75 1280.62,685.75 1281.18,685.75 1281.73,685.75 1282.29,685.75 1282.85,685.75 1283.41,685.75 1283.97,685.75 1284.53,685.75 1285.09,685.75 1285.65,685.75 1286.21,685.75 1286.77,685.75 1287.33,685.75 1287.89,685.75 1288.45,685.75 1289,685.75 1289.56,685.75 1290.12,685.75 1290.68,685.75 1291.24,685.75 1291.8,685.75 1292.36,685.75 1292.92,685.75 1293.48,685.75 1294.04,685.75 1294.6,685.75 1295.16,685.75 1295.72,685.75 1296.28,685.75 1296.83,685.75 1297.39,685.75 1297.95,685.75 1298.51,685.75 1299.07,685.75 1299.63,685.75 1300.19,685.75 1300.75,685.75 1301.31,685.75 1301.87,685.75 1302.43,685.75 1302.99,685.75 1303.55,685.75 1304.1,685.75 1304.66,685.75 1305.22,685.75 1305.78,685.75 1306.34,685.75 1306.9,685.75 1307.46,685.75 1308.02,685.75 1308.58,685.75 1309.14,685.75 1309.7,685.75 1310.26,685.75 1310.82,685.75 1311.38,685.75 1311.93,685.75 1312.49,685.75 1313.05,685.75 1313.61,685.75 1314.17,685.75 1314.73,685.75 1315.29,685.75 1315.85,685.75 1316.41,685.75 1316.97,685.75 1317.53,685.75 1318.09,685.75 1318.65,685.75 1319.2,685.75 1319.76,685.75 1320.32,685.75 1320.88,685.75 1321.44,685.75 1322,685.75 1322.56,685.75 1323.12,685.75 1323.68,685.75 1324.24,685.75 1324.8,685.75 1325.36,685.75 1325.92,685.75 1326.47,685.75 1327.03,685.75 1327.59,685.75 1328.15,685.75 1328.71,685.75 1329.27,685.75 1329.83,685.75 1330.39,685.75 1330.95,685.75 1331.51,685.75 1332.07,685.75 1332.63,685.75 1333.19,685.75 1333.75,685.75 1334.3,685.75 1334.86,685.75 1335.42,685.75 1335.98,685.75 1336.54,685.75 1337.1,685.75 1337.66,685.75 1338.22,685.75 1338.78,685.75 1339.34,685.75 1339.9,685.75 1340.46,685.75 1341.02,685.75 1341.57,685.75 1342.13,685.75 1342.69,685.75 1343.25,685.75 1343.81,685.75 1344.37,685.75 1344.93,685.75 1345.49,685.75 1346.05,685.75 1346.61,685.75 1347.17,685.75 1347.73,685.75 1348.29,685.75 1348.84,685.75 1349.4,685.75 1349.96,685.75 1350.52,685.75 1351.08,685.75 1351.64,685.75 1352.2,685.75 1352.76,685.75 1353.32,685.75 1353.88,685.75 1354.44,685.75 1355,685.75 1355.56,685.75 1356.12,685.75 1356.67,685.75 1357.23,685.75 1357.79,685.75 1358.35,685.75 1358.91,685.75 1359.47,685.75 1360.03,685.75 1360.59,685.75 1361.15,685.75 1361.71,685.75 1362.27,685.75 1362.83,685.75 1363.39,685.75 1363.94,685.75 1364.5,685.75 1365.06,685.75 1365.62,685.75 1366.18,685.75 1366.74,685.75 1367.3,685.75 1367.86,685.75 1368.42,685.75 1368.98,685.75 1369.54,685.75 1370.1,685.75 1370.66,685.75 1371.21,685.75 1371.77,685.75 1372.33,685.75 1372.89,685.75 1373.45,685.75 1374.01,685.75 1374.57,685.75 1375.13,685.75 1375.69,685.75 1376.25,685.75 1376.81,685.75 1377.37,685.75 1377.93,685.75 1378.49,685.75 1379.04,685.75 1379.6,685.75 1380.16,685.75 1380.72,685.75 1381.28,685.75 1381.84,685.75 1382.4,685.75 1382.96,685.75 1383.52,685.75 1384.08,685.75 1384.64,685.75 1385.2,685.75 1385.76,685.75 1386.31,685.75 1386.87,685.75 1387.43,685.75 1387.99,685.75 1388.55,685.75 1389.11,685.75 1389.67,685.75 1390.23,685.75 1390.79,685.75 1391.35,685.75 1391.91,685.75 1392.47,685.75 1393.03,685.75 1393.58,685.75 1394.14,685.75 1394.7,685.75 1395.26,685.75 1395.82,685.75 1396.38,685.75 1396.94,685.75 1397.5,685.75 1398.06,685.75 1398.62,685.75 1399.18,685.75 1399.74,685.75 1400.3,685.75 1400.86,685.75 1401.41,685.75 1401.97,685.75 1402.53,685.75 1403.09,685.75 1403.65,685.75 1404.21,685.75 1404.77,685.75 1405.33,685.75 1405.89,685.75 1406.45,685.75 1407.01,685.75 1407.57,685.75 1408.13,685.75 1408.68,685.75 1409.24,685.75 1409.8,685.75 1410.36,685.75 1410.92,685.75 1411.48,685.75 1412.04,685.75 1412.6,685.75 1413.16,685.75 1413.72,685.75 1414.28,685.75 1414.84,685.75 1415.4,685.75 1415.95,685.75 1416.51,685.75 1417.07,685.75 1417.63,685.75 1418.19,685.75 1418.75,685.75 1419.31,685.75 1419.87,685.75 1420.43,685.75 1420.99,685.75 1421.55,685.75 1422.11,685.75 1422.67,685.75 1423.23,685.75 1423.78,685.75 1424.34,685.75 1424.9,685.75 1425.46,685.75 1426.02,685.75 1426.58,685.75 1427.14,685.75 1427.7,685.75 1428.26,685.75 1428.82,685.75 1429.38,685.75 1429.94,685.75 1430.5,685.75 1431.05,685.75 1431.61,685.75 1432.17,685.75 1432.73,685.75 1433.29,685.75 1433.85,685.75 1434.41,685.75 1434.97,685.75 1435.53,685.75 1436.09,685.75 1436.65,685.75 1437.21,685.75 1437.77,685.75 1438.33,685.75 1438.88,685.75 1439.44,685.75 1440,685.75 1440.56,685.75 1441.12,685.75 1441.68,685.75 1442.24,685.75 1442.8,685.75 1443.36,685.75 1443.92,685.75 1444.48,685.75 1445.04,685.75 1445.6,685.75 1446.15,685.75 1446.71,685.75 1447.27,685.75 1447.83,685.75 1448.39,685.75 1448.95,685.75 1449.51,685.75 1450.07,685.75 1450.63,685.75 1451.19,685.75 1451.75,685.75 1452.31,685.75 1452.87,685.75 1453.42,685.75 1453.98,685.75 1454.54,685.75 1455.1,685.75 1455.66,685.75 1456.22,685.75 1456.78,685.75 1457.34,685.75 1457.9,685.75 1458.46,685.75 1459.02,685.75 1459.58,685.75 1460.14,685.75 1460.7,685.75 1461.25,685.75 1461.81,685.75 1462.37,685.75 1462.93,685.75 1463.49,685.75 1464.05,685.75 1464.61,685.75 1465.17,685.75 1465.73,685.75 1466.29,685.75 1466.85,685.75 1467.41,685.75 1467.97,685.75 1468.52,685.75 1469.08,685.75 1469.64,685.75 1470.2,685.75 1470.76,685.75 1471.32,685.75 1471.88,685.75 1472.44,685.75 1473,685.75 1473.56,685.75 1474.12,685.75 1474.68,685.75 1475.24,685.75 1475.79,685.75 1476.35,685.75 1476.91,685.75 1477.47,685.75 1478.03,685.75 1478.59,685.75 1479.15,685.75 1479.71,685.75 1480.27,685.75 1480.83,685.75 1481.39,685.75 1481.95,685.75 1482.51,685.75 1483.07,685.75 1483.62,685.75 1484.18,685.75 1484.74,685.75 1485.3,685.75 1485.86,685.75 1486.42,685.75 1486.98,685.75 1487.54,685.75 1488.1,685.75 1488.66,685.75 1489.22,685.75 1489.78,685.75 1490.34,685.75 1490.89,685.75 1491.45,685.75 1492.01,685.75 1492.57,685.75 1493.13,685.75 1493.69,685.75 1494.25,685.75 1494.81,685.75 1495.37,685.75 1495.93,685.75 1496.49,685.75 1497.05,685.75 1497.61,685.75 1498.16,685.75 1498.72,685.75 1499.28,685.75 1499.84,685.75 1500.4,685.75 1500.96,685.75 1501.52,685.75 1502.08,685.75 1502.64,685.75 1503.2,685.75 1503.76,685.75 1504.32,685.75 1504.88,685.75 1505.44,685.75 1505.99,685.75 1506.55,685.75 1507.11,685.75 1507.67,685.75 1508.23,685.75 1508.79,685.75 1509.35,685.75 1509.91,685.75 1510.47,685.75 1511.03,685.75 1511.59,685.75 1512.15,685.75 1512.71,685.75 1513.26,685.75 1513.82,685.75 1514.38,685.75 1514.94,685.75 1515.5,685.75 1516.06,685.75 1516.62,685.75 1517.18,685.75 1517.74,685.75 1518.3,685.75 1518.86,685.75 1519.42,685.75 1519.98,685.75 1520.53,685.75 1521.09,685.75 1521.65,685.75 1522.21,685.75 1522.77,685.75 1523.33,685.75 1523.89,685.75 1524.45,685.75 1525.01,685.75 1525.57,685.75 1526.13,685.75 1526.69,685.75 1527.25,685.75 1527.81,685.75 1528.36,685.75 1528.92,685.75 1529.48,685.75 1530.04,685.75 1530.6,685.75 1531.16,685.75 1531.72,685.75 1532.28,685.75 1532.84,685.75 1533.4,685.75 1533.96,685.75 1534.52,685.75 1535.08,685.75 1535.63,685.75 1536.19,685.75 1536.75,685.75 1537.31,685.75 1537.87,685.75 1538.43,685.75 1538.99,685.75 1539.55,685.75 1540.11,685.75 1540.67,685.75 1541.23,685.75 1541.79,685.75 1542.35,685.75 1542.9,685.75 1543.46,685.75 1544.02,685.75 1544.58,685.75 1545.14,685.75 1545.7,685.75 1546.26,685.75 1546.82,685.75 1547.38,685.75 1547.94,685.75 1548.5,685.75 1549.06,685.75 1549.62,685.75 1550.18,685.75 1550.73,685.75 1551.29,685.75 1551.85,685.75 1552.41,685.75 1552.97,685.75 1553.53,685.75 1554.09,685.75 1554.65,685.75 1555.21,685.75 1555.77,685.75 1556.33,685.75 1556.89,685.75 1557.45,685.75 1558,685.75 1558.56,685.75 1559.12,685.75 1559.68,685.75 1560.24,685.75 1560.8,685.75 1561.36,685.75 1561.92,685.75 1562.48,685.75 1563.04,685.75 1563.6,685.75 1564.16,685.75 1564.72,685.75 1565.28,685.75 1565.83,685.75 1566.39,685.75 1566.95,685.75 1567.51,685.75 1568.07,685.75 1568.63,685.75 1569.19,685.75 1569.75,685.75 1570.31,685.75 1570.87,685.75 1571.43,685.75 1571.99,685.75 1572.55,685.75 1573.1,685.75 1573.66,685.75 1574.22,685.75 1574.78,685.75 1575.34,685.75 1575.9,685.75 1576.46,685.75 1577.02,685.75 1577.58,685.75 1578.14,685.75 1578.7,685.75 1579.26,685.75 1579.82,685.75 1580.37,685.75 1580.93,685.75 1581.49,685.75 1582.05,685.75 1582.61,685.75 1583.17,685.75 1583.73,685.75 1584.29,685.75 1584.85,685.75 1585.41,685.75 1585.97,685.75 1586.53,685.75 1587.09,685.75 1587.65,685.75 1588.2,685.75 1588.76,685.75 1589.32,685.75 1589.88,685.75 1590.44,685.75 1591,685.75 1591.56,685.75 1592.12,685.75 1592.68,685.75 1593.24,685.75 1593.8,685.75 1594.36,685.75 1594.92,685.75 1595.47,685.75 1596.03,685.75 1596.59,685.75 1597.15,685.75 1597.71,685.75 1598.27,685.75 1598.83,685.75 1599.39,685.75 1599.95,685.75 1600.51,685.75 1601.07,685.75 1601.63,685.75 1602.19,685.75 1602.74,685.75 1603.3,685.75 1603.86,685.75 1604.42,685.75 1604.98,685.75 1605.54,685.75 1606.1,685.75 1606.66,685.75 1607.22,685.75 1607.78,685.75 1608.34,685.75 1608.9,685.75 1609.46,685.75 1610.02,685.75 1610.57,685.75 1611.13,685.75 1611.69,685.75 1612.25,685.75 1612.81,685.75 1613.37,685.75 1613.93,685.75 1614.49,685.75 1615.05,685.75 1615.61,685.75 1616.17,685.75 1616.73,685.75 1617.29,685.75 1617.84,685.75 1618.4,685.75 1618.96,685.75 1619.52,685.75 1620.08,685.75 1620.64,685.75 1621.2,685.75 1621.76,685.75 1622.32,685.75 1622.88,685.75 1623.44,685.75 1624,685.75 1624.56,685.75 1625.11,685.75 1625.67,685.75 1626.23,685.75 1626.79,685.75 1627.35,685.75 1627.91,685.75 1628.47,685.75 1629.03,685.75 1629.59,685.75 1630.15,685.75 1630.71,685.75 1631.27,685.75 1631.83,685.75 1632.39,685.75 1632.94,685.75 1633.5,685.75 1634.06,685.75 1634.62,685.75 1635.18,685.75 1635.74,685.75 1636.3,685.75 1636.86,685.75 1637.42,685.75 1637.98,685.75 1638.54,685.75 1639.1,685.75 1639.66,685.75 1640.21,685.75 1640.77,685.75 1641.33,685.75 1641.89,685.75 1642.45,685.75 1643.01,685.75 1643.57,685.75 1644.13,685.75 1644.69,685.75 1645.25,685.75 1645.81,685.75 1646.37,685.75 1646.93,685.75 1647.48,685.75 1648.04,685.75 1648.6,685.75 1649.16,685.75 1649.72,685.75 1650.28,685.75 1650.84,685.75 1651.4,685.75 1651.96,685.75 1652.52,685.75 1653.08,685.75 1653.64,685.75 1654.2,685.75 1654.76,685.75 1655.31,685.75 1655.87,685.75 1656.43,685.75 1656.99,685.75 1657.55,685.75 1658.11,685.75 1658.67,685.75 1659.23,685.75 1659.79,685.75 1660.35,685.75 1660.91,685.75 1661.47,685.75 1662.03,685.75 1662.58,685.75 1663.14,685.75 1663.7,685.75 1664.26,685.75 1664.82,685.75 1665.38,685.75 1665.94,685.75 1666.5,685.75 1667.06,685.75 1667.62,685.75 1668.18,685.75 1668.74,685.75 1669.3,685.75 1669.85,685.75 1670.41,685.75 1670.97,685.75 1671.53,685.75 1672.09,685.75 1672.65,685.75 1673.21,685.75 1673.77,685.75 1674.33,685.75 1674.89,685.75 1675.45,685.75 1676.01,685.75 1676.57,685.75 1677.13,685.75 1677.68,685.75 1678.24,685.75 1678.8,685.75 1679.36,685.75 1679.92,685.75 1680.48,685.75 1681.04,685.75 1681.6,685.75 1682.16,685.75 1682.72,685.75 1683.28,685.75 1683.84,685.75 1684.4,685.75 1684.95,685.75 1685.51,685.75 1686.07,685.75 1686.63,685.75 1687.19,685.75 1687.75,685.75 1688.31,685.75 1688.87,685.75 1689.43,685.75 1689.99,685.75 1690.55,685.75 1691.11,685.75 1691.67,685.75 1692.23,685.75 1692.78,685.75 1693.34,685.75 1693.9,685.75 1694.46,685.75 1695.02,685.75 1695.58,685.75 1696.14,685.75 1696.7,685.75 1697.26,685.75 1697.82,685.75 1698.38,685.75 1698.94,685.75 1699.5,685.75 1700.05,685.75 1700.61,685.75 1701.17,685.75 1701.73,685.75 1702.29,685.75 1702.85,685.75 1703.41,685.75 1703.97,685.75 1704.53,685.75 1705.09,685.75 1705.65,685.75 1706.21,685.75 1706.77,685.75 1707.32,685.75 1707.88,685.75 1708.44,685.75 1709,685.75 1709.56,685.75 1710.12,685.75 1710.68,685.75 1711.24,685.75 1711.8,685.75 1712.36,685.75 1712.92,685.75 1713.48,685.75 1714.04,685.75 1714.6,685.75 1715.15,685.75 1715.71,685.75 1716.27,685.75 1716.83,685.75 1717.39,685.75 1717.95,685.75 1718.51,685.75 1719.07,685.75 1719.63,685.75 1720.19,685.75 1720.75,685.75 1721.31,685.75 1721.87,685.75 1722.42,685.75 1722.98,685.75 1723.54,685.75 1724.1,685.75 1724.66,685.75 1725.22,685.75 1725.78,685.75 1726.34,685.75 1726.9,685.75 1727.46,685.75 1728.02,685.75 1728.58,685.75 1729.14,685.75 1729.69,685.75 1730.25,685.75 1730.81,685.75 1731.37,685.75 1731.93,685.75 1732.49,685.75 1733.05,685.75 1733.61,685.75 1734.17,685.75 1734.73,685.75 1735.29,685.75 1735.85,685.75 1736.41,685.75 1736.97,685.75 1737.52,685.75 1738.08,685.75 1738.64,685.75 1739.2,685.75 1739.76,685.75 1740.32,685.75 1740.88,685.75 1741.44,685.75 1742,685.75 1742.56,685.75 1743.12,685.75 1743.68,685.75 1744.24,685.75 1744.79,685.75 1745.35,685.75 1745.91,685.75 1746.47,685.75 1747.03,685.75 1747.59,685.75 1748.15,685.75 1748.71,685.75 1749.27,685.75 1749.83,685.75 1750.39,685.75 1750.95,685.75 1751.51,685.75 1752.06,685.75 1752.62,685.75 1753.18,685.75 1753.74,685.75 1754.3,685.75 1754.86,685.75 1755.42,685.75 1755.98,685.75 1756.54,685.75 1757.1,685.75 1757.66,685.75 1758.22,685.75 1758.78,685.75 1759.34,685.75 1759.89,685.75 1760.45,685.75 1761.01,685.75 1761.57,685.75 1762.13,685.75 1762.69,685.75 1763.25,685.75 1763.81,685.75 1764.37,685.75 1764.93,685.75 1765.49,685.75 1766.05,685.75 1766.61,685.75 1767.16,685.75 1767.72,685.75 1768.28,685.75 1768.84,685.75 1769.4,685.75 1769.96,685.75 1770.52,685.75 1771.08,685.75 1771.64,685.75 1772.2,685.75 1772.76,685.75 1773.32,685.75 1773.88,685.75 1774.43,685.75 1774.99,685.75 1775.55,685.75 1776.11,685.75 1776.67,685.75 1777.23,685.75 1777.79,685.75 1778.35,685.75 1778.91,685.75 1779.47,685.75 1780.03,685.75 1780.59,685.75 1781.15,685.75 1781.71,685.75 1782.26,685.75 1782.82,685.75 1783.38,685.75 1783.94,685.75 1784.5,685.75 1785.06,685.75 1785.62,685.75 1786.18,685.75 1786.74,685.75 1787.3,685.75 1787.86,685.75 1788.42,685.75 1788.98,685.75 1789.53,685.75 1790.09,685.75 1790.65,685.75 1791.21,685.75 1791.77,685.75 1792.33,685.75 1792.89,685.75 1793.45,685.75 1794.01,685.75 1794.57,685.75 1795.13,685.75 1795.69,685.75 1796.25,685.75 1796.8,685.75 1797.36,685.75 1797.92,685.75 1798.48,685.75 1799.04,685.75 1799.6,685.75 1800.16,685.75 1800.72,685.75 1801.28,685.75 1801.84,685.75 1802.4,685.75 1802.96,685.75 1803.52,685.75 1804.08,685.75 1804.63,685.75 1805.19,685.75 1805.75,685.75 1806.31,685.75 1806.87,685.75 1807.43,685.75 1807.99,685.75 1808.55,685.75 1809.11,685.75 1809.67,685.75 1810.23,685.75 1810.79,685.75 1811.35,685.75 1811.9,685.75 1812.46,685.75 1813.02,685.75 1813.58,685.75 1814.14,685.75 1814.7,685.75 1815.26,685.75 1815.82,685.75 1816.38,685.75 1816.94,685.75 1817.5,685.75 1818.06,685.75 1818.62,685.75 1819.18,685.75 1819.73,685.75 1820.29,685.75 1820.85,685.75 1821.41,685.75 1821.97,685.75 1822.53,685.75 1823.09,685.75 1823.65,685.75 1824.21,685.75 1824.77,685.75 1825.33,685.75 1825.89,685.75 1826.45,685.75 1827,685.75 1827.56,685.75 1828.12,685.75 1828.68,685.75 1829.24,685.75 1829.8,685.75 1830.36,685.75 1830.92,685.75 1831.48,685.75 1832.04,685.75 1832.6,685.75 1833.16,685.75 1833.72,685.75 1834.27,685.75 1834.83,685.75 1835.39,685.75 1835.95,685.75 1836.51,685.75 1837.07,685.75 1837.63,685.75 1838.19,685.75 \"/>\n<path clip-path=\"url(#clip653)\" d=\"M720.247 683.808 L720.806 683.808 L721.365 683.808 L721.924 683.808 L722.484 683.808 L723.043 683.808 L723.602 683.808 L724.161 683.808 L724.721 683.808 L725.28 683.808 L725.839 683.808 L726.398 683.808 L726.958 683.808 L727.517 683.808 L728.076 683.808 L728.635 683.808 L729.195 683.808 L729.754 683.808 L730.313 683.808 L730.872 683.808 L731.432 683.808 L731.991 683.808 L732.55 683.808 L733.109 683.808 L733.669 683.808 L734.228 683.808 L734.787 683.808 L735.346 683.808 L735.906 683.808 L736.465 683.808 L737.024 683.808 L737.583 683.808 L738.143 683.808 L738.702 683.808 L739.261 683.808 L739.82 683.808 L740.38 683.808 L740.939 683.808 L741.498 683.808 L742.057 683.808 L742.617 683.808 L743.176 683.808 L743.735 683.808 L744.294 683.808 L744.854 683.808 L745.413 683.808 L745.972 683.808 L746.531 683.808 L747.091 683.808 L747.65 683.808 L748.209 683.808 L748.768 683.808 L749.328 683.808 L749.887 683.808 L750.446 683.808 L751.005 683.808 L751.565 683.808 L752.124 683.808 L752.683 683.808 L753.242 683.808 L753.802 683.808 L754.361 683.808 L754.92 683.808 L755.479 683.808 L756.039 683.808 L756.598 683.808 L757.157 683.808 L757.716 683.808 L758.276 683.808 L758.835 683.808 L759.394 683.808 L759.953 683.808 L760.513 683.808 L761.072 683.808 L761.631 683.808 L762.19 683.808 L762.75 683.808 L763.309 683.808 L763.868 683.808 L764.427 683.808 L764.987 683.808 L765.546 683.808 L766.105 683.808 L766.664 683.808 L767.224 683.808 L767.783 683.808 L768.342 683.808 L768.901 683.808 L769.461 683.808 L770.02 683.808 L770.579 683.808 L771.138 683.808 L771.698 683.808 L772.257 683.808 L772.816 683.808 L773.375 683.808 L773.935 683.808 L774.494 683.808 L775.053 683.808 L775.612 683.808 L776.172 683.808 L776.731 683.808 L777.29 683.808 L777.849 683.808 L778.409 683.808 L778.968 683.808 L779.527 683.808 L780.086 683.808 L780.646 683.808 L781.205 683.808 L781.764 683.808 L782.323 683.808 L782.883 683.808 L783.442 683.808 L784.001 683.808 L784.56 683.808 L785.12 683.808 L785.679 683.808 L786.238 683.808 L786.797 683.808 L787.357 683.808 L787.916 683.808 L788.475 683.808 L789.034 683.808 L789.594 683.808 L790.153 683.808 L790.712 683.808 L791.271 683.808 L791.831 683.808 L792.39 683.808 L792.949 683.808 L793.508 683.808 L794.068 683.808 L794.627 683.808 L795.186 683.808 L795.745 683.808 L796.305 683.808 L796.864 683.808 L797.423 683.808 L797.982 683.808 L798.542 683.808 L799.101 683.808 L799.66 683.808 L800.219 683.808 L800.779 683.808 L801.338 683.808 L801.897 683.808 L802.456 683.808 L803.016 683.808 L803.575 683.808 L804.134 683.808 L804.693 683.808 L805.253 683.808 L805.812 683.808 L806.371 683.808 L806.931 683.808 L807.49 683.808 L808.049 683.808 L808.608 683.808 L809.168 683.808 L809.727 683.808 L810.286 683.808 L810.845 683.808 L811.405 683.808 L811.964 683.808 L812.523 683.808 L813.082 683.808 L813.642 683.808 L814.201 683.808 L814.76 683.808 L815.319 683.808 L815.879 683.808 L816.438 683.808 L816.997 683.808 L817.556 683.808 L818.116 683.808 L818.675 683.808 L819.234 683.808 L819.793 683.808 L820.353 683.808 L820.912 683.808 L821.471 683.808 L822.03 683.808 L822.59 683.808 L823.149 683.808 L823.708 683.808 L824.267 683.808 L824.827 683.808 L825.386 683.808 L825.945 683.808 L826.504 683.808 L827.064 683.808 L827.623 683.808 L828.182 683.808 L828.741 683.808 L829.301 683.808 L829.86 683.808 L830.419 683.808 L830.978 683.808 L831.538 683.808 L832.097 683.808 L832.656 683.808 L833.215 683.808 L833.775 683.808 L834.334 683.808 L834.893 683.808 L835.452 683.808 L836.012 683.808 L836.571 683.808 L837.13 683.808 L837.689 683.808 L838.249 683.808 L838.808 683.808 L839.367 683.808 L839.926 683.808 L840.486 683.808 L841.045 683.808 L841.604 683.808 L842.163 683.808 L842.723 683.808 L843.282 683.808 L843.841 683.808 L844.4 683.808 L844.96 683.808 L845.519 683.808 L846.078 683.808 L846.637 683.808 L847.197 683.808 L847.756 683.808 L848.315 683.808 L848.874 683.808 L849.434 683.808 L849.993 683.808 L850.552 683.808 L851.111 683.808 L851.671 683.808 L852.23 683.808 L852.789 683.808 L853.348 683.808 L853.908 683.808 L854.467 683.808 L855.026 683.808 L855.585 683.808 L856.145 683.808 L856.704 683.808 L857.263 683.808 L857.822 683.808 L858.382 683.808 L858.941 683.808 L859.5 683.808 L860.059 683.808 L860.619 683.808 L861.178 683.808 L861.737 683.808 L862.296 683.808 L862.856 683.808 L863.415 683.808 L863.974 683.808 L864.533 683.808 L865.093 683.808 L865.652 683.808 L866.211 683.808 L866.77 683.808 L867.33 683.808 L867.889 683.808 L868.448 683.808 L869.007 683.808 L869.567 683.808 L870.126 683.808 L870.685 683.808 L871.244 683.808 L871.804 683.808 L872.363 683.808 L872.922 683.808 L873.481 683.808 L874.041 683.808 L874.6 683.808 L875.159 683.808 L875.718 683.808 L876.278 683.808 L876.837 683.808 L877.396 683.808 L877.955 683.808 L878.515 683.808 L879.074 683.808 L879.633 683.808 L880.192 683.808 L880.752 683.808 L881.311 683.808 L881.87 683.808 L882.429 683.808 L882.989 683.808 L883.548 683.808 L884.107 683.808 L884.666 683.808 L885.226 683.808 L885.785 683.808 L886.344 683.808 L886.903 683.808 L887.463 683.808 L888.022 683.808 L888.581 683.808 L889.14 683.808 L889.7 683.808 L890.259 683.808 L890.818 683.808 L891.377 683.808 L891.937 683.808 L892.496 683.808 L893.055 683.808 L893.614 683.808 L894.174 683.808 L894.733 683.808 L895.292 683.808 L895.851 683.808 L896.411 683.808 L896.97 683.808 L897.529 683.808 L898.088 683.808 L898.648 683.808 L899.207 683.808 L899.766 683.808 L900.325 683.808 L900.885 683.808 L901.444 683.808 L902.003 683.808 L902.562 683.808 L903.122 683.808 L903.681 683.808 L904.24 683.808 L904.799 683.808 L905.359 683.808 L905.918 683.808 L906.477 683.808 L907.036 683.808 L907.596 683.808 L908.155 683.808 L908.714 683.808 L909.273 683.808 L909.833 683.808 L910.392 683.808 L910.951 683.808 L911.51 683.808 L912.07 683.808 L912.629 683.808 L913.188 683.808 L913.747 683.808 L914.307 683.808 L914.866 683.808 L915.425 683.808 L915.984 683.808 L916.544 683.808 L917.103 683.808 L917.662 683.808 L918.221 683.808 L918.781 683.808 L919.34 683.808 L919.899 683.808 L920.458 683.808 L921.018 683.808 L921.577 683.808 L922.136 683.808 L922.695 683.808 L923.255 683.808 L923.814 683.808 L924.373 683.808 L924.932 683.808 L925.492 683.808 L926.051 683.808 L926.61 683.808 L927.169 683.808 L927.729 683.808 L928.288 683.808 L928.847 683.808 L929.406 683.808 L929.966 683.808 L930.525 683.808 L931.084 683.808 L931.644 683.808 L932.203 683.808 L932.762 683.808 L933.321 683.808 L933.881 683.808 L934.44 683.808 L934.999 683.808 L935.558 683.808 L936.118 683.808 L936.677 683.808 L937.236 683.808 L937.795 683.808 L938.355 683.808 L938.914 683.808 L939.473 683.808 L940.032 683.808 L940.592 683.808 L941.151 683.808 L941.71 683.808 L942.269 683.808 L942.829 683.808 L943.388 683.808 L943.947 683.808 L944.506 683.808 L945.066 683.808 L945.625 683.808 L946.184 683.808 L946.743 683.808 L947.303 683.808 L947.862 683.808 L948.421 683.808 L948.98 683.808 L949.54 683.808 L950.099 683.808 L950.658 683.808 L951.217 683.808 L951.777 683.808 L952.336 683.808 L952.895 683.808 L953.454 683.808 L954.014 683.808 L954.573 683.808 L955.132 683.808 L955.691 683.808 L956.251 683.808 L956.81 683.808 L957.369 683.808 L957.928 683.808 L958.488 683.808 L959.047 683.808 L959.606 683.808 L960.165 683.808 L960.725 683.808 L961.284 683.808 L961.843 683.808 L962.402 683.808 L962.962 683.808 L963.521 683.808 L964.08 683.808 L964.639 683.808 L965.199 683.808 L965.758 683.808 L966.317 683.808 L966.876 683.808 L967.436 683.808 L967.995 683.808 L968.554 683.808 L969.113 683.808 L969.673 683.808 L970.232 683.808 L970.791 683.808 L971.35 683.808 L971.91 683.808 L972.469 683.808 L973.028 683.808 L973.587 683.808 L974.147 683.808 L974.706 683.808 L975.265 683.808 L975.824 683.808 L976.384 683.808 L976.943 683.808 L977.502 683.808 L978.061 683.808 L978.621 683.808 L979.18 683.808 L979.739 683.808 L980.298 683.808 L980.858 683.808 L981.417 683.808 L981.976 683.808 L982.535 683.808 L983.095 683.808 L983.654 683.808 L984.213 683.808 L984.772 683.808 L985.332 683.808 L985.891 683.808 L986.45 683.808 L987.009 683.808 L987.569 683.808 L988.128 683.808 L988.687 683.808 L989.246 683.808 L989.806 683.808 L990.365 683.808 L990.924 683.808 L991.483 683.808 L992.043 683.808 L992.602 683.808 L993.161 683.808 L993.72 683.808 L994.28 683.808 L994.839 683.808 L995.398 683.808 L995.957 683.808 L996.517 683.808 L997.076 683.808 L997.635 683.808 L998.194 683.808 L998.754 683.808 L999.313 683.808 L999.872 683.808 L1000.43 683.808 L1000.99 683.808 L1001.55 683.808 L1002.11 683.808 L1002.67 683.808 L1003.23 683.808 L1003.79 683.808 L1004.35 683.808 L1004.91 683.808 L1005.46 683.808 L1006.02 683.808 L1006.58 683.808 L1007.14 683.808 L1007.7 683.808 L1008.26 683.808 L1008.82 683.808 L1009.38 683.808 L1009.94 683.808 L1010.5 683.808 L1011.06 683.808 L1011.62 683.808 L1012.18 683.808 L1012.73 683.808 L1013.29 683.808 L1013.85 683.808 L1014.41 683.808 L1014.97 683.808 L1015.53 683.808 L1016.09 683.808 L1016.65 683.808 L1017.21 683.808 L1017.77 683.808 L1018.33 683.808 L1018.89 683.808 L1019.45 683.808 L1020.01 683.808 L1020.56 683.808 L1021.12 683.808 L1021.68 683.808 L1022.24 683.808 L1022.8 683.808 L1023.36 683.808 L1023.92 683.808 L1024.48 683.808 L1025.04 683.808 L1025.6 683.808 L1026.16 683.808 L1026.72 683.808 L1027.28 683.808 L1027.83 683.808 L1028.39 683.808 L1028.95 683.808 L1029.51 683.808 L1030.07 683.808 L1030.63 683.808 L1031.19 683.808 L1031.75 683.808 L1032.31 683.808 L1032.87 683.808 L1033.43 683.808 L1033.99 683.808 L1034.55 683.808 L1035.1 683.808 L1035.66 683.808 L1036.22 683.808 L1036.78 683.808 L1037.34 683.808 L1037.9 683.808 L1038.46 683.808 L1039.02 683.808 L1039.58 683.808 L1040.14 683.808 L1040.7 683.808 L1041.26 683.808 L1041.82 683.808 L1042.38 683.808 L1042.93 683.808 L1043.49 683.808 L1044.05 683.808 L1044.61 683.808 L1045.17 683.808 L1045.73 683.808 L1046.29 683.808 L1046.85 683.808 L1047.41 683.808 L1047.97 683.808 L1048.53 683.808 L1049.09 683.808 L1049.65 683.808 L1050.2 683.808 L1050.76 683.808 L1051.32 683.808 L1051.88 683.808 L1052.44 683.808 L1053 683.808 L1053.56 683.808 L1054.12 683.808 L1054.68 683.808 L1055.24 683.808 L1055.8 683.808 L1056.36 683.808 L1056.92 683.808 L1057.48 683.808 L1058.03 683.808 L1058.59 683.808 L1059.15 683.808 L1059.71 683.808 L1060.27 683.808 L1060.83 683.808 L1061.39 683.808 L1061.95 683.808 L1062.51 683.808 L1063.07 683.808 L1063.63 683.808 L1064.19 683.808 L1064.75 683.808 L1065.3 683.808 L1065.86 683.808 L1066.42 683.808 L1066.98 683.808 L1067.54 683.808 L1068.1 683.808 L1068.66 683.808 L1069.22 683.808 L1069.78 683.808 L1070.34 683.808 L1070.9 683.808 L1071.46 683.808 L1072.02 683.808 L1072.57 683.808 L1073.13 683.808 L1073.69 683.808 L1074.25 683.808 L1074.81 683.808 L1075.37 683.808 L1075.93 683.808 L1076.49 683.808 L1077.05 683.808 L1077.61 683.808 L1078.17 683.808 L1078.73 683.808 L1079.29 683.808 L1079.85 683.808 L1080.4 683.808 L1080.96 683.808 L1081.52 683.808 L1082.08 683.808 L1082.64 683.808 L1083.2 683.808 L1083.76 683.808 L1084.32 683.808 L1084.88 683.808 L1085.44 683.808 L1086 683.808 L1086.56 683.808 L1087.12 683.808 L1087.67 683.808 L1088.23 683.808 L1088.79 683.808 L1089.35 683.808 L1089.91 683.808 L1090.47 683.808 L1091.03 683.808 L1091.59 683.808 L1092.15 683.808 L1092.71 683.808 L1093.27 683.808 L1093.83 683.808 L1094.39 683.808 L1094.94 683.808 L1095.5 683.808 L1096.06 683.808 L1096.62 683.808 L1097.18 683.808 L1097.74 683.808 L1098.3 683.808 L1098.86 683.808 L1099.42 683.808 L1099.98 683.808 L1100.54 683.808 L1101.1 683.808 L1101.66 683.808 L1102.22 683.808 L1102.77 683.808 L1103.33 683.808 L1103.89 683.808 L1104.45 683.808 L1105.01 683.808 L1105.57 683.808 L1106.13 683.808 L1106.69 683.808 L1107.25 683.808 L1107.81 683.808 L1108.37 683.808 L1108.93 683.808 L1109.49 683.808 L1110.04 683.808 L1110.6 683.808 L1111.16 683.808 L1111.72 683.808 L1112.28 683.808 L1112.84 683.808 L1113.4 683.808 L1113.96 683.808 L1114.52 683.808 L1115.08 683.808 L1115.64 683.808 L1116.2 683.808 L1116.76 683.808 L1117.31 683.808 L1117.87 683.808 L1118.43 683.808 L1118.99 683.808 L1119.55 683.808 L1120.11 683.808 L1120.67 683.808 L1121.23 683.808 L1121.79 683.808 L1122.35 683.808 L1122.91 683.808 L1123.47 683.808 L1124.03 683.808 L1124.59 683.808 L1125.14 683.808 L1125.7 683.808 L1126.26 683.808 L1126.82 683.808 L1127.38 683.808 L1127.94 683.808 L1128.5 683.808 L1129.06 683.808 L1129.62 683.808 L1130.18 683.808 L1130.74 683.808 L1131.3 683.808 L1131.86 683.808 L1132.41 683.808 L1132.97 683.808 L1133.53 683.808 L1134.09 683.808 L1134.65 683.808 L1135.21 683.808 L1135.77 683.808 L1136.33 683.808 L1136.89 683.808 L1137.45 683.808 L1138.01 683.808 L1138.57 683.808 L1139.13 683.808 L1139.68 683.808 L1140.24 683.808 L1140.8 683.808 L1141.36 683.808 L1141.92 683.808 L1142.48 683.808 L1143.04 683.808 L1143.6 683.808 L1144.16 683.808 L1144.72 683.808 L1145.28 683.808 L1145.84 683.808 L1146.4 683.808 L1146.96 683.808 L1147.51 683.808 L1148.07 683.808 L1148.63 683.808 L1149.19 683.808 L1149.75 683.808 L1150.31 683.808 L1150.87 683.808 L1151.43 683.808 L1151.99 683.808 L1152.55 683.808 L1153.11 683.808 L1153.67 683.808 L1154.23 683.808 L1154.78 683.808 L1155.34 683.808 L1155.9 683.808 L1156.46 683.808 L1157.02 683.808 L1157.58 683.808 L1158.14 683.808 L1158.7 683.808 L1159.26 683.808 L1159.82 683.808 L1160.38 683.808 L1160.94 683.808 L1161.5 683.808 L1162.05 683.808 L1162.61 683.808 L1163.17 683.808 L1163.73 683.808 L1164.29 683.808 L1164.85 683.808 L1165.41 683.808 L1165.97 683.808 L1166.53 683.808 L1167.09 683.808 L1167.65 683.808 L1168.21 683.808 L1168.77 683.808 L1169.33 683.808 L1169.88 683.808 L1170.44 683.808 L1171 683.808 L1171.56 683.808 L1172.12 683.808 L1172.68 683.808 L1173.24 683.808 L1173.8 683.808 L1174.36 683.808 L1174.92 683.808 L1175.48 683.808 L1176.04 683.808 L1176.6 683.808 L1177.15 683.808 L1177.71 683.808 L1178.27 683.808 L1178.83 683.808 L1179.39 683.808 L1179.95 683.808 L1180.51 683.808 L1181.07 683.808 L1181.63 683.808 L1182.19 683.808 L1182.75 683.808 L1183.31 683.808 L1183.87 683.808 L1184.43 683.808 L1184.98 683.808 L1185.54 683.808 L1186.1 683.808 L1186.66 683.808 L1187.22 683.808 L1187.78 683.808 L1188.34 683.808 L1188.9 683.808 L1189.46 683.808 L1190.02 683.808 L1190.58 683.808 L1191.14 683.808 L1191.7 683.808 L1192.25 683.808 L1192.81 683.808 L1193.37 683.808 L1193.93 683.808 L1194.49 683.808 L1195.05 683.808 L1195.61 683.808 L1196.17 683.808 L1196.73 683.808 L1197.29 683.808 L1197.85 683.808 L1198.41 683.808 L1198.97 683.808 L1199.52 683.808 L1200.08 683.808 L1200.64 683.808 L1201.2 683.808 L1201.76 683.808 L1202.32 683.808 L1202.88 683.808 L1203.44 683.808 L1204 683.808 L1204.56 683.808 L1205.12 683.808 L1205.68 683.808 L1206.24 683.808 L1206.8 683.808 L1207.35 683.808 L1207.91 683.808 L1208.47 683.808 L1209.03 683.808 L1209.59 683.808 L1210.15 683.808 L1210.71 683.808 L1211.27 683.808 L1211.83 683.808 L1212.39 683.808 L1212.95 683.808 L1213.51 683.808 L1214.07 683.808 L1214.62 683.808 L1215.18 683.808 L1215.74 683.808 L1216.3 683.808 L1216.86 683.808 L1217.42 683.808 L1217.98 683.808 L1218.54 683.808 L1219.1 683.808 L1219.66 683.808 L1220.22 683.808 L1220.78 683.808 L1221.34 683.808 L1221.89 683.808 L1222.45 683.808 L1223.01 683.808 L1223.57 683.808 L1224.13 683.808 L1224.69 683.808 L1225.25 683.808 L1225.81 683.808 L1226.37 683.808 L1226.93 683.808 L1227.49 683.808 L1228.05 683.808 L1228.61 683.808 L1229.17 683.808 L1229.72 683.808 L1230.28 683.808 L1230.84 683.808 L1231.4 683.808 L1231.96 683.808 L1232.52 683.808 L1233.08 683.808 L1233.64 683.808 L1234.2 683.808 L1234.76 683.808 L1235.32 683.808 L1235.88 683.808 L1236.44 683.808 L1236.99 683.808 L1237.55 683.808 L1238.11 683.808 L1238.67 683.808 L1239.23 683.808 L1239.79 683.808 L1240.35 683.808 L1240.91 683.808 L1241.47 683.808 L1242.03 683.808 L1242.59 683.808 L1243.15 683.808 L1243.71 683.808 L1244.26 683.808 L1244.82 683.808 L1245.38 683.808 L1245.94 683.808 L1246.5 683.808 L1247.06 683.808 L1247.62 683.808 L1248.18 683.808 L1248.74 683.808 L1249.3 683.808 L1249.86 683.808 L1250.42 683.808 L1250.98 683.808 L1251.54 683.808 L1252.09 683.808 L1252.65 683.808 L1253.21 683.808 L1253.77 683.808 L1254.33 683.808 L1254.89 683.808 L1255.45 683.808 L1256.01 683.808 L1256.57 683.808 L1257.13 683.808 L1257.69 683.808 L1258.25 683.808 L1258.81 683.808 L1259.36 683.808 L1259.92 683.808 L1260.48 683.808 L1261.04 683.808 L1261.6 683.808 L1262.16 683.808 L1262.72 683.808 L1263.28 683.808 L1263.84 683.808 L1264.4 683.808 L1264.96 683.808 L1265.52 683.808 L1266.08 683.808 L1266.63 683.808 L1267.19 683.808 L1267.75 683.808 L1268.31 683.808 L1268.87 683.808 L1269.43 683.808 L1269.99 683.808 L1270.55 683.808 L1271.11 683.808 L1271.67 683.808 L1272.23 683.808 L1272.79 683.808 L1273.35 683.808 L1273.91 683.808 L1274.46 683.808 L1275.02 683.808 L1275.58 683.808 L1276.14 683.808 L1276.7 683.808 L1277.26 683.808 L1277.82 683.808 L1278.38 683.808 L1278.94 683.808 L1279.5 683.808 L1280.06 683.808 L1280.62 683.808 L1281.18 683.808 L1281.73 683.808 L1282.29 683.808 L1282.85 683.808 L1283.41 683.808 L1283.97 683.808 L1284.53 683.808 L1285.09 683.808 L1285.65 683.808 L1286.21 683.808 L1286.77 683.808 L1287.33 683.808 L1287.89 683.808 L1288.45 683.808 L1289 683.808 L1289.56 683.808 L1290.12 683.808 L1290.68 683.808 L1291.24 683.808 L1291.8 683.808 L1292.36 683.808 L1292.92 683.808 L1293.48 683.808 L1294.04 683.808 L1294.6 683.808 L1295.16 683.808 L1295.72 683.808 L1296.28 683.808 L1296.83 683.808 L1297.39 683.808 L1297.95 683.808 L1298.51 683.808 L1299.07 683.808 L1299.63 683.808 L1300.19 683.808 L1300.75 683.808 L1301.31 683.808 L1301.87 683.808 L1302.43 683.808 L1302.99 683.808 L1303.55 683.808 L1304.1 683.808 L1304.66 683.808 L1305.22 683.808 L1305.78 683.808 L1306.34 683.808 L1306.9 683.808 L1307.46 683.808 L1308.02 683.808 L1308.58 683.808 L1309.14 683.808 L1309.7 683.808 L1310.26 683.808 L1310.82 683.808 L1311.38 683.808 L1311.93 683.808 L1312.49 683.808 L1313.05 683.808 L1313.61 683.808 L1314.17 683.808 L1314.73 683.808 L1315.29 683.808 L1315.85 683.808 L1316.41 683.808 L1316.97 683.808 L1317.53 683.808 L1318.09 683.808 L1318.65 683.808 L1319.2 683.808 L1319.76 683.808 L1320.32 683.808 L1320.88 683.808 L1321.44 683.808 L1322 683.808 L1322.56 683.808 L1323.12 683.808 L1323.68 683.808 L1324.24 683.808 L1324.8 683.808 L1325.36 683.808 L1325.92 683.808 L1326.47 683.808 L1327.03 683.808 L1327.59 683.808 L1328.15 683.808 L1328.71 683.808 L1329.27 683.808 L1329.83 683.808 L1330.39 683.808 L1330.95 683.808 L1331.51 683.808 L1332.07 683.808 L1332.63 683.808 L1333.19 683.808 L1333.75 683.808 L1334.3 683.808 L1334.86 683.808 L1335.42 683.808 L1335.98 683.808 L1336.54 683.808 L1337.1 683.808 L1337.66 683.808 L1338.22 683.808 L1338.78 683.808 L1339.34 683.808 L1339.9 683.808 L1340.46 683.808 L1341.02 683.808 L1341.57 683.808 L1342.13 683.808 L1342.69 683.808 L1343.25 683.808 L1343.81 683.808 L1344.37 683.808 L1344.93 683.808 L1345.49 683.808 L1346.05 683.808 L1346.61 683.808 L1347.17 683.808 L1347.73 683.808 L1348.29 683.808 L1348.84 683.808 L1349.4 683.808 L1349.96 683.808 L1350.52 683.808 L1351.08 683.808 L1351.64 683.808 L1352.2 683.808 L1352.76 683.808 L1353.32 683.808 L1353.88 683.808 L1354.44 683.808 L1355 683.808 L1355.56 683.808 L1356.12 683.808 L1356.67 683.808 L1357.23 683.808 L1357.79 683.808 L1358.35 683.808 L1358.91 683.808 L1359.47 683.808 L1360.03 683.808 L1360.59 683.808 L1361.15 683.808 L1361.71 683.808 L1362.27 683.808 L1362.83 683.808 L1363.39 683.808 L1363.94 683.808 L1364.5 683.808 L1365.06 683.808 L1365.62 683.808 L1366.18 683.808 L1366.74 683.808 L1367.3 683.808 L1367.86 683.808 L1368.42 683.808 L1368.98 683.808 L1369.54 683.808 L1370.1 683.808 L1370.66 683.808 L1371.21 683.808 L1371.77 683.808 L1372.33 683.808 L1372.89 683.808 L1373.45 683.808 L1374.01 683.808 L1374.57 683.808 L1375.13 683.808 L1375.69 683.808 L1376.25 683.808 L1376.81 683.808 L1377.37 683.808 L1377.93 683.808 L1378.49 683.808 L1379.04 683.808 L1379.6 683.808 L1380.16 683.808 L1380.72 683.808 L1381.28 683.808 L1381.84 683.808 L1382.4 683.808 L1382.96 683.808 L1383.52 683.808 L1384.08 683.808 L1384.64 683.808 L1385.2 683.808 L1385.76 683.808 L1386.31 683.808 L1386.87 683.808 L1387.43 683.808 L1387.99 683.808 L1388.55 683.808 L1389.11 683.808 L1389.67 683.808 L1390.23 683.808 L1390.79 683.808 L1391.35 683.808 L1391.91 683.808 L1392.47 683.808 L1393.03 683.808 L1393.58 683.808 L1394.14 683.808 L1394.7 683.808 L1395.26 683.808 L1395.82 683.808 L1396.38 683.808 L1396.94 683.808 L1397.5 683.808 L1398.06 683.808 L1398.62 683.808 L1399.18 683.808 L1399.74 683.808 L1400.3 683.808 L1400.86 683.808 L1401.41 683.808 L1401.97 683.808 L1402.53 683.808 L1403.09 683.808 L1403.65 683.808 L1404.21 683.808 L1404.77 683.808 L1405.33 683.808 L1405.89 683.808 L1406.45 683.808 L1407.01 683.808 L1407.57 683.808 L1408.13 683.808 L1408.68 683.808 L1409.24 683.808 L1409.8 683.808 L1410.36 683.808 L1410.92 683.808 L1411.48 683.808 L1412.04 683.808 L1412.6 683.808 L1413.16 683.808 L1413.72 683.808 L1414.28 683.808 L1414.84 683.808 L1415.4 683.808 L1415.95 683.808 L1416.51 683.808 L1417.07 683.808 L1417.63 683.808 L1418.19 683.808 L1418.75 683.808 L1419.31 683.808 L1419.87 683.808 L1420.43 683.808 L1420.99 683.808 L1421.55 683.808 L1422.11 683.808 L1422.67 683.808 L1423.23 683.808 L1423.78 683.808 L1424.34 683.808 L1424.9 683.808 L1425.46 683.808 L1426.02 683.808 L1426.58 683.808 L1427.14 683.808 L1427.7 683.808 L1428.26 683.808 L1428.82 683.808 L1429.38 683.808 L1429.94 683.808 L1430.5 683.808 L1431.05 683.808 L1431.61 683.808 L1432.17 683.808 L1432.73 683.808 L1433.29 683.808 L1433.85 683.808 L1434.41 683.808 L1434.97 683.808 L1435.53 683.808 L1436.09 683.808 L1436.65 683.808 L1437.21 683.808 L1437.77 683.808 L1438.33 683.808 L1438.88 683.808 L1439.44 683.808 L1440 683.808 L1440.56 683.808 L1441.12 683.808 L1441.68 683.808 L1442.24 683.808 L1442.8 683.808 L1443.36 683.808 L1443.92 683.808 L1444.48 683.808 L1445.04 683.808 L1445.6 683.808 L1446.15 683.808 L1446.71 683.808 L1447.27 683.808 L1447.83 683.808 L1448.39 683.808 L1448.95 683.808 L1449.51 683.808 L1450.07 683.808 L1450.63 683.808 L1451.19 683.808 L1451.75 683.808 L1452.31 683.808 L1452.87 683.808 L1453.42 683.808 L1453.98 683.808 L1454.54 683.808 L1455.1 683.808 L1455.66 683.808 L1456.22 683.808 L1456.78 683.808 L1457.34 683.808 L1457.9 683.808 L1458.46 683.808 L1459.02 683.808 L1459.58 683.808 L1460.14 683.808 L1460.7 683.808 L1461.25 683.808 L1461.81 683.808 L1462.37 683.808 L1462.93 683.808 L1463.49 683.808 L1464.05 683.808 L1464.61 683.808 L1465.17 683.808 L1465.73 683.808 L1466.29 683.808 L1466.85 683.808 L1467.41 683.808 L1467.97 683.808 L1468.52 683.808 L1469.08 683.808 L1469.64 683.808 L1470.2 683.808 L1470.76 683.808 L1471.32 683.808 L1471.88 683.808 L1472.44 683.808 L1473 683.808 L1473.56 683.808 L1474.12 683.808 L1474.68 683.808 L1475.24 683.808 L1475.79 683.808 L1476.35 683.808 L1476.91 683.808 L1477.47 683.808 L1478.03 683.808 L1478.59 683.808 L1479.15 683.808 L1479.71 683.808 L1480.27 683.808 L1480.83 683.808 L1481.39 683.808 L1481.95 683.808 L1482.51 683.808 L1483.07 683.808 L1483.62 683.808 L1484.18 683.808 L1484.74 683.808 L1485.3 683.808 L1485.86 683.808 L1486.42 683.808 L1486.98 683.808 L1487.54 683.808 L1488.1 683.808 L1488.66 683.808 L1489.22 683.808 L1489.78 683.808 L1490.34 683.808 L1490.89 683.808 L1491.45 683.808 L1492.01 683.808 L1492.57 683.808 L1493.13 683.808 L1493.69 683.808 L1494.25 683.808 L1494.81 683.808 L1495.37 683.808 L1495.93 683.808 L1496.49 683.808 L1497.05 683.808 L1497.61 683.808 L1498.16 683.808 L1498.72 683.808 L1499.28 683.808 L1499.84 683.808 L1500.4 683.808 L1500.96 683.808 L1501.52 683.808 L1502.08 683.808 L1502.64 683.808 L1503.2 683.808 L1503.76 683.808 L1504.32 683.808 L1504.88 683.808 L1505.44 683.808 L1505.99 683.808 L1506.55 683.808 L1507.11 683.808 L1507.67 683.808 L1508.23 683.808 L1508.79 683.808 L1509.35 683.808 L1509.91 683.808 L1510.47 683.808 L1511.03 683.808 L1511.59 683.808 L1512.15 683.808 L1512.71 683.808 L1513.26 683.808 L1513.82 683.808 L1514.38 683.808 L1514.94 683.808 L1515.5 683.808 L1516.06 683.808 L1516.62 683.808 L1517.18 683.808 L1517.74 683.808 L1518.3 683.808 L1518.86 683.808 L1519.42 683.808 L1519.98 683.808 L1520.53 683.808 L1521.09 683.808 L1521.65 683.808 L1522.21 683.808 L1522.77 683.808 L1523.33 683.808 L1523.89 683.808 L1524.45 683.808 L1525.01 683.808 L1525.57 683.808 L1526.13 683.808 L1526.69 683.808 L1527.25 683.808 L1527.81 683.808 L1528.36 683.808 L1528.92 683.808 L1529.48 683.808 L1530.04 683.808 L1530.6 683.808 L1531.16 683.808 L1531.72 683.808 L1532.28 683.808 L1532.84 683.808 L1533.4 683.808 L1533.96 683.808 L1534.52 683.808 L1535.08 683.808 L1535.63 683.808 L1536.19 683.808 L1536.75 683.808 L1537.31 683.808 L1537.87 683.808 L1538.43 683.808 L1538.99 683.808 L1539.55 683.808 L1540.11 683.808 L1540.67 683.808 L1541.23 683.808 L1541.79 683.808 L1542.35 683.808 L1542.9 683.808 L1543.46 683.808 L1544.02 683.808 L1544.58 683.808 L1545.14 683.808 L1545.7 683.808 L1546.26 683.808 L1546.82 683.808 L1547.38 683.808 L1547.94 683.808 L1548.5 683.808 L1549.06 683.808 L1549.62 683.808 L1550.18 683.808 L1550.73 683.808 L1551.29 683.808 L1551.85 683.808 L1552.41 683.808 L1552.97 683.808 L1553.53 683.808 L1554.09 683.808 L1554.65 683.808 L1555.21 683.808 L1555.77 683.808 L1556.33 683.808 L1556.89 683.808 L1557.45 683.808 L1558 683.808 L1558.56 683.808 L1559.12 683.808 L1559.68 683.808 L1560.24 683.808 L1560.8 683.808 L1561.36 683.808 L1561.92 683.808 L1562.48 683.808 L1563.04 683.808 L1563.6 683.808 L1564.16 683.808 L1564.72 683.808 L1565.28 683.808 L1565.83 683.808 L1566.39 683.808 L1566.95 683.808 L1567.51 683.808 L1568.07 683.808 L1568.63 683.808 L1569.19 683.808 L1569.75 683.808 L1570.31 683.808 L1570.87 683.808 L1571.43 683.808 L1571.99 683.808 L1572.55 683.808 L1573.1 683.808 L1573.66 683.808 L1574.22 683.808 L1574.78 683.808 L1575.34 683.808 L1575.9 683.808 L1576.46 683.808 L1577.02 683.808 L1577.58 683.808 L1578.14 683.808 L1578.7 683.808 L1579.26 683.808 L1579.82 683.808 L1580.37 683.808 L1580.93 683.808 L1581.49 683.808 L1582.05 683.808 L1582.61 683.808 L1583.17 683.808 L1583.73 683.808 L1584.29 683.808 L1584.85 683.808 L1585.41 683.808 L1585.97 683.808 L1586.53 683.808 L1587.09 683.808 L1587.65 683.808 L1588.2 683.808 L1588.76 683.808 L1589.32 683.808 L1589.88 683.808 L1590.44 683.808 L1591 683.808 L1591.56 683.808 L1592.12 683.808 L1592.68 683.808 L1593.24 683.808 L1593.8 683.808 L1594.36 683.808 L1594.92 683.808 L1595.47 683.808 L1596.03 683.808 L1596.59 683.808 L1597.15 683.808 L1597.71 683.808 L1598.27 683.808 L1598.83 683.808 L1599.39 683.808 L1599.95 683.808 L1600.51 683.808 L1601.07 683.808 L1601.63 683.808 L1602.19 683.808 L1602.74 683.808 L1603.3 683.808 L1603.86 683.808 L1604.42 683.808 L1604.98 683.808 L1605.54 683.808 L1606.1 683.808 L1606.66 683.808 L1607.22 683.808 L1607.78 683.808 L1608.34 683.808 L1608.9 683.808 L1609.46 683.808 L1610.02 683.808 L1610.57 683.808 L1611.13 683.808 L1611.69 683.808 L1612.25 683.808 L1612.81 683.808 L1613.37 683.808 L1613.93 683.808 L1614.49 683.808 L1615.05 683.808 L1615.61 683.808 L1616.17 683.808 L1616.73 683.808 L1617.29 683.808 L1617.84 683.808 L1618.4 683.808 L1618.96 683.808 L1619.52 683.808 L1620.08 683.808 L1620.64 683.808 L1621.2 683.808 L1621.76 683.808 L1622.32 683.808 L1622.88 683.808 L1623.44 683.808 L1624 683.808 L1624.56 683.808 L1625.11 683.808 L1625.67 683.808 L1626.23 683.808 L1626.79 683.808 L1627.35 683.808 L1627.91 683.808 L1628.47 683.808 L1629.03 683.808 L1629.59 683.808 L1630.15 683.808 L1630.71 683.808 L1631.27 683.808 L1631.83 683.808 L1632.39 683.808 L1632.94 683.808 L1633.5 683.808 L1634.06 683.808 L1634.62 683.808 L1635.18 683.808 L1635.74 683.808 L1636.3 683.808 L1636.86 683.808 L1637.42 683.808 L1637.98 683.808 L1638.54 683.808 L1639.1 683.808 L1639.66 683.808 L1640.21 683.808 L1640.77 683.808 L1641.33 683.808 L1641.89 683.808 L1642.45 683.808 L1643.01 683.808 L1643.57 683.808 L1644.13 683.808 L1644.69 683.808 L1645.25 683.808 L1645.81 683.808 L1646.37 683.808 L1646.93 683.808 L1647.48 683.808 L1648.04 683.808 L1648.6 683.808 L1649.16 683.808 L1649.72 683.808 L1650.28 683.808 L1650.84 683.808 L1651.4 683.808 L1651.96 683.808 L1652.52 683.808 L1653.08 683.808 L1653.64 683.808 L1654.2 683.808 L1654.76 683.808 L1655.31 683.808 L1655.87 683.808 L1656.43 683.808 L1656.99 683.808 L1657.55 683.808 L1658.11 683.808 L1658.67 683.808 L1659.23 683.808 L1659.79 683.808 L1660.35 683.808 L1660.91 683.808 L1661.47 683.808 L1662.03 683.808 L1662.58 683.808 L1663.14 683.808 L1663.7 683.808 L1664.26 683.808 L1664.82 683.808 L1665.38 683.808 L1665.94 683.808 L1666.5 683.808 L1667.06 683.808 L1667.62 683.808 L1668.18 683.808 L1668.74 683.808 L1669.3 683.808 L1669.85 683.808 L1670.41 683.808 L1670.97 683.808 L1671.53 683.808 L1672.09 683.808 L1672.65 683.808 L1673.21 683.808 L1673.77 683.808 L1674.33 683.808 L1674.89 683.808 L1675.45 683.808 L1676.01 683.808 L1676.57 683.808 L1677.13 683.808 L1677.68 683.808 L1678.24 683.808 L1678.8 683.808 L1679.36 683.808 L1679.92 683.808 L1680.48 683.808 L1681.04 683.808 L1681.6 683.808 L1682.16 683.808 L1682.72 683.808 L1683.28 683.808 L1683.84 683.808 L1684.4 683.808 L1684.95 683.808 L1685.51 683.808 L1686.07 683.808 L1686.63 683.808 L1687.19 683.808 L1687.75 683.808 L1688.31 683.808 L1688.87 683.808 L1689.43 683.808 L1689.99 683.808 L1690.55 683.808 L1691.11 683.808 L1691.67 683.808 L1692.23 683.808 L1692.78 683.808 L1693.34 683.808 L1693.9 683.808 L1694.46 683.808 L1695.02 683.808 L1695.58 683.808 L1696.14 683.808 L1696.7 683.808 L1697.26 683.808 L1697.82 683.808 L1698.38 683.808 L1698.94 683.808 L1699.5 683.808 L1700.05 683.808 L1700.61 683.808 L1701.17 683.808 L1701.73 683.808 L1702.29 683.808 L1702.85 683.808 L1703.41 683.808 L1703.97 683.808 L1704.53 683.808 L1705.09 683.808 L1705.65 683.808 L1706.21 683.808 L1706.77 683.808 L1707.32 683.808 L1707.88 683.808 L1708.44 683.808 L1709 683.808 L1709.56 683.808 L1710.12 683.808 L1710.68 683.808 L1711.24 683.808 L1711.8 683.808 L1712.36 683.808 L1712.92 683.808 L1713.48 683.808 L1714.04 683.808 L1714.6 683.808 L1715.15 683.808 L1715.71 683.808 L1716.27 683.808 L1716.83 683.808 L1717.39 683.808 L1717.95 683.808 L1718.51 683.808 L1719.07 683.808 L1719.63 683.808 L1720.19 683.808 L1720.75 683.808 L1721.31 683.808 L1721.87 683.808 L1722.42 683.808 L1722.98 683.808 L1723.54 683.808 L1724.1 683.808 L1724.66 683.808 L1725.22 683.808 L1725.78 683.808 L1726.34 683.808 L1726.9 683.808 L1727.46 683.808 L1728.02 683.808 L1728.58 683.808 L1729.14 683.808 L1729.69 683.808 L1730.25 683.808 L1730.81 683.808 L1731.37 683.808 L1731.93 683.808 L1732.49 683.808 L1733.05 683.808 L1733.61 683.808 L1734.17 683.808 L1734.73 683.808 L1735.29 683.808 L1735.85 683.808 L1736.41 683.808 L1736.97 683.808 L1737.52 683.808 L1738.08 683.808 L1738.64 683.808 L1739.2 683.808 L1739.76 683.808 L1740.32 683.808 L1740.88 683.808 L1741.44 683.808 L1742 683.808 L1742.56 683.808 L1743.12 683.808 L1743.68 683.808 L1744.24 683.808 L1744.79 683.808 L1745.35 683.808 L1745.91 683.808 L1746.47 683.808 L1747.03 683.808 L1747.59 683.808 L1748.15 683.808 L1748.71 683.808 L1749.27 683.808 L1749.83 683.808 L1750.39 683.808 L1750.95 683.808 L1751.51 683.808 L1752.06 683.808 L1752.62 683.808 L1753.18 683.808 L1753.74 683.808 L1754.3 683.808 L1754.86 683.808 L1755.42 683.808 L1755.98 683.808 L1756.54 683.808 L1757.1 683.808 L1757.66 683.808 L1758.22 683.808 L1758.78 683.808 L1759.34 683.808 L1759.89 683.808 L1760.45 683.808 L1761.01 683.808 L1761.57 683.808 L1762.13 683.808 L1762.69 683.808 L1763.25 683.808 L1763.81 683.808 L1764.37 683.808 L1764.93 683.808 L1765.49 683.808 L1766.05 683.808 L1766.61 683.808 L1767.16 683.808 L1767.72 683.808 L1768.28 683.808 L1768.84 683.808 L1769.4 683.808 L1769.96 683.808 L1770.52 683.808 L1771.08 683.808 L1771.64 683.808 L1772.2 683.808 L1772.76 683.808 L1773.32 683.808 L1773.88 683.808 L1774.43 683.808 L1774.99 683.808 L1775.55 683.808 L1776.11 683.808 L1776.67 683.808 L1777.23 683.808 L1777.79 683.808 L1778.35 683.808 L1778.91 683.808 L1779.47 683.808 L1780.03 683.808 L1780.59 683.808 L1781.15 683.808 L1781.71 683.808 L1782.26 683.808 L1782.82 683.808 L1783.38 683.808 L1783.94 683.808 L1784.5 683.808 L1785.06 683.808 L1785.62 683.808 L1786.18 683.808 L1786.74 683.808 L1787.3 683.808 L1787.86 683.808 L1788.42 683.808 L1788.98 683.808 L1789.53 683.808 L1790.09 683.808 L1790.65 683.808 L1791.21 683.808 L1791.77 683.808 L1792.33 683.808 L1792.89 683.808 L1793.45 683.808 L1794.01 683.808 L1794.57 683.808 L1795.13 683.808 L1795.69 683.808 L1796.25 683.808 L1796.8 683.808 L1797.36 683.808 L1797.92 683.808 L1798.48 683.808 L1799.04 683.808 L1799.6 683.808 L1800.16 683.808 L1800.72 683.808 L1801.28 683.808 L1801.84 683.808 L1802.4 683.808 L1802.96 683.808 L1803.52 683.808 L1804.08 683.808 L1804.63 683.808 L1805.19 683.808 L1805.75 683.808 L1806.31 683.808 L1806.87 683.808 L1807.43 683.808 L1807.99 683.808 L1808.55 683.808 L1809.11 683.808 L1809.67 683.808 L1810.23 683.808 L1810.79 683.808 L1811.35 683.808 L1811.9 683.808 L1812.46 683.808 L1813.02 683.808 L1813.58 683.808 L1814.14 683.808 L1814.7 683.808 L1815.26 683.808 L1815.82 683.808 L1816.38 683.808 L1816.94 683.808 L1817.5 683.808 L1818.06 683.808 L1818.62 683.808 L1819.18 683.808 L1819.73 683.808 L1820.29 683.808 L1820.85 683.808 L1821.41 683.808 L1821.97 683.808 L1822.53 683.808 L1823.09 683.808 L1823.65 683.808 L1824.21 683.808 L1824.77 683.808 L1825.33 683.808 L1825.89 683.808 L1826.45 683.808 L1827 683.808 L1827.56 683.808 L1828.12 683.808 L1828.68 683.808 L1829.24 683.808 L1829.8 683.808 L1830.36 683.808 L1830.92 683.808 L1831.48 683.808 L1832.04 683.808 L1832.6 683.808 L1833.16 683.808 L1833.72 683.808 L1834.27 683.808 L1834.83 683.808 L1835.39 683.808 L1835.95 683.808 L1836.51 683.808 L1837.07 683.808 L1837.63 683.808 L1838.19 683.808 L1838.19 681.137 L1837.63 681.137 L1837.07 681.137 L1836.51 681.137 L1835.95 681.137 L1835.39 681.137 L1834.83 681.137 L1834.27 681.137 L1833.72 681.137 L1833.16 681.137 L1832.6 681.137 L1832.04 681.137 L1831.48 681.137 L1830.92 681.137 L1830.36 681.137 L1829.8 681.137 L1829.24 681.137 L1828.68 681.137 L1828.12 681.137 L1827.56 681.137 L1827 681.137 L1826.45 681.137 L1825.89 681.137 L1825.33 681.137 L1824.77 681.137 L1824.21 681.137 L1823.65 681.137 L1823.09 681.137 L1822.53 681.137 L1821.97 681.137 L1821.41 681.137 L1820.85 681.137 L1820.29 681.137 L1819.73 681.137 L1819.18 681.137 L1818.62 681.137 L1818.06 681.137 L1817.5 681.137 L1816.94 681.137 L1816.38 681.137 L1815.82 681.137 L1815.26 681.137 L1814.7 681.137 L1814.14 681.137 L1813.58 681.137 L1813.02 681.137 L1812.46 681.137 L1811.9 681.137 L1811.35 681.137 L1810.79 681.137 L1810.23 681.137 L1809.67 681.137 L1809.11 681.137 L1808.55 681.137 L1807.99 681.137 L1807.43 681.137 L1806.87 681.137 L1806.31 681.137 L1805.75 681.137 L1805.19 681.137 L1804.63 681.137 L1804.08 681.137 L1803.52 681.137 L1802.96 681.137 L1802.4 681.137 L1801.84 681.137 L1801.28 681.137 L1800.72 681.137 L1800.16 681.137 L1799.6 681.137 L1799.04 681.137 L1798.48 681.137 L1797.92 681.137 L1797.36 681.137 L1796.8 681.137 L1796.25 681.137 L1795.69 681.137 L1795.13 681.137 L1794.57 681.137 L1794.01 681.137 L1793.45 681.137 L1792.89 681.137 L1792.33 681.137 L1791.77 681.137 L1791.21 681.137 L1790.65 681.137 L1790.09 681.137 L1789.53 681.137 L1788.98 681.137 L1788.42 681.137 L1787.86 681.137 L1787.3 681.137 L1786.74 681.137 L1786.18 681.137 L1785.62 681.137 L1785.06 681.137 L1784.5 681.137 L1783.94 681.137 L1783.38 681.137 L1782.82 681.137 L1782.26 681.137 L1781.71 681.137 L1781.15 681.137 L1780.59 681.137 L1780.03 681.137 L1779.47 681.137 L1778.91 681.137 L1778.35 681.137 L1777.79 681.137 L1777.23 681.137 L1776.67 681.137 L1776.11 681.137 L1775.55 681.137 L1774.99 681.137 L1774.43 681.137 L1773.88 681.137 L1773.32 681.137 L1772.76 681.137 L1772.2 681.137 L1771.64 681.137 L1771.08 681.137 L1770.52 681.137 L1769.96 681.137 L1769.4 681.137 L1768.84 681.137 L1768.28 681.137 L1767.72 681.137 L1767.16 681.137 L1766.61 681.137 L1766.05 681.137 L1765.49 681.137 L1764.93 681.137 L1764.37 681.137 L1763.81 681.137 L1763.25 681.137 L1762.69 681.137 L1762.13 681.137 L1761.57 681.137 L1761.01 681.137 L1760.45 681.137 L1759.89 681.137 L1759.34 681.137 L1758.78 681.137 L1758.22 681.137 L1757.66 681.137 L1757.1 681.137 L1756.54 681.137 L1755.98 681.137 L1755.42 681.137 L1754.86 681.137 L1754.3 681.137 L1753.74 681.137 L1753.18 681.137 L1752.62 681.137 L1752.06 681.137 L1751.51 681.137 L1750.95 681.137 L1750.39 681.137 L1749.83 681.137 L1749.27 681.137 L1748.71 681.137 L1748.15 681.137 L1747.59 681.137 L1747.03 681.137 L1746.47 681.137 L1745.91 681.137 L1745.35 681.137 L1744.79 681.137 L1744.24 681.137 L1743.68 681.137 L1743.12 681.137 L1742.56 681.137 L1742 681.137 L1741.44 681.137 L1740.88 681.137 L1740.32 681.137 L1739.76 681.137 L1739.2 681.137 L1738.64 681.137 L1738.08 681.137 L1737.52 681.137 L1736.97 681.137 L1736.41 681.137 L1735.85 681.137 L1735.29 681.137 L1734.73 681.137 L1734.17 681.137 L1733.61 681.137 L1733.05 681.137 L1732.49 681.137 L1731.93 681.137 L1731.37 681.137 L1730.81 681.137 L1730.25 681.137 L1729.69 681.137 L1729.14 681.137 L1728.58 681.137 L1728.02 681.137 L1727.46 681.137 L1726.9 681.137 L1726.34 681.137 L1725.78 681.137 L1725.22 681.137 L1724.66 681.137 L1724.1 681.137 L1723.54 681.137 L1722.98 681.137 L1722.42 681.137 L1721.87 681.137 L1721.31 681.137 L1720.75 681.137 L1720.19 681.137 L1719.63 681.137 L1719.07 681.137 L1718.51 681.137 L1717.95 681.137 L1717.39 681.137 L1716.83 681.137 L1716.27 681.137 L1715.71 681.137 L1715.15 681.137 L1714.6 681.137 L1714.04 681.137 L1713.48 681.137 L1712.92 681.137 L1712.36 681.137 L1711.8 681.137 L1711.24 681.137 L1710.68 681.137 L1710.12 681.137 L1709.56 681.137 L1709 681.137 L1708.44 681.137 L1707.88 681.137 L1707.32 681.137 L1706.77 681.137 L1706.21 681.137 L1705.65 681.137 L1705.09 681.137 L1704.53 681.137 L1703.97 681.137 L1703.41 681.137 L1702.85 681.137 L1702.29 681.137 L1701.73 681.137 L1701.17 681.137 L1700.61 681.137 L1700.05 681.137 L1699.5 681.137 L1698.94 681.137 L1698.38 681.137 L1697.82 681.137 L1697.26 681.137 L1696.7 681.137 L1696.14 681.137 L1695.58 681.137 L1695.02 681.137 L1694.46 681.137 L1693.9 681.137 L1693.34 681.137 L1692.78 681.137 L1692.23 681.137 L1691.67 681.137 L1691.11 681.137 L1690.55 681.137 L1689.99 681.137 L1689.43 681.137 L1688.87 681.137 L1688.31 681.137 L1687.75 681.137 L1687.19 681.137 L1686.63 681.137 L1686.07 681.137 L1685.51 681.137 L1684.95 681.137 L1684.4 681.137 L1683.84 681.137 L1683.28 681.137 L1682.72 681.137 L1682.16 681.137 L1681.6 681.137 L1681.04 681.137 L1680.48 681.137 L1679.92 681.137 L1679.36 681.137 L1678.8 681.137 L1678.24 681.137 L1677.68 681.137 L1677.13 681.137 L1676.57 681.137 L1676.01 681.137 L1675.45 681.137 L1674.89 681.137 L1674.33 681.137 L1673.77 681.137 L1673.21 681.137 L1672.65 681.137 L1672.09 681.137 L1671.53 681.137 L1670.97 681.137 L1670.41 681.137 L1669.85 681.137 L1669.3 681.137 L1668.74 681.137 L1668.18 681.137 L1667.62 681.137 L1667.06 681.137 L1666.5 681.137 L1665.94 681.137 L1665.38 681.137 L1664.82 681.137 L1664.26 681.137 L1663.7 681.137 L1663.14 681.137 L1662.58 681.137 L1662.03 681.137 L1661.47 681.137 L1660.91 681.137 L1660.35 681.137 L1659.79 681.137 L1659.23 681.137 L1658.67 681.137 L1658.11 681.137 L1657.55 681.137 L1656.99 681.137 L1656.43 681.137 L1655.87 681.137 L1655.31 681.137 L1654.76 681.137 L1654.2 681.137 L1653.64 681.137 L1653.08 681.137 L1652.52 681.137 L1651.96 681.137 L1651.4 681.137 L1650.84 681.137 L1650.28 681.137 L1649.72 681.137 L1649.16 681.137 L1648.6 681.137 L1648.04 681.137 L1647.48 681.137 L1646.93 681.137 L1646.37 681.137 L1645.81 681.137 L1645.25 681.137 L1644.69 681.137 L1644.13 681.137 L1643.57 681.137 L1643.01 681.137 L1642.45 681.137 L1641.89 681.137 L1641.33 681.137 L1640.77 681.137 L1640.21 681.137 L1639.66 681.137 L1639.1 681.137 L1638.54 681.137 L1637.98 681.137 L1637.42 681.137 L1636.86 681.137 L1636.3 681.137 L1635.74 681.137 L1635.18 681.137 L1634.62 681.137 L1634.06 681.137 L1633.5 681.137 L1632.94 681.137 L1632.39 681.137 L1631.83 681.137 L1631.27 681.137 L1630.71 681.137 L1630.15 681.137 L1629.59 681.137 L1629.03 681.137 L1628.47 681.137 L1627.91 681.137 L1627.35 681.137 L1626.79 681.137 L1626.23 681.137 L1625.67 681.137 L1625.11 681.137 L1624.56 681.137 L1624 681.137 L1623.44 681.137 L1622.88 681.137 L1622.32 681.137 L1621.76 681.137 L1621.2 681.137 L1620.64 681.137 L1620.08 681.137 L1619.52 681.137 L1618.96 681.137 L1618.4 681.137 L1617.84 681.137 L1617.29 681.137 L1616.73 681.137 L1616.17 681.137 L1615.61 681.137 L1615.05 681.137 L1614.49 681.137 L1613.93 681.137 L1613.37 681.137 L1612.81 681.137 L1612.25 681.137 L1611.69 681.137 L1611.13 681.137 L1610.57 681.137 L1610.02 681.137 L1609.46 681.137 L1608.9 681.137 L1608.34 681.137 L1607.78 681.137 L1607.22 681.137 L1606.66 681.137 L1606.1 681.137 L1605.54 681.137 L1604.98 681.137 L1604.42 681.137 L1603.86 681.137 L1603.3 681.137 L1602.74 681.137 L1602.19 681.137 L1601.63 681.137 L1601.07 681.137 L1600.51 681.137 L1599.95 681.137 L1599.39 681.137 L1598.83 681.137 L1598.27 681.137 L1597.71 681.137 L1597.15 681.137 L1596.59 681.137 L1596.03 681.137 L1595.47 681.137 L1594.92 681.137 L1594.36 681.137 L1593.8 681.137 L1593.24 681.137 L1592.68 681.137 L1592.12 681.137 L1591.56 681.137 L1591 681.137 L1590.44 681.137 L1589.88 681.137 L1589.32 681.137 L1588.76 681.137 L1588.2 681.137 L1587.65 681.137 L1587.09 681.137 L1586.53 681.137 L1585.97 681.137 L1585.41 681.137 L1584.85 681.137 L1584.29 681.137 L1583.73 681.137 L1583.17 681.137 L1582.61 681.137 L1582.05 681.137 L1581.49 681.137 L1580.93 681.137 L1580.37 681.137 L1579.82 681.137 L1579.26 681.137 L1578.7 681.137 L1578.14 681.137 L1577.58 681.137 L1577.02 681.137 L1576.46 681.137 L1575.9 681.137 L1575.34 681.137 L1574.78 681.137 L1574.22 681.137 L1573.66 681.137 L1573.1 681.137 L1572.55 681.137 L1571.99 681.137 L1571.43 681.137 L1570.87 681.137 L1570.31 681.137 L1569.75 681.137 L1569.19 681.137 L1568.63 681.137 L1568.07 681.137 L1567.51 681.137 L1566.95 681.137 L1566.39 681.137 L1565.83 681.137 L1565.28 681.137 L1564.72 681.137 L1564.16 681.137 L1563.6 681.137 L1563.04 681.137 L1562.48 681.137 L1561.92 681.137 L1561.36 681.137 L1560.8 681.137 L1560.24 681.137 L1559.68 681.137 L1559.12 681.137 L1558.56 681.137 L1558 681.137 L1557.45 681.137 L1556.89 681.137 L1556.33 681.137 L1555.77 681.137 L1555.21 681.137 L1554.65 681.137 L1554.09 681.137 L1553.53 681.137 L1552.97 681.137 L1552.41 681.137 L1551.85 681.137 L1551.29 681.137 L1550.73 681.137 L1550.18 681.137 L1549.62 681.137 L1549.06 681.137 L1548.5 681.137 L1547.94 681.137 L1547.38 681.137 L1546.82 681.137 L1546.26 681.137 L1545.7 681.137 L1545.14 681.137 L1544.58 681.137 L1544.02 681.137 L1543.46 681.137 L1542.9 681.137 L1542.35 681.137 L1541.79 681.137 L1541.23 681.137 L1540.67 681.137 L1540.11 681.137 L1539.55 681.137 L1538.99 681.137 L1538.43 681.137 L1537.87 681.137 L1537.31 681.137 L1536.75 681.137 L1536.19 681.137 L1535.63 681.137 L1535.08 681.137 L1534.52 681.137 L1533.96 681.137 L1533.4 681.137 L1532.84 681.137 L1532.28 681.137 L1531.72 681.137 L1531.16 681.137 L1530.6 681.137 L1530.04 681.137 L1529.48 681.137 L1528.92 681.137 L1528.36 681.137 L1527.81 681.137 L1527.25 681.137 L1526.69 681.137 L1526.13 681.137 L1525.57 681.137 L1525.01 681.137 L1524.45 681.137 L1523.89 681.137 L1523.33 681.137 L1522.77 681.137 L1522.21 681.137 L1521.65 681.137 L1521.09 681.137 L1520.53 681.137 L1519.98 681.137 L1519.42 681.137 L1518.86 681.137 L1518.3 681.137 L1517.74 681.137 L1517.18 681.137 L1516.62 681.137 L1516.06 681.137 L1515.5 681.137 L1514.94 681.137 L1514.38 681.137 L1513.82 681.137 L1513.26 681.137 L1512.71 681.137 L1512.15 681.137 L1511.59 681.137 L1511.03 681.137 L1510.47 681.137 L1509.91 681.137 L1509.35 681.137 L1508.79 681.137 L1508.23 681.137 L1507.67 681.137 L1507.11 681.137 L1506.55 681.137 L1505.99 681.137 L1505.44 681.137 L1504.88 681.137 L1504.32 681.137 L1503.76 681.137 L1503.2 681.137 L1502.64 681.137 L1502.08 681.137 L1501.52 681.137 L1500.96 681.137 L1500.4 681.137 L1499.84 681.137 L1499.28 681.137 L1498.72 681.137 L1498.16 681.137 L1497.61 681.137 L1497.05 681.137 L1496.49 681.137 L1495.93 681.137 L1495.37 681.137 L1494.81 681.137 L1494.25 681.137 L1493.69 681.137 L1493.13 681.137 L1492.57 681.137 L1492.01 681.137 L1491.45 681.137 L1490.89 681.137 L1490.34 681.137 L1489.78 681.137 L1489.22 681.137 L1488.66 681.137 L1488.1 681.137 L1487.54 681.137 L1486.98 681.137 L1486.42 681.137 L1485.86 681.137 L1485.3 681.137 L1484.74 681.137 L1484.18 681.137 L1483.62 681.137 L1483.07 681.137 L1482.51 681.137 L1481.95 681.137 L1481.39 681.137 L1480.83 681.137 L1480.27 681.137 L1479.71 681.137 L1479.15 681.137 L1478.59 681.137 L1478.03 681.137 L1477.47 681.137 L1476.91 681.137 L1476.35 681.137 L1475.79 681.137 L1475.24 681.137 L1474.68 681.137 L1474.12 681.137 L1473.56 681.137 L1473 681.137 L1472.44 681.137 L1471.88 681.137 L1471.32 681.137 L1470.76 681.137 L1470.2 681.137 L1469.64 681.137 L1469.08 681.137 L1468.52 681.137 L1467.97 681.137 L1467.41 681.137 L1466.85 681.137 L1466.29 681.137 L1465.73 681.137 L1465.17 681.137 L1464.61 681.137 L1464.05 681.137 L1463.49 681.137 L1462.93 681.137 L1462.37 681.137 L1461.81 681.137 L1461.25 681.137 L1460.7 681.137 L1460.14 681.137 L1459.58 681.137 L1459.02 681.137 L1458.46 681.137 L1457.9 681.137 L1457.34 681.137 L1456.78 681.137 L1456.22 681.137 L1455.66 681.137 L1455.1 681.137 L1454.54 681.137 L1453.98 681.137 L1453.42 681.137 L1452.87 681.137 L1452.31 681.137 L1451.75 681.137 L1451.19 681.137 L1450.63 681.137 L1450.07 681.137 L1449.51 681.137 L1448.95 681.137 L1448.39 681.137 L1447.83 681.137 L1447.27 681.137 L1446.71 681.137 L1446.15 681.137 L1445.6 681.137 L1445.04 681.137 L1444.48 681.137 L1443.92 681.137 L1443.36 681.137 L1442.8 681.137 L1442.24 681.137 L1441.68 681.137 L1441.12 681.137 L1440.56 681.137 L1440 681.137 L1439.44 681.137 L1438.88 681.137 L1438.33 681.137 L1437.77 681.137 L1437.21 681.137 L1436.65 681.137 L1436.09 681.137 L1435.53 681.137 L1434.97 681.137 L1434.41 681.137 L1433.85 681.137 L1433.29 681.137 L1432.73 681.137 L1432.17 681.137 L1431.61 681.137 L1431.05 681.137 L1430.5 681.137 L1429.94 681.137 L1429.38 681.137 L1428.82 681.137 L1428.26 681.137 L1427.7 681.137 L1427.14 681.137 L1426.58 681.137 L1426.02 681.137 L1425.46 681.137 L1424.9 681.137 L1424.34 681.137 L1423.78 681.137 L1423.23 681.137 L1422.67 681.137 L1422.11 681.137 L1421.55 681.137 L1420.99 681.137 L1420.43 681.137 L1419.87 681.137 L1419.31 681.137 L1418.75 681.137 L1418.19 681.137 L1417.63 681.137 L1417.07 681.137 L1416.51 681.137 L1415.95 681.137 L1415.4 681.137 L1414.84 681.137 L1414.28 681.137 L1413.72 681.137 L1413.16 681.137 L1412.6 681.137 L1412.04 681.137 L1411.48 681.137 L1410.92 681.137 L1410.36 681.137 L1409.8 681.137 L1409.24 681.137 L1408.68 681.137 L1408.13 681.137 L1407.57 681.137 L1407.01 681.137 L1406.45 681.137 L1405.89 681.137 L1405.33 681.137 L1404.77 681.137 L1404.21 681.137 L1403.65 681.137 L1403.09 681.137 L1402.53 681.137 L1401.97 681.137 L1401.41 681.137 L1400.86 681.137 L1400.3 681.137 L1399.74 681.137 L1399.18 681.137 L1398.62 681.137 L1398.06 681.137 L1397.5 681.137 L1396.94 681.137 L1396.38 681.137 L1395.82 681.137 L1395.26 681.137 L1394.7 681.137 L1394.14 681.137 L1393.58 681.137 L1393.03 681.137 L1392.47 681.137 L1391.91 681.137 L1391.35 681.137 L1390.79 681.137 L1390.23 681.137 L1389.67 681.137 L1389.11 681.137 L1388.55 681.137 L1387.99 681.137 L1387.43 681.137 L1386.87 681.137 L1386.31 681.137 L1385.76 681.137 L1385.2 681.137 L1384.64 681.137 L1384.08 681.137 L1383.52 681.137 L1382.96 681.137 L1382.4 681.137 L1381.84 681.137 L1381.28 681.137 L1380.72 681.137 L1380.16 681.137 L1379.6 681.137 L1379.04 681.137 L1378.49 681.137 L1377.93 681.137 L1377.37 681.137 L1376.81 681.137 L1376.25 681.137 L1375.69 681.137 L1375.13 681.137 L1374.57 681.137 L1374.01 681.137 L1373.45 681.137 L1372.89 681.137 L1372.33 681.137 L1371.77 681.137 L1371.21 681.137 L1370.66 681.137 L1370.1 681.137 L1369.54 681.137 L1368.98 681.137 L1368.42 681.137 L1367.86 681.137 L1367.3 681.137 L1366.74 681.137 L1366.18 681.137 L1365.62 681.137 L1365.06 681.137 L1364.5 681.137 L1363.94 681.137 L1363.39 681.137 L1362.83 681.137 L1362.27 681.137 L1361.71 681.137 L1361.15 681.137 L1360.59 681.137 L1360.03 681.137 L1359.47 681.137 L1358.91 681.137 L1358.35 681.137 L1357.79 681.137 L1357.23 681.137 L1356.67 681.137 L1356.12 681.137 L1355.56 681.137 L1355 681.137 L1354.44 681.137 L1353.88 681.137 L1353.32 681.137 L1352.76 681.137 L1352.2 681.137 L1351.64 681.137 L1351.08 681.137 L1350.52 681.137 L1349.96 681.137 L1349.4 681.137 L1348.84 681.137 L1348.29 681.137 L1347.73 681.137 L1347.17 681.137 L1346.61 681.137 L1346.05 681.137 L1345.49 681.137 L1344.93 681.137 L1344.37 681.137 L1343.81 681.137 L1343.25 681.137 L1342.69 681.137 L1342.13 681.137 L1341.57 681.137 L1341.02 681.137 L1340.46 681.137 L1339.9 681.137 L1339.34 681.137 L1338.78 681.137 L1338.22 681.137 L1337.66 681.137 L1337.1 681.137 L1336.54 681.137 L1335.98 681.137 L1335.42 681.137 L1334.86 681.137 L1334.3 681.137 L1333.75 681.137 L1333.19 681.137 L1332.63 681.137 L1332.07 681.137 L1331.51 681.137 L1330.95 681.137 L1330.39 681.137 L1329.83 681.137 L1329.27 681.137 L1328.71 681.137 L1328.15 681.137 L1327.59 681.137 L1327.03 681.137 L1326.47 681.137 L1325.92 681.137 L1325.36 681.137 L1324.8 681.137 L1324.24 681.137 L1323.68 681.137 L1323.12 681.137 L1322.56 681.137 L1322 681.137 L1321.44 681.137 L1320.88 681.137 L1320.32 681.137 L1319.76 681.137 L1319.2 681.137 L1318.65 681.137 L1318.09 681.137 L1317.53 681.137 L1316.97 681.137 L1316.41 681.137 L1315.85 681.137 L1315.29 681.137 L1314.73 681.137 L1314.17 681.137 L1313.61 681.137 L1313.05 681.137 L1312.49 681.137 L1311.93 681.137 L1311.38 681.137 L1310.82 681.137 L1310.26 681.137 L1309.7 681.137 L1309.14 681.137 L1308.58 681.137 L1308.02 681.137 L1307.46 681.137 L1306.9 681.137 L1306.34 681.137 L1305.78 681.137 L1305.22 681.137 L1304.66 681.137 L1304.1 681.137 L1303.55 681.137 L1302.99 681.137 L1302.43 681.137 L1301.87 681.137 L1301.31 681.137 L1300.75 681.137 L1300.19 681.137 L1299.63 681.137 L1299.07 681.137 L1298.51 681.137 L1297.95 681.137 L1297.39 681.137 L1296.83 681.137 L1296.28 681.137 L1295.72 681.137 L1295.16 681.137 L1294.6 681.137 L1294.04 681.137 L1293.48 681.137 L1292.92 681.137 L1292.36 681.137 L1291.8 681.137 L1291.24 681.137 L1290.68 681.137 L1290.12 681.137 L1289.56 681.137 L1289 681.137 L1288.45 681.137 L1287.89 681.137 L1287.33 681.137 L1286.77 681.137 L1286.21 681.137 L1285.65 681.137 L1285.09 681.137 L1284.53 681.137 L1283.97 681.137 L1283.41 681.137 L1282.85 681.137 L1282.29 681.137 L1281.73 681.137 L1281.18 681.137 L1280.62 681.137 L1280.06 681.137 L1279.5 681.137 L1278.94 681.137 L1278.38 681.137 L1277.82 681.137 L1277.26 681.137 L1276.7 681.137 L1276.14 681.137 L1275.58 681.137 L1275.02 681.137 L1274.46 681.137 L1273.91 681.137 L1273.35 681.137 L1272.79 681.137 L1272.23 681.137 L1271.67 681.137 L1271.11 681.137 L1270.55 681.137 L1269.99 681.137 L1269.43 681.137 L1268.87 681.137 L1268.31 681.137 L1267.75 681.137 L1267.19 681.137 L1266.63 681.137 L1266.08 681.137 L1265.52 681.137 L1264.96 681.137 L1264.4 681.137 L1263.84 681.137 L1263.28 681.137 L1262.72 681.137 L1262.16 681.137 L1261.6 681.137 L1261.04 681.137 L1260.48 681.137 L1259.92 681.137 L1259.36 681.137 L1258.81 681.137 L1258.25 681.137 L1257.69 681.137 L1257.13 681.137 L1256.57 681.137 L1256.01 681.137 L1255.45 681.137 L1254.89 681.137 L1254.33 681.137 L1253.77 681.137 L1253.21 681.137 L1252.65 681.137 L1252.09 681.137 L1251.54 681.137 L1250.98 681.137 L1250.42 681.137 L1249.86 681.137 L1249.3 681.137 L1248.74 681.137 L1248.18 681.137 L1247.62 681.137 L1247.06 681.137 L1246.5 681.137 L1245.94 681.137 L1245.38 681.137 L1244.82 681.137 L1244.26 681.137 L1243.71 681.137 L1243.15 681.137 L1242.59 681.137 L1242.03 681.137 L1241.47 681.137 L1240.91 681.137 L1240.35 681.137 L1239.79 681.137 L1239.23 681.137 L1238.67 681.137 L1238.11 681.137 L1237.55 681.137 L1236.99 681.137 L1236.44 681.137 L1235.88 681.137 L1235.32 681.137 L1234.76 681.137 L1234.2 681.137 L1233.64 681.137 L1233.08 681.137 L1232.52 681.137 L1231.96 681.137 L1231.4 681.137 L1230.84 681.137 L1230.28 681.137 L1229.72 681.137 L1229.17 681.137 L1228.61 681.137 L1228.05 681.137 L1227.49 681.137 L1226.93 681.137 L1226.37 681.137 L1225.81 681.137 L1225.25 681.137 L1224.69 681.137 L1224.13 681.137 L1223.57 681.137 L1223.01 681.137 L1222.45 681.137 L1221.89 681.137 L1221.34 681.137 L1220.78 681.137 L1220.22 681.137 L1219.66 681.137 L1219.1 681.137 L1218.54 681.137 L1217.98 681.137 L1217.42 681.137 L1216.86 681.137 L1216.3 681.137 L1215.74 681.137 L1215.18 681.137 L1214.62 681.137 L1214.07 681.137 L1213.51 681.137 L1212.95 681.137 L1212.39 681.137 L1211.83 681.137 L1211.27 681.137 L1210.71 681.137 L1210.15 681.137 L1209.59 681.137 L1209.03 681.137 L1208.47 681.137 L1207.91 681.137 L1207.35 681.137 L1206.8 681.137 L1206.24 681.137 L1205.68 681.137 L1205.12 681.137 L1204.56 681.137 L1204 681.137 L1203.44 681.137 L1202.88 681.137 L1202.32 681.137 L1201.76 681.137 L1201.2 681.137 L1200.64 681.137 L1200.08 681.137 L1199.52 681.137 L1198.97 681.137 L1198.41 681.137 L1197.85 681.137 L1197.29 681.137 L1196.73 681.137 L1196.17 681.137 L1195.61 681.137 L1195.05 681.137 L1194.49 681.137 L1193.93 681.137 L1193.37 681.137 L1192.81 681.137 L1192.25 681.137 L1191.7 681.137 L1191.14 681.137 L1190.58 681.137 L1190.02 681.137 L1189.46 681.137 L1188.9 681.137 L1188.34 681.137 L1187.78 681.137 L1187.22 681.137 L1186.66 681.137 L1186.1 681.137 L1185.54 681.137 L1184.98 681.137 L1184.43 681.137 L1183.87 681.137 L1183.31 681.137 L1182.75 681.137 L1182.19 681.137 L1181.63 681.137 L1181.07 681.137 L1180.51 681.137 L1179.95 681.137 L1179.39 681.137 L1178.83 681.137 L1178.27 681.137 L1177.71 681.137 L1177.15 681.137 L1176.6 681.137 L1176.04 681.137 L1175.48 681.137 L1174.92 681.137 L1174.36 681.137 L1173.8 681.137 L1173.24 681.137 L1172.68 681.137 L1172.12 681.137 L1171.56 681.137 L1171 681.137 L1170.44 681.137 L1169.88 681.137 L1169.33 681.137 L1168.77 681.137 L1168.21 681.137 L1167.65 681.137 L1167.09 681.137 L1166.53 681.137 L1165.97 681.137 L1165.41 681.137 L1164.85 681.137 L1164.29 681.137 L1163.73 681.137 L1163.17 681.137 L1162.61 681.137 L1162.05 681.137 L1161.5 681.137 L1160.94 681.137 L1160.38 681.137 L1159.82 681.137 L1159.26 681.137 L1158.7 681.137 L1158.14 681.137 L1157.58 681.137 L1157.02 681.137 L1156.46 681.137 L1155.9 681.137 L1155.34 681.137 L1154.78 681.137 L1154.23 681.137 L1153.67 681.137 L1153.11 681.137 L1152.55 681.137 L1151.99 681.137 L1151.43 681.137 L1150.87 681.137 L1150.31 681.137 L1149.75 681.137 L1149.19 681.137 L1148.63 681.137 L1148.07 681.137 L1147.51 681.137 L1146.96 681.137 L1146.4 681.137 L1145.84 681.137 L1145.28 681.137 L1144.72 681.137 L1144.16 681.137 L1143.6 681.137 L1143.04 681.137 L1142.48 681.137 L1141.92 681.137 L1141.36 681.137 L1140.8 681.137 L1140.24 681.137 L1139.68 681.137 L1139.13 681.137 L1138.57 681.137 L1138.01 681.137 L1137.45 681.137 L1136.89 681.137 L1136.33 681.137 L1135.77 681.137 L1135.21 681.137 L1134.65 681.137 L1134.09 681.137 L1133.53 681.137 L1132.97 681.137 L1132.41 681.137 L1131.86 681.137 L1131.3 681.137 L1130.74 681.137 L1130.18 681.137 L1129.62 681.137 L1129.06 681.137 L1128.5 681.137 L1127.94 681.137 L1127.38 681.137 L1126.82 681.137 L1126.26 681.137 L1125.7 681.137 L1125.14 681.137 L1124.59 681.137 L1124.03 681.137 L1123.47 681.137 L1122.91 681.137 L1122.35 681.137 L1121.79 681.137 L1121.23 681.137 L1120.67 681.137 L1120.11 681.137 L1119.55 681.137 L1118.99 681.137 L1118.43 681.137 L1117.87 681.137 L1117.31 681.137 L1116.76 681.137 L1116.2 681.137 L1115.64 681.137 L1115.08 681.137 L1114.52 681.137 L1113.96 681.137 L1113.4 681.137 L1112.84 681.137 L1112.28 681.137 L1111.72 681.137 L1111.16 681.137 L1110.6 681.137 L1110.04 681.137 L1109.49 681.137 L1108.93 681.137 L1108.37 681.137 L1107.81 681.137 L1107.25 681.137 L1106.69 681.137 L1106.13 681.137 L1105.57 681.137 L1105.01 681.137 L1104.45 681.137 L1103.89 681.137 L1103.33 681.137 L1102.77 681.137 L1102.22 681.137 L1101.66 681.137 L1101.1 681.137 L1100.54 681.137 L1099.98 681.137 L1099.42 681.137 L1098.86 681.137 L1098.3 681.137 L1097.74 681.137 L1097.18 681.137 L1096.62 681.137 L1096.06 681.137 L1095.5 681.137 L1094.94 681.137 L1094.39 681.137 L1093.83 681.137 L1093.27 681.137 L1092.71 681.137 L1092.15 681.137 L1091.59 681.137 L1091.03 681.137 L1090.47 681.137 L1089.91 681.137 L1089.35 681.137 L1088.79 681.137 L1088.23 681.137 L1087.67 681.137 L1087.12 681.137 L1086.56 681.137 L1086 681.137 L1085.44 681.137 L1084.88 681.137 L1084.32 681.137 L1083.76 681.137 L1083.2 681.137 L1082.64 681.137 L1082.08 681.137 L1081.52 681.137 L1080.96 681.137 L1080.4 681.137 L1079.85 681.137 L1079.29 681.137 L1078.73 681.137 L1078.17 681.137 L1077.61 681.137 L1077.05 681.137 L1076.49 681.137 L1075.93 681.137 L1075.37 681.137 L1074.81 681.137 L1074.25 681.137 L1073.69 681.137 L1073.13 681.137 L1072.57 681.137 L1072.02 681.137 L1071.46 681.137 L1070.9 681.137 L1070.34 681.137 L1069.78 681.137 L1069.22 681.137 L1068.66 681.137 L1068.1 681.137 L1067.54 681.137 L1066.98 681.137 L1066.42 681.137 L1065.86 681.137 L1065.3 681.137 L1064.75 681.137 L1064.19 681.137 L1063.63 681.137 L1063.07 681.137 L1062.51 681.137 L1061.95 681.137 L1061.39 681.137 L1060.83 681.137 L1060.27 681.137 L1059.71 681.137 L1059.15 681.137 L1058.59 681.137 L1058.03 681.137 L1057.48 681.137 L1056.92 681.137 L1056.36 681.137 L1055.8 681.137 L1055.24 681.137 L1054.68 681.137 L1054.12 681.137 L1053.56 681.137 L1053 681.137 L1052.44 681.137 L1051.88 681.137 L1051.32 681.137 L1050.76 681.137 L1050.2 681.137 L1049.65 681.137 L1049.09 681.137 L1048.53 681.137 L1047.97 681.137 L1047.41 681.137 L1046.85 681.137 L1046.29 681.137 L1045.73 681.137 L1045.17 681.137 L1044.61 681.137 L1044.05 681.137 L1043.49 681.137 L1042.93 681.137 L1042.38 681.137 L1041.82 681.137 L1041.26 681.137 L1040.7 681.137 L1040.14 681.137 L1039.58 681.137 L1039.02 681.137 L1038.46 681.137 L1037.9 681.137 L1037.34 681.137 L1036.78 681.137 L1036.22 681.137 L1035.66 681.137 L1035.1 681.137 L1034.55 681.137 L1033.99 681.137 L1033.43 681.137 L1032.87 681.137 L1032.31 681.137 L1031.75 681.137 L1031.19 681.137 L1030.63 681.137 L1030.07 681.137 L1029.51 681.137 L1028.95 681.137 L1028.39 681.137 L1027.83 681.137 L1027.28 681.137 L1026.72 681.137 L1026.16 681.137 L1025.6 681.137 L1025.04 681.137 L1024.48 681.137 L1023.92 681.137 L1023.36 681.137 L1022.8 681.137 L1022.24 681.137 L1021.68 681.137 L1021.12 681.137 L1020.56 681.137 L1020.01 681.137 L1019.45 681.137 L1018.89 681.137 L1018.33 681.137 L1017.77 681.137 L1017.21 681.137 L1016.65 681.137 L1016.09 681.137 L1015.53 681.137 L1014.97 681.137 L1014.41 681.137 L1013.85 681.137 L1013.29 681.137 L1012.73 681.137 L1012.18 681.137 L1011.62 681.137 L1011.06 681.137 L1010.5 681.137 L1009.94 681.137 L1009.38 681.137 L1008.82 681.137 L1008.26 681.137 L1007.7 681.137 L1007.14 681.137 L1006.58 681.137 L1006.02 681.137 L1005.46 681.137 L1004.91 681.137 L1004.35 681.137 L1003.79 681.137 L1003.23 681.137 L1002.67 681.137 L1002.11 681.137 L1001.55 681.137 L1000.99 681.137 L1000.43 681.137 L999.872 681.137 L999.313 681.137 L998.754 681.137 L998.194 681.137 L997.635 681.137 L997.076 681.137 L996.517 681.137 L995.957 681.137 L995.398 681.137 L994.839 681.137 L994.28 681.137 L993.72 681.137 L993.161 681.137 L992.602 681.137 L992.043 681.137 L991.483 681.137 L990.924 681.137 L990.365 681.137 L989.806 681.137 L989.246 681.137 L988.687 681.137 L988.128 681.137 L987.569 681.137 L987.009 681.137 L986.45 681.137 L985.891 681.137 L985.332 681.137 L984.772 681.137 L984.213 681.137 L983.654 681.137 L983.095 681.137 L982.535 681.137 L981.976 681.137 L981.417 681.137 L980.858 681.137 L980.298 681.137 L979.739 681.137 L979.18 681.137 L978.621 681.137 L978.061 681.137 L977.502 681.137 L976.943 681.137 L976.384 681.137 L975.824 681.137 L975.265 681.137 L974.706 681.137 L974.147 681.137 L973.587 681.137 L973.028 681.137 L972.469 681.137 L971.91 681.137 L971.35 681.137 L970.791 681.137 L970.232 681.137 L969.673 681.137 L969.113 681.137 L968.554 681.137 L967.995 681.137 L967.436 681.137 L966.876 681.137 L966.317 681.137 L965.758 681.137 L965.199 681.137 L964.639 681.137 L964.08 681.137 L963.521 681.137 L962.962 681.137 L962.402 681.137 L961.843 681.137 L961.284 681.137 L960.725 681.137 L960.165 681.137 L959.606 681.137 L959.047 681.137 L958.488 681.137 L957.928 681.137 L957.369 681.137 L956.81 681.137 L956.251 681.137 L955.691 681.137 L955.132 681.137 L954.573 681.137 L954.014 681.137 L953.454 681.137 L952.895 681.137 L952.336 681.137 L951.777 681.137 L951.217 681.137 L950.658 681.137 L950.099 681.137 L949.54 681.137 L948.98 681.137 L948.421 681.137 L947.862 681.137 L947.303 681.137 L946.743 681.137 L946.184 681.137 L945.625 681.137 L945.066 681.137 L944.506 681.137 L943.947 681.137 L943.388 681.137 L942.829 681.137 L942.269 681.137 L941.71 681.137 L941.151 681.137 L940.592 681.137 L940.032 681.137 L939.473 681.137 L938.914 681.137 L938.355 681.137 L937.795 681.137 L937.236 681.137 L936.677 681.137 L936.118 681.137 L935.558 681.137 L934.999 681.137 L934.44 681.137 L933.881 681.137 L933.321 681.137 L932.762 681.137 L932.203 681.137 L931.644 681.137 L931.084 681.137 L930.525 681.137 L929.966 681.137 L929.406 681.137 L928.847 681.137 L928.288 681.137 L927.729 681.137 L927.169 681.137 L926.61 681.137 L926.051 681.137 L925.492 681.137 L924.932 681.137 L924.373 681.137 L923.814 681.137 L923.255 681.137 L922.695 681.137 L922.136 681.137 L921.577 681.137 L921.018 681.137 L920.458 681.137 L919.899 681.137 L919.34 681.137 L918.781 681.137 L918.221 681.137 L917.662 681.137 L917.103 681.137 L916.544 681.137 L915.984 681.137 L915.425 681.137 L914.866 681.137 L914.307 681.137 L913.747 681.137 L913.188 681.137 L912.629 681.137 L912.07 681.137 L911.51 681.137 L910.951 681.137 L910.392 681.137 L909.833 681.137 L909.273 681.137 L908.714 681.137 L908.155 681.137 L907.596 681.137 L907.036 681.137 L906.477 681.137 L905.918 681.137 L905.359 681.137 L904.799 681.137 L904.24 681.137 L903.681 681.137 L903.122 681.137 L902.562 681.137 L902.003 681.137 L901.444 681.137 L900.885 681.137 L900.325 681.137 L899.766 681.137 L899.207 681.137 L898.648 681.137 L898.088 681.137 L897.529 681.137 L896.97 681.137 L896.411 681.137 L895.851 681.137 L895.292 681.137 L894.733 681.137 L894.174 681.137 L893.614 681.137 L893.055 681.137 L892.496 681.137 L891.937 681.137 L891.377 681.137 L890.818 681.137 L890.259 681.137 L889.7 681.137 L889.14 681.137 L888.581 681.137 L888.022 681.137 L887.463 681.137 L886.903 681.137 L886.344 681.137 L885.785 681.137 L885.226 681.137 L884.666 681.137 L884.107 681.137 L883.548 681.137 L882.989 681.137 L882.429 681.137 L881.87 681.137 L881.311 681.137 L880.752 681.137 L880.192 681.137 L879.633 681.137 L879.074 681.137 L878.515 681.137 L877.955 681.137 L877.396 681.137 L876.837 681.137 L876.278 681.137 L875.718 681.137 L875.159 681.137 L874.6 681.137 L874.041 681.137 L873.481 681.137 L872.922 681.137 L872.363 681.137 L871.804 681.137 L871.244 681.137 L870.685 681.137 L870.126 681.137 L869.567 681.137 L869.007 681.137 L868.448 681.137 L867.889 681.137 L867.33 681.137 L866.77 681.137 L866.211 681.137 L865.652 681.137 L865.093 681.137 L864.533 681.137 L863.974 681.137 L863.415 681.137 L862.856 681.137 L862.296 681.137 L861.737 681.137 L861.178 681.137 L860.619 681.137 L860.059 681.137 L859.5 681.137 L858.941 681.137 L858.382 681.137 L857.822 681.137 L857.263 681.137 L856.704 681.137 L856.145 681.137 L855.585 681.137 L855.026 681.137 L854.467 681.137 L853.908 681.137 L853.348 681.137 L852.789 681.137 L852.23 681.137 L851.671 681.137 L851.111 681.137 L850.552 681.137 L849.993 681.137 L849.434 681.137 L848.874 681.137 L848.315 681.137 L847.756 681.137 L847.197 681.137 L846.637 681.137 L846.078 681.137 L845.519 681.137 L844.96 681.137 L844.4 681.137 L843.841 681.137 L843.282 681.137 L842.723 681.137 L842.163 681.137 L841.604 681.137 L841.045 681.137 L840.486 681.137 L839.926 681.137 L839.367 681.137 L838.808 681.137 L838.249 681.137 L837.689 681.137 L837.13 681.137 L836.571 681.137 L836.012 681.137 L835.452 681.137 L834.893 681.137 L834.334 681.137 L833.775 681.137 L833.215 681.137 L832.656 681.137 L832.097 681.137 L831.538 681.137 L830.978 681.137 L830.419 681.137 L829.86 681.137 L829.301 681.137 L828.741 681.137 L828.182 681.137 L827.623 681.137 L827.064 681.137 L826.504 681.137 L825.945 681.137 L825.386 681.137 L824.827 681.137 L824.267 681.137 L823.708 681.137 L823.149 681.137 L822.59 681.137 L822.03 681.137 L821.471 681.137 L820.912 681.137 L820.353 681.137 L819.793 681.137 L819.234 681.137 L818.675 681.137 L818.116 681.137 L817.556 681.137 L816.997 681.137 L816.438 681.137 L815.879 681.137 L815.319 681.137 L814.76 681.137 L814.201 681.137 L813.642 681.137 L813.082 681.137 L812.523 681.137 L811.964 681.137 L811.405 681.137 L810.845 681.137 L810.286 681.137 L809.727 681.137 L809.168 681.137 L808.608 681.137 L808.049 681.137 L807.49 681.137 L806.931 681.137 L806.371 681.137 L805.812 681.137 L805.253 681.137 L804.693 681.137 L804.134 681.137 L803.575 681.137 L803.016 681.137 L802.456 681.137 L801.897 681.137 L801.338 681.137 L800.779 681.137 L800.219 681.137 L799.66 681.137 L799.101 681.137 L798.542 681.137 L797.982 681.137 L797.423 681.137 L796.864 681.137 L796.305 681.137 L795.745 681.137 L795.186 681.137 L794.627 681.137 L794.068 681.137 L793.508 681.137 L792.949 681.137 L792.39 681.137 L791.831 681.137 L791.271 681.137 L790.712 681.137 L790.153 681.137 L789.594 681.137 L789.034 681.137 L788.475 681.137 L787.916 681.137 L787.357 681.137 L786.797 681.137 L786.238 681.137 L785.679 681.137 L785.12 681.137 L784.56 681.137 L784.001 681.137 L783.442 681.137 L782.883 681.137 L782.323 681.137 L781.764 681.137 L781.205 681.137 L780.646 681.137 L780.086 681.137 L779.527 681.137 L778.968 681.137 L778.409 681.137 L777.849 681.137 L777.29 681.137 L776.731 681.137 L776.172 681.137 L775.612 681.137 L775.053 681.137 L774.494 681.137 L773.935 681.137 L773.375 681.137 L772.816 681.137 L772.257 681.137 L771.698 681.137 L771.138 681.137 L770.579 681.137 L770.02 681.137 L769.461 681.137 L768.901 681.137 L768.342 681.137 L767.783 681.137 L767.224 681.137 L766.664 681.137 L766.105 681.137 L765.546 681.137 L764.987 681.137 L764.427 681.137 L763.868 681.137 L763.309 681.137 L762.75 681.137 L762.19 681.137 L761.631 681.137 L761.072 681.137 L760.513 681.137 L759.953 681.137 L759.394 681.137 L758.835 681.137 L758.276 681.137 L757.716 681.137 L757.157 681.137 L756.598 681.137 L756.039 681.137 L755.479 681.137 L754.92 681.137 L754.361 681.137 L753.802 681.137 L753.242 681.137 L752.683 681.137 L752.124 681.137 L751.565 681.137 L751.005 681.137 L750.446 681.137 L749.887 681.137 L749.328 681.137 L748.768 681.137 L748.209 681.137 L747.65 681.137 L747.091 681.137 L746.531 681.137 L745.972 681.137 L745.413 681.137 L744.854 681.137 L744.294 681.137 L743.735 681.137 L743.176 681.137 L742.617 681.137 L742.057 681.137 L741.498 681.137 L740.939 681.137 L740.38 681.137 L739.82 681.137 L739.261 681.137 L738.702 681.137 L738.143 681.137 L737.583 681.137 L737.024 681.137 L736.465 681.137 L735.906 681.137 L735.346 681.137 L734.787 681.137 L734.228 681.137 L733.669 681.137 L733.109 681.137 L732.55 681.137 L731.991 681.137 L731.432 681.137 L730.872 681.137 L730.313 681.137 L729.754 681.137 L729.195 681.137 L728.635 681.137 L728.076 681.137 L727.517 681.137 L726.958 681.137 L726.398 681.137 L725.839 681.137 L725.28 681.137 L724.721 681.137 L724.161 681.137 L723.602 681.137 L723.043 681.137 L722.484 681.137 L721.924 681.137 L721.365 681.137 L720.806 681.137 L720.247 681.137  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.456 720.806,682.456 721.365,682.456 721.924,682.456 722.484,682.456 723.043,682.456 723.602,682.456 724.161,682.456 724.721,682.456 725.28,682.456 725.839,682.456 726.398,682.456 726.958,682.456 727.517,682.456 728.076,682.456 728.635,682.456 729.195,682.456 729.754,682.456 730.313,682.456 730.872,682.456 731.432,682.456 731.991,682.456 732.55,682.456 733.109,682.456 733.669,682.456 734.228,682.456 734.787,682.456 735.346,682.456 735.906,682.456 736.465,682.456 737.024,682.456 737.583,682.456 738.143,682.456 738.702,682.456 739.261,682.456 739.82,682.456 740.38,682.456 740.939,682.456 741.498,682.456 742.057,682.456 742.617,682.456 743.176,682.456 743.735,682.456 744.294,682.456 744.854,682.456 745.413,682.456 745.972,682.456 746.531,682.456 747.091,682.456 747.65,682.456 748.209,682.456 748.768,682.456 749.328,682.456 749.887,682.456 750.446,682.456 751.005,682.456 751.565,682.456 752.124,682.456 752.683,682.456 753.242,682.456 753.802,682.456 754.361,682.456 754.92,682.456 755.479,682.456 756.039,682.456 756.598,682.456 757.157,682.456 757.716,682.456 758.276,682.456 758.835,682.456 759.394,682.456 759.953,682.456 760.513,682.456 761.072,682.456 761.631,682.456 762.19,682.456 762.75,682.456 763.309,682.456 763.868,682.456 764.427,682.456 764.987,682.456 765.546,682.456 766.105,682.456 766.664,682.456 767.224,682.456 767.783,682.456 768.342,682.456 768.901,682.456 769.461,682.456 770.02,682.456 770.579,682.456 771.138,682.456 771.698,682.456 772.257,682.456 772.816,682.456 773.375,682.456 773.935,682.456 774.494,682.456 775.053,682.456 775.612,682.456 776.172,682.456 776.731,682.456 777.29,682.456 777.849,682.456 778.409,682.456 778.968,682.456 779.527,682.456 780.086,682.456 780.646,682.456 781.205,682.456 781.764,682.456 782.323,682.456 782.883,682.456 783.442,682.456 784.001,682.456 784.56,682.456 785.12,682.456 785.679,682.456 786.238,682.456 786.797,682.456 787.357,682.456 787.916,682.456 788.475,682.456 789.034,682.456 789.594,682.456 790.153,682.456 790.712,682.456 791.271,682.456 791.831,682.456 792.39,682.456 792.949,682.456 793.508,682.456 794.068,682.456 794.627,682.456 795.186,682.456 795.745,682.456 796.305,682.456 796.864,682.456 797.423,682.456 797.982,682.456 798.542,682.456 799.101,682.456 799.66,682.456 800.219,682.456 800.779,682.456 801.338,682.456 801.897,682.456 802.456,682.456 803.016,682.456 803.575,682.456 804.134,682.456 804.693,682.456 805.253,682.456 805.812,682.456 806.371,682.456 806.931,682.456 807.49,682.456 808.049,682.456 808.608,682.456 809.168,682.456 809.727,682.456 810.286,682.456 810.845,682.456 811.405,682.456 811.964,682.456 812.523,682.456 813.082,682.456 813.642,682.456 814.201,682.456 814.76,682.456 815.319,682.456 815.879,682.456 816.438,682.456 816.997,682.456 817.556,682.456 818.116,682.456 818.675,682.456 819.234,682.456 819.793,682.456 820.353,682.456 820.912,682.456 821.471,682.456 822.03,682.456 822.59,682.456 823.149,682.456 823.708,682.456 824.267,682.456 824.827,682.456 825.386,682.456 825.945,682.456 826.504,682.456 827.064,682.456 827.623,682.456 828.182,682.456 828.741,682.456 829.301,682.456 829.86,682.456 830.419,682.456 830.978,682.456 831.538,682.456 832.097,682.456 832.656,682.456 833.215,682.456 833.775,682.456 834.334,682.456 834.893,682.456 835.452,682.456 836.012,682.456 836.571,682.456 837.13,682.456 837.689,682.456 838.249,682.456 838.808,682.456 839.367,682.456 839.926,682.456 840.486,682.456 841.045,682.456 841.604,682.456 842.163,682.456 842.723,682.456 843.282,682.456 843.841,682.456 844.4,682.456 844.96,682.456 845.519,682.456 846.078,682.456 846.637,682.456 847.197,682.456 847.756,682.456 848.315,682.456 848.874,682.456 849.434,682.456 849.993,682.456 850.552,682.456 851.111,682.456 851.671,682.456 852.23,682.456 852.789,682.456 853.348,682.456 853.908,682.456 854.467,682.456 855.026,682.456 855.585,682.456 856.145,682.456 856.704,682.456 857.263,682.456 857.822,682.456 858.382,682.456 858.941,682.456 859.5,682.456 860.059,682.456 860.619,682.456 861.178,682.456 861.737,682.456 862.296,682.456 862.856,682.456 863.415,682.456 863.974,682.456 864.533,682.456 865.093,682.456 865.652,682.456 866.211,682.456 866.77,682.456 867.33,682.456 867.889,682.456 868.448,682.456 869.007,682.456 869.567,682.456 870.126,682.456 870.685,682.456 871.244,682.456 871.804,682.456 872.363,682.456 872.922,682.456 873.481,682.456 874.041,682.456 874.6,682.456 875.159,682.456 875.718,682.456 876.278,682.456 876.837,682.456 877.396,682.456 877.955,682.456 878.515,682.456 879.074,682.456 879.633,682.456 880.192,682.456 880.752,682.456 881.311,682.456 881.87,682.456 882.429,682.456 882.989,682.456 883.548,682.456 884.107,682.456 884.666,682.456 885.226,682.456 885.785,682.456 886.344,682.456 886.903,682.456 887.463,682.456 888.022,682.456 888.581,682.456 889.14,682.456 889.7,682.456 890.259,682.456 890.818,682.456 891.377,682.456 891.937,682.456 892.496,682.456 893.055,682.456 893.614,682.456 894.174,682.456 894.733,682.456 895.292,682.456 895.851,682.456 896.411,682.456 896.97,682.456 897.529,682.456 898.088,682.456 898.648,682.456 899.207,682.456 899.766,682.456 900.325,682.456 900.885,682.456 901.444,682.456 902.003,682.456 902.562,682.456 903.122,682.456 903.681,682.456 904.24,682.456 904.799,682.456 905.359,682.456 905.918,682.456 906.477,682.456 907.036,682.456 907.596,682.456 908.155,682.456 908.714,682.456 909.273,682.456 909.833,682.456 910.392,682.456 910.951,682.456 911.51,682.456 912.07,682.456 912.629,682.456 913.188,682.456 913.747,682.456 914.307,682.456 914.866,682.456 915.425,682.456 915.984,682.456 916.544,682.456 917.103,682.456 917.662,682.456 918.221,682.456 918.781,682.456 919.34,682.456 919.899,682.456 920.458,682.456 921.018,682.456 921.577,682.456 922.136,682.456 922.695,682.456 923.255,682.456 923.814,682.456 924.373,682.456 924.932,682.456 925.492,682.456 926.051,682.456 926.61,682.456 927.169,682.456 927.729,682.456 928.288,682.456 928.847,682.456 929.406,682.456 929.966,682.456 930.525,682.456 931.084,682.456 931.644,682.456 932.203,682.456 932.762,682.456 933.321,682.456 933.881,682.456 934.44,682.456 934.999,682.456 935.558,682.456 936.118,682.456 936.677,682.456 937.236,682.456 937.795,682.456 938.355,682.456 938.914,682.456 939.473,682.456 940.032,682.456 940.592,682.456 941.151,682.456 941.71,682.456 942.269,682.456 942.829,682.456 943.388,682.456 943.947,682.456 944.506,682.456 945.066,682.456 945.625,682.456 946.184,682.456 946.743,682.456 947.303,682.456 947.862,682.456 948.421,682.456 948.98,682.456 949.54,682.456 950.099,682.456 950.658,682.456 951.217,682.456 951.777,682.456 952.336,682.456 952.895,682.456 953.454,682.456 954.014,682.456 954.573,682.456 955.132,682.456 955.691,682.456 956.251,682.456 956.81,682.456 957.369,682.456 957.928,682.456 958.488,682.456 959.047,682.456 959.606,682.456 960.165,682.456 960.725,682.456 961.284,682.456 961.843,682.456 962.402,682.456 962.962,682.456 963.521,682.456 964.08,682.456 964.639,682.456 965.199,682.456 965.758,682.456 966.317,682.456 966.876,682.456 967.436,682.456 967.995,682.456 968.554,682.456 969.113,682.456 969.673,682.456 970.232,682.456 970.791,682.456 971.35,682.456 971.91,682.456 972.469,682.456 973.028,682.456 973.587,682.456 974.147,682.456 974.706,682.456 975.265,682.456 975.824,682.456 976.384,682.456 976.943,682.456 977.502,682.456 978.061,682.456 978.621,682.456 979.18,682.456 979.739,682.456 980.298,682.456 980.858,682.456 981.417,682.456 981.976,682.456 982.535,682.456 983.095,682.456 983.654,682.456 984.213,682.456 984.772,682.456 985.332,682.456 985.891,682.456 986.45,682.456 987.009,682.456 987.569,682.456 988.128,682.456 988.687,682.456 989.246,682.456 989.806,682.456 990.365,682.456 990.924,682.456 991.483,682.456 992.043,682.456 992.602,682.456 993.161,682.456 993.72,682.456 994.28,682.456 994.839,682.456 995.398,682.456 995.957,682.456 996.517,682.456 997.076,682.456 997.635,682.456 998.194,682.456 998.754,682.456 999.313,682.456 999.872,682.456 1000.43,682.456 1000.99,682.456 1001.55,682.456 1002.11,682.456 1002.67,682.456 1003.23,682.456 1003.79,682.456 1004.35,682.456 1004.91,682.456 1005.46,682.456 1006.02,682.456 1006.58,682.456 1007.14,682.456 1007.7,682.456 1008.26,682.456 1008.82,682.456 1009.38,682.456 1009.94,682.456 1010.5,682.456 1011.06,682.456 1011.62,682.456 1012.18,682.456 1012.73,682.456 1013.29,682.456 1013.85,682.456 1014.41,682.456 1014.97,682.456 1015.53,682.456 1016.09,682.456 1016.65,682.456 1017.21,682.456 1017.77,682.456 1018.33,682.456 1018.89,682.456 1019.45,682.456 1020.01,682.456 1020.56,682.456 1021.12,682.456 1021.68,682.456 1022.24,682.456 1022.8,682.456 1023.36,682.456 1023.92,682.456 1024.48,682.456 1025.04,682.456 1025.6,682.456 1026.16,682.456 1026.72,682.456 1027.28,682.456 1027.83,682.456 1028.39,682.456 1028.95,682.456 1029.51,682.456 1030.07,682.456 1030.63,682.456 1031.19,682.456 1031.75,682.456 1032.31,682.456 1032.87,682.456 1033.43,682.456 1033.99,682.456 1034.55,682.456 1035.1,682.456 1035.66,682.456 1036.22,682.456 1036.78,682.456 1037.34,682.456 1037.9,682.456 1038.46,682.456 1039.02,682.456 1039.58,682.456 1040.14,682.456 1040.7,682.456 1041.26,682.456 1041.82,682.456 1042.38,682.456 1042.93,682.456 1043.49,682.456 1044.05,682.456 1044.61,682.456 1045.17,682.456 1045.73,682.456 1046.29,682.456 1046.85,682.456 1047.41,682.456 1047.97,682.456 1048.53,682.456 1049.09,682.456 1049.65,682.456 1050.2,682.456 1050.76,682.456 1051.32,682.456 1051.88,682.456 1052.44,682.456 1053,682.456 1053.56,682.456 1054.12,682.456 1054.68,682.456 1055.24,682.456 1055.8,682.456 1056.36,682.456 1056.92,682.456 1057.48,682.456 1058.03,682.456 1058.59,682.456 1059.15,682.456 1059.71,682.456 1060.27,682.456 1060.83,682.456 1061.39,682.456 1061.95,682.456 1062.51,682.456 1063.07,682.456 1063.63,682.456 1064.19,682.456 1064.75,682.456 1065.3,682.456 1065.86,682.456 1066.42,682.456 1066.98,682.456 1067.54,682.456 1068.1,682.456 1068.66,682.456 1069.22,682.456 1069.78,682.456 1070.34,682.456 1070.9,682.456 1071.46,682.456 1072.02,682.456 1072.57,682.456 1073.13,682.456 1073.69,682.456 1074.25,682.456 1074.81,682.456 1075.37,682.456 1075.93,682.456 1076.49,682.456 1077.05,682.456 1077.61,682.456 1078.17,682.456 1078.73,682.456 1079.29,682.456 1079.85,682.456 1080.4,682.456 1080.96,682.456 1081.52,682.456 1082.08,682.456 1082.64,682.456 1083.2,682.456 1083.76,682.456 1084.32,682.456 1084.88,682.456 1085.44,682.456 1086,682.456 1086.56,682.456 1087.12,682.456 1087.67,682.456 1088.23,682.456 1088.79,682.456 1089.35,682.456 1089.91,682.456 1090.47,682.456 1091.03,682.456 1091.59,682.456 1092.15,682.456 1092.71,682.456 1093.27,682.456 1093.83,682.456 1094.39,682.456 1094.94,682.456 1095.5,682.456 1096.06,682.456 1096.62,682.456 1097.18,682.456 1097.74,682.456 1098.3,682.456 1098.86,682.456 1099.42,682.456 1099.98,682.456 1100.54,682.456 1101.1,682.456 1101.66,682.456 1102.22,682.456 1102.77,682.456 1103.33,682.456 1103.89,682.456 1104.45,682.456 1105.01,682.456 1105.57,682.456 1106.13,682.456 1106.69,682.456 1107.25,682.456 1107.81,682.456 1108.37,682.456 1108.93,682.456 1109.49,682.456 1110.04,682.456 1110.6,682.456 1111.16,682.456 1111.72,682.456 1112.28,682.456 1112.84,682.456 1113.4,682.456 1113.96,682.456 1114.52,682.456 1115.08,682.456 1115.64,682.456 1116.2,682.456 1116.76,682.456 1117.31,682.456 1117.87,682.456 1118.43,682.456 1118.99,682.456 1119.55,682.456 1120.11,682.456 1120.67,682.456 1121.23,682.456 1121.79,682.456 1122.35,682.456 1122.91,682.456 1123.47,682.456 1124.03,682.456 1124.59,682.456 1125.14,682.456 1125.7,682.456 1126.26,682.456 1126.82,682.456 1127.38,682.456 1127.94,682.456 1128.5,682.456 1129.06,682.456 1129.62,682.456 1130.18,682.456 1130.74,682.456 1131.3,682.456 1131.86,682.456 1132.41,682.456 1132.97,682.456 1133.53,682.456 1134.09,682.456 1134.65,682.456 1135.21,682.456 1135.77,682.456 1136.33,682.456 1136.89,682.456 1137.45,682.456 1138.01,682.456 1138.57,682.456 1139.13,682.456 1139.68,682.456 1140.24,682.456 1140.8,682.456 1141.36,682.456 1141.92,682.456 1142.48,682.456 1143.04,682.456 1143.6,682.456 1144.16,682.456 1144.72,682.456 1145.28,682.456 1145.84,682.456 1146.4,682.456 1146.96,682.456 1147.51,682.456 1148.07,682.456 1148.63,682.456 1149.19,682.456 1149.75,682.456 1150.31,682.456 1150.87,682.456 1151.43,682.456 1151.99,682.456 1152.55,682.456 1153.11,682.456 1153.67,682.456 1154.23,682.456 1154.78,682.456 1155.34,682.456 1155.9,682.456 1156.46,682.456 1157.02,682.456 1157.58,682.456 1158.14,682.456 1158.7,682.456 1159.26,682.456 1159.82,682.456 1160.38,682.456 1160.94,682.456 1161.5,682.456 1162.05,682.456 1162.61,682.456 1163.17,682.456 1163.73,682.456 1164.29,682.456 1164.85,682.456 1165.41,682.456 1165.97,682.456 1166.53,682.456 1167.09,682.456 1167.65,682.456 1168.21,682.456 1168.77,682.456 1169.33,682.456 1169.88,682.456 1170.44,682.456 1171,682.456 1171.56,682.456 1172.12,682.456 1172.68,682.456 1173.24,682.456 1173.8,682.456 1174.36,682.456 1174.92,682.456 1175.48,682.456 1176.04,682.456 1176.6,682.456 1177.15,682.456 1177.71,682.456 1178.27,682.456 1178.83,682.456 1179.39,682.456 1179.95,682.456 1180.51,682.456 1181.07,682.456 1181.63,682.456 1182.19,682.456 1182.75,682.456 1183.31,682.456 1183.87,682.456 1184.43,682.456 1184.98,682.456 1185.54,682.456 1186.1,682.456 1186.66,682.456 1187.22,682.456 1187.78,682.456 1188.34,682.456 1188.9,682.456 1189.46,682.456 1190.02,682.456 1190.58,682.456 1191.14,682.456 1191.7,682.456 1192.25,682.456 1192.81,682.456 1193.37,682.456 1193.93,682.456 1194.49,682.456 1195.05,682.456 1195.61,682.456 1196.17,682.456 1196.73,682.456 1197.29,682.456 1197.85,682.456 1198.41,682.456 1198.97,682.456 1199.52,682.456 1200.08,682.456 1200.64,682.456 1201.2,682.456 1201.76,682.456 1202.32,682.456 1202.88,682.456 1203.44,682.456 1204,682.456 1204.56,682.456 1205.12,682.456 1205.68,682.456 1206.24,682.456 1206.8,682.456 1207.35,682.456 1207.91,682.456 1208.47,682.456 1209.03,682.456 1209.59,682.456 1210.15,682.456 1210.71,682.456 1211.27,682.456 1211.83,682.456 1212.39,682.456 1212.95,682.456 1213.51,682.456 1214.07,682.456 1214.62,682.456 1215.18,682.456 1215.74,682.456 1216.3,682.456 1216.86,682.456 1217.42,682.456 1217.98,682.456 1218.54,682.456 1219.1,682.456 1219.66,682.456 1220.22,682.456 1220.78,682.456 1221.34,682.456 1221.89,682.456 1222.45,682.456 1223.01,682.456 1223.57,682.456 1224.13,682.456 1224.69,682.456 1225.25,682.456 1225.81,682.456 1226.37,682.456 1226.93,682.456 1227.49,682.456 1228.05,682.456 1228.61,682.456 1229.17,682.456 1229.72,682.456 1230.28,682.456 1230.84,682.456 1231.4,682.456 1231.96,682.456 1232.52,682.456 1233.08,682.456 1233.64,682.456 1234.2,682.456 1234.76,682.456 1235.32,682.456 1235.88,682.456 1236.44,682.456 1236.99,682.456 1237.55,682.456 1238.11,682.456 1238.67,682.456 1239.23,682.456 1239.79,682.456 1240.35,682.456 1240.91,682.456 1241.47,682.456 1242.03,682.456 1242.59,682.456 1243.15,682.456 1243.71,682.456 1244.26,682.456 1244.82,682.456 1245.38,682.456 1245.94,682.456 1246.5,682.456 1247.06,682.456 1247.62,682.456 1248.18,682.456 1248.74,682.456 1249.3,682.456 1249.86,682.456 1250.42,682.456 1250.98,682.456 1251.54,682.456 1252.09,682.456 1252.65,682.456 1253.21,682.456 1253.77,682.456 1254.33,682.456 1254.89,682.456 1255.45,682.456 1256.01,682.456 1256.57,682.456 1257.13,682.456 1257.69,682.456 1258.25,682.456 1258.81,682.456 1259.36,682.456 1259.92,682.456 1260.48,682.456 1261.04,682.456 1261.6,682.456 1262.16,682.456 1262.72,682.456 1263.28,682.456 1263.84,682.456 1264.4,682.456 1264.96,682.456 1265.52,682.456 1266.08,682.456 1266.63,682.456 1267.19,682.456 1267.75,682.456 1268.31,682.456 1268.87,682.456 1269.43,682.456 1269.99,682.456 1270.55,682.456 1271.11,682.456 1271.67,682.456 1272.23,682.456 1272.79,682.456 1273.35,682.456 1273.91,682.456 1274.46,682.456 1275.02,682.456 1275.58,682.456 1276.14,682.456 1276.7,682.456 1277.26,682.456 1277.82,682.456 1278.38,682.456 1278.94,682.456 1279.5,682.456 1280.06,682.456 1280.62,682.456 1281.18,682.456 1281.73,682.456 1282.29,682.456 1282.85,682.456 1283.41,682.456 1283.97,682.456 1284.53,682.456 1285.09,682.456 1285.65,682.456 1286.21,682.456 1286.77,682.456 1287.33,682.456 1287.89,682.456 1288.45,682.456 1289,682.456 1289.56,682.456 1290.12,682.456 1290.68,682.456 1291.24,682.456 1291.8,682.456 1292.36,682.456 1292.92,682.456 1293.48,682.456 1294.04,682.456 1294.6,682.456 1295.16,682.456 1295.72,682.456 1296.28,682.456 1296.83,682.456 1297.39,682.456 1297.95,682.456 1298.51,682.456 1299.07,682.456 1299.63,682.456 1300.19,682.456 1300.75,682.456 1301.31,682.456 1301.87,682.456 1302.43,682.456 1302.99,682.456 1303.55,682.456 1304.1,682.456 1304.66,682.456 1305.22,682.456 1305.78,682.456 1306.34,682.456 1306.9,682.456 1307.46,682.456 1308.02,682.456 1308.58,682.456 1309.14,682.456 1309.7,682.456 1310.26,682.456 1310.82,682.456 1311.38,682.456 1311.93,682.456 1312.49,682.456 1313.05,682.456 1313.61,682.456 1314.17,682.456 1314.73,682.456 1315.29,682.456 1315.85,682.456 1316.41,682.456 1316.97,682.456 1317.53,682.456 1318.09,682.456 1318.65,682.456 1319.2,682.456 1319.76,682.456 1320.32,682.456 1320.88,682.456 1321.44,682.456 1322,682.456 1322.56,682.456 1323.12,682.456 1323.68,682.456 1324.24,682.456 1324.8,682.456 1325.36,682.456 1325.92,682.456 1326.47,682.456 1327.03,682.456 1327.59,682.456 1328.15,682.456 1328.71,682.456 1329.27,682.456 1329.83,682.456 1330.39,682.456 1330.95,682.456 1331.51,682.456 1332.07,682.456 1332.63,682.456 1333.19,682.456 1333.75,682.456 1334.3,682.456 1334.86,682.456 1335.42,682.456 1335.98,682.456 1336.54,682.456 1337.1,682.456 1337.66,682.456 1338.22,682.456 1338.78,682.456 1339.34,682.456 1339.9,682.456 1340.46,682.456 1341.02,682.456 1341.57,682.456 1342.13,682.456 1342.69,682.456 1343.25,682.456 1343.81,682.456 1344.37,682.456 1344.93,682.456 1345.49,682.456 1346.05,682.456 1346.61,682.456 1347.17,682.456 1347.73,682.456 1348.29,682.456 1348.84,682.456 1349.4,682.456 1349.96,682.456 1350.52,682.456 1351.08,682.456 1351.64,682.456 1352.2,682.456 1352.76,682.456 1353.32,682.456 1353.88,682.456 1354.44,682.456 1355,682.456 1355.56,682.456 1356.12,682.456 1356.67,682.456 1357.23,682.456 1357.79,682.456 1358.35,682.456 1358.91,682.456 1359.47,682.456 1360.03,682.456 1360.59,682.456 1361.15,682.456 1361.71,682.456 1362.27,682.456 1362.83,682.456 1363.39,682.456 1363.94,682.456 1364.5,682.456 1365.06,682.456 1365.62,682.456 1366.18,682.456 1366.74,682.456 1367.3,682.456 1367.86,682.456 1368.42,682.456 1368.98,682.456 1369.54,682.456 1370.1,682.456 1370.66,682.456 1371.21,682.456 1371.77,682.456 1372.33,682.456 1372.89,682.456 1373.45,682.456 1374.01,682.456 1374.57,682.456 1375.13,682.456 1375.69,682.456 1376.25,682.456 1376.81,682.456 1377.37,682.456 1377.93,682.456 1378.49,682.456 1379.04,682.456 1379.6,682.456 1380.16,682.456 1380.72,682.456 1381.28,682.456 1381.84,682.456 1382.4,682.456 1382.96,682.456 1383.52,682.456 1384.08,682.456 1384.64,682.456 1385.2,682.456 1385.76,682.456 1386.31,682.456 1386.87,682.456 1387.43,682.456 1387.99,682.456 1388.55,682.456 1389.11,682.456 1389.67,682.456 1390.23,682.456 1390.79,682.456 1391.35,682.456 1391.91,682.456 1392.47,682.456 1393.03,682.456 1393.58,682.456 1394.14,682.456 1394.7,682.456 1395.26,682.456 1395.82,682.456 1396.38,682.456 1396.94,682.456 1397.5,682.456 1398.06,682.456 1398.62,682.456 1399.18,682.456 1399.74,682.456 1400.3,682.456 1400.86,682.456 1401.41,682.456 1401.97,682.456 1402.53,682.456 1403.09,682.456 1403.65,682.456 1404.21,682.456 1404.77,682.456 1405.33,682.456 1405.89,682.456 1406.45,682.456 1407.01,682.456 1407.57,682.456 1408.13,682.456 1408.68,682.456 1409.24,682.456 1409.8,682.456 1410.36,682.456 1410.92,682.456 1411.48,682.456 1412.04,682.456 1412.6,682.456 1413.16,682.456 1413.72,682.456 1414.28,682.456 1414.84,682.456 1415.4,682.456 1415.95,682.456 1416.51,682.456 1417.07,682.456 1417.63,682.456 1418.19,682.456 1418.75,682.456 1419.31,682.456 1419.87,682.456 1420.43,682.456 1420.99,682.456 1421.55,682.456 1422.11,682.456 1422.67,682.456 1423.23,682.456 1423.78,682.456 1424.34,682.456 1424.9,682.456 1425.46,682.456 1426.02,682.456 1426.58,682.456 1427.14,682.456 1427.7,682.456 1428.26,682.456 1428.82,682.456 1429.38,682.456 1429.94,682.456 1430.5,682.456 1431.05,682.456 1431.61,682.456 1432.17,682.456 1432.73,682.456 1433.29,682.456 1433.85,682.456 1434.41,682.456 1434.97,682.456 1435.53,682.456 1436.09,682.456 1436.65,682.456 1437.21,682.456 1437.77,682.456 1438.33,682.456 1438.88,682.456 1439.44,682.456 1440,682.456 1440.56,682.456 1441.12,682.456 1441.68,682.456 1442.24,682.456 1442.8,682.456 1443.36,682.456 1443.92,682.456 1444.48,682.456 1445.04,682.456 1445.6,682.456 1446.15,682.456 1446.71,682.456 1447.27,682.456 1447.83,682.456 1448.39,682.456 1448.95,682.456 1449.51,682.456 1450.07,682.456 1450.63,682.456 1451.19,682.456 1451.75,682.456 1452.31,682.456 1452.87,682.456 1453.42,682.456 1453.98,682.456 1454.54,682.456 1455.1,682.456 1455.66,682.456 1456.22,682.456 1456.78,682.456 1457.34,682.456 1457.9,682.456 1458.46,682.456 1459.02,682.456 1459.58,682.456 1460.14,682.456 1460.7,682.456 1461.25,682.456 1461.81,682.456 1462.37,682.456 1462.93,682.456 1463.49,682.456 1464.05,682.456 1464.61,682.456 1465.17,682.456 1465.73,682.456 1466.29,682.456 1466.85,682.456 1467.41,682.456 1467.97,682.456 1468.52,682.456 1469.08,682.456 1469.64,682.456 1470.2,682.456 1470.76,682.456 1471.32,682.456 1471.88,682.456 1472.44,682.456 1473,682.456 1473.56,682.456 1474.12,682.456 1474.68,682.456 1475.24,682.456 1475.79,682.456 1476.35,682.456 1476.91,682.456 1477.47,682.456 1478.03,682.456 1478.59,682.456 1479.15,682.456 1479.71,682.456 1480.27,682.456 1480.83,682.456 1481.39,682.456 1481.95,682.456 1482.51,682.456 1483.07,682.456 1483.62,682.456 1484.18,682.456 1484.74,682.456 1485.3,682.456 1485.86,682.456 1486.42,682.456 1486.98,682.456 1487.54,682.456 1488.1,682.456 1488.66,682.456 1489.22,682.456 1489.78,682.456 1490.34,682.456 1490.89,682.456 1491.45,682.456 1492.01,682.456 1492.57,682.456 1493.13,682.456 1493.69,682.456 1494.25,682.456 1494.81,682.456 1495.37,682.456 1495.93,682.456 1496.49,682.456 1497.05,682.456 1497.61,682.456 1498.16,682.456 1498.72,682.456 1499.28,682.456 1499.84,682.456 1500.4,682.456 1500.96,682.456 1501.52,682.456 1502.08,682.456 1502.64,682.456 1503.2,682.456 1503.76,682.456 1504.32,682.456 1504.88,682.456 1505.44,682.456 1505.99,682.456 1506.55,682.456 1507.11,682.456 1507.67,682.456 1508.23,682.456 1508.79,682.456 1509.35,682.456 1509.91,682.456 1510.47,682.456 1511.03,682.456 1511.59,682.456 1512.15,682.456 1512.71,682.456 1513.26,682.456 1513.82,682.456 1514.38,682.456 1514.94,682.456 1515.5,682.456 1516.06,682.456 1516.62,682.456 1517.18,682.456 1517.74,682.456 1518.3,682.456 1518.86,682.456 1519.42,682.456 1519.98,682.456 1520.53,682.456 1521.09,682.456 1521.65,682.456 1522.21,682.456 1522.77,682.456 1523.33,682.456 1523.89,682.456 1524.45,682.456 1525.01,682.456 1525.57,682.456 1526.13,682.456 1526.69,682.456 1527.25,682.456 1527.81,682.456 1528.36,682.456 1528.92,682.456 1529.48,682.456 1530.04,682.456 1530.6,682.456 1531.16,682.456 1531.72,682.456 1532.28,682.456 1532.84,682.456 1533.4,682.456 1533.96,682.456 1534.52,682.456 1535.08,682.456 1535.63,682.456 1536.19,682.456 1536.75,682.456 1537.31,682.456 1537.87,682.456 1538.43,682.456 1538.99,682.456 1539.55,682.456 1540.11,682.456 1540.67,682.456 1541.23,682.456 1541.79,682.456 1542.35,682.456 1542.9,682.456 1543.46,682.456 1544.02,682.456 1544.58,682.456 1545.14,682.456 1545.7,682.456 1546.26,682.456 1546.82,682.456 1547.38,682.456 1547.94,682.456 1548.5,682.456 1549.06,682.456 1549.62,682.456 1550.18,682.456 1550.73,682.456 1551.29,682.456 1551.85,682.456 1552.41,682.456 1552.97,682.456 1553.53,682.456 1554.09,682.456 1554.65,682.456 1555.21,682.456 1555.77,682.456 1556.33,682.456 1556.89,682.456 1557.45,682.456 1558,682.456 1558.56,682.456 1559.12,682.456 1559.68,682.456 1560.24,682.456 1560.8,682.456 1561.36,682.456 1561.92,682.456 1562.48,682.456 1563.04,682.456 1563.6,682.456 1564.16,682.456 1564.72,682.456 1565.28,682.456 1565.83,682.456 1566.39,682.456 1566.95,682.456 1567.51,682.456 1568.07,682.456 1568.63,682.456 1569.19,682.456 1569.75,682.456 1570.31,682.456 1570.87,682.456 1571.43,682.456 1571.99,682.456 1572.55,682.456 1573.1,682.456 1573.66,682.456 1574.22,682.456 1574.78,682.456 1575.34,682.456 1575.9,682.456 1576.46,682.456 1577.02,682.456 1577.58,682.456 1578.14,682.456 1578.7,682.456 1579.26,682.456 1579.82,682.456 1580.37,682.456 1580.93,682.456 1581.49,682.456 1582.05,682.456 1582.61,682.456 1583.17,682.456 1583.73,682.456 1584.29,682.456 1584.85,682.456 1585.41,682.456 1585.97,682.456 1586.53,682.456 1587.09,682.456 1587.65,682.456 1588.2,682.456 1588.76,682.456 1589.32,682.456 1589.88,682.456 1590.44,682.456 1591,682.456 1591.56,682.456 1592.12,682.456 1592.68,682.456 1593.24,682.456 1593.8,682.456 1594.36,682.456 1594.92,682.456 1595.47,682.456 1596.03,682.456 1596.59,682.456 1597.15,682.456 1597.71,682.456 1598.27,682.456 1598.83,682.456 1599.39,682.456 1599.95,682.456 1600.51,682.456 1601.07,682.456 1601.63,682.456 1602.19,682.456 1602.74,682.456 1603.3,682.456 1603.86,682.456 1604.42,682.456 1604.98,682.456 1605.54,682.456 1606.1,682.456 1606.66,682.456 1607.22,682.456 1607.78,682.456 1608.34,682.456 1608.9,682.456 1609.46,682.456 1610.02,682.456 1610.57,682.456 1611.13,682.456 1611.69,682.456 1612.25,682.456 1612.81,682.456 1613.37,682.456 1613.93,682.456 1614.49,682.456 1615.05,682.456 1615.61,682.456 1616.17,682.456 1616.73,682.456 1617.29,682.456 1617.84,682.456 1618.4,682.456 1618.96,682.456 1619.52,682.456 1620.08,682.456 1620.64,682.456 1621.2,682.456 1621.76,682.456 1622.32,682.456 1622.88,682.456 1623.44,682.456 1624,682.456 1624.56,682.456 1625.11,682.456 1625.67,682.456 1626.23,682.456 1626.79,682.456 1627.35,682.456 1627.91,682.456 1628.47,682.456 1629.03,682.456 1629.59,682.456 1630.15,682.456 1630.71,682.456 1631.27,682.456 1631.83,682.456 1632.39,682.456 1632.94,682.456 1633.5,682.456 1634.06,682.456 1634.62,682.456 1635.18,682.456 1635.74,682.456 1636.3,682.456 1636.86,682.456 1637.42,682.456 1637.98,682.456 1638.54,682.456 1639.1,682.456 1639.66,682.456 1640.21,682.456 1640.77,682.456 1641.33,682.456 1641.89,682.456 1642.45,682.456 1643.01,682.456 1643.57,682.456 1644.13,682.456 1644.69,682.456 1645.25,682.456 1645.81,682.456 1646.37,682.456 1646.93,682.456 1647.48,682.456 1648.04,682.456 1648.6,682.456 1649.16,682.456 1649.72,682.456 1650.28,682.456 1650.84,682.456 1651.4,682.456 1651.96,682.456 1652.52,682.456 1653.08,682.456 1653.64,682.456 1654.2,682.456 1654.76,682.456 1655.31,682.456 1655.87,682.456 1656.43,682.456 1656.99,682.456 1657.55,682.456 1658.11,682.456 1658.67,682.456 1659.23,682.456 1659.79,682.456 1660.35,682.456 1660.91,682.456 1661.47,682.456 1662.03,682.456 1662.58,682.456 1663.14,682.456 1663.7,682.456 1664.26,682.456 1664.82,682.456 1665.38,682.456 1665.94,682.456 1666.5,682.456 1667.06,682.456 1667.62,682.456 1668.18,682.456 1668.74,682.456 1669.3,682.456 1669.85,682.456 1670.41,682.456 1670.97,682.456 1671.53,682.456 1672.09,682.456 1672.65,682.456 1673.21,682.456 1673.77,682.456 1674.33,682.456 1674.89,682.456 1675.45,682.456 1676.01,682.456 1676.57,682.456 1677.13,682.456 1677.68,682.456 1678.24,682.456 1678.8,682.456 1679.36,682.456 1679.92,682.456 1680.48,682.456 1681.04,682.456 1681.6,682.456 1682.16,682.456 1682.72,682.456 1683.28,682.456 1683.84,682.456 1684.4,682.456 1684.95,682.456 1685.51,682.456 1686.07,682.456 1686.63,682.456 1687.19,682.456 1687.75,682.456 1688.31,682.456 1688.87,682.456 1689.43,682.456 1689.99,682.456 1690.55,682.456 1691.11,682.456 1691.67,682.456 1692.23,682.456 1692.78,682.456 1693.34,682.456 1693.9,682.456 1694.46,682.456 1695.02,682.456 1695.58,682.456 1696.14,682.456 1696.7,682.456 1697.26,682.456 1697.82,682.456 1698.38,682.456 1698.94,682.456 1699.5,682.456 1700.05,682.456 1700.61,682.456 1701.17,682.456 1701.73,682.456 1702.29,682.456 1702.85,682.456 1703.41,682.456 1703.97,682.456 1704.53,682.456 1705.09,682.456 1705.65,682.456 1706.21,682.456 1706.77,682.456 1707.32,682.456 1707.88,682.456 1708.44,682.456 1709,682.456 1709.56,682.456 1710.12,682.456 1710.68,682.456 1711.24,682.456 1711.8,682.456 1712.36,682.456 1712.92,682.456 1713.48,682.456 1714.04,682.456 1714.6,682.456 1715.15,682.456 1715.71,682.456 1716.27,682.456 1716.83,682.456 1717.39,682.456 1717.95,682.456 1718.51,682.456 1719.07,682.456 1719.63,682.456 1720.19,682.456 1720.75,682.456 1721.31,682.456 1721.87,682.456 1722.42,682.456 1722.98,682.456 1723.54,682.456 1724.1,682.456 1724.66,682.456 1725.22,682.456 1725.78,682.456 1726.34,682.456 1726.9,682.456 1727.46,682.456 1728.02,682.456 1728.58,682.456 1729.14,682.456 1729.69,682.456 1730.25,682.456 1730.81,682.456 1731.37,682.456 1731.93,682.456 1732.49,682.456 1733.05,682.456 1733.61,682.456 1734.17,682.456 1734.73,682.456 1735.29,682.456 1735.85,682.456 1736.41,682.456 1736.97,682.456 1737.52,682.456 1738.08,682.456 1738.64,682.456 1739.2,682.456 1739.76,682.456 1740.32,682.456 1740.88,682.456 1741.44,682.456 1742,682.456 1742.56,682.456 1743.12,682.456 1743.68,682.456 1744.24,682.456 1744.79,682.456 1745.35,682.456 1745.91,682.456 1746.47,682.456 1747.03,682.456 1747.59,682.456 1748.15,682.456 1748.71,682.456 1749.27,682.456 1749.83,682.456 1750.39,682.456 1750.95,682.456 1751.51,682.456 1752.06,682.456 1752.62,682.456 1753.18,682.456 1753.74,682.456 1754.3,682.456 1754.86,682.456 1755.42,682.456 1755.98,682.456 1756.54,682.456 1757.1,682.456 1757.66,682.456 1758.22,682.456 1758.78,682.456 1759.34,682.456 1759.89,682.456 1760.45,682.456 1761.01,682.456 1761.57,682.456 1762.13,682.456 1762.69,682.456 1763.25,682.456 1763.81,682.456 1764.37,682.456 1764.93,682.456 1765.49,682.456 1766.05,682.456 1766.61,682.456 1767.16,682.456 1767.72,682.456 1768.28,682.456 1768.84,682.456 1769.4,682.456 1769.96,682.456 1770.52,682.456 1771.08,682.456 1771.64,682.456 1772.2,682.456 1772.76,682.456 1773.32,682.456 1773.88,682.456 1774.43,682.456 1774.99,682.456 1775.55,682.456 1776.11,682.456 1776.67,682.456 1777.23,682.456 1777.79,682.456 1778.35,682.456 1778.91,682.456 1779.47,682.456 1780.03,682.456 1780.59,682.456 1781.15,682.456 1781.71,682.456 1782.26,682.456 1782.82,682.456 1783.38,682.456 1783.94,682.456 1784.5,682.456 1785.06,682.456 1785.62,682.456 1786.18,682.456 1786.74,682.456 1787.3,682.456 1787.86,682.456 1788.42,682.456 1788.98,682.456 1789.53,682.456 1790.09,682.456 1790.65,682.456 1791.21,682.456 1791.77,682.456 1792.33,682.456 1792.89,682.456 1793.45,682.456 1794.01,682.456 1794.57,682.456 1795.13,682.456 1795.69,682.456 1796.25,682.456 1796.8,682.456 1797.36,682.456 1797.92,682.456 1798.48,682.456 1799.04,682.456 1799.6,682.456 1800.16,682.456 1800.72,682.456 1801.28,682.456 1801.84,682.456 1802.4,682.456 1802.96,682.456 1803.52,682.456 1804.08,682.456 1804.63,682.456 1805.19,682.456 1805.75,682.456 1806.31,682.456 1806.87,682.456 1807.43,682.456 1807.99,682.456 1808.55,682.456 1809.11,682.456 1809.67,682.456 1810.23,682.456 1810.79,682.456 1811.35,682.456 1811.9,682.456 1812.46,682.456 1813.02,682.456 1813.58,682.456 1814.14,682.456 1814.7,682.456 1815.26,682.456 1815.82,682.456 1816.38,682.456 1816.94,682.456 1817.5,682.456 1818.06,682.456 1818.62,682.456 1819.18,682.456 1819.73,682.456 1820.29,682.456 1820.85,682.456 1821.41,682.456 1821.97,682.456 1822.53,682.456 1823.09,682.456 1823.65,682.456 1824.21,682.456 1824.77,682.456 1825.33,682.456 1825.89,682.456 1826.45,682.456 1827,682.456 1827.56,682.456 1828.12,682.456 1828.68,682.456 1829.24,682.456 1829.8,682.456 1830.36,682.456 1830.92,682.456 1831.48,682.456 1832.04,682.456 1832.6,682.456 1833.16,682.456 1833.72,682.456 1834.27,682.456 1834.83,682.456 1835.39,682.456 1835.95,682.456 1836.51,682.456 1837.07,682.456 1837.63,682.456 1838.19,682.456 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.02598553083361 ± 0.021961150486084127\nProjected Energy: -4.009404269699356 ± (0.006803681067979461, 0.006643590512400266)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.511655</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.621e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7993e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.508e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.182e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.775e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.415e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133655\n -0.7590191922770906\n  0.13584182219622143\n  0.15789998694607554\n  0.8767114411781307\n  1.5305929970973322\n  1.5835732611867392\n  3.0728703303258547\n  3.1256726539518453\n  4.86210722156217\n  6.260694850380597\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleReducedDensityMatrix\nTwoParticleReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleReducedDensityMatrix\nTwoParticleReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleReducedDensityMatrix","text":"SingleParticleReducedDensityMatrix(i, j) <: AbstractHamiltonian\n\nRepresent a {i,j} element of the single-particle reduced density matrix:\n\nhatρ^(1)_ij = langle psi  hat a^_i hat a_j  psi rangle\n\nwhere i and j are the mode and  psi rangle is the state-ket of the given Hamiltonian.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleReducedDensityMatrix\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleReducedDensityMatrix","text":"TwoParticleReducedDensityMatrix(i, j, k, l) <: AbstractHamiltonian\n\nRepresent a {ij, kl} element of the two-particle reduced density matrix:\n\nhatρ^(2)_ij kl = langle psi  hat a^_i hat a^_j hat a_l hat a_k  psi rangle\n\nwhere i, j, k, and l are the mode and  psi rangle is the state-ket of the given Hamiltonian.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleReducedDensityMatrix\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
