var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21301140104900046 ± 0.0013612593798009325\n   G2(1) = 0.916488674342687 ± 0.0006671344837659554\n   G2(2) = 0.9824352691332561 ± 0.000717127250516859\n   G2(3) = 0.9891407119991121 ± 0.0009156387630268984\n   G2(4) = 0.9824352691332561 ± 0.000717127250516859\n   G2(5) = 0.916488674342687 ± 0.0006671344837659554\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.034101553729631 ± 0.11886831012500126\n   Replica 2: -4.05136532769033 ± 0.14053523736572585\n   Replica 3: -3.9899809464960336 ± 0.1351135379756936\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip340\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip341\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip342\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.18 2211.02,1003.18 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.529 2211.02,745.529 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.876 2211.02,487.876 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.223 2211.02,230.223 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.18 423.181,1003.18 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.529 423.181,745.529 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.876 423.181,487.876 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.223 423.181,230.223 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M290.043 1016.53 L306.363 1016.53 L306.363 1020.46 L284.418 1020.46 L284.418 1016.53 Q287.08 1013.77 291.664 1009.14 Q296.27 1004.49 297.451 1003.15 Q299.696 1000.62 300.576 998.888 Q301.478 997.129 301.478 995.439 Q301.478 992.684 299.534 990.948 Q297.613 989.212 294.511 989.212 Q292.312 989.212 289.858 989.976 Q287.427 990.74 284.65 992.291 L284.65 987.568 Q287.474 986.434 289.927 985.855 Q292.381 985.277 294.418 985.277 Q299.789 985.277 302.983 987.962 Q306.177 990.647 306.177 995.138 Q306.177 997.267 305.367 999.189 Q304.58 1001.09 302.474 1003.68 Q301.895 1004.35 298.793 1007.57 Q295.691 1010.76 290.043 1016.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M316.224 985.902 L334.58 985.902 L334.58 989.837 L320.506 989.837 L320.506 998.309 Q321.524 997.962 322.543 997.8 Q323.562 997.615 324.58 997.615 Q330.367 997.615 333.747 1000.79 Q337.126 1003.96 337.126 1009.37 Q337.126 1014.95 333.654 1018.05 Q330.182 1021.13 323.862 1021.13 Q321.687 1021.13 319.418 1020.76 Q317.173 1020.39 314.765 1019.65 L314.765 1014.95 Q316.849 1016.09 319.071 1016.64 Q321.293 1017.2 323.77 1017.2 Q327.774 1017.2 330.112 1015.09 Q332.45 1012.98 332.45 1009.37 Q332.45 1005.76 330.112 1003.66 Q327.774 1001.55 323.77 1001.55 Q321.895 1001.55 320.02 1001.97 Q318.168 1002.38 316.224 1003.26 L316.224 985.902 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 988.98 Q352.728 988.98 350.899 992.545 Q349.094 996.087 349.094 1003.22 Q349.094 1010.32 350.899 1013.89 Q352.728 1017.43 356.339 1017.43 Q359.973 1017.43 361.779 1013.89 Q363.608 1010.32 363.608 1003.22 Q363.608 996.087 361.779 992.545 Q359.973 988.98 356.339 988.98 M356.339 985.277 Q362.149 985.277 365.205 989.883 Q368.284 994.466 368.284 1003.22 Q368.284 1011.94 365.205 1016.55 Q362.149 1021.13 356.339 1021.13 Q350.529 1021.13 347.45 1016.55 Q344.395 1011.94 344.395 1003.22 Q344.395 994.466 347.45 989.883 Q350.529 985.277 356.339 985.277 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M286.062 728.249 L304.418 728.249 L304.418 732.184 L290.344 732.184 L290.344 740.656 Q291.363 740.309 292.381 740.147 Q293.4 739.962 294.418 739.962 Q300.205 739.962 303.585 743.133 Q306.964 746.304 306.964 751.721 Q306.964 757.3 303.492 760.401 Q300.02 763.48 293.701 763.48 Q291.525 763.48 289.256 763.11 Q287.011 762.739 284.603 761.999 L284.603 757.3 Q286.687 758.434 288.909 758.989 Q291.131 759.545 293.608 759.545 Q297.613 759.545 299.951 757.438 Q302.288 755.332 302.288 751.721 Q302.288 748.11 299.951 746.003 Q297.613 743.897 293.608 743.897 Q291.733 743.897 289.858 744.313 Q288.006 744.73 286.062 745.61 L286.062 728.249 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M326.177 731.327 Q322.566 731.327 320.737 734.892 Q318.932 738.434 318.932 745.563 Q318.932 752.67 320.737 756.235 Q322.566 759.776 326.177 759.776 Q329.811 759.776 331.617 756.235 Q333.446 752.67 333.446 745.563 Q333.446 738.434 331.617 734.892 Q329.811 731.327 326.177 731.327 M326.177 727.624 Q331.987 727.624 335.043 732.23 Q338.122 736.814 338.122 745.563 Q338.122 754.29 335.043 758.897 Q331.987 763.48 326.177 763.48 Q320.367 763.48 317.288 758.897 Q314.233 754.29 314.233 745.563 Q314.233 736.814 317.288 732.23 Q320.367 727.624 326.177 727.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 731.327 Q352.728 731.327 350.899 734.892 Q349.094 738.434 349.094 745.563 Q349.094 752.67 350.899 756.235 Q352.728 759.776 356.339 759.776 Q359.973 759.776 361.779 756.235 Q363.608 752.67 363.608 745.563 Q363.608 738.434 361.779 734.892 Q359.973 731.327 356.339 731.327 M356.339 727.624 Q362.149 727.624 365.205 732.23 Q368.284 736.814 368.284 745.563 Q368.284 754.29 365.205 758.897 Q362.149 763.48 356.339 763.48 Q350.529 763.48 347.45 758.897 Q344.395 754.29 344.395 745.563 Q344.395 736.814 347.45 732.23 Q350.529 727.624 356.339 727.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M284.835 470.596 L307.057 470.596 L307.057 472.587 L294.511 505.156 L289.627 505.156 L301.432 474.531 L284.835 474.531 L284.835 470.596 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M316.224 470.596 L334.58 470.596 L334.58 474.531 L320.506 474.531 L320.506 483.003 Q321.524 482.656 322.543 482.494 Q323.562 482.309 324.58 482.309 Q330.367 482.309 333.747 485.48 Q337.126 488.651 337.126 494.068 Q337.126 499.647 333.654 502.748 Q330.182 505.827 323.862 505.827 Q321.687 505.827 319.418 505.457 Q317.173 505.086 314.765 504.346 L314.765 499.647 Q316.849 500.781 319.071 501.336 Q321.293 501.892 323.77 501.892 Q327.774 501.892 330.112 499.785 Q332.45 497.679 332.45 494.068 Q332.45 490.457 330.112 488.35 Q327.774 486.244 323.77 486.244 Q321.895 486.244 320.02 486.661 Q318.168 487.077 316.224 487.957 L316.224 470.596 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 473.674 Q352.728 473.674 350.899 477.239 Q349.094 480.781 349.094 487.911 Q349.094 495.017 350.899 498.582 Q352.728 502.123 356.339 502.123 Q359.973 502.123 361.779 498.582 Q363.608 495.017 363.608 487.911 Q363.608 480.781 361.779 477.239 Q359.973 473.674 356.339 473.674 M356.339 469.971 Q362.149 469.971 365.205 474.577 Q368.284 479.161 368.284 487.911 Q368.284 496.637 365.205 501.244 Q362.149 505.827 356.339 505.827 Q350.529 505.827 347.45 501.244 Q344.395 496.637 344.395 487.911 Q344.395 479.161 347.45 474.577 Q350.529 469.971 356.339 469.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M256.664 243.568 L264.303 243.568 L264.303 217.202 L255.992 218.869 L255.992 214.61 L264.256 212.943 L268.932 212.943 L268.932 243.568 L276.571 243.568 L276.571 247.503 L256.664 247.503 L256.664 243.568 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M296.015 216.022 Q292.404 216.022 290.576 219.586 Q288.77 223.128 288.77 230.258 Q288.77 237.364 290.576 240.929 Q292.404 244.47 296.015 244.47 Q299.65 244.47 301.455 240.929 Q303.284 237.364 303.284 230.258 Q303.284 223.128 301.455 219.586 Q299.65 216.022 296.015 216.022 M296.015 212.318 Q301.826 212.318 304.881 216.924 Q307.96 221.508 307.96 230.258 Q307.96 238.984 304.881 243.591 Q301.826 248.174 296.015 248.174 Q290.205 248.174 287.127 243.591 Q284.071 238.984 284.071 230.258 Q284.071 221.508 287.127 216.924 Q290.205 212.318 296.015 212.318 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M326.177 216.022 Q322.566 216.022 320.737 219.586 Q318.932 223.128 318.932 230.258 Q318.932 237.364 320.737 240.929 Q322.566 244.47 326.177 244.47 Q329.811 244.47 331.617 240.929 Q333.446 237.364 333.446 230.258 Q333.446 223.128 331.617 219.586 Q329.811 216.022 326.177 216.022 M326.177 212.318 Q331.987 212.318 335.043 216.924 Q338.122 221.508 338.122 230.258 Q338.122 238.984 335.043 243.591 Q331.987 248.174 326.177 248.174 Q320.367 248.174 317.288 243.591 Q314.233 238.984 314.233 230.258 Q314.233 221.508 317.288 216.924 Q320.367 212.318 326.177 212.318 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M356.339 216.022 Q352.728 216.022 350.899 219.586 Q349.094 223.128 349.094 230.258 Q349.094 237.364 350.899 240.929 Q352.728 244.47 356.339 244.47 Q359.973 244.47 361.779 240.929 Q363.608 237.364 363.608 230.258 Q363.608 223.128 361.779 219.586 Q359.973 216.022 356.339 216.022 M356.339 212.318 Q362.149 212.318 365.205 216.924 Q368.284 221.508 368.284 230.258 Q368.284 238.984 365.205 243.591 Q362.149 248.174 356.339 248.174 Q350.529 248.174 347.45 243.591 Q344.395 238.984 344.395 230.258 Q344.395 221.508 347.45 216.924 Q350.529 212.318 356.339 212.318 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip342)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.223 4017.76,230.223 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.82 458.259,1248.51 458.828,1248.14 459.396,1247.72 459.964,1247.21 460.533,1245.6 461.101,1244.97 461.669,1244.26 462.238,1243.44 462.806,1242.57 463.375,1241.6 463.943,1240.53 464.511,1237.31 465.08,1236.07 465.648,1233.68 466.216,1230.15 466.785,1228.61 467.353,1226.95 467.921,1225.12 468.49,1223.15 469.058,1220.03 469.626,1217.83 470.195,1215.47 470.763,1210.9 471.331,1207.28 471.9,1204.54 472.468,1200.53 473.036,1196.38 473.605,1193.12 474.173,1189.72 474.741,1186.12 475.31,1182.33 475.878,1178.27 476.446,1171.91 477.015,1166.33 477.583,1160.55 478.152,1153.64 478.72,1147.44 479.288,1141.05 479.857,1135.48 480.425,1129.79 480.993,1121.69 481.562,1113.51 482.13,1107.19 482.698,1098.65 483.267,1091.87 483.835,1084.99 484.403,1076.82 484.972,1069.45 485.54,1059.91 486.108,1051.35 486.677,1041.47 487.245,1030.48 487.813,1021.36 488.382,1010.15 488.95,1000.95 489.518,991.539 490.087,982.095 490.655,973.658 491.224,964.882 491.792,954.103 492.36,944.146 492.929,935.118 493.497,921.897 494.065,912.832 494.634,902.717 495.202,892.387 495.77,881.017 496.339,867.703 496.907,857.544 497.475,847.467 498.044,838.192 498.612,826.09 499.18,816.951 499.749,808.71 500.317,798.444 500.885,788.173 501.454,774.858 502.022,763.889 502.59,753.009 503.159,744.386 503.727,733.654 504.295,724.029 504.864,714.242 505.432,705.77 506.001,697.327 506.569,689.074 507.137,679.619 507.706,670.133 508.274,659.893 508.842,649.653 509.411,640.915 509.979,633.125 510.547,625.391 511.116,617.757 511.684,610.206 512.252,601.639 512.821,592.057 513.389,581.715 513.957,572.583 514.526,563.776 515.094,556.043 515.662,548.583 516.231,540.005 516.799,534.807 517.367,526.475 517.936,519.26 518.504,510.325 519.072,502.473 519.641,495.992 520.209,488.55 520.778,480.562 521.346,474.721 521.914,468.885 522.483,461.998 523.051,456.205 523.619,449.506 524.188,443.576 524.756,438.169 525.324,432.204 525.893,427.343 526.461,423.434 527.029,419.693 527.598,413.66 528.166,408.193 528.734,406.887 529.303,402.16 529.871,398.723 530.439,395.128 531.008,390.84 531.576,387.51 532.144,383.318 532.713,377.177 533.281,374.374 533.85,369.575 534.418,366.773 534.986,363.005 535.555,358.299 536.123,356.798 536.691,354.346 537.26,349.672 537.828,345.65 538.396,343.485 538.965,339.412 539.533,337.43 540.101,334.437 540.67,332.571 541.238,329.733 541.806,326.931 542.375,323.402 542.943,324.983 543.511,325.223 544.08,325.336 544.648,322.314 545.216,320.036 545.785,318.215 546.353,314.265 546.921,308.428 547.49,304.92 548.058,300.752 548.627,298.783 549.195,297.815 549.763,295.754 550.332,292.936 550.9,291.276 551.468,291.352 552.037,290.581 552.605,288.693 553.173,287 553.742,286.238 554.31,286.662 554.878,284.777 555.447,283.131 556.015,280.277 556.583,280.743 557.152,279.347 557.72,277.683 558.288,275.367 558.857,273.914 559.425,274.612 559.993,275.119 560.562,271.456 561.13,272.238 561.698,270.645 562.267,269.082 562.835,267.92 563.404,265.695 563.972,265.859 564.54,264.55 565.109,265.428 565.677,265.019 566.245,263.876 566.814,261.604 567.382,262.622 567.95,262.208 568.519,260.91 569.087,259.946 569.655,258.922 570.224,259.736 570.792,258.583 571.36,258.714 571.929,258.67 572.497,259.458 573.065,261.125 573.634,260.573 574.202,258.393 574.77,259.113 575.339,257.858 575.907,255.532 576.476,254.491 577.044,254.397 577.612,254.235 578.181,254.286 578.749,255.235 579.317,253.939 579.886,250.661 580.454,249.627 581.022,252.725 581.591,250.716 582.159,248.831 582.727,247.898 583.296,249.118 583.864,247.306 584.432,247.6 585.001,243.723 585.569,244.016 586.137,244.252 586.706,244.428 587.274,246.179 587.842,247.183 588.411,247.351 588.979,248.39 589.547,249.451 590.116,249.331 590.684,249.002 591.253,248.929 591.821,249.702 592.389,249.513 592.958,249.475 593.526,250.283 594.094,251.139 594.663,250.718 595.231,249.342 595.799,249.299 596.368,246.943 596.936,247.827 597.504,245.504 598.073,245.567 598.641,243.553 599.209,242.539 599.778,239.636 600.346,238.988 600.914,239.489 601.483,239.765 602.051,239.11 602.619,238.515 603.188,238.901 603.756,238.207 604.325,237.553 604.893,239.096 605.461,240.44 606.03,240.973 606.598,239.91 607.166,239.132 607.735,239.436 608.303,238.361 608.871,238.648 609.44,239.811 610.008,239.185 610.576,240.5 611.145,240.462 611.713,238.817 612.281,239.149 612.85,240.379 613.418,240.565 613.986,239.723 614.555,240.005 615.123,241.237 615.691,241.317 616.26,241.506 616.828,240.645 617.396,238.596 617.965,237.865 618.533,236.21 619.102,237.812 619.67,240.227 620.238,240.515 620.807,238.608 621.375,237.919 621.943,239.195 622.512,239.349 623.08,239.369 623.648,239.461 624.217,237.459 624.785,237.68 625.353,237.804 625.922,236.773 626.49,236.977 627.058,235.167 627.627,231.334 628.195,231.986 628.763,232.671 629.332,232.17 629.9,232.726 630.468,233.11 631.037,233.473 631.605,234.102 632.173,234.634 632.742,233.001 633.31,231.378 633.879,228.973 634.447,228.999 635.015,229.803 635.584,230.69 636.152,232.539 636.72,234.381 637.289,231.839 637.857,234.357 638.425,236.039 638.994,234.236 639.562,233.48 640.13,235.074 640.699,234.369 641.267,236.063 641.835,236.413 642.404,238.686 642.972,240.904 643.54,242.899 644.109,243.737 644.677,243.616 645.245,243.353 645.814,245.352 646.382,245.08 646.951,244.572 647.519,242.018 648.087,242.624 648.656,242.32 649.224,239.912 649.792,238.76 650.361,238.648 650.929,237.661 651.497,235.634 652.066,235.671 652.634,235.749 653.202,236.997 653.771,237.979 654.339,238.708 654.907,236.286 655.476,235.287 656.044,233.572 656.612,234.73 657.181,236.086 657.749,237.279 658.317,236.105 658.886,239.193 659.454,237.952 660.022,234.734 660.591,234.805 661.159,235.04 661.728,234.302 662.296,235.588 662.864,236.622 663.433,238.861 664.001,236.691 664.569,238.654 665.138,239.391 665.706,238.18 666.274,237.107 666.843,237.169 667.411,237.134 667.979,238.248 668.548,236.908 669.116,236.681 669.684,237.575 670.253,237.354 670.821,236.144 671.389,234.194 671.958,232.506 672.526,232.876 673.094,234.187 673.663,233.376 674.231,232.419 674.799,230.485 675.368,229.793 675.936,229.992 676.505,231.384 677.073,230.808 677.641,233.289 678.21,234.54 678.778,233.584 679.346,234.767 679.915,235.799 680.483,235.683 681.051,235.644 681.62,235.331 682.188,238.312 682.756,237.098 683.325,237.833 683.893,236.352 684.461,236.168 685.03,235.002 685.598,233.973 686.166,235.166 686.735,235.985 687.303,234.745 687.871,238.854 688.44,239.633 689.008,240.417 689.577,239.996 690.145,238.45 690.713,235.952 691.282,237.774 691.85,237.49 692.418,238.282 692.987,237.873 693.555,237.401 694.123,237.113 694.692,236.825 695.26,238.642 695.828,238.186 696.397,235.874 696.965,232.664 697.533,230.371 698.102,229.257 698.67,228.392 699.238,230.85 699.807,230.78 700.375,230.878 700.943,232.145 701.512,232.048 702.08,232.246 702.648,232.378 703.217,232.483 703.785,232.554 704.354,232.694 704.922,232.713 705.49,232.741 706.059,231.824 706.627,233.081 707.195,233.155 707.764,233.081 708.332,233.12 708.9,234.113 709.469,232.941 710.037,234.854 710.605,233.609 711.174,233.379 711.742,234.276 712.31,234.291 712.879,235.277 713.447,235.02 714.015,232.681 714.584,229.413 715.152,225.42 715.72,227.07 716.289,228.325 716.857,229.46 717.425,230.628 717.994,229.758 718.562,229.049 719.131,229.372 719.699,229.761 720.267,228.054 720.836,229.487 721.404,229.689 721.972,229.642 722.541,227.903 723.109,227.128 723.677,228.572 724.246,228.726 724.814,229.022 725.382,230.384 725.951,230.715 726.519,229.941 727.087,231.276 727.656,230.264 728.224,229.387 728.792,229.712 729.361,229.995 729.929,229.034 730.497,231.386 731.066,227.493 731.634,227.978 732.203,228.326 732.771,228.75 733.339,228.078 733.908,228.479 734.476,228.814 735.044,228.892 735.613,229.211 736.181,230.588 736.749,228.96 737.318,228.376 737.886,227.629 738.454,228.175 739.023,229.762 739.591,228.143 740.159,228.472 740.728,227.852 741.296,227.289 741.864,227.617 742.433,226.822 743.001,228.427 743.569,228.875 744.138,229.328 744.706,230.776 745.274,233.137 745.843,235.05 746.411,234.918 746.98,234.664 747.548,232.765 748.116,233.969 748.685,234.976 749.253,234.137 749.821,234.036 750.39,233.752 750.958,232.588 751.526,229.678 752.095,230.092 752.663,230.448 753.231,231.79 753.8,229.914 754.368,231.203 754.936,233.338 755.505,234.397 756.073,235.287 756.641,235.336 757.21,234.23 757.778,234.116 758.346,235.289 758.915,234.135 759.483,235.206 760.052,234.992 760.62,234.632 761.188,234.372 761.757,236.207 762.325,237.007 762.893,237.747 763.462,238.452 764.03,237.172 764.598,232.659 765.167,232.936 765.735,231.918 766.303,230.906 766.872,231.033 767.44,230.216 768.008,231.391 768.577,229.192 769.145,229.333 769.713,229.451 770.282,230.844 770.85,230.924 771.418,232.135 771.987,232.262 772.555,232.402 773.123,234.344 773.692,233.246 774.26,234.123 774.829,234.805 775.397,236.947 775.965,236.459 776.534,235.039 777.102,235.742 777.67,235.581 778.239,235.367 778.807,232.131 779.375,233.16 779.944,233.036 780.512,232.95 781.08,233.819 781.649,232.636 782.217,233.587 782.785,233.524 783.354,233.507 783.922,234.248 784.49,233.227 785.059,232.959 785.627,232.831 786.195,233.653 786.764,234.573 787.332,235.226 787.9,235.927 788.469,234.445 789.037,235.043 789.606,235.803 790.174,236.422 790.742,236.813 791.311,235.424 791.879,234.065 792.447,232.839 793.016,234.597 793.584,234.401 794.152,234.116 794.721,232.889 795.289,230.632 795.857,230.524 796.426,230.567 796.994,230.383 797.562,230.342 798.131,231.211 798.699,231.155 799.267,229.23 799.836,229.418 800.404,229.776 800.972,226.774 801.541,228.023 802.109,228.156 802.678,226.315 803.246,225.53 803.814,227.04 804.383,226.304 804.951,227.902 805.519,229.336 806.088,230.642 806.656,229.591 807.224,227.659 807.793,227.154 808.361,228.383 808.929,230.936 809.498,230.816 810.066,230.802 810.634,230.773 811.203,227.639 811.771,227.999 812.339,228.332 812.908,227.575 813.476,228.932 814.044,229.041 814.613,229.441 815.181,230.385 815.749,230.437 816.318,229.65 816.886,229.884 817.455,230.332 818.023,230.638 818.591,232.793 819.16,230.662 819.728,228.475 820.296,229.867 820.865,230.845 821.433,231.071 822.001,232.283 822.57,230.382 823.138,231.411 823.706,231.496 824.275,232.449 824.843,232.381 825.411,233.418 825.98,232.125 826.548,230.054 827.116,231.142 827.685,231.182 828.253,233.185 828.821,234.177 829.39,232.933 829.958,232.635 830.526,233.4 831.095,234.327 831.663,232.012 832.232,229.004 832.8,228.241 833.368,228.404 833.937,227.81 834.505,227.21 835.073,227.722 835.642,227.122 836.21,229.469 836.778,231.509 837.347,231.674 837.915,232.752 838.483,232.829 839.052,230.488 839.62,230.825 840.188,231.852 840.757,231.889 841.325,233.056 841.893,233.835 842.462,231.644 843.03,231.603 843.598,232.556 844.167,232.574 844.735,231.388 845.304,231.455 845.872,232.626 846.44,231.382 847.009,231.262 847.577,230.186 848.145,231.223 848.714,232.233 849.282,233.155 849.85,231.666 850.419,232.7 850.987,233.73 851.555,232.353 852.124,232.282 852.692,232.063 853.26,231.155 853.829,231.976 854.397,233.808 854.965,231.542 855.534,233.286 856.102,235.094 856.67,234.68 857.239,232.283 857.807,234.193 858.375,232.934 858.944,233.444 859.512,232.236 860.081,231.114 860.649,232.173 861.217,229.974 861.786,229.003 862.354,229.01 862.922,227.988 863.491,228.066 864.059,228.431 864.627,229.791 865.196,228.6 865.764,228.61 866.332,228.727 866.901,225.983 867.469,226.106 868.037,226.51 868.606,226.548 869.174,226.986 869.742,228.221 870.311,228.417 870.879,229.578 871.447,229.586 872.016,229.617 872.584,228.381 873.152,227.447 873.721,230.92 874.289,229.911 874.858,227.965 875.426,226.246 875.994,226.42 876.563,226.777 877.131,226.991 877.699,227.462 878.268,227.652 878.836,229.204 879.404,229.413 879.973,231.736 880.541,228.582 881.109,228.941 881.678,231.183 882.246,231.35 882.814,228.338 883.383,227.296 883.951,227.653 884.519,227.092 885.088,227.468 885.656,226.796 886.224,227.203 886.793,226.446 887.361,224.945 887.93,226.616 888.498,226.181 889.066,224.512 889.635,227.048 890.203,228.429 890.771,228.584 891.34,234.283 891.908,234.153 892.476,232.904 893.045,231.927 893.613,231.068 894.181,233.179 894.75,234.18 895.318,234.001 895.886,232.598 896.455,232.955 897.023,235.11 897.591,234.973 898.16,234.788 898.728,234.544 899.296,233.548 899.865,234.438 900.433,233.199 901.001,234.057 901.57,231.984 902.138,232.925 902.707,233.667 903.275,232.317 903.843,233.427 904.412,234.349 904.98,235.033 905.548,233.501 906.117,232.544 906.685,232.706 907.253,231.333 907.822,233.322 908.39,234.186 908.958,233.028 909.527,231.91 910.095,232.827 910.663,230.663 911.232,231.493 911.8,231.425 912.368,231.223 912.937,232.145 913.505,231.066 914.073,231.073 914.642,229.92 915.21,229.879 915.779,231.075 916.347,233.142 916.915,229.979 917.484,227.88 918.052,227.091 918.62,225.294 919.189,225.769 919.757,225.976 920.325,225.157 920.894,226.477 921.462,223.848 922.03,221.113 922.599,225.787 923.167,228.284 923.735,231.525 924.304,229.391 924.872,230.333 925.44,233.503 926.009,232.452 926.577,234.267 927.145,232.879 927.714,231.65 928.282,233.864 928.85,231.746 929.419,231.736 929.987,230.483 930.556,230.337 931.124,232.329 931.692,232.482 932.261,232.53 932.829,231.566 933.397,230.446 933.966,228.457 934.534,227.463 935.102,230.845 935.671,230.068 936.239,232.059 936.807,236.07 937.376,237.811 937.944,235.225 938.512,234.78 939.081,233.616 939.649,233.35 940.217,234.013 940.786,235.711 941.354,234.598 941.922,236.513 942.491,234.105 943.059,232.717 943.627,232.465 944.196,233.457 944.764,234.357 945.333,235.915 945.901,234.441 946.469,234.271 947.038,234.196 947.606,231.572 948.174,229.434 948.743,230.477 949.311,229.496 949.879,231.452 950.448,231.471 951.016,230.264 951.584,230.021 952.153,231.894 952.721,232.738 953.289,231.544 953.858,232.27 954.426,231.946 954.994,230.73 955.563,231.653 956.131,230.59 956.699,230.444 957.268,233.432 957.836,233.275 958.405,231.805 958.973,232.605 959.541,230.375 960.11,233.577 960.678,232.146 961.246,230.73 961.815,230.651 962.383,229.446 962.951,228.563 963.52,227.843 964.088,227.121 964.656,226.207 965.225,225.532 965.793,224.751 966.361,225.051 966.93,224.553 967.498,224.97 968.066,226.412 968.635,226.762 969.203,227.124 969.771,230.511 970.34,230.52 970.908,228.478 971.476,229.541 972.045,229.68 972.613,229.712 973.182,228.643 973.75,228.814 974.318,229.069 974.887,229.27 975.455,229.276 976.023,229.242 976.592,228.315 977.16,227.689 977.728,225.773 978.297,226.34 978.865,230.876 979.433,230.863 980.002,230.963 980.57,234.284 981.138,234.152 981.707,234.12 982.275,232.945 982.843,234.022 983.412,233.604 983.98,234.457 984.548,233.983 985.117,232.549 985.685,231.44 986.253,233.717 986.822,233.5 987.39,233.301 987.959,232.913 988.527,231.827 989.095,231.734 989.664,231.548 990.232,231.567 990.8,231.217 991.369,231.339 991.937,232.531 992.505,232.44 993.074,232.211 993.642,227.963 994.21,226.066 994.779,225.388 995.347,225.61 995.915,227.018 996.484,228.164 997.052,230.418 997.62,229.442 998.189,228.368 998.757,224.528 999.325,224.975 999.894,224.3 1000.46,222.798 1001.03,222.278 1001.6,223.823 1002.17,223.43 1002.74,226.093 1003.3,228.633 1003.87,226.746 1004.44,227.027 1005.01,229.164 1005.58,227.277 1006.15,227.536 1006.71,226.898 1007.28,228.364 1007.85,228.63 1008.42,225.739 1008.99,227.16 1009.56,226.43 1010.12,229.79 1010.69,230.037 1011.26,232.336 1011.83,234.446 1012.4,232.079 1012.97,232.067 1013.53,234.007 1014.1,232.567 1014.67,233.489 1015.24,234.319 1015.81,235.174 1016.38,234.969 1016.94,234.918 1017.51,235.702 1018.08,235.353 1018.65,234.092 1019.22,233.859 1019.79,232.631 1020.35,233.544 1020.92,232.322 1021.49,230.157 1022.06,229.163 1022.63,230.128 1023.2,232.25 1023.76,231.43 1024.33,228.341 1024.9,228.436 1025.47,229.907 1026.04,226.008 1026.61,225.303 1027.17,224.722 1027.74,225.109 1028.31,227.644 1028.88,229.094 1029.45,229.22 1030.02,229.384 1030.58,228.691 1031.15,228.86 1031.72,230.276 1032.29,231.35 1032.86,231.269 1033.43,229.205 1033.99,229.356 1034.56,231.59 1035.13,230.421 1035.7,231.548 1036.27,233.632 1036.84,233.379 1037.4,233.391 1037.97,230.072 1038.54,231.342 1039.11,232.326 1039.68,231.212 1040.25,230.157 1040.81,229.206 1041.38,230.157 1041.95,230.199 1042.52,230.226 1043.09,229.204 1043.66,230.355 1044.22,229.238 1044.79,230.427 1045.36,231.34 1045.93,230.245 1046.5,228.203 1047.07,231.586 1047.63,231.126 1048.2,232.155 1048.77,232.055 1049.34,231.861 1049.91,232.804 1050.48,232.807 1051.05,231.544 1051.61,232.588 1052.18,231.369 1052.75,235.446 1053.32,234.08 1053.89,233.677 1054.46,231.316 1055.02,231.443 1055.59,231.391 1056.16,232.484 1056.73,233.284 1057.3,233.072 1057.87,231.8 1058.43,232.797 1059,233.559 1059.57,233.229 1060.14,235.06 1060.71,235.964 1061.28,235.685 1061.84,234.218 1062.41,232.901 1062.98,232.641 1063.55,231.277 1064.12,230.218 1064.69,230.287 1065.25,230.415 1065.82,228.264 1066.39,227.367 1066.96,225.582 1067.53,226.814 1068.1,228.106 1068.66,229.329 1069.23,228.235 1069.8,228.555 1070.37,229.681 1070.94,229.684 1071.51,228.837 1072.07,226.841 1072.64,229.228 1073.21,227.06 1073.78,226.122 1074.35,223.521 1074.92,226.12 1075.48,224.468 1076.05,225.205 1076.62,227.698 1077.19,228.797 1077.76,229.926 1078.33,233.173 1078.89,233.934 1079.46,236.001 1080.03,234.641 1080.6,236.407 1081.17,236.967 1081.74,234.512 1082.3,234.215 1082.87,235.876 1083.44,236.619 1084.01,238.359 1084.58,237.934 1085.15,238.463 1085.71,236.678 1086.28,236.256 1086.85,234.636 1087.42,233.235 1087.99,232.078 1088.56,231.752 1089.12,234.518 1089.69,236.176 1090.26,234.629 1090.83,233.148 1091.4,233.892 1091.97,234.409 1092.53,231.007 1093.1,228.742 1093.67,227.75 1094.24,227.761 1094.81,227.927 1095.38,226.13 1095.94,226.386 1096.51,227.502 1097.08,223.709 1097.65,224.022 1098.22,227.2 1098.79,227.354 1099.35,228.114 1099.92,229.006 1100.49,228.07 1101.06,228.346 1101.63,227.638 1102.2,229.775 1102.76,230.01 1103.33,230.08 1103.9,230.969 1104.47,229.043 1105.04,227.09 1105.61,227.253 1106.17,226.44 1106.74,225.623 1107.31,223.821 1107.88,224.357 1108.45,224.802 1109.02,224.972 1109.58,223.249 1110.15,222.825 1110.72,223.264 1111.29,221.735 1111.86,225.515 1112.43,225.045 1112.99,227.551 1113.56,224.669 1114.13,224.046 1114.7,225.782 1115.27,226.173 1115.84,224.545 1116.4,226.029 1116.97,225.087 1117.54,226.408 1118.11,227.827 1118.68,229.08 1119.25,228.305 1119.81,227.636 1120.38,230.081 1120.95,230.08 1121.52,234.271 1122.09,235.059 1122.66,231.893 1123.23,232.883 1123.79,234.989 1124.36,235.726 1124.93,235.538 1125.5,236.131 1126.07,232.79 1126.64,234.895 1127.2,232.531 1127.77,232.377 1128.34,233.342 1128.91,233.241 1129.48,233.24 1130.05,233.951 1130.61,234.744 1131.18,233.482 1131.75,233.433 1132.32,233.063 1132.89,232.989 1133.46,230.627 1134.02,230.781 1134.59,230.58 1135.16,230.654 1135.73,229.348 1136.3,230.663 1136.87,229.609 1137.43,230.513 1138,232.54 1138.57,233.386 1139.14,231.874 1139.71,231.53 1140.28,231.427 1140.84,229.426 1141.41,229.304 1141.98,229.198 1142.55,229.3 1143.12,229.311 1143.69,231.506 1144.25,234.335 1144.82,234.234 1145.39,234.847 1145.96,235.64 1146.53,235.064 1147.1,234.619 1147.66,235.46 1148.23,235.105 1148.8,235.843 1149.37,235.444 1149.94,235.992 1150.51,235.645 1151.07,234.183 1151.64,233.82 1152.21,233.377 1152.78,231.887 1153.35,230.585 1153.92,230.446 1154.48,230.147 1155.05,231.123 1155.62,230.218 1156.19,228.258 1156.76,229.55 1157.33,229.533 1157.89,228.358 1158.46,225.328 1159.03,224.736 1159.6,221.908 1160.17,223.368 1160.74,225.89 1161.3,228.201 1161.87,232.177 1162.44,232.974 1163.01,231.663 1163.58,231.38 1164.15,230.297 1164.71,231.232 1165.28,231.125 1165.85,229.844 1166.42,230.857 1166.99,230.824 1167.56,230.742 1168.12,230.526 1168.69,231.569 1169.26,231.322 1169.83,232.345 1170.4,234.129 1170.97,232.822 1171.53,233.577 1172.1,233.176 1172.67,234.779 1173.24,234.472 1173.81,234.132 1174.38,232.565 1174.94,233.307 1175.51,232.149 1176.08,231.956 1176.65,231.972 1177.22,230.714 1177.79,227.464 1178.35,226.659 1178.92,227.698 1179.49,228.093 1180.06,228.031 1180.63,226.051 1181.2,225.395 1181.76,223.561 1182.33,224.872 1182.9,223.147 1183.47,226.777 1184.04,228.945 1184.61,230.931 1185.17,230.862 1185.74,228.682 1186.31,229.911 1186.88,230.878 1187.45,229.809 1188.02,227.702 1188.58,226.774 1189.15,226.156 1189.72,224.371 1190.29,224.848 1190.86,226.179 1191.43,226.452 1192,225.608 1192.56,228.168 1193.13,227.409 1193.7,225.603 1194.27,226.91 1194.84,227.258 1195.41,226.51 1195.97,225.815 1196.54,227.46 1197.11,226.547 1197.68,228.859 1198.25,229.334 1198.82,228.295 1199.38,232.703 1199.95,231.352 1200.52,229.191 1201.09,229.266 1201.66,229.323 1202.23,229.382 1202.79,227.237 1203.36,228.498 1203.93,228.81 1204.5,229.014 1205.07,229.281 1205.64,228.463 1206.2,226.771 1206.77,226.91 1207.34,227.3 1207.91,227.685 1208.48,227.857 1209.05,228.062 1209.61,229.586 1210.18,231.521 1210.75,229.471 1211.32,231.635 1211.89,231.649 1212.46,231.444 1213.02,232.266 1213.59,233.269 1214.16,234.247 1214.73,232.98 1215.3,231.73 1215.87,232.627 1216.43,231.45 1217,233.333 1217.57,228.065 1218.14,227.102 1218.71,226.576 1219.28,226.047 1219.84,226.417 1220.41,227.053 1220.98,229.256 1221.55,226.293 1222.12,227.74 1222.69,227.245 1223.25,227.375 1223.82,225.699 1224.39,225.035 1224.96,224.279 1225.53,224.912 1226.1,224.429 1226.66,225.899 1227.23,228.459 1227.8,226.646 1228.37,226.054 1228.94,226.626 1229.51,227.091 1230.07,228.596 1230.64,229.823 1231.21,229.233 1231.78,229.606 1232.35,230.913 1232.92,231.644 1233.48,232.672 1234.05,233.654 1234.62,233.59 1235.19,234.561 1235.76,234.51 1236.33,233.297 1236.89,233.175 1237.46,232.27 1238.03,232.489 1238.6,231.41 1239.17,232.66 1239.74,233.529 1240.3,232.51 1240.87,231.122 1241.44,231.118 1242.01,233.275 1242.58,234.374 1243.15,235.114 1243.71,236.61 1244.28,236.199 1244.85,237.653 1245.42,235.039 1245.99,233.696 1246.56,232.495 1247.12,232.597 1247.69,233.74 1248.26,233.532 1248.83,234.483 1249.4,233.16 1249.97,232.091 1250.53,230.959 1251.1,228.965 1251.67,228.081 1252.24,226.171 1252.81,223.354 1253.38,224.864 1253.94,228.39 1254.51,228.375 1255.08,227.467 1255.65,227.499 1256.22,229.542 1256.79,228.5 1257.35,224.492 1257.92,227.835 1258.49,228.952 1259.06,229.178 1259.63,229.265 1260.2,227.429 1260.76,226.521 1261.33,226.986 1261.9,230.555 1262.47,233.516 1263.04,233.315 1263.61,234.22 1264.18,232.007 1264.74,231.879 1265.31,234.061 1265.88,232.805 1266.45,233.742 1267.02,235.613 1267.59,235.354 1268.15,237.055 1268.72,235.458 1269.29,235.19 1269.86,235.951 1270.43,235.509 1271,238.174 1271.56,238.545 1272.13,238.062 1272.7,237.452 1273.27,236.973 1273.84,238.5 1274.41,237.555 1274.97,238.104 1275.54,238.658 1276.11,238.201 1276.68,238.362 1277.25,238.64 1277.82,236.799 1278.38,234.224 1278.95,231.898 1279.52,229.781 1280.09,228.618 1280.66,227.734 1281.23,227.782 1281.79,229.015 1282.36,228.963 1282.93,229.923 1283.5,231.018 1284.07,231.873 1284.64,230.709 1285.2,230.707 1285.77,230.44 1286.34,229.373 1286.91,229.205 1287.48,228.024 1288.05,227.072 1288.61,229.256 1289.18,230.488 1289.75,229.34 1290.32,227.227 1290.89,227.37 1291.46,228.636 1292.02,227.75 1292.59,228.932 1293.16,229.946 1293.73,228.717 1294.3,229.672 1294.87,229.807 1295.43,230.919 1296,232.94 1296.57,230.681 1297.14,230.553 1297.71,230.488 1298.28,231.438 1298.84,232.66 1299.41,233.426 1299.98,232.063 1300.55,232.869 1301.12,230.748 1301.69,231.703 1302.25,231.543 1302.82,231.545 1303.39,233.25 1303.96,232.854 1304.53,231.518 1305.1,231.005 1305.66,230.954 1306.23,229.609 1306.8,229.611 1307.37,230.483 1307.94,230.571 1308.51,230.271 1309.07,230.364 1309.64,230.053 1310.21,231.856 1310.78,230.538 1311.35,230.495 1311.92,230.422 1312.48,230.05 1313.05,229.954 1313.62,229.789 1314.19,228.514 1314.76,228.309 1315.33,228.088 1315.89,226.31 1316.46,226.485 1317.03,225.781 1317.6,225.643 1318.17,224.082 1318.74,225.555 1319.3,223.596 1319.87,227.151 1320.44,227.576 1321.01,226.669 1321.58,229.039 1322.15,228.272 1322.71,228.393 1323.28,229.755 1323.85,228.784 1324.42,231.056 1324.99,230.869 1325.56,230.927 1326.12,231.682 1326.69,231.634 1327.26,231.476 1327.83,231.154 1328.4,232.046 1328.97,230.89 1329.53,231.751 1330.1,228.509 1330.67,227.512 1331.24,228.941 1331.81,229.072 1332.38,230.245 1332.94,231.346 1333.51,229.132 1334.08,230.267 1334.65,229.229 1335.22,228.153 1335.79,228.063 1336.36,228.023 1336.92,229.21 1337.49,231.311 1338.06,231.267 1338.63,232.106 1339.2,231.766 1339.77,232.692 1340.33,232.265 1340.9,231.25 1341.47,229.04 1342.04,231.216 1342.61,231.164 1343.18,230.96 1343.74,228.801 1344.31,229.953 1344.88,228.864 1345.45,229.114 1346.02,229.211 1346.59,230.11 1347.15,228.951 1347.72,230.022 1348.29,229.907 1348.86,231.999 1349.43,232.878 1350,233.482 1350.56,235.201 1351.13,233.575 1351.7,231.146 1352.27,231.061 1352.84,228.824 1353.41,227.804 1353.97,227.931 1354.54,226.207 1355.11,227.462 1355.68,227.815 1356.25,228.638 1356.82,227.03 1357.38,230.443 1357.95,231.392 1358.52,230.282 1359.09,227.349 1359.66,226.699 1360.23,224.986 1360.79,226.352 1361.36,226.756 1361.93,227.055 1362.5,225.244 1363.07,226.729 1363.64,226.944 1364.2,225.993 1364.77,226.484 1365.34,227.707 1365.91,226.741 1366.48,226.94 1367.05,226.151 1367.61,225.358 1368.18,224.785 1368.75,226.312 1369.32,226.857 1369.89,226.175 1370.46,227.462 1371.02,228.697 1371.59,228.014 1372.16,229.365 1372.73,229.688 1373.3,228.726 1373.87,229.913 1374.43,229.95 1375,233.021 1375.57,231.875 1376.14,229.856 1376.71,229.074 1377.28,228.272 1377.84,228.543 1378.41,229.854 1378.98,229.766 1379.55,228.649 1380.12,228.737 1380.69,229.782 1381.25,226.862 1381.82,227.015 1382.39,226.131 1382.96,226.691 1383.53,225.048 1384.1,224.483 1384.66,226.975 1385.23,229.24 1385.8,228.483 1386.37,228.72 1386.94,230.135 1387.51,228.234 1388.07,228.323 1388.64,228.451 1389.21,229.814 1389.78,230.947 1390.35,232.052 1390.92,236.009 1391.48,236.726 1392.05,233.292 1392.62,232.136 1393.19,230.998 1393.76,230.048 1394.33,231.375 1394.89,231.482 1395.46,231.663 1396.03,233.773 1396.6,233.58 1397.17,233.429 1397.74,231.184 1398.3,233.385 1398.87,234.157 1399.44,233.072 1400.01,232.796 1400.58,230.626 1401.15,231.536 1401.71,232.516 1402.28,232.319 1402.85,231.121 1403.42,230.761 1403.99,232.764 1404.56,231.692 1405.13,230.467 1405.69,228.387 1406.26,228.789 1406.83,229.794 1407.4,231.045 1407.97,227.833 1408.54,230.279 1409.1,231.296 1409.67,231.437 1410.24,233.48 1410.81,233.456 1411.38,233.161 1411.95,231.813 1412.51,231.924 1413.08,236.981 1413.65,235.343 1414.22,233.972 1414.79,234.865 1415.36,234.568 1415.92,232.313 1416.49,231.209 1417.06,231.062 1417.63,234.051 1418.2,233.65 1418.77,233.333 1419.33,232.26 1419.9,229.93 1420.47,228.94 1421.04,229.866 1421.61,230.139 1422.18,231.25 1422.74,231.09 1423.31,231.273 1423.88,231.024 1424.45,231.83 1425.02,231.827 1425.59,232.561 1426.15,233.289 1426.72,234.12 1427.29,230.859 1427.86,230.779 1428.43,231.759 1429,230.563 1429.56,231.478 1430.13,232.336 1430.7,232.926 1431.27,234.847 1431.84,234.655 1432.41,235.264 1432.97,235.821 1433.54,234.179 1434.11,233.921 1434.68,234.976 1435.25,233.496 1435.82,234.004 1436.38,230.864 1436.95,231.757 1437.52,229.238 1438.09,229.264 1438.66,229.247 1439.23,230.077 1439.79,231.146 1440.36,232.96 1440.93,230.57 1441.5,230.49 1442.07,230.302 1442.64,230.145 1443.2,233.506 1443.77,234.1 1444.34,232.957 1444.91,231.702 1445.48,232.558 1446.05,236.422 1446.61,235.803 1447.18,234.263 1447.75,235.738 1448.32,235.167 1448.89,234.745 1449.46,232.46 1450.02,231.272 1450.59,232.004 1451.16,231.69 1451.73,234.667 1452.3,234.277 1452.87,235.821 1453.43,235.316 1454,234.561 1454.57,235.17 1455.14,233.528 1455.71,234.191 1456.28,236.901 1456.84,237.232 1457.41,238.394 1457.98,237.638 1458.55,235.706 1459.12,234.023 1459.69,232.498 1460.25,233.175 1460.82,230.609 1461.39,230.971 1461.96,232.792 1462.53,231.514 1463.1,231.456 1463.66,229.11 1464.23,228.006 1464.8,227.932 1465.37,227.769 1465.94,227.629 1466.51,227.425 1467.07,227.484 1467.64,225.578 1468.21,225.867 1468.78,225.056 1469.35,223.274 1469.92,224.528 1470.48,224.716 1471.05,223.625 1471.62,221.796 1472.19,220.267 1472.76,220.893 1473.33,221.595 1473.89,219.909 1474.46,220.575 1475.03,220.106 1475.6,220.592 1476.17,222.118 1476.74,221.668 1477.31,223.988 1477.87,223.343 1478.44,223.938 1479.01,222.481 1479.58,225.934 1480.15,226.308 1480.72,226.588 1481.28,226.895 1481.85,226.266 1482.42,228.455 1482.99,226.489 1483.56,226.648 1484.13,226.853 1484.69,227.283 1485.26,228.725 1485.83,230.018 1486.4,231.971 1486.97,232.701 1487.54,232.654 1488.1,230.378 1488.67,228.511 1489.24,228.682 1489.81,229.698 1490.38,229.857 1490.95,229.984 1491.51,229.877 1492.08,230.812 1492.65,227.503 1493.22,227.851 1493.79,227.329 1494.36,228.72 1494.92,228.061 1495.49,229.176 1496.06,228.08 1496.63,229.41 1497.2,229.43 1497.77,228.509 1498.33,228.794 1498.9,228.898 1499.47,229.007 1500.04,229.125 1500.61,230.452 1501.18,230.398 1501.74,229.596 1502.31,229.671 1502.88,229.845 1503.45,230.87 1504.02,230.877 1504.59,229.814 1505.15,226.904 1505.72,229.333 1506.29,230.641 1506.86,229.484 1507.43,229.775 1508,231.883 1508.56,230.76 1509.13,230.754 1509.7,230.874 1510.27,230.864 1510.84,228.62 1511.41,228.844 1511.97,230.985 1512.54,230.043 1513.11,231.108 1513.68,232.803 1514.25,232.579 1514.82,233.326 1515.38,232.919 1515.95,231.848 1516.52,231.719 1517.09,231.494 1517.66,231.432 1518.23,230.469 1518.79,230.363 1519.36,230.357 1519.93,230.312 1520.5,229.431 1521.07,226.415 1521.64,227.734 1522.2,224.622 1522.77,222.078 1523.34,222.771 1523.91,223.425 1524.48,224.049 1525.05,224.355 1525.61,224.888 1526.18,225.188 1526.75,227.889 1527.32,228.009 1527.89,228.096 1528.46,230.429 1529.02,228.52 1529.59,228.84 1530.16,227.908 1530.73,226.129 1531.3,224.308 1531.87,224.971 1532.43,226.536 1533,228.055 1533.57,228.292 1534.14,226.419 1534.71,227.743 1535.28,229.062 1535.84,229.32 1536.41,232.625 1536.98,232.522 1537.55,231.532 1538.12,230.767 1538.69,231.98 1539.25,232.249 1539.82,230.309 1540.39,229.376 1540.96,231.491 1541.53,231.334 1542.1,232.326 1542.66,232.36 1543.23,231.267 1543.8,232.165 1544.37,232.029 1544.94,231.035 1545.51,229.14 1546.08,228.364 1546.64,228.58 1547.21,228.977 1547.78,231.245 1548.35,232.136 1548.92,231.94 1549.49,230.934 1550.05,235.178 1550.62,236.784 1551.19,238.375 1551.76,235.979 1552.33,237.812 1552.9,237.324 1553.46,237.092 1554.03,238.088 1554.6,238.503 1555.17,239.025 1555.74,238.395 1556.31,235.624 1556.87,234.203 1557.44,234.844 1558.01,235.369 1558.58,232.822 1559.15,233.487 1559.72,232.243 1560.28,233.277 1560.85,232.013 1561.42,235.201 1561.99,236.847 1562.56,235.023 1563.13,234.571 1563.69,231.929 1564.26,231.777 1564.83,229.651 1565.4,229.41 1565.97,228.312 1566.54,227.613 1567.1,227.86 1567.67,229.233 1568.24,229.591 1568.81,231.544 1569.38,232.624 1569.95,232.332 1570.51,233.339 1571.08,233.954 1571.65,233.391 1572.22,232.967 1572.79,233.583 1573.36,234.426 1573.92,233.049 1574.49,234.804 1575.06,232.418 1575.63,231.113 1576.2,231.083 1576.77,232.996 1577.33,232.741 1577.9,232.633 1578.47,234.597 1579.04,234.024 1579.61,232.511 1580.18,233.067 1580.74,230.684 1581.31,229.346 1581.88,228.574 1582.45,227.622 1583.02,225.431 1583.59,224.42 1584.15,222.541 1584.72,223.028 1585.29,222.358 1585.86,220.656 1586.43,220.498 1587,222.055 1587.56,222.723 1588.13,225.288 1588.7,226.569 1589.27,227.04 1589.84,226.29 1590.41,227.357 1590.97,228.673 1591.54,231.632 1592.11,232.746 1592.68,232.326 1593.25,233.03 1593.82,233.844 1594.38,232.659 1594.95,232.41 1595.52,232.455 1596.09,230.307 1596.66,229.205 1597.23,226.182 1597.79,227.454 1598.36,227.644 1598.93,227.74 1599.5,227.847 1600.07,228.885 1600.64,227.778 1601.2,226.562 1601.77,226.79 1602.34,229.207 1602.91,230.278 1603.48,230.259 1604.05,230.467 1604.61,230.432 1605.18,230.485 1605.75,230.608 1606.32,230.771 1606.89,230.64 1607.46,228.528 1608.02,227.885 1608.59,226.92 1609.16,226.973 1609.73,226.039 1610.3,226.445 1610.87,227.975 1611.43,229.083 1612,228.115 1612.57,231.509 1613.14,231.517 1613.71,231.636 1614.28,230.835 1614.84,229.847 1615.41,230.032 1615.98,231.058 1616.55,230.933 1617.12,231.941 1617.69,230.643 1618.26,230.672 1618.82,230.751 1619.39,228.622 1619.96,226.641 1620.53,227.007 1621.1,226.35 1621.67,226.815 1622.23,225.877 1622.8,226.248 1623.37,227.882 1623.94,226.209 1624.51,228.512 1625.08,229.72 1625.64,230.886 1626.21,231.848 1626.78,231.822 1627.35,232.801 1627.92,233.917 1628.49,234.592 1629.05,235.579 1629.62,235.583 1630.19,234.225 1630.76,232.743 1631.33,231.672 1631.9,228.693 1632.46,228.9 1633.03,228.994 1633.6,227.985 1634.17,229.129 1634.74,228.233 1635.31,227.344 1635.87,227.472 1636.44,226.834 1637.01,228.383 1637.58,226.534 1638.15,227.715 1638.72,229.122 1639.28,230.232 1639.85,231.544 1640.42,229.575 1640.99,228.769 1641.56,228.926 1642.13,228.044 1642.69,227.244 1643.26,226.535 1643.83,225.886 1644.4,227.304 1644.97,227.777 1645.54,227.943 1646.1,228.153 1646.67,225.28 1647.24,224.481 1647.81,223.878 1648.38,228.888 1648.95,228.976 1649.51,228.986 1650.08,228.1 1650.65,228.547 1651.22,227.847 1651.79,228.263 1652.36,229.571 1652.92,230.853 1653.49,230.911 1654.06,232.077 1654.63,231.956 1655.2,232.108 1655.77,229.933 1656.33,232.467 1656.9,233.429 1657.47,230.359 1658.04,229.522 1658.61,229.488 1659.18,226.684 1659.74,228.082 1660.31,227.426 1660.88,227.863 1661.45,228.169 1662.02,226.216 1662.59,226.571 1663.15,227.695 1663.72,229.239 1664.29,229.455 1664.86,229.675 1665.43,230.887 1666,234.875 1666.56,235.682 1667.13,233.317 1667.7,235.124 1668.27,237.874 1668.84,236.132 1669.41,235.749 1669.97,236.53 1670.54,235.155 1671.11,233.773 1671.68,232.605 1672.25,233.606 1672.82,233.391 1673.38,233.155 1673.95,233.986 1674.52,230.662 1675.09,231.813 1675.66,230.781 1676.23,231.827 1676.79,231.659 1677.36,230.603 1677.93,232.907 1678.5,235.975 1679.07,235.573 1679.64,232.917 1680.2,234.828 1680.77,235.334 1681.34,234.995 1681.91,234.68 1682.48,235.519 1683.05,236.072 1683.61,234.631 1684.18,230.216 1684.75,230.248 1685.32,231.987 1685.89,233.84 1686.46,232.561 1687.02,233.402 1687.59,235.218 1688.16,235.682 1688.73,235.338 1689.3,234.871 1689.87,235.43 1690.44,233.901 1691,233.544 1691.57,234.332 1692.14,235.813 1692.71,238.299 1693.28,238.638 1693.85,236.759 1694.41,237.514 1694.98,237.674 1695.55,237.814 1696.12,235.98 1696.69,234.407 1697.26,234.017 1697.82,234.623 1698.39,234.037 1698.96,234.683 1699.53,234.039 1700.1,231.632 1700.67,230.241 1701.23,231.301 1701.8,230.206 1702.37,229.887 1702.94,229.719 1703.51,229.549 1704.08,230.339 1704.64,231.208 1705.21,234.144 1705.78,233.67 1706.35,233.239 1706.92,231.828 1707.49,231.506 1708.05,232.37 1708.62,230.909 1709.19,228.523 1709.76,227.42 1710.33,229.82 1710.9,229.46 1711.46,229.401 1712.03,230.394 1712.6,232.157 1713.17,232.019 1713.74,233.846 1714.31,232.473 1714.87,232.074 1715.44,235.894 1716.01,235.243 1716.58,234.663 1717.15,234.222 1717.72,231.681 1718.28,231.38 1718.85,229.232 1719.42,226.891 1719.99,226.809 1720.56,225.979 1721.13,224.05 1721.69,224.176 1722.26,224.644 1722.83,223.922 1723.4,224.234 1723.97,225.573 1724.54,224.595 1725.1,225.877 1725.67,224.882 1726.24,226.076 1726.81,226.172 1727.38,227.159 1727.95,227.282 1728.51,224.284 1729.08,223.588 1729.65,223.871 1730.22,226.113 1730.79,226.491 1731.36,227.626 1731.92,227.914 1732.49,227.94 1733.06,229.224 1733.63,229.211 1734.2,228.163 1734.77,225.348 1735.33,225.59 1735.9,225.712 1736.47,228.04 1737.04,227.21 1737.61,228.248 1738.18,228.469 1738.74,228.536 1739.31,228.557 1739.88,227.642 1740.45,228.574 1741.02,226.687 1741.59,227.935 1742.15,229.139 1742.72,230.214 1743.29,230.41 1743.86,228.348 1744.43,227.502 1745,228.63 1745.56,228.753 1746.13,229.971 1746.7,227.81 1747.27,228.94 1747.84,227.783 1748.41,227.97 1748.97,228.115 1749.54,230.216 1750.11,230.15 1750.68,231.126 1751.25,232.247 1751.82,231.149 1752.38,231.164 1752.95,230.027 1753.52,230.114 1754.09,229.962 1754.66,230.06 1755.23,231.036 1755.79,229.845 1756.36,227.869 1756.93,226.048 1757.5,227.491 1758.07,229.907 1758.64,228.018 1759.21,226.172 1759.77,227.438 1760.34,227.623 1760.91,228.012 1761.48,228.083 1762.05,227.131 1762.62,227.405 1763.18,226.778 1763.75,225.839 1764.32,227.114 1764.89,226.378 1765.46,226.765 1766.03,228.998 1766.59,227.037 1767.16,226.128 1767.73,224.401 1768.3,222.869 1768.87,223.568 1769.44,219.895 1770,222.798 1770.57,223.448 1771.14,224.86 1771.71,225.343 1772.28,224.822 1772.85,227.102 1773.41,227.457 1773.98,228.903 1774.55,228.993 1775.12,227.196 1775.69,225.598 1776.26,225.868 1776.82,227.395 1777.39,226.833 1777.96,228.359 1778.53,227.53 1779.1,230.964 1779.67,232.211 1780.23,232.051 1780.8,232.961 1781.37,231.696 1781.94,230.669 1782.51,231.663 1783.08,231.496 1783.64,232.721 1784.21,234.642 1784.78,232.515 1785.35,231.313 1785.92,231.32 1786.49,234.418 1787.05,235.344 1787.62,234.124 1788.19,234.877 1788.76,234.761 1789.33,233.473 1789.9,232.301 1790.46,231.156 1791.03,229.906 1791.6,227.903 1792.17,227.006 1792.74,229.697 1793.31,231.913 1793.87,231.718 1794.44,229.719 1795.01,229.94 1795.58,230.223 1796.15,230.172 1796.72,230.112 1797.28,231.286 1797.85,229.083 1798.42,229.305 1798.99,228.329 1799.56,229.597 1800.13,230.736 1800.69,229.827 1801.26,229.078 1801.83,230.22 1802.4,230.341 1802.97,230.593 1803.54,232.508 1804.1,232.246 1804.67,233.109 1805.24,232.874 1805.81,230.736 1806.38,230.711 1806.95,231.728 1807.51,231.46 1808.08,230.479 1808.65,230.678 1809.22,230.592 1809.79,229.714 1810.36,230.034 1810.92,231.065 1811.49,231.859 1812.06,234.907 1812.63,235.899 1813.2,236.628 1813.77,236.061 1814.33,236.682 1814.9,234.279 1815.47,233.958 1816.04,232.687 1816.61,233.734 1817.18,232.68 1817.74,231.546 1818.31,232.478 1818.88,232.436 1819.45,231.377 1820.02,232.208 1820.59,232.972 1821.15,234.184 1821.72,234.788 1822.29,233.256 1822.86,232.027 1823.43,229.942 1824,230.895 1824.56,228.926 1825.13,231.074 1825.7,231.229 1826.27,232.147 1826.84,230.933 1827.41,229.933 1827.97,228.786 1828.54,227.971 1829.11,226.988 1829.68,229.243 1830.25,230.442 1830.82,229.586 1831.39,230.774 1831.95,230.791 1832.52,231.735 1833.09,230.652 1833.66,231.752 1834.23,232.69 1834.8,232.578 1835.36,232.378 1835.93,232.094 1836.5,231.069 1837.07,233.044 1837.64,232.86 1838.21,232.647 1838.77,232.709 1839.34,233.356 1839.91,234.222 1840.48,232.838 1841.05,232.767 1841.62,231.29 1842.18,230.219 1842.75,231.278 1843.32,231.266 1843.89,229.416 1844.46,228.335 1845.03,229.495 1845.59,228.394 1846.16,227.301 1846.73,229.537 1847.3,228.3 1847.87,227.585 1848.44,227.652 1849,228.668 1849.57,228.742 1850.14,226.754 1850.71,226.979 1851.28,225.049 1851.85,224.354 1852.41,224.696 1852.98,226.054 1853.55,226.251 1854.12,225.617 1854.69,226.062 1855.26,228.313 1855.82,227.462 1856.39,226.573 1856.96,225.857 1857.53,227.336 1858.1,227.611 1858.67,229.037 1859.23,229.031 1859.8,228.098 1860.37,229.167 1860.94,229.534 1861.51,228.56 1862.08,228.824 1862.64,231.239 1863.21,232.285 1863.78,230.354 1864.35,230.41 1864.92,229.57 1865.49,229.691 1866.05,232.883 1866.62,230.555 1867.19,232.412 1867.76,232.443 1868.33,232.304 1868.9,232.341 1869.46,231.318 1870.03,231.236 1870.6,232.49 1871.17,231.166 1871.74,230.033 1872.31,230.135 1872.87,230.181 1873.44,230.143 1874.01,230.304 1874.58,230.386 1875.15,230.55 1875.72,232.479 1876.28,232.286 1876.85,232.255 1877.42,233.305 1877.99,233.005 1878.56,233.734 1879.13,235.824 1879.69,233.351 1880.26,233.016 1880.83,234.861 1881.4,234.417 1881.97,236.14 1882.54,235.798 1883.1,237.231 1883.67,239.752 1884.24,236.977 1884.81,235.323 1885.38,232.778 1885.95,229.66 1886.51,231.525 1887.08,231.458 1887.65,231.191 1888.22,233.018 1888.79,230.744 1889.36,228.665 1889.92,230.808 1890.49,230.448 1891.06,230.271 1891.63,230.569 1892.2,231.277 1892.77,229.239 1893.33,229.25 1893.9,229.158 1894.47,230.12 1895.04,229.959 1895.61,229.951 1896.18,229.016 1896.74,229.88 1897.31,231.771 1897.88,231.577 1898.45,232.437 1899.02,232.147 1899.59,230.703 1900.16,230.646 1900.72,230.385 1901.29,229.111 1901.86,229.063 1902.43,229 1903,230.277 1903.57,232.191 1904.13,232.162 1904.7,231.991 1905.27,229.66 1905.84,228.349 1906.41,228.315 1906.98,227.31 1907.54,226.312 1908.11,227.529 1908.68,226.617 1909.25,225.895 1909.82,223.049 1910.39,220.346 1910.95,220.94 1911.52,221.486 1912.09,222.202 1912.66,220.863 1913.23,221.575 1913.8,223.166 1914.36,223.788 1914.93,225.149 1915.5,225.358 1916.07,224.65 1916.64,227.198 1917.21,227.222 1917.77,227.434 1918.34,227.614 1918.91,227.809 1919.48,228.137 1920.05,228.485 1920.62,229.575 1921.18,230.653 1921.75,231.813 1922.32,231.862 1922.89,228.774 1923.46,229.954 1924.03,230.145 1924.59,228.22 1925.16,229.366 1925.73,230.535 1926.3,231.806 1926.87,232.764 1927.44,232.769 1928,231.68 1928.57,231.883 1929.14,231.996 1929.71,233.128 1930.28,234.216 1930.85,238.171 1931.41,234.447 1931.98,233.311 1932.55,234.237 1933.12,233.175 1933.69,231.943 1934.26,231.938 1934.82,228.865 1935.39,229.192 1935.96,230.531 1936.53,230.262 1937.1,229.376 1937.67,230.363 1938.23,230.434 1938.8,231.587 1939.37,230.416 1939.94,231.406 1940.51,230.422 1941.08,230.625 1941.64,232.694 1942.21,232.853 1942.78,234.702 1943.35,234.444 1943.92,235.169 1944.49,231.942 1945.05,231.739 1945.62,230.532 1946.19,230.334 1946.76,229.249 1947.33,230.133 1947.9,228.087 1948.46,228.237 1949.03,228.611 1949.6,228.777 1950.17,228.967 1950.74,226.807 1951.31,224.967 1951.87,227.576 1952.44,225.983 1953.01,226.389 1953.58,228.6 1954.15,230.826 1954.72,229.862 1955.28,228.892 1955.85,229.979 1956.42,232.204 1956.99,232.159 1957.56,232.187 1958.13,228.915 1958.69,231.136 1959.26,230.047 1959.83,229.179 1960.4,229.277 1960.97,229.266 1961.54,230.233 1962.1,232.326 1962.67,232.244 1963.24,232.956 1963.81,230.814 1964.38,231.838 1964.95,233.634 1965.51,228.329 1966.08,229.508 1966.65,230.72 1967.22,230.81 1967.79,231.73 1968.36,232.691 1968.92,234.822 1969.49,234.476 1970.06,235.236 1970.63,233.978 1971.2,234.678 1971.77,235.571 1972.34,235.417 1972.9,235.243 1973.47,233.938 1974.04,235.335 1974.61,234.833 1975.18,234.622 1975.75,232.236 1976.31,231.233 1976.88,232.191 1977.45,231.938 1978.02,232.861 1978.59,230.459 1979.16,229.461 1979.72,228.535 1980.29,228.614 1980.86,228.933 1981.43,227.958 1982,228.245 1982.57,227.131 1983.13,225.919 1983.7,227.359 1984.27,224.348 1984.84,224.662 1985.41,225.937 1985.98,228.428 1986.54,228.628 1987.11,228.727 1987.68,227.622 1988.25,227.779 1988.82,225.808 1989.39,228.181 1989.95,227.578 1990.52,228.615 1991.09,229.571 1991.66,226.565 1992.23,226.826 1992.8,227.301 1993.36,226.418 1993.93,226.584 1994.5,227.78 1995.07,228.036 1995.64,229.286 1996.21,229.425 1996.77,229.425 1997.34,231.552 1997.91,233.694 1998.48,235.715 1999.05,235.342 1999.62,237.023 2000.18,234.576 2000.75,233.279 2001.32,229.058 2001.89,228.267 2002.46,229.582 2003.03,227.568 2003.59,230.955 2004.16,228.763 2004.73,226.772 2005.3,228.121 2005.87,227.092 2006.44,228.372 2007,228.188 2007.57,228.442 2008.14,226.502 2008.71,227.94 2009.28,230.204 2009.85,228.332 2010.41,227.462 2010.98,226.692 2011.55,227.111 2012.12,227.446 2012.69,226.644 2013.26,228.145 2013.82,230.134 2014.39,230.208 2014.96,230.399 2015.53,231.437 2016.1,231.507 2016.67,229.25 2017.23,228.181 2017.8,229.323 2018.37,228.492 2018.94,229.545 2019.51,229.785 2020.08,229.664 2020.64,229.652 2021.21,228.843 2021.78,229.839 2022.35,229.919 2022.92,227.887 2023.49,228.316 2024.05,230.387 2024.62,231.153 2025.19,229.865 2025.76,228.836 2026.33,225.957 2026.9,224.283 2027.46,226.137 2028.03,225.618 2028.6,226.036 2029.17,225.126 2029.74,227.735 2030.31,225.918 2030.87,225.422 2031.44,222.557 2032.01,222.981 2032.58,224.635 2033.15,225.329 2033.72,226.107 2034.28,224.529 2034.85,223.052 2035.42,222.747 2035.99,225.251 2036.56,226.864 2037.13,230.381 2037.69,232.855 2038.26,232.865 2038.83,233.716 2039.4,233.655 2039.97,232.477 2040.54,231.672 2041.11,234.132 2041.67,233.859 2042.24,234.797 2042.81,236.667 2043.38,236.48 2043.95,238.433 2044.52,237.771 2045.08,239.646 2045.65,240.149 2046.22,238.568 2046.79,240.059 2047.36,239.465 2047.93,236.772 2048.49,235.375 2049.06,234.166 2049.63,231.861 2050.2,231.743 2050.77,229.557 2051.34,232.985 2051.9,235.872 2052.47,234.195 2053.04,235.036 2053.61,236.717 2054.18,236.085 2054.75,235.776 2055.31,235.441 2055.88,235.241 2056.45,235.022 2057.02,233.83 2057.59,232.644 2058.16,233.275 2058.72,233.175 2059.29,234.93 2059.86,232.495 2060.43,230.146 2061,230.927 2061.57,232.895 2062.13,233.582 2062.7,235.473 2063.27,237.003 2063.84,236.407 2064.41,235.968 2064.98,234.436 2065.54,236.159 2066.11,234.656 2066.68,235.523 2067.25,233.114 2067.82,231.938 2068.39,230.77 2068.95,229.741 2069.52,230.682 2070.09,232.713 2070.66,234.543 2071.23,232.947 2071.8,232.689 2072.36,233.603 2072.93,235.4 2073.5,235.787 2074.07,233.334 2074.64,232.006 2075.21,231.964 2075.77,230.522 2076.34,232.356 2076.91,231.003 2077.48,232.84 2078.05,232.391 2078.62,230.903 2079.18,229.652 2079.75,230.308 2080.32,232.262 2080.89,233.202 2081.46,231.11 2082.03,229.046 2082.59,227.55 2083.16,226.574 2083.73,226.702 2084.3,227.591 2084.87,225.536 2085.44,226.732 2086,228.77 2086.57,228.496 2087.14,226.583 2087.71,226.637 2088.28,227.755 2088.85,227.969 2089.41,228.042 2089.98,230.216 2090.55,229.998 2091.12,228.947 2091.69,230.2 2092.26,230.896 2092.82,231.834 2093.39,232.575 2093.96,231.485 2094.53,232.347 2095.1,231.998 2095.67,232.908 2096.23,233.699 2096.8,234.339 2097.37,234.956 2097.94,233.368 2098.51,229.762 2099.08,229.719 2099.64,225.457 2100.21,227.798 2100.78,229.11 2101.35,228.348 2101.92,226.39 2102.49,227.293 2103.05,228.244 2103.62,226.339 2104.19,226.409 2104.76,224.506 2105.33,223.827 2105.9,224.325 2106.46,225.663 2107.03,225.817 2107.6,227.248 2108.17,228.433 2108.74,226.613 2109.31,225.631 2109.87,225.97 2110.44,226.321 2111.01,226.597 2111.58,228.933 2112.15,227.088 2112.72,227.337 2113.29,227.503 2113.85,226.661 2114.42,223.928 2114.99,223.306 2115.56,225.748 2116.13,227.306 2116.7,226.331 2117.26,227.566 2117.83,227.533 2118.4,228.596 2118.97,228.645 2119.54,227.779 2120.11,226.934 2120.67,230.226 2121.24,232.263 2121.81,231.243 2122.38,232.44 2122.95,232.177 2123.52,232.929 2124.08,231.536 2124.65,232.401 2125.22,233.235 2125.79,232.997 2126.36,233.834 2126.93,232.584 2127.49,233.403 2128.06,234.423 2128.63,233.037 2129.2,235.035 2129.77,234.614 2130.34,232.273 2130.9,232.204 2131.47,231.981 2132.04,231.785 2132.61,232.592 2133.18,233.284 2133.75,231.034 2134.31,229.867 2134.88,231.01 2135.45,230.64 2136.02,230.594 2136.59,229.483 2137.16,231.686 2137.72,231.516 2138.29,231.26 2138.86,229.991 2139.43,228.812 2140,227.763 2140.57,228.038 2141.13,228.004 2141.7,226.8 2142.27,226.906 2142.84,229.187 2143.41,227.351 2143.98,226.545 2144.54,224.741 2145.11,225.396 2145.68,226.713 2146.25,224.696 2146.82,225.975 2147.39,226.509 2147.95,224.67 2148.52,225.929 2149.09,225.072 2149.66,223.492 2150.23,225.166 2150.8,224.563 2151.36,228.006 2151.93,227.233 2152.5,223.447 2153.07,226.224 2153.64,226.526 2154.21,225.714 2154.77,226.196 2155.34,226.599 2155.91,224.83 2156.48,226.21 2157.05,225.548 2157.62,228.046 2158.18,226.252 2158.75,227.776 2159.32,228.219 2159.89,228.534 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.025\n  with uncertainty of ± 0.0022191124239738214\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0141 ± (0.00175177, 0.00173626) (MC)\n  95% confidence interval: [-4.01751, -4.01057]) (MC)\n  linear error propagation: -4.01422 ± 0.00176409\n  |δ_y| = |0.00153465| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014096368786754, val_l = 0.0034108317802648003, val_u = 0.0035289984791022633)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip370\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip371\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip372\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.21 2211.02,1147.21 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,981.003 2211.02,981.003 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,814.792 2211.02,814.792 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,648.581 2211.02,648.581 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,482.37 2211.02,482.37 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,316.159 2211.02,316.159 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.21 365.751,1147.21 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,981.003 365.751,981.003 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,814.792 365.751,814.792 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,648.581 365.751,648.581 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,482.37 365.751,482.37 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,316.159 365.751,316.159 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M298.909 1133.01 Q295.298 1133.01 293.469 1136.58 Q291.664 1140.12 291.664 1147.25 Q291.664 1154.36 293.469 1157.92 Q295.298 1161.46 298.909 1161.46 Q302.543 1161.46 304.349 1157.92 Q306.177 1154.36 306.177 1147.25 Q306.177 1140.12 304.349 1136.58 Q302.543 1133.01 298.909 1133.01 M298.909 1129.31 Q304.719 1129.31 307.775 1133.92 Q310.853 1138.5 310.853 1147.25 Q310.853 1155.98 307.775 1160.58 Q304.719 1165.17 298.909 1165.17 Q293.099 1165.17 290.02 1160.58 Q286.964 1155.98 286.964 1147.25 Q286.964 1138.5 290.02 1133.92 Q293.099 1129.31 298.909 1129.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M259.557 994.348 L267.196 994.348 L267.196 967.982 L258.886 969.649 L258.886 965.39 L267.15 963.723 L271.826 963.723 L271.826 994.348 L279.465 994.348 L279.465 998.283 L259.557 998.283 L259.557 994.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 966.802 Q295.298 966.802 293.469 970.367 Q291.664 973.908 291.664 981.038 Q291.664 988.144 293.469 991.709 Q295.298 995.251 298.909 995.251 Q302.543 995.251 304.349 991.709 Q306.177 988.144 306.177 981.038 Q306.177 973.908 304.349 970.367 Q302.543 966.802 298.909 966.802 M298.909 963.098 Q304.719 963.098 307.775 967.705 Q310.853 972.288 310.853 981.038 Q310.853 989.765 307.775 994.371 Q304.719 998.954 298.909 998.954 Q293.099 998.954 290.02 994.371 Q286.964 989.765 286.964 981.038 Q286.964 972.288 290.02 967.705 Q293.099 963.098 298.909 963.098 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M262.775 828.137 L279.094 828.137 L279.094 832.072 L257.15 832.072 L257.15 828.137 Q259.812 825.382 264.395 820.753 Q269.002 816.1 270.182 814.757 Q272.428 812.234 273.307 810.498 Q274.21 808.739 274.21 807.049 Q274.21 804.294 272.266 802.558 Q270.344 800.822 267.242 800.822 Q265.043 800.822 262.59 801.586 Q260.159 802.35 257.381 803.901 L257.381 799.179 Q260.205 798.045 262.659 797.466 Q265.113 796.887 267.15 796.887 Q272.52 796.887 275.715 799.572 Q278.909 802.257 278.909 806.748 Q278.909 808.878 278.099 810.799 Q277.312 812.697 275.205 815.29 Q274.627 815.961 271.525 819.179 Q268.423 822.373 262.775 828.137 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 800.591 Q295.298 800.591 293.469 804.156 Q291.664 807.697 291.664 814.827 Q291.664 821.933 293.469 825.498 Q295.298 829.04 298.909 829.04 Q302.543 829.04 304.349 825.498 Q306.177 821.933 306.177 814.827 Q306.177 807.697 304.349 804.156 Q302.543 800.591 298.909 800.591 M298.909 796.887 Q304.719 796.887 307.775 801.494 Q310.853 806.077 310.853 814.827 Q310.853 823.554 307.775 828.16 Q304.719 832.743 298.909 832.743 Q293.099 832.743 290.02 828.16 Q286.964 823.554 286.964 814.827 Q286.964 806.077 290.02 801.494 Q293.099 796.887 298.909 796.887 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M272.914 647.227 Q276.27 647.945 278.145 650.213 Q280.043 652.482 280.043 655.815 Q280.043 660.931 276.525 663.732 Q273.006 666.532 266.525 666.532 Q264.349 666.532 262.034 666.093 Q259.742 665.676 257.289 664.819 L257.289 660.306 Q259.233 661.44 261.548 662.019 Q263.863 662.597 266.386 662.597 Q270.784 662.597 273.076 660.861 Q275.39 659.125 275.39 655.815 Q275.39 652.759 273.238 651.046 Q271.108 649.31 267.289 649.31 L263.261 649.31 L263.261 645.468 L267.474 645.468 Q270.923 645.468 272.752 644.102 Q274.58 642.713 274.58 640.121 Q274.58 637.459 272.682 636.046 Q270.807 634.611 267.289 634.611 Q265.367 634.611 263.168 635.028 Q260.969 635.445 258.33 636.324 L258.33 632.158 Q260.992 631.417 263.307 631.047 Q265.645 630.676 267.705 630.676 Q273.029 630.676 276.131 633.107 Q279.233 635.514 279.233 639.634 Q279.233 642.505 277.59 644.496 Q275.946 646.463 272.914 647.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 634.38 Q295.298 634.38 293.469 637.945 Q291.664 641.486 291.664 648.616 Q291.664 655.722 293.469 659.287 Q295.298 662.829 298.909 662.829 Q302.543 662.829 304.349 659.287 Q306.177 655.722 306.177 648.616 Q306.177 641.486 304.349 637.945 Q302.543 634.38 298.909 634.38 M298.909 630.676 Q304.719 630.676 307.775 635.283 Q310.853 639.866 310.853 648.616 Q310.853 657.343 307.775 661.949 Q304.719 666.532 298.909 666.532 Q293.099 666.532 290.02 661.949 Q286.964 657.343 286.964 648.616 Q286.964 639.866 290.02 635.283 Q293.099 630.676 298.909 630.676 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M271.594 469.164 L259.789 487.613 L271.594 487.613 L271.594 469.164 M270.367 465.09 L276.247 465.09 L276.247 487.613 L281.177 487.613 L281.177 491.502 L276.247 491.502 L276.247 499.65 L271.594 499.65 L271.594 491.502 L255.992 491.502 L255.992 486.988 L270.367 465.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 468.169 Q295.298 468.169 293.469 471.734 Q291.664 475.275 291.664 482.405 Q291.664 489.511 293.469 493.076 Q295.298 496.618 298.909 496.618 Q302.543 496.618 304.349 493.076 Q306.177 489.511 306.177 482.405 Q306.177 475.275 304.349 471.734 Q302.543 468.169 298.909 468.169 M298.909 464.465 Q304.719 464.465 307.775 469.072 Q310.853 473.655 310.853 482.405 Q310.853 491.132 307.775 495.738 Q304.719 500.321 298.909 500.321 Q293.099 500.321 290.02 495.738 Q286.964 491.132 286.964 482.405 Q286.964 473.655 290.02 469.072 Q293.099 464.465 298.909 464.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M258.793 298.879 L277.15 298.879 L277.15 302.814 L263.076 302.814 L263.076 311.287 Q264.094 310.939 265.113 310.777 Q266.131 310.592 267.15 310.592 Q272.937 310.592 276.316 313.763 Q279.696 316.935 279.696 322.351 Q279.696 327.93 276.224 331.032 Q272.752 334.111 266.432 334.111 Q264.256 334.111 261.988 333.74 Q259.742 333.37 257.335 332.629 L257.335 327.93 Q259.418 329.064 261.641 329.62 Q263.863 330.175 266.34 330.175 Q270.344 330.175 272.682 328.069 Q275.02 325.962 275.02 322.351 Q275.02 318.74 272.682 316.634 Q270.344 314.527 266.34 314.527 Q264.465 314.527 262.59 314.944 Q260.738 315.361 258.793 316.24 L258.793 298.879 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M298.909 301.958 Q295.298 301.958 293.469 305.523 Q291.664 309.064 291.664 316.194 Q291.664 323.3 293.469 326.865 Q295.298 330.407 298.909 330.407 Q302.543 330.407 304.349 326.865 Q306.177 323.3 306.177 316.194 Q306.177 309.064 304.349 305.523 Q302.543 301.958 298.909 301.958 M298.909 298.254 Q304.719 298.254 307.775 302.861 Q310.853 307.444 310.853 316.194 Q310.853 324.921 307.775 329.527 Q304.719 334.111 298.909 334.111 Q293.099 334.111 290.02 329.527 Q286.964 324.921 286.964 316.194 Q286.964 307.444 290.02 302.861 Q293.099 298.254 298.909 298.254 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip372)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1024.75 400.199,912.233 400.786,809 401.372,838.664 401.958,747.69 402.545,662.872 403.131,585.438 403.718,512.879 404.304,448.747 404.891,485.477 405.477,428.291 406.063,376.641 406.65,331.742 407.236,290.024 407.823,252.84 408.409,219.895 408.995,315.291 409.582,284.786 410.168,310.457 410.755,379.302 411.341,352.461 411.927,328.36 412.514,309.005 413.1,292.222 413.687,312.183 414.273,297.552 414.86,285.41 415.446,332.66 416.032,347.083 416.619,335.951 417.205,351.97 417.792,366.94 418.378,360.045 418.964,354.04 419.551,349.975 420.137,347.243 420.724,347.256 421.31,380.706 421.896,398.061 422.483,415.09 423.069,443.537 423.656,459.511 424.242,475.187 424.829,479.608 425.415,483.76 426.001,510.263 426.588,534.523 427.174,539.742 427.761,562.496 428.347,568.906 428.933,574.905 429.52,589.485 430.106,596.969 430.693,618.155 431.279,631.248 431.865,651.37 432.452,676.562 433.038,689.349 433.625,712.574 434.211,723.867 434.798,735.484 435.384,746.541 435.97,752.209 436.557,759.058 437.143,774.395 437.73,785.492 438.316,792.233 438.902,815.564 439.489,821.787 440.075,831.774 440.662,842.233 441.248,856.1 441.835,876.282 442.421,885.254 443.007,893.776 443.594,899.575 444.18,914.16 444.767,919.423 445.353,921.97 445.939,930.509 446.526,938.993 447.112,955.94 447.699,966.222 448.285,976.196 448.871,980.211 449.458,989.732 450.044,996.444 450.631,1003.6 451.217,1007.6 451.804,1011.61 452.39,1015.28 452.976,1021.85 453.563,1028.58 454.149,1037.09 454.736,1045.66 455.322,1051.02 455.908,1054.44 456.495,1057.86 457.081,1061.19 457.668,1064.48 458.254,1069.99 458.84,1077.68 459.427,1087 460.013,1094.02 460.6,1100.53 461.186,1105.09 461.773,1109.27 462.359,1115.68 462.945,1115.91 463.532,1122.07 464.118,1126.32 464.705,1133.81 465.291,1139.49 465.877,1142.88 466.464,1148.08 467.05,1154.36 467.637,1157.08 468.223,1159.91 468.809,1164.64 469.396,1167.67 469.982,1172.33 470.569,1175.85 471.155,1178.62 471.742,1182.43 472.328,1184.56 472.914,1185.26 473.501,1185.79 474.087,1190.08 474.674,1193.59 475.26,1190.62 475.846,1193.11 476.433,1193.67 477.019,1194.57 477.606,1196.63 478.192,1197.31 478.778,1199.4 479.365,1204.58 479.951,1204.79 480.538,1208.1 481.124,1208.5 481.711,1210.42 482.297,1213.84 482.883,1212.57 483.47,1212.76 484.056,1216.32 484.643,1219.02 485.229,1219.06 485.815,1221.97 486.402,1221.91 486.988,1223.38 487.575,1223.27 488.161,1224.63 488.748,1226.01 489.334,1228.5 489.92,1223.69 490.507,1220.78 491.093,1218.04 491.68,1219.84 492.266,1220.64 492.852,1220.84 493.439,1224.14 494.025,1230.21 494.612,1233.1 495.198,1237 495.784,1237.89 496.371,1237.43 496.957,1238.52 497.544,1240.73 498.13,1241.39 498.717,1239.65 499.303,1239.11 499.889,1240.14 500.476,1240.95 501.062,1240.5 501.649,1238.42 502.235,1239.55 502.821,1240.39 503.408,1242.94 503.994,1240.97 504.581,1241.56 505.167,1242.56 505.753,1244.5 506.34,1245.31 506.926,1243.2 507.513,1241.33 508.099,1245.17 508.686,1243.01 509.272,1244.09 509.858,1245.17 510.445,1245.73 511.031,1247.78 511.618,1246.62 512.204,1247.47 512.79,1245.37 513.377,1245.01 513.963,1245.65 514.55,1247.85 515.136,1245.65 515.722,1245.36 516.309,1246.28 516.895,1246.79 517.482,1247.4 518.068,1245.54 518.655,1246.33 519.241,1245.41 519.827,1244.73 520.414,1242.91 521,1239.89 521.587,1239.83 522.173,1241.99 522.759,1240.27 523.346,1241.22 523.932,1243.64 524.519,1244.38 525.105,1243.87 525.691,1243.46 526.278,1242.76 526.864,1240.86 527.451,1241.95 528.037,1245.74 528.624,1246.59 529.21,1241.93 529.796,1244.04 530.383,1246.03 530.969,1246.8 531.556,1244.7 532.142,1246.64 532.728,1245.8 533.315,1250.53 533.901,1249.79 534.488,1249.11 535.074,1248.51 535.661,1245.81 536.247,1244.05 536.833,1243.38 537.42,1241.55 538.006,1239.65 538.593,1239.31 539.179,1239.25 539.765,1238.86 540.352,1237.34 540.938,1237.09 541.525,1236.63 542.111,1235.05 542.697,1233.38 543.284,1233.4 543.87,1234.71 544.457,1234.27 545.043,1236.93 545.63,1235.31 546.216,1237.96 546.802,1237.48 547.389,1239.77 547.975,1240.77 548.562,1244.31 549.148,1244.93 549.734,1244.03 550.321,1243.43 550.907,1244.05 551.494,1244.61 552.08,1243.88 552.666,1244.58 553.253,1245.24 553.839,1243 554.426,1240.99 555.012,1240.01 555.599,1241.15 556.185,1241.93 556.771,1241.3 557.358,1242.48 557.944,1241.89 558.531,1240.13 559.117,1240.71 559.703,1238.73 560.29,1238.52 560.876,1240.44 561.463,1239.77 562.049,1237.91 562.635,1237.4 563.222,1238.25 563.808,1237.63 564.395,1235.74 564.981,1235.34 565.568,1234.8 566.154,1235.66 566.74,1238.11 567.327,1238.86 567.913,1240.85 568.5,1238.58 569.086,1235.18 569.672,1234.53 570.259,1236.8 570.845,1237.5 571.432,1235.6 572.018,1235.17 572.605,1234.9 573.191,1234.54 573.777,1236.96 574.364,1236.48 574.95,1236.12 575.537,1237.29 576.123,1236.85 576.709,1239.07 577.296,1244.01 577.882,1243.12 578.469,1242.17 579.055,1242.77 579.641,1241.98 580.228,1241.41 580.814,1240.86 581.401,1239.94 581.987,1239.14 582.574,1241.18 583.16,1243.25 583.746,1246.38 584.333,1246.38 584.919,1245.36 585.506,1244.2 586.092,1241.75 586.678,1239.26 587.265,1242.51 587.851,1239.14 588.438,1236.81 589.024,1239.05 589.61,1239.94 590.197,1237.75 590.783,1238.56 591.37,1236.21 591.956,1235.59 592.543,1232.42 593.129,1229.26 593.715,1226.32 594.302,1224.88 594.888,1224.69 595.475,1224.69 596.061,1221.68 596.647,1221.65 597.234,1221.94 597.82,1224.98 598.407,1223.86 598.993,1223.95 599.579,1226.83 600.166,1228.11 600.752,1228.04 601.339,1229.13 601.925,1231.62 602.512,1231.43 603.098,1231.19 603.684,1229.39 604.271,1227.92 604.857,1226.75 605.444,1229.74 606.03,1230.9 606.616,1233.04 607.203,1231.42 607.789,1229.51 608.376,1227.78 608.962,1229.15 609.548,1224.91 610.135,1226.32 610.721,1230.38 611.308,1230.17 611.894,1229.74 612.481,1230.59 613.067,1228.79 613.653,1227.28 614.24,1224.15 614.826,1226.8 615.413,1224.03 615.999,1222.83 616.585,1224.2 617.172,1225.42 617.758,1225.16 618.345,1225.02 618.931,1223.37 619.518,1224.94 620.104,1225.07 620.69,1223.71 621.277,1223.82 621.863,1225.23 622.45,1227.66 623.036,1229.78 623.622,1229.24 624.209,1227.44 624.795,1228.41 625.382,1229.59 625.968,1232.08 626.554,1232.98 627.141,1232.73 627.727,1230.91 628.314,1231.63 628.9,1228.35 629.487,1226.62 630.073,1227.77 630.659,1226.12 631.246,1224.64 631.832,1224.65 632.419,1224.56 633.005,1224.83 633.591,1220.75 634.178,1222.15 634.764,1221 635.351,1222.76 635.937,1222.85 636.523,1224.23 637.11,1225.47 637.696,1223.8 638.283,1222.59 638.869,1224.08 639.456,1218.52 640.042,1217.26 640.628,1215.98 641.215,1216.27 641.801,1218.07 642.388,1221.17 642.974,1218.6 643.56,1218.79 644.147,1217.55 644.733,1217.88 645.32,1218.31 645.906,1218.5 646.492,1218.71 647.079,1216.13 647.665,1216.51 648.252,1219.37 648.838,1223.47 649.425,1226.42 650.011,1227.88 650.597,1229.05 651.184,1225.86 651.77,1225.94 652.357,1225.79 652.943,1224.11 653.529,1224.19 654.116,1223.88 654.702,1223.65 655.289,1223.46 655.875,1223.3 656.462,1223.06 657.048,1222.97 657.634,1222.87 658.221,1224.01 658.807,1222.31 659.394,1222.14 659.98,1222.16 660.566,1222.04 661.153,1220.65 661.739,1222.1 662.326,1219.5 662.912,1221.03 663.498,1221.24 664.085,1219.98 664.671,1219.85 665.258,1218.45 665.844,1218.65 666.431,1221.62 667.017,1225.86 667.603,1231.12 668.19,1229.08 668.776,1227.52 669.363,1226.07 669.949,1224.56 670.535,1225.69 671.122,1226.63 671.708,1226.24 672.295,1225.75 672.881,1228.01 673.467,1226.18 674.054,1225.93 674.64,1226.01 675.227,1228.31 675.813,1229.39 676.4,1227.57 676.986,1227.41 677.572,1227.06 678.159,1225.3 678.745,1224.86 679.332,1225.86 679.918,1224.11 680.504,1225.42 681.091,1226.57 681.677,1226.17 682.264,1225.81 682.85,1227.08 683.436,1224.01 684.023,1229.1 684.609,1228.54 685.196,1228.14 685.782,1227.63 686.369,1228.55 686.955,1228.08 687.541,1227.68 688.128,1227.62 688.714,1227.23 689.301,1225.45 689.887,1227.58 690.473,1228.38 691.06,1229.41 691.646,1228.76 692.233,1226.72 692.819,1228.86 693.405,1228.48 693.992,1229.34 694.578,1230.14 695.165,1229.79 695.751,1230.9 696.338,1228.88 696.924,1228.34 697.51,1227.78 698.097,1225.89 698.683,1222.77 699.27,1220.17 699.856,1220.21 700.442,1220.43 701.029,1222.82 701.615,1221.17 702.202,1219.74 702.788,1220.73 703.375,1220.76 703.961,1221.03 704.547,1222.48 705.134,1226.25 705.72,1225.72 706.307,1225.26 706.893,1223.48 707.479,1225.91 708.066,1224.22 708.652,1221.38 709.239,1219.9 709.825,1218.62 710.411,1218.42 710.998,1219.75 711.584,1219.8 712.171,1218.15 712.757,1219.54 713.344,1218.03 713.93,1218.18 714.516,1218.53 715.103,1218.76 715.689,1216.23 716.276,1215.01 716.862,1213.86 717.448,1212.73 718.035,1214.21 718.621,1220 719.208,1219.57 719.794,1220.84 720.38,1222.13 720.967,1221.95 721.553,1223 722.14,1221.45 722.726,1224.32 723.313,1224.16 723.899,1224.03 724.485,1222.21 725.072,1222.09 725.658,1220.48 726.245,1220.26 726.831,1220.03 727.417,1217.41 728.004,1218.75 728.59,1217.51 729.177,1216.51 729.763,1213.56 730.349,1214.03 730.936,1215.75 731.522,1214.69 732.109,1214.76 732.695,1214.91 733.282,1219.05 733.868,1217.64 734.454,1217.73 735.041,1217.77 735.627,1216.55 736.214,1218.02 736.8,1216.7 737.386,1216.7 737.973,1216.64 738.559,1215.57 739.146,1216.82 739.732,1217.09 740.318,1217.19 740.905,1216.04 741.491,1214.74 742.078,1213.76 742.664,1212.7 743.251,1214.51 743.837,1213.61 744.423,1212.49 745.01,1211.52 745.596,1210.84 746.183,1212.51 746.769,1214.17 747.355,1215.69 747.942,1213.3 748.528,1213.45 749.115,1213.72 749.701,1215.24 750.288,1218.14 750.874,1218.27 751.46,1218.21 752.047,1218.44 752.633,1218.49 753.22,1217.35 753.806,1217.39 754.392,1219.9 754.979,1219.68 755.565,1219.23 756.152,1223.19 756.738,1221.64 757.324,1221.52 757.911,1223.99 758.497,1225.12 759.084,1223.26 759.67,1224.3 760.257,1222.31 760.843,1220.48 761.429,1218.79 762.016,1220.16 762.602,1222.72 763.189,1223.45 763.775,1221.91 764.361,1218.6 764.948,1218.74 765.534,1218.74 766.121,1218.77 766.707,1222.87 767.293,1222.47 767.88,1222.09 768.466,1223.13 769.053,1221.41 769.639,1221.3 770.226,1220.81 770.812,1219.59 771.398,1219.52 771.985,1220.54 772.571,1220.25 773.158,1219.67 773.744,1219.27 774.33,1216.41 774.917,1219.16 775.503,1222.02 776.09,1220.24 776.676,1218.96 777.262,1218.64 777.849,1217.03 778.435,1219.48 779.022,1218.12 779.608,1217.98 780.195,1216.69 780.781,1216.72 781.367,1215.29 781.954,1216.92 782.54,1219.6 783.127,1218.17 783.713,1218.09 784.299,1215.43 784.886,1214.04 785.472,1215.58 786.059,1215.9 786.645,1214.83 787.232,1213.52 787.818,1216.47 788.404,1220.39 788.991,1221.42 789.577,1221.26 790.164,1222.08 790.75,1222.93 791.336,1222.34 791.923,1223.19 792.509,1220.19 793.096,1217.52 793.682,1217.27 794.268,1215.81 794.855,1215.65 795.441,1218.66 796.028,1218.21 796.614,1216.84 797.201,1216.76 797.787,1215.17 798.373,1214.07 798.96,1216.87 799.546,1216.89 800.133,1215.59 800.719,1215.51 801.305,1217.01 801.892,1216.89 802.478,1215.32 803.065,1216.9 803.651,1217.02 804.237,1218.41 804.824,1217.05 805.41,1215.69 805.997,1214.42 806.583,1216.31 807.17,1214.91 807.756,1213.49 808.342,1215.21 808.929,1215.25 809.515,1215.49 810.102,1216.64 810.688,1215.53 811.274,1213.07 811.861,1215.97 812.447,1213.63 813.034,1211.17 813.62,1211.59 814.206,1214.64 814.793,1212.06 815.379,1213.62 815.966,1212.88 816.552,1214.39 817.139,1215.81 817.725,1214.4 818.311,1217.24 818.898,1218.52 819.484,1218.55 820.071,1219.92 820.657,1219.88 821.243,1219.45 821.83,1217.71 822.416,1219.29 823.003,1219.32 823.589,1219.2 824.175,1222.84 824.762,1222.79 825.348,1222.37 825.935,1222.41 826.521,1221.93 827.108,1220.4 827.694,1220.19 828.28,1218.71 828.867,1218.72 829.453,1218.69 830.04,1220.33 830.626,1221.61 831.212,1217.11 831.799,1218.42 832.385,1220.99 832.972,1223.3 833.558,1223.18 834.145,1222.81 834.731,1222.61 835.317,1222.08 835.904,1221.9 836.49,1219.93 837.077,1219.68 837.663,1216.64 838.249,1220.75 838.836,1220.33 839.422,1217.41 840.009,1217.16 840.595,1221.1 841.181,1222.51 841.768,1222.12 842.354,1222.92 842.941,1222.51 843.527,1223.46 844.114,1223.02 844.7,1224.09 845.286,1226.15 845.873,1224.1 846.459,1224.76 847.046,1227.05 847.632,1223.88 848.218,1222.14 848.805,1221.99 849.391,1214.52 849.978,1214.59 850.564,1216.13 851.15,1217.35 851.737,1218.44 852.323,1215.64 852.91,1214.24 853.496,1214.37 854.083,1216.13 854.669,1215.59 855.255,1212.68 855.842,1212.73 856.428,1212.85 857.015,1213.06 857.601,1214.26 858.187,1213 858.774,1214.53 859.36,1213.32 859.947,1215.95 860.533,1214.67 861.119,1213.62 861.706,1215.31 862.292,1213.79 862.879,1212.49 863.465,1211.48 864.052,1213.38 864.638,1214.56 865.224,1214.29 865.811,1216.03 866.397,1213.38 866.984,1212.16 867.57,1213.58 868.156,1214.99 868.743,1213.73 869.329,1216.52 869.916,1215.41 870.502,1215.47 871.089,1215.71 871.675,1214.47 872.261,1215.84 872.848,1215.81 873.434,1217.3 874.021,1217.36 874.607,1215.8 875.193,1213.05 875.78,1217.14 876.366,1219.91 876.953,1221.01 877.539,1223.44 878.125,1222.95 878.712,1222.79 879.298,1223.97 879.885,1222.37 880.471,1225.91 881.058,1229.65 881.644,1223.77 882.23,1220.61 882.817,1216.4 883.403,1219.17 883.99,1217.95 884.576,1213.77 885.162,1215.07 885.749,1212.62 886.335,1214.35 886.922,1215.9 887.508,1212.94 888.094,1215.64 888.681,1215.62 889.267,1217.23 889.854,1217.41 890.44,1214.79 891.027,1214.53 891.613,1214.41 892.199,1215.62 892.786,1217.06 893.372,1219.67 893.959,1221.02 894.545,1216.65 895.131,1217.65 895.718,1215.03 896.304,1209.69 896.891,1207.23 897.477,1210.46 898.063,1210.92 898.65,1212.34 899.236,1212.6 899.823,1211.64 900.409,1209.3 900.996,1210.63 901.582,1207.99 902.168,1211.01 902.755,1212.74 903.341,1213.01 903.928,1211.64 904.514,1210.37 905.1,1208.2 905.687,1210 906.273,1210.12 906.86,1210.11 907.446,1213.47 908.032,1216.25 908.619,1214.9 909.205,1216.18 909.792,1213.63 910.378,1213.57 910.965,1215.13 911.551,1215.45 912.137,1212.99 912.724,1211.83 913.31,1213.34 913.897,1212.35 914.483,1212.72 915.069,1214.28 915.656,1213.05 916.242,1214.41 916.829,1214.6 917.415,1210.65 918.002,1210.78 918.588,1212.64 919.174,1211.54 919.761,1214.42 920.347,1210.19 920.934,1211.99 921.52,1213.81 922.106,1213.9 922.693,1215.47 923.279,1216.65 923.866,1217.64 924.452,1218.65 925.038,1219.93 925.625,1220.92 926.211,1222.06 926.798,1221.81 927.384,1222.6 927.971,1222.2 928.557,1220.44 929.143,1220.08 929.73,1219.7 930.316,1215.32 930.903,1215.31 931.489,1217.98 932.075,1216.63 932.662,1216.46 933.248,1216.44 933.835,1217.86 934.421,1217.67 935.007,1217.37 935.594,1217.14 936.18,1217.16 936.767,1217.22 937.353,1218.47 937.94,1219.34 938.526,1221.92 939.112,1221.29 939.699,1215.43 940.285,1215.43 940.872,1215.28 941.458,1210.88 942.044,1210.95 942.631,1210.89 943.217,1212.34 943.804,1210.85 944.39,1211.3 944.976,1210.09 945.563,1210.61 946.149,1212.4 946.736,1213.8 947.322,1210.77 947.909,1210.96 948.495,1211.14 949.081,1211.57 949.668,1212.94 950.254,1213.02 950.841,1213.22 951.427,1213.17 952.013,1213.59 952.6,1213.41 953.186,1211.81 953.773,1211.87 954.359,1212.11 954.945,1217.65 955.532,1220.2 956.118,1221.19 956.705,1221.02 957.291,1219.3 957.878,1217.88 958.464,1214.97 959.05,1216.24 959.637,1217.68 960.223,1222.76 960.81,1222.32 961.396,1223.34 961.982,1225.46 962.569,1226.33 963.155,1224.51 963.742,1225.19 964.328,1221.88 964.915,1218.65 965.501,1221.17 966.087,1220.89 966.674,1218.17 967.26,1220.67 967.847,1220.41 968.433,1221.31 969.019,1219.48 969.606,1219.17 970.192,1223.01 970.779,1221.26 971.365,1222.3 971.951,1217.98 972.538,1217.67 973.124,1214.64 973.711,1211.8 974.297,1214.82 974.884,1214.79 975.47,1212.18 976.056,1213.98 976.643,1212.71 977.229,1211.52 977.816,1210.29 978.402,1210.43 978.988,1210.38 979.575,1209.22 980.161,1209.54 980.748,1211.07 981.334,1211.28 981.92,1212.81 982.507,1211.54 983.093,1213.07 983.68,1215.86 984.266,1217.17 984.853,1215.93 985.439,1213.14 986.025,1214.17 986.612,1218.2 987.198,1218.12 987.785,1216.23 988.371,1221.36 988.957,1222.4 989.544,1223.28 990.13,1222.92 990.717,1219.73 991.303,1217.89 991.889,1217.75 992.476,1217.56 993.062,1218.49 993.649,1218.31 994.235,1216.48 994.822,1215.07 995.408,1215.15 995.994,1217.83 996.581,1217.66 997.167,1214.75 997.754,1216.25 998.34,1214.76 998.926,1211.98 999.513,1212.22 1000.1,1212.12 1000.69,1216.42 1001.27,1214.75 1001.86,1213.42 1002.44,1214.84 1003.03,1216.2 1003.62,1217.45 1004.2,1216.23 1004.79,1216.18 1005.38,1216.14 1005.96,1217.48 1006.55,1216 1007.14,1217.46 1007.72,1215.92 1008.31,1214.72 1008.9,1216.13 1009.48,1218.81 1010.07,1214.41 1010.65,1214.99 1011.24,1213.61 1011.83,1213.69 1012.41,1213.9 1013,1212.61 1013.59,1212.54 1014.17,1214.14 1014.76,1212.73 1015.35,1214.27 1015.93,1208.86 1016.52,1210.53 1017.11,1210.96 1017.69,1213.99 1018.28,1213.79 1018.86,1213.83 1019.45,1212.36 1020.04,1211.25 1020.62,1211.45 1021.21,1213.05 1021.8,1211.7 1022.38,1210.62 1022.97,1210.97 1023.56,1208.48 1024.14,1207.16 1024.73,1207.38 1025.32,1209.17 1025.9,1210.81 1026.49,1211.08 1027.07,1212.82 1027.66,1214.19 1028.25,1214.1 1028.83,1213.93 1029.42,1216.75 1030.01,1217.98 1030.59,1220.39 1031.18,1218.9 1031.77,1217.29 1032.35,1215.74 1032.94,1217.2 1033.52,1216.83 1034.11,1215.39 1034.7,1215.4 1035.28,1216.53 1035.87,1219.18 1036.46,1216.14 1037.04,1219.01 1037.63,1220.32 1038.22,1223.83 1038.8,1220.6 1039.39,1222.87 1039.98,1222.05 1040.56,1218.91 1041.15,1217.54 1041.73,1216.09 1042.32,1211.82 1042.91,1210.74 1043.49,1207.91 1044.08,1209.56 1044.67,1207.11 1045.25,1206.2 1045.84,1209.28 1046.43,1209.56 1047.01,1207.26 1047.6,1206.13 1048.19,1203.66 1048.77,1204.01 1049.36,1203.11 1049.94,1205.26 1050.53,1205.65 1051.12,1207.64 1051.7,1209.38 1052.29,1210.83 1052.88,1211.21 1053.46,1207.52 1054.05,1205.21 1054.64,1207.11 1055.22,1208.95 1055.81,1207.89 1056.39,1207.11 1056.98,1211.49 1057.57,1214.45 1058.15,1215.79 1058.74,1215.84 1059.33,1215.69 1059.91,1218.1 1060.5,1217.87 1061.09,1216.51 1061.67,1221.55 1062.26,1221.31 1062.85,1217.3 1063.43,1217.18 1064.02,1216.25 1064.6,1215.14 1065.19,1216.4 1065.78,1216.09 1066.36,1217.07 1066.95,1214.33 1067.54,1214.03 1068.12,1213.94 1068.71,1212.78 1069.3,1215.29 1069.88,1217.89 1070.47,1217.75 1071.06,1218.9 1071.64,1220.06 1072.23,1222.54 1072.81,1222 1073.4,1221.57 1073.99,1221.49 1074.57,1223.88 1075.16,1224.61 1075.75,1224.23 1076.33,1226.41 1076.92,1221.68 1077.51,1222.42 1078.09,1219.27 1078.68,1223.11 1079.26,1224.07 1079.85,1221.96 1080.44,1221.56 1081.02,1223.79 1081.61,1222 1082.2,1223.34 1082.78,1221.74 1083.37,1219.98 1083.96,1218.39 1084.54,1219.44 1085.13,1220.37 1085.72,1217.22 1086.3,1217.23 1086.89,1211.71 1087.47,1210.56 1088.06,1214.61 1088.65,1213.27 1089.23,1210.41 1089.82,1209.32 1090.41,1209.42 1090.99,1208.5 1091.58,1212.76 1092.17,1209.92 1092.75,1212.92 1093.34,1213.06 1093.93,1211.73 1094.51,1211.78 1095.1,1211.71 1095.68,1210.69 1096.27,1209.55 1096.86,1211.1 1097.44,1211.08 1098.03,1211.48 1098.62,1211.51 1099.2,1214.55 1099.79,1214.34 1100.38,1214.59 1100.96,1214.48 1101.55,1216.19 1102.14,1214.48 1102.72,1215.86 1103.31,1214.68 1103.89,1212 1104.48,1210.83 1105.07,1212.74 1105.65,1213.15 1106.24,1213.25 1106.83,1215.85 1107.41,1216.04 1108,1216.2 1108.59,1216.09 1109.17,1216.1 1109.76,1213.23 1110.34,1209.47 1110.93,1209.5 1111.52,1208.58 1112.1,1207.41 1112.69,1208.04 1113.28,1208.5 1113.86,1207.27 1114.45,1207.61 1115.04,1206.5 1115.62,1206.89 1116.21,1206.03 1116.8,1206.34 1117.38,1208.13 1117.97,1208.51 1118.55,1209 1119.14,1210.88 1119.73,1212.55 1120.31,1212.73 1120.9,1213.11 1121.49,1211.83 1122.07,1213 1122.66,1215.58 1123.25,1213.93 1123.83,1213.97 1124.42,1215.53 1125.01,1219.55 1125.59,1220.46 1126.18,1224.29 1126.76,1222.6 1127.35,1219.48 1127.94,1216.56 1128.52,1211.38 1129.11,1210.27 1129.7,1211.93 1130.28,1212.27 1130.87,1213.66 1131.46,1212.43 1132.04,1212.54 1132.63,1214.21 1133.21,1212.88 1133.8,1212.91 1134.39,1213 1134.97,1213.27 1135.56,1211.89 1136.15,1212.18 1136.73,1210.81 1137.32,1208.4 1137.91,1210.02 1138.49,1208.96 1139.08,1209.4 1139.67,1207.21 1140.25,1207.5 1140.84,1207.84 1141.42,1209.8 1142.01,1208.76 1142.6,1210.21 1143.18,1210.42 1143.77,1210.35 1144.36,1211.96 1144.94,1216.22 1145.53,1217.35 1146.12,1216.08 1146.7,1215.62 1147.29,1215.76 1147.88,1218.41 1148.46,1219.38 1149.05,1221.91 1149.63,1220.36 1150.22,1222.76 1150.81,1218.18 1151.39,1215.43 1151.98,1212.85 1152.57,1212.92 1153.15,1215.77 1153.74,1214.19 1154.33,1212.93 1154.91,1214.32 1155.5,1217.1 1156.09,1218.38 1156.67,1219.28 1157.26,1221.72 1157.84,1221.25 1158.43,1219.64 1159.02,1219.39 1159.6,1220.59 1160.19,1217.36 1160.78,1218.41 1161.36,1220.85 1161.95,1219.25 1162.54,1218.88 1163.12,1219.94 1163.71,1220.94 1164.29,1218.9 1164.88,1220.17 1165.47,1217.23 1166.05,1216.64 1166.64,1218.03 1167.23,1212.27 1167.81,1213.99 1168.4,1216.81 1168.99,1216.73 1169.57,1216.68 1170.16,1216.63 1170.75,1219.47 1171.33,1217.89 1171.92,1217.52 1172.5,1217.29 1173.09,1216.97 1173.68,1218.07 1174.26,1220.34 1174.85,1220.25 1175.44,1219.82 1176.02,1219.39 1176.61,1219.23 1177.2,1219.02 1177.78,1217.07 1178.37,1214.54 1178.96,1217.21 1179.54,1214.38 1180.13,1214.32 1180.71,1214.56 1181.3,1213.44 1181.89,1212.07 1182.47,1210.7 1183.06,1212.26 1183.65,1213.84 1184.23,1212.62 1184.82,1214.11 1185.41,1211.6 1185.99,1218.45 1186.58,1219.77 1187.16,1220.54 1187.75,1221.33 1188.34,1220.95 1188.92,1220.21 1189.51,1217.4 1190.1,1221.32 1190.68,1219.52 1191.27,1220.23 1191.86,1220.14 1192.44,1222.41 1193.03,1223.4 1193.62,1224.52 1194.2,1223.84 1194.79,1224.61 1195.37,1222.84 1195.96,1219.59 1196.55,1222.02 1197.13,1222.88 1197.72,1222.24 1198.31,1221.72 1198.89,1219.83 1199.48,1218.26 1200.07,1219.04 1200.65,1218.58 1201.24,1216.87 1201.83,1215.89 1202.41,1214.5 1203,1213.14 1203.58,1213.14 1204.17,1211.77 1204.76,1211.72 1205.34,1213.21 1205.93,1213.3 1206.52,1214.41 1207.1,1214.07 1207.69,1215.44 1208.28,1213.76 1208.86,1212.55 1209.45,1213.81 1210.03,1215.58 1210.62,1215.56 1211.21,1212.69 1211.79,1211.16 1212.38,1210.08 1212.97,1207.97 1213.55,1208.35 1214.14,1206.27 1214.73,1209.54 1215.31,1211.19 1215.9,1212.68 1216.49,1212.49 1217.07,1210.92 1217.66,1211.1 1218.24,1209.76 1218.83,1211.4 1219.42,1212.73 1220,1214.18 1220.59,1216.78 1221.18,1217.97 1221.76,1220.54 1222.35,1224.33 1222.94,1222.53 1223.52,1218.04 1224.11,1218.11 1224.7,1219.35 1225.28,1219.38 1225.87,1216.76 1226.45,1218.15 1227.04,1223.45 1227.63,1219.22 1228.21,1217.81 1228.8,1217.55 1229.39,1217.46 1229.97,1219.9 1230.56,1221.16 1231.15,1220.64 1231.73,1216.04 1232.32,1212.12 1232.91,1212.31 1233.49,1211.03 1234.08,1213.85 1234.66,1213.97 1235.25,1211.05 1235.84,1212.61 1236.42,1211.3 1237.01,1208.74 1237.6,1208.94 1238.18,1206.56 1238.77,1208.5 1239.36,1208.71 1239.94,1207.58 1240.53,1208.02 1241.11,1204.35 1241.7,1203.65 1242.29,1204.08 1242.87,1204.68 1243.46,1205.13 1244.05,1202.93 1244.63,1203.97 1245.22,1203.05 1245.81,1202.11 1246.39,1202.5 1246.98,1202.08 1247.57,1201.5 1248.15,1203.72 1248.74,1206.96 1249.32,1209.93 1249.91,1212.67 1250.5,1214.21 1251.08,1215.41 1251.67,1215.41 1252.26,1213.86 1252.84,1213.96 1253.43,1212.73 1254.02,1211.29 1254.6,1210.15 1255.19,1211.64 1255.78,1211.63 1256.36,1211.97 1256.95,1213.36 1257.53,1213.61 1258.12,1215.18 1258.71,1216.49 1259.29,1213.7 1259.88,1212.11 1260.47,1213.61 1261.05,1216.41 1261.64,1216.3 1262.23,1214.71 1262.81,1215.91 1263.4,1214.43 1263.98,1213.12 1264.57,1214.75 1265.16,1213.53 1265.74,1213.37 1266.33,1211.91 1266.92,1209.23 1267.5,1212.14 1268.09,1212.3 1268.68,1212.37 1269.26,1211.12 1269.85,1209.47 1270.44,1208.4 1271.02,1210.11 1271.61,1209.01 1272.19,1211.73 1272.78,1210.46 1273.37,1210.63 1273.95,1210.6 1274.54,1208.31 1275.13,1208.76 1275.71,1210.45 1276.3,1211.09 1276.89,1211.14 1277.47,1212.89 1278.06,1212.91 1278.65,1211.77 1279.23,1211.65 1279.82,1212.04 1280.4,1211.91 1280.99,1212.32 1281.58,1209.95 1282.16,1211.64 1282.75,1211.69 1283.34,1211.78 1283.92,1212.27 1284.51,1212.4 1285.1,1212.62 1285.68,1214.31 1286.27,1214.62 1286.86,1214.96 1287.44,1217.35 1288.03,1217.22 1288.61,1218.24 1289.2,1218.53 1289.79,1220.7 1290.37,1218.93 1290.96,1221.61 1291.55,1217.12 1292.13,1216.64 1292.72,1217.9 1293.31,1214.88 1293.89,1215.92 1294.48,1215.81 1295.06,1214.07 1295.65,1215.36 1296.24,1212.4 1296.82,1212.63 1297.41,1212.54 1298,1211.53 1298.58,1211.55 1299.17,1211.72 1299.76,1212.11 1300.34,1210.91 1300.93,1212.39 1301.52,1211.24 1302.1,1215.47 1302.69,1216.82 1303.27,1215.01 1303.86,1214.87 1304.45,1213.36 1305.03,1211.91 1305.62,1214.79 1306.21,1213.33 1306.79,1214.69 1307.38,1216.13 1307.97,1216.3 1308.55,1216.41 1309.14,1214.91 1309.73,1212.17 1310.31,1212.2 1310.9,1211.07 1311.48,1211.47 1312.07,1210.21 1312.66,1210.71 1313.24,1211.99 1313.83,1214.87 1314.42,1212.04 1315,1212.08 1315.59,1212.33 1316.18,1215.15 1316.76,1213.67 1317.35,1215.11 1317.93,1214.82 1318.52,1214.72 1319.11,1213.56 1319.69,1215.09 1320.28,1213.71 1320.87,1213.87 1321.45,1211.12 1322.04,1209.92 1322.63,1209.05 1323.21,1206.7 1323.8,1208.72 1324.39,1211.83 1324.97,1211.92 1325.56,1214.84 1326.14,1216.22 1326.73,1216.11 1327.32,1218.43 1327.9,1216.89 1328.49,1216.5 1329.08,1215.48 1329.66,1217.63 1330.25,1213.23 1330.84,1211.97 1331.42,1213.41 1332.01,1217.26 1332.6,1218.18 1333.18,1220.52 1333.77,1218.87 1334.35,1218.44 1334.94,1218.13 1335.53,1220.59 1336.11,1218.77 1336.7,1218.58 1337.29,1219.91 1337.87,1219.37 1338.46,1217.87 1339.05,1219.2 1339.63,1219.03 1340.22,1220.15 1340.8,1221.29 1341.39,1222.17 1341.98,1220.31 1342.56,1219.69 1343.15,1220.67 1343.74,1219.09 1344.32,1217.54 1344.91,1218.47 1345.5,1216.76 1346.08,1216.35 1346.67,1217.63 1347.26,1216.11 1347.84,1216.07 1348.43,1212.03 1349.01,1213.47 1349.6,1216.08 1350.19,1217.12 1350.77,1218.21 1351.36,1217.9 1351.95,1216.22 1352.53,1216.35 1353.12,1217.83 1353.71,1217.75 1354.29,1216.42 1354.88,1220.26 1355.47,1220.15 1356.05,1221.39 1356.64,1220.76 1357.22,1223 1357.81,1223.88 1358.4,1220.76 1358.98,1217.87 1359.57,1218.89 1360.16,1218.62 1360.74,1216.8 1361.33,1219.3 1361.92,1219.24 1362.5,1219.12 1363.09,1217.37 1363.68,1215.89 1364.26,1214.42 1364.85,1209.14 1365.43,1208.04 1366.02,1212.42 1366.61,1213.86 1367.19,1215.31 1367.78,1216.54 1368.37,1214.8 1368.95,1214.63 1369.54,1214.36 1370.13,1211.54 1370.71,1211.7 1371.3,1211.81 1371.88,1214.69 1372.47,1211.76 1373.06,1210.66 1373.64,1211.99 1374.23,1212.28 1374.82,1215.08 1375.4,1213.87 1375.99,1212.54 1376.58,1212.74 1377.16,1214.27 1377.75,1214.72 1378.34,1212.06 1378.92,1213.41 1379.51,1214.99 1380.09,1217.72 1380.68,1217.23 1381.27,1215.95 1381.85,1214.32 1382.44,1218.52 1383.03,1215.36 1383.61,1214.02 1384.2,1213.81 1384.79,1211.08 1385.37,1211.03 1385.96,1211.34 1386.55,1213.04 1387.13,1212.85 1387.72,1206.13 1388.3,1208.12 1388.89,1209.8 1389.48,1208.52 1390.06,1208.79 1390.65,1211.66 1391.24,1213.06 1391.82,1213.23 1392.41,1209.26 1393,1209.69 1393.58,1210.02 1394.17,1211.36 1394.75,1214.38 1395.34,1215.68 1395.93,1214.5 1396.51,1214.15 1397.1,1212.69 1397.69,1212.87 1398.27,1212.61 1398.86,1212.91 1399.45,1211.83 1400.03,1211.79 1400.62,1210.78 1401.21,1209.76 1401.79,1208.59 1402.38,1212.79 1402.96,1212.87 1403.55,1211.57 1404.14,1213.1 1404.72,1211.89 1405.31,1210.73 1405.9,1209.89 1406.48,1207.29 1407.07,1207.42 1407.66,1206.5 1408.24,1205.63 1408.83,1207.66 1409.42,1207.9 1410,1206.41 1410.59,1208.24 1411.17,1207.49 1411.76,1211.53 1412.35,1210.34 1412.93,1213.61 1413.52,1213.6 1414.11,1213.65 1414.69,1212.59 1415.28,1211.18 1415.87,1208.77 1416.45,1211.85 1417.04,1211.94 1417.63,1212.18 1418.21,1212.39 1418.8,1207.96 1419.38,1207.09 1419.97,1208.5 1420.56,1210.08 1421.14,1208.92 1421.73,1203.75 1422.32,1204.41 1422.9,1206.3 1423.49,1204.25 1424.08,1204.86 1424.66,1205.29 1425.25,1208.19 1425.83,1209.7 1426.42,1208.7 1427.01,1209.07 1427.59,1205.11 1428.18,1205.51 1428.77,1203.36 1429.35,1203.88 1429.94,1204.75 1430.53,1203.83 1431.11,1205.87 1431.7,1204.91 1432.29,1201.22 1432.87,1200.61 1433.46,1198.89 1434.04,1199.68 1434.63,1202.05 1435.22,1204.13 1435.8,1206.05 1436.39,1205.09 1436.98,1208.4 1437.56,1207.91 1438.15,1205.49 1438.74,1207.11 1439.32,1207.16 1439.91,1210.21 1440.5,1211.69 1441.08,1211.85 1441.67,1212.12 1442.25,1212.37 1442.84,1212.7 1443.43,1212.69 1444.01,1215.26 1444.6,1215.01 1445.19,1216.18 1445.77,1218.64 1446.36,1217.18 1446.95,1217.08 1447.53,1218.65 1448.12,1221.21 1448.7,1223.42 1449.29,1222.86 1449.88,1222.19 1450.46,1224.61 1451.05,1224 1451.64,1224.86 1452.22,1224.49 1452.81,1222.74 1453.4,1223.54 1453.98,1220.73 1454.57,1221.73 1455.16,1221.13 1455.74,1223.2 1456.33,1218.88 1456.91,1218.5 1457.5,1218.23 1458.09,1217.92 1458.67,1218.83 1459.26,1216.06 1459.85,1218.69 1460.43,1218.58 1461.02,1218.4 1461.61,1217.92 1462.19,1216.1 1462.78,1214.44 1463.37,1211.88 1463.95,1210.87 1464.54,1210.87 1465.12,1213.8 1465.71,1216.25 1466.3,1216.07 1466.88,1214.78 1467.47,1214.58 1468.06,1214.42 1468.64,1214.57 1469.23,1213.35 1469.82,1217.68 1470.4,1217.3 1470.99,1218.04 1471.57,1216.29 1472.16,1217.2 1472.75,1215.79 1473.33,1217.25 1473.92,1215.56 1474.51,1215.56 1475.09,1216.79 1475.68,1216.46 1476.27,1216.36 1476.85,1216.25 1477.44,1216.12 1478.03,1214.41 1478.61,1214.47 1479.2,1215.52 1479.78,1215.44 1480.37,1215.23 1480.96,1213.89 1481.54,1213.86 1482.13,1215.24 1482.72,1219.08 1483.3,1215.97 1483.89,1214.27 1484.48,1215.79 1485.06,1215.42 1485.65,1212.66 1486.24,1214.09 1486.82,1214.09 1487.41,1213.92 1487.99,1213.91 1488.58,1216.85 1489.17,1216.59 1489.75,1213.81 1490.34,1215.03 1490.93,1213.64 1491.51,1211.38 1492.1,1211.61 1492.69,1210.56 1493.27,1211.02 1493.86,1212.36 1494.45,1212.49 1495.03,1212.75 1495.62,1212.8 1496.2,1214.03 1496.79,1214.17 1497.38,1214.17 1497.96,1214.23 1498.55,1215.38 1499.14,1219.36 1499.72,1217.73 1500.31,1221.88 1500.9,1225.34 1501.48,1224.65 1502.07,1223.99 1502.65,1223.34 1503.24,1223.1 1503.83,1222.56 1504.41,1222.3 1505,1218.89 1505.59,1218.79 1506.17,1218.73 1506.76,1215.72 1507.35,1218.23 1507.93,1217.85 1508.52,1219.11 1509.11,1221.5 1509.69,1223.99 1510.28,1223.28 1510.86,1221.36 1511.45,1219.46 1512.04,1219.21 1512.62,1221.72 1513.21,1220.08 1513.8,1218.41 1514.38,1218.1 1514.97,1213.77 1515.56,1213.84 1516.14,1215.09 1516.73,1216.06 1517.32,1214.45 1517.9,1214.05 1518.49,1216.55 1519.07,1217.78 1519.66,1215.02 1520.25,1215.19 1520.83,1213.86 1521.42,1213.76 1522.01,1215.14 1522.59,1213.93 1523.18,1214.06 1523.77,1215.32 1524.35,1217.8 1524.94,1218.84 1525.52,1218.61 1526.11,1218.13 1526.7,1215.18 1527.28,1213.98 1527.87,1214.19 1528.46,1215.47 1529.04,1209.85 1529.63,1207.59 1530.22,1205.31 1530.8,1208.28 1531.39,1205.7 1531.98,1206.15 1532.56,1206.28 1533.15,1204.78 1533.73,1204.02 1534.32,1203.12 1534.91,1203.72 1535.49,1207.18 1536.08,1208.92 1536.67,1207.97 1537.25,1207.16 1537.84,1210.39 1538.43,1209.44 1539.01,1211 1539.6,1209.59 1540.19,1211.17 1540.77,1206.92 1541.36,1204.61 1541.94,1206.85 1542.53,1207.33 1543.12,1210.7 1543.7,1210.86 1544.29,1213.62 1544.88,1213.95 1545.46,1215.41 1546.05,1216.38 1546.64,1216.12 1547.22,1214.38 1547.81,1213.93 1548.4,1211.38 1548.98,1209.92 1549.57,1210.24 1550.15,1208.86 1550.74,1207.97 1551.33,1208.62 1551.91,1209.09 1552.5,1208.21 1553.09,1207.01 1553.67,1208.72 1554.26,1206.33 1554.85,1209.36 1555.43,1211.02 1556.02,1211.04 1556.6,1208.5 1557.19,1208.76 1557.78,1208.84 1558.36,1206.18 1558.95,1206.83 1559.54,1208.72 1560.12,1207.93 1560.71,1211 1561.3,1212.75 1561.88,1213.79 1562.47,1215.08 1563.06,1218.02 1563.64,1219.47 1564.23,1222.07 1564.81,1221.63 1565.4,1222.69 1565.99,1225.12 1566.57,1225.57 1567.16,1223.79 1567.75,1223.12 1568.33,1219.96 1568.92,1218.41 1569.51,1217.89 1570.09,1218.95 1570.68,1217.65 1571.27,1216 1571.85,1212.15 1572.44,1210.64 1573.02,1211.13 1573.61,1210.15 1574.2,1209 1574.78,1210.47 1575.37,1210.73 1575.96,1210.62 1576.54,1213.39 1577.13,1214.84 1577.72,1218.83 1578.3,1217.27 1578.89,1217.09 1579.47,1217.03 1580.06,1216.95 1580.65,1215.65 1581.23,1217.14 1581.82,1218.8 1582.41,1218.59 1582.99,1215.51 1583.58,1214.13 1584.17,1214.15 1584.75,1213.88 1585.34,1213.92 1585.93,1213.84 1586.51,1213.67 1587.1,1213.45 1587.68,1213.61 1588.27,1216.37 1588.86,1217.26 1589.44,1218.59 1590.03,1218.6 1590.62,1219.91 1591.2,1219.49 1591.79,1217.58 1592.38,1216.18 1592.96,1217.48 1593.55,1213.07 1594.14,1213.03 1594.72,1212.84 1595.31,1213.85 1595.89,1215.14 1596.48,1214.91 1597.07,1213.56 1597.65,1213.7 1598.24,1212.36 1598.83,1214.02 1599.41,1213.97 1600,1213.86 1600.59,1216.64 1601.17,1219.29 1601.76,1218.9 1602.34,1219.84 1602.93,1219.33 1603.52,1220.65 1604.1,1220.28 1604.69,1218.23 1605.28,1220.49 1605.86,1217.57 1606.45,1216.03 1607.04,1214.5 1607.62,1213.22 1608.21,1213.21 1608.8,1211.88 1609.38,1210.34 1609.97,1209.35 1610.55,1207.94 1611.14,1207.79 1611.73,1209.45 1612.31,1211.3 1612.9,1212.65 1613.49,1216.53 1614.07,1216.3 1614.66,1216.21 1615.25,1217.57 1615.83,1216.12 1616.42,1217.33 1617.01,1218.54 1617.59,1218.45 1618.18,1219.36 1618.76,1217.41 1619.35,1219.89 1619.94,1218.43 1620.52,1216.65 1621.11,1215.22 1621.7,1213.49 1622.28,1216.05 1622.87,1217.12 1623.46,1216.95 1624.04,1218.15 1624.63,1219.25 1625.22,1220.26 1625.8,1221.21 1626.39,1219.46 1626.97,1218.91 1627.56,1218.76 1628.15,1218.54 1628.73,1222.36 1629.32,1223.53 1629.91,1224.47 1630.49,1218.07 1631.08,1217.99 1631.67,1218 1632.25,1219.2 1632.84,1218.67 1633.42,1219.63 1634.01,1219.14 1634.6,1217.48 1635.18,1215.81 1635.77,1215.71 1636.36,1214.16 1636.94,1214.27 1637.53,1214.03 1638.12,1216.84 1638.7,1213.51 1639.29,1212.18 1639.88,1216.15 1640.46,1217.25 1641.05,1217.31 1641.63,1221.01 1642.22,1219.27 1642.81,1220.18 1643.39,1219.68 1643.98,1219.34 1644.57,1221.96 1645.15,1221.59 1645.74,1220.21 1646.33,1218.25 1646.91,1217.99 1647.5,1217.72 1648.09,1216.14 1648.67,1210.86 1649.26,1209.67 1649.84,1212.66 1650.43,1210.19 1651.02,1206.42 1651.6,1208.53 1652.19,1208.89 1652.78,1207.71 1653.36,1209.37 1653.95,1211.06 1654.54,1212.51 1655.12,1211.13 1655.71,1211.33 1656.29,1211.56 1656.88,1210.38 1657.47,1214.67 1658.05,1213.14 1658.64,1214.46 1659.23,1213.07 1659.81,1213.25 1660.4,1214.6 1660.99,1211.56 1661.57,1207.43 1662.16,1207.82 1662.75,1211.19 1663.33,1208.59 1663.92,1207.8 1664.5,1208.12 1665.09,1208.41 1665.68,1207.19 1666.26,1206.32 1666.85,1208.08 1667.44,1213.78 1668.02,1213.74 1668.61,1211.45 1669.2,1208.96 1669.78,1210.55 1670.37,1209.38 1670.96,1206.9 1671.54,1206.16 1672.13,1206.47 1672.71,1206.96 1673.3,1206.1 1673.89,1207.99 1674.47,1208.36 1675.06,1207.24 1675.65,1205.17 1676.23,1201.73 1676.82,1201.07 1677.41,1203.35 1677.99,1202.18 1678.58,1201.78 1679.17,1201.4 1679.75,1203.63 1680.34,1205.56 1680.92,1205.97 1681.51,1205.07 1682.1,1205.73 1682.68,1204.78 1683.27,1205.51 1683.86,1208.59 1684.44,1210.39 1685.03,1208.99 1685.62,1210.4 1686.2,1210.82 1686.79,1211.05 1687.37,1211.29 1687.96,1210.27 1688.55,1209.12 1689.13,1205.22 1689.72,1205.75 1690.31,1206.23 1690.89,1208.01 1691.48,1208.39 1692.07,1207.22 1692.65,1209.09 1693.24,1212.21 1693.83,1213.7 1694.41,1210.62 1695,1211.11 1695.58,1211.2 1696.17,1209.92 1696.76,1207.59 1697.34,1207.72 1697.93,1205.27 1698.52,1206.98 1699.1,1207.45 1699.69,1202.36 1700.28,1203.07 1700.86,1203.71 1701.45,1204.18 1702.04,1207.43 1702.62,1207.79 1703.21,1210.58 1703.79,1213.68 1704.38,1213.88 1704.97,1215.05 1705.55,1217.69 1706.14,1217.68 1706.73,1217.23 1707.31,1218.31 1707.9,1218.07 1708.49,1216.47 1709.07,1217.87 1709.66,1216.34 1710.24,1217.75 1710.83,1216.32 1711.42,1216.3 1712,1215.12 1712.59,1215.03 1713.18,1219.04 1713.76,1220.1 1714.35,1219.9 1714.94,1217.13 1715.52,1216.74 1716.11,1215.35 1716.7,1215.04 1717.28,1215.06 1717.87,1213.43 1718.45,1213.47 1719.04,1214.88 1719.63,1218.62 1720.21,1218.43 1720.8,1218.39 1721.39,1215.45 1721.97,1216.6 1722.56,1215.31 1723.15,1215.07 1723.73,1215.03 1724.32,1215.05 1724.91,1216.29 1725.49,1215.13 1726.08,1217.66 1726.66,1216.11 1727.25,1214.59 1727.84,1213.2 1728.42,1212.94 1729.01,1215.65 1729.6,1216.81 1730.18,1215.4 1730.77,1215.28 1731.36,1213.71 1731.94,1216.56 1732.53,1215.14 1733.11,1216.69 1733.7,1216.51 1734.29,1216.37 1734.87,1213.67 1735.46,1213.75 1736.05,1212.47 1736.63,1210.97 1737.22,1212.36 1737.81,1212.32 1738.39,1213.79 1738.98,1213.68 1739.57,1213.89 1740.15,1213.76 1740.74,1212.48 1741.32,1214.03 1741.91,1216.64 1742.5,1219.09 1743.08,1217.3 1743.67,1214.2 1744.26,1216.69 1744.84,1219.17 1745.43,1217.61 1746.02,1217.44 1746.6,1217 1747.19,1216.96 1747.78,1218.26 1748.36,1217.98 1748.95,1218.88 1749.53,1220.2 1750.12,1218.64 1750.71,1219.69 1751.29,1219.28 1751.88,1216.43 1752.47,1219.04 1753.05,1220.32 1753.64,1222.68 1754.23,1224.84 1754.81,1224.11 1755.4,1229.08 1755.99,1225.55 1756.57,1224.9 1757.16,1223.22 1757.74,1222.73 1758.33,1223.54 1758.92,1220.69 1759.5,1220.3 1760.09,1218.47 1760.68,1218.39 1761.26,1220.78 1761.85,1222.95 1762.44,1222.72 1763.02,1220.83 1763.61,1221.64 1764.19,1219.72 1764.78,1220.86 1765.37,1216.41 1765.95,1214.75 1766.54,1214.91 1767.13,1213.66 1767.71,1215.26 1768.3,1216.58 1768.89,1215.26 1769.47,1215.44 1770.06,1213.79 1770.65,1211.19 1771.23,1213.88 1771.82,1215.41 1772.4,1215.37 1772.99,1211.26 1773.58,1209.92 1774.16,1211.4 1774.75,1210.31 1775.34,1210.34 1775.92,1211.92 1776.51,1213.39 1777.1,1214.84 1777.68,1216.46 1778.27,1219.1 1778.86,1220.34 1779.44,1216.89 1780.03,1213.99 1780.61,1214.2 1781.2,1216.79 1781.79,1216.51 1782.37,1216.15 1782.96,1216.22 1783.55,1216.3 1784.13,1214.75 1784.72,1217.63 1785.31,1217.36 1785.89,1218.67 1786.48,1217.05 1787.06,1215.57 1787.65,1216.75 1788.24,1217.75 1788.82,1216.27 1789.41,1216.11 1790,1215.78 1790.58,1213.25 1791.17,1213.53 1791.76,1212.34 1792.34,1212.58 1792.93,1215.33 1793.52,1215.35 1794.1,1214 1794.69,1214.31 1795.27,1215.57 1795.86,1215.3 1796.45,1215.4 1797.03,1216.55 1797.62,1216.14 1798.21,1214.79 1798.79,1213.72 1799.38,1209.65 1799.97,1208.22 1800.55,1207.11 1801.14,1207.69 1801.73,1206.72 1802.31,1209.73 1802.9,1210.05 1803.48,1211.63 1804.07,1210.19 1804.66,1211.49 1805.24,1212.92 1805.83,1211.66 1806.42,1211.65 1807,1212.99 1807.59,1211.87 1808.18,1210.81 1808.76,1209.14 1809.35,1208.24 1809.94,1210.14 1810.52,1211.68 1811.11,1214.38 1811.69,1213.14 1812.28,1215.71 1812.87,1212.92 1813.45,1212.69 1814.04,1211.45 1814.63,1213.01 1815.21,1214.3 1815.8,1215.82 1816.39,1216.93 1816.97,1218.27 1817.56,1215.4 1818.14,1213.84 1818.73,1214.96 1819.32,1213.42 1819.9,1213.38 1820.49,1212.12 1821.08,1213.51 1821.66,1212.05 1822.25,1210.77 1822.84,1210.86 1823.42,1211.06 1824.01,1211.38 1824.6,1212.68 1825.18,1210.06 1825.77,1210.23 1826.35,1210.44 1826.94,1210.3 1827.53,1209.38 1828.11,1208.15 1828.7,1209.88 1829.29,1209.9 1829.87,1211.78 1830.46,1213.17 1831.05,1211.77 1831.63,1211.76 1832.22,1214.17 1832.81,1215.61 1833.39,1214.13 1833.98,1215.6 1834.56,1217.08 1835.15,1214.22 1835.74,1215.86 1836.32,1216.85 1836.91,1216.83 1837.5,1215.56 1838.08,1215.51 1838.67,1218.16 1839.26,1217.95 1839.84,1220.56 1840.43,1221.61 1841.01,1221.31 1841.6,1219.67 1842.19,1219.52 1842.77,1220.45 1843.36,1219.99 1843.95,1217.14 1844.53,1218.31 1845.12,1219.55 1845.71,1220.58 1846.29,1218.75 1846.88,1218.47 1847.47,1216.66 1848.05,1216.7 1848.64,1217.96 1849.22,1216.61 1849.81,1216.15 1850.4,1217.45 1850.98,1217.14 1851.57,1214 1852.16,1212.6 1852.74,1215.09 1853.33,1215.01 1853.92,1216.11 1854.5,1215.97 1855.09,1211.78 1855.68,1214.78 1856.26,1212.32 1856.85,1212.23 1857.43,1212.35 1858.02,1212.25 1858.61,1213.54 1859.19,1213.62 1859.78,1211.94 1860.37,1213.63 1860.95,1215.1 1861.54,1214.97 1862.13,1214.91 1862.71,1214.96 1863.3,1214.75 1863.88,1214.64 1864.47,1214.42 1865.06,1211.87 1865.64,1212.07 1866.23,1212.05 1866.82,1210.62 1867.4,1210.93 1867.99,1209.9 1868.58,1207.05 1869.16,1210.17 1869.75,1210.53 1870.34,1208.02 1870.92,1208.49 1871.51,1206.1 1872.09,1206.4 1872.68,1204.36 1873.27,1200.83 1873.85,1204.27 1874.44,1206.28 1875.03,1209.51 1875.61,1213.55 1876.2,1211.11 1876.79,1211.17 1877.37,1211.48 1877.96,1209.05 1878.55,1211.98 1879.13,1214.7 1879.72,1211.92 1880.3,1212.38 1880.89,1212.61 1881.48,1212.21 1882.06,1211.27 1882.65,1213.93 1883.24,1213.94 1883.82,1214.08 1884.41,1212.84 1885,1213.06 1885.58,1213.08 1886.17,1214.31 1886.76,1213.21 1887.34,1210.73 1887.93,1210.94 1888.51,1209.77 1889.1,1210.1 1889.69,1211.95 1890.27,1212.01 1890.86,1212.35 1891.45,1214.02 1892.03,1214.11 1892.62,1214.22 1893.21,1212.57 1893.79,1210.05 1894.38,1210.04 1894.96,1210.21 1895.55,1213.24 1896.14,1214.98 1896.72,1215.07 1897.31,1216.44 1897.9,1217.82 1898.48,1216.33 1899.07,1217.59 1899.66,1218.63 1900.24,1222.47 1900.83,1226.18 1901.42,1225.66 1902,1225.19 1902.59,1224.48 1903.17,1226.43 1903.76,1225.74 1904.35,1223.89 1904.93,1223.25 1905.52,1221.64 1906.11,1221.49 1906.69,1222.55 1907.28,1219.35 1907.87,1219.4 1908.45,1219.2 1909.04,1219.03 1909.63,1218.84 1910.21,1218.48 1910.8,1218.07 1911.38,1216.68 1911.97,1215.28 1912.56,1213.74 1913.14,1213.64 1913.73,1217.66 1914.32,1216.14 1914.9,1215.9 1915.49,1218.43 1916.08,1216.98 1916.66,1215.46 1917.25,1213.78 1917.83,1212.48 1918.42,1212.4 1919.01,1213.77 1919.59,1213.47 1920.18,1213.28 1920.77,1211.74 1921.35,1210.23 1921.94,1204.89 1922.53,1209.61 1923.11,1211 1923.7,1209.7 1924.29,1211 1924.87,1212.55 1925.46,1212.51 1926.04,1216.51 1926.63,1216.12 1927.22,1214.38 1927.8,1214.73 1928.39,1215.89 1928.98,1214.61 1929.56,1214.52 1930.15,1212.99 1930.74,1214.5 1931.32,1213.19 1931.91,1214.46 1932.5,1214.18 1933.08,1211.45 1933.67,1211.17 1934.25,1208.66 1934.84,1208.89 1935.43,1207.82 1936.01,1211.96 1936.6,1212.18 1937.19,1213.73 1937.77,1213.98 1938.36,1215.41 1938.95,1214.27 1939.53,1216.96 1940.12,1216.82 1940.71,1216.38 1941.29,1216.2 1941.88,1215.99 1942.46,1218.86 1943.05,1221.36 1943.64,1218.07 1944.22,1220.23 1944.81,1219.81 1945.4,1217 1945.98,1214.12 1946.57,1215.37 1947.16,1216.66 1947.74,1215.26 1948.33,1212.34 1948.91,1212.34 1949.5,1212.26 1950.09,1216.51 1950.67,1213.62 1951.26,1215.04 1951.85,1216.18 1952.43,1216.08 1953.02,1216.12 1953.61,1214.87 1954.19,1212.11 1954.78,1212.17 1955.37,1211.18 1955.95,1213.93 1956.54,1212.56 1957.12,1210.15 1957.71,1217.05 1958.3,1215.55 1958.88,1213.97 1959.47,1213.84 1960.06,1212.62 1960.64,1211.31 1961.23,1208.43 1961.82,1208.77 1962.4,1207.66 1962.99,1209.19 1963.58,1208.17 1964.16,1206.87 1964.75,1206.94 1965.33,1207.03 1965.92,1208.63 1966.51,1206.68 1967.09,1207.22 1967.68,1207.38 1968.27,1210.41 1968.85,1211.68 1969.44,1210.39 1970.03,1210.68 1970.61,1209.41 1971.2,1212.51 1971.78,1213.82 1972.37,1215.06 1972.96,1215 1973.54,1214.62 1974.13,1215.93 1974.72,1215.61 1975.3,1217.13 1975.89,1218.79 1976.48,1217.02 1977.06,1221.04 1977.65,1220.78 1978.24,1219.25 1978.82,1216.09 1979.41,1215.88 1979.99,1215.79 1980.58,1217.28 1981.17,1217.14 1981.75,1219.79 1982.34,1216.79 1982.93,1217.63 1983.51,1216.34 1984.1,1215.12 1984.69,1219.09 1985.27,1218.84 1985.86,1218.3 1986.45,1219.54 1987.03,1219.42 1987.62,1217.94 1988.2,1217.67 1988.79,1216.08 1989.38,1215.92 1989.96,1215.94 1990.55,1213.16 1991.14,1210.3 1991.72,1207.54 1992.31,1207.9 1992.9,1205.54 1993.48,1208.6 1994.07,1210.2 1994.65,1215.68 1995.24,1216.75 1995.83,1215.07 1996.41,1217.73 1997,1213.35 1997.59,1216.22 1998.17,1218.87 1998.76,1217.19 1999.35,1218.59 1999.93,1216.99 2000.52,1217.28 2001.11,1217 2001.69,1219.59 2002.28,1217.8 2002.86,1214.88 2003.45,1217.34 2004.04,1218.53 2004.62,1219.62 2005.21,1219.16 2005.8,1218.8 2006.38,1219.92 2006.97,1218.04 2007.56,1215.48 2008.14,1215.39 2008.73,1215.14 2009.32,1213.77 2009.9,1213.64 2010.49,1216.58 2011.07,1218.01 2011.66,1216.56 2012.25,1217.68 2012.83,1216.34 2013.42,1216.04 2014.01,1216.21 2014.59,1216.24 2015.18,1217.32 2015.77,1216.04 2016.35,1215.95 2016.94,1218.63 2017.53,1218.12 2018.11,1215.45 2018.7,1214.44 2019.28,1216.11 2019.87,1217.47 2020.46,1221.28 2021.04,1223.59 2021.63,1221.31 2022.22,1222.1 2022.8,1221.67 2023.39,1222.97 2023.98,1219.68 2024.56,1222.13 2025.15,1222.89 2025.73,1226.76 2026.32,1226.4 2026.91,1224.42 2027.49,1223.66 2028.08,1222.76 2028.67,1224.94 2029.25,1227.02 2029.84,1227.6 2030.43,1224.52 2031.01,1222.53 2031.6,1218 2032.19,1214.73 2032.77,1214.65 2033.36,1213.46 2033.94,1213.45 2034.53,1214.91 2035.12,1215.92 2035.7,1212.63 2036.29,1212.89 2036.88,1211.56 2037.46,1208.97 2038.05,1209.05 2038.64,1206.3 2039.22,1206.96 2039.81,1204.28 2040.4,1203.37 2040.98,1205.21 2041.57,1203.01 2042.15,1203.55 2042.74,1206.88 2043.33,1208.56 2043.91,1210.02 2044.5,1212.96 2045.09,1213.08 2045.67,1215.92 2046.26,1211.42 2046.85,1207.53 2047.43,1209.6 2048.02,1208.39 2048.6,1206.04 2049.19,1206.71 2049.78,1206.96 2050.36,1207.26 2050.95,1207.39 2051.54,1207.55 2052.12,1209 2052.71,1210.48 2053.3,1209.58 2053.88,1209.63 2054.47,1207.24 2055.06,1210.33 2055.64,1213.37 2056.23,1212.34 2056.81,1209.73 2057.4,1208.76 2057.99,1206.17 2058.57,1204.01 2059.16,1204.62 2059.75,1205.04 2060.33,1206.92 2060.92,1204.53 2061.51,1206.37 2062.09,1205.11 2062.68,1208.15 2063.27,1209.63 2063.85,1211.12 2064.44,1212.46 2065.02,1211.24 2065.61,1208.55 2066.2,1206.07 2066.78,1208.06 2067.37,1208.33 2067.96,1207.06 2068.54,1204.6 2069.13,1203.95 2069.72,1207.05 2070.3,1208.72 2070.89,1208.73 2071.48,1210.59 2072.06,1208.16 2072.65,1209.89 2073.23,1207.45 2073.82,1207.98 2074.41,1209.88 2074.99,1211.51 2075.58,1210.66 2076.17,1208.08 2076.75,1206.79 2077.34,1209.47 2077.93,1212.17 2078.51,1214.16 2079.1,1215.51 2079.68,1215.44 2080.27,1214.36 2080.86,1217.12 2081.44,1215.68 2082.03,1213.09 2082.62,1213.49 2083.2,1216.04 2083.79,1216.07 2084.38,1214.69 2084.96,1214.47 2085.55,1214.44 2086.14,1211.63 2086.72,1211.92 2087.31,1213.31 2087.89,1211.7 2088.48,1210.78 2089.07,1209.53 2089.65,1208.51 2090.24,1209.88 2090.83,1208.72 2091.41,1209.12 2092,1207.87 2092.59,1206.76 2093.17,1205.83 2093.76,1204.9 2094.35,1206.88 2094.93,1211.55 2095.52,1211.62 2096.1,1217.22 2096.69,1214.28 2097.28,1212.62 2097.86,1213.65 2098.45,1216.27 2099.04,1215.18 2099.62,1214.01 2100.21,1216.56 2100.8,1216.56 2101.38,1219.16 2101.97,1220.19 2102.55,1219.7 2103.14,1218.1 2103.73,1218.02 2104.31,1216.26 2104.9,1214.78 2105.49,1217.21 2106.07,1218.59 2106.66,1218.27 2107.25,1217.92 2107.83,1217.65 2108.42,1214.68 2109.01,1217.14 2109.59,1216.89 2110.18,1216.75 2110.76,1217.92 2111.35,1221.59 2111.94,1222.57 2112.52,1219.55 2113.11,1217.62 2113.7,1218.98 2114.28,1217.46 2114.87,1217.57 2115.46,1216.24 2116.04,1216.22 2116.63,1217.4 2117.22,1218.57 2117.8,1214.33 2118.39,1211.65 2118.97,1212.94 2119.56,1211.33 2120.15,1211.62 2120.73,1210.58 2121.32,1212.35 2121.91,1211.17 2122.49,1210.02 2123.08,1210.25 2123.67,1209.08 2124.25,1210.63 2124.84,1209.49 2125.42,1208.06 2126.01,1209.78 2126.6,1207.07 2127.18,1207.5 2127.77,1210.48 2128.36,1210.52 2128.94,1210.76 2129.53,1210.97 2130.12,1209.87 2130.7,1208.9 2131.29,1211.78 2131.88,1213.3 2132.46,1211.8 2133.05,1212.27 2133.63,1212.32 2134.22,1213.77 2134.81,1210.89 2135.39,1211.08 2135.98,1211.38 2136.57,1213.03 2137.15,1214.58 2137.74,1216 2138.33,1215.7 2138.91,1215.8 2139.5,1217.44 2140.09,1217.39 2140.67,1214.48 2141.26,1216.91 2141.84,1218.04 2142.43,1220.5 2143.02,1219.79 2143.6,1218.19 2144.19,1220.92 2144.78,1219.39 2145.36,1218.8 2145.95,1221.3 2146.54,1219.79 2147.12,1221.03 2147.71,1223.23 2148.3,1221.21 2148.88,1222.13 2149.47,1217.76 2150.05,1218.83 2150.64,1223.87 2151.23,1220.41 2151.81,1220.11 2152.4,1221.27 2152.99,1220.76 2153.57,1220.33 2154.16,1222.74 2154.75,1221.08 2155.33,1222.05 2155.92,1218.89 2156.5,1221.3 2157.09,1219.4 2157.68,1218.88 2158.26,1218.52 \"/>\n<path clip-path=\"url(#clip372)\" d=\"M986.025 1214.63 L986.612 1214.63 L987.198 1214.63 L987.785 1214.63 L988.371 1214.63 L988.957 1214.63 L989.544 1214.63 L990.13 1214.63 L990.717 1214.63 L991.303 1214.63 L991.889 1214.63 L992.476 1214.63 L993.062 1214.63 L993.649 1214.63 L994.235 1214.63 L994.822 1214.63 L995.408 1214.63 L995.994 1214.63 L996.581 1214.63 L997.167 1214.63 L997.754 1214.63 L998.34 1214.63 L998.926 1214.63 L999.513 1214.63 L1000.1 1214.63 L1000.69 1214.63 L1001.27 1214.63 L1001.86 1214.63 L1002.44 1214.63 L1003.03 1214.63 L1003.62 1214.63 L1004.2 1214.63 L1004.79 1214.63 L1005.38 1214.63 L1005.96 1214.63 L1006.55 1214.63 L1007.14 1214.63 L1007.72 1214.63 L1008.31 1214.63 L1008.9 1214.63 L1009.48 1214.63 L1010.07 1214.63 L1010.65 1214.63 L1011.24 1214.63 L1011.83 1214.63 L1012.41 1214.63 L1013 1214.63 L1013.59 1214.63 L1014.17 1214.63 L1014.76 1214.63 L1015.35 1214.63 L1015.93 1214.63 L1016.52 1214.63 L1017.11 1214.63 L1017.69 1214.63 L1018.28 1214.63 L1018.86 1214.63 L1019.45 1214.63 L1020.04 1214.63 L1020.62 1214.63 L1021.21 1214.63 L1021.8 1214.63 L1022.38 1214.63 L1022.97 1214.63 L1023.56 1214.63 L1024.14 1214.63 L1024.73 1214.63 L1025.32 1214.63 L1025.9 1214.63 L1026.49 1214.63 L1027.07 1214.63 L1027.66 1214.63 L1028.25 1214.63 L1028.83 1214.63 L1029.42 1214.63 L1030.01 1214.63 L1030.59 1214.63 L1031.18 1214.63 L1031.77 1214.63 L1032.35 1214.63 L1032.94 1214.63 L1033.52 1214.63 L1034.11 1214.63 L1034.7 1214.63 L1035.28 1214.63 L1035.87 1214.63 L1036.46 1214.63 L1037.04 1214.63 L1037.63 1214.63 L1038.22 1214.63 L1038.8 1214.63 L1039.39 1214.63 L1039.98 1214.63 L1040.56 1214.63 L1041.15 1214.63 L1041.73 1214.63 L1042.32 1214.63 L1042.91 1214.63 L1043.49 1214.63 L1044.08 1214.63 L1044.67 1214.63 L1045.25 1214.63 L1045.84 1214.63 L1046.43 1214.63 L1047.01 1214.63 L1047.6 1214.63 L1048.19 1214.63 L1048.77 1214.63 L1049.36 1214.63 L1049.94 1214.63 L1050.53 1214.63 L1051.12 1214.63 L1051.7 1214.63 L1052.29 1214.63 L1052.88 1214.63 L1053.46 1214.63 L1054.05 1214.63 L1054.64 1214.63 L1055.22 1214.63 L1055.81 1214.63 L1056.39 1214.63 L1056.98 1214.63 L1057.57 1214.63 L1058.15 1214.63 L1058.74 1214.63 L1059.33 1214.63 L1059.91 1214.63 L1060.5 1214.63 L1061.09 1214.63 L1061.67 1214.63 L1062.26 1214.63 L1062.85 1214.63 L1063.43 1214.63 L1064.02 1214.63 L1064.6 1214.63 L1065.19 1214.63 L1065.78 1214.63 L1066.36 1214.63 L1066.95 1214.63 L1067.54 1214.63 L1068.12 1214.63 L1068.71 1214.63 L1069.3 1214.63 L1069.88 1214.63 L1070.47 1214.63 L1071.06 1214.63 L1071.64 1214.63 L1072.23 1214.63 L1072.81 1214.63 L1073.4 1214.63 L1073.99 1214.63 L1074.57 1214.63 L1075.16 1214.63 L1075.75 1214.63 L1076.33 1214.63 L1076.92 1214.63 L1077.51 1214.63 L1078.09 1214.63 L1078.68 1214.63 L1079.26 1214.63 L1079.85 1214.63 L1080.44 1214.63 L1081.02 1214.63 L1081.61 1214.63 L1082.2 1214.63 L1082.78 1214.63 L1083.37 1214.63 L1083.96 1214.63 L1084.54 1214.63 L1085.13 1214.63 L1085.72 1214.63 L1086.3 1214.63 L1086.89 1214.63 L1087.47 1214.63 L1088.06 1214.63 L1088.65 1214.63 L1089.23 1214.63 L1089.82 1214.63 L1090.41 1214.63 L1090.99 1214.63 L1091.58 1214.63 L1092.17 1214.63 L1092.75 1214.63 L1093.34 1214.63 L1093.93 1214.63 L1094.51 1214.63 L1095.1 1214.63 L1095.68 1214.63 L1096.27 1214.63 L1096.86 1214.63 L1097.44 1214.63 L1098.03 1214.63 L1098.62 1214.63 L1099.2 1214.63 L1099.79 1214.63 L1100.38 1214.63 L1100.96 1214.63 L1101.55 1214.63 L1102.14 1214.63 L1102.72 1214.63 L1103.31 1214.63 L1103.89 1214.63 L1104.48 1214.63 L1105.07 1214.63 L1105.65 1214.63 L1106.24 1214.63 L1106.83 1214.63 L1107.41 1214.63 L1108 1214.63 L1108.59 1214.63 L1109.17 1214.63 L1109.76 1214.63 L1110.34 1214.63 L1110.93 1214.63 L1111.52 1214.63 L1112.1 1214.63 L1112.69 1214.63 L1113.28 1214.63 L1113.86 1214.63 L1114.45 1214.63 L1115.04 1214.63 L1115.62 1214.63 L1116.21 1214.63 L1116.8 1214.63 L1117.38 1214.63 L1117.97 1214.63 L1118.55 1214.63 L1119.14 1214.63 L1119.73 1214.63 L1120.31 1214.63 L1120.9 1214.63 L1121.49 1214.63 L1122.07 1214.63 L1122.66 1214.63 L1123.25 1214.63 L1123.83 1214.63 L1124.42 1214.63 L1125.01 1214.63 L1125.59 1214.63 L1126.18 1214.63 L1126.76 1214.63 L1127.35 1214.63 L1127.94 1214.63 L1128.52 1214.63 L1129.11 1214.63 L1129.7 1214.63 L1130.28 1214.63 L1130.87 1214.63 L1131.46 1214.63 L1132.04 1214.63 L1132.63 1214.63 L1133.21 1214.63 L1133.8 1214.63 L1134.39 1214.63 L1134.97 1214.63 L1135.56 1214.63 L1136.15 1214.63 L1136.73 1214.63 L1137.32 1214.63 L1137.91 1214.63 L1138.49 1214.63 L1139.08 1214.63 L1139.67 1214.63 L1140.25 1214.63 L1140.84 1214.63 L1141.42 1214.63 L1142.01 1214.63 L1142.6 1214.63 L1143.18 1214.63 L1143.77 1214.63 L1144.36 1214.63 L1144.94 1214.63 L1145.53 1214.63 L1146.12 1214.63 L1146.7 1214.63 L1147.29 1214.63 L1147.88 1214.63 L1148.46 1214.63 L1149.05 1214.63 L1149.63 1214.63 L1150.22 1214.63 L1150.81 1214.63 L1151.39 1214.63 L1151.98 1214.63 L1152.57 1214.63 L1153.15 1214.63 L1153.74 1214.63 L1154.33 1214.63 L1154.91 1214.63 L1155.5 1214.63 L1156.09 1214.63 L1156.67 1214.63 L1157.26 1214.63 L1157.84 1214.63 L1158.43 1214.63 L1159.02 1214.63 L1159.6 1214.63 L1160.19 1214.63 L1160.78 1214.63 L1161.36 1214.63 L1161.95 1214.63 L1162.54 1214.63 L1163.12 1214.63 L1163.71 1214.63 L1164.29 1214.63 L1164.88 1214.63 L1165.47 1214.63 L1166.05 1214.63 L1166.64 1214.63 L1167.23 1214.63 L1167.81 1214.63 L1168.4 1214.63 L1168.99 1214.63 L1169.57 1214.63 L1170.16 1214.63 L1170.75 1214.63 L1171.33 1214.63 L1171.92 1214.63 L1172.5 1214.63 L1173.09 1214.63 L1173.68 1214.63 L1174.26 1214.63 L1174.85 1214.63 L1175.44 1214.63 L1176.02 1214.63 L1176.61 1214.63 L1177.2 1214.63 L1177.78 1214.63 L1178.37 1214.63 L1178.96 1214.63 L1179.54 1214.63 L1180.13 1214.63 L1180.71 1214.63 L1181.3 1214.63 L1181.89 1214.63 L1182.47 1214.63 L1183.06 1214.63 L1183.65 1214.63 L1184.23 1214.63 L1184.82 1214.63 L1185.41 1214.63 L1185.99 1214.63 L1186.58 1214.63 L1187.16 1214.63 L1187.75 1214.63 L1188.34 1214.63 L1188.92 1214.63 L1189.51 1214.63 L1190.1 1214.63 L1190.68 1214.63 L1191.27 1214.63 L1191.86 1214.63 L1192.44 1214.63 L1193.03 1214.63 L1193.62 1214.63 L1194.2 1214.63 L1194.79 1214.63 L1195.37 1214.63 L1195.96 1214.63 L1196.55 1214.63 L1197.13 1214.63 L1197.72 1214.63 L1198.31 1214.63 L1198.89 1214.63 L1199.48 1214.63 L1200.07 1214.63 L1200.65 1214.63 L1201.24 1214.63 L1201.83 1214.63 L1202.41 1214.63 L1203 1214.63 L1203.58 1214.63 L1204.17 1214.63 L1204.76 1214.63 L1205.34 1214.63 L1205.93 1214.63 L1206.52 1214.63 L1207.1 1214.63 L1207.69 1214.63 L1208.28 1214.63 L1208.86 1214.63 L1209.45 1214.63 L1210.03 1214.63 L1210.62 1214.63 L1211.21 1214.63 L1211.79 1214.63 L1212.38 1214.63 L1212.97 1214.63 L1213.55 1214.63 L1214.14 1214.63 L1214.73 1214.63 L1215.31 1214.63 L1215.9 1214.63 L1216.49 1214.63 L1217.07 1214.63 L1217.66 1214.63 L1218.24 1214.63 L1218.83 1214.63 L1219.42 1214.63 L1220 1214.63 L1220.59 1214.63 L1221.18 1214.63 L1221.76 1214.63 L1222.35 1214.63 L1222.94 1214.63 L1223.52 1214.63 L1224.11 1214.63 L1224.7 1214.63 L1225.28 1214.63 L1225.87 1214.63 L1226.45 1214.63 L1227.04 1214.63 L1227.63 1214.63 L1228.21 1214.63 L1228.8 1214.63 L1229.39 1214.63 L1229.97 1214.63 L1230.56 1214.63 L1231.15 1214.63 L1231.73 1214.63 L1232.32 1214.63 L1232.91 1214.63 L1233.49 1214.63 L1234.08 1214.63 L1234.66 1214.63 L1235.25 1214.63 L1235.84 1214.63 L1236.42 1214.63 L1237.01 1214.63 L1237.6 1214.63 L1238.18 1214.63 L1238.77 1214.63 L1239.36 1214.63 L1239.94 1214.63 L1240.53 1214.63 L1241.11 1214.63 L1241.7 1214.63 L1242.29 1214.63 L1242.87 1214.63 L1243.46 1214.63 L1244.05 1214.63 L1244.63 1214.63 L1245.22 1214.63 L1245.81 1214.63 L1246.39 1214.63 L1246.98 1214.63 L1247.57 1214.63 L1248.15 1214.63 L1248.74 1214.63 L1249.32 1214.63 L1249.91 1214.63 L1250.5 1214.63 L1251.08 1214.63 L1251.67 1214.63 L1252.26 1214.63 L1252.84 1214.63 L1253.43 1214.63 L1254.02 1214.63 L1254.6 1214.63 L1255.19 1214.63 L1255.78 1214.63 L1256.36 1214.63 L1256.95 1214.63 L1257.53 1214.63 L1258.12 1214.63 L1258.71 1214.63 L1259.29 1214.63 L1259.88 1214.63 L1260.47 1214.63 L1261.05 1214.63 L1261.64 1214.63 L1262.23 1214.63 L1262.81 1214.63 L1263.4 1214.63 L1263.98 1214.63 L1264.57 1214.63 L1265.16 1214.63 L1265.74 1214.63 L1266.33 1214.63 L1266.92 1214.63 L1267.5 1214.63 L1268.09 1214.63 L1268.68 1214.63 L1269.26 1214.63 L1269.85 1214.63 L1270.44 1214.63 L1271.02 1214.63 L1271.61 1214.63 L1272.19 1214.63 L1272.78 1214.63 L1273.37 1214.63 L1273.95 1214.63 L1274.54 1214.63 L1275.13 1214.63 L1275.71 1214.63 L1276.3 1214.63 L1276.89 1214.63 L1277.47 1214.63 L1278.06 1214.63 L1278.65 1214.63 L1279.23 1214.63 L1279.82 1214.63 L1280.4 1214.63 L1280.99 1214.63 L1281.58 1214.63 L1282.16 1214.63 L1282.75 1214.63 L1283.34 1214.63 L1283.92 1214.63 L1284.51 1214.63 L1285.1 1214.63 L1285.68 1214.63 L1286.27 1214.63 L1286.86 1214.63 L1287.44 1214.63 L1288.03 1214.63 L1288.61 1214.63 L1289.2 1214.63 L1289.79 1214.63 L1290.37 1214.63 L1290.96 1214.63 L1291.55 1214.63 L1292.13 1214.63 L1292.72 1214.63 L1293.31 1214.63 L1293.89 1214.63 L1294.48 1214.63 L1295.06 1214.63 L1295.65 1214.63 L1296.24 1214.63 L1296.82 1214.63 L1297.41 1214.63 L1298 1214.63 L1298.58 1214.63 L1299.17 1214.63 L1299.76 1214.63 L1300.34 1214.63 L1300.93 1214.63 L1301.52 1214.63 L1302.1 1214.63 L1302.69 1214.63 L1303.27 1214.63 L1303.86 1214.63 L1304.45 1214.63 L1305.03 1214.63 L1305.62 1214.63 L1306.21 1214.63 L1306.79 1214.63 L1307.38 1214.63 L1307.97 1214.63 L1308.55 1214.63 L1309.14 1214.63 L1309.73 1214.63 L1310.31 1214.63 L1310.9 1214.63 L1311.48 1214.63 L1312.07 1214.63 L1312.66 1214.63 L1313.24 1214.63 L1313.83 1214.63 L1314.42 1214.63 L1315 1214.63 L1315.59 1214.63 L1316.18 1214.63 L1316.76 1214.63 L1317.35 1214.63 L1317.93 1214.63 L1318.52 1214.63 L1319.11 1214.63 L1319.69 1214.63 L1320.28 1214.63 L1320.87 1214.63 L1321.45 1214.63 L1322.04 1214.63 L1322.63 1214.63 L1323.21 1214.63 L1323.8 1214.63 L1324.39 1214.63 L1324.97 1214.63 L1325.56 1214.63 L1326.14 1214.63 L1326.73 1214.63 L1327.32 1214.63 L1327.9 1214.63 L1328.49 1214.63 L1329.08 1214.63 L1329.66 1214.63 L1330.25 1214.63 L1330.84 1214.63 L1331.42 1214.63 L1332.01 1214.63 L1332.6 1214.63 L1333.18 1214.63 L1333.77 1214.63 L1334.35 1214.63 L1334.94 1214.63 L1335.53 1214.63 L1336.11 1214.63 L1336.7 1214.63 L1337.29 1214.63 L1337.87 1214.63 L1338.46 1214.63 L1339.05 1214.63 L1339.63 1214.63 L1340.22 1214.63 L1340.8 1214.63 L1341.39 1214.63 L1341.98 1214.63 L1342.56 1214.63 L1343.15 1214.63 L1343.74 1214.63 L1344.32 1214.63 L1344.91 1214.63 L1345.5 1214.63 L1346.08 1214.63 L1346.67 1214.63 L1347.26 1214.63 L1347.84 1214.63 L1348.43 1214.63 L1349.01 1214.63 L1349.6 1214.63 L1350.19 1214.63 L1350.77 1214.63 L1351.36 1214.63 L1351.95 1214.63 L1352.53 1214.63 L1353.12 1214.63 L1353.71 1214.63 L1354.29 1214.63 L1354.88 1214.63 L1355.47 1214.63 L1356.05 1214.63 L1356.64 1214.63 L1357.22 1214.63 L1357.81 1214.63 L1358.4 1214.63 L1358.98 1214.63 L1359.57 1214.63 L1360.16 1214.63 L1360.74 1214.63 L1361.33 1214.63 L1361.92 1214.63 L1362.5 1214.63 L1363.09 1214.63 L1363.68 1214.63 L1364.26 1214.63 L1364.85 1214.63 L1365.43 1214.63 L1366.02 1214.63 L1366.61 1214.63 L1367.19 1214.63 L1367.78 1214.63 L1368.37 1214.63 L1368.95 1214.63 L1369.54 1214.63 L1370.13 1214.63 L1370.71 1214.63 L1371.3 1214.63 L1371.88 1214.63 L1372.47 1214.63 L1373.06 1214.63 L1373.64 1214.63 L1374.23 1214.63 L1374.82 1214.63 L1375.4 1214.63 L1375.99 1214.63 L1376.58 1214.63 L1377.16 1214.63 L1377.75 1214.63 L1378.34 1214.63 L1378.92 1214.63 L1379.51 1214.63 L1380.09 1214.63 L1380.68 1214.63 L1381.27 1214.63 L1381.85 1214.63 L1382.44 1214.63 L1383.03 1214.63 L1383.61 1214.63 L1384.2 1214.63 L1384.79 1214.63 L1385.37 1214.63 L1385.96 1214.63 L1386.55 1214.63 L1387.13 1214.63 L1387.72 1214.63 L1388.3 1214.63 L1388.89 1214.63 L1389.48 1214.63 L1390.06 1214.63 L1390.65 1214.63 L1391.24 1214.63 L1391.82 1214.63 L1392.41 1214.63 L1393 1214.63 L1393.58 1214.63 L1394.17 1214.63 L1394.75 1214.63 L1395.34 1214.63 L1395.93 1214.63 L1396.51 1214.63 L1397.1 1214.63 L1397.69 1214.63 L1398.27 1214.63 L1398.86 1214.63 L1399.45 1214.63 L1400.03 1214.63 L1400.62 1214.63 L1401.21 1214.63 L1401.79 1214.63 L1402.38 1214.63 L1402.96 1214.63 L1403.55 1214.63 L1404.14 1214.63 L1404.72 1214.63 L1405.31 1214.63 L1405.9 1214.63 L1406.48 1214.63 L1407.07 1214.63 L1407.66 1214.63 L1408.24 1214.63 L1408.83 1214.63 L1409.42 1214.63 L1410 1214.63 L1410.59 1214.63 L1411.17 1214.63 L1411.76 1214.63 L1412.35 1214.63 L1412.93 1214.63 L1413.52 1214.63 L1414.11 1214.63 L1414.69 1214.63 L1415.28 1214.63 L1415.87 1214.63 L1416.45 1214.63 L1417.04 1214.63 L1417.63 1214.63 L1418.21 1214.63 L1418.8 1214.63 L1419.38 1214.63 L1419.97 1214.63 L1420.56 1214.63 L1421.14 1214.63 L1421.73 1214.63 L1422.32 1214.63 L1422.9 1214.63 L1423.49 1214.63 L1424.08 1214.63 L1424.66 1214.63 L1425.25 1214.63 L1425.83 1214.63 L1426.42 1214.63 L1427.01 1214.63 L1427.59 1214.63 L1428.18 1214.63 L1428.77 1214.63 L1429.35 1214.63 L1429.94 1214.63 L1430.53 1214.63 L1431.11 1214.63 L1431.7 1214.63 L1432.29 1214.63 L1432.87 1214.63 L1433.46 1214.63 L1434.04 1214.63 L1434.63 1214.63 L1435.22 1214.63 L1435.8 1214.63 L1436.39 1214.63 L1436.98 1214.63 L1437.56 1214.63 L1438.15 1214.63 L1438.74 1214.63 L1439.32 1214.63 L1439.91 1214.63 L1440.5 1214.63 L1441.08 1214.63 L1441.67 1214.63 L1442.25 1214.63 L1442.84 1214.63 L1443.43 1214.63 L1444.01 1214.63 L1444.6 1214.63 L1445.19 1214.63 L1445.77 1214.63 L1446.36 1214.63 L1446.95 1214.63 L1447.53 1214.63 L1448.12 1214.63 L1448.7 1214.63 L1449.29 1214.63 L1449.88 1214.63 L1450.46 1214.63 L1451.05 1214.63 L1451.64 1214.63 L1452.22 1214.63 L1452.81 1214.63 L1453.4 1214.63 L1453.98 1214.63 L1454.57 1214.63 L1455.16 1214.63 L1455.74 1214.63 L1456.33 1214.63 L1456.91 1214.63 L1457.5 1214.63 L1458.09 1214.63 L1458.67 1214.63 L1459.26 1214.63 L1459.85 1214.63 L1460.43 1214.63 L1461.02 1214.63 L1461.61 1214.63 L1462.19 1214.63 L1462.78 1214.63 L1463.37 1214.63 L1463.95 1214.63 L1464.54 1214.63 L1465.12 1214.63 L1465.71 1214.63 L1466.3 1214.63 L1466.88 1214.63 L1467.47 1214.63 L1468.06 1214.63 L1468.64 1214.63 L1469.23 1214.63 L1469.82 1214.63 L1470.4 1214.63 L1470.99 1214.63 L1471.57 1214.63 L1472.16 1214.63 L1472.75 1214.63 L1473.33 1214.63 L1473.92 1214.63 L1474.51 1214.63 L1475.09 1214.63 L1475.68 1214.63 L1476.27 1214.63 L1476.85 1214.63 L1477.44 1214.63 L1478.03 1214.63 L1478.61 1214.63 L1479.2 1214.63 L1479.78 1214.63 L1480.37 1214.63 L1480.96 1214.63 L1481.54 1214.63 L1482.13 1214.63 L1482.72 1214.63 L1483.3 1214.63 L1483.89 1214.63 L1484.48 1214.63 L1485.06 1214.63 L1485.65 1214.63 L1486.24 1214.63 L1486.82 1214.63 L1487.41 1214.63 L1487.99 1214.63 L1488.58 1214.63 L1489.17 1214.63 L1489.75 1214.63 L1490.34 1214.63 L1490.93 1214.63 L1491.51 1214.63 L1492.1 1214.63 L1492.69 1214.63 L1493.27 1214.63 L1493.86 1214.63 L1494.45 1214.63 L1495.03 1214.63 L1495.62 1214.63 L1496.2 1214.63 L1496.79 1214.63 L1497.38 1214.63 L1497.96 1214.63 L1498.55 1214.63 L1499.14 1214.63 L1499.72 1214.63 L1500.31 1214.63 L1500.9 1214.63 L1501.48 1214.63 L1502.07 1214.63 L1502.65 1214.63 L1503.24 1214.63 L1503.83 1214.63 L1504.41 1214.63 L1505 1214.63 L1505.59 1214.63 L1506.17 1214.63 L1506.76 1214.63 L1507.35 1214.63 L1507.93 1214.63 L1508.52 1214.63 L1509.11 1214.63 L1509.69 1214.63 L1510.28 1214.63 L1510.86 1214.63 L1511.45 1214.63 L1512.04 1214.63 L1512.62 1214.63 L1513.21 1214.63 L1513.8 1214.63 L1514.38 1214.63 L1514.97 1214.63 L1515.56 1214.63 L1516.14 1214.63 L1516.73 1214.63 L1517.32 1214.63 L1517.9 1214.63 L1518.49 1214.63 L1519.07 1214.63 L1519.66 1214.63 L1520.25 1214.63 L1520.83 1214.63 L1521.42 1214.63 L1522.01 1214.63 L1522.59 1214.63 L1523.18 1214.63 L1523.77 1214.63 L1524.35 1214.63 L1524.94 1214.63 L1525.52 1214.63 L1526.11 1214.63 L1526.7 1214.63 L1527.28 1214.63 L1527.87 1214.63 L1528.46 1214.63 L1529.04 1214.63 L1529.63 1214.63 L1530.22 1214.63 L1530.8 1214.63 L1531.39 1214.63 L1531.98 1214.63 L1532.56 1214.63 L1533.15 1214.63 L1533.73 1214.63 L1534.32 1214.63 L1534.91 1214.63 L1535.49 1214.63 L1536.08 1214.63 L1536.67 1214.63 L1537.25 1214.63 L1537.84 1214.63 L1538.43 1214.63 L1539.01 1214.63 L1539.6 1214.63 L1540.19 1214.63 L1540.77 1214.63 L1541.36 1214.63 L1541.94 1214.63 L1542.53 1214.63 L1543.12 1214.63 L1543.7 1214.63 L1544.29 1214.63 L1544.88 1214.63 L1545.46 1214.63 L1546.05 1214.63 L1546.64 1214.63 L1547.22 1214.63 L1547.81 1214.63 L1548.4 1214.63 L1548.98 1214.63 L1549.57 1214.63 L1550.15 1214.63 L1550.74 1214.63 L1551.33 1214.63 L1551.91 1214.63 L1552.5 1214.63 L1553.09 1214.63 L1553.67 1214.63 L1554.26 1214.63 L1554.85 1214.63 L1555.43 1214.63 L1556.02 1214.63 L1556.6 1214.63 L1557.19 1214.63 L1557.78 1214.63 L1558.36 1214.63 L1558.95 1214.63 L1559.54 1214.63 L1560.12 1214.63 L1560.71 1214.63 L1561.3 1214.63 L1561.88 1214.63 L1562.47 1214.63 L1563.06 1214.63 L1563.64 1214.63 L1564.23 1214.63 L1564.81 1214.63 L1565.4 1214.63 L1565.99 1214.63 L1566.57 1214.63 L1567.16 1214.63 L1567.75 1214.63 L1568.33 1214.63 L1568.92 1214.63 L1569.51 1214.63 L1570.09 1214.63 L1570.68 1214.63 L1571.27 1214.63 L1571.85 1214.63 L1572.44 1214.63 L1573.02 1214.63 L1573.61 1214.63 L1574.2 1214.63 L1574.78 1214.63 L1575.37 1214.63 L1575.96 1214.63 L1576.54 1214.63 L1577.13 1214.63 L1577.72 1214.63 L1578.3 1214.63 L1578.89 1214.63 L1579.47 1214.63 L1580.06 1214.63 L1580.65 1214.63 L1581.23 1214.63 L1581.82 1214.63 L1582.41 1214.63 L1582.99 1214.63 L1583.58 1214.63 L1584.17 1214.63 L1584.75 1214.63 L1585.34 1214.63 L1585.93 1214.63 L1586.51 1214.63 L1587.1 1214.63 L1587.68 1214.63 L1588.27 1214.63 L1588.86 1214.63 L1589.44 1214.63 L1590.03 1214.63 L1590.62 1214.63 L1591.2 1214.63 L1591.79 1214.63 L1592.38 1214.63 L1592.96 1214.63 L1593.55 1214.63 L1594.14 1214.63 L1594.72 1214.63 L1595.31 1214.63 L1595.89 1214.63 L1596.48 1214.63 L1597.07 1214.63 L1597.65 1214.63 L1598.24 1214.63 L1598.83 1214.63 L1599.41 1214.63 L1600 1214.63 L1600.59 1214.63 L1601.17 1214.63 L1601.76 1214.63 L1602.34 1214.63 L1602.93 1214.63 L1603.52 1214.63 L1604.1 1214.63 L1604.69 1214.63 L1605.28 1214.63 L1605.86 1214.63 L1606.45 1214.63 L1607.04 1214.63 L1607.62 1214.63 L1608.21 1214.63 L1608.8 1214.63 L1609.38 1214.63 L1609.97 1214.63 L1610.55 1214.63 L1611.14 1214.63 L1611.73 1214.63 L1612.31 1214.63 L1612.9 1214.63 L1613.49 1214.63 L1614.07 1214.63 L1614.66 1214.63 L1615.25 1214.63 L1615.83 1214.63 L1616.42 1214.63 L1617.01 1214.63 L1617.59 1214.63 L1618.18 1214.63 L1618.76 1214.63 L1619.35 1214.63 L1619.94 1214.63 L1620.52 1214.63 L1621.11 1214.63 L1621.7 1214.63 L1622.28 1214.63 L1622.87 1214.63 L1623.46 1214.63 L1624.04 1214.63 L1624.63 1214.63 L1625.22 1214.63 L1625.8 1214.63 L1626.39 1214.63 L1626.97 1214.63 L1627.56 1214.63 L1628.15 1214.63 L1628.73 1214.63 L1629.32 1214.63 L1629.91 1214.63 L1630.49 1214.63 L1631.08 1214.63 L1631.67 1214.63 L1632.25 1214.63 L1632.84 1214.63 L1633.42 1214.63 L1634.01 1214.63 L1634.6 1214.63 L1635.18 1214.63 L1635.77 1214.63 L1636.36 1214.63 L1636.94 1214.63 L1637.53 1214.63 L1638.12 1214.63 L1638.7 1214.63 L1639.29 1214.63 L1639.88 1214.63 L1640.46 1214.63 L1641.05 1214.63 L1641.63 1214.63 L1642.22 1214.63 L1642.81 1214.63 L1643.39 1214.63 L1643.98 1214.63 L1644.57 1214.63 L1645.15 1214.63 L1645.74 1214.63 L1646.33 1214.63 L1646.91 1214.63 L1647.5 1214.63 L1648.09 1214.63 L1648.67 1214.63 L1649.26 1214.63 L1649.84 1214.63 L1650.43 1214.63 L1651.02 1214.63 L1651.6 1214.63 L1652.19 1214.63 L1652.78 1214.63 L1653.36 1214.63 L1653.95 1214.63 L1654.54 1214.63 L1655.12 1214.63 L1655.71 1214.63 L1656.29 1214.63 L1656.88 1214.63 L1657.47 1214.63 L1658.05 1214.63 L1658.64 1214.63 L1659.23 1214.63 L1659.81 1214.63 L1660.4 1214.63 L1660.99 1214.63 L1661.57 1214.63 L1662.16 1214.63 L1662.75 1214.63 L1663.33 1214.63 L1663.92 1214.63 L1664.5 1214.63 L1665.09 1214.63 L1665.68 1214.63 L1666.26 1214.63 L1666.85 1214.63 L1667.44 1214.63 L1668.02 1214.63 L1668.61 1214.63 L1669.2 1214.63 L1669.78 1214.63 L1670.37 1214.63 L1670.96 1214.63 L1671.54 1214.63 L1672.13 1214.63 L1672.71 1214.63 L1673.3 1214.63 L1673.89 1214.63 L1674.47 1214.63 L1675.06 1214.63 L1675.65 1214.63 L1676.23 1214.63 L1676.82 1214.63 L1677.41 1214.63 L1677.99 1214.63 L1678.58 1214.63 L1679.17 1214.63 L1679.75 1214.63 L1680.34 1214.63 L1680.92 1214.63 L1681.51 1214.63 L1682.1 1214.63 L1682.68 1214.63 L1683.27 1214.63 L1683.86 1214.63 L1684.44 1214.63 L1685.03 1214.63 L1685.62 1214.63 L1686.2 1214.63 L1686.79 1214.63 L1687.37 1214.63 L1687.96 1214.63 L1688.55 1214.63 L1689.13 1214.63 L1689.72 1214.63 L1690.31 1214.63 L1690.89 1214.63 L1691.48 1214.63 L1692.07 1214.63 L1692.65 1214.63 L1693.24 1214.63 L1693.83 1214.63 L1694.41 1214.63 L1695 1214.63 L1695.58 1214.63 L1696.17 1214.63 L1696.76 1214.63 L1697.34 1214.63 L1697.93 1214.63 L1698.52 1214.63 L1699.1 1214.63 L1699.69 1214.63 L1700.28 1214.63 L1700.86 1214.63 L1701.45 1214.63 L1702.04 1214.63 L1702.62 1214.63 L1703.21 1214.63 L1703.79 1214.63 L1704.38 1214.63 L1704.97 1214.63 L1705.55 1214.63 L1706.14 1214.63 L1706.73 1214.63 L1707.31 1214.63 L1707.9 1214.63 L1708.49 1214.63 L1709.07 1214.63 L1709.66 1214.63 L1710.24 1214.63 L1710.83 1214.63 L1711.42 1214.63 L1712 1214.63 L1712.59 1214.63 L1713.18 1214.63 L1713.76 1214.63 L1714.35 1214.63 L1714.94 1214.63 L1715.52 1214.63 L1716.11 1214.63 L1716.7 1214.63 L1717.28 1214.63 L1717.87 1214.63 L1718.45 1214.63 L1719.04 1214.63 L1719.63 1214.63 L1720.21 1214.63 L1720.8 1214.63 L1721.39 1214.63 L1721.97 1214.63 L1722.56 1214.63 L1723.15 1214.63 L1723.73 1214.63 L1724.32 1214.63 L1724.91 1214.63 L1725.49 1214.63 L1726.08 1214.63 L1726.66 1214.63 L1727.25 1214.63 L1727.84 1214.63 L1728.42 1214.63 L1729.01 1214.63 L1729.6 1214.63 L1730.18 1214.63 L1730.77 1214.63 L1731.36 1214.63 L1731.94 1214.63 L1732.53 1214.63 L1733.11 1214.63 L1733.7 1214.63 L1734.29 1214.63 L1734.87 1214.63 L1735.46 1214.63 L1736.05 1214.63 L1736.63 1214.63 L1737.22 1214.63 L1737.81 1214.63 L1738.39 1214.63 L1738.98 1214.63 L1739.57 1214.63 L1740.15 1214.63 L1740.74 1214.63 L1741.32 1214.63 L1741.91 1214.63 L1742.5 1214.63 L1743.08 1214.63 L1743.67 1214.63 L1744.26 1214.63 L1744.84 1214.63 L1745.43 1214.63 L1746.02 1214.63 L1746.6 1214.63 L1747.19 1214.63 L1747.78 1214.63 L1748.36 1214.63 L1748.95 1214.63 L1749.53 1214.63 L1750.12 1214.63 L1750.71 1214.63 L1751.29 1214.63 L1751.88 1214.63 L1752.47 1214.63 L1753.05 1214.63 L1753.64 1214.63 L1754.23 1214.63 L1754.81 1214.63 L1755.4 1214.63 L1755.99 1214.63 L1756.57 1214.63 L1757.16 1214.63 L1757.74 1214.63 L1758.33 1214.63 L1758.92 1214.63 L1759.5 1214.63 L1760.09 1214.63 L1760.68 1214.63 L1761.26 1214.63 L1761.85 1214.63 L1762.44 1214.63 L1763.02 1214.63 L1763.61 1214.63 L1764.19 1214.63 L1764.78 1214.63 L1765.37 1214.63 L1765.95 1214.63 L1766.54 1214.63 L1767.13 1214.63 L1767.71 1214.63 L1768.3 1214.63 L1768.89 1214.63 L1769.47 1214.63 L1770.06 1214.63 L1770.65 1214.63 L1771.23 1214.63 L1771.82 1214.63 L1772.4 1214.63 L1772.99 1214.63 L1773.58 1214.63 L1774.16 1214.63 L1774.75 1214.63 L1775.34 1214.63 L1775.92 1214.63 L1776.51 1214.63 L1777.1 1214.63 L1777.68 1214.63 L1778.27 1214.63 L1778.86 1214.63 L1779.44 1214.63 L1780.03 1214.63 L1780.61 1214.63 L1781.2 1214.63 L1781.79 1214.63 L1782.37 1214.63 L1782.96 1214.63 L1783.55 1214.63 L1784.13 1214.63 L1784.72 1214.63 L1785.31 1214.63 L1785.89 1214.63 L1786.48 1214.63 L1787.06 1214.63 L1787.65 1214.63 L1788.24 1214.63 L1788.82 1214.63 L1789.41 1214.63 L1790 1214.63 L1790.58 1214.63 L1791.17 1214.63 L1791.76 1214.63 L1792.34 1214.63 L1792.93 1214.63 L1793.52 1214.63 L1794.1 1214.63 L1794.69 1214.63 L1795.27 1214.63 L1795.86 1214.63 L1796.45 1214.63 L1797.03 1214.63 L1797.62 1214.63 L1798.21 1214.63 L1798.79 1214.63 L1799.38 1214.63 L1799.97 1214.63 L1800.55 1214.63 L1801.14 1214.63 L1801.73 1214.63 L1802.31 1214.63 L1802.9 1214.63 L1803.48 1214.63 L1804.07 1214.63 L1804.66 1214.63 L1805.24 1214.63 L1805.83 1214.63 L1806.42 1214.63 L1807 1214.63 L1807.59 1214.63 L1808.18 1214.63 L1808.76 1214.63 L1809.35 1214.63 L1809.94 1214.63 L1810.52 1214.63 L1811.11 1214.63 L1811.69 1214.63 L1812.28 1214.63 L1812.87 1214.63 L1813.45 1214.63 L1814.04 1214.63 L1814.63 1214.63 L1815.21 1214.63 L1815.8 1214.63 L1816.39 1214.63 L1816.97 1214.63 L1817.56 1214.63 L1818.14 1214.63 L1818.73 1214.63 L1819.32 1214.63 L1819.9 1214.63 L1820.49 1214.63 L1821.08 1214.63 L1821.66 1214.63 L1822.25 1214.63 L1822.84 1214.63 L1823.42 1214.63 L1824.01 1214.63 L1824.6 1214.63 L1825.18 1214.63 L1825.77 1214.63 L1826.35 1214.63 L1826.94 1214.63 L1827.53 1214.63 L1828.11 1214.63 L1828.7 1214.63 L1829.29 1214.63 L1829.87 1214.63 L1830.46 1214.63 L1831.05 1214.63 L1831.63 1214.63 L1832.22 1214.63 L1832.81 1214.63 L1833.39 1214.63 L1833.98 1214.63 L1834.56 1214.63 L1835.15 1214.63 L1835.74 1214.63 L1836.32 1214.63 L1836.91 1214.63 L1837.5 1214.63 L1838.08 1214.63 L1838.67 1214.63 L1839.26 1214.63 L1839.84 1214.63 L1840.43 1214.63 L1841.01 1214.63 L1841.6 1214.63 L1842.19 1214.63 L1842.77 1214.63 L1843.36 1214.63 L1843.95 1214.63 L1844.53 1214.63 L1845.12 1214.63 L1845.71 1214.63 L1846.29 1214.63 L1846.88 1214.63 L1847.47 1214.63 L1848.05 1214.63 L1848.64 1214.63 L1849.22 1214.63 L1849.81 1214.63 L1850.4 1214.63 L1850.98 1214.63 L1851.57 1214.63 L1852.16 1214.63 L1852.74 1214.63 L1853.33 1214.63 L1853.92 1214.63 L1854.5 1214.63 L1855.09 1214.63 L1855.68 1214.63 L1856.26 1214.63 L1856.85 1214.63 L1857.43 1214.63 L1858.02 1214.63 L1858.61 1214.63 L1859.19 1214.63 L1859.78 1214.63 L1860.37 1214.63 L1860.95 1214.63 L1861.54 1214.63 L1862.13 1214.63 L1862.71 1214.63 L1863.3 1214.63 L1863.88 1214.63 L1864.47 1214.63 L1865.06 1214.63 L1865.64 1214.63 L1866.23 1214.63 L1866.82 1214.63 L1867.4 1214.63 L1867.99 1214.63 L1868.58 1214.63 L1869.16 1214.63 L1869.75 1214.63 L1870.34 1214.63 L1870.92 1214.63 L1871.51 1214.63 L1872.09 1214.63 L1872.68 1214.63 L1873.27 1214.63 L1873.85 1214.63 L1874.44 1214.63 L1875.03 1214.63 L1875.61 1214.63 L1876.2 1214.63 L1876.79 1214.63 L1877.37 1214.63 L1877.96 1214.63 L1878.55 1214.63 L1879.13 1214.63 L1879.72 1214.63 L1880.3 1214.63 L1880.89 1214.63 L1881.48 1214.63 L1882.06 1214.63 L1882.65 1214.63 L1883.24 1214.63 L1883.82 1214.63 L1884.41 1214.63 L1885 1214.63 L1885.58 1214.63 L1886.17 1214.63 L1886.76 1214.63 L1887.34 1214.63 L1887.93 1214.63 L1888.51 1214.63 L1889.1 1214.63 L1889.69 1214.63 L1890.27 1214.63 L1890.86 1214.63 L1891.45 1214.63 L1892.03 1214.63 L1892.62 1214.63 L1893.21 1214.63 L1893.79 1214.63 L1894.38 1214.63 L1894.96 1214.63 L1895.55 1214.63 L1896.14 1214.63 L1896.72 1214.63 L1897.31 1214.63 L1897.9 1214.63 L1898.48 1214.63 L1899.07 1214.63 L1899.66 1214.63 L1900.24 1214.63 L1900.83 1214.63 L1901.42 1214.63 L1902 1214.63 L1902.59 1214.63 L1903.17 1214.63 L1903.76 1214.63 L1904.35 1214.63 L1904.93 1214.63 L1905.52 1214.63 L1906.11 1214.63 L1906.69 1214.63 L1907.28 1214.63 L1907.87 1214.63 L1908.45 1214.63 L1909.04 1214.63 L1909.63 1214.63 L1910.21 1214.63 L1910.8 1214.63 L1911.38 1214.63 L1911.97 1214.63 L1912.56 1214.63 L1913.14 1214.63 L1913.73 1214.63 L1914.32 1214.63 L1914.9 1214.63 L1915.49 1214.63 L1916.08 1214.63 L1916.66 1214.63 L1917.25 1214.63 L1917.83 1214.63 L1918.42 1214.63 L1919.01 1214.63 L1919.59 1214.63 L1920.18 1214.63 L1920.77 1214.63 L1921.35 1214.63 L1921.94 1214.63 L1922.53 1214.63 L1923.11 1214.63 L1923.7 1214.63 L1924.29 1214.63 L1924.87 1214.63 L1925.46 1214.63 L1926.04 1214.63 L1926.63 1214.63 L1927.22 1214.63 L1927.8 1214.63 L1928.39 1214.63 L1928.98 1214.63 L1929.56 1214.63 L1930.15 1214.63 L1930.74 1214.63 L1931.32 1214.63 L1931.91 1214.63 L1932.5 1214.63 L1933.08 1214.63 L1933.67 1214.63 L1934.25 1214.63 L1934.84 1214.63 L1935.43 1214.63 L1936.01 1214.63 L1936.6 1214.63 L1937.19 1214.63 L1937.77 1214.63 L1938.36 1214.63 L1938.95 1214.63 L1939.53 1214.63 L1940.12 1214.63 L1940.71 1214.63 L1941.29 1214.63 L1941.88 1214.63 L1942.46 1214.63 L1943.05 1214.63 L1943.64 1214.63 L1944.22 1214.63 L1944.81 1214.63 L1945.4 1214.63 L1945.98 1214.63 L1946.57 1214.63 L1947.16 1214.63 L1947.74 1214.63 L1948.33 1214.63 L1948.91 1214.63 L1949.5 1214.63 L1950.09 1214.63 L1950.67 1214.63 L1951.26 1214.63 L1951.85 1214.63 L1952.43 1214.63 L1953.02 1214.63 L1953.61 1214.63 L1954.19 1214.63 L1954.78 1214.63 L1955.37 1214.63 L1955.95 1214.63 L1956.54 1214.63 L1957.12 1214.63 L1957.71 1214.63 L1958.3 1214.63 L1958.88 1214.63 L1959.47 1214.63 L1960.06 1214.63 L1960.64 1214.63 L1961.23 1214.63 L1961.82 1214.63 L1962.4 1214.63 L1962.99 1214.63 L1963.58 1214.63 L1964.16 1214.63 L1964.75 1214.63 L1965.33 1214.63 L1965.92 1214.63 L1966.51 1214.63 L1967.09 1214.63 L1967.68 1214.63 L1968.27 1214.63 L1968.85 1214.63 L1969.44 1214.63 L1970.03 1214.63 L1970.61 1214.63 L1971.2 1214.63 L1971.78 1214.63 L1972.37 1214.63 L1972.96 1214.63 L1973.54 1214.63 L1974.13 1214.63 L1974.72 1214.63 L1975.3 1214.63 L1975.89 1214.63 L1976.48 1214.63 L1977.06 1214.63 L1977.65 1214.63 L1978.24 1214.63 L1978.82 1214.63 L1979.41 1214.63 L1979.99 1214.63 L1980.58 1214.63 L1981.17 1214.63 L1981.75 1214.63 L1982.34 1214.63 L1982.93 1214.63 L1983.51 1214.63 L1984.1 1214.63 L1984.69 1214.63 L1985.27 1214.63 L1985.86 1214.63 L1986.45 1214.63 L1987.03 1214.63 L1987.62 1214.63 L1988.2 1214.63 L1988.79 1214.63 L1989.38 1214.63 L1989.96 1214.63 L1990.55 1214.63 L1991.14 1214.63 L1991.72 1214.63 L1992.31 1214.63 L1992.9 1214.63 L1993.48 1214.63 L1994.07 1214.63 L1994.65 1214.63 L1995.24 1214.63 L1995.83 1214.63 L1996.41 1214.63 L1997 1214.63 L1997.59 1214.63 L1998.17 1214.63 L1998.76 1214.63 L1999.35 1214.63 L1999.93 1214.63 L2000.52 1214.63 L2001.11 1214.63 L2001.69 1214.63 L2002.28 1214.63 L2002.86 1214.63 L2003.45 1214.63 L2004.04 1214.63 L2004.62 1214.63 L2005.21 1214.63 L2005.8 1214.63 L2006.38 1214.63 L2006.97 1214.63 L2007.56 1214.63 L2008.14 1214.63 L2008.73 1214.63 L2009.32 1214.63 L2009.9 1214.63 L2010.49 1214.63 L2011.07 1214.63 L2011.66 1214.63 L2012.25 1214.63 L2012.83 1214.63 L2013.42 1214.63 L2014.01 1214.63 L2014.59 1214.63 L2015.18 1214.63 L2015.77 1214.63 L2016.35 1214.63 L2016.94 1214.63 L2017.53 1214.63 L2018.11 1214.63 L2018.7 1214.63 L2019.28 1214.63 L2019.87 1214.63 L2020.46 1214.63 L2021.04 1214.63 L2021.63 1214.63 L2022.22 1214.63 L2022.8 1214.63 L2023.39 1214.63 L2023.98 1214.63 L2024.56 1214.63 L2025.15 1214.63 L2025.73 1214.63 L2026.32 1214.63 L2026.91 1214.63 L2027.49 1214.63 L2028.08 1214.63 L2028.67 1214.63 L2029.25 1214.63 L2029.84 1214.63 L2030.43 1214.63 L2031.01 1214.63 L2031.6 1214.63 L2032.19 1214.63 L2032.77 1214.63 L2033.36 1214.63 L2033.94 1214.63 L2034.53 1214.63 L2035.12 1214.63 L2035.7 1214.63 L2036.29 1214.63 L2036.88 1214.63 L2037.46 1214.63 L2038.05 1214.63 L2038.64 1214.63 L2039.22 1214.63 L2039.81 1214.63 L2040.4 1214.63 L2040.98 1214.63 L2041.57 1214.63 L2042.15 1214.63 L2042.74 1214.63 L2043.33 1214.63 L2043.91 1214.63 L2044.5 1214.63 L2045.09 1214.63 L2045.67 1214.63 L2046.26 1214.63 L2046.85 1214.63 L2047.43 1214.63 L2048.02 1214.63 L2048.6 1214.63 L2049.19 1214.63 L2049.78 1214.63 L2050.36 1214.63 L2050.95 1214.63 L2051.54 1214.63 L2052.12 1214.63 L2052.71 1214.63 L2053.3 1214.63 L2053.88 1214.63 L2054.47 1214.63 L2055.06 1214.63 L2055.64 1214.63 L2056.23 1214.63 L2056.81 1214.63 L2057.4 1214.63 L2057.99 1214.63 L2058.57 1214.63 L2059.16 1214.63 L2059.75 1214.63 L2060.33 1214.63 L2060.92 1214.63 L2061.51 1214.63 L2062.09 1214.63 L2062.68 1214.63 L2063.27 1214.63 L2063.85 1214.63 L2064.44 1214.63 L2065.02 1214.63 L2065.61 1214.63 L2066.2 1214.63 L2066.78 1214.63 L2067.37 1214.63 L2067.96 1214.63 L2068.54 1214.63 L2069.13 1214.63 L2069.72 1214.63 L2070.3 1214.63 L2070.89 1214.63 L2071.48 1214.63 L2072.06 1214.63 L2072.65 1214.63 L2073.23 1214.63 L2073.82 1214.63 L2074.41 1214.63 L2074.99 1214.63 L2075.58 1214.63 L2076.17 1214.63 L2076.75 1214.63 L2077.34 1214.63 L2077.93 1214.63 L2078.51 1214.63 L2079.1 1214.63 L2079.68 1214.63 L2080.27 1214.63 L2080.86 1214.63 L2081.44 1214.63 L2082.03 1214.63 L2082.62 1214.63 L2083.2 1214.63 L2083.79 1214.63 L2084.38 1214.63 L2084.96 1214.63 L2085.55 1214.63 L2086.14 1214.63 L2086.72 1214.63 L2087.31 1214.63 L2087.89 1214.63 L2088.48 1214.63 L2089.07 1214.63 L2089.65 1214.63 L2090.24 1214.63 L2090.83 1214.63 L2091.41 1214.63 L2092 1214.63 L2092.59 1214.63 L2093.17 1214.63 L2093.76 1214.63 L2094.35 1214.63 L2094.93 1214.63 L2095.52 1214.63 L2096.1 1214.63 L2096.69 1214.63 L2097.28 1214.63 L2097.86 1214.63 L2098.45 1214.63 L2099.04 1214.63 L2099.62 1214.63 L2100.21 1214.63 L2100.8 1214.63 L2101.38 1214.63 L2101.97 1214.63 L2102.55 1214.63 L2103.14 1214.63 L2103.73 1214.63 L2104.31 1214.63 L2104.9 1214.63 L2105.49 1214.63 L2106.07 1214.63 L2106.66 1214.63 L2107.25 1214.63 L2107.83 1214.63 L2108.42 1214.63 L2109.01 1214.63 L2109.59 1214.63 L2110.18 1214.63 L2110.76 1214.63 L2111.35 1214.63 L2111.94 1214.63 L2112.52 1214.63 L2113.11 1214.63 L2113.7 1214.63 L2114.28 1214.63 L2114.87 1214.63 L2115.46 1214.63 L2116.04 1214.63 L2116.63 1214.63 L2117.22 1214.63 L2117.8 1214.63 L2118.39 1214.63 L2118.97 1214.63 L2119.56 1214.63 L2120.15 1214.63 L2120.73 1214.63 L2121.32 1214.63 L2121.91 1214.63 L2122.49 1214.63 L2123.08 1214.63 L2123.67 1214.63 L2124.25 1214.63 L2124.84 1214.63 L2125.42 1214.63 L2126.01 1214.63 L2126.6 1214.63 L2127.18 1214.63 L2127.77 1214.63 L2128.36 1214.63 L2128.94 1214.63 L2129.53 1214.63 L2130.12 1214.63 L2130.7 1214.63 L2131.29 1214.63 L2131.88 1214.63 L2132.46 1214.63 L2133.05 1214.63 L2133.63 1214.63 L2134.22 1214.63 L2134.81 1214.63 L2135.39 1214.63 L2135.98 1214.63 L2136.57 1214.63 L2137.15 1214.63 L2137.74 1214.63 L2138.33 1214.63 L2138.91 1214.63 L2139.5 1214.63 L2140.09 1214.63 L2140.67 1214.63 L2141.26 1214.63 L2141.84 1214.63 L2142.43 1214.63 L2143.02 1214.63 L2143.6 1214.63 L2144.19 1214.63 L2144.78 1214.63 L2145.36 1214.63 L2145.95 1214.63 L2146.54 1214.63 L2147.12 1214.63 L2147.71 1214.63 L2148.3 1214.63 L2148.88 1214.63 L2149.47 1214.63 L2150.05 1214.63 L2150.64 1214.63 L2151.23 1214.63 L2151.81 1214.63 L2152.4 1214.63 L2152.99 1214.63 L2153.57 1214.63 L2154.16 1214.63 L2154.75 1214.63 L2155.33 1214.63 L2155.92 1214.63 L2156.5 1214.63 L2157.09 1214.63 L2157.68 1214.63 L2158.26 1214.63 L2158.26 1213.82 L2157.68 1213.82 L2157.09 1213.82 L2156.5 1213.82 L2155.92 1213.82 L2155.33 1213.82 L2154.75 1213.82 L2154.16 1213.82 L2153.57 1213.82 L2152.99 1213.82 L2152.4 1213.82 L2151.81 1213.82 L2151.23 1213.82 L2150.64 1213.82 L2150.05 1213.82 L2149.47 1213.82 L2148.88 1213.82 L2148.3 1213.82 L2147.71 1213.82 L2147.12 1213.82 L2146.54 1213.82 L2145.95 1213.82 L2145.36 1213.82 L2144.78 1213.82 L2144.19 1213.82 L2143.6 1213.82 L2143.02 1213.82 L2142.43 1213.82 L2141.84 1213.82 L2141.26 1213.82 L2140.67 1213.82 L2140.09 1213.82 L2139.5 1213.82 L2138.91 1213.82 L2138.33 1213.82 L2137.74 1213.82 L2137.15 1213.82 L2136.57 1213.82 L2135.98 1213.82 L2135.39 1213.82 L2134.81 1213.82 L2134.22 1213.82 L2133.63 1213.82 L2133.05 1213.82 L2132.46 1213.82 L2131.88 1213.82 L2131.29 1213.82 L2130.7 1213.82 L2130.12 1213.82 L2129.53 1213.82 L2128.94 1213.82 L2128.36 1213.82 L2127.77 1213.82 L2127.18 1213.82 L2126.6 1213.82 L2126.01 1213.82 L2125.42 1213.82 L2124.84 1213.82 L2124.25 1213.82 L2123.67 1213.82 L2123.08 1213.82 L2122.49 1213.82 L2121.91 1213.82 L2121.32 1213.82 L2120.73 1213.82 L2120.15 1213.82 L2119.56 1213.82 L2118.97 1213.82 L2118.39 1213.82 L2117.8 1213.82 L2117.22 1213.82 L2116.63 1213.82 L2116.04 1213.82 L2115.46 1213.82 L2114.87 1213.82 L2114.28 1213.82 L2113.7 1213.82 L2113.11 1213.82 L2112.52 1213.82 L2111.94 1213.82 L2111.35 1213.82 L2110.76 1213.82 L2110.18 1213.82 L2109.59 1213.82 L2109.01 1213.82 L2108.42 1213.82 L2107.83 1213.82 L2107.25 1213.82 L2106.66 1213.82 L2106.07 1213.82 L2105.49 1213.82 L2104.9 1213.82 L2104.31 1213.82 L2103.73 1213.82 L2103.14 1213.82 L2102.55 1213.82 L2101.97 1213.82 L2101.38 1213.82 L2100.8 1213.82 L2100.21 1213.82 L2099.62 1213.82 L2099.04 1213.82 L2098.45 1213.82 L2097.86 1213.82 L2097.28 1213.82 L2096.69 1213.82 L2096.1 1213.82 L2095.52 1213.82 L2094.93 1213.82 L2094.35 1213.82 L2093.76 1213.82 L2093.17 1213.82 L2092.59 1213.82 L2092 1213.82 L2091.41 1213.82 L2090.83 1213.82 L2090.24 1213.82 L2089.65 1213.82 L2089.07 1213.82 L2088.48 1213.82 L2087.89 1213.82 L2087.31 1213.82 L2086.72 1213.82 L2086.14 1213.82 L2085.55 1213.82 L2084.96 1213.82 L2084.38 1213.82 L2083.79 1213.82 L2083.2 1213.82 L2082.62 1213.82 L2082.03 1213.82 L2081.44 1213.82 L2080.86 1213.82 L2080.27 1213.82 L2079.68 1213.82 L2079.1 1213.82 L2078.51 1213.82 L2077.93 1213.82 L2077.34 1213.82 L2076.75 1213.82 L2076.17 1213.82 L2075.58 1213.82 L2074.99 1213.82 L2074.41 1213.82 L2073.82 1213.82 L2073.23 1213.82 L2072.65 1213.82 L2072.06 1213.82 L2071.48 1213.82 L2070.89 1213.82 L2070.3 1213.82 L2069.72 1213.82 L2069.13 1213.82 L2068.54 1213.82 L2067.96 1213.82 L2067.37 1213.82 L2066.78 1213.82 L2066.2 1213.82 L2065.61 1213.82 L2065.02 1213.82 L2064.44 1213.82 L2063.85 1213.82 L2063.27 1213.82 L2062.68 1213.82 L2062.09 1213.82 L2061.51 1213.82 L2060.92 1213.82 L2060.33 1213.82 L2059.75 1213.82 L2059.16 1213.82 L2058.57 1213.82 L2057.99 1213.82 L2057.4 1213.82 L2056.81 1213.82 L2056.23 1213.82 L2055.64 1213.82 L2055.06 1213.82 L2054.47 1213.82 L2053.88 1213.82 L2053.3 1213.82 L2052.71 1213.82 L2052.12 1213.82 L2051.54 1213.82 L2050.95 1213.82 L2050.36 1213.82 L2049.78 1213.82 L2049.19 1213.82 L2048.6 1213.82 L2048.02 1213.82 L2047.43 1213.82 L2046.85 1213.82 L2046.26 1213.82 L2045.67 1213.82 L2045.09 1213.82 L2044.5 1213.82 L2043.91 1213.82 L2043.33 1213.82 L2042.74 1213.82 L2042.15 1213.82 L2041.57 1213.82 L2040.98 1213.82 L2040.4 1213.82 L2039.81 1213.82 L2039.22 1213.82 L2038.64 1213.82 L2038.05 1213.82 L2037.46 1213.82 L2036.88 1213.82 L2036.29 1213.82 L2035.7 1213.82 L2035.12 1213.82 L2034.53 1213.82 L2033.94 1213.82 L2033.36 1213.82 L2032.77 1213.82 L2032.19 1213.82 L2031.6 1213.82 L2031.01 1213.82 L2030.43 1213.82 L2029.84 1213.82 L2029.25 1213.82 L2028.67 1213.82 L2028.08 1213.82 L2027.49 1213.82 L2026.91 1213.82 L2026.32 1213.82 L2025.73 1213.82 L2025.15 1213.82 L2024.56 1213.82 L2023.98 1213.82 L2023.39 1213.82 L2022.8 1213.82 L2022.22 1213.82 L2021.63 1213.82 L2021.04 1213.82 L2020.46 1213.82 L2019.87 1213.82 L2019.28 1213.82 L2018.7 1213.82 L2018.11 1213.82 L2017.53 1213.82 L2016.94 1213.82 L2016.35 1213.82 L2015.77 1213.82 L2015.18 1213.82 L2014.59 1213.82 L2014.01 1213.82 L2013.42 1213.82 L2012.83 1213.82 L2012.25 1213.82 L2011.66 1213.82 L2011.07 1213.82 L2010.49 1213.82 L2009.9 1213.82 L2009.32 1213.82 L2008.73 1213.82 L2008.14 1213.82 L2007.56 1213.82 L2006.97 1213.82 L2006.38 1213.82 L2005.8 1213.82 L2005.21 1213.82 L2004.62 1213.82 L2004.04 1213.82 L2003.45 1213.82 L2002.86 1213.82 L2002.28 1213.82 L2001.69 1213.82 L2001.11 1213.82 L2000.52 1213.82 L1999.93 1213.82 L1999.35 1213.82 L1998.76 1213.82 L1998.17 1213.82 L1997.59 1213.82 L1997 1213.82 L1996.41 1213.82 L1995.83 1213.82 L1995.24 1213.82 L1994.65 1213.82 L1994.07 1213.82 L1993.48 1213.82 L1992.9 1213.82 L1992.31 1213.82 L1991.72 1213.82 L1991.14 1213.82 L1990.55 1213.82 L1989.96 1213.82 L1989.38 1213.82 L1988.79 1213.82 L1988.2 1213.82 L1987.62 1213.82 L1987.03 1213.82 L1986.45 1213.82 L1985.86 1213.82 L1985.27 1213.82 L1984.69 1213.82 L1984.1 1213.82 L1983.51 1213.82 L1982.93 1213.82 L1982.34 1213.82 L1981.75 1213.82 L1981.17 1213.82 L1980.58 1213.82 L1979.99 1213.82 L1979.41 1213.82 L1978.82 1213.82 L1978.24 1213.82 L1977.65 1213.82 L1977.06 1213.82 L1976.48 1213.82 L1975.89 1213.82 L1975.3 1213.82 L1974.72 1213.82 L1974.13 1213.82 L1973.54 1213.82 L1972.96 1213.82 L1972.37 1213.82 L1971.78 1213.82 L1971.2 1213.82 L1970.61 1213.82 L1970.03 1213.82 L1969.44 1213.82 L1968.85 1213.82 L1968.27 1213.82 L1967.68 1213.82 L1967.09 1213.82 L1966.51 1213.82 L1965.92 1213.82 L1965.33 1213.82 L1964.75 1213.82 L1964.16 1213.82 L1963.58 1213.82 L1962.99 1213.82 L1962.4 1213.82 L1961.82 1213.82 L1961.23 1213.82 L1960.64 1213.82 L1960.06 1213.82 L1959.47 1213.82 L1958.88 1213.82 L1958.3 1213.82 L1957.71 1213.82 L1957.12 1213.82 L1956.54 1213.82 L1955.95 1213.82 L1955.37 1213.82 L1954.78 1213.82 L1954.19 1213.82 L1953.61 1213.82 L1953.02 1213.82 L1952.43 1213.82 L1951.85 1213.82 L1951.26 1213.82 L1950.67 1213.82 L1950.09 1213.82 L1949.5 1213.82 L1948.91 1213.82 L1948.33 1213.82 L1947.74 1213.82 L1947.16 1213.82 L1946.57 1213.82 L1945.98 1213.82 L1945.4 1213.82 L1944.81 1213.82 L1944.22 1213.82 L1943.64 1213.82 L1943.05 1213.82 L1942.46 1213.82 L1941.88 1213.82 L1941.29 1213.82 L1940.71 1213.82 L1940.12 1213.82 L1939.53 1213.82 L1938.95 1213.82 L1938.36 1213.82 L1937.77 1213.82 L1937.19 1213.82 L1936.6 1213.82 L1936.01 1213.82 L1935.43 1213.82 L1934.84 1213.82 L1934.25 1213.82 L1933.67 1213.82 L1933.08 1213.82 L1932.5 1213.82 L1931.91 1213.82 L1931.32 1213.82 L1930.74 1213.82 L1930.15 1213.82 L1929.56 1213.82 L1928.98 1213.82 L1928.39 1213.82 L1927.8 1213.82 L1927.22 1213.82 L1926.63 1213.82 L1926.04 1213.82 L1925.46 1213.82 L1924.87 1213.82 L1924.29 1213.82 L1923.7 1213.82 L1923.11 1213.82 L1922.53 1213.82 L1921.94 1213.82 L1921.35 1213.82 L1920.77 1213.82 L1920.18 1213.82 L1919.59 1213.82 L1919.01 1213.82 L1918.42 1213.82 L1917.83 1213.82 L1917.25 1213.82 L1916.66 1213.82 L1916.08 1213.82 L1915.49 1213.82 L1914.9 1213.82 L1914.32 1213.82 L1913.73 1213.82 L1913.14 1213.82 L1912.56 1213.82 L1911.97 1213.82 L1911.38 1213.82 L1910.8 1213.82 L1910.21 1213.82 L1909.63 1213.82 L1909.04 1213.82 L1908.45 1213.82 L1907.87 1213.82 L1907.28 1213.82 L1906.69 1213.82 L1906.11 1213.82 L1905.52 1213.82 L1904.93 1213.82 L1904.35 1213.82 L1903.76 1213.82 L1903.17 1213.82 L1902.59 1213.82 L1902 1213.82 L1901.42 1213.82 L1900.83 1213.82 L1900.24 1213.82 L1899.66 1213.82 L1899.07 1213.82 L1898.48 1213.82 L1897.9 1213.82 L1897.31 1213.82 L1896.72 1213.82 L1896.14 1213.82 L1895.55 1213.82 L1894.96 1213.82 L1894.38 1213.82 L1893.79 1213.82 L1893.21 1213.82 L1892.62 1213.82 L1892.03 1213.82 L1891.45 1213.82 L1890.86 1213.82 L1890.27 1213.82 L1889.69 1213.82 L1889.1 1213.82 L1888.51 1213.82 L1887.93 1213.82 L1887.34 1213.82 L1886.76 1213.82 L1886.17 1213.82 L1885.58 1213.82 L1885 1213.82 L1884.41 1213.82 L1883.82 1213.82 L1883.24 1213.82 L1882.65 1213.82 L1882.06 1213.82 L1881.48 1213.82 L1880.89 1213.82 L1880.3 1213.82 L1879.72 1213.82 L1879.13 1213.82 L1878.55 1213.82 L1877.96 1213.82 L1877.37 1213.82 L1876.79 1213.82 L1876.2 1213.82 L1875.61 1213.82 L1875.03 1213.82 L1874.44 1213.82 L1873.85 1213.82 L1873.27 1213.82 L1872.68 1213.82 L1872.09 1213.82 L1871.51 1213.82 L1870.92 1213.82 L1870.34 1213.82 L1869.75 1213.82 L1869.16 1213.82 L1868.58 1213.82 L1867.99 1213.82 L1867.4 1213.82 L1866.82 1213.82 L1866.23 1213.82 L1865.64 1213.82 L1865.06 1213.82 L1864.47 1213.82 L1863.88 1213.82 L1863.3 1213.82 L1862.71 1213.82 L1862.13 1213.82 L1861.54 1213.82 L1860.95 1213.82 L1860.37 1213.82 L1859.78 1213.82 L1859.19 1213.82 L1858.61 1213.82 L1858.02 1213.82 L1857.43 1213.82 L1856.85 1213.82 L1856.26 1213.82 L1855.68 1213.82 L1855.09 1213.82 L1854.5 1213.82 L1853.92 1213.82 L1853.33 1213.82 L1852.74 1213.82 L1852.16 1213.82 L1851.57 1213.82 L1850.98 1213.82 L1850.4 1213.82 L1849.81 1213.82 L1849.22 1213.82 L1848.64 1213.82 L1848.05 1213.82 L1847.47 1213.82 L1846.88 1213.82 L1846.29 1213.82 L1845.71 1213.82 L1845.12 1213.82 L1844.53 1213.82 L1843.95 1213.82 L1843.36 1213.82 L1842.77 1213.82 L1842.19 1213.82 L1841.6 1213.82 L1841.01 1213.82 L1840.43 1213.82 L1839.84 1213.82 L1839.26 1213.82 L1838.67 1213.82 L1838.08 1213.82 L1837.5 1213.82 L1836.91 1213.82 L1836.32 1213.82 L1835.74 1213.82 L1835.15 1213.82 L1834.56 1213.82 L1833.98 1213.82 L1833.39 1213.82 L1832.81 1213.82 L1832.22 1213.82 L1831.63 1213.82 L1831.05 1213.82 L1830.46 1213.82 L1829.87 1213.82 L1829.29 1213.82 L1828.7 1213.82 L1828.11 1213.82 L1827.53 1213.82 L1826.94 1213.82 L1826.35 1213.82 L1825.77 1213.82 L1825.18 1213.82 L1824.6 1213.82 L1824.01 1213.82 L1823.42 1213.82 L1822.84 1213.82 L1822.25 1213.82 L1821.66 1213.82 L1821.08 1213.82 L1820.49 1213.82 L1819.9 1213.82 L1819.32 1213.82 L1818.73 1213.82 L1818.14 1213.82 L1817.56 1213.82 L1816.97 1213.82 L1816.39 1213.82 L1815.8 1213.82 L1815.21 1213.82 L1814.63 1213.82 L1814.04 1213.82 L1813.45 1213.82 L1812.87 1213.82 L1812.28 1213.82 L1811.69 1213.82 L1811.11 1213.82 L1810.52 1213.82 L1809.94 1213.82 L1809.35 1213.82 L1808.76 1213.82 L1808.18 1213.82 L1807.59 1213.82 L1807 1213.82 L1806.42 1213.82 L1805.83 1213.82 L1805.24 1213.82 L1804.66 1213.82 L1804.07 1213.82 L1803.48 1213.82 L1802.9 1213.82 L1802.31 1213.82 L1801.73 1213.82 L1801.14 1213.82 L1800.55 1213.82 L1799.97 1213.82 L1799.38 1213.82 L1798.79 1213.82 L1798.21 1213.82 L1797.62 1213.82 L1797.03 1213.82 L1796.45 1213.82 L1795.86 1213.82 L1795.27 1213.82 L1794.69 1213.82 L1794.1 1213.82 L1793.52 1213.82 L1792.93 1213.82 L1792.34 1213.82 L1791.76 1213.82 L1791.17 1213.82 L1790.58 1213.82 L1790 1213.82 L1789.41 1213.82 L1788.82 1213.82 L1788.24 1213.82 L1787.65 1213.82 L1787.06 1213.82 L1786.48 1213.82 L1785.89 1213.82 L1785.31 1213.82 L1784.72 1213.82 L1784.13 1213.82 L1783.55 1213.82 L1782.96 1213.82 L1782.37 1213.82 L1781.79 1213.82 L1781.2 1213.82 L1780.61 1213.82 L1780.03 1213.82 L1779.44 1213.82 L1778.86 1213.82 L1778.27 1213.82 L1777.68 1213.82 L1777.1 1213.82 L1776.51 1213.82 L1775.92 1213.82 L1775.34 1213.82 L1774.75 1213.82 L1774.16 1213.82 L1773.58 1213.82 L1772.99 1213.82 L1772.4 1213.82 L1771.82 1213.82 L1771.23 1213.82 L1770.65 1213.82 L1770.06 1213.82 L1769.47 1213.82 L1768.89 1213.82 L1768.3 1213.82 L1767.71 1213.82 L1767.13 1213.82 L1766.54 1213.82 L1765.95 1213.82 L1765.37 1213.82 L1764.78 1213.82 L1764.19 1213.82 L1763.61 1213.82 L1763.02 1213.82 L1762.44 1213.82 L1761.85 1213.82 L1761.26 1213.82 L1760.68 1213.82 L1760.09 1213.82 L1759.5 1213.82 L1758.92 1213.82 L1758.33 1213.82 L1757.74 1213.82 L1757.16 1213.82 L1756.57 1213.82 L1755.99 1213.82 L1755.4 1213.82 L1754.81 1213.82 L1754.23 1213.82 L1753.64 1213.82 L1753.05 1213.82 L1752.47 1213.82 L1751.88 1213.82 L1751.29 1213.82 L1750.71 1213.82 L1750.12 1213.82 L1749.53 1213.82 L1748.95 1213.82 L1748.36 1213.82 L1747.78 1213.82 L1747.19 1213.82 L1746.6 1213.82 L1746.02 1213.82 L1745.43 1213.82 L1744.84 1213.82 L1744.26 1213.82 L1743.67 1213.82 L1743.08 1213.82 L1742.5 1213.82 L1741.91 1213.82 L1741.32 1213.82 L1740.74 1213.82 L1740.15 1213.82 L1739.57 1213.82 L1738.98 1213.82 L1738.39 1213.82 L1737.81 1213.82 L1737.22 1213.82 L1736.63 1213.82 L1736.05 1213.82 L1735.46 1213.82 L1734.87 1213.82 L1734.29 1213.82 L1733.7 1213.82 L1733.11 1213.82 L1732.53 1213.82 L1731.94 1213.82 L1731.36 1213.82 L1730.77 1213.82 L1730.18 1213.82 L1729.6 1213.82 L1729.01 1213.82 L1728.42 1213.82 L1727.84 1213.82 L1727.25 1213.82 L1726.66 1213.82 L1726.08 1213.82 L1725.49 1213.82 L1724.91 1213.82 L1724.32 1213.82 L1723.73 1213.82 L1723.15 1213.82 L1722.56 1213.82 L1721.97 1213.82 L1721.39 1213.82 L1720.8 1213.82 L1720.21 1213.82 L1719.63 1213.82 L1719.04 1213.82 L1718.45 1213.82 L1717.87 1213.82 L1717.28 1213.82 L1716.7 1213.82 L1716.11 1213.82 L1715.52 1213.82 L1714.94 1213.82 L1714.35 1213.82 L1713.76 1213.82 L1713.18 1213.82 L1712.59 1213.82 L1712 1213.82 L1711.42 1213.82 L1710.83 1213.82 L1710.24 1213.82 L1709.66 1213.82 L1709.07 1213.82 L1708.49 1213.82 L1707.9 1213.82 L1707.31 1213.82 L1706.73 1213.82 L1706.14 1213.82 L1705.55 1213.82 L1704.97 1213.82 L1704.38 1213.82 L1703.79 1213.82 L1703.21 1213.82 L1702.62 1213.82 L1702.04 1213.82 L1701.45 1213.82 L1700.86 1213.82 L1700.28 1213.82 L1699.69 1213.82 L1699.1 1213.82 L1698.52 1213.82 L1697.93 1213.82 L1697.34 1213.82 L1696.76 1213.82 L1696.17 1213.82 L1695.58 1213.82 L1695 1213.82 L1694.41 1213.82 L1693.83 1213.82 L1693.24 1213.82 L1692.65 1213.82 L1692.07 1213.82 L1691.48 1213.82 L1690.89 1213.82 L1690.31 1213.82 L1689.72 1213.82 L1689.13 1213.82 L1688.55 1213.82 L1687.96 1213.82 L1687.37 1213.82 L1686.79 1213.82 L1686.2 1213.82 L1685.62 1213.82 L1685.03 1213.82 L1684.44 1213.82 L1683.86 1213.82 L1683.27 1213.82 L1682.68 1213.82 L1682.1 1213.82 L1681.51 1213.82 L1680.92 1213.82 L1680.34 1213.82 L1679.75 1213.82 L1679.17 1213.82 L1678.58 1213.82 L1677.99 1213.82 L1677.41 1213.82 L1676.82 1213.82 L1676.23 1213.82 L1675.65 1213.82 L1675.06 1213.82 L1674.47 1213.82 L1673.89 1213.82 L1673.3 1213.82 L1672.71 1213.82 L1672.13 1213.82 L1671.54 1213.82 L1670.96 1213.82 L1670.37 1213.82 L1669.78 1213.82 L1669.2 1213.82 L1668.61 1213.82 L1668.02 1213.82 L1667.44 1213.82 L1666.85 1213.82 L1666.26 1213.82 L1665.68 1213.82 L1665.09 1213.82 L1664.5 1213.82 L1663.92 1213.82 L1663.33 1213.82 L1662.75 1213.82 L1662.16 1213.82 L1661.57 1213.82 L1660.99 1213.82 L1660.4 1213.82 L1659.81 1213.82 L1659.23 1213.82 L1658.64 1213.82 L1658.05 1213.82 L1657.47 1213.82 L1656.88 1213.82 L1656.29 1213.82 L1655.71 1213.82 L1655.12 1213.82 L1654.54 1213.82 L1653.95 1213.82 L1653.36 1213.82 L1652.78 1213.82 L1652.19 1213.82 L1651.6 1213.82 L1651.02 1213.82 L1650.43 1213.82 L1649.84 1213.82 L1649.26 1213.82 L1648.67 1213.82 L1648.09 1213.82 L1647.5 1213.82 L1646.91 1213.82 L1646.33 1213.82 L1645.74 1213.82 L1645.15 1213.82 L1644.57 1213.82 L1643.98 1213.82 L1643.39 1213.82 L1642.81 1213.82 L1642.22 1213.82 L1641.63 1213.82 L1641.05 1213.82 L1640.46 1213.82 L1639.88 1213.82 L1639.29 1213.82 L1638.7 1213.82 L1638.12 1213.82 L1637.53 1213.82 L1636.94 1213.82 L1636.36 1213.82 L1635.77 1213.82 L1635.18 1213.82 L1634.6 1213.82 L1634.01 1213.82 L1633.42 1213.82 L1632.84 1213.82 L1632.25 1213.82 L1631.67 1213.82 L1631.08 1213.82 L1630.49 1213.82 L1629.91 1213.82 L1629.32 1213.82 L1628.73 1213.82 L1628.15 1213.82 L1627.56 1213.82 L1626.97 1213.82 L1626.39 1213.82 L1625.8 1213.82 L1625.22 1213.82 L1624.63 1213.82 L1624.04 1213.82 L1623.46 1213.82 L1622.87 1213.82 L1622.28 1213.82 L1621.7 1213.82 L1621.11 1213.82 L1620.52 1213.82 L1619.94 1213.82 L1619.35 1213.82 L1618.76 1213.82 L1618.18 1213.82 L1617.59 1213.82 L1617.01 1213.82 L1616.42 1213.82 L1615.83 1213.82 L1615.25 1213.82 L1614.66 1213.82 L1614.07 1213.82 L1613.49 1213.82 L1612.9 1213.82 L1612.31 1213.82 L1611.73 1213.82 L1611.14 1213.82 L1610.55 1213.82 L1609.97 1213.82 L1609.38 1213.82 L1608.8 1213.82 L1608.21 1213.82 L1607.62 1213.82 L1607.04 1213.82 L1606.45 1213.82 L1605.86 1213.82 L1605.28 1213.82 L1604.69 1213.82 L1604.1 1213.82 L1603.52 1213.82 L1602.93 1213.82 L1602.34 1213.82 L1601.76 1213.82 L1601.17 1213.82 L1600.59 1213.82 L1600 1213.82 L1599.41 1213.82 L1598.83 1213.82 L1598.24 1213.82 L1597.65 1213.82 L1597.07 1213.82 L1596.48 1213.82 L1595.89 1213.82 L1595.31 1213.82 L1594.72 1213.82 L1594.14 1213.82 L1593.55 1213.82 L1592.96 1213.82 L1592.38 1213.82 L1591.79 1213.82 L1591.2 1213.82 L1590.62 1213.82 L1590.03 1213.82 L1589.44 1213.82 L1588.86 1213.82 L1588.27 1213.82 L1587.68 1213.82 L1587.1 1213.82 L1586.51 1213.82 L1585.93 1213.82 L1585.34 1213.82 L1584.75 1213.82 L1584.17 1213.82 L1583.58 1213.82 L1582.99 1213.82 L1582.41 1213.82 L1581.82 1213.82 L1581.23 1213.82 L1580.65 1213.82 L1580.06 1213.82 L1579.47 1213.82 L1578.89 1213.82 L1578.3 1213.82 L1577.72 1213.82 L1577.13 1213.82 L1576.54 1213.82 L1575.96 1213.82 L1575.37 1213.82 L1574.78 1213.82 L1574.2 1213.82 L1573.61 1213.82 L1573.02 1213.82 L1572.44 1213.82 L1571.85 1213.82 L1571.27 1213.82 L1570.68 1213.82 L1570.09 1213.82 L1569.51 1213.82 L1568.92 1213.82 L1568.33 1213.82 L1567.75 1213.82 L1567.16 1213.82 L1566.57 1213.82 L1565.99 1213.82 L1565.4 1213.82 L1564.81 1213.82 L1564.23 1213.82 L1563.64 1213.82 L1563.06 1213.82 L1562.47 1213.82 L1561.88 1213.82 L1561.3 1213.82 L1560.71 1213.82 L1560.12 1213.82 L1559.54 1213.82 L1558.95 1213.82 L1558.36 1213.82 L1557.78 1213.82 L1557.19 1213.82 L1556.6 1213.82 L1556.02 1213.82 L1555.43 1213.82 L1554.85 1213.82 L1554.26 1213.82 L1553.67 1213.82 L1553.09 1213.82 L1552.5 1213.82 L1551.91 1213.82 L1551.33 1213.82 L1550.74 1213.82 L1550.15 1213.82 L1549.57 1213.82 L1548.98 1213.82 L1548.4 1213.82 L1547.81 1213.82 L1547.22 1213.82 L1546.64 1213.82 L1546.05 1213.82 L1545.46 1213.82 L1544.88 1213.82 L1544.29 1213.82 L1543.7 1213.82 L1543.12 1213.82 L1542.53 1213.82 L1541.94 1213.82 L1541.36 1213.82 L1540.77 1213.82 L1540.19 1213.82 L1539.6 1213.82 L1539.01 1213.82 L1538.43 1213.82 L1537.84 1213.82 L1537.25 1213.82 L1536.67 1213.82 L1536.08 1213.82 L1535.49 1213.82 L1534.91 1213.82 L1534.32 1213.82 L1533.73 1213.82 L1533.15 1213.82 L1532.56 1213.82 L1531.98 1213.82 L1531.39 1213.82 L1530.8 1213.82 L1530.22 1213.82 L1529.63 1213.82 L1529.04 1213.82 L1528.46 1213.82 L1527.87 1213.82 L1527.28 1213.82 L1526.7 1213.82 L1526.11 1213.82 L1525.52 1213.82 L1524.94 1213.82 L1524.35 1213.82 L1523.77 1213.82 L1523.18 1213.82 L1522.59 1213.82 L1522.01 1213.82 L1521.42 1213.82 L1520.83 1213.82 L1520.25 1213.82 L1519.66 1213.82 L1519.07 1213.82 L1518.49 1213.82 L1517.9 1213.82 L1517.32 1213.82 L1516.73 1213.82 L1516.14 1213.82 L1515.56 1213.82 L1514.97 1213.82 L1514.38 1213.82 L1513.8 1213.82 L1513.21 1213.82 L1512.62 1213.82 L1512.04 1213.82 L1511.45 1213.82 L1510.86 1213.82 L1510.28 1213.82 L1509.69 1213.82 L1509.11 1213.82 L1508.52 1213.82 L1507.93 1213.82 L1507.35 1213.82 L1506.76 1213.82 L1506.17 1213.82 L1505.59 1213.82 L1505 1213.82 L1504.41 1213.82 L1503.83 1213.82 L1503.24 1213.82 L1502.65 1213.82 L1502.07 1213.82 L1501.48 1213.82 L1500.9 1213.82 L1500.31 1213.82 L1499.72 1213.82 L1499.14 1213.82 L1498.55 1213.82 L1497.96 1213.82 L1497.38 1213.82 L1496.79 1213.82 L1496.2 1213.82 L1495.62 1213.82 L1495.03 1213.82 L1494.45 1213.82 L1493.86 1213.82 L1493.27 1213.82 L1492.69 1213.82 L1492.1 1213.82 L1491.51 1213.82 L1490.93 1213.82 L1490.34 1213.82 L1489.75 1213.82 L1489.17 1213.82 L1488.58 1213.82 L1487.99 1213.82 L1487.41 1213.82 L1486.82 1213.82 L1486.24 1213.82 L1485.65 1213.82 L1485.06 1213.82 L1484.48 1213.82 L1483.89 1213.82 L1483.3 1213.82 L1482.72 1213.82 L1482.13 1213.82 L1481.54 1213.82 L1480.96 1213.82 L1480.37 1213.82 L1479.78 1213.82 L1479.2 1213.82 L1478.61 1213.82 L1478.03 1213.82 L1477.44 1213.82 L1476.85 1213.82 L1476.27 1213.82 L1475.68 1213.82 L1475.09 1213.82 L1474.51 1213.82 L1473.92 1213.82 L1473.33 1213.82 L1472.75 1213.82 L1472.16 1213.82 L1471.57 1213.82 L1470.99 1213.82 L1470.4 1213.82 L1469.82 1213.82 L1469.23 1213.82 L1468.64 1213.82 L1468.06 1213.82 L1467.47 1213.82 L1466.88 1213.82 L1466.3 1213.82 L1465.71 1213.82 L1465.12 1213.82 L1464.54 1213.82 L1463.95 1213.82 L1463.37 1213.82 L1462.78 1213.82 L1462.19 1213.82 L1461.61 1213.82 L1461.02 1213.82 L1460.43 1213.82 L1459.85 1213.82 L1459.26 1213.82 L1458.67 1213.82 L1458.09 1213.82 L1457.5 1213.82 L1456.91 1213.82 L1456.33 1213.82 L1455.74 1213.82 L1455.16 1213.82 L1454.57 1213.82 L1453.98 1213.82 L1453.4 1213.82 L1452.81 1213.82 L1452.22 1213.82 L1451.64 1213.82 L1451.05 1213.82 L1450.46 1213.82 L1449.88 1213.82 L1449.29 1213.82 L1448.7 1213.82 L1448.12 1213.82 L1447.53 1213.82 L1446.95 1213.82 L1446.36 1213.82 L1445.77 1213.82 L1445.19 1213.82 L1444.6 1213.82 L1444.01 1213.82 L1443.43 1213.82 L1442.84 1213.82 L1442.25 1213.82 L1441.67 1213.82 L1441.08 1213.82 L1440.5 1213.82 L1439.91 1213.82 L1439.32 1213.82 L1438.74 1213.82 L1438.15 1213.82 L1437.56 1213.82 L1436.98 1213.82 L1436.39 1213.82 L1435.8 1213.82 L1435.22 1213.82 L1434.63 1213.82 L1434.04 1213.82 L1433.46 1213.82 L1432.87 1213.82 L1432.29 1213.82 L1431.7 1213.82 L1431.11 1213.82 L1430.53 1213.82 L1429.94 1213.82 L1429.35 1213.82 L1428.77 1213.82 L1428.18 1213.82 L1427.59 1213.82 L1427.01 1213.82 L1426.42 1213.82 L1425.83 1213.82 L1425.25 1213.82 L1424.66 1213.82 L1424.08 1213.82 L1423.49 1213.82 L1422.9 1213.82 L1422.32 1213.82 L1421.73 1213.82 L1421.14 1213.82 L1420.56 1213.82 L1419.97 1213.82 L1419.38 1213.82 L1418.8 1213.82 L1418.21 1213.82 L1417.63 1213.82 L1417.04 1213.82 L1416.45 1213.82 L1415.87 1213.82 L1415.28 1213.82 L1414.69 1213.82 L1414.11 1213.82 L1413.52 1213.82 L1412.93 1213.82 L1412.35 1213.82 L1411.76 1213.82 L1411.17 1213.82 L1410.59 1213.82 L1410 1213.82 L1409.42 1213.82 L1408.83 1213.82 L1408.24 1213.82 L1407.66 1213.82 L1407.07 1213.82 L1406.48 1213.82 L1405.9 1213.82 L1405.31 1213.82 L1404.72 1213.82 L1404.14 1213.82 L1403.55 1213.82 L1402.96 1213.82 L1402.38 1213.82 L1401.79 1213.82 L1401.21 1213.82 L1400.62 1213.82 L1400.03 1213.82 L1399.45 1213.82 L1398.86 1213.82 L1398.27 1213.82 L1397.69 1213.82 L1397.1 1213.82 L1396.51 1213.82 L1395.93 1213.82 L1395.34 1213.82 L1394.75 1213.82 L1394.17 1213.82 L1393.58 1213.82 L1393 1213.82 L1392.41 1213.82 L1391.82 1213.82 L1391.24 1213.82 L1390.65 1213.82 L1390.06 1213.82 L1389.48 1213.82 L1388.89 1213.82 L1388.3 1213.82 L1387.72 1213.82 L1387.13 1213.82 L1386.55 1213.82 L1385.96 1213.82 L1385.37 1213.82 L1384.79 1213.82 L1384.2 1213.82 L1383.61 1213.82 L1383.03 1213.82 L1382.44 1213.82 L1381.85 1213.82 L1381.27 1213.82 L1380.68 1213.82 L1380.09 1213.82 L1379.51 1213.82 L1378.92 1213.82 L1378.34 1213.82 L1377.75 1213.82 L1377.16 1213.82 L1376.58 1213.82 L1375.99 1213.82 L1375.4 1213.82 L1374.82 1213.82 L1374.23 1213.82 L1373.64 1213.82 L1373.06 1213.82 L1372.47 1213.82 L1371.88 1213.82 L1371.3 1213.82 L1370.71 1213.82 L1370.13 1213.82 L1369.54 1213.82 L1368.95 1213.82 L1368.37 1213.82 L1367.78 1213.82 L1367.19 1213.82 L1366.61 1213.82 L1366.02 1213.82 L1365.43 1213.82 L1364.85 1213.82 L1364.26 1213.82 L1363.68 1213.82 L1363.09 1213.82 L1362.5 1213.82 L1361.92 1213.82 L1361.33 1213.82 L1360.74 1213.82 L1360.16 1213.82 L1359.57 1213.82 L1358.98 1213.82 L1358.4 1213.82 L1357.81 1213.82 L1357.22 1213.82 L1356.64 1213.82 L1356.05 1213.82 L1355.47 1213.82 L1354.88 1213.82 L1354.29 1213.82 L1353.71 1213.82 L1353.12 1213.82 L1352.53 1213.82 L1351.95 1213.82 L1351.36 1213.82 L1350.77 1213.82 L1350.19 1213.82 L1349.6 1213.82 L1349.01 1213.82 L1348.43 1213.82 L1347.84 1213.82 L1347.26 1213.82 L1346.67 1213.82 L1346.08 1213.82 L1345.5 1213.82 L1344.91 1213.82 L1344.32 1213.82 L1343.74 1213.82 L1343.15 1213.82 L1342.56 1213.82 L1341.98 1213.82 L1341.39 1213.82 L1340.8 1213.82 L1340.22 1213.82 L1339.63 1213.82 L1339.05 1213.82 L1338.46 1213.82 L1337.87 1213.82 L1337.29 1213.82 L1336.7 1213.82 L1336.11 1213.82 L1335.53 1213.82 L1334.94 1213.82 L1334.35 1213.82 L1333.77 1213.82 L1333.18 1213.82 L1332.6 1213.82 L1332.01 1213.82 L1331.42 1213.82 L1330.84 1213.82 L1330.25 1213.82 L1329.66 1213.82 L1329.08 1213.82 L1328.49 1213.82 L1327.9 1213.82 L1327.32 1213.82 L1326.73 1213.82 L1326.14 1213.82 L1325.56 1213.82 L1324.97 1213.82 L1324.39 1213.82 L1323.8 1213.82 L1323.21 1213.82 L1322.63 1213.82 L1322.04 1213.82 L1321.45 1213.82 L1320.87 1213.82 L1320.28 1213.82 L1319.69 1213.82 L1319.11 1213.82 L1318.52 1213.82 L1317.93 1213.82 L1317.35 1213.82 L1316.76 1213.82 L1316.18 1213.82 L1315.59 1213.82 L1315 1213.82 L1314.42 1213.82 L1313.83 1213.82 L1313.24 1213.82 L1312.66 1213.82 L1312.07 1213.82 L1311.48 1213.82 L1310.9 1213.82 L1310.31 1213.82 L1309.73 1213.82 L1309.14 1213.82 L1308.55 1213.82 L1307.97 1213.82 L1307.38 1213.82 L1306.79 1213.82 L1306.21 1213.82 L1305.62 1213.82 L1305.03 1213.82 L1304.45 1213.82 L1303.86 1213.82 L1303.27 1213.82 L1302.69 1213.82 L1302.1 1213.82 L1301.52 1213.82 L1300.93 1213.82 L1300.34 1213.82 L1299.76 1213.82 L1299.17 1213.82 L1298.58 1213.82 L1298 1213.82 L1297.41 1213.82 L1296.82 1213.82 L1296.24 1213.82 L1295.65 1213.82 L1295.06 1213.82 L1294.48 1213.82 L1293.89 1213.82 L1293.31 1213.82 L1292.72 1213.82 L1292.13 1213.82 L1291.55 1213.82 L1290.96 1213.82 L1290.37 1213.82 L1289.79 1213.82 L1289.2 1213.82 L1288.61 1213.82 L1288.03 1213.82 L1287.44 1213.82 L1286.86 1213.82 L1286.27 1213.82 L1285.68 1213.82 L1285.1 1213.82 L1284.51 1213.82 L1283.92 1213.82 L1283.34 1213.82 L1282.75 1213.82 L1282.16 1213.82 L1281.58 1213.82 L1280.99 1213.82 L1280.4 1213.82 L1279.82 1213.82 L1279.23 1213.82 L1278.65 1213.82 L1278.06 1213.82 L1277.47 1213.82 L1276.89 1213.82 L1276.3 1213.82 L1275.71 1213.82 L1275.13 1213.82 L1274.54 1213.82 L1273.95 1213.82 L1273.37 1213.82 L1272.78 1213.82 L1272.19 1213.82 L1271.61 1213.82 L1271.02 1213.82 L1270.44 1213.82 L1269.85 1213.82 L1269.26 1213.82 L1268.68 1213.82 L1268.09 1213.82 L1267.5 1213.82 L1266.92 1213.82 L1266.33 1213.82 L1265.74 1213.82 L1265.16 1213.82 L1264.57 1213.82 L1263.98 1213.82 L1263.4 1213.82 L1262.81 1213.82 L1262.23 1213.82 L1261.64 1213.82 L1261.05 1213.82 L1260.47 1213.82 L1259.88 1213.82 L1259.29 1213.82 L1258.71 1213.82 L1258.12 1213.82 L1257.53 1213.82 L1256.95 1213.82 L1256.36 1213.82 L1255.78 1213.82 L1255.19 1213.82 L1254.6 1213.82 L1254.02 1213.82 L1253.43 1213.82 L1252.84 1213.82 L1252.26 1213.82 L1251.67 1213.82 L1251.08 1213.82 L1250.5 1213.82 L1249.91 1213.82 L1249.32 1213.82 L1248.74 1213.82 L1248.15 1213.82 L1247.57 1213.82 L1246.98 1213.82 L1246.39 1213.82 L1245.81 1213.82 L1245.22 1213.82 L1244.63 1213.82 L1244.05 1213.82 L1243.46 1213.82 L1242.87 1213.82 L1242.29 1213.82 L1241.7 1213.82 L1241.11 1213.82 L1240.53 1213.82 L1239.94 1213.82 L1239.36 1213.82 L1238.77 1213.82 L1238.18 1213.82 L1237.6 1213.82 L1237.01 1213.82 L1236.42 1213.82 L1235.84 1213.82 L1235.25 1213.82 L1234.66 1213.82 L1234.08 1213.82 L1233.49 1213.82 L1232.91 1213.82 L1232.32 1213.82 L1231.73 1213.82 L1231.15 1213.82 L1230.56 1213.82 L1229.97 1213.82 L1229.39 1213.82 L1228.8 1213.82 L1228.21 1213.82 L1227.63 1213.82 L1227.04 1213.82 L1226.45 1213.82 L1225.87 1213.82 L1225.28 1213.82 L1224.7 1213.82 L1224.11 1213.82 L1223.52 1213.82 L1222.94 1213.82 L1222.35 1213.82 L1221.76 1213.82 L1221.18 1213.82 L1220.59 1213.82 L1220 1213.82 L1219.42 1213.82 L1218.83 1213.82 L1218.24 1213.82 L1217.66 1213.82 L1217.07 1213.82 L1216.49 1213.82 L1215.9 1213.82 L1215.31 1213.82 L1214.73 1213.82 L1214.14 1213.82 L1213.55 1213.82 L1212.97 1213.82 L1212.38 1213.82 L1211.79 1213.82 L1211.21 1213.82 L1210.62 1213.82 L1210.03 1213.82 L1209.45 1213.82 L1208.86 1213.82 L1208.28 1213.82 L1207.69 1213.82 L1207.1 1213.82 L1206.52 1213.82 L1205.93 1213.82 L1205.34 1213.82 L1204.76 1213.82 L1204.17 1213.82 L1203.58 1213.82 L1203 1213.82 L1202.41 1213.82 L1201.83 1213.82 L1201.24 1213.82 L1200.65 1213.82 L1200.07 1213.82 L1199.48 1213.82 L1198.89 1213.82 L1198.31 1213.82 L1197.72 1213.82 L1197.13 1213.82 L1196.55 1213.82 L1195.96 1213.82 L1195.37 1213.82 L1194.79 1213.82 L1194.2 1213.82 L1193.62 1213.82 L1193.03 1213.82 L1192.44 1213.82 L1191.86 1213.82 L1191.27 1213.82 L1190.68 1213.82 L1190.1 1213.82 L1189.51 1213.82 L1188.92 1213.82 L1188.34 1213.82 L1187.75 1213.82 L1187.16 1213.82 L1186.58 1213.82 L1185.99 1213.82 L1185.41 1213.82 L1184.82 1213.82 L1184.23 1213.82 L1183.65 1213.82 L1183.06 1213.82 L1182.47 1213.82 L1181.89 1213.82 L1181.3 1213.82 L1180.71 1213.82 L1180.13 1213.82 L1179.54 1213.82 L1178.96 1213.82 L1178.37 1213.82 L1177.78 1213.82 L1177.2 1213.82 L1176.61 1213.82 L1176.02 1213.82 L1175.44 1213.82 L1174.85 1213.82 L1174.26 1213.82 L1173.68 1213.82 L1173.09 1213.82 L1172.5 1213.82 L1171.92 1213.82 L1171.33 1213.82 L1170.75 1213.82 L1170.16 1213.82 L1169.57 1213.82 L1168.99 1213.82 L1168.4 1213.82 L1167.81 1213.82 L1167.23 1213.82 L1166.64 1213.82 L1166.05 1213.82 L1165.47 1213.82 L1164.88 1213.82 L1164.29 1213.82 L1163.71 1213.82 L1163.12 1213.82 L1162.54 1213.82 L1161.95 1213.82 L1161.36 1213.82 L1160.78 1213.82 L1160.19 1213.82 L1159.6 1213.82 L1159.02 1213.82 L1158.43 1213.82 L1157.84 1213.82 L1157.26 1213.82 L1156.67 1213.82 L1156.09 1213.82 L1155.5 1213.82 L1154.91 1213.82 L1154.33 1213.82 L1153.74 1213.82 L1153.15 1213.82 L1152.57 1213.82 L1151.98 1213.82 L1151.39 1213.82 L1150.81 1213.82 L1150.22 1213.82 L1149.63 1213.82 L1149.05 1213.82 L1148.46 1213.82 L1147.88 1213.82 L1147.29 1213.82 L1146.7 1213.82 L1146.12 1213.82 L1145.53 1213.82 L1144.94 1213.82 L1144.36 1213.82 L1143.77 1213.82 L1143.18 1213.82 L1142.6 1213.82 L1142.01 1213.82 L1141.42 1213.82 L1140.84 1213.82 L1140.25 1213.82 L1139.67 1213.82 L1139.08 1213.82 L1138.49 1213.82 L1137.91 1213.82 L1137.32 1213.82 L1136.73 1213.82 L1136.15 1213.82 L1135.56 1213.82 L1134.97 1213.82 L1134.39 1213.82 L1133.8 1213.82 L1133.21 1213.82 L1132.63 1213.82 L1132.04 1213.82 L1131.46 1213.82 L1130.87 1213.82 L1130.28 1213.82 L1129.7 1213.82 L1129.11 1213.82 L1128.52 1213.82 L1127.94 1213.82 L1127.35 1213.82 L1126.76 1213.82 L1126.18 1213.82 L1125.59 1213.82 L1125.01 1213.82 L1124.42 1213.82 L1123.83 1213.82 L1123.25 1213.82 L1122.66 1213.82 L1122.07 1213.82 L1121.49 1213.82 L1120.9 1213.82 L1120.31 1213.82 L1119.73 1213.82 L1119.14 1213.82 L1118.55 1213.82 L1117.97 1213.82 L1117.38 1213.82 L1116.8 1213.82 L1116.21 1213.82 L1115.62 1213.82 L1115.04 1213.82 L1114.45 1213.82 L1113.86 1213.82 L1113.28 1213.82 L1112.69 1213.82 L1112.1 1213.82 L1111.52 1213.82 L1110.93 1213.82 L1110.34 1213.82 L1109.76 1213.82 L1109.17 1213.82 L1108.59 1213.82 L1108 1213.82 L1107.41 1213.82 L1106.83 1213.82 L1106.24 1213.82 L1105.65 1213.82 L1105.07 1213.82 L1104.48 1213.82 L1103.89 1213.82 L1103.31 1213.82 L1102.72 1213.82 L1102.14 1213.82 L1101.55 1213.82 L1100.96 1213.82 L1100.38 1213.82 L1099.79 1213.82 L1099.2 1213.82 L1098.62 1213.82 L1098.03 1213.82 L1097.44 1213.82 L1096.86 1213.82 L1096.27 1213.82 L1095.68 1213.82 L1095.1 1213.82 L1094.51 1213.82 L1093.93 1213.82 L1093.34 1213.82 L1092.75 1213.82 L1092.17 1213.82 L1091.58 1213.82 L1090.99 1213.82 L1090.41 1213.82 L1089.82 1213.82 L1089.23 1213.82 L1088.65 1213.82 L1088.06 1213.82 L1087.47 1213.82 L1086.89 1213.82 L1086.3 1213.82 L1085.72 1213.82 L1085.13 1213.82 L1084.54 1213.82 L1083.96 1213.82 L1083.37 1213.82 L1082.78 1213.82 L1082.2 1213.82 L1081.61 1213.82 L1081.02 1213.82 L1080.44 1213.82 L1079.85 1213.82 L1079.26 1213.82 L1078.68 1213.82 L1078.09 1213.82 L1077.51 1213.82 L1076.92 1213.82 L1076.33 1213.82 L1075.75 1213.82 L1075.16 1213.82 L1074.57 1213.82 L1073.99 1213.82 L1073.4 1213.82 L1072.81 1213.82 L1072.23 1213.82 L1071.64 1213.82 L1071.06 1213.82 L1070.47 1213.82 L1069.88 1213.82 L1069.3 1213.82 L1068.71 1213.82 L1068.12 1213.82 L1067.54 1213.82 L1066.95 1213.82 L1066.36 1213.82 L1065.78 1213.82 L1065.19 1213.82 L1064.6 1213.82 L1064.02 1213.82 L1063.43 1213.82 L1062.85 1213.82 L1062.26 1213.82 L1061.67 1213.82 L1061.09 1213.82 L1060.5 1213.82 L1059.91 1213.82 L1059.33 1213.82 L1058.74 1213.82 L1058.15 1213.82 L1057.57 1213.82 L1056.98 1213.82 L1056.39 1213.82 L1055.81 1213.82 L1055.22 1213.82 L1054.64 1213.82 L1054.05 1213.82 L1053.46 1213.82 L1052.88 1213.82 L1052.29 1213.82 L1051.7 1213.82 L1051.12 1213.82 L1050.53 1213.82 L1049.94 1213.82 L1049.36 1213.82 L1048.77 1213.82 L1048.19 1213.82 L1047.6 1213.82 L1047.01 1213.82 L1046.43 1213.82 L1045.84 1213.82 L1045.25 1213.82 L1044.67 1213.82 L1044.08 1213.82 L1043.49 1213.82 L1042.91 1213.82 L1042.32 1213.82 L1041.73 1213.82 L1041.15 1213.82 L1040.56 1213.82 L1039.98 1213.82 L1039.39 1213.82 L1038.8 1213.82 L1038.22 1213.82 L1037.63 1213.82 L1037.04 1213.82 L1036.46 1213.82 L1035.87 1213.82 L1035.28 1213.82 L1034.7 1213.82 L1034.11 1213.82 L1033.52 1213.82 L1032.94 1213.82 L1032.35 1213.82 L1031.77 1213.82 L1031.18 1213.82 L1030.59 1213.82 L1030.01 1213.82 L1029.42 1213.82 L1028.83 1213.82 L1028.25 1213.82 L1027.66 1213.82 L1027.07 1213.82 L1026.49 1213.82 L1025.9 1213.82 L1025.32 1213.82 L1024.73 1213.82 L1024.14 1213.82 L1023.56 1213.82 L1022.97 1213.82 L1022.38 1213.82 L1021.8 1213.82 L1021.21 1213.82 L1020.62 1213.82 L1020.04 1213.82 L1019.45 1213.82 L1018.86 1213.82 L1018.28 1213.82 L1017.69 1213.82 L1017.11 1213.82 L1016.52 1213.82 L1015.93 1213.82 L1015.35 1213.82 L1014.76 1213.82 L1014.17 1213.82 L1013.59 1213.82 L1013 1213.82 L1012.41 1213.82 L1011.83 1213.82 L1011.24 1213.82 L1010.65 1213.82 L1010.07 1213.82 L1009.48 1213.82 L1008.9 1213.82 L1008.31 1213.82 L1007.72 1213.82 L1007.14 1213.82 L1006.55 1213.82 L1005.96 1213.82 L1005.38 1213.82 L1004.79 1213.82 L1004.2 1213.82 L1003.62 1213.82 L1003.03 1213.82 L1002.44 1213.82 L1001.86 1213.82 L1001.27 1213.82 L1000.69 1213.82 L1000.1 1213.82 L999.513 1213.82 L998.926 1213.82 L998.34 1213.82 L997.754 1213.82 L997.167 1213.82 L996.581 1213.82 L995.994 1213.82 L995.408 1213.82 L994.822 1213.82 L994.235 1213.82 L993.649 1213.82 L993.062 1213.82 L992.476 1213.82 L991.889 1213.82 L991.303 1213.82 L990.717 1213.82 L990.13 1213.82 L989.544 1213.82 L988.957 1213.82 L988.371 1213.82 L987.785 1213.82 L987.198 1213.82 L986.612 1213.82 L986.025 1213.82  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.22 986.612,1214.22 987.198,1214.22 987.785,1214.22 988.371,1214.22 988.957,1214.22 989.544,1214.22 990.13,1214.22 990.717,1214.22 991.303,1214.22 991.889,1214.22 992.476,1214.22 993.062,1214.22 993.649,1214.22 994.235,1214.22 994.822,1214.22 995.408,1214.22 995.994,1214.22 996.581,1214.22 997.167,1214.22 997.754,1214.22 998.34,1214.22 998.926,1214.22 999.513,1214.22 1000.1,1214.22 1000.69,1214.22 1001.27,1214.22 1001.86,1214.22 1002.44,1214.22 1003.03,1214.22 1003.62,1214.22 1004.2,1214.22 1004.79,1214.22 1005.38,1214.22 1005.96,1214.22 1006.55,1214.22 1007.14,1214.22 1007.72,1214.22 1008.31,1214.22 1008.9,1214.22 1009.48,1214.22 1010.07,1214.22 1010.65,1214.22 1011.24,1214.22 1011.83,1214.22 1012.41,1214.22 1013,1214.22 1013.59,1214.22 1014.17,1214.22 1014.76,1214.22 1015.35,1214.22 1015.93,1214.22 1016.52,1214.22 1017.11,1214.22 1017.69,1214.22 1018.28,1214.22 1018.86,1214.22 1019.45,1214.22 1020.04,1214.22 1020.62,1214.22 1021.21,1214.22 1021.8,1214.22 1022.38,1214.22 1022.97,1214.22 1023.56,1214.22 1024.14,1214.22 1024.73,1214.22 1025.32,1214.22 1025.9,1214.22 1026.49,1214.22 1027.07,1214.22 1027.66,1214.22 1028.25,1214.22 1028.83,1214.22 1029.42,1214.22 1030.01,1214.22 1030.59,1214.22 1031.18,1214.22 1031.77,1214.22 1032.35,1214.22 1032.94,1214.22 1033.52,1214.22 1034.11,1214.22 1034.7,1214.22 1035.28,1214.22 1035.87,1214.22 1036.46,1214.22 1037.04,1214.22 1037.63,1214.22 1038.22,1214.22 1038.8,1214.22 1039.39,1214.22 1039.98,1214.22 1040.56,1214.22 1041.15,1214.22 1041.73,1214.22 1042.32,1214.22 1042.91,1214.22 1043.49,1214.22 1044.08,1214.22 1044.67,1214.22 1045.25,1214.22 1045.84,1214.22 1046.43,1214.22 1047.01,1214.22 1047.6,1214.22 1048.19,1214.22 1048.77,1214.22 1049.36,1214.22 1049.94,1214.22 1050.53,1214.22 1051.12,1214.22 1051.7,1214.22 1052.29,1214.22 1052.88,1214.22 1053.46,1214.22 1054.05,1214.22 1054.64,1214.22 1055.22,1214.22 1055.81,1214.22 1056.39,1214.22 1056.98,1214.22 1057.57,1214.22 1058.15,1214.22 1058.74,1214.22 1059.33,1214.22 1059.91,1214.22 1060.5,1214.22 1061.09,1214.22 1061.67,1214.22 1062.26,1214.22 1062.85,1214.22 1063.43,1214.22 1064.02,1214.22 1064.6,1214.22 1065.19,1214.22 1065.78,1214.22 1066.36,1214.22 1066.95,1214.22 1067.54,1214.22 1068.12,1214.22 1068.71,1214.22 1069.3,1214.22 1069.88,1214.22 1070.47,1214.22 1071.06,1214.22 1071.64,1214.22 1072.23,1214.22 1072.81,1214.22 1073.4,1214.22 1073.99,1214.22 1074.57,1214.22 1075.16,1214.22 1075.75,1214.22 1076.33,1214.22 1076.92,1214.22 1077.51,1214.22 1078.09,1214.22 1078.68,1214.22 1079.26,1214.22 1079.85,1214.22 1080.44,1214.22 1081.02,1214.22 1081.61,1214.22 1082.2,1214.22 1082.78,1214.22 1083.37,1214.22 1083.96,1214.22 1084.54,1214.22 1085.13,1214.22 1085.72,1214.22 1086.3,1214.22 1086.89,1214.22 1087.47,1214.22 1088.06,1214.22 1088.65,1214.22 1089.23,1214.22 1089.82,1214.22 1090.41,1214.22 1090.99,1214.22 1091.58,1214.22 1092.17,1214.22 1092.75,1214.22 1093.34,1214.22 1093.93,1214.22 1094.51,1214.22 1095.1,1214.22 1095.68,1214.22 1096.27,1214.22 1096.86,1214.22 1097.44,1214.22 1098.03,1214.22 1098.62,1214.22 1099.2,1214.22 1099.79,1214.22 1100.38,1214.22 1100.96,1214.22 1101.55,1214.22 1102.14,1214.22 1102.72,1214.22 1103.31,1214.22 1103.89,1214.22 1104.48,1214.22 1105.07,1214.22 1105.65,1214.22 1106.24,1214.22 1106.83,1214.22 1107.41,1214.22 1108,1214.22 1108.59,1214.22 1109.17,1214.22 1109.76,1214.22 1110.34,1214.22 1110.93,1214.22 1111.52,1214.22 1112.1,1214.22 1112.69,1214.22 1113.28,1214.22 1113.86,1214.22 1114.45,1214.22 1115.04,1214.22 1115.62,1214.22 1116.21,1214.22 1116.8,1214.22 1117.38,1214.22 1117.97,1214.22 1118.55,1214.22 1119.14,1214.22 1119.73,1214.22 1120.31,1214.22 1120.9,1214.22 1121.49,1214.22 1122.07,1214.22 1122.66,1214.22 1123.25,1214.22 1123.83,1214.22 1124.42,1214.22 1125.01,1214.22 1125.59,1214.22 1126.18,1214.22 1126.76,1214.22 1127.35,1214.22 1127.94,1214.22 1128.52,1214.22 1129.11,1214.22 1129.7,1214.22 1130.28,1214.22 1130.87,1214.22 1131.46,1214.22 1132.04,1214.22 1132.63,1214.22 1133.21,1214.22 1133.8,1214.22 1134.39,1214.22 1134.97,1214.22 1135.56,1214.22 1136.15,1214.22 1136.73,1214.22 1137.32,1214.22 1137.91,1214.22 1138.49,1214.22 1139.08,1214.22 1139.67,1214.22 1140.25,1214.22 1140.84,1214.22 1141.42,1214.22 1142.01,1214.22 1142.6,1214.22 1143.18,1214.22 1143.77,1214.22 1144.36,1214.22 1144.94,1214.22 1145.53,1214.22 1146.12,1214.22 1146.7,1214.22 1147.29,1214.22 1147.88,1214.22 1148.46,1214.22 1149.05,1214.22 1149.63,1214.22 1150.22,1214.22 1150.81,1214.22 1151.39,1214.22 1151.98,1214.22 1152.57,1214.22 1153.15,1214.22 1153.74,1214.22 1154.33,1214.22 1154.91,1214.22 1155.5,1214.22 1156.09,1214.22 1156.67,1214.22 1157.26,1214.22 1157.84,1214.22 1158.43,1214.22 1159.02,1214.22 1159.6,1214.22 1160.19,1214.22 1160.78,1214.22 1161.36,1214.22 1161.95,1214.22 1162.54,1214.22 1163.12,1214.22 1163.71,1214.22 1164.29,1214.22 1164.88,1214.22 1165.47,1214.22 1166.05,1214.22 1166.64,1214.22 1167.23,1214.22 1167.81,1214.22 1168.4,1214.22 1168.99,1214.22 1169.57,1214.22 1170.16,1214.22 1170.75,1214.22 1171.33,1214.22 1171.92,1214.22 1172.5,1214.22 1173.09,1214.22 1173.68,1214.22 1174.26,1214.22 1174.85,1214.22 1175.44,1214.22 1176.02,1214.22 1176.61,1214.22 1177.2,1214.22 1177.78,1214.22 1178.37,1214.22 1178.96,1214.22 1179.54,1214.22 1180.13,1214.22 1180.71,1214.22 1181.3,1214.22 1181.89,1214.22 1182.47,1214.22 1183.06,1214.22 1183.65,1214.22 1184.23,1214.22 1184.82,1214.22 1185.41,1214.22 1185.99,1214.22 1186.58,1214.22 1187.16,1214.22 1187.75,1214.22 1188.34,1214.22 1188.92,1214.22 1189.51,1214.22 1190.1,1214.22 1190.68,1214.22 1191.27,1214.22 1191.86,1214.22 1192.44,1214.22 1193.03,1214.22 1193.62,1214.22 1194.2,1214.22 1194.79,1214.22 1195.37,1214.22 1195.96,1214.22 1196.55,1214.22 1197.13,1214.22 1197.72,1214.22 1198.31,1214.22 1198.89,1214.22 1199.48,1214.22 1200.07,1214.22 1200.65,1214.22 1201.24,1214.22 1201.83,1214.22 1202.41,1214.22 1203,1214.22 1203.58,1214.22 1204.17,1214.22 1204.76,1214.22 1205.34,1214.22 1205.93,1214.22 1206.52,1214.22 1207.1,1214.22 1207.69,1214.22 1208.28,1214.22 1208.86,1214.22 1209.45,1214.22 1210.03,1214.22 1210.62,1214.22 1211.21,1214.22 1211.79,1214.22 1212.38,1214.22 1212.97,1214.22 1213.55,1214.22 1214.14,1214.22 1214.73,1214.22 1215.31,1214.22 1215.9,1214.22 1216.49,1214.22 1217.07,1214.22 1217.66,1214.22 1218.24,1214.22 1218.83,1214.22 1219.42,1214.22 1220,1214.22 1220.59,1214.22 1221.18,1214.22 1221.76,1214.22 1222.35,1214.22 1222.94,1214.22 1223.52,1214.22 1224.11,1214.22 1224.7,1214.22 1225.28,1214.22 1225.87,1214.22 1226.45,1214.22 1227.04,1214.22 1227.63,1214.22 1228.21,1214.22 1228.8,1214.22 1229.39,1214.22 1229.97,1214.22 1230.56,1214.22 1231.15,1214.22 1231.73,1214.22 1232.32,1214.22 1232.91,1214.22 1233.49,1214.22 1234.08,1214.22 1234.66,1214.22 1235.25,1214.22 1235.84,1214.22 1236.42,1214.22 1237.01,1214.22 1237.6,1214.22 1238.18,1214.22 1238.77,1214.22 1239.36,1214.22 1239.94,1214.22 1240.53,1214.22 1241.11,1214.22 1241.7,1214.22 1242.29,1214.22 1242.87,1214.22 1243.46,1214.22 1244.05,1214.22 1244.63,1214.22 1245.22,1214.22 1245.81,1214.22 1246.39,1214.22 1246.98,1214.22 1247.57,1214.22 1248.15,1214.22 1248.74,1214.22 1249.32,1214.22 1249.91,1214.22 1250.5,1214.22 1251.08,1214.22 1251.67,1214.22 1252.26,1214.22 1252.84,1214.22 1253.43,1214.22 1254.02,1214.22 1254.6,1214.22 1255.19,1214.22 1255.78,1214.22 1256.36,1214.22 1256.95,1214.22 1257.53,1214.22 1258.12,1214.22 1258.71,1214.22 1259.29,1214.22 1259.88,1214.22 1260.47,1214.22 1261.05,1214.22 1261.64,1214.22 1262.23,1214.22 1262.81,1214.22 1263.4,1214.22 1263.98,1214.22 1264.57,1214.22 1265.16,1214.22 1265.74,1214.22 1266.33,1214.22 1266.92,1214.22 1267.5,1214.22 1268.09,1214.22 1268.68,1214.22 1269.26,1214.22 1269.85,1214.22 1270.44,1214.22 1271.02,1214.22 1271.61,1214.22 1272.19,1214.22 1272.78,1214.22 1273.37,1214.22 1273.95,1214.22 1274.54,1214.22 1275.13,1214.22 1275.71,1214.22 1276.3,1214.22 1276.89,1214.22 1277.47,1214.22 1278.06,1214.22 1278.65,1214.22 1279.23,1214.22 1279.82,1214.22 1280.4,1214.22 1280.99,1214.22 1281.58,1214.22 1282.16,1214.22 1282.75,1214.22 1283.34,1214.22 1283.92,1214.22 1284.51,1214.22 1285.1,1214.22 1285.68,1214.22 1286.27,1214.22 1286.86,1214.22 1287.44,1214.22 1288.03,1214.22 1288.61,1214.22 1289.2,1214.22 1289.79,1214.22 1290.37,1214.22 1290.96,1214.22 1291.55,1214.22 1292.13,1214.22 1292.72,1214.22 1293.31,1214.22 1293.89,1214.22 1294.48,1214.22 1295.06,1214.22 1295.65,1214.22 1296.24,1214.22 1296.82,1214.22 1297.41,1214.22 1298,1214.22 1298.58,1214.22 1299.17,1214.22 1299.76,1214.22 1300.34,1214.22 1300.93,1214.22 1301.52,1214.22 1302.1,1214.22 1302.69,1214.22 1303.27,1214.22 1303.86,1214.22 1304.45,1214.22 1305.03,1214.22 1305.62,1214.22 1306.21,1214.22 1306.79,1214.22 1307.38,1214.22 1307.97,1214.22 1308.55,1214.22 1309.14,1214.22 1309.73,1214.22 1310.31,1214.22 1310.9,1214.22 1311.48,1214.22 1312.07,1214.22 1312.66,1214.22 1313.24,1214.22 1313.83,1214.22 1314.42,1214.22 1315,1214.22 1315.59,1214.22 1316.18,1214.22 1316.76,1214.22 1317.35,1214.22 1317.93,1214.22 1318.52,1214.22 1319.11,1214.22 1319.69,1214.22 1320.28,1214.22 1320.87,1214.22 1321.45,1214.22 1322.04,1214.22 1322.63,1214.22 1323.21,1214.22 1323.8,1214.22 1324.39,1214.22 1324.97,1214.22 1325.56,1214.22 1326.14,1214.22 1326.73,1214.22 1327.32,1214.22 1327.9,1214.22 1328.49,1214.22 1329.08,1214.22 1329.66,1214.22 1330.25,1214.22 1330.84,1214.22 1331.42,1214.22 1332.01,1214.22 1332.6,1214.22 1333.18,1214.22 1333.77,1214.22 1334.35,1214.22 1334.94,1214.22 1335.53,1214.22 1336.11,1214.22 1336.7,1214.22 1337.29,1214.22 1337.87,1214.22 1338.46,1214.22 1339.05,1214.22 1339.63,1214.22 1340.22,1214.22 1340.8,1214.22 1341.39,1214.22 1341.98,1214.22 1342.56,1214.22 1343.15,1214.22 1343.74,1214.22 1344.32,1214.22 1344.91,1214.22 1345.5,1214.22 1346.08,1214.22 1346.67,1214.22 1347.26,1214.22 1347.84,1214.22 1348.43,1214.22 1349.01,1214.22 1349.6,1214.22 1350.19,1214.22 1350.77,1214.22 1351.36,1214.22 1351.95,1214.22 1352.53,1214.22 1353.12,1214.22 1353.71,1214.22 1354.29,1214.22 1354.88,1214.22 1355.47,1214.22 1356.05,1214.22 1356.64,1214.22 1357.22,1214.22 1357.81,1214.22 1358.4,1214.22 1358.98,1214.22 1359.57,1214.22 1360.16,1214.22 1360.74,1214.22 1361.33,1214.22 1361.92,1214.22 1362.5,1214.22 1363.09,1214.22 1363.68,1214.22 1364.26,1214.22 1364.85,1214.22 1365.43,1214.22 1366.02,1214.22 1366.61,1214.22 1367.19,1214.22 1367.78,1214.22 1368.37,1214.22 1368.95,1214.22 1369.54,1214.22 1370.13,1214.22 1370.71,1214.22 1371.3,1214.22 1371.88,1214.22 1372.47,1214.22 1373.06,1214.22 1373.64,1214.22 1374.23,1214.22 1374.82,1214.22 1375.4,1214.22 1375.99,1214.22 1376.58,1214.22 1377.16,1214.22 1377.75,1214.22 1378.34,1214.22 1378.92,1214.22 1379.51,1214.22 1380.09,1214.22 1380.68,1214.22 1381.27,1214.22 1381.85,1214.22 1382.44,1214.22 1383.03,1214.22 1383.61,1214.22 1384.2,1214.22 1384.79,1214.22 1385.37,1214.22 1385.96,1214.22 1386.55,1214.22 1387.13,1214.22 1387.72,1214.22 1388.3,1214.22 1388.89,1214.22 1389.48,1214.22 1390.06,1214.22 1390.65,1214.22 1391.24,1214.22 1391.82,1214.22 1392.41,1214.22 1393,1214.22 1393.58,1214.22 1394.17,1214.22 1394.75,1214.22 1395.34,1214.22 1395.93,1214.22 1396.51,1214.22 1397.1,1214.22 1397.69,1214.22 1398.27,1214.22 1398.86,1214.22 1399.45,1214.22 1400.03,1214.22 1400.62,1214.22 1401.21,1214.22 1401.79,1214.22 1402.38,1214.22 1402.96,1214.22 1403.55,1214.22 1404.14,1214.22 1404.72,1214.22 1405.31,1214.22 1405.9,1214.22 1406.48,1214.22 1407.07,1214.22 1407.66,1214.22 1408.24,1214.22 1408.83,1214.22 1409.42,1214.22 1410,1214.22 1410.59,1214.22 1411.17,1214.22 1411.76,1214.22 1412.35,1214.22 1412.93,1214.22 1413.52,1214.22 1414.11,1214.22 1414.69,1214.22 1415.28,1214.22 1415.87,1214.22 1416.45,1214.22 1417.04,1214.22 1417.63,1214.22 1418.21,1214.22 1418.8,1214.22 1419.38,1214.22 1419.97,1214.22 1420.56,1214.22 1421.14,1214.22 1421.73,1214.22 1422.32,1214.22 1422.9,1214.22 1423.49,1214.22 1424.08,1214.22 1424.66,1214.22 1425.25,1214.22 1425.83,1214.22 1426.42,1214.22 1427.01,1214.22 1427.59,1214.22 1428.18,1214.22 1428.77,1214.22 1429.35,1214.22 1429.94,1214.22 1430.53,1214.22 1431.11,1214.22 1431.7,1214.22 1432.29,1214.22 1432.87,1214.22 1433.46,1214.22 1434.04,1214.22 1434.63,1214.22 1435.22,1214.22 1435.8,1214.22 1436.39,1214.22 1436.98,1214.22 1437.56,1214.22 1438.15,1214.22 1438.74,1214.22 1439.32,1214.22 1439.91,1214.22 1440.5,1214.22 1441.08,1214.22 1441.67,1214.22 1442.25,1214.22 1442.84,1214.22 1443.43,1214.22 1444.01,1214.22 1444.6,1214.22 1445.19,1214.22 1445.77,1214.22 1446.36,1214.22 1446.95,1214.22 1447.53,1214.22 1448.12,1214.22 1448.7,1214.22 1449.29,1214.22 1449.88,1214.22 1450.46,1214.22 1451.05,1214.22 1451.64,1214.22 1452.22,1214.22 1452.81,1214.22 1453.4,1214.22 1453.98,1214.22 1454.57,1214.22 1455.16,1214.22 1455.74,1214.22 1456.33,1214.22 1456.91,1214.22 1457.5,1214.22 1458.09,1214.22 1458.67,1214.22 1459.26,1214.22 1459.85,1214.22 1460.43,1214.22 1461.02,1214.22 1461.61,1214.22 1462.19,1214.22 1462.78,1214.22 1463.37,1214.22 1463.95,1214.22 1464.54,1214.22 1465.12,1214.22 1465.71,1214.22 1466.3,1214.22 1466.88,1214.22 1467.47,1214.22 1468.06,1214.22 1468.64,1214.22 1469.23,1214.22 1469.82,1214.22 1470.4,1214.22 1470.99,1214.22 1471.57,1214.22 1472.16,1214.22 1472.75,1214.22 1473.33,1214.22 1473.92,1214.22 1474.51,1214.22 1475.09,1214.22 1475.68,1214.22 1476.27,1214.22 1476.85,1214.22 1477.44,1214.22 1478.03,1214.22 1478.61,1214.22 1479.2,1214.22 1479.78,1214.22 1480.37,1214.22 1480.96,1214.22 1481.54,1214.22 1482.13,1214.22 1482.72,1214.22 1483.3,1214.22 1483.89,1214.22 1484.48,1214.22 1485.06,1214.22 1485.65,1214.22 1486.24,1214.22 1486.82,1214.22 1487.41,1214.22 1487.99,1214.22 1488.58,1214.22 1489.17,1214.22 1489.75,1214.22 1490.34,1214.22 1490.93,1214.22 1491.51,1214.22 1492.1,1214.22 1492.69,1214.22 1493.27,1214.22 1493.86,1214.22 1494.45,1214.22 1495.03,1214.22 1495.62,1214.22 1496.2,1214.22 1496.79,1214.22 1497.38,1214.22 1497.96,1214.22 1498.55,1214.22 1499.14,1214.22 1499.72,1214.22 1500.31,1214.22 1500.9,1214.22 1501.48,1214.22 1502.07,1214.22 1502.65,1214.22 1503.24,1214.22 1503.83,1214.22 1504.41,1214.22 1505,1214.22 1505.59,1214.22 1506.17,1214.22 1506.76,1214.22 1507.35,1214.22 1507.93,1214.22 1508.52,1214.22 1509.11,1214.22 1509.69,1214.22 1510.28,1214.22 1510.86,1214.22 1511.45,1214.22 1512.04,1214.22 1512.62,1214.22 1513.21,1214.22 1513.8,1214.22 1514.38,1214.22 1514.97,1214.22 1515.56,1214.22 1516.14,1214.22 1516.73,1214.22 1517.32,1214.22 1517.9,1214.22 1518.49,1214.22 1519.07,1214.22 1519.66,1214.22 1520.25,1214.22 1520.83,1214.22 1521.42,1214.22 1522.01,1214.22 1522.59,1214.22 1523.18,1214.22 1523.77,1214.22 1524.35,1214.22 1524.94,1214.22 1525.52,1214.22 1526.11,1214.22 1526.7,1214.22 1527.28,1214.22 1527.87,1214.22 1528.46,1214.22 1529.04,1214.22 1529.63,1214.22 1530.22,1214.22 1530.8,1214.22 1531.39,1214.22 1531.98,1214.22 1532.56,1214.22 1533.15,1214.22 1533.73,1214.22 1534.32,1214.22 1534.91,1214.22 1535.49,1214.22 1536.08,1214.22 1536.67,1214.22 1537.25,1214.22 1537.84,1214.22 1538.43,1214.22 1539.01,1214.22 1539.6,1214.22 1540.19,1214.22 1540.77,1214.22 1541.36,1214.22 1541.94,1214.22 1542.53,1214.22 1543.12,1214.22 1543.7,1214.22 1544.29,1214.22 1544.88,1214.22 1545.46,1214.22 1546.05,1214.22 1546.64,1214.22 1547.22,1214.22 1547.81,1214.22 1548.4,1214.22 1548.98,1214.22 1549.57,1214.22 1550.15,1214.22 1550.74,1214.22 1551.33,1214.22 1551.91,1214.22 1552.5,1214.22 1553.09,1214.22 1553.67,1214.22 1554.26,1214.22 1554.85,1214.22 1555.43,1214.22 1556.02,1214.22 1556.6,1214.22 1557.19,1214.22 1557.78,1214.22 1558.36,1214.22 1558.95,1214.22 1559.54,1214.22 1560.12,1214.22 1560.71,1214.22 1561.3,1214.22 1561.88,1214.22 1562.47,1214.22 1563.06,1214.22 1563.64,1214.22 1564.23,1214.22 1564.81,1214.22 1565.4,1214.22 1565.99,1214.22 1566.57,1214.22 1567.16,1214.22 1567.75,1214.22 1568.33,1214.22 1568.92,1214.22 1569.51,1214.22 1570.09,1214.22 1570.68,1214.22 1571.27,1214.22 1571.85,1214.22 1572.44,1214.22 1573.02,1214.22 1573.61,1214.22 1574.2,1214.22 1574.78,1214.22 1575.37,1214.22 1575.96,1214.22 1576.54,1214.22 1577.13,1214.22 1577.72,1214.22 1578.3,1214.22 1578.89,1214.22 1579.47,1214.22 1580.06,1214.22 1580.65,1214.22 1581.23,1214.22 1581.82,1214.22 1582.41,1214.22 1582.99,1214.22 1583.58,1214.22 1584.17,1214.22 1584.75,1214.22 1585.34,1214.22 1585.93,1214.22 1586.51,1214.22 1587.1,1214.22 1587.68,1214.22 1588.27,1214.22 1588.86,1214.22 1589.44,1214.22 1590.03,1214.22 1590.62,1214.22 1591.2,1214.22 1591.79,1214.22 1592.38,1214.22 1592.96,1214.22 1593.55,1214.22 1594.14,1214.22 1594.72,1214.22 1595.31,1214.22 1595.89,1214.22 1596.48,1214.22 1597.07,1214.22 1597.65,1214.22 1598.24,1214.22 1598.83,1214.22 1599.41,1214.22 1600,1214.22 1600.59,1214.22 1601.17,1214.22 1601.76,1214.22 1602.34,1214.22 1602.93,1214.22 1603.52,1214.22 1604.1,1214.22 1604.69,1214.22 1605.28,1214.22 1605.86,1214.22 1606.45,1214.22 1607.04,1214.22 1607.62,1214.22 1608.21,1214.22 1608.8,1214.22 1609.38,1214.22 1609.97,1214.22 1610.55,1214.22 1611.14,1214.22 1611.73,1214.22 1612.31,1214.22 1612.9,1214.22 1613.49,1214.22 1614.07,1214.22 1614.66,1214.22 1615.25,1214.22 1615.83,1214.22 1616.42,1214.22 1617.01,1214.22 1617.59,1214.22 1618.18,1214.22 1618.76,1214.22 1619.35,1214.22 1619.94,1214.22 1620.52,1214.22 1621.11,1214.22 1621.7,1214.22 1622.28,1214.22 1622.87,1214.22 1623.46,1214.22 1624.04,1214.22 1624.63,1214.22 1625.22,1214.22 1625.8,1214.22 1626.39,1214.22 1626.97,1214.22 1627.56,1214.22 1628.15,1214.22 1628.73,1214.22 1629.32,1214.22 1629.91,1214.22 1630.49,1214.22 1631.08,1214.22 1631.67,1214.22 1632.25,1214.22 1632.84,1214.22 1633.42,1214.22 1634.01,1214.22 1634.6,1214.22 1635.18,1214.22 1635.77,1214.22 1636.36,1214.22 1636.94,1214.22 1637.53,1214.22 1638.12,1214.22 1638.7,1214.22 1639.29,1214.22 1639.88,1214.22 1640.46,1214.22 1641.05,1214.22 1641.63,1214.22 1642.22,1214.22 1642.81,1214.22 1643.39,1214.22 1643.98,1214.22 1644.57,1214.22 1645.15,1214.22 1645.74,1214.22 1646.33,1214.22 1646.91,1214.22 1647.5,1214.22 1648.09,1214.22 1648.67,1214.22 1649.26,1214.22 1649.84,1214.22 1650.43,1214.22 1651.02,1214.22 1651.6,1214.22 1652.19,1214.22 1652.78,1214.22 1653.36,1214.22 1653.95,1214.22 1654.54,1214.22 1655.12,1214.22 1655.71,1214.22 1656.29,1214.22 1656.88,1214.22 1657.47,1214.22 1658.05,1214.22 1658.64,1214.22 1659.23,1214.22 1659.81,1214.22 1660.4,1214.22 1660.99,1214.22 1661.57,1214.22 1662.16,1214.22 1662.75,1214.22 1663.33,1214.22 1663.92,1214.22 1664.5,1214.22 1665.09,1214.22 1665.68,1214.22 1666.26,1214.22 1666.85,1214.22 1667.44,1214.22 1668.02,1214.22 1668.61,1214.22 1669.2,1214.22 1669.78,1214.22 1670.37,1214.22 1670.96,1214.22 1671.54,1214.22 1672.13,1214.22 1672.71,1214.22 1673.3,1214.22 1673.89,1214.22 1674.47,1214.22 1675.06,1214.22 1675.65,1214.22 1676.23,1214.22 1676.82,1214.22 1677.41,1214.22 1677.99,1214.22 1678.58,1214.22 1679.17,1214.22 1679.75,1214.22 1680.34,1214.22 1680.92,1214.22 1681.51,1214.22 1682.1,1214.22 1682.68,1214.22 1683.27,1214.22 1683.86,1214.22 1684.44,1214.22 1685.03,1214.22 1685.62,1214.22 1686.2,1214.22 1686.79,1214.22 1687.37,1214.22 1687.96,1214.22 1688.55,1214.22 1689.13,1214.22 1689.72,1214.22 1690.31,1214.22 1690.89,1214.22 1691.48,1214.22 1692.07,1214.22 1692.65,1214.22 1693.24,1214.22 1693.83,1214.22 1694.41,1214.22 1695,1214.22 1695.58,1214.22 1696.17,1214.22 1696.76,1214.22 1697.34,1214.22 1697.93,1214.22 1698.52,1214.22 1699.1,1214.22 1699.69,1214.22 1700.28,1214.22 1700.86,1214.22 1701.45,1214.22 1702.04,1214.22 1702.62,1214.22 1703.21,1214.22 1703.79,1214.22 1704.38,1214.22 1704.97,1214.22 1705.55,1214.22 1706.14,1214.22 1706.73,1214.22 1707.31,1214.22 1707.9,1214.22 1708.49,1214.22 1709.07,1214.22 1709.66,1214.22 1710.24,1214.22 1710.83,1214.22 1711.42,1214.22 1712,1214.22 1712.59,1214.22 1713.18,1214.22 1713.76,1214.22 1714.35,1214.22 1714.94,1214.22 1715.52,1214.22 1716.11,1214.22 1716.7,1214.22 1717.28,1214.22 1717.87,1214.22 1718.45,1214.22 1719.04,1214.22 1719.63,1214.22 1720.21,1214.22 1720.8,1214.22 1721.39,1214.22 1721.97,1214.22 1722.56,1214.22 1723.15,1214.22 1723.73,1214.22 1724.32,1214.22 1724.91,1214.22 1725.49,1214.22 1726.08,1214.22 1726.66,1214.22 1727.25,1214.22 1727.84,1214.22 1728.42,1214.22 1729.01,1214.22 1729.6,1214.22 1730.18,1214.22 1730.77,1214.22 1731.36,1214.22 1731.94,1214.22 1732.53,1214.22 1733.11,1214.22 1733.7,1214.22 1734.29,1214.22 1734.87,1214.22 1735.46,1214.22 1736.05,1214.22 1736.63,1214.22 1737.22,1214.22 1737.81,1214.22 1738.39,1214.22 1738.98,1214.22 1739.57,1214.22 1740.15,1214.22 1740.74,1214.22 1741.32,1214.22 1741.91,1214.22 1742.5,1214.22 1743.08,1214.22 1743.67,1214.22 1744.26,1214.22 1744.84,1214.22 1745.43,1214.22 1746.02,1214.22 1746.6,1214.22 1747.19,1214.22 1747.78,1214.22 1748.36,1214.22 1748.95,1214.22 1749.53,1214.22 1750.12,1214.22 1750.71,1214.22 1751.29,1214.22 1751.88,1214.22 1752.47,1214.22 1753.05,1214.22 1753.64,1214.22 1754.23,1214.22 1754.81,1214.22 1755.4,1214.22 1755.99,1214.22 1756.57,1214.22 1757.16,1214.22 1757.74,1214.22 1758.33,1214.22 1758.92,1214.22 1759.5,1214.22 1760.09,1214.22 1760.68,1214.22 1761.26,1214.22 1761.85,1214.22 1762.44,1214.22 1763.02,1214.22 1763.61,1214.22 1764.19,1214.22 1764.78,1214.22 1765.37,1214.22 1765.95,1214.22 1766.54,1214.22 1767.13,1214.22 1767.71,1214.22 1768.3,1214.22 1768.89,1214.22 1769.47,1214.22 1770.06,1214.22 1770.65,1214.22 1771.23,1214.22 1771.82,1214.22 1772.4,1214.22 1772.99,1214.22 1773.58,1214.22 1774.16,1214.22 1774.75,1214.22 1775.34,1214.22 1775.92,1214.22 1776.51,1214.22 1777.1,1214.22 1777.68,1214.22 1778.27,1214.22 1778.86,1214.22 1779.44,1214.22 1780.03,1214.22 1780.61,1214.22 1781.2,1214.22 1781.79,1214.22 1782.37,1214.22 1782.96,1214.22 1783.55,1214.22 1784.13,1214.22 1784.72,1214.22 1785.31,1214.22 1785.89,1214.22 1786.48,1214.22 1787.06,1214.22 1787.65,1214.22 1788.24,1214.22 1788.82,1214.22 1789.41,1214.22 1790,1214.22 1790.58,1214.22 1791.17,1214.22 1791.76,1214.22 1792.34,1214.22 1792.93,1214.22 1793.52,1214.22 1794.1,1214.22 1794.69,1214.22 1795.27,1214.22 1795.86,1214.22 1796.45,1214.22 1797.03,1214.22 1797.62,1214.22 1798.21,1214.22 1798.79,1214.22 1799.38,1214.22 1799.97,1214.22 1800.55,1214.22 1801.14,1214.22 1801.73,1214.22 1802.31,1214.22 1802.9,1214.22 1803.48,1214.22 1804.07,1214.22 1804.66,1214.22 1805.24,1214.22 1805.83,1214.22 1806.42,1214.22 1807,1214.22 1807.59,1214.22 1808.18,1214.22 1808.76,1214.22 1809.35,1214.22 1809.94,1214.22 1810.52,1214.22 1811.11,1214.22 1811.69,1214.22 1812.28,1214.22 1812.87,1214.22 1813.45,1214.22 1814.04,1214.22 1814.63,1214.22 1815.21,1214.22 1815.8,1214.22 1816.39,1214.22 1816.97,1214.22 1817.56,1214.22 1818.14,1214.22 1818.73,1214.22 1819.32,1214.22 1819.9,1214.22 1820.49,1214.22 1821.08,1214.22 1821.66,1214.22 1822.25,1214.22 1822.84,1214.22 1823.42,1214.22 1824.01,1214.22 1824.6,1214.22 1825.18,1214.22 1825.77,1214.22 1826.35,1214.22 1826.94,1214.22 1827.53,1214.22 1828.11,1214.22 1828.7,1214.22 1829.29,1214.22 1829.87,1214.22 1830.46,1214.22 1831.05,1214.22 1831.63,1214.22 1832.22,1214.22 1832.81,1214.22 1833.39,1214.22 1833.98,1214.22 1834.56,1214.22 1835.15,1214.22 1835.74,1214.22 1836.32,1214.22 1836.91,1214.22 1837.5,1214.22 1838.08,1214.22 1838.67,1214.22 1839.26,1214.22 1839.84,1214.22 1840.43,1214.22 1841.01,1214.22 1841.6,1214.22 1842.19,1214.22 1842.77,1214.22 1843.36,1214.22 1843.95,1214.22 1844.53,1214.22 1845.12,1214.22 1845.71,1214.22 1846.29,1214.22 1846.88,1214.22 1847.47,1214.22 1848.05,1214.22 1848.64,1214.22 1849.22,1214.22 1849.81,1214.22 1850.4,1214.22 1850.98,1214.22 1851.57,1214.22 1852.16,1214.22 1852.74,1214.22 1853.33,1214.22 1853.92,1214.22 1854.5,1214.22 1855.09,1214.22 1855.68,1214.22 1856.26,1214.22 1856.85,1214.22 1857.43,1214.22 1858.02,1214.22 1858.61,1214.22 1859.19,1214.22 1859.78,1214.22 1860.37,1214.22 1860.95,1214.22 1861.54,1214.22 1862.13,1214.22 1862.71,1214.22 1863.3,1214.22 1863.88,1214.22 1864.47,1214.22 1865.06,1214.22 1865.64,1214.22 1866.23,1214.22 1866.82,1214.22 1867.4,1214.22 1867.99,1214.22 1868.58,1214.22 1869.16,1214.22 1869.75,1214.22 1870.34,1214.22 1870.92,1214.22 1871.51,1214.22 1872.09,1214.22 1872.68,1214.22 1873.27,1214.22 1873.85,1214.22 1874.44,1214.22 1875.03,1214.22 1875.61,1214.22 1876.2,1214.22 1876.79,1214.22 1877.37,1214.22 1877.96,1214.22 1878.55,1214.22 1879.13,1214.22 1879.72,1214.22 1880.3,1214.22 1880.89,1214.22 1881.48,1214.22 1882.06,1214.22 1882.65,1214.22 1883.24,1214.22 1883.82,1214.22 1884.41,1214.22 1885,1214.22 1885.58,1214.22 1886.17,1214.22 1886.76,1214.22 1887.34,1214.22 1887.93,1214.22 1888.51,1214.22 1889.1,1214.22 1889.69,1214.22 1890.27,1214.22 1890.86,1214.22 1891.45,1214.22 1892.03,1214.22 1892.62,1214.22 1893.21,1214.22 1893.79,1214.22 1894.38,1214.22 1894.96,1214.22 1895.55,1214.22 1896.14,1214.22 1896.72,1214.22 1897.31,1214.22 1897.9,1214.22 1898.48,1214.22 1899.07,1214.22 1899.66,1214.22 1900.24,1214.22 1900.83,1214.22 1901.42,1214.22 1902,1214.22 1902.59,1214.22 1903.17,1214.22 1903.76,1214.22 1904.35,1214.22 1904.93,1214.22 1905.52,1214.22 1906.11,1214.22 1906.69,1214.22 1907.28,1214.22 1907.87,1214.22 1908.45,1214.22 1909.04,1214.22 1909.63,1214.22 1910.21,1214.22 1910.8,1214.22 1911.38,1214.22 1911.97,1214.22 1912.56,1214.22 1913.14,1214.22 1913.73,1214.22 1914.32,1214.22 1914.9,1214.22 1915.49,1214.22 1916.08,1214.22 1916.66,1214.22 1917.25,1214.22 1917.83,1214.22 1918.42,1214.22 1919.01,1214.22 1919.59,1214.22 1920.18,1214.22 1920.77,1214.22 1921.35,1214.22 1921.94,1214.22 1922.53,1214.22 1923.11,1214.22 1923.7,1214.22 1924.29,1214.22 1924.87,1214.22 1925.46,1214.22 1926.04,1214.22 1926.63,1214.22 1927.22,1214.22 1927.8,1214.22 1928.39,1214.22 1928.98,1214.22 1929.56,1214.22 1930.15,1214.22 1930.74,1214.22 1931.32,1214.22 1931.91,1214.22 1932.5,1214.22 1933.08,1214.22 1933.67,1214.22 1934.25,1214.22 1934.84,1214.22 1935.43,1214.22 1936.01,1214.22 1936.6,1214.22 1937.19,1214.22 1937.77,1214.22 1938.36,1214.22 1938.95,1214.22 1939.53,1214.22 1940.12,1214.22 1940.71,1214.22 1941.29,1214.22 1941.88,1214.22 1942.46,1214.22 1943.05,1214.22 1943.64,1214.22 1944.22,1214.22 1944.81,1214.22 1945.4,1214.22 1945.98,1214.22 1946.57,1214.22 1947.16,1214.22 1947.74,1214.22 1948.33,1214.22 1948.91,1214.22 1949.5,1214.22 1950.09,1214.22 1950.67,1214.22 1951.26,1214.22 1951.85,1214.22 1952.43,1214.22 1953.02,1214.22 1953.61,1214.22 1954.19,1214.22 1954.78,1214.22 1955.37,1214.22 1955.95,1214.22 1956.54,1214.22 1957.12,1214.22 1957.71,1214.22 1958.3,1214.22 1958.88,1214.22 1959.47,1214.22 1960.06,1214.22 1960.64,1214.22 1961.23,1214.22 1961.82,1214.22 1962.4,1214.22 1962.99,1214.22 1963.58,1214.22 1964.16,1214.22 1964.75,1214.22 1965.33,1214.22 1965.92,1214.22 1966.51,1214.22 1967.09,1214.22 1967.68,1214.22 1968.27,1214.22 1968.85,1214.22 1969.44,1214.22 1970.03,1214.22 1970.61,1214.22 1971.2,1214.22 1971.78,1214.22 1972.37,1214.22 1972.96,1214.22 1973.54,1214.22 1974.13,1214.22 1974.72,1214.22 1975.3,1214.22 1975.89,1214.22 1976.48,1214.22 1977.06,1214.22 1977.65,1214.22 1978.24,1214.22 1978.82,1214.22 1979.41,1214.22 1979.99,1214.22 1980.58,1214.22 1981.17,1214.22 1981.75,1214.22 1982.34,1214.22 1982.93,1214.22 1983.51,1214.22 1984.1,1214.22 1984.69,1214.22 1985.27,1214.22 1985.86,1214.22 1986.45,1214.22 1987.03,1214.22 1987.62,1214.22 1988.2,1214.22 1988.79,1214.22 1989.38,1214.22 1989.96,1214.22 1990.55,1214.22 1991.14,1214.22 1991.72,1214.22 1992.31,1214.22 1992.9,1214.22 1993.48,1214.22 1994.07,1214.22 1994.65,1214.22 1995.24,1214.22 1995.83,1214.22 1996.41,1214.22 1997,1214.22 1997.59,1214.22 1998.17,1214.22 1998.76,1214.22 1999.35,1214.22 1999.93,1214.22 2000.52,1214.22 2001.11,1214.22 2001.69,1214.22 2002.28,1214.22 2002.86,1214.22 2003.45,1214.22 2004.04,1214.22 2004.62,1214.22 2005.21,1214.22 2005.8,1214.22 2006.38,1214.22 2006.97,1214.22 2007.56,1214.22 2008.14,1214.22 2008.73,1214.22 2009.32,1214.22 2009.9,1214.22 2010.49,1214.22 2011.07,1214.22 2011.66,1214.22 2012.25,1214.22 2012.83,1214.22 2013.42,1214.22 2014.01,1214.22 2014.59,1214.22 2015.18,1214.22 2015.77,1214.22 2016.35,1214.22 2016.94,1214.22 2017.53,1214.22 2018.11,1214.22 2018.7,1214.22 2019.28,1214.22 2019.87,1214.22 2020.46,1214.22 2021.04,1214.22 2021.63,1214.22 2022.22,1214.22 2022.8,1214.22 2023.39,1214.22 2023.98,1214.22 2024.56,1214.22 2025.15,1214.22 2025.73,1214.22 2026.32,1214.22 2026.91,1214.22 2027.49,1214.22 2028.08,1214.22 2028.67,1214.22 2029.25,1214.22 2029.84,1214.22 2030.43,1214.22 2031.01,1214.22 2031.6,1214.22 2032.19,1214.22 2032.77,1214.22 2033.36,1214.22 2033.94,1214.22 2034.53,1214.22 2035.12,1214.22 2035.7,1214.22 2036.29,1214.22 2036.88,1214.22 2037.46,1214.22 2038.05,1214.22 2038.64,1214.22 2039.22,1214.22 2039.81,1214.22 2040.4,1214.22 2040.98,1214.22 2041.57,1214.22 2042.15,1214.22 2042.74,1214.22 2043.33,1214.22 2043.91,1214.22 2044.5,1214.22 2045.09,1214.22 2045.67,1214.22 2046.26,1214.22 2046.85,1214.22 2047.43,1214.22 2048.02,1214.22 2048.6,1214.22 2049.19,1214.22 2049.78,1214.22 2050.36,1214.22 2050.95,1214.22 2051.54,1214.22 2052.12,1214.22 2052.71,1214.22 2053.3,1214.22 2053.88,1214.22 2054.47,1214.22 2055.06,1214.22 2055.64,1214.22 2056.23,1214.22 2056.81,1214.22 2057.4,1214.22 2057.99,1214.22 2058.57,1214.22 2059.16,1214.22 2059.75,1214.22 2060.33,1214.22 2060.92,1214.22 2061.51,1214.22 2062.09,1214.22 2062.68,1214.22 2063.27,1214.22 2063.85,1214.22 2064.44,1214.22 2065.02,1214.22 2065.61,1214.22 2066.2,1214.22 2066.78,1214.22 2067.37,1214.22 2067.96,1214.22 2068.54,1214.22 2069.13,1214.22 2069.72,1214.22 2070.3,1214.22 2070.89,1214.22 2071.48,1214.22 2072.06,1214.22 2072.65,1214.22 2073.23,1214.22 2073.82,1214.22 2074.41,1214.22 2074.99,1214.22 2075.58,1214.22 2076.17,1214.22 2076.75,1214.22 2077.34,1214.22 2077.93,1214.22 2078.51,1214.22 2079.1,1214.22 2079.68,1214.22 2080.27,1214.22 2080.86,1214.22 2081.44,1214.22 2082.03,1214.22 2082.62,1214.22 2083.2,1214.22 2083.79,1214.22 2084.38,1214.22 2084.96,1214.22 2085.55,1214.22 2086.14,1214.22 2086.72,1214.22 2087.31,1214.22 2087.89,1214.22 2088.48,1214.22 2089.07,1214.22 2089.65,1214.22 2090.24,1214.22 2090.83,1214.22 2091.41,1214.22 2092,1214.22 2092.59,1214.22 2093.17,1214.22 2093.76,1214.22 2094.35,1214.22 2094.93,1214.22 2095.52,1214.22 2096.1,1214.22 2096.69,1214.22 2097.28,1214.22 2097.86,1214.22 2098.45,1214.22 2099.04,1214.22 2099.62,1214.22 2100.21,1214.22 2100.8,1214.22 2101.38,1214.22 2101.97,1214.22 2102.55,1214.22 2103.14,1214.22 2103.73,1214.22 2104.31,1214.22 2104.9,1214.22 2105.49,1214.22 2106.07,1214.22 2106.66,1214.22 2107.25,1214.22 2107.83,1214.22 2108.42,1214.22 2109.01,1214.22 2109.59,1214.22 2110.18,1214.22 2110.76,1214.22 2111.35,1214.22 2111.94,1214.22 2112.52,1214.22 2113.11,1214.22 2113.7,1214.22 2114.28,1214.22 2114.87,1214.22 2115.46,1214.22 2116.04,1214.22 2116.63,1214.22 2117.22,1214.22 2117.8,1214.22 2118.39,1214.22 2118.97,1214.22 2119.56,1214.22 2120.15,1214.22 2120.73,1214.22 2121.32,1214.22 2121.91,1214.22 2122.49,1214.22 2123.08,1214.22 2123.67,1214.22 2124.25,1214.22 2124.84,1214.22 2125.42,1214.22 2126.01,1214.22 2126.6,1214.22 2127.18,1214.22 2127.77,1214.22 2128.36,1214.22 2128.94,1214.22 2129.53,1214.22 2130.12,1214.22 2130.7,1214.22 2131.29,1214.22 2131.88,1214.22 2132.46,1214.22 2133.05,1214.22 2133.63,1214.22 2134.22,1214.22 2134.81,1214.22 2135.39,1214.22 2135.98,1214.22 2136.57,1214.22 2137.15,1214.22 2137.74,1214.22 2138.33,1214.22 2138.91,1214.22 2139.5,1214.22 2140.09,1214.22 2140.67,1214.22 2141.26,1214.22 2141.84,1214.22 2142.43,1214.22 2143.02,1214.22 2143.6,1214.22 2144.19,1214.22 2144.78,1214.22 2145.36,1214.22 2145.95,1214.22 2146.54,1214.22 2147.12,1214.22 2147.71,1214.22 2148.3,1214.22 2148.88,1214.22 2149.47,1214.22 2150.05,1214.22 2150.64,1214.22 2151.23,1214.22 2151.81,1214.22 2152.4,1214.22 2152.99,1214.22 2153.57,1214.22 2154.16,1214.22 2154.75,1214.22 2155.33,1214.22 2155.92,1214.22 2156.5,1214.22 2157.09,1214.22 2157.68,1214.22 2158.26,1214.22 \"/>\n<path clip-path=\"url(#clip372)\" d=\"M986.025 1213.99 L986.612 1213.99 L987.198 1213.99 L987.785 1213.99 L988.371 1213.99 L988.957 1213.99 L989.544 1213.99 L990.13 1213.99 L990.717 1213.99 L991.303 1213.99 L991.889 1213.99 L992.476 1213.99 L993.062 1213.99 L993.649 1213.99 L994.235 1213.99 L994.822 1213.99 L995.408 1213.99 L995.994 1213.99 L996.581 1213.99 L997.167 1213.99 L997.754 1213.99 L998.34 1213.99 L998.926 1213.99 L999.513 1213.99 L1000.1 1213.99 L1000.69 1213.99 L1001.27 1213.99 L1001.86 1213.99 L1002.44 1213.99 L1003.03 1213.99 L1003.62 1213.99 L1004.2 1213.99 L1004.79 1213.99 L1005.38 1213.99 L1005.96 1213.99 L1006.55 1213.99 L1007.14 1213.99 L1007.72 1213.99 L1008.31 1213.99 L1008.9 1213.99 L1009.48 1213.99 L1010.07 1213.99 L1010.65 1213.99 L1011.24 1213.99 L1011.83 1213.99 L1012.41 1213.99 L1013 1213.99 L1013.59 1213.99 L1014.17 1213.99 L1014.76 1213.99 L1015.35 1213.99 L1015.93 1213.99 L1016.52 1213.99 L1017.11 1213.99 L1017.69 1213.99 L1018.28 1213.99 L1018.86 1213.99 L1019.45 1213.99 L1020.04 1213.99 L1020.62 1213.99 L1021.21 1213.99 L1021.8 1213.99 L1022.38 1213.99 L1022.97 1213.99 L1023.56 1213.99 L1024.14 1213.99 L1024.73 1213.99 L1025.32 1213.99 L1025.9 1213.99 L1026.49 1213.99 L1027.07 1213.99 L1027.66 1213.99 L1028.25 1213.99 L1028.83 1213.99 L1029.42 1213.99 L1030.01 1213.99 L1030.59 1213.99 L1031.18 1213.99 L1031.77 1213.99 L1032.35 1213.99 L1032.94 1213.99 L1033.52 1213.99 L1034.11 1213.99 L1034.7 1213.99 L1035.28 1213.99 L1035.87 1213.99 L1036.46 1213.99 L1037.04 1213.99 L1037.63 1213.99 L1038.22 1213.99 L1038.8 1213.99 L1039.39 1213.99 L1039.98 1213.99 L1040.56 1213.99 L1041.15 1213.99 L1041.73 1213.99 L1042.32 1213.99 L1042.91 1213.99 L1043.49 1213.99 L1044.08 1213.99 L1044.67 1213.99 L1045.25 1213.99 L1045.84 1213.99 L1046.43 1213.99 L1047.01 1213.99 L1047.6 1213.99 L1048.19 1213.99 L1048.77 1213.99 L1049.36 1213.99 L1049.94 1213.99 L1050.53 1213.99 L1051.12 1213.99 L1051.7 1213.99 L1052.29 1213.99 L1052.88 1213.99 L1053.46 1213.99 L1054.05 1213.99 L1054.64 1213.99 L1055.22 1213.99 L1055.81 1213.99 L1056.39 1213.99 L1056.98 1213.99 L1057.57 1213.99 L1058.15 1213.99 L1058.74 1213.99 L1059.33 1213.99 L1059.91 1213.99 L1060.5 1213.99 L1061.09 1213.99 L1061.67 1213.99 L1062.26 1213.99 L1062.85 1213.99 L1063.43 1213.99 L1064.02 1213.99 L1064.6 1213.99 L1065.19 1213.99 L1065.78 1213.99 L1066.36 1213.99 L1066.95 1213.99 L1067.54 1213.99 L1068.12 1213.99 L1068.71 1213.99 L1069.3 1213.99 L1069.88 1213.99 L1070.47 1213.99 L1071.06 1213.99 L1071.64 1213.99 L1072.23 1213.99 L1072.81 1213.99 L1073.4 1213.99 L1073.99 1213.99 L1074.57 1213.99 L1075.16 1213.99 L1075.75 1213.99 L1076.33 1213.99 L1076.92 1213.99 L1077.51 1213.99 L1078.09 1213.99 L1078.68 1213.99 L1079.26 1213.99 L1079.85 1213.99 L1080.44 1213.99 L1081.02 1213.99 L1081.61 1213.99 L1082.2 1213.99 L1082.78 1213.99 L1083.37 1213.99 L1083.96 1213.99 L1084.54 1213.99 L1085.13 1213.99 L1085.72 1213.99 L1086.3 1213.99 L1086.89 1213.99 L1087.47 1213.99 L1088.06 1213.99 L1088.65 1213.99 L1089.23 1213.99 L1089.82 1213.99 L1090.41 1213.99 L1090.99 1213.99 L1091.58 1213.99 L1092.17 1213.99 L1092.75 1213.99 L1093.34 1213.99 L1093.93 1213.99 L1094.51 1213.99 L1095.1 1213.99 L1095.68 1213.99 L1096.27 1213.99 L1096.86 1213.99 L1097.44 1213.99 L1098.03 1213.99 L1098.62 1213.99 L1099.2 1213.99 L1099.79 1213.99 L1100.38 1213.99 L1100.96 1213.99 L1101.55 1213.99 L1102.14 1213.99 L1102.72 1213.99 L1103.31 1213.99 L1103.89 1213.99 L1104.48 1213.99 L1105.07 1213.99 L1105.65 1213.99 L1106.24 1213.99 L1106.83 1213.99 L1107.41 1213.99 L1108 1213.99 L1108.59 1213.99 L1109.17 1213.99 L1109.76 1213.99 L1110.34 1213.99 L1110.93 1213.99 L1111.52 1213.99 L1112.1 1213.99 L1112.69 1213.99 L1113.28 1213.99 L1113.86 1213.99 L1114.45 1213.99 L1115.04 1213.99 L1115.62 1213.99 L1116.21 1213.99 L1116.8 1213.99 L1117.38 1213.99 L1117.97 1213.99 L1118.55 1213.99 L1119.14 1213.99 L1119.73 1213.99 L1120.31 1213.99 L1120.9 1213.99 L1121.49 1213.99 L1122.07 1213.99 L1122.66 1213.99 L1123.25 1213.99 L1123.83 1213.99 L1124.42 1213.99 L1125.01 1213.99 L1125.59 1213.99 L1126.18 1213.99 L1126.76 1213.99 L1127.35 1213.99 L1127.94 1213.99 L1128.52 1213.99 L1129.11 1213.99 L1129.7 1213.99 L1130.28 1213.99 L1130.87 1213.99 L1131.46 1213.99 L1132.04 1213.99 L1132.63 1213.99 L1133.21 1213.99 L1133.8 1213.99 L1134.39 1213.99 L1134.97 1213.99 L1135.56 1213.99 L1136.15 1213.99 L1136.73 1213.99 L1137.32 1213.99 L1137.91 1213.99 L1138.49 1213.99 L1139.08 1213.99 L1139.67 1213.99 L1140.25 1213.99 L1140.84 1213.99 L1141.42 1213.99 L1142.01 1213.99 L1142.6 1213.99 L1143.18 1213.99 L1143.77 1213.99 L1144.36 1213.99 L1144.94 1213.99 L1145.53 1213.99 L1146.12 1213.99 L1146.7 1213.99 L1147.29 1213.99 L1147.88 1213.99 L1148.46 1213.99 L1149.05 1213.99 L1149.63 1213.99 L1150.22 1213.99 L1150.81 1213.99 L1151.39 1213.99 L1151.98 1213.99 L1152.57 1213.99 L1153.15 1213.99 L1153.74 1213.99 L1154.33 1213.99 L1154.91 1213.99 L1155.5 1213.99 L1156.09 1213.99 L1156.67 1213.99 L1157.26 1213.99 L1157.84 1213.99 L1158.43 1213.99 L1159.02 1213.99 L1159.6 1213.99 L1160.19 1213.99 L1160.78 1213.99 L1161.36 1213.99 L1161.95 1213.99 L1162.54 1213.99 L1163.12 1213.99 L1163.71 1213.99 L1164.29 1213.99 L1164.88 1213.99 L1165.47 1213.99 L1166.05 1213.99 L1166.64 1213.99 L1167.23 1213.99 L1167.81 1213.99 L1168.4 1213.99 L1168.99 1213.99 L1169.57 1213.99 L1170.16 1213.99 L1170.75 1213.99 L1171.33 1213.99 L1171.92 1213.99 L1172.5 1213.99 L1173.09 1213.99 L1173.68 1213.99 L1174.26 1213.99 L1174.85 1213.99 L1175.44 1213.99 L1176.02 1213.99 L1176.61 1213.99 L1177.2 1213.99 L1177.78 1213.99 L1178.37 1213.99 L1178.96 1213.99 L1179.54 1213.99 L1180.13 1213.99 L1180.71 1213.99 L1181.3 1213.99 L1181.89 1213.99 L1182.47 1213.99 L1183.06 1213.99 L1183.65 1213.99 L1184.23 1213.99 L1184.82 1213.99 L1185.41 1213.99 L1185.99 1213.99 L1186.58 1213.99 L1187.16 1213.99 L1187.75 1213.99 L1188.34 1213.99 L1188.92 1213.99 L1189.51 1213.99 L1190.1 1213.99 L1190.68 1213.99 L1191.27 1213.99 L1191.86 1213.99 L1192.44 1213.99 L1193.03 1213.99 L1193.62 1213.99 L1194.2 1213.99 L1194.79 1213.99 L1195.37 1213.99 L1195.96 1213.99 L1196.55 1213.99 L1197.13 1213.99 L1197.72 1213.99 L1198.31 1213.99 L1198.89 1213.99 L1199.48 1213.99 L1200.07 1213.99 L1200.65 1213.99 L1201.24 1213.99 L1201.83 1213.99 L1202.41 1213.99 L1203 1213.99 L1203.58 1213.99 L1204.17 1213.99 L1204.76 1213.99 L1205.34 1213.99 L1205.93 1213.99 L1206.52 1213.99 L1207.1 1213.99 L1207.69 1213.99 L1208.28 1213.99 L1208.86 1213.99 L1209.45 1213.99 L1210.03 1213.99 L1210.62 1213.99 L1211.21 1213.99 L1211.79 1213.99 L1212.38 1213.99 L1212.97 1213.99 L1213.55 1213.99 L1214.14 1213.99 L1214.73 1213.99 L1215.31 1213.99 L1215.9 1213.99 L1216.49 1213.99 L1217.07 1213.99 L1217.66 1213.99 L1218.24 1213.99 L1218.83 1213.99 L1219.42 1213.99 L1220 1213.99 L1220.59 1213.99 L1221.18 1213.99 L1221.76 1213.99 L1222.35 1213.99 L1222.94 1213.99 L1223.52 1213.99 L1224.11 1213.99 L1224.7 1213.99 L1225.28 1213.99 L1225.87 1213.99 L1226.45 1213.99 L1227.04 1213.99 L1227.63 1213.99 L1228.21 1213.99 L1228.8 1213.99 L1229.39 1213.99 L1229.97 1213.99 L1230.56 1213.99 L1231.15 1213.99 L1231.73 1213.99 L1232.32 1213.99 L1232.91 1213.99 L1233.49 1213.99 L1234.08 1213.99 L1234.66 1213.99 L1235.25 1213.99 L1235.84 1213.99 L1236.42 1213.99 L1237.01 1213.99 L1237.6 1213.99 L1238.18 1213.99 L1238.77 1213.99 L1239.36 1213.99 L1239.94 1213.99 L1240.53 1213.99 L1241.11 1213.99 L1241.7 1213.99 L1242.29 1213.99 L1242.87 1213.99 L1243.46 1213.99 L1244.05 1213.99 L1244.63 1213.99 L1245.22 1213.99 L1245.81 1213.99 L1246.39 1213.99 L1246.98 1213.99 L1247.57 1213.99 L1248.15 1213.99 L1248.74 1213.99 L1249.32 1213.99 L1249.91 1213.99 L1250.5 1213.99 L1251.08 1213.99 L1251.67 1213.99 L1252.26 1213.99 L1252.84 1213.99 L1253.43 1213.99 L1254.02 1213.99 L1254.6 1213.99 L1255.19 1213.99 L1255.78 1213.99 L1256.36 1213.99 L1256.95 1213.99 L1257.53 1213.99 L1258.12 1213.99 L1258.71 1213.99 L1259.29 1213.99 L1259.88 1213.99 L1260.47 1213.99 L1261.05 1213.99 L1261.64 1213.99 L1262.23 1213.99 L1262.81 1213.99 L1263.4 1213.99 L1263.98 1213.99 L1264.57 1213.99 L1265.16 1213.99 L1265.74 1213.99 L1266.33 1213.99 L1266.92 1213.99 L1267.5 1213.99 L1268.09 1213.99 L1268.68 1213.99 L1269.26 1213.99 L1269.85 1213.99 L1270.44 1213.99 L1271.02 1213.99 L1271.61 1213.99 L1272.19 1213.99 L1272.78 1213.99 L1273.37 1213.99 L1273.95 1213.99 L1274.54 1213.99 L1275.13 1213.99 L1275.71 1213.99 L1276.3 1213.99 L1276.89 1213.99 L1277.47 1213.99 L1278.06 1213.99 L1278.65 1213.99 L1279.23 1213.99 L1279.82 1213.99 L1280.4 1213.99 L1280.99 1213.99 L1281.58 1213.99 L1282.16 1213.99 L1282.75 1213.99 L1283.34 1213.99 L1283.92 1213.99 L1284.51 1213.99 L1285.1 1213.99 L1285.68 1213.99 L1286.27 1213.99 L1286.86 1213.99 L1287.44 1213.99 L1288.03 1213.99 L1288.61 1213.99 L1289.2 1213.99 L1289.79 1213.99 L1290.37 1213.99 L1290.96 1213.99 L1291.55 1213.99 L1292.13 1213.99 L1292.72 1213.99 L1293.31 1213.99 L1293.89 1213.99 L1294.48 1213.99 L1295.06 1213.99 L1295.65 1213.99 L1296.24 1213.99 L1296.82 1213.99 L1297.41 1213.99 L1298 1213.99 L1298.58 1213.99 L1299.17 1213.99 L1299.76 1213.99 L1300.34 1213.99 L1300.93 1213.99 L1301.52 1213.99 L1302.1 1213.99 L1302.69 1213.99 L1303.27 1213.99 L1303.86 1213.99 L1304.45 1213.99 L1305.03 1213.99 L1305.62 1213.99 L1306.21 1213.99 L1306.79 1213.99 L1307.38 1213.99 L1307.97 1213.99 L1308.55 1213.99 L1309.14 1213.99 L1309.73 1213.99 L1310.31 1213.99 L1310.9 1213.99 L1311.48 1213.99 L1312.07 1213.99 L1312.66 1213.99 L1313.24 1213.99 L1313.83 1213.99 L1314.42 1213.99 L1315 1213.99 L1315.59 1213.99 L1316.18 1213.99 L1316.76 1213.99 L1317.35 1213.99 L1317.93 1213.99 L1318.52 1213.99 L1319.11 1213.99 L1319.69 1213.99 L1320.28 1213.99 L1320.87 1213.99 L1321.45 1213.99 L1322.04 1213.99 L1322.63 1213.99 L1323.21 1213.99 L1323.8 1213.99 L1324.39 1213.99 L1324.97 1213.99 L1325.56 1213.99 L1326.14 1213.99 L1326.73 1213.99 L1327.32 1213.99 L1327.9 1213.99 L1328.49 1213.99 L1329.08 1213.99 L1329.66 1213.99 L1330.25 1213.99 L1330.84 1213.99 L1331.42 1213.99 L1332.01 1213.99 L1332.6 1213.99 L1333.18 1213.99 L1333.77 1213.99 L1334.35 1213.99 L1334.94 1213.99 L1335.53 1213.99 L1336.11 1213.99 L1336.7 1213.99 L1337.29 1213.99 L1337.87 1213.99 L1338.46 1213.99 L1339.05 1213.99 L1339.63 1213.99 L1340.22 1213.99 L1340.8 1213.99 L1341.39 1213.99 L1341.98 1213.99 L1342.56 1213.99 L1343.15 1213.99 L1343.74 1213.99 L1344.32 1213.99 L1344.91 1213.99 L1345.5 1213.99 L1346.08 1213.99 L1346.67 1213.99 L1347.26 1213.99 L1347.84 1213.99 L1348.43 1213.99 L1349.01 1213.99 L1349.6 1213.99 L1350.19 1213.99 L1350.77 1213.99 L1351.36 1213.99 L1351.95 1213.99 L1352.53 1213.99 L1353.12 1213.99 L1353.71 1213.99 L1354.29 1213.99 L1354.88 1213.99 L1355.47 1213.99 L1356.05 1213.99 L1356.64 1213.99 L1357.22 1213.99 L1357.81 1213.99 L1358.4 1213.99 L1358.98 1213.99 L1359.57 1213.99 L1360.16 1213.99 L1360.74 1213.99 L1361.33 1213.99 L1361.92 1213.99 L1362.5 1213.99 L1363.09 1213.99 L1363.68 1213.99 L1364.26 1213.99 L1364.85 1213.99 L1365.43 1213.99 L1366.02 1213.99 L1366.61 1213.99 L1367.19 1213.99 L1367.78 1213.99 L1368.37 1213.99 L1368.95 1213.99 L1369.54 1213.99 L1370.13 1213.99 L1370.71 1213.99 L1371.3 1213.99 L1371.88 1213.99 L1372.47 1213.99 L1373.06 1213.99 L1373.64 1213.99 L1374.23 1213.99 L1374.82 1213.99 L1375.4 1213.99 L1375.99 1213.99 L1376.58 1213.99 L1377.16 1213.99 L1377.75 1213.99 L1378.34 1213.99 L1378.92 1213.99 L1379.51 1213.99 L1380.09 1213.99 L1380.68 1213.99 L1381.27 1213.99 L1381.85 1213.99 L1382.44 1213.99 L1383.03 1213.99 L1383.61 1213.99 L1384.2 1213.99 L1384.79 1213.99 L1385.37 1213.99 L1385.96 1213.99 L1386.55 1213.99 L1387.13 1213.99 L1387.72 1213.99 L1388.3 1213.99 L1388.89 1213.99 L1389.48 1213.99 L1390.06 1213.99 L1390.65 1213.99 L1391.24 1213.99 L1391.82 1213.99 L1392.41 1213.99 L1393 1213.99 L1393.58 1213.99 L1394.17 1213.99 L1394.75 1213.99 L1395.34 1213.99 L1395.93 1213.99 L1396.51 1213.99 L1397.1 1213.99 L1397.69 1213.99 L1398.27 1213.99 L1398.86 1213.99 L1399.45 1213.99 L1400.03 1213.99 L1400.62 1213.99 L1401.21 1213.99 L1401.79 1213.99 L1402.38 1213.99 L1402.96 1213.99 L1403.55 1213.99 L1404.14 1213.99 L1404.72 1213.99 L1405.31 1213.99 L1405.9 1213.99 L1406.48 1213.99 L1407.07 1213.99 L1407.66 1213.99 L1408.24 1213.99 L1408.83 1213.99 L1409.42 1213.99 L1410 1213.99 L1410.59 1213.99 L1411.17 1213.99 L1411.76 1213.99 L1412.35 1213.99 L1412.93 1213.99 L1413.52 1213.99 L1414.11 1213.99 L1414.69 1213.99 L1415.28 1213.99 L1415.87 1213.99 L1416.45 1213.99 L1417.04 1213.99 L1417.63 1213.99 L1418.21 1213.99 L1418.8 1213.99 L1419.38 1213.99 L1419.97 1213.99 L1420.56 1213.99 L1421.14 1213.99 L1421.73 1213.99 L1422.32 1213.99 L1422.9 1213.99 L1423.49 1213.99 L1424.08 1213.99 L1424.66 1213.99 L1425.25 1213.99 L1425.83 1213.99 L1426.42 1213.99 L1427.01 1213.99 L1427.59 1213.99 L1428.18 1213.99 L1428.77 1213.99 L1429.35 1213.99 L1429.94 1213.99 L1430.53 1213.99 L1431.11 1213.99 L1431.7 1213.99 L1432.29 1213.99 L1432.87 1213.99 L1433.46 1213.99 L1434.04 1213.99 L1434.63 1213.99 L1435.22 1213.99 L1435.8 1213.99 L1436.39 1213.99 L1436.98 1213.99 L1437.56 1213.99 L1438.15 1213.99 L1438.74 1213.99 L1439.32 1213.99 L1439.91 1213.99 L1440.5 1213.99 L1441.08 1213.99 L1441.67 1213.99 L1442.25 1213.99 L1442.84 1213.99 L1443.43 1213.99 L1444.01 1213.99 L1444.6 1213.99 L1445.19 1213.99 L1445.77 1213.99 L1446.36 1213.99 L1446.95 1213.99 L1447.53 1213.99 L1448.12 1213.99 L1448.7 1213.99 L1449.29 1213.99 L1449.88 1213.99 L1450.46 1213.99 L1451.05 1213.99 L1451.64 1213.99 L1452.22 1213.99 L1452.81 1213.99 L1453.4 1213.99 L1453.98 1213.99 L1454.57 1213.99 L1455.16 1213.99 L1455.74 1213.99 L1456.33 1213.99 L1456.91 1213.99 L1457.5 1213.99 L1458.09 1213.99 L1458.67 1213.99 L1459.26 1213.99 L1459.85 1213.99 L1460.43 1213.99 L1461.02 1213.99 L1461.61 1213.99 L1462.19 1213.99 L1462.78 1213.99 L1463.37 1213.99 L1463.95 1213.99 L1464.54 1213.99 L1465.12 1213.99 L1465.71 1213.99 L1466.3 1213.99 L1466.88 1213.99 L1467.47 1213.99 L1468.06 1213.99 L1468.64 1213.99 L1469.23 1213.99 L1469.82 1213.99 L1470.4 1213.99 L1470.99 1213.99 L1471.57 1213.99 L1472.16 1213.99 L1472.75 1213.99 L1473.33 1213.99 L1473.92 1213.99 L1474.51 1213.99 L1475.09 1213.99 L1475.68 1213.99 L1476.27 1213.99 L1476.85 1213.99 L1477.44 1213.99 L1478.03 1213.99 L1478.61 1213.99 L1479.2 1213.99 L1479.78 1213.99 L1480.37 1213.99 L1480.96 1213.99 L1481.54 1213.99 L1482.13 1213.99 L1482.72 1213.99 L1483.3 1213.99 L1483.89 1213.99 L1484.48 1213.99 L1485.06 1213.99 L1485.65 1213.99 L1486.24 1213.99 L1486.82 1213.99 L1487.41 1213.99 L1487.99 1213.99 L1488.58 1213.99 L1489.17 1213.99 L1489.75 1213.99 L1490.34 1213.99 L1490.93 1213.99 L1491.51 1213.99 L1492.1 1213.99 L1492.69 1213.99 L1493.27 1213.99 L1493.86 1213.99 L1494.45 1213.99 L1495.03 1213.99 L1495.62 1213.99 L1496.2 1213.99 L1496.79 1213.99 L1497.38 1213.99 L1497.96 1213.99 L1498.55 1213.99 L1499.14 1213.99 L1499.72 1213.99 L1500.31 1213.99 L1500.9 1213.99 L1501.48 1213.99 L1502.07 1213.99 L1502.65 1213.99 L1503.24 1213.99 L1503.83 1213.99 L1504.41 1213.99 L1505 1213.99 L1505.59 1213.99 L1506.17 1213.99 L1506.76 1213.99 L1507.35 1213.99 L1507.93 1213.99 L1508.52 1213.99 L1509.11 1213.99 L1509.69 1213.99 L1510.28 1213.99 L1510.86 1213.99 L1511.45 1213.99 L1512.04 1213.99 L1512.62 1213.99 L1513.21 1213.99 L1513.8 1213.99 L1514.38 1213.99 L1514.97 1213.99 L1515.56 1213.99 L1516.14 1213.99 L1516.73 1213.99 L1517.32 1213.99 L1517.9 1213.99 L1518.49 1213.99 L1519.07 1213.99 L1519.66 1213.99 L1520.25 1213.99 L1520.83 1213.99 L1521.42 1213.99 L1522.01 1213.99 L1522.59 1213.99 L1523.18 1213.99 L1523.77 1213.99 L1524.35 1213.99 L1524.94 1213.99 L1525.52 1213.99 L1526.11 1213.99 L1526.7 1213.99 L1527.28 1213.99 L1527.87 1213.99 L1528.46 1213.99 L1529.04 1213.99 L1529.63 1213.99 L1530.22 1213.99 L1530.8 1213.99 L1531.39 1213.99 L1531.98 1213.99 L1532.56 1213.99 L1533.15 1213.99 L1533.73 1213.99 L1534.32 1213.99 L1534.91 1213.99 L1535.49 1213.99 L1536.08 1213.99 L1536.67 1213.99 L1537.25 1213.99 L1537.84 1213.99 L1538.43 1213.99 L1539.01 1213.99 L1539.6 1213.99 L1540.19 1213.99 L1540.77 1213.99 L1541.36 1213.99 L1541.94 1213.99 L1542.53 1213.99 L1543.12 1213.99 L1543.7 1213.99 L1544.29 1213.99 L1544.88 1213.99 L1545.46 1213.99 L1546.05 1213.99 L1546.64 1213.99 L1547.22 1213.99 L1547.81 1213.99 L1548.4 1213.99 L1548.98 1213.99 L1549.57 1213.99 L1550.15 1213.99 L1550.74 1213.99 L1551.33 1213.99 L1551.91 1213.99 L1552.5 1213.99 L1553.09 1213.99 L1553.67 1213.99 L1554.26 1213.99 L1554.85 1213.99 L1555.43 1213.99 L1556.02 1213.99 L1556.6 1213.99 L1557.19 1213.99 L1557.78 1213.99 L1558.36 1213.99 L1558.95 1213.99 L1559.54 1213.99 L1560.12 1213.99 L1560.71 1213.99 L1561.3 1213.99 L1561.88 1213.99 L1562.47 1213.99 L1563.06 1213.99 L1563.64 1213.99 L1564.23 1213.99 L1564.81 1213.99 L1565.4 1213.99 L1565.99 1213.99 L1566.57 1213.99 L1567.16 1213.99 L1567.75 1213.99 L1568.33 1213.99 L1568.92 1213.99 L1569.51 1213.99 L1570.09 1213.99 L1570.68 1213.99 L1571.27 1213.99 L1571.85 1213.99 L1572.44 1213.99 L1573.02 1213.99 L1573.61 1213.99 L1574.2 1213.99 L1574.78 1213.99 L1575.37 1213.99 L1575.96 1213.99 L1576.54 1213.99 L1577.13 1213.99 L1577.72 1213.99 L1578.3 1213.99 L1578.89 1213.99 L1579.47 1213.99 L1580.06 1213.99 L1580.65 1213.99 L1581.23 1213.99 L1581.82 1213.99 L1582.41 1213.99 L1582.99 1213.99 L1583.58 1213.99 L1584.17 1213.99 L1584.75 1213.99 L1585.34 1213.99 L1585.93 1213.99 L1586.51 1213.99 L1587.1 1213.99 L1587.68 1213.99 L1588.27 1213.99 L1588.86 1213.99 L1589.44 1213.99 L1590.03 1213.99 L1590.62 1213.99 L1591.2 1213.99 L1591.79 1213.99 L1592.38 1213.99 L1592.96 1213.99 L1593.55 1213.99 L1594.14 1213.99 L1594.72 1213.99 L1595.31 1213.99 L1595.89 1213.99 L1596.48 1213.99 L1597.07 1213.99 L1597.65 1213.99 L1598.24 1213.99 L1598.83 1213.99 L1599.41 1213.99 L1600 1213.99 L1600.59 1213.99 L1601.17 1213.99 L1601.76 1213.99 L1602.34 1213.99 L1602.93 1213.99 L1603.52 1213.99 L1604.1 1213.99 L1604.69 1213.99 L1605.28 1213.99 L1605.86 1213.99 L1606.45 1213.99 L1607.04 1213.99 L1607.62 1213.99 L1608.21 1213.99 L1608.8 1213.99 L1609.38 1213.99 L1609.97 1213.99 L1610.55 1213.99 L1611.14 1213.99 L1611.73 1213.99 L1612.31 1213.99 L1612.9 1213.99 L1613.49 1213.99 L1614.07 1213.99 L1614.66 1213.99 L1615.25 1213.99 L1615.83 1213.99 L1616.42 1213.99 L1617.01 1213.99 L1617.59 1213.99 L1618.18 1213.99 L1618.76 1213.99 L1619.35 1213.99 L1619.94 1213.99 L1620.52 1213.99 L1621.11 1213.99 L1621.7 1213.99 L1622.28 1213.99 L1622.87 1213.99 L1623.46 1213.99 L1624.04 1213.99 L1624.63 1213.99 L1625.22 1213.99 L1625.8 1213.99 L1626.39 1213.99 L1626.97 1213.99 L1627.56 1213.99 L1628.15 1213.99 L1628.73 1213.99 L1629.32 1213.99 L1629.91 1213.99 L1630.49 1213.99 L1631.08 1213.99 L1631.67 1213.99 L1632.25 1213.99 L1632.84 1213.99 L1633.42 1213.99 L1634.01 1213.99 L1634.6 1213.99 L1635.18 1213.99 L1635.77 1213.99 L1636.36 1213.99 L1636.94 1213.99 L1637.53 1213.99 L1638.12 1213.99 L1638.7 1213.99 L1639.29 1213.99 L1639.88 1213.99 L1640.46 1213.99 L1641.05 1213.99 L1641.63 1213.99 L1642.22 1213.99 L1642.81 1213.99 L1643.39 1213.99 L1643.98 1213.99 L1644.57 1213.99 L1645.15 1213.99 L1645.74 1213.99 L1646.33 1213.99 L1646.91 1213.99 L1647.5 1213.99 L1648.09 1213.99 L1648.67 1213.99 L1649.26 1213.99 L1649.84 1213.99 L1650.43 1213.99 L1651.02 1213.99 L1651.6 1213.99 L1652.19 1213.99 L1652.78 1213.99 L1653.36 1213.99 L1653.95 1213.99 L1654.54 1213.99 L1655.12 1213.99 L1655.71 1213.99 L1656.29 1213.99 L1656.88 1213.99 L1657.47 1213.99 L1658.05 1213.99 L1658.64 1213.99 L1659.23 1213.99 L1659.81 1213.99 L1660.4 1213.99 L1660.99 1213.99 L1661.57 1213.99 L1662.16 1213.99 L1662.75 1213.99 L1663.33 1213.99 L1663.92 1213.99 L1664.5 1213.99 L1665.09 1213.99 L1665.68 1213.99 L1666.26 1213.99 L1666.85 1213.99 L1667.44 1213.99 L1668.02 1213.99 L1668.61 1213.99 L1669.2 1213.99 L1669.78 1213.99 L1670.37 1213.99 L1670.96 1213.99 L1671.54 1213.99 L1672.13 1213.99 L1672.71 1213.99 L1673.3 1213.99 L1673.89 1213.99 L1674.47 1213.99 L1675.06 1213.99 L1675.65 1213.99 L1676.23 1213.99 L1676.82 1213.99 L1677.41 1213.99 L1677.99 1213.99 L1678.58 1213.99 L1679.17 1213.99 L1679.75 1213.99 L1680.34 1213.99 L1680.92 1213.99 L1681.51 1213.99 L1682.1 1213.99 L1682.68 1213.99 L1683.27 1213.99 L1683.86 1213.99 L1684.44 1213.99 L1685.03 1213.99 L1685.62 1213.99 L1686.2 1213.99 L1686.79 1213.99 L1687.37 1213.99 L1687.96 1213.99 L1688.55 1213.99 L1689.13 1213.99 L1689.72 1213.99 L1690.31 1213.99 L1690.89 1213.99 L1691.48 1213.99 L1692.07 1213.99 L1692.65 1213.99 L1693.24 1213.99 L1693.83 1213.99 L1694.41 1213.99 L1695 1213.99 L1695.58 1213.99 L1696.17 1213.99 L1696.76 1213.99 L1697.34 1213.99 L1697.93 1213.99 L1698.52 1213.99 L1699.1 1213.99 L1699.69 1213.99 L1700.28 1213.99 L1700.86 1213.99 L1701.45 1213.99 L1702.04 1213.99 L1702.62 1213.99 L1703.21 1213.99 L1703.79 1213.99 L1704.38 1213.99 L1704.97 1213.99 L1705.55 1213.99 L1706.14 1213.99 L1706.73 1213.99 L1707.31 1213.99 L1707.9 1213.99 L1708.49 1213.99 L1709.07 1213.99 L1709.66 1213.99 L1710.24 1213.99 L1710.83 1213.99 L1711.42 1213.99 L1712 1213.99 L1712.59 1213.99 L1713.18 1213.99 L1713.76 1213.99 L1714.35 1213.99 L1714.94 1213.99 L1715.52 1213.99 L1716.11 1213.99 L1716.7 1213.99 L1717.28 1213.99 L1717.87 1213.99 L1718.45 1213.99 L1719.04 1213.99 L1719.63 1213.99 L1720.21 1213.99 L1720.8 1213.99 L1721.39 1213.99 L1721.97 1213.99 L1722.56 1213.99 L1723.15 1213.99 L1723.73 1213.99 L1724.32 1213.99 L1724.91 1213.99 L1725.49 1213.99 L1726.08 1213.99 L1726.66 1213.99 L1727.25 1213.99 L1727.84 1213.99 L1728.42 1213.99 L1729.01 1213.99 L1729.6 1213.99 L1730.18 1213.99 L1730.77 1213.99 L1731.36 1213.99 L1731.94 1213.99 L1732.53 1213.99 L1733.11 1213.99 L1733.7 1213.99 L1734.29 1213.99 L1734.87 1213.99 L1735.46 1213.99 L1736.05 1213.99 L1736.63 1213.99 L1737.22 1213.99 L1737.81 1213.99 L1738.39 1213.99 L1738.98 1213.99 L1739.57 1213.99 L1740.15 1213.99 L1740.74 1213.99 L1741.32 1213.99 L1741.91 1213.99 L1742.5 1213.99 L1743.08 1213.99 L1743.67 1213.99 L1744.26 1213.99 L1744.84 1213.99 L1745.43 1213.99 L1746.02 1213.99 L1746.6 1213.99 L1747.19 1213.99 L1747.78 1213.99 L1748.36 1213.99 L1748.95 1213.99 L1749.53 1213.99 L1750.12 1213.99 L1750.71 1213.99 L1751.29 1213.99 L1751.88 1213.99 L1752.47 1213.99 L1753.05 1213.99 L1753.64 1213.99 L1754.23 1213.99 L1754.81 1213.99 L1755.4 1213.99 L1755.99 1213.99 L1756.57 1213.99 L1757.16 1213.99 L1757.74 1213.99 L1758.33 1213.99 L1758.92 1213.99 L1759.5 1213.99 L1760.09 1213.99 L1760.68 1213.99 L1761.26 1213.99 L1761.85 1213.99 L1762.44 1213.99 L1763.02 1213.99 L1763.61 1213.99 L1764.19 1213.99 L1764.78 1213.99 L1765.37 1213.99 L1765.95 1213.99 L1766.54 1213.99 L1767.13 1213.99 L1767.71 1213.99 L1768.3 1213.99 L1768.89 1213.99 L1769.47 1213.99 L1770.06 1213.99 L1770.65 1213.99 L1771.23 1213.99 L1771.82 1213.99 L1772.4 1213.99 L1772.99 1213.99 L1773.58 1213.99 L1774.16 1213.99 L1774.75 1213.99 L1775.34 1213.99 L1775.92 1213.99 L1776.51 1213.99 L1777.1 1213.99 L1777.68 1213.99 L1778.27 1213.99 L1778.86 1213.99 L1779.44 1213.99 L1780.03 1213.99 L1780.61 1213.99 L1781.2 1213.99 L1781.79 1213.99 L1782.37 1213.99 L1782.96 1213.99 L1783.55 1213.99 L1784.13 1213.99 L1784.72 1213.99 L1785.31 1213.99 L1785.89 1213.99 L1786.48 1213.99 L1787.06 1213.99 L1787.65 1213.99 L1788.24 1213.99 L1788.82 1213.99 L1789.41 1213.99 L1790 1213.99 L1790.58 1213.99 L1791.17 1213.99 L1791.76 1213.99 L1792.34 1213.99 L1792.93 1213.99 L1793.52 1213.99 L1794.1 1213.99 L1794.69 1213.99 L1795.27 1213.99 L1795.86 1213.99 L1796.45 1213.99 L1797.03 1213.99 L1797.62 1213.99 L1798.21 1213.99 L1798.79 1213.99 L1799.38 1213.99 L1799.97 1213.99 L1800.55 1213.99 L1801.14 1213.99 L1801.73 1213.99 L1802.31 1213.99 L1802.9 1213.99 L1803.48 1213.99 L1804.07 1213.99 L1804.66 1213.99 L1805.24 1213.99 L1805.83 1213.99 L1806.42 1213.99 L1807 1213.99 L1807.59 1213.99 L1808.18 1213.99 L1808.76 1213.99 L1809.35 1213.99 L1809.94 1213.99 L1810.52 1213.99 L1811.11 1213.99 L1811.69 1213.99 L1812.28 1213.99 L1812.87 1213.99 L1813.45 1213.99 L1814.04 1213.99 L1814.63 1213.99 L1815.21 1213.99 L1815.8 1213.99 L1816.39 1213.99 L1816.97 1213.99 L1817.56 1213.99 L1818.14 1213.99 L1818.73 1213.99 L1819.32 1213.99 L1819.9 1213.99 L1820.49 1213.99 L1821.08 1213.99 L1821.66 1213.99 L1822.25 1213.99 L1822.84 1213.99 L1823.42 1213.99 L1824.01 1213.99 L1824.6 1213.99 L1825.18 1213.99 L1825.77 1213.99 L1826.35 1213.99 L1826.94 1213.99 L1827.53 1213.99 L1828.11 1213.99 L1828.7 1213.99 L1829.29 1213.99 L1829.87 1213.99 L1830.46 1213.99 L1831.05 1213.99 L1831.63 1213.99 L1832.22 1213.99 L1832.81 1213.99 L1833.39 1213.99 L1833.98 1213.99 L1834.56 1213.99 L1835.15 1213.99 L1835.74 1213.99 L1836.32 1213.99 L1836.91 1213.99 L1837.5 1213.99 L1838.08 1213.99 L1838.67 1213.99 L1839.26 1213.99 L1839.84 1213.99 L1840.43 1213.99 L1841.01 1213.99 L1841.6 1213.99 L1842.19 1213.99 L1842.77 1213.99 L1843.36 1213.99 L1843.95 1213.99 L1844.53 1213.99 L1845.12 1213.99 L1845.71 1213.99 L1846.29 1213.99 L1846.88 1213.99 L1847.47 1213.99 L1848.05 1213.99 L1848.64 1213.99 L1849.22 1213.99 L1849.81 1213.99 L1850.4 1213.99 L1850.98 1213.99 L1851.57 1213.99 L1852.16 1213.99 L1852.74 1213.99 L1853.33 1213.99 L1853.92 1213.99 L1854.5 1213.99 L1855.09 1213.99 L1855.68 1213.99 L1856.26 1213.99 L1856.85 1213.99 L1857.43 1213.99 L1858.02 1213.99 L1858.61 1213.99 L1859.19 1213.99 L1859.78 1213.99 L1860.37 1213.99 L1860.95 1213.99 L1861.54 1213.99 L1862.13 1213.99 L1862.71 1213.99 L1863.3 1213.99 L1863.88 1213.99 L1864.47 1213.99 L1865.06 1213.99 L1865.64 1213.99 L1866.23 1213.99 L1866.82 1213.99 L1867.4 1213.99 L1867.99 1213.99 L1868.58 1213.99 L1869.16 1213.99 L1869.75 1213.99 L1870.34 1213.99 L1870.92 1213.99 L1871.51 1213.99 L1872.09 1213.99 L1872.68 1213.99 L1873.27 1213.99 L1873.85 1213.99 L1874.44 1213.99 L1875.03 1213.99 L1875.61 1213.99 L1876.2 1213.99 L1876.79 1213.99 L1877.37 1213.99 L1877.96 1213.99 L1878.55 1213.99 L1879.13 1213.99 L1879.72 1213.99 L1880.3 1213.99 L1880.89 1213.99 L1881.48 1213.99 L1882.06 1213.99 L1882.65 1213.99 L1883.24 1213.99 L1883.82 1213.99 L1884.41 1213.99 L1885 1213.99 L1885.58 1213.99 L1886.17 1213.99 L1886.76 1213.99 L1887.34 1213.99 L1887.93 1213.99 L1888.51 1213.99 L1889.1 1213.99 L1889.69 1213.99 L1890.27 1213.99 L1890.86 1213.99 L1891.45 1213.99 L1892.03 1213.99 L1892.62 1213.99 L1893.21 1213.99 L1893.79 1213.99 L1894.38 1213.99 L1894.96 1213.99 L1895.55 1213.99 L1896.14 1213.99 L1896.72 1213.99 L1897.31 1213.99 L1897.9 1213.99 L1898.48 1213.99 L1899.07 1213.99 L1899.66 1213.99 L1900.24 1213.99 L1900.83 1213.99 L1901.42 1213.99 L1902 1213.99 L1902.59 1213.99 L1903.17 1213.99 L1903.76 1213.99 L1904.35 1213.99 L1904.93 1213.99 L1905.52 1213.99 L1906.11 1213.99 L1906.69 1213.99 L1907.28 1213.99 L1907.87 1213.99 L1908.45 1213.99 L1909.04 1213.99 L1909.63 1213.99 L1910.21 1213.99 L1910.8 1213.99 L1911.38 1213.99 L1911.97 1213.99 L1912.56 1213.99 L1913.14 1213.99 L1913.73 1213.99 L1914.32 1213.99 L1914.9 1213.99 L1915.49 1213.99 L1916.08 1213.99 L1916.66 1213.99 L1917.25 1213.99 L1917.83 1213.99 L1918.42 1213.99 L1919.01 1213.99 L1919.59 1213.99 L1920.18 1213.99 L1920.77 1213.99 L1921.35 1213.99 L1921.94 1213.99 L1922.53 1213.99 L1923.11 1213.99 L1923.7 1213.99 L1924.29 1213.99 L1924.87 1213.99 L1925.46 1213.99 L1926.04 1213.99 L1926.63 1213.99 L1927.22 1213.99 L1927.8 1213.99 L1928.39 1213.99 L1928.98 1213.99 L1929.56 1213.99 L1930.15 1213.99 L1930.74 1213.99 L1931.32 1213.99 L1931.91 1213.99 L1932.5 1213.99 L1933.08 1213.99 L1933.67 1213.99 L1934.25 1213.99 L1934.84 1213.99 L1935.43 1213.99 L1936.01 1213.99 L1936.6 1213.99 L1937.19 1213.99 L1937.77 1213.99 L1938.36 1213.99 L1938.95 1213.99 L1939.53 1213.99 L1940.12 1213.99 L1940.71 1213.99 L1941.29 1213.99 L1941.88 1213.99 L1942.46 1213.99 L1943.05 1213.99 L1943.64 1213.99 L1944.22 1213.99 L1944.81 1213.99 L1945.4 1213.99 L1945.98 1213.99 L1946.57 1213.99 L1947.16 1213.99 L1947.74 1213.99 L1948.33 1213.99 L1948.91 1213.99 L1949.5 1213.99 L1950.09 1213.99 L1950.67 1213.99 L1951.26 1213.99 L1951.85 1213.99 L1952.43 1213.99 L1953.02 1213.99 L1953.61 1213.99 L1954.19 1213.99 L1954.78 1213.99 L1955.37 1213.99 L1955.95 1213.99 L1956.54 1213.99 L1957.12 1213.99 L1957.71 1213.99 L1958.3 1213.99 L1958.88 1213.99 L1959.47 1213.99 L1960.06 1213.99 L1960.64 1213.99 L1961.23 1213.99 L1961.82 1213.99 L1962.4 1213.99 L1962.99 1213.99 L1963.58 1213.99 L1964.16 1213.99 L1964.75 1213.99 L1965.33 1213.99 L1965.92 1213.99 L1966.51 1213.99 L1967.09 1213.99 L1967.68 1213.99 L1968.27 1213.99 L1968.85 1213.99 L1969.44 1213.99 L1970.03 1213.99 L1970.61 1213.99 L1971.2 1213.99 L1971.78 1213.99 L1972.37 1213.99 L1972.96 1213.99 L1973.54 1213.99 L1974.13 1213.99 L1974.72 1213.99 L1975.3 1213.99 L1975.89 1213.99 L1976.48 1213.99 L1977.06 1213.99 L1977.65 1213.99 L1978.24 1213.99 L1978.82 1213.99 L1979.41 1213.99 L1979.99 1213.99 L1980.58 1213.99 L1981.17 1213.99 L1981.75 1213.99 L1982.34 1213.99 L1982.93 1213.99 L1983.51 1213.99 L1984.1 1213.99 L1984.69 1213.99 L1985.27 1213.99 L1985.86 1213.99 L1986.45 1213.99 L1987.03 1213.99 L1987.62 1213.99 L1988.2 1213.99 L1988.79 1213.99 L1989.38 1213.99 L1989.96 1213.99 L1990.55 1213.99 L1991.14 1213.99 L1991.72 1213.99 L1992.31 1213.99 L1992.9 1213.99 L1993.48 1213.99 L1994.07 1213.99 L1994.65 1213.99 L1995.24 1213.99 L1995.83 1213.99 L1996.41 1213.99 L1997 1213.99 L1997.59 1213.99 L1998.17 1213.99 L1998.76 1213.99 L1999.35 1213.99 L1999.93 1213.99 L2000.52 1213.99 L2001.11 1213.99 L2001.69 1213.99 L2002.28 1213.99 L2002.86 1213.99 L2003.45 1213.99 L2004.04 1213.99 L2004.62 1213.99 L2005.21 1213.99 L2005.8 1213.99 L2006.38 1213.99 L2006.97 1213.99 L2007.56 1213.99 L2008.14 1213.99 L2008.73 1213.99 L2009.32 1213.99 L2009.9 1213.99 L2010.49 1213.99 L2011.07 1213.99 L2011.66 1213.99 L2012.25 1213.99 L2012.83 1213.99 L2013.42 1213.99 L2014.01 1213.99 L2014.59 1213.99 L2015.18 1213.99 L2015.77 1213.99 L2016.35 1213.99 L2016.94 1213.99 L2017.53 1213.99 L2018.11 1213.99 L2018.7 1213.99 L2019.28 1213.99 L2019.87 1213.99 L2020.46 1213.99 L2021.04 1213.99 L2021.63 1213.99 L2022.22 1213.99 L2022.8 1213.99 L2023.39 1213.99 L2023.98 1213.99 L2024.56 1213.99 L2025.15 1213.99 L2025.73 1213.99 L2026.32 1213.99 L2026.91 1213.99 L2027.49 1213.99 L2028.08 1213.99 L2028.67 1213.99 L2029.25 1213.99 L2029.84 1213.99 L2030.43 1213.99 L2031.01 1213.99 L2031.6 1213.99 L2032.19 1213.99 L2032.77 1213.99 L2033.36 1213.99 L2033.94 1213.99 L2034.53 1213.99 L2035.12 1213.99 L2035.7 1213.99 L2036.29 1213.99 L2036.88 1213.99 L2037.46 1213.99 L2038.05 1213.99 L2038.64 1213.99 L2039.22 1213.99 L2039.81 1213.99 L2040.4 1213.99 L2040.98 1213.99 L2041.57 1213.99 L2042.15 1213.99 L2042.74 1213.99 L2043.33 1213.99 L2043.91 1213.99 L2044.5 1213.99 L2045.09 1213.99 L2045.67 1213.99 L2046.26 1213.99 L2046.85 1213.99 L2047.43 1213.99 L2048.02 1213.99 L2048.6 1213.99 L2049.19 1213.99 L2049.78 1213.99 L2050.36 1213.99 L2050.95 1213.99 L2051.54 1213.99 L2052.12 1213.99 L2052.71 1213.99 L2053.3 1213.99 L2053.88 1213.99 L2054.47 1213.99 L2055.06 1213.99 L2055.64 1213.99 L2056.23 1213.99 L2056.81 1213.99 L2057.4 1213.99 L2057.99 1213.99 L2058.57 1213.99 L2059.16 1213.99 L2059.75 1213.99 L2060.33 1213.99 L2060.92 1213.99 L2061.51 1213.99 L2062.09 1213.99 L2062.68 1213.99 L2063.27 1213.99 L2063.85 1213.99 L2064.44 1213.99 L2065.02 1213.99 L2065.61 1213.99 L2066.2 1213.99 L2066.78 1213.99 L2067.37 1213.99 L2067.96 1213.99 L2068.54 1213.99 L2069.13 1213.99 L2069.72 1213.99 L2070.3 1213.99 L2070.89 1213.99 L2071.48 1213.99 L2072.06 1213.99 L2072.65 1213.99 L2073.23 1213.99 L2073.82 1213.99 L2074.41 1213.99 L2074.99 1213.99 L2075.58 1213.99 L2076.17 1213.99 L2076.75 1213.99 L2077.34 1213.99 L2077.93 1213.99 L2078.51 1213.99 L2079.1 1213.99 L2079.68 1213.99 L2080.27 1213.99 L2080.86 1213.99 L2081.44 1213.99 L2082.03 1213.99 L2082.62 1213.99 L2083.2 1213.99 L2083.79 1213.99 L2084.38 1213.99 L2084.96 1213.99 L2085.55 1213.99 L2086.14 1213.99 L2086.72 1213.99 L2087.31 1213.99 L2087.89 1213.99 L2088.48 1213.99 L2089.07 1213.99 L2089.65 1213.99 L2090.24 1213.99 L2090.83 1213.99 L2091.41 1213.99 L2092 1213.99 L2092.59 1213.99 L2093.17 1213.99 L2093.76 1213.99 L2094.35 1213.99 L2094.93 1213.99 L2095.52 1213.99 L2096.1 1213.99 L2096.69 1213.99 L2097.28 1213.99 L2097.86 1213.99 L2098.45 1213.99 L2099.04 1213.99 L2099.62 1213.99 L2100.21 1213.99 L2100.8 1213.99 L2101.38 1213.99 L2101.97 1213.99 L2102.55 1213.99 L2103.14 1213.99 L2103.73 1213.99 L2104.31 1213.99 L2104.9 1213.99 L2105.49 1213.99 L2106.07 1213.99 L2106.66 1213.99 L2107.25 1213.99 L2107.83 1213.99 L2108.42 1213.99 L2109.01 1213.99 L2109.59 1213.99 L2110.18 1213.99 L2110.76 1213.99 L2111.35 1213.99 L2111.94 1213.99 L2112.52 1213.99 L2113.11 1213.99 L2113.7 1213.99 L2114.28 1213.99 L2114.87 1213.99 L2115.46 1213.99 L2116.04 1213.99 L2116.63 1213.99 L2117.22 1213.99 L2117.8 1213.99 L2118.39 1213.99 L2118.97 1213.99 L2119.56 1213.99 L2120.15 1213.99 L2120.73 1213.99 L2121.32 1213.99 L2121.91 1213.99 L2122.49 1213.99 L2123.08 1213.99 L2123.67 1213.99 L2124.25 1213.99 L2124.84 1213.99 L2125.42 1213.99 L2126.01 1213.99 L2126.6 1213.99 L2127.18 1213.99 L2127.77 1213.99 L2128.36 1213.99 L2128.94 1213.99 L2129.53 1213.99 L2130.12 1213.99 L2130.7 1213.99 L2131.29 1213.99 L2131.88 1213.99 L2132.46 1213.99 L2133.05 1213.99 L2133.63 1213.99 L2134.22 1213.99 L2134.81 1213.99 L2135.39 1213.99 L2135.98 1213.99 L2136.57 1213.99 L2137.15 1213.99 L2137.74 1213.99 L2138.33 1213.99 L2138.91 1213.99 L2139.5 1213.99 L2140.09 1213.99 L2140.67 1213.99 L2141.26 1213.99 L2141.84 1213.99 L2142.43 1213.99 L2143.02 1213.99 L2143.6 1213.99 L2144.19 1213.99 L2144.78 1213.99 L2145.36 1213.99 L2145.95 1213.99 L2146.54 1213.99 L2147.12 1213.99 L2147.71 1213.99 L2148.3 1213.99 L2148.88 1213.99 L2149.47 1213.99 L2150.05 1213.99 L2150.64 1213.99 L2151.23 1213.99 L2151.81 1213.99 L2152.4 1213.99 L2152.99 1213.99 L2153.57 1213.99 L2154.16 1213.99 L2154.75 1213.99 L2155.33 1213.99 L2155.92 1213.99 L2156.5 1213.99 L2157.09 1213.99 L2157.68 1213.99 L2158.26 1213.99 L2158.26 1213.87 L2157.68 1213.87 L2157.09 1213.87 L2156.5 1213.87 L2155.92 1213.87 L2155.33 1213.87 L2154.75 1213.87 L2154.16 1213.87 L2153.57 1213.87 L2152.99 1213.87 L2152.4 1213.87 L2151.81 1213.87 L2151.23 1213.87 L2150.64 1213.87 L2150.05 1213.87 L2149.47 1213.87 L2148.88 1213.87 L2148.3 1213.87 L2147.71 1213.87 L2147.12 1213.87 L2146.54 1213.87 L2145.95 1213.87 L2145.36 1213.87 L2144.78 1213.87 L2144.19 1213.87 L2143.6 1213.87 L2143.02 1213.87 L2142.43 1213.87 L2141.84 1213.87 L2141.26 1213.87 L2140.67 1213.87 L2140.09 1213.87 L2139.5 1213.87 L2138.91 1213.87 L2138.33 1213.87 L2137.74 1213.87 L2137.15 1213.87 L2136.57 1213.87 L2135.98 1213.87 L2135.39 1213.87 L2134.81 1213.87 L2134.22 1213.87 L2133.63 1213.87 L2133.05 1213.87 L2132.46 1213.87 L2131.88 1213.87 L2131.29 1213.87 L2130.7 1213.87 L2130.12 1213.87 L2129.53 1213.87 L2128.94 1213.87 L2128.36 1213.87 L2127.77 1213.87 L2127.18 1213.87 L2126.6 1213.87 L2126.01 1213.87 L2125.42 1213.87 L2124.84 1213.87 L2124.25 1213.87 L2123.67 1213.87 L2123.08 1213.87 L2122.49 1213.87 L2121.91 1213.87 L2121.32 1213.87 L2120.73 1213.87 L2120.15 1213.87 L2119.56 1213.87 L2118.97 1213.87 L2118.39 1213.87 L2117.8 1213.87 L2117.22 1213.87 L2116.63 1213.87 L2116.04 1213.87 L2115.46 1213.87 L2114.87 1213.87 L2114.28 1213.87 L2113.7 1213.87 L2113.11 1213.87 L2112.52 1213.87 L2111.94 1213.87 L2111.35 1213.87 L2110.76 1213.87 L2110.18 1213.87 L2109.59 1213.87 L2109.01 1213.87 L2108.42 1213.87 L2107.83 1213.87 L2107.25 1213.87 L2106.66 1213.87 L2106.07 1213.87 L2105.49 1213.87 L2104.9 1213.87 L2104.31 1213.87 L2103.73 1213.87 L2103.14 1213.87 L2102.55 1213.87 L2101.97 1213.87 L2101.38 1213.87 L2100.8 1213.87 L2100.21 1213.87 L2099.62 1213.87 L2099.04 1213.87 L2098.45 1213.87 L2097.86 1213.87 L2097.28 1213.87 L2096.69 1213.87 L2096.1 1213.87 L2095.52 1213.87 L2094.93 1213.87 L2094.35 1213.87 L2093.76 1213.87 L2093.17 1213.87 L2092.59 1213.87 L2092 1213.87 L2091.41 1213.87 L2090.83 1213.87 L2090.24 1213.87 L2089.65 1213.87 L2089.07 1213.87 L2088.48 1213.87 L2087.89 1213.87 L2087.31 1213.87 L2086.72 1213.87 L2086.14 1213.87 L2085.55 1213.87 L2084.96 1213.87 L2084.38 1213.87 L2083.79 1213.87 L2083.2 1213.87 L2082.62 1213.87 L2082.03 1213.87 L2081.44 1213.87 L2080.86 1213.87 L2080.27 1213.87 L2079.68 1213.87 L2079.1 1213.87 L2078.51 1213.87 L2077.93 1213.87 L2077.34 1213.87 L2076.75 1213.87 L2076.17 1213.87 L2075.58 1213.87 L2074.99 1213.87 L2074.41 1213.87 L2073.82 1213.87 L2073.23 1213.87 L2072.65 1213.87 L2072.06 1213.87 L2071.48 1213.87 L2070.89 1213.87 L2070.3 1213.87 L2069.72 1213.87 L2069.13 1213.87 L2068.54 1213.87 L2067.96 1213.87 L2067.37 1213.87 L2066.78 1213.87 L2066.2 1213.87 L2065.61 1213.87 L2065.02 1213.87 L2064.44 1213.87 L2063.85 1213.87 L2063.27 1213.87 L2062.68 1213.87 L2062.09 1213.87 L2061.51 1213.87 L2060.92 1213.87 L2060.33 1213.87 L2059.75 1213.87 L2059.16 1213.87 L2058.57 1213.87 L2057.99 1213.87 L2057.4 1213.87 L2056.81 1213.87 L2056.23 1213.87 L2055.64 1213.87 L2055.06 1213.87 L2054.47 1213.87 L2053.88 1213.87 L2053.3 1213.87 L2052.71 1213.87 L2052.12 1213.87 L2051.54 1213.87 L2050.95 1213.87 L2050.36 1213.87 L2049.78 1213.87 L2049.19 1213.87 L2048.6 1213.87 L2048.02 1213.87 L2047.43 1213.87 L2046.85 1213.87 L2046.26 1213.87 L2045.67 1213.87 L2045.09 1213.87 L2044.5 1213.87 L2043.91 1213.87 L2043.33 1213.87 L2042.74 1213.87 L2042.15 1213.87 L2041.57 1213.87 L2040.98 1213.87 L2040.4 1213.87 L2039.81 1213.87 L2039.22 1213.87 L2038.64 1213.87 L2038.05 1213.87 L2037.46 1213.87 L2036.88 1213.87 L2036.29 1213.87 L2035.7 1213.87 L2035.12 1213.87 L2034.53 1213.87 L2033.94 1213.87 L2033.36 1213.87 L2032.77 1213.87 L2032.19 1213.87 L2031.6 1213.87 L2031.01 1213.87 L2030.43 1213.87 L2029.84 1213.87 L2029.25 1213.87 L2028.67 1213.87 L2028.08 1213.87 L2027.49 1213.87 L2026.91 1213.87 L2026.32 1213.87 L2025.73 1213.87 L2025.15 1213.87 L2024.56 1213.87 L2023.98 1213.87 L2023.39 1213.87 L2022.8 1213.87 L2022.22 1213.87 L2021.63 1213.87 L2021.04 1213.87 L2020.46 1213.87 L2019.87 1213.87 L2019.28 1213.87 L2018.7 1213.87 L2018.11 1213.87 L2017.53 1213.87 L2016.94 1213.87 L2016.35 1213.87 L2015.77 1213.87 L2015.18 1213.87 L2014.59 1213.87 L2014.01 1213.87 L2013.42 1213.87 L2012.83 1213.87 L2012.25 1213.87 L2011.66 1213.87 L2011.07 1213.87 L2010.49 1213.87 L2009.9 1213.87 L2009.32 1213.87 L2008.73 1213.87 L2008.14 1213.87 L2007.56 1213.87 L2006.97 1213.87 L2006.38 1213.87 L2005.8 1213.87 L2005.21 1213.87 L2004.62 1213.87 L2004.04 1213.87 L2003.45 1213.87 L2002.86 1213.87 L2002.28 1213.87 L2001.69 1213.87 L2001.11 1213.87 L2000.52 1213.87 L1999.93 1213.87 L1999.35 1213.87 L1998.76 1213.87 L1998.17 1213.87 L1997.59 1213.87 L1997 1213.87 L1996.41 1213.87 L1995.83 1213.87 L1995.24 1213.87 L1994.65 1213.87 L1994.07 1213.87 L1993.48 1213.87 L1992.9 1213.87 L1992.31 1213.87 L1991.72 1213.87 L1991.14 1213.87 L1990.55 1213.87 L1989.96 1213.87 L1989.38 1213.87 L1988.79 1213.87 L1988.2 1213.87 L1987.62 1213.87 L1987.03 1213.87 L1986.45 1213.87 L1985.86 1213.87 L1985.27 1213.87 L1984.69 1213.87 L1984.1 1213.87 L1983.51 1213.87 L1982.93 1213.87 L1982.34 1213.87 L1981.75 1213.87 L1981.17 1213.87 L1980.58 1213.87 L1979.99 1213.87 L1979.41 1213.87 L1978.82 1213.87 L1978.24 1213.87 L1977.65 1213.87 L1977.06 1213.87 L1976.48 1213.87 L1975.89 1213.87 L1975.3 1213.87 L1974.72 1213.87 L1974.13 1213.87 L1973.54 1213.87 L1972.96 1213.87 L1972.37 1213.87 L1971.78 1213.87 L1971.2 1213.87 L1970.61 1213.87 L1970.03 1213.87 L1969.44 1213.87 L1968.85 1213.87 L1968.27 1213.87 L1967.68 1213.87 L1967.09 1213.87 L1966.51 1213.87 L1965.92 1213.87 L1965.33 1213.87 L1964.75 1213.87 L1964.16 1213.87 L1963.58 1213.87 L1962.99 1213.87 L1962.4 1213.87 L1961.82 1213.87 L1961.23 1213.87 L1960.64 1213.87 L1960.06 1213.87 L1959.47 1213.87 L1958.88 1213.87 L1958.3 1213.87 L1957.71 1213.87 L1957.12 1213.87 L1956.54 1213.87 L1955.95 1213.87 L1955.37 1213.87 L1954.78 1213.87 L1954.19 1213.87 L1953.61 1213.87 L1953.02 1213.87 L1952.43 1213.87 L1951.85 1213.87 L1951.26 1213.87 L1950.67 1213.87 L1950.09 1213.87 L1949.5 1213.87 L1948.91 1213.87 L1948.33 1213.87 L1947.74 1213.87 L1947.16 1213.87 L1946.57 1213.87 L1945.98 1213.87 L1945.4 1213.87 L1944.81 1213.87 L1944.22 1213.87 L1943.64 1213.87 L1943.05 1213.87 L1942.46 1213.87 L1941.88 1213.87 L1941.29 1213.87 L1940.71 1213.87 L1940.12 1213.87 L1939.53 1213.87 L1938.95 1213.87 L1938.36 1213.87 L1937.77 1213.87 L1937.19 1213.87 L1936.6 1213.87 L1936.01 1213.87 L1935.43 1213.87 L1934.84 1213.87 L1934.25 1213.87 L1933.67 1213.87 L1933.08 1213.87 L1932.5 1213.87 L1931.91 1213.87 L1931.32 1213.87 L1930.74 1213.87 L1930.15 1213.87 L1929.56 1213.87 L1928.98 1213.87 L1928.39 1213.87 L1927.8 1213.87 L1927.22 1213.87 L1926.63 1213.87 L1926.04 1213.87 L1925.46 1213.87 L1924.87 1213.87 L1924.29 1213.87 L1923.7 1213.87 L1923.11 1213.87 L1922.53 1213.87 L1921.94 1213.87 L1921.35 1213.87 L1920.77 1213.87 L1920.18 1213.87 L1919.59 1213.87 L1919.01 1213.87 L1918.42 1213.87 L1917.83 1213.87 L1917.25 1213.87 L1916.66 1213.87 L1916.08 1213.87 L1915.49 1213.87 L1914.9 1213.87 L1914.32 1213.87 L1913.73 1213.87 L1913.14 1213.87 L1912.56 1213.87 L1911.97 1213.87 L1911.38 1213.87 L1910.8 1213.87 L1910.21 1213.87 L1909.63 1213.87 L1909.04 1213.87 L1908.45 1213.87 L1907.87 1213.87 L1907.28 1213.87 L1906.69 1213.87 L1906.11 1213.87 L1905.52 1213.87 L1904.93 1213.87 L1904.35 1213.87 L1903.76 1213.87 L1903.17 1213.87 L1902.59 1213.87 L1902 1213.87 L1901.42 1213.87 L1900.83 1213.87 L1900.24 1213.87 L1899.66 1213.87 L1899.07 1213.87 L1898.48 1213.87 L1897.9 1213.87 L1897.31 1213.87 L1896.72 1213.87 L1896.14 1213.87 L1895.55 1213.87 L1894.96 1213.87 L1894.38 1213.87 L1893.79 1213.87 L1893.21 1213.87 L1892.62 1213.87 L1892.03 1213.87 L1891.45 1213.87 L1890.86 1213.87 L1890.27 1213.87 L1889.69 1213.87 L1889.1 1213.87 L1888.51 1213.87 L1887.93 1213.87 L1887.34 1213.87 L1886.76 1213.87 L1886.17 1213.87 L1885.58 1213.87 L1885 1213.87 L1884.41 1213.87 L1883.82 1213.87 L1883.24 1213.87 L1882.65 1213.87 L1882.06 1213.87 L1881.48 1213.87 L1880.89 1213.87 L1880.3 1213.87 L1879.72 1213.87 L1879.13 1213.87 L1878.55 1213.87 L1877.96 1213.87 L1877.37 1213.87 L1876.79 1213.87 L1876.2 1213.87 L1875.61 1213.87 L1875.03 1213.87 L1874.44 1213.87 L1873.85 1213.87 L1873.27 1213.87 L1872.68 1213.87 L1872.09 1213.87 L1871.51 1213.87 L1870.92 1213.87 L1870.34 1213.87 L1869.75 1213.87 L1869.16 1213.87 L1868.58 1213.87 L1867.99 1213.87 L1867.4 1213.87 L1866.82 1213.87 L1866.23 1213.87 L1865.64 1213.87 L1865.06 1213.87 L1864.47 1213.87 L1863.88 1213.87 L1863.3 1213.87 L1862.71 1213.87 L1862.13 1213.87 L1861.54 1213.87 L1860.95 1213.87 L1860.37 1213.87 L1859.78 1213.87 L1859.19 1213.87 L1858.61 1213.87 L1858.02 1213.87 L1857.43 1213.87 L1856.85 1213.87 L1856.26 1213.87 L1855.68 1213.87 L1855.09 1213.87 L1854.5 1213.87 L1853.92 1213.87 L1853.33 1213.87 L1852.74 1213.87 L1852.16 1213.87 L1851.57 1213.87 L1850.98 1213.87 L1850.4 1213.87 L1849.81 1213.87 L1849.22 1213.87 L1848.64 1213.87 L1848.05 1213.87 L1847.47 1213.87 L1846.88 1213.87 L1846.29 1213.87 L1845.71 1213.87 L1845.12 1213.87 L1844.53 1213.87 L1843.95 1213.87 L1843.36 1213.87 L1842.77 1213.87 L1842.19 1213.87 L1841.6 1213.87 L1841.01 1213.87 L1840.43 1213.87 L1839.84 1213.87 L1839.26 1213.87 L1838.67 1213.87 L1838.08 1213.87 L1837.5 1213.87 L1836.91 1213.87 L1836.32 1213.87 L1835.74 1213.87 L1835.15 1213.87 L1834.56 1213.87 L1833.98 1213.87 L1833.39 1213.87 L1832.81 1213.87 L1832.22 1213.87 L1831.63 1213.87 L1831.05 1213.87 L1830.46 1213.87 L1829.87 1213.87 L1829.29 1213.87 L1828.7 1213.87 L1828.11 1213.87 L1827.53 1213.87 L1826.94 1213.87 L1826.35 1213.87 L1825.77 1213.87 L1825.18 1213.87 L1824.6 1213.87 L1824.01 1213.87 L1823.42 1213.87 L1822.84 1213.87 L1822.25 1213.87 L1821.66 1213.87 L1821.08 1213.87 L1820.49 1213.87 L1819.9 1213.87 L1819.32 1213.87 L1818.73 1213.87 L1818.14 1213.87 L1817.56 1213.87 L1816.97 1213.87 L1816.39 1213.87 L1815.8 1213.87 L1815.21 1213.87 L1814.63 1213.87 L1814.04 1213.87 L1813.45 1213.87 L1812.87 1213.87 L1812.28 1213.87 L1811.69 1213.87 L1811.11 1213.87 L1810.52 1213.87 L1809.94 1213.87 L1809.35 1213.87 L1808.76 1213.87 L1808.18 1213.87 L1807.59 1213.87 L1807 1213.87 L1806.42 1213.87 L1805.83 1213.87 L1805.24 1213.87 L1804.66 1213.87 L1804.07 1213.87 L1803.48 1213.87 L1802.9 1213.87 L1802.31 1213.87 L1801.73 1213.87 L1801.14 1213.87 L1800.55 1213.87 L1799.97 1213.87 L1799.38 1213.87 L1798.79 1213.87 L1798.21 1213.87 L1797.62 1213.87 L1797.03 1213.87 L1796.45 1213.87 L1795.86 1213.87 L1795.27 1213.87 L1794.69 1213.87 L1794.1 1213.87 L1793.52 1213.87 L1792.93 1213.87 L1792.34 1213.87 L1791.76 1213.87 L1791.17 1213.87 L1790.58 1213.87 L1790 1213.87 L1789.41 1213.87 L1788.82 1213.87 L1788.24 1213.87 L1787.65 1213.87 L1787.06 1213.87 L1786.48 1213.87 L1785.89 1213.87 L1785.31 1213.87 L1784.72 1213.87 L1784.13 1213.87 L1783.55 1213.87 L1782.96 1213.87 L1782.37 1213.87 L1781.79 1213.87 L1781.2 1213.87 L1780.61 1213.87 L1780.03 1213.87 L1779.44 1213.87 L1778.86 1213.87 L1778.27 1213.87 L1777.68 1213.87 L1777.1 1213.87 L1776.51 1213.87 L1775.92 1213.87 L1775.34 1213.87 L1774.75 1213.87 L1774.16 1213.87 L1773.58 1213.87 L1772.99 1213.87 L1772.4 1213.87 L1771.82 1213.87 L1771.23 1213.87 L1770.65 1213.87 L1770.06 1213.87 L1769.47 1213.87 L1768.89 1213.87 L1768.3 1213.87 L1767.71 1213.87 L1767.13 1213.87 L1766.54 1213.87 L1765.95 1213.87 L1765.37 1213.87 L1764.78 1213.87 L1764.19 1213.87 L1763.61 1213.87 L1763.02 1213.87 L1762.44 1213.87 L1761.85 1213.87 L1761.26 1213.87 L1760.68 1213.87 L1760.09 1213.87 L1759.5 1213.87 L1758.92 1213.87 L1758.33 1213.87 L1757.74 1213.87 L1757.16 1213.87 L1756.57 1213.87 L1755.99 1213.87 L1755.4 1213.87 L1754.81 1213.87 L1754.23 1213.87 L1753.64 1213.87 L1753.05 1213.87 L1752.47 1213.87 L1751.88 1213.87 L1751.29 1213.87 L1750.71 1213.87 L1750.12 1213.87 L1749.53 1213.87 L1748.95 1213.87 L1748.36 1213.87 L1747.78 1213.87 L1747.19 1213.87 L1746.6 1213.87 L1746.02 1213.87 L1745.43 1213.87 L1744.84 1213.87 L1744.26 1213.87 L1743.67 1213.87 L1743.08 1213.87 L1742.5 1213.87 L1741.91 1213.87 L1741.32 1213.87 L1740.74 1213.87 L1740.15 1213.87 L1739.57 1213.87 L1738.98 1213.87 L1738.39 1213.87 L1737.81 1213.87 L1737.22 1213.87 L1736.63 1213.87 L1736.05 1213.87 L1735.46 1213.87 L1734.87 1213.87 L1734.29 1213.87 L1733.7 1213.87 L1733.11 1213.87 L1732.53 1213.87 L1731.94 1213.87 L1731.36 1213.87 L1730.77 1213.87 L1730.18 1213.87 L1729.6 1213.87 L1729.01 1213.87 L1728.42 1213.87 L1727.84 1213.87 L1727.25 1213.87 L1726.66 1213.87 L1726.08 1213.87 L1725.49 1213.87 L1724.91 1213.87 L1724.32 1213.87 L1723.73 1213.87 L1723.15 1213.87 L1722.56 1213.87 L1721.97 1213.87 L1721.39 1213.87 L1720.8 1213.87 L1720.21 1213.87 L1719.63 1213.87 L1719.04 1213.87 L1718.45 1213.87 L1717.87 1213.87 L1717.28 1213.87 L1716.7 1213.87 L1716.11 1213.87 L1715.52 1213.87 L1714.94 1213.87 L1714.35 1213.87 L1713.76 1213.87 L1713.18 1213.87 L1712.59 1213.87 L1712 1213.87 L1711.42 1213.87 L1710.83 1213.87 L1710.24 1213.87 L1709.66 1213.87 L1709.07 1213.87 L1708.49 1213.87 L1707.9 1213.87 L1707.31 1213.87 L1706.73 1213.87 L1706.14 1213.87 L1705.55 1213.87 L1704.97 1213.87 L1704.38 1213.87 L1703.79 1213.87 L1703.21 1213.87 L1702.62 1213.87 L1702.04 1213.87 L1701.45 1213.87 L1700.86 1213.87 L1700.28 1213.87 L1699.69 1213.87 L1699.1 1213.87 L1698.52 1213.87 L1697.93 1213.87 L1697.34 1213.87 L1696.76 1213.87 L1696.17 1213.87 L1695.58 1213.87 L1695 1213.87 L1694.41 1213.87 L1693.83 1213.87 L1693.24 1213.87 L1692.65 1213.87 L1692.07 1213.87 L1691.48 1213.87 L1690.89 1213.87 L1690.31 1213.87 L1689.72 1213.87 L1689.13 1213.87 L1688.55 1213.87 L1687.96 1213.87 L1687.37 1213.87 L1686.79 1213.87 L1686.2 1213.87 L1685.62 1213.87 L1685.03 1213.87 L1684.44 1213.87 L1683.86 1213.87 L1683.27 1213.87 L1682.68 1213.87 L1682.1 1213.87 L1681.51 1213.87 L1680.92 1213.87 L1680.34 1213.87 L1679.75 1213.87 L1679.17 1213.87 L1678.58 1213.87 L1677.99 1213.87 L1677.41 1213.87 L1676.82 1213.87 L1676.23 1213.87 L1675.65 1213.87 L1675.06 1213.87 L1674.47 1213.87 L1673.89 1213.87 L1673.3 1213.87 L1672.71 1213.87 L1672.13 1213.87 L1671.54 1213.87 L1670.96 1213.87 L1670.37 1213.87 L1669.78 1213.87 L1669.2 1213.87 L1668.61 1213.87 L1668.02 1213.87 L1667.44 1213.87 L1666.85 1213.87 L1666.26 1213.87 L1665.68 1213.87 L1665.09 1213.87 L1664.5 1213.87 L1663.92 1213.87 L1663.33 1213.87 L1662.75 1213.87 L1662.16 1213.87 L1661.57 1213.87 L1660.99 1213.87 L1660.4 1213.87 L1659.81 1213.87 L1659.23 1213.87 L1658.64 1213.87 L1658.05 1213.87 L1657.47 1213.87 L1656.88 1213.87 L1656.29 1213.87 L1655.71 1213.87 L1655.12 1213.87 L1654.54 1213.87 L1653.95 1213.87 L1653.36 1213.87 L1652.78 1213.87 L1652.19 1213.87 L1651.6 1213.87 L1651.02 1213.87 L1650.43 1213.87 L1649.84 1213.87 L1649.26 1213.87 L1648.67 1213.87 L1648.09 1213.87 L1647.5 1213.87 L1646.91 1213.87 L1646.33 1213.87 L1645.74 1213.87 L1645.15 1213.87 L1644.57 1213.87 L1643.98 1213.87 L1643.39 1213.87 L1642.81 1213.87 L1642.22 1213.87 L1641.63 1213.87 L1641.05 1213.87 L1640.46 1213.87 L1639.88 1213.87 L1639.29 1213.87 L1638.7 1213.87 L1638.12 1213.87 L1637.53 1213.87 L1636.94 1213.87 L1636.36 1213.87 L1635.77 1213.87 L1635.18 1213.87 L1634.6 1213.87 L1634.01 1213.87 L1633.42 1213.87 L1632.84 1213.87 L1632.25 1213.87 L1631.67 1213.87 L1631.08 1213.87 L1630.49 1213.87 L1629.91 1213.87 L1629.32 1213.87 L1628.73 1213.87 L1628.15 1213.87 L1627.56 1213.87 L1626.97 1213.87 L1626.39 1213.87 L1625.8 1213.87 L1625.22 1213.87 L1624.63 1213.87 L1624.04 1213.87 L1623.46 1213.87 L1622.87 1213.87 L1622.28 1213.87 L1621.7 1213.87 L1621.11 1213.87 L1620.52 1213.87 L1619.94 1213.87 L1619.35 1213.87 L1618.76 1213.87 L1618.18 1213.87 L1617.59 1213.87 L1617.01 1213.87 L1616.42 1213.87 L1615.83 1213.87 L1615.25 1213.87 L1614.66 1213.87 L1614.07 1213.87 L1613.49 1213.87 L1612.9 1213.87 L1612.31 1213.87 L1611.73 1213.87 L1611.14 1213.87 L1610.55 1213.87 L1609.97 1213.87 L1609.38 1213.87 L1608.8 1213.87 L1608.21 1213.87 L1607.62 1213.87 L1607.04 1213.87 L1606.45 1213.87 L1605.86 1213.87 L1605.28 1213.87 L1604.69 1213.87 L1604.1 1213.87 L1603.52 1213.87 L1602.93 1213.87 L1602.34 1213.87 L1601.76 1213.87 L1601.17 1213.87 L1600.59 1213.87 L1600 1213.87 L1599.41 1213.87 L1598.83 1213.87 L1598.24 1213.87 L1597.65 1213.87 L1597.07 1213.87 L1596.48 1213.87 L1595.89 1213.87 L1595.31 1213.87 L1594.72 1213.87 L1594.14 1213.87 L1593.55 1213.87 L1592.96 1213.87 L1592.38 1213.87 L1591.79 1213.87 L1591.2 1213.87 L1590.62 1213.87 L1590.03 1213.87 L1589.44 1213.87 L1588.86 1213.87 L1588.27 1213.87 L1587.68 1213.87 L1587.1 1213.87 L1586.51 1213.87 L1585.93 1213.87 L1585.34 1213.87 L1584.75 1213.87 L1584.17 1213.87 L1583.58 1213.87 L1582.99 1213.87 L1582.41 1213.87 L1581.82 1213.87 L1581.23 1213.87 L1580.65 1213.87 L1580.06 1213.87 L1579.47 1213.87 L1578.89 1213.87 L1578.3 1213.87 L1577.72 1213.87 L1577.13 1213.87 L1576.54 1213.87 L1575.96 1213.87 L1575.37 1213.87 L1574.78 1213.87 L1574.2 1213.87 L1573.61 1213.87 L1573.02 1213.87 L1572.44 1213.87 L1571.85 1213.87 L1571.27 1213.87 L1570.68 1213.87 L1570.09 1213.87 L1569.51 1213.87 L1568.92 1213.87 L1568.33 1213.87 L1567.75 1213.87 L1567.16 1213.87 L1566.57 1213.87 L1565.99 1213.87 L1565.4 1213.87 L1564.81 1213.87 L1564.23 1213.87 L1563.64 1213.87 L1563.06 1213.87 L1562.47 1213.87 L1561.88 1213.87 L1561.3 1213.87 L1560.71 1213.87 L1560.12 1213.87 L1559.54 1213.87 L1558.95 1213.87 L1558.36 1213.87 L1557.78 1213.87 L1557.19 1213.87 L1556.6 1213.87 L1556.02 1213.87 L1555.43 1213.87 L1554.85 1213.87 L1554.26 1213.87 L1553.67 1213.87 L1553.09 1213.87 L1552.5 1213.87 L1551.91 1213.87 L1551.33 1213.87 L1550.74 1213.87 L1550.15 1213.87 L1549.57 1213.87 L1548.98 1213.87 L1548.4 1213.87 L1547.81 1213.87 L1547.22 1213.87 L1546.64 1213.87 L1546.05 1213.87 L1545.46 1213.87 L1544.88 1213.87 L1544.29 1213.87 L1543.7 1213.87 L1543.12 1213.87 L1542.53 1213.87 L1541.94 1213.87 L1541.36 1213.87 L1540.77 1213.87 L1540.19 1213.87 L1539.6 1213.87 L1539.01 1213.87 L1538.43 1213.87 L1537.84 1213.87 L1537.25 1213.87 L1536.67 1213.87 L1536.08 1213.87 L1535.49 1213.87 L1534.91 1213.87 L1534.32 1213.87 L1533.73 1213.87 L1533.15 1213.87 L1532.56 1213.87 L1531.98 1213.87 L1531.39 1213.87 L1530.8 1213.87 L1530.22 1213.87 L1529.63 1213.87 L1529.04 1213.87 L1528.46 1213.87 L1527.87 1213.87 L1527.28 1213.87 L1526.7 1213.87 L1526.11 1213.87 L1525.52 1213.87 L1524.94 1213.87 L1524.35 1213.87 L1523.77 1213.87 L1523.18 1213.87 L1522.59 1213.87 L1522.01 1213.87 L1521.42 1213.87 L1520.83 1213.87 L1520.25 1213.87 L1519.66 1213.87 L1519.07 1213.87 L1518.49 1213.87 L1517.9 1213.87 L1517.32 1213.87 L1516.73 1213.87 L1516.14 1213.87 L1515.56 1213.87 L1514.97 1213.87 L1514.38 1213.87 L1513.8 1213.87 L1513.21 1213.87 L1512.62 1213.87 L1512.04 1213.87 L1511.45 1213.87 L1510.86 1213.87 L1510.28 1213.87 L1509.69 1213.87 L1509.11 1213.87 L1508.52 1213.87 L1507.93 1213.87 L1507.35 1213.87 L1506.76 1213.87 L1506.17 1213.87 L1505.59 1213.87 L1505 1213.87 L1504.41 1213.87 L1503.83 1213.87 L1503.24 1213.87 L1502.65 1213.87 L1502.07 1213.87 L1501.48 1213.87 L1500.9 1213.87 L1500.31 1213.87 L1499.72 1213.87 L1499.14 1213.87 L1498.55 1213.87 L1497.96 1213.87 L1497.38 1213.87 L1496.79 1213.87 L1496.2 1213.87 L1495.62 1213.87 L1495.03 1213.87 L1494.45 1213.87 L1493.86 1213.87 L1493.27 1213.87 L1492.69 1213.87 L1492.1 1213.87 L1491.51 1213.87 L1490.93 1213.87 L1490.34 1213.87 L1489.75 1213.87 L1489.17 1213.87 L1488.58 1213.87 L1487.99 1213.87 L1487.41 1213.87 L1486.82 1213.87 L1486.24 1213.87 L1485.65 1213.87 L1485.06 1213.87 L1484.48 1213.87 L1483.89 1213.87 L1483.3 1213.87 L1482.72 1213.87 L1482.13 1213.87 L1481.54 1213.87 L1480.96 1213.87 L1480.37 1213.87 L1479.78 1213.87 L1479.2 1213.87 L1478.61 1213.87 L1478.03 1213.87 L1477.44 1213.87 L1476.85 1213.87 L1476.27 1213.87 L1475.68 1213.87 L1475.09 1213.87 L1474.51 1213.87 L1473.92 1213.87 L1473.33 1213.87 L1472.75 1213.87 L1472.16 1213.87 L1471.57 1213.87 L1470.99 1213.87 L1470.4 1213.87 L1469.82 1213.87 L1469.23 1213.87 L1468.64 1213.87 L1468.06 1213.87 L1467.47 1213.87 L1466.88 1213.87 L1466.3 1213.87 L1465.71 1213.87 L1465.12 1213.87 L1464.54 1213.87 L1463.95 1213.87 L1463.37 1213.87 L1462.78 1213.87 L1462.19 1213.87 L1461.61 1213.87 L1461.02 1213.87 L1460.43 1213.87 L1459.85 1213.87 L1459.26 1213.87 L1458.67 1213.87 L1458.09 1213.87 L1457.5 1213.87 L1456.91 1213.87 L1456.33 1213.87 L1455.74 1213.87 L1455.16 1213.87 L1454.57 1213.87 L1453.98 1213.87 L1453.4 1213.87 L1452.81 1213.87 L1452.22 1213.87 L1451.64 1213.87 L1451.05 1213.87 L1450.46 1213.87 L1449.88 1213.87 L1449.29 1213.87 L1448.7 1213.87 L1448.12 1213.87 L1447.53 1213.87 L1446.95 1213.87 L1446.36 1213.87 L1445.77 1213.87 L1445.19 1213.87 L1444.6 1213.87 L1444.01 1213.87 L1443.43 1213.87 L1442.84 1213.87 L1442.25 1213.87 L1441.67 1213.87 L1441.08 1213.87 L1440.5 1213.87 L1439.91 1213.87 L1439.32 1213.87 L1438.74 1213.87 L1438.15 1213.87 L1437.56 1213.87 L1436.98 1213.87 L1436.39 1213.87 L1435.8 1213.87 L1435.22 1213.87 L1434.63 1213.87 L1434.04 1213.87 L1433.46 1213.87 L1432.87 1213.87 L1432.29 1213.87 L1431.7 1213.87 L1431.11 1213.87 L1430.53 1213.87 L1429.94 1213.87 L1429.35 1213.87 L1428.77 1213.87 L1428.18 1213.87 L1427.59 1213.87 L1427.01 1213.87 L1426.42 1213.87 L1425.83 1213.87 L1425.25 1213.87 L1424.66 1213.87 L1424.08 1213.87 L1423.49 1213.87 L1422.9 1213.87 L1422.32 1213.87 L1421.73 1213.87 L1421.14 1213.87 L1420.56 1213.87 L1419.97 1213.87 L1419.38 1213.87 L1418.8 1213.87 L1418.21 1213.87 L1417.63 1213.87 L1417.04 1213.87 L1416.45 1213.87 L1415.87 1213.87 L1415.28 1213.87 L1414.69 1213.87 L1414.11 1213.87 L1413.52 1213.87 L1412.93 1213.87 L1412.35 1213.87 L1411.76 1213.87 L1411.17 1213.87 L1410.59 1213.87 L1410 1213.87 L1409.42 1213.87 L1408.83 1213.87 L1408.24 1213.87 L1407.66 1213.87 L1407.07 1213.87 L1406.48 1213.87 L1405.9 1213.87 L1405.31 1213.87 L1404.72 1213.87 L1404.14 1213.87 L1403.55 1213.87 L1402.96 1213.87 L1402.38 1213.87 L1401.79 1213.87 L1401.21 1213.87 L1400.62 1213.87 L1400.03 1213.87 L1399.45 1213.87 L1398.86 1213.87 L1398.27 1213.87 L1397.69 1213.87 L1397.1 1213.87 L1396.51 1213.87 L1395.93 1213.87 L1395.34 1213.87 L1394.75 1213.87 L1394.17 1213.87 L1393.58 1213.87 L1393 1213.87 L1392.41 1213.87 L1391.82 1213.87 L1391.24 1213.87 L1390.65 1213.87 L1390.06 1213.87 L1389.48 1213.87 L1388.89 1213.87 L1388.3 1213.87 L1387.72 1213.87 L1387.13 1213.87 L1386.55 1213.87 L1385.96 1213.87 L1385.37 1213.87 L1384.79 1213.87 L1384.2 1213.87 L1383.61 1213.87 L1383.03 1213.87 L1382.44 1213.87 L1381.85 1213.87 L1381.27 1213.87 L1380.68 1213.87 L1380.09 1213.87 L1379.51 1213.87 L1378.92 1213.87 L1378.34 1213.87 L1377.75 1213.87 L1377.16 1213.87 L1376.58 1213.87 L1375.99 1213.87 L1375.4 1213.87 L1374.82 1213.87 L1374.23 1213.87 L1373.64 1213.87 L1373.06 1213.87 L1372.47 1213.87 L1371.88 1213.87 L1371.3 1213.87 L1370.71 1213.87 L1370.13 1213.87 L1369.54 1213.87 L1368.95 1213.87 L1368.37 1213.87 L1367.78 1213.87 L1367.19 1213.87 L1366.61 1213.87 L1366.02 1213.87 L1365.43 1213.87 L1364.85 1213.87 L1364.26 1213.87 L1363.68 1213.87 L1363.09 1213.87 L1362.5 1213.87 L1361.92 1213.87 L1361.33 1213.87 L1360.74 1213.87 L1360.16 1213.87 L1359.57 1213.87 L1358.98 1213.87 L1358.4 1213.87 L1357.81 1213.87 L1357.22 1213.87 L1356.64 1213.87 L1356.05 1213.87 L1355.47 1213.87 L1354.88 1213.87 L1354.29 1213.87 L1353.71 1213.87 L1353.12 1213.87 L1352.53 1213.87 L1351.95 1213.87 L1351.36 1213.87 L1350.77 1213.87 L1350.19 1213.87 L1349.6 1213.87 L1349.01 1213.87 L1348.43 1213.87 L1347.84 1213.87 L1347.26 1213.87 L1346.67 1213.87 L1346.08 1213.87 L1345.5 1213.87 L1344.91 1213.87 L1344.32 1213.87 L1343.74 1213.87 L1343.15 1213.87 L1342.56 1213.87 L1341.98 1213.87 L1341.39 1213.87 L1340.8 1213.87 L1340.22 1213.87 L1339.63 1213.87 L1339.05 1213.87 L1338.46 1213.87 L1337.87 1213.87 L1337.29 1213.87 L1336.7 1213.87 L1336.11 1213.87 L1335.53 1213.87 L1334.94 1213.87 L1334.35 1213.87 L1333.77 1213.87 L1333.18 1213.87 L1332.6 1213.87 L1332.01 1213.87 L1331.42 1213.87 L1330.84 1213.87 L1330.25 1213.87 L1329.66 1213.87 L1329.08 1213.87 L1328.49 1213.87 L1327.9 1213.87 L1327.32 1213.87 L1326.73 1213.87 L1326.14 1213.87 L1325.56 1213.87 L1324.97 1213.87 L1324.39 1213.87 L1323.8 1213.87 L1323.21 1213.87 L1322.63 1213.87 L1322.04 1213.87 L1321.45 1213.87 L1320.87 1213.87 L1320.28 1213.87 L1319.69 1213.87 L1319.11 1213.87 L1318.52 1213.87 L1317.93 1213.87 L1317.35 1213.87 L1316.76 1213.87 L1316.18 1213.87 L1315.59 1213.87 L1315 1213.87 L1314.42 1213.87 L1313.83 1213.87 L1313.24 1213.87 L1312.66 1213.87 L1312.07 1213.87 L1311.48 1213.87 L1310.9 1213.87 L1310.31 1213.87 L1309.73 1213.87 L1309.14 1213.87 L1308.55 1213.87 L1307.97 1213.87 L1307.38 1213.87 L1306.79 1213.87 L1306.21 1213.87 L1305.62 1213.87 L1305.03 1213.87 L1304.45 1213.87 L1303.86 1213.87 L1303.27 1213.87 L1302.69 1213.87 L1302.1 1213.87 L1301.52 1213.87 L1300.93 1213.87 L1300.34 1213.87 L1299.76 1213.87 L1299.17 1213.87 L1298.58 1213.87 L1298 1213.87 L1297.41 1213.87 L1296.82 1213.87 L1296.24 1213.87 L1295.65 1213.87 L1295.06 1213.87 L1294.48 1213.87 L1293.89 1213.87 L1293.31 1213.87 L1292.72 1213.87 L1292.13 1213.87 L1291.55 1213.87 L1290.96 1213.87 L1290.37 1213.87 L1289.79 1213.87 L1289.2 1213.87 L1288.61 1213.87 L1288.03 1213.87 L1287.44 1213.87 L1286.86 1213.87 L1286.27 1213.87 L1285.68 1213.87 L1285.1 1213.87 L1284.51 1213.87 L1283.92 1213.87 L1283.34 1213.87 L1282.75 1213.87 L1282.16 1213.87 L1281.58 1213.87 L1280.99 1213.87 L1280.4 1213.87 L1279.82 1213.87 L1279.23 1213.87 L1278.65 1213.87 L1278.06 1213.87 L1277.47 1213.87 L1276.89 1213.87 L1276.3 1213.87 L1275.71 1213.87 L1275.13 1213.87 L1274.54 1213.87 L1273.95 1213.87 L1273.37 1213.87 L1272.78 1213.87 L1272.19 1213.87 L1271.61 1213.87 L1271.02 1213.87 L1270.44 1213.87 L1269.85 1213.87 L1269.26 1213.87 L1268.68 1213.87 L1268.09 1213.87 L1267.5 1213.87 L1266.92 1213.87 L1266.33 1213.87 L1265.74 1213.87 L1265.16 1213.87 L1264.57 1213.87 L1263.98 1213.87 L1263.4 1213.87 L1262.81 1213.87 L1262.23 1213.87 L1261.64 1213.87 L1261.05 1213.87 L1260.47 1213.87 L1259.88 1213.87 L1259.29 1213.87 L1258.71 1213.87 L1258.12 1213.87 L1257.53 1213.87 L1256.95 1213.87 L1256.36 1213.87 L1255.78 1213.87 L1255.19 1213.87 L1254.6 1213.87 L1254.02 1213.87 L1253.43 1213.87 L1252.84 1213.87 L1252.26 1213.87 L1251.67 1213.87 L1251.08 1213.87 L1250.5 1213.87 L1249.91 1213.87 L1249.32 1213.87 L1248.74 1213.87 L1248.15 1213.87 L1247.57 1213.87 L1246.98 1213.87 L1246.39 1213.87 L1245.81 1213.87 L1245.22 1213.87 L1244.63 1213.87 L1244.05 1213.87 L1243.46 1213.87 L1242.87 1213.87 L1242.29 1213.87 L1241.7 1213.87 L1241.11 1213.87 L1240.53 1213.87 L1239.94 1213.87 L1239.36 1213.87 L1238.77 1213.87 L1238.18 1213.87 L1237.6 1213.87 L1237.01 1213.87 L1236.42 1213.87 L1235.84 1213.87 L1235.25 1213.87 L1234.66 1213.87 L1234.08 1213.87 L1233.49 1213.87 L1232.91 1213.87 L1232.32 1213.87 L1231.73 1213.87 L1231.15 1213.87 L1230.56 1213.87 L1229.97 1213.87 L1229.39 1213.87 L1228.8 1213.87 L1228.21 1213.87 L1227.63 1213.87 L1227.04 1213.87 L1226.45 1213.87 L1225.87 1213.87 L1225.28 1213.87 L1224.7 1213.87 L1224.11 1213.87 L1223.52 1213.87 L1222.94 1213.87 L1222.35 1213.87 L1221.76 1213.87 L1221.18 1213.87 L1220.59 1213.87 L1220 1213.87 L1219.42 1213.87 L1218.83 1213.87 L1218.24 1213.87 L1217.66 1213.87 L1217.07 1213.87 L1216.49 1213.87 L1215.9 1213.87 L1215.31 1213.87 L1214.73 1213.87 L1214.14 1213.87 L1213.55 1213.87 L1212.97 1213.87 L1212.38 1213.87 L1211.79 1213.87 L1211.21 1213.87 L1210.62 1213.87 L1210.03 1213.87 L1209.45 1213.87 L1208.86 1213.87 L1208.28 1213.87 L1207.69 1213.87 L1207.1 1213.87 L1206.52 1213.87 L1205.93 1213.87 L1205.34 1213.87 L1204.76 1213.87 L1204.17 1213.87 L1203.58 1213.87 L1203 1213.87 L1202.41 1213.87 L1201.83 1213.87 L1201.24 1213.87 L1200.65 1213.87 L1200.07 1213.87 L1199.48 1213.87 L1198.89 1213.87 L1198.31 1213.87 L1197.72 1213.87 L1197.13 1213.87 L1196.55 1213.87 L1195.96 1213.87 L1195.37 1213.87 L1194.79 1213.87 L1194.2 1213.87 L1193.62 1213.87 L1193.03 1213.87 L1192.44 1213.87 L1191.86 1213.87 L1191.27 1213.87 L1190.68 1213.87 L1190.1 1213.87 L1189.51 1213.87 L1188.92 1213.87 L1188.34 1213.87 L1187.75 1213.87 L1187.16 1213.87 L1186.58 1213.87 L1185.99 1213.87 L1185.41 1213.87 L1184.82 1213.87 L1184.23 1213.87 L1183.65 1213.87 L1183.06 1213.87 L1182.47 1213.87 L1181.89 1213.87 L1181.3 1213.87 L1180.71 1213.87 L1180.13 1213.87 L1179.54 1213.87 L1178.96 1213.87 L1178.37 1213.87 L1177.78 1213.87 L1177.2 1213.87 L1176.61 1213.87 L1176.02 1213.87 L1175.44 1213.87 L1174.85 1213.87 L1174.26 1213.87 L1173.68 1213.87 L1173.09 1213.87 L1172.5 1213.87 L1171.92 1213.87 L1171.33 1213.87 L1170.75 1213.87 L1170.16 1213.87 L1169.57 1213.87 L1168.99 1213.87 L1168.4 1213.87 L1167.81 1213.87 L1167.23 1213.87 L1166.64 1213.87 L1166.05 1213.87 L1165.47 1213.87 L1164.88 1213.87 L1164.29 1213.87 L1163.71 1213.87 L1163.12 1213.87 L1162.54 1213.87 L1161.95 1213.87 L1161.36 1213.87 L1160.78 1213.87 L1160.19 1213.87 L1159.6 1213.87 L1159.02 1213.87 L1158.43 1213.87 L1157.84 1213.87 L1157.26 1213.87 L1156.67 1213.87 L1156.09 1213.87 L1155.5 1213.87 L1154.91 1213.87 L1154.33 1213.87 L1153.74 1213.87 L1153.15 1213.87 L1152.57 1213.87 L1151.98 1213.87 L1151.39 1213.87 L1150.81 1213.87 L1150.22 1213.87 L1149.63 1213.87 L1149.05 1213.87 L1148.46 1213.87 L1147.88 1213.87 L1147.29 1213.87 L1146.7 1213.87 L1146.12 1213.87 L1145.53 1213.87 L1144.94 1213.87 L1144.36 1213.87 L1143.77 1213.87 L1143.18 1213.87 L1142.6 1213.87 L1142.01 1213.87 L1141.42 1213.87 L1140.84 1213.87 L1140.25 1213.87 L1139.67 1213.87 L1139.08 1213.87 L1138.49 1213.87 L1137.91 1213.87 L1137.32 1213.87 L1136.73 1213.87 L1136.15 1213.87 L1135.56 1213.87 L1134.97 1213.87 L1134.39 1213.87 L1133.8 1213.87 L1133.21 1213.87 L1132.63 1213.87 L1132.04 1213.87 L1131.46 1213.87 L1130.87 1213.87 L1130.28 1213.87 L1129.7 1213.87 L1129.11 1213.87 L1128.52 1213.87 L1127.94 1213.87 L1127.35 1213.87 L1126.76 1213.87 L1126.18 1213.87 L1125.59 1213.87 L1125.01 1213.87 L1124.42 1213.87 L1123.83 1213.87 L1123.25 1213.87 L1122.66 1213.87 L1122.07 1213.87 L1121.49 1213.87 L1120.9 1213.87 L1120.31 1213.87 L1119.73 1213.87 L1119.14 1213.87 L1118.55 1213.87 L1117.97 1213.87 L1117.38 1213.87 L1116.8 1213.87 L1116.21 1213.87 L1115.62 1213.87 L1115.04 1213.87 L1114.45 1213.87 L1113.86 1213.87 L1113.28 1213.87 L1112.69 1213.87 L1112.1 1213.87 L1111.52 1213.87 L1110.93 1213.87 L1110.34 1213.87 L1109.76 1213.87 L1109.17 1213.87 L1108.59 1213.87 L1108 1213.87 L1107.41 1213.87 L1106.83 1213.87 L1106.24 1213.87 L1105.65 1213.87 L1105.07 1213.87 L1104.48 1213.87 L1103.89 1213.87 L1103.31 1213.87 L1102.72 1213.87 L1102.14 1213.87 L1101.55 1213.87 L1100.96 1213.87 L1100.38 1213.87 L1099.79 1213.87 L1099.2 1213.87 L1098.62 1213.87 L1098.03 1213.87 L1097.44 1213.87 L1096.86 1213.87 L1096.27 1213.87 L1095.68 1213.87 L1095.1 1213.87 L1094.51 1213.87 L1093.93 1213.87 L1093.34 1213.87 L1092.75 1213.87 L1092.17 1213.87 L1091.58 1213.87 L1090.99 1213.87 L1090.41 1213.87 L1089.82 1213.87 L1089.23 1213.87 L1088.65 1213.87 L1088.06 1213.87 L1087.47 1213.87 L1086.89 1213.87 L1086.3 1213.87 L1085.72 1213.87 L1085.13 1213.87 L1084.54 1213.87 L1083.96 1213.87 L1083.37 1213.87 L1082.78 1213.87 L1082.2 1213.87 L1081.61 1213.87 L1081.02 1213.87 L1080.44 1213.87 L1079.85 1213.87 L1079.26 1213.87 L1078.68 1213.87 L1078.09 1213.87 L1077.51 1213.87 L1076.92 1213.87 L1076.33 1213.87 L1075.75 1213.87 L1075.16 1213.87 L1074.57 1213.87 L1073.99 1213.87 L1073.4 1213.87 L1072.81 1213.87 L1072.23 1213.87 L1071.64 1213.87 L1071.06 1213.87 L1070.47 1213.87 L1069.88 1213.87 L1069.3 1213.87 L1068.71 1213.87 L1068.12 1213.87 L1067.54 1213.87 L1066.95 1213.87 L1066.36 1213.87 L1065.78 1213.87 L1065.19 1213.87 L1064.6 1213.87 L1064.02 1213.87 L1063.43 1213.87 L1062.85 1213.87 L1062.26 1213.87 L1061.67 1213.87 L1061.09 1213.87 L1060.5 1213.87 L1059.91 1213.87 L1059.33 1213.87 L1058.74 1213.87 L1058.15 1213.87 L1057.57 1213.87 L1056.98 1213.87 L1056.39 1213.87 L1055.81 1213.87 L1055.22 1213.87 L1054.64 1213.87 L1054.05 1213.87 L1053.46 1213.87 L1052.88 1213.87 L1052.29 1213.87 L1051.7 1213.87 L1051.12 1213.87 L1050.53 1213.87 L1049.94 1213.87 L1049.36 1213.87 L1048.77 1213.87 L1048.19 1213.87 L1047.6 1213.87 L1047.01 1213.87 L1046.43 1213.87 L1045.84 1213.87 L1045.25 1213.87 L1044.67 1213.87 L1044.08 1213.87 L1043.49 1213.87 L1042.91 1213.87 L1042.32 1213.87 L1041.73 1213.87 L1041.15 1213.87 L1040.56 1213.87 L1039.98 1213.87 L1039.39 1213.87 L1038.8 1213.87 L1038.22 1213.87 L1037.63 1213.87 L1037.04 1213.87 L1036.46 1213.87 L1035.87 1213.87 L1035.28 1213.87 L1034.7 1213.87 L1034.11 1213.87 L1033.52 1213.87 L1032.94 1213.87 L1032.35 1213.87 L1031.77 1213.87 L1031.18 1213.87 L1030.59 1213.87 L1030.01 1213.87 L1029.42 1213.87 L1028.83 1213.87 L1028.25 1213.87 L1027.66 1213.87 L1027.07 1213.87 L1026.49 1213.87 L1025.9 1213.87 L1025.32 1213.87 L1024.73 1213.87 L1024.14 1213.87 L1023.56 1213.87 L1022.97 1213.87 L1022.38 1213.87 L1021.8 1213.87 L1021.21 1213.87 L1020.62 1213.87 L1020.04 1213.87 L1019.45 1213.87 L1018.86 1213.87 L1018.28 1213.87 L1017.69 1213.87 L1017.11 1213.87 L1016.52 1213.87 L1015.93 1213.87 L1015.35 1213.87 L1014.76 1213.87 L1014.17 1213.87 L1013.59 1213.87 L1013 1213.87 L1012.41 1213.87 L1011.83 1213.87 L1011.24 1213.87 L1010.65 1213.87 L1010.07 1213.87 L1009.48 1213.87 L1008.9 1213.87 L1008.31 1213.87 L1007.72 1213.87 L1007.14 1213.87 L1006.55 1213.87 L1005.96 1213.87 L1005.38 1213.87 L1004.79 1213.87 L1004.2 1213.87 L1003.62 1213.87 L1003.03 1213.87 L1002.44 1213.87 L1001.86 1213.87 L1001.27 1213.87 L1000.69 1213.87 L1000.1 1213.87 L999.513 1213.87 L998.926 1213.87 L998.34 1213.87 L997.754 1213.87 L997.167 1213.87 L996.581 1213.87 L995.994 1213.87 L995.408 1213.87 L994.822 1213.87 L994.235 1213.87 L993.649 1213.87 L993.062 1213.87 L992.476 1213.87 L991.889 1213.87 L991.303 1213.87 L990.717 1213.87 L990.13 1213.87 L989.544 1213.87 L988.957 1213.87 L988.371 1213.87 L987.785 1213.87 L987.198 1213.87 L986.612 1213.87 L986.025 1213.87  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.93 986.612,1213.93 987.198,1213.93 987.785,1213.93 988.371,1213.93 988.957,1213.93 989.544,1213.93 990.13,1213.93 990.717,1213.93 991.303,1213.93 991.889,1213.93 992.476,1213.93 993.062,1213.93 993.649,1213.93 994.235,1213.93 994.822,1213.93 995.408,1213.93 995.994,1213.93 996.581,1213.93 997.167,1213.93 997.754,1213.93 998.34,1213.93 998.926,1213.93 999.513,1213.93 1000.1,1213.93 1000.69,1213.93 1001.27,1213.93 1001.86,1213.93 1002.44,1213.93 1003.03,1213.93 1003.62,1213.93 1004.2,1213.93 1004.79,1213.93 1005.38,1213.93 1005.96,1213.93 1006.55,1213.93 1007.14,1213.93 1007.72,1213.93 1008.31,1213.93 1008.9,1213.93 1009.48,1213.93 1010.07,1213.93 1010.65,1213.93 1011.24,1213.93 1011.83,1213.93 1012.41,1213.93 1013,1213.93 1013.59,1213.93 1014.17,1213.93 1014.76,1213.93 1015.35,1213.93 1015.93,1213.93 1016.52,1213.93 1017.11,1213.93 1017.69,1213.93 1018.28,1213.93 1018.86,1213.93 1019.45,1213.93 1020.04,1213.93 1020.62,1213.93 1021.21,1213.93 1021.8,1213.93 1022.38,1213.93 1022.97,1213.93 1023.56,1213.93 1024.14,1213.93 1024.73,1213.93 1025.32,1213.93 1025.9,1213.93 1026.49,1213.93 1027.07,1213.93 1027.66,1213.93 1028.25,1213.93 1028.83,1213.93 1029.42,1213.93 1030.01,1213.93 1030.59,1213.93 1031.18,1213.93 1031.77,1213.93 1032.35,1213.93 1032.94,1213.93 1033.52,1213.93 1034.11,1213.93 1034.7,1213.93 1035.28,1213.93 1035.87,1213.93 1036.46,1213.93 1037.04,1213.93 1037.63,1213.93 1038.22,1213.93 1038.8,1213.93 1039.39,1213.93 1039.98,1213.93 1040.56,1213.93 1041.15,1213.93 1041.73,1213.93 1042.32,1213.93 1042.91,1213.93 1043.49,1213.93 1044.08,1213.93 1044.67,1213.93 1045.25,1213.93 1045.84,1213.93 1046.43,1213.93 1047.01,1213.93 1047.6,1213.93 1048.19,1213.93 1048.77,1213.93 1049.36,1213.93 1049.94,1213.93 1050.53,1213.93 1051.12,1213.93 1051.7,1213.93 1052.29,1213.93 1052.88,1213.93 1053.46,1213.93 1054.05,1213.93 1054.64,1213.93 1055.22,1213.93 1055.81,1213.93 1056.39,1213.93 1056.98,1213.93 1057.57,1213.93 1058.15,1213.93 1058.74,1213.93 1059.33,1213.93 1059.91,1213.93 1060.5,1213.93 1061.09,1213.93 1061.67,1213.93 1062.26,1213.93 1062.85,1213.93 1063.43,1213.93 1064.02,1213.93 1064.6,1213.93 1065.19,1213.93 1065.78,1213.93 1066.36,1213.93 1066.95,1213.93 1067.54,1213.93 1068.12,1213.93 1068.71,1213.93 1069.3,1213.93 1069.88,1213.93 1070.47,1213.93 1071.06,1213.93 1071.64,1213.93 1072.23,1213.93 1072.81,1213.93 1073.4,1213.93 1073.99,1213.93 1074.57,1213.93 1075.16,1213.93 1075.75,1213.93 1076.33,1213.93 1076.92,1213.93 1077.51,1213.93 1078.09,1213.93 1078.68,1213.93 1079.26,1213.93 1079.85,1213.93 1080.44,1213.93 1081.02,1213.93 1081.61,1213.93 1082.2,1213.93 1082.78,1213.93 1083.37,1213.93 1083.96,1213.93 1084.54,1213.93 1085.13,1213.93 1085.72,1213.93 1086.3,1213.93 1086.89,1213.93 1087.47,1213.93 1088.06,1213.93 1088.65,1213.93 1089.23,1213.93 1089.82,1213.93 1090.41,1213.93 1090.99,1213.93 1091.58,1213.93 1092.17,1213.93 1092.75,1213.93 1093.34,1213.93 1093.93,1213.93 1094.51,1213.93 1095.1,1213.93 1095.68,1213.93 1096.27,1213.93 1096.86,1213.93 1097.44,1213.93 1098.03,1213.93 1098.62,1213.93 1099.2,1213.93 1099.79,1213.93 1100.38,1213.93 1100.96,1213.93 1101.55,1213.93 1102.14,1213.93 1102.72,1213.93 1103.31,1213.93 1103.89,1213.93 1104.48,1213.93 1105.07,1213.93 1105.65,1213.93 1106.24,1213.93 1106.83,1213.93 1107.41,1213.93 1108,1213.93 1108.59,1213.93 1109.17,1213.93 1109.76,1213.93 1110.34,1213.93 1110.93,1213.93 1111.52,1213.93 1112.1,1213.93 1112.69,1213.93 1113.28,1213.93 1113.86,1213.93 1114.45,1213.93 1115.04,1213.93 1115.62,1213.93 1116.21,1213.93 1116.8,1213.93 1117.38,1213.93 1117.97,1213.93 1118.55,1213.93 1119.14,1213.93 1119.73,1213.93 1120.31,1213.93 1120.9,1213.93 1121.49,1213.93 1122.07,1213.93 1122.66,1213.93 1123.25,1213.93 1123.83,1213.93 1124.42,1213.93 1125.01,1213.93 1125.59,1213.93 1126.18,1213.93 1126.76,1213.93 1127.35,1213.93 1127.94,1213.93 1128.52,1213.93 1129.11,1213.93 1129.7,1213.93 1130.28,1213.93 1130.87,1213.93 1131.46,1213.93 1132.04,1213.93 1132.63,1213.93 1133.21,1213.93 1133.8,1213.93 1134.39,1213.93 1134.97,1213.93 1135.56,1213.93 1136.15,1213.93 1136.73,1213.93 1137.32,1213.93 1137.91,1213.93 1138.49,1213.93 1139.08,1213.93 1139.67,1213.93 1140.25,1213.93 1140.84,1213.93 1141.42,1213.93 1142.01,1213.93 1142.6,1213.93 1143.18,1213.93 1143.77,1213.93 1144.36,1213.93 1144.94,1213.93 1145.53,1213.93 1146.12,1213.93 1146.7,1213.93 1147.29,1213.93 1147.88,1213.93 1148.46,1213.93 1149.05,1213.93 1149.63,1213.93 1150.22,1213.93 1150.81,1213.93 1151.39,1213.93 1151.98,1213.93 1152.57,1213.93 1153.15,1213.93 1153.74,1213.93 1154.33,1213.93 1154.91,1213.93 1155.5,1213.93 1156.09,1213.93 1156.67,1213.93 1157.26,1213.93 1157.84,1213.93 1158.43,1213.93 1159.02,1213.93 1159.6,1213.93 1160.19,1213.93 1160.78,1213.93 1161.36,1213.93 1161.95,1213.93 1162.54,1213.93 1163.12,1213.93 1163.71,1213.93 1164.29,1213.93 1164.88,1213.93 1165.47,1213.93 1166.05,1213.93 1166.64,1213.93 1167.23,1213.93 1167.81,1213.93 1168.4,1213.93 1168.99,1213.93 1169.57,1213.93 1170.16,1213.93 1170.75,1213.93 1171.33,1213.93 1171.92,1213.93 1172.5,1213.93 1173.09,1213.93 1173.68,1213.93 1174.26,1213.93 1174.85,1213.93 1175.44,1213.93 1176.02,1213.93 1176.61,1213.93 1177.2,1213.93 1177.78,1213.93 1178.37,1213.93 1178.96,1213.93 1179.54,1213.93 1180.13,1213.93 1180.71,1213.93 1181.3,1213.93 1181.89,1213.93 1182.47,1213.93 1183.06,1213.93 1183.65,1213.93 1184.23,1213.93 1184.82,1213.93 1185.41,1213.93 1185.99,1213.93 1186.58,1213.93 1187.16,1213.93 1187.75,1213.93 1188.34,1213.93 1188.92,1213.93 1189.51,1213.93 1190.1,1213.93 1190.68,1213.93 1191.27,1213.93 1191.86,1213.93 1192.44,1213.93 1193.03,1213.93 1193.62,1213.93 1194.2,1213.93 1194.79,1213.93 1195.37,1213.93 1195.96,1213.93 1196.55,1213.93 1197.13,1213.93 1197.72,1213.93 1198.31,1213.93 1198.89,1213.93 1199.48,1213.93 1200.07,1213.93 1200.65,1213.93 1201.24,1213.93 1201.83,1213.93 1202.41,1213.93 1203,1213.93 1203.58,1213.93 1204.17,1213.93 1204.76,1213.93 1205.34,1213.93 1205.93,1213.93 1206.52,1213.93 1207.1,1213.93 1207.69,1213.93 1208.28,1213.93 1208.86,1213.93 1209.45,1213.93 1210.03,1213.93 1210.62,1213.93 1211.21,1213.93 1211.79,1213.93 1212.38,1213.93 1212.97,1213.93 1213.55,1213.93 1214.14,1213.93 1214.73,1213.93 1215.31,1213.93 1215.9,1213.93 1216.49,1213.93 1217.07,1213.93 1217.66,1213.93 1218.24,1213.93 1218.83,1213.93 1219.42,1213.93 1220,1213.93 1220.59,1213.93 1221.18,1213.93 1221.76,1213.93 1222.35,1213.93 1222.94,1213.93 1223.52,1213.93 1224.11,1213.93 1224.7,1213.93 1225.28,1213.93 1225.87,1213.93 1226.45,1213.93 1227.04,1213.93 1227.63,1213.93 1228.21,1213.93 1228.8,1213.93 1229.39,1213.93 1229.97,1213.93 1230.56,1213.93 1231.15,1213.93 1231.73,1213.93 1232.32,1213.93 1232.91,1213.93 1233.49,1213.93 1234.08,1213.93 1234.66,1213.93 1235.25,1213.93 1235.84,1213.93 1236.42,1213.93 1237.01,1213.93 1237.6,1213.93 1238.18,1213.93 1238.77,1213.93 1239.36,1213.93 1239.94,1213.93 1240.53,1213.93 1241.11,1213.93 1241.7,1213.93 1242.29,1213.93 1242.87,1213.93 1243.46,1213.93 1244.05,1213.93 1244.63,1213.93 1245.22,1213.93 1245.81,1213.93 1246.39,1213.93 1246.98,1213.93 1247.57,1213.93 1248.15,1213.93 1248.74,1213.93 1249.32,1213.93 1249.91,1213.93 1250.5,1213.93 1251.08,1213.93 1251.67,1213.93 1252.26,1213.93 1252.84,1213.93 1253.43,1213.93 1254.02,1213.93 1254.6,1213.93 1255.19,1213.93 1255.78,1213.93 1256.36,1213.93 1256.95,1213.93 1257.53,1213.93 1258.12,1213.93 1258.71,1213.93 1259.29,1213.93 1259.88,1213.93 1260.47,1213.93 1261.05,1213.93 1261.64,1213.93 1262.23,1213.93 1262.81,1213.93 1263.4,1213.93 1263.98,1213.93 1264.57,1213.93 1265.16,1213.93 1265.74,1213.93 1266.33,1213.93 1266.92,1213.93 1267.5,1213.93 1268.09,1213.93 1268.68,1213.93 1269.26,1213.93 1269.85,1213.93 1270.44,1213.93 1271.02,1213.93 1271.61,1213.93 1272.19,1213.93 1272.78,1213.93 1273.37,1213.93 1273.95,1213.93 1274.54,1213.93 1275.13,1213.93 1275.71,1213.93 1276.3,1213.93 1276.89,1213.93 1277.47,1213.93 1278.06,1213.93 1278.65,1213.93 1279.23,1213.93 1279.82,1213.93 1280.4,1213.93 1280.99,1213.93 1281.58,1213.93 1282.16,1213.93 1282.75,1213.93 1283.34,1213.93 1283.92,1213.93 1284.51,1213.93 1285.1,1213.93 1285.68,1213.93 1286.27,1213.93 1286.86,1213.93 1287.44,1213.93 1288.03,1213.93 1288.61,1213.93 1289.2,1213.93 1289.79,1213.93 1290.37,1213.93 1290.96,1213.93 1291.55,1213.93 1292.13,1213.93 1292.72,1213.93 1293.31,1213.93 1293.89,1213.93 1294.48,1213.93 1295.06,1213.93 1295.65,1213.93 1296.24,1213.93 1296.82,1213.93 1297.41,1213.93 1298,1213.93 1298.58,1213.93 1299.17,1213.93 1299.76,1213.93 1300.34,1213.93 1300.93,1213.93 1301.52,1213.93 1302.1,1213.93 1302.69,1213.93 1303.27,1213.93 1303.86,1213.93 1304.45,1213.93 1305.03,1213.93 1305.62,1213.93 1306.21,1213.93 1306.79,1213.93 1307.38,1213.93 1307.97,1213.93 1308.55,1213.93 1309.14,1213.93 1309.73,1213.93 1310.31,1213.93 1310.9,1213.93 1311.48,1213.93 1312.07,1213.93 1312.66,1213.93 1313.24,1213.93 1313.83,1213.93 1314.42,1213.93 1315,1213.93 1315.59,1213.93 1316.18,1213.93 1316.76,1213.93 1317.35,1213.93 1317.93,1213.93 1318.52,1213.93 1319.11,1213.93 1319.69,1213.93 1320.28,1213.93 1320.87,1213.93 1321.45,1213.93 1322.04,1213.93 1322.63,1213.93 1323.21,1213.93 1323.8,1213.93 1324.39,1213.93 1324.97,1213.93 1325.56,1213.93 1326.14,1213.93 1326.73,1213.93 1327.32,1213.93 1327.9,1213.93 1328.49,1213.93 1329.08,1213.93 1329.66,1213.93 1330.25,1213.93 1330.84,1213.93 1331.42,1213.93 1332.01,1213.93 1332.6,1213.93 1333.18,1213.93 1333.77,1213.93 1334.35,1213.93 1334.94,1213.93 1335.53,1213.93 1336.11,1213.93 1336.7,1213.93 1337.29,1213.93 1337.87,1213.93 1338.46,1213.93 1339.05,1213.93 1339.63,1213.93 1340.22,1213.93 1340.8,1213.93 1341.39,1213.93 1341.98,1213.93 1342.56,1213.93 1343.15,1213.93 1343.74,1213.93 1344.32,1213.93 1344.91,1213.93 1345.5,1213.93 1346.08,1213.93 1346.67,1213.93 1347.26,1213.93 1347.84,1213.93 1348.43,1213.93 1349.01,1213.93 1349.6,1213.93 1350.19,1213.93 1350.77,1213.93 1351.36,1213.93 1351.95,1213.93 1352.53,1213.93 1353.12,1213.93 1353.71,1213.93 1354.29,1213.93 1354.88,1213.93 1355.47,1213.93 1356.05,1213.93 1356.64,1213.93 1357.22,1213.93 1357.81,1213.93 1358.4,1213.93 1358.98,1213.93 1359.57,1213.93 1360.16,1213.93 1360.74,1213.93 1361.33,1213.93 1361.92,1213.93 1362.5,1213.93 1363.09,1213.93 1363.68,1213.93 1364.26,1213.93 1364.85,1213.93 1365.43,1213.93 1366.02,1213.93 1366.61,1213.93 1367.19,1213.93 1367.78,1213.93 1368.37,1213.93 1368.95,1213.93 1369.54,1213.93 1370.13,1213.93 1370.71,1213.93 1371.3,1213.93 1371.88,1213.93 1372.47,1213.93 1373.06,1213.93 1373.64,1213.93 1374.23,1213.93 1374.82,1213.93 1375.4,1213.93 1375.99,1213.93 1376.58,1213.93 1377.16,1213.93 1377.75,1213.93 1378.34,1213.93 1378.92,1213.93 1379.51,1213.93 1380.09,1213.93 1380.68,1213.93 1381.27,1213.93 1381.85,1213.93 1382.44,1213.93 1383.03,1213.93 1383.61,1213.93 1384.2,1213.93 1384.79,1213.93 1385.37,1213.93 1385.96,1213.93 1386.55,1213.93 1387.13,1213.93 1387.72,1213.93 1388.3,1213.93 1388.89,1213.93 1389.48,1213.93 1390.06,1213.93 1390.65,1213.93 1391.24,1213.93 1391.82,1213.93 1392.41,1213.93 1393,1213.93 1393.58,1213.93 1394.17,1213.93 1394.75,1213.93 1395.34,1213.93 1395.93,1213.93 1396.51,1213.93 1397.1,1213.93 1397.69,1213.93 1398.27,1213.93 1398.86,1213.93 1399.45,1213.93 1400.03,1213.93 1400.62,1213.93 1401.21,1213.93 1401.79,1213.93 1402.38,1213.93 1402.96,1213.93 1403.55,1213.93 1404.14,1213.93 1404.72,1213.93 1405.31,1213.93 1405.9,1213.93 1406.48,1213.93 1407.07,1213.93 1407.66,1213.93 1408.24,1213.93 1408.83,1213.93 1409.42,1213.93 1410,1213.93 1410.59,1213.93 1411.17,1213.93 1411.76,1213.93 1412.35,1213.93 1412.93,1213.93 1413.52,1213.93 1414.11,1213.93 1414.69,1213.93 1415.28,1213.93 1415.87,1213.93 1416.45,1213.93 1417.04,1213.93 1417.63,1213.93 1418.21,1213.93 1418.8,1213.93 1419.38,1213.93 1419.97,1213.93 1420.56,1213.93 1421.14,1213.93 1421.73,1213.93 1422.32,1213.93 1422.9,1213.93 1423.49,1213.93 1424.08,1213.93 1424.66,1213.93 1425.25,1213.93 1425.83,1213.93 1426.42,1213.93 1427.01,1213.93 1427.59,1213.93 1428.18,1213.93 1428.77,1213.93 1429.35,1213.93 1429.94,1213.93 1430.53,1213.93 1431.11,1213.93 1431.7,1213.93 1432.29,1213.93 1432.87,1213.93 1433.46,1213.93 1434.04,1213.93 1434.63,1213.93 1435.22,1213.93 1435.8,1213.93 1436.39,1213.93 1436.98,1213.93 1437.56,1213.93 1438.15,1213.93 1438.74,1213.93 1439.32,1213.93 1439.91,1213.93 1440.5,1213.93 1441.08,1213.93 1441.67,1213.93 1442.25,1213.93 1442.84,1213.93 1443.43,1213.93 1444.01,1213.93 1444.6,1213.93 1445.19,1213.93 1445.77,1213.93 1446.36,1213.93 1446.95,1213.93 1447.53,1213.93 1448.12,1213.93 1448.7,1213.93 1449.29,1213.93 1449.88,1213.93 1450.46,1213.93 1451.05,1213.93 1451.64,1213.93 1452.22,1213.93 1452.81,1213.93 1453.4,1213.93 1453.98,1213.93 1454.57,1213.93 1455.16,1213.93 1455.74,1213.93 1456.33,1213.93 1456.91,1213.93 1457.5,1213.93 1458.09,1213.93 1458.67,1213.93 1459.26,1213.93 1459.85,1213.93 1460.43,1213.93 1461.02,1213.93 1461.61,1213.93 1462.19,1213.93 1462.78,1213.93 1463.37,1213.93 1463.95,1213.93 1464.54,1213.93 1465.12,1213.93 1465.71,1213.93 1466.3,1213.93 1466.88,1213.93 1467.47,1213.93 1468.06,1213.93 1468.64,1213.93 1469.23,1213.93 1469.82,1213.93 1470.4,1213.93 1470.99,1213.93 1471.57,1213.93 1472.16,1213.93 1472.75,1213.93 1473.33,1213.93 1473.92,1213.93 1474.51,1213.93 1475.09,1213.93 1475.68,1213.93 1476.27,1213.93 1476.85,1213.93 1477.44,1213.93 1478.03,1213.93 1478.61,1213.93 1479.2,1213.93 1479.78,1213.93 1480.37,1213.93 1480.96,1213.93 1481.54,1213.93 1482.13,1213.93 1482.72,1213.93 1483.3,1213.93 1483.89,1213.93 1484.48,1213.93 1485.06,1213.93 1485.65,1213.93 1486.24,1213.93 1486.82,1213.93 1487.41,1213.93 1487.99,1213.93 1488.58,1213.93 1489.17,1213.93 1489.75,1213.93 1490.34,1213.93 1490.93,1213.93 1491.51,1213.93 1492.1,1213.93 1492.69,1213.93 1493.27,1213.93 1493.86,1213.93 1494.45,1213.93 1495.03,1213.93 1495.62,1213.93 1496.2,1213.93 1496.79,1213.93 1497.38,1213.93 1497.96,1213.93 1498.55,1213.93 1499.14,1213.93 1499.72,1213.93 1500.31,1213.93 1500.9,1213.93 1501.48,1213.93 1502.07,1213.93 1502.65,1213.93 1503.24,1213.93 1503.83,1213.93 1504.41,1213.93 1505,1213.93 1505.59,1213.93 1506.17,1213.93 1506.76,1213.93 1507.35,1213.93 1507.93,1213.93 1508.52,1213.93 1509.11,1213.93 1509.69,1213.93 1510.28,1213.93 1510.86,1213.93 1511.45,1213.93 1512.04,1213.93 1512.62,1213.93 1513.21,1213.93 1513.8,1213.93 1514.38,1213.93 1514.97,1213.93 1515.56,1213.93 1516.14,1213.93 1516.73,1213.93 1517.32,1213.93 1517.9,1213.93 1518.49,1213.93 1519.07,1213.93 1519.66,1213.93 1520.25,1213.93 1520.83,1213.93 1521.42,1213.93 1522.01,1213.93 1522.59,1213.93 1523.18,1213.93 1523.77,1213.93 1524.35,1213.93 1524.94,1213.93 1525.52,1213.93 1526.11,1213.93 1526.7,1213.93 1527.28,1213.93 1527.87,1213.93 1528.46,1213.93 1529.04,1213.93 1529.63,1213.93 1530.22,1213.93 1530.8,1213.93 1531.39,1213.93 1531.98,1213.93 1532.56,1213.93 1533.15,1213.93 1533.73,1213.93 1534.32,1213.93 1534.91,1213.93 1535.49,1213.93 1536.08,1213.93 1536.67,1213.93 1537.25,1213.93 1537.84,1213.93 1538.43,1213.93 1539.01,1213.93 1539.6,1213.93 1540.19,1213.93 1540.77,1213.93 1541.36,1213.93 1541.94,1213.93 1542.53,1213.93 1543.12,1213.93 1543.7,1213.93 1544.29,1213.93 1544.88,1213.93 1545.46,1213.93 1546.05,1213.93 1546.64,1213.93 1547.22,1213.93 1547.81,1213.93 1548.4,1213.93 1548.98,1213.93 1549.57,1213.93 1550.15,1213.93 1550.74,1213.93 1551.33,1213.93 1551.91,1213.93 1552.5,1213.93 1553.09,1213.93 1553.67,1213.93 1554.26,1213.93 1554.85,1213.93 1555.43,1213.93 1556.02,1213.93 1556.6,1213.93 1557.19,1213.93 1557.78,1213.93 1558.36,1213.93 1558.95,1213.93 1559.54,1213.93 1560.12,1213.93 1560.71,1213.93 1561.3,1213.93 1561.88,1213.93 1562.47,1213.93 1563.06,1213.93 1563.64,1213.93 1564.23,1213.93 1564.81,1213.93 1565.4,1213.93 1565.99,1213.93 1566.57,1213.93 1567.16,1213.93 1567.75,1213.93 1568.33,1213.93 1568.92,1213.93 1569.51,1213.93 1570.09,1213.93 1570.68,1213.93 1571.27,1213.93 1571.85,1213.93 1572.44,1213.93 1573.02,1213.93 1573.61,1213.93 1574.2,1213.93 1574.78,1213.93 1575.37,1213.93 1575.96,1213.93 1576.54,1213.93 1577.13,1213.93 1577.72,1213.93 1578.3,1213.93 1578.89,1213.93 1579.47,1213.93 1580.06,1213.93 1580.65,1213.93 1581.23,1213.93 1581.82,1213.93 1582.41,1213.93 1582.99,1213.93 1583.58,1213.93 1584.17,1213.93 1584.75,1213.93 1585.34,1213.93 1585.93,1213.93 1586.51,1213.93 1587.1,1213.93 1587.68,1213.93 1588.27,1213.93 1588.86,1213.93 1589.44,1213.93 1590.03,1213.93 1590.62,1213.93 1591.2,1213.93 1591.79,1213.93 1592.38,1213.93 1592.96,1213.93 1593.55,1213.93 1594.14,1213.93 1594.72,1213.93 1595.31,1213.93 1595.89,1213.93 1596.48,1213.93 1597.07,1213.93 1597.65,1213.93 1598.24,1213.93 1598.83,1213.93 1599.41,1213.93 1600,1213.93 1600.59,1213.93 1601.17,1213.93 1601.76,1213.93 1602.34,1213.93 1602.93,1213.93 1603.52,1213.93 1604.1,1213.93 1604.69,1213.93 1605.28,1213.93 1605.86,1213.93 1606.45,1213.93 1607.04,1213.93 1607.62,1213.93 1608.21,1213.93 1608.8,1213.93 1609.38,1213.93 1609.97,1213.93 1610.55,1213.93 1611.14,1213.93 1611.73,1213.93 1612.31,1213.93 1612.9,1213.93 1613.49,1213.93 1614.07,1213.93 1614.66,1213.93 1615.25,1213.93 1615.83,1213.93 1616.42,1213.93 1617.01,1213.93 1617.59,1213.93 1618.18,1213.93 1618.76,1213.93 1619.35,1213.93 1619.94,1213.93 1620.52,1213.93 1621.11,1213.93 1621.7,1213.93 1622.28,1213.93 1622.87,1213.93 1623.46,1213.93 1624.04,1213.93 1624.63,1213.93 1625.22,1213.93 1625.8,1213.93 1626.39,1213.93 1626.97,1213.93 1627.56,1213.93 1628.15,1213.93 1628.73,1213.93 1629.32,1213.93 1629.91,1213.93 1630.49,1213.93 1631.08,1213.93 1631.67,1213.93 1632.25,1213.93 1632.84,1213.93 1633.42,1213.93 1634.01,1213.93 1634.6,1213.93 1635.18,1213.93 1635.77,1213.93 1636.36,1213.93 1636.94,1213.93 1637.53,1213.93 1638.12,1213.93 1638.7,1213.93 1639.29,1213.93 1639.88,1213.93 1640.46,1213.93 1641.05,1213.93 1641.63,1213.93 1642.22,1213.93 1642.81,1213.93 1643.39,1213.93 1643.98,1213.93 1644.57,1213.93 1645.15,1213.93 1645.74,1213.93 1646.33,1213.93 1646.91,1213.93 1647.5,1213.93 1648.09,1213.93 1648.67,1213.93 1649.26,1213.93 1649.84,1213.93 1650.43,1213.93 1651.02,1213.93 1651.6,1213.93 1652.19,1213.93 1652.78,1213.93 1653.36,1213.93 1653.95,1213.93 1654.54,1213.93 1655.12,1213.93 1655.71,1213.93 1656.29,1213.93 1656.88,1213.93 1657.47,1213.93 1658.05,1213.93 1658.64,1213.93 1659.23,1213.93 1659.81,1213.93 1660.4,1213.93 1660.99,1213.93 1661.57,1213.93 1662.16,1213.93 1662.75,1213.93 1663.33,1213.93 1663.92,1213.93 1664.5,1213.93 1665.09,1213.93 1665.68,1213.93 1666.26,1213.93 1666.85,1213.93 1667.44,1213.93 1668.02,1213.93 1668.61,1213.93 1669.2,1213.93 1669.78,1213.93 1670.37,1213.93 1670.96,1213.93 1671.54,1213.93 1672.13,1213.93 1672.71,1213.93 1673.3,1213.93 1673.89,1213.93 1674.47,1213.93 1675.06,1213.93 1675.65,1213.93 1676.23,1213.93 1676.82,1213.93 1677.41,1213.93 1677.99,1213.93 1678.58,1213.93 1679.17,1213.93 1679.75,1213.93 1680.34,1213.93 1680.92,1213.93 1681.51,1213.93 1682.1,1213.93 1682.68,1213.93 1683.27,1213.93 1683.86,1213.93 1684.44,1213.93 1685.03,1213.93 1685.62,1213.93 1686.2,1213.93 1686.79,1213.93 1687.37,1213.93 1687.96,1213.93 1688.55,1213.93 1689.13,1213.93 1689.72,1213.93 1690.31,1213.93 1690.89,1213.93 1691.48,1213.93 1692.07,1213.93 1692.65,1213.93 1693.24,1213.93 1693.83,1213.93 1694.41,1213.93 1695,1213.93 1695.58,1213.93 1696.17,1213.93 1696.76,1213.93 1697.34,1213.93 1697.93,1213.93 1698.52,1213.93 1699.1,1213.93 1699.69,1213.93 1700.28,1213.93 1700.86,1213.93 1701.45,1213.93 1702.04,1213.93 1702.62,1213.93 1703.21,1213.93 1703.79,1213.93 1704.38,1213.93 1704.97,1213.93 1705.55,1213.93 1706.14,1213.93 1706.73,1213.93 1707.31,1213.93 1707.9,1213.93 1708.49,1213.93 1709.07,1213.93 1709.66,1213.93 1710.24,1213.93 1710.83,1213.93 1711.42,1213.93 1712,1213.93 1712.59,1213.93 1713.18,1213.93 1713.76,1213.93 1714.35,1213.93 1714.94,1213.93 1715.52,1213.93 1716.11,1213.93 1716.7,1213.93 1717.28,1213.93 1717.87,1213.93 1718.45,1213.93 1719.04,1213.93 1719.63,1213.93 1720.21,1213.93 1720.8,1213.93 1721.39,1213.93 1721.97,1213.93 1722.56,1213.93 1723.15,1213.93 1723.73,1213.93 1724.32,1213.93 1724.91,1213.93 1725.49,1213.93 1726.08,1213.93 1726.66,1213.93 1727.25,1213.93 1727.84,1213.93 1728.42,1213.93 1729.01,1213.93 1729.6,1213.93 1730.18,1213.93 1730.77,1213.93 1731.36,1213.93 1731.94,1213.93 1732.53,1213.93 1733.11,1213.93 1733.7,1213.93 1734.29,1213.93 1734.87,1213.93 1735.46,1213.93 1736.05,1213.93 1736.63,1213.93 1737.22,1213.93 1737.81,1213.93 1738.39,1213.93 1738.98,1213.93 1739.57,1213.93 1740.15,1213.93 1740.74,1213.93 1741.32,1213.93 1741.91,1213.93 1742.5,1213.93 1743.08,1213.93 1743.67,1213.93 1744.26,1213.93 1744.84,1213.93 1745.43,1213.93 1746.02,1213.93 1746.6,1213.93 1747.19,1213.93 1747.78,1213.93 1748.36,1213.93 1748.95,1213.93 1749.53,1213.93 1750.12,1213.93 1750.71,1213.93 1751.29,1213.93 1751.88,1213.93 1752.47,1213.93 1753.05,1213.93 1753.64,1213.93 1754.23,1213.93 1754.81,1213.93 1755.4,1213.93 1755.99,1213.93 1756.57,1213.93 1757.16,1213.93 1757.74,1213.93 1758.33,1213.93 1758.92,1213.93 1759.5,1213.93 1760.09,1213.93 1760.68,1213.93 1761.26,1213.93 1761.85,1213.93 1762.44,1213.93 1763.02,1213.93 1763.61,1213.93 1764.19,1213.93 1764.78,1213.93 1765.37,1213.93 1765.95,1213.93 1766.54,1213.93 1767.13,1213.93 1767.71,1213.93 1768.3,1213.93 1768.89,1213.93 1769.47,1213.93 1770.06,1213.93 1770.65,1213.93 1771.23,1213.93 1771.82,1213.93 1772.4,1213.93 1772.99,1213.93 1773.58,1213.93 1774.16,1213.93 1774.75,1213.93 1775.34,1213.93 1775.92,1213.93 1776.51,1213.93 1777.1,1213.93 1777.68,1213.93 1778.27,1213.93 1778.86,1213.93 1779.44,1213.93 1780.03,1213.93 1780.61,1213.93 1781.2,1213.93 1781.79,1213.93 1782.37,1213.93 1782.96,1213.93 1783.55,1213.93 1784.13,1213.93 1784.72,1213.93 1785.31,1213.93 1785.89,1213.93 1786.48,1213.93 1787.06,1213.93 1787.65,1213.93 1788.24,1213.93 1788.82,1213.93 1789.41,1213.93 1790,1213.93 1790.58,1213.93 1791.17,1213.93 1791.76,1213.93 1792.34,1213.93 1792.93,1213.93 1793.52,1213.93 1794.1,1213.93 1794.69,1213.93 1795.27,1213.93 1795.86,1213.93 1796.45,1213.93 1797.03,1213.93 1797.62,1213.93 1798.21,1213.93 1798.79,1213.93 1799.38,1213.93 1799.97,1213.93 1800.55,1213.93 1801.14,1213.93 1801.73,1213.93 1802.31,1213.93 1802.9,1213.93 1803.48,1213.93 1804.07,1213.93 1804.66,1213.93 1805.24,1213.93 1805.83,1213.93 1806.42,1213.93 1807,1213.93 1807.59,1213.93 1808.18,1213.93 1808.76,1213.93 1809.35,1213.93 1809.94,1213.93 1810.52,1213.93 1811.11,1213.93 1811.69,1213.93 1812.28,1213.93 1812.87,1213.93 1813.45,1213.93 1814.04,1213.93 1814.63,1213.93 1815.21,1213.93 1815.8,1213.93 1816.39,1213.93 1816.97,1213.93 1817.56,1213.93 1818.14,1213.93 1818.73,1213.93 1819.32,1213.93 1819.9,1213.93 1820.49,1213.93 1821.08,1213.93 1821.66,1213.93 1822.25,1213.93 1822.84,1213.93 1823.42,1213.93 1824.01,1213.93 1824.6,1213.93 1825.18,1213.93 1825.77,1213.93 1826.35,1213.93 1826.94,1213.93 1827.53,1213.93 1828.11,1213.93 1828.7,1213.93 1829.29,1213.93 1829.87,1213.93 1830.46,1213.93 1831.05,1213.93 1831.63,1213.93 1832.22,1213.93 1832.81,1213.93 1833.39,1213.93 1833.98,1213.93 1834.56,1213.93 1835.15,1213.93 1835.74,1213.93 1836.32,1213.93 1836.91,1213.93 1837.5,1213.93 1838.08,1213.93 1838.67,1213.93 1839.26,1213.93 1839.84,1213.93 1840.43,1213.93 1841.01,1213.93 1841.6,1213.93 1842.19,1213.93 1842.77,1213.93 1843.36,1213.93 1843.95,1213.93 1844.53,1213.93 1845.12,1213.93 1845.71,1213.93 1846.29,1213.93 1846.88,1213.93 1847.47,1213.93 1848.05,1213.93 1848.64,1213.93 1849.22,1213.93 1849.81,1213.93 1850.4,1213.93 1850.98,1213.93 1851.57,1213.93 1852.16,1213.93 1852.74,1213.93 1853.33,1213.93 1853.92,1213.93 1854.5,1213.93 1855.09,1213.93 1855.68,1213.93 1856.26,1213.93 1856.85,1213.93 1857.43,1213.93 1858.02,1213.93 1858.61,1213.93 1859.19,1213.93 1859.78,1213.93 1860.37,1213.93 1860.95,1213.93 1861.54,1213.93 1862.13,1213.93 1862.71,1213.93 1863.3,1213.93 1863.88,1213.93 1864.47,1213.93 1865.06,1213.93 1865.64,1213.93 1866.23,1213.93 1866.82,1213.93 1867.4,1213.93 1867.99,1213.93 1868.58,1213.93 1869.16,1213.93 1869.75,1213.93 1870.34,1213.93 1870.92,1213.93 1871.51,1213.93 1872.09,1213.93 1872.68,1213.93 1873.27,1213.93 1873.85,1213.93 1874.44,1213.93 1875.03,1213.93 1875.61,1213.93 1876.2,1213.93 1876.79,1213.93 1877.37,1213.93 1877.96,1213.93 1878.55,1213.93 1879.13,1213.93 1879.72,1213.93 1880.3,1213.93 1880.89,1213.93 1881.48,1213.93 1882.06,1213.93 1882.65,1213.93 1883.24,1213.93 1883.82,1213.93 1884.41,1213.93 1885,1213.93 1885.58,1213.93 1886.17,1213.93 1886.76,1213.93 1887.34,1213.93 1887.93,1213.93 1888.51,1213.93 1889.1,1213.93 1889.69,1213.93 1890.27,1213.93 1890.86,1213.93 1891.45,1213.93 1892.03,1213.93 1892.62,1213.93 1893.21,1213.93 1893.79,1213.93 1894.38,1213.93 1894.96,1213.93 1895.55,1213.93 1896.14,1213.93 1896.72,1213.93 1897.31,1213.93 1897.9,1213.93 1898.48,1213.93 1899.07,1213.93 1899.66,1213.93 1900.24,1213.93 1900.83,1213.93 1901.42,1213.93 1902,1213.93 1902.59,1213.93 1903.17,1213.93 1903.76,1213.93 1904.35,1213.93 1904.93,1213.93 1905.52,1213.93 1906.11,1213.93 1906.69,1213.93 1907.28,1213.93 1907.87,1213.93 1908.45,1213.93 1909.04,1213.93 1909.63,1213.93 1910.21,1213.93 1910.8,1213.93 1911.38,1213.93 1911.97,1213.93 1912.56,1213.93 1913.14,1213.93 1913.73,1213.93 1914.32,1213.93 1914.9,1213.93 1915.49,1213.93 1916.08,1213.93 1916.66,1213.93 1917.25,1213.93 1917.83,1213.93 1918.42,1213.93 1919.01,1213.93 1919.59,1213.93 1920.18,1213.93 1920.77,1213.93 1921.35,1213.93 1921.94,1213.93 1922.53,1213.93 1923.11,1213.93 1923.7,1213.93 1924.29,1213.93 1924.87,1213.93 1925.46,1213.93 1926.04,1213.93 1926.63,1213.93 1927.22,1213.93 1927.8,1213.93 1928.39,1213.93 1928.98,1213.93 1929.56,1213.93 1930.15,1213.93 1930.74,1213.93 1931.32,1213.93 1931.91,1213.93 1932.5,1213.93 1933.08,1213.93 1933.67,1213.93 1934.25,1213.93 1934.84,1213.93 1935.43,1213.93 1936.01,1213.93 1936.6,1213.93 1937.19,1213.93 1937.77,1213.93 1938.36,1213.93 1938.95,1213.93 1939.53,1213.93 1940.12,1213.93 1940.71,1213.93 1941.29,1213.93 1941.88,1213.93 1942.46,1213.93 1943.05,1213.93 1943.64,1213.93 1944.22,1213.93 1944.81,1213.93 1945.4,1213.93 1945.98,1213.93 1946.57,1213.93 1947.16,1213.93 1947.74,1213.93 1948.33,1213.93 1948.91,1213.93 1949.5,1213.93 1950.09,1213.93 1950.67,1213.93 1951.26,1213.93 1951.85,1213.93 1952.43,1213.93 1953.02,1213.93 1953.61,1213.93 1954.19,1213.93 1954.78,1213.93 1955.37,1213.93 1955.95,1213.93 1956.54,1213.93 1957.12,1213.93 1957.71,1213.93 1958.3,1213.93 1958.88,1213.93 1959.47,1213.93 1960.06,1213.93 1960.64,1213.93 1961.23,1213.93 1961.82,1213.93 1962.4,1213.93 1962.99,1213.93 1963.58,1213.93 1964.16,1213.93 1964.75,1213.93 1965.33,1213.93 1965.92,1213.93 1966.51,1213.93 1967.09,1213.93 1967.68,1213.93 1968.27,1213.93 1968.85,1213.93 1969.44,1213.93 1970.03,1213.93 1970.61,1213.93 1971.2,1213.93 1971.78,1213.93 1972.37,1213.93 1972.96,1213.93 1973.54,1213.93 1974.13,1213.93 1974.72,1213.93 1975.3,1213.93 1975.89,1213.93 1976.48,1213.93 1977.06,1213.93 1977.65,1213.93 1978.24,1213.93 1978.82,1213.93 1979.41,1213.93 1979.99,1213.93 1980.58,1213.93 1981.17,1213.93 1981.75,1213.93 1982.34,1213.93 1982.93,1213.93 1983.51,1213.93 1984.1,1213.93 1984.69,1213.93 1985.27,1213.93 1985.86,1213.93 1986.45,1213.93 1987.03,1213.93 1987.62,1213.93 1988.2,1213.93 1988.79,1213.93 1989.38,1213.93 1989.96,1213.93 1990.55,1213.93 1991.14,1213.93 1991.72,1213.93 1992.31,1213.93 1992.9,1213.93 1993.48,1213.93 1994.07,1213.93 1994.65,1213.93 1995.24,1213.93 1995.83,1213.93 1996.41,1213.93 1997,1213.93 1997.59,1213.93 1998.17,1213.93 1998.76,1213.93 1999.35,1213.93 1999.93,1213.93 2000.52,1213.93 2001.11,1213.93 2001.69,1213.93 2002.28,1213.93 2002.86,1213.93 2003.45,1213.93 2004.04,1213.93 2004.62,1213.93 2005.21,1213.93 2005.8,1213.93 2006.38,1213.93 2006.97,1213.93 2007.56,1213.93 2008.14,1213.93 2008.73,1213.93 2009.32,1213.93 2009.9,1213.93 2010.49,1213.93 2011.07,1213.93 2011.66,1213.93 2012.25,1213.93 2012.83,1213.93 2013.42,1213.93 2014.01,1213.93 2014.59,1213.93 2015.18,1213.93 2015.77,1213.93 2016.35,1213.93 2016.94,1213.93 2017.53,1213.93 2018.11,1213.93 2018.7,1213.93 2019.28,1213.93 2019.87,1213.93 2020.46,1213.93 2021.04,1213.93 2021.63,1213.93 2022.22,1213.93 2022.8,1213.93 2023.39,1213.93 2023.98,1213.93 2024.56,1213.93 2025.15,1213.93 2025.73,1213.93 2026.32,1213.93 2026.91,1213.93 2027.49,1213.93 2028.08,1213.93 2028.67,1213.93 2029.25,1213.93 2029.84,1213.93 2030.43,1213.93 2031.01,1213.93 2031.6,1213.93 2032.19,1213.93 2032.77,1213.93 2033.36,1213.93 2033.94,1213.93 2034.53,1213.93 2035.12,1213.93 2035.7,1213.93 2036.29,1213.93 2036.88,1213.93 2037.46,1213.93 2038.05,1213.93 2038.64,1213.93 2039.22,1213.93 2039.81,1213.93 2040.4,1213.93 2040.98,1213.93 2041.57,1213.93 2042.15,1213.93 2042.74,1213.93 2043.33,1213.93 2043.91,1213.93 2044.5,1213.93 2045.09,1213.93 2045.67,1213.93 2046.26,1213.93 2046.85,1213.93 2047.43,1213.93 2048.02,1213.93 2048.6,1213.93 2049.19,1213.93 2049.78,1213.93 2050.36,1213.93 2050.95,1213.93 2051.54,1213.93 2052.12,1213.93 2052.71,1213.93 2053.3,1213.93 2053.88,1213.93 2054.47,1213.93 2055.06,1213.93 2055.64,1213.93 2056.23,1213.93 2056.81,1213.93 2057.4,1213.93 2057.99,1213.93 2058.57,1213.93 2059.16,1213.93 2059.75,1213.93 2060.33,1213.93 2060.92,1213.93 2061.51,1213.93 2062.09,1213.93 2062.68,1213.93 2063.27,1213.93 2063.85,1213.93 2064.44,1213.93 2065.02,1213.93 2065.61,1213.93 2066.2,1213.93 2066.78,1213.93 2067.37,1213.93 2067.96,1213.93 2068.54,1213.93 2069.13,1213.93 2069.72,1213.93 2070.3,1213.93 2070.89,1213.93 2071.48,1213.93 2072.06,1213.93 2072.65,1213.93 2073.23,1213.93 2073.82,1213.93 2074.41,1213.93 2074.99,1213.93 2075.58,1213.93 2076.17,1213.93 2076.75,1213.93 2077.34,1213.93 2077.93,1213.93 2078.51,1213.93 2079.1,1213.93 2079.68,1213.93 2080.27,1213.93 2080.86,1213.93 2081.44,1213.93 2082.03,1213.93 2082.62,1213.93 2083.2,1213.93 2083.79,1213.93 2084.38,1213.93 2084.96,1213.93 2085.55,1213.93 2086.14,1213.93 2086.72,1213.93 2087.31,1213.93 2087.89,1213.93 2088.48,1213.93 2089.07,1213.93 2089.65,1213.93 2090.24,1213.93 2090.83,1213.93 2091.41,1213.93 2092,1213.93 2092.59,1213.93 2093.17,1213.93 2093.76,1213.93 2094.35,1213.93 2094.93,1213.93 2095.52,1213.93 2096.1,1213.93 2096.69,1213.93 2097.28,1213.93 2097.86,1213.93 2098.45,1213.93 2099.04,1213.93 2099.62,1213.93 2100.21,1213.93 2100.8,1213.93 2101.38,1213.93 2101.97,1213.93 2102.55,1213.93 2103.14,1213.93 2103.73,1213.93 2104.31,1213.93 2104.9,1213.93 2105.49,1213.93 2106.07,1213.93 2106.66,1213.93 2107.25,1213.93 2107.83,1213.93 2108.42,1213.93 2109.01,1213.93 2109.59,1213.93 2110.18,1213.93 2110.76,1213.93 2111.35,1213.93 2111.94,1213.93 2112.52,1213.93 2113.11,1213.93 2113.7,1213.93 2114.28,1213.93 2114.87,1213.93 2115.46,1213.93 2116.04,1213.93 2116.63,1213.93 2117.22,1213.93 2117.8,1213.93 2118.39,1213.93 2118.97,1213.93 2119.56,1213.93 2120.15,1213.93 2120.73,1213.93 2121.32,1213.93 2121.91,1213.93 2122.49,1213.93 2123.08,1213.93 2123.67,1213.93 2124.25,1213.93 2124.84,1213.93 2125.42,1213.93 2126.01,1213.93 2126.6,1213.93 2127.18,1213.93 2127.77,1213.93 2128.36,1213.93 2128.94,1213.93 2129.53,1213.93 2130.12,1213.93 2130.7,1213.93 2131.29,1213.93 2131.88,1213.93 2132.46,1213.93 2133.05,1213.93 2133.63,1213.93 2134.22,1213.93 2134.81,1213.93 2135.39,1213.93 2135.98,1213.93 2136.57,1213.93 2137.15,1213.93 2137.74,1213.93 2138.33,1213.93 2138.91,1213.93 2139.5,1213.93 2140.09,1213.93 2140.67,1213.93 2141.26,1213.93 2141.84,1213.93 2142.43,1213.93 2143.02,1213.93 2143.6,1213.93 2144.19,1213.93 2144.78,1213.93 2145.36,1213.93 2145.95,1213.93 2146.54,1213.93 2147.12,1213.93 2147.71,1213.93 2148.3,1213.93 2148.88,1213.93 2149.47,1213.93 2150.05,1213.93 2150.64,1213.93 2151.23,1213.93 2151.81,1213.93 2152.4,1213.93 2152.99,1213.93 2153.57,1213.93 2154.16,1213.93 2154.75,1213.93 2155.33,1213.93 2155.92,1213.93 2156.5,1213.93 2157.09,1213.93 2157.68,1213.93 2158.26,1213.93 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.81,1195.42 1398.99,899.083 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.98 985.439,1195.42 2158.26,1195.42 2158.26,1231.98 985.439,1231.98 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip373\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip373)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4888.46 163.792,-5902.09 164.351,-6827.47 164.91,-7694.58 165.469,-8461 166.029,-8022.06 166.588,-8705.46 167.147,-9322.7 167.706,-9859.27 168.266,-10357.8 168.825,-10802.2 169.384,-11195.9 169.943,-10055.9 170.503,-10420.4 171.062,-10113.6 171.621,-9290.9 172.18,-9611.67 172.74,-9899.69 173.299,-10131 173.858,-10331.6 174.417,-10093 174.977,-10267.9 175.536,-10413 176.095,-9848.3 176.655,-9675.94 177.214,-9808.97 177.773,-9617.53 178.332,-9438.63 178.892,-9521.03 179.451,-9592.8 180.01,-9641.37 180.569,-9674.02 181.129,-9673.86 181.688,-9274.13 182.247,-9066.72 182.806,-8863.22 183.366,-8523.26 183.925,-8332.36 184.484,-8145.02 185.043,-8092.2 185.603,-8042.58 186.162,-7725.85 186.721,-7435.92 187.28,-7373.56 187.84,-7101.64 188.399,-7025.03 188.958,-6953.34 189.517,-6779.11 190.077,-6689.66 190.636,-6436.48 191.195,-6280.01 191.754,-6039.54 192.314,-5738.48 192.873,-5585.67 193.432,-5308.12 193.991,-5173.16 194.551,-5034.34 195.11,-4902.19 195.669,-4834.46 196.228,-4752.61 196.788,-4569.33 197.347,-4436.71 197.906,-4356.15 198.465,-4077.34 199.025,-4002.96 199.584,-3883.62 200.143,-3758.62 200.702,-3592.9 201.262,-3351.72 201.821,-3244.51 202.38,-3142.65 202.939,-3073.36 203.499,-2899.05 204.058,-2836.16 204.617,-2805.73 205.176,-2703.67 205.736,-2602.29 206.295,-2399.76 206.854,-2276.89 207.413,-2157.7 207.973,-2109.71 208.532,-1995.93 209.091,-1915.72 209.65,-1830.18 210.21,-1782.45 210.769,-1734.44 211.328,-1690.65 211.887,-1612.06 212.447,-1531.68 213.006,-1430.02 213.565,-1327.59 214.124,-1263.54 214.684,-1222.68 215.243,-1181.79 215.802,-1141.92 216.361,-1102.61 216.921,-1036.76 217.48,-944.871 218.039,-833.585 218.598,-749.663 219.158,-671.891 219.717,-617.333 220.276,-567.446 220.835,-490.83 221.395,-487.989 221.954,-414.378 222.513,-363.611 223.072,-274.106 223.632,-206.205 224.191,-165.766 224.75,-103.597 225.309,-28.5147 225.869,3.92574 226.428,37.7523 226.987,94.3716 227.546,130.526 228.106,186.243 228.665,228.245 229.224,261.41 229.783,306.898 230.343,332.369 230.902,340.747 231.461,347.015 232.02,398.292 232.58,440.268 233.139,404.816 233.698,434.526 234.257,441.269 234.817,451.985 235.376,476.658 235.935,484.732 236.494,509.711 237.054,571.64 237.613,574.087 238.172,613.703 238.731,618.42 239.291,641.414 239.85,682.319 240.409,667.073 240.968,669.334 241.528,711.9 242.087,744.142 242.646,744.681 243.205,779.496 243.765,778.728 244.324,796.265 244.883,795.011 245.442,811.249 246.002,827.684 246.561,857.487 247.12,800.021 247.679,765.208 248.239,732.519 248.798,754.025 249.357,763.57 249.916,765.925 250.476,805.344 251.035,877.955 251.594,912.456 252.153,959.073 252.713,969.739 253.272,964.17 253.831,977.256 254.39,1003.64 254.95,1011.46 255.509,990.777 256.068,984.232 256.627,996.567 257.187,1006.2 257.746,1000.87 258.305,976.069 258.864,989.493 259.424,999.518 259.983,1030.02 260.542,1006.49 261.101,1013.58 261.661,1025.51 262.22,1048.67 262.779,1058.32 263.338,1033.09 263.898,1010.76 264.457,1056.72 265.016,1030.92 265.575,1043.8 266.135,1056.64 266.694,1063.41 267.253,1087.86 267.812,1074.05 268.372,1084.17 268.931,1059.12 269.49,1054.73 270.049,1062.41 270.609,1088.76 271.168,1062.41 271.727,1058.98 272.286,1070 272.846,1076.02 273.405,1083.29 273.964,1061.14 274.523,1070.57 275.083,1059.59 275.642,1051.39 276.201,1029.74 276.76,993.589 277.32,992.861 277.879,1018.65 278.438,998.192 278.997,1009.45 279.557,1038.36 280.116,1047.23 280.675,1041.17 281.234,1036.24 281.794,1027.92 282.353,1005.13 282.912,1018.2 283.471,1063.48 284.031,1073.69 284.59,1017.91 285.149,1043.18 285.708,1067.01 286.268,1076.16 286.827,1051.12 287.386,1074.25 287.945,1064.24 288.505,1120.73 289.064,1111.86 289.623,1103.83 290.182,1096.65 290.742,1064.3 291.301,1043.3 291.86,1035.33 292.419,1013.39 292.979,990.738 293.538,986.683 294.097,986.003 294.656,981.322 295.216,963.116 295.775,960.086 296.334,954.683 296.893,935.746 297.453,915.758 298.012,916.002 298.571,931.678 299.13,926.411 299.69,958.186 300.249,938.847 300.808,970.492 301.368,964.749 301.927,992.104 302.486,1004.11 303.045,1046.43 303.605,1053.79 304.164,1043.13 304.723,1035.88 305.282,1043.32 305.842,1050.01 306.401,1041.32 306.96,1049.62 307.519,1057.51 308.079,1030.8 308.638,1006.71 309.197,995.075 309.756,1008.62 310.316,1017.97 310.875,1010.39 311.434,1024.58 311.993,1017.52 312.553,996.462 313.112,1003.43 313.671,979.773 314.23,977.192 314.79,1000.12 315.349,992.192 315.908,969.908 316.467,963.805 317.027,973.964 317.586,966.546 318.145,943.948 318.704,939.26 319.264,932.809 319.823,942.995 320.382,972.285 320.941,981.286 321.501,1005.12 322.06,977.907 322.619,937.26 323.178,929.58 323.738,956.648 324.297,964.977 324.856,942.362 325.415,937.142 325.975,933.995 326.534,929.704 327.093,958.588 327.652,952.842 328.212,948.569 328.771,962.551 329.33,957.301 329.889,983.838 330.449,1042.77 331.008,1032.16 331.567,1020.82 332.126,1027.96 332.686,1018.58 333.245,1011.76 333.804,1005.15 334.363,994.222 334.923,984.61 335.482,1009.03 336.041,1033.75 336.6,1071.2 337.16,1071.19 337.719,1058.93 338.278,1045.11 338.837,1015.84 339.397,986.063 339.956,1024.87 340.515,984.658 341.074,956.806 341.634,983.498 342.193,994.19 342.752,968.019 343.311,977.644 343.871,949.597 344.43,942.252 344.989,904.335 345.548,866.515 346.108,831.464 346.667,814.179 347.226,811.921 347.785,811.943 348.345,776.001 348.904,775.631 349.463,779.133 350.022,815.355 350.582,802.049 351.141,803.042 351.7,837.573 352.259,852.837 352.819,851.982 353.378,865.013 353.937,894.784 354.496,892.522 355.056,889.608 355.615,868.162 356.174,850.505 356.733,836.545 357.293,872.286 357.852,886.206 358.411,911.717 358.97,892.408 359.53,869.58 360.089,848.892 360.648,865.277 361.207,814.544 361.767,831.451 362.326,879.962 362.885,877.448 363.444,872.325 364.004,882.481 364.563,860.915 365.122,842.896 365.681,805.441 366.241,837.145 366.8,804.056 367.359,789.752 367.918,806.114 368.478,820.651 369.037,817.53 369.596,815.944 370.155,796.161 370.715,814.901 371.274,816.429 371.833,800.271 372.392,801.492 372.952,818.441 373.511,847.426 374.07,872.816 374.629,866.282 375.189,844.78 375.748,856.357 376.307,870.469 376.866,900.253 377.426,911.052 377.985,908.058 378.544,886.226 379.103,894.93 379.663,855.655 380.222,834.976 380.781,848.731 381.34,829.007 381.9,811.302 382.459,811.41 383.018,810.343 383.577,813.606 384.137,764.841 384.696,781.578 385.255,767.803 385.814,788.902 386.374,789.917 386.933,806.499 387.492,821.281 388.051,801.285 388.611,786.805 389.17,804.622 389.729,738.192 390.288,723.152 390.848,707.795 391.407,711.321 391.966,732.816 392.525,769.819 393.085,739.212 393.644,741.381 394.203,726.569 394.762,730.563 395.322,735.677 395.881,738.014 396.44,740.44 396.999,709.606 397.559,714.238 398.118,748.368 398.677,797.305 399.236,832.65 399.796,850.122 400.355,864.011 400.914,825.932 401.473,826.846 402.033,825.133 402.592,804.973 403.151,805.915 403.71,802.234 404.27,799.519 404.829,797.208 405.388,795.382 405.947,792.465 406.507,791.398 407.066,790.182 407.625,803.869 408.184,783.55 408.744,781.508 409.303,781.768 409.862,780.265 410.421,763.71 410.981,780.991 411.54,749.969 412.099,768.195 412.658,770.773 413.218,755.64 413.777,754.148 414.336,737.323 414.895,739.82 415.455,775.255 416.014,825.934 416.573,888.805 417.132,864.434 417.692,845.715 418.251,828.479 418.81,810.342 419.369,823.896 419.929,835.182 420.488,830.475 421.047,824.621 421.606,851.579 422.166,829.738 422.725,826.792 423.284,827.692 423.843,855.18 424.403,868.057 424.962,846.343 425.521,844.442 426.08,840.244 426.64,819.206 427.199,813.955 427.758,825.978 428.318,805.065 428.877,820.665 429.436,834.439 429.995,829.583 430.555,825.291 431.114,840.47 431.673,803.848 432.232,864.666 432.792,857.899 433.351,853.124 433.91,847.05 434.469,858.058 435.029,852.425 435.588,847.705 436.147,846.913 436.706,842.301 437.266,820.969 437.825,846.441 438.384,856.01 438.943,868.302 439.503,860.524 440.062,836.239 440.621,861.811 441.18,857.289 441.74,867.546 442.299,877.115 442.858,872.87 443.417,886.15 443.977,862.013 444.536,855.528 445.095,848.831 445.654,826.331 446.214,788.974 446.773,757.871 447.332,758.462 447.891,761.027 448.451,789.623 449.01,769.841 449.569,752.79 450.128,764.572 450.688,764.951 451.247,768.256 451.806,785.526 452.365,830.602 452.925,824.251 453.484,818.699 454.043,797.499 454.602,826.548 455.162,806.355 455.721,772.418 456.28,754.746 456.839,739.395 457.399,737.057 457.958,752.937 458.517,753.503 459.076,733.765 459.636,750.43 460.195,732.301 460.754,734.143 461.313,738.367 461.873,741.105 462.432,710.815 462.991,696.311 463.55,682.487 464.11,668.992 464.669,686.718 465.228,755.879 465.787,750.758 466.347,765.958 466.906,781.374 467.465,779.154 468.024,791.764 468.584,773.275 469.143,807.505 469.702,805.607 470.261,804.03 470.821,782.357 471.38,780.91 471.939,761.628 472.498,759.032 473.058,756.201 473.617,724.891 474.176,740.936 474.735,726.161 475.295,714.186 475.854,678.908 476.413,684.551 476.972,705.067 477.532,692.476 478.091,693.318 478.65,695.035 479.209,744.519 479.769,727.697 480.328,728.757 480.887,729.233 481.446,714.694 482.006,732.229 482.565,716.492 483.124,716.442 483.683,715.7 484.243,702.99 484.802,717.862 485.361,721.152 485.92,722.327 486.48,708.564 487.039,692.982 487.598,681.307 488.157,668.678 488.717,690.343 489.276,679.587 489.835,666.091 490.394,654.565 490.954,646.465 491.513,666.396 492.072,686.263 492.631,704.413 493.191,675.856 493.75,677.599 494.309,680.806 494.868,698.967 495.428,733.695 495.987,735.272 496.546,734.499 497.105,737.281 497.665,737.888 498.224,724.173 498.783,724.753 499.342,754.735 499.902,752.084 500.461,746.708 501.02,793.965 501.579,775.435 502.139,774.03 502.698,803.533 503.257,817.034 503.816,794.815 504.376,807.33 504.935,783.482 505.494,761.68 506.053,741.425 506.613,757.821 507.172,788.358 507.731,797.069 508.29,778.727 508.85,739.17 509.409,740.834 509.968,740.862 510.527,741.144 511.087,790.213 511.646,785.36 512.205,780.825 512.764,793.284 513.324,772.804 513.883,771.478 514.442,765.564 515.001,750.956 515.561,750.101 516.12,762.404 516.679,758.9 517.238,751.96 517.798,747.117 518.357,713.04 518.916,745.81 519.475,780.05 520.035,758.718 520.594,743.446 521.153,739.692 521.712,720.347 522.272,749.635 522.831,733.4 523.39,731.701 523.949,716.284 524.509,716.667 525.068,699.661 525.627,719.061 526.186,751.063 526.746,733.996 527.305,733.093 527.864,701.234 528.423,684.663 528.983,703.064 529.542,706.93 530.101,694.124 530.66,678.511 531.22,713.748 531.779,760.517 532.338,772.881 532.897,770.926 533.457,780.808 534.016,790.962 534.575,783.864 535.134,794.045 535.694,758.163 536.253,726.298 536.812,723.305 537.371,705.865 537.931,703.87 538.49,739.938 539.049,734.547 539.608,718.191 540.168,717.117 540.727,698.204 541.286,685.042 541.845,718.459 542.405,718.676 542.964,703.232 543.523,702.224 544.082,720.191 544.642,718.779 545.201,699.939 545.76,718.801 546.319,720.329 546.879,736.936 547.438,720.636 547.997,704.42 548.556,689.268 549.116,711.825 549.675,695.082 550.234,678.071 550.793,698.703 551.353,699.169 551.912,701.99 552.471,715.721 553.031,702.506 553.59,673.081 554.149,707.692 554.708,679.802 555.268,650.313 555.827,655.337 556.386,691.781 556.945,661.014 557.505,679.66 558.064,670.767 558.623,688.83 559.182,705.879 559.742,688.918 560.301,722.926 560.86,738.267 561.419,738.532 561.979,754.952 562.538,754.414 563.097,749.356 563.656,728.541 564.216,747.381 564.775,747.728 565.334,746.387 565.893,789.876 566.453,789.265 567.012,784.196 567.571,784.746 568.13,779.017 568.69,760.643 569.249,758.173 569.808,740.494 570.367,740.572 570.927,740.283 571.486,759.878 572.045,775.11 572.604,721.398 573.164,737.057 573.723,767.71 574.282,795.356 574.841,793.851 575.401,789.44 575.96,787.134 576.519,780.745 577.078,778.617 577.638,755.051 578.197,752.082 578.756,715.779 579.315,764.918 579.875,759.781 580.434,724.923 580.993,721.997 581.552,769.005 582.112,785.927 582.671,781.225 583.23,790.817 583.789,785.888 584.349,797.28 584.908,791.953 585.467,804.746 586.026,829.403 586.586,804.865 587.145,812.793 587.704,840.16 588.263,802.211 588.823,781.513 589.382,779.632 589.941,690.413 590.5,691.202 591.06,709.704 591.619,724.267 592.178,737.271 592.737,703.751 593.297,687.038 593.856,688.638 594.415,709.61 594.974,703.237 595.534,668.376 596.093,669.038 596.652,670.497 597.211,672.93 597.771,687.324 598.33,672.252 598.889,690.492 599.448,676.031 600.008,707.549 600.567,692.168 601.126,679.639 601.685,699.862 602.245,681.715 602.804,666.162 603.363,654.08 603.922,676.794 604.482,690.871 605.041,687.599 605.6,708.469 606.159,676.774 606.719,662.184 607.278,679.229 607.837,695.984 608.396,681.014 608.956,714.286 609.515,701.098 610.074,701.771 610.633,704.584 611.193,689.752 611.752,706.147 612.311,705.785 612.87,723.65 613.43,724.389 613.989,705.687 614.548,672.862 615.107,721.766 615.667,754.808 616.226,767.909 616.785,797.021 617.344,791.101 617.904,789.231 618.463,803.353 619.022,784.247 619.581,826.538 620.141,871.191 620.7,800.956 621.259,763.171 621.818,712.821 622.378,745.992 622.937,731.432 623.496,681.457 624.055,697.026 624.615,667.711 625.174,688.348 625.733,706.906 626.292,671.56 626.852,703.818 627.411,703.507 627.97,722.772 628.529,724.992 629.089,693.584 629.648,690.531 630.207,689.08 630.766,703.546 631.326,720.759 631.885,751.943 632.444,768.086 633.003,715.808 633.563,727.839 634.122,696.541 634.681,632.66 635.24,603.296 635.8,641.861 636.359,647.352 636.918,664.327 637.477,667.474 638.037,656.048 638.596,628.046 639.155,643.941 639.714,612.317 640.274,648.432 640.833,669.115 641.392,672.332 641.951,655.996 642.511,640.778 643.07,614.893 643.629,636.416 644.188,637.802 644.748,637.729 645.307,677.878 645.866,711.097 646.425,694.941 646.985,710.288 647.544,679.75 648.103,679.066 648.662,697.669 649.222,701.484 649.781,672.075 650.34,658.252 650.899,676.283 651.459,664.447 652.018,668.914 652.577,687.533 653.136,672.844 653.696,689.13 654.255,691.313 654.814,644.175 655.373,645.667 655.933,667.89 656.492,654.798 657.051,689.181 657.61,638.687 658.17,660.216 658.729,681.917 659.288,682.999 659.847,701.811 660.407,715.921 660.966,727.74 661.525,739.806 662.084,755.082 662.644,766.882 663.203,780.55 663.762,777.541 664.321,786.922 664.881,782.143 665.44,761.182 665.999,756.869 666.558,752.265 667.118,700.011 667.677,699.793 668.236,731.79 668.795,715.63 669.355,713.646 669.914,713.32 670.473,730.268 671.032,728.068 671.592,724.494 672.151,721.689 672.71,721.898 673.269,722.717 673.829,737.585 674.388,747.998 674.947,778.811 675.506,771.302 676.066,701.262 676.625,701.271 677.184,699.489 677.743,646.91 678.303,647.738 678.862,647.039 679.421,664.371 679.981,646.535 680.54,651.955 681.099,637.447 681.658,643.632 682.218,665.082 682.777,681.84 683.336,645.571 683.895,647.914 684.455,650.045 685.014,655.211 685.573,671.491 686.132,672.466 686.692,674.928 687.251,674.222 687.81,679.312 688.369,677.084 688.929,657.97 689.488,658.686 690.047,661.605 690.606,727.791 691.166,758.242 691.725,770.132 692.284,768.145 692.843,747.506 693.403,730.518 693.962,695.731 694.521,711.01 695.08,728.126 695.64,788.87 696.199,783.63 696.758,795.804 697.317,821.097 697.877,831.483 698.436,809.798 698.995,817.912 699.554,778.342 700.114,739.768 700.673,769.87 701.232,766.533 701.791,733.973 702.351,763.917 702.91,760.761 703.469,771.598 704.028,749.629 704.588,746.021 705.147,791.846 705.706,770.963 706.265,783.339 706.825,731.781 707.384,728.028 707.943,691.896 708.502,657.955 709.062,693.992 709.621,693.601 710.18,662.437 710.739,683.977 711.299,668.728 711.858,654.604 712.417,639.833 712.976,641.552 713.536,640.88 714.095,627.048 714.654,630.866 715.213,649.196 715.773,651.683 716.332,669.926 716.891,654.789 717.45,673.033 718.01,706.467 718.569,722.115 719.128,707.273 719.687,673.897 720.247,686.186 720.806,734.381 721.365,733.457 721.924,710.898 722.484,772.192 723.043,784.525 723.602,795.124 724.161,790.765 724.721,752.614 725.28,730.654 725.839,729.01 726.398,726.741 726.958,737.897 727.517,735.718 728.076,713.882 728.635,696.954 729.195,697.88 729.754,730.017 730.313,727.964 730.872,693.099 731.432,711.071 731.991,693.271 732.55,660.005 733.109,662.949 733.669,661.777 734.228,713.077 734.787,693.148 735.346,677.304 735.906,694.196 736.465,710.484 737.024,725.454 737.583,710.82 738.143,710.185 738.702,709.768 739.261,725.826 739.82,708.046 740.38,725.564 740.939,707.175 741.498,692.757 742.057,709.632 742.617,741.711 743.176,689.15 743.735,695.973 744.294,679.492 744.854,680.458 745.413,682.954 745.972,667.586 746.531,666.742 747.091,685.851 747.65,668.986 748.209,687.465 748.768,622.788 749.328,642.762 749.887,647.923 750.446,684.068 751.005,681.742 751.565,682.179 752.124,664.603 752.683,651.282 753.242,653.69 753.802,672.858 754.361,656.66 754.92,643.848 755.479,648.011 756.039,618.177 756.598,602.405 757.157,605.038 757.716,626.515 758.276,646.074 758.835,649.338 759.394,670.082 759.953,686.412 760.513,685.336 761.072,683.302 761.631,717.038 762.19,731.721 762.75,760.573 763.309,742.698 763.868,723.483 764.427,704.931 764.987,722.392 765.546,717.979 766.105,700.799 766.664,700.925 767.224,714.394 767.783,746.133 768.342,709.718 768.901,744.055 769.461,759.723 770.02,801.687 770.579,763.086 771.138,790.201 771.698,780.444 772.257,742.912 772.816,726.442 773.375,709.151 773.935,658.113 774.494,645.188 775.053,611.391 775.612,631.095 776.172,601.81 776.731,591.031 777.29,627.76 777.849,631.132 778.409,603.647 778.968,590.145 779.527,560.611 780.086,564.834 780.646,554.054 781.205,579.784 781.764,584.462 782.323,608.2 782.883,628.947 783.442,646.258 784.001,650.817 784.56,606.729 785.12,579.194 785.679,601.809 786.238,623.817 786.797,611.171 787.357,601.884 787.916,654.221 788.475,689.579 789.034,705.612 789.594,706.207 790.153,704.361 790.712,733.239 791.271,730.487 791.831,714.17 792.39,774.396 792.949,771.508 793.508,723.648 794.068,722.173 794.627,711.132 795.186,697.774 795.745,712.843 796.305,709.183 796.864,720.86 797.423,688.103 797.982,684.541 798.542,683.512 799.101,669.568 799.66,699.622 800.219,730.631 800.779,729.051 801.338,742.706 801.897,756.669 802.456,786.271 803.016,779.852 803.575,774.701 804.134,773.711 804.693,802.264 805.253,811.033 805.812,806.443 806.371,832.455 806.931,775.995 807.49,784.799 808.049,747.124 808.608,793.087 809.168,804.539 809.727,779.276 810.286,774.526 810.845,801.246 811.405,779.765 811.964,795.813 812.523,776.702 813.082,755.628 813.642,736.691 814.201,749.22 814.76,760.307 815.319,722.696 815.879,722.761 816.438,656.772 816.997,643.077 817.556,691.532 818.116,675.412 818.675,641.342 819.234,628.226 819.793,629.49 820.353,618.467 820.912,669.413 821.471,635.392 822.03,671.256 822.59,672.96 823.149,657.081 823.708,657.718 824.267,656.803 824.827,644.651 825.386,630.973 825.945,649.497 826.504,649.266 827.064,654.106 827.623,654.397 828.182,690.745 828.741,688.201 829.301,691.196 829.86,689.926 830.419,710.32 830.978,689.912 831.538,706.362 832.097,692.325 832.656,660.319 833.215,646.259 833.775,669.115 834.334,674.034 834.893,675.256 835.452,706.357 836.012,708.522 836.571,710.468 837.13,709.173 837.689,709.287 838.249,675.04 838.808,630.041 839.367,630.362 839.926,619.441 840.486,605.478 841.045,612.917 841.604,618.44 842.163,603.806 842.723,607.785 843.282,594.61 843.841,599.183 844.4,588.911 844.96,592.603 845.519,614.03 846.078,618.533 846.637,624.408 847.197,646.923 847.756,666.907 848.315,668.984 848.874,673.616 849.434,658.292 849.993,672.255 850.552,703.052 851.111,683.367 851.671,683.835 852.23,702.498 852.789,750.57 853.348,761.337 853.908,807.205 854.467,786.971 855.026,749.628 855.585,714.733 856.145,652.828 856.704,639.652 857.263,659.466 857.822,663.472 858.382,680.16 858.941,665.426 859.5,666.803 860.059,686.668 860.619,670.861 861.178,671.18 861.737,672.28 862.296,675.524 862.856,659.013 863.415,662.496 863.974,646.04 864.533,617.237 865.093,636.651 865.652,623.947 866.211,629.238 866.77,603.022 867.33,606.455 867.889,610.519 868.448,634.023 869.007,621.61 869.567,638.904 870.126,641.357 870.685,640.561 871.244,659.84 871.804,710.737 872.363,724.203 872.922,709.007 873.481,703.586 874.041,705.22 874.6,736.935 875.159,748.489 875.718,778.666 876.278,760.221 876.837,788.831 877.396,734.202 877.955,701.251 878.515,670.416 879.074,671.274 879.633,705.355 880.192,686.512 880.752,671.405 881.311,688.016 881.87,721.232 882.429,736.564 882.989,747.308 883.548,776.492 884.107,770.836 884.666,751.645 885.226,748.615 885.785,763 886.344,724.288 886.903,736.835 887.463,766.001 888.022,746.937 888.581,742.498 889.14,755.145 889.7,767.169 890.259,742.744 890.818,757.92 891.377,722.773 891.937,715.732 892.496,732.317 893.055,663.57 893.614,684.097 894.174,717.733 894.733,716.872 895.292,716.272 895.851,715.629 896.411,749.554 896.97,730.682 897.529,726.315 898.088,723.553 898.648,719.719 899.207,732.857 899.766,759.943 900.325,758.828 900.885,753.743 901.444,748.598 902.003,746.685 902.562,744.19 903.122,720.932 903.681,690.686 904.24,722.535 904.799,688.719 905.359,688.06 905.918,690.848 906.477,677.518 907.036,661.085 907.596,644.699 908.155,663.454 908.714,682.305 909.273,667.699 909.833,685.504 910.392,655.456 910.951,737.383 911.51,753.152 912.07,762.358 912.629,771.768 913.188,767.25 913.747,758.462 914.307,724.852 914.866,771.639 915.425,750.156 915.984,758.687 916.544,757.575 917.103,784.718 917.662,796.498 918.221,809.918 918.781,801.844 919.34,811.03 919.899,789.808 920.458,750.997 921.018,779.979 921.577,790.363 922.136,782.677 922.695,776.497 923.255,753.843 923.814,735.076 924.373,744.469 924.932,738.908 925.492,718.537 926.051,706.819 926.61,690.182 927.169,673.946 927.729,673.892 928.288,657.526 928.847,656.989 929.406,674.81 929.966,675.785 930.525,689.141 931.084,685.061 931.644,701.358 932.203,681.295 932.762,666.843 933.321,681.887 933.881,703.045 934.44,702.829 934.999,668.56 935.558,650.277 936.118,637.31 936.677,612.141 937.236,616.66 937.795,591.797 938.355,630.849 938.914,650.567 939.473,668.434 940.032,666.136 940.592,647.37 941.151,649.57 941.71,633.527 942.269,653.093 942.829,669.04 943.388,686.288 943.947,717.417 944.506,731.686 945.066,762.296 945.625,807.611 946.184,786.112 946.743,732.499 947.303,733.305 947.862,748.11 948.421,748.461 948.98,717.222 949.54,733.798 950.099,797.137 950.658,746.534 951.217,729.728 951.777,726.571 952.336,725.523 952.895,754.652 953.454,769.745 954.014,763.595 954.573,708.535 955.132,661.779 955.691,663.947 956.251,648.703 956.81,682.374 957.369,683.836 957.928,648.914 958.488,667.542 959.047,651.961 959.606,621.329 960.165,623.759 960.725,595.262 961.284,618.416 961.843,621.034 962.402,607.467 962.962,612.689 963.521,568.858 964.08,560.517 964.639,565.6 965.199,572.845 965.758,578.178 966.317,551.912 966.876,564.315 967.436,553.345 967.995,542.124 968.554,546.769 969.113,541.734 969.673,534.821 970.232,561.368 970.791,600.044 971.35,635.496 971.91,668.286 972.469,686.693 973.028,701.061 973.587,701.082 974.147,682.469 974.706,683.66 975.265,668.971 975.824,651.828 976.384,638.13 976.943,655.937 977.502,655.815 978.061,659.876 978.621,676.578 979.18,679.48 979.739,698.337 980.298,713.949 980.858,680.634 981.417,661.572 981.976,679.544 982.535,712.979 983.095,711.652 983.654,692.676 984.213,707.069 984.772,689.278 985.332,673.728 985.891,693.132 986.45,678.591 987.009,676.643 987.569,659.269 988.128,627.226 988.687,661.975 989.246,663.846 989.806,664.769 990.365,649.731 990.924,630.098 991.483,617.271 992.043,637.762 992.602,624.5 993.161,657.083 993.72,641.896 994.28,643.96 994.839,643.514 995.398,616.229 995.957,621.546 996.517,641.779 997.076,649.469 997.635,650.028 998.194,670.95 998.754,671.114 999.313,657.587 999.872,656.13 1000.43,660.73 1000.99,659.26 1001.55,664.101 1002.11,635.784 1002.67,656.025 1003.23,656.602 1003.79,657.669 1004.35,663.463 1004.91,665.027 1005.46,667.697 1006.02,687.861 1006.58,691.601 1007.14,695.665 1007.7,724.2 1008.26,722.665 1008.82,734.847 1009.38,738.379 1009.94,764.208 1010.5,743.052 1011.06,775.127 1011.62,721.52 1012.18,715.799 1012.73,730.825 1013.29,694.743 1013.85,707.141 1014.41,705.851 1014.97,685.01 1015.53,700.413 1016.09,665.131 1016.65,667.823 1017.21,666.712 1017.77,654.616 1018.33,654.919 1018.89,656.971 1019.45,661.649 1020.01,647.315 1020.56,664.952 1021.12,651.195 1021.68,701.707 1022.24,717.876 1022.8,696.283 1023.36,694.625 1023.92,676.53 1024.48,659.202 1025.04,693.687 1025.6,676.181 1026.16,692.477 1026.72,709.68 1027.28,711.738 1027.83,713.03 1028.39,695.058 1028.95,662.326 1029.51,662.684 1030.07,649.158 1030.63,653.923 1031.19,638.866 1031.75,644.827 1032.31,660.187 1032.87,694.628 1033.43,660.77 1033.99,661.278 1034.55,664.199 1035.1,697.917 1035.66,680.251 1036.22,697.451 1036.78,693.94 1037.34,692.763 1037.9,678.933 1038.46,697.182 1039.02,680.754 1039.58,682.619 1040.14,649.797 1040.7,635.395 1041.26,625.046 1041.82,596.903 1042.38,621.039 1042.93,658.271 1043.49,659.326 1044.05,694.236 1044.61,710.683 1045.17,709.439 1045.73,737.177 1046.29,718.731 1046.85,714.044 1047.41,701.868 1047.97,727.596 1048.53,674.981 1049.09,659.97 1049.65,677.085 1050.2,723.129 1050.76,734.203 1051.32,762.12 1051.88,742.339 1052.44,737.203 1053,733.57 1053.56,762.927 1054.12,741.187 1054.68,738.892 1055.24,754.815 1055.8,748.417 1056.36,730.393 1056.92,746.323 1057.48,744.278 1058.03,757.648 1058.59,771.323 1059.15,781.782 1059.71,759.55 1060.27,752.206 1060.83,763.936 1061.39,745.007 1061.95,726.466 1062.51,737.664 1063.07,717.129 1063.63,712.313 1064.19,727.593 1064.75,709.407 1065.3,708.913 1065.86,660.641 1066.42,677.844 1066.98,709.104 1067.54,721.513 1068.1,734.465 1068.66,730.799 1069.22,710.726 1069.78,712.225 1070.34,729.906 1070.9,729.02 1071.46,713.06 1072.02,759.025 1072.57,757.658 1073.13,772.507 1073.69,764.998 1074.25,791.803 1074.81,802.245 1075.37,764.98 1075.93,730.435 1076.49,742.626 1077.05,739.434 1077.61,717.661 1078.17,747.56 1078.73,746.781 1079.29,745.357 1079.85,724.487 1080.4,706.797 1080.96,689.173 1081.52,626.14 1082.08,613.001 1082.64,665.253 1083.2,682.523 1083.76,699.863 1084.32,714.568 1084.88,693.748 1085.44,691.705 1086,688.468 1086.56,654.754 1087.12,656.705 1087.67,658.051 1088.23,692.428 1088.79,657.454 1089.35,644.297 1089.91,660.205 1090.47,663.665 1091.03,697.061 1091.59,682.602 1092.15,666.769 1092.71,669.164 1093.27,687.38 1093.83,692.769 1094.39,661.049 1094.94,677.163 1095.5,695.988 1096.06,728.599 1096.62,722.851 1097.18,707.5 1097.74,687.966 1098.3,738.184 1098.86,700.489 1099.42,684.475 1099.98,681.927 1100.54,649.348 1101.1,648.723 1101.66,652.382 1102.22,672.713 1102.77,670.483 1103.33,590.085 1103.89,613.903 1104.45,633.986 1105.01,618.716 1105.57,621.984 1106.13,656.208 1106.69,672.948 1107.25,674.964 1107.81,627.586 1108.37,632.741 1108.93,636.684 1109.49,652.635 1110.04,688.683 1110.6,704.325 1111.16,690.177 1111.72,685.99 1112.28,668.542 1112.84,670.742 1113.4,667.593 1113.96,671.181 1114.52,658.249 1115.08,657.802 1115.64,645.739 1116.2,633.535 1116.76,619.481 1117.31,669.679 1117.87,670.74 1118.43,655.143 1118.99,673.49 1119.55,658.989 1120.11,645.087 1120.67,635.125 1121.23,603.969 1121.79,605.572 1122.35,594.58 1122.91,584.223 1123.47,608.435 1124.03,611.288 1124.59,593.48 1125.14,615.385 1125.7,606.355 1126.26,654.669 1126.82,640.421 1127.38,679.574 1127.94,679.457 1128.5,680.027 1129.06,667.288 1129.62,650.511 1130.18,621.638 1130.74,658.444 1131.3,659.592 1131.86,662.467 1132.41,664.917 1132.97,612 1133.53,601.612 1134.09,618.441 1134.65,637.376 1135.21,623.432 1135.77,561.696 1136.33,569.563 1136.89,592.167 1137.45,567.625 1138.01,574.939 1138.57,580.075 1139.13,614.739 1139.68,632.75 1140.24,620.908 1140.8,625.301 1141.36,577.902 1141.92,582.678 1142.48,557.032 1143.04,563.289 1143.6,573.637 1144.16,562.678 1144.72,587.074 1145.28,575.589 1145.84,531.522 1146.4,524.217 1146.96,503.633 1147.51,513.095 1148.07,541.367 1148.63,566.268 1149.19,589.139 1149.75,577.764 1150.31,617.282 1150.87,611.458 1151.43,582.547 1151.99,601.884 1152.55,602.399 1153.11,638.912 1153.67,656.596 1154.23,658.444 1154.78,661.699 1155.34,664.658 1155.9,668.648 1156.46,668.596 1157.02,699.304 1157.58,696.214 1158.14,710.236 1158.7,739.69 1159.26,722.23 1159.82,721.044 1160.38,739.784 1160.94,770.368 1161.5,796.793 1162.05,790.094 1162.61,782.011 1163.17,810.941 1163.73,803.73 1164.29,814.001 1164.85,809.529 1165.41,788.698 1165.97,798.208 1166.53,764.599 1167.09,776.606 1167.65,769.42 1168.21,794.108 1168.77,742.503 1169.33,737.957 1169.88,734.773 1170.44,731.084 1171,741.969 1171.56,708.855 1172.12,740.238 1172.68,738.893 1173.24,736.774 1173.8,731.077 1174.36,709.348 1174.92,689.499 1175.48,658.813 1176.04,646.774 1176.6,646.757 1177.15,681.836 1177.71,711.134 1178.27,708.979 1178.83,693.481 1179.39,691.155 1179.95,689.268 1180.51,691.021 1181.07,676.419 1181.63,728.227 1182.19,723.6 1182.75,732.525 1183.31,711.58 1183.87,722.391 1184.43,705.551 1184.98,723.084 1185.54,702.851 1186.1,702.786 1186.66,717.501 1187.22,713.559 1187.78,712.367 1188.34,711.06 1188.9,709.574 1189.46,689.057 1190.02,689.836 1190.58,702.398 1191.14,701.407 1191.7,698.839 1192.25,682.839 1192.81,682.534 1193.37,699.051 1193.93,744.848 1194.49,707.76 1195.05,687.454 1195.61,705.527 1196.17,701.187 1196.73,668.142 1197.29,685.315 1197.85,685.239 1198.41,683.192 1198.97,683.15 1199.52,718.218 1200.08,715.193 1200.64,681.965 1201.2,696.548 1201.76,679.847 1202.32,652.876 1202.88,655.615 1203.44,643.096 1204,648.568 1204.56,664.612 1205.12,666.142 1205.68,669.213 1206.24,669.806 1206.8,684.583 1207.35,686.18 1207.91,686.224 1208.47,686.898 1209.03,700.717 1209.59,748.286 1210.15,728.788 1210.71,778.303 1211.27,819.764 1211.83,811.449 1212.39,803.532 1212.95,795.861 1213.51,792.975 1214.07,786.45 1214.62,783.397 1215.18,742.61 1215.74,741.448 1216.3,740.759 1216.86,704.765 1217.42,734.694 1217.98,730.198 1218.54,745.258 1219.1,773.858 1219.66,803.616 1220.22,795.066 1220.78,772.176 1221.34,749.496 1221.89,746.445 1222.45,776.412 1223.01,756.825 1223.57,736.885 1224.13,733.183 1224.69,681.449 1225.25,682.331 1225.81,697.22 1226.37,708.846 1226.93,689.58 1227.49,684.808 1228.05,714.726 1228.61,729.356 1229.17,696.354 1229.72,698.44 1230.28,682.461 1230.84,681.287 1231.4,697.832 1231.96,683.368 1232.52,684.913 1233.08,700.007 1233.64,729.567 1234.2,742.081 1234.76,739.267 1235.32,733.535 1235.88,698.249 1236.44,683.896 1236.99,686.408 1237.55,701.716 1238.11,634.558 1238.67,607.635 1239.23,580.395 1239.79,615.815 1240.35,585.013 1240.91,590.403 1241.47,591.877 1242.03,573.972 1242.59,564.96 1243.15,554.118 1243.71,561.388 1244.26,602.714 1244.82,623.509 1245.38,612.155 1245.94,602.428 1246.5,641.04 1247.06,629.757 1247.62,648.356 1248.18,631.439 1248.74,650.417 1249.3,599.56 1249.86,571.987 1250.42,598.787 1250.98,604.438 1251.54,644.766 1252.09,646.636 1252.65,679.61 1253.21,683.572 1253.77,701.068 1254.33,712.629 1254.89,709.554 1255.45,688.719 1256.01,683.408 1256.57,652.878 1257.13,635.454 1257.69,639.309 1258.25,622.779 1258.81,612.115 1259.36,619.84 1259.92,625.558 1260.48,614.99 1261.04,600.643 1261.6,621.084 1262.16,592.514 1262.72,628.741 1263.28,648.619 1263.84,648.808 1264.4,618.407 1264.96,621.577 1265.52,622.493 1266.08,590.762 1266.63,598.456 1267.19,621.147 1267.75,611.683 1268.31,648.344 1268.87,669.236 1269.43,681.634 1269.99,697.083 1270.55,732.209 1271.11,749.515 1271.67,780.65 1272.23,775.402 1272.79,788.086 1273.35,817.042 1273.91,822.43 1274.46,801.141 1275.02,793.231 1275.58,755.439 1276.14,736.883 1276.7,730.631 1277.26,743.374 1277.82,727.85 1278.38,708.089 1278.94,662.034 1279.5,644.04 1280.06,649.885 1280.62,638.127 1281.18,624.418 1281.73,642.003 1282.29,645.169 1282.85,643.781 1283.41,676.909 1283.97,694.215 1284.53,741.953 1285.09,723.259 1285.65,721.137 1286.21,720.419 1286.77,719.501 1287.33,703.948 1287.89,721.733 1288.45,741.548 1289,739.102 1289.56,702.239 1290.12,685.713 1290.68,685.992 1291.24,682.712 1291.8,683.178 1292.36,682.28 1292.92,680.263 1293.48,677.591 1294.04,679.472 1294.6,712.542 1295.16,723.165 1295.72,739.019 1296.28,739.207 1296.83,754.835 1297.39,749.76 1297.95,726.936 1298.51,710.223 1299.07,725.789 1299.63,673.071 1300.19,672.548 1300.75,670.271 1301.31,682.447 1301.87,697.808 1302.43,695.016 1302.99,678.927 1303.55,680.639 1304.1,664.543 1304.66,684.457 1305.22,683.866 1305.78,682.483 1306.34,715.788 1306.9,747.36 1307.46,742.716 1308.02,754.004 1308.58,747.908 1309.14,763.662 1309.7,759.183 1310.26,734.782 1310.82,761.745 1311.38,726.854 1311.93,708.409 1312.49,690.222 1313.05,674.867 1313.61,674.777 1314.17,658.857 1314.73,640.46 1315.29,628.663 1315.85,611.721 1316.41,609.992 1316.97,629.784 1317.53,651.93 1318.09,668.029 1318.65,714.43 1319.2,711.65 1319.76,710.587 1320.32,726.807 1320.88,709.54 1321.44,723.948 1322,738.498 1322.56,737.378 1323.12,748.228 1323.68,724.983 1324.24,754.542 1324.8,737.159 1325.36,715.842 1325.92,698.73 1326.47,678.086 1327.03,708.663 1327.59,721.512 1328.15,719.501 1328.71,733.752 1329.27,746.973 1329.83,759 1330.39,770.3 1330.95,749.419 1331.51,742.889 1332.07,741.049 1332.63,738.445 1333.19,784.115 1333.75,798.136 1334.3,809.328 1334.86,732.781 1335.42,731.818 1335.98,732.048 1336.54,746.331 1337.1,739.978 1337.66,751.467 1338.22,745.671 1338.78,725.739 1339.34,705.774 1339.9,704.674 1340.46,686.102 1341.02,687.436 1341.57,684.497 1342.13,718.149 1342.69,678.35 1343.25,662.484 1343.81,709.852 1344.37,722.978 1344.93,723.719 1345.49,767.962 1346.05,747.117 1346.61,758.071 1347.17,752.084 1347.73,747.998 1348.29,779.269 1348.84,774.935 1349.4,758.439 1349.96,734.967 1350.52,731.88 1351.08,728.657 1351.64,709.763 1352.2,646.686 1352.76,632.488 1353.32,668.144 1353.88,638.668 1354.44,593.639 1355,618.849 1355.56,623.079 1356.12,609.02 1356.67,628.812 1357.23,649.106 1357.79,666.43 1358.35,649.912 1358.91,652.251 1359.47,655.004 1360.03,640.987 1360.59,692.195 1361.15,673.943 1361.71,689.704 1362.27,673.06 1362.83,675.209 1363.39,691.394 1363.94,654.99 1364.5,605.714 1365.06,610.29 1365.62,650.565 1366.18,619.572 1366.74,610.154 1367.3,613.933 1367.86,617.428 1368.42,602.807 1368.98,592.425 1369.54,613.386 1370.1,681.604 1370.66,681.109 1371.21,653.721 1371.77,623.96 1372.33,643.021 1372.89,629.03 1373.45,599.382 1374.01,590.507 1374.57,594.253 1375.13,600.053 1375.69,589.774 1376.25,612.32 1376.81,616.82 1377.37,603.357 1377.93,578.689 1378.49,537.598 1379.04,529.724 1379.6,556.88 1380.16,542.901 1380.72,538.109 1381.28,533.588 1381.84,560.273 1382.4,583.349 1382.96,588.213 1383.52,577.469 1384.08,585.36 1384.64,573.984 1385.2,582.783 1385.76,619.558 1386.31,641.011 1386.87,624.319 1387.43,641.221 1387.99,646.241 1388.55,648.983 1389.11,651.818 1389.67,639.595 1390.23,625.886 1390.79,579.304 1391.35,585.565 1391.91,591.302 1392.47,612.611 1393.03,617.197 1393.58,603.178 1394.14,625.536 1394.7,662.825 1395.26,680.653 1395.82,643.829 1396.38,649.61 1396.94,650.776 1397.5,635.427 1398.06,607.62 1398.62,609.187 1399.18,579.826 1399.74,600.356 1400.3,605.957 1400.86,545.085 1401.41,553.631 1401.97,561.23 1402.53,566.825 1403.09,605.659 1403.65,609.952 1404.21,643.381 1404.77,680.422 1405.33,682.737 1405.89,696.793 1406.45,728.283 1407.01,728.21 1407.57,722.753 1408.13,735.756 1408.68,732.812 1409.24,713.712 1409.8,730.445 1410.36,712.112 1410.92,729.018 1411.48,711.965 1412.04,711.737 1412.6,697.521 1413.16,696.527 1413.72,744.383 1414.28,757.097 1414.84,754.709 1415.4,721.577 1415.95,716.922 1416.51,700.276 1417.07,696.564 1417.63,696.858 1418.19,677.401 1418.75,677.907 1419.31,694.682 1419.87,739.445 1420.43,737.159 1420.99,736.661 1421.55,701.56 1422.11,715.261 1422.67,699.893 1423.23,697.031 1423.78,696.522 1424.34,696.712 1424.9,711.591 1425.46,697.754 1426.02,727.873 1426.58,709.38 1427.14,691.19 1427.7,674.617 1428.26,671.54 1428.82,703.888 1429.38,717.732 1429.94,700.878 1430.5,699.431 1431.05,680.747 1431.61,714.771 1432.17,697.765 1432.73,716.322 1433.29,714.145 1433.85,712.558 1434.41,680.211 1434.97,681.238 1435.53,665.912 1436.09,647.971 1436.65,664.638 1437.21,664.129 1437.77,681.715 1438.33,680.42 1438.88,682.84 1439.44,681.382 1440,666.069 1440.56,684.552 1441.12,715.714 1441.68,744.98 1442.24,723.65 1442.8,686.552 1443.36,716.326 1443.92,745.943 1444.48,727.346 1445.04,725.294 1445.6,719.992 1446.15,719.57 1446.71,735.151 1447.27,731.809 1447.83,742.517 1448.39,758.29 1448.95,739.65 1449.51,752.145 1450.07,747.261 1450.63,713.289 1451.19,744.439 1451.75,759.67 1452.31,787.965 1452.87,813.696 1453.42,805.038 1453.98,864.364 1454.54,822.271 1455.1,814.396 1455.66,794.41 1456.22,788.5 1456.78,798.146 1457.34,764.099 1457.9,759.501 1458.46,737.653 1459.02,736.654 1459.58,765.229 1460.14,791.199 1460.7,788.402 1461.25,765.809 1461.81,775.479 1462.37,752.586 1462.93,766.167 1463.49,713.041 1464.05,693.176 1464.61,695.085 1465.17,680.182 1465.73,699.276 1466.29,714.977 1466.85,699.202 1467.41,701.388 1467.97,681.688 1468.52,650.612 1469.08,682.808 1469.64,701.023 1470.2,700.581 1470.76,651.4 1471.32,635.468 1471.88,653.164 1472.44,640.057 1473,640.449 1473.56,659.388 1474.12,676.86 1474.68,694.251 1475.24,713.636 1475.79,745.187 1476.35,759.978 1476.91,718.712 1477.47,684.015 1478.03,686.568 1478.59,717.553 1479.15,714.226 1479.71,709.866 1480.27,710.679 1480.83,711.632 1481.39,693.193 1481.95,727.517 1482.51,724.37 1483.07,739.992 1483.62,720.649 1484.18,702.935 1484.74,717.074 1485.3,728.959 1485.86,711.373 1486.42,709.463 1486.98,705.464 1487.54,675.199 1488.1,678.621 1488.66,664.382 1489.22,667.198 1489.78,700.063 1490.34,700.292 1490.89,684.14 1491.45,687.884 1492.01,702.944 1492.57,699.734 1493.13,700.951 1493.69,714.646 1494.25,709.764 1494.81,693.608 1495.37,680.852 1495.93,632.255 1496.49,615.126 1497.05,601.842 1497.61,608.829 1498.16,597.204 1498.72,633.186 1499.28,636.998 1499.84,655.902 1500.4,638.617 1500.96,654.172 1501.52,671.274 1502.08,656.181 1502.64,656.145 1503.2,672.148 1503.76,658.7 1504.32,646.039 1504.88,626.073 1505.44,615.307 1505.99,638.077 1506.55,656.524 1507.11,688.773 1507.67,673.877 1508.23,704.629 1508.79,671.243 1509.35,668.548 1509.91,653.774 1510.47,672.306 1511.03,687.818 1511.59,705.923 1512.15,719.16 1512.71,735.279 1513.26,700.871 1513.82,682.326 1514.38,695.719 1514.94,677.237 1515.5,676.804 1516.06,661.757 1516.62,678.34 1517.18,660.891 1517.74,645.643 1518.3,646.649 1518.86,649.077 1519.42,652.881 1519.98,668.443 1520.53,637.069 1521.09,639.105 1521.65,641.638 1522.21,639.923 1522.77,628.95 1523.33,614.308 1523.89,634.917 1524.45,635.218 1525.01,657.702 1525.57,674.235 1526.13,657.572 1526.69,657.434 1527.25,686.207 1527.81,703.438 1528.36,685.794 1528.92,703.318 1529.48,721.035 1530.04,686.826 1530.6,706.467 1531.16,718.275 1531.72,718.038 1532.28,702.878 1532.84,702.198 1533.4,733.848 1533.96,731.396 1534.52,762.617 1535.08,775.084 1535.63,771.54 1536.19,751.974 1536.75,750.183 1537.31,761.322 1537.87,755.781 1538.43,721.756 1538.99,735.699 1539.55,750.493 1540.11,762.83 1540.67,740.992 1541.23,737.577 1541.79,715.992 1542.35,716.457 1542.9,731.461 1543.46,715.339 1544.02,709.895 1544.58,725.411 1545.14,721.776 1545.7,684.227 1546.26,667.444 1546.82,697.205 1547.38,696.28 1547.94,709.438 1548.5,707.73 1549.06,657.641 1549.62,693.485 1550.18,664.139 1550.73,662.988 1551.29,664.49 1551.85,663.258 1552.41,678.716 1552.97,679.674 1553.53,659.604 1554.09,679.766 1554.65,697.303 1555.21,695.757 1555.77,695.053 1556.33,695.664 1556.89,693.164 1557.45,691.845 1558,689.214 1558.56,658.732 1559.12,661.083 1559.68,660.929 1560.24,643.761 1560.8,647.541 1561.36,635.178 1561.92,601.078 1562.48,638.401 1563.04,642.713 1563.6,612.733 1564.16,618.311 1564.72,589.786 1565.28,593.359 1565.83,568.963 1566.39,526.827 1566.95,567.87 1567.51,591.933 1568.07,630.54 1568.63,678.836 1569.19,649.672 1569.75,650.32 1570.31,654.134 1570.87,625.065 1571.43,660.014 1571.99,692.527 1572.55,659.32 1573.1,664.811 1573.66,667.523 1574.22,662.826 1574.78,651.581 1575.34,683.306 1575.9,683.436 1576.46,685.182 1577.02,670.38 1577.58,672.952 1578.14,673.149 1578.7,687.927 1579.26,674.732 1579.82,645.073 1580.37,647.655 1580.93,633.679 1581.49,637.576 1582.05,659.721 1582.61,660.457 1583.17,664.441 1583.73,684.421 1584.29,685.509 1584.85,686.865 1585.41,667.16 1585.97,637.016 1586.53,636.873 1587.09,638.959 1587.65,675.103 1588.2,695.862 1588.76,696.975 1589.32,713.336 1589.88,729.874 1590.44,711.997 1591,727.129 1591.56,739.552 1592.12,785.384 1592.68,829.755 1593.24,823.538 1593.8,817.875 1594.36,809.388 1594.92,832.736 1595.47,824.502 1596.03,802.327 1596.59,794.775 1597.15,775.46 1597.71,773.75 1598.27,786.338 1598.83,748.141 1599.39,748.688 1599.95,746.295 1600.51,744.327 1601.07,742.076 1601.63,737.672 1602.19,732.856 1602.74,716.27 1603.3,699.514 1603.86,681.124 1604.42,679.848 1604.98,727.912 1605.54,709.818 1606.1,706.907 1606.66,737.17 1607.22,719.781 1607.78,701.674 1608.34,681.565 1608.9,665.984 1609.46,665.128 1610.02,681.489 1610.57,677.843 1611.13,675.561 1611.69,657.17 1612.25,639.093 1612.81,575.3 1613.37,631.761 1613.93,648.383 1614.49,632.812 1615.05,648.332 1615.61,666.837 1616.17,666.391 1616.73,714.196 1617.29,709.48 1617.84,688.746 1618.4,692.88 1618.96,706.792 1619.52,691.542 1620.08,690.385 1620.64,672.167 1621.2,690.176 1621.76,674.537 1622.32,689.655 1622.88,686.396 1623.44,653.7 1624,650.425 1624.56,620.433 1625.11,623.118 1625.67,610.367 1626.23,659.756 1626.79,662.422 1627.35,680.948 1627.91,683.974 1628.47,700.99 1629.03,687.397 1629.59,719.571 1630.15,717.867 1630.71,712.615 1631.27,710.505 1631.83,707.969 1632.39,742.247 1632.94,772.115 1633.5,732.859 1634.06,758.631 1634.62,753.591 1635.18,720.089 1635.74,685.587 1636.3,700.576 1636.86,715.927 1637.42,699.256 1637.98,664.31 1638.54,664.409 1639.1,663.364 1639.66,714.232 1640.21,679.706 1640.77,696.569 1641.33,710.26 1641.89,709.049 1642.45,709.499 1643.01,694.602 1643.57,661.655 1644.13,662.282 1644.69,650.436 1645.25,683.342 1645.81,667.042 1646.37,638.22 1646.93,720.661 1647.48,702.723 1648.04,683.885 1648.6,682.321 1649.16,667.659 1649.72,652.047 1650.28,617.655 1650.84,621.699 1651.4,608.384 1651.96,626.696 1652.52,614.484 1653.08,598.996 1653.64,599.784 1654.2,600.924 1654.76,619.981 1655.31,596.766 1655.87,603.117 1656.43,605.03 1656.99,641.304 1657.55,656.49 1658.11,641.088 1658.67,644.459 1659.23,629.387 1659.79,666.403 1660.35,682.017 1660.91,696.801 1661.47,696.085 1662.03,691.567 1662.58,707.265 1663.14,703.47 1663.7,721.546 1664.26,741.491 1664.82,720.258 1665.38,768.293 1665.94,765.182 1666.5,746.941 1667.06,709.201 1667.62,706.602 1668.18,705.546 1668.74,723.343 1669.3,721.682 1669.85,753.339 1670.41,717.488 1670.97,727.584 1671.53,712.128 1672.09,697.606 1672.65,744.974 1673.21,742.004 1673.77,735.603 1674.33,750.349 1674.89,748.92 1675.45,731.294 1676.01,728.028 1676.57,709.066 1677.13,707.168 1677.68,707.413 1678.24,674.201 1678.8,640.032 1679.36,607.038 1679.92,611.237 1680.48,583.055 1681.04,619.639 1681.6,638.78 1682.16,704.268 1682.72,717.057 1683.28,696.999 1683.84,728.82 1684.4,676.416 1684.95,710.665 1685.51,742.346 1686.07,722.256 1686.63,739.038 1687.19,719.92 1687.75,723.379 1688.31,720.025 1688.87,751.004 1689.43,729.597 1689.99,694.728 1690.55,724.153 1691.11,738.385 1691.67,751.308 1692.23,745.827 1692.78,741.529 1693.34,754.956 1693.9,732.512 1694.46,701.909 1695.02,700.779 1695.58,697.772 1696.14,681.389 1696.7,679.908 1697.26,715.013 1697.82,732.095 1698.38,714.792 1698.94,728.121 1699.5,712.122 1700.05,708.549 1700.61,710.587 1701.17,710.946 1701.73,723.844 1702.29,708.618 1702.85,707.475 1703.41,739.476 1703.97,733.475 1704.53,701.518 1705.09,689.418 1705.65,709.386 1706.21,725.664 1706.77,771.239 1707.32,798.762 1707.88,771.567 1708.44,780.952 1709,775.827 1709.56,791.356 1710.12,752.041 1710.68,781.293 1711.24,790.38 1711.8,836.655 1712.36,832.379 1712.92,808.759 1713.48,799.61 1714.04,788.938 1714.6,814.901 1715.15,839.736 1715.71,846.712 1716.27,809.854 1716.83,786.123 1717.39,731.936 1717.95,692.916 1718.51,691.954 1719.07,677.721 1719.63,677.602 1720.19,695.107 1720.75,707.098 1721.31,667.865 1721.87,670.97 1722.42,655.029 1722.98,624.05 1723.54,625.022 1724.1,592.146 1724.66,600.097 1725.22,568.033 1725.78,557.123 1726.34,579.132 1726.9,552.897 1727.46,559.28 1728.02,599.097 1728.58,619.159 1729.14,636.675 1729.69,671.794 1730.25,673.146 1730.81,707.084 1731.37,653.31 1731.93,606.872 1732.49,631.625 1733.05,617.12 1733.61,589.046 1734.17,597.029 1734.73,600.115 1735.29,603.693 1735.85,605.241 1736.41,607.137 1736.97,624.476 1737.52,642.071 1738.08,631.385 1738.64,632.011 1739.2,603.394 1739.76,640.366 1740.32,676.653 1740.88,664.381 1741.44,633.171 1742,621.512 1742.56,590.605 1743.12,564.775 1743.68,572.111 1744.24,577.149 1744.79,599.572 1745.35,571.042 1745.91,592.97 1746.47,577.899 1747.03,614.299 1747.59,631.938 1748.15,649.791 1748.71,665.81 1749.27,651.164 1749.83,619.037 1750.39,589.39 1750.95,613.235 1751.51,616.461 1752.06,601.293 1752.62,571.868 1753.18,564.144 1753.74,601.176 1754.3,621.14 1754.86,621.248 1755.42,643.411 1755.98,614.45 1756.54,635.104 1757.1,605.921 1757.66,612.195 1758.22,634.949 1758.78,654.424 1759.34,644.28 1759.89,613.487 1760.45,598.037 1761.01,630.088 1761.57,662.264 1762.13,686.116 1762.69,702.242 1763.25,701.365 1763.81,688.504 1764.37,721.512 1764.93,704.222 1765.49,673.32 1766.05,678.074 1766.61,708.621 1767.16,708.889 1767.72,692.456 1768.28,689.857 1768.84,689.41 1769.4,655.921 1769.96,659.366 1770.52,675.949 1771.08,656.647 1771.64,645.71 1772.2,630.723 1772.76,618.558 1773.32,635.003 1773.88,621.038 1774.43,625.877 1774.99,610.986 1775.55,597.672 1776.11,586.505 1776.67,575.488 1777.23,599.092 1777.79,654.911 1778.35,655.723 1778.91,722.733 1779.47,687.51 1780.03,667.655 1780.59,679.977 1781.15,711.265 1781.71,698.289 1782.26,684.271 1782.82,714.757 1783.38,714.842 1783.94,745.809 1784.5,758.193 1785.06,752.361 1785.62,733.24 1786.18,732.233 1786.74,711.163 1787.3,693.488 1787.86,722.583 1788.42,739.089 1788.98,735.188 1789.53,731.003 1790.09,727.869 1790.65,692.333 1791.21,721.696 1791.77,718.744 1792.33,717.033 1792.89,731.073 1793.45,774.951 1794.01,786.597 1794.57,750.54 1795.13,727.491 1795.69,743.674 1796.25,725.51 1796.8,726.844 1797.36,710.998 1797.92,710.724 1798.48,724.809 1799.04,738.808 1799.6,688.136 1800.16,656.063 1800.72,671.498 1801.28,652.335 1801.84,655.792 1802.4,643.342 1802.96,664.449 1803.52,650.425 1804.08,636.604 1804.63,639.417 1805.19,625.367 1805.75,643.962 1806.31,630.312 1806.87,613.23 1807.43,633.806 1807.99,601.4 1808.55,606.558 1809.11,642.134 1809.67,642.6 1810.23,645.494 1810.79,648.037 1811.35,634.836 1811.9,623.203 1812.46,657.698 1813.02,675.808 1813.58,657.935 1814.14,663.522 1814.7,664.118 1815.26,681.479 1815.82,647.041 1816.38,649.264 1816.94,652.898 1817.5,672.548 1818.06,691.145 1818.62,708.037 1819.18,704.485 1819.73,705.688 1820.29,725.261 1820.85,724.658 1821.41,689.879 1821.97,719.009 1822.53,732.531 1823.09,761.908 1823.65,753.35 1824.21,734.207 1824.77,766.873 1825.33,748.553 1825.89,741.498 1826.45,771.419 1827,753.432 1827.56,768.172 1828.12,794.458 1828.68,770.344 1829.24,781.335 1829.8,729.137 1830.36,741.944 1830.92,802.132 1831.48,760.76 1832.04,757.266 1832.6,771.118 1833.16,764.955 1833.72,759.885 1834.27,788.693 1834.83,768.757 1835.39,780.349 1835.95,742.637 1836.51,771.44 1837.07,748.774 1837.63,742.566 1838.19,738.238 \"/>\n<path clip-path=\"url(#clip373)\" d=\"M720.247 691.72 L720.806 691.72 L721.365 691.72 L721.924 691.72 L722.484 691.72 L723.043 691.72 L723.602 691.72 L724.161 691.72 L724.721 691.72 L725.28 691.72 L725.839 691.72 L726.398 691.72 L726.958 691.72 L727.517 691.72 L728.076 691.72 L728.635 691.72 L729.195 691.72 L729.754 691.72 L730.313 691.72 L730.872 691.72 L731.432 691.72 L731.991 691.72 L732.55 691.72 L733.109 691.72 L733.669 691.72 L734.228 691.72 L734.787 691.72 L735.346 691.72 L735.906 691.72 L736.465 691.72 L737.024 691.72 L737.583 691.72 L738.143 691.72 L738.702 691.72 L739.261 691.72 L739.82 691.72 L740.38 691.72 L740.939 691.72 L741.498 691.72 L742.057 691.72 L742.617 691.72 L743.176 691.72 L743.735 691.72 L744.294 691.72 L744.854 691.72 L745.413 691.72 L745.972 691.72 L746.531 691.72 L747.091 691.72 L747.65 691.72 L748.209 691.72 L748.768 691.72 L749.328 691.72 L749.887 691.72 L750.446 691.72 L751.005 691.72 L751.565 691.72 L752.124 691.72 L752.683 691.72 L753.242 691.72 L753.802 691.72 L754.361 691.72 L754.92 691.72 L755.479 691.72 L756.039 691.72 L756.598 691.72 L757.157 691.72 L757.716 691.72 L758.276 691.72 L758.835 691.72 L759.394 691.72 L759.953 691.72 L760.513 691.72 L761.072 691.72 L761.631 691.72 L762.19 691.72 L762.75 691.72 L763.309 691.72 L763.868 691.72 L764.427 691.72 L764.987 691.72 L765.546 691.72 L766.105 691.72 L766.664 691.72 L767.224 691.72 L767.783 691.72 L768.342 691.72 L768.901 691.72 L769.461 691.72 L770.02 691.72 L770.579 691.72 L771.138 691.72 L771.698 691.72 L772.257 691.72 L772.816 691.72 L773.375 691.72 L773.935 691.72 L774.494 691.72 L775.053 691.72 L775.612 691.72 L776.172 691.72 L776.731 691.72 L777.29 691.72 L777.849 691.72 L778.409 691.72 L778.968 691.72 L779.527 691.72 L780.086 691.72 L780.646 691.72 L781.205 691.72 L781.764 691.72 L782.323 691.72 L782.883 691.72 L783.442 691.72 L784.001 691.72 L784.56 691.72 L785.12 691.72 L785.679 691.72 L786.238 691.72 L786.797 691.72 L787.357 691.72 L787.916 691.72 L788.475 691.72 L789.034 691.72 L789.594 691.72 L790.153 691.72 L790.712 691.72 L791.271 691.72 L791.831 691.72 L792.39 691.72 L792.949 691.72 L793.508 691.72 L794.068 691.72 L794.627 691.72 L795.186 691.72 L795.745 691.72 L796.305 691.72 L796.864 691.72 L797.423 691.72 L797.982 691.72 L798.542 691.72 L799.101 691.72 L799.66 691.72 L800.219 691.72 L800.779 691.72 L801.338 691.72 L801.897 691.72 L802.456 691.72 L803.016 691.72 L803.575 691.72 L804.134 691.72 L804.693 691.72 L805.253 691.72 L805.812 691.72 L806.371 691.72 L806.931 691.72 L807.49 691.72 L808.049 691.72 L808.608 691.72 L809.168 691.72 L809.727 691.72 L810.286 691.72 L810.845 691.72 L811.405 691.72 L811.964 691.72 L812.523 691.72 L813.082 691.72 L813.642 691.72 L814.201 691.72 L814.76 691.72 L815.319 691.72 L815.879 691.72 L816.438 691.72 L816.997 691.72 L817.556 691.72 L818.116 691.72 L818.675 691.72 L819.234 691.72 L819.793 691.72 L820.353 691.72 L820.912 691.72 L821.471 691.72 L822.03 691.72 L822.59 691.72 L823.149 691.72 L823.708 691.72 L824.267 691.72 L824.827 691.72 L825.386 691.72 L825.945 691.72 L826.504 691.72 L827.064 691.72 L827.623 691.72 L828.182 691.72 L828.741 691.72 L829.301 691.72 L829.86 691.72 L830.419 691.72 L830.978 691.72 L831.538 691.72 L832.097 691.72 L832.656 691.72 L833.215 691.72 L833.775 691.72 L834.334 691.72 L834.893 691.72 L835.452 691.72 L836.012 691.72 L836.571 691.72 L837.13 691.72 L837.689 691.72 L838.249 691.72 L838.808 691.72 L839.367 691.72 L839.926 691.72 L840.486 691.72 L841.045 691.72 L841.604 691.72 L842.163 691.72 L842.723 691.72 L843.282 691.72 L843.841 691.72 L844.4 691.72 L844.96 691.72 L845.519 691.72 L846.078 691.72 L846.637 691.72 L847.197 691.72 L847.756 691.72 L848.315 691.72 L848.874 691.72 L849.434 691.72 L849.993 691.72 L850.552 691.72 L851.111 691.72 L851.671 691.72 L852.23 691.72 L852.789 691.72 L853.348 691.72 L853.908 691.72 L854.467 691.72 L855.026 691.72 L855.585 691.72 L856.145 691.72 L856.704 691.72 L857.263 691.72 L857.822 691.72 L858.382 691.72 L858.941 691.72 L859.5 691.72 L860.059 691.72 L860.619 691.72 L861.178 691.72 L861.737 691.72 L862.296 691.72 L862.856 691.72 L863.415 691.72 L863.974 691.72 L864.533 691.72 L865.093 691.72 L865.652 691.72 L866.211 691.72 L866.77 691.72 L867.33 691.72 L867.889 691.72 L868.448 691.72 L869.007 691.72 L869.567 691.72 L870.126 691.72 L870.685 691.72 L871.244 691.72 L871.804 691.72 L872.363 691.72 L872.922 691.72 L873.481 691.72 L874.041 691.72 L874.6 691.72 L875.159 691.72 L875.718 691.72 L876.278 691.72 L876.837 691.72 L877.396 691.72 L877.955 691.72 L878.515 691.72 L879.074 691.72 L879.633 691.72 L880.192 691.72 L880.752 691.72 L881.311 691.72 L881.87 691.72 L882.429 691.72 L882.989 691.72 L883.548 691.72 L884.107 691.72 L884.666 691.72 L885.226 691.72 L885.785 691.72 L886.344 691.72 L886.903 691.72 L887.463 691.72 L888.022 691.72 L888.581 691.72 L889.14 691.72 L889.7 691.72 L890.259 691.72 L890.818 691.72 L891.377 691.72 L891.937 691.72 L892.496 691.72 L893.055 691.72 L893.614 691.72 L894.174 691.72 L894.733 691.72 L895.292 691.72 L895.851 691.72 L896.411 691.72 L896.97 691.72 L897.529 691.72 L898.088 691.72 L898.648 691.72 L899.207 691.72 L899.766 691.72 L900.325 691.72 L900.885 691.72 L901.444 691.72 L902.003 691.72 L902.562 691.72 L903.122 691.72 L903.681 691.72 L904.24 691.72 L904.799 691.72 L905.359 691.72 L905.918 691.72 L906.477 691.72 L907.036 691.72 L907.596 691.72 L908.155 691.72 L908.714 691.72 L909.273 691.72 L909.833 691.72 L910.392 691.72 L910.951 691.72 L911.51 691.72 L912.07 691.72 L912.629 691.72 L913.188 691.72 L913.747 691.72 L914.307 691.72 L914.866 691.72 L915.425 691.72 L915.984 691.72 L916.544 691.72 L917.103 691.72 L917.662 691.72 L918.221 691.72 L918.781 691.72 L919.34 691.72 L919.899 691.72 L920.458 691.72 L921.018 691.72 L921.577 691.72 L922.136 691.72 L922.695 691.72 L923.255 691.72 L923.814 691.72 L924.373 691.72 L924.932 691.72 L925.492 691.72 L926.051 691.72 L926.61 691.72 L927.169 691.72 L927.729 691.72 L928.288 691.72 L928.847 691.72 L929.406 691.72 L929.966 691.72 L930.525 691.72 L931.084 691.72 L931.644 691.72 L932.203 691.72 L932.762 691.72 L933.321 691.72 L933.881 691.72 L934.44 691.72 L934.999 691.72 L935.558 691.72 L936.118 691.72 L936.677 691.72 L937.236 691.72 L937.795 691.72 L938.355 691.72 L938.914 691.72 L939.473 691.72 L940.032 691.72 L940.592 691.72 L941.151 691.72 L941.71 691.72 L942.269 691.72 L942.829 691.72 L943.388 691.72 L943.947 691.72 L944.506 691.72 L945.066 691.72 L945.625 691.72 L946.184 691.72 L946.743 691.72 L947.303 691.72 L947.862 691.72 L948.421 691.72 L948.98 691.72 L949.54 691.72 L950.099 691.72 L950.658 691.72 L951.217 691.72 L951.777 691.72 L952.336 691.72 L952.895 691.72 L953.454 691.72 L954.014 691.72 L954.573 691.72 L955.132 691.72 L955.691 691.72 L956.251 691.72 L956.81 691.72 L957.369 691.72 L957.928 691.72 L958.488 691.72 L959.047 691.72 L959.606 691.72 L960.165 691.72 L960.725 691.72 L961.284 691.72 L961.843 691.72 L962.402 691.72 L962.962 691.72 L963.521 691.72 L964.08 691.72 L964.639 691.72 L965.199 691.72 L965.758 691.72 L966.317 691.72 L966.876 691.72 L967.436 691.72 L967.995 691.72 L968.554 691.72 L969.113 691.72 L969.673 691.72 L970.232 691.72 L970.791 691.72 L971.35 691.72 L971.91 691.72 L972.469 691.72 L973.028 691.72 L973.587 691.72 L974.147 691.72 L974.706 691.72 L975.265 691.72 L975.824 691.72 L976.384 691.72 L976.943 691.72 L977.502 691.72 L978.061 691.72 L978.621 691.72 L979.18 691.72 L979.739 691.72 L980.298 691.72 L980.858 691.72 L981.417 691.72 L981.976 691.72 L982.535 691.72 L983.095 691.72 L983.654 691.72 L984.213 691.72 L984.772 691.72 L985.332 691.72 L985.891 691.72 L986.45 691.72 L987.009 691.72 L987.569 691.72 L988.128 691.72 L988.687 691.72 L989.246 691.72 L989.806 691.72 L990.365 691.72 L990.924 691.72 L991.483 691.72 L992.043 691.72 L992.602 691.72 L993.161 691.72 L993.72 691.72 L994.28 691.72 L994.839 691.72 L995.398 691.72 L995.957 691.72 L996.517 691.72 L997.076 691.72 L997.635 691.72 L998.194 691.72 L998.754 691.72 L999.313 691.72 L999.872 691.72 L1000.43 691.72 L1000.99 691.72 L1001.55 691.72 L1002.11 691.72 L1002.67 691.72 L1003.23 691.72 L1003.79 691.72 L1004.35 691.72 L1004.91 691.72 L1005.46 691.72 L1006.02 691.72 L1006.58 691.72 L1007.14 691.72 L1007.7 691.72 L1008.26 691.72 L1008.82 691.72 L1009.38 691.72 L1009.94 691.72 L1010.5 691.72 L1011.06 691.72 L1011.62 691.72 L1012.18 691.72 L1012.73 691.72 L1013.29 691.72 L1013.85 691.72 L1014.41 691.72 L1014.97 691.72 L1015.53 691.72 L1016.09 691.72 L1016.65 691.72 L1017.21 691.72 L1017.77 691.72 L1018.33 691.72 L1018.89 691.72 L1019.45 691.72 L1020.01 691.72 L1020.56 691.72 L1021.12 691.72 L1021.68 691.72 L1022.24 691.72 L1022.8 691.72 L1023.36 691.72 L1023.92 691.72 L1024.48 691.72 L1025.04 691.72 L1025.6 691.72 L1026.16 691.72 L1026.72 691.72 L1027.28 691.72 L1027.83 691.72 L1028.39 691.72 L1028.95 691.72 L1029.51 691.72 L1030.07 691.72 L1030.63 691.72 L1031.19 691.72 L1031.75 691.72 L1032.31 691.72 L1032.87 691.72 L1033.43 691.72 L1033.99 691.72 L1034.55 691.72 L1035.1 691.72 L1035.66 691.72 L1036.22 691.72 L1036.78 691.72 L1037.34 691.72 L1037.9 691.72 L1038.46 691.72 L1039.02 691.72 L1039.58 691.72 L1040.14 691.72 L1040.7 691.72 L1041.26 691.72 L1041.82 691.72 L1042.38 691.72 L1042.93 691.72 L1043.49 691.72 L1044.05 691.72 L1044.61 691.72 L1045.17 691.72 L1045.73 691.72 L1046.29 691.72 L1046.85 691.72 L1047.41 691.72 L1047.97 691.72 L1048.53 691.72 L1049.09 691.72 L1049.65 691.72 L1050.2 691.72 L1050.76 691.72 L1051.32 691.72 L1051.88 691.72 L1052.44 691.72 L1053 691.72 L1053.56 691.72 L1054.12 691.72 L1054.68 691.72 L1055.24 691.72 L1055.8 691.72 L1056.36 691.72 L1056.92 691.72 L1057.48 691.72 L1058.03 691.72 L1058.59 691.72 L1059.15 691.72 L1059.71 691.72 L1060.27 691.72 L1060.83 691.72 L1061.39 691.72 L1061.95 691.72 L1062.51 691.72 L1063.07 691.72 L1063.63 691.72 L1064.19 691.72 L1064.75 691.72 L1065.3 691.72 L1065.86 691.72 L1066.42 691.72 L1066.98 691.72 L1067.54 691.72 L1068.1 691.72 L1068.66 691.72 L1069.22 691.72 L1069.78 691.72 L1070.34 691.72 L1070.9 691.72 L1071.46 691.72 L1072.02 691.72 L1072.57 691.72 L1073.13 691.72 L1073.69 691.72 L1074.25 691.72 L1074.81 691.72 L1075.37 691.72 L1075.93 691.72 L1076.49 691.72 L1077.05 691.72 L1077.61 691.72 L1078.17 691.72 L1078.73 691.72 L1079.29 691.72 L1079.85 691.72 L1080.4 691.72 L1080.96 691.72 L1081.52 691.72 L1082.08 691.72 L1082.64 691.72 L1083.2 691.72 L1083.76 691.72 L1084.32 691.72 L1084.88 691.72 L1085.44 691.72 L1086 691.72 L1086.56 691.72 L1087.12 691.72 L1087.67 691.72 L1088.23 691.72 L1088.79 691.72 L1089.35 691.72 L1089.91 691.72 L1090.47 691.72 L1091.03 691.72 L1091.59 691.72 L1092.15 691.72 L1092.71 691.72 L1093.27 691.72 L1093.83 691.72 L1094.39 691.72 L1094.94 691.72 L1095.5 691.72 L1096.06 691.72 L1096.62 691.72 L1097.18 691.72 L1097.74 691.72 L1098.3 691.72 L1098.86 691.72 L1099.42 691.72 L1099.98 691.72 L1100.54 691.72 L1101.1 691.72 L1101.66 691.72 L1102.22 691.72 L1102.77 691.72 L1103.33 691.72 L1103.89 691.72 L1104.45 691.72 L1105.01 691.72 L1105.57 691.72 L1106.13 691.72 L1106.69 691.72 L1107.25 691.72 L1107.81 691.72 L1108.37 691.72 L1108.93 691.72 L1109.49 691.72 L1110.04 691.72 L1110.6 691.72 L1111.16 691.72 L1111.72 691.72 L1112.28 691.72 L1112.84 691.72 L1113.4 691.72 L1113.96 691.72 L1114.52 691.72 L1115.08 691.72 L1115.64 691.72 L1116.2 691.72 L1116.76 691.72 L1117.31 691.72 L1117.87 691.72 L1118.43 691.72 L1118.99 691.72 L1119.55 691.72 L1120.11 691.72 L1120.67 691.72 L1121.23 691.72 L1121.79 691.72 L1122.35 691.72 L1122.91 691.72 L1123.47 691.72 L1124.03 691.72 L1124.59 691.72 L1125.14 691.72 L1125.7 691.72 L1126.26 691.72 L1126.82 691.72 L1127.38 691.72 L1127.94 691.72 L1128.5 691.72 L1129.06 691.72 L1129.62 691.72 L1130.18 691.72 L1130.74 691.72 L1131.3 691.72 L1131.86 691.72 L1132.41 691.72 L1132.97 691.72 L1133.53 691.72 L1134.09 691.72 L1134.65 691.72 L1135.21 691.72 L1135.77 691.72 L1136.33 691.72 L1136.89 691.72 L1137.45 691.72 L1138.01 691.72 L1138.57 691.72 L1139.13 691.72 L1139.68 691.72 L1140.24 691.72 L1140.8 691.72 L1141.36 691.72 L1141.92 691.72 L1142.48 691.72 L1143.04 691.72 L1143.6 691.72 L1144.16 691.72 L1144.72 691.72 L1145.28 691.72 L1145.84 691.72 L1146.4 691.72 L1146.96 691.72 L1147.51 691.72 L1148.07 691.72 L1148.63 691.72 L1149.19 691.72 L1149.75 691.72 L1150.31 691.72 L1150.87 691.72 L1151.43 691.72 L1151.99 691.72 L1152.55 691.72 L1153.11 691.72 L1153.67 691.72 L1154.23 691.72 L1154.78 691.72 L1155.34 691.72 L1155.9 691.72 L1156.46 691.72 L1157.02 691.72 L1157.58 691.72 L1158.14 691.72 L1158.7 691.72 L1159.26 691.72 L1159.82 691.72 L1160.38 691.72 L1160.94 691.72 L1161.5 691.72 L1162.05 691.72 L1162.61 691.72 L1163.17 691.72 L1163.73 691.72 L1164.29 691.72 L1164.85 691.72 L1165.41 691.72 L1165.97 691.72 L1166.53 691.72 L1167.09 691.72 L1167.65 691.72 L1168.21 691.72 L1168.77 691.72 L1169.33 691.72 L1169.88 691.72 L1170.44 691.72 L1171 691.72 L1171.56 691.72 L1172.12 691.72 L1172.68 691.72 L1173.24 691.72 L1173.8 691.72 L1174.36 691.72 L1174.92 691.72 L1175.48 691.72 L1176.04 691.72 L1176.6 691.72 L1177.15 691.72 L1177.71 691.72 L1178.27 691.72 L1178.83 691.72 L1179.39 691.72 L1179.95 691.72 L1180.51 691.72 L1181.07 691.72 L1181.63 691.72 L1182.19 691.72 L1182.75 691.72 L1183.31 691.72 L1183.87 691.72 L1184.43 691.72 L1184.98 691.72 L1185.54 691.72 L1186.1 691.72 L1186.66 691.72 L1187.22 691.72 L1187.78 691.72 L1188.34 691.72 L1188.9 691.72 L1189.46 691.72 L1190.02 691.72 L1190.58 691.72 L1191.14 691.72 L1191.7 691.72 L1192.25 691.72 L1192.81 691.72 L1193.37 691.72 L1193.93 691.72 L1194.49 691.72 L1195.05 691.72 L1195.61 691.72 L1196.17 691.72 L1196.73 691.72 L1197.29 691.72 L1197.85 691.72 L1198.41 691.72 L1198.97 691.72 L1199.52 691.72 L1200.08 691.72 L1200.64 691.72 L1201.2 691.72 L1201.76 691.72 L1202.32 691.72 L1202.88 691.72 L1203.44 691.72 L1204 691.72 L1204.56 691.72 L1205.12 691.72 L1205.68 691.72 L1206.24 691.72 L1206.8 691.72 L1207.35 691.72 L1207.91 691.72 L1208.47 691.72 L1209.03 691.72 L1209.59 691.72 L1210.15 691.72 L1210.71 691.72 L1211.27 691.72 L1211.83 691.72 L1212.39 691.72 L1212.95 691.72 L1213.51 691.72 L1214.07 691.72 L1214.62 691.72 L1215.18 691.72 L1215.74 691.72 L1216.3 691.72 L1216.86 691.72 L1217.42 691.72 L1217.98 691.72 L1218.54 691.72 L1219.1 691.72 L1219.66 691.72 L1220.22 691.72 L1220.78 691.72 L1221.34 691.72 L1221.89 691.72 L1222.45 691.72 L1223.01 691.72 L1223.57 691.72 L1224.13 691.72 L1224.69 691.72 L1225.25 691.72 L1225.81 691.72 L1226.37 691.72 L1226.93 691.72 L1227.49 691.72 L1228.05 691.72 L1228.61 691.72 L1229.17 691.72 L1229.72 691.72 L1230.28 691.72 L1230.84 691.72 L1231.4 691.72 L1231.96 691.72 L1232.52 691.72 L1233.08 691.72 L1233.64 691.72 L1234.2 691.72 L1234.76 691.72 L1235.32 691.72 L1235.88 691.72 L1236.44 691.72 L1236.99 691.72 L1237.55 691.72 L1238.11 691.72 L1238.67 691.72 L1239.23 691.72 L1239.79 691.72 L1240.35 691.72 L1240.91 691.72 L1241.47 691.72 L1242.03 691.72 L1242.59 691.72 L1243.15 691.72 L1243.71 691.72 L1244.26 691.72 L1244.82 691.72 L1245.38 691.72 L1245.94 691.72 L1246.5 691.72 L1247.06 691.72 L1247.62 691.72 L1248.18 691.72 L1248.74 691.72 L1249.3 691.72 L1249.86 691.72 L1250.42 691.72 L1250.98 691.72 L1251.54 691.72 L1252.09 691.72 L1252.65 691.72 L1253.21 691.72 L1253.77 691.72 L1254.33 691.72 L1254.89 691.72 L1255.45 691.72 L1256.01 691.72 L1256.57 691.72 L1257.13 691.72 L1257.69 691.72 L1258.25 691.72 L1258.81 691.72 L1259.36 691.72 L1259.92 691.72 L1260.48 691.72 L1261.04 691.72 L1261.6 691.72 L1262.16 691.72 L1262.72 691.72 L1263.28 691.72 L1263.84 691.72 L1264.4 691.72 L1264.96 691.72 L1265.52 691.72 L1266.08 691.72 L1266.63 691.72 L1267.19 691.72 L1267.75 691.72 L1268.31 691.72 L1268.87 691.72 L1269.43 691.72 L1269.99 691.72 L1270.55 691.72 L1271.11 691.72 L1271.67 691.72 L1272.23 691.72 L1272.79 691.72 L1273.35 691.72 L1273.91 691.72 L1274.46 691.72 L1275.02 691.72 L1275.58 691.72 L1276.14 691.72 L1276.7 691.72 L1277.26 691.72 L1277.82 691.72 L1278.38 691.72 L1278.94 691.72 L1279.5 691.72 L1280.06 691.72 L1280.62 691.72 L1281.18 691.72 L1281.73 691.72 L1282.29 691.72 L1282.85 691.72 L1283.41 691.72 L1283.97 691.72 L1284.53 691.72 L1285.09 691.72 L1285.65 691.72 L1286.21 691.72 L1286.77 691.72 L1287.33 691.72 L1287.89 691.72 L1288.45 691.72 L1289 691.72 L1289.56 691.72 L1290.12 691.72 L1290.68 691.72 L1291.24 691.72 L1291.8 691.72 L1292.36 691.72 L1292.92 691.72 L1293.48 691.72 L1294.04 691.72 L1294.6 691.72 L1295.16 691.72 L1295.72 691.72 L1296.28 691.72 L1296.83 691.72 L1297.39 691.72 L1297.95 691.72 L1298.51 691.72 L1299.07 691.72 L1299.63 691.72 L1300.19 691.72 L1300.75 691.72 L1301.31 691.72 L1301.87 691.72 L1302.43 691.72 L1302.99 691.72 L1303.55 691.72 L1304.1 691.72 L1304.66 691.72 L1305.22 691.72 L1305.78 691.72 L1306.34 691.72 L1306.9 691.72 L1307.46 691.72 L1308.02 691.72 L1308.58 691.72 L1309.14 691.72 L1309.7 691.72 L1310.26 691.72 L1310.82 691.72 L1311.38 691.72 L1311.93 691.72 L1312.49 691.72 L1313.05 691.72 L1313.61 691.72 L1314.17 691.72 L1314.73 691.72 L1315.29 691.72 L1315.85 691.72 L1316.41 691.72 L1316.97 691.72 L1317.53 691.72 L1318.09 691.72 L1318.65 691.72 L1319.2 691.72 L1319.76 691.72 L1320.32 691.72 L1320.88 691.72 L1321.44 691.72 L1322 691.72 L1322.56 691.72 L1323.12 691.72 L1323.68 691.72 L1324.24 691.72 L1324.8 691.72 L1325.36 691.72 L1325.92 691.72 L1326.47 691.72 L1327.03 691.72 L1327.59 691.72 L1328.15 691.72 L1328.71 691.72 L1329.27 691.72 L1329.83 691.72 L1330.39 691.72 L1330.95 691.72 L1331.51 691.72 L1332.07 691.72 L1332.63 691.72 L1333.19 691.72 L1333.75 691.72 L1334.3 691.72 L1334.86 691.72 L1335.42 691.72 L1335.98 691.72 L1336.54 691.72 L1337.1 691.72 L1337.66 691.72 L1338.22 691.72 L1338.78 691.72 L1339.34 691.72 L1339.9 691.72 L1340.46 691.72 L1341.02 691.72 L1341.57 691.72 L1342.13 691.72 L1342.69 691.72 L1343.25 691.72 L1343.81 691.72 L1344.37 691.72 L1344.93 691.72 L1345.49 691.72 L1346.05 691.72 L1346.61 691.72 L1347.17 691.72 L1347.73 691.72 L1348.29 691.72 L1348.84 691.72 L1349.4 691.72 L1349.96 691.72 L1350.52 691.72 L1351.08 691.72 L1351.64 691.72 L1352.2 691.72 L1352.76 691.72 L1353.32 691.72 L1353.88 691.72 L1354.44 691.72 L1355 691.72 L1355.56 691.72 L1356.12 691.72 L1356.67 691.72 L1357.23 691.72 L1357.79 691.72 L1358.35 691.72 L1358.91 691.72 L1359.47 691.72 L1360.03 691.72 L1360.59 691.72 L1361.15 691.72 L1361.71 691.72 L1362.27 691.72 L1362.83 691.72 L1363.39 691.72 L1363.94 691.72 L1364.5 691.72 L1365.06 691.72 L1365.62 691.72 L1366.18 691.72 L1366.74 691.72 L1367.3 691.72 L1367.86 691.72 L1368.42 691.72 L1368.98 691.72 L1369.54 691.72 L1370.1 691.72 L1370.66 691.72 L1371.21 691.72 L1371.77 691.72 L1372.33 691.72 L1372.89 691.72 L1373.45 691.72 L1374.01 691.72 L1374.57 691.72 L1375.13 691.72 L1375.69 691.72 L1376.25 691.72 L1376.81 691.72 L1377.37 691.72 L1377.93 691.72 L1378.49 691.72 L1379.04 691.72 L1379.6 691.72 L1380.16 691.72 L1380.72 691.72 L1381.28 691.72 L1381.84 691.72 L1382.4 691.72 L1382.96 691.72 L1383.52 691.72 L1384.08 691.72 L1384.64 691.72 L1385.2 691.72 L1385.76 691.72 L1386.31 691.72 L1386.87 691.72 L1387.43 691.72 L1387.99 691.72 L1388.55 691.72 L1389.11 691.72 L1389.67 691.72 L1390.23 691.72 L1390.79 691.72 L1391.35 691.72 L1391.91 691.72 L1392.47 691.72 L1393.03 691.72 L1393.58 691.72 L1394.14 691.72 L1394.7 691.72 L1395.26 691.72 L1395.82 691.72 L1396.38 691.72 L1396.94 691.72 L1397.5 691.72 L1398.06 691.72 L1398.62 691.72 L1399.18 691.72 L1399.74 691.72 L1400.3 691.72 L1400.86 691.72 L1401.41 691.72 L1401.97 691.72 L1402.53 691.72 L1403.09 691.72 L1403.65 691.72 L1404.21 691.72 L1404.77 691.72 L1405.33 691.72 L1405.89 691.72 L1406.45 691.72 L1407.01 691.72 L1407.57 691.72 L1408.13 691.72 L1408.68 691.72 L1409.24 691.72 L1409.8 691.72 L1410.36 691.72 L1410.92 691.72 L1411.48 691.72 L1412.04 691.72 L1412.6 691.72 L1413.16 691.72 L1413.72 691.72 L1414.28 691.72 L1414.84 691.72 L1415.4 691.72 L1415.95 691.72 L1416.51 691.72 L1417.07 691.72 L1417.63 691.72 L1418.19 691.72 L1418.75 691.72 L1419.31 691.72 L1419.87 691.72 L1420.43 691.72 L1420.99 691.72 L1421.55 691.72 L1422.11 691.72 L1422.67 691.72 L1423.23 691.72 L1423.78 691.72 L1424.34 691.72 L1424.9 691.72 L1425.46 691.72 L1426.02 691.72 L1426.58 691.72 L1427.14 691.72 L1427.7 691.72 L1428.26 691.72 L1428.82 691.72 L1429.38 691.72 L1429.94 691.72 L1430.5 691.72 L1431.05 691.72 L1431.61 691.72 L1432.17 691.72 L1432.73 691.72 L1433.29 691.72 L1433.85 691.72 L1434.41 691.72 L1434.97 691.72 L1435.53 691.72 L1436.09 691.72 L1436.65 691.72 L1437.21 691.72 L1437.77 691.72 L1438.33 691.72 L1438.88 691.72 L1439.44 691.72 L1440 691.72 L1440.56 691.72 L1441.12 691.72 L1441.68 691.72 L1442.24 691.72 L1442.8 691.72 L1443.36 691.72 L1443.92 691.72 L1444.48 691.72 L1445.04 691.72 L1445.6 691.72 L1446.15 691.72 L1446.71 691.72 L1447.27 691.72 L1447.83 691.72 L1448.39 691.72 L1448.95 691.72 L1449.51 691.72 L1450.07 691.72 L1450.63 691.72 L1451.19 691.72 L1451.75 691.72 L1452.31 691.72 L1452.87 691.72 L1453.42 691.72 L1453.98 691.72 L1454.54 691.72 L1455.1 691.72 L1455.66 691.72 L1456.22 691.72 L1456.78 691.72 L1457.34 691.72 L1457.9 691.72 L1458.46 691.72 L1459.02 691.72 L1459.58 691.72 L1460.14 691.72 L1460.7 691.72 L1461.25 691.72 L1461.81 691.72 L1462.37 691.72 L1462.93 691.72 L1463.49 691.72 L1464.05 691.72 L1464.61 691.72 L1465.17 691.72 L1465.73 691.72 L1466.29 691.72 L1466.85 691.72 L1467.41 691.72 L1467.97 691.72 L1468.52 691.72 L1469.08 691.72 L1469.64 691.72 L1470.2 691.72 L1470.76 691.72 L1471.32 691.72 L1471.88 691.72 L1472.44 691.72 L1473 691.72 L1473.56 691.72 L1474.12 691.72 L1474.68 691.72 L1475.24 691.72 L1475.79 691.72 L1476.35 691.72 L1476.91 691.72 L1477.47 691.72 L1478.03 691.72 L1478.59 691.72 L1479.15 691.72 L1479.71 691.72 L1480.27 691.72 L1480.83 691.72 L1481.39 691.72 L1481.95 691.72 L1482.51 691.72 L1483.07 691.72 L1483.62 691.72 L1484.18 691.72 L1484.74 691.72 L1485.3 691.72 L1485.86 691.72 L1486.42 691.72 L1486.98 691.72 L1487.54 691.72 L1488.1 691.72 L1488.66 691.72 L1489.22 691.72 L1489.78 691.72 L1490.34 691.72 L1490.89 691.72 L1491.45 691.72 L1492.01 691.72 L1492.57 691.72 L1493.13 691.72 L1493.69 691.72 L1494.25 691.72 L1494.81 691.72 L1495.37 691.72 L1495.93 691.72 L1496.49 691.72 L1497.05 691.72 L1497.61 691.72 L1498.16 691.72 L1498.72 691.72 L1499.28 691.72 L1499.84 691.72 L1500.4 691.72 L1500.96 691.72 L1501.52 691.72 L1502.08 691.72 L1502.64 691.72 L1503.2 691.72 L1503.76 691.72 L1504.32 691.72 L1504.88 691.72 L1505.44 691.72 L1505.99 691.72 L1506.55 691.72 L1507.11 691.72 L1507.67 691.72 L1508.23 691.72 L1508.79 691.72 L1509.35 691.72 L1509.91 691.72 L1510.47 691.72 L1511.03 691.72 L1511.59 691.72 L1512.15 691.72 L1512.71 691.72 L1513.26 691.72 L1513.82 691.72 L1514.38 691.72 L1514.94 691.72 L1515.5 691.72 L1516.06 691.72 L1516.62 691.72 L1517.18 691.72 L1517.74 691.72 L1518.3 691.72 L1518.86 691.72 L1519.42 691.72 L1519.98 691.72 L1520.53 691.72 L1521.09 691.72 L1521.65 691.72 L1522.21 691.72 L1522.77 691.72 L1523.33 691.72 L1523.89 691.72 L1524.45 691.72 L1525.01 691.72 L1525.57 691.72 L1526.13 691.72 L1526.69 691.72 L1527.25 691.72 L1527.81 691.72 L1528.36 691.72 L1528.92 691.72 L1529.48 691.72 L1530.04 691.72 L1530.6 691.72 L1531.16 691.72 L1531.72 691.72 L1532.28 691.72 L1532.84 691.72 L1533.4 691.72 L1533.96 691.72 L1534.52 691.72 L1535.08 691.72 L1535.63 691.72 L1536.19 691.72 L1536.75 691.72 L1537.31 691.72 L1537.87 691.72 L1538.43 691.72 L1538.99 691.72 L1539.55 691.72 L1540.11 691.72 L1540.67 691.72 L1541.23 691.72 L1541.79 691.72 L1542.35 691.72 L1542.9 691.72 L1543.46 691.72 L1544.02 691.72 L1544.58 691.72 L1545.14 691.72 L1545.7 691.72 L1546.26 691.72 L1546.82 691.72 L1547.38 691.72 L1547.94 691.72 L1548.5 691.72 L1549.06 691.72 L1549.62 691.72 L1550.18 691.72 L1550.73 691.72 L1551.29 691.72 L1551.85 691.72 L1552.41 691.72 L1552.97 691.72 L1553.53 691.72 L1554.09 691.72 L1554.65 691.72 L1555.21 691.72 L1555.77 691.72 L1556.33 691.72 L1556.89 691.72 L1557.45 691.72 L1558 691.72 L1558.56 691.72 L1559.12 691.72 L1559.68 691.72 L1560.24 691.72 L1560.8 691.72 L1561.36 691.72 L1561.92 691.72 L1562.48 691.72 L1563.04 691.72 L1563.6 691.72 L1564.16 691.72 L1564.72 691.72 L1565.28 691.72 L1565.83 691.72 L1566.39 691.72 L1566.95 691.72 L1567.51 691.72 L1568.07 691.72 L1568.63 691.72 L1569.19 691.72 L1569.75 691.72 L1570.31 691.72 L1570.87 691.72 L1571.43 691.72 L1571.99 691.72 L1572.55 691.72 L1573.1 691.72 L1573.66 691.72 L1574.22 691.72 L1574.78 691.72 L1575.34 691.72 L1575.9 691.72 L1576.46 691.72 L1577.02 691.72 L1577.58 691.72 L1578.14 691.72 L1578.7 691.72 L1579.26 691.72 L1579.82 691.72 L1580.37 691.72 L1580.93 691.72 L1581.49 691.72 L1582.05 691.72 L1582.61 691.72 L1583.17 691.72 L1583.73 691.72 L1584.29 691.72 L1584.85 691.72 L1585.41 691.72 L1585.97 691.72 L1586.53 691.72 L1587.09 691.72 L1587.65 691.72 L1588.2 691.72 L1588.76 691.72 L1589.32 691.72 L1589.88 691.72 L1590.44 691.72 L1591 691.72 L1591.56 691.72 L1592.12 691.72 L1592.68 691.72 L1593.24 691.72 L1593.8 691.72 L1594.36 691.72 L1594.92 691.72 L1595.47 691.72 L1596.03 691.72 L1596.59 691.72 L1597.15 691.72 L1597.71 691.72 L1598.27 691.72 L1598.83 691.72 L1599.39 691.72 L1599.95 691.72 L1600.51 691.72 L1601.07 691.72 L1601.63 691.72 L1602.19 691.72 L1602.74 691.72 L1603.3 691.72 L1603.86 691.72 L1604.42 691.72 L1604.98 691.72 L1605.54 691.72 L1606.1 691.72 L1606.66 691.72 L1607.22 691.72 L1607.78 691.72 L1608.34 691.72 L1608.9 691.72 L1609.46 691.72 L1610.02 691.72 L1610.57 691.72 L1611.13 691.72 L1611.69 691.72 L1612.25 691.72 L1612.81 691.72 L1613.37 691.72 L1613.93 691.72 L1614.49 691.72 L1615.05 691.72 L1615.61 691.72 L1616.17 691.72 L1616.73 691.72 L1617.29 691.72 L1617.84 691.72 L1618.4 691.72 L1618.96 691.72 L1619.52 691.72 L1620.08 691.72 L1620.64 691.72 L1621.2 691.72 L1621.76 691.72 L1622.32 691.72 L1622.88 691.72 L1623.44 691.72 L1624 691.72 L1624.56 691.72 L1625.11 691.72 L1625.67 691.72 L1626.23 691.72 L1626.79 691.72 L1627.35 691.72 L1627.91 691.72 L1628.47 691.72 L1629.03 691.72 L1629.59 691.72 L1630.15 691.72 L1630.71 691.72 L1631.27 691.72 L1631.83 691.72 L1632.39 691.72 L1632.94 691.72 L1633.5 691.72 L1634.06 691.72 L1634.62 691.72 L1635.18 691.72 L1635.74 691.72 L1636.3 691.72 L1636.86 691.72 L1637.42 691.72 L1637.98 691.72 L1638.54 691.72 L1639.1 691.72 L1639.66 691.72 L1640.21 691.72 L1640.77 691.72 L1641.33 691.72 L1641.89 691.72 L1642.45 691.72 L1643.01 691.72 L1643.57 691.72 L1644.13 691.72 L1644.69 691.72 L1645.25 691.72 L1645.81 691.72 L1646.37 691.72 L1646.93 691.72 L1647.48 691.72 L1648.04 691.72 L1648.6 691.72 L1649.16 691.72 L1649.72 691.72 L1650.28 691.72 L1650.84 691.72 L1651.4 691.72 L1651.96 691.72 L1652.52 691.72 L1653.08 691.72 L1653.64 691.72 L1654.2 691.72 L1654.76 691.72 L1655.31 691.72 L1655.87 691.72 L1656.43 691.72 L1656.99 691.72 L1657.55 691.72 L1658.11 691.72 L1658.67 691.72 L1659.23 691.72 L1659.79 691.72 L1660.35 691.72 L1660.91 691.72 L1661.47 691.72 L1662.03 691.72 L1662.58 691.72 L1663.14 691.72 L1663.7 691.72 L1664.26 691.72 L1664.82 691.72 L1665.38 691.72 L1665.94 691.72 L1666.5 691.72 L1667.06 691.72 L1667.62 691.72 L1668.18 691.72 L1668.74 691.72 L1669.3 691.72 L1669.85 691.72 L1670.41 691.72 L1670.97 691.72 L1671.53 691.72 L1672.09 691.72 L1672.65 691.72 L1673.21 691.72 L1673.77 691.72 L1674.33 691.72 L1674.89 691.72 L1675.45 691.72 L1676.01 691.72 L1676.57 691.72 L1677.13 691.72 L1677.68 691.72 L1678.24 691.72 L1678.8 691.72 L1679.36 691.72 L1679.92 691.72 L1680.48 691.72 L1681.04 691.72 L1681.6 691.72 L1682.16 691.72 L1682.72 691.72 L1683.28 691.72 L1683.84 691.72 L1684.4 691.72 L1684.95 691.72 L1685.51 691.72 L1686.07 691.72 L1686.63 691.72 L1687.19 691.72 L1687.75 691.72 L1688.31 691.72 L1688.87 691.72 L1689.43 691.72 L1689.99 691.72 L1690.55 691.72 L1691.11 691.72 L1691.67 691.72 L1692.23 691.72 L1692.78 691.72 L1693.34 691.72 L1693.9 691.72 L1694.46 691.72 L1695.02 691.72 L1695.58 691.72 L1696.14 691.72 L1696.7 691.72 L1697.26 691.72 L1697.82 691.72 L1698.38 691.72 L1698.94 691.72 L1699.5 691.72 L1700.05 691.72 L1700.61 691.72 L1701.17 691.72 L1701.73 691.72 L1702.29 691.72 L1702.85 691.72 L1703.41 691.72 L1703.97 691.72 L1704.53 691.72 L1705.09 691.72 L1705.65 691.72 L1706.21 691.72 L1706.77 691.72 L1707.32 691.72 L1707.88 691.72 L1708.44 691.72 L1709 691.72 L1709.56 691.72 L1710.12 691.72 L1710.68 691.72 L1711.24 691.72 L1711.8 691.72 L1712.36 691.72 L1712.92 691.72 L1713.48 691.72 L1714.04 691.72 L1714.6 691.72 L1715.15 691.72 L1715.71 691.72 L1716.27 691.72 L1716.83 691.72 L1717.39 691.72 L1717.95 691.72 L1718.51 691.72 L1719.07 691.72 L1719.63 691.72 L1720.19 691.72 L1720.75 691.72 L1721.31 691.72 L1721.87 691.72 L1722.42 691.72 L1722.98 691.72 L1723.54 691.72 L1724.1 691.72 L1724.66 691.72 L1725.22 691.72 L1725.78 691.72 L1726.34 691.72 L1726.9 691.72 L1727.46 691.72 L1728.02 691.72 L1728.58 691.72 L1729.14 691.72 L1729.69 691.72 L1730.25 691.72 L1730.81 691.72 L1731.37 691.72 L1731.93 691.72 L1732.49 691.72 L1733.05 691.72 L1733.61 691.72 L1734.17 691.72 L1734.73 691.72 L1735.29 691.72 L1735.85 691.72 L1736.41 691.72 L1736.97 691.72 L1737.52 691.72 L1738.08 691.72 L1738.64 691.72 L1739.2 691.72 L1739.76 691.72 L1740.32 691.72 L1740.88 691.72 L1741.44 691.72 L1742 691.72 L1742.56 691.72 L1743.12 691.72 L1743.68 691.72 L1744.24 691.72 L1744.79 691.72 L1745.35 691.72 L1745.91 691.72 L1746.47 691.72 L1747.03 691.72 L1747.59 691.72 L1748.15 691.72 L1748.71 691.72 L1749.27 691.72 L1749.83 691.72 L1750.39 691.72 L1750.95 691.72 L1751.51 691.72 L1752.06 691.72 L1752.62 691.72 L1753.18 691.72 L1753.74 691.72 L1754.3 691.72 L1754.86 691.72 L1755.42 691.72 L1755.98 691.72 L1756.54 691.72 L1757.1 691.72 L1757.66 691.72 L1758.22 691.72 L1758.78 691.72 L1759.34 691.72 L1759.89 691.72 L1760.45 691.72 L1761.01 691.72 L1761.57 691.72 L1762.13 691.72 L1762.69 691.72 L1763.25 691.72 L1763.81 691.72 L1764.37 691.72 L1764.93 691.72 L1765.49 691.72 L1766.05 691.72 L1766.61 691.72 L1767.16 691.72 L1767.72 691.72 L1768.28 691.72 L1768.84 691.72 L1769.4 691.72 L1769.96 691.72 L1770.52 691.72 L1771.08 691.72 L1771.64 691.72 L1772.2 691.72 L1772.76 691.72 L1773.32 691.72 L1773.88 691.72 L1774.43 691.72 L1774.99 691.72 L1775.55 691.72 L1776.11 691.72 L1776.67 691.72 L1777.23 691.72 L1777.79 691.72 L1778.35 691.72 L1778.91 691.72 L1779.47 691.72 L1780.03 691.72 L1780.59 691.72 L1781.15 691.72 L1781.71 691.72 L1782.26 691.72 L1782.82 691.72 L1783.38 691.72 L1783.94 691.72 L1784.5 691.72 L1785.06 691.72 L1785.62 691.72 L1786.18 691.72 L1786.74 691.72 L1787.3 691.72 L1787.86 691.72 L1788.42 691.72 L1788.98 691.72 L1789.53 691.72 L1790.09 691.72 L1790.65 691.72 L1791.21 691.72 L1791.77 691.72 L1792.33 691.72 L1792.89 691.72 L1793.45 691.72 L1794.01 691.72 L1794.57 691.72 L1795.13 691.72 L1795.69 691.72 L1796.25 691.72 L1796.8 691.72 L1797.36 691.72 L1797.92 691.72 L1798.48 691.72 L1799.04 691.72 L1799.6 691.72 L1800.16 691.72 L1800.72 691.72 L1801.28 691.72 L1801.84 691.72 L1802.4 691.72 L1802.96 691.72 L1803.52 691.72 L1804.08 691.72 L1804.63 691.72 L1805.19 691.72 L1805.75 691.72 L1806.31 691.72 L1806.87 691.72 L1807.43 691.72 L1807.99 691.72 L1808.55 691.72 L1809.11 691.72 L1809.67 691.72 L1810.23 691.72 L1810.79 691.72 L1811.35 691.72 L1811.9 691.72 L1812.46 691.72 L1813.02 691.72 L1813.58 691.72 L1814.14 691.72 L1814.7 691.72 L1815.26 691.72 L1815.82 691.72 L1816.38 691.72 L1816.94 691.72 L1817.5 691.72 L1818.06 691.72 L1818.62 691.72 L1819.18 691.72 L1819.73 691.72 L1820.29 691.72 L1820.85 691.72 L1821.41 691.72 L1821.97 691.72 L1822.53 691.72 L1823.09 691.72 L1823.65 691.72 L1824.21 691.72 L1824.77 691.72 L1825.33 691.72 L1825.89 691.72 L1826.45 691.72 L1827 691.72 L1827.56 691.72 L1828.12 691.72 L1828.68 691.72 L1829.24 691.72 L1829.8 691.72 L1830.36 691.72 L1830.92 691.72 L1831.48 691.72 L1832.04 691.72 L1832.6 691.72 L1833.16 691.72 L1833.72 691.72 L1834.27 691.72 L1834.83 691.72 L1835.39 691.72 L1835.95 691.72 L1836.51 691.72 L1837.07 691.72 L1837.63 691.72 L1838.19 691.72 L1838.19 681.982 L1837.63 681.982 L1837.07 681.982 L1836.51 681.982 L1835.95 681.982 L1835.39 681.982 L1834.83 681.982 L1834.27 681.982 L1833.72 681.982 L1833.16 681.982 L1832.6 681.982 L1832.04 681.982 L1831.48 681.982 L1830.92 681.982 L1830.36 681.982 L1829.8 681.982 L1829.24 681.982 L1828.68 681.982 L1828.12 681.982 L1827.56 681.982 L1827 681.982 L1826.45 681.982 L1825.89 681.982 L1825.33 681.982 L1824.77 681.982 L1824.21 681.982 L1823.65 681.982 L1823.09 681.982 L1822.53 681.982 L1821.97 681.982 L1821.41 681.982 L1820.85 681.982 L1820.29 681.982 L1819.73 681.982 L1819.18 681.982 L1818.62 681.982 L1818.06 681.982 L1817.5 681.982 L1816.94 681.982 L1816.38 681.982 L1815.82 681.982 L1815.26 681.982 L1814.7 681.982 L1814.14 681.982 L1813.58 681.982 L1813.02 681.982 L1812.46 681.982 L1811.9 681.982 L1811.35 681.982 L1810.79 681.982 L1810.23 681.982 L1809.67 681.982 L1809.11 681.982 L1808.55 681.982 L1807.99 681.982 L1807.43 681.982 L1806.87 681.982 L1806.31 681.982 L1805.75 681.982 L1805.19 681.982 L1804.63 681.982 L1804.08 681.982 L1803.52 681.982 L1802.96 681.982 L1802.4 681.982 L1801.84 681.982 L1801.28 681.982 L1800.72 681.982 L1800.16 681.982 L1799.6 681.982 L1799.04 681.982 L1798.48 681.982 L1797.92 681.982 L1797.36 681.982 L1796.8 681.982 L1796.25 681.982 L1795.69 681.982 L1795.13 681.982 L1794.57 681.982 L1794.01 681.982 L1793.45 681.982 L1792.89 681.982 L1792.33 681.982 L1791.77 681.982 L1791.21 681.982 L1790.65 681.982 L1790.09 681.982 L1789.53 681.982 L1788.98 681.982 L1788.42 681.982 L1787.86 681.982 L1787.3 681.982 L1786.74 681.982 L1786.18 681.982 L1785.62 681.982 L1785.06 681.982 L1784.5 681.982 L1783.94 681.982 L1783.38 681.982 L1782.82 681.982 L1782.26 681.982 L1781.71 681.982 L1781.15 681.982 L1780.59 681.982 L1780.03 681.982 L1779.47 681.982 L1778.91 681.982 L1778.35 681.982 L1777.79 681.982 L1777.23 681.982 L1776.67 681.982 L1776.11 681.982 L1775.55 681.982 L1774.99 681.982 L1774.43 681.982 L1773.88 681.982 L1773.32 681.982 L1772.76 681.982 L1772.2 681.982 L1771.64 681.982 L1771.08 681.982 L1770.52 681.982 L1769.96 681.982 L1769.4 681.982 L1768.84 681.982 L1768.28 681.982 L1767.72 681.982 L1767.16 681.982 L1766.61 681.982 L1766.05 681.982 L1765.49 681.982 L1764.93 681.982 L1764.37 681.982 L1763.81 681.982 L1763.25 681.982 L1762.69 681.982 L1762.13 681.982 L1761.57 681.982 L1761.01 681.982 L1760.45 681.982 L1759.89 681.982 L1759.34 681.982 L1758.78 681.982 L1758.22 681.982 L1757.66 681.982 L1757.1 681.982 L1756.54 681.982 L1755.98 681.982 L1755.42 681.982 L1754.86 681.982 L1754.3 681.982 L1753.74 681.982 L1753.18 681.982 L1752.62 681.982 L1752.06 681.982 L1751.51 681.982 L1750.95 681.982 L1750.39 681.982 L1749.83 681.982 L1749.27 681.982 L1748.71 681.982 L1748.15 681.982 L1747.59 681.982 L1747.03 681.982 L1746.47 681.982 L1745.91 681.982 L1745.35 681.982 L1744.79 681.982 L1744.24 681.982 L1743.68 681.982 L1743.12 681.982 L1742.56 681.982 L1742 681.982 L1741.44 681.982 L1740.88 681.982 L1740.32 681.982 L1739.76 681.982 L1739.2 681.982 L1738.64 681.982 L1738.08 681.982 L1737.52 681.982 L1736.97 681.982 L1736.41 681.982 L1735.85 681.982 L1735.29 681.982 L1734.73 681.982 L1734.17 681.982 L1733.61 681.982 L1733.05 681.982 L1732.49 681.982 L1731.93 681.982 L1731.37 681.982 L1730.81 681.982 L1730.25 681.982 L1729.69 681.982 L1729.14 681.982 L1728.58 681.982 L1728.02 681.982 L1727.46 681.982 L1726.9 681.982 L1726.34 681.982 L1725.78 681.982 L1725.22 681.982 L1724.66 681.982 L1724.1 681.982 L1723.54 681.982 L1722.98 681.982 L1722.42 681.982 L1721.87 681.982 L1721.31 681.982 L1720.75 681.982 L1720.19 681.982 L1719.63 681.982 L1719.07 681.982 L1718.51 681.982 L1717.95 681.982 L1717.39 681.982 L1716.83 681.982 L1716.27 681.982 L1715.71 681.982 L1715.15 681.982 L1714.6 681.982 L1714.04 681.982 L1713.48 681.982 L1712.92 681.982 L1712.36 681.982 L1711.8 681.982 L1711.24 681.982 L1710.68 681.982 L1710.12 681.982 L1709.56 681.982 L1709 681.982 L1708.44 681.982 L1707.88 681.982 L1707.32 681.982 L1706.77 681.982 L1706.21 681.982 L1705.65 681.982 L1705.09 681.982 L1704.53 681.982 L1703.97 681.982 L1703.41 681.982 L1702.85 681.982 L1702.29 681.982 L1701.73 681.982 L1701.17 681.982 L1700.61 681.982 L1700.05 681.982 L1699.5 681.982 L1698.94 681.982 L1698.38 681.982 L1697.82 681.982 L1697.26 681.982 L1696.7 681.982 L1696.14 681.982 L1695.58 681.982 L1695.02 681.982 L1694.46 681.982 L1693.9 681.982 L1693.34 681.982 L1692.78 681.982 L1692.23 681.982 L1691.67 681.982 L1691.11 681.982 L1690.55 681.982 L1689.99 681.982 L1689.43 681.982 L1688.87 681.982 L1688.31 681.982 L1687.75 681.982 L1687.19 681.982 L1686.63 681.982 L1686.07 681.982 L1685.51 681.982 L1684.95 681.982 L1684.4 681.982 L1683.84 681.982 L1683.28 681.982 L1682.72 681.982 L1682.16 681.982 L1681.6 681.982 L1681.04 681.982 L1680.48 681.982 L1679.92 681.982 L1679.36 681.982 L1678.8 681.982 L1678.24 681.982 L1677.68 681.982 L1677.13 681.982 L1676.57 681.982 L1676.01 681.982 L1675.45 681.982 L1674.89 681.982 L1674.33 681.982 L1673.77 681.982 L1673.21 681.982 L1672.65 681.982 L1672.09 681.982 L1671.53 681.982 L1670.97 681.982 L1670.41 681.982 L1669.85 681.982 L1669.3 681.982 L1668.74 681.982 L1668.18 681.982 L1667.62 681.982 L1667.06 681.982 L1666.5 681.982 L1665.94 681.982 L1665.38 681.982 L1664.82 681.982 L1664.26 681.982 L1663.7 681.982 L1663.14 681.982 L1662.58 681.982 L1662.03 681.982 L1661.47 681.982 L1660.91 681.982 L1660.35 681.982 L1659.79 681.982 L1659.23 681.982 L1658.67 681.982 L1658.11 681.982 L1657.55 681.982 L1656.99 681.982 L1656.43 681.982 L1655.87 681.982 L1655.31 681.982 L1654.76 681.982 L1654.2 681.982 L1653.64 681.982 L1653.08 681.982 L1652.52 681.982 L1651.96 681.982 L1651.4 681.982 L1650.84 681.982 L1650.28 681.982 L1649.72 681.982 L1649.16 681.982 L1648.6 681.982 L1648.04 681.982 L1647.48 681.982 L1646.93 681.982 L1646.37 681.982 L1645.81 681.982 L1645.25 681.982 L1644.69 681.982 L1644.13 681.982 L1643.57 681.982 L1643.01 681.982 L1642.45 681.982 L1641.89 681.982 L1641.33 681.982 L1640.77 681.982 L1640.21 681.982 L1639.66 681.982 L1639.1 681.982 L1638.54 681.982 L1637.98 681.982 L1637.42 681.982 L1636.86 681.982 L1636.3 681.982 L1635.74 681.982 L1635.18 681.982 L1634.62 681.982 L1634.06 681.982 L1633.5 681.982 L1632.94 681.982 L1632.39 681.982 L1631.83 681.982 L1631.27 681.982 L1630.71 681.982 L1630.15 681.982 L1629.59 681.982 L1629.03 681.982 L1628.47 681.982 L1627.91 681.982 L1627.35 681.982 L1626.79 681.982 L1626.23 681.982 L1625.67 681.982 L1625.11 681.982 L1624.56 681.982 L1624 681.982 L1623.44 681.982 L1622.88 681.982 L1622.32 681.982 L1621.76 681.982 L1621.2 681.982 L1620.64 681.982 L1620.08 681.982 L1619.52 681.982 L1618.96 681.982 L1618.4 681.982 L1617.84 681.982 L1617.29 681.982 L1616.73 681.982 L1616.17 681.982 L1615.61 681.982 L1615.05 681.982 L1614.49 681.982 L1613.93 681.982 L1613.37 681.982 L1612.81 681.982 L1612.25 681.982 L1611.69 681.982 L1611.13 681.982 L1610.57 681.982 L1610.02 681.982 L1609.46 681.982 L1608.9 681.982 L1608.34 681.982 L1607.78 681.982 L1607.22 681.982 L1606.66 681.982 L1606.1 681.982 L1605.54 681.982 L1604.98 681.982 L1604.42 681.982 L1603.86 681.982 L1603.3 681.982 L1602.74 681.982 L1602.19 681.982 L1601.63 681.982 L1601.07 681.982 L1600.51 681.982 L1599.95 681.982 L1599.39 681.982 L1598.83 681.982 L1598.27 681.982 L1597.71 681.982 L1597.15 681.982 L1596.59 681.982 L1596.03 681.982 L1595.47 681.982 L1594.92 681.982 L1594.36 681.982 L1593.8 681.982 L1593.24 681.982 L1592.68 681.982 L1592.12 681.982 L1591.56 681.982 L1591 681.982 L1590.44 681.982 L1589.88 681.982 L1589.32 681.982 L1588.76 681.982 L1588.2 681.982 L1587.65 681.982 L1587.09 681.982 L1586.53 681.982 L1585.97 681.982 L1585.41 681.982 L1584.85 681.982 L1584.29 681.982 L1583.73 681.982 L1583.17 681.982 L1582.61 681.982 L1582.05 681.982 L1581.49 681.982 L1580.93 681.982 L1580.37 681.982 L1579.82 681.982 L1579.26 681.982 L1578.7 681.982 L1578.14 681.982 L1577.58 681.982 L1577.02 681.982 L1576.46 681.982 L1575.9 681.982 L1575.34 681.982 L1574.78 681.982 L1574.22 681.982 L1573.66 681.982 L1573.1 681.982 L1572.55 681.982 L1571.99 681.982 L1571.43 681.982 L1570.87 681.982 L1570.31 681.982 L1569.75 681.982 L1569.19 681.982 L1568.63 681.982 L1568.07 681.982 L1567.51 681.982 L1566.95 681.982 L1566.39 681.982 L1565.83 681.982 L1565.28 681.982 L1564.72 681.982 L1564.16 681.982 L1563.6 681.982 L1563.04 681.982 L1562.48 681.982 L1561.92 681.982 L1561.36 681.982 L1560.8 681.982 L1560.24 681.982 L1559.68 681.982 L1559.12 681.982 L1558.56 681.982 L1558 681.982 L1557.45 681.982 L1556.89 681.982 L1556.33 681.982 L1555.77 681.982 L1555.21 681.982 L1554.65 681.982 L1554.09 681.982 L1553.53 681.982 L1552.97 681.982 L1552.41 681.982 L1551.85 681.982 L1551.29 681.982 L1550.73 681.982 L1550.18 681.982 L1549.62 681.982 L1549.06 681.982 L1548.5 681.982 L1547.94 681.982 L1547.38 681.982 L1546.82 681.982 L1546.26 681.982 L1545.7 681.982 L1545.14 681.982 L1544.58 681.982 L1544.02 681.982 L1543.46 681.982 L1542.9 681.982 L1542.35 681.982 L1541.79 681.982 L1541.23 681.982 L1540.67 681.982 L1540.11 681.982 L1539.55 681.982 L1538.99 681.982 L1538.43 681.982 L1537.87 681.982 L1537.31 681.982 L1536.75 681.982 L1536.19 681.982 L1535.63 681.982 L1535.08 681.982 L1534.52 681.982 L1533.96 681.982 L1533.4 681.982 L1532.84 681.982 L1532.28 681.982 L1531.72 681.982 L1531.16 681.982 L1530.6 681.982 L1530.04 681.982 L1529.48 681.982 L1528.92 681.982 L1528.36 681.982 L1527.81 681.982 L1527.25 681.982 L1526.69 681.982 L1526.13 681.982 L1525.57 681.982 L1525.01 681.982 L1524.45 681.982 L1523.89 681.982 L1523.33 681.982 L1522.77 681.982 L1522.21 681.982 L1521.65 681.982 L1521.09 681.982 L1520.53 681.982 L1519.98 681.982 L1519.42 681.982 L1518.86 681.982 L1518.3 681.982 L1517.74 681.982 L1517.18 681.982 L1516.62 681.982 L1516.06 681.982 L1515.5 681.982 L1514.94 681.982 L1514.38 681.982 L1513.82 681.982 L1513.26 681.982 L1512.71 681.982 L1512.15 681.982 L1511.59 681.982 L1511.03 681.982 L1510.47 681.982 L1509.91 681.982 L1509.35 681.982 L1508.79 681.982 L1508.23 681.982 L1507.67 681.982 L1507.11 681.982 L1506.55 681.982 L1505.99 681.982 L1505.44 681.982 L1504.88 681.982 L1504.32 681.982 L1503.76 681.982 L1503.2 681.982 L1502.64 681.982 L1502.08 681.982 L1501.52 681.982 L1500.96 681.982 L1500.4 681.982 L1499.84 681.982 L1499.28 681.982 L1498.72 681.982 L1498.16 681.982 L1497.61 681.982 L1497.05 681.982 L1496.49 681.982 L1495.93 681.982 L1495.37 681.982 L1494.81 681.982 L1494.25 681.982 L1493.69 681.982 L1493.13 681.982 L1492.57 681.982 L1492.01 681.982 L1491.45 681.982 L1490.89 681.982 L1490.34 681.982 L1489.78 681.982 L1489.22 681.982 L1488.66 681.982 L1488.1 681.982 L1487.54 681.982 L1486.98 681.982 L1486.42 681.982 L1485.86 681.982 L1485.3 681.982 L1484.74 681.982 L1484.18 681.982 L1483.62 681.982 L1483.07 681.982 L1482.51 681.982 L1481.95 681.982 L1481.39 681.982 L1480.83 681.982 L1480.27 681.982 L1479.71 681.982 L1479.15 681.982 L1478.59 681.982 L1478.03 681.982 L1477.47 681.982 L1476.91 681.982 L1476.35 681.982 L1475.79 681.982 L1475.24 681.982 L1474.68 681.982 L1474.12 681.982 L1473.56 681.982 L1473 681.982 L1472.44 681.982 L1471.88 681.982 L1471.32 681.982 L1470.76 681.982 L1470.2 681.982 L1469.64 681.982 L1469.08 681.982 L1468.52 681.982 L1467.97 681.982 L1467.41 681.982 L1466.85 681.982 L1466.29 681.982 L1465.73 681.982 L1465.17 681.982 L1464.61 681.982 L1464.05 681.982 L1463.49 681.982 L1462.93 681.982 L1462.37 681.982 L1461.81 681.982 L1461.25 681.982 L1460.7 681.982 L1460.14 681.982 L1459.58 681.982 L1459.02 681.982 L1458.46 681.982 L1457.9 681.982 L1457.34 681.982 L1456.78 681.982 L1456.22 681.982 L1455.66 681.982 L1455.1 681.982 L1454.54 681.982 L1453.98 681.982 L1453.42 681.982 L1452.87 681.982 L1452.31 681.982 L1451.75 681.982 L1451.19 681.982 L1450.63 681.982 L1450.07 681.982 L1449.51 681.982 L1448.95 681.982 L1448.39 681.982 L1447.83 681.982 L1447.27 681.982 L1446.71 681.982 L1446.15 681.982 L1445.6 681.982 L1445.04 681.982 L1444.48 681.982 L1443.92 681.982 L1443.36 681.982 L1442.8 681.982 L1442.24 681.982 L1441.68 681.982 L1441.12 681.982 L1440.56 681.982 L1440 681.982 L1439.44 681.982 L1438.88 681.982 L1438.33 681.982 L1437.77 681.982 L1437.21 681.982 L1436.65 681.982 L1436.09 681.982 L1435.53 681.982 L1434.97 681.982 L1434.41 681.982 L1433.85 681.982 L1433.29 681.982 L1432.73 681.982 L1432.17 681.982 L1431.61 681.982 L1431.05 681.982 L1430.5 681.982 L1429.94 681.982 L1429.38 681.982 L1428.82 681.982 L1428.26 681.982 L1427.7 681.982 L1427.14 681.982 L1426.58 681.982 L1426.02 681.982 L1425.46 681.982 L1424.9 681.982 L1424.34 681.982 L1423.78 681.982 L1423.23 681.982 L1422.67 681.982 L1422.11 681.982 L1421.55 681.982 L1420.99 681.982 L1420.43 681.982 L1419.87 681.982 L1419.31 681.982 L1418.75 681.982 L1418.19 681.982 L1417.63 681.982 L1417.07 681.982 L1416.51 681.982 L1415.95 681.982 L1415.4 681.982 L1414.84 681.982 L1414.28 681.982 L1413.72 681.982 L1413.16 681.982 L1412.6 681.982 L1412.04 681.982 L1411.48 681.982 L1410.92 681.982 L1410.36 681.982 L1409.8 681.982 L1409.24 681.982 L1408.68 681.982 L1408.13 681.982 L1407.57 681.982 L1407.01 681.982 L1406.45 681.982 L1405.89 681.982 L1405.33 681.982 L1404.77 681.982 L1404.21 681.982 L1403.65 681.982 L1403.09 681.982 L1402.53 681.982 L1401.97 681.982 L1401.41 681.982 L1400.86 681.982 L1400.3 681.982 L1399.74 681.982 L1399.18 681.982 L1398.62 681.982 L1398.06 681.982 L1397.5 681.982 L1396.94 681.982 L1396.38 681.982 L1395.82 681.982 L1395.26 681.982 L1394.7 681.982 L1394.14 681.982 L1393.58 681.982 L1393.03 681.982 L1392.47 681.982 L1391.91 681.982 L1391.35 681.982 L1390.79 681.982 L1390.23 681.982 L1389.67 681.982 L1389.11 681.982 L1388.55 681.982 L1387.99 681.982 L1387.43 681.982 L1386.87 681.982 L1386.31 681.982 L1385.76 681.982 L1385.2 681.982 L1384.64 681.982 L1384.08 681.982 L1383.52 681.982 L1382.96 681.982 L1382.4 681.982 L1381.84 681.982 L1381.28 681.982 L1380.72 681.982 L1380.16 681.982 L1379.6 681.982 L1379.04 681.982 L1378.49 681.982 L1377.93 681.982 L1377.37 681.982 L1376.81 681.982 L1376.25 681.982 L1375.69 681.982 L1375.13 681.982 L1374.57 681.982 L1374.01 681.982 L1373.45 681.982 L1372.89 681.982 L1372.33 681.982 L1371.77 681.982 L1371.21 681.982 L1370.66 681.982 L1370.1 681.982 L1369.54 681.982 L1368.98 681.982 L1368.42 681.982 L1367.86 681.982 L1367.3 681.982 L1366.74 681.982 L1366.18 681.982 L1365.62 681.982 L1365.06 681.982 L1364.5 681.982 L1363.94 681.982 L1363.39 681.982 L1362.83 681.982 L1362.27 681.982 L1361.71 681.982 L1361.15 681.982 L1360.59 681.982 L1360.03 681.982 L1359.47 681.982 L1358.91 681.982 L1358.35 681.982 L1357.79 681.982 L1357.23 681.982 L1356.67 681.982 L1356.12 681.982 L1355.56 681.982 L1355 681.982 L1354.44 681.982 L1353.88 681.982 L1353.32 681.982 L1352.76 681.982 L1352.2 681.982 L1351.64 681.982 L1351.08 681.982 L1350.52 681.982 L1349.96 681.982 L1349.4 681.982 L1348.84 681.982 L1348.29 681.982 L1347.73 681.982 L1347.17 681.982 L1346.61 681.982 L1346.05 681.982 L1345.49 681.982 L1344.93 681.982 L1344.37 681.982 L1343.81 681.982 L1343.25 681.982 L1342.69 681.982 L1342.13 681.982 L1341.57 681.982 L1341.02 681.982 L1340.46 681.982 L1339.9 681.982 L1339.34 681.982 L1338.78 681.982 L1338.22 681.982 L1337.66 681.982 L1337.1 681.982 L1336.54 681.982 L1335.98 681.982 L1335.42 681.982 L1334.86 681.982 L1334.3 681.982 L1333.75 681.982 L1333.19 681.982 L1332.63 681.982 L1332.07 681.982 L1331.51 681.982 L1330.95 681.982 L1330.39 681.982 L1329.83 681.982 L1329.27 681.982 L1328.71 681.982 L1328.15 681.982 L1327.59 681.982 L1327.03 681.982 L1326.47 681.982 L1325.92 681.982 L1325.36 681.982 L1324.8 681.982 L1324.24 681.982 L1323.68 681.982 L1323.12 681.982 L1322.56 681.982 L1322 681.982 L1321.44 681.982 L1320.88 681.982 L1320.32 681.982 L1319.76 681.982 L1319.2 681.982 L1318.65 681.982 L1318.09 681.982 L1317.53 681.982 L1316.97 681.982 L1316.41 681.982 L1315.85 681.982 L1315.29 681.982 L1314.73 681.982 L1314.17 681.982 L1313.61 681.982 L1313.05 681.982 L1312.49 681.982 L1311.93 681.982 L1311.38 681.982 L1310.82 681.982 L1310.26 681.982 L1309.7 681.982 L1309.14 681.982 L1308.58 681.982 L1308.02 681.982 L1307.46 681.982 L1306.9 681.982 L1306.34 681.982 L1305.78 681.982 L1305.22 681.982 L1304.66 681.982 L1304.1 681.982 L1303.55 681.982 L1302.99 681.982 L1302.43 681.982 L1301.87 681.982 L1301.31 681.982 L1300.75 681.982 L1300.19 681.982 L1299.63 681.982 L1299.07 681.982 L1298.51 681.982 L1297.95 681.982 L1297.39 681.982 L1296.83 681.982 L1296.28 681.982 L1295.72 681.982 L1295.16 681.982 L1294.6 681.982 L1294.04 681.982 L1293.48 681.982 L1292.92 681.982 L1292.36 681.982 L1291.8 681.982 L1291.24 681.982 L1290.68 681.982 L1290.12 681.982 L1289.56 681.982 L1289 681.982 L1288.45 681.982 L1287.89 681.982 L1287.33 681.982 L1286.77 681.982 L1286.21 681.982 L1285.65 681.982 L1285.09 681.982 L1284.53 681.982 L1283.97 681.982 L1283.41 681.982 L1282.85 681.982 L1282.29 681.982 L1281.73 681.982 L1281.18 681.982 L1280.62 681.982 L1280.06 681.982 L1279.5 681.982 L1278.94 681.982 L1278.38 681.982 L1277.82 681.982 L1277.26 681.982 L1276.7 681.982 L1276.14 681.982 L1275.58 681.982 L1275.02 681.982 L1274.46 681.982 L1273.91 681.982 L1273.35 681.982 L1272.79 681.982 L1272.23 681.982 L1271.67 681.982 L1271.11 681.982 L1270.55 681.982 L1269.99 681.982 L1269.43 681.982 L1268.87 681.982 L1268.31 681.982 L1267.75 681.982 L1267.19 681.982 L1266.63 681.982 L1266.08 681.982 L1265.52 681.982 L1264.96 681.982 L1264.4 681.982 L1263.84 681.982 L1263.28 681.982 L1262.72 681.982 L1262.16 681.982 L1261.6 681.982 L1261.04 681.982 L1260.48 681.982 L1259.92 681.982 L1259.36 681.982 L1258.81 681.982 L1258.25 681.982 L1257.69 681.982 L1257.13 681.982 L1256.57 681.982 L1256.01 681.982 L1255.45 681.982 L1254.89 681.982 L1254.33 681.982 L1253.77 681.982 L1253.21 681.982 L1252.65 681.982 L1252.09 681.982 L1251.54 681.982 L1250.98 681.982 L1250.42 681.982 L1249.86 681.982 L1249.3 681.982 L1248.74 681.982 L1248.18 681.982 L1247.62 681.982 L1247.06 681.982 L1246.5 681.982 L1245.94 681.982 L1245.38 681.982 L1244.82 681.982 L1244.26 681.982 L1243.71 681.982 L1243.15 681.982 L1242.59 681.982 L1242.03 681.982 L1241.47 681.982 L1240.91 681.982 L1240.35 681.982 L1239.79 681.982 L1239.23 681.982 L1238.67 681.982 L1238.11 681.982 L1237.55 681.982 L1236.99 681.982 L1236.44 681.982 L1235.88 681.982 L1235.32 681.982 L1234.76 681.982 L1234.2 681.982 L1233.64 681.982 L1233.08 681.982 L1232.52 681.982 L1231.96 681.982 L1231.4 681.982 L1230.84 681.982 L1230.28 681.982 L1229.72 681.982 L1229.17 681.982 L1228.61 681.982 L1228.05 681.982 L1227.49 681.982 L1226.93 681.982 L1226.37 681.982 L1225.81 681.982 L1225.25 681.982 L1224.69 681.982 L1224.13 681.982 L1223.57 681.982 L1223.01 681.982 L1222.45 681.982 L1221.89 681.982 L1221.34 681.982 L1220.78 681.982 L1220.22 681.982 L1219.66 681.982 L1219.1 681.982 L1218.54 681.982 L1217.98 681.982 L1217.42 681.982 L1216.86 681.982 L1216.3 681.982 L1215.74 681.982 L1215.18 681.982 L1214.62 681.982 L1214.07 681.982 L1213.51 681.982 L1212.95 681.982 L1212.39 681.982 L1211.83 681.982 L1211.27 681.982 L1210.71 681.982 L1210.15 681.982 L1209.59 681.982 L1209.03 681.982 L1208.47 681.982 L1207.91 681.982 L1207.35 681.982 L1206.8 681.982 L1206.24 681.982 L1205.68 681.982 L1205.12 681.982 L1204.56 681.982 L1204 681.982 L1203.44 681.982 L1202.88 681.982 L1202.32 681.982 L1201.76 681.982 L1201.2 681.982 L1200.64 681.982 L1200.08 681.982 L1199.52 681.982 L1198.97 681.982 L1198.41 681.982 L1197.85 681.982 L1197.29 681.982 L1196.73 681.982 L1196.17 681.982 L1195.61 681.982 L1195.05 681.982 L1194.49 681.982 L1193.93 681.982 L1193.37 681.982 L1192.81 681.982 L1192.25 681.982 L1191.7 681.982 L1191.14 681.982 L1190.58 681.982 L1190.02 681.982 L1189.46 681.982 L1188.9 681.982 L1188.34 681.982 L1187.78 681.982 L1187.22 681.982 L1186.66 681.982 L1186.1 681.982 L1185.54 681.982 L1184.98 681.982 L1184.43 681.982 L1183.87 681.982 L1183.31 681.982 L1182.75 681.982 L1182.19 681.982 L1181.63 681.982 L1181.07 681.982 L1180.51 681.982 L1179.95 681.982 L1179.39 681.982 L1178.83 681.982 L1178.27 681.982 L1177.71 681.982 L1177.15 681.982 L1176.6 681.982 L1176.04 681.982 L1175.48 681.982 L1174.92 681.982 L1174.36 681.982 L1173.8 681.982 L1173.24 681.982 L1172.68 681.982 L1172.12 681.982 L1171.56 681.982 L1171 681.982 L1170.44 681.982 L1169.88 681.982 L1169.33 681.982 L1168.77 681.982 L1168.21 681.982 L1167.65 681.982 L1167.09 681.982 L1166.53 681.982 L1165.97 681.982 L1165.41 681.982 L1164.85 681.982 L1164.29 681.982 L1163.73 681.982 L1163.17 681.982 L1162.61 681.982 L1162.05 681.982 L1161.5 681.982 L1160.94 681.982 L1160.38 681.982 L1159.82 681.982 L1159.26 681.982 L1158.7 681.982 L1158.14 681.982 L1157.58 681.982 L1157.02 681.982 L1156.46 681.982 L1155.9 681.982 L1155.34 681.982 L1154.78 681.982 L1154.23 681.982 L1153.67 681.982 L1153.11 681.982 L1152.55 681.982 L1151.99 681.982 L1151.43 681.982 L1150.87 681.982 L1150.31 681.982 L1149.75 681.982 L1149.19 681.982 L1148.63 681.982 L1148.07 681.982 L1147.51 681.982 L1146.96 681.982 L1146.4 681.982 L1145.84 681.982 L1145.28 681.982 L1144.72 681.982 L1144.16 681.982 L1143.6 681.982 L1143.04 681.982 L1142.48 681.982 L1141.92 681.982 L1141.36 681.982 L1140.8 681.982 L1140.24 681.982 L1139.68 681.982 L1139.13 681.982 L1138.57 681.982 L1138.01 681.982 L1137.45 681.982 L1136.89 681.982 L1136.33 681.982 L1135.77 681.982 L1135.21 681.982 L1134.65 681.982 L1134.09 681.982 L1133.53 681.982 L1132.97 681.982 L1132.41 681.982 L1131.86 681.982 L1131.3 681.982 L1130.74 681.982 L1130.18 681.982 L1129.62 681.982 L1129.06 681.982 L1128.5 681.982 L1127.94 681.982 L1127.38 681.982 L1126.82 681.982 L1126.26 681.982 L1125.7 681.982 L1125.14 681.982 L1124.59 681.982 L1124.03 681.982 L1123.47 681.982 L1122.91 681.982 L1122.35 681.982 L1121.79 681.982 L1121.23 681.982 L1120.67 681.982 L1120.11 681.982 L1119.55 681.982 L1118.99 681.982 L1118.43 681.982 L1117.87 681.982 L1117.31 681.982 L1116.76 681.982 L1116.2 681.982 L1115.64 681.982 L1115.08 681.982 L1114.52 681.982 L1113.96 681.982 L1113.4 681.982 L1112.84 681.982 L1112.28 681.982 L1111.72 681.982 L1111.16 681.982 L1110.6 681.982 L1110.04 681.982 L1109.49 681.982 L1108.93 681.982 L1108.37 681.982 L1107.81 681.982 L1107.25 681.982 L1106.69 681.982 L1106.13 681.982 L1105.57 681.982 L1105.01 681.982 L1104.45 681.982 L1103.89 681.982 L1103.33 681.982 L1102.77 681.982 L1102.22 681.982 L1101.66 681.982 L1101.1 681.982 L1100.54 681.982 L1099.98 681.982 L1099.42 681.982 L1098.86 681.982 L1098.3 681.982 L1097.74 681.982 L1097.18 681.982 L1096.62 681.982 L1096.06 681.982 L1095.5 681.982 L1094.94 681.982 L1094.39 681.982 L1093.83 681.982 L1093.27 681.982 L1092.71 681.982 L1092.15 681.982 L1091.59 681.982 L1091.03 681.982 L1090.47 681.982 L1089.91 681.982 L1089.35 681.982 L1088.79 681.982 L1088.23 681.982 L1087.67 681.982 L1087.12 681.982 L1086.56 681.982 L1086 681.982 L1085.44 681.982 L1084.88 681.982 L1084.32 681.982 L1083.76 681.982 L1083.2 681.982 L1082.64 681.982 L1082.08 681.982 L1081.52 681.982 L1080.96 681.982 L1080.4 681.982 L1079.85 681.982 L1079.29 681.982 L1078.73 681.982 L1078.17 681.982 L1077.61 681.982 L1077.05 681.982 L1076.49 681.982 L1075.93 681.982 L1075.37 681.982 L1074.81 681.982 L1074.25 681.982 L1073.69 681.982 L1073.13 681.982 L1072.57 681.982 L1072.02 681.982 L1071.46 681.982 L1070.9 681.982 L1070.34 681.982 L1069.78 681.982 L1069.22 681.982 L1068.66 681.982 L1068.1 681.982 L1067.54 681.982 L1066.98 681.982 L1066.42 681.982 L1065.86 681.982 L1065.3 681.982 L1064.75 681.982 L1064.19 681.982 L1063.63 681.982 L1063.07 681.982 L1062.51 681.982 L1061.95 681.982 L1061.39 681.982 L1060.83 681.982 L1060.27 681.982 L1059.71 681.982 L1059.15 681.982 L1058.59 681.982 L1058.03 681.982 L1057.48 681.982 L1056.92 681.982 L1056.36 681.982 L1055.8 681.982 L1055.24 681.982 L1054.68 681.982 L1054.12 681.982 L1053.56 681.982 L1053 681.982 L1052.44 681.982 L1051.88 681.982 L1051.32 681.982 L1050.76 681.982 L1050.2 681.982 L1049.65 681.982 L1049.09 681.982 L1048.53 681.982 L1047.97 681.982 L1047.41 681.982 L1046.85 681.982 L1046.29 681.982 L1045.73 681.982 L1045.17 681.982 L1044.61 681.982 L1044.05 681.982 L1043.49 681.982 L1042.93 681.982 L1042.38 681.982 L1041.82 681.982 L1041.26 681.982 L1040.7 681.982 L1040.14 681.982 L1039.58 681.982 L1039.02 681.982 L1038.46 681.982 L1037.9 681.982 L1037.34 681.982 L1036.78 681.982 L1036.22 681.982 L1035.66 681.982 L1035.1 681.982 L1034.55 681.982 L1033.99 681.982 L1033.43 681.982 L1032.87 681.982 L1032.31 681.982 L1031.75 681.982 L1031.19 681.982 L1030.63 681.982 L1030.07 681.982 L1029.51 681.982 L1028.95 681.982 L1028.39 681.982 L1027.83 681.982 L1027.28 681.982 L1026.72 681.982 L1026.16 681.982 L1025.6 681.982 L1025.04 681.982 L1024.48 681.982 L1023.92 681.982 L1023.36 681.982 L1022.8 681.982 L1022.24 681.982 L1021.68 681.982 L1021.12 681.982 L1020.56 681.982 L1020.01 681.982 L1019.45 681.982 L1018.89 681.982 L1018.33 681.982 L1017.77 681.982 L1017.21 681.982 L1016.65 681.982 L1016.09 681.982 L1015.53 681.982 L1014.97 681.982 L1014.41 681.982 L1013.85 681.982 L1013.29 681.982 L1012.73 681.982 L1012.18 681.982 L1011.62 681.982 L1011.06 681.982 L1010.5 681.982 L1009.94 681.982 L1009.38 681.982 L1008.82 681.982 L1008.26 681.982 L1007.7 681.982 L1007.14 681.982 L1006.58 681.982 L1006.02 681.982 L1005.46 681.982 L1004.91 681.982 L1004.35 681.982 L1003.79 681.982 L1003.23 681.982 L1002.67 681.982 L1002.11 681.982 L1001.55 681.982 L1000.99 681.982 L1000.43 681.982 L999.872 681.982 L999.313 681.982 L998.754 681.982 L998.194 681.982 L997.635 681.982 L997.076 681.982 L996.517 681.982 L995.957 681.982 L995.398 681.982 L994.839 681.982 L994.28 681.982 L993.72 681.982 L993.161 681.982 L992.602 681.982 L992.043 681.982 L991.483 681.982 L990.924 681.982 L990.365 681.982 L989.806 681.982 L989.246 681.982 L988.687 681.982 L988.128 681.982 L987.569 681.982 L987.009 681.982 L986.45 681.982 L985.891 681.982 L985.332 681.982 L984.772 681.982 L984.213 681.982 L983.654 681.982 L983.095 681.982 L982.535 681.982 L981.976 681.982 L981.417 681.982 L980.858 681.982 L980.298 681.982 L979.739 681.982 L979.18 681.982 L978.621 681.982 L978.061 681.982 L977.502 681.982 L976.943 681.982 L976.384 681.982 L975.824 681.982 L975.265 681.982 L974.706 681.982 L974.147 681.982 L973.587 681.982 L973.028 681.982 L972.469 681.982 L971.91 681.982 L971.35 681.982 L970.791 681.982 L970.232 681.982 L969.673 681.982 L969.113 681.982 L968.554 681.982 L967.995 681.982 L967.436 681.982 L966.876 681.982 L966.317 681.982 L965.758 681.982 L965.199 681.982 L964.639 681.982 L964.08 681.982 L963.521 681.982 L962.962 681.982 L962.402 681.982 L961.843 681.982 L961.284 681.982 L960.725 681.982 L960.165 681.982 L959.606 681.982 L959.047 681.982 L958.488 681.982 L957.928 681.982 L957.369 681.982 L956.81 681.982 L956.251 681.982 L955.691 681.982 L955.132 681.982 L954.573 681.982 L954.014 681.982 L953.454 681.982 L952.895 681.982 L952.336 681.982 L951.777 681.982 L951.217 681.982 L950.658 681.982 L950.099 681.982 L949.54 681.982 L948.98 681.982 L948.421 681.982 L947.862 681.982 L947.303 681.982 L946.743 681.982 L946.184 681.982 L945.625 681.982 L945.066 681.982 L944.506 681.982 L943.947 681.982 L943.388 681.982 L942.829 681.982 L942.269 681.982 L941.71 681.982 L941.151 681.982 L940.592 681.982 L940.032 681.982 L939.473 681.982 L938.914 681.982 L938.355 681.982 L937.795 681.982 L937.236 681.982 L936.677 681.982 L936.118 681.982 L935.558 681.982 L934.999 681.982 L934.44 681.982 L933.881 681.982 L933.321 681.982 L932.762 681.982 L932.203 681.982 L931.644 681.982 L931.084 681.982 L930.525 681.982 L929.966 681.982 L929.406 681.982 L928.847 681.982 L928.288 681.982 L927.729 681.982 L927.169 681.982 L926.61 681.982 L926.051 681.982 L925.492 681.982 L924.932 681.982 L924.373 681.982 L923.814 681.982 L923.255 681.982 L922.695 681.982 L922.136 681.982 L921.577 681.982 L921.018 681.982 L920.458 681.982 L919.899 681.982 L919.34 681.982 L918.781 681.982 L918.221 681.982 L917.662 681.982 L917.103 681.982 L916.544 681.982 L915.984 681.982 L915.425 681.982 L914.866 681.982 L914.307 681.982 L913.747 681.982 L913.188 681.982 L912.629 681.982 L912.07 681.982 L911.51 681.982 L910.951 681.982 L910.392 681.982 L909.833 681.982 L909.273 681.982 L908.714 681.982 L908.155 681.982 L907.596 681.982 L907.036 681.982 L906.477 681.982 L905.918 681.982 L905.359 681.982 L904.799 681.982 L904.24 681.982 L903.681 681.982 L903.122 681.982 L902.562 681.982 L902.003 681.982 L901.444 681.982 L900.885 681.982 L900.325 681.982 L899.766 681.982 L899.207 681.982 L898.648 681.982 L898.088 681.982 L897.529 681.982 L896.97 681.982 L896.411 681.982 L895.851 681.982 L895.292 681.982 L894.733 681.982 L894.174 681.982 L893.614 681.982 L893.055 681.982 L892.496 681.982 L891.937 681.982 L891.377 681.982 L890.818 681.982 L890.259 681.982 L889.7 681.982 L889.14 681.982 L888.581 681.982 L888.022 681.982 L887.463 681.982 L886.903 681.982 L886.344 681.982 L885.785 681.982 L885.226 681.982 L884.666 681.982 L884.107 681.982 L883.548 681.982 L882.989 681.982 L882.429 681.982 L881.87 681.982 L881.311 681.982 L880.752 681.982 L880.192 681.982 L879.633 681.982 L879.074 681.982 L878.515 681.982 L877.955 681.982 L877.396 681.982 L876.837 681.982 L876.278 681.982 L875.718 681.982 L875.159 681.982 L874.6 681.982 L874.041 681.982 L873.481 681.982 L872.922 681.982 L872.363 681.982 L871.804 681.982 L871.244 681.982 L870.685 681.982 L870.126 681.982 L869.567 681.982 L869.007 681.982 L868.448 681.982 L867.889 681.982 L867.33 681.982 L866.77 681.982 L866.211 681.982 L865.652 681.982 L865.093 681.982 L864.533 681.982 L863.974 681.982 L863.415 681.982 L862.856 681.982 L862.296 681.982 L861.737 681.982 L861.178 681.982 L860.619 681.982 L860.059 681.982 L859.5 681.982 L858.941 681.982 L858.382 681.982 L857.822 681.982 L857.263 681.982 L856.704 681.982 L856.145 681.982 L855.585 681.982 L855.026 681.982 L854.467 681.982 L853.908 681.982 L853.348 681.982 L852.789 681.982 L852.23 681.982 L851.671 681.982 L851.111 681.982 L850.552 681.982 L849.993 681.982 L849.434 681.982 L848.874 681.982 L848.315 681.982 L847.756 681.982 L847.197 681.982 L846.637 681.982 L846.078 681.982 L845.519 681.982 L844.96 681.982 L844.4 681.982 L843.841 681.982 L843.282 681.982 L842.723 681.982 L842.163 681.982 L841.604 681.982 L841.045 681.982 L840.486 681.982 L839.926 681.982 L839.367 681.982 L838.808 681.982 L838.249 681.982 L837.689 681.982 L837.13 681.982 L836.571 681.982 L836.012 681.982 L835.452 681.982 L834.893 681.982 L834.334 681.982 L833.775 681.982 L833.215 681.982 L832.656 681.982 L832.097 681.982 L831.538 681.982 L830.978 681.982 L830.419 681.982 L829.86 681.982 L829.301 681.982 L828.741 681.982 L828.182 681.982 L827.623 681.982 L827.064 681.982 L826.504 681.982 L825.945 681.982 L825.386 681.982 L824.827 681.982 L824.267 681.982 L823.708 681.982 L823.149 681.982 L822.59 681.982 L822.03 681.982 L821.471 681.982 L820.912 681.982 L820.353 681.982 L819.793 681.982 L819.234 681.982 L818.675 681.982 L818.116 681.982 L817.556 681.982 L816.997 681.982 L816.438 681.982 L815.879 681.982 L815.319 681.982 L814.76 681.982 L814.201 681.982 L813.642 681.982 L813.082 681.982 L812.523 681.982 L811.964 681.982 L811.405 681.982 L810.845 681.982 L810.286 681.982 L809.727 681.982 L809.168 681.982 L808.608 681.982 L808.049 681.982 L807.49 681.982 L806.931 681.982 L806.371 681.982 L805.812 681.982 L805.253 681.982 L804.693 681.982 L804.134 681.982 L803.575 681.982 L803.016 681.982 L802.456 681.982 L801.897 681.982 L801.338 681.982 L800.779 681.982 L800.219 681.982 L799.66 681.982 L799.101 681.982 L798.542 681.982 L797.982 681.982 L797.423 681.982 L796.864 681.982 L796.305 681.982 L795.745 681.982 L795.186 681.982 L794.627 681.982 L794.068 681.982 L793.508 681.982 L792.949 681.982 L792.39 681.982 L791.831 681.982 L791.271 681.982 L790.712 681.982 L790.153 681.982 L789.594 681.982 L789.034 681.982 L788.475 681.982 L787.916 681.982 L787.357 681.982 L786.797 681.982 L786.238 681.982 L785.679 681.982 L785.12 681.982 L784.56 681.982 L784.001 681.982 L783.442 681.982 L782.883 681.982 L782.323 681.982 L781.764 681.982 L781.205 681.982 L780.646 681.982 L780.086 681.982 L779.527 681.982 L778.968 681.982 L778.409 681.982 L777.849 681.982 L777.29 681.982 L776.731 681.982 L776.172 681.982 L775.612 681.982 L775.053 681.982 L774.494 681.982 L773.935 681.982 L773.375 681.982 L772.816 681.982 L772.257 681.982 L771.698 681.982 L771.138 681.982 L770.579 681.982 L770.02 681.982 L769.461 681.982 L768.901 681.982 L768.342 681.982 L767.783 681.982 L767.224 681.982 L766.664 681.982 L766.105 681.982 L765.546 681.982 L764.987 681.982 L764.427 681.982 L763.868 681.982 L763.309 681.982 L762.75 681.982 L762.19 681.982 L761.631 681.982 L761.072 681.982 L760.513 681.982 L759.953 681.982 L759.394 681.982 L758.835 681.982 L758.276 681.982 L757.716 681.982 L757.157 681.982 L756.598 681.982 L756.039 681.982 L755.479 681.982 L754.92 681.982 L754.361 681.982 L753.802 681.982 L753.242 681.982 L752.683 681.982 L752.124 681.982 L751.565 681.982 L751.005 681.982 L750.446 681.982 L749.887 681.982 L749.328 681.982 L748.768 681.982 L748.209 681.982 L747.65 681.982 L747.091 681.982 L746.531 681.982 L745.972 681.982 L745.413 681.982 L744.854 681.982 L744.294 681.982 L743.735 681.982 L743.176 681.982 L742.617 681.982 L742.057 681.982 L741.498 681.982 L740.939 681.982 L740.38 681.982 L739.82 681.982 L739.261 681.982 L738.702 681.982 L738.143 681.982 L737.583 681.982 L737.024 681.982 L736.465 681.982 L735.906 681.982 L735.346 681.982 L734.787 681.982 L734.228 681.982 L733.669 681.982 L733.109 681.982 L732.55 681.982 L731.991 681.982 L731.432 681.982 L730.872 681.982 L730.313 681.982 L729.754 681.982 L729.195 681.982 L728.635 681.982 L728.076 681.982 L727.517 681.982 L726.958 681.982 L726.398 681.982 L725.839 681.982 L725.28 681.982 L724.721 681.982 L724.161 681.982 L723.602 681.982 L723.043 681.982 L722.484 681.982 L721.924 681.982 L721.365 681.982 L720.806 681.982 L720.247 681.982  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.851 720.806,686.851 721.365,686.851 721.924,686.851 722.484,686.851 723.043,686.851 723.602,686.851 724.161,686.851 724.721,686.851 725.28,686.851 725.839,686.851 726.398,686.851 726.958,686.851 727.517,686.851 728.076,686.851 728.635,686.851 729.195,686.851 729.754,686.851 730.313,686.851 730.872,686.851 731.432,686.851 731.991,686.851 732.55,686.851 733.109,686.851 733.669,686.851 734.228,686.851 734.787,686.851 735.346,686.851 735.906,686.851 736.465,686.851 737.024,686.851 737.583,686.851 738.143,686.851 738.702,686.851 739.261,686.851 739.82,686.851 740.38,686.851 740.939,686.851 741.498,686.851 742.057,686.851 742.617,686.851 743.176,686.851 743.735,686.851 744.294,686.851 744.854,686.851 745.413,686.851 745.972,686.851 746.531,686.851 747.091,686.851 747.65,686.851 748.209,686.851 748.768,686.851 749.328,686.851 749.887,686.851 750.446,686.851 751.005,686.851 751.565,686.851 752.124,686.851 752.683,686.851 753.242,686.851 753.802,686.851 754.361,686.851 754.92,686.851 755.479,686.851 756.039,686.851 756.598,686.851 757.157,686.851 757.716,686.851 758.276,686.851 758.835,686.851 759.394,686.851 759.953,686.851 760.513,686.851 761.072,686.851 761.631,686.851 762.19,686.851 762.75,686.851 763.309,686.851 763.868,686.851 764.427,686.851 764.987,686.851 765.546,686.851 766.105,686.851 766.664,686.851 767.224,686.851 767.783,686.851 768.342,686.851 768.901,686.851 769.461,686.851 770.02,686.851 770.579,686.851 771.138,686.851 771.698,686.851 772.257,686.851 772.816,686.851 773.375,686.851 773.935,686.851 774.494,686.851 775.053,686.851 775.612,686.851 776.172,686.851 776.731,686.851 777.29,686.851 777.849,686.851 778.409,686.851 778.968,686.851 779.527,686.851 780.086,686.851 780.646,686.851 781.205,686.851 781.764,686.851 782.323,686.851 782.883,686.851 783.442,686.851 784.001,686.851 784.56,686.851 785.12,686.851 785.679,686.851 786.238,686.851 786.797,686.851 787.357,686.851 787.916,686.851 788.475,686.851 789.034,686.851 789.594,686.851 790.153,686.851 790.712,686.851 791.271,686.851 791.831,686.851 792.39,686.851 792.949,686.851 793.508,686.851 794.068,686.851 794.627,686.851 795.186,686.851 795.745,686.851 796.305,686.851 796.864,686.851 797.423,686.851 797.982,686.851 798.542,686.851 799.101,686.851 799.66,686.851 800.219,686.851 800.779,686.851 801.338,686.851 801.897,686.851 802.456,686.851 803.016,686.851 803.575,686.851 804.134,686.851 804.693,686.851 805.253,686.851 805.812,686.851 806.371,686.851 806.931,686.851 807.49,686.851 808.049,686.851 808.608,686.851 809.168,686.851 809.727,686.851 810.286,686.851 810.845,686.851 811.405,686.851 811.964,686.851 812.523,686.851 813.082,686.851 813.642,686.851 814.201,686.851 814.76,686.851 815.319,686.851 815.879,686.851 816.438,686.851 816.997,686.851 817.556,686.851 818.116,686.851 818.675,686.851 819.234,686.851 819.793,686.851 820.353,686.851 820.912,686.851 821.471,686.851 822.03,686.851 822.59,686.851 823.149,686.851 823.708,686.851 824.267,686.851 824.827,686.851 825.386,686.851 825.945,686.851 826.504,686.851 827.064,686.851 827.623,686.851 828.182,686.851 828.741,686.851 829.301,686.851 829.86,686.851 830.419,686.851 830.978,686.851 831.538,686.851 832.097,686.851 832.656,686.851 833.215,686.851 833.775,686.851 834.334,686.851 834.893,686.851 835.452,686.851 836.012,686.851 836.571,686.851 837.13,686.851 837.689,686.851 838.249,686.851 838.808,686.851 839.367,686.851 839.926,686.851 840.486,686.851 841.045,686.851 841.604,686.851 842.163,686.851 842.723,686.851 843.282,686.851 843.841,686.851 844.4,686.851 844.96,686.851 845.519,686.851 846.078,686.851 846.637,686.851 847.197,686.851 847.756,686.851 848.315,686.851 848.874,686.851 849.434,686.851 849.993,686.851 850.552,686.851 851.111,686.851 851.671,686.851 852.23,686.851 852.789,686.851 853.348,686.851 853.908,686.851 854.467,686.851 855.026,686.851 855.585,686.851 856.145,686.851 856.704,686.851 857.263,686.851 857.822,686.851 858.382,686.851 858.941,686.851 859.5,686.851 860.059,686.851 860.619,686.851 861.178,686.851 861.737,686.851 862.296,686.851 862.856,686.851 863.415,686.851 863.974,686.851 864.533,686.851 865.093,686.851 865.652,686.851 866.211,686.851 866.77,686.851 867.33,686.851 867.889,686.851 868.448,686.851 869.007,686.851 869.567,686.851 870.126,686.851 870.685,686.851 871.244,686.851 871.804,686.851 872.363,686.851 872.922,686.851 873.481,686.851 874.041,686.851 874.6,686.851 875.159,686.851 875.718,686.851 876.278,686.851 876.837,686.851 877.396,686.851 877.955,686.851 878.515,686.851 879.074,686.851 879.633,686.851 880.192,686.851 880.752,686.851 881.311,686.851 881.87,686.851 882.429,686.851 882.989,686.851 883.548,686.851 884.107,686.851 884.666,686.851 885.226,686.851 885.785,686.851 886.344,686.851 886.903,686.851 887.463,686.851 888.022,686.851 888.581,686.851 889.14,686.851 889.7,686.851 890.259,686.851 890.818,686.851 891.377,686.851 891.937,686.851 892.496,686.851 893.055,686.851 893.614,686.851 894.174,686.851 894.733,686.851 895.292,686.851 895.851,686.851 896.411,686.851 896.97,686.851 897.529,686.851 898.088,686.851 898.648,686.851 899.207,686.851 899.766,686.851 900.325,686.851 900.885,686.851 901.444,686.851 902.003,686.851 902.562,686.851 903.122,686.851 903.681,686.851 904.24,686.851 904.799,686.851 905.359,686.851 905.918,686.851 906.477,686.851 907.036,686.851 907.596,686.851 908.155,686.851 908.714,686.851 909.273,686.851 909.833,686.851 910.392,686.851 910.951,686.851 911.51,686.851 912.07,686.851 912.629,686.851 913.188,686.851 913.747,686.851 914.307,686.851 914.866,686.851 915.425,686.851 915.984,686.851 916.544,686.851 917.103,686.851 917.662,686.851 918.221,686.851 918.781,686.851 919.34,686.851 919.899,686.851 920.458,686.851 921.018,686.851 921.577,686.851 922.136,686.851 922.695,686.851 923.255,686.851 923.814,686.851 924.373,686.851 924.932,686.851 925.492,686.851 926.051,686.851 926.61,686.851 927.169,686.851 927.729,686.851 928.288,686.851 928.847,686.851 929.406,686.851 929.966,686.851 930.525,686.851 931.084,686.851 931.644,686.851 932.203,686.851 932.762,686.851 933.321,686.851 933.881,686.851 934.44,686.851 934.999,686.851 935.558,686.851 936.118,686.851 936.677,686.851 937.236,686.851 937.795,686.851 938.355,686.851 938.914,686.851 939.473,686.851 940.032,686.851 940.592,686.851 941.151,686.851 941.71,686.851 942.269,686.851 942.829,686.851 943.388,686.851 943.947,686.851 944.506,686.851 945.066,686.851 945.625,686.851 946.184,686.851 946.743,686.851 947.303,686.851 947.862,686.851 948.421,686.851 948.98,686.851 949.54,686.851 950.099,686.851 950.658,686.851 951.217,686.851 951.777,686.851 952.336,686.851 952.895,686.851 953.454,686.851 954.014,686.851 954.573,686.851 955.132,686.851 955.691,686.851 956.251,686.851 956.81,686.851 957.369,686.851 957.928,686.851 958.488,686.851 959.047,686.851 959.606,686.851 960.165,686.851 960.725,686.851 961.284,686.851 961.843,686.851 962.402,686.851 962.962,686.851 963.521,686.851 964.08,686.851 964.639,686.851 965.199,686.851 965.758,686.851 966.317,686.851 966.876,686.851 967.436,686.851 967.995,686.851 968.554,686.851 969.113,686.851 969.673,686.851 970.232,686.851 970.791,686.851 971.35,686.851 971.91,686.851 972.469,686.851 973.028,686.851 973.587,686.851 974.147,686.851 974.706,686.851 975.265,686.851 975.824,686.851 976.384,686.851 976.943,686.851 977.502,686.851 978.061,686.851 978.621,686.851 979.18,686.851 979.739,686.851 980.298,686.851 980.858,686.851 981.417,686.851 981.976,686.851 982.535,686.851 983.095,686.851 983.654,686.851 984.213,686.851 984.772,686.851 985.332,686.851 985.891,686.851 986.45,686.851 987.009,686.851 987.569,686.851 988.128,686.851 988.687,686.851 989.246,686.851 989.806,686.851 990.365,686.851 990.924,686.851 991.483,686.851 992.043,686.851 992.602,686.851 993.161,686.851 993.72,686.851 994.28,686.851 994.839,686.851 995.398,686.851 995.957,686.851 996.517,686.851 997.076,686.851 997.635,686.851 998.194,686.851 998.754,686.851 999.313,686.851 999.872,686.851 1000.43,686.851 1000.99,686.851 1001.55,686.851 1002.11,686.851 1002.67,686.851 1003.23,686.851 1003.79,686.851 1004.35,686.851 1004.91,686.851 1005.46,686.851 1006.02,686.851 1006.58,686.851 1007.14,686.851 1007.7,686.851 1008.26,686.851 1008.82,686.851 1009.38,686.851 1009.94,686.851 1010.5,686.851 1011.06,686.851 1011.62,686.851 1012.18,686.851 1012.73,686.851 1013.29,686.851 1013.85,686.851 1014.41,686.851 1014.97,686.851 1015.53,686.851 1016.09,686.851 1016.65,686.851 1017.21,686.851 1017.77,686.851 1018.33,686.851 1018.89,686.851 1019.45,686.851 1020.01,686.851 1020.56,686.851 1021.12,686.851 1021.68,686.851 1022.24,686.851 1022.8,686.851 1023.36,686.851 1023.92,686.851 1024.48,686.851 1025.04,686.851 1025.6,686.851 1026.16,686.851 1026.72,686.851 1027.28,686.851 1027.83,686.851 1028.39,686.851 1028.95,686.851 1029.51,686.851 1030.07,686.851 1030.63,686.851 1031.19,686.851 1031.75,686.851 1032.31,686.851 1032.87,686.851 1033.43,686.851 1033.99,686.851 1034.55,686.851 1035.1,686.851 1035.66,686.851 1036.22,686.851 1036.78,686.851 1037.34,686.851 1037.9,686.851 1038.46,686.851 1039.02,686.851 1039.58,686.851 1040.14,686.851 1040.7,686.851 1041.26,686.851 1041.82,686.851 1042.38,686.851 1042.93,686.851 1043.49,686.851 1044.05,686.851 1044.61,686.851 1045.17,686.851 1045.73,686.851 1046.29,686.851 1046.85,686.851 1047.41,686.851 1047.97,686.851 1048.53,686.851 1049.09,686.851 1049.65,686.851 1050.2,686.851 1050.76,686.851 1051.32,686.851 1051.88,686.851 1052.44,686.851 1053,686.851 1053.56,686.851 1054.12,686.851 1054.68,686.851 1055.24,686.851 1055.8,686.851 1056.36,686.851 1056.92,686.851 1057.48,686.851 1058.03,686.851 1058.59,686.851 1059.15,686.851 1059.71,686.851 1060.27,686.851 1060.83,686.851 1061.39,686.851 1061.95,686.851 1062.51,686.851 1063.07,686.851 1063.63,686.851 1064.19,686.851 1064.75,686.851 1065.3,686.851 1065.86,686.851 1066.42,686.851 1066.98,686.851 1067.54,686.851 1068.1,686.851 1068.66,686.851 1069.22,686.851 1069.78,686.851 1070.34,686.851 1070.9,686.851 1071.46,686.851 1072.02,686.851 1072.57,686.851 1073.13,686.851 1073.69,686.851 1074.25,686.851 1074.81,686.851 1075.37,686.851 1075.93,686.851 1076.49,686.851 1077.05,686.851 1077.61,686.851 1078.17,686.851 1078.73,686.851 1079.29,686.851 1079.85,686.851 1080.4,686.851 1080.96,686.851 1081.52,686.851 1082.08,686.851 1082.64,686.851 1083.2,686.851 1083.76,686.851 1084.32,686.851 1084.88,686.851 1085.44,686.851 1086,686.851 1086.56,686.851 1087.12,686.851 1087.67,686.851 1088.23,686.851 1088.79,686.851 1089.35,686.851 1089.91,686.851 1090.47,686.851 1091.03,686.851 1091.59,686.851 1092.15,686.851 1092.71,686.851 1093.27,686.851 1093.83,686.851 1094.39,686.851 1094.94,686.851 1095.5,686.851 1096.06,686.851 1096.62,686.851 1097.18,686.851 1097.74,686.851 1098.3,686.851 1098.86,686.851 1099.42,686.851 1099.98,686.851 1100.54,686.851 1101.1,686.851 1101.66,686.851 1102.22,686.851 1102.77,686.851 1103.33,686.851 1103.89,686.851 1104.45,686.851 1105.01,686.851 1105.57,686.851 1106.13,686.851 1106.69,686.851 1107.25,686.851 1107.81,686.851 1108.37,686.851 1108.93,686.851 1109.49,686.851 1110.04,686.851 1110.6,686.851 1111.16,686.851 1111.72,686.851 1112.28,686.851 1112.84,686.851 1113.4,686.851 1113.96,686.851 1114.52,686.851 1115.08,686.851 1115.64,686.851 1116.2,686.851 1116.76,686.851 1117.31,686.851 1117.87,686.851 1118.43,686.851 1118.99,686.851 1119.55,686.851 1120.11,686.851 1120.67,686.851 1121.23,686.851 1121.79,686.851 1122.35,686.851 1122.91,686.851 1123.47,686.851 1124.03,686.851 1124.59,686.851 1125.14,686.851 1125.7,686.851 1126.26,686.851 1126.82,686.851 1127.38,686.851 1127.94,686.851 1128.5,686.851 1129.06,686.851 1129.62,686.851 1130.18,686.851 1130.74,686.851 1131.3,686.851 1131.86,686.851 1132.41,686.851 1132.97,686.851 1133.53,686.851 1134.09,686.851 1134.65,686.851 1135.21,686.851 1135.77,686.851 1136.33,686.851 1136.89,686.851 1137.45,686.851 1138.01,686.851 1138.57,686.851 1139.13,686.851 1139.68,686.851 1140.24,686.851 1140.8,686.851 1141.36,686.851 1141.92,686.851 1142.48,686.851 1143.04,686.851 1143.6,686.851 1144.16,686.851 1144.72,686.851 1145.28,686.851 1145.84,686.851 1146.4,686.851 1146.96,686.851 1147.51,686.851 1148.07,686.851 1148.63,686.851 1149.19,686.851 1149.75,686.851 1150.31,686.851 1150.87,686.851 1151.43,686.851 1151.99,686.851 1152.55,686.851 1153.11,686.851 1153.67,686.851 1154.23,686.851 1154.78,686.851 1155.34,686.851 1155.9,686.851 1156.46,686.851 1157.02,686.851 1157.58,686.851 1158.14,686.851 1158.7,686.851 1159.26,686.851 1159.82,686.851 1160.38,686.851 1160.94,686.851 1161.5,686.851 1162.05,686.851 1162.61,686.851 1163.17,686.851 1163.73,686.851 1164.29,686.851 1164.85,686.851 1165.41,686.851 1165.97,686.851 1166.53,686.851 1167.09,686.851 1167.65,686.851 1168.21,686.851 1168.77,686.851 1169.33,686.851 1169.88,686.851 1170.44,686.851 1171,686.851 1171.56,686.851 1172.12,686.851 1172.68,686.851 1173.24,686.851 1173.8,686.851 1174.36,686.851 1174.92,686.851 1175.48,686.851 1176.04,686.851 1176.6,686.851 1177.15,686.851 1177.71,686.851 1178.27,686.851 1178.83,686.851 1179.39,686.851 1179.95,686.851 1180.51,686.851 1181.07,686.851 1181.63,686.851 1182.19,686.851 1182.75,686.851 1183.31,686.851 1183.87,686.851 1184.43,686.851 1184.98,686.851 1185.54,686.851 1186.1,686.851 1186.66,686.851 1187.22,686.851 1187.78,686.851 1188.34,686.851 1188.9,686.851 1189.46,686.851 1190.02,686.851 1190.58,686.851 1191.14,686.851 1191.7,686.851 1192.25,686.851 1192.81,686.851 1193.37,686.851 1193.93,686.851 1194.49,686.851 1195.05,686.851 1195.61,686.851 1196.17,686.851 1196.73,686.851 1197.29,686.851 1197.85,686.851 1198.41,686.851 1198.97,686.851 1199.52,686.851 1200.08,686.851 1200.64,686.851 1201.2,686.851 1201.76,686.851 1202.32,686.851 1202.88,686.851 1203.44,686.851 1204,686.851 1204.56,686.851 1205.12,686.851 1205.68,686.851 1206.24,686.851 1206.8,686.851 1207.35,686.851 1207.91,686.851 1208.47,686.851 1209.03,686.851 1209.59,686.851 1210.15,686.851 1210.71,686.851 1211.27,686.851 1211.83,686.851 1212.39,686.851 1212.95,686.851 1213.51,686.851 1214.07,686.851 1214.62,686.851 1215.18,686.851 1215.74,686.851 1216.3,686.851 1216.86,686.851 1217.42,686.851 1217.98,686.851 1218.54,686.851 1219.1,686.851 1219.66,686.851 1220.22,686.851 1220.78,686.851 1221.34,686.851 1221.89,686.851 1222.45,686.851 1223.01,686.851 1223.57,686.851 1224.13,686.851 1224.69,686.851 1225.25,686.851 1225.81,686.851 1226.37,686.851 1226.93,686.851 1227.49,686.851 1228.05,686.851 1228.61,686.851 1229.17,686.851 1229.72,686.851 1230.28,686.851 1230.84,686.851 1231.4,686.851 1231.96,686.851 1232.52,686.851 1233.08,686.851 1233.64,686.851 1234.2,686.851 1234.76,686.851 1235.32,686.851 1235.88,686.851 1236.44,686.851 1236.99,686.851 1237.55,686.851 1238.11,686.851 1238.67,686.851 1239.23,686.851 1239.79,686.851 1240.35,686.851 1240.91,686.851 1241.47,686.851 1242.03,686.851 1242.59,686.851 1243.15,686.851 1243.71,686.851 1244.26,686.851 1244.82,686.851 1245.38,686.851 1245.94,686.851 1246.5,686.851 1247.06,686.851 1247.62,686.851 1248.18,686.851 1248.74,686.851 1249.3,686.851 1249.86,686.851 1250.42,686.851 1250.98,686.851 1251.54,686.851 1252.09,686.851 1252.65,686.851 1253.21,686.851 1253.77,686.851 1254.33,686.851 1254.89,686.851 1255.45,686.851 1256.01,686.851 1256.57,686.851 1257.13,686.851 1257.69,686.851 1258.25,686.851 1258.81,686.851 1259.36,686.851 1259.92,686.851 1260.48,686.851 1261.04,686.851 1261.6,686.851 1262.16,686.851 1262.72,686.851 1263.28,686.851 1263.84,686.851 1264.4,686.851 1264.96,686.851 1265.52,686.851 1266.08,686.851 1266.63,686.851 1267.19,686.851 1267.75,686.851 1268.31,686.851 1268.87,686.851 1269.43,686.851 1269.99,686.851 1270.55,686.851 1271.11,686.851 1271.67,686.851 1272.23,686.851 1272.79,686.851 1273.35,686.851 1273.91,686.851 1274.46,686.851 1275.02,686.851 1275.58,686.851 1276.14,686.851 1276.7,686.851 1277.26,686.851 1277.82,686.851 1278.38,686.851 1278.94,686.851 1279.5,686.851 1280.06,686.851 1280.62,686.851 1281.18,686.851 1281.73,686.851 1282.29,686.851 1282.85,686.851 1283.41,686.851 1283.97,686.851 1284.53,686.851 1285.09,686.851 1285.65,686.851 1286.21,686.851 1286.77,686.851 1287.33,686.851 1287.89,686.851 1288.45,686.851 1289,686.851 1289.56,686.851 1290.12,686.851 1290.68,686.851 1291.24,686.851 1291.8,686.851 1292.36,686.851 1292.92,686.851 1293.48,686.851 1294.04,686.851 1294.6,686.851 1295.16,686.851 1295.72,686.851 1296.28,686.851 1296.83,686.851 1297.39,686.851 1297.95,686.851 1298.51,686.851 1299.07,686.851 1299.63,686.851 1300.19,686.851 1300.75,686.851 1301.31,686.851 1301.87,686.851 1302.43,686.851 1302.99,686.851 1303.55,686.851 1304.1,686.851 1304.66,686.851 1305.22,686.851 1305.78,686.851 1306.34,686.851 1306.9,686.851 1307.46,686.851 1308.02,686.851 1308.58,686.851 1309.14,686.851 1309.7,686.851 1310.26,686.851 1310.82,686.851 1311.38,686.851 1311.93,686.851 1312.49,686.851 1313.05,686.851 1313.61,686.851 1314.17,686.851 1314.73,686.851 1315.29,686.851 1315.85,686.851 1316.41,686.851 1316.97,686.851 1317.53,686.851 1318.09,686.851 1318.65,686.851 1319.2,686.851 1319.76,686.851 1320.32,686.851 1320.88,686.851 1321.44,686.851 1322,686.851 1322.56,686.851 1323.12,686.851 1323.68,686.851 1324.24,686.851 1324.8,686.851 1325.36,686.851 1325.92,686.851 1326.47,686.851 1327.03,686.851 1327.59,686.851 1328.15,686.851 1328.71,686.851 1329.27,686.851 1329.83,686.851 1330.39,686.851 1330.95,686.851 1331.51,686.851 1332.07,686.851 1332.63,686.851 1333.19,686.851 1333.75,686.851 1334.3,686.851 1334.86,686.851 1335.42,686.851 1335.98,686.851 1336.54,686.851 1337.1,686.851 1337.66,686.851 1338.22,686.851 1338.78,686.851 1339.34,686.851 1339.9,686.851 1340.46,686.851 1341.02,686.851 1341.57,686.851 1342.13,686.851 1342.69,686.851 1343.25,686.851 1343.81,686.851 1344.37,686.851 1344.93,686.851 1345.49,686.851 1346.05,686.851 1346.61,686.851 1347.17,686.851 1347.73,686.851 1348.29,686.851 1348.84,686.851 1349.4,686.851 1349.96,686.851 1350.52,686.851 1351.08,686.851 1351.64,686.851 1352.2,686.851 1352.76,686.851 1353.32,686.851 1353.88,686.851 1354.44,686.851 1355,686.851 1355.56,686.851 1356.12,686.851 1356.67,686.851 1357.23,686.851 1357.79,686.851 1358.35,686.851 1358.91,686.851 1359.47,686.851 1360.03,686.851 1360.59,686.851 1361.15,686.851 1361.71,686.851 1362.27,686.851 1362.83,686.851 1363.39,686.851 1363.94,686.851 1364.5,686.851 1365.06,686.851 1365.62,686.851 1366.18,686.851 1366.74,686.851 1367.3,686.851 1367.86,686.851 1368.42,686.851 1368.98,686.851 1369.54,686.851 1370.1,686.851 1370.66,686.851 1371.21,686.851 1371.77,686.851 1372.33,686.851 1372.89,686.851 1373.45,686.851 1374.01,686.851 1374.57,686.851 1375.13,686.851 1375.69,686.851 1376.25,686.851 1376.81,686.851 1377.37,686.851 1377.93,686.851 1378.49,686.851 1379.04,686.851 1379.6,686.851 1380.16,686.851 1380.72,686.851 1381.28,686.851 1381.84,686.851 1382.4,686.851 1382.96,686.851 1383.52,686.851 1384.08,686.851 1384.64,686.851 1385.2,686.851 1385.76,686.851 1386.31,686.851 1386.87,686.851 1387.43,686.851 1387.99,686.851 1388.55,686.851 1389.11,686.851 1389.67,686.851 1390.23,686.851 1390.79,686.851 1391.35,686.851 1391.91,686.851 1392.47,686.851 1393.03,686.851 1393.58,686.851 1394.14,686.851 1394.7,686.851 1395.26,686.851 1395.82,686.851 1396.38,686.851 1396.94,686.851 1397.5,686.851 1398.06,686.851 1398.62,686.851 1399.18,686.851 1399.74,686.851 1400.3,686.851 1400.86,686.851 1401.41,686.851 1401.97,686.851 1402.53,686.851 1403.09,686.851 1403.65,686.851 1404.21,686.851 1404.77,686.851 1405.33,686.851 1405.89,686.851 1406.45,686.851 1407.01,686.851 1407.57,686.851 1408.13,686.851 1408.68,686.851 1409.24,686.851 1409.8,686.851 1410.36,686.851 1410.92,686.851 1411.48,686.851 1412.04,686.851 1412.6,686.851 1413.16,686.851 1413.72,686.851 1414.28,686.851 1414.84,686.851 1415.4,686.851 1415.95,686.851 1416.51,686.851 1417.07,686.851 1417.63,686.851 1418.19,686.851 1418.75,686.851 1419.31,686.851 1419.87,686.851 1420.43,686.851 1420.99,686.851 1421.55,686.851 1422.11,686.851 1422.67,686.851 1423.23,686.851 1423.78,686.851 1424.34,686.851 1424.9,686.851 1425.46,686.851 1426.02,686.851 1426.58,686.851 1427.14,686.851 1427.7,686.851 1428.26,686.851 1428.82,686.851 1429.38,686.851 1429.94,686.851 1430.5,686.851 1431.05,686.851 1431.61,686.851 1432.17,686.851 1432.73,686.851 1433.29,686.851 1433.85,686.851 1434.41,686.851 1434.97,686.851 1435.53,686.851 1436.09,686.851 1436.65,686.851 1437.21,686.851 1437.77,686.851 1438.33,686.851 1438.88,686.851 1439.44,686.851 1440,686.851 1440.56,686.851 1441.12,686.851 1441.68,686.851 1442.24,686.851 1442.8,686.851 1443.36,686.851 1443.92,686.851 1444.48,686.851 1445.04,686.851 1445.6,686.851 1446.15,686.851 1446.71,686.851 1447.27,686.851 1447.83,686.851 1448.39,686.851 1448.95,686.851 1449.51,686.851 1450.07,686.851 1450.63,686.851 1451.19,686.851 1451.75,686.851 1452.31,686.851 1452.87,686.851 1453.42,686.851 1453.98,686.851 1454.54,686.851 1455.1,686.851 1455.66,686.851 1456.22,686.851 1456.78,686.851 1457.34,686.851 1457.9,686.851 1458.46,686.851 1459.02,686.851 1459.58,686.851 1460.14,686.851 1460.7,686.851 1461.25,686.851 1461.81,686.851 1462.37,686.851 1462.93,686.851 1463.49,686.851 1464.05,686.851 1464.61,686.851 1465.17,686.851 1465.73,686.851 1466.29,686.851 1466.85,686.851 1467.41,686.851 1467.97,686.851 1468.52,686.851 1469.08,686.851 1469.64,686.851 1470.2,686.851 1470.76,686.851 1471.32,686.851 1471.88,686.851 1472.44,686.851 1473,686.851 1473.56,686.851 1474.12,686.851 1474.68,686.851 1475.24,686.851 1475.79,686.851 1476.35,686.851 1476.91,686.851 1477.47,686.851 1478.03,686.851 1478.59,686.851 1479.15,686.851 1479.71,686.851 1480.27,686.851 1480.83,686.851 1481.39,686.851 1481.95,686.851 1482.51,686.851 1483.07,686.851 1483.62,686.851 1484.18,686.851 1484.74,686.851 1485.3,686.851 1485.86,686.851 1486.42,686.851 1486.98,686.851 1487.54,686.851 1488.1,686.851 1488.66,686.851 1489.22,686.851 1489.78,686.851 1490.34,686.851 1490.89,686.851 1491.45,686.851 1492.01,686.851 1492.57,686.851 1493.13,686.851 1493.69,686.851 1494.25,686.851 1494.81,686.851 1495.37,686.851 1495.93,686.851 1496.49,686.851 1497.05,686.851 1497.61,686.851 1498.16,686.851 1498.72,686.851 1499.28,686.851 1499.84,686.851 1500.4,686.851 1500.96,686.851 1501.52,686.851 1502.08,686.851 1502.64,686.851 1503.2,686.851 1503.76,686.851 1504.32,686.851 1504.88,686.851 1505.44,686.851 1505.99,686.851 1506.55,686.851 1507.11,686.851 1507.67,686.851 1508.23,686.851 1508.79,686.851 1509.35,686.851 1509.91,686.851 1510.47,686.851 1511.03,686.851 1511.59,686.851 1512.15,686.851 1512.71,686.851 1513.26,686.851 1513.82,686.851 1514.38,686.851 1514.94,686.851 1515.5,686.851 1516.06,686.851 1516.62,686.851 1517.18,686.851 1517.74,686.851 1518.3,686.851 1518.86,686.851 1519.42,686.851 1519.98,686.851 1520.53,686.851 1521.09,686.851 1521.65,686.851 1522.21,686.851 1522.77,686.851 1523.33,686.851 1523.89,686.851 1524.45,686.851 1525.01,686.851 1525.57,686.851 1526.13,686.851 1526.69,686.851 1527.25,686.851 1527.81,686.851 1528.36,686.851 1528.92,686.851 1529.48,686.851 1530.04,686.851 1530.6,686.851 1531.16,686.851 1531.72,686.851 1532.28,686.851 1532.84,686.851 1533.4,686.851 1533.96,686.851 1534.52,686.851 1535.08,686.851 1535.63,686.851 1536.19,686.851 1536.75,686.851 1537.31,686.851 1537.87,686.851 1538.43,686.851 1538.99,686.851 1539.55,686.851 1540.11,686.851 1540.67,686.851 1541.23,686.851 1541.79,686.851 1542.35,686.851 1542.9,686.851 1543.46,686.851 1544.02,686.851 1544.58,686.851 1545.14,686.851 1545.7,686.851 1546.26,686.851 1546.82,686.851 1547.38,686.851 1547.94,686.851 1548.5,686.851 1549.06,686.851 1549.62,686.851 1550.18,686.851 1550.73,686.851 1551.29,686.851 1551.85,686.851 1552.41,686.851 1552.97,686.851 1553.53,686.851 1554.09,686.851 1554.65,686.851 1555.21,686.851 1555.77,686.851 1556.33,686.851 1556.89,686.851 1557.45,686.851 1558,686.851 1558.56,686.851 1559.12,686.851 1559.68,686.851 1560.24,686.851 1560.8,686.851 1561.36,686.851 1561.92,686.851 1562.48,686.851 1563.04,686.851 1563.6,686.851 1564.16,686.851 1564.72,686.851 1565.28,686.851 1565.83,686.851 1566.39,686.851 1566.95,686.851 1567.51,686.851 1568.07,686.851 1568.63,686.851 1569.19,686.851 1569.75,686.851 1570.31,686.851 1570.87,686.851 1571.43,686.851 1571.99,686.851 1572.55,686.851 1573.1,686.851 1573.66,686.851 1574.22,686.851 1574.78,686.851 1575.34,686.851 1575.9,686.851 1576.46,686.851 1577.02,686.851 1577.58,686.851 1578.14,686.851 1578.7,686.851 1579.26,686.851 1579.82,686.851 1580.37,686.851 1580.93,686.851 1581.49,686.851 1582.05,686.851 1582.61,686.851 1583.17,686.851 1583.73,686.851 1584.29,686.851 1584.85,686.851 1585.41,686.851 1585.97,686.851 1586.53,686.851 1587.09,686.851 1587.65,686.851 1588.2,686.851 1588.76,686.851 1589.32,686.851 1589.88,686.851 1590.44,686.851 1591,686.851 1591.56,686.851 1592.12,686.851 1592.68,686.851 1593.24,686.851 1593.8,686.851 1594.36,686.851 1594.92,686.851 1595.47,686.851 1596.03,686.851 1596.59,686.851 1597.15,686.851 1597.71,686.851 1598.27,686.851 1598.83,686.851 1599.39,686.851 1599.95,686.851 1600.51,686.851 1601.07,686.851 1601.63,686.851 1602.19,686.851 1602.74,686.851 1603.3,686.851 1603.86,686.851 1604.42,686.851 1604.98,686.851 1605.54,686.851 1606.1,686.851 1606.66,686.851 1607.22,686.851 1607.78,686.851 1608.34,686.851 1608.9,686.851 1609.46,686.851 1610.02,686.851 1610.57,686.851 1611.13,686.851 1611.69,686.851 1612.25,686.851 1612.81,686.851 1613.37,686.851 1613.93,686.851 1614.49,686.851 1615.05,686.851 1615.61,686.851 1616.17,686.851 1616.73,686.851 1617.29,686.851 1617.84,686.851 1618.4,686.851 1618.96,686.851 1619.52,686.851 1620.08,686.851 1620.64,686.851 1621.2,686.851 1621.76,686.851 1622.32,686.851 1622.88,686.851 1623.44,686.851 1624,686.851 1624.56,686.851 1625.11,686.851 1625.67,686.851 1626.23,686.851 1626.79,686.851 1627.35,686.851 1627.91,686.851 1628.47,686.851 1629.03,686.851 1629.59,686.851 1630.15,686.851 1630.71,686.851 1631.27,686.851 1631.83,686.851 1632.39,686.851 1632.94,686.851 1633.5,686.851 1634.06,686.851 1634.62,686.851 1635.18,686.851 1635.74,686.851 1636.3,686.851 1636.86,686.851 1637.42,686.851 1637.98,686.851 1638.54,686.851 1639.1,686.851 1639.66,686.851 1640.21,686.851 1640.77,686.851 1641.33,686.851 1641.89,686.851 1642.45,686.851 1643.01,686.851 1643.57,686.851 1644.13,686.851 1644.69,686.851 1645.25,686.851 1645.81,686.851 1646.37,686.851 1646.93,686.851 1647.48,686.851 1648.04,686.851 1648.6,686.851 1649.16,686.851 1649.72,686.851 1650.28,686.851 1650.84,686.851 1651.4,686.851 1651.96,686.851 1652.52,686.851 1653.08,686.851 1653.64,686.851 1654.2,686.851 1654.76,686.851 1655.31,686.851 1655.87,686.851 1656.43,686.851 1656.99,686.851 1657.55,686.851 1658.11,686.851 1658.67,686.851 1659.23,686.851 1659.79,686.851 1660.35,686.851 1660.91,686.851 1661.47,686.851 1662.03,686.851 1662.58,686.851 1663.14,686.851 1663.7,686.851 1664.26,686.851 1664.82,686.851 1665.38,686.851 1665.94,686.851 1666.5,686.851 1667.06,686.851 1667.62,686.851 1668.18,686.851 1668.74,686.851 1669.3,686.851 1669.85,686.851 1670.41,686.851 1670.97,686.851 1671.53,686.851 1672.09,686.851 1672.65,686.851 1673.21,686.851 1673.77,686.851 1674.33,686.851 1674.89,686.851 1675.45,686.851 1676.01,686.851 1676.57,686.851 1677.13,686.851 1677.68,686.851 1678.24,686.851 1678.8,686.851 1679.36,686.851 1679.92,686.851 1680.48,686.851 1681.04,686.851 1681.6,686.851 1682.16,686.851 1682.72,686.851 1683.28,686.851 1683.84,686.851 1684.4,686.851 1684.95,686.851 1685.51,686.851 1686.07,686.851 1686.63,686.851 1687.19,686.851 1687.75,686.851 1688.31,686.851 1688.87,686.851 1689.43,686.851 1689.99,686.851 1690.55,686.851 1691.11,686.851 1691.67,686.851 1692.23,686.851 1692.78,686.851 1693.34,686.851 1693.9,686.851 1694.46,686.851 1695.02,686.851 1695.58,686.851 1696.14,686.851 1696.7,686.851 1697.26,686.851 1697.82,686.851 1698.38,686.851 1698.94,686.851 1699.5,686.851 1700.05,686.851 1700.61,686.851 1701.17,686.851 1701.73,686.851 1702.29,686.851 1702.85,686.851 1703.41,686.851 1703.97,686.851 1704.53,686.851 1705.09,686.851 1705.65,686.851 1706.21,686.851 1706.77,686.851 1707.32,686.851 1707.88,686.851 1708.44,686.851 1709,686.851 1709.56,686.851 1710.12,686.851 1710.68,686.851 1711.24,686.851 1711.8,686.851 1712.36,686.851 1712.92,686.851 1713.48,686.851 1714.04,686.851 1714.6,686.851 1715.15,686.851 1715.71,686.851 1716.27,686.851 1716.83,686.851 1717.39,686.851 1717.95,686.851 1718.51,686.851 1719.07,686.851 1719.63,686.851 1720.19,686.851 1720.75,686.851 1721.31,686.851 1721.87,686.851 1722.42,686.851 1722.98,686.851 1723.54,686.851 1724.1,686.851 1724.66,686.851 1725.22,686.851 1725.78,686.851 1726.34,686.851 1726.9,686.851 1727.46,686.851 1728.02,686.851 1728.58,686.851 1729.14,686.851 1729.69,686.851 1730.25,686.851 1730.81,686.851 1731.37,686.851 1731.93,686.851 1732.49,686.851 1733.05,686.851 1733.61,686.851 1734.17,686.851 1734.73,686.851 1735.29,686.851 1735.85,686.851 1736.41,686.851 1736.97,686.851 1737.52,686.851 1738.08,686.851 1738.64,686.851 1739.2,686.851 1739.76,686.851 1740.32,686.851 1740.88,686.851 1741.44,686.851 1742,686.851 1742.56,686.851 1743.12,686.851 1743.68,686.851 1744.24,686.851 1744.79,686.851 1745.35,686.851 1745.91,686.851 1746.47,686.851 1747.03,686.851 1747.59,686.851 1748.15,686.851 1748.71,686.851 1749.27,686.851 1749.83,686.851 1750.39,686.851 1750.95,686.851 1751.51,686.851 1752.06,686.851 1752.62,686.851 1753.18,686.851 1753.74,686.851 1754.3,686.851 1754.86,686.851 1755.42,686.851 1755.98,686.851 1756.54,686.851 1757.1,686.851 1757.66,686.851 1758.22,686.851 1758.78,686.851 1759.34,686.851 1759.89,686.851 1760.45,686.851 1761.01,686.851 1761.57,686.851 1762.13,686.851 1762.69,686.851 1763.25,686.851 1763.81,686.851 1764.37,686.851 1764.93,686.851 1765.49,686.851 1766.05,686.851 1766.61,686.851 1767.16,686.851 1767.72,686.851 1768.28,686.851 1768.84,686.851 1769.4,686.851 1769.96,686.851 1770.52,686.851 1771.08,686.851 1771.64,686.851 1772.2,686.851 1772.76,686.851 1773.32,686.851 1773.88,686.851 1774.43,686.851 1774.99,686.851 1775.55,686.851 1776.11,686.851 1776.67,686.851 1777.23,686.851 1777.79,686.851 1778.35,686.851 1778.91,686.851 1779.47,686.851 1780.03,686.851 1780.59,686.851 1781.15,686.851 1781.71,686.851 1782.26,686.851 1782.82,686.851 1783.38,686.851 1783.94,686.851 1784.5,686.851 1785.06,686.851 1785.62,686.851 1786.18,686.851 1786.74,686.851 1787.3,686.851 1787.86,686.851 1788.42,686.851 1788.98,686.851 1789.53,686.851 1790.09,686.851 1790.65,686.851 1791.21,686.851 1791.77,686.851 1792.33,686.851 1792.89,686.851 1793.45,686.851 1794.01,686.851 1794.57,686.851 1795.13,686.851 1795.69,686.851 1796.25,686.851 1796.8,686.851 1797.36,686.851 1797.92,686.851 1798.48,686.851 1799.04,686.851 1799.6,686.851 1800.16,686.851 1800.72,686.851 1801.28,686.851 1801.84,686.851 1802.4,686.851 1802.96,686.851 1803.52,686.851 1804.08,686.851 1804.63,686.851 1805.19,686.851 1805.75,686.851 1806.31,686.851 1806.87,686.851 1807.43,686.851 1807.99,686.851 1808.55,686.851 1809.11,686.851 1809.67,686.851 1810.23,686.851 1810.79,686.851 1811.35,686.851 1811.9,686.851 1812.46,686.851 1813.02,686.851 1813.58,686.851 1814.14,686.851 1814.7,686.851 1815.26,686.851 1815.82,686.851 1816.38,686.851 1816.94,686.851 1817.5,686.851 1818.06,686.851 1818.62,686.851 1819.18,686.851 1819.73,686.851 1820.29,686.851 1820.85,686.851 1821.41,686.851 1821.97,686.851 1822.53,686.851 1823.09,686.851 1823.65,686.851 1824.21,686.851 1824.77,686.851 1825.33,686.851 1825.89,686.851 1826.45,686.851 1827,686.851 1827.56,686.851 1828.12,686.851 1828.68,686.851 1829.24,686.851 1829.8,686.851 1830.36,686.851 1830.92,686.851 1831.48,686.851 1832.04,686.851 1832.6,686.851 1833.16,686.851 1833.72,686.851 1834.27,686.851 1834.83,686.851 1835.39,686.851 1835.95,686.851 1836.51,686.851 1837.07,686.851 1837.63,686.851 1838.19,686.851 \"/>\n<path clip-path=\"url(#clip373)\" d=\"M720.247 684.066 L720.806 684.066 L721.365 684.066 L721.924 684.066 L722.484 684.066 L723.043 684.066 L723.602 684.066 L724.161 684.066 L724.721 684.066 L725.28 684.066 L725.839 684.066 L726.398 684.066 L726.958 684.066 L727.517 684.066 L728.076 684.066 L728.635 684.066 L729.195 684.066 L729.754 684.066 L730.313 684.066 L730.872 684.066 L731.432 684.066 L731.991 684.066 L732.55 684.066 L733.109 684.066 L733.669 684.066 L734.228 684.066 L734.787 684.066 L735.346 684.066 L735.906 684.066 L736.465 684.066 L737.024 684.066 L737.583 684.066 L738.143 684.066 L738.702 684.066 L739.261 684.066 L739.82 684.066 L740.38 684.066 L740.939 684.066 L741.498 684.066 L742.057 684.066 L742.617 684.066 L743.176 684.066 L743.735 684.066 L744.294 684.066 L744.854 684.066 L745.413 684.066 L745.972 684.066 L746.531 684.066 L747.091 684.066 L747.65 684.066 L748.209 684.066 L748.768 684.066 L749.328 684.066 L749.887 684.066 L750.446 684.066 L751.005 684.066 L751.565 684.066 L752.124 684.066 L752.683 684.066 L753.242 684.066 L753.802 684.066 L754.361 684.066 L754.92 684.066 L755.479 684.066 L756.039 684.066 L756.598 684.066 L757.157 684.066 L757.716 684.066 L758.276 684.066 L758.835 684.066 L759.394 684.066 L759.953 684.066 L760.513 684.066 L761.072 684.066 L761.631 684.066 L762.19 684.066 L762.75 684.066 L763.309 684.066 L763.868 684.066 L764.427 684.066 L764.987 684.066 L765.546 684.066 L766.105 684.066 L766.664 684.066 L767.224 684.066 L767.783 684.066 L768.342 684.066 L768.901 684.066 L769.461 684.066 L770.02 684.066 L770.579 684.066 L771.138 684.066 L771.698 684.066 L772.257 684.066 L772.816 684.066 L773.375 684.066 L773.935 684.066 L774.494 684.066 L775.053 684.066 L775.612 684.066 L776.172 684.066 L776.731 684.066 L777.29 684.066 L777.849 684.066 L778.409 684.066 L778.968 684.066 L779.527 684.066 L780.086 684.066 L780.646 684.066 L781.205 684.066 L781.764 684.066 L782.323 684.066 L782.883 684.066 L783.442 684.066 L784.001 684.066 L784.56 684.066 L785.12 684.066 L785.679 684.066 L786.238 684.066 L786.797 684.066 L787.357 684.066 L787.916 684.066 L788.475 684.066 L789.034 684.066 L789.594 684.066 L790.153 684.066 L790.712 684.066 L791.271 684.066 L791.831 684.066 L792.39 684.066 L792.949 684.066 L793.508 684.066 L794.068 684.066 L794.627 684.066 L795.186 684.066 L795.745 684.066 L796.305 684.066 L796.864 684.066 L797.423 684.066 L797.982 684.066 L798.542 684.066 L799.101 684.066 L799.66 684.066 L800.219 684.066 L800.779 684.066 L801.338 684.066 L801.897 684.066 L802.456 684.066 L803.016 684.066 L803.575 684.066 L804.134 684.066 L804.693 684.066 L805.253 684.066 L805.812 684.066 L806.371 684.066 L806.931 684.066 L807.49 684.066 L808.049 684.066 L808.608 684.066 L809.168 684.066 L809.727 684.066 L810.286 684.066 L810.845 684.066 L811.405 684.066 L811.964 684.066 L812.523 684.066 L813.082 684.066 L813.642 684.066 L814.201 684.066 L814.76 684.066 L815.319 684.066 L815.879 684.066 L816.438 684.066 L816.997 684.066 L817.556 684.066 L818.116 684.066 L818.675 684.066 L819.234 684.066 L819.793 684.066 L820.353 684.066 L820.912 684.066 L821.471 684.066 L822.03 684.066 L822.59 684.066 L823.149 684.066 L823.708 684.066 L824.267 684.066 L824.827 684.066 L825.386 684.066 L825.945 684.066 L826.504 684.066 L827.064 684.066 L827.623 684.066 L828.182 684.066 L828.741 684.066 L829.301 684.066 L829.86 684.066 L830.419 684.066 L830.978 684.066 L831.538 684.066 L832.097 684.066 L832.656 684.066 L833.215 684.066 L833.775 684.066 L834.334 684.066 L834.893 684.066 L835.452 684.066 L836.012 684.066 L836.571 684.066 L837.13 684.066 L837.689 684.066 L838.249 684.066 L838.808 684.066 L839.367 684.066 L839.926 684.066 L840.486 684.066 L841.045 684.066 L841.604 684.066 L842.163 684.066 L842.723 684.066 L843.282 684.066 L843.841 684.066 L844.4 684.066 L844.96 684.066 L845.519 684.066 L846.078 684.066 L846.637 684.066 L847.197 684.066 L847.756 684.066 L848.315 684.066 L848.874 684.066 L849.434 684.066 L849.993 684.066 L850.552 684.066 L851.111 684.066 L851.671 684.066 L852.23 684.066 L852.789 684.066 L853.348 684.066 L853.908 684.066 L854.467 684.066 L855.026 684.066 L855.585 684.066 L856.145 684.066 L856.704 684.066 L857.263 684.066 L857.822 684.066 L858.382 684.066 L858.941 684.066 L859.5 684.066 L860.059 684.066 L860.619 684.066 L861.178 684.066 L861.737 684.066 L862.296 684.066 L862.856 684.066 L863.415 684.066 L863.974 684.066 L864.533 684.066 L865.093 684.066 L865.652 684.066 L866.211 684.066 L866.77 684.066 L867.33 684.066 L867.889 684.066 L868.448 684.066 L869.007 684.066 L869.567 684.066 L870.126 684.066 L870.685 684.066 L871.244 684.066 L871.804 684.066 L872.363 684.066 L872.922 684.066 L873.481 684.066 L874.041 684.066 L874.6 684.066 L875.159 684.066 L875.718 684.066 L876.278 684.066 L876.837 684.066 L877.396 684.066 L877.955 684.066 L878.515 684.066 L879.074 684.066 L879.633 684.066 L880.192 684.066 L880.752 684.066 L881.311 684.066 L881.87 684.066 L882.429 684.066 L882.989 684.066 L883.548 684.066 L884.107 684.066 L884.666 684.066 L885.226 684.066 L885.785 684.066 L886.344 684.066 L886.903 684.066 L887.463 684.066 L888.022 684.066 L888.581 684.066 L889.14 684.066 L889.7 684.066 L890.259 684.066 L890.818 684.066 L891.377 684.066 L891.937 684.066 L892.496 684.066 L893.055 684.066 L893.614 684.066 L894.174 684.066 L894.733 684.066 L895.292 684.066 L895.851 684.066 L896.411 684.066 L896.97 684.066 L897.529 684.066 L898.088 684.066 L898.648 684.066 L899.207 684.066 L899.766 684.066 L900.325 684.066 L900.885 684.066 L901.444 684.066 L902.003 684.066 L902.562 684.066 L903.122 684.066 L903.681 684.066 L904.24 684.066 L904.799 684.066 L905.359 684.066 L905.918 684.066 L906.477 684.066 L907.036 684.066 L907.596 684.066 L908.155 684.066 L908.714 684.066 L909.273 684.066 L909.833 684.066 L910.392 684.066 L910.951 684.066 L911.51 684.066 L912.07 684.066 L912.629 684.066 L913.188 684.066 L913.747 684.066 L914.307 684.066 L914.866 684.066 L915.425 684.066 L915.984 684.066 L916.544 684.066 L917.103 684.066 L917.662 684.066 L918.221 684.066 L918.781 684.066 L919.34 684.066 L919.899 684.066 L920.458 684.066 L921.018 684.066 L921.577 684.066 L922.136 684.066 L922.695 684.066 L923.255 684.066 L923.814 684.066 L924.373 684.066 L924.932 684.066 L925.492 684.066 L926.051 684.066 L926.61 684.066 L927.169 684.066 L927.729 684.066 L928.288 684.066 L928.847 684.066 L929.406 684.066 L929.966 684.066 L930.525 684.066 L931.084 684.066 L931.644 684.066 L932.203 684.066 L932.762 684.066 L933.321 684.066 L933.881 684.066 L934.44 684.066 L934.999 684.066 L935.558 684.066 L936.118 684.066 L936.677 684.066 L937.236 684.066 L937.795 684.066 L938.355 684.066 L938.914 684.066 L939.473 684.066 L940.032 684.066 L940.592 684.066 L941.151 684.066 L941.71 684.066 L942.269 684.066 L942.829 684.066 L943.388 684.066 L943.947 684.066 L944.506 684.066 L945.066 684.066 L945.625 684.066 L946.184 684.066 L946.743 684.066 L947.303 684.066 L947.862 684.066 L948.421 684.066 L948.98 684.066 L949.54 684.066 L950.099 684.066 L950.658 684.066 L951.217 684.066 L951.777 684.066 L952.336 684.066 L952.895 684.066 L953.454 684.066 L954.014 684.066 L954.573 684.066 L955.132 684.066 L955.691 684.066 L956.251 684.066 L956.81 684.066 L957.369 684.066 L957.928 684.066 L958.488 684.066 L959.047 684.066 L959.606 684.066 L960.165 684.066 L960.725 684.066 L961.284 684.066 L961.843 684.066 L962.402 684.066 L962.962 684.066 L963.521 684.066 L964.08 684.066 L964.639 684.066 L965.199 684.066 L965.758 684.066 L966.317 684.066 L966.876 684.066 L967.436 684.066 L967.995 684.066 L968.554 684.066 L969.113 684.066 L969.673 684.066 L970.232 684.066 L970.791 684.066 L971.35 684.066 L971.91 684.066 L972.469 684.066 L973.028 684.066 L973.587 684.066 L974.147 684.066 L974.706 684.066 L975.265 684.066 L975.824 684.066 L976.384 684.066 L976.943 684.066 L977.502 684.066 L978.061 684.066 L978.621 684.066 L979.18 684.066 L979.739 684.066 L980.298 684.066 L980.858 684.066 L981.417 684.066 L981.976 684.066 L982.535 684.066 L983.095 684.066 L983.654 684.066 L984.213 684.066 L984.772 684.066 L985.332 684.066 L985.891 684.066 L986.45 684.066 L987.009 684.066 L987.569 684.066 L988.128 684.066 L988.687 684.066 L989.246 684.066 L989.806 684.066 L990.365 684.066 L990.924 684.066 L991.483 684.066 L992.043 684.066 L992.602 684.066 L993.161 684.066 L993.72 684.066 L994.28 684.066 L994.839 684.066 L995.398 684.066 L995.957 684.066 L996.517 684.066 L997.076 684.066 L997.635 684.066 L998.194 684.066 L998.754 684.066 L999.313 684.066 L999.872 684.066 L1000.43 684.066 L1000.99 684.066 L1001.55 684.066 L1002.11 684.066 L1002.67 684.066 L1003.23 684.066 L1003.79 684.066 L1004.35 684.066 L1004.91 684.066 L1005.46 684.066 L1006.02 684.066 L1006.58 684.066 L1007.14 684.066 L1007.7 684.066 L1008.26 684.066 L1008.82 684.066 L1009.38 684.066 L1009.94 684.066 L1010.5 684.066 L1011.06 684.066 L1011.62 684.066 L1012.18 684.066 L1012.73 684.066 L1013.29 684.066 L1013.85 684.066 L1014.41 684.066 L1014.97 684.066 L1015.53 684.066 L1016.09 684.066 L1016.65 684.066 L1017.21 684.066 L1017.77 684.066 L1018.33 684.066 L1018.89 684.066 L1019.45 684.066 L1020.01 684.066 L1020.56 684.066 L1021.12 684.066 L1021.68 684.066 L1022.24 684.066 L1022.8 684.066 L1023.36 684.066 L1023.92 684.066 L1024.48 684.066 L1025.04 684.066 L1025.6 684.066 L1026.16 684.066 L1026.72 684.066 L1027.28 684.066 L1027.83 684.066 L1028.39 684.066 L1028.95 684.066 L1029.51 684.066 L1030.07 684.066 L1030.63 684.066 L1031.19 684.066 L1031.75 684.066 L1032.31 684.066 L1032.87 684.066 L1033.43 684.066 L1033.99 684.066 L1034.55 684.066 L1035.1 684.066 L1035.66 684.066 L1036.22 684.066 L1036.78 684.066 L1037.34 684.066 L1037.9 684.066 L1038.46 684.066 L1039.02 684.066 L1039.58 684.066 L1040.14 684.066 L1040.7 684.066 L1041.26 684.066 L1041.82 684.066 L1042.38 684.066 L1042.93 684.066 L1043.49 684.066 L1044.05 684.066 L1044.61 684.066 L1045.17 684.066 L1045.73 684.066 L1046.29 684.066 L1046.85 684.066 L1047.41 684.066 L1047.97 684.066 L1048.53 684.066 L1049.09 684.066 L1049.65 684.066 L1050.2 684.066 L1050.76 684.066 L1051.32 684.066 L1051.88 684.066 L1052.44 684.066 L1053 684.066 L1053.56 684.066 L1054.12 684.066 L1054.68 684.066 L1055.24 684.066 L1055.8 684.066 L1056.36 684.066 L1056.92 684.066 L1057.48 684.066 L1058.03 684.066 L1058.59 684.066 L1059.15 684.066 L1059.71 684.066 L1060.27 684.066 L1060.83 684.066 L1061.39 684.066 L1061.95 684.066 L1062.51 684.066 L1063.07 684.066 L1063.63 684.066 L1064.19 684.066 L1064.75 684.066 L1065.3 684.066 L1065.86 684.066 L1066.42 684.066 L1066.98 684.066 L1067.54 684.066 L1068.1 684.066 L1068.66 684.066 L1069.22 684.066 L1069.78 684.066 L1070.34 684.066 L1070.9 684.066 L1071.46 684.066 L1072.02 684.066 L1072.57 684.066 L1073.13 684.066 L1073.69 684.066 L1074.25 684.066 L1074.81 684.066 L1075.37 684.066 L1075.93 684.066 L1076.49 684.066 L1077.05 684.066 L1077.61 684.066 L1078.17 684.066 L1078.73 684.066 L1079.29 684.066 L1079.85 684.066 L1080.4 684.066 L1080.96 684.066 L1081.52 684.066 L1082.08 684.066 L1082.64 684.066 L1083.2 684.066 L1083.76 684.066 L1084.32 684.066 L1084.88 684.066 L1085.44 684.066 L1086 684.066 L1086.56 684.066 L1087.12 684.066 L1087.67 684.066 L1088.23 684.066 L1088.79 684.066 L1089.35 684.066 L1089.91 684.066 L1090.47 684.066 L1091.03 684.066 L1091.59 684.066 L1092.15 684.066 L1092.71 684.066 L1093.27 684.066 L1093.83 684.066 L1094.39 684.066 L1094.94 684.066 L1095.5 684.066 L1096.06 684.066 L1096.62 684.066 L1097.18 684.066 L1097.74 684.066 L1098.3 684.066 L1098.86 684.066 L1099.42 684.066 L1099.98 684.066 L1100.54 684.066 L1101.1 684.066 L1101.66 684.066 L1102.22 684.066 L1102.77 684.066 L1103.33 684.066 L1103.89 684.066 L1104.45 684.066 L1105.01 684.066 L1105.57 684.066 L1106.13 684.066 L1106.69 684.066 L1107.25 684.066 L1107.81 684.066 L1108.37 684.066 L1108.93 684.066 L1109.49 684.066 L1110.04 684.066 L1110.6 684.066 L1111.16 684.066 L1111.72 684.066 L1112.28 684.066 L1112.84 684.066 L1113.4 684.066 L1113.96 684.066 L1114.52 684.066 L1115.08 684.066 L1115.64 684.066 L1116.2 684.066 L1116.76 684.066 L1117.31 684.066 L1117.87 684.066 L1118.43 684.066 L1118.99 684.066 L1119.55 684.066 L1120.11 684.066 L1120.67 684.066 L1121.23 684.066 L1121.79 684.066 L1122.35 684.066 L1122.91 684.066 L1123.47 684.066 L1124.03 684.066 L1124.59 684.066 L1125.14 684.066 L1125.7 684.066 L1126.26 684.066 L1126.82 684.066 L1127.38 684.066 L1127.94 684.066 L1128.5 684.066 L1129.06 684.066 L1129.62 684.066 L1130.18 684.066 L1130.74 684.066 L1131.3 684.066 L1131.86 684.066 L1132.41 684.066 L1132.97 684.066 L1133.53 684.066 L1134.09 684.066 L1134.65 684.066 L1135.21 684.066 L1135.77 684.066 L1136.33 684.066 L1136.89 684.066 L1137.45 684.066 L1138.01 684.066 L1138.57 684.066 L1139.13 684.066 L1139.68 684.066 L1140.24 684.066 L1140.8 684.066 L1141.36 684.066 L1141.92 684.066 L1142.48 684.066 L1143.04 684.066 L1143.6 684.066 L1144.16 684.066 L1144.72 684.066 L1145.28 684.066 L1145.84 684.066 L1146.4 684.066 L1146.96 684.066 L1147.51 684.066 L1148.07 684.066 L1148.63 684.066 L1149.19 684.066 L1149.75 684.066 L1150.31 684.066 L1150.87 684.066 L1151.43 684.066 L1151.99 684.066 L1152.55 684.066 L1153.11 684.066 L1153.67 684.066 L1154.23 684.066 L1154.78 684.066 L1155.34 684.066 L1155.9 684.066 L1156.46 684.066 L1157.02 684.066 L1157.58 684.066 L1158.14 684.066 L1158.7 684.066 L1159.26 684.066 L1159.82 684.066 L1160.38 684.066 L1160.94 684.066 L1161.5 684.066 L1162.05 684.066 L1162.61 684.066 L1163.17 684.066 L1163.73 684.066 L1164.29 684.066 L1164.85 684.066 L1165.41 684.066 L1165.97 684.066 L1166.53 684.066 L1167.09 684.066 L1167.65 684.066 L1168.21 684.066 L1168.77 684.066 L1169.33 684.066 L1169.88 684.066 L1170.44 684.066 L1171 684.066 L1171.56 684.066 L1172.12 684.066 L1172.68 684.066 L1173.24 684.066 L1173.8 684.066 L1174.36 684.066 L1174.92 684.066 L1175.48 684.066 L1176.04 684.066 L1176.6 684.066 L1177.15 684.066 L1177.71 684.066 L1178.27 684.066 L1178.83 684.066 L1179.39 684.066 L1179.95 684.066 L1180.51 684.066 L1181.07 684.066 L1181.63 684.066 L1182.19 684.066 L1182.75 684.066 L1183.31 684.066 L1183.87 684.066 L1184.43 684.066 L1184.98 684.066 L1185.54 684.066 L1186.1 684.066 L1186.66 684.066 L1187.22 684.066 L1187.78 684.066 L1188.34 684.066 L1188.9 684.066 L1189.46 684.066 L1190.02 684.066 L1190.58 684.066 L1191.14 684.066 L1191.7 684.066 L1192.25 684.066 L1192.81 684.066 L1193.37 684.066 L1193.93 684.066 L1194.49 684.066 L1195.05 684.066 L1195.61 684.066 L1196.17 684.066 L1196.73 684.066 L1197.29 684.066 L1197.85 684.066 L1198.41 684.066 L1198.97 684.066 L1199.52 684.066 L1200.08 684.066 L1200.64 684.066 L1201.2 684.066 L1201.76 684.066 L1202.32 684.066 L1202.88 684.066 L1203.44 684.066 L1204 684.066 L1204.56 684.066 L1205.12 684.066 L1205.68 684.066 L1206.24 684.066 L1206.8 684.066 L1207.35 684.066 L1207.91 684.066 L1208.47 684.066 L1209.03 684.066 L1209.59 684.066 L1210.15 684.066 L1210.71 684.066 L1211.27 684.066 L1211.83 684.066 L1212.39 684.066 L1212.95 684.066 L1213.51 684.066 L1214.07 684.066 L1214.62 684.066 L1215.18 684.066 L1215.74 684.066 L1216.3 684.066 L1216.86 684.066 L1217.42 684.066 L1217.98 684.066 L1218.54 684.066 L1219.1 684.066 L1219.66 684.066 L1220.22 684.066 L1220.78 684.066 L1221.34 684.066 L1221.89 684.066 L1222.45 684.066 L1223.01 684.066 L1223.57 684.066 L1224.13 684.066 L1224.69 684.066 L1225.25 684.066 L1225.81 684.066 L1226.37 684.066 L1226.93 684.066 L1227.49 684.066 L1228.05 684.066 L1228.61 684.066 L1229.17 684.066 L1229.72 684.066 L1230.28 684.066 L1230.84 684.066 L1231.4 684.066 L1231.96 684.066 L1232.52 684.066 L1233.08 684.066 L1233.64 684.066 L1234.2 684.066 L1234.76 684.066 L1235.32 684.066 L1235.88 684.066 L1236.44 684.066 L1236.99 684.066 L1237.55 684.066 L1238.11 684.066 L1238.67 684.066 L1239.23 684.066 L1239.79 684.066 L1240.35 684.066 L1240.91 684.066 L1241.47 684.066 L1242.03 684.066 L1242.59 684.066 L1243.15 684.066 L1243.71 684.066 L1244.26 684.066 L1244.82 684.066 L1245.38 684.066 L1245.94 684.066 L1246.5 684.066 L1247.06 684.066 L1247.62 684.066 L1248.18 684.066 L1248.74 684.066 L1249.3 684.066 L1249.86 684.066 L1250.42 684.066 L1250.98 684.066 L1251.54 684.066 L1252.09 684.066 L1252.65 684.066 L1253.21 684.066 L1253.77 684.066 L1254.33 684.066 L1254.89 684.066 L1255.45 684.066 L1256.01 684.066 L1256.57 684.066 L1257.13 684.066 L1257.69 684.066 L1258.25 684.066 L1258.81 684.066 L1259.36 684.066 L1259.92 684.066 L1260.48 684.066 L1261.04 684.066 L1261.6 684.066 L1262.16 684.066 L1262.72 684.066 L1263.28 684.066 L1263.84 684.066 L1264.4 684.066 L1264.96 684.066 L1265.52 684.066 L1266.08 684.066 L1266.63 684.066 L1267.19 684.066 L1267.75 684.066 L1268.31 684.066 L1268.87 684.066 L1269.43 684.066 L1269.99 684.066 L1270.55 684.066 L1271.11 684.066 L1271.67 684.066 L1272.23 684.066 L1272.79 684.066 L1273.35 684.066 L1273.91 684.066 L1274.46 684.066 L1275.02 684.066 L1275.58 684.066 L1276.14 684.066 L1276.7 684.066 L1277.26 684.066 L1277.82 684.066 L1278.38 684.066 L1278.94 684.066 L1279.5 684.066 L1280.06 684.066 L1280.62 684.066 L1281.18 684.066 L1281.73 684.066 L1282.29 684.066 L1282.85 684.066 L1283.41 684.066 L1283.97 684.066 L1284.53 684.066 L1285.09 684.066 L1285.65 684.066 L1286.21 684.066 L1286.77 684.066 L1287.33 684.066 L1287.89 684.066 L1288.45 684.066 L1289 684.066 L1289.56 684.066 L1290.12 684.066 L1290.68 684.066 L1291.24 684.066 L1291.8 684.066 L1292.36 684.066 L1292.92 684.066 L1293.48 684.066 L1294.04 684.066 L1294.6 684.066 L1295.16 684.066 L1295.72 684.066 L1296.28 684.066 L1296.83 684.066 L1297.39 684.066 L1297.95 684.066 L1298.51 684.066 L1299.07 684.066 L1299.63 684.066 L1300.19 684.066 L1300.75 684.066 L1301.31 684.066 L1301.87 684.066 L1302.43 684.066 L1302.99 684.066 L1303.55 684.066 L1304.1 684.066 L1304.66 684.066 L1305.22 684.066 L1305.78 684.066 L1306.34 684.066 L1306.9 684.066 L1307.46 684.066 L1308.02 684.066 L1308.58 684.066 L1309.14 684.066 L1309.7 684.066 L1310.26 684.066 L1310.82 684.066 L1311.38 684.066 L1311.93 684.066 L1312.49 684.066 L1313.05 684.066 L1313.61 684.066 L1314.17 684.066 L1314.73 684.066 L1315.29 684.066 L1315.85 684.066 L1316.41 684.066 L1316.97 684.066 L1317.53 684.066 L1318.09 684.066 L1318.65 684.066 L1319.2 684.066 L1319.76 684.066 L1320.32 684.066 L1320.88 684.066 L1321.44 684.066 L1322 684.066 L1322.56 684.066 L1323.12 684.066 L1323.68 684.066 L1324.24 684.066 L1324.8 684.066 L1325.36 684.066 L1325.92 684.066 L1326.47 684.066 L1327.03 684.066 L1327.59 684.066 L1328.15 684.066 L1328.71 684.066 L1329.27 684.066 L1329.83 684.066 L1330.39 684.066 L1330.95 684.066 L1331.51 684.066 L1332.07 684.066 L1332.63 684.066 L1333.19 684.066 L1333.75 684.066 L1334.3 684.066 L1334.86 684.066 L1335.42 684.066 L1335.98 684.066 L1336.54 684.066 L1337.1 684.066 L1337.66 684.066 L1338.22 684.066 L1338.78 684.066 L1339.34 684.066 L1339.9 684.066 L1340.46 684.066 L1341.02 684.066 L1341.57 684.066 L1342.13 684.066 L1342.69 684.066 L1343.25 684.066 L1343.81 684.066 L1344.37 684.066 L1344.93 684.066 L1345.49 684.066 L1346.05 684.066 L1346.61 684.066 L1347.17 684.066 L1347.73 684.066 L1348.29 684.066 L1348.84 684.066 L1349.4 684.066 L1349.96 684.066 L1350.52 684.066 L1351.08 684.066 L1351.64 684.066 L1352.2 684.066 L1352.76 684.066 L1353.32 684.066 L1353.88 684.066 L1354.44 684.066 L1355 684.066 L1355.56 684.066 L1356.12 684.066 L1356.67 684.066 L1357.23 684.066 L1357.79 684.066 L1358.35 684.066 L1358.91 684.066 L1359.47 684.066 L1360.03 684.066 L1360.59 684.066 L1361.15 684.066 L1361.71 684.066 L1362.27 684.066 L1362.83 684.066 L1363.39 684.066 L1363.94 684.066 L1364.5 684.066 L1365.06 684.066 L1365.62 684.066 L1366.18 684.066 L1366.74 684.066 L1367.3 684.066 L1367.86 684.066 L1368.42 684.066 L1368.98 684.066 L1369.54 684.066 L1370.1 684.066 L1370.66 684.066 L1371.21 684.066 L1371.77 684.066 L1372.33 684.066 L1372.89 684.066 L1373.45 684.066 L1374.01 684.066 L1374.57 684.066 L1375.13 684.066 L1375.69 684.066 L1376.25 684.066 L1376.81 684.066 L1377.37 684.066 L1377.93 684.066 L1378.49 684.066 L1379.04 684.066 L1379.6 684.066 L1380.16 684.066 L1380.72 684.066 L1381.28 684.066 L1381.84 684.066 L1382.4 684.066 L1382.96 684.066 L1383.52 684.066 L1384.08 684.066 L1384.64 684.066 L1385.2 684.066 L1385.76 684.066 L1386.31 684.066 L1386.87 684.066 L1387.43 684.066 L1387.99 684.066 L1388.55 684.066 L1389.11 684.066 L1389.67 684.066 L1390.23 684.066 L1390.79 684.066 L1391.35 684.066 L1391.91 684.066 L1392.47 684.066 L1393.03 684.066 L1393.58 684.066 L1394.14 684.066 L1394.7 684.066 L1395.26 684.066 L1395.82 684.066 L1396.38 684.066 L1396.94 684.066 L1397.5 684.066 L1398.06 684.066 L1398.62 684.066 L1399.18 684.066 L1399.74 684.066 L1400.3 684.066 L1400.86 684.066 L1401.41 684.066 L1401.97 684.066 L1402.53 684.066 L1403.09 684.066 L1403.65 684.066 L1404.21 684.066 L1404.77 684.066 L1405.33 684.066 L1405.89 684.066 L1406.45 684.066 L1407.01 684.066 L1407.57 684.066 L1408.13 684.066 L1408.68 684.066 L1409.24 684.066 L1409.8 684.066 L1410.36 684.066 L1410.92 684.066 L1411.48 684.066 L1412.04 684.066 L1412.6 684.066 L1413.16 684.066 L1413.72 684.066 L1414.28 684.066 L1414.84 684.066 L1415.4 684.066 L1415.95 684.066 L1416.51 684.066 L1417.07 684.066 L1417.63 684.066 L1418.19 684.066 L1418.75 684.066 L1419.31 684.066 L1419.87 684.066 L1420.43 684.066 L1420.99 684.066 L1421.55 684.066 L1422.11 684.066 L1422.67 684.066 L1423.23 684.066 L1423.78 684.066 L1424.34 684.066 L1424.9 684.066 L1425.46 684.066 L1426.02 684.066 L1426.58 684.066 L1427.14 684.066 L1427.7 684.066 L1428.26 684.066 L1428.82 684.066 L1429.38 684.066 L1429.94 684.066 L1430.5 684.066 L1431.05 684.066 L1431.61 684.066 L1432.17 684.066 L1432.73 684.066 L1433.29 684.066 L1433.85 684.066 L1434.41 684.066 L1434.97 684.066 L1435.53 684.066 L1436.09 684.066 L1436.65 684.066 L1437.21 684.066 L1437.77 684.066 L1438.33 684.066 L1438.88 684.066 L1439.44 684.066 L1440 684.066 L1440.56 684.066 L1441.12 684.066 L1441.68 684.066 L1442.24 684.066 L1442.8 684.066 L1443.36 684.066 L1443.92 684.066 L1444.48 684.066 L1445.04 684.066 L1445.6 684.066 L1446.15 684.066 L1446.71 684.066 L1447.27 684.066 L1447.83 684.066 L1448.39 684.066 L1448.95 684.066 L1449.51 684.066 L1450.07 684.066 L1450.63 684.066 L1451.19 684.066 L1451.75 684.066 L1452.31 684.066 L1452.87 684.066 L1453.42 684.066 L1453.98 684.066 L1454.54 684.066 L1455.1 684.066 L1455.66 684.066 L1456.22 684.066 L1456.78 684.066 L1457.34 684.066 L1457.9 684.066 L1458.46 684.066 L1459.02 684.066 L1459.58 684.066 L1460.14 684.066 L1460.7 684.066 L1461.25 684.066 L1461.81 684.066 L1462.37 684.066 L1462.93 684.066 L1463.49 684.066 L1464.05 684.066 L1464.61 684.066 L1465.17 684.066 L1465.73 684.066 L1466.29 684.066 L1466.85 684.066 L1467.41 684.066 L1467.97 684.066 L1468.52 684.066 L1469.08 684.066 L1469.64 684.066 L1470.2 684.066 L1470.76 684.066 L1471.32 684.066 L1471.88 684.066 L1472.44 684.066 L1473 684.066 L1473.56 684.066 L1474.12 684.066 L1474.68 684.066 L1475.24 684.066 L1475.79 684.066 L1476.35 684.066 L1476.91 684.066 L1477.47 684.066 L1478.03 684.066 L1478.59 684.066 L1479.15 684.066 L1479.71 684.066 L1480.27 684.066 L1480.83 684.066 L1481.39 684.066 L1481.95 684.066 L1482.51 684.066 L1483.07 684.066 L1483.62 684.066 L1484.18 684.066 L1484.74 684.066 L1485.3 684.066 L1485.86 684.066 L1486.42 684.066 L1486.98 684.066 L1487.54 684.066 L1488.1 684.066 L1488.66 684.066 L1489.22 684.066 L1489.78 684.066 L1490.34 684.066 L1490.89 684.066 L1491.45 684.066 L1492.01 684.066 L1492.57 684.066 L1493.13 684.066 L1493.69 684.066 L1494.25 684.066 L1494.81 684.066 L1495.37 684.066 L1495.93 684.066 L1496.49 684.066 L1497.05 684.066 L1497.61 684.066 L1498.16 684.066 L1498.72 684.066 L1499.28 684.066 L1499.84 684.066 L1500.4 684.066 L1500.96 684.066 L1501.52 684.066 L1502.08 684.066 L1502.64 684.066 L1503.2 684.066 L1503.76 684.066 L1504.32 684.066 L1504.88 684.066 L1505.44 684.066 L1505.99 684.066 L1506.55 684.066 L1507.11 684.066 L1507.67 684.066 L1508.23 684.066 L1508.79 684.066 L1509.35 684.066 L1509.91 684.066 L1510.47 684.066 L1511.03 684.066 L1511.59 684.066 L1512.15 684.066 L1512.71 684.066 L1513.26 684.066 L1513.82 684.066 L1514.38 684.066 L1514.94 684.066 L1515.5 684.066 L1516.06 684.066 L1516.62 684.066 L1517.18 684.066 L1517.74 684.066 L1518.3 684.066 L1518.86 684.066 L1519.42 684.066 L1519.98 684.066 L1520.53 684.066 L1521.09 684.066 L1521.65 684.066 L1522.21 684.066 L1522.77 684.066 L1523.33 684.066 L1523.89 684.066 L1524.45 684.066 L1525.01 684.066 L1525.57 684.066 L1526.13 684.066 L1526.69 684.066 L1527.25 684.066 L1527.81 684.066 L1528.36 684.066 L1528.92 684.066 L1529.48 684.066 L1530.04 684.066 L1530.6 684.066 L1531.16 684.066 L1531.72 684.066 L1532.28 684.066 L1532.84 684.066 L1533.4 684.066 L1533.96 684.066 L1534.52 684.066 L1535.08 684.066 L1535.63 684.066 L1536.19 684.066 L1536.75 684.066 L1537.31 684.066 L1537.87 684.066 L1538.43 684.066 L1538.99 684.066 L1539.55 684.066 L1540.11 684.066 L1540.67 684.066 L1541.23 684.066 L1541.79 684.066 L1542.35 684.066 L1542.9 684.066 L1543.46 684.066 L1544.02 684.066 L1544.58 684.066 L1545.14 684.066 L1545.7 684.066 L1546.26 684.066 L1546.82 684.066 L1547.38 684.066 L1547.94 684.066 L1548.5 684.066 L1549.06 684.066 L1549.62 684.066 L1550.18 684.066 L1550.73 684.066 L1551.29 684.066 L1551.85 684.066 L1552.41 684.066 L1552.97 684.066 L1553.53 684.066 L1554.09 684.066 L1554.65 684.066 L1555.21 684.066 L1555.77 684.066 L1556.33 684.066 L1556.89 684.066 L1557.45 684.066 L1558 684.066 L1558.56 684.066 L1559.12 684.066 L1559.68 684.066 L1560.24 684.066 L1560.8 684.066 L1561.36 684.066 L1561.92 684.066 L1562.48 684.066 L1563.04 684.066 L1563.6 684.066 L1564.16 684.066 L1564.72 684.066 L1565.28 684.066 L1565.83 684.066 L1566.39 684.066 L1566.95 684.066 L1567.51 684.066 L1568.07 684.066 L1568.63 684.066 L1569.19 684.066 L1569.75 684.066 L1570.31 684.066 L1570.87 684.066 L1571.43 684.066 L1571.99 684.066 L1572.55 684.066 L1573.1 684.066 L1573.66 684.066 L1574.22 684.066 L1574.78 684.066 L1575.34 684.066 L1575.9 684.066 L1576.46 684.066 L1577.02 684.066 L1577.58 684.066 L1578.14 684.066 L1578.7 684.066 L1579.26 684.066 L1579.82 684.066 L1580.37 684.066 L1580.93 684.066 L1581.49 684.066 L1582.05 684.066 L1582.61 684.066 L1583.17 684.066 L1583.73 684.066 L1584.29 684.066 L1584.85 684.066 L1585.41 684.066 L1585.97 684.066 L1586.53 684.066 L1587.09 684.066 L1587.65 684.066 L1588.2 684.066 L1588.76 684.066 L1589.32 684.066 L1589.88 684.066 L1590.44 684.066 L1591 684.066 L1591.56 684.066 L1592.12 684.066 L1592.68 684.066 L1593.24 684.066 L1593.8 684.066 L1594.36 684.066 L1594.92 684.066 L1595.47 684.066 L1596.03 684.066 L1596.59 684.066 L1597.15 684.066 L1597.71 684.066 L1598.27 684.066 L1598.83 684.066 L1599.39 684.066 L1599.95 684.066 L1600.51 684.066 L1601.07 684.066 L1601.63 684.066 L1602.19 684.066 L1602.74 684.066 L1603.3 684.066 L1603.86 684.066 L1604.42 684.066 L1604.98 684.066 L1605.54 684.066 L1606.1 684.066 L1606.66 684.066 L1607.22 684.066 L1607.78 684.066 L1608.34 684.066 L1608.9 684.066 L1609.46 684.066 L1610.02 684.066 L1610.57 684.066 L1611.13 684.066 L1611.69 684.066 L1612.25 684.066 L1612.81 684.066 L1613.37 684.066 L1613.93 684.066 L1614.49 684.066 L1615.05 684.066 L1615.61 684.066 L1616.17 684.066 L1616.73 684.066 L1617.29 684.066 L1617.84 684.066 L1618.4 684.066 L1618.96 684.066 L1619.52 684.066 L1620.08 684.066 L1620.64 684.066 L1621.2 684.066 L1621.76 684.066 L1622.32 684.066 L1622.88 684.066 L1623.44 684.066 L1624 684.066 L1624.56 684.066 L1625.11 684.066 L1625.67 684.066 L1626.23 684.066 L1626.79 684.066 L1627.35 684.066 L1627.91 684.066 L1628.47 684.066 L1629.03 684.066 L1629.59 684.066 L1630.15 684.066 L1630.71 684.066 L1631.27 684.066 L1631.83 684.066 L1632.39 684.066 L1632.94 684.066 L1633.5 684.066 L1634.06 684.066 L1634.62 684.066 L1635.18 684.066 L1635.74 684.066 L1636.3 684.066 L1636.86 684.066 L1637.42 684.066 L1637.98 684.066 L1638.54 684.066 L1639.1 684.066 L1639.66 684.066 L1640.21 684.066 L1640.77 684.066 L1641.33 684.066 L1641.89 684.066 L1642.45 684.066 L1643.01 684.066 L1643.57 684.066 L1644.13 684.066 L1644.69 684.066 L1645.25 684.066 L1645.81 684.066 L1646.37 684.066 L1646.93 684.066 L1647.48 684.066 L1648.04 684.066 L1648.6 684.066 L1649.16 684.066 L1649.72 684.066 L1650.28 684.066 L1650.84 684.066 L1651.4 684.066 L1651.96 684.066 L1652.52 684.066 L1653.08 684.066 L1653.64 684.066 L1654.2 684.066 L1654.76 684.066 L1655.31 684.066 L1655.87 684.066 L1656.43 684.066 L1656.99 684.066 L1657.55 684.066 L1658.11 684.066 L1658.67 684.066 L1659.23 684.066 L1659.79 684.066 L1660.35 684.066 L1660.91 684.066 L1661.47 684.066 L1662.03 684.066 L1662.58 684.066 L1663.14 684.066 L1663.7 684.066 L1664.26 684.066 L1664.82 684.066 L1665.38 684.066 L1665.94 684.066 L1666.5 684.066 L1667.06 684.066 L1667.62 684.066 L1668.18 684.066 L1668.74 684.066 L1669.3 684.066 L1669.85 684.066 L1670.41 684.066 L1670.97 684.066 L1671.53 684.066 L1672.09 684.066 L1672.65 684.066 L1673.21 684.066 L1673.77 684.066 L1674.33 684.066 L1674.89 684.066 L1675.45 684.066 L1676.01 684.066 L1676.57 684.066 L1677.13 684.066 L1677.68 684.066 L1678.24 684.066 L1678.8 684.066 L1679.36 684.066 L1679.92 684.066 L1680.48 684.066 L1681.04 684.066 L1681.6 684.066 L1682.16 684.066 L1682.72 684.066 L1683.28 684.066 L1683.84 684.066 L1684.4 684.066 L1684.95 684.066 L1685.51 684.066 L1686.07 684.066 L1686.63 684.066 L1687.19 684.066 L1687.75 684.066 L1688.31 684.066 L1688.87 684.066 L1689.43 684.066 L1689.99 684.066 L1690.55 684.066 L1691.11 684.066 L1691.67 684.066 L1692.23 684.066 L1692.78 684.066 L1693.34 684.066 L1693.9 684.066 L1694.46 684.066 L1695.02 684.066 L1695.58 684.066 L1696.14 684.066 L1696.7 684.066 L1697.26 684.066 L1697.82 684.066 L1698.38 684.066 L1698.94 684.066 L1699.5 684.066 L1700.05 684.066 L1700.61 684.066 L1701.17 684.066 L1701.73 684.066 L1702.29 684.066 L1702.85 684.066 L1703.41 684.066 L1703.97 684.066 L1704.53 684.066 L1705.09 684.066 L1705.65 684.066 L1706.21 684.066 L1706.77 684.066 L1707.32 684.066 L1707.88 684.066 L1708.44 684.066 L1709 684.066 L1709.56 684.066 L1710.12 684.066 L1710.68 684.066 L1711.24 684.066 L1711.8 684.066 L1712.36 684.066 L1712.92 684.066 L1713.48 684.066 L1714.04 684.066 L1714.6 684.066 L1715.15 684.066 L1715.71 684.066 L1716.27 684.066 L1716.83 684.066 L1717.39 684.066 L1717.95 684.066 L1718.51 684.066 L1719.07 684.066 L1719.63 684.066 L1720.19 684.066 L1720.75 684.066 L1721.31 684.066 L1721.87 684.066 L1722.42 684.066 L1722.98 684.066 L1723.54 684.066 L1724.1 684.066 L1724.66 684.066 L1725.22 684.066 L1725.78 684.066 L1726.34 684.066 L1726.9 684.066 L1727.46 684.066 L1728.02 684.066 L1728.58 684.066 L1729.14 684.066 L1729.69 684.066 L1730.25 684.066 L1730.81 684.066 L1731.37 684.066 L1731.93 684.066 L1732.49 684.066 L1733.05 684.066 L1733.61 684.066 L1734.17 684.066 L1734.73 684.066 L1735.29 684.066 L1735.85 684.066 L1736.41 684.066 L1736.97 684.066 L1737.52 684.066 L1738.08 684.066 L1738.64 684.066 L1739.2 684.066 L1739.76 684.066 L1740.32 684.066 L1740.88 684.066 L1741.44 684.066 L1742 684.066 L1742.56 684.066 L1743.12 684.066 L1743.68 684.066 L1744.24 684.066 L1744.79 684.066 L1745.35 684.066 L1745.91 684.066 L1746.47 684.066 L1747.03 684.066 L1747.59 684.066 L1748.15 684.066 L1748.71 684.066 L1749.27 684.066 L1749.83 684.066 L1750.39 684.066 L1750.95 684.066 L1751.51 684.066 L1752.06 684.066 L1752.62 684.066 L1753.18 684.066 L1753.74 684.066 L1754.3 684.066 L1754.86 684.066 L1755.42 684.066 L1755.98 684.066 L1756.54 684.066 L1757.1 684.066 L1757.66 684.066 L1758.22 684.066 L1758.78 684.066 L1759.34 684.066 L1759.89 684.066 L1760.45 684.066 L1761.01 684.066 L1761.57 684.066 L1762.13 684.066 L1762.69 684.066 L1763.25 684.066 L1763.81 684.066 L1764.37 684.066 L1764.93 684.066 L1765.49 684.066 L1766.05 684.066 L1766.61 684.066 L1767.16 684.066 L1767.72 684.066 L1768.28 684.066 L1768.84 684.066 L1769.4 684.066 L1769.96 684.066 L1770.52 684.066 L1771.08 684.066 L1771.64 684.066 L1772.2 684.066 L1772.76 684.066 L1773.32 684.066 L1773.88 684.066 L1774.43 684.066 L1774.99 684.066 L1775.55 684.066 L1776.11 684.066 L1776.67 684.066 L1777.23 684.066 L1777.79 684.066 L1778.35 684.066 L1778.91 684.066 L1779.47 684.066 L1780.03 684.066 L1780.59 684.066 L1781.15 684.066 L1781.71 684.066 L1782.26 684.066 L1782.82 684.066 L1783.38 684.066 L1783.94 684.066 L1784.5 684.066 L1785.06 684.066 L1785.62 684.066 L1786.18 684.066 L1786.74 684.066 L1787.3 684.066 L1787.86 684.066 L1788.42 684.066 L1788.98 684.066 L1789.53 684.066 L1790.09 684.066 L1790.65 684.066 L1791.21 684.066 L1791.77 684.066 L1792.33 684.066 L1792.89 684.066 L1793.45 684.066 L1794.01 684.066 L1794.57 684.066 L1795.13 684.066 L1795.69 684.066 L1796.25 684.066 L1796.8 684.066 L1797.36 684.066 L1797.92 684.066 L1798.48 684.066 L1799.04 684.066 L1799.6 684.066 L1800.16 684.066 L1800.72 684.066 L1801.28 684.066 L1801.84 684.066 L1802.4 684.066 L1802.96 684.066 L1803.52 684.066 L1804.08 684.066 L1804.63 684.066 L1805.19 684.066 L1805.75 684.066 L1806.31 684.066 L1806.87 684.066 L1807.43 684.066 L1807.99 684.066 L1808.55 684.066 L1809.11 684.066 L1809.67 684.066 L1810.23 684.066 L1810.79 684.066 L1811.35 684.066 L1811.9 684.066 L1812.46 684.066 L1813.02 684.066 L1813.58 684.066 L1814.14 684.066 L1814.7 684.066 L1815.26 684.066 L1815.82 684.066 L1816.38 684.066 L1816.94 684.066 L1817.5 684.066 L1818.06 684.066 L1818.62 684.066 L1819.18 684.066 L1819.73 684.066 L1820.29 684.066 L1820.85 684.066 L1821.41 684.066 L1821.97 684.066 L1822.53 684.066 L1823.09 684.066 L1823.65 684.066 L1824.21 684.066 L1824.77 684.066 L1825.33 684.066 L1825.89 684.066 L1826.45 684.066 L1827 684.066 L1827.56 684.066 L1828.12 684.066 L1828.68 684.066 L1829.24 684.066 L1829.8 684.066 L1830.36 684.066 L1830.92 684.066 L1831.48 684.066 L1832.04 684.066 L1832.6 684.066 L1833.16 684.066 L1833.72 684.066 L1834.27 684.066 L1834.83 684.066 L1835.39 684.066 L1835.95 684.066 L1836.51 684.066 L1837.07 684.066 L1837.63 684.066 L1838.19 684.066 L1838.19 682.687 L1837.63 682.687 L1837.07 682.687 L1836.51 682.687 L1835.95 682.687 L1835.39 682.687 L1834.83 682.687 L1834.27 682.687 L1833.72 682.687 L1833.16 682.687 L1832.6 682.687 L1832.04 682.687 L1831.48 682.687 L1830.92 682.687 L1830.36 682.687 L1829.8 682.687 L1829.24 682.687 L1828.68 682.687 L1828.12 682.687 L1827.56 682.687 L1827 682.687 L1826.45 682.687 L1825.89 682.687 L1825.33 682.687 L1824.77 682.687 L1824.21 682.687 L1823.65 682.687 L1823.09 682.687 L1822.53 682.687 L1821.97 682.687 L1821.41 682.687 L1820.85 682.687 L1820.29 682.687 L1819.73 682.687 L1819.18 682.687 L1818.62 682.687 L1818.06 682.687 L1817.5 682.687 L1816.94 682.687 L1816.38 682.687 L1815.82 682.687 L1815.26 682.687 L1814.7 682.687 L1814.14 682.687 L1813.58 682.687 L1813.02 682.687 L1812.46 682.687 L1811.9 682.687 L1811.35 682.687 L1810.79 682.687 L1810.23 682.687 L1809.67 682.687 L1809.11 682.687 L1808.55 682.687 L1807.99 682.687 L1807.43 682.687 L1806.87 682.687 L1806.31 682.687 L1805.75 682.687 L1805.19 682.687 L1804.63 682.687 L1804.08 682.687 L1803.52 682.687 L1802.96 682.687 L1802.4 682.687 L1801.84 682.687 L1801.28 682.687 L1800.72 682.687 L1800.16 682.687 L1799.6 682.687 L1799.04 682.687 L1798.48 682.687 L1797.92 682.687 L1797.36 682.687 L1796.8 682.687 L1796.25 682.687 L1795.69 682.687 L1795.13 682.687 L1794.57 682.687 L1794.01 682.687 L1793.45 682.687 L1792.89 682.687 L1792.33 682.687 L1791.77 682.687 L1791.21 682.687 L1790.65 682.687 L1790.09 682.687 L1789.53 682.687 L1788.98 682.687 L1788.42 682.687 L1787.86 682.687 L1787.3 682.687 L1786.74 682.687 L1786.18 682.687 L1785.62 682.687 L1785.06 682.687 L1784.5 682.687 L1783.94 682.687 L1783.38 682.687 L1782.82 682.687 L1782.26 682.687 L1781.71 682.687 L1781.15 682.687 L1780.59 682.687 L1780.03 682.687 L1779.47 682.687 L1778.91 682.687 L1778.35 682.687 L1777.79 682.687 L1777.23 682.687 L1776.67 682.687 L1776.11 682.687 L1775.55 682.687 L1774.99 682.687 L1774.43 682.687 L1773.88 682.687 L1773.32 682.687 L1772.76 682.687 L1772.2 682.687 L1771.64 682.687 L1771.08 682.687 L1770.52 682.687 L1769.96 682.687 L1769.4 682.687 L1768.84 682.687 L1768.28 682.687 L1767.72 682.687 L1767.16 682.687 L1766.61 682.687 L1766.05 682.687 L1765.49 682.687 L1764.93 682.687 L1764.37 682.687 L1763.81 682.687 L1763.25 682.687 L1762.69 682.687 L1762.13 682.687 L1761.57 682.687 L1761.01 682.687 L1760.45 682.687 L1759.89 682.687 L1759.34 682.687 L1758.78 682.687 L1758.22 682.687 L1757.66 682.687 L1757.1 682.687 L1756.54 682.687 L1755.98 682.687 L1755.42 682.687 L1754.86 682.687 L1754.3 682.687 L1753.74 682.687 L1753.18 682.687 L1752.62 682.687 L1752.06 682.687 L1751.51 682.687 L1750.95 682.687 L1750.39 682.687 L1749.83 682.687 L1749.27 682.687 L1748.71 682.687 L1748.15 682.687 L1747.59 682.687 L1747.03 682.687 L1746.47 682.687 L1745.91 682.687 L1745.35 682.687 L1744.79 682.687 L1744.24 682.687 L1743.68 682.687 L1743.12 682.687 L1742.56 682.687 L1742 682.687 L1741.44 682.687 L1740.88 682.687 L1740.32 682.687 L1739.76 682.687 L1739.2 682.687 L1738.64 682.687 L1738.08 682.687 L1737.52 682.687 L1736.97 682.687 L1736.41 682.687 L1735.85 682.687 L1735.29 682.687 L1734.73 682.687 L1734.17 682.687 L1733.61 682.687 L1733.05 682.687 L1732.49 682.687 L1731.93 682.687 L1731.37 682.687 L1730.81 682.687 L1730.25 682.687 L1729.69 682.687 L1729.14 682.687 L1728.58 682.687 L1728.02 682.687 L1727.46 682.687 L1726.9 682.687 L1726.34 682.687 L1725.78 682.687 L1725.22 682.687 L1724.66 682.687 L1724.1 682.687 L1723.54 682.687 L1722.98 682.687 L1722.42 682.687 L1721.87 682.687 L1721.31 682.687 L1720.75 682.687 L1720.19 682.687 L1719.63 682.687 L1719.07 682.687 L1718.51 682.687 L1717.95 682.687 L1717.39 682.687 L1716.83 682.687 L1716.27 682.687 L1715.71 682.687 L1715.15 682.687 L1714.6 682.687 L1714.04 682.687 L1713.48 682.687 L1712.92 682.687 L1712.36 682.687 L1711.8 682.687 L1711.24 682.687 L1710.68 682.687 L1710.12 682.687 L1709.56 682.687 L1709 682.687 L1708.44 682.687 L1707.88 682.687 L1707.32 682.687 L1706.77 682.687 L1706.21 682.687 L1705.65 682.687 L1705.09 682.687 L1704.53 682.687 L1703.97 682.687 L1703.41 682.687 L1702.85 682.687 L1702.29 682.687 L1701.73 682.687 L1701.17 682.687 L1700.61 682.687 L1700.05 682.687 L1699.5 682.687 L1698.94 682.687 L1698.38 682.687 L1697.82 682.687 L1697.26 682.687 L1696.7 682.687 L1696.14 682.687 L1695.58 682.687 L1695.02 682.687 L1694.46 682.687 L1693.9 682.687 L1693.34 682.687 L1692.78 682.687 L1692.23 682.687 L1691.67 682.687 L1691.11 682.687 L1690.55 682.687 L1689.99 682.687 L1689.43 682.687 L1688.87 682.687 L1688.31 682.687 L1687.75 682.687 L1687.19 682.687 L1686.63 682.687 L1686.07 682.687 L1685.51 682.687 L1684.95 682.687 L1684.4 682.687 L1683.84 682.687 L1683.28 682.687 L1682.72 682.687 L1682.16 682.687 L1681.6 682.687 L1681.04 682.687 L1680.48 682.687 L1679.92 682.687 L1679.36 682.687 L1678.8 682.687 L1678.24 682.687 L1677.68 682.687 L1677.13 682.687 L1676.57 682.687 L1676.01 682.687 L1675.45 682.687 L1674.89 682.687 L1674.33 682.687 L1673.77 682.687 L1673.21 682.687 L1672.65 682.687 L1672.09 682.687 L1671.53 682.687 L1670.97 682.687 L1670.41 682.687 L1669.85 682.687 L1669.3 682.687 L1668.74 682.687 L1668.18 682.687 L1667.62 682.687 L1667.06 682.687 L1666.5 682.687 L1665.94 682.687 L1665.38 682.687 L1664.82 682.687 L1664.26 682.687 L1663.7 682.687 L1663.14 682.687 L1662.58 682.687 L1662.03 682.687 L1661.47 682.687 L1660.91 682.687 L1660.35 682.687 L1659.79 682.687 L1659.23 682.687 L1658.67 682.687 L1658.11 682.687 L1657.55 682.687 L1656.99 682.687 L1656.43 682.687 L1655.87 682.687 L1655.31 682.687 L1654.76 682.687 L1654.2 682.687 L1653.64 682.687 L1653.08 682.687 L1652.52 682.687 L1651.96 682.687 L1651.4 682.687 L1650.84 682.687 L1650.28 682.687 L1649.72 682.687 L1649.16 682.687 L1648.6 682.687 L1648.04 682.687 L1647.48 682.687 L1646.93 682.687 L1646.37 682.687 L1645.81 682.687 L1645.25 682.687 L1644.69 682.687 L1644.13 682.687 L1643.57 682.687 L1643.01 682.687 L1642.45 682.687 L1641.89 682.687 L1641.33 682.687 L1640.77 682.687 L1640.21 682.687 L1639.66 682.687 L1639.1 682.687 L1638.54 682.687 L1637.98 682.687 L1637.42 682.687 L1636.86 682.687 L1636.3 682.687 L1635.74 682.687 L1635.18 682.687 L1634.62 682.687 L1634.06 682.687 L1633.5 682.687 L1632.94 682.687 L1632.39 682.687 L1631.83 682.687 L1631.27 682.687 L1630.71 682.687 L1630.15 682.687 L1629.59 682.687 L1629.03 682.687 L1628.47 682.687 L1627.91 682.687 L1627.35 682.687 L1626.79 682.687 L1626.23 682.687 L1625.67 682.687 L1625.11 682.687 L1624.56 682.687 L1624 682.687 L1623.44 682.687 L1622.88 682.687 L1622.32 682.687 L1621.76 682.687 L1621.2 682.687 L1620.64 682.687 L1620.08 682.687 L1619.52 682.687 L1618.96 682.687 L1618.4 682.687 L1617.84 682.687 L1617.29 682.687 L1616.73 682.687 L1616.17 682.687 L1615.61 682.687 L1615.05 682.687 L1614.49 682.687 L1613.93 682.687 L1613.37 682.687 L1612.81 682.687 L1612.25 682.687 L1611.69 682.687 L1611.13 682.687 L1610.57 682.687 L1610.02 682.687 L1609.46 682.687 L1608.9 682.687 L1608.34 682.687 L1607.78 682.687 L1607.22 682.687 L1606.66 682.687 L1606.1 682.687 L1605.54 682.687 L1604.98 682.687 L1604.42 682.687 L1603.86 682.687 L1603.3 682.687 L1602.74 682.687 L1602.19 682.687 L1601.63 682.687 L1601.07 682.687 L1600.51 682.687 L1599.95 682.687 L1599.39 682.687 L1598.83 682.687 L1598.27 682.687 L1597.71 682.687 L1597.15 682.687 L1596.59 682.687 L1596.03 682.687 L1595.47 682.687 L1594.92 682.687 L1594.36 682.687 L1593.8 682.687 L1593.24 682.687 L1592.68 682.687 L1592.12 682.687 L1591.56 682.687 L1591 682.687 L1590.44 682.687 L1589.88 682.687 L1589.32 682.687 L1588.76 682.687 L1588.2 682.687 L1587.65 682.687 L1587.09 682.687 L1586.53 682.687 L1585.97 682.687 L1585.41 682.687 L1584.85 682.687 L1584.29 682.687 L1583.73 682.687 L1583.17 682.687 L1582.61 682.687 L1582.05 682.687 L1581.49 682.687 L1580.93 682.687 L1580.37 682.687 L1579.82 682.687 L1579.26 682.687 L1578.7 682.687 L1578.14 682.687 L1577.58 682.687 L1577.02 682.687 L1576.46 682.687 L1575.9 682.687 L1575.34 682.687 L1574.78 682.687 L1574.22 682.687 L1573.66 682.687 L1573.1 682.687 L1572.55 682.687 L1571.99 682.687 L1571.43 682.687 L1570.87 682.687 L1570.31 682.687 L1569.75 682.687 L1569.19 682.687 L1568.63 682.687 L1568.07 682.687 L1567.51 682.687 L1566.95 682.687 L1566.39 682.687 L1565.83 682.687 L1565.28 682.687 L1564.72 682.687 L1564.16 682.687 L1563.6 682.687 L1563.04 682.687 L1562.48 682.687 L1561.92 682.687 L1561.36 682.687 L1560.8 682.687 L1560.24 682.687 L1559.68 682.687 L1559.12 682.687 L1558.56 682.687 L1558 682.687 L1557.45 682.687 L1556.89 682.687 L1556.33 682.687 L1555.77 682.687 L1555.21 682.687 L1554.65 682.687 L1554.09 682.687 L1553.53 682.687 L1552.97 682.687 L1552.41 682.687 L1551.85 682.687 L1551.29 682.687 L1550.73 682.687 L1550.18 682.687 L1549.62 682.687 L1549.06 682.687 L1548.5 682.687 L1547.94 682.687 L1547.38 682.687 L1546.82 682.687 L1546.26 682.687 L1545.7 682.687 L1545.14 682.687 L1544.58 682.687 L1544.02 682.687 L1543.46 682.687 L1542.9 682.687 L1542.35 682.687 L1541.79 682.687 L1541.23 682.687 L1540.67 682.687 L1540.11 682.687 L1539.55 682.687 L1538.99 682.687 L1538.43 682.687 L1537.87 682.687 L1537.31 682.687 L1536.75 682.687 L1536.19 682.687 L1535.63 682.687 L1535.08 682.687 L1534.52 682.687 L1533.96 682.687 L1533.4 682.687 L1532.84 682.687 L1532.28 682.687 L1531.72 682.687 L1531.16 682.687 L1530.6 682.687 L1530.04 682.687 L1529.48 682.687 L1528.92 682.687 L1528.36 682.687 L1527.81 682.687 L1527.25 682.687 L1526.69 682.687 L1526.13 682.687 L1525.57 682.687 L1525.01 682.687 L1524.45 682.687 L1523.89 682.687 L1523.33 682.687 L1522.77 682.687 L1522.21 682.687 L1521.65 682.687 L1521.09 682.687 L1520.53 682.687 L1519.98 682.687 L1519.42 682.687 L1518.86 682.687 L1518.3 682.687 L1517.74 682.687 L1517.18 682.687 L1516.62 682.687 L1516.06 682.687 L1515.5 682.687 L1514.94 682.687 L1514.38 682.687 L1513.82 682.687 L1513.26 682.687 L1512.71 682.687 L1512.15 682.687 L1511.59 682.687 L1511.03 682.687 L1510.47 682.687 L1509.91 682.687 L1509.35 682.687 L1508.79 682.687 L1508.23 682.687 L1507.67 682.687 L1507.11 682.687 L1506.55 682.687 L1505.99 682.687 L1505.44 682.687 L1504.88 682.687 L1504.32 682.687 L1503.76 682.687 L1503.2 682.687 L1502.64 682.687 L1502.08 682.687 L1501.52 682.687 L1500.96 682.687 L1500.4 682.687 L1499.84 682.687 L1499.28 682.687 L1498.72 682.687 L1498.16 682.687 L1497.61 682.687 L1497.05 682.687 L1496.49 682.687 L1495.93 682.687 L1495.37 682.687 L1494.81 682.687 L1494.25 682.687 L1493.69 682.687 L1493.13 682.687 L1492.57 682.687 L1492.01 682.687 L1491.45 682.687 L1490.89 682.687 L1490.34 682.687 L1489.78 682.687 L1489.22 682.687 L1488.66 682.687 L1488.1 682.687 L1487.54 682.687 L1486.98 682.687 L1486.42 682.687 L1485.86 682.687 L1485.3 682.687 L1484.74 682.687 L1484.18 682.687 L1483.62 682.687 L1483.07 682.687 L1482.51 682.687 L1481.95 682.687 L1481.39 682.687 L1480.83 682.687 L1480.27 682.687 L1479.71 682.687 L1479.15 682.687 L1478.59 682.687 L1478.03 682.687 L1477.47 682.687 L1476.91 682.687 L1476.35 682.687 L1475.79 682.687 L1475.24 682.687 L1474.68 682.687 L1474.12 682.687 L1473.56 682.687 L1473 682.687 L1472.44 682.687 L1471.88 682.687 L1471.32 682.687 L1470.76 682.687 L1470.2 682.687 L1469.64 682.687 L1469.08 682.687 L1468.52 682.687 L1467.97 682.687 L1467.41 682.687 L1466.85 682.687 L1466.29 682.687 L1465.73 682.687 L1465.17 682.687 L1464.61 682.687 L1464.05 682.687 L1463.49 682.687 L1462.93 682.687 L1462.37 682.687 L1461.81 682.687 L1461.25 682.687 L1460.7 682.687 L1460.14 682.687 L1459.58 682.687 L1459.02 682.687 L1458.46 682.687 L1457.9 682.687 L1457.34 682.687 L1456.78 682.687 L1456.22 682.687 L1455.66 682.687 L1455.1 682.687 L1454.54 682.687 L1453.98 682.687 L1453.42 682.687 L1452.87 682.687 L1452.31 682.687 L1451.75 682.687 L1451.19 682.687 L1450.63 682.687 L1450.07 682.687 L1449.51 682.687 L1448.95 682.687 L1448.39 682.687 L1447.83 682.687 L1447.27 682.687 L1446.71 682.687 L1446.15 682.687 L1445.6 682.687 L1445.04 682.687 L1444.48 682.687 L1443.92 682.687 L1443.36 682.687 L1442.8 682.687 L1442.24 682.687 L1441.68 682.687 L1441.12 682.687 L1440.56 682.687 L1440 682.687 L1439.44 682.687 L1438.88 682.687 L1438.33 682.687 L1437.77 682.687 L1437.21 682.687 L1436.65 682.687 L1436.09 682.687 L1435.53 682.687 L1434.97 682.687 L1434.41 682.687 L1433.85 682.687 L1433.29 682.687 L1432.73 682.687 L1432.17 682.687 L1431.61 682.687 L1431.05 682.687 L1430.5 682.687 L1429.94 682.687 L1429.38 682.687 L1428.82 682.687 L1428.26 682.687 L1427.7 682.687 L1427.14 682.687 L1426.58 682.687 L1426.02 682.687 L1425.46 682.687 L1424.9 682.687 L1424.34 682.687 L1423.78 682.687 L1423.23 682.687 L1422.67 682.687 L1422.11 682.687 L1421.55 682.687 L1420.99 682.687 L1420.43 682.687 L1419.87 682.687 L1419.31 682.687 L1418.75 682.687 L1418.19 682.687 L1417.63 682.687 L1417.07 682.687 L1416.51 682.687 L1415.95 682.687 L1415.4 682.687 L1414.84 682.687 L1414.28 682.687 L1413.72 682.687 L1413.16 682.687 L1412.6 682.687 L1412.04 682.687 L1411.48 682.687 L1410.92 682.687 L1410.36 682.687 L1409.8 682.687 L1409.24 682.687 L1408.68 682.687 L1408.13 682.687 L1407.57 682.687 L1407.01 682.687 L1406.45 682.687 L1405.89 682.687 L1405.33 682.687 L1404.77 682.687 L1404.21 682.687 L1403.65 682.687 L1403.09 682.687 L1402.53 682.687 L1401.97 682.687 L1401.41 682.687 L1400.86 682.687 L1400.3 682.687 L1399.74 682.687 L1399.18 682.687 L1398.62 682.687 L1398.06 682.687 L1397.5 682.687 L1396.94 682.687 L1396.38 682.687 L1395.82 682.687 L1395.26 682.687 L1394.7 682.687 L1394.14 682.687 L1393.58 682.687 L1393.03 682.687 L1392.47 682.687 L1391.91 682.687 L1391.35 682.687 L1390.79 682.687 L1390.23 682.687 L1389.67 682.687 L1389.11 682.687 L1388.55 682.687 L1387.99 682.687 L1387.43 682.687 L1386.87 682.687 L1386.31 682.687 L1385.76 682.687 L1385.2 682.687 L1384.64 682.687 L1384.08 682.687 L1383.52 682.687 L1382.96 682.687 L1382.4 682.687 L1381.84 682.687 L1381.28 682.687 L1380.72 682.687 L1380.16 682.687 L1379.6 682.687 L1379.04 682.687 L1378.49 682.687 L1377.93 682.687 L1377.37 682.687 L1376.81 682.687 L1376.25 682.687 L1375.69 682.687 L1375.13 682.687 L1374.57 682.687 L1374.01 682.687 L1373.45 682.687 L1372.89 682.687 L1372.33 682.687 L1371.77 682.687 L1371.21 682.687 L1370.66 682.687 L1370.1 682.687 L1369.54 682.687 L1368.98 682.687 L1368.42 682.687 L1367.86 682.687 L1367.3 682.687 L1366.74 682.687 L1366.18 682.687 L1365.62 682.687 L1365.06 682.687 L1364.5 682.687 L1363.94 682.687 L1363.39 682.687 L1362.83 682.687 L1362.27 682.687 L1361.71 682.687 L1361.15 682.687 L1360.59 682.687 L1360.03 682.687 L1359.47 682.687 L1358.91 682.687 L1358.35 682.687 L1357.79 682.687 L1357.23 682.687 L1356.67 682.687 L1356.12 682.687 L1355.56 682.687 L1355 682.687 L1354.44 682.687 L1353.88 682.687 L1353.32 682.687 L1352.76 682.687 L1352.2 682.687 L1351.64 682.687 L1351.08 682.687 L1350.52 682.687 L1349.96 682.687 L1349.4 682.687 L1348.84 682.687 L1348.29 682.687 L1347.73 682.687 L1347.17 682.687 L1346.61 682.687 L1346.05 682.687 L1345.49 682.687 L1344.93 682.687 L1344.37 682.687 L1343.81 682.687 L1343.25 682.687 L1342.69 682.687 L1342.13 682.687 L1341.57 682.687 L1341.02 682.687 L1340.46 682.687 L1339.9 682.687 L1339.34 682.687 L1338.78 682.687 L1338.22 682.687 L1337.66 682.687 L1337.1 682.687 L1336.54 682.687 L1335.98 682.687 L1335.42 682.687 L1334.86 682.687 L1334.3 682.687 L1333.75 682.687 L1333.19 682.687 L1332.63 682.687 L1332.07 682.687 L1331.51 682.687 L1330.95 682.687 L1330.39 682.687 L1329.83 682.687 L1329.27 682.687 L1328.71 682.687 L1328.15 682.687 L1327.59 682.687 L1327.03 682.687 L1326.47 682.687 L1325.92 682.687 L1325.36 682.687 L1324.8 682.687 L1324.24 682.687 L1323.68 682.687 L1323.12 682.687 L1322.56 682.687 L1322 682.687 L1321.44 682.687 L1320.88 682.687 L1320.32 682.687 L1319.76 682.687 L1319.2 682.687 L1318.65 682.687 L1318.09 682.687 L1317.53 682.687 L1316.97 682.687 L1316.41 682.687 L1315.85 682.687 L1315.29 682.687 L1314.73 682.687 L1314.17 682.687 L1313.61 682.687 L1313.05 682.687 L1312.49 682.687 L1311.93 682.687 L1311.38 682.687 L1310.82 682.687 L1310.26 682.687 L1309.7 682.687 L1309.14 682.687 L1308.58 682.687 L1308.02 682.687 L1307.46 682.687 L1306.9 682.687 L1306.34 682.687 L1305.78 682.687 L1305.22 682.687 L1304.66 682.687 L1304.1 682.687 L1303.55 682.687 L1302.99 682.687 L1302.43 682.687 L1301.87 682.687 L1301.31 682.687 L1300.75 682.687 L1300.19 682.687 L1299.63 682.687 L1299.07 682.687 L1298.51 682.687 L1297.95 682.687 L1297.39 682.687 L1296.83 682.687 L1296.28 682.687 L1295.72 682.687 L1295.16 682.687 L1294.6 682.687 L1294.04 682.687 L1293.48 682.687 L1292.92 682.687 L1292.36 682.687 L1291.8 682.687 L1291.24 682.687 L1290.68 682.687 L1290.12 682.687 L1289.56 682.687 L1289 682.687 L1288.45 682.687 L1287.89 682.687 L1287.33 682.687 L1286.77 682.687 L1286.21 682.687 L1285.65 682.687 L1285.09 682.687 L1284.53 682.687 L1283.97 682.687 L1283.41 682.687 L1282.85 682.687 L1282.29 682.687 L1281.73 682.687 L1281.18 682.687 L1280.62 682.687 L1280.06 682.687 L1279.5 682.687 L1278.94 682.687 L1278.38 682.687 L1277.82 682.687 L1277.26 682.687 L1276.7 682.687 L1276.14 682.687 L1275.58 682.687 L1275.02 682.687 L1274.46 682.687 L1273.91 682.687 L1273.35 682.687 L1272.79 682.687 L1272.23 682.687 L1271.67 682.687 L1271.11 682.687 L1270.55 682.687 L1269.99 682.687 L1269.43 682.687 L1268.87 682.687 L1268.31 682.687 L1267.75 682.687 L1267.19 682.687 L1266.63 682.687 L1266.08 682.687 L1265.52 682.687 L1264.96 682.687 L1264.4 682.687 L1263.84 682.687 L1263.28 682.687 L1262.72 682.687 L1262.16 682.687 L1261.6 682.687 L1261.04 682.687 L1260.48 682.687 L1259.92 682.687 L1259.36 682.687 L1258.81 682.687 L1258.25 682.687 L1257.69 682.687 L1257.13 682.687 L1256.57 682.687 L1256.01 682.687 L1255.45 682.687 L1254.89 682.687 L1254.33 682.687 L1253.77 682.687 L1253.21 682.687 L1252.65 682.687 L1252.09 682.687 L1251.54 682.687 L1250.98 682.687 L1250.42 682.687 L1249.86 682.687 L1249.3 682.687 L1248.74 682.687 L1248.18 682.687 L1247.62 682.687 L1247.06 682.687 L1246.5 682.687 L1245.94 682.687 L1245.38 682.687 L1244.82 682.687 L1244.26 682.687 L1243.71 682.687 L1243.15 682.687 L1242.59 682.687 L1242.03 682.687 L1241.47 682.687 L1240.91 682.687 L1240.35 682.687 L1239.79 682.687 L1239.23 682.687 L1238.67 682.687 L1238.11 682.687 L1237.55 682.687 L1236.99 682.687 L1236.44 682.687 L1235.88 682.687 L1235.32 682.687 L1234.76 682.687 L1234.2 682.687 L1233.64 682.687 L1233.08 682.687 L1232.52 682.687 L1231.96 682.687 L1231.4 682.687 L1230.84 682.687 L1230.28 682.687 L1229.72 682.687 L1229.17 682.687 L1228.61 682.687 L1228.05 682.687 L1227.49 682.687 L1226.93 682.687 L1226.37 682.687 L1225.81 682.687 L1225.25 682.687 L1224.69 682.687 L1224.13 682.687 L1223.57 682.687 L1223.01 682.687 L1222.45 682.687 L1221.89 682.687 L1221.34 682.687 L1220.78 682.687 L1220.22 682.687 L1219.66 682.687 L1219.1 682.687 L1218.54 682.687 L1217.98 682.687 L1217.42 682.687 L1216.86 682.687 L1216.3 682.687 L1215.74 682.687 L1215.18 682.687 L1214.62 682.687 L1214.07 682.687 L1213.51 682.687 L1212.95 682.687 L1212.39 682.687 L1211.83 682.687 L1211.27 682.687 L1210.71 682.687 L1210.15 682.687 L1209.59 682.687 L1209.03 682.687 L1208.47 682.687 L1207.91 682.687 L1207.35 682.687 L1206.8 682.687 L1206.24 682.687 L1205.68 682.687 L1205.12 682.687 L1204.56 682.687 L1204 682.687 L1203.44 682.687 L1202.88 682.687 L1202.32 682.687 L1201.76 682.687 L1201.2 682.687 L1200.64 682.687 L1200.08 682.687 L1199.52 682.687 L1198.97 682.687 L1198.41 682.687 L1197.85 682.687 L1197.29 682.687 L1196.73 682.687 L1196.17 682.687 L1195.61 682.687 L1195.05 682.687 L1194.49 682.687 L1193.93 682.687 L1193.37 682.687 L1192.81 682.687 L1192.25 682.687 L1191.7 682.687 L1191.14 682.687 L1190.58 682.687 L1190.02 682.687 L1189.46 682.687 L1188.9 682.687 L1188.34 682.687 L1187.78 682.687 L1187.22 682.687 L1186.66 682.687 L1186.1 682.687 L1185.54 682.687 L1184.98 682.687 L1184.43 682.687 L1183.87 682.687 L1183.31 682.687 L1182.75 682.687 L1182.19 682.687 L1181.63 682.687 L1181.07 682.687 L1180.51 682.687 L1179.95 682.687 L1179.39 682.687 L1178.83 682.687 L1178.27 682.687 L1177.71 682.687 L1177.15 682.687 L1176.6 682.687 L1176.04 682.687 L1175.48 682.687 L1174.92 682.687 L1174.36 682.687 L1173.8 682.687 L1173.24 682.687 L1172.68 682.687 L1172.12 682.687 L1171.56 682.687 L1171 682.687 L1170.44 682.687 L1169.88 682.687 L1169.33 682.687 L1168.77 682.687 L1168.21 682.687 L1167.65 682.687 L1167.09 682.687 L1166.53 682.687 L1165.97 682.687 L1165.41 682.687 L1164.85 682.687 L1164.29 682.687 L1163.73 682.687 L1163.17 682.687 L1162.61 682.687 L1162.05 682.687 L1161.5 682.687 L1160.94 682.687 L1160.38 682.687 L1159.82 682.687 L1159.26 682.687 L1158.7 682.687 L1158.14 682.687 L1157.58 682.687 L1157.02 682.687 L1156.46 682.687 L1155.9 682.687 L1155.34 682.687 L1154.78 682.687 L1154.23 682.687 L1153.67 682.687 L1153.11 682.687 L1152.55 682.687 L1151.99 682.687 L1151.43 682.687 L1150.87 682.687 L1150.31 682.687 L1149.75 682.687 L1149.19 682.687 L1148.63 682.687 L1148.07 682.687 L1147.51 682.687 L1146.96 682.687 L1146.4 682.687 L1145.84 682.687 L1145.28 682.687 L1144.72 682.687 L1144.16 682.687 L1143.6 682.687 L1143.04 682.687 L1142.48 682.687 L1141.92 682.687 L1141.36 682.687 L1140.8 682.687 L1140.24 682.687 L1139.68 682.687 L1139.13 682.687 L1138.57 682.687 L1138.01 682.687 L1137.45 682.687 L1136.89 682.687 L1136.33 682.687 L1135.77 682.687 L1135.21 682.687 L1134.65 682.687 L1134.09 682.687 L1133.53 682.687 L1132.97 682.687 L1132.41 682.687 L1131.86 682.687 L1131.3 682.687 L1130.74 682.687 L1130.18 682.687 L1129.62 682.687 L1129.06 682.687 L1128.5 682.687 L1127.94 682.687 L1127.38 682.687 L1126.82 682.687 L1126.26 682.687 L1125.7 682.687 L1125.14 682.687 L1124.59 682.687 L1124.03 682.687 L1123.47 682.687 L1122.91 682.687 L1122.35 682.687 L1121.79 682.687 L1121.23 682.687 L1120.67 682.687 L1120.11 682.687 L1119.55 682.687 L1118.99 682.687 L1118.43 682.687 L1117.87 682.687 L1117.31 682.687 L1116.76 682.687 L1116.2 682.687 L1115.64 682.687 L1115.08 682.687 L1114.52 682.687 L1113.96 682.687 L1113.4 682.687 L1112.84 682.687 L1112.28 682.687 L1111.72 682.687 L1111.16 682.687 L1110.6 682.687 L1110.04 682.687 L1109.49 682.687 L1108.93 682.687 L1108.37 682.687 L1107.81 682.687 L1107.25 682.687 L1106.69 682.687 L1106.13 682.687 L1105.57 682.687 L1105.01 682.687 L1104.45 682.687 L1103.89 682.687 L1103.33 682.687 L1102.77 682.687 L1102.22 682.687 L1101.66 682.687 L1101.1 682.687 L1100.54 682.687 L1099.98 682.687 L1099.42 682.687 L1098.86 682.687 L1098.3 682.687 L1097.74 682.687 L1097.18 682.687 L1096.62 682.687 L1096.06 682.687 L1095.5 682.687 L1094.94 682.687 L1094.39 682.687 L1093.83 682.687 L1093.27 682.687 L1092.71 682.687 L1092.15 682.687 L1091.59 682.687 L1091.03 682.687 L1090.47 682.687 L1089.91 682.687 L1089.35 682.687 L1088.79 682.687 L1088.23 682.687 L1087.67 682.687 L1087.12 682.687 L1086.56 682.687 L1086 682.687 L1085.44 682.687 L1084.88 682.687 L1084.32 682.687 L1083.76 682.687 L1083.2 682.687 L1082.64 682.687 L1082.08 682.687 L1081.52 682.687 L1080.96 682.687 L1080.4 682.687 L1079.85 682.687 L1079.29 682.687 L1078.73 682.687 L1078.17 682.687 L1077.61 682.687 L1077.05 682.687 L1076.49 682.687 L1075.93 682.687 L1075.37 682.687 L1074.81 682.687 L1074.25 682.687 L1073.69 682.687 L1073.13 682.687 L1072.57 682.687 L1072.02 682.687 L1071.46 682.687 L1070.9 682.687 L1070.34 682.687 L1069.78 682.687 L1069.22 682.687 L1068.66 682.687 L1068.1 682.687 L1067.54 682.687 L1066.98 682.687 L1066.42 682.687 L1065.86 682.687 L1065.3 682.687 L1064.75 682.687 L1064.19 682.687 L1063.63 682.687 L1063.07 682.687 L1062.51 682.687 L1061.95 682.687 L1061.39 682.687 L1060.83 682.687 L1060.27 682.687 L1059.71 682.687 L1059.15 682.687 L1058.59 682.687 L1058.03 682.687 L1057.48 682.687 L1056.92 682.687 L1056.36 682.687 L1055.8 682.687 L1055.24 682.687 L1054.68 682.687 L1054.12 682.687 L1053.56 682.687 L1053 682.687 L1052.44 682.687 L1051.88 682.687 L1051.32 682.687 L1050.76 682.687 L1050.2 682.687 L1049.65 682.687 L1049.09 682.687 L1048.53 682.687 L1047.97 682.687 L1047.41 682.687 L1046.85 682.687 L1046.29 682.687 L1045.73 682.687 L1045.17 682.687 L1044.61 682.687 L1044.05 682.687 L1043.49 682.687 L1042.93 682.687 L1042.38 682.687 L1041.82 682.687 L1041.26 682.687 L1040.7 682.687 L1040.14 682.687 L1039.58 682.687 L1039.02 682.687 L1038.46 682.687 L1037.9 682.687 L1037.34 682.687 L1036.78 682.687 L1036.22 682.687 L1035.66 682.687 L1035.1 682.687 L1034.55 682.687 L1033.99 682.687 L1033.43 682.687 L1032.87 682.687 L1032.31 682.687 L1031.75 682.687 L1031.19 682.687 L1030.63 682.687 L1030.07 682.687 L1029.51 682.687 L1028.95 682.687 L1028.39 682.687 L1027.83 682.687 L1027.28 682.687 L1026.72 682.687 L1026.16 682.687 L1025.6 682.687 L1025.04 682.687 L1024.48 682.687 L1023.92 682.687 L1023.36 682.687 L1022.8 682.687 L1022.24 682.687 L1021.68 682.687 L1021.12 682.687 L1020.56 682.687 L1020.01 682.687 L1019.45 682.687 L1018.89 682.687 L1018.33 682.687 L1017.77 682.687 L1017.21 682.687 L1016.65 682.687 L1016.09 682.687 L1015.53 682.687 L1014.97 682.687 L1014.41 682.687 L1013.85 682.687 L1013.29 682.687 L1012.73 682.687 L1012.18 682.687 L1011.62 682.687 L1011.06 682.687 L1010.5 682.687 L1009.94 682.687 L1009.38 682.687 L1008.82 682.687 L1008.26 682.687 L1007.7 682.687 L1007.14 682.687 L1006.58 682.687 L1006.02 682.687 L1005.46 682.687 L1004.91 682.687 L1004.35 682.687 L1003.79 682.687 L1003.23 682.687 L1002.67 682.687 L1002.11 682.687 L1001.55 682.687 L1000.99 682.687 L1000.43 682.687 L999.872 682.687 L999.313 682.687 L998.754 682.687 L998.194 682.687 L997.635 682.687 L997.076 682.687 L996.517 682.687 L995.957 682.687 L995.398 682.687 L994.839 682.687 L994.28 682.687 L993.72 682.687 L993.161 682.687 L992.602 682.687 L992.043 682.687 L991.483 682.687 L990.924 682.687 L990.365 682.687 L989.806 682.687 L989.246 682.687 L988.687 682.687 L988.128 682.687 L987.569 682.687 L987.009 682.687 L986.45 682.687 L985.891 682.687 L985.332 682.687 L984.772 682.687 L984.213 682.687 L983.654 682.687 L983.095 682.687 L982.535 682.687 L981.976 682.687 L981.417 682.687 L980.858 682.687 L980.298 682.687 L979.739 682.687 L979.18 682.687 L978.621 682.687 L978.061 682.687 L977.502 682.687 L976.943 682.687 L976.384 682.687 L975.824 682.687 L975.265 682.687 L974.706 682.687 L974.147 682.687 L973.587 682.687 L973.028 682.687 L972.469 682.687 L971.91 682.687 L971.35 682.687 L970.791 682.687 L970.232 682.687 L969.673 682.687 L969.113 682.687 L968.554 682.687 L967.995 682.687 L967.436 682.687 L966.876 682.687 L966.317 682.687 L965.758 682.687 L965.199 682.687 L964.639 682.687 L964.08 682.687 L963.521 682.687 L962.962 682.687 L962.402 682.687 L961.843 682.687 L961.284 682.687 L960.725 682.687 L960.165 682.687 L959.606 682.687 L959.047 682.687 L958.488 682.687 L957.928 682.687 L957.369 682.687 L956.81 682.687 L956.251 682.687 L955.691 682.687 L955.132 682.687 L954.573 682.687 L954.014 682.687 L953.454 682.687 L952.895 682.687 L952.336 682.687 L951.777 682.687 L951.217 682.687 L950.658 682.687 L950.099 682.687 L949.54 682.687 L948.98 682.687 L948.421 682.687 L947.862 682.687 L947.303 682.687 L946.743 682.687 L946.184 682.687 L945.625 682.687 L945.066 682.687 L944.506 682.687 L943.947 682.687 L943.388 682.687 L942.829 682.687 L942.269 682.687 L941.71 682.687 L941.151 682.687 L940.592 682.687 L940.032 682.687 L939.473 682.687 L938.914 682.687 L938.355 682.687 L937.795 682.687 L937.236 682.687 L936.677 682.687 L936.118 682.687 L935.558 682.687 L934.999 682.687 L934.44 682.687 L933.881 682.687 L933.321 682.687 L932.762 682.687 L932.203 682.687 L931.644 682.687 L931.084 682.687 L930.525 682.687 L929.966 682.687 L929.406 682.687 L928.847 682.687 L928.288 682.687 L927.729 682.687 L927.169 682.687 L926.61 682.687 L926.051 682.687 L925.492 682.687 L924.932 682.687 L924.373 682.687 L923.814 682.687 L923.255 682.687 L922.695 682.687 L922.136 682.687 L921.577 682.687 L921.018 682.687 L920.458 682.687 L919.899 682.687 L919.34 682.687 L918.781 682.687 L918.221 682.687 L917.662 682.687 L917.103 682.687 L916.544 682.687 L915.984 682.687 L915.425 682.687 L914.866 682.687 L914.307 682.687 L913.747 682.687 L913.188 682.687 L912.629 682.687 L912.07 682.687 L911.51 682.687 L910.951 682.687 L910.392 682.687 L909.833 682.687 L909.273 682.687 L908.714 682.687 L908.155 682.687 L907.596 682.687 L907.036 682.687 L906.477 682.687 L905.918 682.687 L905.359 682.687 L904.799 682.687 L904.24 682.687 L903.681 682.687 L903.122 682.687 L902.562 682.687 L902.003 682.687 L901.444 682.687 L900.885 682.687 L900.325 682.687 L899.766 682.687 L899.207 682.687 L898.648 682.687 L898.088 682.687 L897.529 682.687 L896.97 682.687 L896.411 682.687 L895.851 682.687 L895.292 682.687 L894.733 682.687 L894.174 682.687 L893.614 682.687 L893.055 682.687 L892.496 682.687 L891.937 682.687 L891.377 682.687 L890.818 682.687 L890.259 682.687 L889.7 682.687 L889.14 682.687 L888.581 682.687 L888.022 682.687 L887.463 682.687 L886.903 682.687 L886.344 682.687 L885.785 682.687 L885.226 682.687 L884.666 682.687 L884.107 682.687 L883.548 682.687 L882.989 682.687 L882.429 682.687 L881.87 682.687 L881.311 682.687 L880.752 682.687 L880.192 682.687 L879.633 682.687 L879.074 682.687 L878.515 682.687 L877.955 682.687 L877.396 682.687 L876.837 682.687 L876.278 682.687 L875.718 682.687 L875.159 682.687 L874.6 682.687 L874.041 682.687 L873.481 682.687 L872.922 682.687 L872.363 682.687 L871.804 682.687 L871.244 682.687 L870.685 682.687 L870.126 682.687 L869.567 682.687 L869.007 682.687 L868.448 682.687 L867.889 682.687 L867.33 682.687 L866.77 682.687 L866.211 682.687 L865.652 682.687 L865.093 682.687 L864.533 682.687 L863.974 682.687 L863.415 682.687 L862.856 682.687 L862.296 682.687 L861.737 682.687 L861.178 682.687 L860.619 682.687 L860.059 682.687 L859.5 682.687 L858.941 682.687 L858.382 682.687 L857.822 682.687 L857.263 682.687 L856.704 682.687 L856.145 682.687 L855.585 682.687 L855.026 682.687 L854.467 682.687 L853.908 682.687 L853.348 682.687 L852.789 682.687 L852.23 682.687 L851.671 682.687 L851.111 682.687 L850.552 682.687 L849.993 682.687 L849.434 682.687 L848.874 682.687 L848.315 682.687 L847.756 682.687 L847.197 682.687 L846.637 682.687 L846.078 682.687 L845.519 682.687 L844.96 682.687 L844.4 682.687 L843.841 682.687 L843.282 682.687 L842.723 682.687 L842.163 682.687 L841.604 682.687 L841.045 682.687 L840.486 682.687 L839.926 682.687 L839.367 682.687 L838.808 682.687 L838.249 682.687 L837.689 682.687 L837.13 682.687 L836.571 682.687 L836.012 682.687 L835.452 682.687 L834.893 682.687 L834.334 682.687 L833.775 682.687 L833.215 682.687 L832.656 682.687 L832.097 682.687 L831.538 682.687 L830.978 682.687 L830.419 682.687 L829.86 682.687 L829.301 682.687 L828.741 682.687 L828.182 682.687 L827.623 682.687 L827.064 682.687 L826.504 682.687 L825.945 682.687 L825.386 682.687 L824.827 682.687 L824.267 682.687 L823.708 682.687 L823.149 682.687 L822.59 682.687 L822.03 682.687 L821.471 682.687 L820.912 682.687 L820.353 682.687 L819.793 682.687 L819.234 682.687 L818.675 682.687 L818.116 682.687 L817.556 682.687 L816.997 682.687 L816.438 682.687 L815.879 682.687 L815.319 682.687 L814.76 682.687 L814.201 682.687 L813.642 682.687 L813.082 682.687 L812.523 682.687 L811.964 682.687 L811.405 682.687 L810.845 682.687 L810.286 682.687 L809.727 682.687 L809.168 682.687 L808.608 682.687 L808.049 682.687 L807.49 682.687 L806.931 682.687 L806.371 682.687 L805.812 682.687 L805.253 682.687 L804.693 682.687 L804.134 682.687 L803.575 682.687 L803.016 682.687 L802.456 682.687 L801.897 682.687 L801.338 682.687 L800.779 682.687 L800.219 682.687 L799.66 682.687 L799.101 682.687 L798.542 682.687 L797.982 682.687 L797.423 682.687 L796.864 682.687 L796.305 682.687 L795.745 682.687 L795.186 682.687 L794.627 682.687 L794.068 682.687 L793.508 682.687 L792.949 682.687 L792.39 682.687 L791.831 682.687 L791.271 682.687 L790.712 682.687 L790.153 682.687 L789.594 682.687 L789.034 682.687 L788.475 682.687 L787.916 682.687 L787.357 682.687 L786.797 682.687 L786.238 682.687 L785.679 682.687 L785.12 682.687 L784.56 682.687 L784.001 682.687 L783.442 682.687 L782.883 682.687 L782.323 682.687 L781.764 682.687 L781.205 682.687 L780.646 682.687 L780.086 682.687 L779.527 682.687 L778.968 682.687 L778.409 682.687 L777.849 682.687 L777.29 682.687 L776.731 682.687 L776.172 682.687 L775.612 682.687 L775.053 682.687 L774.494 682.687 L773.935 682.687 L773.375 682.687 L772.816 682.687 L772.257 682.687 L771.698 682.687 L771.138 682.687 L770.579 682.687 L770.02 682.687 L769.461 682.687 L768.901 682.687 L768.342 682.687 L767.783 682.687 L767.224 682.687 L766.664 682.687 L766.105 682.687 L765.546 682.687 L764.987 682.687 L764.427 682.687 L763.868 682.687 L763.309 682.687 L762.75 682.687 L762.19 682.687 L761.631 682.687 L761.072 682.687 L760.513 682.687 L759.953 682.687 L759.394 682.687 L758.835 682.687 L758.276 682.687 L757.716 682.687 L757.157 682.687 L756.598 682.687 L756.039 682.687 L755.479 682.687 L754.92 682.687 L754.361 682.687 L753.802 682.687 L753.242 682.687 L752.683 682.687 L752.124 682.687 L751.565 682.687 L751.005 682.687 L750.446 682.687 L749.887 682.687 L749.328 682.687 L748.768 682.687 L748.209 682.687 L747.65 682.687 L747.091 682.687 L746.531 682.687 L745.972 682.687 L745.413 682.687 L744.854 682.687 L744.294 682.687 L743.735 682.687 L743.176 682.687 L742.617 682.687 L742.057 682.687 L741.498 682.687 L740.939 682.687 L740.38 682.687 L739.82 682.687 L739.261 682.687 L738.702 682.687 L738.143 682.687 L737.583 682.687 L737.024 682.687 L736.465 682.687 L735.906 682.687 L735.346 682.687 L734.787 682.687 L734.228 682.687 L733.669 682.687 L733.109 682.687 L732.55 682.687 L731.991 682.687 L731.432 682.687 L730.872 682.687 L730.313 682.687 L729.754 682.687 L729.195 682.687 L728.635 682.687 L728.076 682.687 L727.517 682.687 L726.958 682.687 L726.398 682.687 L725.839 682.687 L725.28 682.687 L724.721 682.687 L724.161 682.687 L723.602 682.687 L723.043 682.687 L722.484 682.687 L721.924 682.687 L721.365 682.687 L720.806 682.687 L720.247 682.687  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip373)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.388 720.806,683.388 721.365,683.388 721.924,683.388 722.484,683.388 723.043,683.388 723.602,683.388 724.161,683.388 724.721,683.388 725.28,683.388 725.839,683.388 726.398,683.388 726.958,683.388 727.517,683.388 728.076,683.388 728.635,683.388 729.195,683.388 729.754,683.388 730.313,683.388 730.872,683.388 731.432,683.388 731.991,683.388 732.55,683.388 733.109,683.388 733.669,683.388 734.228,683.388 734.787,683.388 735.346,683.388 735.906,683.388 736.465,683.388 737.024,683.388 737.583,683.388 738.143,683.388 738.702,683.388 739.261,683.388 739.82,683.388 740.38,683.388 740.939,683.388 741.498,683.388 742.057,683.388 742.617,683.388 743.176,683.388 743.735,683.388 744.294,683.388 744.854,683.388 745.413,683.388 745.972,683.388 746.531,683.388 747.091,683.388 747.65,683.388 748.209,683.388 748.768,683.388 749.328,683.388 749.887,683.388 750.446,683.388 751.005,683.388 751.565,683.388 752.124,683.388 752.683,683.388 753.242,683.388 753.802,683.388 754.361,683.388 754.92,683.388 755.479,683.388 756.039,683.388 756.598,683.388 757.157,683.388 757.716,683.388 758.276,683.388 758.835,683.388 759.394,683.388 759.953,683.388 760.513,683.388 761.072,683.388 761.631,683.388 762.19,683.388 762.75,683.388 763.309,683.388 763.868,683.388 764.427,683.388 764.987,683.388 765.546,683.388 766.105,683.388 766.664,683.388 767.224,683.388 767.783,683.388 768.342,683.388 768.901,683.388 769.461,683.388 770.02,683.388 770.579,683.388 771.138,683.388 771.698,683.388 772.257,683.388 772.816,683.388 773.375,683.388 773.935,683.388 774.494,683.388 775.053,683.388 775.612,683.388 776.172,683.388 776.731,683.388 777.29,683.388 777.849,683.388 778.409,683.388 778.968,683.388 779.527,683.388 780.086,683.388 780.646,683.388 781.205,683.388 781.764,683.388 782.323,683.388 782.883,683.388 783.442,683.388 784.001,683.388 784.56,683.388 785.12,683.388 785.679,683.388 786.238,683.388 786.797,683.388 787.357,683.388 787.916,683.388 788.475,683.388 789.034,683.388 789.594,683.388 790.153,683.388 790.712,683.388 791.271,683.388 791.831,683.388 792.39,683.388 792.949,683.388 793.508,683.388 794.068,683.388 794.627,683.388 795.186,683.388 795.745,683.388 796.305,683.388 796.864,683.388 797.423,683.388 797.982,683.388 798.542,683.388 799.101,683.388 799.66,683.388 800.219,683.388 800.779,683.388 801.338,683.388 801.897,683.388 802.456,683.388 803.016,683.388 803.575,683.388 804.134,683.388 804.693,683.388 805.253,683.388 805.812,683.388 806.371,683.388 806.931,683.388 807.49,683.388 808.049,683.388 808.608,683.388 809.168,683.388 809.727,683.388 810.286,683.388 810.845,683.388 811.405,683.388 811.964,683.388 812.523,683.388 813.082,683.388 813.642,683.388 814.201,683.388 814.76,683.388 815.319,683.388 815.879,683.388 816.438,683.388 816.997,683.388 817.556,683.388 818.116,683.388 818.675,683.388 819.234,683.388 819.793,683.388 820.353,683.388 820.912,683.388 821.471,683.388 822.03,683.388 822.59,683.388 823.149,683.388 823.708,683.388 824.267,683.388 824.827,683.388 825.386,683.388 825.945,683.388 826.504,683.388 827.064,683.388 827.623,683.388 828.182,683.388 828.741,683.388 829.301,683.388 829.86,683.388 830.419,683.388 830.978,683.388 831.538,683.388 832.097,683.388 832.656,683.388 833.215,683.388 833.775,683.388 834.334,683.388 834.893,683.388 835.452,683.388 836.012,683.388 836.571,683.388 837.13,683.388 837.689,683.388 838.249,683.388 838.808,683.388 839.367,683.388 839.926,683.388 840.486,683.388 841.045,683.388 841.604,683.388 842.163,683.388 842.723,683.388 843.282,683.388 843.841,683.388 844.4,683.388 844.96,683.388 845.519,683.388 846.078,683.388 846.637,683.388 847.197,683.388 847.756,683.388 848.315,683.388 848.874,683.388 849.434,683.388 849.993,683.388 850.552,683.388 851.111,683.388 851.671,683.388 852.23,683.388 852.789,683.388 853.348,683.388 853.908,683.388 854.467,683.388 855.026,683.388 855.585,683.388 856.145,683.388 856.704,683.388 857.263,683.388 857.822,683.388 858.382,683.388 858.941,683.388 859.5,683.388 860.059,683.388 860.619,683.388 861.178,683.388 861.737,683.388 862.296,683.388 862.856,683.388 863.415,683.388 863.974,683.388 864.533,683.388 865.093,683.388 865.652,683.388 866.211,683.388 866.77,683.388 867.33,683.388 867.889,683.388 868.448,683.388 869.007,683.388 869.567,683.388 870.126,683.388 870.685,683.388 871.244,683.388 871.804,683.388 872.363,683.388 872.922,683.388 873.481,683.388 874.041,683.388 874.6,683.388 875.159,683.388 875.718,683.388 876.278,683.388 876.837,683.388 877.396,683.388 877.955,683.388 878.515,683.388 879.074,683.388 879.633,683.388 880.192,683.388 880.752,683.388 881.311,683.388 881.87,683.388 882.429,683.388 882.989,683.388 883.548,683.388 884.107,683.388 884.666,683.388 885.226,683.388 885.785,683.388 886.344,683.388 886.903,683.388 887.463,683.388 888.022,683.388 888.581,683.388 889.14,683.388 889.7,683.388 890.259,683.388 890.818,683.388 891.377,683.388 891.937,683.388 892.496,683.388 893.055,683.388 893.614,683.388 894.174,683.388 894.733,683.388 895.292,683.388 895.851,683.388 896.411,683.388 896.97,683.388 897.529,683.388 898.088,683.388 898.648,683.388 899.207,683.388 899.766,683.388 900.325,683.388 900.885,683.388 901.444,683.388 902.003,683.388 902.562,683.388 903.122,683.388 903.681,683.388 904.24,683.388 904.799,683.388 905.359,683.388 905.918,683.388 906.477,683.388 907.036,683.388 907.596,683.388 908.155,683.388 908.714,683.388 909.273,683.388 909.833,683.388 910.392,683.388 910.951,683.388 911.51,683.388 912.07,683.388 912.629,683.388 913.188,683.388 913.747,683.388 914.307,683.388 914.866,683.388 915.425,683.388 915.984,683.388 916.544,683.388 917.103,683.388 917.662,683.388 918.221,683.388 918.781,683.388 919.34,683.388 919.899,683.388 920.458,683.388 921.018,683.388 921.577,683.388 922.136,683.388 922.695,683.388 923.255,683.388 923.814,683.388 924.373,683.388 924.932,683.388 925.492,683.388 926.051,683.388 926.61,683.388 927.169,683.388 927.729,683.388 928.288,683.388 928.847,683.388 929.406,683.388 929.966,683.388 930.525,683.388 931.084,683.388 931.644,683.388 932.203,683.388 932.762,683.388 933.321,683.388 933.881,683.388 934.44,683.388 934.999,683.388 935.558,683.388 936.118,683.388 936.677,683.388 937.236,683.388 937.795,683.388 938.355,683.388 938.914,683.388 939.473,683.388 940.032,683.388 940.592,683.388 941.151,683.388 941.71,683.388 942.269,683.388 942.829,683.388 943.388,683.388 943.947,683.388 944.506,683.388 945.066,683.388 945.625,683.388 946.184,683.388 946.743,683.388 947.303,683.388 947.862,683.388 948.421,683.388 948.98,683.388 949.54,683.388 950.099,683.388 950.658,683.388 951.217,683.388 951.777,683.388 952.336,683.388 952.895,683.388 953.454,683.388 954.014,683.388 954.573,683.388 955.132,683.388 955.691,683.388 956.251,683.388 956.81,683.388 957.369,683.388 957.928,683.388 958.488,683.388 959.047,683.388 959.606,683.388 960.165,683.388 960.725,683.388 961.284,683.388 961.843,683.388 962.402,683.388 962.962,683.388 963.521,683.388 964.08,683.388 964.639,683.388 965.199,683.388 965.758,683.388 966.317,683.388 966.876,683.388 967.436,683.388 967.995,683.388 968.554,683.388 969.113,683.388 969.673,683.388 970.232,683.388 970.791,683.388 971.35,683.388 971.91,683.388 972.469,683.388 973.028,683.388 973.587,683.388 974.147,683.388 974.706,683.388 975.265,683.388 975.824,683.388 976.384,683.388 976.943,683.388 977.502,683.388 978.061,683.388 978.621,683.388 979.18,683.388 979.739,683.388 980.298,683.388 980.858,683.388 981.417,683.388 981.976,683.388 982.535,683.388 983.095,683.388 983.654,683.388 984.213,683.388 984.772,683.388 985.332,683.388 985.891,683.388 986.45,683.388 987.009,683.388 987.569,683.388 988.128,683.388 988.687,683.388 989.246,683.388 989.806,683.388 990.365,683.388 990.924,683.388 991.483,683.388 992.043,683.388 992.602,683.388 993.161,683.388 993.72,683.388 994.28,683.388 994.839,683.388 995.398,683.388 995.957,683.388 996.517,683.388 997.076,683.388 997.635,683.388 998.194,683.388 998.754,683.388 999.313,683.388 999.872,683.388 1000.43,683.388 1000.99,683.388 1001.55,683.388 1002.11,683.388 1002.67,683.388 1003.23,683.388 1003.79,683.388 1004.35,683.388 1004.91,683.388 1005.46,683.388 1006.02,683.388 1006.58,683.388 1007.14,683.388 1007.7,683.388 1008.26,683.388 1008.82,683.388 1009.38,683.388 1009.94,683.388 1010.5,683.388 1011.06,683.388 1011.62,683.388 1012.18,683.388 1012.73,683.388 1013.29,683.388 1013.85,683.388 1014.41,683.388 1014.97,683.388 1015.53,683.388 1016.09,683.388 1016.65,683.388 1017.21,683.388 1017.77,683.388 1018.33,683.388 1018.89,683.388 1019.45,683.388 1020.01,683.388 1020.56,683.388 1021.12,683.388 1021.68,683.388 1022.24,683.388 1022.8,683.388 1023.36,683.388 1023.92,683.388 1024.48,683.388 1025.04,683.388 1025.6,683.388 1026.16,683.388 1026.72,683.388 1027.28,683.388 1027.83,683.388 1028.39,683.388 1028.95,683.388 1029.51,683.388 1030.07,683.388 1030.63,683.388 1031.19,683.388 1031.75,683.388 1032.31,683.388 1032.87,683.388 1033.43,683.388 1033.99,683.388 1034.55,683.388 1035.1,683.388 1035.66,683.388 1036.22,683.388 1036.78,683.388 1037.34,683.388 1037.9,683.388 1038.46,683.388 1039.02,683.388 1039.58,683.388 1040.14,683.388 1040.7,683.388 1041.26,683.388 1041.82,683.388 1042.38,683.388 1042.93,683.388 1043.49,683.388 1044.05,683.388 1044.61,683.388 1045.17,683.388 1045.73,683.388 1046.29,683.388 1046.85,683.388 1047.41,683.388 1047.97,683.388 1048.53,683.388 1049.09,683.388 1049.65,683.388 1050.2,683.388 1050.76,683.388 1051.32,683.388 1051.88,683.388 1052.44,683.388 1053,683.388 1053.56,683.388 1054.12,683.388 1054.68,683.388 1055.24,683.388 1055.8,683.388 1056.36,683.388 1056.92,683.388 1057.48,683.388 1058.03,683.388 1058.59,683.388 1059.15,683.388 1059.71,683.388 1060.27,683.388 1060.83,683.388 1061.39,683.388 1061.95,683.388 1062.51,683.388 1063.07,683.388 1063.63,683.388 1064.19,683.388 1064.75,683.388 1065.3,683.388 1065.86,683.388 1066.42,683.388 1066.98,683.388 1067.54,683.388 1068.1,683.388 1068.66,683.388 1069.22,683.388 1069.78,683.388 1070.34,683.388 1070.9,683.388 1071.46,683.388 1072.02,683.388 1072.57,683.388 1073.13,683.388 1073.69,683.388 1074.25,683.388 1074.81,683.388 1075.37,683.388 1075.93,683.388 1076.49,683.388 1077.05,683.388 1077.61,683.388 1078.17,683.388 1078.73,683.388 1079.29,683.388 1079.85,683.388 1080.4,683.388 1080.96,683.388 1081.52,683.388 1082.08,683.388 1082.64,683.388 1083.2,683.388 1083.76,683.388 1084.32,683.388 1084.88,683.388 1085.44,683.388 1086,683.388 1086.56,683.388 1087.12,683.388 1087.67,683.388 1088.23,683.388 1088.79,683.388 1089.35,683.388 1089.91,683.388 1090.47,683.388 1091.03,683.388 1091.59,683.388 1092.15,683.388 1092.71,683.388 1093.27,683.388 1093.83,683.388 1094.39,683.388 1094.94,683.388 1095.5,683.388 1096.06,683.388 1096.62,683.388 1097.18,683.388 1097.74,683.388 1098.3,683.388 1098.86,683.388 1099.42,683.388 1099.98,683.388 1100.54,683.388 1101.1,683.388 1101.66,683.388 1102.22,683.388 1102.77,683.388 1103.33,683.388 1103.89,683.388 1104.45,683.388 1105.01,683.388 1105.57,683.388 1106.13,683.388 1106.69,683.388 1107.25,683.388 1107.81,683.388 1108.37,683.388 1108.93,683.388 1109.49,683.388 1110.04,683.388 1110.6,683.388 1111.16,683.388 1111.72,683.388 1112.28,683.388 1112.84,683.388 1113.4,683.388 1113.96,683.388 1114.52,683.388 1115.08,683.388 1115.64,683.388 1116.2,683.388 1116.76,683.388 1117.31,683.388 1117.87,683.388 1118.43,683.388 1118.99,683.388 1119.55,683.388 1120.11,683.388 1120.67,683.388 1121.23,683.388 1121.79,683.388 1122.35,683.388 1122.91,683.388 1123.47,683.388 1124.03,683.388 1124.59,683.388 1125.14,683.388 1125.7,683.388 1126.26,683.388 1126.82,683.388 1127.38,683.388 1127.94,683.388 1128.5,683.388 1129.06,683.388 1129.62,683.388 1130.18,683.388 1130.74,683.388 1131.3,683.388 1131.86,683.388 1132.41,683.388 1132.97,683.388 1133.53,683.388 1134.09,683.388 1134.65,683.388 1135.21,683.388 1135.77,683.388 1136.33,683.388 1136.89,683.388 1137.45,683.388 1138.01,683.388 1138.57,683.388 1139.13,683.388 1139.68,683.388 1140.24,683.388 1140.8,683.388 1141.36,683.388 1141.92,683.388 1142.48,683.388 1143.04,683.388 1143.6,683.388 1144.16,683.388 1144.72,683.388 1145.28,683.388 1145.84,683.388 1146.4,683.388 1146.96,683.388 1147.51,683.388 1148.07,683.388 1148.63,683.388 1149.19,683.388 1149.75,683.388 1150.31,683.388 1150.87,683.388 1151.43,683.388 1151.99,683.388 1152.55,683.388 1153.11,683.388 1153.67,683.388 1154.23,683.388 1154.78,683.388 1155.34,683.388 1155.9,683.388 1156.46,683.388 1157.02,683.388 1157.58,683.388 1158.14,683.388 1158.7,683.388 1159.26,683.388 1159.82,683.388 1160.38,683.388 1160.94,683.388 1161.5,683.388 1162.05,683.388 1162.61,683.388 1163.17,683.388 1163.73,683.388 1164.29,683.388 1164.85,683.388 1165.41,683.388 1165.97,683.388 1166.53,683.388 1167.09,683.388 1167.65,683.388 1168.21,683.388 1168.77,683.388 1169.33,683.388 1169.88,683.388 1170.44,683.388 1171,683.388 1171.56,683.388 1172.12,683.388 1172.68,683.388 1173.24,683.388 1173.8,683.388 1174.36,683.388 1174.92,683.388 1175.48,683.388 1176.04,683.388 1176.6,683.388 1177.15,683.388 1177.71,683.388 1178.27,683.388 1178.83,683.388 1179.39,683.388 1179.95,683.388 1180.51,683.388 1181.07,683.388 1181.63,683.388 1182.19,683.388 1182.75,683.388 1183.31,683.388 1183.87,683.388 1184.43,683.388 1184.98,683.388 1185.54,683.388 1186.1,683.388 1186.66,683.388 1187.22,683.388 1187.78,683.388 1188.34,683.388 1188.9,683.388 1189.46,683.388 1190.02,683.388 1190.58,683.388 1191.14,683.388 1191.7,683.388 1192.25,683.388 1192.81,683.388 1193.37,683.388 1193.93,683.388 1194.49,683.388 1195.05,683.388 1195.61,683.388 1196.17,683.388 1196.73,683.388 1197.29,683.388 1197.85,683.388 1198.41,683.388 1198.97,683.388 1199.52,683.388 1200.08,683.388 1200.64,683.388 1201.2,683.388 1201.76,683.388 1202.32,683.388 1202.88,683.388 1203.44,683.388 1204,683.388 1204.56,683.388 1205.12,683.388 1205.68,683.388 1206.24,683.388 1206.8,683.388 1207.35,683.388 1207.91,683.388 1208.47,683.388 1209.03,683.388 1209.59,683.388 1210.15,683.388 1210.71,683.388 1211.27,683.388 1211.83,683.388 1212.39,683.388 1212.95,683.388 1213.51,683.388 1214.07,683.388 1214.62,683.388 1215.18,683.388 1215.74,683.388 1216.3,683.388 1216.86,683.388 1217.42,683.388 1217.98,683.388 1218.54,683.388 1219.1,683.388 1219.66,683.388 1220.22,683.388 1220.78,683.388 1221.34,683.388 1221.89,683.388 1222.45,683.388 1223.01,683.388 1223.57,683.388 1224.13,683.388 1224.69,683.388 1225.25,683.388 1225.81,683.388 1226.37,683.388 1226.93,683.388 1227.49,683.388 1228.05,683.388 1228.61,683.388 1229.17,683.388 1229.72,683.388 1230.28,683.388 1230.84,683.388 1231.4,683.388 1231.96,683.388 1232.52,683.388 1233.08,683.388 1233.64,683.388 1234.2,683.388 1234.76,683.388 1235.32,683.388 1235.88,683.388 1236.44,683.388 1236.99,683.388 1237.55,683.388 1238.11,683.388 1238.67,683.388 1239.23,683.388 1239.79,683.388 1240.35,683.388 1240.91,683.388 1241.47,683.388 1242.03,683.388 1242.59,683.388 1243.15,683.388 1243.71,683.388 1244.26,683.388 1244.82,683.388 1245.38,683.388 1245.94,683.388 1246.5,683.388 1247.06,683.388 1247.62,683.388 1248.18,683.388 1248.74,683.388 1249.3,683.388 1249.86,683.388 1250.42,683.388 1250.98,683.388 1251.54,683.388 1252.09,683.388 1252.65,683.388 1253.21,683.388 1253.77,683.388 1254.33,683.388 1254.89,683.388 1255.45,683.388 1256.01,683.388 1256.57,683.388 1257.13,683.388 1257.69,683.388 1258.25,683.388 1258.81,683.388 1259.36,683.388 1259.92,683.388 1260.48,683.388 1261.04,683.388 1261.6,683.388 1262.16,683.388 1262.72,683.388 1263.28,683.388 1263.84,683.388 1264.4,683.388 1264.96,683.388 1265.52,683.388 1266.08,683.388 1266.63,683.388 1267.19,683.388 1267.75,683.388 1268.31,683.388 1268.87,683.388 1269.43,683.388 1269.99,683.388 1270.55,683.388 1271.11,683.388 1271.67,683.388 1272.23,683.388 1272.79,683.388 1273.35,683.388 1273.91,683.388 1274.46,683.388 1275.02,683.388 1275.58,683.388 1276.14,683.388 1276.7,683.388 1277.26,683.388 1277.82,683.388 1278.38,683.388 1278.94,683.388 1279.5,683.388 1280.06,683.388 1280.62,683.388 1281.18,683.388 1281.73,683.388 1282.29,683.388 1282.85,683.388 1283.41,683.388 1283.97,683.388 1284.53,683.388 1285.09,683.388 1285.65,683.388 1286.21,683.388 1286.77,683.388 1287.33,683.388 1287.89,683.388 1288.45,683.388 1289,683.388 1289.56,683.388 1290.12,683.388 1290.68,683.388 1291.24,683.388 1291.8,683.388 1292.36,683.388 1292.92,683.388 1293.48,683.388 1294.04,683.388 1294.6,683.388 1295.16,683.388 1295.72,683.388 1296.28,683.388 1296.83,683.388 1297.39,683.388 1297.95,683.388 1298.51,683.388 1299.07,683.388 1299.63,683.388 1300.19,683.388 1300.75,683.388 1301.31,683.388 1301.87,683.388 1302.43,683.388 1302.99,683.388 1303.55,683.388 1304.1,683.388 1304.66,683.388 1305.22,683.388 1305.78,683.388 1306.34,683.388 1306.9,683.388 1307.46,683.388 1308.02,683.388 1308.58,683.388 1309.14,683.388 1309.7,683.388 1310.26,683.388 1310.82,683.388 1311.38,683.388 1311.93,683.388 1312.49,683.388 1313.05,683.388 1313.61,683.388 1314.17,683.388 1314.73,683.388 1315.29,683.388 1315.85,683.388 1316.41,683.388 1316.97,683.388 1317.53,683.388 1318.09,683.388 1318.65,683.388 1319.2,683.388 1319.76,683.388 1320.32,683.388 1320.88,683.388 1321.44,683.388 1322,683.388 1322.56,683.388 1323.12,683.388 1323.68,683.388 1324.24,683.388 1324.8,683.388 1325.36,683.388 1325.92,683.388 1326.47,683.388 1327.03,683.388 1327.59,683.388 1328.15,683.388 1328.71,683.388 1329.27,683.388 1329.83,683.388 1330.39,683.388 1330.95,683.388 1331.51,683.388 1332.07,683.388 1332.63,683.388 1333.19,683.388 1333.75,683.388 1334.3,683.388 1334.86,683.388 1335.42,683.388 1335.98,683.388 1336.54,683.388 1337.1,683.388 1337.66,683.388 1338.22,683.388 1338.78,683.388 1339.34,683.388 1339.9,683.388 1340.46,683.388 1341.02,683.388 1341.57,683.388 1342.13,683.388 1342.69,683.388 1343.25,683.388 1343.81,683.388 1344.37,683.388 1344.93,683.388 1345.49,683.388 1346.05,683.388 1346.61,683.388 1347.17,683.388 1347.73,683.388 1348.29,683.388 1348.84,683.388 1349.4,683.388 1349.96,683.388 1350.52,683.388 1351.08,683.388 1351.64,683.388 1352.2,683.388 1352.76,683.388 1353.32,683.388 1353.88,683.388 1354.44,683.388 1355,683.388 1355.56,683.388 1356.12,683.388 1356.67,683.388 1357.23,683.388 1357.79,683.388 1358.35,683.388 1358.91,683.388 1359.47,683.388 1360.03,683.388 1360.59,683.388 1361.15,683.388 1361.71,683.388 1362.27,683.388 1362.83,683.388 1363.39,683.388 1363.94,683.388 1364.5,683.388 1365.06,683.388 1365.62,683.388 1366.18,683.388 1366.74,683.388 1367.3,683.388 1367.86,683.388 1368.42,683.388 1368.98,683.388 1369.54,683.388 1370.1,683.388 1370.66,683.388 1371.21,683.388 1371.77,683.388 1372.33,683.388 1372.89,683.388 1373.45,683.388 1374.01,683.388 1374.57,683.388 1375.13,683.388 1375.69,683.388 1376.25,683.388 1376.81,683.388 1377.37,683.388 1377.93,683.388 1378.49,683.388 1379.04,683.388 1379.6,683.388 1380.16,683.388 1380.72,683.388 1381.28,683.388 1381.84,683.388 1382.4,683.388 1382.96,683.388 1383.52,683.388 1384.08,683.388 1384.64,683.388 1385.2,683.388 1385.76,683.388 1386.31,683.388 1386.87,683.388 1387.43,683.388 1387.99,683.388 1388.55,683.388 1389.11,683.388 1389.67,683.388 1390.23,683.388 1390.79,683.388 1391.35,683.388 1391.91,683.388 1392.47,683.388 1393.03,683.388 1393.58,683.388 1394.14,683.388 1394.7,683.388 1395.26,683.388 1395.82,683.388 1396.38,683.388 1396.94,683.388 1397.5,683.388 1398.06,683.388 1398.62,683.388 1399.18,683.388 1399.74,683.388 1400.3,683.388 1400.86,683.388 1401.41,683.388 1401.97,683.388 1402.53,683.388 1403.09,683.388 1403.65,683.388 1404.21,683.388 1404.77,683.388 1405.33,683.388 1405.89,683.388 1406.45,683.388 1407.01,683.388 1407.57,683.388 1408.13,683.388 1408.68,683.388 1409.24,683.388 1409.8,683.388 1410.36,683.388 1410.92,683.388 1411.48,683.388 1412.04,683.388 1412.6,683.388 1413.16,683.388 1413.72,683.388 1414.28,683.388 1414.84,683.388 1415.4,683.388 1415.95,683.388 1416.51,683.388 1417.07,683.388 1417.63,683.388 1418.19,683.388 1418.75,683.388 1419.31,683.388 1419.87,683.388 1420.43,683.388 1420.99,683.388 1421.55,683.388 1422.11,683.388 1422.67,683.388 1423.23,683.388 1423.78,683.388 1424.34,683.388 1424.9,683.388 1425.46,683.388 1426.02,683.388 1426.58,683.388 1427.14,683.388 1427.7,683.388 1428.26,683.388 1428.82,683.388 1429.38,683.388 1429.94,683.388 1430.5,683.388 1431.05,683.388 1431.61,683.388 1432.17,683.388 1432.73,683.388 1433.29,683.388 1433.85,683.388 1434.41,683.388 1434.97,683.388 1435.53,683.388 1436.09,683.388 1436.65,683.388 1437.21,683.388 1437.77,683.388 1438.33,683.388 1438.88,683.388 1439.44,683.388 1440,683.388 1440.56,683.388 1441.12,683.388 1441.68,683.388 1442.24,683.388 1442.8,683.388 1443.36,683.388 1443.92,683.388 1444.48,683.388 1445.04,683.388 1445.6,683.388 1446.15,683.388 1446.71,683.388 1447.27,683.388 1447.83,683.388 1448.39,683.388 1448.95,683.388 1449.51,683.388 1450.07,683.388 1450.63,683.388 1451.19,683.388 1451.75,683.388 1452.31,683.388 1452.87,683.388 1453.42,683.388 1453.98,683.388 1454.54,683.388 1455.1,683.388 1455.66,683.388 1456.22,683.388 1456.78,683.388 1457.34,683.388 1457.9,683.388 1458.46,683.388 1459.02,683.388 1459.58,683.388 1460.14,683.388 1460.7,683.388 1461.25,683.388 1461.81,683.388 1462.37,683.388 1462.93,683.388 1463.49,683.388 1464.05,683.388 1464.61,683.388 1465.17,683.388 1465.73,683.388 1466.29,683.388 1466.85,683.388 1467.41,683.388 1467.97,683.388 1468.52,683.388 1469.08,683.388 1469.64,683.388 1470.2,683.388 1470.76,683.388 1471.32,683.388 1471.88,683.388 1472.44,683.388 1473,683.388 1473.56,683.388 1474.12,683.388 1474.68,683.388 1475.24,683.388 1475.79,683.388 1476.35,683.388 1476.91,683.388 1477.47,683.388 1478.03,683.388 1478.59,683.388 1479.15,683.388 1479.71,683.388 1480.27,683.388 1480.83,683.388 1481.39,683.388 1481.95,683.388 1482.51,683.388 1483.07,683.388 1483.62,683.388 1484.18,683.388 1484.74,683.388 1485.3,683.388 1485.86,683.388 1486.42,683.388 1486.98,683.388 1487.54,683.388 1488.1,683.388 1488.66,683.388 1489.22,683.388 1489.78,683.388 1490.34,683.388 1490.89,683.388 1491.45,683.388 1492.01,683.388 1492.57,683.388 1493.13,683.388 1493.69,683.388 1494.25,683.388 1494.81,683.388 1495.37,683.388 1495.93,683.388 1496.49,683.388 1497.05,683.388 1497.61,683.388 1498.16,683.388 1498.72,683.388 1499.28,683.388 1499.84,683.388 1500.4,683.388 1500.96,683.388 1501.52,683.388 1502.08,683.388 1502.64,683.388 1503.2,683.388 1503.76,683.388 1504.32,683.388 1504.88,683.388 1505.44,683.388 1505.99,683.388 1506.55,683.388 1507.11,683.388 1507.67,683.388 1508.23,683.388 1508.79,683.388 1509.35,683.388 1509.91,683.388 1510.47,683.388 1511.03,683.388 1511.59,683.388 1512.15,683.388 1512.71,683.388 1513.26,683.388 1513.82,683.388 1514.38,683.388 1514.94,683.388 1515.5,683.388 1516.06,683.388 1516.62,683.388 1517.18,683.388 1517.74,683.388 1518.3,683.388 1518.86,683.388 1519.42,683.388 1519.98,683.388 1520.53,683.388 1521.09,683.388 1521.65,683.388 1522.21,683.388 1522.77,683.388 1523.33,683.388 1523.89,683.388 1524.45,683.388 1525.01,683.388 1525.57,683.388 1526.13,683.388 1526.69,683.388 1527.25,683.388 1527.81,683.388 1528.36,683.388 1528.92,683.388 1529.48,683.388 1530.04,683.388 1530.6,683.388 1531.16,683.388 1531.72,683.388 1532.28,683.388 1532.84,683.388 1533.4,683.388 1533.96,683.388 1534.52,683.388 1535.08,683.388 1535.63,683.388 1536.19,683.388 1536.75,683.388 1537.31,683.388 1537.87,683.388 1538.43,683.388 1538.99,683.388 1539.55,683.388 1540.11,683.388 1540.67,683.388 1541.23,683.388 1541.79,683.388 1542.35,683.388 1542.9,683.388 1543.46,683.388 1544.02,683.388 1544.58,683.388 1545.14,683.388 1545.7,683.388 1546.26,683.388 1546.82,683.388 1547.38,683.388 1547.94,683.388 1548.5,683.388 1549.06,683.388 1549.62,683.388 1550.18,683.388 1550.73,683.388 1551.29,683.388 1551.85,683.388 1552.41,683.388 1552.97,683.388 1553.53,683.388 1554.09,683.388 1554.65,683.388 1555.21,683.388 1555.77,683.388 1556.33,683.388 1556.89,683.388 1557.45,683.388 1558,683.388 1558.56,683.388 1559.12,683.388 1559.68,683.388 1560.24,683.388 1560.8,683.388 1561.36,683.388 1561.92,683.388 1562.48,683.388 1563.04,683.388 1563.6,683.388 1564.16,683.388 1564.72,683.388 1565.28,683.388 1565.83,683.388 1566.39,683.388 1566.95,683.388 1567.51,683.388 1568.07,683.388 1568.63,683.388 1569.19,683.388 1569.75,683.388 1570.31,683.388 1570.87,683.388 1571.43,683.388 1571.99,683.388 1572.55,683.388 1573.1,683.388 1573.66,683.388 1574.22,683.388 1574.78,683.388 1575.34,683.388 1575.9,683.388 1576.46,683.388 1577.02,683.388 1577.58,683.388 1578.14,683.388 1578.7,683.388 1579.26,683.388 1579.82,683.388 1580.37,683.388 1580.93,683.388 1581.49,683.388 1582.05,683.388 1582.61,683.388 1583.17,683.388 1583.73,683.388 1584.29,683.388 1584.85,683.388 1585.41,683.388 1585.97,683.388 1586.53,683.388 1587.09,683.388 1587.65,683.388 1588.2,683.388 1588.76,683.388 1589.32,683.388 1589.88,683.388 1590.44,683.388 1591,683.388 1591.56,683.388 1592.12,683.388 1592.68,683.388 1593.24,683.388 1593.8,683.388 1594.36,683.388 1594.92,683.388 1595.47,683.388 1596.03,683.388 1596.59,683.388 1597.15,683.388 1597.71,683.388 1598.27,683.388 1598.83,683.388 1599.39,683.388 1599.95,683.388 1600.51,683.388 1601.07,683.388 1601.63,683.388 1602.19,683.388 1602.74,683.388 1603.3,683.388 1603.86,683.388 1604.42,683.388 1604.98,683.388 1605.54,683.388 1606.1,683.388 1606.66,683.388 1607.22,683.388 1607.78,683.388 1608.34,683.388 1608.9,683.388 1609.46,683.388 1610.02,683.388 1610.57,683.388 1611.13,683.388 1611.69,683.388 1612.25,683.388 1612.81,683.388 1613.37,683.388 1613.93,683.388 1614.49,683.388 1615.05,683.388 1615.61,683.388 1616.17,683.388 1616.73,683.388 1617.29,683.388 1617.84,683.388 1618.4,683.388 1618.96,683.388 1619.52,683.388 1620.08,683.388 1620.64,683.388 1621.2,683.388 1621.76,683.388 1622.32,683.388 1622.88,683.388 1623.44,683.388 1624,683.388 1624.56,683.388 1625.11,683.388 1625.67,683.388 1626.23,683.388 1626.79,683.388 1627.35,683.388 1627.91,683.388 1628.47,683.388 1629.03,683.388 1629.59,683.388 1630.15,683.388 1630.71,683.388 1631.27,683.388 1631.83,683.388 1632.39,683.388 1632.94,683.388 1633.5,683.388 1634.06,683.388 1634.62,683.388 1635.18,683.388 1635.74,683.388 1636.3,683.388 1636.86,683.388 1637.42,683.388 1637.98,683.388 1638.54,683.388 1639.1,683.388 1639.66,683.388 1640.21,683.388 1640.77,683.388 1641.33,683.388 1641.89,683.388 1642.45,683.388 1643.01,683.388 1643.57,683.388 1644.13,683.388 1644.69,683.388 1645.25,683.388 1645.81,683.388 1646.37,683.388 1646.93,683.388 1647.48,683.388 1648.04,683.388 1648.6,683.388 1649.16,683.388 1649.72,683.388 1650.28,683.388 1650.84,683.388 1651.4,683.388 1651.96,683.388 1652.52,683.388 1653.08,683.388 1653.64,683.388 1654.2,683.388 1654.76,683.388 1655.31,683.388 1655.87,683.388 1656.43,683.388 1656.99,683.388 1657.55,683.388 1658.11,683.388 1658.67,683.388 1659.23,683.388 1659.79,683.388 1660.35,683.388 1660.91,683.388 1661.47,683.388 1662.03,683.388 1662.58,683.388 1663.14,683.388 1663.7,683.388 1664.26,683.388 1664.82,683.388 1665.38,683.388 1665.94,683.388 1666.5,683.388 1667.06,683.388 1667.62,683.388 1668.18,683.388 1668.74,683.388 1669.3,683.388 1669.85,683.388 1670.41,683.388 1670.97,683.388 1671.53,683.388 1672.09,683.388 1672.65,683.388 1673.21,683.388 1673.77,683.388 1674.33,683.388 1674.89,683.388 1675.45,683.388 1676.01,683.388 1676.57,683.388 1677.13,683.388 1677.68,683.388 1678.24,683.388 1678.8,683.388 1679.36,683.388 1679.92,683.388 1680.48,683.388 1681.04,683.388 1681.6,683.388 1682.16,683.388 1682.72,683.388 1683.28,683.388 1683.84,683.388 1684.4,683.388 1684.95,683.388 1685.51,683.388 1686.07,683.388 1686.63,683.388 1687.19,683.388 1687.75,683.388 1688.31,683.388 1688.87,683.388 1689.43,683.388 1689.99,683.388 1690.55,683.388 1691.11,683.388 1691.67,683.388 1692.23,683.388 1692.78,683.388 1693.34,683.388 1693.9,683.388 1694.46,683.388 1695.02,683.388 1695.58,683.388 1696.14,683.388 1696.7,683.388 1697.26,683.388 1697.82,683.388 1698.38,683.388 1698.94,683.388 1699.5,683.388 1700.05,683.388 1700.61,683.388 1701.17,683.388 1701.73,683.388 1702.29,683.388 1702.85,683.388 1703.41,683.388 1703.97,683.388 1704.53,683.388 1705.09,683.388 1705.65,683.388 1706.21,683.388 1706.77,683.388 1707.32,683.388 1707.88,683.388 1708.44,683.388 1709,683.388 1709.56,683.388 1710.12,683.388 1710.68,683.388 1711.24,683.388 1711.8,683.388 1712.36,683.388 1712.92,683.388 1713.48,683.388 1714.04,683.388 1714.6,683.388 1715.15,683.388 1715.71,683.388 1716.27,683.388 1716.83,683.388 1717.39,683.388 1717.95,683.388 1718.51,683.388 1719.07,683.388 1719.63,683.388 1720.19,683.388 1720.75,683.388 1721.31,683.388 1721.87,683.388 1722.42,683.388 1722.98,683.388 1723.54,683.388 1724.1,683.388 1724.66,683.388 1725.22,683.388 1725.78,683.388 1726.34,683.388 1726.9,683.388 1727.46,683.388 1728.02,683.388 1728.58,683.388 1729.14,683.388 1729.69,683.388 1730.25,683.388 1730.81,683.388 1731.37,683.388 1731.93,683.388 1732.49,683.388 1733.05,683.388 1733.61,683.388 1734.17,683.388 1734.73,683.388 1735.29,683.388 1735.85,683.388 1736.41,683.388 1736.97,683.388 1737.52,683.388 1738.08,683.388 1738.64,683.388 1739.2,683.388 1739.76,683.388 1740.32,683.388 1740.88,683.388 1741.44,683.388 1742,683.388 1742.56,683.388 1743.12,683.388 1743.68,683.388 1744.24,683.388 1744.79,683.388 1745.35,683.388 1745.91,683.388 1746.47,683.388 1747.03,683.388 1747.59,683.388 1748.15,683.388 1748.71,683.388 1749.27,683.388 1749.83,683.388 1750.39,683.388 1750.95,683.388 1751.51,683.388 1752.06,683.388 1752.62,683.388 1753.18,683.388 1753.74,683.388 1754.3,683.388 1754.86,683.388 1755.42,683.388 1755.98,683.388 1756.54,683.388 1757.1,683.388 1757.66,683.388 1758.22,683.388 1758.78,683.388 1759.34,683.388 1759.89,683.388 1760.45,683.388 1761.01,683.388 1761.57,683.388 1762.13,683.388 1762.69,683.388 1763.25,683.388 1763.81,683.388 1764.37,683.388 1764.93,683.388 1765.49,683.388 1766.05,683.388 1766.61,683.388 1767.16,683.388 1767.72,683.388 1768.28,683.388 1768.84,683.388 1769.4,683.388 1769.96,683.388 1770.52,683.388 1771.08,683.388 1771.64,683.388 1772.2,683.388 1772.76,683.388 1773.32,683.388 1773.88,683.388 1774.43,683.388 1774.99,683.388 1775.55,683.388 1776.11,683.388 1776.67,683.388 1777.23,683.388 1777.79,683.388 1778.35,683.388 1778.91,683.388 1779.47,683.388 1780.03,683.388 1780.59,683.388 1781.15,683.388 1781.71,683.388 1782.26,683.388 1782.82,683.388 1783.38,683.388 1783.94,683.388 1784.5,683.388 1785.06,683.388 1785.62,683.388 1786.18,683.388 1786.74,683.388 1787.3,683.388 1787.86,683.388 1788.42,683.388 1788.98,683.388 1789.53,683.388 1790.09,683.388 1790.65,683.388 1791.21,683.388 1791.77,683.388 1792.33,683.388 1792.89,683.388 1793.45,683.388 1794.01,683.388 1794.57,683.388 1795.13,683.388 1795.69,683.388 1796.25,683.388 1796.8,683.388 1797.36,683.388 1797.92,683.388 1798.48,683.388 1799.04,683.388 1799.6,683.388 1800.16,683.388 1800.72,683.388 1801.28,683.388 1801.84,683.388 1802.4,683.388 1802.96,683.388 1803.52,683.388 1804.08,683.388 1804.63,683.388 1805.19,683.388 1805.75,683.388 1806.31,683.388 1806.87,683.388 1807.43,683.388 1807.99,683.388 1808.55,683.388 1809.11,683.388 1809.67,683.388 1810.23,683.388 1810.79,683.388 1811.35,683.388 1811.9,683.388 1812.46,683.388 1813.02,683.388 1813.58,683.388 1814.14,683.388 1814.7,683.388 1815.26,683.388 1815.82,683.388 1816.38,683.388 1816.94,683.388 1817.5,683.388 1818.06,683.388 1818.62,683.388 1819.18,683.388 1819.73,683.388 1820.29,683.388 1820.85,683.388 1821.41,683.388 1821.97,683.388 1822.53,683.388 1823.09,683.388 1823.65,683.388 1824.21,683.388 1824.77,683.388 1825.33,683.388 1825.89,683.388 1826.45,683.388 1827,683.388 1827.56,683.388 1828.12,683.388 1828.68,683.388 1829.24,683.388 1829.8,683.388 1830.36,683.388 1830.92,683.388 1831.48,683.388 1832.04,683.388 1832.6,683.388 1833.16,683.388 1833.72,683.388 1834.27,683.388 1834.83,683.388 1835.39,683.388 1835.95,683.388 1836.51,683.388 1837.07,683.388 1837.63,683.388 1838.19,683.388 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031528957181911 ± 0.024510897860516377\nProjected Energy: -4.014096368786754 ± (0.0034108317802648003, 0.0035289984791022633)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.466085</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3525e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0329e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.817e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.313e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.645e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.484e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133726\n -0.7590191922770746\n  0.13584182219621255\n  0.1578999869460862\n  0.8767114411781343\n  1.530592997097333\n  1.583573261186734\n  3.0728703303258538\n  3.1256726539518453\n  4.8621072215621775\n  6.260694850380595\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nhatρ^(1)_ij = hat a^_i hat a_j\n\nwhere i and j are the mode\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent {ij, kl} element of the two-particle reduced density matrix:\n\nhatρ^(2)_ij kl =  hat a^_i hat a^_j hat a_l hat a_k \n\nwhere i, j, k, and l are the mode\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
